# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-05-12 16:00+0000\n"
"PO-Revision-Date: 2022-05-17 14:35+0800\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:9
msgid "From the outset, Quarkus has been designed around a container-first philosophy. What this means in concrete terms is that Quarkus applications are optimised for low memory usage and fast startup times in the following ways:"
msgstr "从一开始，Quarkus的设计就围绕着容器优先的理念。这意味着Quarkus应用程序在以下方面进行了优化，以达到低内存使用和快速启动的目的："

#. type: Attribute 'alt' of: <div><div><div><img>
#: upstream/_includes/container-first.html:10
msgid "Quarkus Build Time Principle"
msgstr "Quarkus构建时原则"

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/container-first.html:13
msgid "Build Time Processing"
msgstr "构建时处理"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:14
msgid "The central idea behind Quarkus is to do at build-time what traditional frameworks do at runtime: configuration parsing, classpath scanning, feature toggle based on classloading, and so on."
msgstr "Quarkus的中心思想是在构建时做传统框架在运行时做的事情：配置解析、classpath扫描、基于classloading的功能切换，等等。"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:15
msgid "As much processing as possible is done at build time; thus, your application only contains the classes used at runtime. In traditional frameworks, all the classes required to perform the initial application deployment hang around for the application’s life, even though they are only used once. With Quarkus, they are not even loaded into the production JVM! Quarkus does not stop here. During the build-time processing, it prepares the initialization of all components used by your application. It results in less memory usage and faster startup time as all metadata processing has already been done."
msgstr "尽可能将更多的处理在构建时完成；因此，你的应用程序只包含在运行时使用的类。在传统的框架中，所有执行初始应用部署所需的类都在应用的生命周期中存在，尽管它们只被使用一次。在Quarkus中，它们甚至不会被加载到生产用的JVM中。Quarkus并没有到此为止。在构建时的处理过程中，它为你的应用程序使用的所有组件的初始化做准备。由于所有的元数据处理都已经完成，这带来了更少的内存使用和更快的启动时间。"

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/container-first.html:17
msgid "Reduction in Reflection Usage"
msgstr "减少反射的使用"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:18
msgid "As much as possible Quarkus tries to avoid reflection, reducing startup time and memory usage. During the built-time processing, extensions can analyze the application code and the classes available on the classpath and replace reflection calls with regular invocations. The usage of dynamic proxies is also prevented by using generating custom proxy at build time."
msgstr "Quarkus尽可能地避免反射，减少启动时间和内存使用。在构建时的处理过程中，扩展可以分析应用程序代码和classpath上可用的类，并以常规调用取代反射调用。通过在构建时使用生成的自定义代理，也可以防止使用动态代理。"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:19
msgid "Arc, the dependency injection framework used by Quarkus, eliminates all the reflection calls and deduces the injection graph at build time. So, when the application starts, no expensive lookups; it’s done already!"
msgstr "Arc是Quarkus使用的依赖注入框架，它消除了所有的反射调用，并在构建时推断出注入图。因此，当应用程序启动时，不需要昂贵的查找，它已经完成了!"

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/container-first.html:21
msgid "First-Class Support for GraalVM Native Images"
msgstr "优秀的对GraalVM原生镜像支持"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:22
msgid "GraalVM Native Executable support has been an essential part of the design for Quarkus from the beginning. When an application is compiled down to a native executable, it starts much faster and can run with a much smaller heap than a standard JVM. The native compiler uses aggressive dead-code elimination techniques to only embed the parts of the JVM and classes that are absolutely required by your application. Quarkus makes building optimized native executables plain easy. The build-time approach allows Quarkus to collect enough metadata on your application to fine-tune the compilation. No <code>-H:+ReportUnsupportedElementsAtRuntime</code> flag, no fallback, no compromise!"
msgstr "GraalVM原生可执行文件支持从一开始就是Quarkus设计的重要组成部分。当一个应用程序被编译成一个原生可执行文件时，它的启动速度要快得多，并且可以在比标准JVM小得多的堆中运行。原生编译器使用积极的死代码消除技术，只嵌入JVM的部分和应用程序绝对需要的类。Quarkus使构建优化的原生可执行文件变得非常容易。构建时的方法允许Quarkus在你的应用程序上收集足够的元数据，以便对编译进行微调。没有<code>-H:+ReportUnsupportedElementsAtRuntime</code>标志，没有回退，没有妥协！"

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/container-first.html:24
msgid "Native Image Pre-Boot"
msgstr "原生镜像预启动"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:25
msgid "We pre-boot as many of the frameworks as possible during the native compilation of a Quarkus application. It means that the resulting native executable has already run most of the startup code and serialized the result into the executable: even faster startup!"
msgstr "在Quarkus应用程序的原生编译过程中，我们尽可能多地对框架进行预启动。这意味着产生的原生可执行文件已经运行了大部分的启动代码，并将结果序列化到可执行文件中：启动速度更快！"

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/container-first.html:27
msgid "Kubernetes, but also bare metal"
msgstr "Kubernetes，但也包括裸金属环境"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:28
msgid "All the techniques allowing reducing the memory usage and provide faster startup times are not only advantageous in containers. Even on bare metal, it would reduce your memory pressure, and it’s always pleasant to not have to wait 10 seconds to see your application running."
msgstr "所有允许减少内存使用和提供更快的启动时间的技术，不仅在容器中是有利的。即使在裸金属环境上，它也会减少你的内存压力，而且不必等待10秒就能看到你的应用程序运行，这总是令人愉快的。"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:29
msgid "When Quarkus was designed, we didn’t focus only on containers but also on deploying Quarkus applications on container orchestrators such as Kubernetes. Quarkus build-time processing also generates the Kubernetes metadata, so your application is ready to be deployed on Kubernetes. Runtime capabilities such as health checks and metrics are exposed out of the box. Quarkus collects all the required metadata at build time to create the Kubernetes deployment descriptor and produce a container image. A single command line can deploy your application onto your Kubernetes cluster."
msgstr "在设计Quarkus时，我们不仅关注容器，还关注将Quarkus应用程序部署到容器协调器(如Kubernetes)上。Quarkus构建时处理还会生成Kubernetes元数据，这样就可以将应用程序部署到Kubernetes上了。运行时功能(如健康检查和指标)是开箱即用的。Quarkus在构建时收集所有必需的元数据，以创建Kubernetes部署描述符并生成容器镜像。一个命令行就可以将应用程序部署到Kubernetes集群上。"
