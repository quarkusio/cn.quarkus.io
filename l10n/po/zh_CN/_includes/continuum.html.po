# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 16:00+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:7
#, fuzzy
msgid "For years, the client-server architecture has been the de-facto standard to build applications. But a significant shift happened. The <em>one model rules them all</em> age is over. A new range of applications and architectural styles have emerged and transformed how code is written and how applications are deployed and executed. HTTP microservices, reactive applications, event-driven architecture, and serverless are now central players in modern systems."
msgstr "多年来，客户-服务器架构一直是构建应用程序的事实标准。但是，一个重大的转变发生了。<em>一种模式统治一切</em>的时代已经过去。一系列新的应用程序和架构风格已经出现，并改变了代码的编写方式以及应用程序的部署和执行方式。HTTP微服务、反应式应用、事件驱动架构和无服务器现在是现代系统的核心角色。"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:10
#, fuzzy
msgid "Quarkus has been designed with this new world in mind and provides first-class support for these different paradigms. That does not mean you cannot build monoliths with Quarkus; you can do it smoothly. On the contrary, it means that the Quarkus development model morphs to adapt itself to the type of application you are developing, monolith, microservice, reactive, event-driven, functions…"
msgstr "Quarkus的设计考虑到了这个新的世界，并为这些不同的范式提供了一流的支持。这并不意味着你不能用Quarkus建立单体；你可以顺利地做到这一点。相反，这意味着Quarkus的开发模型会变形，以适应你正在开发的应用程序的类型，单片机、微服务、反应式、事件驱动、功能......"

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/continuum.html:11
#, fuzzy
msgid "<a class=\"anchor\" href=\"#http-microservices\"></a>HTTP microservices"
msgstr "<a class=\"anchor\" href=\"#http-microservices\"></a>HTTP微服务"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:12
#, fuzzy
msgid "Let’s start with the basics: HTTP microservices. In this context, you need to develop an HTTP endpoint, often called REST or CRUD. You process incoming HTTP requests, and to do so you often need to rely on other services, such as databases, or another HTTP service."
msgstr "让我们从最基本的开始：HTTP微服务。在这种情况下，你需要开发一个HTTP端点，通常称为REST或CRUD。你处理传入的HTTP请求，而要做到这一点，你往往需要依靠其他服务，如数据库，或另一个HTTP服务。"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:13
#, fuzzy
msgid "For this type of application, Quarkus relies on well-known standards such as JAX-RS, JPA and MicroProfile Rest Client, but also Hibernate with Panache to simplify interactions with databases."
msgstr "对于这种类型的应用，Quarkus依赖于众所周知的标准，如JAX-RS、JPA和MicroProfile Rest Client，但也有Hibernate与Panache来简化与数据库的交互。"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:14
#, fuzzy
msgid "Let’s take a very simple application handling <em>elements</em> from the periodic table. The code would be something like:"
msgstr "让我们来看看一个非常简单的处理周期表中<em>元素</em>的应用程序。代码将是这样的。"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:15
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/elements\"</span>)\n"
"        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ElementResource</span> </span>{\n"
"\n"
"    <span class=\"hljs-meta\">@GET</span>\n"
"    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> List&lt;Element&gt; <span class=\"hljs-title\">getAll</span><span class=\"hljs-params\">()</span> </span>{\n"
"        <span class=\"hljs-keyword\">return</span> Element.listAll();\n"
"    }\n"
"\n"
"    <span class=\"hljs-meta\">@GET</span>\n"
"    <span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/{position}\"</span>)\n"
"    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Element <span class=\"hljs-title\">getOne</span><span class=\"hljs-params\">(@PathParam(<span class=\"hljs-string\">\"position\"</span>)</span> <span class=\"hljs-keyword\">int</span> position) </span>{\n"
"        Element element = Element.find(<span class=\"hljs-string\">\"position\"</span>, position).firstResult();\n"
"        <span class=\"hljs-keyword\">if</span> (element == <span class=\"hljs-keyword\">null</span>) {\n"
"            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> WebApplicationException(<span class=\"hljs-string\">\"Element with position \"</span> + position + <span class=\"hljs-string\">\" does not exist.\"</span>, <span class=\"hljs-number\">404</span>);\n"
"        }\n"
"        <span class=\"hljs-keyword\">return</span> element;\n"
"    }\n"
"\n"
"    <span class=\"hljs-meta\">@POST</span>\n"
"    <span class=\"hljs-meta\">@Transactional</span>\n"
"    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title\">create</span><span class=\"hljs-params\">(Element element)</span> </span>{\n"
"        element.persist();\n"
"        <span class=\"hljs-keyword\">return</span> Response.ok(element).status(<span class=\"hljs-number\">201</span>).build();\n"
"    }\n"
"\n"
"    <span class=\"hljs-comment\">//...</span>\n"
"}</code>"
msgstr "<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/elements\"</span>) <span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ElementResource</span> </span>{"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:42
#, fuzzy
msgid "If you are a Java EE or Spring user, this development model should look familiar.  You expose a resource containing methods annotated with <code>@GET</code>, <code>@POST</code>…&ZeroWidthSpace;&ZeroWidthSpace; to handle the different requests.  The path is specified using the <code>@Path</code> annotation.  Quarkus also supports <a href=\"https://quarkus.io/guides/spring-web\">Spring controller</a> annotations such as <code>@GetMapping</code> or <code>@RestController</code>."
msgstr "如果你是一个Java EE或Spring的用户，这个开发模型应该看起来很熟悉。你暴露了一个资源，其中包含有<code>@GET</code>, <code>@POST</code>...注释的方法来处理不同的请求。路径是使用<code>@Path</code>注解指定的。Quarkus还支持<a href=\"https://quarkus.io/guides/spring-web\">Spring控制器</a>注释，如<code>@GetMapping</code>或<code>@RestController</code>。"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:47
#, fuzzy
msgid "You can use the JPA entity manager directly.  Panache proposes an alternative removing boilerplate and exposing an active record and repository models."
msgstr "你可以直接使用JPA实体管理器。Panache提出了一个替代方案，去掉了模板，暴露了一个活跃的记录和存储库模型。"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:50
#, fuzzy
msgid "With Panache, the <code>Element</code> class would be as simple as:"
msgstr "有了Panache，<code>Element</code>类就会像这样简单。"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:53
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Entity</span>\n"
"<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Element</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">PanacheEntity</span> </span>{\n"
"\n"
"    <span class=\"hljs-keyword\">public</span> String name;\n"
"    <span class=\"hljs-keyword\">public</span> String symbol;\n"
"    <span class=\"hljs-meta\">@Column</span>(unique = <span class=\"hljs-keyword\">true</span>)\n"
"    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> position;\n"
"}</code>"
msgstr "<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Entity</span> <span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Element</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">PanacheEntity</span> </span>{"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:62
#, fuzzy
msgid "Microservices tend to come in systems.  Let’s now imagine you need to access another HTTP endpoint.  You can use an HTTP client directly; this is nothing more than repeating boilerplate code.  Quarkus provides a way to call HTTP endpoints easily using the <a href=\"https://quarkus.io/guides/rest-client\">MicroProfile Rest Client API</a>."
msgstr "微服务往往是以系统的形式出现的。现在让我们想象一下，你需要访问另一个HTTP端点。你可以直接使用HTTP客户端；这不过是在重复模板代码。Quarkus提供了一种方法，可以使用<a href=\"https://quarkus.io/guides/rest-client\">MicroProfile Rest Client API</a>轻松调用HTTP端点。"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:67
#, fuzzy
msgid "First declare your service as follows:"
msgstr "首先声明你的服务如下。"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:69
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/elements\"</span>)\n"
"<span class=\"hljs-meta\">@RegisterRestClient</span>(configKey=<span class=\"hljs-string\">\"element-service\"</span>)\n"
"<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">ElementService</span> </span>{\n"
"\n"
"    <span class=\"hljs-meta\">@GET</span>\n"
"    <span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/{position}\"</span>)\n"
"    <span class=\"hljs-function\">Element <span class=\"hljs-title\">getElement</span><span class=\"hljs-params\">(@PathParam(<span class=\"hljs-string\">\"position\"</span>)</span> <span class=\"hljs-keyword\">int</span> position)</span>;\n"
"}</code>"
msgstr "<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/elements\"</span>) <span class=\"hljs-meta\">@RegisterRestClient</span>(configKey=<span class=\"hljs-string\"> \"element-service\"</span>)。\"element-service\"</span>) <span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\">interface</span> <span class=\"hljs-title\">ElementService</span></span>{"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:78
#, fuzzy
msgid "For each call you are intending to do, add a method and use annotations to describe the behavior.  You can combine the REST Client with the <a href=\"https://quarkus.io/guides/smallrye-fault-tolerance\">fault tolerance extension</a> to handle failure gracefully.  Then, in your resource, just use the <code>ElementService</code> interface:"
msgstr "对于你打算做的每个调用，添加一个方法并使用注解来描述行为。您可以将REST客户端与<a href=\"https://quarkus.io/guides/smallrye-fault-tolerance\">容错扩展</a>结合起来，以优雅地处理失败。然后，在你的资源中，只需使用<code>ElementService</code>接口。"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:82
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/elem\"</span>)\n"
"<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ElementResource</span> </span>{\n"
"\n"
"    <span class=\"hljs-meta\">@RestClient</span>\n"
"    ElementService elements;\n"
"\n"
"    <span class=\"hljs-meta\">@GET</span>\n"
"    <span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/{position}\"</span>)\n"
"    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Element <span class=\"hljs-title\">name</span><span class=\"hljs-params\">(@PathParam(<span class=\"hljs-string\">\"position\"</span>)</span> <span class=\"hljs-keyword\">int</span> position) </span>{\n"
"        <span class=\"hljs-keyword\">return</span> elements.getElement(position);\n"
"    }\n"
"}</code>"
msgstr "<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/elem\"</span>) <span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ElementResource</span> </span>{"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:94
#, fuzzy
msgid "But you may be wondering where the URL is configured as it’s not in the code. Remember, it must not be hard-coded because the URL likely depends on the environment. The URL is configured in the application configuration:"
msgstr "但你可能想知道URL是在哪里配置的，因为它不在代码中。记住，它不能是硬编码的，因为URL很可能取决于环境。URL是在应用程序配置中配置的。"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:96
#, fuzzy, no-wrap
msgid "<code class=\"language-text hljs\" data-lang=\"text\">element-service/mp-rest/url=http://localhost:9001</code>"
msgstr "<code class=\"language-text hljs\" data-lang=\"text\">element-service/mp-rest/url http://localhost:9001</code>"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:98
#, fuzzy
msgid "The URL can now be updated during the deployment or at launch time using system properties or environment variables."
msgstr "现在可以在部署期间或在启动时使用系统属性或环境变量更新URL。"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:100
#, fuzzy
msgid "Quarkus is not limited to HTTP.  You can use <a href=\"https://quarkus.io/guides/grpc-getting-started\">gRPC</a> or <a href=\"https://quarkus.io/guides/smallrye-graphql\">GraphQL</a>, two prominent alternatives in the microservice space."
msgstr "Quarkus并不局限于HTTP。您可以使用<a href=\"https://quarkus.io/guides/grpc-getting-started\">gRPC</a>或<a href=\"https://quarkus.io/guides/smallrye-graphql\">GraphQL</a>，这是微服务领域的两个突出的替代方案。"

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/continuum.html:103
#, fuzzy
msgid "<a class=\"anchor\" href=\"#being-reactive\"></a>Being reactive"
msgstr "<a class=\"anchor\" href=\"#being-reactive\"></a>being reactive"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:105
#, fuzzy
msgid "Application requirements have changed drastically over the last few years.  For any application to succeed in the era of cloud computing, Big Data, or IoT, going reactive is increasingly becoming the architecture style to follow."
msgstr "在过去的几年里，应用需求发生了巨大的变化。任何应用要想在云计算、大数据或物联网时代取得成功，采取反应式的做法正日益成为应遵循的架构风格。"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:108
#, fuzzy
msgid "Today’s users embrace applications with milliseconds of response time, 100% uptime, lower latency, push data instead of pull, higher throughput, and elasticity. However, these features are nearly impossible to achieve using yesterday’s software architecture without a considerable investment in resources, infrastructure, and tooling. The world changed, and having dozens of servers, long response times (&gt; 500 ms), downtime due to maintenance or waterfalls of failures does not meet the expected user experience."
msgstr "今天的用户接受具有几毫秒响应时间、100%正常运行时间、更低延迟、推送数据而不是拉动、更高的吞吐量和弹性的应用程序。然而，如果不对资源、基础设施和工具进行大量投资，使用昨天的软件架构几乎不可能实现这些功能。世界变了，拥有几十台服务器、较长的响应时间（>500毫秒）、因维护或瀑布式的故障而导致的停机时间，并不能满足预期的用户体验。"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:110
#, fuzzy
msgid "Quarkus aids you on your journey to reactive.  Quarkus is based on a <a href=\"https://quarkus.io/version/main/guides/quarkus-reactive-architecture\">reactive core</a> allowing your application to mix reactive and imperative components.  As an example, you can implement reactive HTTP endpoint using the <a href=\"https://quarkus.io/guides/resteasy-reactive\">RESTEasy Reactive extension</a> as follows:"
msgstr "Quarkus可以帮助您实现反应性的旅程。Quarkus基于<a href=\"https://quarkus.io/version/main/guides/quarkus-reactive-architecture\">反应式核心</a>，允许您的应用程序混合反应式和命令式组件。例如，您可以使用<a href=\"https://quarkus.io/guides/resteasy-reactive\">RESTEasy Reactive扩展</a>实现反应式HTTP端点，具体如下。"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:113
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@GET</span>\n"
"<span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/elements/{position}\"</span>)\n"
"<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Uni&lt;Element&gt; <span class=\"hljs-title\">getElement</span><span class=\"hljs-params\">(@PathParam(<span class=\"hljs-string\">\"position\"</span>)</span> <span class=\"hljs-keyword\">int</span> position) </span>{\n"
"    <span class=\"hljs-keyword\">return</span> elements.getElement(position)\n"
"        .onFailure().recoverWithItem(FALLBACK);\n"
"}</code>"
msgstr "<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@GET</span> <span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/elements/{position}\"</span>) <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Uni</span>/span>）</span> <span class=\"hljs-keyword\">int</span> position）</span>{ <span class=\"hljs-keyword\">return</span> elements.getElement(position) .onFailure().recoverWithItem(FALLBACK); }</code>"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:119
#, fuzzy
msgid "Thanks to the <a href=\"https://quarkus.io/version/main/guides/mutiny-primer\">Mutiny Reactive API</a> , you can compose asynchronous operations and complete the result when everything is done without blocking the I/O threads.  This greatly improves resource consumption and elasticity.  Most Quarkus APIs are available in both imperative and reactive.  As example, you can use the reactive version of the REST Client:"
msgstr "由于<a href=\"https://quarkus.io/version/main/guides/mutiny-primer\">Mutiny Reactive API</a>，你可以组成异步操作，并在不阻塞I/O线程的情况下完成一切结果。这大大提高了资源消耗和弹性。大多数Quarkus API都可以使用命令式和反应式两种方式。例如，你可以使用REST客户端的反应式版本。"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:123
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/elements\"</span>)\n"
"<span class=\"hljs-meta\">@RegisterRestClient</span>(configKey=<span class=\"hljs-string\">\"element-service\"</span>)\n"
"<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">ElementService</span> </span>{\n"
"\n"
"    <span class=\"hljs-meta\">@GET</span>\n"
"    <span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/{position}\"</span>)\n"
"    <span class=\"hljs-function\">Uni&lt;Element&gt; <span class=\"hljs-title\">getElement</span><span class=\"hljs-params\">(@PathParam(<span class=\"hljs-string\">\"position\"</span>)</span> <span class=\"hljs-keyword\">int</span> position)</span>;\n"
"}</code>"
msgstr "<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/elements\"</span>) <span class=\"hljs-meta\">@RegisterRestClient</span>(configKey=<span class=\"hljs-string\"> \"element-service\"</span>)。\"element-service\"</span>) <span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\">interface</span> <span class=\"hljs-title\">ElementService</span></span>{"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:131
#, fuzzy
msgid "But, what about streams? Generating a <em>server-sent event</em> response with Quarkus is just as simple:"
msgstr "但是，流呢？用Quarkus生成一个<em>server-sent event</em>响应也同样简单。"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:132
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Produces</span>(MediaType.SERVER_SENT_EVENTS)\n"
"<span class=\"hljs-meta\">@GET</span>\n"
"<span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/events\"</span>)\n"
"<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Multi&lt;String&gt; <span class=\"hljs-title\">stream</span><span class=\"hljs-params\">()</span> </span>{\n"
"    <span class=\"hljs-keyword\">return</span> kafka.toMulti();\n"
"}</code>"
msgstr "<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Produces</span>(MediaType.<span class=\"hljs-meta\">@GET</span> <span class=\"hljs-meta\">@Path</span>（<span class=\"hljs-string\">\"/events\"</span>) <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Multi<String> <span class=\"hljs-title\">stream</span><span class=\"hljs-params\">()</span> </span>{ <span class=\"hljs-keyword\">return</span> kafka.toMulti(); }</code>"

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/continuum.html:138
#, fuzzy
msgid "<a class=\"anchor\" href=\"#event-driven-architectures\"></a>Event-driven Architectures"
msgstr "<a class=\"anchor\" href=\"#event-driven-architectures\"></a>事件驱动的架构"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:139
#, fuzzy
msgid "However, HTTP characteristics prohibit implementing <a href=\"https://www.reactivemanifesto.org/\">reactive systems</a>, where all the components interact using asynchronous messages passing."
msgstr "然而，HTTP的特性禁止实现<a href=\"https://www.reactivemanifesto.org/\">反应式系统</a>，即所有组件都使用异步消息传递进行交互。"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:140
#, fuzzy
msgid "First, you can consume messages from various brokers such as AMQP or Apache Kafka, and process these messages smoothly:"
msgstr "首先，你可以从AMQP或Apache Kafka等各种经纪人那里消费消息，并顺利地处理这些消息。"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:141
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@ApplicationScoped</span>\n"
"<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyEventProcessor</span> </span>{\n"
"\n"
"  <span class=\"hljs-meta\">@Incoming</span>(<span class=\"hljs-string\">\"health\"</span>)\n"
"  <span class=\"hljs-meta\">@Outgoing</span>(<span class=\"hljs-string\">\"heartbeat\"</span>)\n"
"  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">extractHeartbeat</span><span class=\"hljs-params\">(Health health)</span> </span>{\n"
"    <span class=\"hljs-keyword\">return</span> health.getHeartbeat();\n"
"  }\n"
"}</code>"
msgstr "<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@ApplicationScoped</span> <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\"></span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyEventProcessor</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyEventProcessor</span> </span>{"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:150
#, fuzzy
msgid "The <code>@Incoming</code> and <code>@Outgoing</code> annotations are part of <a href=\"https://www.smallrye.io/smallrye-reactive-messaging\">Reactive Messaging</a>.  They are used to express from which <em>channel</em> you are consuming and to which <em>channel</em> you are sending.  Thanks to Reactive Messaging you can consume and send messages from and to different brokers and transports such as HTTP, Kafka, or <a href=\"http://camel.apache.org\">Apache Camel</a>."
msgstr "<code>@Incoming</code> 和 <code>@Outgoing</code> 注释是<a href=\"https://www.smallrye.io/smallrye-reactive-messaging\">Reactive Messaging</a>的一部分。它们用于表达您从哪个<em>信道</em>消费，以及向哪个<em>信道</em>发送。由于反应式消息传递，您可以从不同的经纪商和运输工具（如HTTP、Kafka或<a href=\"http://camel.apache.org\">Apache Camel</a>）消费和发送消息。"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:153
#, fuzzy
msgid "Sometimes you need more than just handling messages one by one.  You can also express your message processing logic using reactive programming as illustrated in the following snippet:"
msgstr "有时你需要的不仅仅是逐一处理消息。你也可以使用反应式编程来表达你的消息处理逻辑，如下面的片段所示。"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:155
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Incoming</span>(<span class=\"hljs-string\">\"health\"</span>)\n"
"<span class=\"hljs-meta\">@Outgoing</span>(<span class=\"hljs-string\">\"output\"</span>)\n"
"<span class=\"hljs-keyword\">public</span> Multi&lt;<span class=\"hljs-function\">Record&lt;String, Measure&gt; <span class=\"hljs-title\">filterState</span><span class=\"hljs-params\">(Multi&lt;Capture&gt; input)</span> </span>{\n"
"    <span class=\"hljs-keyword\">return</span> input\n"
"        .drop().repetitions()\n"
"        .select().where(capture -&gt; capture.value &gt; <span class=\"hljs-number\">0</span>)\n"
"        .onItem().transform(capture -&gt; <span class=\"hljs-keyword\">new</span> Measure(capture.sensor, capture.value, capture.unit))\n"
"        .onItem().transform(measure -&gt; Record.of(measure.sensor, measure));\n"
"}</code>"
msgstr "<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Incoming</span>(<span class=\"hljs-string\">\"health\"</span>)。/span>) <span class=\"hljs-meta\">@Outgoing</span>(<span class=\"hljs-string\">\"output\"</span>) <span class=\"hljs-keyword\">public</span> Multi<<span class=\"hljs-function\">Record<String, Measure> <span class=\"hljs-title\">filterState</span><span class=\"hljs-params\">(Multi<Capture> input)</span> </span>{ <span class=\"hljs-keyword\">return</span> input .drop().repetitions() .select().where(capture -> capture.value > <span class=\"hljs-number\">0</span>) .onItem() 。transform(capture -> <span class=\"hljs-keyword\">new</span> Measure(capture.sensor, capture.value, capture.unit)) .onItem() .transform(measure -> Record.of(measure.sensor, measure)); }</code>"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:164
msgid "As for the reactive APIs exposed by Quarkus, stream manipulation uses the Mutiny API."
msgstr ""

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/continuum.html:165
msgid "<a class=\"anchor\" href=\"#functions-as-a-service-and-serverless\"></a>Functions as a Service and Serverless"
msgstr ""

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:166
msgid "Thanks to their stellar startup time and low memory usage, you can implement functions using Quarkus to be used in serverless environments.  Quarkus provides Funqy, an approach to writing functions that are deployable to various FaaS environments like AWS Lambda, Azure Functions, Knative, and Knative Events (Cloud Events). It is also usable as a standalone service."
msgstr ""

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:168
msgid "With Funqy, a function is just:"
msgstr ""

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:169
#, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-keyword\">import</span> io.quarkus.funqy.Funq;\n"
"\n"
"<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">GreetingFunction</span> </span>{\n"
"    <span class=\"hljs-meta\">@Funq</span>\n"
"    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">greet</span><span class=\"hljs-params\">(String name)</span> </span>{\n"
"       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Hello \"</span> + name;\n"
"    }\n"
"}</code>"
msgstr ""

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:177
msgid "You can use any of the Quarkus features in your function and benefit from the fast startup and low memory utilization. With Quarkus, you can embrace this new world without having to change your programming language."
msgstr ""
