# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 16:00+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:7
msgid "For years, the client-server architecture has been the de-facto standard to build applications. But a significant shift happened. The <em>one model rules them all</em> age is over. A new range of applications and architectural styles have emerged and transformed how code is written and how applications are deployed and executed. HTTP microservices, reactive applications, event-driven architecture, and serverless are now central players in modern systems."
msgstr ""

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:10
msgid "Quarkus has been designed with this new world in mind and provides first-class support for these different paradigms. That does not mean you cannot build monoliths with Quarkus; you can do it smoothly. On the contrary, it means that the Quarkus development model morphs to adapt itself to the type of application you are developing, monolith, microservice, reactive, event-driven, functions…"
msgstr ""

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/continuum.html:11
msgid "<a class=\"anchor\" href=\"#http-microservices\"></a>HTTP microservices"
msgstr ""

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:12
msgid "Let’s start with the basics: HTTP microservices. In this context, you need to develop an HTTP endpoint, often called REST or CRUD. You process incoming HTTP requests, and to do so you often need to rely on other services, such as databases, or another HTTP service."
msgstr ""

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:13
msgid "For this type of application, Quarkus relies on well-known standards such as JAX-RS, JPA and MicroProfile Rest Client, but also Hibernate with Panache to simplify interactions with databases."
msgstr ""

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:14
msgid "Let’s take a very simple application handling <em>elements</em> from the periodic table. The code would be something like:"
msgstr ""

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:15
#, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/elements\"</span>)\n"
"        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ElementResource</span> </span>{\n"
"\n"
"    <span class=\"hljs-meta\">@GET</span>\n"
"    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> List&lt;Element&gt; <span class=\"hljs-title\">getAll</span><span class=\"hljs-params\">()</span> </span>{\n"
"        <span class=\"hljs-keyword\">return</span> Element.listAll();\n"
"    }\n"
"\n"
"    <span class=\"hljs-meta\">@GET</span>\n"
"    <span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/{position}\"</span>)\n"
"    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Element <span class=\"hljs-title\">getOne</span><span class=\"hljs-params\">(@PathParam(<span class=\"hljs-string\">\"position\"</span>)</span> <span class=\"hljs-keyword\">int</span> position) </span>{\n"
"        Element element = Element.find(<span class=\"hljs-string\">\"position\"</span>, position).firstResult();\n"
"        <span class=\"hljs-keyword\">if</span> (element == <span class=\"hljs-keyword\">null</span>) {\n"
"            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> WebApplicationException(<span class=\"hljs-string\">\"Element with position \"</span> + position + <span class=\"hljs-string\">\" does not exist.\"</span>, <span class=\"hljs-number\">404</span>);\n"
"        }\n"
"        <span class=\"hljs-keyword\">return</span> element;\n"
"    }\n"
"\n"
"    <span class=\"hljs-meta\">@POST</span>\n"
"    <span class=\"hljs-meta\">@Transactional</span>\n"
"    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title\">create</span><span class=\"hljs-params\">(Element element)</span> </span>{\n"
"        element.persist();\n"
"        <span class=\"hljs-keyword\">return</span> Response.ok(element).status(<span class=\"hljs-number\">201</span>).build();\n"
"    }\n"
"\n"
"    <span class=\"hljs-comment\">//...</span>\n"
"}</code>"
msgstr ""

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:42
msgid "If you are a Java EE or Spring user, this development model should look familiar.  You expose a resource containing methods annotated with <code>@GET</code>, <code>@POST</code>…&ZeroWidthSpace;&ZeroWidthSpace; to handle the different requests.  The path is specified using the <code>@Path</code> annotation.  Quarkus also supports <a href=\"https://quarkus.io/guides/spring-web\">Spring controller</a> annotations such as <code>@GetMapping</code> or <code>@RestController</code>."
msgstr ""

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:47
msgid "You can use the JPA entity manager directly.  Panache proposes an alternative removing boilerplate and exposing an active record and repository models."
msgstr ""

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:50
msgid "With Panache, the <code>Element</code> class would be as simple as:"
msgstr ""

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:53
#, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Entity</span>\n"
"<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Element</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">PanacheEntity</span> </span>{\n"
"\n"
"    <span class=\"hljs-keyword\">public</span> String name;\n"
"    <span class=\"hljs-keyword\">public</span> String symbol;\n"
"    <span class=\"hljs-meta\">@Column</span>(unique = <span class=\"hljs-keyword\">true</span>)\n"
"    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> position;\n"
"}</code>"
msgstr ""

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:62
msgid "Microservices tend to come in systems.  Let’s now imagine you need to access another HTTP endpoint.  You can use an HTTP client directly; this is nothing more than repeating boilerplate code.  Quarkus provides a way to call HTTP endpoints easily using the <a href=\"https://quarkus.io/guides/rest-client\">MicroProfile Rest Client API</a>."
msgstr ""

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:67
msgid "First declare your service as follows:"
msgstr ""

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:69
#, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/elements\"</span>)\n"
"<span class=\"hljs-meta\">@RegisterRestClient</span>(configKey=<span class=\"hljs-string\">\"element-service\"</span>)\n"
"<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">ElementService</span> </span>{\n"
"\n"
"    <span class=\"hljs-meta\">@GET</span>\n"
"    <span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/{position}\"</span>)\n"
"    <span class=\"hljs-function\">Element <span class=\"hljs-title\">getElement</span><span class=\"hljs-params\">(@PathParam(<span class=\"hljs-string\">\"position\"</span>)</span> <span class=\"hljs-keyword\">int</span> position)</span>;\n"
"}</code>"
msgstr ""

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:78
msgid "For each call you are intending to do, add a method and use annotations to describe the behavior.  You can combine the REST Client with the <a href=\"https://quarkus.io/guides/smallrye-fault-tolerance\">fault tolerance extension</a> to handle failure gracefully.  Then, in your resource, just use the <code>ElementService</code> interface:"
msgstr ""

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:82
#, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/elem\"</span>)\n"
"<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ElementResource</span> </span>{\n"
"\n"
"    <span class=\"hljs-meta\">@RestClient</span>\n"
"    ElementService elements;\n"
"\n"
"    <span class=\"hljs-meta\">@GET</span>\n"
"    <span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/{position}\"</span>)\n"
"    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Element <span class=\"hljs-title\">name</span><span class=\"hljs-params\">(@PathParam(<span class=\"hljs-string\">\"position\"</span>)</span> <span class=\"hljs-keyword\">int</span> position) </span>{\n"
"        <span class=\"hljs-keyword\">return</span> elements.getElement(position);\n"
"    }\n"
"}</code>"
msgstr ""

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:94
msgid "But you may be wondering where the URL is configured as it’s not in the code. Remember, it must not be hard-coded because the URL likely depends on the environment. The URL is configured in the application configuration:"
msgstr ""

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:96
#, no-wrap
msgid "<code class=\"language-text hljs\" data-lang=\"text\">element-service/mp-rest/url=http://localhost:9001</code>"
msgstr ""

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:98
msgid "The URL can now be updated during the deployment or at launch time using system properties or environment variables."
msgstr ""

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:100
msgid "Quarkus is not limited to HTTP.  You can use <a href=\"https://quarkus.io/guides/grpc-getting-started\">gRPC</a> or <a href=\"https://quarkus.io/guides/smallrye-graphql\">GraphQL</a>, two prominent alternatives in the microservice space."
msgstr ""

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/continuum.html:103
msgid "<a class=\"anchor\" href=\"#being-reactive\"></a>Being reactive"
msgstr ""

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:105
msgid "Application requirements have changed drastically over the last few years.  For any application to succeed in the era of cloud computing, Big Data, or IoT, going reactive is increasingly becoming the architecture style to follow."
msgstr ""

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:108
msgid "Today’s users embrace applications with milliseconds of response time, 100% uptime, lower latency, push data instead of pull, higher throughput, and elasticity. However, these features are nearly impossible to achieve using yesterday’s software architecture without a considerable investment in resources, infrastructure, and tooling. The world changed, and having dozens of servers, long response times (&gt; 500 ms), downtime due to maintenance or waterfalls of failures does not meet the expected user experience."
msgstr ""

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:110
msgid "Quarkus aids you on your journey to reactive.  Quarkus is based on a <a href=\"https://quarkus.io/version/main/guides/quarkus-reactive-architecture\">reactive core</a> allowing your application to mix reactive and imperative components.  As an example, you can implement reactive HTTP endpoint using the <a href=\"https://quarkus.io/guides/resteasy-reactive\">RESTEasy Reactive extension</a> as follows:"
msgstr ""

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:113
#, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@GET</span>\n"
"<span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/elements/{position}\"</span>)\n"
"<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Uni&lt;Element&gt; <span class=\"hljs-title\">getElement</span><span class=\"hljs-params\">(@PathParam(<span class=\"hljs-string\">\"position\"</span>)</span> <span class=\"hljs-keyword\">int</span> position) </span>{\n"
"    <span class=\"hljs-keyword\">return</span> elements.getElement(position)\n"
"        .onFailure().recoverWithItem(FALLBACK);\n"
"}</code>"
msgstr ""

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:119
msgid "Thanks to the <a href=\"https://quarkus.io/version/main/guides/mutiny-primer\">Mutiny Reactive API</a> , you can compose asynchronous operations and complete the result when everything is done without blocking the I/O threads.  This greatly improves resource consumption and elasticity.  Most Quarkus APIs are available in both imperative and reactive.  As example, you can use the reactive version of the REST Client:"
msgstr ""

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:123
#, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/elements\"</span>)\n"
"<span class=\"hljs-meta\">@RegisterRestClient</span>(configKey=<span class=\"hljs-string\">\"element-service\"</span>)\n"
"<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">ElementService</span> </span>{\n"
"\n"
"    <span class=\"hljs-meta\">@GET</span>\n"
"    <span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/{position}\"</span>)\n"
"    <span class=\"hljs-function\">Uni&lt;Element&gt; <span class=\"hljs-title\">getElement</span><span class=\"hljs-params\">(@PathParam(<span class=\"hljs-string\">\"position\"</span>)</span> <span class=\"hljs-keyword\">int</span> position)</span>;\n"
"}</code>"
msgstr ""

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:131
msgid "But, what about streams? Generating a <em>server-sent event</em> response with Quarkus is just as simple:"
msgstr ""

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:132
#, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Produces</span>(MediaType.SERVER_SENT_EVENTS)\n"
"<span class=\"hljs-meta\">@GET</span>\n"
"<span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/events\"</span>)\n"
"<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Multi&lt;String&gt; <span class=\"hljs-title\">stream</span><span class=\"hljs-params\">()</span> </span>{\n"
"    <span class=\"hljs-keyword\">return</span> kafka.toMulti();\n"
"}</code>"
msgstr ""

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/continuum.html:138
msgid "<a class=\"anchor\" href=\"#event-driven-architectures\"></a>Event-driven Architectures"
msgstr ""

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:139
msgid "However, HTTP characteristics prohibit implementing <a href=\"https://www.reactivemanifesto.org/\">reactive systems</a>, where all the components interact using asynchronous messages passing."
msgstr ""

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:140
msgid "First, you can consume messages from various brokers such as AMQP or Apache Kafka, and process these messages smoothly:"
msgstr ""

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:141
#, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@ApplicationScoped</span>\n"
"<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyEventProcessor</span> </span>{\n"
"\n"
"  <span class=\"hljs-meta\">@Incoming</span>(<span class=\"hljs-string\">\"health\"</span>)\n"
"  <span class=\"hljs-meta\">@Outgoing</span>(<span class=\"hljs-string\">\"heartbeat\"</span>)\n"
"  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">extractHeartbeat</span><span class=\"hljs-params\">(Health health)</span> </span>{\n"
"    <span class=\"hljs-keyword\">return</span> health.getHeartbeat();\n"
"  }\n"
"}</code>"
msgstr ""

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:150
msgid "The <code>@Incoming</code> and <code>@Outgoing</code> annotations are part of <a href=\"https://www.smallrye.io/smallrye-reactive-messaging\">Reactive Messaging</a>.  They are used to express from which <em>channel</em> you are consuming and to which <em>channel</em> you are sending.  Thanks to Reactive Messaging you can consume and send messages from and to different brokers and transports such as HTTP, Kafka, or <a href=\"http://camel.apache.org\">Apache Camel</a>."
msgstr ""

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:153
msgid "Sometimes you need more than just handling messages one by one.  You can also express your message processing logic using reactive programming as illustrated in the following snippet:"
msgstr ""

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:155
#, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Incoming</span>(<span class=\"hljs-string\">\"health\"</span>)\n"
"<span class=\"hljs-meta\">@Outgoing</span>(<span class=\"hljs-string\">\"output\"</span>)\n"
"<span class=\"hljs-keyword\">public</span> Multi&lt;<span class=\"hljs-function\">Record&lt;String, Measure&gt; <span class=\"hljs-title\">filterState</span><span class=\"hljs-params\">(Multi&lt;Capture&gt; input)</span> </span>{\n"
"    <span class=\"hljs-keyword\">return</span> input\n"
"        .drop().repetitions()\n"
"        .select().where(capture -&gt; capture.value &gt; <span class=\"hljs-number\">0</span>)\n"
"        .onItem().transform(capture -&gt; <span class=\"hljs-keyword\">new</span> Measure(capture.sensor, capture.value, capture.unit))\n"
"        .onItem().transform(measure -&gt; Record.of(measure.sensor, measure));\n"
"}</code>"
msgstr ""

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:164
msgid "As for the reactive APIs exposed by Quarkus, stream manipulation uses the Mutiny API."
msgstr ""

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/continuum.html:165
msgid "<a class=\"anchor\" href=\"#functions-as-a-service-and-serverless\"></a>Functions as a Service and Serverless"
msgstr ""

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:166
msgid "Thanks to their stellar startup time and low memory usage, you can implement functions using Quarkus to be used in serverless environments.  Quarkus provides Funqy, an approach to writing functions that are deployable to various FaaS environments like AWS Lambda, Azure Functions, Knative, and Knative Events (Cloud Events). It is also usable as a standalone service."
msgstr ""

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:168
msgid "With Funqy, a function is just:"
msgstr ""

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:169
#, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-keyword\">import</span> io.quarkus.funqy.Funq;\n"
"\n"
"<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">GreetingFunction</span> </span>{\n"
"    <span class=\"hljs-meta\">@Funq</span>\n"
"    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">greet</span><span class=\"hljs-params\">(String name)</span> </span>{\n"
"       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Hello \"</span> + name;\n"
"    }\n"
"}</code>"
msgstr ""

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:177
msgid "You can use any of the Quarkus features in your function and benefit from the fast startup and low memory utilization. With Quarkus, you can embrace this new world without having to change your programming language."
msgstr ""
