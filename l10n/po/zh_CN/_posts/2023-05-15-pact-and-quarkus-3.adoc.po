# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-05-24 12:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy, no-wrap
msgid "Using Pact and Quarkus to Tame Microservices Testing"
msgstr "使用Pact和Quarkus来驯服微服务测试"

#. type: YAML Front Matter: synopsis
#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy, no-wrap
msgid "With Quarkus 3 and the Quarkiverse Pact extensions, Quarkus can run continuous tests continuously."
msgstr "通过Quarkus 3和Quarkiverse Pact扩展，Quarkus可以连续运行连续测试。"

#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy
msgid ""
"In a microservices architecture, making sure each microservices works is (relatively) easy.\n"
"The microservices are usually small, and easy to test.\n"
"But how do you make sure the microservices work together? How do you know if the system as a whole works?"
msgstr "在微服务架构中，确保每个微服务都能正常运行（相对）容易。微服务通常规模较小，易于测试。但如何确保微服务协同工作？如何知道系统作为一个整体是否能正常运行？"

#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy
msgid ""
"One answer is contract testing.\n"
"Contract testing gives more confidence than testing individual services, but the cost is far lower than end-to-end testing."
msgstr "答案之一就是合同测试。合同测试比测试单项服务更有把握，但成本却远远低于端到端测试。"

#. type: Title ==
#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy, no-wrap
msgid "What's wrong with end-to-end testing?"
msgstr "端到端测试有什么问题？"

#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy
msgid ""
"Even when developing, standing up all the dependencies and consumers for an individual microservice can be hard work.\n"
"Recently, our consulting colleagues received a plea for help from the CTO of a tech startup, who couldn't run his dev stack on a brand new laptop with 64 GB of RAM,\n"
"because the application involved dozens of microservices and they consumed so many resources.\n"
"(If this sounds familiar, Quarkus can help https://www.redhat.com/en/resources/greener-java-applications-detail#section-7[lower the resource consumption of the stack], but that's a different topic!)"
msgstr "即使在开发过程中，为单个微服务建立所有依赖关系和消费者也是一项艰巨的工作。最近，我们的咨询同事收到了一家初创科技公司首席技术官的求助，他无法在配备 64 GB 内存的全新笔记本电脑上运行他的开发堆栈，因为应用程序涉及数十个微服务，而且它们消耗了太多资源。(如果这听起来很熟悉，Quarkus 可以帮助 link:https://www.redhat.com/en/resources/greener-java-applications-detail#section-7[降低堆栈的资源消耗] ，但这是另一个话题了！）。"

#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy
msgid ""
"Teams sometimes address the challenge of local microservices development by providing remote environments into which local code can be injected.\n"
" This is sometimes called https://blog.getambassador.io/testing-microservices-isolating-requests-not-environments-with-telepresence-f22535789253[\"remocal development\"] or telepresence.\n"
"Another, purely local, model, is https://eng.lyft.com/scaling-productivity-on-microservices-at-lyft-part-2-optimizing-for-fast-local-development-9f27a98b47ee[local virtual environments]."
msgstr "团队有时会通过提供可注入本地代码的远程环境来应对本地微服务开发的挑战。这有时被称为 link:https://blog.getambassador.io/testing-microservices-isolating-requests-not-environments-with-telepresence-f22535789253[\"] 远程 link:https://blog.getambassador.io/testing-microservices-isolating-requests-not-environments-with-telepresence-f22535789253[开发 \"] 或远程呈现。另一种纯本地模式是 link:https://eng.lyft.com/scaling-productivity-on-microservices-at-lyft-part-2-optimizing-for-fast-local-development-9f27a98b47ee[本地虚拟环境] 。"

#. type: Plain text
#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy
msgid "While these environments can be useful, they can also be fragile, and managing them often needs a dedicated platform team."
msgstr "虽然这些环境可能是有用的，但它们也可能是脆弱的，而且管理它们往往需要一个专门的平台团队。"

#. type: Title ==
#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy, no-wrap
msgid "What's wrong with mocks?"
msgstr "嘲讽有什么不好？"

#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy
msgid ""
"When having 'real' versions of the rest of the system to test against is too heavy, teams often use mocks or stubs.\n"
"(Mocks and stubs are subtly different, but for simplicity I'll use \"mocks\" to describe both.)\n"
"Mocks have many advantages; they're lightweight and enable unit testing of code with external dependencies.\n"
"However, mocks also have a big disadvantage; there's no guarantee the mock behaves like real the thing.\n"
"Users of a service will bake their own assumptions about how a service behaves into a mock.\n"
"If a service changes, it's up to consuming code to figure out what's changed and update the mocks."
msgstr "当系统其他部分的 \"真实 \"测试版本过于繁重时，团队通常会使用模拟或存根（模拟和存根有细微的区别，但为了简单起见，我使用 \"模拟 \"来描述两者）。Mocks 有很多优点：轻量级，可以对具有外部依赖性的代码进行单元测试。不过，模拟也有一个很大的缺点：不能保证模拟的行为与真实的一样。服务的用户会将自己对服务行为的假设植入到模拟中。如果服务发生变化，消耗代码就会找出变化的地方并更新模拟。"

#. type: Plain text
#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy
msgid "Sometimes, the first time these assumptions are tested is in production."
msgstr "有时，这些假设第一次被测试是在生产中。"

#. type: Title ==
#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy, no-wrap
msgid "Contract tests"
msgstr "合同测试"

#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy
msgid ""
"How can we make a link between the mock being used by a consumer, and the functional validation being done by the provider?\n"
"This is where contract testing helps. A contract testing framework powers two things:"
msgstr "如何将消费者使用的模拟与提供商进行的功能验证联系起来？这就是合约测试的作用所在。合约测试框架能做两件事："

#. type: Plain text
#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy
msgid "A generated mock, which is used by the consumer to validate the consumer code behaves correctly. The mock is generated from the contract and examples."
msgstr "一个生成的模拟，消费者使用它来验证消费者代码的行为是否正确。该模拟是由合同和例子生成的。"

#. type: Plain text
#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy
msgid "Generated functional tests, which is validates the provider behaves as expected. These tests are generated from the same contract and examples as the consumer's mock."
msgstr "生成的功能测试，即验证提供者的行为是否符合预期。这些测试是由与消费者模拟相同的合同和实例生成的。"

#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy
msgid ""
"With https://en.wikipedia.org/wiki/Test-driven_development[Test Driven Development(TDD)], you start with tests (a description of the desired behaviour) and work backwards to an implementation.\n"
"You can do the same thing with contract testing; you start with the contract, which describes what the service needs to do, and work backwards to the implementation.\n"
"This is known as \"contract-first\", and it can be a very effective development technique.\n"
"My colleagues in Red Hat App Dev Consulting have written some great articles about https://appdev.consulting.redhat.com/tracks/contract-first/[how they use contract-first development]."
msgstr "在 link:https://en.wikipedia.org/wiki/Test-driven_development[测试驱动开发（TDD）] 中，您可以从测试（对所需行为的描述）开始，然后倒推到实现。合同测试也是如此；您可以从合同开始，合同描述了服务需要做的事情，然后倒推到实现。这就是所谓的 \"合约优先\"，它是一种非常有效的开发技术。我在 Red Hat App Dev Consulting 的同事写了几篇很棒的文章，介绍了 link:https://appdev.consulting.redhat.com/tracks/contract-first/[他们如何使用 \"契约优先 \"开发方法] 。"

#. type: Title ==
#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy, no-wrap
msgid "Contract test options"
msgstr "合同测试选项"

#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy
msgid ""
"There are a few different contract-testing frameworks out there,\n"
"including Pact, Microcks, Spring Cloud Contract.\n"
"Some teams also build up their own OpenAPI-based toolchains, such as Schemathesis for functional tests, and Prism for the mocking.\n"
"Arguably the most popular contract testing solution is Pact, so it's where the Quarkiverse support for contract testing has started."
msgstr "目前有几种不同的合约测试框架，包括 Pact、Microcks 和 Spring Cloud Contract。有些团队还建立了自己的基于 OpenAPI 的工具链，例如用于功能测试的 Schemathesis 和用于模拟的 Prism。可以说，最流行的合同测试解决方案是 Pact，因此 Quarkiverse 对合同测试的支持也是从 Pact 开始的。"

#. type: Plain text
#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy
msgid "Pact is polyglot, with bindings for almost all popular languages."
msgstr "Pact是多语种的，几乎所有流行语言都有绑定。"

#. type: Plain text
#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy
msgid "It's an integrated solution which provides both mocks for consumers and functional tests for providers."
msgstr "它是一个集成的解决方案，既为消费者提供模拟，也为提供者提供功能测试。"

#. type: Plain text
#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy
msgid "It's standalone, and can be run without standing up any extra services, although a Pact Broker with some nice value-adds is available."
msgstr "它是独立的，可以在不建立任何额外服务的情况下运行，尽管有一个带有一些不错的增值功能的契约经纪人。"

#. type: Plain text
#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy
msgid "Although Pact started as a REST-only solution, it is now https://docs.pact.io/blog/2022/11/11/pact-plugin-framework-launch[pluggable], which allows it to support a range of protocols and transports"
msgstr "尽管Pact一开始只是一个REST解决方案，但它现在是 link:https://docs.pact.io/blog/2022/11/11/pact-plugin-framework-launch[可插拔的] ，这使它能够支持一系列的协议和传输。"

#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy
msgid ""
"The Pact team have a https://pactflow.io/blog/contract-testing-using-json-schemas-and-open-api-part-1/[good overview] of the advantages and disadvantages of schema-based testing\n"
"(such as validation based on an OpenAPI spec) and contract testing."
msgstr "Pact 团队很 link:https://pactflow.io/blog/contract-testing-using-json-schemas-and-open-api-part-1/[好地概述] 了基于模式的测试（如基于 OpenAPI 规范的验证）和合同测试的优缺点。"

#. type: Title ==
#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy, no-wrap
msgid "What's new with Pact and Quarkus"
msgstr "契约》和《夸克》的新内容"

#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy
msgid ""
"Using Pact with Quarkus isn't new; Quarkus contributors made https://github.com/quarkusio/quarkus/commit/70902a005842a083814aea13567b8bc82574a021[several] https://github.com/quarkusio/quarkus/commit/910227622e0e4c51c111872962cfd5364674673a#diff-40752b74da493b2aa06facf4b1ebd7a81736f6318dcfe76ddae90deafa57fad7[classloading adjustments] in Quarkus core to support Pact testing in Quarkus 2.0,\n"
"but this support was limited. In particular, Pact tests couldn't run in continuous testing mode."
msgstr "在 Quarkus 中使用 Pact 并不是什么新鲜事；Quarkus 的贡献者在 Quarkus 2.0 中对 Quarkus 核心进行了 link:https://github.com/quarkusio/quarkus/commit/70902a005842a083814aea13567b8bc82574a021[一些] link:https://github.com/quarkusio/quarkus/commit/910227622e0e4c51c111872962cfd5364674673a#diff-40752b74da493b2aa06facf4b1ebd7a81736f6318dcfe76ddae90deafa57fad7[类负载调整] ，以支持 Pact 测试，但这种支持是有限的。尤其是，Pact 测试无法在连续测试模式下运行。"

#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy
msgid ""
"Quarkus 3.0 moves Pact support from Quarkus core to its own Quarkiverse extension, where it can be deeper.\n"
"Quarkus core also includes classloading changes in the Kotlin extension and some classloading fixes in continuous testing itself.\n"
"These mean that, with the Pact Quarkiverse http://quarkus.io/extensions/io.quarkiverse.pact/quarkus-pact-provider[provider]\n"
"and http://quarkus.io/extensions/io.quarkiverse.pact/quarkus-pact-consumer[consumer extensions] Pact tests work properly with `quarkus test` and `quarkus dev`."
msgstr "Quarkus 3.0 将对 Pact 的支持从 Quarkus core 移到了自己的 Quarkiverse 扩展中，在这里它可以更深入地支持 Pact。Quarkus core 还包括 Kotlin 扩展中的类加载更改，以及持续测试本身的一些类加载修复。这意味着，有了 Pact Quarkiverse link:http://quarkus.io/extensions/io.quarkiverse.pact/quarkus-pact-provider[提供者] 和 link:http://quarkus.io/extensions/io.quarkiverse.pact/quarkus-pact-consumer[消费者扩展] ，Pact 测试就能在 `quarkus test` 和 `quarkus dev` 中正常工作。"

#. type: Plain text
#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy
msgid "To install the consumer extensions, run"
msgstr "要安装消费者扩展，运行"

#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy
msgid "quarkus ext add io.quarkiverse.pact:quarkus-pact-consumer"
msgstr "quarkus ext add io.quarkiverse.pact:quarkus-pact-consumer"

#. type: Plain text
#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy
msgid "The provider extension can be installed with"
msgstr "提供者扩展可以通过以下方式安装"

#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy
msgid "quarkus ext add io.quarkiverse.pact:quarkus-pact-provider"
msgstr "quarkus ext add io.quarkiverse.pact:quarkus-pact-provider"

#. type: Plain text
#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy
msgid "For a deeper dive into contract testing, check out https://www.youtube.com/watch?v=d9CSY8HuZ9U[Quarkus Insights #117]."
msgstr "关于合同测试的更深入研究，请查看 link:https://www.youtube.com/watch?v=d9CSY8HuZ9U[Quarkus Insights #117] 。"

#. type: Title ==
#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy, no-wrap
msgid "Summary"
msgstr "摘要"

#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy
msgid ""
"If you're using microservices, you should seriously consider contract testing.\n"
"With the new Pact extension, Quarkus 3 allows contract tests to be developed using the same\n"
"great workflow as other tests."
msgstr "如果您正在使用微服务，就应该认真考虑合约测试。通过新的 Pact 扩展，Quarkus 3 允许使用与其他测试相同的出色工作流程来开发合约测试。"

#. type: Title ==
#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy, no-wrap
msgid "More resources"
msgstr "更多资源"

#. type: Plain text
#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy
msgid "https://quarkiverse.github.io/quarkiverse-docs/quarkus-pact/dev/index.html[Documentation for the Pact extensions]"
msgstr "link:https://quarkiverse.github.io/quarkiverse-docs/quarkus-pact/dev/index.html[契约扩展的文件]"

#. type: Plain text
#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy
msgid "https://docs.pact.io/implementation_guides/jvm[The Pact JVM binding documentation]"
msgstr "link:https://docs.pact.io/implementation_guides/jvm[Pact JVM绑定文档]"

#. type: Plain text
#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy
msgid "https://quarkus.io/quarkus-workshops/super-heroes/index.html#contract-testing[Contract Testing Module] of the Quarkus Superheroes workshop"
msgstr "夸库斯超级英雄工作室的 link:https://quarkus.io/quarkus-workshops/super-heroes/index.html#contract-testing[合同测试模块]"

#. type: Plain text
#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy
msgid "https://www.youtube.com/watch?v=d9CSY8HuZ9U[Quarkus Insights about the Pact extension]"
msgstr "link:https://www.youtube.com/watch?v=d9CSY8HuZ9U[夸克斯关于契约扩展的洞察力]"

#. type: Plain text
#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy
msgid "https://github.com/holly-cummins/pact-quarkus-sweater-demo[Sample application showing the Quarkus Pact extension]"
msgstr "link:https://github.com/holly-cummins/pact-quarkus-sweater-demo[显示Quarkus Pact扩展的示例应用程序]"

#. type: Plain text
#: _posts/2023-05-15-pact-and-quarkus-3.adoc
#, fuzzy
msgid "https://appdev.consulting.redhat.com/tracks/contract-first/[Contract-first development] (with OpenAPIGenerator, Schemathesis, and Prism)"
msgstr "link:https://appdev.consulting.redhat.com/tracks/contract-first/[合同优先开发] （使用 OpenAPIGenerator、Schemathesis 和 Prism）"
