msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Use Quarkus MCP client to access secure MCP HTTP servers"
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Explain how Quarkus LangChain4j MCP client can access MCP HTTP servers with access tokens"
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Introduction"
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "MCP servers that use the _Streamable HTTP_ or HTTP/SSE transports may require MCP client authentication."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "In the https://quarkus.io/blog/secure-mcp-sse-server/[Getting ready for secure MCP with Quarkus MCP Server] blog post, we explained how to enforce MCP client authentication with the https://github.com/quarkiverse/quarkus-mcp-server[Quarkus MCP Server] and demonstrated how https://quarkus.io/blog/secure-mcp-sse-server/#mcp-server-devui[MCP Server DevUI] can use Keycloak access tokens to access the MCP server in dev mode and how https://quarkus.io/blog/secure-mcp-sse-server/#mcp-inspector[MCP Inspector] and https://quarkus.io/blog/secure-mcp-sse-server/#use-curl-to-access-the-mcp-server[curl] can use GitHub access tokens to access the MCP server in prod mode."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "In this blog post, we will explain how https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html[Quarkus MCP Client] can use access tokens to access secure MCP servers."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "We will show how to log in to Quarkus LangChain4j AI `Poem Service` application with GitHub OAuth2 and have Google AI Gemini use tools with the help from Quarkus MCP Client that can propagate the GitHub access token to the secure Quarkus MCP Server."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Demo architecture"
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "As you can see in the diagram above, the user logs in into the Quarkus REST `Poem Service` application endpoint. To support the user request to create a poem, the `Poem Service` uses `AI Gemini` and requests `MCP Client` to complete a tool call to help `AI Gemini` to find out the name of the logged-in user."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "An essential point is that both `Poem Service` and `MCP Client` are part of the same single Quarkus REST application that only users who logged in with GitHub can access. The users do not login to `MCP Client`, they login to the `Poem Service` application, using the `MCP client` is an implementation detail of how this application completes the user request."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Therefore, this demo does not demonstrate an implementation of the https://modelcontextprotocol.io/specification/2025-03-26/basic/authorization[MCP Authorization] flow which is primarily of interest to public MCP clients implemented as Single-page applications (SPA), such as as Anthropic Claude, that will be able to initiate a user login into an imported MCP server."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "This demo shows a typical `OAuth2` authorization code flow where a user logs-in to a REST endpoint and authorizes it to access another service on the user's behalf. It also strengthens the message about the https://quarkus.io/blog/gemini-personal-assistant/#integrated-ai-security[AI security being an integral part of your application security]."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "For example, let's temporarily update the diagram by removing the `AI Gemini`, replacing `MCP Client` with `REST Client`, `MCP Server` with `Poem Creator service` and `GitHub` with `OAuth2`:"
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "You will very likely find similarities between this diagram and what you do in your projects. It is the OAuth2 authorization code flow in action: the user logs in to the application and authorizes it to access another service offering a poem creation on the user's behalf."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "The demo shows that Quarkus MCP Client can work effectively in such architectures by being able to use access tokens acquired during the user login, without you having to write any custom code."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "We are now ready to start working on the `Secure MCP Client Server` demo."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "You can find the complete project source in the https://github.com/quarkiverse/quarkus-langchain4j/tree/main/samples/secure-mcp-sse-client-server[Quarkus LangChain4j Secure MCP Client Server sample]."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Step 1 - Create and start MCP server"
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "First, let's create a secure Quarkus MCP SSE server."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "If you already created the MCP server https://quarkus.io/blog/secure-mcp-sse-server/#initial-mcp-server[as described] in the the https://quarkus.io/blog/secure-mcp-sse-server/[Getting ready for secure MCP with Quarkus MCP Server] blog post, then you will find instructions below familiar and should be able to reuse the project you created earlier with minor updates."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "MCP server requires authentication to establish Server-Sent Events (SSE) connection and also when invoking the tools. Additionally, the MCP server endpoint that provides access to tools requires that the security identity has a `read:name` permission."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "MCP server maven dependencies"
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Add the following dependencies:"
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "`quarkus-mcp-server-sse` is required to support MCP SSE transport."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "`quarkus-oidc` is required to secure access to MCP SSE endpoints. Its version is defined in the Quarkus BOM."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "`quarkus-hibernate-orm-panache` and `quarkus-jdbc-postgresql` are required to support the <<security-identity-augmentation>>. Their versions are defined in the Quarkus BOM."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "MCP server tool"
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Let's create a tool that can return the name of the currently logged-in user. It can be invoked only if the current MCP request is authenticated but also if the security identity has a `read:name` permission:"
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Provide a tool that can return the name of the current user."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid ""
"Require authenticated tool access with an additional authorization `read:name` permission constraint - yes, the only difference with an unauthenticated MCP server tool is `@PermissionsAllowed(\"read:name\")`, that's it!\n"
"See also how the main MCP SSE endpoint is secured in the <<mcp-server-configuration>> section below."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Use the injected `SecurityIdentity` to return the current user's name. Alternatively, it can be acquired from the injected `quarkus.oidc.UserInfo`."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Security Identity Augmentation"
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "To meet the `@PermissionsAllowed(\"read:name\")` authorization constraint, the security identity created after verifying the GitHub access token must be augmented to have a `read:name` permission."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "The demo expects that a database has a record with a GitHub account name and the assigned permission. The security identity augmentor uses the identity name to retrieve this record and enhance the identity with the discovered permission."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Let's see how this rather complex task can be easily achieved in Quarkus."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "First, we create a Panache entity that keeps the account name and permission values:"
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Utility method to find an identity record with a matching GitHub account name."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Second, we create an `import.sql` script to have a demo record added to the database:"
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Insert a demo record. You will provide your GitHub account name when starting MCP server."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Finally, we create a security identity augmentor:"
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Custom `SecurityIdentityAugmentor` can augment the already verified security identity."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Run the augmentation in a blocking mode because it requires access to the database."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Find the recorded `Identity` matching the current user's name."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Initialize a security identity builder from the current identity."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Add the permission allocated to this user and create an updated `SecurityIdentity`."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "This is all, the augmentation step is done with a few lines of code only."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "MCP Server Configuration"
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Let's configure our secure MCP server:"
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Enable MCP server traffic logging"
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Enforce an authenticated access to the main MCP SSE endpoint during the initial handshake. See also how the tool is secured with an annotation in the <<mcp-server-tool>> section above, though you can also secure access to the tool by listing both main and tools endpoints in the configuration, for example: `quarkus.http.auth.permission.authenticated.paths=/mcp/sse,/mcp/messages/*`."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Requires that only GitHub access tokens can be used to access MCP server."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "By default, `quarkus.oidc.provider=github` supports an authorization code flow only. `quarkus.oidc.application-type=service` overrides it and requires the use of bearer tokens."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Database that keeps the identity records is supported by the PostgreSQL DevService."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Start MCP server on port `8081` - this is done for the Quarkus LangChain4j `Poem Service` application that uses an MCP client to be able to start on the default `8080` port."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Start the MCP server in dev mode"
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Use your GitHub account name, for example, `mvn quarkus:dev -Duser.name=\"John Doe\"`. It is required to correctly import the user name and permission data to the database."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "The MCP server's security-related configuration remains exactly the same in prod mode, therefore we are not going to talk about running the MCP server in prod to save some blog post space. Please check the https://github.com/quarkiverse/quarkus-langchain4j/tree/main/samples/secure-mcp-sse-client-server[Quarkus LangChain4j Secure MCP Client Server sample] if you would like to run MCP server in prod mode - you will only need to make sure PostresSQL is available in prod mode too."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Step 2 - Create and start Poem Service that uses AI Gemini and MCP client"
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "The MCP server is now running and ready to accept tool calls. Let's create an AI `Poem Service` that will work with AI Gemini and use an MCP client to complete tool calls."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Poem Service Maven dependencies"
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "`quarkus-langchain4j-ai-gemini` brings support for AI Gemini."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "`quarkus-langchain4j-mcp` provides core MCP Client support."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "`quarkus-langchain4j-oidc-mcp-auth-provider` provides an implementation of https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html#_authorization[McpClientAuthProvider] that can supply access tokens acquired during the GitHub OAuth2 authorization code flow."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "`quarkus-oidc` supports GitHub OAuth2 login to secure access to `Poem Service`. Its version is defined in the Quarkus BOM."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "`quarkus-rest-qute` generates an HTML page to welcome the logged-in user. Its version is defined in the Quarkus BOM."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Register GitHub OAuth2 application"
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Register a GitHub OAuth2 application that you will authorize when logging in to the `Poem Service` application."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Follow the https://quarkus.io/guides/security-openid-connect-providers#github[GitHub OAuth2 registration] process, and make sure to register the `http://localhost:8080/login` callback URL."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Use the generated GitHub client id and secret to either set `GITHUB_CLIENT_ID` and `GITHUB_CLIENT_SECRET` environment properties or update the `quarkus.oidc.client-id=${github_client_id}` and `quarkus.oidc.credentials.secret=${github_client_secret}` properties in application.properties by replacing `${github_client_id}` with the generated client id and `${github_client_secret}` with the generated client secret."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "By default, Quarkus GitHub provider submits the client id and secret in the HTTP Authorization header. However, GitHub may require that both client id and secret are submitted as form parameters instead."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "If you get HTTP 401 error after logging in to GitHub and being redirected back to Quarkus MCP server, try to replace `quarkus.oidc.credentials.secret=${github.client.secret}` property with the following two properties instead:"
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "AI Gemini API key"
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "`Poem Service` relies on AI Gemini to create a poem for the logged-in user."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Get https://aistudio.google.com/app/apikey[AI Gemini API key] and either set an `AI_GEMINI_API_KEY` environment property or update the `quarkus.langchain4j.ai.gemini.api-key=${ai_gemini_api_key}` property in `application.properties` by replacing `${ai_gemini_api_key}` with the API key value."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "GitHub Login Endpoint"
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "The `Poem Service` needs to have an endpoint that manages a GitHub OAuth2 login. Typically, such an endpoint welcomes the logged-in user and offers links for the user to navigate to the rest of the secured application."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Let's implement this login endpoint:"
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Require an authenticated access. It forces an authorization code flow for users who did not login with GitHub yet and a session verification for the already authenticated users."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "GitHub access tokens are binary and Quarkus OIDC indirectly verifies them by using them to request GitHub specific `UserInfo` representation."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "After the user logs in to GitHub and is redirected to this endpoint, an HTML page with a user name and a link to the <<jaxrs-poem-resource,Poem Resource endpoint>> is generated with a simple https://github.com/quarkiverse/quarkus-langchain4j/blob/main/samples/secure-mcp-sse-client-server/secure-mcp-client/src/main/resources/templates/poem.html[Qute template] and returned to the user."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Create Poem Resource endpoint"
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "The `Poem Resource` endpoint accepts poem requests from authenticated users and delegates these requests to AI `Poem Service` that uses `AI Gemini`. `AI Gemini` relies on the MCP client to get the name of the logged-in user."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Require authenticated poem requests."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "AI Poem Service interface."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Refer to the MCP client `user-name` configuration, see the <<poem-service-configuration>> section below."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Poem Service Configuration"
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Let's see how the `Poem Service` configuration looks like:"
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Enable MCP client HTTP transport. In this demo we use SSE, with `Streamable HTTP` to be supported in the future."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Point to the Quarkus MCP server endpoint that you started in the <<start-mcp-server>> step."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Require GitHub OAuth2 login."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "GitHub client id and secret that were generated during the <<register-github-application>> step."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "AI Gemini key that you acquired during the <<ai-gemini-key>> step."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Enable AI Gemini request and response logging"
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Please pay attention to the fact that the MCP client configuration has a `user-name` name. You referred to this configuration with the `@McpToolBox(\"user-name\")` annotation in the <<jaxrs-poem-resource>> step."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Start Poem Service in dev mode"
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "All the Poem Service configuration remains exactly the same in prod mode, therefore we are not going to talk about running it in prod to save some blog post space. Please check the https://github.com/quarkiverse/quarkus-langchain4j/tree/main/samples/secure-mcp-sse-client-server[Quarkus LangChain4j Secure MCP Client Server sample] if you would like to run it in prod mode."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "We are ready to test our AI `Poem Service` application."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Step 3 - Test Poem Service"
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Access http://localhost:8080 and login to `Poem Service`:"
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "You should get a response with your name and a link to the `Poem Service` endpoint:"
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "At this point, Quarkus MCP Client was not involved in getting your name produced, it was done by the <<github-login-endpoint>>."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Click on the link to get a poem created and have AI Gemini producing a poem about Java for you:"
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "This time, Quarkus MCP Client helped AI Gemini to get your name from the secure Quarkus MCP server."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Access token delegation considerations"
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "In general, access tokens issued by social providers such as GitHub are not designed to be used in your distributed application architecture, with a service such as `Poem Service` accessing GitHub API indirectly through another service such as `Quarkus MCP server`."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Quarkus REST service that has users logged in with GitHub can access GitHub API directly. For example, `Poem Service` can use a great Quarkus LangChain4j capability to mark REST Clients as tools to access GitHub API. See how https://quarkus.io/blog/gemini-personal-assistant/#implementation[it was done with the Google Calendar service]."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "In this demo, we show the https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html[Quarkus MCP Client]'s capability to interoperate with MCP servers and use access tokens to access secure MCP servers. We use GitHub OAuth2 because it is easily accessible to most developers."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Providers such as `Keycloak` and `Auth0` can create access tokens that are meant to be propagated from one service to another one. You will quite likely have your Quarkus MCP server implementations dealing with such tokens in the enterprise. Alternatively, when possible, the AI service application which accepts an authenticated user can request the token issuer to exchange its access token for another token that will be used to access the downstream MCP Server instead."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Quarkus AI Service applications may have to and can support a delegation flow such as `GitHub access token -> Poem Service -> MCP Client -> MCP Server tool -> GitHub API` with additional security measures that the Quarkus team wil discuss in the future blog posts and the identity augmentation like the one shown in this demo."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Conclusion"
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "In this blog post, we demonstrated how https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html[Quarkus MCP Client] can access secure MCP servers by propagating access tokens available to the Quarkus LangChain4j AI Service application after the OAuth2 authorization code flow is complete."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Stay tuned for more upcoming blog posts about using MCP securely with Quarkus MCP client and MCP Server."
msgstr ""

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Enjoy !"
msgstr ""
