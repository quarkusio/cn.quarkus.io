# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-06-29 11:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy, no-wrap
msgid "Debugging natively compiled Java code with NativeJDB"
msgstr "用NativeJDB调试本地编译的Java代码"

#. type: YAML Front Matter: synopsis
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy, no-wrap
msgid "NativeJDB bridges the gap between the Java Debugger (JDB) framework available in modern IDEs and native debugging via GNU Project debugger (GDB)."
msgstr "NativeJDB弥补了现代IDE中的Java调试器（JDB）框架和通过GNU项目调试器（GDB）进行的本地调试之间的差距。"

#. type: Title ==
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy, no-wrap
msgid "Co-authored by: *Ansu Varghese, Research Software Engineer, IBM*"
msgstr "共同作者：。 *Ansu Varghese，研究软件工程师，IBM* "

#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy
msgid "**In collaboration with:**"
msgstr "*合作方：*"

#. type: Plain text
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy
msgid "_Max Andersen, Dimitris Andreadis, Andrew Dinn, Stuart Douglas, Jason Greene, David Grove, David Lloyd, Thomas Qvarnstrom, Foivos Zakkak, Galder Zamarreno (IBM Research and Red Hat)_"
msgstr " _Max Andersen, Dimitris Andreadis, Andrew Dinn, Stuart Douglas, Jason Greene, David Grove, David Lloyd, Thomas Qvarnstrom, Foivos Zakkak, Galder Zamarreno（IBM研究院和Red Hat）。_ "

#. type: Plain text
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy
msgid "{empty} +"
msgstr "{empty} +"

#. type: Plain text
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy
msgid "https://quarkus.io/[Quarkus] is a cloud-native Java development framework, which allows Java code to be mapped to Kubernetes containers and compiled natively. https://www.graalvm.org/22.1/reference-manual/native-image/[Native compilation] is useful for serverless computing, it avoids the overhead of running a JVM in containers and lets us execute serverless code directly. Debugging natively compiled code is not an easy task. It can be very different from the original Java source code due to extensive code optimizations, as well as differences in libraries used in native vs non-natively compiled code. In some cases, it is necessary to view both the source and the assembly code in order to gain better understanding of the program, further complicating the debugging task. "
msgstr "link:https://quarkus.io/[Quarkus] 是一个云原生Java开发框架，它允许将Java代码映射到Kubernetes容器中并进行本地编译。 link:https://www.graalvm.org/22.1/reference-manual/native-image/[原生编译] 对于无服务器计算非常有用，它避免了在容器中运行JVM的开销，让我们直接执行无服务器代码。调试原生编译的代码不是一件容易的事。由于大量的代码优化，以及原生与非原生编译代码中使用的库的差异，它可能与原始的Java源代码有很大的不同。在某些情况下，为了更好地理解程序，有必要同时查看源代码和汇编代码，从而使调试工作更加复杂。"

#. type: Plain text
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy
msgid "https://developers.redhat.com/blog/2020/06/25/debugging-graalvm-native-images-using-gdb[Native executables can be debugged with GDB], which is a C/C++ debugger in combination with a tool like emacs to step through the source code. However, these tools may not be familiar to a Java developer. Recently, extensions to https://marketplace.visualstudio.com/items?itemName=oracle-labs-graalvm.graalvm[VSCode] and https://plugins.jetbrains.com/plugin/19237-graalvm-native-debugger[IntelliJ] have been developed to alleviate this problem. Both these tools are specific to the IDE they extend, and need to be used in a Linux environment due to current limitations of Java native compilers. "
msgstr "link:https://developers.redhat.com/blog/2020/06/25/debugging-graalvm-native-images-using-gdb[本地可执行文件可以用GDB进行调试] ， link:https://developers.redhat.com/blog/2020/06/25/debugging-graalvm-native-images-using-gdb[GDB] 是一个C/C++的调试器，与emacs这样的工具结合起来，对源代码进行步进式的调试。然而，这些工具对于Java开发者来说可能并不熟悉。最近， link:https://marketplace.visualstudio.com/items?itemName=oracle-labs-graalvm.graalvm[VSCode] 和 link:https://plugins.jetbrains.com/plugin/19237-graalvm-native-debugger[IntelliJ] 的扩展已经被开发出来以缓解这个问题。这两个工具都是针对它们所扩展的IDE的，而且由于目前Java本地编译器的限制，需要在Linux环境下使用。"

#. type: Plain text
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy
msgid "https://github.com/nativejdb/[NativeJDB] is an *open-source* tool that supports *remote debugging* of a natively compiled Java code. In principle, this allows debugging from any IDE that supports the Java Platform Debugger Architecture (JPDA), such as IntelliJ, Eclipse or VSCode. Attaching remotely means that the user can start a debugging session on *any O/S*, while the NativeJDB process itself runs in a Linux container. Our challenge is to bridge the gap between JPDA and the GDB, two stacks that don't typically talk to each other! To achieve this we essentially teach the GDB to speak the Java Debug Wire Protocol (JDWP), used by IDEs to communicate with Java debuggers."
msgstr "link:https://github.com/nativejdb/[NativeJDB] 是一个 *开源* 工具，支持对本地编译的Java代码进行 *远程调试* 。原则上，这允许从任何支持Java平台调试器架构（JPDA）的IDE中进行调试，如IntelliJ、Eclipse或VSCode。远程附加意味着用户可以在 *任何操作系统* 上启动调试会话，而NativeJDB进程本身在Linux容器中运行。我们的挑战是在JPDA和GDB之间架起一座桥梁，这两个堆栈通常不会互相交谈。为了实现这个目标，我们基本上教GDB使用Java调试线协议（JDWP），该协议被IDE用来与Java调试器通信。"

#. type: Plain text
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy
msgid "When writing Quarkus code, developers have the possibility of finding bugs with a regular Java debugger before compiling it natively. NativeJDB is useful when the observed behavior of the native executable is different than when the program is executed on a JVM. It can be used to explore optimizations and differences in libraries that account for behavioral anomalies. NativeJDB is not specific to Quarkus and can be used to debug any natively compiled Java code."
msgstr "在编写Quarkus代码时，开发者有可能在原生编译之前用普通的Java调试器发现错误。当观察到本地可执行程序的行为与程序在JVM上执行时不同时，NativeJDB就很有用。它可以用来探索优化和库中的差异，以解释行为上的异常情况。NativeJDB不是Quarkus特有的，可以用来调试任何本地编译的Java代码。"

#. type: Title ==
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy, no-wrap
msgid "Architecture and Implementation"
msgstr "架构和实施"

#. type: Plain text
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy
msgid "NativeJDB is a Java process that wraps GDB, which itself wraps the native executable, and it acts as a server that understands the JDWP protocol. It is similar to the JDWP agent used to control and debug a running Java process. In that case, the user can attach to such a process and can start debugging it. NativeJDB is used in a similar way: once it is started, the user attaches to it using a Remote Debug configuration from the IDE."
msgstr "NativeJDB是一个包裹GDB的Java进程，它本身包裹着本地可执行文件，它作为一个服务器，理解JDWP协议。它类似于用于控制和调试运行中的Java进程的JDWP代理。在这种情况下，用户可以附加到这样一个进程，并可以开始调试它。NativeJDB的使用方法类似：一旦它被启动，用户就会使用IDE中的远程调试配置附加到它身上。"

#. type: Plain text
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy
msgid "The IDE then communicates with NativeJDB using the JDWP. After the initial handshake and pleasantries (like capabilities and set of available classes), the protocol allows a user to manipulate the IDE's interface, which triggers appropriate JDWP packets to be sent to NativeJDB. These packets are interpreted by NativeJDB and translated to https://ftp.gnu.org/old-gnu/Manuals/gdb/html_chapter/gdb_22.html[GDB-MI] commands. We use the MI interface to communicate with the GDB since it's the recommended interface to build tools on top of the GDB. The GDB then responds to these commands, and the responses are translated back into JDWP packets and sent back to the IDE."
msgstr "然后IDE使用JDWP与NativeJDB进行通信。在最初的握手和寒暄（如能力和可用的类集）之后，该协议允许用户操作IDE的界面，这将触发适当的JDWP数据包被发送到NativeJDB。这些数据包由NativeJDB解释并翻译成 link:https://ftp.gnu.org/old-gnu/Manuals/gdb/html_chapter/gdb_22.html[GDB-MI] 命令。我们使用MI接口与GDB通信，因为它是在GDB之上建立工具的推荐接口。然后，GDB对这些命令做出响应，这些响应被翻译成JDWP数据包并送回IDE。"

#. type: Plain text
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy
msgid "Communication between the IDE and the GDB can be both synchronous and asynchronous, including error messages. In some cases, a command from the IDE can result in both a synchronous and an asynchronous response. For example, setting a breakpoint has a synchronous response, but the corresponding breakpoint-hit is an asynchronous event that gets sent from NativeJDB to the IDE. In principle, NativeJDB can be used with any IDE that has a JDWP implementation, but it has mostly been tested and works with IntelliJ. It also does not require any changes or extensions to existing IDEs and works with the *community as well as the commercial version* of IntelliJ."
msgstr "IDE和GDB之间的通信可以是同步和异步的，包括错误信息。在某些情况下，来自IDE的一个命令可以导致同步和异步的响应。例如，设置一个断点有一个同步响应，但相应的断点-命中是一个异步事件，会从NativeJDB发送到IDE。原则上，NativeJDB可以用于任何有JDWP实现的IDE，但它主要是在IntelliJ中测试和工作。它也不需要对现有的IDE进行任何修改或扩展，并且可以和 *社区以及商业版* 的IntelliJ一起使用。"

#. type: Plain text
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy
msgid "Today, native-image builders in https://www.graalvm.org/[GraalVM] and https://github.com/qbicc[qbicc] produce debug information on a Linux environment with source mapping to the original Java source code (support for other platforms is in the works as well). NativeJDB's architecture allows users to start a debugging session in an IDE running on any O/S and attach to a NativeJDB process running in a Linux container. So it does not require Linux to begin with. It also works with the *community as well as the commercial version* of GraalVM."
msgstr "今天， link:https://www.graalvm.org/[GraalVM] 和 link:https://github.com/qbicc[qbicc] 中的本地镜像构建器在Linux环境下产生调试信息，并与原始Java源代码进行源码映射（对其他平台的支持也正在进行中）。NativeJDB的架构允许用户在任何操作系统上运行的IDE中启动调试会话，并附加到Linux容器中运行的NativeJDB进程。所以它不需要从Linux开始。它还可以和 *社区以及商业版本* 的GraalVM一起使用。"

#. type: Plain text
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy
msgid "NativeJDB consists of a few different components. We use Docker to build a native executable and produce debug information for the debuggee Java application. Our Docker setup uses Ubuntu O/S. The frontend of NativeJDB is a set of classes that parse and build JDI data structures. Its backend parses and builds data structures corresponding to communication with the GDB."
msgstr "NativeJDB由几个不同的组件组成。我们使用Docker来构建一个本地可执行文件，并为debuggee Java应用程序产生调试信息。我们的Docker设置使用Ubuntu O/S。NativeJDB的前端是一组解析和构建JDI数据结构的类。它的后端解析并建立与GDB通信对应的数据结构。"

#. type: Plain text
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy
msgid "NativeJDB has been using a scaffolding JVM to help it obtain certain static information and speed up development. So currently NativeJDB starts up the program as a Java process as well, in addition to running the native executable. It attaches to that process and suspends it to obtain general static information about the program. In the future, we will remove this scaffolding and replace with information coming from the GDB, though it has been very helpful in rapid prototyping."
msgstr "NativeJDB一直在使用一个脚手架式的JVM来帮助它获得某些静态信息并加快开发速度。所以目前NativeJDB除了运行本地可执行文件外，还将程序作为一个Java进程启动。它依附于该进程并暂停该进程，以获取程序的一般静态信息。在未来，我们将删除这个脚手架，而代之以来自GDB的信息，尽管它对快速原型开发非常有帮助。"

#. type: Title ==
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy, no-wrap
msgid "NativeJDB in action!"
msgstr "NativeJDB在行动!"

#. type: Plain text
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy
msgid "To get started, you'll need the following repos and follow the instructions in each:"
msgstr "要开始工作，你需要以下的仓库，并按照每个仓库的说明进行操作。"

#. type: Plain text
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy
msgid "https://github.com/nativejdb/nativejdb"
msgstr " https://github.com/nativejdb/nativejdb "

#. type: Plain text
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy
msgid "https://github.com/nativejdb/nativejdbExamples"
msgstr " https://github.com/nativejdb/nativejdbExamples "

#. type: Plain text
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy
msgid "Check out the following video to see NativeJDB in action!"
msgstr "请看下面的视频，看看NativeJDB的运行情况。"

#. type: Plain text
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy
msgid "And this video showing NativeJDB running on the GettingStarted Quarkus application:"
msgstr "还有这个视频，展示了NativeJDB在GettingStarted Quarkus应用程序上的运行。"

#. type: Title ==
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy, no-wrap
msgid "Features"
msgstr "特点"

#. type: Plain text
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy
msgid "Ability to show Java source in the editor and step through code"
msgstr "能够在编辑器中显示Java源码，并通过代码进行步进。"

#. type: Plain text
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy
msgid "Works with https://www.jrebel.com/blog/best-java-ide[IntelliJ] and Java11"
msgstr "与 link:https://www.jrebel.com/blog/best-java-ide[IntelliJ] 和Java11一起工作"

#. type: Plain text
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy
msgid "Works with https://www.graalvm.org/[GraalVM’s] natively compiled images"
msgstr "与 link:https://www.graalvm.org/[GraalVM的] 本地编译图像一起工作"

#. type: Plain text
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy
msgid "Works with https://github.com/qbicc/qbicc[Qbicc’s] natively compiled images (work in progress)"
msgstr "与 link:https://github.com/qbicc/qbicc[Qbicc的] 原生编译图像一起工作（正在进行）。"

#. type: Plain text
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy
msgid "Debugging features using the IDE’s Debug Console itself:"
msgstr "使用IDE的Debug Console本身的调试功能。"

#. type: Plain text
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy
msgid "Suspend / Resume"
msgstr "暂停/恢复"

#. type: Plain text
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy
msgid "Set Breakpoints (Insert/Enable)"
msgstr "设置断点（插入/启用）。"

#. type: Plain text
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy
msgid "Clear Breakpoints (Delete/Disable)"
msgstr "清除断点（删除/禁用）"

#. type: Plain text
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy
msgid "Step Over / Step Into / Step Return (work in progress)"
msgstr "踏过/踏入/踏回（正在进行的工作）"

#. type: Plain text
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy
msgid "Stack Frames information in IDE debugger pane"
msgstr "IDE调试器窗格中的堆栈框架信息"

#. type: Plain text
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy
msgid "Variables (Local + Static) values (work in progress)"
msgstr "变量（本地+静态）值（正在进行中）。"

#. type: Plain text
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy
msgid "View of assembly code within a stack frame (work in progress)"
msgstr "在堆栈框架内查看汇编代码（正在进行中）。"

#. type: Plain text
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy
msgid "Multi-threading & thread info"
msgstr "多线程和线程信息"

#. type: Plain text
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy
msgid "NativeJDB does not support hot code replace. Also, very short running programs currently need a Thread.sleep(). This is due to the fact that NativeJDB today uses a scaffolding VM, and needs a little time to attach and suspend it. This problem will disappear when we get rid of the scaffolding in the future. There is also a known issue of breakpoints working only once in loops under some conditions (related to https://github.com/oracle/graal/issues/4379[this] graalvm issue), and the step operation sometimes continues instead."
msgstr "NativeJDB不支持热代码替换。另外，非常短的运行程序目前需要一个Thread.sleep()。这是由于NativeJDB今天使用了一个脚手架虚拟机，需要一点时间来连接和暂停它。当我们在未来摆脱了脚手架后，这个问题就会消失。还有一个已知的问题是，在某些情况下，断点在循环中只起作用一次（与 link:https://github.com/oracle/graal/issues/4379[这个] gralvm问题有关），而步骤操作有时反而会继续。"

#. type: Title ==
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, no-wrap
msgid "Conclusion"
msgstr "解决方案"

#. type: Plain text
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy
msgid "Through this blog, we have showcased a new debugging tool called NativeJDB that allows users to remotely attach and debug a natively compiled Java code. It provides a bridge between the Java debugging framework in modern IDEs and GDB. It does not require extensions to existing IDEs, and allows the user to start their debugging session on any O/S."
msgstr "通过这个博客，我们展示了一个名为NativeJDB的新的调试工具，它允许用户远程附加和调试一个本地编译的Java代码。它在现代IDE中的Java调试框架和GDB之间提供了一座桥梁。它不需要对现有的IDE进行扩展，并允许用户在任何O/S上开始他们的调试会话。"

#. type: Plain text
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy
msgid "In the future, we can explore making NativeJDB work with other IDEs besides IntelliJ, which in principle should be possible."
msgstr "未来，我们可以探索让 NativeJDB 与 IntelliJ 之外的其他集成开发环境协同工作，原则上这应该是可行的。"

#. type: Plain text
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy
msgid "NativeJDB is currently a working prototype, and we look forward to feedback, suggestions, and contributions! "
msgstr "NativeJDB 目前只是一个工作原型，我们期待您的反馈、建议和贡献！"

#. type: Title ==
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, no-wrap
msgid "References"
msgstr "参考文献"

#. type: Plain text
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy
msgid "https://quarkus.io/guides/building-native-image#debugging-native-executable[]"
msgstr "https://quarkus.io/guides/building-native-image#debugging-native-executable"

#. type: Plain text
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy
msgid "https://docs.oracle.com/en/java/javase/11/docs/specs/jdwp/jdwp-protocol.html[]"
msgstr "https://docs.oracle.com/en/java/javase/11/docs/specs/jdwp/jdwp-protocol.html"

#. type: Plain text
#: _posts/2022-06-29-nativejdb-debugger-for-native-images.adoc
#, fuzzy
msgid "https://sourceware.org/gdb/onlinedocs/gdb/GDB_002fMI.html[]"
msgstr "https://sourceware.org/gdb/onlinedocs/gdb/GDB_002fMI.html"
