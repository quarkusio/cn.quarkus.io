msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2025-01-13-mcp-server.adoc
msgid " Implementing a MCP server in Quarkus"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "Shows how to implement an MCP server in Quarkus and use it in various clients such as Claude Desktop and LangChain4j"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "The Model Context Protocol (MCP) is an emerging standard that enables AI models to safely interact with external tools and resources. In this tutorial, I'll show you how to implement an MCP server using Quarkus, allowing you to extend AI applications with custom tools powered by the Java ecosystem."
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "What we'll be building"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "We'll implement a simple MCP server that provides tools to get weather forecasts and alerts for US-based locations. We've chosen this example because it aligns with the official MCP quickstart guide at https://modelcontextprotocol.io/quickstart/server[modelcontextprotocol.io/quickstart/server], making it easier to compare implementations across different languages."
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "Our server will expose two tools: `getAlerts` and `getForecast`. Once built, we'll connect it to an MCP host that runs the server as a subprocess. Here's how it looks when integrated with Claude:"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "Core MCP Concepts"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "MCP servers can provide three main types of capabilities:"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "Resources"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "File-like data that can be read by clients (like API responses or file contents)"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "Tools"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "Functions that can be called by the LLM (with user approval)"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "Prompts"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "Pre-written templates that help users accomplish specific tasks"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "This tutorial focuses on implementing tools."
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "Prerequisites"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "To follow this tutorial you need:"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "Familiarity with Quarkus and Java"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "Understanding of LLMs (OpenAI, Granite, Anthropic, Google, etc.)"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "System requirements"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "Quarkus CLI"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "JBang (optional)"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "Set up your project"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "First, create a new Quarkus project with rest-client, qute and mcp server extension without default boilerplate code:"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "We're using the `stdio` variant as it's required for MCP hosts that run the server as a subprocess. While an `sse` variant exists for Server-Sent Events streaming, we'll focus on the standard input/output approach."
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "Building the server"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "Create a new file `src/main/java/org/acme/Weather.java`. The complete code for this example is available https://github.com/quarkiverse/quarkus-mcp-server/tree/main/samples/weather[here]."
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "Weather API Integration"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "First, let's set up the REST client for the weather API:"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "To handle the API responses, we'll define some data classes. Note that we're only including the fields we need, as the complete API response contains much more data:"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "Since the Weather API uses redirects, add this to your `application.properties`:"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "Formatting Helpers"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "We'll use Qute templates to format the weather data:"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "Implementing MCP Tools"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "Now let's implement the actual MCP tools. The `@Tool` annotation from `io.quarkiverse.mcp.server` marks methods as available tools, while `@ToolArg` describes the parameters:"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "The forecast API requires a two-step process where we first get point metadata and then use a URL from that response to fetch the actual forecast."
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "Running the Server"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "To simplify deployment and development, we'll package the server as an uber-jar. This makes it possible to `mvn install` and publish as a jar to a Maven repository which makes it easiier to share and run for us and others."
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "Finally, we can optionally enable file logging as without it we would not be able to see any logs from the server as standard input/output is reserved for the MCP protocol."
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid ""
"After running `mvn install`, you can use JBang to run the server using its Maven coordinates: `org.acme:weather:1.0.0-SNAPSHOT:runner`\n"
"or manually using `java -jar target/weather-1.0.0-SNAPSHOT-runner.jar`."
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "Integration with Claude Desktop"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "Add this to your `claude_desktop_config.json`:"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "The `--quiet` flag prevents JBang's output from interfering with the MCP protocol."
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "You can also run the server directly without using java - then it would be something like `java -jar <FULL PATH>/weather-1.0.0-SNAPSHOT-runner.jar`. We use JBang here because simpler if you want to share with someone who does not want to build the MCP server locally."
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "Development Tools"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "MCP Inspector"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "For development and testing, you can use the MCP Inspector tool:"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "This starts a local web server where you can test your MCP server:"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "Integration with LangChain4j"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "Since version 0.23.0, Quarkus LangChain4j supports MCP, meaning it acts as an MCP client. For detailed information, see https://quarkus.io/blog/quarkus-langchain4j-mcp/[Using the Model Context Protocol with Quarkus+LangChain4j]."
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "To use our weather server with LangChain4j, add this configuration:"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "Other Clients/MCP Hosts"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "The Model Context Protocol has a page listing https://modelcontextprotocol.io/clients[known clients]."
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "While I have not tested all the various clients and MCP hosts, the similar approach of using `jbang --quiet <GAV>` should work for most if not all of them."
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "Testing the Server"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "You can test the server through Claude or other MCP hosts with queries like:"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "\"What is the weather forecast for Solvang?\""
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "\"What are the weather alerts for New York?\""
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "Here's what happens behind the scenes:"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "Your question goes to the LLM along with available tools information"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "The LLM analyzes the question and determines which tools to use"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "The client executes the selected tools via the MCP server"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "Results return to the LLM"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "The LLM formulates an answer using the tool results"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "You see the final response!"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "Conclusion"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "We've seen how Quarkus makes implementing an MCP server straightforward, requiring minimal boilerplate code compared to other implementations. The combination of Quarkus's extension system and JBang makes development and deployment quite a joy."
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "Further Reading"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "https://modelcontextprotocol.io[Model Context Protocol Documentation]"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "https://docs.quarkiverse.io/quarkus-mcp-server/dev/[Quarkus MCP Extension Guide]"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "https://weather.gov/api[Weather API Documentation]"
msgstr ""

#: _posts/2025-01-13-mcp-server.adoc
msgid "https://quarkus.io/blog/quarkus-langchain4j-mcp/[Using MCP with Quarkus+LangChain4j]"
msgstr ""
