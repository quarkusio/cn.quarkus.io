msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid " Implementing a MCP server in Quarkus"
msgstr "在 Quarkus 中实施 MCP 服务器"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid ""
"Shows how to implement an MCP server in Quarkus and use it in various "
"clients such as Claude Desktop and LangChain4j"
msgstr "展示如何在 Quarkus 中实现 MCP 服务器，并在 Claude Desktop 和 LangChain4j 等各种客户端中使用它"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid ""
"The Model Context Protocol (MCP) is an emerging standard that enables AI "
"models to safely interact with external tools and resources. In this "
"tutorial, I'll show you how to implement an MCP server using Quarkus, "
"allowing you to extend AI applications with custom tools powered by the Java "
"ecosystem."
msgstr ""
"模型上下文协议（MCP）是一项新兴标准，它使人工智能模型能够安全地与外部工具和资源交互。在本教程中，我将向您展示如何使用 Quarkus 实现 MCP "
"服务器，让您可以使用 Java 生态系统提供的自定义工具扩展人工智能应用程序。"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "What we'll be building"
msgstr "我们将建造什么"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid ""
"We'll implement a simple MCP server that provides tools to get weather "
"forecasts and alerts for US-based locations. We've chosen this example "
"because it aligns with the official MCP quickstart guide at https://"
"modelcontextprotocol.io/quickstart/server[modelcontextprotocol.io/quickstart/"
"server], making it easier to compare implementations across different "
"languages."
msgstr ""
"我们将实现一个简单的 MCP 服务器，提供获取美国各地天气预报和警报的工具。我们之所以选择这个示例，是因为它与 link:https://"
"modelcontextprotocol.io/quickstart/server[modelcontextprotocol.io/quickstart/"
"server] 上的 MCP 官方快速入门指南相一致，从而更容易比较不同语言的实现。"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid ""
"Our server will expose two tools: `getAlerts` and `getForecast`. Once built, "
"we'll connect it to an MCP host that runs the server as a subprocess. Here's "
"how it looks when integrated with Claude:"
msgstr ""
"我们的服务器将公开两个工具： `getAlerts` 和 `getForecast` 。构建完成后，我们将把它连接到 MCP "
"主机，该主机将服务器作为子进程运行。下面是它与 Claude 集成后的样子："

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Core MCP Concepts"
msgstr "MCP 核心概念"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "MCP servers can provide three main types of capabilities:"
msgstr "MCP 服务器可提供三种主要功能："

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Resources"
msgstr "资源"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid ""
"File-like data that can be read by clients (like API responses or file "
"contents)"
msgstr "客户端可读取的类似文件的数据（如 API 响应或文件内容）"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Tools"
msgstr "工具"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Functions that can be called by the LLM (with user approval)"
msgstr "可由 LLM 调用的功能（须经用户批准）"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Prompts"
msgstr "提示"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Pre-written templates that help users accomplish specific tasks"
msgstr "帮助用户完成特定任务的预写模板"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "This tutorial focuses on implementing tools."
msgstr "本教程侧重于工具的实施。"

#: _posts/2025-01-13-mcp-server.adoc
msgid "Prerequisites"
msgstr "先决条件"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "To follow this tutorial you need:"
msgstr "要学习本教程，您需要"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Familiarity with Quarkus and Java"
msgstr "熟悉 Quarkus 和 Java"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Understanding of LLMs (OpenAI, Granite, Anthropic, Google, etc.)"
msgstr "了解 LLM（OpenAI、Granite、Anthropic、Google 等）。"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "System requirements"
msgstr "系统要求"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Quarkus CLI"
msgstr "Quarkus CLI"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "JBang (optional)"
msgstr "JBang（可选）"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Set up your project"
msgstr "设置您的项目"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid ""
"First, create a new Quarkus project with rest-client, qute and mcp server "
"extension without default boilerplate code:"
msgstr "首先，创建一个带有 rest-client、qute 和 mcp 服务器扩展（不含默认模板代码）的新 Quarkus 项目："

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid ""
"We're using the `stdio` variant as it's required for MCP hosts that run the "
"server as a subprocess. While an `sse` variant exists for Server-Sent Events "
"streaming, we'll focus on the standard input/output approach."
msgstr ""
"我们使用 `stdio` 变体，因为将服务器作为子进程运行的 MCP 主机需要使用该变体。虽然服务器发送事件流也有 `sse` "
"变体，但我们将重点关注标准输入/输出方法。"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Building the server"
msgstr "构建服务器"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid ""
"Create a new file `src/main/java/org/acme/Weather.java`. The complete code "
"for this example is available https://github.com/quarkiverse/quarkus-mcp-"
"server/tree/main/samples/weather[here]."
msgstr ""
"创建一个新文件 `src/main/java/org/acme/Weather.java` 。此示例的完整代码可在 link:https://"
"github.com/quarkiverse/quarkus-mcp-server/tree/main/samples/weather[此处] 获取。"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Weather API Integration"
msgstr "天气 API 集成"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "First, let's set up the REST client for the weather API:"
msgstr "首先，让我们为天气 API 设置 REST 客户端："

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid ""
"To handle the API responses, we'll define some data classes. Note that we're "
"only including the fields we need, as the complete API response contains "
"much more data:"
msgstr "为了处理 API 响应，我们将定义一些数据类。请注意，我们只包含我们需要的字段，因为完整的 API 响应包含更多的数据："

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid ""
"Since the Weather API uses redirects, add this to your `application."
"properties`:"
msgstr "由于天气 API 使用重定向，请将此添加到 `application.properties` ："

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Formatting Helpers"
msgstr "格式化助手"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "We'll use Qute templates to format the weather data:"
msgstr "我们将使用 Qute 模板来格式化天气数据："

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Implementing MCP Tools"
msgstr "实施 MCP 工具"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid ""
"Now let's implement the actual MCP tools. The `@Tool` annotation from `io."
"quarkiverse.mcp.server` marks methods as available tools, while `@ToolArg` "
"describes the parameters:"
msgstr ""
"现在我们来实现实际的 MCP 工具。 `io.quarkiverse.mcp.server` 中的 `@Tool` 注释将方法标记为可用工具，而 "
"`@ToolArg` 则描述了参数："

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid ""
"The forecast API requires a two-step process where we first get point "
"metadata and then use a URL from that response to fetch the actual forecast."
msgstr "预报应用程序接口需要两个步骤，首先获取点元数据，然后使用响应中的 URL 获取实际预报。"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Running the Server"
msgstr "运行服务器"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid ""
"To simplify deployment and development, we'll package the server as an uber-"
"jar. This makes it possible to `mvn install` and publish as a jar to a Maven "
"repository which makes it easiier to share and run for us and others."
msgstr ""
"为了简化部署和开发，我们将把服务器打包成一个 uber-jar。这样，我们就可以 `mvn install` ，并将其作为 jar 发布到 Maven "
"资源库中，这样就更便于我们和其他人共享和运行。"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid ""
"Finally, we can optionally enable file logging as without it we would not be "
"able to see any logs from the server as standard input/output is reserved "
"for the MCP protocol."
msgstr ""
"最后，我们还可以选择启用文件日志记录，因为如果不启用文件日志记录，我们就无法看到服务器上的任何日志，因为标准输入/输出是为 MCP 协议保留的。"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid ""
"After running `mvn install`, you can use JBang to run the server using its "
"Maven coordinates: `org.acme:weather:1.0.0-SNAPSHOT:runner`\n"
"or manually using `java -jar target/weather-1.0.0-SNAPSHOT-runner.jar`."
msgstr ""
"运行 `mvn install` 后，可使用 JBang 通过其 Maven 坐标运行服务器： `org.acme:weather:1.0.0-"
"SNAPSHOT:runner` 或手动使用 `java -jar target/weather-1.0.0-SNAPSHOT-runner.jar` "
"。"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Integration with Claude Desktop"
msgstr "与克劳德桌面集成"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Add this to your `claude_desktop_config.json`:"
msgstr "将此添加到您的 `claude_desktop_config.json` ："

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid ""
"The `--quiet` flag prevents JBang's output from interfering with the MCP "
"protocol."
msgstr "`--quiet` 标志可防止 JBang 的输出干扰 MCP 协议。"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid ""
"You can also run the server directly without using java - then it would be "
"something like `java -jar <FULL PATH>/weather-1.0.0-SNAPSHOT-runner.jar`. We "
"use JBang here because simpler if you want to share with someone who does "
"not want to build the MCP server locally."
msgstr ""
"您也可以不使用 Java 而直接运行服务器--这样就会像 `java -jar <FULL PATH>/weather-1.0.0-SNAPSHOT-"
"runner.jar` 一样。我们在这里使用 JBang，是因为如果您想与不想在本地构建 MCP 服务器的人共享，这样会更简单。"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Development Tools"
msgstr "开发工具"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "MCP Inspector"
msgstr "MCP 检查员"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "For development and testing, you can use the MCP Inspector tool:"
msgstr "您可以使用 MCP Inspector 工具进行开发和测试："

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "This starts a local web server where you can test your MCP server:"
msgstr "这将启动一个本地网络服务器，您可以在此测试您的 MCP 服务器："

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Integration with LangChain4j"
msgstr "与 LangChain4j 集成"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid ""
"Since version 0.23.0, Quarkus LangChain4j supports MCP, meaning it acts as "
"an MCP client. For detailed information, see https://quarkus.io/blog/quarkus-"
"langchain4j-mcp/[Using the Model Context Protocol with Quarkus+LangChain4j]."
msgstr ""
"自 0.23.0 版起，Quarkus LangChain4j 支持 MCP，这意味着它可以作为 MCP 客户端使用。详细信息，请参阅在 link:"
"https://quarkus.io/blog/quarkus-langchain4j-mcp/[Quarkus+LangChain4j "
"中使用模型上下文协议] 。"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "To use our weather server with LangChain4j, add this configuration:"
msgstr "要在 LangChain4j 中使用我们的天气服务器，请添加此配置："

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Other Clients/MCP Hosts"
msgstr "其他客户/MCP 主机"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid ""
"The Model Context Protocol has a page listing https://modelcontextprotocol."
"io/clients[known clients]."
msgstr "模型上下文协议》有一个页面列出了 link:https://modelcontextprotocol.io/clients[已知客户] 。"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid ""
"While I have not tested all the various clients and MCP hosts, the similar "
"approach of using `jbang --quiet <GAV>` should work for most if not all of "
"them."
msgstr ""
"虽然我没有测试过所有不同的客户机和 MCP 主机，但使用 `jbang --quiet <GAV>` "
"的类似方法应该适用于大多数（如果不是全部的话）客户机和 MCP 主机。"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Testing the Server"
msgstr "测试服务器"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid ""
"You can test the server through Claude or other MCP hosts with queries like:"
msgstr "您可以通过 Claude 或其他 MCP 主机测试服务器，查询如下："

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "\"What is the weather forecast for Solvang?\""
msgstr "\"索尔万的天气预报如何？\""

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "\"What are the weather alerts for New York?\""
msgstr "\"纽约的天气警报是什么？\""

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Here's what happens behind the scenes:"
msgstr "下面是幕后发生的事情："

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Your question goes to the LLM along with available tools information"
msgstr "您的问题将与可用工具信息一起提交给法律硕士"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "The LLM analyzes the question and determines which tools to use"
msgstr "法律硕士分析问题并决定使用哪些工具"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "The client executes the selected tools via the MCP server"
msgstr "客户端通过 MCP 服务器执行所选工具"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Results return to the LLM"
msgstr "结果返回 LLM"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "The LLM formulates an answer using the tool results"
msgstr "法律硕士利用工具结果拟定答案"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "You see the final response!"
msgstr "你看最后的答复！"

#: _posts/2025-01-13-mcp-server.adoc
msgid "Conclusion"
msgstr "解决方案"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid ""
"We've seen how Quarkus makes implementing an MCP server straightforward, "
"requiring minimal boilerplate code compared to other implementations. The "
"combination of Quarkus's extension system and JBang makes development and "
"deployment quite a joy."
msgstr ""
"我们已经看到 Quarkus 是如何使 MCP 服务器的实现变得简单明了，与其他实现方式相比，它只需要最少的模板代码。Quarkus 的扩展系统与 "
"JBang 的结合使开发和部署工作变得轻松愉快。"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Further Reading"
msgstr "更多阅读"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "https://modelcontextprotocol.io[Model Context Protocol Documentation]"
msgstr "link:https://modelcontextprotocol.io[模型上下文协议文件]"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid ""
"https://docs.quarkiverse.io/quarkus-mcp-server/dev/[Quarkus MCP Extension "
"Guide]"
msgstr ""
"link:https://docs.quarkiverse.io/quarkus-mcp-server/dev/[Quarkus MCP 扩展指南]"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "https://weather.gov/api[Weather API Documentation]"
msgstr "link:https://weather.gov/api[天气 API 文档]"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid ""
"https://quarkus.io/blog/quarkus-langchain4j-mcp/[Using MCP with "
"Quarkus+LangChain4j]"
msgstr ""
"link:https://quarkus.io/blog/quarkus-langchain4j-mcp/[将 MCP 与 "
"Quarkus+LangChain4j 结合使用]"
