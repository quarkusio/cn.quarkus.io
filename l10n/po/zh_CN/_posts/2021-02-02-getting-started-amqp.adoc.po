# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy, no-wrap
msgid "Getting Started with AMQP in your Quarkus application"
msgstr "在你的Quarkus应用程序中开始使用AMQP"

#. type: YAML Front Matter: synopsis
#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy, no-wrap
msgid "How to build a Quarkus application using AMQP in less than 10 minutes"
msgstr "如何在10分钟内使用AMQP构建一个Quarkus应用程序"

#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid ""
"https://www.amqp.org/[AMQP 1.0] is a standard for passing messages between applications or organizations.\n"
"It connects systems, feeds business processes with the information they need, and reliably handles communication between systems.\n"
"AMQP is a robust and mature protocol widely used in event-driven applications."
msgstr "link:https://www.amqp.org/[AMQP 1.0] 是在应用程序或组织之间传递消息的标准。它连接系统，为业务流程提供所需的信息，并可靠地处理系统间的通信。AMQP 是一个强大而成熟的协议，广泛应用于事件驱动型应用程序。"

#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid ""
"This post is the equivalent of the https://quarkus.io/blog/getting-started-kafka/[Kafka getting started post], but focuses on the usage of AMQP.\n"
"You will learn how to get started with AMQP in your Quarkus application in less than ten steps.\n"
"We will use https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.7/index.html[SmallRye Reactive Messaging] - a declarative approach to building event-driven microservices."
msgstr "这篇文章相当于 link:https://quarkus.io/blog/getting-started-kafka/[Kafka 入门文章] ，但侧重于 AMQP 的使用。你将学会如何在不到十个步骤的时间内，在你的 Quarkus 应用程序中开始使用 AMQP。我们将使用 link:https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.7/index.html[SmallRye Reactive Messaging] --一种声明式方法来构建事件驱动的微服务。"

#. type: Plain text
#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid "The complete code is available from https://github.com/cescoffier/getting-started-quarkus-amqp[GitHub]."
msgstr "完整的代码可从 link:https://github.com/cescoffier/getting-started-quarkus-amqp[GitHub] 获得。"

#. type: Title ==
#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy, no-wrap
msgid "Step 1 - Generate your project"
msgstr "第1步 - 生成你的项目"

#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid ""
"Let's start with the very beginning, getting a new project structure with the right dependencies.\n"
"Go to https://code.quarkus.io, enter your group id and artifact id.\n"
"Then in the extension list, select:"
msgstr "让我们从头开始，用正确的依赖关系创建一个新的项目结构。进入 link:https://code.quarkus.io[https://code.quarkus.io，] 输入组 ID 和工件 ID。然后在扩展列表中选择"

#. type: Plain text
#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid "SmallRye Reactive Messaging - AMQP Connector"
msgstr "SmallRye Reactive Messaging - AMQP连接器"

#. type: Plain text
#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid "RESTEasy Jackson"
msgstr "RESTEasy Jackson"

#. type: Plain text
#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid "image:/assets/images/posts/getting-started-amqp/getting-started-amqp-code.png[]"
msgstr "image:/assets/images/posts/getting-started-amqp/getting-started-amqp-code.png[alt=\"getting started amqp code\"]"

#. type: Plain text
#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid "You can disable the \"Example Code\" to avoid the generated project containing examples."
msgstr "你可以禁用 \"实例代码\"，以避免生成的项目包含实例。"

#. type: Plain text
#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid "Then, click on __Generate your application__, download the project as a zip file, unzip it, and load it in your favorite IDE."
msgstr "然后，点击 \" _生成你的应用程序_ \"，将项目下载为zip文件，解压缩，并将其加载到你最喜欢的IDE。"

#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid ""
"If you opened the generated `pom.xml`, you would see that the `quarkus-smallrye-reactive-messaging-amqp`  and `quarkus-resteasy-jackson`\n"
"dependencies are declared, so we're ready to write some code."
msgstr "如果打开生成的 `pom.xml` ，就会看到 `quarkus-smallrye-reactive-messaging-amqp` 和 `quarkus-resteasy-jackson` 的依赖关系已声明，因此我们可以编写一些代码了。"

#. type: Title ==
#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy, no-wrap
msgid "Step 2 - What are we going to exchange?"
msgstr "第2步 - 我们要交换什么？"

#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid ""
"We need something to exchange.\n"
"Without much originality, let's say we will send and receive `Movie` objects.\n"
"In your project, create the `org.acme.Movie` class with the following content:"
msgstr "我们需要一些东西来交换。没有太多新意，就说我们要发送和接收 `Movie` 对象。在项目中创建 `org.acme.Movie` 类，内容如下："

#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid ""
"With AMQP, we exchange http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#section-message-format[messages], which can have multiple _data_ sections (or multiple AMQP sequences, or a single AMQP value section).\n"
"In our application, as we are exchanging `Movie` object, it encodes the instances as JSON and transfers it in a single _data_ section.\n"
"The `content-type` header is set to `application/json`."
msgstr "通过 AMQP，我们交换的 link:http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#section-message-format[消息] 可以有多个 _数据_ 部分（或多个 AMQP 序列，或单个 AMQP 值部分）。在我们的应用程序中，由于我们交换的是 `Movie` 对象，它将实例编码为 JSON 并在单个 _数据_ 段中传输。 `content-type` 标头设置为 `application/json` 。"

#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid ""
"AMQP messages are sent to a destination.\n"
"To keep things simple, let's name it __movies__."
msgstr "AMQP 消息被发送到一个目的地。为了简单起见，我们将其命名为 \" _电影_ \"。"

#. type: Title ==
#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy, no-wrap
msgid "Step 3 - Configure the application"
msgstr "第3步 - 配置应用程序"

#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid ""
"As said above, we will use Reactive Messaging.\n"
"When you use Reactive Messaging, you send messages to a channel and receive them from another channel.\n"
"These channels are mapped to the underlying messaging technology by configuration.\n"
"We must indicate that our reception and publication channels will use the __movies__ address in our application.\n"
"In `src/main/resources/application.properties`, add the following content:"
msgstr "如上所述，我们将使用反应式消息传递。使用反应式消息传递时，我们会向一个通道发送消息，并从另一个通道接收消息。这些通道通过配置映射到底层消息传递技术。我们必须在应用程序中指明接收和发布通道将使用 _电影_ 地址。在 `src/main/resources/application.properties` 中，添加以下内容："

#. type: Plain text
#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid "After having configured the broker location and credentials (`amqp-` properties), we configure our two channels: `movies-in` (receiving the records) and `movies-out` (publishing the records)."
msgstr "在配置了经纪人的位置和凭证（ `amqp-` 属性）后，我们配置了两个通道： `movies-in` （接收记录）和 `movies-out` （发布记录）。"

#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid ""
"We use the `mp.messaging.incoming.movies-in` prefix to configure the channel.\n"
"The `connector` attribute indicates who's responsible for this channel, here the AMQP connector.\n"
"We also need to specify the consumed destination using the `address` attribute."
msgstr "我们使用 `mp.messaging.incoming.movies-in` 前缀来配置通道。 `connector` 属性表示谁负责这个通道，这里是 AMQP 连接器。我们还需要使用 `address` 属性指定消耗的目的地。"

#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid ""
"To configure the outbound `movies-out` channel, we use the `mp.messaging.outgoing.movies-out` prefix.\n"
"In addition to indicating who's responsible for that channel, we also need to configure the address."
msgstr "要配置 `movies-out` 对外通道，我们需要使用 `mp.messaging.outgoing.movies-out` 前缀。除了指明谁负责该频道外，我们还需要配置地址。"

#. type: Title ==
#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy, no-wrap
msgid "Step 4 - Publishing movies to AMQP"
msgstr "第4步 - 发布电影到AMQP"

#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid ""
"Now, it's time to send messages.\n"
"Create the `org.acme.MovieProducer` class with the following content:"
msgstr "现在，是发送信息的时候了。创建 `org.acme.MovieProducer` 类，内容如下："

#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid ""
"In this class, we inject an `Emitter,` i.e., an object responsible for sending a message to a channel.\n"
"This emitter is attached to the `movies-out` channel (and will send messages to AMQP).\n"
"The connector automatically encoded the content as JSON and set the `content-type` header."
msgstr "在该类中，我们注入了一个 `Emitter,` ，即一个负责向通道发送消息的对象。该发射器连接到 `movies-out` 频道（并将向 AMQP 发送消息）。连接器会自动将内容编码为 JSON 并设置 `content-type` 标头。"

#. type: Plain text
#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid "You need to make sure your payload can be encoded to JSON."
msgstr "你需要确保你的有效载荷可以被编码为JSON。"

#. type: Plain text
#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid "So, the rest of our application can use the `send` method to send a movie to our AMQP destination."
msgstr "因此，我们应用程序的其他部分可以使用 `send` 方法来发送一个电影到我们的AMQP目的地。"

#. type: Title ==
#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy, no-wrap
msgid "Step 5 - Consuming movies"
msgstr "第5步 - 消费电影"

#. type: Plain text
#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid "Let's now look at the other side and retrieve the movies from AMQP."
msgstr "现在让我们看看另一面，从AMQP中检索电影。"

#. type: Plain text
#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid "Here, we use the `@Incoming` annotation to indicate to Quarkus to call the `receive` method for every received record."
msgstr "在这里，我们使用 `@Incoming` 注释来向Quarkus表明对每一条收到的记录都要调用 `receive` 方法。"

#. type: Plain text
#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid "Remember, the movie is encoded into JSON, so we need to help the connector produce a `Movie` from the received JSON."
msgstr "记住，电影被编码为JSON，所以我们需要帮助连接器从收到的JSON中产生一个 `Movie` 。"

#. type: Plain text
#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid "Create the `org.acme.JsonToObjectConverter` class with the following content:"
msgstr "创建具有以下内容的 `org.acme.JsonToObjectConverter` 类。"

#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid ""
"This class is a _converter_.\n"
"It maps the content of a `Message` to another type.\n"
"In the `canConvert` method, we verify that the incoming message is coming from AMQP (so contain the `IncomingAmqpMetadata` metadata) and that the content-type is set to `application/json`.\n"
"The `convert` method maps the received `JsonObject` into the target type (`Movie` in our case)."
msgstr "该类是一个 _转换器_ 。它将 `Message` 的内容映射为另一种类型。在 `canConvert` 方法中，我们验证传入的消息是否来自 AMQP（因此包含 `IncomingAmqpMetadata` 元数据），以及内容类型是否设置为 `application/json` 。 `convert` 方法将接收到的 `JsonObject` 映射到目标类型（在我们的例子中为 `Movie` ）。"

#. type: Plain text
#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid "With this converter, our `consume` method will receive the `Movie` objects."
msgstr "有了这个转换器，我们的 `consume` 方法将收到 `Movie` 对象。"

#. type: Title ==
#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy, no-wrap
msgid "Step 6 - Sending movies from a REST endpoint"
msgstr "第6步 - 从REST端点发送电影"

#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid ""
"It's quite common to send messages to AMQP from a REST endpoint.\n"
"To do this, create the `org.acme.MovieResource` class with the following content:"
msgstr "从 REST 端点向 AMQP 发送消息是很常见的。为此，请创建 `org.acme.MovieResource` 类，内容如下："

#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid ""
"This class uses the `MovieProducer` we implemented above to send the `movies`.\n"
"You could also use an `Emitter` directly."
msgstr "该类使用我们在上面实现的 `MovieProducer` 发送 `movies` 。您也可以直接使用 `Emitter` 。"

#. type: Title ==
#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy, no-wrap
msgid "Step 7 - Let's get this running!"
msgstr "第7步 - 让我们开始运行!"

#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid ""
"Well, first, we need an AMQP broker, for example http://activemq.apache.org/components/artemis/[Apache ActiveMQ Artemis].\n"
"You can follow the http://activemq.apache.org/components/artemis/documentation/latest/using-server.html[Getting Started with Artemis] documentation, or use the following `docker-compose.yaml` file:"
msgstr "首先，我们需要一个 AMQP 代理，例如 link:http://activemq.apache.org/components/artemis/[Apache ActiveMQ Artemis] 。你可以参考 link:http://activemq.apache.org/components/artemis/documentation/latest/using-server.html[Artemis 入门] 文档，或使用以下 `docker-compose.yaml` 文件："

#. type: Plain text
#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid "Copy the `docker-compose.yaml` file in your project, and from a terminal, start your broker with: `docker-compose up -d'"
msgstr "在你的项目中复制 `docker-compose.yaml` 文件，并从终端启动你的经纪人。`docker-compose up -d' 启动你的经纪人。"

#. type: Plain text
#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid "Then, run the application using:"
msgstr "然后，用以下方法运行该应用程序。"

#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid ""
"The application runs in dev mode, meaning that you can still update the code.\n"
"It will reload it automatically."
msgstr "应用程序在开发模式下运行，这意味着你仍然可以更新代码。它会自动重新加载。"

#. type: Plain text
#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid "In another terminal, emit a few HTTP POST request such as:"
msgstr "在另一个终端，发出一些HTTP POST请求，如：。"

#. type: Plain text
#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid "In the terminal running the application, you will see:"
msgstr "在运行应用程序的终端，你会看到。"

#. type: Plain text
#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid "It works!"
msgstr "它是有效的!"

#. type: Title ==
#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy, no-wrap
msgid "Step 8 - Native packaging"
msgstr "第8步 - 本地包装"

#. type: Plain text
#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid "If you have https://quarkus.io/guides/building-native-image[GraalVM installed and configured correctly], you can package this application as a native executable:"
msgstr "如果你已经 link:https://quarkus.io/guides/building-native-image[安装并正确配置了GraalVM] ，你可以把这个应用程序打包成一个本地可执行文件。"

#. type: Plain text
#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid "Then, execute your native executable with: `./target/getting-started-amqp-1.0.0-SNAPSHOT-runner`, and you get a Quarkus application using AMQP starting in a few milliseconds and consuming a ridiculous amount of memory: only 33Mb after 100 ingested records!"
msgstr "然后，使用 `./target/getting-started-amqp-1.0.0-SNAPSHOT-runner` 然后执行你的本地可执行文件： ，你就会得到一个使用 AMQP 的 Quarkus 应用程序，它只需几毫秒就能启动，而且内存消耗量大得离谱：100 条摄取记录后只有 33Mb！"

#. type: Title ==
#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy, no-wrap
msgid "Summary"
msgstr "摘要"

#: _posts/2021-02-02-getting-started-amqp.adoc
#, fuzzy
msgid ""
"In less than 10 minutes, we have a new Quarkus application using AMQP.\n"
"If you want to go further, check the https://quarkus.io/guides/amqp[AMQP guide]."
msgstr "不到 10 分钟，我们就拥有了一个使用 AMQP 的新 Quarkus 应用程序。如果你想更进一步，请查看 link:https://quarkus.io/guides/amqp[AMQP 指南] 。"
