# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:1
#, fuzzy, no-wrap
msgid "cescoffier"
msgstr "鹤壁市"

#. type: YAML Front Matter: date
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:1
#, fuzzy, no-wrap
msgid "2021-02-02"
msgstr "2021-02-02"

#. type: YAML Front Matter: layout
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "职位"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:1
#, fuzzy, no-wrap
msgid "How to build a Quarkus application using AMQP in less than 10 minutes"
msgstr "如何在10分钟内使用AMQP构建一个Quarkus应用程序"

#. type: YAML Front Matter: tags
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:1
#, fuzzy, no-wrap
msgid "amqp"
msgstr "amqp"

#. type: YAML Front Matter: title
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:1
#, fuzzy, no-wrap
msgid "Getting Started with AMQP in your Quarkus application"
msgstr "在你的Quarkus应用程序中开始使用AMQP"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:13
#, fuzzy
msgid "https://www.amqp.org/[AMQP 1.0] is a standard for passing messages between applications or organizations.  It connects systems, feeds business processes with the information they need, and reliably handles communication between systems.  AMQP is a robust and mature protocol widely used in event-driven applications."
msgstr "link:https://www.amqp.org/[AMQP 1.0] 是一个在应用程序或组织之间传递消息的标准。它连接系统，为业务流程提供他们需要的信息，并可靠地处理系统之间的通信。AMQP是一个强大而成熟的协议，广泛用于事件驱动的应用。"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:17
#, fuzzy
msgid "This post is the equivalent of the https://quarkus.io/blog/getting-started-kafka/[Kafka getting started post], but focuses on the usage of AMQP.  You will learn how to get started with AMQP in your Quarkus application in less than ten steps.  We will use https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.7/index.html[SmallRye Reactive Messaging] - a declarative approach to building event-driven microservices."
msgstr "这篇文章相当于 link:https://quarkus.io/blog/getting-started-kafka/[Kafka的入门文章] ，但重点是AMQP的使用。你将学习如何在你的Quarkus应用程序中开始使用AMQP，只需不到十个步骤。我们将使用 link:https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.7/index.html[SmallRye Reactive Messaging] --一种构建事件驱动型微服务的声明式方法。"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:19
#, fuzzy
msgid "The complete code is available from https://github.com/cescoffier/getting-started-quarkus-amqp[GitHub]."
msgstr "完整的代码可从 link:https://github.com/cescoffier/getting-started-quarkus-amqp[GitHub] 获得。"

#. type: Title ==
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:20
#, fuzzy, no-wrap
msgid "Step 1 - Generate your project"
msgstr "第1步 - 生成你的项目"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:25
#, fuzzy
msgid "Let's start with the very beginning, getting a new project structure with the right dependencies.  Go to https://code.quarkus.io, enter your group id and artifact id.  Then in the extension list, select:"
msgstr "让我们从最开始做起，用正确的依赖关系获得一个新的项目结构。转到 https://code.quarkus.io 输入你的组ID和工件ID。然后在扩展列表中，选择。"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:27
#, fuzzy
msgid "SmallRye Reactive Messaging - AMQP Connector"
msgstr "SmallRye Reactive Messaging - AMQP连接器"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:28
#, fuzzy
msgid "RESTEasy Jackson"
msgstr "RESTEasy Jackson"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:30
#, fuzzy
msgid "image:/assets/images/posts/getting-started-amqp/getting-started-amqp-code.png[]"
msgstr "image:/assets/images/posts/getting-started-amqp/getting-started-amqp-code.png[alt=\"getting started amqp code\"]"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:32
#, fuzzy
msgid "You can disable the \"Example Code\" to avoid the generated project containing examples."
msgstr "你可以禁用 \"实例代码\"，以避免生成的项目包含实例。"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:34
#, fuzzy
msgid "Then, click on __Generate your application__, download the project as a zip file, unzip it, and load it in your favorite IDE."
msgstr "然后，点击 \" _生成你的应用程序_ \"，将项目下载为zip文件，解压缩，并将其加载到你最喜欢的IDE。"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:37
#, fuzzy
msgid "If you opened the generated `pom.xml`, you would see that the `quarkus-smallrye-reactive-messaging-amqp` and `quarkus-resteasy-jackson` dependencies are declared, so we're ready to write some code."
msgstr "如果你打开生成的 `pom.xml` ，你会看到 `quarkus-smallrye-reactive-messaging-amqp` 和 `quarkus-resteasy-jackson` 的依赖关系已经声明，所以我们准备写一些代码。"

#. type: Title ==
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:38
#, fuzzy, no-wrap
msgid "Step 2 - What are we going to exchange?"
msgstr "第2步 - 我们要交换什么？"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:43
#, fuzzy
msgid "We need something to exchange.  Without much originality, let's say we will send and receive `Movie` objects.  In your project, create the `org.acme.Movie` class with the following content:"
msgstr "我们需要一些东西来交换。没有太多的原创性，让我们说我们将发送和接收 `Movie` 对象。在你的项目中，创建 `org.acme.Movie` 类，内容如下。"

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:47
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:105
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:140
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:167
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:209
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:49
#, no-wrap
msgid "public class Movie {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:52
#, no-wrap
msgid ""
"    public String title;\n"
"    public int year;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:54
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:59
#, fuzzy
msgid "With AMQP, we exchange http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#section-message-format[messages], which can have multiple _data_ sections (or multiple AMQP sequences, or a single AMQP value section).  In our application, as we are exchanging `Movie` object, it encodes the instances as JSON and transfers it in a single _data_ section.  The `content-type` header is set to `application/json`."
msgstr "通过AMQP，我们交换 link:http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#section-message-format[消息] ，它可以有多个 _数据_ 部分（或多个AMQP序列，或一个AMQP值部分）。在我们的应用程序中，由于我们正在交换 `Movie` 对象，它将实例编码为JSON并在一个 _数据_ 段中传输。 `content-type` 标头被设置为 `application/json` 。"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:62
#, fuzzy
msgid "AMQP messages are sent to a destination.  To keep things simple, let's name it __movies__."
msgstr "AMQP消息被发送至一个目的地。为了简单起见，我们把它命名为 _电影_ 。"

#. type: Title ==
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:63
#, fuzzy, no-wrap
msgid "Step 3 - Configure the application"
msgstr "第3步 - 配置应用程序"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:70
#, fuzzy
msgid "As said above, we will use Reactive Messaging.  When you use Reactive Messaging, you send messages to a channel and receive them from another channel.  These channels are mapped to the underlying messaging technology by configuration.  We must indicate that our reception and publication channels will use the __movies__ address in our application.  In `src/main/resources/application.properties`, add the following content:"
msgstr "如上所述，我们将使用反应式消息传递。当你使用反应式消息传递时，你向一个通道发送消息并从另一个通道接收消息。这些通道通过配置被映射到底层的消息传递技术。我们必须指出我们的接收和发布通道将在我们的应用程序中使用 _电影_ 地址。在 `src/main/resources/application.properties` ，添加以下内容。"

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:78
#, no-wrap
msgid ""
"# The AMQP broker location and credentials\n"
"amqp-host=localhost\n"
"amqp-port=5672\n"
"amqp-username=quarkus\n"
"amqp-password=quarkus\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:82
#, no-wrap
msgid ""
"# Configuring the incoming channel (reading from AMQP)\n"
"mp.messaging.incoming.movies-in.connector=smallrye-amqp\n"
"mp.messaging.incoming.movies-in.address=movies\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:86
#, no-wrap
msgid ""
"# Configuring the outgoing channel (writing to AMQP)\n"
"mp.messaging.outgoing.movies-out.connector=smallrye-amqp\n"
"mp.messaging.outgoing.movies-out.address=movies\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:89
#, fuzzy
msgid "After having configured the broker location and credentials (`amqp-` properties), we configure our two channels: `movies-in` (receiving the records) and `movies-out` (publishing the records)."
msgstr "在配置了经纪人的位置和凭证（ `amqp-` 属性）后，我们配置了两个通道： `movies-in` （接收记录）和 `movies-out` （发布记录）。"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:93
#, fuzzy
msgid "We use the `mp.messaging.incoming.movies-in` prefix to configure the channel.  The `connector` attribute indicates who's responsible for this channel, here the AMQP connector.  We also need to specify the consumed destination using the `address` attribute."
msgstr "我们使用 `mp.messaging.incoming.movies-in` 前缀来配置这个通道。 `connector` 属性表明谁负责这个通道，这里是AMQP连接器。我们还需要使用 `address` 属性来指定消耗的目的地。"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:96
#, fuzzy
msgid "To configure the outbound `movies-out` channel, we use the `mp.messaging.outgoing.movies-out` prefix.  In addition to indicating who's responsible for that channel, we also need to configure the address."
msgstr "为了配置出站的 `movies-out` 通道，我们使用 `mp.messaging.outgoing.movies-out` 前缀。除了表明谁负责该通道之外，我们还需要配置地址。"

#. type: Title ==
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:97
#, fuzzy, no-wrap
msgid "Step 4 - Publishing movies to AMQP"
msgstr "第4步 - 发布电影到AMQP"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:101
#, fuzzy
msgid "Now, it's time to send messages.  Create the `org.acme.MovieProducer` class with the following content:"
msgstr "现在，是时候发送消息了。创建具有以下内容的 `org.acme.MovieProducer` 类。"

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:108
#, no-wrap
msgid ""
"import org.eclipse.microprofile.reactive.messaging.Channel;\n"
"import org.eclipse.microprofile.reactive.messaging.Emitter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:111
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:114
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MovieProducer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:118
#, no-wrap
msgid ""
"    @Inject\n"
"    @Channel(\"movies-out\")\n"
"    Emitter<Movie> emitter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:123
#, no-wrap
msgid ""
"    public void send(Movie movie) {\n"
"        emitter.send(movie);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:128
#, fuzzy
msgid "In this class, we inject an `Emitter,` i.e., an object responsible for sending a message to a channel.  This emitter is attached to the `movies-out` channel (and will send messages to AMQP).  The connector automatically encoded the content as JSON and set the `content-type` header."
msgstr "在这个类中，我们注入一个 `Emitter,` ，即一个负责向通道发送消息的对象。这个发射器附在 `movies-out` 通道上（并将发送消息到AMQP）。连接器自动将内容编码为JSON，并设置 `content-type` header。"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:130
#, fuzzy
msgid "You need to make sure your payload can be encoded to JSON."
msgstr "你需要确保你的有效载荷可以被编码为JSON。"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:132
#, fuzzy
msgid "So, the rest of our application can use the `send` method to send a movie to our AMQP destination."
msgstr "因此，我们应用程序的其他部分可以使用 `send` 方法来发送一个电影到我们的AMQP目的地。"

#. type: Title ==
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:133
#, fuzzy, no-wrap
msgid "Step 5 - Consuming movies"
msgstr "第5步 - 消费电影"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:136
#, fuzzy
msgid "Let's now look at the other side and retrieve the movies from AMQP."
msgstr "现在让我们看看另一面，从AMQP中检索电影。"

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:143
#, no-wrap
msgid ""
"import org.eclipse.microprofile.reactive.messaging.Incoming;\n"
"import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:145
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:148
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MovieConsumer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:150
#, no-wrap
msgid "    private final Logger logger = Logger.getLogger(MovieConsumer.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:156
#, no-wrap
msgid ""
"    @Incoming(\"movies-in\")\n"
"    public void receive(Movie movie) {\n"
"        logger.infof(\"Got a movie: %d - %s\", movie.year, movie.title);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:159
#, fuzzy
msgid "Here, we use the `@Incoming` annotation to indicate to Quarkus to call the `receive` method for every received record."
msgstr "在这里，我们使用 `@Incoming` 注释来向Quarkus表明对每一条收到的记录都要调用 `receive` 方法。"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:161
#, fuzzy
msgid "Remember, the movie is encoded into JSON, so we need to help the connector produce a `Movie` from the received JSON."
msgstr "记住，电影被编码为JSON，所以我们需要帮助连接器从收到的JSON中产生一个 `Movie` 。"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:163
#, fuzzy
msgid "Create the `org.acme.JsonToObjectConverter` class with the following content:"
msgstr "创建具有以下内容的 `org.acme.JsonToObjectConverter` 类。"

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:172
#, no-wrap
msgid ""
"import io.smallrye.reactive.messaging.MessageConverter;\n"
"import io.smallrye.reactive.messaging.amqp.IncomingAmqpMetadata;\n"
"import io.vertx.core.json.JsonObject;\n"
"import org.eclipse.microprofile.reactive.messaging.Message;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:175
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import java.lang.reflect.Type;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:178
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class JsonToObjectConverter implements MessageConverter {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:184
#, no-wrap
msgid ""
"    @Override\n"
"    public boolean canConvert(Message<?> in, Type target) {\n"
"        return in.getMetadata(IncomingAmqpMetadata.class)\n"
"                .map(meta -> meta.getContentType().equals(\"application/json\")  && target instanceof Class)\n"
"                .orElse(false);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:186
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:192
#, no-wrap
msgid ""
"    @Override\n"
"    public Message<?> convert(Message<?> in, Type target) {\n"
"        return in.withPayload(((JsonObject) in.getPayload()).mapTo((Class<?>) target));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:198
#, fuzzy
msgid "This class is a _converter_.  It maps the content of a `Message` to another type.  In the `canConvert` method, we verify that the incoming message is coming from AMQP (so contain the `IncomingAmqpMetadata` metadata) and that the content-type is set to `application/json`.  The `convert` method maps the received `JsonObject` into the target type (`Movie` in our case)."
msgstr "这个类是一个 _转换器_ 。它将一个 `Message` 的内容映射到另一个类型。在 `canConvert` 方法中，我们验证传入的消息是来自AMQP（所以包含 `IncomingAmqpMetadata` 元数据），并且内容类型被设置为 `application/json` 。 `convert` 方法将收到的 `JsonObject` 映射到目标类型（在我们的例子中是 `Movie` ）。"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:200
#, fuzzy
msgid "With this converter, our `consume` method will receive the `Movie` objects."
msgstr "有了这个转换器，我们的 `consume` 方法将收到 `Movie` 对象。"

#. type: Title ==
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:201
#, fuzzy, no-wrap
msgid "Step 6 - Sending movies from a REST endpoint"
msgstr "第6步 - 从REST端点发送电影"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:205
#, fuzzy
msgid "It's quite common to send messages to AMQP from a REST endpoint.  To do this, create the `org.acme.MovieResource` class with the following content:"
msgstr "从一个REST端点向AMQP发送消息是很常见的。要做到这一点，创建具有以下内容的 `org.acme.MovieResource` 类。"

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:217
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import javax.ws.rs.core.Response;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:222
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"public class MovieResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:225
#, no-wrap
msgid ""
"    @Inject\n"
"    MovieProducer producer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:233
#, no-wrap
msgid ""
"    @POST\n"
"    public Response send(Movie movie) {\n"
"        producer.send(movie);\n"
"        // Return an 202 - Accepted response.\n"
"        return Response.accepted().build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:237
#, fuzzy
msgid "This class uses the `MovieProducer` we implemented above to send the `movies`.  You could also use an `Emitter` directly."
msgstr "这个类使用我们上面实现的 `MovieProducer` 来发送 `movies` 。你也可以直接使用一个 `Emitter` 。"

#. type: Title ==
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:238
#, fuzzy, no-wrap
msgid "Step 7 - Let's get this running!"
msgstr "第7步 - 让我们开始运行!"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:242
#, fuzzy
msgid "Well, first, we need an AMQP broker, for example http://activemq.apache.org/components/artemis/[Apache ActiveMQ Artemis].  You can follow the http://activemq.apache.org/components/artemis/documentation/latest/using-server.html[Getting Started with Artemis] documentation, or use the following `docker-compose.yaml` file:"
msgstr "那么，首先，我们需要一个AMQP代理，例如 link:http://activemq.apache.org/components/artemis/[Apache ActiveMQ Artemis] 。你可以遵循 link:http://activemq.apache.org/components/artemis/documentation/latest/using-server.html[Artemis的入门] 文档，或者使用以下 `docker-compose.yaml` 文件。"

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:246
#, no-wrap
msgid "version: '2'\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:248
#, no-wrap
msgid "services:\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:258
#, no-wrap
msgid ""
"  artemis:\n"
"    image: vromero/activemq-artemis:2-alpine-latest\n"
"    ports:\n"
"      - \"5672:5672\"\n"
"      - \"8161:8161\"\n"
"      - \"61616:61616\"\n"
"    environment:\n"
"      ARTEMIS_USERNAME: quarkus\n"
"      ARTEMIS_PASSWORD: quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:261
#, fuzzy
msgid "Copy the `docker-compose.yaml` file in your project, and from a terminal, start your broker with: `docker-compose up -d'"
msgstr "在你的项目中复制 `docker-compose.yaml` 文件，并从终端启动你的经纪人。`docker-compose up -d' 启动你的经纪人。"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:263
#, fuzzy
msgid "Then, run the application using:"
msgstr "然后，用以下方法运行该应用程序。"

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:267
#, no-wrap
msgid "./mvnw quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:271
#, fuzzy
msgid "The application runs in dev mode, meaning that you can still update the code.  It will reload it automatically."
msgstr "该应用程序在开发模式下运行，意味着你仍然可以更新代码。它将自动重新加载。"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:273
#, fuzzy
msgid "In another terminal, emit a few HTTP POST request such as:"
msgstr "在另一个终端，发出一些HTTP POST请求，如：。"

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:280
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"--request POST \\\n"
"--data '{\"year\":1994, \"title\":\"The Shawshank Redemption\"}' \\\n"
"http://localhost:8080/\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:285
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"--request POST \\\n"
"--data '{\"year\":1972, \"title\":\"The Godfather\"}' \\\n"
"http://localhost:8080/\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:290
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"--request POST \\\n"
"--data '{\"year\":2008, \"title\":\"The Dark Knight\"}' \\\n"
"http://localhost:8080/\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:295
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"--request POST \\\n"
"--data '{\"year\":1994, \"title\":\"Pulp Fiction\"}' \\\n"
"http://localhost:8080/\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:300
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"--request POST \\\n"
"--data '{\"year\":2010, \"title\":\"Inception\"}' \\\n"
"http://localhost:8080/\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:303
#, fuzzy
msgid "In the terminal running the application, you will see:"
msgstr "在运行应用程序的终端，你会看到。"

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:310
#, no-wrap
msgid ""
"...\n"
"2021-01-27 09:29:41,087 INFO  [org.acm.MovieConsumer] (vert.x-eventloop-thread-9) Got a movie: 1994 - Pulp Fiction\n"
"2021-01-27 09:29:41,114 INFO  [org.acm.MovieConsumer] (vert.x-eventloop-thread-9) Got a movie: 2010 - Inception\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:313
#, fuzzy
msgid "It works!"
msgstr "它是有效的!"

#. type: Title ==
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:314
#, fuzzy, no-wrap
msgid "Step 8 - Native packaging"
msgstr "第8步 - 本地包装"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:317
#, fuzzy
msgid "If you have https://quarkus.io/guides/building-native-image[GraalVM installed and configured correctly], you can package this application as a native executable:"
msgstr "如果你已经 link:https://quarkus.io/guides/building-native-image[安装并正确配置了GraalVM] ，你可以把这个应用程序打包成一个本地可执行文件。"

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:321
#, no-wrap
msgid "./mvnw package -Pnative\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:324
msgid "Then, execute your native executable with: `./target/getting-started-amqp-1.0.0-SNAPSHOT-runner`, and you get a Quarkus application using AMQP starting in a few milliseconds and consuming a ridiculous amount of memory: only 33Mb after 100 ingested records!"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:330
#, no-wrap
msgid ""
"$ rss getting-started-amqp-1.0.0-SNAPSHOT-runner\n"
"PID 0M COMMAND\n"
"54986 33M ./target/getting-started-amqp-1.0.0-SNAPSHOT-runner\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:332
#, no-wrap
msgid "Summary"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:335
msgid "In less than 10 minutes, we have a new Quarkus application using AMQP.  If you want to go further, check the https://quarkus.io/guides/amqp[AMQP guide]."
msgstr ""
