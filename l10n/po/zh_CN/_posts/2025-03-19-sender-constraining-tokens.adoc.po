msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid "Sender-constraining access tokens with Quarkus OIDC"
msgstr "使用 Quarkus OIDC 发送限制访问令牌"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid ""
"Explain how MTLS Binding and Demonstrating Proof-Of-Possession can be used "
"to prove ownership of access tokens"
msgstr "解释如何使用 MTLS 绑定和所有权证明来证明访问令牌的所有权"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
msgid "Introduction"
msgstr "简介"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid ""
"Single-page application (SPA) runs in the browser and uses https://quarkus."
"io/guides/security-oidc-code-flow-authentication#overview-of-the-oidc-"
"authorization-code-flow-mechanism[OIDC authorization code flow] to log-in "
"users, without depending on Quarkus OIDC. When the authentication is "
"complete, SPA sends the access token to access Quarkus on behalf of the "
"authenticated user."
msgstr ""
"单页应用程序（SPA）在浏览器中运行，使用 link:https://quarkus.io/guides/security-oidc-code-flow-"
"authentication#overview-of-the-oidc-authorization-code-flow-mechanism[OIDC "
"授权代码流] 登录用户，而不依赖于 Quarkus OIDC。身份验证完成后，SPA 会发送访问令牌，代表通过身份验证的用户访问 Quarkus。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid ""
"Have a look at the simple diagram showing how this process works, copied to "
"this post from the https://quarkus.io/guides/security-oidc-bearer-token-"
"authentication[OIDC Bearer token guide]:"
msgstr ""
"请参阅从 link:https://quarkus.io/guides/security-oidc-bearer-token-"
"authentication[OIDC Bearer token 指南] 中复制到本帖的简单示意图，了解这一过程是如何进行的："

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid ""
"As illustrated in the picture above, the OIDC provider authenticates the "
"current user, SPA receives ID and access tokens and uses the access token to "
"access the Quarkus endpoint."
msgstr "如上图所示，OIDC 提供商对当前用户进行身份验证，SPA 接收 ID 和访问令牌，并使用访问令牌访问 Quarkus 端点。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid ""
"The security challenge that the OAuth2 experts have been trying to address "
"is how to prove that the client such as SPA which is sending the token "
"actually owns this token ? There is nothing in the HTTP `Authorization: "
"Bearer <token>` header that proves that SPA did not leak the token."
msgstr ""
"OAuth2 专家一直试图解决的安全难题是，如何证明发送令牌的 SPA 等客户端确实拥有该令牌？HTTP `Authorization: Bearer "
"<token>` 头中没有任何内容可以证明 SPA 没有泄漏令牌。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid ""
"Two specifications for sender-constraining access tokens have emerged over "
"the years, https://datatracker.ietf.org/doc/html/rfc8705[RFC 8705: Mutual "
"TLS Client Authentication and Certificate-Bound Access Tokens] and https://"
"datatracker.ietf.org/doc/html/rfc9449[RFC 9449: OAuth 2.0 Demonstrating "
"Proof-of-Possession (DPoP)]."
msgstr ""
"多年来，出现了两种发送者限制访问令牌的规范，即 link:https://datatracker.ietf.org/doc/html/"
"rfc8705[RFC 8705：TLS 客户端相互验证和证书绑定访问令牌] 和 link:https://datatracker.ietf.org/"
"doc/html/rfc9449[RFC 9449：OAuth 2.0 展示占有证明（DPoP）] 。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid "Mutual TLS Client Authentication and Certificate-Bound Access Tokens"
msgstr "TLS 客户端相互验证和证书绑定访问令牌"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid ""
"https://datatracker.ietf.org/doc/html/rfc8705[Mutual TLS Client "
"Authentication and Certificate-Bound Access Tokens] specification describes "
"how access tokens can be cryptographically bound to the MTLS client "
"certificate."
msgstr ""
"link:https://datatracker.ietf.org/doc/html/rfc8705[TLS 客户端相互认证和证书绑定访问令牌] "
"规范》描述了如何将访问令牌与 MTLS 客户端证书进行加密绑定。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid ""
"By proving that the access token is bound to the client certificate, the "
"Quarkus application can get a high degree of confidence that the current "
"access token is constrained to, owned by the client which authenticated to "
"Quarkus over MTLS."
msgstr ""
"通过证明访问令牌与客户端证书绑定，Quarkus 应用程序可以高度确信，当前访问令牌受限于通过 MTLS 向 Quarkus 验证的客户端。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid ""
"Implementing the cryptographic binding is not complex in this case. The "
"current access token is expected to contain a confirmation with the SHA-256 "
"certificate thumbprint and it must match the thumbprint of the current MTLS "
"client certificate. If the token is in JWT format, then it must include a "
"confirmation claim. If the token is binary then the confirmation must be "
"included in the remote token introspection response."
msgstr ""
"在这种情况下，实现加密绑定并不复杂。当前的访问令牌应包含一个带有 SHA-256 证书缩略图的确认，且必须与当前 MTLS "
"客户证书的缩略图相匹配。如果令牌是 JWT 格式，则必须包含确认声明。如果令牌是二进制的，则确认声明必须包含在远程令牌反省响应中。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid ""
"Such a binding can only be successful if the OpenId Connect provider has "
"access to the same client certificate which is used during the MTLS "
"authentication to Quarkus."
msgstr "这种绑定只有在 OpenId Connect 提供商能够访问与 Quarkus 的 MTLS 身份验证过程中使用的相同客户证书时才能成功。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid ""
"The downside of using the MTLS token binding is that correctly configuring "
"the OpenId Connect provider, ensuring that browsers can request an X509 "
"certiticate authentication when SPA redirects the user to authenticate to "
"the OIDC provider is complex."
msgstr ""
"使用 MTLS 令牌绑定的缺点是，正确配置 OpenId Connect 提供商，确保在 SPA 将用户重定向到 OIDC "
"提供商进行身份验证时，浏览器能请求 X509 证书身份验证非常复杂。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid ""
"If you are a Keycloak user, check the https://www.keycloak.org/docs/latest/"
"server_admin/#con-advanced-settings_server_administration_guide[OAuth 2.0 "
"Mutual TLS Certificate Bound Access Tokens Enabled] in the Advanced "
"Configuration section of the https://www.keycloak.org/docs/latest/"
"server_admin[Keycloak Server Administration documentation] and the https://"
"tech.aufomm.com/how-to-use-certificate-bound-access-token-with-kong-and-"
"keycloak/[How to Use Certificate-Bound Access Token with Kong and Keycloak] "
"community blog post."
msgstr ""
"如果你是 Keycloak 用户，请查看 link:https://www.keycloak.org/docs/latest/"
"server_admin[Keycloak 服务器管理文档] 高级配置部分中的 link:https://www.keycloak.org/docs/"
"latest/server_admin/#con-advanced-settings_server_administration_guide[启用 "
"OAuth 2.0 互 TLS 证书绑定访问] link:https://tech.aufomm.com/how-to-use-certificate-"
"bound-access-token-with-kong-and-keycloak/[令牌] ，以及 link:https://tech.aufomm."
"com/how-to-use-certificate-bound-access-token-with-kong-and-keycloak/[如何使用 "
"Kong 和 Keycloak] 社区的 link:https://tech.aufomm.com/how-to-use-certificate-"
"bound-access-token-with-kong-and-keycloak/[证书绑定访问令牌] 博文。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid ""
"As far as Quarkus is concerned, you only need to set a single OIDC "
"configuration property, `quarkus.oidc.token.binding.certificate=true`, in "
"addition to the Vert.x HTTP MTLS configuration, to enforce the MTLS token "
"binding."
msgstr ""
"对于 Quarkus 来说，除了 Vert.x HTTP MTLS 配置之外，只需设置一个 OIDC 配置属性 `quarkus.oidc.token."
"binding.certificate=true` ，就能强制执行 MTLS 令牌绑定。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid ""
"See the https://quarkus.io/guides/security-oidc-bearer-token-"
"authentication#mutual-tls-token-binding[Quarkus OIDC Mutual TLS Token "
"Binding] documentation for more details."
msgstr ""
"更多详情，请参阅 link:https://quarkus.io/guides/security-oidc-bearer-token-"
"authentication#mutual-tls-token-binding[Quarkus OIDC 互 TLS 令牌绑定] 文档。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid "Demonstrating Proof-of-Possession (DPoP)"
msgstr "展示占有证明 (DPoP)"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid ""
"https://datatracker.ietf.org/doc/html/rfc9449[Demonstrating Proof-of-"
"Possession (DPoP)] specification describes how access tokens can be "
"cryptographically bound to special JWT tokens called DPoP proofs."
msgstr ""
"link:https://datatracker.ietf.org/doc/html/rfc9449[所有权证明演示（DPoP）] "
"规范描述了如何将访问令牌与称为 DPoP 证明的特殊 JWT 令牌进行加密绑定。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid ""
"The SPA client generates a private and public key pair, and creates a DPoP "
"proof token to complete the access token acquisition from the OIDC provider. "
"It then forwards this DPoP token to Quarkus with a new DPoP proof. The "
"access token must be bound to the DPoP proof by containing a public JSON Web "
"Key (JWK) key thumbprint which matches the thumbprint of the public JWK key "
"contained in the DPoP proof."
msgstr ""
"SPA 客户端生成一对私钥和公钥，并创建一个 DPoP 证明令牌，以完成从 OIDC 提供商处获取访问令牌的过程。然后，客户端将 DPoP 令牌与新的 "
"DPoP 证明一起转发给 Quarkus。访问令牌必须与 DPoP 证明绑定，其中包含一个公共 JSON 网络密钥（JWK）密钥缩略图，该缩略图与 "
"DPoP 证明中包含的公共 JWK 密钥缩略图相匹配。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid ""
"This binding can only be successful if the client uses the same public and "
"private key pair for creating the DPoP proof to request the access token in "
"the previous step and creating another DPoP proof for submitting it "
"alongside the DPoP access token to Quarkus."
msgstr ""
"只有当客户端使用相同的公钥和私钥对创建 DPoP 证明，以便在上一步中申请访问令牌，并创建另一个 DPoP 证明，与 DPoP 访问令牌一起提交给 "
"Quarkus 时，绑定才能成功。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid ""
"Quarkus OIDC will also enforce https://datatracker.ietf.org/doc/html/"
"rfc9449#name-checking-dpop-proofs[other DPoP proof check requirements]. "
"Support for custom https://datatracker.ietf.org/doc/html/rfc9449#name-"
"resource-server-provided-no[DPoP nonce providers] is also planned."
msgstr ""
"Quarkus OIDC 还将执行 link:https://datatracker.ietf.org/doc/html/rfc9449#name-"
"checking-dpop-proofs[其他 DPoP 证明检查要求] 。还计划支持自定义 link:https://datatracker.ietf."
"org/doc/html/rfc9449#name-resource-server-provided-no[DPoP nonce 提供商] 。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid ""
"Adoption of DPoP, compared to that of the MTLS token binding, is expected to "
"progress faster, because DPoP is an `application-level` protocol, with no "
"expectation that the transport-level MTLS authentication takes place. "
"However, correctly creating DPoP proofs at the SPA level is not "
"straightforward and requires care."
msgstr ""
"与 MTLS 令牌绑定相比，DPoP 的采用预计会更快，因为 DPoP 是 `application-level` 协议，不需要进行传输级 MTLS "
"验证。然而，在 SPA 层正确创建 DPoP 证明并不简单，需要小心谨慎。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid ""
"If you are a Keycloak user, then enabling an experimental `dpop` feature is "
"sufficient to get started. Also check the https://www.keycloak.org/docs/"
"latest/server_admin/#con-advanced-settings_server_administration_guide[OAuth "
"2.0 Demonstrating Proof-of-Possession at the Application Layer (DPoP)] in "
"the Advanced Configuration section of the https://www.keycloak.org/docs/"
"latest/server_admin[Keycloak Server Administration documentation] and the "
"https://tech.aufomm.com/how-to-use-demonstrating-proof-of-possession-dpop-"
"token-with-kong-and-keycloak/[How to Use Demonstrating Proof-of-Possession "
"(DPoP) Token with Kong and keycloak] community blog post."
msgstr ""
"如果你是 Keycloak 用户，那么启用 `dpop` 实验功能就足够了。还可查看 link:https://www.keycloak.org/"
"docs/latest/server_admin[Keycloak 服务器管理文档] 高级配置部分中的 link:https://www."
"keycloak.org/docs/latest/server_admin/#con-advanced-"
"settings_server_administration_guide[OAuth 2.0 应用层演示占有证明 (DPoP)] ，以及 link:"
"https://tech.aufomm.com/how-to-use-demonstrating-proof-of-possession-dpop-"
"token-with-kong-and-keycloak/[如何与 Kong 和 keycloak] 社区一起 link:https://tech."
"aufomm.com/how-to-use-demonstrating-proof-of-possession-dpop-token-with-kong-"
"and-keycloak/[使用演示占有证明 (DPoP) 令牌] 博文。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid ""
"As far as Quarkus is concerned, you only need to set a single OIDC "
"configuration property, `quarkus.oidc.token.authorization-scheme=dpop` to "
"accept DPoP tokens and enforce their binding to the accompanying DPoP proofs."
""
msgstr ""
"就 Quarkus 而言，你只需设置一个 OIDC 配置属性， `quarkus.oidc.token.authorization-scheme="
"dpop` ，即可接受 DPoP 令牌并强制将其与附带的 DPoP 证明绑定。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid ""
"See the https://quarkus.io/guides/security-oidc-bearer-token-"
"authentication#demonstrating-proof-of-possession-dpop[Quarkus OIDC "
"Demonstrating Proof of Possession (DPoP)] documentation for more details."
msgstr ""
"更多详情，请参阅 link:https://quarkus.io/guides/security-oidc-bearer-token-"
"authentication#demonstrating-proof-of-possession-dpop[Quarkus OIDC 持有证明 "
"(DPoP)] 文档。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid "Financial-Grade API (FAPI)"
msgstr "金融级应用程序接口（FAPI）"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid ""
"https://openid.net/wg/fapi/[Financial-Grade API (FAPI)] is a general high-"
"security API profile built on top of OAuth2."
msgstr ""
"link:https://openid.net/wg/fapi/[金融级应用程序接口（FAPI）] 是建立在 OAuth2 "
"基础上的通用高安全性应用程序接口配置文件。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid ""
"Both https://datatracker.ietf.org/doc/html/rfc8705[RFC 8705: Mutual TLS "
"Client Authentication and Certificate-Bound Access Tokens] and https://"
"datatracker.ietf.org/doc/html/rfc9449[RFC 9449: OAuth 2.0 Demonstrating "
"Proof-of-Possession (DPoP)] specifications are included in the Financial-"
"Grade API 2.0 https://openid.net/specs/fapi-security-profile-2_0-final."
"html#name-general[General Security Profile]."
msgstr ""
"link:https://datatracker.ietf.org/doc/html/rfc8705[RFC 8705：TLS "
"客户端相互验证和证书绑定访问令牌] 和 link:https://datatracker.ietf.org/doc/html/rfc9449[RFC "
"9449：OAuth 2.0 展示占有证明 (DPoP)] 规范都包含在金融级 API 2.0 link:https://openid.net/"
"specs/fapi-security-profile-2_0-final.html#name-general[通用安全配置文件] 中。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
msgid "Conclusion"
msgstr "解决方案"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid ""
"In this article, we have discussed two important OAuth2 specifications for "
"sender-constraining access tokens, https://datatracker.ietf.org/doc/html/"
"rfc8705[RFC 8705: Mutual TLS Client Authentication and Certificate-Bound "
"Access Tokens] and https://datatracker.ietf.org/doc/html/rfc9449[RFC 9449: "
"OAuth 2.0 Demonstrating Proof-of-Possession (DPoP)]."
msgstr ""
"在本文中，我们讨论了两个重要的 OAuth2 发送者限制访问令牌规范，即 link:https://datatracker.ietf.org/doc/"
"html/rfc8705[RFC 8705：TLS 客户端相互验证和证书绑定访问令牌] 和 link:https://datatracker.ietf."
"org/doc/html/rfc9449[RFC 9449：OAuth 2.0 演示占有证明（DPoP）] 。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid ""
"Both of these token security elevation technologies can be easily supported "
"in Quarkus OIDC, by using a single configuration property only, without "
"having to write a lot of custom code and configuration."
msgstr "只需使用一个配置属性，Quarkus OIDC 就能轻松支持这两种令牌安全提升技术，而无需编写大量自定义代码和配置。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid ""
"Please experiment with https://datatracker.ietf.org/doc/html/rfc8705[Mutual "
"TLS Client Authentication and Certificate-Bound Access Tokens] and https://"
"datatracker.ietf.org/doc/html/rfc9449[Demonstrating Proof-of-Possession "
"(DPoP)] in Quarkus and let us know what you think."
msgstr ""
"请在 Quarkus 中尝试使用 link:https://datatracker.ietf.org/doc/html/rfc8705[TLS "
"客户端相互验证、证书绑定访问令牌] 和 link:https://datatracker.ietf.org/doc/html/"
"rfc9449[所有权证明（DPoP）] ，并告诉我们你的想法。"
