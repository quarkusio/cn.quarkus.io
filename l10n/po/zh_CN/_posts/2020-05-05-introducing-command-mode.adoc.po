# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:1
#, fuzzy, no-wrap
msgid "maxandersen"
msgstr "冯小刚"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:1
#, fuzzy, no-wrap
msgid "2020-05-05"
msgstr "2020-05-05"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "职位"

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:1
#, fuzzy, no-wrap
msgid "development-tips"
msgstr "发展-提示"

#. type: YAML Front Matter: title
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:1
#, fuzzy, no-wrap
msgid "Introducing Command Mode"
msgstr "引入命令模式"

#. type: Plain text
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:10
#, fuzzy
msgid "Ever wanted to use Quarkus awesome API's and full feature set from a command line application ?"
msgstr "有没有想过从一个命令行程序中使用Quarkus强大的API和全部功能集？"

#. type: Plain text
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:12
#, fuzzy
msgid "Did you need to run a scheduled batch job now and then and not wanting to embed it into your main Quarkus built service ?"
msgstr "你是否需要不时地运行一个预定的批处理作业，并且不想将其嵌入到你的主要Quarkus构建的服务中？"

#. type: Plain text
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:14
#, fuzzy
msgid "image:https://i.imgflip.com/3xwzsh.jpg[]"
msgstr "image:https://i.imgflip.com/3xwzsh.jpg[alt=\"3xwzsh\"]"

#. type: Plain text
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:16
#, fuzzy
msgid "Quarkus has thus far been used to write applications that runs via an endpoint i.e. long running webserver via http or short-lived function in a serverless environment."
msgstr "迄今为止，Quarkus被用来编写通过端点运行的应用程序，即通过http长期运行的webserver或无服务器环境下的短期功能。"

#. type: Plain text
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:18
#, fuzzy
msgid "In Quarkus 1.4 command mode lets you write apps that run without an endpoint and optionally exits immediately."
msgstr "在Quarkus 1.4中，命令模式让你可以编写没有端点的应用程序，并且可以选择立即退出。"

#. type: Plain text
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:20
#, fuzzy
msgid "This enables you to use Quarkus for writing a whole new style of applications - think command line clients (CLI), batch scripts, console apps, etc."
msgstr "这使你能够使用Quarkus来编写一个全新风格的应用程序--想想命令行客户端（CLI）、批处理脚本、控制台应用程序等。"

#. type: Title ==
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:21
#, fuzzy, no-wrap
msgid "How to use it"
msgstr "如何使用它"

#. type: Plain text
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:24
#, fuzzy
msgid "Below is a simple `GreetingMain` class which uses the traditional `GreetingService` from all our quickstarts."
msgstr "下面是一个简单的 `GreetingMain` 类，它使用了我们所有快速启动的传统 `GreetingService` 。"

#. type: delimited block -
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:29
#, no-wrap
msgid ""
"import io.quarkus.runtime.QuarkusApplication;\n"
"import io.quarkus.runtime.annotations.QuarkusMain;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:34
#, no-wrap
msgid ""
"@QuarkusMain    // <.>\n"
"public class GreetingMain implements QuarkusApplication {\n"
"  @Inject // <.>\n"
"  GreetingService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:37
#, no-wrap
msgid ""
"  @Override\n"
"  public int run(String... args) throws Exception {   // <.>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:43
#, no-wrap
msgid ""
"    if (args.length>0) {\n"
"      System.out.println(service.greeting(arg[0]));\n"
"    } else {\n"
"      System.out.println(service.greeting(\"\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:47
#, no-wrap
msgid ""
"    return 0;\n"
" }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:50
#, fuzzy
msgid "<.> The `@QuarkusMain` annotation tells Quarkus that this is the main entry point.  <.> The `run` method is invoked once Quarkus starts, and the application stops when it finishes. If you would like to access request scoped beans you can annotate the `run` method with `@ActivateRequestContext`. This is useful to write or reuse your existing business logic using i.e. Hibernate Panache Entity beans query methods."
msgstr "  `@QuarkusMain` 注释告诉Quarkus这是主入口点。<.>一旦Quarkus启动， `run` 方法就会被调用，应用程序结束后就会停止。如果你想访问请求范围的bean，你可以用 `@ActivateRequestContext` 注释 `run` 方法。这对于使用i.e. Hibernate Panache Entity beans查询方法编写或重用你现有的业务逻辑是很有用的。 "

#. type: Plain text
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:52
#, fuzzy
msgid "You can add this to a `GreetingMain.java` and compile to a .jar or to full native (using `mvnw package -Dnative`) and when run you get something like:"
msgstr "你可以把这个添加到 `GreetingMain.java` ，然后编译成.jar或完全本地的（使用 `mvnw package -Dnative` ），当运行时你会得到类似的东西。"

#. type: Plain text
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:65
#, fuzzy, no-wrap
msgid ""
"```\n"
" ./target/getting-started-command-mode-1.0-SNAPSHOT-runner commando\n"
"__  ____  __  _____   ___  __ ____  ______\n"
" --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/\n"
" -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\\n"
"--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/\n"
"2020-04-25 00:14:38,999 INFO  [io.quarkus] (main) getting-started-command-mode 1.0-SNAPSHOT (powered by Quarkus 999-SNAPSHOT) started in 0.005s.\n"
"2020-04-25 00:14:38,999 INFO  [io.quarkus] (main) Profile prod activated.\n"
"2020-04-25 00:14:38,999 INFO  [io.quarkus] (main) Installed features: [cdi]\n"
"hello commando\n"
"2020-04-25 00:14:38,999 INFO  [io.quarkus] (main) getting-started-command-mode stopped in 0.000s\n"
"```\n"
msgstr ""
" `./target/getting-started-command-mode-1.0-SNAPSHOT-runner commando\n"
"__  ____  __  _____   ___  __ ____  ______\n"
" --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/\n"
" -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\\n"
"--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/\n"
"2020-04-25 00:14:38,999 INFO  [io.quarkus] (main) getting-started-command-mode 1.0-SNAPSHOT (powered by Quarkus 999-SNAPSHOT) started in 0.005s.\n"
"2020-04-25 00:14:38,999 INFO  [io.quarkus] (main) Profile prod activated.\n"
"2020-04-25 00:14:38,999 INFO  [io.quarkus] (main) Installed features: [cdi]\n"
"hello commando\n"
"2020-04-25 00:14:38,999 INFO  [io.quarkus] (main) getting-started-command-mode stopped in 0.000s` "

#. type: Title ===
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:66
#, fuzzy, no-wrap
msgid "Clean output"
msgstr "清洁输出"

#. type: Plain text
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:69
#, fuzzy
msgid "When working with a cli the default console log output can be verbose. For now the best way to turn that off is by setting the following properties:"
msgstr "当使用cli工作时，默认的控制台日志输出可以是verbose。目前，关闭该功能的最好方法是通过设置以下属性。"

#. type: Plain text
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:75
#, fuzzy
msgid "``` quarkus.log.level=SEVERE quarkus.hibernate-orm.log.sql=false quarkus.banner.enabled=false ```"
msgstr " `` "

#. type: Plain text
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:77
#, fuzzy
msgid "These could be set in a custom profile called `cli` by adding a `%cli.` prefix."
msgstr "这些可以在一个名为 `cli` 的自定义配置文件中通过添加 `%cli.` 的前缀来设置。"

#. type: Plain text
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:79
#, fuzzy
msgid "This has some issues and possible solution are being discussed in issue https://github.com/quarkusio/quarkus/issues/8871[#8871]."
msgstr "这有一些问题，可能的解决方案正在问题 link:https://github.com/quarkusio/quarkus/issues/8871[#8871] 中讨论。"

#. type: Title ===
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:80
#, fuzzy, no-wrap
msgid "Development mode"
msgstr "发展模式"

#. type: Plain text
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:83
#, fuzzy
msgid "Command mode works with `quarkus:dev` aka. dev-mode."
msgstr "命令模式与 `quarkus:dev` aka.dev-mode一起工作。"

#. type: Plain text
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:85
#, fuzzy
msgid "When you run with `mvn quarkus:dev` you can add `-Dquarkus.args=yourvalue` as arguments you want to pass into the command line."
msgstr "当你用 `mvn quarkus:dev` 运行时，你可以添加 `-Dquarkus.args=yourvalue` 作为你想传入命令行的参数。"

#. type: Plain text
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:87
#, fuzzy
msgid "`quarkusargs` will be split on whitespace and honors escaped quotes to. Thus with `mvn quarkus:dev -Dquarkus.args=\"foo bar \\\"baz qux\\\"\"` the app will start and after end look like this:"
msgstr " `quarkusargs` 将在空白处进行分割，并以转义引号为荣。因此，使用 ，应用程序将开始，结束后看起来像这样。 `mvn quarkus:dev -Dquarkus.args=\"foo bar \\\"baz qux\\\"\"` "

#. type: delimited block -
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:95
#, no-wrap
msgid ""
"foo\n"
"bar\n"
"baz qux\n"
"Quarkus application exited with code 0\n"
"Press Enter to restart or Ctrl + C to quit\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:98
#, fuzzy
msgid "You can now Press Enter multiple times to force a rerun and if you edited source code Press Enter will trigger build and then restart with no real overhead."
msgstr "你现在可以多次按回车键来强制重新运行，如果你编辑了源代码，按回车键将触发构建，然后重新启动，没有任何实际开销。"

#. type: Title ===
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:99
#, fuzzy, no-wrap
msgid "Main methods"
msgstr "主要方法"

#. type: Plain text
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:102
#, fuzzy
msgid "As part of adding command mode via a `@QuarkusMain` annotated class you can now have your own `static void main()` method. Below snippet is the minimum to run Quarkus from a main method."
msgstr "作为通过 `@QuarkusMain` 注释的类添加命令模式的一部分，你现在可以有自己的 `static void main()` 方法。下面的片段是在一个主方法中运行Quarkus的最低限度。"

#. type: delimited block -
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:108
#, no-wrap
msgid ""
"static void main(String ...args) {\n"
"    Quarkus.run(args);\n"
"} \n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:111
#, fuzzy
msgid "To use it with the above `@QuarksMain` class would look something like this:"
msgstr "要将其与上述 `@QuarksMain` 类一起使用，看起来会是这样的。"

#. type: delimited block -
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:117
#, no-wrap
msgid ""
"static void main(String ...args) {\n"
"    Quarkus.run(GreetingMain.class, args);\n"
"} \n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:120
#, fuzzy
msgid "That is all. This allows you to not only customize start/stop of your Quarks app and what many asked for: ability to launch/debug a Quarkus app directly from an IDE."
msgstr "这就是全部。这不仅允许你自定义你的Quarks应用程序的启动/停止，而且也是许多人要求的：能够直接从IDE启动/调试Quarkus应用程序。"

#. type: Plain text
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:122
#, fuzzy
msgid "You can see a fully working example of these classes in the https://github.com/quarkusio/quarkus-quickstarts/tree/development/getting-started-command-mode[command-mode quickstart]."
msgstr "你可以在 link:https://github.com/quarkusio/quarkus-quickstarts/tree/development/getting-started-command-mode[命令模式快速入门] 中看到这些类的一个完全工作的例子。"

#. type: Title ===
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:123
#, fuzzy, no-wrap
msgid "Minimal CLI App"
msgstr "最小的CLI应用"

#. type: Plain text
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:126
msgid "It is worth noticing that your cli app can still be serving out an endpoint - in fact, in the default app as we just made the rest endpoint is still starting and running. You just don't notice it. Quarkus is that fast."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:128
msgid "In case you truly want a minimal extension you remove the `quarkus-resteasy` extension in your `pom.xml` and put `arc` instead."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:130
msgid "Then nothing else than your Quarkus main class will be run."
msgstr ""

#. type: Title ===
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:131
#, no-wrap
msgid "What is next ? "
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:134
msgid "You tell us! What would you like to do with a command app with Quarkus ?"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:136
msgid "For now we are enjoying writing CLI's but how many others will join us!"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-05-05-introducing-command-mode.adoc:137
msgid "Let us know of your ideas at https://github.com/quarkusio/quarkus/issues."
msgstr ""
