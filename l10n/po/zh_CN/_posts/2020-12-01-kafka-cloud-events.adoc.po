# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2020-12-01-kafka-cloud-events.adoc
#, fuzzy, no-wrap
msgid "Sending and Receiving Cloud Events with Kafka"
msgstr "用Kafka发送和接收云事件"

#. type: YAML Front Matter: synopsis
#: _posts/2020-12-01-kafka-cloud-events.adoc
#, fuzzy, no-wrap
msgid "How to send and receive Cloud Events with Quarkus, Kafka and Reactive Messaging"
msgstr "如何用Quarkus、Kafka和Reactive Messaging发送和接收云事件"

#: _posts/2020-12-01-kafka-cloud-events.adoc
#, fuzzy
msgid ""
"https://cloudevents.io/[Cloud Events] is a specification for describing events.\n"
"It aims to ease interoperability.\n"
"With the rise of event-driven architecture, it's not surprising to see Cloud Events gaining popularity."
msgstr "link:https://cloudevents.io/[云事件] 是一种描述事件的规范。它旨在简化互操作性。随着事件驱动架构的兴起，云事件越来越受欢迎也就不足为奇了。"

#. type: Plain text
#: _posts/2020-12-01-kafka-cloud-events.adoc
#, fuzzy
msgid "This post explains how you can generate and consume Cloud Events using Quarkus, Kafka, and Reactive Messaging."
msgstr "这篇文章解释了如何使用Quarkus、Kafka和Reactive Messaging来生成和消费云事件。"

#. type: Title ==
#: _posts/2020-12-01-kafka-cloud-events.adoc
#, fuzzy, no-wrap
msgid "What is Cloud Event?"
msgstr "什么是云事件？"

#: _posts/2020-12-01-kafka-cloud-events.adoc
#, fuzzy
msgid ""
"First, let's look at the why.\n"
"Events are everywhere.\n"
"Many modern systems are using events one way or another.\n"
"Events can be used to implement event sourcing, communicate facts, trigger out-of-band processing, or send notifications.\n"
"Events become an essential piece of any system."
msgstr "首先，让我们来看看为什么。事件无处不在。许多现代系统都在以这样或那样的方式使用事件。事件可用于实现事件源、交流事实、触发带外处理或发送通知。事件已成为任何系统的重要组成部分。"

#: _posts/2020-12-01-kafka-cloud-events.adoc
#, fuzzy
msgid ""
"Yet event publishers tend to describe events differently.\n"
"I don't mean the content is different, but the envelope and the event's format are heterogeneous, even if these events transit on the same event mesh.\n"
"Some applications choose JSON and encode everything in the event's payload; some other systems prefer binary formats, such as Avro or Protobuf, and use the protocol capability, such as headers or properties, to transport metadata about the wrapped payload.\n"
"While event-driven architecture claims to ease the integration with external systems, this disparity is doing the opposite.\n"
"It's not rare to need a specific event translator with the only purpose to adapt events from one format to another."
msgstr "然而，事件发布者对事件的描述往往不同。我指的不是内容不同，而是信封和事件的格式不同，即使这些事件是在同一个事件网格上传输的。有些应用程序选择 JSON 格式，并将所有内容都编码到事件的有效载荷中；另一些系统则偏爱 Avro 或 Protobuf 等二进制格式，并使用协议能力（如标题或属性）来传输有关封装有效载荷的元数据。虽然事件驱动架构声称可以简化与外部系统的集成，但这种差异却适得其反。需要一个特定的事件翻译器来将事件从一种格式转换为另一种格式的情况并不少见。"

#: _posts/2020-12-01-kafka-cloud-events.adoc
#, fuzzy
msgid ""
"So, what's Cloud Event?\n"
"Cloud Event proposes a common way to describe events.\n"
"The goal is, obviously, interoperability and easing the integration burden.\n"
"Cloud Event 1.0 was released almost a year ago.\n"
"Over the past year, many Cloud Providers adopted this format, such as Azure and Oracle.\n"
"Several middlewares have also added support for Cloud Events, such as Knative, Kogito, Debezium, and Quarkus."
msgstr "那么，什么是云事件？云事件提出了一种描述事件的通用方法。其目的显然是为了实现互操作性和减轻集成负担。云事件 1.0 发布将近一年。在过去的一年中，许多云提供商都采用了这种格式，如 Azure 和 Oracle。一些中间件也增加了对云事件的支持，如 Knative、Kogito、Debezium 和 Quarkus。"

#. type: Title ==
#: _posts/2020-12-01-kafka-cloud-events.adoc
#, fuzzy, no-wrap
msgid "Show me some examples!"
msgstr "给我看一些例子!"

#: _posts/2020-12-01-kafka-cloud-events.adoc
#, fuzzy
msgid ""
"Ok, so, how does it look?\n"
"The easiest way to understand Cloud Event is to look at one of them:"
msgstr "好吧，那么，它看起来如何？了解云事件最简单的方法就是看其中一个："

#: _posts/2020-12-01-kafka-cloud-events.adoc
#, fuzzy
msgid ""
"This event is described in JSON, but that's just one of the possibilities.\n"
"Let's look at the fields."
msgstr "该事件是用 JSON 格式描述的，但这只是其中一种可能性。让我们看看这些字段。"

#: _posts/2020-12-01-kafka-cloud-events.adoc
#, fuzzy
msgid ""
"First, the `specversion` indicates which version of Cloud Event it is using (1.0).\n"
"The `id` field provides an id for that specific event.\n"
"The `source` attribute is a URI identifying the event source, i.e., the context in which an event happened or the application that emitted that specific event.\n"
"Combining the `id` and the `source` provides a unique identifier.\n"
"Such uniqueness is essential to implement idempotence and handle potential duplicates.\n"
"The `type` is the last mandatory attribute.\n"
"It indicates the _type_ of the event.\n"
"Here, I use the fully qualified class name, but you can imagine anything.\n"
"It should refer to the kind of event you have defined in your system."
msgstr "首先， `specversion` 表明它使用的是哪个版本的云事件（1.0）。 `id` 字段提供了该特定事件的 id。 `source` 属性是标识事件源的 URI，即事件发生的上下文或发出该特定事件的应用程序。 `id` 和 `source` 的组合提供了一个唯一标识符。这种唯一性对于实现幂等性和处理潜在重复至关重要。 `type` 是最后一个必选属性。它表示事件的 _类型_ 。在这里，我使用的是完全限定的类名，但你可以想象任何东西。它应与系统中定义的事件类型一致。"

#: _posts/2020-12-01-kafka-cloud-events.adoc
#, fuzzy
msgid ""
"The other attributes are optional.\n"
"`datacontenttype` defines the content-type of the `data` attribute.\n"
"`subject` allows passing extra details about the event, such as an additional hint about the context or the type of event.\n"
"`time` is a timestamp, generally indicating the creation time.\n"
"There is another optional attribute not used in my example.\n"
"The `dataschema` attribute lets you pass the schema of the event data."
msgstr "其他属性是可选的。 `datacontenttype` 定义了 `data` 属性的内容类型。 `subject` 允许传递有关事件的额外细节，如有关上下文或事件类型的额外提示。 `time` 是一个时间戳，通常表示创建时间。还有一个可选属性在我的示例中没有使用。 `dataschema` 属性允许传递事件数据的模式。"

#: _posts/2020-12-01-kafka-cloud-events.adoc
#, fuzzy
msgid ""
"The `data` attribute contains the wrapped business event.\n"
"It is an essential part, and the other attributes are just providing details about that specific business event."
msgstr "`data` 属性包含封装的业务事件。它是基本部分，其他属性只是提供有关该特定业务事件的详细信息。"

#: _posts/2020-12-01-kafka-cloud-events.adoc
#, fuzzy
msgid ""
"You can also define _extensions_.\n"
"These extensions would be a set of custom attributes used when the proposed set of attributes is not enough for your use case."
msgstr "您还可以定义 _扩展_ 。这些扩展是一组自定义属性，当建议的属性集不足以满足您的使用情况时就会使用。"

#: _posts/2020-12-01-kafka-cloud-events.adoc
#, fuzzy
msgid ""
"That's it!\n"
"So, we can summarize Cloud Events as _just enough metadata to understand an event_ - its source, an id, a type, and the business data."
msgstr "就是这样！因此，我们可以把云 _事件_ 概括为 _足以理解一个事件的元数据_ --其来源、ID、类型和业务数据。"

#. type: Title ==
#: _posts/2020-12-01-kafka-cloud-events.adoc
#, fuzzy, no-wrap
msgid "Cloud Events on the wire - the bindings"
msgstr "线上的云活动--绑定"

#: _posts/2020-12-01-kafka-cloud-events.adoc
#, fuzzy
msgid ""
"But, how would these events be encoded?\n"
"The previous example using JSON is nice, but some protocols may want to leverage their own capabilities to transmit these metadata."
msgstr "但是，如何对这些事件进行编码呢？前面使用 JSON 的示例很不错，但有些协议可能希望利用自己的功能来传输这些元数据。"

#: _posts/2020-12-01-kafka-cloud-events.adoc
#, fuzzy
msgid ""
"That's why Cloud Events also proposes bindings.\n"
"A binding is a set of recommendations specific to one protocol.\n"
"It explains how each protocol should encode Cloud Events.\n"
"For example, there is a binding for HTTP, one for Kafka, and another for AMQP."
msgstr "这就是为什么云活动还提出了绑定。绑定是一套针对特定协议的建议。它解释了每种协议应如何编码 Cloud Events。例如，HTTP 有一个绑定，Kafka 有一个，AMQP 也有一个。"

#. type: Plain text
#: _posts/2020-12-01-kafka-cloud-events.adoc
#, fuzzy
msgid "Most of these bindings propose two approaches:"
msgstr "这些捆绑方式大多提出了两种方法。"

#. type: Plain text
#: _posts/2020-12-01-kafka-cloud-events.adoc
#, fuzzy
msgid "structured"
msgstr "结构化"

#. type: Plain text
#: _posts/2020-12-01-kafka-cloud-events.adoc
#, fuzzy
msgid "binary"
msgstr "二进制"

#: _posts/2020-12-01-kafka-cloud-events.adoc
#, fuzzy
msgid ""
"The structured approach keeps event metadata and data together in the payload of the message or request.\n"
"It generally uses JSON to encode that data.\n"
"If you pass the Cloud Event example (from above), in an HTTP request, it will use the structured mode.\n"
"It will also use the structured mode when you write that JSON snippet in a Kafka record's value."
msgstr "结构化方法将事件元数据和数据一起保存在消息或请求的有效载荷中。它通常使用 JSON 对数据进行编码。如果您在 HTTP 请求中传递云事件示例（如上所述），它将使用结构化模式。当您在 Kafka 记录的值中写入 JSON 代码段时，它也会使用结构化模式。"

#: _posts/2020-12-01-kafka-cloud-events.adoc
#, fuzzy
msgid ""
"The structured approach allows simple forwarding across multiple protocols.\n"
"However, it may not be efficient and may constraint the type of business data."
msgstr "结构化方法允许在多个协议之间进行简单转发。不过，这种方法可能效率不高，而且可能会限制业务数据的类型。"

#: _posts/2020-12-01-kafka-cloud-events.adoc
#, fuzzy
msgid ""
"The other approach relies on protocol capabilities and enables efficient transfer and encoding.\n"
"If we use the binary mode with Kafka, we will store the `data` attribute value in the Kafka record's value and pass the other attributes using the record's headers.\n"
"Consequently, business data can be encoded using binary protocols such as Avro, leading to higher efficiency."
msgstr "另一种方法则依赖协议能力，实现高效传输和编码。如果我们在 Kafka 中使用二进制模式，我们将在 Kafka 记录的值中存储 `data` 属性值，并使用记录头传递其他属性。因此，可以使用 Avro 等二进制协议对业务数据进行编码，从而提高效率。"

#. type: Plain text
#: _posts/2020-12-01-kafka-cloud-events.adoc
#, fuzzy
msgid "The rest of the post explains how you can send and receive Cloud Events using Quarkus, Kafka, and Reactive Messaging."
msgstr "帖子的其余部分解释了如何使用Quarkus、Kafka和Reactive Messaging发送和接收云事件。"

#. type: Title ==
#: _posts/2020-12-01-kafka-cloud-events.adoc
#, fuzzy, no-wrap
msgid "Sending Cloud Events on Kafka"
msgstr "在Kafka上发送云事件"

#: _posts/2020-12-01-kafka-cloud-events.adoc
#, fuzzy
msgid ""
"The Kafka connector used by Quarkus has built-in support for Cloud Events.\n"
"It can send and consume Cloud Events using the structured mode (encoding everything in a JSON payload) or the binary mode (using Kafka headers)."
msgstr "Quarkus 使用的 Kafka 连接器内置了对云事件的支持。它可以使用结构化模式（将所有内容编码为 JSON 有效载荷）或二进制模式（使用 Kafka 标头）发送和消费云事件。"

#. type: Plain text
#: _posts/2020-12-01-kafka-cloud-events.adoc
#, fuzzy
msgid "To write your outgoing messages as Cloud Event, you only need to specify the `cloud-events-type` and `cloud-events-source` attributes on your channel:"
msgstr "要把你发出的信息写成云事件，你只需要在你的通道上指定 `cloud-events-type` 和 `cloud-events-source` 属性。"

#: _posts/2020-12-01-kafka-cloud-events.adoc
#, fuzzy
msgid ""
"By default, the connector writes Cloud Events using the binary mode.\n"
"The connector generates a random `id` for each message.\n"
"You can also customize the other Cloud Event attributes using `cloud-events-$attribute`, such as `cloud-events-subject`."
msgstr "默认情况下，连接器使用二进制模式写入云事件。连接器会为每条消息生成一个随机的 `id` 。您还可以使用 `cloud-events-$attribute` 自定义其他云事件属性，如 `cloud-events-subject` 。"

#: _posts/2020-12-01-kafka-cloud-events.adoc
#, fuzzy
msgid ""
"The configuration shown above is applied to all the outgoing messages.\n"
"Sometimes, you want to customize the value for each message individually.\n"
"To achieve this, you can also attach `io.smallrye.reactive.messaging.ce.OutgoingCloudEventMetadata` to your message to customize the id, source, type and subject for each message:"
msgstr "上述配置适用于所有发出的邮件。有时，您想单独定制每封邮件的值。为此，您还可以为邮件附加 `io.smallrye.reactive.messaging.ce.OutgoingCloudEventMetadata` ，自定义每封邮件的 ID、来源、类型和主题："

#: _posts/2020-12-01-kafka-cloud-events.adoc
#, fuzzy
msgid ""
"The connector also supports the _structured_ mode.\n"
"You can write structured Cloud Events by setting the `cloud-events-mode` attribute to `structured`.\n"
"It only supports JSON at the moment.\n"
"The written record gets its `content-type` header set to `application/cloudevents+json; charset=UTF-8`, which allows the receiver to understand that it's a structured Cloud Event."
msgstr "该连接器还支持 _结构化_ 模式。您可以通过将 `cloud-events-mode` 属性设置为 `structured` 来写入结构化的云事件。目前它只支持 JSON 格式。写入的记录会将其 `content-type` 标头设置为 `application/cloudevents+json; charset=UTF-8` ，这样接收方就能理解这是一个结构化的云事件。"

#. type: Title ==
#: _posts/2020-12-01-kafka-cloud-events.adoc
#, fuzzy, no-wrap
msgid "Consuming Cloud Event from Kafka"
msgstr "从Kafka消耗云事件"

#: _posts/2020-12-01-kafka-cloud-events.adoc
#, fuzzy
msgid ""
"Naturally, the connector can also consume Cloud Events.\n"
"The connector detects Cloud Events automatically by checking the record's headers.\n"
"It also determines the mode."
msgstr "当然，连接器也可以消费云事件。连接器通过检查记录的标头自动检测云事件。它还能确定模式。"

#: _posts/2020-12-01-kafka-cloud-events.adoc
#, fuzzy
msgid ""
"When the connector receives a Cloud Event, it attaches an `IncomingKafkaCloudEventMetadata` to the message metadata.\n"
"So, you can retrieve the various attributes as well as the extensions:"
msgstr "当连接器接收到云事件时，它会将 `IncomingKafkaCloudEventMetadata` 附加到消息元数据中。因此，您可以检索各种属性以及扩展名："

#. type: Title ==
#: _posts/2020-12-01-kafka-cloud-events.adoc
#, fuzzy, no-wrap
msgid "Summary"
msgstr "摘要"

#: _posts/2020-12-01-kafka-cloud-events.adoc
#, fuzzy
msgid ""
"With the rise of event-driven architecture, Cloud Events are becoming highly popular.\n"
"Since Quarkus 1.9, the Kafka Connector used in Quarkus has built-in support for Cloud Events.\n"
"This post introduced Cloud Events and showed how you could write and read Cloud Events easily."
msgstr "随着事件驱动架构的兴起，云事件变得非常流行。自 Quarkus 1.9 起，Quarkus 中使用的 Kafka Connector 已内置了对云事件的支持。这篇文章介绍了云事件，并展示了如何轻松写入和读取云事件。"

#: _posts/2020-12-01-kafka-cloud-events.adoc
#, fuzzy
msgid ""
"Many more options are http://smallrye.io/smallrye-reactive-messaging/3.14.1/kafka/kafka/[available], and Kafka is not the only part of Quarkus with Cloud Events support.\n"
"For example, Funqy[https://quarkus.io/guides/funqy#context-injection] also supports Cloud Event out of the box."
msgstr "还有更多选项 link:http://smallrye.io/smallrye-reactive-messaging/3.14.1/kafka/kafka/[可用] ，而且 Kafka 并不是 Quarkus 中唯一支持云事件的部分。例如，Funqy[ link:https://quarkus.io/guides/funqy#context-injection[https://quarkus.io/guides/funqy#context-injection]] 也支持开箱即用的云事件。"
