# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy, no-wrap
msgid "Massive performance without headaches"
msgstr "巨大的性能而不令人头疼"

#. type: YAML Front Matter: synopsis
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy, no-wrap
msgid "RESTEasy Reactive FAQ"
msgstr "RESTEasy 反应式常见问题"

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "The purpose of this blog post is to clear up some confusion about RESTEasy Reactive and answer some commonly asked questions around it."
msgstr "这篇博文的目的是要澄清关于RESTEasy Reactive的一些困惑，并回答一些围绕它的常见问题。"

#. type: Title ==
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, no-wrap
msgid "Acknowledgement"
msgstr "消息确认"

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "This blog post would not have been possible without the expert advice of https://twitter.com/clementplop[Clement Escoffier] and https://twitter.com/unfromage[Stéphane Épardaud]."
msgstr "如果没有 link:https://twitter.com/clementplop[Clement Escoffier] 和 link:https://twitter.com/unfromage[Stéphane Épardaud] 的专业建议，这篇博文是不可能的。"

#. type: Title ==
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy, no-wrap
msgid "Imperative and Reactive: the elevator pitch"
msgstr "强迫性和反应性：升降机演讲"

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "In our quest to understand why RESTEasy Reactive is important and how it differs from RESTEasy Classic, it helps to paraphrase a very important message that was first introduced https://quarkus.io/blog/io-thread-benchmark/#imperative-and-reactive-the-elevator-pitch[here]."
msgstr "在我们寻求理解为什么RESTEasy Reactive很重要以及它与RESTEasy Classic有什么不同时，转述 link:https://quarkus.io/blog/io-thread-benchmark/#imperative-and-reactive-the-elevator-pitch[这里] 首次介绍的一个非常重要的信息是有帮助的。"

#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid ""
"In general, Java web applications use imperative programming combined with blocking IO operations. This is incredibly popular because it is easier to reason about the code.\n"
"Things get executed sequentially. When the application receives a request, the framework associates this request to a worker thread.\n"
"When the request processing needs to interact with a database or another remote service, it relies on blocking IO.\n"
"The thread is blocked waiting for the answer, making the communication synchronous. With this model one request is not affected by another as they are run on different threads.\n"
"Even when one thread is waiting, other requests running on different threads are not slowed down significantly."
msgstr "一般来说，Java 网络应用程序使用命令式编程，并结合阻塞 IO 操作。这种编程方式非常流行，因为它更容易对代码进行推理。事情会按顺序执行。当应用程序收到一个请求时，框架会将该请求关联到一个工作线程。当请求处理需要与数据库或其他远程服务交互时，就需要依赖阻塞 IO。线程被阻塞等待应答，从而实现同步通信。在这种模式下，一个请求不会受到另一个请求的影响，因为它们是在不同的线程上运行的。即使一个线程在等待，在不同线程上运行的其他请求也不会明显变慢。"

#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid ""
"However, with this model, you need one thread for every concurrent request, which places a limit on the achievable concurrency.\n"
"On the other side, the reactive execution model embraces asynchronous development models and non-blocking IO.\n"
"With this model, multiple requests can be handled by the same thread. When the processing of a request can no longer make progress\n"
"(because it requests a remote service, or interacts with a database for example), it uses non-blocking IO.\n"
"Instead of blocking the thread, it schedules the operation and passes a continuation which would be invoked after the completion\n"
"of the operationfootnote:[This article won’t detail how operating systems and non-blocking IO libraries enable such a model. Under the hood, kernel mechanisms such as select, epoll and ICMP are making the handling of IO very efficient, in terms of speed and resource utilization.].\n"
"This releases the thread immediately, which can then be used to serve another request. When the result of the IO operation is available,\n"
"the processing of the request is resumed and continues its execution."
msgstr "然而，在这种模式下，每个并发请求都需要一个线程，这就限制了可实现的并发性。另一方面，反应式执行模型包含异步开发模型和非阻塞 IO。在这种模式下，同一线程可以处理多个请求。当一个请求的处理无法再取得进展时（因为它请求远程服务或与数据库交互），就会使用非阻塞 IO。它不会阻塞线程，而是调度操作并传递一个在操作完成后调用的继续[ link:[1, id=\"_footnoteref_1\", class=\"footnote\", href=\"#_footnotedef_1\", title=\"View footnote.\"] ]。这样就能立即释放线程，使其可以用于处理另一个请求。当 IO 操作的结果可用时，请求的处理将恢复并继续执行。"

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "This model enables the usage of a single IO thread to handle multiple requests. There are three significant benefits."
msgstr "这种模式可以使用单个IO线程来处理多个请求。这有三个显著的好处。"

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "First, the response time is smaller because it does not have to jump to another thread."
msgstr "首先，响应时间更小，因为它不需要跳转到另一个线程。"

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "Second, it reduces memory consumption as it decreases the usage of threads."
msgstr "第二，它减少了内存消耗，因为它减少了线程的使用。"

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "Third, your concurrency is no longer limited by the number of threads."
msgstr "第三，你的并发性不再受线程数量的限制。"

#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid ""
"The reactive model uses the hardware resources more efficiently, but... a significant pitfall lurks. If the processing of a request starts to block, things can go south really quickly as\n"
"no other request can be handled. To avoid this, you need to learn how to write asynchronous and non-blocking code, how to schedule operations, how to write continuations, how to chain actions.\n"
"Basically, we need a way to structure asynchronous processing, and use non-blocking IO. No doubt, that consists of a paradigm shift.\n"
"In Quarkus, we want to make the shift as easy as possible, so RESTEasy Reactive allows you to choose whether an endpoint is blocking or non-blocking\n"
"(an application is free to mix and match blocking and non-blocking methods at will).\n"
"So don’t be intimidated by the reactive word, the infrastructure is reactive, but your code can be either reactive or imperative. That’s what we mean by unification of reactive and imperative."
msgstr "反应式模型能更有效地利用硬件资源，但......也潜藏着一个重大隐患。如果一个请求的处理开始阻塞，事情就会迅速恶化，因为其他请求都无法处理。为了避免这种情况，你需要学习如何编写异步和非阻塞代码、如何安排操作、如何编写连续程序、如何连锁操作。基本上，我们需要一种结构化异步处理和使用非阻塞 IO 的方法。毫无疑问，这需要范式的转变。在 Quarkus 中，我们希望尽可能简化这种转变，因此 RESTEasy Reactive 允许你选择端点是阻塞还是非阻塞（应用程序可以随意混合和匹配阻塞和非阻塞方法）。因此，不要被 \"反应式 \"这个词吓倒，基础架构是反应式的，但你的代码既可以是反应式的，也可以是命令式的。这就是我们所说的反应式和命令式的统一。"

#. type: Title ==
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy, no-wrap
msgid "What that means from a RESTEasy Reactive perspective"
msgstr "从RESTEasy Reactive的角度来看，这意味着什么？"

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "RESTEasy Reactive by default handles each HTTP request on an IO thread (otherwise known as an event-loop thread)footnote:[More information about the execution model of RESTEasy Reactive can be found https://quarkus.io/guides/resteasy-reactive#execution-model-blocking-non-blocking[here]]."
msgstr "RESTEasy Reactive默认在一个IO线程（也称为事件循环线程）上处理每个HTTP请求[ link:#_footnotedef_1[1, id=\"_footnoteref_1\", class=\"footnote\", title=\"View footnote.\"]]。"

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "The following image shows what that looks at a high level:"
msgstr "下面的图片显示了高层次的情况。"

#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid ""
"This ensures that maximum throughput can be achieved, but it also means that the implementation of an endpoint method should complete in a timely fashion otherwise the thread will be used for too longfootnote:[\"Too long\" depends on your target concurrency. You may consider 1ms as too long for some endpoint heavily used, but 100ms might be acceptable for less used endpoints]\n"
"and other requests will be queued up and lead to degraded throughput."
msgstr "这可以确保实现最大吞吐量，但也意味着端点方法的执行应及时完成，否则线程将被使用过久[ link:[1, id=\"_footnoteref_1\", class=\"footnote\", href=\"#_footnotedef_1\", title=\"View footnote.\"] ]，其他请求将排队等待，导致吞吐量下降。"

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "It is important to understand that a method body that uses imperative code only becomes a problem when it takes a long time to execute - which is almost always the case for blocking IO operations."
msgstr "重要的是要理解，使用命令式代码的方法体只有在执行时间较长时才会成为问题--对于阻塞式IO操作来说，几乎总是这样。"

#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid ""
"For that reason, when the body of the method performs some kind of blocking IO operation (or even some CPU bound operation that requires time to complete), the request needs to be offloaded to a worker thread.\n"
"In RESTEasy Reactive that is done declaratively using the `@Blocking` annotation - no reactive programming or complex Java concurrency related code is needed.\n"
"Quarkus also warns you when you attempt to use blocking IO on an IO thread.\n"
"If however the method body performs non-blocking IO (or some CPU bound operation that completes very quickly) then RESTEasy Reactive can continue to serve the entire request on the IO thread."
msgstr "因此，当方法的主体执行某种阻塞性 IO 操作（甚至是某些需要时间才能完成的 CPU 绑定操作）时，需要将请求卸载到工作线程。在 RESTEasy Reactive 中，这可以通过 `@Blocking` 注解以声明的方式完成--不需要反应式编程或复杂的 Java 并发相关代码。当你试图在 IO 线程上使用阻塞 IO 时，Quarkus 也会发出警告。但是，如果方法体执行的是非阻塞性 IO（或一些 CPU 绑定的操作，很快就能完成），那么 RESTEasy Reactive 可以继续在 IO 线程上为整个请求提供服务。"

#. type: Title ==
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy, no-wrap
msgid "Is RESTEasy Reactive limited to using reactive APIs?"
msgstr "RESTEasy Reactive是否仅限于使用反应式API？"

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "Absolutely not!"
msgstr "绝对不可能!"

#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid ""
"Although RESTEasy Reactive was built from the ground up to do non-blocking IO and serve requests from the event loop threads (thus avoiding the needless usage of worker pool threads)\n"
"it can effortlessly work with blocking IO and any piece of code that provides a blocking API (such as Hibernate) without blocking the event loop."
msgstr "虽然 RESTEasy Reactive 从一开始就是为了进行非阻塞 IO 和从事件循环线程服务请求（从而避免不必要地使用工作池线程）而构建的，但它可以毫不费力地处理阻塞 IO 和任何提供阻塞 API 的代码（如 Hibernate），而不会阻塞事件循环。"

#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid ""
"The only thing you have to do is add `@Blocking` on your endpoint method or class.\n"
"That’s it! If you use `@Blocking` you are back to the regular dispatching mechanism: a worker thread is used to execute your method."
msgstr "您唯一需要做的就是在端点方法或类中添加 `@Blocking` 。就是这样！如果您使用 `@Blocking` ，就又回到了常规的调度机制：使用工作线程来执行您的方法。"

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "At a high level it this looks like this:"
msgstr "在一个较高的水平上，这看起来像这样。"

#. type: Title ==
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy, no-wrap
msgid "Does RESTEasy Reactive require Hibernate Reactive?"
msgstr "RESTEasy Reactive是否需要Hibernate Reactive？"

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "As you can probably guess from the answer to the previous question, the answer is no."
msgstr "从上一个问题的答案中你可能可以猜到，答案是否定的。"

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "In scenarios where RESTEasy Reactive is used along with Hibernate, the `@Blocking` annotation should be placed on the endpoint methods that interact with Hibernate."
msgstr "在RESTEasy Reactive与Hibernate一起使用的情况下， `@Blocking` 注释应该放在与Hibernate交互的端点方法上。"

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "In scenarios where RESTEasy Reactive is used along with Hibernate Reactive, no `@Blocking` annotation is necessary on the endpoint methods that interact with Hibernate Reactive."
msgstr "在RESTEasy Reactive与Hibernate Reactive一起使用的情况下，与Hibernate Reactive交互的端点方法不需要 `@Blocking` 注释。"

#. type: Title ==
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy, no-wrap
msgid "What is the performance implication of using @Blocking?"
msgstr "使用@Blocking对性能的影响是什么？"

#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid ""
"Although the absolute highest throughput is achieved when an endpoint method is non-blocking (that is the HTTP request is served completely from the event loop thread),\n"
"great performance can nonetheless be achieved even when `@Blocking` is used."
msgstr "虽然非阻塞（即 HTTP 请求完全由事件循环线程提供）端点方法的吞吐量绝对最高，但即使使用 `@Blocking` ，也能获得很好的性能。"

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "In our benchmarks we see the use of `@Blocking` reduce maximum throughput by around 30%footnote:[This is basically the cost we have to pay for dispatching the request to a worker thread. The percentage of the slowdown decreases the longer the target method takes to execute]."
msgstr "在我们的基准测试中，我们看到使用 `@Blocking` ，最大吞吐量减少了30%左右[ link:#_footnotedef_1[1, id=\"_footnoteref_1\", class=\"footnote\", title=\"View footnote.\"]]。"

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "However, an endpoint method using `@Blocking` in RESTEasy Reactive still achieves around 50% higher throughput than the same method using RESTEasy Classic."
msgstr "然而，在RESTEasy Reactive中使用 `@Blocking` 的端点方法仍然比使用RESTEasy Classic的相同方法实现了约50%的吞吐量。"

#. type: Title ==
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy, no-wrap
msgid "Why does RESTEasy Reactive using @Blocking perform better than RESTEasy Classic?"
msgstr "为什么使用@Blocking的RESTEasy Reactive比RESTEasy Classic性能更好？"

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "RESTEasy Reactive is able to gain its performance advantage over RESTEasy Classic by:"
msgstr "RESTEasy Reactive能够通过以下方式获得对RESTEasy Classic的性能优势。"

#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid ""
"Integrating very tightly with Eclipse Vert.x for everything IO related. Vert.x has been extremely well optimized for IO operations and so tight integration with it allows RESTEasy Reactive to benefit from all that work.\n"
"You might recall that RESTEasy Classic on Quarkus uses Vert.x under the hood as well, but in that case the integration is not as deep and is therefore unable to fully utilize the power of Vert.x."
msgstr "与 Eclipse Vert.x 紧密集成，实现所有 IO 相关功能。Vert.x 对 IO 操作进行了极好的优化，因此与它紧密集成可以让 RESTEasy Reactive 从所有这些工作中受益。您可能还记得 Quarkus 上的 RESTEasy Classic 也在引擎盖下使用了 Vert.x，但在这种情况下，集成并不深入，因此无法充分利用 Vert.x 的强大功能。"

#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid ""
"Moving a lot of work to build time. As RESTEasy Reactive was built from the ground up to serve the needs of Quarkus, it benefits from the tightest possible integration with Quarkus and is probably the extension that does the most build time work.\n"
"This in turn results in creating an optimal data pipeline for serving each request, helping the JIT compiler by generating bytecode to inline runtime operations, eliminating reflection at runtime (both for invoking methods and for determining types) and reducing memory allocations."
msgstr "将大量工作转移到构建时间。由于 RESTEasy Reactive 从一开始就是为满足 Quarkus 的需求而构建的，因此它可以从与 Quarkus 最紧密的集成中获益，并且可能是在构建时工作量最大的扩展。这反过来又能为每个请求创建最佳的数据管道，通过生成内联运行时操作的字节码来帮助 JIT 编译器，消除运行时的反射（包括调用方法和确定类型），并减少内存分配。"

#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid ""
"Avoiding the use of ThreadLocals and instead by utilizing a context object that contains all the necessary information.\n"
"ThreadLocals are a convenient way to make data available to different parts of a framework, but their frequent use comes at a cost and are thus fully avoided in RESTEasy Reactive."
msgstr "避免使用 ThreadLocals，而是利用包含所有必要信息的上下文对象。ThreadLocals 是向框架的不同部分提供数据的便捷方法，但频繁使用 ThreadLocals 是有代价的，因此 RESTEasy Reactive 完全避免使用 ThreadLocals。"

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "Utilizing Arc in an optimal manner for all necessary injections. RESTEasy Classic provides an abstraction layer that performs the various injection operations, which for the needs of Quarkus is entirely unnecessary since Arc provides the same functionality with better performance."
msgstr "以最佳方式利用Arc进行所有必要的注入。RESTEasy Classic提供了一个执行各种注入操作的抽象层，对于Quarkus的需求来说，这完全是不必要的，因为Arc提供了同样的功能，而且性能更好。"

#. type: Title ==
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy, no-wrap
msgid "How does it compare to RESTEasy Classic with Mutiny?"
msgstr "它与带有Mutiny的RESTEasy Classic相比如何？"

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "You might recall that Quarkus allows you to use Mutiny return types (Uni and Multi) when using RESTEasy Classic via the `quarkus-resteasy-mutiny` extension and thus might be wondering how that compares to using RESTEasy Reactive."
msgstr "你可能记得，Quarkus允许你在使用RESTEasy Classic时通过 `quarkus-resteasy-mutiny` 扩展使用Mutiny返回类型（Uni和Multi），因此你可能想知道这与使用RESTEasy Reactive相比有何不同。"

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "The main thing to understand about RESTEasy Classic is that it *always* handles requests on a worker thread as it does not use the event-loop concept at all."
msgstr "要了解RESTEasy Classic的主要内容是，它 *总是* 在一个工作线程上处理请求，因为它根本不使用事件循环的概念。"

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "This is best shown by the following image:"
msgstr "下面的图片最能说明这一点。"

#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid ""
"So when using RESTEasy Classic even when you return a reactive type like `Uni` or `Multi` the initial request is still being handled on a worker thread and while the call to the library may result in non-blocking IO,\n"
"nevertheless there is no way for RESTEasy Classic to reuse the worker thread once it is blocked waiting on IO."
msgstr "因此，在使用 RESTEasy Classic 时，即使返回的是 `Uni` 或 `Multi` 这样的反应式类型，初始请求仍然是在工作线程上处理的，虽然对库的调用可能会导致无阻塞 IO，但一旦工作线程阻塞等待 IO，RESTEasy Classic 就无法重用工作线程。"

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "Thus, the gain of using reactive return types in RESTEasy Classic is a syntactic gain, not a runtime gain - the underlying hardware isn’t used more efficiently despite the use of reactive types."
msgstr "因此，在RESTEasy Classic中使用反应式返回类型的好处是语法上的好处，而不是运行时的好处--尽管使用了反应式类型，底层硬件并没有得到更有效的使用。"

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "When returning Mutiny types using RESTEasy Reactive, everything happens on the IO Thread (except if the endpoint is annotated with `@Blocking`). By the way, no need for an external extension to use Mutiny with RESTEasy Reactive, it’s built-in!"
msgstr "当使用RESTEasy Reactive返回Mutiny类型时，一切都发生在IO线程上（除非端点被注解为 `@Blocking` ）。顺便说一下，在RESTEasy Reactive中使用Mutiny不需要外部扩展，它是内置的。"

#. type: Title ==
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy, no-wrap
msgid "Do I have to use the new RESTEasy Reactive APIs to achieve maximum performance?"
msgstr "我是否必须使用新的RESTEasy Reactive APIs来实现最大的性能？"

#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid ""
"Reading through the RESTEasy Reactive documentation you soon come across the new APIs for writing request filters (https://quarkus.io/guides/resteasy-reactive#request-or-response-filters[@ServerRequestFilter]),\n"
"response filters (`@ServerResponseFilter`) and exception mappers (https://quarkus.io/guides/resteasy-reactive#exception-mapping[@ServerExceptionMapper]).\n"
"You might wonder if their usage affects performance in any way compared to the standard JAX-RS APIs (`ContainerRequestFilter`, `ContainerResponseFilter` and `ExceptionMapper`)."
msgstr "通过阅读 RESTEasy Reactive 文档，您很快就会发现用于编写请求过滤器（ link:https://quarkus.io/guides/resteasy-reactive#request-or-response-filters[@ServerRequestFilter] ）、响应过滤器（ `@ServerResponseFilter` ）和异常映射器（ link:https://quarkus.io/guides/resteasy-reactive#exception-mapping[@ServerExceptionMapper] ）的新 API。与标准的 JAX-RS API（ `ContainerRequestFilter` 、 `ContainerResponseFilter` 和 `ExceptionMapper` ）相比，您可能想知道使用这些 API 是否会影响性能。"

#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid ""
"Although the new APIs will give a tiny performance advantage over using the old APIs if the use of `@Context` is involved in the latter case, the advantage is negligible and should not worry you unless you are trying to squeeze out every inch of performance you can find.\n"
"One thing to keep in mind when writing filters with either API, is that using `org.jboss.resteasy.reactive.server.SimpleResourceInfo` instead of `javax.ws.rs.container.ResourceInfo` is advised as the latter results in reflection being performed."
msgstr "如果在后一种情况下使用 `@Context` ，新的 API 会比使用旧的 API 带来微小的性能优势，但这种优势可以忽略不计，除非您想尽一切办法提高性能，否则无需担心。在使用这两种 API 编写过滤器时，需要注意的一点是，建议使用 `org.jboss.resteasy.reactive.server.SimpleResourceInfo` 而不是 `javax.ws.rs.container.ResourceInfo` ，因为后者会导致执行反射。"

#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid ""
"A special (albeit rather advanced) case where the new APIs do result in noticeably better performance is the case of `MessageBodyReader` and `MessageBodyWriter` classes.\n"
"When reading the HTTP request and writing the HTTP response, the use of https://quarkus.io/guides/resteasy-reactive#readers-and-writers-mapping-entities-and-http-bodies[ServerMessageBodyReader] and `ServerMessageBodyWriter` allows RESTEasy Reactive to optimize the data-path for serving the request."
msgstr "`MessageBodyReader` 和 `MessageBodyWriter` 类是一个特殊（尽管相当高级）的案例，新的 API 确实明显提高了性能。在读取 HTTP 请求和写入 HTTP 响应时， link:https://quarkus.io/guides/resteasy-reactive#readers-and-writers-mapping-entities-and-http-bodies[ServerMessageBodyReader] 和 `ServerMessageBodyWriter` 的使用允许 RESTEasy Reactive 优化服务请求的数据路径。"

#. type: Title ==
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy, no-wrap
msgid "What about Reactive Routes?"
msgstr "反应性路线如何？"

#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid ""
"Quarkus was already providing a way to handle HTTP requests from the IO thread. Reactive Routes provides a declarative model to implement HTTP API. Each route can be called on the IO thread (default) or on a worker thread (using the `@Blocking` annotation).\n"
"Reactive Routes provide very good throughput and performance as highlighted in https://quarkus.io/blog/io-thread-benchmark/[this] article. How does reactive routes compare to RESTEasy Reactive?"
msgstr "Quarkus 已经提供了一种从 IO 线程处理 HTTP 请求的方法。Reactive Routes 提供了一个声明式模型来实现 HTTP API。每个路由都可以在 IO 线程（默认）或工作线程（使用 `@Blocking` 注解）上调用。正如 link:https://quarkus.io/blog/io-thread-benchmark/[本文] 所强调的，反应式路由提供了非常好的吞吐量和性能。反应式路由与 RESTEasy Reactive 相比如何？"

#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid ""
"One of the main complaints we got about Reactive Routes was about the development model: it’s very different from the one used with RESTEasy. However, Reactive Routes allowed us to verify the performance and efficiency benefits of using an end-to-end reactive model on top of Quarkus.\n"
"RESTEasy Reactive can be seen as the “next generation”: you get the runtime benefits while also using a familiar development model."
msgstr "我们对 Reactive Routes 的主要抱怨之一是开发模型：它与 RESTEasy 所使用的模型大相径庭。不过，Reactive Routes 让我们验证了在 Quarkus 上使用端到端反应模型在性能和效率方面的优势。RESTEasy Reactive 可以看作是 \"下一代 \"产品：在使用熟悉的开发模型的同时，还能获得运行时的优势。"

#. type: Title ==
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy, no-wrap
msgid "Summary"
msgstr "摘要"

#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid ""
"RESTEasy Reactive is the next generation of HTTP framework. It unifies reactive (non-blocking IO, asynchronous APIs) and imperative (thanks to the `@Blocking` annotation). It improves raw performances without constraining the user experience.\n"
"Its reactive/imperative duality makes it fit any use cases, from highly concurrent HTTP APIs, to more traditional transactional CRUD applications."
msgstr "RESTEasy Reactive 是下一代 HTTP 框架。它统一了反应式（非阻塞 IO、异步 API）和命令式（得益于 `@Blocking` 注解）。它在不限制用户体验的前提下提高了原始性能。它的反应性/操作性二元性使其适用于从高并发 HTTP API 到更传统的事务性 CRUD 应用程序的任何用例。"

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "We see RESTEasy Reactive as becoming the default HTTP layer in Quarkus in the near future and are completely committed to making it perform at the best possible level while also introducing new features that spark developer joy!"
msgstr "我们认为，在不久的将来，RESTEasy Reactive 将成为 Quarkus 的默认 HTTP 层，我们将全力以赴使其达到最佳性能，同时引入新功能，激发开发人员的热情！"

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "In that vein, we hope that this short blog post will provide you with some insight on what makes RESTEasy Reactive special and clear up any misconceptions you may have had about it."
msgstr "因此，我们希望这篇简短的博文能让您了解 RESTEasy Reactive 的特别之处，并消除您对它的误解。"
