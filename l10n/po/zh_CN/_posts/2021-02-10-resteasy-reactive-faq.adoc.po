# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:1
#, fuzzy, no-wrap
msgid "geoand"
msgstr "地质和"

#. type: YAML Front Matter: date
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:1
#, fuzzy, no-wrap
msgid "2021-02-10"
msgstr "2021-02-10"

#. type: YAML Front Matter: layout
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "职位"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:1
#, fuzzy, no-wrap
msgid "RESTEasy Reactive FAQ"
msgstr "RESTEasy 反应式常见问题"

#. type: YAML Front Matter: tags
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:1
#, fuzzy, no-wrap
msgid "reactive web rest resteasy"
msgstr "反应式网络休息系统 resteasy"

#. type: YAML Front Matter: title
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:1
#, fuzzy, no-wrap
msgid "Massive performance without headaches"
msgstr "巨大的性能而不令人头疼"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:12
#, fuzzy
msgid "The purpose of this blog post is to clear up some confusion about RESTEasy Reactive and answer some commonly asked questions around it."
msgstr "这篇博文的目的是要澄清关于RESTEasy Reactive的一些困惑，并回答一些围绕它的常见问题。"

#. type: Title ==
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:13
#, fuzzy, no-wrap
msgid "Acknowledgement"
msgstr "鸣谢"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:16
#, fuzzy
msgid "This blog post would not have been possible without the expert advice of https://twitter.com/clementplop[Clement Escoffier] and https://twitter.com/unfromage[Stéphane Épardaud]."
msgstr "如果没有 link:https://twitter.com/clementplop[Clement Escoffier] 和 link:https://twitter.com/unfromage[Stéphane Épardaud] 的专业建议，这篇博文是不可能的。"

#. type: Title ==
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:17
#, fuzzy, no-wrap
msgid "Imperative and Reactive: the elevator pitch"
msgstr "强迫性和反应性：升降机演讲"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:20
#, fuzzy
msgid "In our quest to understand why RESTEasy Reactive is important and how it differs from RESTEasy Classic, it helps to paraphrase a very important message that was first introduced https://quarkus.io/blog/io-thread-benchmark/#imperative-and-reactive-the-elevator-pitch[here]."
msgstr "在我们寻求理解为什么RESTEasy Reactive很重要以及它与RESTEasy Classic有什么不同时，转述 link:https://quarkus.io/blog/io-thread-benchmark/#imperative-and-reactive-the-elevator-pitch[这里] 首次介绍的一个非常重要的信息是有帮助的。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:26
#, fuzzy
msgid "In general, Java web applications use imperative programming combined with blocking IO operations. This is incredibly popular because it is easier to reason about the code.  Things get executed sequentially. When the application receives a request, the framework associates this request to a worker thread.  When the request processing needs to interact with a database or another remote service, it relies on blocking IO.  The thread is blocked waiting for the answer, making the communication synchronous. With this model one request is not affected by another as they are run on different threads.  Even when one thread is waiting, other requests running on different threads are not slowed down significantly."
msgstr "一般来说，Java网络应用程序使用命令式编程与阻塞式IO操作相结合。这是令人难以置信的流行，因为它更容易推理代码。事情是按顺序执行的。当应用程序收到一个请求时，框架将这个请求与一个工作线程相关联。当请求处理需要与数据库或其他远程服务进行交互时，它依赖于阻塞的IO。线程被阻塞，等待答案，使得通信是同步的。在这种模式下，一个请求不会受到另一个请求的影响，因为它们是在不同的线程上运行。即使一个线程在等待，在不同线程上运行的其他请求也不会被明显减慢。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:35
#, fuzzy
msgid "However, with this model, you need one thread for every concurrent request, which places a limit on the achievable concurrency.  On the other side, the reactive execution model embraces asynchronous development models and non-blocking IO.  With this model, multiple requests can be handled by the same thread. When the processing of a request can no longer make progress (because it requests a remote service, or interacts with a database for example), it uses non-blocking IO.  Instead of blocking the thread, it schedules the operation and passes a continuation which would be invoked after the completion of the operationfootnote:[This article won’t detail how operating systems and non-blocking IO libraries enable such a model. Under the hood, kernel mechanisms such as select, epoll and ICMP are making the handling of IO very efficient, in terms of speed and resource utilization.].  This releases the thread immediately, which can then be used to serve another request. When the result of the IO operation is available, the processing of the request is resumed and continues its execution."
msgstr "然而，在这种模式下，每一个并发请求都需要一个线程，这就对可实现的并发性造成了限制。另一方面，反应式执行模型包含了异步开发模型和非阻塞式IO。在这种模式下，多个请求可以由同一个线程处理。当一个请求的处理不能再取得进展时（因为它请求一个远程服务，或与数据库交互，例如），它使用非阻塞的IO。它不阻塞线程，而是安排操作，并传递一个延续，这个延续将在操作完成后被调用[ link:#_footnotedef_1[1, id=\"_footnoteref_1\", class=\"footnote\", title=\"View footnote.\"]]。这就立即释放了线程，然后它就可以用来为另一个请求服务。当IO操作的结果可用时，请求的处理被恢复并继续执行。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:37
#, fuzzy
msgid "This model enables the usage of a single IO thread to handle multiple requests. There are three significant benefits."
msgstr "这种模式可以使用单个IO线程来处理多个请求。这有三个显著的好处。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:39
#, fuzzy
msgid "First, the response time is smaller because it does not have to jump to another thread."
msgstr "首先，响应时间更小，因为它不需要跳转到另一个线程。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:40
#, fuzzy
msgid "Second, it reduces memory consumption as it decreases the usage of threads."
msgstr "第二，它减少了内存消耗，因为它减少了线程的使用。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:41
#, fuzzy
msgid "Third, your concurrency is no longer limited by the number of threads."
msgstr "第三，你的并发性不再受线程数量的限制。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:48
#, fuzzy
msgid "The reactive model uses the hardware resources more efficiently, but... a significant pitfall lurks. If the processing of a request starts to block, things can go south really quickly as no other request can be handled. To avoid this, you need to learn how to write asynchronous and non-blocking code, how to schedule operations, how to write continuations, how to chain actions.  Basically, we need a way to structure asynchronous processing, and use non-blocking IO. No doubt, that consists of a paradigm shift.  In Quarkus, we want to make the shift as easy as possible, so RESTEasy Reactive allows you to choose whether an endpoint is blocking or non-blocking (an application is free to mix and match blocking and non-blocking methods at will).  So don’t be intimidated by the reactive word, the infrastructure is reactive, but your code can be either reactive or imperative. That’s what we mean by unification of reactive and imperative."
msgstr "反应式模型更有效地使用硬件资源，但是......一个重要的隐患潜伏着。如果一个请求的处理开始阻塞，事情就会迅速恶化，因为没有其他请求可以处理。为了避免这种情况，你需要学习如何编写异步和非阻塞的代码，如何安排操作，如何编写连续性，如何连锁行动。基本上，我们需要一种方法来构造异步处理，并使用非阻塞的IO。毫无疑问，这包括一个范式的转变。在Quarkus中，我们希望使这种转变尽可能容易，所以RESTEasy Reactive允许你选择一个端点是阻塞的还是非阻塞的（一个应用程序可以自由地混合和匹配阻塞和非阻塞方法）。所以不要被反应式这个词吓倒，基础设施是反应式的，但你的代码可以是反应式的，也可以是命令式的。这就是我们所说的反应式和命令式的统一的意思。"

#. type: Title ==
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:49
#, fuzzy, no-wrap
msgid "What that means from a RESTEasy Reactive perspective"
msgstr "从RESTEasy Reactive的角度来看，这意味着什么？"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:52
#, fuzzy
msgid "RESTEasy Reactive by default handles each HTTP request on an IO thread (otherwise known as an event-loop thread)footnote:[More information about the execution model of RESTEasy Reactive can be found https://quarkus.io/guides/resteasy-reactive#execution-model-blocking-non-blocking[here]]."
msgstr "RESTEasy Reactive默认在一个IO线程（也称为事件循环线程）上处理每个HTTP请求[ link:#_footnotedef_1[1, id=\"_footnoteref_1\", class=\"footnote\", title=\"View footnote.\"]]。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:54
#, fuzzy
msgid "The following image shows what that looks at a high level:"
msgstr "下面的图片显示了高层次的情况。"

#. type: Target for macro image
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:55
#, no-wrap
msgid "RR-non-blocking.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:59
#, fuzzy
msgid "This ensures that maximum throughput can be achieved, but it also means that the implementation of an endpoint method should complete in a timely fashion otherwise the thread will be used for too longfootnote:[\"Too long\" depends on your target concurrency. You may consider 1ms as too long for some endpoint heavily used, but 100ms might be acceptable for less used endpoints] and other requests will be queued up and lead to degraded throughput."
msgstr "这确保了可以实现最大的吞吐量，但这也意味着一个端点方法的实现应该及时完成，否则线程将被使用太长时间[ link:#_footnotedef_1[1, id=\"_footnoteref_1\", class=\"footnote\", title=\"View footnote.\"]]，其他请求将被排队，导致吞吐量下降。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:61
#, fuzzy
msgid "It is important to understand that a method body that uses imperative code only becomes a problem when it takes a long time to execute - which is almost always the case for blocking IO operations."
msgstr "重要的是要理解，使用命令式代码的方法体只有在执行时间较长时才会成为问题--对于阻塞式IO操作来说，几乎总是这样。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:66
#, fuzzy
msgid "For that reason, when the body of the method performs some kind of blocking IO operation (or even some CPU bound operation that requires time to complete), the request needs to be offloaded to a worker thread.  In RESTEasy Reactive that is done declaratively using the `@Blocking` annotation - no reactive programming or complex Java concurrency related code is needed.  Quarkus also warns you when you attempt to use blocking IO on an IO thread.  If however the method body performs non-blocking IO (or some CPU bound operation that completes very quickly) then RESTEasy Reactive can continue to serve the entire request on the IO thread."
msgstr "由于这个原因，当方法的主体执行某种阻塞的IO操作（甚至是一些需要时间才能完成的CPU约束的操作）时，需要将请求卸载到一个工作线程。在RESTEasy Reactive中，这可以通过使用 `@Blocking` 注释来完成 - 不需要反应式编程或复杂的Java并发相关代码。当你试图在一个IO线程上使用阻塞式IO时，Quarkus也会警告你。然而，如果方法主体执行的是非阻塞式IO（或一些完成速度非常快的CPU约束操作），那么RESTEasy Reactive可以继续在IO线程上提供整个请求。"

#. type: Title ==
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:67
#, fuzzy, no-wrap
msgid "Is RESTEasy Reactive limited to using reactive APIs?"
msgstr "RESTEasy Reactive是否仅限于使用反应式API？"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:70
#, fuzzy
msgid "Absolutely not!"
msgstr "绝对不可能!"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:73
#, fuzzy
msgid "Although RESTEasy Reactive was built from the ground up to do non-blocking IO and serve requests from the event loop threads (thus avoiding the needless usage of worker pool threads)  it can effortlessly work with blocking IO and any piece of code that provides a blocking API (such as Hibernate) without blocking the event loop."
msgstr "尽管RESTEasy Reactive从一开始就是为了进行非阻塞式IO和从事件循环线程中提供请求（从而避免不必要地使用工作池线程），但它可以毫不费力地与阻塞式IO和任何提供阻塞式API的代码（如Hibernate）一起工作，而不会阻塞事件循环。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:76
#, fuzzy
msgid "The only thing you have to do is add `@Blocking` on your endpoint method or class.  That’s it! If you use `@Blocking` you are back to the regular dispatching mechanism: a worker thread is used to execute your method."
msgstr "你唯一要做的就是在你的端点方法或类上添加 `@Blocking` 。这就是了!如果你使用 `@Blocking` ，你就回到了常规的调度机制：用一个工作线程来执行你的方法。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:78
#, fuzzy
msgid "At a high level it this looks like this:"
msgstr "在一个较高的水平上，这看起来像这样。"

#. type: Target for macro image
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:79
#, no-wrap
msgid "RR-blocking.png"
msgstr ""

#. type: Title ==
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:81
#, fuzzy, no-wrap
msgid "Does RESTEasy Reactive require Hibernate Reactive?"
msgstr "RESTEasy Reactive是否需要Hibernate Reactive？"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:84
#, fuzzy
msgid "As you can probably guess from the answer to the previous question, the answer is no."
msgstr "从上一个问题的答案中你可能可以猜到，答案是否定的。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:86
#, fuzzy
msgid "In scenarios where RESTEasy Reactive is used along with Hibernate, the `@Blocking` annotation should be placed on the endpoint methods that interact with Hibernate."
msgstr "在RESTEasy Reactive与Hibernate一起使用的情况下， `@Blocking` 注释应该放在与Hibernate交互的端点方法上。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:88
#, fuzzy
msgid "In scenarios where RESTEasy Reactive is used along with Hibernate Reactive, no `@Blocking` annotation is necessary on the endpoint methods that interact with Hibernate Reactive."
msgstr "在RESTEasy Reactive与Hibernate Reactive一起使用的情况下，与Hibernate Reactive交互的端点方法不需要 `@Blocking` 注释。"

#. type: Title ==
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:89
#, fuzzy, no-wrap
msgid "What is the performance implication of using @Blocking?"
msgstr "使用@Blocking对性能的影响是什么？"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:93
#, fuzzy
msgid "Although the absolute highest throughput is achieved when an endpoint method is non-blocking (that is the HTTP request is served completely from the event loop thread), great performance can nonetheless be achieved even when `@Blocking` is used."
msgstr "虽然绝对最高的吞吐量是在端点方法为非阻塞时实现的（即HTTP请求完全由事件循环线程提供），但即使在使用 `@Blocking` ，也可以实现很好的性能。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:95
#, fuzzy
msgid "In our benchmarks we see the use of `@Blocking` reduce maximum throughput by around 30%footnote:[This is basically the cost we have to pay for dispatching the request to a worker thread. The percentage of the slowdown decreases the longer the target method takes to execute]."
msgstr "在我们的基准测试中，我们看到使用 `@Blocking` ，最大吞吐量减少了30%左右[ link:#_footnotedef_1[1, id=\"_footnoteref_1\", class=\"footnote\", title=\"View footnote.\"]]。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:97
#, fuzzy
msgid "However, an endpoint method using `@Blocking` in RESTEasy Reactive still achieves around 50% higher throughput than the same method using RESTEasy Classic."
msgstr "然而，在RESTEasy Reactive中使用 `@Blocking` 的端点方法仍然比使用RESTEasy Classic的相同方法实现了约50%的吞吐量。"

#. type: Title ==
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:98
#, fuzzy, no-wrap
msgid "Why does RESTEasy Reactive using @Blocking perform better than RESTEasy Classic?"
msgstr "为什么使用@Blocking的RESTEasy Reactive比RESTEasy Classic性能更好？"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:101
#, fuzzy
msgid "RESTEasy Reactive is able to gain its performance advantage over RESTEasy Classic by:"
msgstr "RESTEasy Reactive能够通过以下方式获得对RESTEasy Classic的性能优势。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:104
#, fuzzy
msgid "Integrating very tightly with Eclipse Vert.x for everything IO related. Vert.x has been extremely well optimized for IO operations and so tight integration with it allows RESTEasy Reactive to benefit from all that work.  You might recall that RESTEasy Classic on Quarkus uses Vert.x under the hood as well, but in that case the integration is not as deep and is therefore unable to fully utilize the power of Vert.x."
msgstr "与Eclipse Vert.x非常紧密地集成，以处理所有与IO有关的事情。Vert.x已经对IO操作进行了很好的优化，因此与它的紧密集成使RESTEasy Reactive能够从所有这些工作中受益。你可能还记得Quarkus上的RESTEasy Classic也使用了Vert.x，但在这种情况下，集成没有那么深入，因此无法完全利用Vert.x的力量。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:106
#, fuzzy
msgid "Moving a lot of work to build time. As RESTEasy Reactive was built from the ground up to serve the needs of Quarkus, it benefits from the tightest possible integration with Quarkus and is probably the extension that does the most build time work.  This in turn results in creating an optimal data pipeline for serving each request, helping the JIT compiler by generating bytecode to inline runtime operations, eliminating reflection at runtime (both for invoking methods and for determining types) and reducing memory allocations."
msgstr "将大量的工作转移到构建时间。由于RESTEasy Reactive是为了满足Quarkus的需求而从头开始构建的，它从与Quarkus最紧密的集成中受益，并且可能是在构建时做得最多的扩展。这反过来又为每个请求创建了一个最佳的数据管道，通过生成内联运行时操作的字节码来帮助JIT编译器，消除运行时的反射（包括调用方法和确定类型）并减少内存分配。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:108
#, fuzzy
msgid "Avoiding the use of ThreadLocals and instead by utilizing a context object that contains all the necessary information.  ThreadLocals are a convenient way to make data available to different parts of a framework, but their frequent use comes at a cost and are thus fully avoided in RESTEasy Reactive."
msgstr "避免使用ThreadLocals，而是通过利用一个包含所有必要信息的上下文对象。ThreadLocals是一种使数据对框架的不同部分可用的方便方法，但频繁使用它们是有代价的，因此在RESTEasy Reactive中完全避免了。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:109
#, fuzzy
msgid "Utilizing Arc in an optimal manner for all necessary injections. RESTEasy Classic provides an abstraction layer that performs the various injection operations, which for the needs of Quarkus is entirely unnecessary since Arc provides the same functionality with better performance."
msgstr "以最佳方式利用Arc进行所有必要的注入。RESTEasy Classic提供了一个执行各种注入操作的抽象层，对于Quarkus的需求来说，这完全是不必要的，因为Arc提供了同样的功能，而且性能更好。"

#. type: Title ==
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:110
#, fuzzy, no-wrap
msgid "How does it compare to RESTEasy Classic with Mutiny?"
msgstr "它与带有Mutiny的RESTEasy Classic相比如何？"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:113
#, fuzzy
msgid "You might recall that Quarkus allows you to use Mutiny return types (Uni and Multi) when using RESTEasy Classic via the `quarkus-resteasy-mutiny` extension and thus might be wondering how that compares to using RESTEasy Reactive."
msgstr "你可能记得，Quarkus允许你在使用RESTEasy Classic时通过 `quarkus-resteasy-mutiny` 扩展使用Mutiny返回类型（Uni和Multi），因此你可能想知道这与使用RESTEasy Reactive相比有何不同。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:115
#, fuzzy
msgid "The main thing to understand about RESTEasy Classic is that it *always* handles requests on a worker thread as it does not use the event-loop concept at all."
msgstr "要了解RESTEasy Classic的主要内容是，它 *总是* 在一个工作线程上处理请求，因为它根本不使用事件循环的概念。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:117
#, fuzzy
msgid "This is best shown by the following image:"
msgstr "下面的图片最能说明这一点。"

#. type: Target for macro image
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:118
#, no-wrap
msgid "CR.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:122
#, fuzzy
msgid "So when using RESTEasy Classic even when you return a reactive type like `Uni` or `Multi` the initial request is still being handled on a worker thread and while the call to the library may result in non-blocking IO, nevertheless there is no way for RESTEasy Classic to reuse the worker thread once it is blocked waiting on IO."
msgstr "因此，在使用RESTEasy Classic时，即使你返回一个像 `Uni` 或 `Multi` 这样的反应式类型，最初的请求仍然在一个工作线程上处理，虽然对库的调用可能导致非阻塞的IO，但一旦工作线程在等待IO时被阻塞，RESTEasy Classic就没有办法再使用它。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:124
#, fuzzy
msgid "Thus, the gain of using reactive return types in RESTEasy Classic is a syntactic gain, not a runtime gain - the underlying hardware isn’t used more efficiently despite the use of reactive types."
msgstr "因此，在RESTEasy Classic中使用反应式返回类型的好处是语法上的好处，而不是运行时的好处--尽管使用了反应式类型，底层硬件并没有得到更有效的使用。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:126
#, fuzzy
msgid "When returning Mutiny types using RESTEasy Reactive, everything happens on the IO Thread (except if the endpoint is annotated with `@Blocking`). By the way, no need for an external extension to use Mutiny with RESTEasy Reactive, it’s built-in!"
msgstr "当使用RESTEasy Reactive返回Mutiny类型时，一切都发生在IO线程上（除非端点被注解为 `@Blocking` ）。顺便说一下，在RESTEasy Reactive中使用Mutiny不需要外部扩展，它是内置的。"

#. type: Title ==
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:127
#, fuzzy, no-wrap
msgid "Do I have to use the new RESTEasy Reactive APIs to achieve maximum performance?"
msgstr "我是否必须使用新的RESTEasy Reactive APIs来实现最大的性能？"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:132
#, fuzzy
msgid "Reading through the RESTEasy Reactive documentation you soon come across the new APIs for writing request filters (https://quarkus.io/guides/resteasy-reactive#request-or-response-filters[@ServerRequestFilter]), response filters (`@ServerResponseFilter`) and exception mappers (https://quarkus.io/guides/resteasy-reactive#exception-mapping[@ServerExceptionMapper]).  You might wonder if their usage affects performance in any way compared to the standard JAX-RS APIs (`ContainerRequestFilter`, `ContainerResponseFilter` and `ExceptionMapper`)."
msgstr "通过阅读RESTEasy Reactive文档，你很快就会发现用于编写请求过滤器 link:https://quarkus.io/guides/resteasy-reactive#request-or-response-filters[（@ServerRequestFilter] ）、响应过滤器（ `@ServerResponseFilter` ）和异常映射器 link:https://quarkus.io/guides/resteasy-reactive#exception-mapping[（@ServerExceptionMapper] ）的新API。你可能会想，与标准的JAX-RS APIs相比，它们的使用是否会影响性能 ( `ContainerRequestFilter` , `ContainerResponseFilter` 和 `ExceptionMapper` )。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:135
#, fuzzy
msgid "Although the new APIs will give a tiny performance advantage over using the old APIs if the use of `@Context` is involved in the latter case, the advantage is negligible and should not worry you unless you are trying to squeeze out every inch of performance you can find.  One thing to keep in mind when writing filters with either API, is that using `org.jboss.resteasy.reactive.server.SimpleResourceInfo` instead of `javax.ws.rs.container.ResourceInfo` is advised as the latter results in reflection being performed."
msgstr "虽然新的API会比使用旧的API有微小的性能优势，如果在后者涉及到使用 `@Context` ，那么这个优势可以忽略不计，除非你试图挤出每一寸可以找到的性能，否则你不应该担心。在使用这两种API编写过滤器时，有一点需要注意的是，建议使用 `org.jboss.resteasy.reactive.server.SimpleResourceInfo` ，而不是 `javax.ws.rs.container.ResourceInfo` ，因为后者会导致进行反射。"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:138
#, fuzzy
msgid "A special (albeit rather advanced) case where the new APIs do result in noticeably better performance is the case of `MessageBodyReader` and `MessageBodyWriter` classes.  When reading the HTTP request and writing the HTTP response, the use of https://quarkus.io/guides/resteasy-reactive#readers-and-writers-mapping-entities-and-http-bodies[ServerMessageBodyReader] and `ServerMessageBodyWriter` allows RESTEasy Reactive to optimize the data-path for serving the request."
msgstr "一个特殊的（尽管是相当高级的）情况是，新的API确实带来了明显的性能提升，这就是 `MessageBodyReader` 和 `MessageBodyWriter` 类的情况。在读取HTTP请求和写入HTTP响应时，使用 link:https://quarkus.io/guides/resteasy-reactive#readers-and-writers-mapping-entities-and-http-bodies[ServerMessageBodyReader] 和 `ServerMessageBodyWriter` ，可以使RESTEasy Reactive优化服务请求的数据路径。"

#. type: Title ==
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:139
#, fuzzy, no-wrap
msgid "What about Reactive Routes?"
msgstr "反应性路线如何？"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:143
#, fuzzy
msgid "Quarkus was already providing a way to handle HTTP requests from the IO thread. Reactive Routes provides a declarative model to implement HTTP API. Each route can be called on the IO thread (default) or on a worker thread (using the `@Blocking` annotation).  Reactive Routes provide very good throughput and performance as highlighted in https://quarkus.io/blog/io-thread-benchmark/[this] article. How does reactive routes compare to RESTEasy Reactive?"
msgstr "Quarkus已经提供了一种方法来处理来自IO线程的HTTP请求。Reactive Routes提供了一个声明式的模型来实现HTTP API。每个路由可以在IO线程（默认）或工作线程（使用 `@Blocking` 注释）上调用。正如 link:https://quarkus.io/blog/io-thread-benchmark/[本文] 所强调的，反应式路由提供了非常好的吞吐量和性能。反应式路由与RESTEasy Reactive相比如何？"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:146
#, fuzzy
msgid "One of the main complaints we got about Reactive Routes was about the development model: it’s very different from the one used with RESTEasy. However, Reactive Routes allowed us to verify the performance and efficiency benefits of using an end-to-end reactive model on top of Quarkus.  RESTEasy Reactive can be seen as the “next generation”: you get the runtime benefits while also using a familiar development model."
msgstr "我们得到的关于Reactive Routes的主要抱怨之一是关于开发模型：它与RESTEasy使用的模型非常不同。然而，Reactive Routes让我们验证了在Quarkus之上使用端到端反应式模型的性能和效率优势。RESTEasy Reactive可以被看作是 \"下一代\"：你在获得运行时的好处的同时，还可以使用熟悉的开发模型。"

#. type: Title ==
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:147
#, fuzzy, no-wrap
msgid "Summary"
msgstr "摘要"

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:151
msgid "RESTEasy Reactive is the next generation of HTTP framework. It unifies reactive (non-blocking IO, asynchronous APIs) and imperative (thanks to the `@Blocking` annotation). It improves raw performances without constraining the user experience.  Its reactive/imperative duality makes it fit any use cases, from highly concurrent HTTP APIs, to more traditional transactional CRUD applications."
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:153
msgid "We see RESTEasy Reactive as becoming the default HTTP layer in Quarkus in the near future and are completely committed to making it perform at the best possible level while also introducing new features that spark developer joy!"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-02-10-resteasy-reactive-faq.adoc:155
msgid "In that vein, we hope that this short blog post will provide you with some insight on what makes RESTEasy Reactive special and clear up any misconceptions you may have had about it."
msgstr ""
