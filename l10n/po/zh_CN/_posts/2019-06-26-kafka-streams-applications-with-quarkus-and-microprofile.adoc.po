# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:1
#, fuzzy, no-wrap
msgid "gmorling"
msgstr "gmorling"

#. type: YAML Front Matter: date
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:1
#, fuzzy, no-wrap
msgid "2019-06-26"
msgstr "2019-06-26"

#. type: YAML Front Matter: layout
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "职位"

#. type: YAML Front Matter: tags
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:1
#, fuzzy, no-wrap
msgid "kafka microprofile"
msgstr "kafka微配置文件"

#. type: YAML Front Matter: title
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:1
#, fuzzy, no-wrap
msgid "Building Kafka Streams applications with Quarkus and Eclipse MicroProfile"
msgstr "用Quarkus和Eclipse MicroProfile构建Kafka流应用"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:12
#, fuzzy
msgid "https://kafka.apache.org/documentation/streams/[Kafka Streams] is a very popular solution for implementing stream processing applications based on Apache Kafka.  It lets you do typical data streaming tasks like filtering and transforming messages, joining multiple Kafka topics, performing (stateful) calculations, grouping and aggregating values in time windows and much more."
msgstr "link:https://kafka.apache.org/documentation/streams/[Kafka Streams] 是一个非常流行的解决方案，用于实现基于Apache Kafka的流处理应用程序。它可以让你完成典型的数据流任务，如过滤和转换消息、连接多个Kafka主题、执行（有状态的）计算、在时间窗口中分组和聚合值等等。"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:17
#, fuzzy
msgid "Unlike other streaming query engines that run on specific processing clusters, Kafka Streams is a client library.  This means a (Java) application is needed which starts and runs the streaming pipeline, reading from and writing to the Apache Kafka cluster."
msgstr "与其他在特定处理集群上运行的流式查询引擎不同，Kafka Streams是一个客户端库。这意味着需要一个（Java）应用程序来启动和运行流式管道，从Apache Kafka集群读取和写入。"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:20
#, fuzzy
msgid "In this blog post we'll discuss how the combination of Quarkus and https://microprofile.io/[Eclipse MicroProfile] is a great foundation for implementing Kafka Streams applications, running on the JVM and as native code compiled ahead of time via https://www.graalvm.org/[GraalVM]."
msgstr "在这篇博文中，我们将讨论Quarkus和 link:https://microprofile.io/[Eclipse MicroProfile] 的结合是如何为实现Kafka流应用打下良好基础的，它可以在JVM上运行，也可以通过 link:https://www.graalvm.org/[GraalVM] 作为本地代码提前编译。"

#. type: Title ==
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:21
#, fuzzy, no-wrap
msgid "The Quarkus extension for Kafka Streams"
msgstr "Quarkus对Kafka流的扩展"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:25
#, fuzzy
msgid "As of version 0.17.0, Quarkus comes with link:/guides/kafka-streams[an extension] for building Kafka Streams applications.  To create a new Quarkus project with this extension, run the following:"
msgstr "从0.17.0版本开始，Quarkus附带了 link:/guides/kafka-streams[一个] 用于构建Kafka流应用的 link:/guides/kafka-streams[扩展] 。要用这个扩展创建一个新的Quarkus项目，请运行以下程序。"

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:32
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:0.17.0:create \\\n"
"   -DprojectGroupId=org.acme \\\n"
"   -DprojectArtifactId=kafka-streams-quickstart-example \\\n"
"   -Dextensions=\"kafka-streams\"\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:36
#, fuzzy
msgid "This will set up a new project, adding the dependency to the Quarkus Kafka Streams extension, which in turn will pull in Kafka Streams and all its dependencies."
msgstr "这将建立一个新的项目，将依赖关系添加到Quarkus Kafka Streams扩展中，这又将拉入Kafka Streams及其所有依赖关系。"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:40
#, fuzzy
msgid "If you've worked with Kafka Streams before, the implementation of a data streaming pipeline will look very familiar to you.  You first build up a `Topology` and then create a `KafkaStreams` instance.  For starting and stopping the latter, Quarkus' `StartupEvent` and `ShutdownEvent` classes come in handy."
msgstr "如果你以前使用过Kafka Streams，那么数据流管道的实现对你来说会非常熟悉。你首先建立一个 `Topology` ，然后创建一个 `KafkaStreams` 实例。对于后者的启动和停止，Quarkus的 `StartupEvent` 和 `ShutdownEvent` 类就派上用场了。"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:42
#, fuzzy
msgid "Overall, the structure of a Kafka Streams pipeline running on Quarkus will look like so:"
msgstr "总的来说，在Quarkus上运行的Kafka Streams流水线的结构会是这样的。"

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:47
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:240
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyStreamingPipeline {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:49
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:182
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:245
#, no-wrap
msgid "    private KafkaStreams streams;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:54
#, no-wrap
msgid ""
"    void onStart(@Observes StartupEvent event) {\n"
"        // set up Kafka Streams config, e.g. sourced from application.properties\n"
"        Properties props = new Properties();\n"
"        // props.put(..., ...);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:58
#, no-wrap
msgid ""
"        // set up the stream topology\n"
"        StreamsBuilder builder = new StreamsBuilder();\n"
"        // builder.stream(...)\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:62
#, no-wrap
msgid ""
"        streams = new KafkaStreams(builder.build(), props);\n"
"        streams.start();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:67
#, no-wrap
msgid ""
"    void onStop(@Observes ShutdownEvent event) {\n"
"        streams.close();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:73
#, fuzzy
msgid "For the very common requirement that you'd like to serialize and deserialize Java types used in the streaming pipeline into/from JSON (e.g. when materializing them in a state store), the Quarkus Kafka Streams extension provides the class `io.quarkus.kafka.client.serialization.JsonbSerde`.  It's a `Serde` implementation based on JSON-B:"
msgstr "对于非常常见的要求，即你想把流式管道中使用的Java类型序列化和反序列化成/自JSON（例如在状态存储中物化它们时），Quarkus Kafka Streams扩展提供了 `io.quarkus.kafka.client.serialization.JsonbSerde` 这个类。这是一个基于JSON-B的 `Serde` 实现。"

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:78
#, no-wrap
msgid ""
"...\n"
"JsonbSerde<WeatherStation> weatherStationSerde = new JsonbSerde<>(WeatherStation.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:84
#, no-wrap
msgid ""
"GlobalKTable<Integer, WeatherStation> stations = builder.globalTable(\n"
"    \"weather-stations\",\n"
"    Consumed.with(Serdes.Integer(), weatherStationSerde)\n"
");\n"
"...\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:86
#, fuzzy, no-wrap
msgid "Running Native"
msgstr "运行中的本地人"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:91
#, fuzzy
msgid "Based on Kafka's notion of topic partitioning, Kafka Streams applications can easily be scaled out: the load will be shared amongst multiple instances of the application, each processing just a subset of the partitions of the input topic(s)."
msgstr "基于Kafka的主题分区概念，Kafka流应用程序可以很容易地被扩展：负载将在应用程序的多个实例之间共享，每个实例只处理输入主题的分区中的一个子集。"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:96
#, fuzzy
msgid "Running Quarkus applications in native code via GraalVM comes in very handy for that: besides the very fast start-up time, the applications will use significantly less memory when compiled to native code.  This lets you spin up many instances of a Quarkus-based Kafka Streams pipeline in parallel, in a very memory-efficient way."
msgstr "通过GraalVM在本地代码中运行Quarkus应用程序在这方面非常方便：除了非常快的启动时间，应用程序在编译为本地代码时使用的内存将大大减少。这可以让你以一种非常节省内存的方式，并行地启动许多基于Quarkus的Kafka流管道的实例。"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:101
#, fuzzy
msgid "The extension takes care of everything needed for building native Kafka Streams applications, for instance it makes sure that the right RocksDB native libraries are added to the application image.  All you need to do is to specify the `enableJni` option for the Quarkus Maven plug-in, allowing those native libraries to be invoked via JNI:"
msgstr "该扩展负责构建本地Kafka Streams应用程序所需的一切，例如，它确保将正确的RocksDB本地库添加到应用程序镜像中。你只需要为Quarkus Maven插件指定 `enableJni` 选项，让这些本地库通过JNI被调用。"

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:118
#, no-wrap
msgid ""
"<plugin>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-maven-plugin</artifactId>\n"
"    <executions>\n"
"        <execution>\n"
"            <goals>\n"
"                <goal>native-image</goal>\n"
"            </goals>\n"
"            <configuration>\n"
"                <enableJni>true</enableJni>\n"
"            </configuration>\n"
"        </execution>\n"
"    </executions>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:123
#, fuzzy
msgid "When using the `JsonbSerde` for unmarshalling JSON into corresponding Java objects, those types must be marked with the `@RegisterForReflection` annotation, so that they can to be instantiated reflectively by JSON-B in native mode:"
msgstr "当使用 `JsonbSerde` 将JSON解读为相应的Java对象时，这些类型必须被标记为 `@RegisterForReflection` 注释，这样它们就可以被JSON-B在本地模式下反射性地实例化了。"

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:128
#, no-wrap
msgid ""
"@RegisterForReflection\n"
"public class WeatherStation {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:132
#, no-wrap
msgid ""
"    public int id;\n"
"    public String name;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:136
#, fuzzy
msgid "Then build the application using the `native` profile (note this requires GraalVM to be installed on your system; refer to the Quarkus link:/guides/building-native-image[native image] guide to learn more):"
msgstr "然后使用 `native` profile构建应用程序（注意这需要在你的系统上安装GraalVM；参考Quarkus link:/guides/building-native-image[本地图像] 指南以了解更多）。"

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:140
#, no-wrap
msgid "mvn clean package -f aggregator/pom.xml -Pnative\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:147
#, fuzzy
msgid "Finding the right amount of memory needed for running the application can require some testing.  E.g. observe CPU load and run the native binary with the `-XX:+PrintGC -XX:+PrintGCTimeStamps -XX:+VerboseGC` options in order to gain insight into how often garbage collection kicks in.  If you started the application with not enough heap space, you'll typically observe that GC is happening very frequently, causing increased CPU load."
msgstr "找到运行应用程序所需的正确内存量可能需要一些测试。例如，观察CPU负载，用 `-XX:+PrintGC -XX:+PrintGCTimeStamps -XX:+VerboseGC` 选项运行本地二进制文件，以便深入了解垃圾回收的频率。如果你在启动应用程序时没有足够的堆空间，你通常会观察到GC发生得非常频繁，导致CPU负载增加。"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:154
#, fuzzy
msgid "To give an example, for the https://github.com/quarkusio/quarkus-quickstarts/tree/main/kafka-streams-quickstart[streaming pipeline] discussed in the Kafka Streams extension guide, a heap size of 32 MB (`-Xmx32m`) works very well, resulting in less than 50 MB memory needed by the process in total (RSS, resident set size).  Note that this number also contains the memory needed for the HTTP endpoint defined in that example, which is used for answering interactive queries via REST."
msgstr "举个例子，对于Kafka Streams扩展指南中讨论的 link:https://github.com/quarkusio/quarkus-quickstarts/tree/main/kafka-streams-quickstart[流式管道] ，32MB的堆大小( `-Xmx32m` )效果非常好，导致进程总共需要不到50MB的内存（RSS，常驻集大小）。请注意，这个数字也包含了该例子中定义的HTTP端点所需的内存，该端点用于回答通过REST进行的互动查询。"

#. type: Title ==
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:155
#, fuzzy, no-wrap
msgid "Gaining Operational Insight"
msgstr "获得业务洞察力"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:161
#, fuzzy
msgid "One of the nice things about Quarkus is that it comes with support for all the Eclipse MicroProfile APIs.  They help to address common requirements when building microservices, such as https://microprofile.io/project/eclipse/microprofile-health[health checks] (\"Is my application running and ready to handle requests?\")  and https://microprofile.io/project/eclipse/microprofile-metrics[metrics] (\"What's the throughput of my application?\", \"How many requests has it processed?\" etc.)."
msgstr "Quarkus的优点之一是它支持所有的Eclipse MicroProfile APIs。它们有助于解决构建微服务时的常见需求，例如 link:https://microprofile.io/project/eclipse/microprofile-health[健康检查] （\"我的应用程序正在运行并准备处理请求吗？\"）和 link:https://microprofile.io/project/eclipse/microprofile-metrics[指标] （\"我的应用程序的吞吐量是多少？\"、\"它处理了多少请求？\"等等）。"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:165
#, fuzzy
msgid "Based on those APIs, it just requires a little bit of coding to implement health checks and metrics for a Kafka Streams application.  You can add the right dependencies by running:"
msgstr "基于这些API，只需要一点点的编码就可以为Kafka流应用实现健康检查和指标。你可以通过运行以下程序来添加正确的依赖关系。"

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:169
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"health,metrics\"\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:171
#, fuzzy, no-wrap
msgid "Healthchecks"
msgstr "健康检查"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:174
#, fuzzy
msgid "Then creating the health check is as simple as adding the following to the pipeline implementation:"
msgstr "然后创建健康检查，就像在管道实现中添加以下内容一样简单。"

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:180
#, no-wrap
msgid ""
"@Liveness\n"
"@ApplicationScoped\n"
"public class MyStreamingPipeline implements HealthCheck {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:184
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:254
#, no-wrap
msgid "    // ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:192
#, no-wrap
msgid ""
"    @Override\n"
"    public HealthCheckResponse call() {\n"
"        return HealthCheckResponse.named(\"My Pipeline\")\n"
"                .state(streams.state().isRunning())\n"
"                .build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:196
#, fuzzy
msgid "This will expose a health check via HTTP under `/health/live`, which when queried will yield a response like this:"
msgstr "这将通过HTTP在 `/health/live` ，当被查询时，将产生一个类似于这样的响应。"

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:204
#, no-wrap
msgid ""
"HTTP/1.1 200 OK\n"
"Connection: keep-alive\n"
"Content-Length: 144\n"
"Content-Type: application/json;charset=UTF-8\n"
"Date: Wed, 26 Jun 2019 10:08:36 GMT\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:214
#, no-wrap
msgid ""
"{\n"
"    \"checks\": [\n"
"        {\n"
"            \"name\": \"My Pipeline\",\n"
"            \"status\": \"UP\"\n"
"        }\n"
"    ],\n"
"    \"status\": \"UP\"\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:221
#, fuzzy
msgid "When using a container orchestrator such as Kubernetes, you could then set up a https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/[liveness probe] for this endpoint.  If the health check fails (i.e. the streaming pipeline is not in the running state), it will return an HTTP 503 response.  This would be the indicator to the orchestrator to restart the pod of this application."
msgstr "当使用容器协调器（如Kubernetes）时，你可以为这个端点设置一个 link:https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/[有效性探针] 。如果健康检查失败（即流媒体管道不在运行状态），它将返回一个HTTP 503响应。这将是协调器重新启动该应用程序的pod的指标。"

#. type: Title ==
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:222
#, fuzzy, no-wrap
msgid "Metrics"
msgstr "度量衡"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:228
#, fuzzy
msgid "While a health check provides simple means of finding out whether the application is in a state where it can handle requests/messages or not, it is desirable to have more insight into the behaviour of the service.  E.g. it might be of interest to see how many messages have been processed by the streaming pipeline, what's the arrival rate of messages, what's the average processing time and much more."
msgstr "虽然健康检查提供了简单的方法来了解应用程序是否处于可以处理请求/消息的状态，但最好能更深入地了解服务的行为。例如，看看流媒体管道处理了多少消息，消息的到达率是多少，平均处理时间是多少等等，这可能是人们感兴趣的。"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:233
#, fuzzy
msgid "Kafka Streams comes with https://kafka.apache.org/22/javadoc/org/apache/kafka/streams/KafkaStreams.html#metrics--[rich metrics] capabilities which can help to answer these questions.  Using the MicroProfile Metrics API, these metrics can be exposed via HTTP.  From there they can be scraped by tools such as https://prometheus.io/[Prometheus] and eventually be fed to dashboard solutions such as https://grafana.com/[Grafana].  Note that exposing metrics via HTTP instead of JMX has the advantage that this also works when running the application in native mode via GraalVM."
msgstr "Kafka Streams具有 link:https://kafka.apache.org/22/javadoc/org/apache/kafka/streams/KafkaStreams.html#metrics--[丰富的度量] 功能，可以帮助回答这些问题。使用MicroProfile Metrics API，这些指标可以通过HTTP暴露。在那里，它们可以被 link:https://prometheus.io/[Prometheus] 等工具刮取，并最终被输送到 link:https://grafana.com/[Grafana] 等仪表盘解决方案。注意，通过HTTP而不是JMX暴露指标的好处是，当通过GraalVM以本地模式运行应用程序时，这也是可行的。"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:235
#, fuzzy
msgid "Similar to the health check case, just a bit of glue code is needed for exposing the metrics:"
msgstr "与健康检查的情况类似，只需要一点胶水代码就可以暴露指标。"

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:243
#, no-wrap
msgid ""
"    @Inject\n"
"    MetricRegistry metricRegistry;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:248
#, no-wrap
msgid ""
"    void onStart(@Observes StartupEvent event) {\n"
"        // ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:252
#, no-wrap
msgid ""
"        streams.start();\n"
"        exportMetrics();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:257
#, no-wrap
msgid ""
"    private void exportMetrics() {\n"
"        Set<String> processed = new HashSet<>();\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:261
#, no-wrap
msgid ""
"        for (Metric metric : streams.metrics().values()) {                // <1>\n"
"            String name = metric.metricName().group() +\n"
"                    \":\" + metric.metricName().name();\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:265
#, no-wrap
msgid ""
"            if (processed.contains(name)) {\n"
"                continue;\n"
"            }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:277
#, no-wrap
msgid ""
"            // string-typed metric not supported\n"
"            if (name.contentEquals(\"app-info:commit-id\") ||               // <2>\n"
"                    name.contentEquals(\"app-info:version\")) {\n"
"                continue;\n"
"            }\n"
"            else if (name.endsWith(\"count\") || name.endsWith(\"total\")) {  // <3>\n"
"                registerCounter(metric, name);\n"
"            }\n"
"            else {\n"
"                registerGauge(metric, name);                              // <4>\n"
"            }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:281
#, no-wrap
msgid ""
"            processed.add(name);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:285
#, no-wrap
msgid ""
"    private void registerGauge(Metric metric, String name) {\n"
"        Metadata metadata = new Metadata(name, MetricType.GAUGE);\n"
"        metadata.setDescription(metric.metricName().description());\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:287
#, no-wrap
msgid "        metricRegistry.register(metadata, new Gauge<Double>() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:294
#, no-wrap
msgid ""
"            @Override\n"
"            public Double getValue() {\n"
"                return (Double) metric.metricValue();\n"
"            }\n"
"        } );\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:299
#, no-wrap
msgid ""
"    private void registerCounter(Metric metric, String name) {\n"
"        // ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:301
#, fuzzy
msgid "Process all Kafka Streams metrics, using a unique name to register them"
msgstr "处理所有的Kafka流指标，使用一个唯一的名字来注册它们"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:302
#, fuzzy
msgid "Some string-typed \"metrics\" must be excluded"
msgstr "一些字符串类型的 \"度量 \"必须被排除在外"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:303
#, fuzzy
msgid "All metrics whose name ends with \"total\" or \"counter\" will be exposed as counter-typed metrics"
msgstr "所有名称以 \"total \"或 \"counter \"结尾的指标都将作为计数器类型的指标被公开。"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:304
#, fuzzy
msgid "All other metrics will be exposed as gauge-typed metrics, i.e. plain numeric values"
msgstr "所有其他指标都将以仪表类型的指标形式暴露出来，即纯数字值。"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:307
#, fuzzy
msgid "Once the application is started, the metrics will be exposed under `/metrics`, returning the data in the OpenMetrics format by default:"
msgstr "一旦应用程序启动，指标将在 `/metrics` ，默认以OpenMetrics格式返回数据。"

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:317
#, no-wrap
msgid ""
"# HELP application:stream_metrics_process_total The total number of occurrence of process operations.\n"
"# TYPE application:stream_metrics_process_total counter\n"
"application:stream_metrics_process_total 2866.0\n"
"# HELP application:stream_metrics_poll_latency_avg The average latency of poll operation.\n"
"# TYPE application:stream_metrics_poll_latency_avg gauge\n"
"application:stream_metrics_poll_latency_avg 83.3135593220339\n"
"# ...\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:323
#, fuzzy
msgid "From here it's a matter of minutes to set up Prometheus to scrape this target, configure a Prometheus data source in Grafana and configure a dashboard for visualizing the metrics of interest to you.  E.g. the following shows a simple dashboard displaying the poll/process/commit rates and latencies as well as the total number of processed events in the quickstart example:"
msgstr "从这里开始，设置Prometheus来抓取这个目标，在Grafana中配置一个Prometheus数据源，并配置一个仪表盘来可视化你感兴趣的指标，只是几分钟的事情。例如，下面显示了一个简单的仪表盘，显示了快速入门示例中的轮询/处理/提交率和延迟，以及已处理事件的总数。"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:324
#, fuzzy, no-wrap
msgid "Kafka Streams metrics in Grafana"
msgstr "Grafana中的Kafka流指标"

#. type: Target for macro image
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:324
#, no-wrap
msgid "/assets/images/kafka-streams-metrics.png"
msgstr ""

#. type: Title ==
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:326
#, fuzzy, no-wrap
msgid "Summary and Outlook"
msgstr "总结和展望"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:332
#, fuzzy
msgid "Quarkus and Eclipse MicroProfile are a great basis for building Kafka Streams applications.  The Quarkus extension for Kafka Streams comes with everything needed to run stream processing pipelines on the JVM as well as in native mode via GraalVM.  The MicroProfile APIs for health checks and metrics can be used to expose the right information for gaining insight into running stream processing applications."
msgstr "Quarkus和Eclipse MicroProfile是构建Kafka Streams应用程序的一个很好的基础。Kafka Streams的Quarkus扩展包含了在JVM上运行流处理管道以及通过GraalVM以本地模式运行所需的一切。用于健康检查和指标的MicroProfile API可以用来暴露正确的信息，以获得对运行中的流处理应用程序的洞察力。"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:336
#, fuzzy
msgid "Going forward, we plan to further reduce the efforts needed for building Kafka Streams applications on Quarkus.  Instead of having to deal with the lifecycle of the pipeline yourself, it should be enough to declare a CDI producer method returning the streaming `Topology`:"
msgstr "展望未来，我们计划进一步减少在Quarkus上构建Kafka流应用所需的努力。与其自己处理流水线的生命周期，不如声明一个CDI生产者方法返回流 `Topology` 。"

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:344
#, no-wrap
msgid ""
"@Produces\n"
"public Topology buildTopology()  {\n"
"    // set up the stream topology\n"
"    StreamsBuilder builder = new StreamsBuilder();\n"
"    // builder.stream(...)\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:347
#, no-wrap
msgid ""
"    return builder.build();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:353
#, fuzzy
msgid "This means you'll be able to focus on implementing the actual pipeline logic, while the Quarkus extension would take care of everything else: configuring Kafka Streams based on the Quarkus `application.properties` file, starting the pipeline and automatically exposing healthchecks and metrics."
msgstr "这意味着你可以专注于实现实际的管道逻辑，而Quarkus扩展将负责其他一切：根据Quarkus `application.properties` 文件配置Kafka流，启动管道并自动公开健康检查和指标。"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:357
#, fuzzy
msgid "In case this sounds interesting to you, have an eye on the next Quarkus release announcements, as this improved functionality should be out soon.  If you got any related ideas, let us know and join the discussion in Quarkus issue https://github.com/quarkusio/quarkus/issues/2863[#2863]."
msgstr "如果你觉得这听起来很有趣，请关注下一个Quarkus发布的公告，因为这个改进的功能应该很快就会出来。如果你有任何相关的想法，请让我们知道并加入Quarkus issue link:https://github.com/quarkusio/quarkus/issues/2863[#2863] 的讨论。"

#. type: Plain text
#: upstream/_posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc:361
msgid "To learn more about the Quarkus extension for Kafka Streams and its current capabilities, check out link:/guides/kafka-streams[the detailed guide].  It not only discusses the actual stream pipeline implementation, but also touches on building (distributed) interactive queries for exposing the current processing state via REST."
msgstr ""
