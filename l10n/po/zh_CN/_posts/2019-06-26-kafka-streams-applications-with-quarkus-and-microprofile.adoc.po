# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy, no-wrap
msgid "Building Kafka Streams applications with Quarkus and Eclipse MicroProfile"
msgstr "用Quarkus和Eclipse MicroProfile构建Kafka流应用"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"https://kafka.apache.org/documentation/streams/[Kafka Streams] is a very popular solution for implementing stream processing applications based on Apache Kafka.\n"
"It lets you do typical data streaming tasks like filtering and transforming messages,\n"
"joining multiple Kafka topics, performing (stateful) calculations, grouping and aggregating values in time windows and much more."
msgstr "link:https://kafka.apache.org/documentation/streams/[Kafka Streams] 是基于 Apache Kafka 实现流处理应用程序的一种非常流行的解决方案。它能让你完成典型的数据流任务，如过滤和转换消息、连接多个 Kafka 主题、执行（有状态的）计算、分组和聚合时间窗口中的值等等。"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"Unlike other streaming query engines that run on specific processing clusters,\n"
"Kafka Streams is a client library.\n"
"This means a (Java) application is needed which starts and runs the streaming pipeline,\n"
"reading from and writing to the Apache Kafka cluster."
msgstr "与其他在特定处理集群上运行的流查询引擎不同，Kafka Streams 是一个客户端库。这意味着需要一个（Java）应用程序来启动和运行流管道，从 Apache Kafka 集群读取数据并写入。"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"In this blog post we'll discuss how the combination of Quarkus and https://microprofile.io/[Eclipse MicroProfile] is a great foundation for implementing Kafka Streams applications,\n"
"running on the JVM and as native code compiled ahead of time via https://www.graalvm.org/[GraalVM]."
msgstr "在这篇博文中，我们将讨论 Quarkus 和 link:https://microprofile.io/[Eclipse MicroProfile] 的组合如何为实现 Kafka Streams 应用程序（在 JVM 上运行并通过 link:https://www.graalvm.org/[GraalVM] 提前编译为本地代码）奠定坚实的基础。"

#. type: Title ==
#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy, no-wrap
msgid "The Quarkus extension for Kafka Streams"
msgstr "Quarkus对Kafka流的扩展"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"As of version 0.17.0, Quarkus comes with link:/guides/kafka-streams[an extension] for building Kafka Streams applications.\n"
"To create a new Quarkus project with this extension, run the following:"
msgstr "从 0.17.0 版开始，Quarkus 附带了 link:/guides/kafka-streams[一个] 用于构建 Kafka Streams 应用程序的 link:/guides/kafka-streams[扩展] 。要使用该扩展创建一个新的 Quarkus 项目，请运行以下命令："

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"This will set up a new project, adding the dependency to the Quarkus Kafka Streams extension,\n"
"which in turn will pull in Kafka Streams and all its dependencies."
msgstr "这将建立一个新项目，为 Quarkus Kafka Streams 扩展添加依赖关系，反过来又会引入 Kafka Streams 及其所有依赖关系。"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"If you've worked with Kafka Streams before, the implementation of a data streaming pipeline will look very familiar to you.\n"
"You first build up a `Topology` and then create a `KafkaStreams` instance.\n"
"For starting and stopping the latter, Quarkus' `StartupEvent` and `ShutdownEvent` classes come in handy."
msgstr "如果你以前使用过 Kafka Streams，那么数据流管道的实现过程对你来说就再熟悉不过了。你首先要建立一个 `Topology` ，然后创建一个 `KafkaStreams` 实例。为了启动和停止后者，Quarkus 的 `StartupEvent` 和 `ShutdownEvent` 类就派上用场了。"

#. type: Plain text
#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid "Overall, the structure of a Kafka Streams pipeline running on Quarkus will look like so:"
msgstr "总的来说，在Quarkus上运行的Kafka Streams流水线的结构会是这样的。"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"For the very common requirement that you'd like to serialize and deserialize Java types used in the streaming pipeline into/from JSON\n"
"(e.g. when materializing them in a state store),\n"
"the Quarkus Kafka Streams extension provides the class `io.quarkus.kafka.client.serialization.JsonbSerde`.\n"
"It's a `Serde` implementation based on JSON-B:"
msgstr "对于将流管道中使用的 Java 类型序列化和反序列化为 JSON 或从 JSON 反序列化（例如在状态存储中将它们具体化时）这一非常常见的需求，Quarkus Kafka Streams 扩展提供了 `io.quarkus.kafka.client.serialization.JsonbSerde` 类。这是一个基于 JSON-B 的 `Serde` 实现："

#. type: Title ==
#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, no-wrap
msgid "Running Native"
msgstr "以本机可执行文件运行"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"Based on Kafka's notion of topic partitioning, Kafka Streams applications can easily be scaled out:\n"
"the load will be shared amongst multiple instances of the application,\n"
"each processing just a subset of the partitions of the input topic(s)."
msgstr "基于 Kafka 的主题分区概念，Kafka Streams 应用程序可以轻松扩展：负载将由应用程序的多个实例分担，每个实例只处理输入主题分区的一个子集。"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"Running Quarkus applications in native code via GraalVM comes in very handy for that:\n"
"besides the very fast start-up time, the applications will use significantly less memory when compiled to native code.\n"
"This lets you spin up many instances of a Quarkus-based Kafka Streams pipeline in parallel,\n"
"in a very memory-efficient way."
msgstr "通过 GraalVM 以本地代码运行 Quarkus 应用程序在这方面非常方便：除了启动时间非常快之外，编译成本地代码后，应用程序占用的内存也会大大减少。这样，你就能以非常节省内存的方式，并行运行多个基于 Quarkus 的 Kafka Streams 流水线实例。"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"The extension takes care of everything needed for building native Kafka Streams applications,\n"
"for instance it makes sure that the right RocksDB native libraries are added to the application image.\n"
"All you need to do is to specify the `enableJni` option for the Quarkus Maven plug-in,\n"
"allowing those native libraries to be invoked via JNI:"
msgstr "该扩展包揽了构建原生 Kafka Streams 应用程序所需的一切，例如，它能确保将正确的 RocksDB 原生库添加到应用程序映像中。你只需为 Quarkus Maven 插件指定 `enableJni` 选项，即可通过 JNI 调用这些本地库："

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"When using the `JsonbSerde` for unmarshalling JSON into corresponding Java objects,\n"
"those types must be marked with the `@RegisterForReflection` annotation,\n"
"so that they can to be instantiated reflectively by JSON-B in native mode:"
msgstr "在使用 `JsonbSerde` 将 JSON 分解为相应的 Java 对象时，必须使用 `@RegisterForReflection` 注解标记这些类型，以便 JSON-B 可以在本地模式下对它们进行实例化："

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"Then build the application using the `native` profile\n"
"(note this requires GraalVM to be installed on your system; refer to the Quarkus link:/guides/building-native-image[native image] guide to learn more):"
msgstr "然后使用 `native` 配置文件构建应用程序（注意，这需要在系统中安装 GraalVM；如欲了解更多信息，请参阅 Quarkus link:/guides/building-native-image[本地镜像] 指南）："

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"Finding the right amount of memory needed for running the application can require some testing.\n"
"E.g. observe CPU load and run the native binary with the `-XX:+PrintGC -XX:+PrintGCTimeStamps -XX:+VerboseGC` options\n"
"in order to gain insight into how often garbage collection kicks in.\n"
"If you started the application with not enough heap space,\n"
"you'll typically observe that GC is happening very frequently, causing increased CPU load."
msgstr "要找到运行应用程序所需的合适内存量，可能需要进行一些测试。例如，观察 CPU 负载并使用 `-XX:+PrintGC -XX:+PrintGCTimeStamps -XX:+VerboseGC` 选项运行本地二进制文件，以了解垃圾回收的频率。如果在堆空间不足的情况下启动应用程序，通常会发现垃圾回收的频率非常高，导致 CPU 负载增加。"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"To give an example, for the https://github.com/quarkusio/quarkus-quickstarts/tree/main/kafka-streams-quickstart[streaming pipeline] discussed in the Kafka Streams extension guide,\n"
"a heap size of 32 MB (`-Xmx32m`) works very well,\n"
"resulting in less than 50 MB memory needed by the process in total\n"
"(RSS, resident set size).\n"
"Note that this number also contains the memory needed for the HTTP endpoint defined in that example,\n"
"which is used for answering interactive queries via REST."
msgstr "举个例子，对于 Kafka Streams 扩展指南中讨论的 link:https://github.com/quarkusio/quarkus-quickstarts/tree/main/kafka-streams-quickstart[流管道] ，堆大小为 32 MB ( `-Xmx32m` ) 的效果非常好，进程总共需要的内存不到 50 MB（RSS，常驻集大小）。请注意，这个数字还包含该示例中定义的 HTTP 端点所需的内存，该端点用于通过 REST 回答交互式查询。"

#. type: Title ==
#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy, no-wrap
msgid "Gaining Operational Insight"
msgstr "获得业务洞察力"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"One of the nice things about Quarkus is that it comes with support for all the Eclipse MicroProfile APIs.\n"
"They help to address common requirements when building microservices,\n"
"such as https://microprofile.io/project/eclipse/microprofile-health[health checks] (\"Is my application running and ready to handle requests?\")\n"
"and https://microprofile.io/project/eclipse/microprofile-metrics[metrics] (\"What's the throughput of my application?\", \"How many requests has it processed?\" etc.)."
msgstr "Quarkus 的优点之一是它支持所有 Eclipse MicroProfile API。它们有助于解决构建微服务时的常见需求，例如 link:https://microprofile.io/project/eclipse/microprofile-health[健康检查] （\"我的应用程序是否正在运行并准备好处理请求？\"）和 link:https://microprofile.io/project/eclipse/microprofile-metrics[度量] （\"我的应用程序的吞吐量是多少？\"、\"它处理了多少请求？\"等）。"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"Based on those APIs,\n"
"it just requires a little bit of coding to implement health checks and metrics for a Kafka Streams application.\n"
"You can add the right dependencies by running:"
msgstr "基于这些应用程序接口，只需稍加编码，就能为 Kafka Streams 应用程序实施健康检查和度量。你可以通过运行"

#. type: Title ==
#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy, no-wrap
msgid "Healthchecks"
msgstr "健康检查"

#. type: Plain text
#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid "Then creating the health check is as simple as adding the following to the pipeline implementation:"
msgstr "然后创建健康检查，就像在管道实现中添加以下内容一样简单。"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"This will expose a health check via HTTP under `/health/live`,\n"
"which when queried will yield a response like this:"
msgstr "这将通过 `/health/live` 下的 HTTP 公开健康检查，查询时将得到如下响应："

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"When using a container orchestrator such as Kubernetes,\n"
"you could then set up a https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/[liveness probe] for this endpoint.\n"
"If the health check fails (i.e. the streaming pipeline is not in the running state),\n"
"it will return an HTTP 503 response.\n"
"This would be the indicator to the orchestrator to restart the pod of this application."
msgstr "在使用 Kubernetes 等容器编排器时，可以为该端点设置一个 link:https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/[有效性探针] 。如果健康检查失败（即流管道未处于运行状态），它将返回 HTTP 503 响应。这将指示协调器重新启动该应用程序的 pod。"

#. type: Title ==
#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, no-wrap
msgid "Metrics"
msgstr "指标"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"While a health check provides simple means of finding out whether the application is in a state where it can handle requests/messages or not,\n"
"it is desirable to have more insight into the behaviour of the service.\n"
"E.g. it might be of interest to see how many messages have been processed by the streaming pipeline,\n"
"what's the arrival rate of messages, what's the average processing time and much more."
msgstr "虽然健康检查提供了一种简单的方法来了解应用程序是否处于可以处理请求/消息的状态，但我们还是希望能更深入地了解服务的行为。例如，我们可能有兴趣了解流管道处理了多少信息、信息的到达率、平均处理时间等等。"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"Kafka Streams comes with https://kafka.apache.org/22/javadoc/org/apache/kafka/streams/KafkaStreams.html#metrics--[rich metrics] capabilities which can help to answer these questions.\n"
"Using the MicroProfile Metrics API, these metrics can be exposed via HTTP.\n"
"From there they can be scraped by tools such as https://prometheus.io/[Prometheus] and eventually be fed to dashboard solutions such as https://grafana.com/[Grafana].\n"
"Note that exposing metrics via HTTP instead of JMX has the advantage that this also works when running the application in native mode via GraalVM."
msgstr "Kafka Streams 具有 link:https://kafka.apache.org/22/javadoc/org/apache/kafka/streams/KafkaStreams.html#metrics--[丰富的度量] 功能，可以帮助回答这些问题。使用 MicroProfile Metrics API，可以通过 HTTP 公开这些指标。从那里，它们可以被 link:https://prometheus.io/[Prometheus] 等工具刮取，并最终馈送到 link:https://grafana.com/[Grafana] 等仪表板解决方案。请注意，通过 HTTP 而不是 JMX 公开度量指标的好处是，当通过 GraalVM 以本地模式运行应用程序时，这也同样有效。"

#. type: Plain text
#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid "Similar to the health check case, just a bit of glue code is needed for exposing the metrics:"
msgstr "与健康检查的情况类似，只需要一点胶水代码就可以暴露指标。"

#. type: Plain text
#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid "Process all Kafka Streams metrics, using a unique name to register them"
msgstr "处理所有的Kafka流指标，使用一个唯一的名字来注册它们"

#. type: Plain text
#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid "Some string-typed \"metrics\" must be excluded"
msgstr "一些字符串类型的 \"度量 \"必须被排除在外"

#. type: Plain text
#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid "All metrics whose name ends with \"total\" or \"counter\" will be exposed as counter-typed metrics"
msgstr "所有名称以 \"total \"或 \"counter \"结尾的指标都将作为计数器类型的指标被公开。"

#. type: Plain text
#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid "All other metrics will be exposed as gauge-typed metrics, i.e. plain numeric values"
msgstr "所有其他指标都将以仪表类型的指标形式暴露出来，即纯数字值。"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"Once the application is started, the metrics will be exposed under `/metrics`,\n"
"returning the data in the OpenMetrics format by default:"
msgstr "应用程序启动后，指标将在 `/metrics` 下显示，默认情况下以 OpenMetrics 格式返回数据："

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"From here it's a matter of minutes to set up Prometheus to scrape this target,\n"
"configure a Prometheus data source in Grafana and configure a dashboard for visualizing the metrics of interest to you.\n"
"E.g. the following shows a simple dashboard displaying the poll/process/commit rates and latencies as well as the total number of processed events\n"
"in the quickstart example:"
msgstr "从这里开始，只需几分钟就能设置 Prometheus 来刮擦该目标，在 Grafana 中配置 Prometheus 数据源，并配置一个仪表盘来可视化您感兴趣的指标。例如，下面显示了一个简单的仪表盘，显示轮询/处理/提交率和延迟，以及快速启动示例中已处理事件的总数："

#. type: Title ==
#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy, no-wrap
msgid "Summary and Outlook"
msgstr "总结和展望"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"Quarkus and Eclipse MicroProfile are a great basis for building Kafka Streams applications.\n"
"The Quarkus extension for Kafka Streams comes with everything needed to run stream processing pipelines on the JVM as well as in native mode via GraalVM.\n"
"The MicroProfile APIs for health checks and metrics can be used to expose the right information\n"
"for gaining insight into running stream processing applications."
msgstr "Quarkus 和 Eclipse MicroProfile 是构建 Kafka Streams 应用程序的重要基础。用于 Kafka Streams 的 Quarkus 扩展提供了在 JVM 上以及通过 GraalVM 以本地模式运行流处理管道所需的一切。用于健康检查和指标的 MicroProfile API 可用于公开正确的信息，以便深入了解正在运行的流处理应用程序。"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"Going forward, we plan to further reduce the efforts needed for building Kafka Streams applications on Quarkus.\n"
"Instead of having to deal with the lifecycle of the pipeline yourself,\n"
"it should be enough to declare a CDI producer method returning the streaming `Topology`:"
msgstr "展望未来，我们计划进一步减少在 Quarkus 上构建 Kafka Streams 应用程序所需的工作量。无需自己处理管道的生命周期，只需声明一个返回流的 CDI 生产者方法 `Topology` 即可："

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"This means you'll be able to focus on implementing the actual pipeline logic,\n"
"while the Quarkus extension would take care of everything else:\n"
"configuring Kafka Streams based on the Quarkus `application.properties` file,\n"
"starting the pipeline and automatically exposing healthchecks and metrics."
msgstr "这意味着你可以专注于实现实际的管道逻辑，而 Quarkus 扩展将负责其他一切：根据 Quarkus `application.properties` 文件配置 Kafka Streams、启动管道并自动公开健康检查和指标。"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"In case this sounds interesting to you, have an eye on the next Quarkus release announcements,\n"
"as this improved functionality should be out soon.\n"
"If you got any related ideas, let us know and join the discussion in Quarkus issue https://github.com/quarkusio/quarkus/issues/2863[#2863]."
msgstr "如果您对此感兴趣，请关注 Quarkus 的下一个发布公告，因为这项改进功能应该很快就会发布。如果你有任何相关想法，请告诉我们并加入 Quarkus link:https://github.com/quarkusio/quarkus/issues/2863[第 2863] 期的讨论。"

#: _posts/2019-06-26-kafka-streams-applications-with-quarkus-and-microprofile.adoc
#, fuzzy
msgid ""
"To learn more about the Quarkus extension for Kafka Streams and its current capabilities,\n"
"check out link:/guides/kafka-streams[the detailed guide].\n"
"It not only discusses the actual stream pipeline implementation, but also touches on\n"
"building (distributed) interactive queries for exposing the current processing state via REST."
msgstr "要了解有关 Kafka Streams 的 Quarkus 扩展及其当前功能的更多信息，请查看 link:/guides/kafka-streams[详细指南] 。它不仅讨论了实际的流水线实现，还涉及到构建（分布式）交互式查询，以便通过 REST 公开当前的处理状态。"
