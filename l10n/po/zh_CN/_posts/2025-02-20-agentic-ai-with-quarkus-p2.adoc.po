msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "Agentic AI with Quarkus - part 2"
msgstr "使用 Quarkus 的代理人工智能--第 2 部分"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid ""
"The https://quarkus.io/blog/agentic-ai-with-quarkus/[first part] of this blog post series briefly introduced agentic AI and discussed workflow patterns.\n"
"This post will explore another kind of pattern: _agents_.\n"
"The main difference between the two is that workflow patterns are defined programmatically, while agents are more flexible and can handle a broader range of tasks.\n"
"With agents, the LLM orchestrates the sequence of steps instead of being externally orchestrated programmatically, thus reaching a higher level of autonomy and flexibility."
msgstr "本系列博文的 link:https://quarkus.io/blog/agentic-ai-with-quarkus/[第一部分] 简要介绍了代理人工智能，并讨论了工作流模式。本篇博文将探讨另一种模式： _代理_ 。两者的主要区别在于，工作流模式是以编程方式定义的，而代理则更加灵活，可以处理更广泛的任务。使用代理时，LLM 会对步骤序列进行协调，而不是由外部以编程方式进行协调，从而达到更高的自主性和灵活性。"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "Agents"
msgstr "代理商"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid ""
"Agents differ from the workflow patterns because the control flow is entirely delegated to LLMs instead of being implemented programmatically.\n"
"To successfully implement agents, the LLM must be able to reason and have access to a set of tools (_toolbox_).\n"
"The LLM orchestrates the sequence of steps and decides which tools to call with which parameters.\n"
"From an external point of view, invoking an agent can be seen as invoking a function that opportunistically invokes tools to complete determinate subtasks."
msgstr "代理与工作流模式的不同之处在于，控制流完全委托给 LLM，而不是通过编程来实现。要成功实施代理，LLM 必须具备推理能力，并能使用一套工具 _（工具箱_ ）。LLM 负责协调步骤顺序，并决定使用哪些参数调用哪些工具。从外部角度来看，调用代理可以被看作是调用一个函数，该函数会适时调用工具来完成确定的子任务。"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "The agent's toolbox can be composed of:"
msgstr "特工的工具箱可包括"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "External services (like HTTP endpoints)"
msgstr "外部服务（如 HTTP 端点）"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "Other LLM / agents"
msgstr "其他法律硕士/代理人"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "Methods providing data from a data store"
msgstr "从数据存储提供数据的方法"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "Methods provided by the application code itself"
msgstr "应用程序代码本身提供的方法"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "Agents can invoke tools"
msgstr "代理可以调用工具"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid ""
"In Quarkus, agents are represented by interfaces annotated with `@RegisterAiService.`\n"
"They are called _AI services_.\n"
"In that aspect, they are not different from the _workflow patterns_.\n"
"The main difference is that the methods of an agent interface are annotated with `@ToolBox` to declare the tools that the LLM can use to complete the task:"
msgstr "在 Quarkus 中，代理由注有 `@RegisterAiService.` 的接口来表示，它们被称为 _人工智能服务_ 。在这方面，它们与 _工作流模式_ 并无不同。主要区别在于，代理接口的方法用 `@ToolBox` 进行注释，以声明 LLM 可以用来完成任务的工具："

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "Alternatively, the `@RegisterAiService` annotation can receive the set of tools in its `tools` parameter."
msgstr "另外， `@RegisterAiService` 注释也可以在其 `tools` 参数中接收工具集。"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "Let's look at some examples of agents to understand better how they work and what they can achieve."
msgstr "让我们来看看一些代理的例子，以便更好地了解它们是如何工作的，以及它们能实现什么目标。"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "The weather forecast agent"
msgstr "天气预报代理"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid ""
"This https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/aiastool[first example] of agentic AI implements the following https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/aiastool/WeatherForecastAgent.java[weather forecast agent].\n"
"The agent receives a user prompt and must answer questions about the weather using at most three lines.\n"
"To achieve this goal, the agent has a toolbox containing:"
msgstr "代理式人工智能的 link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/aiastool[第一个示例] 实现了以下 link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/aiastool/WeatherForecastAgent.java[天气预报代理] 。该代理接收用户提示，必须用最多三行文字回答有关天气的问题。为实现这一目标，代理拥有一个工具箱，其中包含："

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "An AI service specialized in extracting the name of a city from the user's prompt - which can be another _agent_;"
msgstr "专门从用户提示中提取城市名称的人工智能服务，用户可以是另一个 _代理_ ；"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "A web service returning the geographic coordinates of a given city - this is a remote call;"
msgstr "返回给定城市地理坐标的网络服务 - 这是一个远程调用；"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "A second web service providing the weather forecast for the given latitude and longitude - another remote call."
msgstr "第二个网络服务提供给定经纬度的天气预报--这是另一个远程调用。"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "Weather agent architecture"
msgstr "气象代理架构"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid ""
"We do not indicate when and how these tools are used; we just add them to the toolbox.\n"
"The LLM decides when to call them and with which parameters."
msgstr "我们没有说明何时以及如何使用这些工具；我们只是将它们添加到工具箱中。由 LLM 决定何时调用这些工具以及使用哪些参数。"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "Let's see how are defined the tools used by this agent:"
msgstr "让我们来看看该代理使用的工具是如何定义的："

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "1 . https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/aiastool/CityExtractorAgent.java[Another AI Service] specialized in extracting the name of a city from the user's prompt (thus also demonstrating how easily an _agent_ can be configured to become a tool for another AI service/agent)."
msgstr "1 . link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/aiastool/CityExtractorAgent.java[另一个人工智能服务] 专门从事从用户提示中提取城市名称的工作（这也展示了如何轻松地将一个 _代理_ 配置为另一个人工智能服务/代理的工具）。"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid ""
"2 . A https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/aiastool/geo/GeoCodingService.java[web service] returning the geographic coordinates of a given city.\n"
"It's a simple Quarkus REST client interface, meaning that Quarkus automatically generates the actual implementation.\n"
"It can be combined with fault tolerance, metrics, and other Quarkus features."
msgstr "2 .返回给定城市地理坐标的 link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/aiastool/geo/GeoCodingService.java[网络服务] 。这是一个简单的 Quarkus REST 客户端接口，意味着 Quarkus 会自动生成实际的实现。它可以与容错、度量和其他 Quarkus 功能相结合。"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "3 . Another https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/aiastool/weather/WeatherForecastService.java[web service] providing the weather forecast for the given latitude and longitude."
msgstr "3 .另一项 link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/aiastool/weather/WeatherForecastService.java[网络服务] 提供给定经纬度的天气预报。"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "It's possible to invoke the https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/aiastool/WeatherResource.java[HTTP endpoint] exposing this agent-based weather service:"
msgstr "我们可以调用 link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/aiastool/WeatherResource.java[HTTP 端点] 来公开这种基于代理的气象服务："

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "The response will be something like:"
msgstr "回复会是这样的"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid ""
"The weather in Rome today will have a maximum temperature of 14.3°C, minimum temperature of 2.0°C.\n"
"No precipitation expected, and the wind speed will be up to 5.6 km/h.\n"
"The overall weather condition is expected to be cloudy."
msgstr "罗马今天最高气温 14.3°C，最低气温 2.0°C。预计无降水，风速可达 5.6 公里/小时。预计总体天气状况为多云。"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid ""
"In essence, this control flow is quite similar to the prompt chaining workflow (introduced in the https://quarkus.io/blog/agentic-ai-with-quarkus/#prompt-chaining[previous post]), where the user input is sequentially transformed in steps (in this case, going from the prompt to the name of the city contained in that prompt to the geographical coordinates of that city, to the weather forecasts at those coordinates).\n"
"The significant difference is that the LLM directly orchestrates the sequence of steps instead of being externally orchestrated programmatically."
msgstr "从本质上讲，这种控制流与提示链工作流（在 link:https://quarkus.io/blog/agentic-ai-with-quarkus/#prompt-chaining[上一篇文章] 中介绍过）十分相似，用户输入按步骤依次转换（在本例中，从提示到提示中包含的城市名称，再到该城市的地理坐标，最后到这些坐标上的天气预报）。两者的显著区别在于，LLM 直接对步骤序列进行协调，而不是通过外部程序进行协调。"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "The observability automatically provided by Quarkus (in the GitHub project, observability is disabled by default, but it can be turned on with the `-Dobservability` flag) allows one to visually trace the sequence of tasks accomplished by the agent in order to execute its task."
msgstr "Quarkus 自动提供的可观察性（在 GitHub 项目中，默认情况下可观察性是禁用的，但可以使用 `-Dobservability` 标志打开）可以让我们直观地追踪代理为执行任务而完成的任务序列。"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "Tracing weather agent execution"
msgstr "跟踪气象代理执行情况"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "A more general-purpose AI agent"
msgstr "更通用的人工智能代理"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid ""
"In the previous example, the agent has access to very specific tools.\n"
"It's possible to provide more general tools that help the agent perform a wider range of tasks.\n"
"Typically, a web search tool can be handy for information retrieval tasks.\n"
"That's the purpose of https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/searchastool[this second example].\n"
"It extends the agent's capabilities by allowing the LLM to search online for information not part of its original training set."
msgstr "在前面的例子中，代理可以使用非常具体的工具。但也可以提供更通用的工具，帮助代理执行更广泛的任务。通常情况下，网络搜索工具可以方便地用于信息检索任务。这就是 link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/searchastool[第二个例子] 的目的。它允许 LLM 在网上搜索不属于其原始训练集的信息，从而扩展了代理的能力。"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "In general, these scenarios require a bigger model, so this example has been configured to use `qwen2.5-14b` and a longer timeout to give it a chance to complete its task:"
msgstr "一般来说，这些场景需要更大的模型，因此本示例配置为使用 `qwen2.5-14b` 和更长的超时，以便让它有机会完成任务："

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "The https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/searchastool/IntelligentAgent.java[intelligent agent] of this example can be configured to use this bigger model passing its name to the `@RegisterAiService` annotation."
msgstr "本示例中的 link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/searchastool/IntelligentAgent.java[智能代理] 可以通过 `@RegisterAiService` 注释中的名称配置为使用这个更大的模型。"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "The https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/searchastool/WebSearchService.java[tool] can perform a web search on _DuckDuckGo_ and returns the result in plain text:"
msgstr "该 link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/searchastool/WebSearchService.java[工具] 可以在 _DuckDuckGo_ 上执行网络搜索，并以纯文本形式返回搜索结果："

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "It is possible to use more advanced search engines or APIs, like https://docs.quarkiverse.io/quarkus-langchain4j/dev/web-search.html[Tavily]."
msgstr "可以使用更高级的搜索引擎或应用程序接口，如 link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/web-search.html[Tavily] 。"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "The AI service uses this tool to retrieve online information for everything it ignores and arrange that data together to provide an answer to a generic user question."
msgstr "人工智能服务利用这一工具检索它忽略的所有在线信息，并将这些数据排列在一起，为用户的一般问题提供答案。"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid ""
"For instance, consider the following question: _How many seconds would it take for a leopard at full speed to run through the Pont des Arts?_\n"
"Using this https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/searchastool/AgenticChatbotResource.java[HTTP endpoint], it would be executed using:"
msgstr "例如，请考虑以下问题： _一只全速奔跑的豹子穿过艺术桥需要多少秒？_ 使用此 link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/searchastool/AgenticChatbotResource.java[HTTP 端点] ，可以使用以下方式执行该问题："

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "To reply to this question, the agent invokes the web search tool twice: once to find the length of Pont des Arts and once to retrieve a leopard's speed."
msgstr "为了回答这个问题，代理人两次调用网络搜索工具：一次是查找艺术桥的长度，一次是检索豹子的速度。"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "An agent using an external web search tool"
msgstr "使用外部网络搜索工具的代理"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "Then, the agent puts this information together and generates an output like:"
msgstr "然后，代理将这些信息整合在一起，生成类似的输出结果："

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid ""
"The length of Pont des Arts is approximately 155 meters. A leopard can run at speeds up to about 58 kilometers per hour (36 miles per hour). To calculate how many seconds it would take for a leopard running at full speed to cross the bridge, we need to convert its speed into meters per second and then divide the length of the bridge by this speed.\n"
"\n"
"1 kilometer = 1000 meters\n"
"58 kilometers/hour = 58 * 1000 / 3600 ≈ 16.11 meters/second\n"
"\n"
"Now, we can calculate the time it would take for a leopard to run through Pont des Arts:\n"
"\n"
"Time (seconds) = Distance (meters) / Speed (m/s)\n"
"= 155 / 16.11\n"
"≈ 9.62 seconds\n"
"\n"
"So, it would take approximately 9.62 seconds for a leopard running at full speed to run through Pont des Arts."
msgstr "艺术桥全长约 155 米。豹子的奔跑速度可达每小时 58 公里（每小时 36 英里）。要计算一只全速奔跑的豹子过桥需要多少秒，我们需要把它的速度换算成每秒多少米，然后用桥的长度除以这个速度。"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid ""
"This example illustrates how an agent can use _tools_ to retrieve data.\n"
"While we use a search engine here, you can easily implement a tool that queries a database or another service to retrieve the needed information.\n"
"You can check https://github.com/quarkusio/quarkus-workshop-langchain4j/blob/main/step-08/src/main/java/dev/langchain4j/quarkus/workshop/BookingRepository.java[this example] to see how to implement a tool that queries a database using a Quarkus Panache repository."
msgstr "本例说明了代理如何使用 _工具_ 检索数据。虽然我们在这里使用的是搜索引擎，但你也可以很容易地实现一个查询数据库或其他服务以检索所需信息的工具。你可以查看 link:https://github.com/quarkusio/quarkus-workshop-langchain4j/blob/main/step-08/src/main/java/dev/langchain4j/quarkus/workshop/BookingRepository.java[这个示例] ，了解如何使用 Quarkus Panache 资源库实现查询数据库的工具。"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "Agents and Conversational AI"
msgstr "代理和对话式人工智能"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid ""
"The flexibility of AI agents can become even more relevant when used in services that are not intended to fulfill a single request but need to have a more extended conversation with the user to achieve their goal.\n"
"For instance, agents can function as chatbots, enabling them to handle multiple users in parallel, each with independent conversations.\n"
"It requires managing the state of each conversation, often referred to as memories (the set of messages already exchanged with the LLM)."
msgstr "人工智能代理的灵活性在应用于不是为了满足单一请求，而是需要与用户进行更长时间对话以实现其目标的服务时会变得更加重要。例如，代理可以发挥聊天机器人的功能，使其能够并行处理多个用户，每个用户都有独立的对话。这就需要管理每次对话的状态，也就是通常所说的记忆（已与 LLM 交换的信息集）。"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "A https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/restaurant/RestaurantAgent.java[chatbot of a restaurant booking system], designed to chat with customers and collect their data and requirements, represents an interesting practical application of this pattern."
msgstr "link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/restaurant/RestaurantAgent.java[餐厅预订系统的聊天机器人] 旨在与客户聊天，收集他们的数据和要求，是这种模式的一个有趣的实际应用。"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid ""
"Note that the user message conveys not only the customer's request but also includes the current date.\n"
"This allows the LLM to understand relative dates, such as \"tomorrow\" or \"in three days,\" which are often used by humans.\n"
"Initially, we included the current date in the system message, but doing so often caused the LLM to forget it and hallucinate using a different date.\n"
"Moving it to the user message empirically proved to work much better, possibly because this way, it is passed not only once but in every message in the chat memory."
msgstr "请注意，用户信息不仅传达了客户的请求，还包括当前日期。这使 LLM 能够理解相对日期，如人类常用的 \"明天 \"或 \"三天后\"。最初，我们将当前日期包含在系统信息中，但这样做常常会导致 LLM 忘记当前日期，并产生使用不同日期的幻觉。经验证明，将日期移到用户消息中的效果要好得多，这可能是因为这样一来，日期不仅会传递一次，而且会在聊天记忆中的每条消息中传递。"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "When the agent completes that information-gathering process, the chatbot uses a https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/restaurant/booking/BookingService.java[tool accessing the database] of existing reservations to both check if there is still a table available for the customer's needs and to book that table if so."
msgstr "当代理完成信息收集过程后，聊天机器人就会使用一个 link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/restaurant/booking/BookingService.java[访问] 现有预订 link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/restaurant/booking/BookingService.java[数据库的工具] ，检查是否还有符合客户需求的餐桌，如果有，就预订该餐桌。"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "To assist the customer in deciding whether to eat outside, the agent can also reuse, as a second tool, the https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/restaurant/weather/WeatherService.java[weather forecast service] implemented in one of the former examples, passing to it the geographic coordinates of the restaurant."
msgstr "为了帮助顾客决定是否在室外用餐，代理还可以重新使用前一个例子中的 link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/restaurant/weather/WeatherService.java[天气预报服务] ，将餐厅的地理坐标传递给它，作为第二个工具。"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "The final architectural design of the chatbot is the following:"
msgstr "聊天机器人的最终架构设计如下："

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "The restaurant chatbot agent"
msgstr "餐厅聊天机器人代理"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid ""
"Once the customer provides all necessary details, the chatbot confirms the booking and presents a reservation summary.\n"
"The final booking is then stored in the database.\n"
"It is possible to give this a try by accessing the URL:"
msgstr "一旦客户提供了所有必要的详细信息，聊天机器人就会确认预订并显示预订摘要。最后的预订会存储在数据库中。您可以访问 URL 试试看："

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "http://localhost:8080/restaurant.html"
msgstr "http://localhost:8080/restaurant.html"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "A typical example of user interaction could be something like this:"
msgstr "用户交互的一个典型例子是这样的："

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "An example of interaction with the restaurant chatbot agent"
msgstr "与餐厅聊天机器人代理互动的示例"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "Conclusions and next steps"
msgstr "结论和今后的步骤"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "This blog post series illustrates how you can use agentic patterns to implement AI-infused applications with Quarkus and its LangChain4j extension."
msgstr "本系列博文将说明如何使用代理模式来利用 Quarkus 及其 LangChain4j 扩展实现人工智能应用。"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid ""
"We have covered _workflow patterns in a previous post_ and _agents in this post_.\n"
"Both sets of patterns are based on the same underlying principles but differ in how the control flow is managed.\n"
"The workflow patterns are more suitable for tasks that can be easily defined programmatically, while agents are more flexible and can handle a broader range of tasks."
msgstr "我们 _在上一篇文章中_ 介绍了 _工作流模式_ ， _在本篇文章中_ 介绍了 _代理_ 。这两套模式基于相同的基本原理，但在管理控制流的方式上有所不同。工作流模式更适用于可通过编程轻松定义的任务，而代理则更加灵活，可处理的任务范围更广。"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "Nevertheless, the examples discussed in this series can be improved and further generalized with other techniques that will be introduced in future works, such as:"
msgstr "不过，本系列中讨论的示例还可以通过其他技术加以改进和进一步推广，这些技术将在今后的工作中加以介绍，如"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "Memory management across LLM calls"
msgstr "跨 LLM 调用的内存管理"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "State management for long-running processes"
msgstr "长期运行进程的状态管理"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "Improved observability"
msgstr "提高可观察性"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "Dynamic tools and tool discovery"
msgstr "动态工具和工具发现"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "The relation with the MCP protocol and how agentic architecture can be implemented with MCP clients and servers"
msgstr "与 MCP 协议的关系，以及如何利用 MCP 客户端和服务器实现代理架构"

#: _posts/2025-02-20-agentic-ai-with-quarkus-p2.adoc
#, fuzzy
msgid "How can the RAG pattern be revisited in light of the agentic architecture, both with workflow patterns and agents?"
msgstr "如何根据代理架构（包括工作流模式和代理）重新审视 RAG 模式？"
