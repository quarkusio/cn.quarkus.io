msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Use MCP OAuth2 Flow to access Quarkus MCP Server"
msgstr "使用 MCP OAuth2 流程访问 Quarkus MCP 服务器"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Explain how MCP OAuth2 Flow can be used to access Quarkus MCP Server"
msgstr "解释如何使用 MCP OAuth2 流程访问 Quarkus MCP 服务器"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
msgid "Introduction"
msgstr "简介"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"Back in April 2025, in the https://quarkus.io/blog/secure-mcp-sse-server/"
"[Getting ready for secure MCP with Quarkus MCP Server] blog post, we "
"explained how to enforce MCP client authentication with the https://github."
"com/quarkiverse/quarkus-mcp-server[Quarkus MCP Server] by configuring it to "
"verify bearer access tokens."
msgstr ""
"早在 2025 年 4 月，在 \" link:https://quarkus.io/blog/secure-mcp-sse-server/[使用 "
"Quarkus MCP 服务器为安全 MCP 做好准备] \"博文中，我们就介绍了如何通过配置 link:https://github.com/"
"quarkiverse/quarkus-mcp-server[Quarkus MCP 服务器] 来验证不记名访问令牌，从而执行 MCP 客户端身份验证。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"At the time, we worked against the https://modelcontextprotocol.io/"
"specification/2025-03-26/basic/authorization[old 2025-03-26 version of the "
"MCP Authorization specification] that expected compliant MCP servers to "
"manage OAuth2 flows themselves either directly or via the delegation, with "
"that idea being disputed due to its complexity, and with no MCP clients "
"providing the OAuth2 authorization code flow support being available. "
"Therefore, in the https://quarkus.io/blog/secure-mcp-sse-server/[Getting "
"ready for secure MCP with Quarkus MCP Server] blog post, the access tokens "
"were acquired out of band: we used https://quarkus.io/guides/security-openid-"
"connect-dev-services[Keycloak DevUI] to get an access token and copy it to "
"https://quarkus.io/blog/secure-mcp-sse-server/#mcp-server-devui[MCP Server "
"DevUI] to test it in devmode, and did a GitHub login to the Quarkus REST "
"endpoint in order to copy and test a GitHub access token with both https://"
"github.com/modelcontextprotocol/inspector[MCP Inspector] and `curl` in prod "
"mode."
msgstr ""
"当时，我们使用的是 link:https://modelcontextprotocol.io/specification/2025-03-26/"
"basic/authorization[2025-03-26 版本的旧版 MCP 授权规范] ，该规范希望符合要求的 MCP "
"服务器自己直接或通过授权管理 OAuth2 流，但由于其复杂性，这一想法受到了争议，而且也没有提供 OAuth2 授权代码流支持的 MCP "
"客户端。因此，在 \" link:https://quarkus.io/blog/secure-mcp-sse-server/[使用 Quarkus "
"MCP 服务器为安全 MCP 做好准备] \"博文中，访问令牌是在带外获取的：我们使用 link:https://quarkus.io/guides/"
"security-openid-connect-dev-services[Keycloak DevUI] 获取访问令牌并将其复制到 link:https:"
"//quarkus.io/blog/secure-mcp-sse-server/#mcp-server-devui[MCP 服务器 DevUI] "
"，以便在 devmode 模式下进行测试，并通过 GitHub 登录 Quarkus REST 端点，以便在 prod 模式下使用 link:https:"
"//github.com/modelcontextprotocol/inspector[MCP Inspector] 和 `curl` 复制和测试 "
"GitHub 访问令牌。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"The https://modelcontextprotocol.io/specification/2025-06-18/basic/"
"authorization[latest 2025-03-26 version of the MCP Authorization "
"specification] offers a simpler, better version of how OAuth2 must be "
"supported in MCP. The focus has shifted to MCP clients that are now expected "
"to drive the OAuth2 flows, while MCP servers are only required to support "
"automating such flows by providing https://datatracker.ietf.org/doc/html/"
"rfc9728[OAuth2 Protected Resource Metadata], as well as correctly verifying "
"the actual access tokens."
msgstr ""
"link:https://modelcontextprotocol.io/specification/2025-06-18/basic/"
"authorization[MCP 授权规范的最新 2025-03-26 版本] 对 MCP 必须如何支持 OAuth2 "
"提供了一个更简单、更好的版本。重点已转移到 MCP 客户端上，现在预期客户端将驱动 OAuth2 流程，而 MCP 服务器只需通过提供 link:"
"https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 受保护资源元数据] "
"以及正确验证实际访问令牌来支持此类流程的自动化。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"In this blog post, we will explain how MCP clients compliant with the https:/"
"/modelcontextprotocol.io/specification/2025-06-18/basic/authorization[latest "
"2025-03-26 version of the MCP Authorization specification] can login users "
"using an OAuth2 authorization code flow, acquire access tokens and use them "
"to access secure Quarkus MCP _Streamable HTTP_ servers on behalf of the "
"logged-in users."
msgstr ""
"在这篇博文中，我们将介绍符合 link:https://modelcontextprotocol.io/specification/2025-06-18/"
"basic/authorization[最新 2025-03-26 版 MCP 授权规范的] MCP 客户端如何使用 OAuth2 "
"授权代码流登录用户、获取访问令牌，并使用这些令牌代表登录用户访问安全的 Quarkus MCP _Streamable HTTP_ 服务器。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"Currently, https://github.com/modelcontextprotocol/inspector[MCP Inspector] "
"offers the most advanced, adaptable, and accessible MCP OAuth2 authorization "
"code flow support, even if somewhat unstable between its different versions, "
"and therefore we will work with it in this post. You are welcome to "
"experiment with other MCP client implementations."
msgstr ""
"目前， link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] "
"提供了最先进、适应性最强、最易访问的 MCP OAuth2 授权代码流支持，尽管其不同版本之间有些不稳定，因此我们将在本文章中使用它。欢迎您尝试使用其他 "
"MCP 客户端实现。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"We will demonstrate a great https://docs.quarkiverse.io/quarkus-mcp-server/"
"dev/index.html#_multiple_server_configurations[Quarkus MCP Server capability "
"to support multiple MCP HTTP configurations], each one with their own unique "
"OAuth2 or OpenId Connect security constraints, effectively allowing for a "
"multi-tenant security control of tools, prompts and resources."
msgstr ""
"我们将演示 link:https://docs.quarkiverse.io/quarkus-mcp-server/dev/index."
"html#_multiple_server_configurations[Quarkus MCP 服务器支持多个 MCP HTTP 配置的] 强大 "
"link:https://docs.quarkiverse.io/quarkus-mcp-server/dev/index."
"html#_multiple_server_configurations[功能] ，每个配置都有自己独特的 OAuth2 或 OpenId "
"Connect 安全约束，从而有效实现对工具、提示和资源的多租户安全控制。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"https://www.keycloak.org/[Keycloak] will be used to support two distint "
"security realms, with the security of each of the MCP HTTP configurations "
"controlled by its own Keycloak realm. You are welcome to try to secure "
"Quarkus MCP Server with other preferred OAuth2 or OpenID Connect providers "
"by replacing the Keycloak specific configurations."
msgstr ""
"link:https://www.keycloak.org/[Keycloak] 将用于支持两个不同的安全域，每个 MCP HTTP "
"配置的安全性由其自身的 Keycloak 域控制。欢迎使用其他首选 OAuth2 或 OpenID Connect 提供商替换 Keycloak "
"特定配置，以确保 Quarkus MCP 服务器的安全。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Demo MCP OAuth2 Flow Diagram"
msgstr "演示 MCP OAuth2 流程图"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"You can read all about the MCP OAuth2 Authorization Flow in the https://"
"modelcontextprotocol.io/specification/2025-06-18/basic/"
"authorization#authorization-flow[Authorization Flow section of the latest "
"specification]."
msgstr ""
"您可以在 link:https://modelcontextprotocol.io/specification/2025-06-18/basic/"
"authorization#authorization-flow[最新规范的] \"授权流程 \" link:https://"
"modelcontextprotocol.io/specification/2025-06-18/basic/"
"authorization#authorization-flow[部分] 阅读有关 MCP OAuth2 授权 link:https://"
"modelcontextprotocol.io/specification/2025-06-18/basic/"
"authorization#authorization-flow[流程] 的全部内容。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"In this section, we are going to have a look at a simplified diagram showing "
"how https://github.com/modelcontextprotocol/inspector[MCP Inspector] can use "
"OAuth 2.0 Flow to login a user to Keycloak, get an access token and use it "
"to access a secure Quarkus MCP Server endpoint."
msgstr ""
"在本节中，我们将看一个简化图，展示 link:https://github.com/modelcontextprotocol/inspector[MCP "
"Inspector] 如何使用 OAuth 2.0 流程将用户登录到 Keycloak、获取访问令牌并用它访问安全的 Quarkus MCP "
"服务器端点。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"MCP Client such as https://github.com/modelcontextprotocol/inspector[MCP "
"Inspector] requires configuring an MCP _Streamable HTTP_ endpoint URL, "
"OAuth2 Client ID, and optional scopes to access the MCP server securely. And "
"as you can see, a lot happens from the moment you press `Connect` until a "
"valid access token is sent to the MCP server."
msgstr ""
"MCP 客户端（如 link:https://github.com/modelcontextprotocol/inspector[MCP "
"Inspector）] 需要配置 MCP _Streamable HTTP_ 端点 URL、OAuth2 客户 ID 和可选范围，以便安全访问 MCP "
"服务器。正如您所看到的，从您按下 `Connect` 到向 MCP 服务器发送有效访问令牌，这期间会发生很多事情。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"MCP Client starts by accessing the MCP server without a token and gets back "
"HTTP 401 with a `WWW-Authenticate` `resource_metadata` parameter that links "
"to the MCP server's https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 "
"Protected Resource Metadata] route. The client now fetches a base URL of the "
"Keycloak realm that secures the MCP server as well as the MCP server's "
"resource identifier."
msgstr ""
"MCP 客户端开始访问 MCP 服务器时无需令牌，并返回带有 `WWW-Authenticate` `resource_metadata` 参数的 "
"HTTP 401，该参数链接到 MCP 服务器的 link:https://datatracker.ietf.org/doc/html/"
"rfc9728[OAuth2 受保护资源元数据] 路由。客户端现在会获取保护 MCP 服务器的 Keycloak 领域的基本 URL 以及 MCP "
"服务器的资源标识符。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"Next, MCP Client uses the Keycloak realm's URL to discover this realm's "
"authorization and token endpoint URLs, supported https://www.rfc-editor.org/"
"rfc/rfc7636[Proof Key for Code Exchange] (PKCE) methods, and other metadata "
"properties."
msgstr ""
"接下来，MCP Client 会使用 Keycloak 领域的 URL 来发现该领域的授权和令牌端点 URL、支持的 link:https://www."
"rfc-editor.org/rfc/rfc7636[代码交换证明密钥] (PKCE) 方法以及其他元数据属性。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"The user is now redirected to Keycloak to login into the required realm. The "
"Keycloak redirect URL includes the configured OAuth2 client id, scopes, "
"callback URI which points to the `http://localhost:6274/oauth/callback` "
"endpoint managed by the MCP client, as well as the earlier discovered MCP "
"Server's resource identifier as an https://www.rfc-editor.org/rfc/rfc8707."
"html[OAuth2 Resource Indicator]. Generated PKCE code challenge and state "
"parameters are also included in the redirect."
msgstr ""
"现在，用户会被重定向到 Keycloak，登录到所需的领域。Keycloak 重定向 URL 包括已配置的 OAuth2 客户端 ID、作用域、回调 "
"URI（指向 MCP 客户端管理的 `http://localhost:6274/oauth/callback` 端点的回调 URI，以及之前发现的作为 "
"link:https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2 资源指示] 符的 MCP "
"服务器资源标识符。生成的 PKCE 代码挑战和状态参数也包含在重定向中。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"The user logs in, is redirected back to the `http://localhost:6274/oauth/"
"callback` endpoint, MCP client exchanges the returned `code` to get ID and "
"access tokens, and uses the access token to access the MCP server, allowing "
"the user to select and run the tool."
msgstr ""
"用户登录后被重定向到 `http://localhost:6274/oauth/callback` 端点，MCP 客户端通过交换返回的 `code` "
"获取 ID 和访问令牌，并使用访问令牌访问 MCP 服务器，允许用户选择并运行工具。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"https://modelcontextprotocol.io/specification/2025-06-18/basic/"
"authorization[MCP Authorization Specification] also recommends that MCP "
"clients support https://datatracker.ietf.org/doc/html/rfc7591[OAuth2 Dynamic "
"Client Registration] and https://github.com/modelcontextprotocol/"
"inspector[MCP Inspector] does support it."
msgstr ""
"link:https://modelcontextprotocol.io/specification/2025-06-18/basic/"
"authorization[MCP 授权规范] 还建议 MCP 客户端支持 link:https://datatracker.ietf.org/doc/"
"html/rfc7591[OAuth2 动态客户端注册] ，而 link:https://github.com/modelcontextprotocol/"
"inspector[MCP Inspector] 确实支持该功能。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"In this post, we are only going to look at a case where OAuth2 Client ID is "
"already known in advance, which is likely to be a typical case in production "
"where OIDC client applications are created in advance."
msgstr "在这篇文章中，我们将只讨论事先已经知道 OAuth2 客户 ID 的情况，这很可能是生产中提前创建 OIDC 客户应用程序的典型情况。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"We will also look at how https://github.com/modelcontextprotocol/"
"inspector[MCP Inspector] does https://datatracker.ietf.org/doc/html/"
"rfc7591[OAuth2 Dynamic Client Registration] in the next post in this MCP "
"Security series."
msgstr ""
"我们还将在 MCP 安全系列的下一篇文章中介绍 MCP link:https://github.com/modelcontextprotocol/"
"inspector[Inspector] 如何进行 link:https://datatracker.ietf.org/doc/html/"
"rfc7591[OAuth2 动态客户端注册] 。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"https://modelcontextprotocol.io/specification/2025-06-18/basic/"
"authorization#authorization-flow[MCP Authorization Flow] is rather neatly "
"defined, requiring the use of such OAuth2 specifications as https://"
"datatracker.ietf.org/doc/html/rfc9728[OAuth2 Protected Resource Metadata], "
"https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2 Resource Indicator], and "
"also recommending the use of https://datatracker.ietf.org/doc/html/"
"rfc7591[OAuth2 Dynamic Client Registration]."
msgstr ""
"link:https://modelcontextprotocol.io/specification/2025-06-18/basic/"
"authorization#authorization-flow[MCP 授权流] 的定义相当清晰，要求使用 OAuth2 link:https://"
"datatracker.ietf.org/doc/html/rfc9728[保护资源元数据] 、 link:https://www.rfc-editor."
"org/rfc/rfc8707.html[OAuth2 资源指示器] 等 OAuth2 规范，还建议使用 link:https://"
"datatracker.ietf.org/doc/html/rfc7591[OAuth2 动态客户端注册] 。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"Please note though that the actual flow is not that unique to the MCP "
"Authorization. It is a typical Single-page application (SPA) OAuth2 "
"authorization code flow in action:"
msgstr "但请注意，实际流程并非 MCP 授权所独有。这是一个典型的单页面应用程序（SPA）OAuth2 授权代码流程："

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"SPA uses a provider such as Keycloak to login users and use acquired access "
"tokens to access Quarkus Service on their behalf - typical OAuth2 done at "
"the SPA level. In this diagram, you can replace `SPA` with `MCP Client`, "
"`Quarkus Service` with `MCP Server` and you'll get a close enough match with "
"the demo flow diagram in the previous image."
msgstr ""
"SPA 使用 Keycloak 等提供商登录用户，并使用获取的访问令牌代表用户访问 Quarkus 服务--这是在 SPA 层面完成的典型 "
"OAuth2。在本图中，可以将 `SPA` 替换为 `MCP Client` ，将 `Quarkus Service` 替换为 `MCP Server` "
"，这样就可以与上一张图片中的演示流程图非常接近了。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"The comparison between the https://modelcontextprotocol.io/specification/"
"2025-06-18/basic/authorization[MCP Authorization] and SPA OAuth2 flows "
"implies that the https://modelcontextprotocol.io/specification/2025-06-18/"
"basic/authorization[MCP Authorization specification] targets generic SPA AI "
"and MCP client applications such as https://github.com/modelcontextprotocol/"
"inspector[MCP Inspector], Claude AI, Cursor, and others that can plugin MCP "
"servers. It does not currently apply to Quarkus MCP Client which typically "
"runs in scope of the higher-level Quarkus LangChain4j server application "
"with its own authentication requirements, you can read more about it in the "
"https://quarkus.io/blog/secure-mcp-client/#demo-architecture[Use Quarkus MCP "
"client to access secure MCP HTTP servers] blog post."
msgstr ""
"link:https://modelcontextprotocol.io/specification/2025-06-18/basic/"
"authorization[MCP 授权] 和 SPA OAuth2 流程之间的比较表明， link:https://"
"modelcontextprotocol.io/specification/2025-06-18/basic/authorization[MCP "
"授权规范] 针对的是通用 SPA AI 和 MCP 客户端应用程序，如 link:https://github.com/"
"modelcontextprotocol/inspector[MCP Inspector] 、Claude AI、Cursor 和其他可以插入 MCP "
"服务器的应用程序。它目前不适用于 Quarkus MCP Client，后者通常在具有自身身份验证要求的更高级 Quarkus LangChain4j "
"服务器应用程序的范围内运行，您可以在 \" link:https://quarkus.io/blog/secure-mcp-client/#demo-"
"architecture[使用 Quarkus MCP 客户端访问安全的 MCP HTTP 服务器] \"博文中阅读更多相关信息。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "We are now ready to have a look at how it works in the demo."
msgstr "现在，我们可以看看它在演示中是如何工作的。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"You can find the complete project source in the https://github.com/"
"quarkiverse/quarkus-mcp-server/tree/main/samples/multiple-secure-mcp-http-"
"servers[Multiple Secure Quarkus MCP HTTP Servers sample]."
msgstr ""
"您可以在 link:https://github.com/quarkiverse/quarkus-mcp-server/tree/main/"
"samples/multiple-secure-mcp-http-servers[多重安全 Quarkus MCP HTTP 服务器示例] "
"中找到完整的项目源代码。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"Step 1 - Create and start MCP server with two secure Streamable HTTP "
"endpoints"
msgstr "第 1 步 - 创建并启动带有两个安全可流 HTTP 端点的 MCP 服务器"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"First, let's create a secure Quarkus MCP server and configure two "
"_Streamable HTTP_ endpoints with their own unique security authentication "
"controls."
msgstr "首先，让我们创建一个安全的 Quarkus MCP 服务器，并配置两个具有各自独特安全验证控制的 _可流 HTTP_ 端点。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "MCP server maven dependencies"
msgstr "MCP 服务器 maven 依赖项"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Add the following dependencies:"
msgstr "添加以下依赖项"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"`quarkus-mcp-server-sse` is required to support both MCP Streamable HTTP and "
"SSE transports."
msgstr "`quarkus-mcp-server-sse` 需要同时支持 MCP Streamable HTTP 和 SSE 传输。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"`quarkus-oidc` is required to secure access to MCP Server endpoints. Its "
"version is defined in the Quarkus BOM."
msgstr "`quarkus-oidc` 是确保 MCP 服务器端点访问安全所必需的。其版本已在 Quarkus BOM 中定义。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "MCP Server Configuration"
msgstr "MCP 服务器配置"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Let's configure the MCP server:"
msgstr "让我们配置 MCP 服务器："

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"Root path for the default `alpha` MCP server endpoint, with both _Streamable "
"HTTP_ and SSE endpoints available under this path."
msgstr "默认 `alpha` MCP 服务器端点的根路径，该路径下有 _可流 HTTP_ 和 SSE 端点。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"Root path for the `bravo` MCP server endpoint, with both _Streamable HTTP_ "
"and SSE endpoints available under this path."
msgstr "`bravo` MCP 服务器端点的根路径，在此路径下可使用 _Streamable HTTP_ 和 SSE 端点。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"Require authentication for all requests to the `alpha` and `bravo` MCP "
"server endpoints. This authentication policy is enforced by the matching "
"OIDC tenant configurations."
msgstr "要求对 `alpha` 和 `bravo` MCP 服务器端点的所有请求进行身份验证。该身份验证策略由匹配的 OIDC 租户配置强制执行。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"Default OIDC tenant secures the default MCP server `alpha` endpoint, "
"Keycloak DevService inserts a missing `quarkus.oidc.auth-server-url` "
"property that links to the Keycloak `alpha` realm endpoint."
msgstr ""
"默认 OIDC 租户会保护默认 MCP 服务器 `alpha` 端点，Keycloak DevService 会插入一个缺失的 `quarkus."
"oidc.auth-server-url` 属性，链接到 Keycloak `alpha` realm 端点。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"Require that tokens that are allowed to access the default MCP server "
"`alpha` endpoint must have an audience (`aud`) claim that contains a "
"`quarkus-mcp-alpha` value."
msgstr ""
"要求允许访问默认 MCP 服务器 `alpha` 端点的令牌必须有一个包含 `quarkus-mcp-alpha` 值的受众 ( `aud` ) 声明。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"Enable the https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 Protected "
"Resource Metadata] route for the default OIDC tenant. It will help https://"
"github.com/modelcontextprotocol/inspector[MCP Inspector] to find out about "
"the authorization server that secures the default MCP server `alpha` "
"endpoint."
msgstr ""
"为默认 OIDC 租户启用 link:https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 "
"受保护资源元数据] 路由。它将帮助 link:https://github.com/modelcontextprotocol/inspector[MCP "
"Inspector] 查找确保默认 MCP 服务器 `alpha` 端点安全的授权服务器。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"OIDC `bravo` tenant secures the MCP server `bravo` endpoint. Its `quarkus."
"oidc.bravo.auth-server-url` property links to the Keycloak `bravo` realm "
"endpoint."
msgstr ""
"OIDC `bravo` 租户保护 MCP 服务器 `bravo` 端点的安全。其 `quarkus.oidc.bravo.auth-server-"
"url` 属性链接到 Keycloak `bravo` 领域端点。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"Require that tokens that are allowed to access the MCP server `bravo` "
"endpoint must have an audience (`aud`) claim that contains a `quarkus-mcp-"
"bravo` value."
msgstr ""
"要求允许访问 MCP 服务器 `bravo` 端点的令牌必须有一个包含 `quarkus-mcp-bravo` 值的受众 ( `aud` ) 声明。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"Enable the https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 Protected "
"Resource Metadata] route for the OIDC `bravo` tenant. It will help https://"
"github.com/modelcontextprotocol/inspector[MCP Inspector] to find out about "
"the the authorization server that secures the MCP server `bravo` endpoint."
msgstr ""
"为 OIDC `bravo` 租户启用 link:https://datatracker.ietf.org/doc/html/"
"rfc9728[OAuth2 受保护资源元数据] 路由。它将帮助 link:https://github.com/"
"modelcontextprotocol/inspector[MCP Inspector] 查找确保 MCP 服务器 `bravo` "
"端点安全的授权服务器。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"Customize the relative path for https://datatracker.ietf.org/doc/html/"
"rfc9728[OAuth2 Protected Resource Metadata] route for the OIDC `bravo` "
"tenant. By default, it is `http://localhost:8080/bravo`, however, https://"
"github.com/modelcontextprotocol/inspector[MCP Inspector] can not find this "
"route and expects `http://localhost:8080/bravo/mcp`, so we just tune it a "
"bit to make https://github.com/modelcontextprotocol/inspector[MCP Inspector] "
"happy."
msgstr ""
"为 OIDC `bravo` 租户自定义 link:https://datatracker.ietf.org/doc/html/"
"rfc9728[OAuth2 受保护资源元数据] 路由的相对路径。默认路径为 `http://localhost:8080/bravo` 但是， "
"link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] "
"无法找到此路由，并希望 `http://localhost:8080/bravo/mcp` 因此，我们只需稍作调整，即可让 link:https://"
"github.com/modelcontextprotocol/inspector[MCP Inspector] 满意。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"Ask Keycloak DevService to upload two realms to the Keycloak container, "
"`alpha-realm.json` and `bravo-realm.json`."
msgstr ""
"要求 Keycloak DevService 向 Keycloak 容器上传两个领域 `alpha-realm.json` 和 `bravo-realm."
"json` 。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"Keycloak DevService must set the default OIDC tenant properies, we point to "
"`alpha-realm.json` for Keycloak DevService to use it to set properties such "
"as `quarkus.oidc.auth-server-url`."
msgstr ""
"Keycloak DevService 必须设置默认 OIDC 租户属性，我们指向 `alpha-realm.json` ，以便 Keycloak "
"DevService 使用它来设置 `quarkus.oidc.auth-server-url` 等属性。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"Ask Keycloak not to add `quarkus.oidc.client-id`. Using the realm "
"verification keys, the configured audience, expiry checks is sufficient to "
"verify Keycloak JWT access tokens; we also plan to deal with dynamically "
"registered OIDC clients in the next blog post."
msgstr ""
"要求 Keycloak 不要添加 `quarkus.oidc.client-id` 。使用领域验证密钥、配置的受众、过期检查足以验证 Keycloak "
"JWT 访问令牌；我们还计划在下一篇博文中处理动态注册的 OIDC 客户端。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"Allow https://github.com/modelcontextprotocol/inspector[MCP Inspector] CORS "
"requests."
msgstr ""
"允许 link:https://github.com/modelcontextprotocol/inspector[MCP 检查员] CORS 请求。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"You can read about how https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 "
"Protected Resource Metadata] is supported in Quarkus OIDC in the https://"
"quarkus.io/guides/security-oidc-expanded-configuration#resource-metadata-"
"properties[Expanded OpenId Connect Configuration guide]."
msgstr ""
"您可以在 link:https://quarkus.io/guides/security-oidc-expanded-"
"configuration#resource-metadata-properties[扩展 OpenId Connect 配置指南] 中了解 "
"Quarkus OIDC 如何支持 link:https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 "
"受保护资源元数据] 。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"The Keycloak `alpha` and `bravo` realms represent unique, non-intersecting "
"security configurations backed up by Keycloak. Both of these realms are "
"represented by default and `bravo` OIDC tenants respectively. Quarkus OIDC "
"uses its https://quarkus.io/guides/security-openid-connect-"
"multitenancy#configure-tenant-paths[path-based tenant resolver] to decide "
"which OIDC tenant should handle the current MCP Server request."
msgstr ""
"Keycloak `alpha` 和 `bravo` 领域代表由 Keycloak 支持的唯一、非交叉的安全配置。这两个域分别由默认和 `bravo` "
"OIDC 租户代表。Quarkus OIDC 使用其 link:https://quarkus.io/guides/security-openid-"
"connect-multitenancy#configure-tenant-paths[基于路径的租户解析器] 来决定哪个 OIDC 租户应处理当前的 "
"MCP 服务器请求。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"You are welcome to update the default and `bravo` OIDC tenant configurations "
"to point to your preferred providers instead of Keycloak, for example, to "
"multiple Entra ID or Auth0 tenants, etc."
msgstr ""
"欢迎更新默认和 `bravo` OIDC 租户配置，以指向您喜欢的提供商而不是 Keycloak，例如，指向多个 Entra ID 或 Auth0 "
"租户等。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"Please also check the <<keycloak-vs-github>> section about the reasons "
"behind preferring to use Keycloak in this demo, instead of GitHub that was "
"used in the earlier https://quarkus.io/blog/secure-mcp-sse-server/[Getting "
"ready for secure MCP with Quarkus MCP Server] blog post."
msgstr ""
"还请查看 <<keycloak-vs-github>> 部分，了解在本演示中选择使用 Keycloak 而不是 GitHub 的原因（GitHub "
"在之前的博文《 link:https://quarkus.io/blog/secure-mcp-sse-server/[使用 Quarkus MCP "
"服务器为安全 MCP 做好准备》] 中使用过）。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"https://modelcontextprotocol.io/specification/2025-06-18/basic/"
"authorization[MCP Authorization specification] https://modelcontextprotocol."
"io/specification/2025-06-18/basic/authorization#token-audience-binding-and-"
"validation[requires] that the token audience is validated. The specification "
"prefers https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2 Resource "
"Indicators] to control the token audience."
msgstr ""
"link:https://modelcontextprotocol.io/specification/2025-06-18/basic/"
"authorization[MCP 授权规范] link:https://modelcontextprotocol.io/specification/"
"2025-06-18/basic/authorization#token-audience-binding-and-validation[要求] "
"对令牌受众进行验证。该规范倾向于用 link:https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2 "
"资源指示器] 来控制令牌受众。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"For example, by default, the resource identifier of the default MCP server "
"`alpha` endpoint is calculated as `http://localhost:8080` and MCP Inspector "
"includes it as a https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2 Resource "
"Indicator] `resource` parameter in the Keycloak redirect URL. The providers "
"that already support the https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2 "
"Resource Indicator] specification can add the `http://localhost:8080` "
"resource indicator to the access token's audience (`aud`) claim."
msgstr ""
"例如，默认情况下，默认 MCP 服务器 `alpha` 端点的资源标识符计算为 `http://localhost:8080` MCP "
"Inspector 将其作为 link:https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2 "
"资源标识符] `resource` 参数包含在 Keycloak 重定向 URL 中。已支持 link:https://www.rfc-editor."
"org/rfc/rfc8707.html[OAuth2 资源指示器] 规范的提供商可将 link:https://www.rfc-editor.org/"
"rfc/rfc8707.html[资源指示器] 添加到访问令牌的 `http://localhost:8080` 资源指示符添加到访问令牌的受众 ( "
"`aud` ) 声明中。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"Keycloak does not support the https://www.rfc-editor.org/rfc/rfc8707."
"html[OAuth2 Resource Indicator] specification yet therefore we configure "
"Keycloak to use predefined audience values specific to MCP server `alpha` "
"and `bravo` endpoints. For our demo, the use of the custom audience values "
"is non-ambiguous and sufficient."
msgstr ""
"Keycloak 尚不支持 link:https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2 资源指示器] "
"规范，因此我们在配置 Keycloak 时会使用 MCP 服务器 `alpha` 和 `bravo` "
"端点特定的预定义受众值。在我们的演示中，使用自定义受众值并不含糊，也足够了。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"When your OAuth2 provider start supporting the https://www.rfc-editor.org/"
"rfc/rfc8707.html[OAuth2 Resource Indicator] specification, all you need to "
"do to align with the https://modelcontextprotocol.io/specification/2025-06-"
"18/basic/authorization[MCP Authorization specification]'s requirement to use "
"resource indicators is to update the OIDC tenant token audience "
"configuration to contain an audience such as `http://localhost:8080`."
msgstr ""
"当您的 OAuth2 提供商开始支持 link:https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2 "
"资源指示器] link:https://modelcontextprotocol.io/specification/2025-06-18/basic/"
"authorization[规范] 时，您只需更新 OIDC 租户令牌受众配置，使其包含一个受众，如 `http://localhost:8080` ."

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"You can also harden it by requiring a token to have both a custom audience "
"value such as `quarkus-mcp-alpha` and a resource value such as `http://"
"localhost:8080`."
msgstr ""
"您还可以通过要求令牌同时具有自定义受众值（如 `quarkus-mcp-alpha` ）和资源值（如 `http://localhost:8080` ."

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "MCP User Name Provider tools"
msgstr "MCP 用户名 提供商工具"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"MCP Server has two _Streamable HTTP_ endpoints. The MCP and security "
"configuration for each of these endpoints allows to group tools, resources "
"and prompts according to specific deployment requirements."
msgstr "MCP 服务器有两个 _可流 HTTP_ 端点。每个端点的 MCP 和安全配置可根据具体部署要求对工具、资源和提示进行分组。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"Let's create two tools that can return a name of the current MCP Client "
"user, one per each endpoint:"
msgstr "让我们创建两个可以返回当前 MCP 客户端用户名称的工具，每个端点一个："

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Capture a security identity represented by the verified access token"
msgstr "捕获由已验证访问令牌代表的安全身份"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"The `alpha-user-name-provider` tool is accessible via the default "
"_Streamable HTTP_ `alpha` endpoint."
msgstr "`alpha-user-name-provider` 工具可通过默认的 _Streamable HTTP_ `alpha` 端点访问。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"The `bravo-user-name-provider` tool is accessible via the `bravo` "
"_Streamable HTTP_ endpoint."
msgstr "`bravo-user-name-provider` 工具可通过 `bravo` _Streamable HTTP_ 端点访问。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"Both the `alpha-user-name-provider` and `bravo-user-name-provider` tools are "
"very simple tools designed to show that the identities of MCP client users "
"on whose behalf these tools are called by MCP clients is available to tools "
"to perform a user identity specific action, an important element for a "
"secure agentic AI system. Of course, the real world tool implementations "
"will be more interesting."
msgstr ""
"`alpha-user-name-provider` 和 `bravo-user-name-provider` 工具都是非常简单的工具，旨在显示 MCP "
"客户端用户的身份，MCP "
"客户端以这些工具的名义调用这些工具时，工具可以执行用户身份特定的操作，这是安全代理人工智能系统的一个重要元素。当然，现实世界中的工具实现会更有趣。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Keycloak Configuration"
msgstr "钥匙斗篷配置"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"The Keycloak configuration has already been prepared in the `alpha-realm."
"json` and `bravo-realm.json` realm files that Keycloak DevService uploads to "
"Keycloak at the start-up time."
msgstr ""
"Keycloak DevService 会在启动时将 `alpha-realm.json` 和 `bravo-realm.json` Realm "
"文件上传到 Keycloak，其中已包含 Keycloak 配置。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"Let's have a closer look. Please go to `http://localhost:8080/q/dev-ui` and "
"select an `OpenId Connect` card:"
msgstr "让我们仔细看看。请访问 `http://localhost:8080/q/dev-ui` 并选择 `OpenId Connect` 卡："

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"Click on `Keycloak Admin`, login as `admin:admin` and check the `alpha` and "
"`bravo` realm configurations."
msgstr "单击 `Keycloak Admin` ，以 `admin:admin` 登录，然后检查 `alpha` 和 `bravo` 领域配置。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"The `alpha-realm.json` has a single `alpha-client` client and a single user, "
"`alice` with a password `alice`."
msgstr "`alpha-realm.json` 有一个 `alpha-client` 客户端和一个用户 `alice` ，密码为 `alice` 。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"The `alpha-client` is a public client because its `Client authentication` "
"option is disabled:"
msgstr "`alpha-client` 是公共客户端，因为其 `Client authentication` 选项已禁用："

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"Typically, public SPA applications work with the public clients, to avoid "
"having to deal with managing the confidential client's secret."
msgstr "通常情况下，公共 SPA 应用程序与公共客户合作，以避免管理机密客户的秘密。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"The `alpha-client` is configured to support a callback URL provided by https:"
"//github.com/modelcontextprotocol/inspector[MCP Inspector]:"
msgstr ""
"`alpha-client` 已配置为支持 link:https://github.com/modelcontextprotocol/"
"inspector[MCP Inspector] 提供的回调 URL："

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"The `alpha-realm.json` also has a custom `quarkus-mcp-alpha` client scope "
"with an audience mapping, and it is assigned to the `alfa-client` client. It "
"was done similarly to how it was done in the https://quarkus.io/blog/secure-"
"mcp-oidc-client/#keycloak-setup[Use Quarkus MCP client to access secure MCP "
"HTTP server from command line] blog post. We start with creating a `quarkus-"
"mcp-server` client scope:"
msgstr ""
"`alpha-realm.json` 也有一个带有受众映射的自定义 `quarkus-mcp-alpha` 客户端范围，并将其分配给 `alfa-"
"client` 客户端。其方法与《 link:https://quarkus.io/blog/secure-mcp-oidc-client/"
"#keycloak-setup[使用 Quarkus MCP 客户端从命令行访问安全的 MCP HTTP 服务器] 》博文中的方法类似。我们首先创建 "
"`quarkus-mcp-server` 客户端作用域："

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Next, we create an audience mapping for this scope:"
msgstr "接下来，我们为该范围创建受众映射："

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"Finally, we assign this client scope as an optional scope to the `alpha-"
"client` client:"
msgstr "最后，我们将此客户机作用域作为可选作用域分配给 `alpha-client` 客户机："

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"Similarly, the `bravo-realm.json` has a public `bravo-client` client, and a "
"single user, `jdoe` with a password `jdoe`. It also has a custom `quarkus-"
"mcp-bravo` client scope with an audience mapping."
msgstr ""
"同样， `bravo-realm.json` 有一个公共 `bravo-client` 客户端和一个用户 `jdoe` ，密码为 `jdoe` "
"。它还有一个带有受众映射的自定义 `quarkus-mcp-bravo` 客户端范围。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"Both realms have the client scopes with the audience mappings to let users "
"request the correct token audience by configuring a custom scope in the "
"https://github.com/modelcontextprotocol/inspector[MCP Inspector]'s OAuth2 "
"Flow configuration. As implied in the <<mcp-server-configuration>>, it will "
"be no longer necessary once the https://www.rfc-editor.org/rfc/rfc8707."
"html[OAuth2 Resource Indicator] specification is supported by Keycloak and "
"other providers."
msgstr ""
"通过在 link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] 的 "
"OAuth2 Flow 配置中配置自定义范围，这两个领域都有带有受众映射的客户端范围，以便用户请求正确的令牌受众。正如 <<mcp-server-"
"configuration>> 所暗示的，一旦 Keycloak 和其他提供商支持 link:https://www.rfc-editor.org/"
"rfc/rfc8707.html[OAuth2 资源指示器] 规范，就不再需要这样做了。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Why was Keycloak preferred to GitHub in the demo ?"
msgstr "在演示中，Keycloak 为什么比 GitHub 更受青睐？"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"You may be wondering, why did we choose `Keycloak` for this demo, instead of "
"`GitHub` that we used in the earlier https://quarkus.io/blog/secure-mcp-sse-"
"server/[Getting ready for secure MCP with Quarkus MCP Server] blog post ?"
msgstr ""
"您可能想知道，为什么我们选择 `Keycloak` 来做这个演示，而不是之前在《 link:https://quarkus.io/blog/secure-"
"mcp-sse-server/[使用 Quarkus MCP 服务器为安全 MCP 做好准备》] 博文中使用的 `GitHub` 呢？"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"The main reason behind this is that the access tokens that are targeting MCP "
"servers are expected to be designed to target MCP servers only. It is a good "
"OAuth2 security recommendation. GitHub access tokens are meant to be used to "
"access GitHub API, on behalf of the logged-in user, at the point where the "
"login has happened, not via an MCP server indirection. For example, Claude "
"AI offers a direct GitHub MCP integration."
msgstr ""
"这背后的主要原因是，针对 MCP 服务器的访问令牌应该只针对 MCP 服务器设计。这是一项很好的 OAuth2 安全建议。GitHub "
"访问令牌是用来代表登录用户在登录时访问 GitHub API 的，而不是通过 MCP 服务器间接访问。例如，Claude AI 提供直接 GitHub "
"MCP 集成。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "This consideration applies to other social providers such as Google."
msgstr "这一考虑因素也适用于其他社交服务提供商，如 Google。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"It is formally expressed in the https://modelcontextprotocol.io/"
"specification/2025-06-18/basic/authorization#access-token-privilege-"
"restriction[MCP Authorization Access Token Privilege Restriction section]: "
"`MCP servers MUST only accept tokens specifically intended for themselves..."
"`."
msgstr ""
"它在 link:https://modelcontextprotocol.io/specification/2025-06-18/basic/"
"authorization#access-token-privilege-restriction[MCP 授权访问令牌权限限制部分] 有正式表述： "
"`MCP servers MUST only accept tokens specifically intended for themselves…​` "
"。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"We also discussed it in the https://quarkus.io/blog/secure-mcp-client/"
"#access-token-delegation-considerations[Access Token Delegation "
"Considerations] section of the https://quarkus.io/blog/secure-mcp-client[Use "
"Quarkus MCP client to access secure MCP HTTP servers] blog post."
msgstr ""
"我们还在 \" link:https://quarkus.io/blog/secure-mcp-client[使用 Quarkus MCP "
"客户端访问安全的 MCP HTTP 服务器] \"博文中的 \" link:https://quarkus.io/blog/secure-mcp-"
"client/#access-token-delegation-considerations[访问令牌委托注意事项] \"部分进行了讨论。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"If your MCP server really needs to accept a token that it will not use "
"itself, for example, in order to forward it further downstream, then "
"consider an option of exchanging tokens for the audiences to be correct "
"through the whole distributed token call chain. Please check the https://"
"quarkus.io/blog/secure-mcp-oidc-client/[Use Quarkus MCP client to access "
"secure MCP HTTP server from command line] blog post where we use the "
"standard https://datatracker.ietf.org/doc/html/rfc8693[OAuth2 Token "
"Exchange]."
msgstr ""
"如果你的 MCP "
"服务器确实需要接受一个它自己不会使用的令牌，例如，为了将其进一步转发到下游，那么可以考虑通过整个分布式令牌调用链交换令牌，以确保受众的正确性。请查看《 "
"link:https://quarkus.io/blog/secure-mcp-oidc-client/[使用 Quarkus MCP "
"客户端从命令行访问安全的 MCP HTTP 服务器] 》博文，其中我们使用了标准的 link:https://datatracker.ietf.org/"
"doc/html/rfc8693[OAuth2 令牌交换] 。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Start the MCP server in dev mode"
msgstr "以开发模式启动 MCP 服务器"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Now let's start the MCP server in dev mode:"
msgstr "现在，让我们以开发模式启动 MCP 服务器："

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"You can see that default _Streamable HTTP_ and SSE endpoints are available "
"at `http://localhost:8080/mcp` and `http://localhost:8080/mcp/sse` "
"respectively, while the `bravo` _Streamable HTTP_ and SSE endpoints are "
"available at `http://localhost:8080/bravo/mcp` and `http://localhost:8080/"
"bravo/mcp/sse` respectively."
msgstr ""
"您可以看到默认的 _可流 HTTP_ 和 SSE 端点位于 `http://localhost:8080/mcp` 和 `http://"
"localhost:8080/mcp/sse` 端点，而 `bravo` _Streamable HTTP_ 和 SSE 端点分别在 `http://"
"localhost:8080/bravo/mcp` 和 `http://localhost:8080/bravo/mcp/sse` 和"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Step 2: Use MCP Inspector to access two secure MCP server endpoints"
msgstr "第 2 步：使用 MCP Inspector 访问两个安全的 MCP 服务器端点"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Start the MCP Inspector"
msgstr "启动 MCP 检查器"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"While https://github.com/modelcontextprotocol/inspector[MCP Inspector] "
"provides a very good OAuth2 Flow support, it is still a very active project "
"and at the moment, you may observe https://github.com/modelcontextprotocol/"
"inspector[MCP Inspector] failing to connect to the OAuth2 provider in some "
"versions."
msgstr ""
"虽然 link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] "
"提供了很好的 OAuth2 Flow 支持，但它仍是一个非常活跃的项目，目前，您可能会发现 link:https://github.com/"
"modelcontextprotocol/inspector[MCP Inspector] 在某些版本中无法连接到 OAuth2 提供程序。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"https://github.com/modelcontextprotocol/inspector[MCP Inspector] v0.16.7 has "
"been proven to connect to Keycloak successfully and therefore we recommend "
"you to use this version when working with this blog post."
msgstr ""
"link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] v0.16."
"7 已被证明能成功连接到 Keycloak，因此我们建议您在使用本博文时使用该版本。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"We are now going to connect to two individual MCP _Streamable HTTP_ "
"endpoints in turn."
msgstr "现在，我们将依次连接两个单独的 MCP _Streamable HTTP_ 端点。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"See the <<demo-flow-diagram>> section for an overview of how https://github."
"com/modelcontextprotocol/inspector[MCP Inspector] performs a `Connect` "
"request."
msgstr ""
"有关 link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] "
"如何执行 `Connect` 请求的概述，请参阅 <<demo-flow-diagram>> 部分。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"Please keep your browser's `Developer Tools Network` tab open if you would "
"like to observe how MCP Inspector probes various MCP server and Keycloak "
"endpoints and eventually succeeds in getting a user logged in and acquiring "
"the access token."
msgstr ""
"如果您想观察 MCP Inspector 如何探测各种 MCP 服务器和 Keycloak 端点，并最终成功让用户登录和获取访问令牌，请打开浏览器的 "
"`Developer Tools Network` 标签。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Connect to the default MCP Server `alpha` endpoint"
msgstr "连接到默认的 MCP 服务器 `alpha` 端点"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"If your browser does not show an `OAuth 2.0 Flow` in the `Authentication` "
"view in the loaded https://github.com/modelcontextprotocol/inspector[MCP "
"Inspector] v0.16.7, try latest Firefox."
msgstr ""
"如果您的浏览器在已加载的 link:https://github.com/modelcontextprotocol/inspector[MCP "
"Inspector] v0.16.7 的 `Authentication` 视图中未显示 `OAuth 2.0 Flow` ，请尝试使用最新的 "
"Firefox link:https://github.com/modelcontextprotocol/inspector[浏览器] 。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"Set `Transport Type` to `Streamable HTTP`, `URL` to the `http://localhost:"
"8080/mcp` address of the default MCP server `alpha` endpoint."
msgstr ""
"将 `Transport Type` 设置为 `Streamable HTTP` ，将 `URL` 设置为 `http://localhost:8080/"
"mcp` 默认 MCP 服务器 `alpha` 端点的地址。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"In the `OAuth 2.0 Flow` authentication section, set the `Client ID` to "
"`alpha-client`, and `Scope` to `openid quarkus-mcp-alpha`."
msgstr ""
"在 `OAuth 2.0 Flow` 身份验证部分，将 `Client ID` 设置为 `alpha-client` ，将 `Scope` 设置为 "
"`openid quarkus-mcp-alpha` 。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"Requesting an `openid` scope is not strictly necessary in this demo, but "
"OpenId Connect providers will not issue an ID token without it, only the "
"access token, and you'll likely need an SPA MCP Client to have access to the "
"ID token in prod."
msgstr ""
"在本演示中，申请 `openid` 范围并非严格必要，但如果没有该范围，OpenId Connect 提供商将不会签发 ID "
"令牌，只会签发访问令牌，而且您可能需要一个 SPA MCP 客户端来访问 prod 中的 ID 令牌。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"Requesting a `quarkus-mcp-alpha` scope is necessary for Keycloak to add a "
"`quarkus-mcp-alpha` audience to the access token, please see how the "
"`quarkus-mcp-alpha` client scope was created in the <<keycloak-"
"configuration>> section."
msgstr ""
"请求 `quarkus-mcp-alpha` 作用域是 Keycloak 向访问令牌添加 `quarkus-mcp-alpha` 受众的必要条件，请参阅 "
"<<keycloak-configuration>> 部分中如何创建 `quarkus-mcp-alpha` 客户端作用域。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"The `Redirect URI` is preconfigured by https://github.com/"
"modelcontextprotocol/inspector[MCP Inspector] and points to the https://"
"github.com/modelcontextprotocol/inspector[MCP Inspector]-managed `http://"
"localhost:6274/oauth` callback endpoint where Keycloak will redirect the "
"user to after the user login is complete."
msgstr ""
"`Redirect URI` 由 link:https://github.com/modelcontextprotocol/inspector[MCP "
"Inspector] 预先配置，并指向 link:https://github.com/modelcontextprotocol/"
"inspector[MCP Inspector 管理的] `http://localhost:6274/oauth` 回调端点，Keycloak "
"会在用户登录完成后将用户重定向到该端点。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Now press `Connect`."
msgstr "现在按 `Connect` 。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"As explained in the the <<demo-flow-diagram>> section, https://github.com/"
"modelcontextprotocol/inspector[MCP Inspector] starts by trying to access the "
"default MCP Server _Streamable HTTP_ `alpha` endpoint without a valid token "
"and gets a `401 WWW-Authenticate` challenge, with the `resource_metadata` "
"parameter pointing to the `alpha` endpoint's https://datatracker.ietf.org/"
"doc/html/rfc9728[OAuth2 Protected Resource Metadata] route."
msgstr ""
"如 <<demo-flow-diagram>> 章节所述， link:https://github.com/modelcontextprotocol/"
"inspector[MCP Inspector] 开始尝试在没有有效令牌的情况下访问默认的 MCP Server _Streamable HTTP_ "
"`alpha` 端点，并获得 `401 WWW-Authenticate` 挑战，其中 `resource_metadata` 参数指向 `alpha` "
"端点的 link:https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 受保护资源元数据] 路由。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"https://github.com/modelcontextprotocol/inspector[MCP Inspector] fetches the "
"`alpha` endpoint's protected resource metadata and finds out that it is "
"secured by the Keycloak's `alpha` realm."
msgstr ""
"link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] 会获取 "
"`alpha` 端点的受保护资源元数据，并发现它受 Keycloak 的 `alpha` realm 保护。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"https://github.com/modelcontextprotocol/inspector[MCP Inspector] now "
"discovers the Keycloak `alpha` realm's metadata, and redirects you to "
"Keycloak `alpha` realm's authorization endpoint where you will see a "
"Keycloak `Alpha` realm login challenge:"
msgstr ""
"link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] 现在会发现 "
"Keycloak `alpha` realm 的元数据，并将您重定向到 Keycloak `alpha` realm 的授权端点，在那里您将看到 "
"Keycloak `Alpha` realm 登录挑战："

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"Login as `alice:alice`. Keycloak redirects you back to the https://github."
"com/modelcontextprotocol/inspector[MCP Inspector]'s `http://localhost:6274/"
"oauth` endpoint. https://github.com/modelcontextprotocol/inspector[MCP "
"Inspector] exchanges the returned `code` for tokens and completes the "
"authorization code flow."
msgstr ""
"以 `alice:alice` 登录。Keycloak 会将您重定向到 link:https://github.com/"
"modelcontextprotocol/inspector[MCP 检查员] 的 `http://localhost:6274/oauth` 端点。 "
"link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] 将返回的 "
"`code` 与令牌交换，并完成授权码流程。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"The access token with a `quarkus-mcp-alpha` audience is now available, you "
"can capture it using your browser's `Web Developer Tools` and decode in JWT."
"io:"
msgstr ""
"带有 `quarkus-mcp-alpha` 受众的访问令牌现在可用，您可以使用浏览器的 `Web Developer Tools` 捕捉它，然后在 "
"JWT.io 中解码："

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"https://github.com/modelcontextprotocol/inspector[MCP Inspector] uses this "
"token to let you select and run the `alpha-user-name-provider` tool:"
msgstr ""
"link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] "
"使用此标记让您选择并运行 `alpha-user-name-provider` 工具："

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"The way https://github.com/modelcontextprotocol/inspector[MCP Inspector] was "
"able to acquire the access token, knowing only the OAuth2 Client ID and the "
"MCP server's endpoint address was interesting. See the <<demo-flow-diagram>> "
"section for the overview of how the whole OAuth2 flow works."
msgstr ""
"link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] 只需知道 "
"OAuth2 客户 ID 和 MCP 服务器的端点地址，就能获取访问令牌，这种方式非常有趣。有关整个 OAuth2 流程的概述，请参阅 <<demo-"
"flow-diagram>> 部分。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"Now disconnect MCP Inspector from the MCP Server `alpha` endpoint by "
"pressing a `Disconnect` button."
msgstr "现在按 `Disconnect` 按钮，断开 MCP Inspector 与 MCP Server `alpha` 端点的连接。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Connect to the MCP Server `bravo` endpoint"
msgstr "连接到 MCP 服务器 `bravo` 端点"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"Connecting to the MCP Server `bravo` endpoint works exactly the same as with "
"the default `alpha` endpoint, as explained in the <<mcp-inspector-connect-to-"
"alpha>> section, we only need to use the MCP Server `bravo` endpoint related "
"properties."
msgstr ""
"连接到 MCP 服务器 `bravo` 端点的工作原理与默认的 `alpha` 端点完全相同，如 <<mcp-inspector-connect-to-"
"alpha>> 部分所述，我们只需使用 MCP 服务器 `bravo` 端点的相关属性。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"Set `Transport Type` to `Streamable HTTP`, `URL` to the `http://localhost:"
"8080/bravo/mcp` address of the MCP server `bravo` endpoint."
msgstr ""
"将 `Transport Type` 设为 `Streamable HTTP` ，将 `URL` 设为 `http://localhost:8080/"
"bravo/mcp` MCP 服务器 `bravo` 端点的地址。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"In the `OAuth 2.0 Flow` authentication section, set the `Client ID` to "
"`bravo-client`, and `Scope` to `openid quarkus-mcp-bravo`."
msgstr ""
"在 `OAuth 2.0 Flow` 身份验证部分，将 `Client ID` 设置为 `bravo-client` ，将 `Scope` 设置为 "
"`openid quarkus-mcp-bravo` 。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Keep `Redirect URI` set to `http://localhost:6274/oauth`."
msgstr "将 `Redirect URI` 设置为 `http://localhost:6274/oauth` ."

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"https://github.com/modelcontextprotocol/inspector[MCP Inspector] starts by "
"trying to access the MCP Server `bravo` endpoint without a valid token and "
"gets a `401 WWW-Authenticate` challenge, with the `resource_metadata` "
"parameter pointing to the `bravo`'s  https://datatracker.ietf.org/doc/html/"
"rfc9728[OAuth2 Protected Resource Metadata] route."
msgstr ""
"link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] "
"开始尝试在没有有效令牌的情况下访问 MCP Server `bravo` 端点，并获得 `401 WWW-Authenticate` 挑战，其中 "
"`resource_metadata` 参数指向 `bravo's link:https://datatracker.ietf.org/doc/html/"
"rfc9728[OAuth2 Protected Resource Metadata] 路由。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"https://github.com/modelcontextprotocol/inspector[MCP Inspector] fetches the "
"`bravo` endpoint's protected resource metadata and finds out that it is "
"secured by the Keycloak's `bravo` realm."
msgstr ""
"link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] 会获取 "
"`bravo` 端点的受保护资源元数据，并发现它受 Keycloak 的 `bravo` realm 保护。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"https://github.com/modelcontextprotocol/inspector[MCP Inspector]  now "
"discovers the Keycloak `bravo` realm's metadata, and redirects you to "
"Keycloak `bravo` realm's authorization endpoint where you will see a "
"Keycloak `Bravo` realm login challenge:"
msgstr ""
"link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] 现在会发现 "
"Keycloak `bravo` realm 的元数据，并将您重定向到 Keycloak `bravo` realm 的授权端点，在那里您将看到 "
"Keycloak `Bravo` realm 登录挑战："

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"Login as `jdoe:jdoe`. Keycloak redirects you back to the https://github.com/"
"modelcontextprotocol/inspector[MCP Inspector]'s `http://localhost:6274/"
"oauth` endpoint. https://github.com/modelcontextprotocol/inspector[MCP "
"Inspector] exchanges the returned `code` for tokens and completes the "
"authorization code flow."
msgstr ""
"以 `jdoe:jdoe` 登录。Keycloak 会将您重定向到 link:https://github.com/"
"modelcontextprotocol/inspector[MCP 检查员] 的 `http://localhost:6274/oauth` 端点。 "
"link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] 将返回的 "
"`code` 与令牌交换，并完成授权码流程。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"The access token with a `quarkus-mcp-bravo` audience is now available. https:"
"//github.com/modelcontextprotocol/inspector[MCP Inspector] uses this token "
"to let you select and run the `bravo-user-name-provider` tool:"
msgstr ""
"`quarkus-mcp-bravo` 受众的访问令牌现在可用。 link:https://github.com/"
"modelcontextprotocol/inspector[MCP Inspector] 使用此令牌让您选择并运行 `bravo-user-name-"
"provider` 工具："

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"See the <<mcp-inspector-connect-to-alpha>> section for more explanations of "
"how https://github.com/modelcontextprotocol/inspector[MCP Inspector] manages "
"to connect to the MCP Server endpoint knowing only its URL and the OAuth2 "
"Client ID."
msgstr ""
"有关 link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] "
"如何仅凭 URL 和 OAuth2 客户端 ID 就能连接到 MCP 服务器端点的更多解释，请参阅 <<mcp-inspector-connect-to-"
"alpha>> 部分。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Security Considerations"
msgstr "安全考虑因素"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"The main security consideration for secure Quarkus MCP server deployments is "
"to ensure that access tokens have a correct audience, for the MCP Server to "
"assert that the current token is meant to access this MCP server only. MCP "
"Servers that propagate tokens further should consider exchanging such "
"tokens, for a new token to target the downstream service correctly."
msgstr ""
"安全部署 Quarkus MCP 服务器的主要安全考虑因素是确保访问令牌有正确的受众，以便 MCP 服务器断言当前令牌仅用于访问此 MCP "
"服务器。进一步传播令牌的 MCP 服务器应考虑交换此类令牌，以获得新的令牌，从而正确定位下游服务。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"A token audience claim can have several values, and it must contain an https:"
"//www.rfc-editor.org/rfc/rfc8707.html[OAuth2 Resource Indicator] that points "
"to a specific HTTP resource location or a custom audience value or both the "
"resource indicator and the custom audience values."
msgstr ""
"令牌受众声明可以有多个值，它必须包含指向特定 HTTP link:https://www.rfc-editor.org/rfc/rfc8707."
"html[资源] 位置的 link:https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2 资源指示] "
"符或自定义受众值，或同时包含资源指示符和自定义受众值。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"One should also consider carefully if an MCP server should enable its https:/"
"/datatracker.ietf.org/doc/html/rfc9728[OAuth2 Protected Resource Metadata] "
"route which allows a public access to the information about the "
"authorization server that secures this MCP Server."
msgstr ""
"我们还应仔细考虑 MCP 服务器是否应启用其 link:https://datatracker.ietf.org/doc/html/"
"rfc9728[OAuth2 受保护资源元数据] 路由，该路由允许公众访问确保该 MCP 服务器安全的授权服务器的相关信息。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"Please keep in mind that it might be considered sensitive information, "
"especially when no SPA MCP Client applications are used, when the provider "
"login themes can be customized to make it less obvious to users what is the "
"actual provider that is used to log them in."
msgstr ""
"请注意，这可能会被视为敏感信息，尤其是在不使用 SPA MCP "
"客户端应用程序的情况下，当提供商登录主题可以进行自定义，使用户不那么明显地看到用于登录的实际提供商时。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
msgid "Conclusion"
msgstr "解决方案"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"In this blog, we used https://github.com/modelcontextprotocol/inspector[MCP "
"Inspector] to demonstrate how MCP Client can use OAuth2 Flow to login users "
"and access secure Quarkus MCP _Streamable HTTP_ servers, when only an MCP "
"Server address and OAuth2 Client ID can provide enough context for the flow "
"to succeed."
msgstr ""
"在这篇博客中，我们使用 link:https://github.com/modelcontextprotocol/inspector[MCP "
"Inspector] 演示了 MCP Client 如何使用 OAuth2 Flow 登录用户并访问安全的 Quarkus MCP "
"_Streamable HTTP_ 服务器，而此时只有 MCP 服务器地址和 OAuth2 Client ID 能够提供足够的上下文，使流程成功。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"We also demonstrated how Quarkus MCP Server can https://docs.quarkiverse.io/"
"quarkus-mcp-server/dev/index.html#_multiple_server_configurations[support "
"multiple MCP HTTP configurations] with their own unique security constraints "
"supported with the https://quarkus.io/guides/security-openid-connect-"
"multitenancy#configure-tenant-paths[Quarkus OIDC multi-tenancy resolver]."
msgstr ""
"我们还演示了 Quarkus MCP 服务器如何 link:https://docs.quarkiverse.io/quarkus-mcp-server/"
"dev/index.html#_multiple_server_configurations[支持多个 MCP HTTP 配置] ，并通过 link:"
"https://quarkus.io/guides/security-openid-connect-multitenancy#configure-"
"tenant-paths[Quarkus OIDC 多租户解析器] 支持各自独特的安全限制。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid ""
"In the next blog post in this series, we will look at how https://"
"modelcontextprotocol.io/specification/2025-06-18/basic/authorization#access-"
"token-privilege-restriction[MCP Authorization] OAuth2 Flow can use OAuth "
"Dynamic Client Registration and how https://github.com/quarkiverse/quarkus-"
"oidc-proxy[Quarkus OIDC Proxy] can play its part in securing Quarkus MCP "
"Servers."
msgstr ""
"在本系列的下一篇博文中，我们将探讨 link:https://modelcontextprotocol.io/specification/2025-06-"
"18/basic/authorization#access-token-privilege-restriction[MCP 授权] OAuth2 "
"流程如何使用 OAuth 动态客户端注册，以及 link:https://github.com/quarkiverse/quarkus-oidc-"
"proxy[Quarkus OIDC 代理] 如何在确保 Quarkus MCP 服务器安全方面发挥作用。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Enjoy, and stay tuned !"
msgstr "尽情享受，敬请期待 ！"
