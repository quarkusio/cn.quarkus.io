# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy, no-wrap
msgid "Peeking at the streams"
msgstr "窥视溪流"

#. type: YAML Front Matter: synopsis
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy, no-wrap
msgid "How to observe events without touching the streams."
msgstr "如何在不接触流的情况下观察事件。"

#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
msgid ""
"Mutiny is an event-driven Reactive Programming library.\n"
"Like other reactive programming libraries, it uses streams as the primary construct.\n"
"These streams convey events, and your code processes these events.\n"
"Most of the time, your code is only interested in item and failure events.\n"
"But there are other kinds of events such as cancellation, request, completion, and so on."
msgstr ""

#. type: Plain text
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy
msgid "It's not rare that you need to look at these various events to understand better what's going on or implement specific side effects. For example, you may need to close a resource after a completion event or log a message on failure or cancellation."
msgstr "你需要查看这些不同的事件以更好地了解正在发生的事情或实现特定的副作用，这种情况并不罕见。例如，你可能需要在一个完成事件后关闭一个资源，或者在失败或取消时记录一个消息。"

#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
msgid ""
"For each kind of event, there is an associated _group_ providing the methods to handle that specific event: `onItem()`, `onFailure()`, `onCompletion()` and so on.\n"
"These groups provide two methods to peek at the various events without impacting its distribution: `invoke` and `call`.\n"
"It does not transform the received event; it notifies you that something happened and let you react."
msgstr ""

#. type: Title ==
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy, no-wrap
msgid "The invoke method"
msgstr "调用方法"

#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
msgid ""
"The `invoke` method is synchronous and does not return anything.\n"
"Mutiny invokes the configured callback when the observed stream dispatches the event:"
msgstr ""

#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
msgid ""
"As said above, `invoke` is synchronous.\n"
"Mutiny invokes the callback and propagates the event downstream when the callback returns. It blocks the dispatching."
msgstr ""

#. type: Plain text
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy
msgid "image:/assets/images/posts/mutiny-invoke-call/invoke.png[]"
msgstr "image:/assets/images/posts/mutiny-invoke-call/invoke.png[alt=\"invoke\"]"

#. type: Plain text
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy
msgid "Of course, we highly recommend you not to block."
msgstr "当然，我们强烈建议你不要封锁。"

#. type: Plain text
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy
msgid "The following snippets show how you can log the different types of events."
msgstr "下面的片段显示了你如何记录不同类型的事件。"

#. type: Plain text
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy
msgid "The arrows from the previous code snippet indicate if the event comes from the upstream (source) or downstream (consumer)."
msgstr "前面的代码片断中的箭头表示事件来自上游（源）或下游（消费者）。"

#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
msgid ""
"The `invoke` method does not change the event, except in one case.\n"
"If the `invoke` callback throws an exception, the downstream does not get the actual event but get a failure event instead."
msgstr ""

#. type: Plain text
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy
msgid "When observing the failure event, if the callback throws an exception, Mutiny propagates a `CompositeException` aggregating the original failure and the callback failure."
msgstr "在观察失败事件时，如果回调抛出一个异常，Mutiny会传播一个 `CompositeException` ，将原始失败和回调失败聚集起来。"

#. type: Title ==
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy, no-wrap
msgid "The call method"
msgstr "呼叫方法"

#. type: Plain text
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy
msgid "Unlike `invoke`, `call` is asynchronous, and the callback returns a `Uni<?>` object."
msgstr "与 `invoke` 不同， `call` 是异步的，并且回调会返回一个 `Uni<?>` 对象。"

#. type: Plain text
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy
msgid "`call` is often used when you need to implement asynchronous side-effects, such as closing resources."
msgstr " `call` 通常在你需要实现异步的副作用时使用，比如关闭资源。"

#. type: Plain text
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy
msgid "image:/assets/images/posts/mutiny-invoke-call/call.png[]"
msgstr "image:/assets/images/posts/mutiny-invoke-call/call.png[alt=\"call\"]"

#. type: Plain text
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
msgid "Mutiny does not dispatch the original event downstream until the Uni returned by the callback emits an item:"
msgstr ""

#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
msgid ""
"As shown in the previous snippet, you can use this approach to delay items.\n"
"But the primary use case is about completing asynchronous actions:"
msgstr ""

#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
msgid ""
"Under the hood, Mutiny gets the `Uni` (by invoking the callback) and subscribes to it.\n"
"It observes the item or failure event from that `Uni`.\n"
"It discards the item value as only the emission matters in this case."
msgstr ""

#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
msgid "If the callback throws an exception or the produced `Uni` produces a failure, Mutiny propagates that failure (or a `CompositeException`) downstream, replacing the original event."
msgstr ""

#. type: Title ==
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy, no-wrap
msgid "Summary"
msgstr "摘要"

#. type: delimited block -
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
msgid "The `invoke` and `call` methods are handy when you need to observe a stream without changing the transiting events."
msgstr ""

#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
msgid ""
"Use `invoke` for implementing synchronous side-effects or logging events.\n"
"The asynchronous nature of `call` makes it perfect for implementing asynchronous side-effects, such as closing resources, flushing data, delay items, and so on."
msgstr ""

#. type: delimited block -
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
msgid "The following table highlights the key differences:"
msgstr ""

#. type: Table
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, no-wrap
msgid "Method"
msgstr ""

#. type: Table
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, no-wrap
msgid "`invoke`"
msgstr ""

#. type: Table
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, no-wrap
msgid "`call`"
msgstr ""

#. type: Table
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, no-wrap
msgid "Nature"
msgstr ""

#. type: Table
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, no-wrap
msgid "synchronous"
msgstr ""

#. type: Table
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, no-wrap
msgid "asynchronous"
msgstr ""

#. type: Table
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, no-wrap
msgid "Return type"
msgstr ""

#. type: Table
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, no-wrap
msgid "`void`"
msgstr ""

#. type: Table
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, no-wrap
msgid "`Uni<?>`"
msgstr ""

#. type: Table
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, no-wrap
msgid "Main Use cases"
msgstr ""

#. type: Table
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy, no-wrap
msgid "logging"
msgstr "记录.adoc"

#. type: Table
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, no-wrap
msgid "closing resources, flushing data"
msgstr ""

#. type: Plain text
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
msgid "These methods are available for every kind of event in the associated group."
msgstr ""
