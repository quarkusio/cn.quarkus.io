# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy, no-wrap
msgid "Peeking at the streams"
msgstr "窥视溪流"

#. type: YAML Front Matter: synopsis
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy, no-wrap
msgid "How to observe events without touching the streams."
msgstr "如何在不接触流的情况下观察事件。"

#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy
msgid ""
"Mutiny is an event-driven Reactive Programming library.\n"
"Like other reactive programming libraries, it uses streams as the primary construct.\n"
"These streams convey events, and your code processes these events.\n"
"Most of the time, your code is only interested in item and failure events.\n"
"But there are other kinds of events such as cancellation, request, completion, and so on."
msgstr "Mutiny 是一个事件驱动的反应式编程库。与其他反应式编程库一样，它使用流作为主要结构。这些流传达事件，而你的代码则处理这些事件。大多数情况下，你的代码只对项目和失败事件感兴趣。但也有其他类型的事件，如取消、请求、完成等。"

#. type: Plain text
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy
msgid "It's not rare that you need to look at these various events to understand better what's going on or implement specific side effects. For example, you may need to close a resource after a completion event or log a message on failure or cancellation."
msgstr "你需要查看这些不同的事件以更好地了解正在发生的事情或实现特定的副作用，这种情况并不罕见。例如，你可能需要在一个完成事件后关闭一个资源，或者在失败或取消时记录一个消息。"

#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy
msgid ""
"For each kind of event, there is an associated _group_ providing the methods to handle that specific event: `onItem()`, `onFailure()`, `onCompletion()` and so on.\n"
"These groups provide two methods to peek at the various events without impacting its distribution: `invoke` and `call`.\n"
"It does not transform the received event; it notifies you that something happened and let you react."
msgstr "每种事件都有一个相关 _组_ ，提供处理该特定事件的方法： `onItem()` , `onFailure()` , `onCompletion()` 等等。这些组提供了两种方法，可以在不影响事件分发的情况下偷看各种事件： `invoke` 和 `call` 。它不会转换接收到的事件；它会通知您发生了一些事情，让您做出反应。"

#. type: Title ==
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy, no-wrap
msgid "The invoke method"
msgstr "调用方法"

#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy
msgid ""
"The `invoke` method is synchronous and does not return anything.\n"
"Mutiny invokes the configured callback when the observed stream dispatches the event:"
msgstr "`invoke` 方法是同步的，不会返回任何内容。当观察到的数据流发出事件时，Mutiny 会调用配置的回调函数："

#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy
msgid ""
"As said above, `invoke` is synchronous.\n"
"Mutiny invokes the callback and propagates the event downstream when the callback returns. It blocks the dispatching."
msgstr "如上所述， `invoke` 是同步的。Mutiny 调用回调，并在回调返回时向下游传播事件。它阻止了调度。"

#. type: Plain text
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy
msgid "image:/assets/images/posts/mutiny-invoke-call/invoke.png[]"
msgstr "image:/assets/images/posts/mutiny-invoke-call/invoke.png[alt=\"invoke\"]"

#. type: Plain text
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy
msgid "Of course, we highly recommend you not to block."
msgstr "当然，我们强烈建议你不要封锁。"

#. type: Plain text
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy
msgid "The following snippets show how you can log the different types of events."
msgstr "下面的片段显示了你如何记录不同类型的事件。"

#. type: Plain text
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy
msgid "The arrows from the previous code snippet indicate if the event comes from the upstream (source) or downstream (consumer)."
msgstr "前面的代码片断中的箭头表示事件来自上游（源）或下游（消费者）。"

#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy
msgid ""
"The `invoke` method does not change the event, except in one case.\n"
"If the `invoke` callback throws an exception, the downstream does not get the actual event but get a failure event instead."
msgstr "`invoke` 方法不会改变事件，只有一种情况例外。如果 `invoke` 回调抛出异常，下游不会获得实际事件，而是获得一个失败事件。"

#. type: Plain text
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy
msgid "When observing the failure event, if the callback throws an exception, Mutiny propagates a `CompositeException` aggregating the original failure and the callback failure."
msgstr "在观察失败事件时，如果回调抛出一个异常，Mutiny会传播一个 `CompositeException` ，将原始失败和回调失败聚集起来。"

#. type: Title ==
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy, no-wrap
msgid "The call method"
msgstr "呼叫方法"

#. type: Plain text
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy
msgid "Unlike `invoke`, `call` is asynchronous, and the callback returns a `Uni<?>` object."
msgstr "与 `invoke` 不同， `call` 是异步的，并且回调会返回一个 `Uni<?>` 对象。"

#. type: Plain text
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy
msgid "`call` is often used when you need to implement asynchronous side-effects, such as closing resources."
msgstr " `call` 通常在你需要实现异步的副作用时使用，比如关闭资源。"

#. type: Plain text
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy
msgid "image:/assets/images/posts/mutiny-invoke-call/call.png[]"
msgstr "image:/assets/images/posts/mutiny-invoke-call/call.png[alt=\"call\"]"

#. type: Plain text
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy
msgid "Mutiny does not dispatch the original event downstream until the Uni returned by the callback emits an item:"
msgstr "在回调返回的 Uni 发出一个项目之前，Mutiny 不会向下游发送原始事件："

#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy
msgid ""
"As shown in the previous snippet, you can use this approach to delay items.\n"
"But the primary use case is about completing asynchronous actions:"
msgstr "如前面的代码段所示，您可以使用这种方法来延迟项目。但主要用例是完成异步操作："

#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy
msgid ""
"Under the hood, Mutiny gets the `Uni` (by invoking the callback) and subscribes to it.\n"
"It observes the item or failure event from that `Uni`.\n"
"It discards the item value as only the emission matters in this case."
msgstr "在引擎盖下，Mutiny 会获取 `Uni` （通过调用回调）并订阅它。它观察来自 `Uni` 的项目或失败事件。在这种情况下，它只关注发射，因此会丢弃项目值。"

#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy
msgid "If the callback throws an exception or the produced `Uni` produces a failure, Mutiny propagates that failure (or a `CompositeException`) downstream, replacing the original event."
msgstr "如果回调抛出异常或生成的 `Uni` 产生故障，Mutiny 会将故障（或 `CompositeException` ）传播到下游，替换原始事件。"

#. type: Title ==
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy, no-wrap
msgid "Summary"
msgstr "摘要"

#. type: delimited block -
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
msgid "The `invoke` and `call` methods are handy when you need to observe a stream without changing the transiting events."
msgstr "The `invoke` and `call` methods are handy when you need to observe a stream without changing the transiting events."

#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy
msgid ""
"Use `invoke` for implementing synchronous side-effects or logging events.\n"
"The asynchronous nature of `call` makes it perfect for implementing asynchronous side-effects, such as closing resources, flushing data, delay items, and so on."
msgstr "使用 `invoke` 实现同步副作用或记录事件。 `call` 的异步特性使其非常适合实现异步副作用，如关闭资源、刷新数据、延迟项等。"

#. type: delimited block -
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
msgid "The following table highlights the key differences:"
msgstr "The following table highlights the key differences:"

#. type: Table
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy, no-wrap
msgid "Method"
msgstr "方法"

#. type: Table
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy, no-wrap
msgid "`invoke`"
msgstr "`invoke`"

#. type: Table
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy, no-wrap
msgid "`call`"
msgstr "`call`"

#. type: Table
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy, no-wrap
msgid "Nature"
msgstr "自然"

#. type: Table
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy, no-wrap
msgid "synchronous"
msgstr "同步"

#. type: Table
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy, no-wrap
msgid "asynchronous"
msgstr "异步"

#. type: Table
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy, no-wrap
msgid "Return type"
msgstr "返回类型"

#. type: Table
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy, no-wrap
msgid "`void`"
msgstr "`void`"

#. type: Table
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy, no-wrap
msgid "`Uni<?>`"
msgstr "`Uni<?>`"

#. type: Table
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy, no-wrap
msgid "Main Use cases"
msgstr "主要用例"

#. type: Table
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy, no-wrap
msgid "logging"
msgstr "记录.adoc"

#. type: Table
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy, no-wrap
msgid "closing resources, flushing data"
msgstr "关闭资源，刷新数据"

#. type: Plain text
#: _posts/2020-11-10-mutiny-invoke-and-call.adoc
#, fuzzy
msgid "These methods are available for every kind of event in the associated group."
msgstr "这些方法适用于关联组中的每种事件。"
