# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:1
#, no-wrap
msgid "abattagl"
msgstr ""

#. type: YAML Front Matter: date
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:1
#, no-wrap
msgid "2020-11-02"
msgstr ""

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:1
#, no-wrap
msgid "post"
msgstr ""

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:1
#, no-wrap
msgid "Running a Quarkus native app inside a container on a Raspberry Pi"
msgstr ""

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:1
#, no-wrap
msgid "armv8 arm raspberrypi native"
msgstr ""

#. type: YAML Front Matter: title
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:1
#, no-wrap
msgid "Quarkus native running on a Raspberry Pi"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:11
msgid "## Intro"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:14
msgid "When I've been introduced to Quarkus, back in December 2018, I suddenly had the feeling the Quarkus runtime has the potential of covering ~95% of the software use-cases.  My friend Sanne demoed Quarkus on his laptop when the runtime was still in an alpha state, far from being the large, extended and mature framework everybody knows nowadays. And still, I could experience a new way of think, implement and deploy java apps."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:16
msgid "I’ve been recently working on a Hackfest for Red Hat EMEA partners to spread awareness about the potential and the performance of the Quarkus framework. My main technical goal was to demonstrate Quarkus can run everywhere and thanks to its performance capabilities coming from the native compilation process it definitely is the runtime of choice for IoT devices (a.k.a. Far Edge)."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:18
msgid "To achieve the above goal, I’ve picked up a single-board computer with an integrated ARM-compatible central processing unit and made a Quarkus native app running into a container on top of a Linux based operating system. Here is how:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:20
msgid "## Prerequisites"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:22
#, no-wrap
msgid "*Single-board computer:* The ARM-compatible CPU integrated into the single-board computer must support 64-bit mode. \n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:24
#, no-wrap
msgid "*Operating system:* \n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:25
#, no-wrap
msgid "To make a Quarkus native container image run in a container, a 64-bit Linux OS is required;\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:27
msgid "The OS must support aarch64 CPUs, which leads us to the need for an aarch64-base distribution available for that OS;"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:29
msgid "Nice to have: the target OS should fully support the target single-board computer.**"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:31
#, no-wrap
msgid "*Container technology:* surprise, surprise! an OCI standard container engine is compulsory to run containers on Linux :-)\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:33
#, no-wrap
msgid "*Build tools:* as per the large amount of resources required by the GraalVM to compile Quarkus in native mode, an additional we need an ARM server / Virtual machine to achieve that goal. The server should meet the following minimum requirements: \n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:34
#, no-wrap
msgid "CPU: same ARM model as the one embedded in the target single-board computer\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:35
#, no-wrap
msgid "Cores: 4\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:36
#, no-wrap
msgid "Ram: 8Gb\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:37
#, no-wrap
msgid "Disk space: 20Gb\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:39
#, no-wrap
msgid "*Container registry:* In order to be able to deploy onto the single-board computer the container image containing the Quarkus native app built in the ARM server, an account on a remote container registry is required.\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:45
msgid "## Technology"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:47
msgid "### Single-sensor board"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:49
msgid "Choosing the target single-board computer model has been quite an easy task: I already had a Raspberry Pi meeting the requirements above:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:51
msgid "_Model:_ Raspberry Pi 3 B+"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:52
msgid "_SOC:_ Broadcom BCM2837B0, Cortex-A53 (ARMv8) 64-bit SoC"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:53
msgid "_CPU:_ 1.4GHz 64-bit quad-core ARM Cortex-A53 CPU"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:54
msgid "_RAM:_ 1GB LPDDR2 SDRAM"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:55
msgid "_WIFI:_ Dual-band 802.11ac wireless LAN (2.4GHz and 5GHz ) and Bluetooth 4.2"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:56
msgid "_Ethernet:_ Gigabit Ethernet over USB 2.0 (max 300 Mbps). Power-over-Ethernet support (with separate PoE HAT). Improved PXE network and USB mass-storage booting."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:57
msgid "_Thermal management:_ Yes"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:58
msgid "_Video:_ Yes – VideoCore IV 3D. Full-size HDMI"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:59
msgid "_Audio:_ Yes"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:60
msgid "_USB 2.0:_ 4 ports"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:61
msgid "_GPIO:_ 40-pin"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:62
msgid "_Power:_ 5V/2.5A DC power input"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:63
msgid "_Operating system support:_ Linux and Unix"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:65
msgid "### OS"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:68
msgid "I’ve tried a few operating system meeting the requirements listed above. The two possible solutions were Fedora Internet of Things Edition and Gentoo.  After some tests, I’ve picked up https://iot.fedoraproject.org/[Fedora IoT] for the following reasons:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:70
msgid "Full, native support to 64-bit architecture (aarch64)"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:71
msgid "Stability"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:72
msgid "Usability"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:73
msgid "Maturity"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:74
msgid "Lifecycle"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:75
msgid "Full support on RPi 3 B+"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:77
msgid "### Container technology"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:79
msgid "This one has been an easy task as well: https://podman.io/[Podman]. Podman is a daemonless container engine for developing, managing, and running OCI Containers on your Linux System. Containers can either be run as root or in rootless mode. Moreover, there’s no need for installing additional components/layers to Fedora IoT basic installation as the Podman container engine is already available in the OS distribution."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:82
msgid "Moreover, from a deeper technical perspective, due to the fact cgroups on fedora is now v2 using Docker would force you to appy several tweeks and to downgrade the cgroups versio to v1 in order to avoid getting warning and eventually failures."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:85
msgid "The reason why Podman is the contained of choice is very well explained in the following https://podman.io/blogs/2019/10/29/podman-crun-f31.html[article].  I'm quoting the quick explanation:"
msgstr ""

#. type: Positional ($2) AttributeList argument for style 'quote'
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:86
#, no-wrap
msgid "Rūmī"
msgstr ""

#. type: delimited block _
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:89
msgid "The crun command is the runtime the allows for cgroup V2 support and is supplied starting with Fedora 31. Other container systems use the runc runtime. However, runc only supports cgroup V1. The cgroup kernel feature allows you to allocate resources such as CPU time, network bandwidth and system memory to a container. Version 1 of cgroup only supports containers that are run by root, while version 2 supports containers that are run by root or a non-privileged user."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:92
msgid "The output from the command \"podman info\" on the RPi related to the OCI runtime is the following:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:105
#, no-wrap
msgid ""
"...\n"
"ociRuntime:\n"
"    name: crun\n"
"    package: crun-0.14.1-4.fc32.aarch64\n"
"    path: /usr/bin/crun\n"
"    version: |-\n"
"      crun version 0.14.1\n"
"      commit: 598ea5e192ca12d4f6378217d3ab1415efeddefa\n"
"      spec: 1.0.0\n"
"      +SYSTEMD +SELINUX +APPARMOR +CAP +SECCOMP +EBPF +YAJL\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:108
msgid "Meaning the Podman version already included in Fedora IoT 31 and later fully supports cgroup v2 thanks to the fact it uses \"crun\" runtime rather than the classic \"runc\" runtime, embedded in the other linux distributions and in the fedora releases before v31."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:110
msgid "### Build tools"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:112
msgid "There are multiple ways of provisioning an aarch64 server shipped with enough resources to build quarkus in native mode nowadays:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:114
msgid "Spend a reasonable, but not small, budget to purchase a physical ARM server (don’t do this at home);"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:115
msgid "Spend a very small budget to provision an ARM VM on the public cloud (fastest, recommended if you are not running a Linux os on your host);"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:116
msgid "Provision a VM on your host machine using QEmu (cheapest);"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:117
msgid "__Run QEmu within a container, emulating the quarkus container images (still under investigation and tests)__."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:119
msgid "As I’m running Fedora Workstation on my desktop, I’ve picked up the 3rd option."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:122
msgid "### Container registry The remote container registry of choice is https://quay.io/[Quay.io]. More details about setting up the account created on quay.io will be shared in a dedicated section of this article."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:129
msgid "## Implementation"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:131
msgid "This section will guide you through the following"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:133
msgid "Setting up the VM"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:134
msgid "Setting up the RPi and Fedora IoT"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:135
msgid "Connecting the container engine to the quay.io account"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:136
msgid "Compiling and deploying your Quarkus native app on Podman"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:137
msgid "Outcome"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:143
msgid "## 1. Setting up the VM"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:146
msgid "This goal can be achieved using VM technology based on QEmu.  QEmu plays an important role in this task, cause that’s the best upstream tool to use to make a virtual machine emulating the target cpu architecture."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:148
msgid "### Setup a Virtual machine using QEmu"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:150
msgid "On a linux distro, the use of VMM (Virtual Machine Manager is highly recommended):"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:155
#, no-wrap
msgid ""
"$ sudo dnf groupinstall virtualization\n"
"$ sudo dnf install qemu-system-aarch64\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:158
msgid "The minimum requirements for the virtual machine are the following:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:160
msgid "CPU: 4 cores *Cortex-A53* (ARMv8) 64-bit"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:161
msgid "RAM: 8 GB"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:162
msgid "Disk: 10Gb"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:163
msgid "Networking: bridge"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:164
msgid "OS: Fedora Minimal (latest stable) - aarch64 (https://download.fedoraproject.org/pub/fedora-secondary/releases/32/Spins/aarch64/images/Fedora-Minimal-32-1.6.aarch64.raw.xz[link])"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:165
msgid "Runtime: GraalVM (latest) - aarch64 (https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-20.2.0/graalvm-ce-java11-linux-aarch64-20.2.0.tar.gz[link])"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:167
msgid "image:/assets/images/posts/quarkus-native-on-a-raspberry-pi/vm-cpu-config.png[width=100%]"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:169
msgid "As a side note, please consider increasing the disk sizing of the VM in case you want to reuse it for additional builds and tests."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:171
msgid "### Setup the GraalVM environment"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:173
msgid "On your VM, you will need GCC, and the glibc and zlib headers. Examples for common distributions:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:177
#, no-wrap
msgid "$ sudo dnf install gcc glibc-devel zlib-devel libstdc++-static\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:180
msgid "Install OpenJdk:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:184
#, no-wrap
msgid "$ sudo dnf install -y java-11-openjdk\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:188
msgid "Download the latest version of graalvm for your architecture (aarch64) from https://github.com/graalvm/graalvm-ce-builds/releases[here] and unpack it.  Detailed instructions https://www.graalvm.org/docs/getting-started-with-graalvm/linux/[here]."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:190
msgid "Move the graalvm content into /usr/lib/graalvm and set the environment variables adding the following code snippet into /etc/profile:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:203
#, no-wrap
msgid ""
"#JAVA_HOME\n"
"JAVA_HOME=/usr/lib/jvm/java-11-openjdk-11.0.6.10-0.fc32.aarch64\n"
"PATH=$PATH:$HOME/bin:$JAVA_HOME/bin\n"
"export JAVA_HOME\n"
"export PATH\n"
"#GRAALVM_HOME\n"
"GRAALVM_HOME=/usr/lib/graalvm/graalvm-ce-java11-19.3.1\n"
"PATH=$PATH:$HOME/bin:$GRAALVM_HOME/bin\n"
"export GRAALVM_HOME\n"
"export PATH\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:208
#, no-wrap
msgid ""
"(Optional) Set the JAVA_HOME environment variable to the GraalVM installation directory.\n"
"export JAVA_HOME=${GRAALVM_HOME}\n"
"(Optional) Add the GraalVM bin directory to the path\n"
"export PATH=${GRAALVM_HOME}/bin:$PATH\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:211
msgid "Example:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:215
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:287
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:295
#, no-wrap
msgid "...\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:228
#, no-wrap
msgid ""
"#JAVA_HOME\n"
"JAVA_HOME=/usr/lib/jvm/java-11-openjdk-11.0.8.10-0.fc32.x86_64\n"
"PATH=$PATH:$HOME/bin:$JAVA_HOME/bin\n"
"export JAVA_HOME\n"
"export PATH\n"
"#GRAALVM_HOME\n"
"GRAALVM_HOME=/usr/lib/graalvm/graalvm-ce-java11-20.2.0\n"
"PATH=$PATH:$HOME/bin:$GRAALVM_HOME/bin\n"
"export GRAALVM_HOME\n"
"export PATH\n"
"export JAVA_HOME=${GRAALVM_HOME}\n"
"export PATH=${GRAALVM_HOME}/bin:$PATH\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:236
msgid "## 2. Setting up the RPi and Fedora IoT"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:238
msgid "### Download the latest Fedora IoT distro"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:240
msgid "Download the stable and fully supported version of Fedora IoT for Raspberry Pi from https://dl.fedoraproject.org/pub/alt/iot/[here]. Pick up the raw image for aarch64."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:242
msgid "### Flash the operating system on the SD card"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:244
msgid "#### Non-Linux OS"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:248
msgid "If you are not running any linux based OS on hour host, in order to easily, safely and quickly install the OS image on the MicroSD card I highly recommended to download the official Raspberry Imager tool from https://www.raspberrypi.org/downloads/[here].  The Raspberry Pi Imager how-to can be found https://www.raspberrypi.org/blog/raspberry-pi-imager-imaging-utility/[here].  The good news is that we have already gone through the creation of the ARM-based virtual machine, so you already have a linux distro to use to flash the Fedora IoT OS on the SD card!"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:252
msgid "#### On a Linux distro Fedora OS linux distro provides a tool that dramatically simplifies the task: fedora-arm-installer.  Let's add the tool to the OS:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:256
#, no-wrap
msgid "$ dnf install -y fedora-arm-installer\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:259
msgid "An example of how to setup the DS card if you are running fedora:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:263
#, no-wrap
msgid "$ sudo fedora-arm-image-installer -y --image=/home/<<user_home>>/Fedora-IoT-32-20200429.0.aarch64.raw.xz --target=rpi3 --media=/dev/sde --resizefs --addkey=/home/<<user_home>>/.ssh/id_rsa.pub --norootpass --addconsole\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:267
msgid "please refer to the official tool guide to get additional insights about it.  The tool is described https://docs.fedoraproject.org/en-US/iot/physical-device-setup/#_scripted_image_transfer_with_arm_image_installer[here]."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:269
msgid "As a side note, the resulting SD card will contain 3 partitions:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:271
msgid "_BIOS_ (U-Boot) - 1.1 Gb"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:272
msgid "_Boot_ - 525 Mb"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:273
msgid "_Root_ - Occupies the remaining unallocated space in the SD card"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:275
msgid "image:/assets/images/posts/quarkus-native-on-a-raspberry-pi/sd-card-partitions.png[width=100%]"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:278
msgid "### Enabling 64bit on RPi cpu"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:281
msgid "After the flashing operation has completed successfully, it's important to have a look at the config file of the operating system. edit the file _config.txt_ and make sure the section *[all]* starts with the following key-value pairs: arm_control=0x200, arm_64bit=1"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:283
msgid "e.g.:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:293
#, no-wrap
msgid ""
"# Default Fedora configs for all Raspberry Pi Revisions\n"
"[all]\n"
"# Put the RPi into 64 bit mode\n"
"arm_control=0x200\n"
"arm_64bit=1\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:298
msgid "### After first boot"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:300
msgid "The following steps may not be necessary if you are happy with the fault keyboard layout or if you are connecting your RPi to the network with aLAN cable..."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:302
msgid "#### Keyboard Layout"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:304
msgid "Find your keymap of choice in the list obtained by issuing the following command:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:308
#, no-wrap
msgid "$ localectl list-keymaps | grep your-locale\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:311
msgid "And set it into the system config:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:316
#, no-wrap
msgid "$ localectl set-keymap _map_\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:319
msgid "#### Enable internet access through WiFi connection"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:321
msgid "Get the list of available networks"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:325
#, no-wrap
msgid "$ nmcli device wifi list\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:328
msgid "And connect to the Wi-Fi network of choice"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:332
#, no-wrap
msgid "$ nmcli device wifi connect SSID password PASSWORD\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:335
msgid "#### Disable firewall"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:337
msgid "Only because it is a demo!!! :-)"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:342
#, no-wrap
msgid ""
"$ systemctl disable firewalld\n"
"$ systemctl stop firewalld\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:345
msgid "#### Create a new user for the device"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:349
msgid "Thanks to the fedora-arm-installer tool, we've added out public key to the root user.  Using root user on a linux system is never a good idea or, let’s say, a good practice.  For this reason, we’re going to add a new administrative user with wheel privileges to our OS:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:355
#, no-wrap
msgid ""
"$ useradd edge\n"
"$ passwd edge\n"
"$ usermod edge -a -G wheel\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:363
msgid "## 3. Connecting the container engine to the quay.io account"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:365
msgid "If you haven’t got it yet, create a free account on quay.io."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:368
msgid "### Sign into Quay.io To sign into Quay.io, execute the podman login quay.io command:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:370
msgid "Note: If you go to your Quay account settings you can create an encrypted password for more security."
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:376
#, no-wrap
msgid ""
"$ podman login quay.io\n"
"Username: myusername\n"
"Password: mypassword\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:383
msgid "## 4. Compiling and deploying your Quarkus native app on Podman"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:385
msgid "Back on the VM side."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:387
msgid "### Building the executable"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:389
msgid "You’ll need git to download the source code and execute it:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:393
#, no-wrap
msgid "$ sudo dnf install -y git\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:396
msgid "Clone the quarkus quickstarts repository and pick up the quarkus quickstart of choice."
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:400
#, no-wrap
msgid "$ git clone https://github.com/quarkusio/quarkus-quickstarts.git ~/git/quarkus-quickstarts\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:403
msgid "Enter the root directory of the quickstart of choice (e.g. __getting-started__) and start the build:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:407
#, no-wrap
msgid "$ ./mvnw package -Pnative\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:410
msgid "The whole Maven process takes roughly 40 mins. Blease be aware that this could take longer in case of a sarvice with more features (i.e. importing and using more modules):"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:445
#, no-wrap
msgid ""
"[edge@localhost getting-started]$ ./mvnw package -Pnative\n"
"...\n"
"[INFO] --- quarkus-maven-plugin:1.8.1.Final:native-image (default) @ getting-started ---\n"
"[INFO] [org.jboss.threads] JBoss Threads version 3.1.1.Final\n"
"[INFO] [io.quarkus.deployment.pkg.steps.JarResultBuildStep] Building native image source jar: /home/edge/quarkus-quickstarts/getting-started/target/getting-started-1.0-SNAPSHOT-native-image-source-jar/getting-started-1.0-SNAPSHOT-runner.jar\n"
"[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildStep] Building native image from /home/edge/quarkus-quickstarts/getting-started/target/getting-started-1.0-SNAPSHOT-native-image-source-jar/getting-started-1.0-SNAPSHOT-runner.jar\n"
"[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildStep] Running Quarkus native-image plugin on GraalVM Version 20.2.0 (Java Version 11.0.8)\n"
"[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildStep] /usr/lib/graalvm/graalvm-ce-java11-20.2.0/bin/native-image -J-Dsun.nio.ch.maxUpdateArraySize=100 -J-Djava.util.logging.manager=org.jboss.logmanager.LogManager -J-Dvertx.logger-delegate-factory-class-name=io.quarkus.vertx.core.runtime.VertxLogDelegateFactory -J-Dvertx.disableDnsResolver=true -J-Dio.netty.leakDetection.level=DISABLED -J-Dio.netty.allocator.maxOrder=1 -J-Duser.language=en -J-Dfile.encoding=UTF-8 --initialize-at-build-time= -H:InitialCollectionPolicy=com.oracle.svm.core.genscavenge.CollectionPolicy\\$BySpaceAndTime -H:+JNI -jar getting-started-1.0-SNAPSHOT-runner.jar -H:FallbackThreshold=0 -H:+ReportExceptionStackTraces -H:-AddAllCharsets -H:EnableURLProtocols=http -H:NativeLinkerOption=-no-pie --no-server -H:-UseServiceLoaderFeature -H:+StackTrace getting-started-1.0-SNAPSHOT-runner\n"
"[getting-started-1.0-SNAPSHOT-runner:2012]    classlist:  82,587.50 ms,  0.96 GB\n"
"[getting-started-1.0-SNAPSHOT-runner:2012]        (cap):  25,485.45 ms,  0.96 GB\n"
"[getting-started-1.0-SNAPSHOT-runner:2012]        setup:  62,730.91 ms,  0.94 GB\n"
"15:15:03,073 INFO  [org.jbo.threads] JBoss Threads version 3.1.1.Final\n"
"[getting-started-1.0-SNAPSHOT-runner:2012]     (clinit):   9,087.82 ms,  2.24 GB\n"
"[getting-started-1.0-SNAPSHOT-runner:2012]   (typeflow): 392,638.79 ms,  2.24 GB\n"
"[getting-started-1.0-SNAPSHOT-runner:2012]    (objects): 300,849.30 ms,  2.24 GB\n"
"[getting-started-1.0-SNAPSHOT-runner:2012]   (features):   9,611.94 ms,  2.24 GB\n"
"[getting-started-1.0-SNAPSHOT-runner:2012]     analysis: 729,428.50 ms,  2.24 GB\n"
"[getting-started-1.0-SNAPSHOT-runner:2012]     universe:  37,544.86 ms,  2.24 GB\n"
"[getting-started-1.0-SNAPSHOT-runner:2012]      (parse): 135,120.27 ms,  2.24 GB\n"
"[getting-started-1.0-SNAPSHOT-runner:2012]     (inline): 314,244.72 ms,  3.25 GB\n"
"[getting-started-1.0-SNAPSHOT-runner:2012]    (compile): 817,352.63 ms,  4.08 GB\n"
"[getting-started-1.0-SNAPSHOT-runner:2012]      compile: 1,304,395.09 ms,  4.08 GB\n"
"[getting-started-1.0-SNAPSHOT-runner:2012]        image: 102,001.77 ms,  4.10 GB\n"
"[getting-started-1.0-SNAPSHOT-runner:2012]        write:  16,216.90 ms,  4.10 GB\n"
"[getting-started-1.0-SNAPSHOT-runner:2012]      [total]: 2,342,173.85 ms,  4.10 GB\n"
"[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildStep] Execute [objcopy, --strip-debug, /home/edge/quarkus-quickstarts/getting-started/target/getting-started-1.0-SNAPSHOT-runner]\n"
"[INFO] [io.quarkus.deployment.QuarkusAugmentor] Quarkus augmentation completed in 2394526ms\n"
"[INFO] ------------------------------------------------------------------------\n"
"[INFO] BUILD SUCCESS\n"
"[INFO] ------------------------------------------------------------------------\n"
"[INFO] Total time:  45:25 min\n"
"[INFO] Finished at: 2020-09-30T15:46:11+02:00\n"
"[INFO] ------------------------------------------------------------------------\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:448
msgid "The native quarkus executable must be packaged into a container image in order to be able to run it on a container runtime. To achieve this goal, let’s ask the container runtime already installed into your VM to build the container image:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:452
#, no-wrap
msgid "$ sudo podman build -f src/main/docker/Dockerfile.native -t quay.io/$myusername/quarkus-getting-started:1-aarch64 .\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:455
msgid "Push the container image to the container registry of choice to share it with the edge device:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:459
#, no-wrap
msgid "$ sudo podman push quay.io/$myusername/quarkus-getting-started:1-aarch64\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:462
msgid "### Deploying the executable"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:464
msgid "On the RPi:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:468
#, no-wrap
msgid "$ sudo podman run -it --rm -p 8090:8080 --name quarkus-getting-started quay.io/$myusername/quarkus-getting-started:1-aarch64\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:471
msgid "### Outcome"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:473
msgid "This paragraph shows the outcome produced by the above steps:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:475
msgid "#### Startup/Stop time:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:497
#, no-wrap
msgid ""
"[edge@localhost ~]$ sudo podman run -it --rm -p 8090:8080 --name quarkus-getting-started quay.io/abattagl/quarkus-getting-started:1-aarch64\n"
"Trying to pull quay.io/abattagl/quarkus-getting-started:1-aarch64...\n"
"Getting image source signatures\n"
"Copying blob d44f88e7704f done  \n"
"Copying blob 8c4861605060 done  \n"
"Copying blob c5a0fdbc0d7a done  \n"
"Copying blob 5dd9a2ffef88 done  \n"
"Copying config f08559ac50 done  \n"
"Writing manifest to image destination\n"
"Storing signatures\n"
"__  ____  __  _____   ___  __ ____  ______ \n"
" --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/ \n"
" -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\   \n"
"--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/   \n"
"2020-10-01 08:49:34,566 INFO  [io.quarkus] (main) getting-started 1.0-SNAPSHOT native (powered by Quarkus 1.8.1.Final) started in 0.055s. Listening on: http://0.0.0.0:8080\n"
"2020-10-01 08:49:34,566 INFO  [io.quarkus] (main) Profile prod activated. \n"
"2020-10-01 08:49:34,566 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy]\n"
"^C\n"
"2020-10-01 08:49:49,061 INFO  [io.quarkus] (Shutdown thread) getting-started stopped in 0.007s\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:500
msgid "The application starts in 55 ms and stops in 7 ms. This is impressive if you consider the Quarkus native app is running on the RPi3 cpu (Please have another look at the cpu specs at the very beginning of this article)!"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:502
msgid "#### Memory footprint:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:504
msgid "The following screenshot of the output of the \"top\" command on the RPi shows how cheap it is to run Quarkus native apps on top of the container technology:"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:505
#, no-wrap
msgid "/assets/images/posts/quarkus-native-on-a-raspberry-pi/native-quarkus-getting-started-on-arm8-memory-footprint.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:508
msgid "Roughly 22 megs for a java-based application exposing a simple web page and a REST API!"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:510
msgid "#### Connecting to the service"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:512
msgid "The following screenshot shows the webpage served by the quarkus microservice running natively on podman installed in the RPi:"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:513
#, no-wrap
msgid "/assets/images/posts/quarkus-native-on-a-raspberry-pi/native-quarkus-getting-started-on-arm8-web-page.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:523
msgid "## Conclusions"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:526
msgid "### Big Picture"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:528
msgid "This article reproduces the steps to compile and run a Quarkus native app on a Raspberry Pi cpu. This process is potentially valid for all the cpus belonging to the ARM v8 family, with some potential exceptions due to the fact the architecture of few ARM based cpus may differ from the standard one for that version."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:530
msgid "### Building tools"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:532
msgid "For this PoC I've used a QEmu-base VM. That promotes reusability, but it's still expensive in terms of usability (QEmu works like a charm on linux OS, but not on Windows and MacOS). As stated at the beginning of this article, a more flexible, portable and scalable solution still based on cpu emulation and container technology is under investiogation at the moment. That would help the delegation and scalability of build process."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:534
msgid "Be aware that QEmu-based tools are still a workaround. GraalVM is missing the cross-compile feature and it will take a while to release it."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:536
msgid "### Quarkus everywhere"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:538
msgid "It's clear that Quarkus can potentially run everywhere. It is, of course, a matter of supportability from GraalVM to the underlying architecture."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:540
msgid "So far I feel comfortable in stating that this is just the beginning and lots more features and capabilities are yet to come."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-02-quarkus-native-on-a-raspberry-pi.adoc:541
msgid "It would very nice to have a distribution of Mandrel for aarch64. Mandrel is aligned with the `native-image` capabilities from GraalVM with OpenJDK and Red Hat Enterprise Linux libraries to improve maintainability. Looking forward to testing it ;-)"
msgstr ""
