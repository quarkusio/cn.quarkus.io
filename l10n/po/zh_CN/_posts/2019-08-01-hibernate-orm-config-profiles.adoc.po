# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:1
#, fuzzy, no-wrap
msgid "ebernard"
msgstr "ǞǞǞ"

#. type: YAML Front Matter: date
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:1
#, fuzzy, no-wrap
msgid "2019-08-01 14:00:00.000 +0200"
msgstr "2019-08-01 14:00:00.000 +0200"

#. type: YAML Front Matter: layout
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "职位"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:1
#, fuzzy, no-wrap
msgid "Hibernate ORM lets you generate or update the database schema. Let's explore when to use such option in combination with live coding."
msgstr "Hibernate ORM允许你生成或更新数据库模式。让我们探讨一下何时结合现场编码使用这种选项。"

#. type: YAML Front Matter: tags
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:1
#, fuzzy, no-wrap
msgid "extension hibernate development-tips"
msgstr "拓展 冬眠开发-提示"

#. type: YAML Front Matter: title
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:1
#, fuzzy, no-wrap
msgid "Tips to use Hibernate ORM with Quarkus profiles and live coding mode"
msgstr "使用Hibernate ORM与Quarkus配置文件和实时编码模式的技巧"

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:12
#, fuzzy
msgid "Quarkus live coding (aka dev mode) is really useful for applications that mix front end or services and database access.  There are a few common approaches to make the best of it."
msgstr "Quarkus实时编码（又称开发模式）对于混合了前端或服务和数据库访问的应用程序来说真的很有用。有几种常见的方法可以使它发挥最大的作用。"

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:18
#, fuzzy
msgid "The first choice is to use `quarkus.hibernate-orm.database.generation=drop-and-create` in conjunction with `import.sql`.  That way for every change to your app and in particular to your entities, the database schema will be properly recreated and your data fixture (stored in `import.sql`) will be used to repopulate it from scratch.  This is best to perfectly control your environment and works magic with Quarkus live coding mode: your entity changes or any change to your `import.sql` is immediately picked up and the schema updated without restarting the application!"
msgstr "第一个选择是将 `quarkus.hibernate-orm.database.generation=drop-and-create` 与 `import.sql` 结合使用。这样，对于你的应用程序的每一个变化，特别是你的实体，数据库模式将被正确地重新创建，你的数据夹具（存储在 `import.sql` ）将被用来从头开始重新填充它。这对完美控制你的环境是最好的，并且在Quarkus实时编码模式下有神奇的效果：你的实体变化或对你的 `import.sql` 的任何变化都会被立即接收，并且在不重启应用程序的情况下更新模式!"

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:23
#, fuzzy
msgid "By default, Hibernate ORM, upon boot, will read and execute the SQL statements in the `/import.sql` file (if present).  You can change the file name by changing the property `quarkus.hibernate-orm.sql-load-script` in `application.properties`."
msgstr "默认情况下，Hibernate ORM在启动时，将读取并执行 `/import.sql` 文件中的SQL语句（如果存在的话）。你可以通过改变 `application.properties` 中的属性 `quarkus.hibernate-orm.sql-load-script` 来改变文件名。"

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:33
#, fuzzy
msgid "The second approach is to use `quarkus.hibernate-orm.database.generation=update`.  This approach is best when you do many entity changes but still need to work on a copy of the production data or if you want to reproduce a bug that is based on specific database entries.  `update` is a best effort from Hibernate ORM and will fail in specific situations including altering your database structure which could lead to data loss.  For example if you change structures related to the foreign key, Hibernate ORM might have to bail out.  But for development, these limitations are acceptable."
msgstr "第二种方法是使用 `quarkus.hibernate-orm.database.generation=update` 。当你做了很多实体的改变，但仍然需要在生产数据的副本上工作，或者你想重现一个基于特定数据库条目的错误时，这种方法是最好的。 `update` 是Hibernate ORM的尽力而为，在特定情况下会失败，包括改变你的数据库结构，可能导致数据丢失。例如，如果你改变了与外键相关的结构，Hibernate ORM可能不得不跳出。但是对于开发来说，这些限制是可以接受的。"

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:38
#, fuzzy
msgid "The third approach is to use `quarkus.hibernate-orm.database.generation=none`.  This approach is best when you are working on a copy of the production data but want to fully control the schema evolution.  Or if you use a database schema migration tool like https://quarkus.io/guides/flyway[Flyway].  When you make a change to an entity, make sure to adapt the database schema accordingly."
msgstr "第三种方法是使用 `quarkus.hibernate-orm.database.generation=none` 。当你在生产数据的副本上工作，但想完全控制模式的演变时，这种方法是最好的。或者如果你使用像 link:https://quarkus.io/guides/flyway[Flyway] 这样的数据库模式迁移工具。当你对一个实体进行修改时，要确保相应地调整数据库模式。"

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:40
#, fuzzy
msgid "Do not use `quarkus.hibernate-orm.database.generation` `drop-and-create` and `update` in your production environment. You have been warned :)"
msgstr "不要在你的生产环境中使用 `quarkus.hibernate-orm.database.generation` `drop-and-create` 和 `update` 。你已经被警告了 :)"

#. type: Title ==
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:41
#, fuzzy, no-wrap
msgid "Now with Quarkus profiles"
msgstr "现在有了Quarkus配置文件"

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:47
msgid "It becomes really powerful when combined with Quarkus configuration profiles.  You can define different https://quarkus.io/guides/config#configuration-profiles[configuration profiles] to select different behaviors depending on your environment.  This is great because you can define different combinations of Hibernate ORM properties matching the development style you currently need."
msgstr ""

#. type: Block title
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:49
#, no-wrap
msgid "application.properties"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:54
msgid "# By default, use the clean (data) slate approach %dev.quarkus.hibernate-orm.database.generation = drop-and-create %dev.quarkus.hibernate-orm.sql-load-script = import-dev.sql"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:59
msgid "# Use this to incrementally work in your app while keeping data # Useful for rapid dev-check cycles with Quarkus dev mode %dev-with-data.quarkus.hibernate-orm.database.generation = update %dev-with-data.quarkus.hibernate-orm.sql-load-script ="
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:63
msgid "# Let's make sure we don't wipe the production data by accident! %prod.quarkus.hibernate-orm.database.generation = none %prod.quarkus.hibernate-orm.sql-load-script = no-file"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:70
msgid "# Rapid prototyping time! mvn compile quarkus:dev -Dquarkus.profile=dev-with-data"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:73
msgid "# And now, let's be ready for prod mvn clean package -Pnative -Dquarkus.profile=prod"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:76
msgid "I hope you have found this tip useful.  Hibernate ORM schema update, data fixture, Quarkus dev mode and its configuration profiles are a powerful combination!"
msgstr ""
