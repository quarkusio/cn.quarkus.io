# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:1
#, no-wrap
msgid "ebernard"
msgstr ""

#. type: YAML Front Matter: date
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:1
#, no-wrap
msgid "2019-08-01 14:00:00.000 +0200"
msgstr ""

#. type: YAML Front Matter: layout
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:1
#, no-wrap
msgid "post"
msgstr ""

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:1
#, no-wrap
msgid "Hibernate ORM lets you generate or update the database schema. Let's explore when to use such option in combination with live coding."
msgstr ""

#. type: YAML Front Matter: tags
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:1
#, no-wrap
msgid "extension hibernate development-tips"
msgstr ""

#. type: YAML Front Matter: title
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:1
#, no-wrap
msgid "Tips to use Hibernate ORM with Quarkus profiles and live coding mode"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:12
msgid "Quarkus live coding (aka dev mode) is really useful for applications that mix front end or services and database access.  There are a few common approaches to make the best of it."
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:18
msgid "The first choice is to use `quarkus.hibernate-orm.database.generation=drop-and-create` in conjunction with `import.sql`.  That way for every change to your app and in particular to your entities, the database schema will be properly recreated and your data fixture (stored in `import.sql`) will be used to repopulate it from scratch.  This is best to perfectly control your environment and works magic with Quarkus live coding mode: your entity changes or any change to your `import.sql` is immediately picked up and the schema updated without restarting the application!"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:23
msgid "By default, Hibernate ORM, upon boot, will read and execute the SQL statements in the `/import.sql` file (if present).  You can change the file name by changing the property `quarkus.hibernate-orm.sql-load-script` in `application.properties`."
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:33
msgid "The second approach is to use `quarkus.hibernate-orm.database.generation=update`.  This approach is best when you do many entity changes but still need to work on a copy of the production data or if you want to reproduce a bug that is based on specific database entries.  `update` is a best effort from Hibernate ORM and will fail in specific situations including altering your database structure which could lead to data loss.  For example if you change structures related to the foreign key, Hibernate ORM might have to bail out.  But for development, these limitations are acceptable."
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:38
msgid "The third approach is to use `quarkus.hibernate-orm.database.generation=none`.  This approach is best when you are working on a copy of the production data but want to fully control the schema evolution.  Or if you use a database schema migration tool like https://quarkus.io/guides/flyway[Flyway].  When you make a change to an entity, make sure to adapt the database schema accordingly."
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:40
msgid "Do not use `quarkus.hibernate-orm.database.generation` `drop-and-create` and `update` in your production environment. You have been warned :)"
msgstr ""

#. type: Title ==
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:41
#, no-wrap
msgid "Now with Quarkus profiles"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:47
msgid "It becomes really powerful when combined with Quarkus configuration profiles.  You can define different https://quarkus.io/guides/config#configuration-profiles[configuration profiles] to select different behaviors depending on your environment.  This is great because you can define different combinations of Hibernate ORM properties matching the development style you currently need."
msgstr ""

#. type: Block title
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:49
#, no-wrap
msgid "application.properties"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:54
msgid "# By default, use the clean (data) slate approach %dev.quarkus.hibernate-orm.database.generation = drop-and-create %dev.quarkus.hibernate-orm.sql-load-script = import-dev.sql"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:59
msgid "# Use this to incrementally work in your app while keeping data # Useful for rapid dev-check cycles with Quarkus dev mode %dev-with-data.quarkus.hibernate-orm.database.generation = update %dev-with-data.quarkus.hibernate-orm.sql-load-script ="
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:63
msgid "# Let's make sure we don't wipe the production data by accident! %prod.quarkus.hibernate-orm.database.generation = none %prod.quarkus.hibernate-orm.sql-load-script = no-file"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:70
msgid "# Rapid prototyping time! mvn compile quarkus:dev -Dquarkus.profile=dev-with-data"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:73
msgid "# And now, let's be ready for prod mvn clean package -Pnative -Dquarkus.profile=prod"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-08-01-hibernate-orm-config-profiles.adoc:76
msgid "I hope you have found this tip useful.  Hibernate ORM schema update, data fixture, Quarkus dev mode and its configuration profiles are a powerful combination!"
msgstr ""
