msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Use Quarkus MCP client to access secure MCP HTTP server from command line"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Explain how Quarkus LangChain4j MCP client can access MCP HTTP servers with access tokens from CLI"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Introduction"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "In the https://quarkus.io/blog/secure-mcp-client/[Use Quarkus MCP client to access secure MCP HTTP servers] blog post, we explained how a user can login to Quarkus LangChain4j AI server application with GitHub OAuth2 and have Google AI Gemini use https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html[Quarkus MCP Client] to access a secure https://github.com/quarkiverse/quarkus-mcp-server[Quarkus MCP Server] user name provider tool with a GitHub access token."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "However, not every AI service application is going to be designed to require a user login: for example, it may run as a command line application or cron scheduler. But also, not every AI service application that requires a user login will be able to use a user login token to access a secure MCP server because such a server may only support tokens of different type."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "In this blog post, we will explain how https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html[Quarkus MCP Client] that runs in a command line Quarkus LangChain4j AI application can itself acquire an access token using an OAuth2 `client_credentials` grant and use it to access a secure https://github.com/quarkiverse/quarkus-mcp-server[Quarkus MCP Server] service account name provider tool."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "We will work with https://www.keycloak.org/[Keycloak] and rely on it to demonstrate how to approach securing complex, distributed AI applications that may span multiple security boundaries, by requiring that access tokens are restricted to specific audiences, and exchanging them to acquire new, correct audiences."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Demo architecture"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "As you can see in the diagram above, a command line agent uses a `Poem Service` AI service to create a poem. The `Poem Service` uses `AI Gemini` and requests `MCP Client` to complete a tool call to help `AI Gemini` to find out the service account name."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "The MCP client must use an access token. It uses an OAuth2 `client_credential` grant to acquire a service account token and propagate it to the secure MCP server. This service account token's audience restricts it to accessing the MCP server only."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "The MCP server tool implementation must access a REST server to complete the tool action. However, it can not use the current access token that is restricted to accessing this MCP server because the REST server accepts tokens that are meant to access this REST server only."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Therefore, the MCP server exchanges the current token to set the REST server audience before propagating it, with the REST server successfully completing the secure tool call, with the response returned to the MCP Client."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "We are now ready to start working on the demo."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "You can find the complete project source in the https://github.com/quarkiverse/quarkus-langchain4j/tree/main/samples/secure-mcp-cmd-client-server[Quarkus LangChain4j Command Line Secure MCP Client Server sample]."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Step 1 - Create and start MCP server"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "First, let's create a secure Quarkus MCP SSE server that can enforce an authenticated access to its tool, verify that the access token has a correct audience, and complete a tool action by exchanging the current access token for a new access token with the REST server audience and propagating this token to the REST server to get the required service account name."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "MCP server maven dependencies"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Add the following dependencies:"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "`quarkus-mcp-server-sse` is required to support MCP Streamable HTTP and SSE transports."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "`quarkus-oidc` is required to secure access to MCP SSE endpoints. Its version is defined in the Quarkus BOM."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "`quarkus-rest` is required to support REST server that the MCP tool has to call. Its version is defined in the Quarkus BOM."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "`quarkus-rest-client-oidc-token-propagation` also brings `quarkus-rest-client` and is required to support a REST client call to REST server with the token exchange and propagation. Its version is defined in the Quarkus BOM."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "MCP Service Account Name Tool"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Let's create a tool that can return a name of the current service account."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Provide a tool that can return a name of the current service account."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Use an injected `ServiceAccountNameRestClient` to access the REST server to complete the service account name request. See the <<service-account-name-rest-client>> section below for more details."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "The MCP server tool can be invoked only if the current MCP request is authenticated."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "In this blog post we do not enforce the secure tool access with annotations such as https://quarkus.io/blog/secure-mcp-client/#mcp-server-tool[@PermissionAllowed] or https://quarkus.io/blog/secure-mcp-sse-server/#tool[@Authenticated] but only use the HTTP security policy configuration instead."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "See how both main MCP SSE and tool endpoints are secured in the <<mcp-server-configuration>> section below."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Service Account Name REST client"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "The <<mcp-server-tool>> uses the Service Account Name REST client to call the REST server to complete a service account name request."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "This REST client looks like this:"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Get a service account name from the REST server. See the <<service-account-name-rest-server>> section below for more details."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Use `@AccessToken` annotation to require the access token exchange and propagation. This single `@AccessToken` annotation, supported by an additional configuration in the <<mcp-server-configuration>> section below, is all that is required to support this complex access token flow."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Service Account Name REST server"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "The <<mcp-server-tool>> uses the <<service-account-name-rest-client>> to get a service account name from the Service Account Name REST server."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "This REST server looks like this:"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Provide a secure REST resource method that can return a service account name"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Use an injected `SecurityIdentity` to complete the method's task, in this case - return a service account identity name."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "In this demo, the REST server is collocated with the MCP server to simplify the demo. Of course, in production, such REST servers will most likely be remote."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Next, let's have a look, in the <<mcp-server-configuration>> section, how access to both the <<mcp-server-tool>> and this server is restricted to tokens with specific audiences only."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "MCP Server Configuration"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Let's configure our secure MCP server:"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Declare MCP server and enable traffic logging."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Enforce an authenticated access to the main MCP SSE and tool endpoints. The configured pattern covers both the initial '/mcp/sse' handshake and '/mcp/messages/' requests."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Default OIDC tenant that secures the MCP SSE endpoint and tool. It is supported by Keycloak Dev Service in dev mode. In simple cases you do not even have to configure the default OIDC tenant. But in this demo, the default OIDC tenant is required to enforce that the tokens which reach the MCP server contain a `quarkus-mcp-server` audience."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Request an access token exchange before the <<service-account-name-rest-client>> propagates it."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Configure OIDC client to perform the token exchange"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Set the https://datatracker.ietf.org/doc/html/rfc8693#name-token-type-identifiers[type] of a new token that the current token will be exchanged for to `access_token`. Starting from Quarkus 3.25, an expected new  token type will be set to `access_token` by default, and users will not have to configure this property when the access token type is required when exchanging tokens."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Configure the <<service-account-name-rest-client>> with the REST server address. The REST server is collocated with the MCP server only to simplify the demo."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "The OIDC tenant that protects the REST server only."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "The OIDC tenant that protects the REST server requires that the tokens that are used to access it contain a REST server `quarkus-mcp-service` audience."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Configure Keycloak dev service to use one of the latest released Keycloak images, and make it run on a fixed `8081` port to simplify the <<poem-service-configuration>> where an access to Keycloak is also required."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Start the MCP server in dev mode"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Now let's start the MCP server in dev mode:"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "and go to the <<keycloak-setup>> in the next section to complete the Keycloak configuration that is required to support the secure MCP server token audience and exchange requirements."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Step 2 - Keycloak setup"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "When we <<start-mcp-server,started the MCP server in dev mode>>, Keycloak Dev Service launched a Keycloak container, made it available on port `8081`, created a `quarkus` realm with the `quarkus-mcp-server` client - this client name was configured with the `quarkus.oidc.client-id=quarkus-mcp-server` property in the <<mcp-server-configuration>> section."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "The `quarkus-mcp-server` client represents a confidential OIDC client that protects the MCP server."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "But MCP server and REST server have additional token audience and exchange requirements and we must complete the Keycloak setup to support those requirements. Let's do it."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Go to `http://localhost:8081` and login as a Keycloak admin, with the `admin` name and `admin` password credentials."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Select the `quarkus` realm:"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "First, create a `quarkus-mcp-client` OIDC client that the Quarkus MCP client will use to acquire OAuth2 `client_credentials` tokens for accessing the MCP server."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Start with the `General Settings`:"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "and enable `Client authentication` and `Service accounts roles` capabilities:"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Save the `quarkus-mcp-client` OIDC client. Click on its `Credentials` tab and copy the generated secret to export it later as the <<oidc-client-secret>> in order to run the command line AI `Poem Service` application."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "For the Quarkus MCP client to be able to access MCP server with access tokens that the `quarkus-mcp-client` OIDC client will acquire, these tokens must contain an audience (`aud`) claim with a `quarkus-mcp-server` audience. The MCP server is configured in the <<mcp-server-configuration>> section to require this audience."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Keycloak supports several options for adding an audience (`aud`) claim to issued tokens. We will use an option that involves creating a custom `Client scope` with an `Audience` mapping."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Go to the `Client scopes` and create an `Optional` `quarkus-mcp-server-scope`:"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Once the `quarkus-mcp-server-scope` scope is created, go to its `Mappings` tab, and choose `Configure a new mapper` option and select `Audience`:"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Name this mapper as `quarkus-mcp-server-as-audience` and choose `quarkus-mcp-server` as an `Included Client Audience`:"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Once the `quarkus-mcp-server-scope` is created, add it as an `Optional` scope to the `quarkus-mcp-client`:"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Now, when Quarkus MCP client will use the `quarkus-mcp-client` OIDC client to acquire tokens, it will request a `quarkus-mcp-server-scope` token scope, resulting in Keycloak issuing tokens with an audience that contains the `quarkus-mcp-server` - exactly what the Quarkus MCP server requires."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Next, we need to support Quarkus MCP server exchanging the incoming access token with the `quarkus-mcp-server` audience for a new token that will contain a REST server audience instead."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Create a `quarkus-mcp-service` OIDC client that represents the REST server, similarly to how you created the `quarkus-mcp-client` OIDC client. Next, create a `quarkus-mcp-service-scope` client scope, similarly to how you created the `quarkus-mcp-server-scope` client scope, choosing the `quarkus-mcp-service` as an `Included Client Audience` when creating an audience mapping for this scope."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Once the `quarkus-mcp-service-scope` is created, add it as an `Optional`  client scope to the `quarkus-mcp-server` MCP Server OIDC client, similarly to how you added the `quarkus-mcp-server-scope` to the `quarkus-mcp-client` above."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Finally, update the `quarkus-mcp-server` capability to support a `Standard Token Exchange`, see the https://www.keycloak.org/securing-apps/token-exchange#_standard-token-exchange-enable[How to enable token exchange] example in the Keycloak documentation."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Now, the `quarkus-mcp-server` OIDC client that secures the MCP server can also exchange the incoming token and request a new `quarkus-mcp-service` audience by adding the `quarkus-mcp-service-scope` scope to the token exchange grant request, exactly what the REST server requires."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "If you actively work with another OAuth2 provider that can produce tokens with required audiences and exchange them using a standard token exchange grant, then you can also try to adapt this demo to work with that provider instead."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Step 3 - Create and run Poem Service from command line"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "The MCP server is now <<start-mcp-server,running>> and ready to accept tool calls. Let's create a command line AI `Poem Service` that will work with AI Gemini and use Quarkus MCP client to complete tool calls."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Poem Service Maven dependencies"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "`quarkus-langchain4j-ai-gemini` brings support for AI Gemini."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "`quarkus-langchain4j-mcp` provides core MCP Client support."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "`quarkus-langchain4j-oidc-cient-mcp-auth-provider` provides an implementation of https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html#_authorization[McpClientAuthProvider] that can supply access tokens that it itself acquires with an OAuth2 `client_credentials` grant (or any other supported grant that does not require a user input). Note, this dependency is different from the `quarkus-langchain4j-oidc-mcp-auth-provider` one that supplies tokens already available after an authorization code flow completes, it was demoed in the https://quarkus.io/blog/secure-mcp-client/#poem-service-maven-dependencies[Use Quarkus MCP client to access secure MCP HTTP servers] blog post to propagate GitHub login access tokens."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "`quarkus-picocli` supports building command-line Quarkus applications. Its version is defined in the Quarkus BOM."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "AI Gemini API key"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "`Poem Service` relies on AI Gemini to create a poem."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Get https://aistudio.google.com/app/apikey[AI Gemini API key] and export it as an `AI_GEMINI_API_KEY` environment property."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "OIDC client secret"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Quarkus MCP client will use an implementation of https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html#_authorization[McpClientAuthProvider] provided by the `quarkus-langchain4j-oidc-cient-mcp-auth-provider` dependency."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "This `McpClientAuthProvider` uses the <<poem-service-configuration,configured OIDC client>> to acquire access tokens using an OAuth2 `client_credentials` grant, where an OIDC client secret must be provided."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Export the OIDC `quarkus-mcp-client` client secret that you copied when working through the <<keycloak-setup>> section as an `OIDC_CLIENT_SECRET` environment property."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Poem Service"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "`Poem Service` is a simple Quarkus LangChain4j AI service:"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Request to write a poem about Java."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Use Quarkus MCP `service-account-name` client configured in the <<poem-service-configuration>> section to call a tool that can provide a service account name."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "This service is called from the `PoemCommand`:"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Call `PoemService`."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Poem Service Configuration"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Let's see how the command line `Poem Service` configuration looks like:"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Enable MCP client HTTP transport. In this demo we use SSE, but `Streamable HTTP` is also supported."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Point to the Quarkus MCP server endpoint that you started in the <<start-mcp-server>> step."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Configure https://quarkus.io/guides/security-openid-connect-client-reference[OIDC client] to acquire access tokens using OAuth2 `client_credentials` grant, a default grant type supported by the OIDC client. OIDC client points to a Keycloak `quarkus` realm, note the fixed `8081` port that you requested Keycloak Dev Service to use for Keycloak in the <<keycloak-setup>> section."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "OIDC client id, you created the OIDC `quarkus-mcp-client` client in the <<keycloak-setup>> section."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "OIDC `quarkus-mcp-client` client secret that you exported during the <<oidc-client-secret>> step."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Request that the tokens issued to `quarkus-mcp-client` must contain a `quarkus-mcp-server` MCP server audience. You created a client `quarkus-mcp-server-scope` scope with a `quarkus-mcp-server` client audience mapping in the <<keycloak-setup>> section."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "AI Gemini key that you acquired and exported during the <<ai-gemini-key>> step."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Enable AI Gemini request and response logging"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Please pay attention to the fact that the MCP client configuration has a `service-account-name` name. You referred to this configuration with the `@McpToolBox(\"service-account-name\")` annotation in the <<poem-service>> section."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Package Poem Service"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Package the command line `Poem Service`:"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Run Poem Service"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Run the command line `Poem Service` that you packaged in the <<package-poem-service>> section:"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "You should get a response such as:"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "How about trying another language ?"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Have token audiences made any difference ?"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "For the command line `Poem Service` to <<run-poem-service, run successfully>>, Quarkus MCP client had to acquire a token with a `quarkus-mcp-server` audience to access the MCP server."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Here is how a token that Keycloak issues to the MCP client looks like:"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "The token `aud` claim contains two audience values, one of them is a required `quarkus-mcp-server` audience."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "For the MCP `quarkus-mcp-server` server to complete the Quarkus MCP client request, it had to verify that the token had a correct `quarkus-mcp-server` audience, and exchange it for a new token with a `quarkus-mcp-service` audience to access the REST server."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Here is how an exchanged token that a Keycloak issues to the MCP server looks like:"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "The token `aud` claim contains a required `quarkus-mcp-service` audience."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Note this token still retains a record of the original `quarkus-mcp-client` client that acquired the previous token, but also lists `quarkus-mcp-server` as the authorizing party (`azp`)."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Let's try to access both MCP server and REST server without an audience claim."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Ensure the MCP server is <<start-mcp-server,running>> and <<keycloak-setup,Keycloak is configured>>."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "In the demo, the OIDC `quarkus-mcp-client` client acquires tokens that are used to access the MCP server."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Use the following curl command to acquire a `client_credentials` token for the `quarkus-mcp-client` client, omitting a `quarkus-mcp-server-scope` grant property:"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "and confirm at https://jwt.io/[jwt.io] that the returned JWT token has no audience claim."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Try to access the MCP server with this token:"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "and you will get HTTP 401."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "What about the REST server ? In the demo, the OIDC `quarkus-mcp-server` client acquires tokens that are used to access the REST server."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Use the following curl command to acquire a `client_credentials` token  for the `quarkus-mcp-server` client, omitting a `quarkus-mcp-service-scope` grant property:"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Try to access the REST server with this token:"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "You can also enforce a stricter verification by requiring that tokens received by both MCP and REST servers were issued to the `quarkus-mcp-client` and `quarkus-mcp-server` respectively by adding the following configuration fragment to the <<mcp-server-configuration>>:"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Note about Resource Indicators"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "The https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization[latest 2025-06-18 MCP authorization specification] https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization#token-audience-binding-and-validation[requires] the use of https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2 Resource Indicators]."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "OAuth2 Resource Indicator allows for a fine grained token audience restriction, in the presence of multiple, diverse resource servers that must be accessed with tokens."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "For a simple demo that we created in this blog post, having a token to contain an audience only is sufficient."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "If your provider already supports https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2 Resource Indicators] and you need to have a token to also include a resource indicator, configure OIDC client to request it."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "For example, you can add `quarkus.oidc-client.grant.client.extra-params.resource=http://localhost:8080/mcp` to the <<poem-service-configuration>>."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "In this case, to have the MCP server verify that an access token contains a correct resource indicator, add `quarkus.oidc.token.required-claims.resource=http://localhost:8080/mcp` to the <<mcp-server-configuration>>."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Security Considerations"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Ensuring that each participant in your distributed AI system is properly secured and accepts tokens thar are meant to access this participant only is crucial."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Token audience restriction is one of the key OAuth2 mechanisms that supports this goal, with <<resource-indicator,resource indicators>> allowing to achieve a finer-grained audience restriction."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "https://datatracker.ietf.org/doc/html/rfc8693[Token exchange] can help to correctly switch the OAuth2 security context when the tokens are flowing in a multi-hop distributed AI application."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Read more about the https://modelcontextprotocol.io/specification/draft/basic/authorization#access-token-privilege-restriction[Access Token Privilege Restriction] in the https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization[latest 2025-06-18 MCP authorization specification]."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Conclusion"
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "In this blog post, we demonstrated how https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html[Quarkus MCP Client] can access secure MCP servers by acquiring access tokens using an OAuth2 `client_credentials` grant and propagating them to the secure Quarkus MCP server."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "We also looked into restricting tokens to specific audiences and started learning about an important OAuth2 https://datatracker.ietf.org/doc/html/rfc8693[token exchange] grant."
msgstr ""

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "We have more content dedicated to AI and MCP security lined up for you, stay tuned !"
msgstr ""
