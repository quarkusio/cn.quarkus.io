msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2024-06-03-incubating-model-resolver.adoc
#, fuzzy
msgid "Quarkus Maven Dependency Resolver Improvements"
msgstr "改进 Quarkus Maven 依赖关系解析器"

#: _posts/2024-06-03-incubating-model-resolver.adoc
#, fuzzy
msgid "3.11 includes a more efficient (still incubating) Quarkus Maven dependency resolver that also exposes more information about dependencies of each artifact in a dependency tree"
msgstr "3.11 包含一个更高效的 Quarkus Maven 依赖解析器（仍在开发中），它还能显示依赖树中每个工件的更多依赖信息。"

#: _posts/2024-06-03-incubating-model-resolver.adoc
#, fuzzy
msgid "Dependency resolution is typically one of the most time-consuming tasks during a build. Given that Quarkus has its specific https://quarkus.io/guides/writing-extensions#extension-philosophy[Quarkus Extension dependency model], it comes with its own Maven dependency resolver. The Quarkus dependency resolver is used in every build phase that requires application dependencies to be resolved, that includes building the final package, bootstraping applications in dev and test modes."
msgstr "依赖解析通常是构建过程中最耗时的任务之一。鉴于 Quarkus 有其特定的 link:https://quarkus.io/guides/writing-extensions#extension-philosophy[Quarkus Extension 依赖关系模型] ，它自带 Maven 依赖关系解析器。Quarkus 依赖关系解析器用于需要解析应用程序依赖关系的每个构建阶段，包括构建最终软件包、在开发和测试模式下引导应用程序。"

#: _posts/2024-06-03-incubating-model-resolver.adoc
#, fuzzy
msgid "What does Quarkus dependency resolver do?"
msgstr "Quarkus 依赖关系解析器能做什么？"

#: _posts/2024-06-03-incubating-model-resolver.adoc
#, fuzzy
msgid "From the perspective of the Quarkus dependency resolver, dependencies declared in POMs of Quarkus projects are runtime dependencies (except certain cases for `provided` scope). They are runtime in a sense they will end up on the runtime classpath of the final application (test runtime classpath in case of `test` dependencies). These original project dependencies serve as input to the Quarkus dependency resolver."
msgstr "从 Quarkus 依赖关系解析器的角度来看，Quarkus 项目的 POM 中声明的依赖关系是运行时依赖关系（ `provided` 范围的某些情况除外）。从某种意义上说，它们是运行时依赖，最终会出现在最终应用程序的运行时类路径上（如果是 `test` 依赖，则会出现在测试运行时类路径上）。这些原始项目依赖项将作为 Quarkus 依赖项解析器的输入。"

#: _posts/2024-06-03-incubating-model-resolver.adoc
#, fuzzy
msgid "The job of the Quarkus dependency resolver is then to resolve the necessary Quarkus extension build time dependencies (those with the `-deployment` suffix and their dependencies) to create a complete Quarkus application build time dependency tree that will be used to initialize the build classpath of an application."
msgstr "然后，Quarkus 依赖关系解析器的工作就是解析必要的 Quarkus 扩展构建时依赖关系（带有 `-deployment` 后缀的扩展及其依赖关系），以创建完整的 Quarkus 应用程序构建时依赖关系树，该树将用于初始化应用程序的构建类路径。"

#: _posts/2024-06-03-incubating-model-resolver.adoc
#, fuzzy
msgid "New incubating Quarkus dependency resolver"
msgstr "新孵化的 Quarkus 依赖关系解析器"

#: _posts/2024-06-03-incubating-model-resolver.adoc
#, fuzzy
msgid "The objectives behind the new (still incubating) implementation of the Quarkus dependency resolver are:"
msgstr "新的 Quarkus 依赖关系解析器（仍在开发中）实施方案的目标是"

#: _posts/2024-06-03-incubating-model-resolver.adoc
#, fuzzy
msgid "Improved performance, basically resolve dependencies more efficiently."
msgstr "提高性能，基本上能更有效地解决依赖问题。"

#: _posts/2024-06-03-incubating-model-resolver.adoc
#, fuzzy
msgid "Collect more comprehensive dependency information and expose it to other dependency analysis related tools."
msgstr "收集更全面的依赖性信息，并将其提供给其他依赖性分析相关工具。"

#: _posts/2024-06-03-incubating-model-resolver.adoc
#, fuzzy
msgid "While this implementation is still a work in progress, it already offers certain benefits compared to the current implementation and can be enabled in Quarkus projects by setting `quarkus.bootstrap.incubating-model-resolver` project property by either adding `-Dquarkus.bootstrap.incubating-model-resolver` to the `mvn` command line or adding it as a property to `pom.xml`."
msgstr "虽然这一实现仍在进行中，但与当前实现相比，它已经提供了某些优势，并且可以通过在 `mvn` 命令行中添加 `-Dquarkus.bootstrap.incubating-model-resolver` 或将其作为 `pom.xml` 的一个属性来设置 `quarkus.bootstrap.incubating-model-resolver` 项目属性，从而在 Quarkus 项目中启用。"

#: _posts/2024-06-03-incubating-model-resolver.adoc
#, fuzzy
msgid "`quarkus.bootstrap.incubating-model-resolver` will not be effective when set in other configuration sources, such as `application.properties`, since it's needed early in the bootstrap process, before MP `Config` is initialized."
msgstr "`quarkus.bootstrap.incubating-model-resolver` 在其他配置源（如 ）中设置时不会生效，因为它需要在启动过程的早期，即在 MP 初始化之前设置。 `application.properties` `Config` "

#: _posts/2024-06-03-incubating-model-resolver.adoc
#, fuzzy
msgid "Performance improvements"
msgstr "性能改进"

#: _posts/2024-06-03-incubating-model-resolver.adoc
#, fuzzy
msgid "The new implementation of the dependency resolver, while being based on the Maven Resolver API, attempts to perform Quarkus-specific dependency analysis and resolution in parallel."
msgstr "依赖关系解析器的新实现基于 Maven Resolver API，并尝试并行执行 Quarkus 特有的依赖关系分析和解析。"

#: _posts/2024-06-03-incubating-model-resolver.adoc
#, fuzzy
msgid "The original application dependencies will still be downloaded by Maven as usually, since Maven build process will most probably need them before Quarkus goals will run. However, when a Quarkus application is bootstrapped (for example to run `QuarkusTest's), Quarkus dependency resolver will (re)resolve them (typically from the local Maven repository)."
msgstr "Maven 通常仍会下载原始应用程序的依赖项，因为在运行 Quarkus 目标之前，Maven 的构建过程很可能需要这些依赖项。但是，当 Quarkus 应用程序被引导时（例如运行 \"QuarkusTest\"），Quarkus 依赖项解析器将（重新）解析它们（通常是从本地 Maven 资源库中）。"

#: _posts/2024-06-03-incubating-model-resolver.adoc
#, fuzzy
msgid "Even if all the artifacts are available in a local Maven repository, they will still be resolved but from the local Maven repository instead of the remote one. Performance enhancements described here are applicable to both cases: remote and local dependency resolutions."
msgstr "即使本地 Maven 资源库中存在所有工件，它们仍将从本地 Maven 资源库而不是远程资源库中解析。这里介绍的性能提升适用于两种情况：远程和本地依赖关系解析。"

#: _posts/2024-06-03-incubating-model-resolver.adoc
#, fuzzy
msgid "The enhancements added in the new implementation will be more noticeable in projects that declare dependencies on multiple Quarkus extensions and have many dependencies in general."
msgstr "在声明依赖多个 Quarkus 扩展和具有许多依赖关系的项目中，新实施中添加的增强功能将更加明显。"

#: _posts/2024-06-03-incubating-model-resolver.adoc
#, fuzzy
msgid "A simple, although not a very precise, way of checking the effects of the enhancements on a project would be to run the following command:"
msgstr "要检查增强功能对项目的影响，一个简单但并不精确的方法是运行以下命令："

#: _posts/2024-06-03-incubating-model-resolver.adoc
#, fuzzy
msgid "It's not very precise since there are more Maven related operations involved than simply resolving Quarkus dependencies. Therefore calculating an average time of around 10 runs would be a way to capture the difference. Another alternative would be to run `mvn test -Dtest=SoSimpleTest`."
msgstr "这不是很精确，因为除了解决 Quarkus 依赖关系之外，还涉及更多与 Maven 相关的操作。因此，计算大约 10 次运行的平均时间将是捕捉差异的一种方法。另一种方法是运行 `mvn test -Dtest=SoSimpleTest` 。"

#: _posts/2024-06-03-incubating-model-resolver.adoc
#, fuzzy
msgid "Dependency resolution is typically performed in preparation to do something else, such as run tests or launch a build, so, in case when all the dependencies are available locally, it might not have a dramatic impact on the overall time of a single run of a given goal."
msgstr "依赖关系解决通常是在准备做其他事情（如运行测试或启动构建）时进行的，因此，在所有依赖关系都可在本地获得的情况下，它可能不会对给定目标的单次运行的总体时间产生显著影响。"

#: _posts/2024-06-03-incubating-model-resolver.adoc
#, fuzzy
msgid ""
"For a project such as Quarkus CLI, `quarkus:dependency-tree` appears to be ~100ms faster with the incubating model resolver (the new resolver takes ~25% less time to resolve dependencies from the local Maven repository).\n"
"Bootstrapping a similar application for a `QuarkusTest` will take ~125ms less time, however it will be only ~10% faster overall since resolving dependencies from a test process will not be able to benefit from the Maven resolver dependency cache used in the main Maven process (among other things)."
msgstr "对于 Quarkus CLI 这样的项目，使用孵化模型解析器后， `quarkus:dependency-tree` 的速度似乎快了约 100ms（新解析器解析来自本地 Maven 资源库的依赖关系所需的时间减少了约 25%）。为 `QuarkusTest` 启动一个类似的应用程序所需的时间将减少约 125ms，但总体速度仅提高约 10%，因为解析来自测试进程的依赖关系将无法从主 Maven 进程中使用的 Maven 解析器依赖关系缓存中获益（除其他外）。"

#: _posts/2024-06-03-incubating-model-resolver.adoc
#, fuzzy
msgid "Displaying dependency graph in Dev UI"
msgstr "在开发人员用户界面中显示依赖关系图"

#: _posts/2024-06-03-incubating-model-resolver.adoc
#, fuzzy
msgid "When `quarkus.bootstrap.incubating-model-resolver` option is enabled on the command line or as a project property in the POM, Dev UI will display a new menu item - `Dependencies`."
msgstr "当 `quarkus.bootstrap.incubating-model-resolver` 选项在命令行或 POM 中作为项目属性启用时，Dev UI 将显示一个新的菜单项 - `Dependencies` 。"

#: _posts/2024-06-03-incubating-model-resolver.adoc
#, fuzzy
msgid "Clicking on `Dependencies` will display the complete dependency graph of the application, including application runtime dependencies (colored in green), Quarkus build time dependencies (colored in blue) and the application root node (colored in red)."
msgstr "点击 `Dependencies` 将显示应用程序的完整依赖关系图，包括应用程序运行时依赖关系（绿色）、Quarkus 构建时依赖关系（蓝色）和应用程序根节点（红色）。"

#: _posts/2024-06-03-incubating-model-resolver.adoc
#, fuzzy
msgid "For a runtime view, Quarkus build time (deployment) dependencies could be hidden by clicking on `deployment` in the top right corner."
msgstr "对于运行时视图，可通过点击右上角的 `deployment` 隐藏 Quarkus 构建时（部署）的依赖关系。"

#: _posts/2024-06-03-incubating-model-resolver.adoc
#, fuzzy
msgid "Clicking on a dependency node will reduce the graph to all the possible paths from the root to the selected node. This can also be done by selecting a dependency from the dropdown list."
msgstr "单击依赖节点后，图形将缩减为从根节点到所选节点的所有可能路径。也可以通过从下拉列表中选择依赖关系来实现。"

#: _posts/2024-06-03-incubating-model-resolver.adoc
#, fuzzy
msgid "Displaying comprehensive dependency info in CLI"
msgstr "在 CLI 中显示全面的依赖关系信息"

#: _posts/2024-06-03-incubating-model-resolver.adoc
#, fuzzy
msgid "Enabling `quarkus.bootstrap.incubating-model-resolver` option on the command line or as a project property in the POM, enables a couple of new options for `quarkus:dependency-tree` goal: `graph` and `verbose`."
msgstr "在命令行或 POM 中作为项目属性启用 `quarkus.bootstrap.incubating-model-resolver` 选项，可为 `quarkus:dependency-tree` 目标启用几个新选项： `graph` 和 `verbose` 。"

#: _posts/2024-06-03-incubating-model-resolver.adoc
#, fuzzy
msgid "Graph option"
msgstr "图表选项"

#: _posts/2024-06-03-incubating-model-resolver.adoc
#, fuzzy
msgid "By default `quarkus:dependency-tree` goal displays a Quarkus build time dependency tree. A tree does not expose comprehensive information about dependencies of each individual artifact though. `-Dgraph` does exactly that."
msgstr "默认情况下， `quarkus:dependency-tree` goal 会显示 Quarkus 构建时的依赖关系树。不过，依赖树并不能全面显示每个工件的依赖信息。 `-Dgraph` 正是如此。"

#: _posts/2024-06-03-incubating-model-resolver.adoc
#, fuzzy
msgid "In addition to dependencies that were previously displayed, the command above will display also display some dependencies with `[+]` at the end, that will signify that this is also a dependency of the parent node but its dependencies (if any) are expanded in a different location in the graph."
msgstr "除了之前显示的依赖关系外，上述命令还将显示一些末尾带有 `[+]` 的依赖关系，这表示它也是父节点的依赖关系，但其依赖关系（如果有的话）在图中的不同位置展开。"

#: _posts/2024-06-03-incubating-model-resolver.adoc
#, fuzzy
msgid "For example, `io.netty:netty-common` and `io.netty:netty-buffer` are displayed twice in the following snippet:"
msgstr "例如，在以下代码段中， `io.netty:netty-common` 和 `io.netty:netty-buffer` 显示了两次："

#: _posts/2024-06-03-incubating-model-resolver.adoc
#, fuzzy
msgid "Verbose option"
msgstr "冗长选项"

#: _posts/2024-06-03-incubating-model-resolver.adoc
#, fuzzy
msgid "Adding `-Dverbose` will add some information about each dependency, such as whether it's an application runtime or build time only dependency, whether it's a Quarkus extension or whether it's hot-reloadable dependency in dev mode."
msgstr "添加 `-Dverbose` 会添加有关每个依赖项的一些信息，例如它是应用程序运行时依赖项还是仅构建时依赖项，它是 Quarkus 扩展还是开发模式下的热加载依赖项。"

#: _posts/2024-06-03-incubating-model-resolver.adoc
#, fuzzy
msgid "For example, below is snippet of an output of running"
msgstr "例如，下面是运行以下程序的输出片段"

#: _posts/2024-06-03-incubating-model-resolver.adoc
#, fuzzy
msgid "Plans for future enhancements"
msgstr "未来改进计划"

#: _posts/2024-06-03-incubating-model-resolver.adoc
#, fuzzy
msgid "There are a few other dependency resolution related performance improvements relevant for mainly for `quarkus:dev` and `test` Maven goals that are coming in 3.12. In 3.12 the incubating application model resolver will be enabled by default in dev mode. Once enough feedback has been collected on its operation, the incubating implementation will replace the current application model resolver implementation."
msgstr "3.12 中还有一些与依赖关系解析相关的性能改进，主要针对 `quarkus:dev` 和 `test` Maven 目标。在 3.12 中，开发模式下将默认启用孵化应用程序模型解析器。一旦收集到足够的运行反馈，孵化实现将取代当前的应用模型解析器实现。"
