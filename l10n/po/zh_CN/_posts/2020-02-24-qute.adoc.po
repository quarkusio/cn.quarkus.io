# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2020-02-24-qute.adoc
#, fuzzy, no-wrap
msgid "Qute - Why (Not Just) Yet Another Templating Engine"
msgstr "Qute - 为什么（不只是）另一个模板引擎"

#. type: YAML Front Matter: synopsis
#: _posts/2020-02-24-qute.adoc
#, fuzzy, no-wrap
msgid "Qute - a templating engine designed specifically to meet the Quarkus needs."
msgstr "Qute - 一个专门为满足Quarkus需求而设计的模板引擎。"

#. type: delimited block =
#: _posts/2020-02-24-qute.adoc
#, fuzzy
msgid "Qute is an experimental feature."
msgstr "Qute是一个实验性的功能。"

#. type: delimited block =
#: _posts/2020-02-24-qute.adoc
#, fuzzy
msgid "There is no guarantee of stability nor long term presence in the platform until the solution matures."
msgstr "在解决方案成熟之前，不能保证稳定性，也不能保证在平台上长期存在。"

#. type: delimited block =
#: _posts/2020-02-24-qute.adoc
#, fuzzy
msgid "An https://quarkus.io/guides/qute[introduction guide] and a more comprehensive https://quarkus.io/guides/qute-reference[reference guide] are available."
msgstr "有一个 link:https://quarkus.io/guides/qute[介绍性指南] 和一个更全面的 link:https://quarkus.io/guides/qute-reference[参考指南] 。"

#: _posts/2020-02-24-qute.adoc
msgid ""
"Let's start with a very good question: _\"Why yet another templating engine?\"_.\n"
"There are plenty of templating libraries in Java.\n"
"And Quarkus is known to build on top of \"Best of Breed Libraries and Standards\".\n"
"That's true.\n"
"On the other hand, the Quarkus community is also a powerful innovation catalyst.\n"
"And so we decided to start Qute (QUarkus TEmplates) - a templating engine designed specifically to meet the Quarkus needs.\n"
"We believe that we can bring new ideas even to such an explored area as the templating is."
msgstr ""

#. type: Title ==
#: _posts/2020-02-24-qute.adoc
#, fuzzy, no-wrap
msgid "Basic Ideas"
msgstr "基本理念"

#: _posts/2020-02-24-qute.adoc
msgid ""
"Our main goal is to provide an opinionated innovative templating engine.\n"
"But we don't want to reinvent the wheel.\n"
"Instead, we got inspired by existing technologies.\n"
"Just a few examples:"
msgstr ""

#. type: Plain text
#: _posts/2020-02-24-qute.adoc
#, fuzzy
msgid "The https://quarkus.io/guides/qute-reference#syntax-and-building-blocks[syntax] is mainly inspired by https://handlebarsjs.com/[Handlebars] and https://www.dustjs.com/[Dust.js]."
msgstr "该 link:https://quarkus.io/guides/qute-reference#syntax-and-building-blocks[语法] 主要受 link:https://handlebarsjs.com/[Handlebars] 和 link:https://www.dustjs.com/[Dust.js] 的启发。"

#. type: Plain text
#: _posts/2020-02-24-qute.adoc
#, fuzzy
msgid "The https://quarkus.io/guides/qute-reference#include_helper[template inheritance] is inspired by https://en.wikipedia.org/wiki/Facelets[Facelets] and https://docs.djangoproject.com/en/3.0/ref/templates/language/[Django]."
msgstr "link:https://quarkus.io/guides/qute-reference#include_helper[模板继承] 的灵感来自 link:https://en.wikipedia.org/wiki/Facelets[Facelets] 和 link:https://docs.djangoproject.com/en/3.0/ref/templates/language/[Django] 。"

#. type: Plain text
#: _posts/2020-02-24-qute.adoc
#, fuzzy
msgid "Qute supports the https://en.wikipedia.org/wiki/Elvis_operator[elvis operator] you might be familiar with from https://groovy-lang.org/[Groovy] and https://kotlinlang.org/[Kotlin]."
msgstr "Qute支持你可能熟悉的 link:https://groovy-lang.org/[Groovy] 和 link:https://kotlinlang.org/[Kotlin] 的 link:https://en.wikipedia.org/wiki/Elvis_operator[elvis操作符] 。"

#: _posts/2020-02-24-qute.adoc
msgid "https://quarkus.io/guides/qute-reference#template_extension_methods[Extension methods]  that can be used to extend the data classes with new functionality are also inspired by modern languages."
msgstr ""

#. type: Plain text
#: _posts/2020-02-24-qute.adoc
#, fuzzy
msgid "If you come from the world of JSP/JSF/Facelets you'll appreciate that `@Named` CDI beans can be referenced directly in any template through the `inject` namespace, e.g. `{inject:foo.price}`. See https://quarkus.io/guides/qute-reference#injecting-beans-directly-in-templates[Injecting Beans Directly In Templates] for more information."
msgstr "如果你来自JSP/JSF/Facelets的世界，你会明白 `@Named` CDI Bean可以通过 `inject` 命名空间在任何模板中直接引用，例如 `{inject:foo.price}` 。更多信息请参见在 link:https://quarkus.io/guides/qute-reference#injecting-beans-directly-in-templates[模板中直接注入Bean] 。"

#: _posts/2020-02-24-qute.adoc
msgid ""
"But that's not all.\n"
"We introduce new features based on Quarkus principles..."
msgstr ""

#. type: Title ==
#: _posts/2020-02-24-qute.adoc
#, fuzzy, no-wrap
msgid "Asynchronous Data Resolution - On The Way To Reactive"
msgstr "异步数据解析--在通往反应式的路上"

#: _posts/2020-02-24-qute.adoc
msgid ""
"When we started to design Qute we had one important aspect in mind - the data resolution API should be asynchronous.\n"
"This allows for better resource utilization and fits the Quarkus reactive model.\n"
"Another consequence of this design decision is that it's possible to leverage non-blocking clients directly from a template, i.e. to asynchronously fetch data from various sources."
msgstr ""

#. type: Block title
#: _posts/2020-02-24-qute.adoc
#, fuzzy, no-wrap
msgid "Non-blocking Client Data Fetching Example"
msgstr "非阻塞式客户端数据获取实例"

#. type: Plain text
#: _posts/2020-02-24-qute.adoc
#, fuzzy
msgid "Parameter declaration - maps `client` to `org.acme.Client`. See the <<type-safe-templates,next section>> for more information."
msgstr "参数声明 - 将 `client` 映射到 `org.acme.Client` 。更多信息见 link:#type-safe-templates[下一节] 。"

#. type: Plain text
#: _posts/2020-02-24-qute.adoc
#, fuzzy
msgid "`org.acme.Client#getPullRequests()` is using a non-blocking Vert.x client to fetch the data directly from the GitHub API. Since the data resolution is asynchronous the thread is not blocked and can continue performing some other tasks:"
msgstr " `org.acme.Client#getPullRequests()` 是使用一个非阻塞的Vert.x客户端直接从GitHub API获取数据。由于数据解析是异步的，所以线程没有被阻塞，可以继续执行其他任务。"

#. type: Title ==
#: _posts/2020-02-24-qute.adoc
#, fuzzy, no-wrap
msgid "Type-safe Templates"
msgstr "类型安全的模板"

#: _posts/2020-02-24-qute.adoc
msgid ""
"Most of the templating engines are not type-safe, ie. do not prevent type errors.\n"
"It's quite natural because dynamicity in templates is very often practical.\n"
"On the other hand, a user is not protected from tedious errors caused by typos and various refactoring consequences.\n"
"Qute templates can be _optionally_ type-safe.\n"
"What does it actually mean?\n"
"A template may contain one or more *parameter declarations*.\n"
"A parameter declaration binds a concrete type information to a given identifier in the current context.\n"
"And what are the advantages of having a type-safe template?"
msgstr ""

#. type: Plain text
#: _posts/2020-02-24-qute.adoc
#, fuzzy
msgid "Quarkus validates _all expressions_ that reference a parameter declaration. If an invalid/incorrect expression is found the build fails."
msgstr "Quarkus验证 _所有_ 引用参数声明的 _表达式_ 。如果发现一个无效的/不正确的表达式，则构建失败。"

#. type: Plain text
#: _posts/2020-02-24-qute.adoc
#, fuzzy
msgid "In development mode, all files located in the `src/main/resources/templates` directory are watched for changes and modifications are immediately visible. That also implies that your application fails fast whenever a type error occurs."
msgstr "在开发模式下，位于 `src/main/resources/templates` 目录中的所有文件都会被监视，以防止发生变化，并且修改内容会立即显现。这也意味着，只要发生类型错误，你的应用程序就会快速失败。"

#. type: Plain text
#: _posts/2020-02-24-qute.adoc
#, fuzzy
msgid "A _value resolver_ is generated for all types used in parameter declarations so that it’s possible to access its properties without reflection. This is very useful when targeting GraalVM native images."
msgstr "在参数声明中使用的所有类型都会生成一个 _值解析器_ ，这样就有可能在没有反射的情况下访问其属性。这在针对GraalVM本地图像时非常有用。"

#. type: Plain text
#: _posts/2020-02-24-qute.adoc
#, fuzzy
msgid "We have few more ideas in our TODO list, such as performance optimizations for type-safe expressions, etc."
msgstr "在我们的TODO列表中还有一些想法，比如类型安全表达式的性能优化等等。"

#. type: Block title
#: _posts/2020-02-24-qute.adoc
#, fuzzy, no-wrap
msgid "Type-safe Template Example"
msgstr "类型安全的模板实例"

#. type: Plain text
#: _posts/2020-02-24-qute.adoc
#, fuzzy
msgid "Parameter declaration - maps `foo` to `org.acme.Foo`."
msgstr "参数声明--将 `foo` 到 `org.acme.Foo` 。"

#. type: Plain text
#: _posts/2020-02-24-qute.adoc
#, fuzzy
msgid "`{title}` is not validated - not matching a param declaration."
msgstr " `{title}` 没有得到验证--不匹配参数声明。"

#. type: Plain text
#: _posts/2020-02-24-qute.adoc
#, fuzzy
msgid "`{foo.message}` is validated. `org.acme.Foo` must have a property `message` or a matching template extension method must exist."
msgstr " `{foo.message}` 被验证。 ，必须有一个属性 ，或者必须存在一个匹配的模板扩展方法。 `org.acme.Foo` `message` "

#. type: Plain text
#: _posts/2020-02-24-qute.adoc
#, fuzzy
msgid "`{foo.message}` is not validated because `foo` is overridden in the loop section and there is no type information available."
msgstr " `{foo.message}` 没有得到验证，因为 在循环部分被覆盖了，而且没有类型信息可用。 `foo` "

#. type: Plain text
#: _posts/2020-02-24-qute.adoc
#, fuzzy
msgid "Only properties are currently validated in expressions; \"virtual methods\" such as `foo.getBar(baz.name)` are currently ignored."
msgstr "目前只有属性在表达式中被验证；\"虚拟方法\"，如 `foo.getBar(baz.name)` ，目前被忽略了。"

#. type: Title ==
#: _posts/2020-02-24-qute.adoc
#, fuzzy, no-wrap
msgid "First-class Quarkus Citizen"
msgstr "一流的夸库斯公民"

#. type: Plain text
#: _posts/2020-02-24-qute.adoc
#, fuzzy
msgid "Despite the fact that Qute is highly optimized for Quarkus the core engine is developed as an independent library that could be integrated in any environment."
msgstr "尽管Qute为Quarkus进行了高度优化，但其核心引擎是作为一个独立的库开发的，可以集成到任何环境中。"

#. type: Plain text
#: _posts/2020-02-24-qute.adoc
#, fuzzy
msgid "In Quarkus, all templates located in the `src/main/resources/templates` directory are validated and can be easily injected."
msgstr "在Quarkus中，所有位于 `src/main/resources/templates` 目录中的模板都经过验证，可以很容易地注入。"

#. type: Block title
#: _posts/2020-02-24-qute.adoc
#, fuzzy, no-wrap
msgid "Template Injection Example"
msgstr "模板注入实例"

#. type: Plain text
#: _posts/2020-02-24-qute.adoc
#, fuzzy
msgid "The field name is used to locate the template. In this particular case, the container will attempt to locate a template with path `src/main/resources/templates/items.html`. If there is no such template available the build fails."
msgstr "字段名是用来定位模板的。在这种特殊情况下，容器将试图定位一个路径为 `src/main/resources/templates/items.html` 的模板。如果没有这样的模板，则构建失败。"

#. type: Plain text
#: _posts/2020-02-24-qute.adoc
#, fuzzy
msgid "See the https://quarkus.io/guides/qute-reference#hello-world-example[Hello World Example] to explore the basic workflow."
msgstr "请看 \" link:https://quarkus.io/guides/qute-reference#hello-world-example[Hello World \"例子] 来探索基本的工作流程。"

#: _posts/2020-02-24-qute.adoc
msgid ""
"Moreover, a preconfigured `Engine` instance is provided and available for injection.\n"
"The `Engine` is a central point for template management and provides some low-level API."
msgstr ""

#. type: Title ==
#: _posts/2020-02-24-qute.adoc
#, fuzzy, no-wrap
msgid "RESTEasy Integration"
msgstr "RESTEasy集成"

#: _posts/2020-02-24-qute.adoc
msgid ""
"If used together with RESTEasy a resource method may return a `TemplateInstance` and the integration code takes care of all the necessary steps and renders the output to the response.\n"
"See https://quarkus.io/guides/qute-reference#resteasy-integration[RESTEasy Integration] for more information."
msgstr ""

#. type: Block title
#: _posts/2020-02-24-qute.adoc
#, fuzzy, no-wrap
msgid "JAX-RS Resource Example"
msgstr "JAX-RS资源实例"

#. type: Plain text
#: _posts/2020-02-24-qute.adoc
#, fuzzy
msgid "The field name is used to locate the template. In this particular case, we're injecting a template with path `templates/hello.txt`."
msgstr "字段名是用来定位模板的。在这个特殊情况下，我们要注入一个模板，路径是 `templates/hello.txt` 。"

#. type: Plain text
#: _posts/2020-02-24-qute.adoc
#, fuzzy
msgid "`Template.data()` returns a new template instance that can be customized before the actual rendering is triggered. In this case, we put the name value under the key `name`. The data map is accessible during rendering."
msgstr " `Template.data()` 返回一个新的模板实例，可以在实际渲染被触发之前进行自定义。在这种情况下，我们把名称值放在键 。渲染过程中可以访问数据地图。 `name` "

#. type: Plain text
#: _posts/2020-02-24-qute.adoc
#, fuzzy
msgid "Note that we don't trigger the rendering - this is done automatically by a special `ContainerResponseFilter` implementation."
msgstr "请注意，我们并没有触发渲染--这是由一个特殊的 `ContainerResponseFilter` 实现自动完成的。"

#. type: Title ==
#: _posts/2020-02-24-qute.adoc
#, fuzzy, no-wrap
msgid "Mailer Integration"
msgstr "邮件集成"

#: _posts/2020-02-24-qute.adoc
msgid ""
"Templates may come in handy when creating e-mail messages.\n"
"The Mailer extension integrates with Qute to provide a convenient way of sending e-mails.\n"
"In particular, the message body is automatically created using `+*.html+` and `+*.txt+` templates from the `src/main/resources/templates` directory.\n"
"See the https://quarkus.io/guides/mailer#message-body-based-on-qute-templates[Sending Emails] guide for more details."
msgstr ""

#. type: Title ==
#: _posts/2020-02-24-qute.adoc
#, no-wrap
msgid "Conclusion"
msgstr "解决方案"

#: _posts/2020-02-24-qute.adoc
msgid ""
"Qute first landed in Quarkus 1.1.0.Final.\n"
"Since then we fixed many bugs and implemented some feature requests.\n"
"Feel free to join our community to stabilize the API, harden the implementation and explore the new possibilities!"
msgstr ""
