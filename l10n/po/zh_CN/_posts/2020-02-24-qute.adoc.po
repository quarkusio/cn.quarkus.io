# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-02-24-qute.adoc:1
#, no-wrap
msgid "mkouba"
msgstr ""

#. type: YAML Front Matter: date
#: upstream/_posts/2020-02-24-qute.adoc:1
#, no-wrap
msgid "2020-02-24 00:00 +0100"
msgstr ""

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-02-24-qute.adoc:1
#, no-wrap
msgid "post"
msgstr ""

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-02-24-qute.adoc:1
#, no-wrap
msgid "Qute - a templating engine designed specifically to meet the Quarkus needs."
msgstr ""

#. type: YAML Front Matter: title
#: upstream/_posts/2020-02-24-qute.adoc:1
#, no-wrap
msgid "Qute - Why (Not Just) Yet Another Templating Engine"
msgstr ""

#. type: delimited block =
#: upstream/_posts/2020-02-24-qute.adoc:12
msgid "Qute is an experimental feature."
msgstr ""

#. type: delimited block =
#: upstream/_posts/2020-02-24-qute.adoc:14
msgid "There is no guarantee of stability nor long term presence in the platform until the solution matures."
msgstr ""

#. type: delimited block =
#: upstream/_posts/2020-02-24-qute.adoc:16
msgid "An https://quarkus.io/guides/qute[introduction guide] and a more comprehensive https://quarkus.io/guides/qute-reference[reference guide] are available."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:25
msgid "Let's start with a very good question: _\"Why yet another templating engine?\"_.  There are plenty of templating libraries in Java.  And Quarkus is known to build on top of \"Best of Breed Libraries and Standards\".  That's true.  On the other hand, the Quarkus community is also a powerful innovation catalyst.  And so we decided to start Qute (QUarkus TEmplates) - a templating engine designed specifically to meet the Quarkus needs.  We believe that we can bring new ideas even to such an explored area as the templating is."
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-02-24-qute.adoc:26
#, no-wrap
msgid "Basic Ideas"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:32
msgid "Our main goal is to provide an opinionated innovative templating engine.  But we don't want to reinvent the wheel.  Instead, we got inspired by existing technologies.  Just a few examples:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:34
msgid "The https://quarkus.io/guides/qute-reference#syntax-and-building-blocks[syntax] is mainly inspired by https://handlebarsjs.com/[Handlebars] and https://www.dustjs.com/[Dust.js]."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:35
msgid "The https://quarkus.io/guides/qute-reference#include_helper[template inheritance] is inspired by https://en.wikipedia.org/wiki/Facelets[Facelets] and https://docs.djangoproject.com/en/3.0/ref/templates/language/[Django]."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:36
msgid "Qute supports the https://en.wikipedia.org/wiki/Elvis_operator[elvis operator] you might be familiar with from https://groovy-lang.org/[Groovy] and https://kotlinlang.org/[Kotlin]."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:37
msgid "https://quarkus.io/guides/qute-reference#template_extension_methods[Extension methods] that can be used to extend the data classes with new functionality are also inspired by modern languages."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:38
msgid "If you come from the world of JSP/JSF/Facelets you'll appreciate that `@Named` CDI beans can be referenced directly in any template through the `inject` namespace, e.g. `{inject:foo.price}`. See https://quarkus.io/guides/qute-reference#injecting-beans-directly-in-templates[Injecting Beans Directly In Templates] for more information."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:41
msgid "But that's not all.  We introduce new features based on Quarkus principles..."
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-02-24-qute.adoc:42
#, no-wrap
msgid "Asynchronous Data Resolution - On The Way To Reactive"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:47
msgid "When we started to design Qute we had one important aspect in mind - the data resolution API should be asynchronous.  This allows for better resource utilization and fits the Quarkus reactive model.  Another consequence of this design decision is that it's possible to leverage non-blocking clients directly from a template, i.e. to asynchronously fetch data from various sources."
msgstr ""

#. type: Block title
#: upstream/_posts/2020-02-24-qute.adoc:48
#, no-wrap
msgid "Non-blocking Client Data Fetching Example"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-02-24-qute.adoc:60
#, no-wrap
msgid ""
"{@org.acme.Client client} <1>\n"
"<html>\n"
"<body>\n"
"    <h1>Quarkus Open Pull Requests</h1>\n"
"    {#for pull in client.pullRequests} <2>\n"
"        <p>{pull.title} - {pull.user.login}</p>\n"
"    {/for} \n"
"</body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:62
msgid "Parameter declaration - maps `client` to `org.acme.Client`. See the <<type-safe-templates,next section>> for more information."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:63
msgid "`org.acme.Client#getPullRequests()` is using a non-blocking Vert.x client to fetch the data directly from the GitHub API. Since the data resolution is asynchronous the thread is not blocked and can continue performing some other tasks:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-02-24-qute.adoc:79
#, no-wrap
msgid ""
"CompletionStage<JsonArray> getPullRequests() {\n"
"   return webClient\n"
"            .get(80, \"api.github.com\", \"/repos/quarkusio/quarkus/pulls?state=open&per_page=10\")\n"
"            .as(BodyCodec.jsonArray())\n"
"            .send()\n"
"            .thenCompose(r -> {\n"
"               if (r.statusCode() == 200) {\n"
"                  return CompletableFuture.completedFuture(r.body());\n"
"               } else {\n"
"                  // Log errors etc.\n"
"               }\n"
"            });\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-02-24-qute.adoc:82
#, no-wrap
msgid "Type-safe Templates"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:92
msgid "Most of the templating engines are not type-safe, ie. do not prevent type errors.  It's quite natural because dynamicity in templates is very often practical.  On the other hand, a user is not protected from tedious errors caused by typos and various refactoring consequences.  Qute templates can be _optionally_ type-safe.  What does it actually mean? A template may contain one or more *parameter declarations*.  A parameter declaration binds a concrete type information to a given identifier in the current context.  And what are the advantages of having a type-safe template?"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:94
msgid "Quarkus validates _all expressions_ that reference a parameter declaration. If an invalid/incorrect expression is found the build fails."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:96
msgid "In development mode, all files located in the `src/main/resources/templates` directory are watched for changes and modifications are immediately visible. That also implies that your application fails fast whenever a type error occurs."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:98
msgid "A _value resolver_ is generated for all types used in parameter declarations so that itâ€™s possible to access its properties without reflection. This is very useful when targeting GraalVM native images."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:99
msgid "We have few more ideas in our TODO list, such as performance optimizations for type-safe expressions, etc."
msgstr ""

#. type: Block title
#: upstream/_posts/2020-02-24-qute.adoc:100
#, no-wrap
msgid "Type-safe Template Example"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-02-24-qute.adoc:118
#, no-wrap
msgid ""
"{@org.acme.Foo foo} <1>\n"
"<!DOCTYPE html>\n"
"<html>\n"
"<head>\n"
"<meta charset=\"UTF-8\">\n"
"<title>Qute Hello</title>\n"
"</head>\n"
"<body>\n"
"  <h1>{title}</h1>  <2>\n"
"  <p>{foo.message}</p>  <3>\n"
"  {#for foo in baz.foos}\n"
"    <p>Hello {foo.message}!</p>  <4>\n"
"  {/for}\n"
"</body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:120
msgid "Parameter declaration - maps `foo` to `org.acme.Foo`."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:121
msgid "`{title}` is not validated - not matching a param declaration."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:122
msgid "`{foo.message}` is validated. `org.acme.Foo` must have a property `message` or a matching template extension method must exist."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:123
msgid "`{foo.message}` is not validated because `foo` is overridden in the loop section and there is no type information available."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:125
msgid "Only properties are currently validated in expressions; \"virtual methods\" such as `foo.getBar(baz.name)` are currently ignored."
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-02-24-qute.adoc:126
#, no-wrap
msgid "First-class Quarkus Citizen"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:129
msgid "Despite the fact that Qute is highly optimized for Quarkus the core engine is developed as an independent library that could be integrated in any environment."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:131
msgid "In Quarkus, all templates located in the `src/main/resources/templates` directory are validated and can be easily injected."
msgstr ""

#. type: Block title
#: upstream/_posts/2020-02-24-qute.adoc:132
#, no-wrap
msgid "Template Injection Example"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-02-24-qute.adoc:136
#, no-wrap
msgid "package org.acme.qute;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-02-24-qute.adoc:138
#, no-wrap
msgid "import io.quarkus.qute.Template;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-02-24-qute.adoc:140
#, no-wrap
msgid "class MyBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-02-24-qute.adoc:143
#, no-wrap
msgid ""
"    @Inject \n"
"    Template items; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-02-24-qute.adoc:146
#, no-wrap
msgid ""
"    @Inject\n"
"    Service service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-02-24-qute.adoc:151
#, no-wrap
msgid ""
"    String renderItems() {\n"
"       return items.data(\"items\", service.getItems()).render(); <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:153
msgid "The field name is used to locate the template. In this particular case, the container will attempt to locate a template with path `src/main/resources/templates/items.html`. If there is no such template available the build fails."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:154
msgid "See the https://quarkus.io/guides/qute-reference#hello-world-example[Hello World Example] to explore the basic workflow."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:157
msgid "Moreover, a preconfigured `Engine` instance is provided and available for injection.  The `Engine` is a central point for template management and provides some low-level API."
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-02-24-qute.adoc:158
#, no-wrap
msgid "RESTEasy Integration"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:162
msgid "If used together with RESTEasy a resource method may return a `TemplateInstance` and the integration code takes care of all the necessary steps and renders the output to the response.  See https://quarkus.io/guides/qute-reference#resteasy-integration[RESTEasy Integration] for more information."
msgstr ""

#. type: Block title
#: upstream/_posts/2020-02-24-qute.adoc:163
#, no-wrap
msgid "JAX-RS Resource Example"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-02-24-qute.adoc:170
#, no-wrap
msgid ""
"package org.acme.qute;\n"
"...\n"
"import io.quarkus.qute.TemplateInstance;\n"
"import io.quarkus.qute.Template;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-02-24-qute.adoc:173
#, no-wrap
msgid ""
"@Path(\"hello\")\n"
"public class HelloResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-02-24-qute.adoc:176
#, no-wrap
msgid ""
"    @Inject\n"
"    Template hello; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-02-24-qute.adoc:184
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public TemplateInstance get(@QueryParam(\"name\") String name) {\n"
"        // the template looks like: Hello {name}!\n"
"        return hello.data(\"name\", name); <2> <3>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:186
msgid "The field name is used to locate the template. In this particular case, we're injecting a template with path `templates/hello.txt`."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:187
msgid "`Template.data()` returns a new template instance that can be customized before the actual rendering is triggered. In this case, we put the name value under the key `name`. The data map is accessible during rendering."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:188
msgid "Note that we don't trigger the rendering - this is done automatically by a special `ContainerResponseFilter` implementation."
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-02-24-qute.adoc:190
#, no-wrap
msgid "Mailer Integration"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:196
msgid "Templates may come in handy when creating e-mail messages.  The Mailer extension integrates with Qute to provide a convenient way of sending e-mails.  In particular, the message body is automatically created using `+*.html+` and `+*.txt+` templates from the `src/main/resources/templates` directory.  See the https://quarkus.io/guides/mailer#message-body-based-on-qute-templates[Sending Emails] guide for more details."
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-02-24-qute.adoc:197
#, no-wrap
msgid "Conclusion"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:201
msgid "Qute first landed in Quarkus 1.1.0.Final.  Since then we fixed many bugs and implemented some feature requests.  Feel free to join our community to stabilize the API, harden the implementation and explore the new possibilities!"
msgstr ""
