# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-11-22 13:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy, no-wrap
msgid "Redis Job Queue - Reloaded"
msgstr "Redis作业队列--重装上阵"

#. type: YAML Front Matter: synopsis
#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy, no-wrap
msgid "How to implement a more reliable job queue with Redis, including fault tolerance, de-duplication, and poison pill."
msgstr "如何用Redis实现一个更可靠的作业队列，包括容错、去重和毒丸。"

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
msgid ""
"In https://quarkus.io/blog/redis-job-queue/[How to implement a job queue with Redis], we explained how to implement a job queue mechanism with Redis and the new Redis API from Quarkus.\n"
"The approach explored in that blog post had a significant flaw: if the execution of a job failed, the request was lost and will never be re-attempted."
msgstr ""

#. type: Plain text
#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid "In this post, we explain how to improve the reliability of the job queue to handle failures, enable retry and use a _dead-letter queue_ to avoid poison pills."
msgstr "在这篇文章中，我们解释了如何提高作业队列的可靠性来处理故障，启用重试，并使用 _死字队列_ 来避免毒丸。"

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
msgid "Recap & Problem"
msgstr ""

#. type: Plain text
#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid "In the https://quarkus.io/blog/redis-job-queue/[previous blog post], we implemented the following system."
msgstr "在 link:https://quarkus.io/blog/redis-job-queue/[上一篇博文] 中，我们实现了以下系统。"

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
msgid ""
"An application receives _fight requests_ and writes these requests into a Redis list.\n"
"Several simulators processed this list.\n"
"The outcomes of the _fights_ were communicated using Redis Pub/Sub."
msgstr ""

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
msgid ""
"The architecture works and ensures that a fight can only be executed once, thanks to the `brpop` command used by the simulator code.\n"
"This command pops the item from the queue in an atomic manner and ensure that the other simulators can't process it too."
msgstr ""

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
msgid ""
"However, this architecture has a drawback.\n"
"If the processing of the popped fight request fails, the request is lost.\n"
"No other simulator would be able to process it, and if the simulator that failed restarts, it will not reprocess the same request."
msgstr ""

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
msgid "Introducing more queues"
msgstr ""

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
msgid ""
"An approach to handle that problem is to introduce more queues.\n"
"In addition to the main queue (the Redis list from the image above), we introduce one queue per simulator.\n"
"Thus, each simulator has its private queue."
msgstr ""

#. type: Plain text
#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid "These private queues form a safety net."
msgstr "这些私人队列形成了一个安全网。"

#. type: Plain text
#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid "So, the simulator does use not only the _main queue_ but also its private queue:"
msgstr "因此，模拟器不仅使用 _主队列_ ，而且还使用其私有队列。"

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
msgid ""
"When a simulator pops a request from the main queue, it does not process it immediately; it writes it to its private queue.\n"
"To achieve this, we cannot use `brpop` and then write to the other queue, as if something wrong happens in between, we would have the same problem.\n"
"Instead, we use `blmove,` which pops an element from a list and pushes it into another in an atomic fashion.\n"
"Thus, we ensure that multiple simulators cannot consume the same request and that the request cannot be lost."
msgstr ""

#. type: Plain text
#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid "So, we use the following code to move the request from the main queue to the private queue:"
msgstr "因此，我们使用下面的代码将请求从主队列转移到私有队列。"

#. type: Plain text
#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid "Now, the simulator does not simulate the requests from the main queue but needs to process the ones added to its private queue."
msgstr "现在，模拟器不模拟主队列中的请求，而是需要处理添加到其私有队列中的请求。"

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
msgid ""
"This code is slightly different from the code from the previous blog.\n"
"This time, we do not pop.\n"
"We get the last item from the queue (index `-1` is the last one), process it, and then remove it from the queue.\n"
"We do this until the queue is empty."
msgstr ""

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
msgid ""
"Let's put everything together:\n"
"1. when the simulator starts, it should process the items from its private queue. So, if it crashes, it will retry to process the item.\n"
"2. once the private queue is empty, it gets new requests from the main queue. It will not process them directly but re-trigger the processing of the private queue until the queue is empty."
msgstr ""

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
msgid "New architecture, new problems"
msgstr ""

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
msgid ""
"That approach fixes the initial problem.\n"
"If the processing fails, we retry it (as the request is not removed from the private queue).\n"
"That will handle transient failures pretty well."
msgstr ""

#. type: Plain text
#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid "However, it also has its own set of drawbacks:"
msgstr "然而，它也有自己的一套缺点。"

#. type: Plain text
#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid "_Duplicates_: if the processing succeeds, but the `lrem` fails for any reason (like a network failure), the request will be processed another time as it was not removed from the queue."
msgstr " _重复_ ：如果处理成功，但 `lrem` ，由于任何原因（如网络故障）失败，该请求将被再次处理，因为它没有从队列中删除。"

#. type: Plain text
#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid "_Poison pill_: if a request cannot be processed successfully, it will retry to process it forever."
msgstr " _毒丸_ ：如果一个请求不能被成功处理，它将永远重试处理它。"

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
msgid "De-duplication"
msgstr ""

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
msgid ""
"Handling _duplicates_ require having a way to identify the requests uniquely and deduplicate manually.\n"
"In other words, if all our requests have a unique id, we can check if that id has already been processed (for example, by storing the processed ids in another list or a hash). If the item has already been processed, ignore it (remove it from the queue) and process it to the next one:"
msgstr ""

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
msgid "Avoiding swallowing the poison pill"
msgstr ""

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
msgid ""
"Handling _poison pills_ is more complex.\n"
"A _poison pill_ is a request that will always make the processing fails.\n"
"It can be because of a bug in the processing code or something unexpected; it will always fail.\n"
"Retrying, in this case, will not help; we are not facing a transient issue."
msgstr ""

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
msgid ""
"So, what can we do?\n"
"We need to track the number of processing attempts for that request, and if it exceeds a specific number, let's face it: we won't be able to handle the request.\n"
"We generally want to send the request to a dead-letter queue (DLQ), i.e., a specific queue storing the unprocessable items:"
msgstr ""

#. type: Plain text
#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid "The counter is a specific Redis integer value that we increment and reset once we succeed or give up."
msgstr "该计数器是一个特定的Redis整数值，一旦我们成功或放弃，我们就会递增并重置。"

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
msgid ""
"The items from the DLQ are not lost; they are saved for future processing.\n"
"These items could be re-added to the main queue (to verify if it was not a transient issue or the bug was fixed).\n"
"Another approach requires that a human administrator looks at these requests before re-injecting them into the system; maybe it was just a formatting issue..."
msgstr ""

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
#, fuzzy
msgid "Summary"
msgstr "摘要"

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
msgid ""
"This post explores how to improve the job queue we implemented in https://quarkus.io/blog/redis-job-queue/[How to implement a job queue with Redis].\n"
"This initial implementation, while simple, would lose requests if the processing fails.\n"
"This post proposes another, more complex, architecture to handle that case but also handle duplicates and poison pills.\n"
"But, nothing comes for free, and the resulting code is slightly more complex."
msgstr ""

#: _posts/2022-11-22-redis-job-queue-reloaded.adoc
msgid ""
"Remember: Redis is a fantastic toolbox.\n"
"But, it's a toolbox; you build what you need with it, as it is rarely available out of the box.\n"
"That being said, the richness of the Redis commands lets you do many things... (spoiler: we will see some of these things in future posts)."
msgstr ""
