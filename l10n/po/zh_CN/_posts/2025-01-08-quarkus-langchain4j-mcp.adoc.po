msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid "Using the Model Context Protocol with Quarkus+LangChain4j"
msgstr "使用 Quarkus+LangChain4j 的模型上下文协议"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid "Executing tools via the Model Context Protocol with Quarkus+LangChain4j"
msgstr "使用 Quarkus+LangChain4j 通过模型上下文协议执行工具"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"We are thrilled to announce that starting with version 0.23.0, the Quarkus\n"
"LangChain4j project integrates calling tools using the\n"
"https://modelcontextprotocol.io[Model Context Protocol (MCP)]."
msgstr "我们非常高兴地宣布，从 0.23.0 版开始，Quarkus LangChain4j 项目将集成使用 link:https://modelcontextprotocol.io[模型上下文协议（MCP）] 的调用工具。"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid "What is the Model Context Protocol?"
msgstr "什么是模型上下文协议？"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"MCP is an open protocol that standardizes how applications provide context\n"
"to LLMs. An MCP server is an application that can provide tools, resources\n"
"(be it a set of static documents or dynamically accessed data, for example\n"
"from a database), or pre-defined prompts that your AI-infused application\n"
"can use when talking to LLMs. When you package such functionality into an\n"
"MCP server, it can be plugged into and used by any LLM client toolkit that\n"
"supports MCP, including Quarkus and LangChain4j. There is also already a\n"
"growing ecosystem of reusable MCP servers that you can use out of the box,\n"
"and Quarkus also offers the\n"
"https://github.com/quarkiverse/quarkus-mcp-server[quarkus-mcp-server extension] that allows you\n"
"to create MCP servers, but in this article, we will focus on the client\n"
"side. More on creating MCP servers later."
msgstr "MCP 是一种开放式协议，它规范了应用程序向 LLM 提供上下文的方式。MCP 服务器是一种应用程序，可以提供工具、资源（无论是一组静态文档还是动态访问的数据，例如数据库中的数据）或预定义提示，让您的人工智能应用程序在与 LLM 对话时使用。将这些功能打包到 MCP 服务器中后，任何支持 MCP 的 LLM 客户端工具包（包括 Quarkus 和 LangChain4j）都可以插入并使用这些功能。此外，可重用的 MCP 服务器生态系统也在不断壮大，您可以开箱即用，Quarkus 还提供了 link:https://github.com/quarkiverse/quarkus-mcp-server[quarkus-mcp-server 扩展] ，允许您创建 MCP 服务器，但在本文中，我们将重点关注客户端。有关创建 MCP 服务器的更多信息，请稍后查看。"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"In version 0.23.x,\n"
"https://github.com/quarkiverse/quarkus-langchain4j[Quarkus LangChain4j]\n"
"implements the client side of the MCP protocol to allow tool execution.\n"
"Support for resources and prompts is planned for future releases."
msgstr "在 0.23.x 版中， link:https://github.com/quarkiverse/quarkus-langchain4j[Quarkus LangChain4j] 实现了 MCP 协议的客户端，允许执行工具。计划在未来的版本中支持资源和提示。"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"In this article, we will show you how to use Quarkus and LangChain4j to\n"
"easily create an application that connects to an MCP server providing\n"
"filesystem-related tools and exposes a chatbot that a user can use to\n"
"interact with the local filesystem, that means read and write files as\n"
"instructed by the user."
msgstr "在本文中，我们将向你展示如何使用 Quarkus 和 LangChain4j 轻松创建一个应用程序，该应用程序可以连接到提供文件系统相关工具的 MCP 服务器，并公开一个聊天机器人，用户可以用它与本地文件系统交互，也就是按照用户的指示读写文件。"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"There is no need to set up an MCP server separately, we will configure\n"
"Quarkus to run one as a subprocess. As you will see, setting up MCP with\n"
"Quarkus is extremely easy."
msgstr "无需单独设置 MCP 服务器，我们将配置 Quarkus 将其作为子进程运行。正如你所看到的，使用 Quarkus 设置 MCP 非常简单。"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"To download the final project, visit the\n"
"https://github.com/quarkiverse/quarkus-langchain4j/tree/0.23.0/samples/mcp-tools[\n"
"quarkus-langchain4j samples]. That sample contains the final functionality\n"
"developed in this article, plus some stuff on top, like a JavaScript-based\n"
"UI. In this article, for simplicity, we will skip the creation of that UI,\n"
"and we will only use the Dev UI chat page that comes bundled in Quarkus out\n"
"of the box."
msgstr "要下载最终项目，请访问 link:https://github.com/quarkiverse/quarkus-langchain4j/tree/0.23.0/samples/mcp-tools[quarkus-langchain4j 示例] 。该示例包含本文中开发的最终功能，以及一些附加功能，如基于 JavaScript 的用户界面。在本文中，为了简单起见，我们将跳过用户界面的创建，只使用 Quarkus 开箱即带的 Dev UI 聊天页面。"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
msgid "Prerequisites"
msgstr "先决条件"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid "Apache Maven 3.9+"
msgstr "Apache Maven 3.9+"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid "The `npm` package manager installed on your machine"
msgstr "您机器上安装的 `npm` 软件包管理器"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid "Creating a Filesystem assistant project"
msgstr "创建文件系统助手项目"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"We will assume that you are using OpenAI as the LLM provider. If you are\n"
"using a different provider, you will need to swap out the\n"
"`quarkus-langchain4j-openai` extension and use something else."
msgstr "我们假设您使用 OpenAI 作为 LLM 提供商。如果您使用的是其他提供商，则需要更换 `quarkus-langchain4j-openai` 扩展名并使用其他扩展名。"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid "Start by generating a Quarkus project. If you are using the Quarkus CLI, you can do it like this:"
msgstr "首先生成一个 Quarkus 项目。如果使用的是 Quarkus CLI，可以这样做："

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"If you prefer to use the web-based project generator, go to\n"
"https://code.quarkus.io/[code.quarkus.io] and select the same extensions."
msgstr "如果你更喜欢使用基于网络的项目生成器，请访问 link:https://code.quarkus.io/[code.quarkus.io] ，选择相同的扩展。"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"Whenever you run the application, make sure the\n"
"`QUARKUS_LANGCHAIN4J_OPENAI_API_KEY` environment variable is set to your\n"
"OpenAI API key."
msgstr "运行应用程序时，请确保 `QUARKUS_LANGCHAIN4J_OPENAI_API_KEY` 环境变量设置为 OpenAI API 密钥。"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid "Create the directory to be used by the agent"
msgstr "创建代理使用的目录"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"Under the root directory of the Maven project, create a directory named `playground`.\n"
"This will be the only directory that the agent will be allowed to interact with."
msgstr "在 Maven 项目的根目录下创建一个名为 `playground` 的目录。这将是唯一允许代理与之交互的目录。"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"Inside that directory, create any files that you want for testing. For\n"
"example, create a file named `playground/hello.txt` with the following\n"
"contents:"
msgstr "在该目录下，创建任何需要用于测试的文件。例如，创建一个名为 `playground/hello.txt` 的文件，内容如下："

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid "Hello, world!"
msgstr "你好，世界"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid "Create the AI service"
msgstr "创建人工智能服务"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"Next, we need to define an AI service that will define how the bot should\n"
"behave. The interface will look like this:"
msgstr "接下来，我们需要定义一个人工智能服务，它将定义机器人的行为方式。界面如下"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"Feel free to adjust the system message to your liking, but this one should\n"
"be suitable to get the application working as expected."
msgstr "您可以根据自己的喜好调整系统信息，但这条信息应能让应用程序按预期运行。"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid "Configure the MCP server and the connection to it"
msgstr "配置 MCP 服务器及其连接"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"We will use\n"
"https://www.npmjs.com/package/@modelcontextprotocol/server-filesystem[server-filesystem]\n"
"MCP server that comes as an NPM package, this is why you need to have `npm`\n"
"installed on your machine. It is assumed that you have the `npm` binary\n"
"available on your `PATH` (the `PATH` variable that the Quarkus process\n"
"sees)."
msgstr "我们将使用作为 NPM 软件包的 link:https://www.npmjs.com/package/@modelcontextprotocol/server-filesystem[服务器文件系统] MCP link:https://www.npmjs.com/package/@modelcontextprotocol/server-filesystem[服务器] ，这就是为什么你需要在你的机器上安装 `npm` 。假定你的 `PATH` 上有 `npm` 二进制文件（Quarkus 进程看到的 `PATH` 变量）。"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"Starting the server and configuring the connection to it is extremely easy.\n"
"We will simply tell Quarkus to start up a `server-filesystem` MCP server as\n"
"a subprocess and then communicate with it over the `stdio` transport. All\n"
"you need to do is to add two lines into your `application.properties`:"
msgstr "启动服务器和配置与服务器的连接非常简单。我们只需告诉 Quarkus 将 `server-filesystem` MCP 服务器作为子进程启动，然后通过 `stdio` 传输与之通信即可。你只需在 `application.properties` 中添加两行即可："

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"With this configuration, Quarkus will know that it should create a MCP\n"
"client that will be backed by a server that will be started by executing\n"
"`npm exec @modelcontextprotocol/server-filesystem@0.6.2 playground` as a\n"
"subprocess. The `playground` argument denotes the path to the directory that\n"
"the agent will be allowed to interact with. The `stdio` transport means that\n"
"the client will communicate with the server over standard input and output."
msgstr "有了这个配置，Quarkus 就知道它应该创建一个 MCP 客户端，该客户端由服务器支持，服务器将通过作为子进程执行 `npm exec @modelcontextprotocol/server-filesystem@0.6.2 playground` 来启动。 `playground` 参数表示允许代理与之交互的目录路径。 `stdio` 传输表示客户端将通过标准输入和输出与服务器通信。"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"When you configure one or more MCP connections this way, Quarkus also\n"
"automatically generates a `ToolProvider`. Any AI service that does not\n"
"explicitly specify a tool provider will be automatically wired up to this\n"
"generated one, so you don't need to do anything else to make the MCP\n"
"functionality available to the AI service."
msgstr "当你以这种方式配置一个或多个 MCP 连接时，Quarkus 也会自动生成一个 `ToolProvider` 。任何没有明确指定工具提供商的 AI 服务都会自动连接到这个生成的工具提供商，所以你不需要做任何其他事情就可以让 AI 服务使用 MCP 功能。"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"Optionally, if you want to see the actual traffic between the application\n"
"and the MCP server, add these three additional lines to your\n"
"`application.properties`:"
msgstr "如果想查看应用程序与 MCP 服务器之间的实际流量，还可以在 `application.properties` 中添加以下三行："

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid "And that's all! Now, let's test it."
msgstr "就这样！现在，让我们来测试一下。"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid "Try it out"
msgstr "试试看"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"Since we didn't create any UI for our application that a user could use,\n"
"let's use the Dev UI that comes with Quarkus out of the box. With the\n"
"application running in development mode, access\n"
"http://localhost:8080/q/dev-ui in your browser and click the `Chat` link in\n"
"the `LangChain4j` card (either that, or go to\n"
"http://localhost:8080/q/dev-ui/io.quarkiverse.langchain4j.quarkus-langchain4j-core/chat\n"
"directly)."
msgstr "由于我们没有为应用程序创建任何用户可以使用的用户界面，因此让我们使用 Quarkus 开箱即用的开发用户界面。在开发模式下运行应用程序，在浏览器中访问 http://localhost:8080/q/dev-ui ，然后单击 `LangChain4j` 卡中的 `Chat` 链接（或者直接访问 http://localhost:8080/q/dev-ui/io.quarkiverse.langchain4j.quarkus-langchain4j-core/chat ）。"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid "Try a prompt to ask the agent to read a file that you created previously, such as:"
msgstr "尝试提示代理读取之前创建的文件，例如"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid "Read the contents of the file hello.txt."
msgstr "读取文件 hello.txt 的内容。"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"If all is set up correctly, the agent will respond with the contents of the\n"
"file, like in this screenshot:"
msgstr "如果一切设置正确，代理将回复文件内容，如截图所示："

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid "The bot can also write files, so try a prompt such as:"
msgstr "机器人还可以写入文件，因此请尝试使用以下提示："

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid "Write a Python script that prints \"Hello, world!\" and save it as hello.py."
msgstr "编写一个 Python 脚本，打印 \"Hello, world!\"并将其保存为 hello.py。"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid "Then have a look into your `playground` directory, and you should see the new Python file there!"
msgstr "然后查看 `playground` 目录，应该能看到新的 Python 文件！"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
msgid "Conclusion"
msgstr "解决方案"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"The Model Context Protocol allows you to easily integrate reusable sets of\n"
"tools and resources to AI-infused applications in a portable way. With the\n"
"Quarkus LangChain4j extension, you can instruct Quarkus to run a server\n"
"locally as a subprocess, and configuring application to use it is just a\n"
"matter of adding a few configuration properties."
msgstr "模型上下文协议（Model Context Protocol）允许你以一种可移植的方式将可重复使用的工具集和资源轻松集成到人工智能应用程序中。有了 Quarkus LangChain4j 扩展，你就可以指示 Quarkus 将服务器作为子进程在本地运行，只需添加几个配置属性即可配置应用程序以使用它。"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"And that's not all. Stay tuned, because Quarkus also has an extension that\n"
"allows you to create MCP servers! More about that soon. *UPDATE:* The post\n"
"about the server side is now available:\n"
"https://quarkus.io/blog/mcp-server/[Implementing a MCP server in Quarkus]."
msgstr "这还不是全部。请继续关注，因为 Quarkus 还有一个扩展，允许你创建 MCP 服务器！更多详情，敬请期待。 *更新：* 有关服务器端的文章现已发布： link:https://quarkus.io/blog/mcp-server/[在 Quarkus 中实现 MCP 服务器] 。"
