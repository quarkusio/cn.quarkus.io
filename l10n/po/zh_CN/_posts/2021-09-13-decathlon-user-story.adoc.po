# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy, no-wrap
msgid "VCStream: a new messaging platform for DECATHLON’s Value Chain, built on Quarkus."
msgstr "VCStream：为DECATHLON的价值链提供一个新的信息传递平台，建立在Quarkus之上。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "DECATHLON is a French retailer, dedicated to sport products, with more than 1800 stores worldwide. At DECATHLON, we are convinced that sport is a source of well-being."
msgstr "DECATHLON是一家法国零售商，致力于运动产品，在全球拥有1800多家商店。在DECATHLON，我们相信运动是幸福的来源。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "VCStream is a new platform for streaming data across the Value Chain of DECATHLON. It allows streaming data in and out of the Value Chain, what we called the inbound (from external systems to the Value Chain) and the outbound (from the Value Chain to external systems) processes."
msgstr "VCStream是一个新的平台，用于跨DECATHLON价值链的数据流。它允许数据流进入和流出价值链，我们称之为入站（从外部系统到价值链）和出站（从价值链到外部系统）过程。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "VCStream slogan: **__“One platform to connect them all”__**."
msgstr "VCStream的口号是： *_\"一个平台，连接所有\"。_* "

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "VCStream offers connectors to easily stream data from incoming Kafka topics to existing Value Chain ERP modules, and from these ERP modules to outgoing Kafka topics and object store."
msgstr "VCStream提供连接器，可以轻松地将数据从传入的Kafka主题流向现有的价值链ERP模块，并从这些ERP模块流向传出的Kafka主题和对象存储。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "VCStream leverages the Quarkus framework, and Kubernetes, to offer a resilient and performant platform that meets security and reliability requirements of DECATHLON Value Chain."
msgstr "VCStream利用Quarkus框架和Kubernetes，提供一个有弹性和性能的平台，满足DECATHLON价值链的安全性和可靠性要求。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "Age Of Access Accelerator (AoAA) is the team behind the VCStream platform. We’re a small team of three Developers, a DevOps, a Product Owner and an Enterprise Architect; let’s not forget our team Leader of course (that also develops when he finds some time to do so)."
msgstr "Age Of Access Accelerator（AoAA）是VCStream平台背后的团队。我们是一个由三名开发人员、一名DevOps、一名产品负责人和一名企业架构师组成的小团队；当然，不要忘记我们的团队负责人（当他找到一些时间的时候也会开发）。"

#. type: Title ==
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy, no-wrap
msgid "The Challenge"
msgstr "挑战"

#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid ""
"The Value Chain IT department faces a major problem around data exposure and consumption to and from the other departments of DECATHLON.\n"
"The business was scaling steadily, driving significantly higher levels of resource consumption, capacity demands, and event data in real time. We realized that our system could not keep up."
msgstr "价值链 IT 部门面临着与 DECATHLON 其他部门之间的数据接触和消耗有关的重大问题。业务规模不断扩大，导致资源消耗、容量需求和事件数据的实时水平显著提高。我们意识到我们的系统无法跟上。"

#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid ""
"The current usage of dedicated servers was leading to an increase of resource waste. The department’s reliance on legacy workflows and ERP ecosystems resulted in significant productivity bottlenecks.\n"
"Thinking about data as streams is a popular approach nowadays. In many cases, it allows to build a data engineering architecture in a more efficient way than the classic “data as a state” one. But to support the streaming data paradigm, we need to use additional technologies. One of the most popular tools for working with streaming data is Apache Kafka, and DECATHLON decided to invest heavily in it."
msgstr "目前使用的专用服务器导致资源浪费增加。部门对传统工作流程和 ERP 生态系统的依赖导致生产力严重受限。将数据视为数据流是时下流行的一种方法。在许多情况下，它能以比传统的 \"数据作为状态 \"更有效的方式构建数据工程架构。但要支持流数据范式，我们需要使用额外的技术。Apache Kafka 是处理流数据最常用的工具之一，DECATHLON 决定对其进行大量投资。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "The quality of data produced to VCStream is extremely important to us, especially because we are running VCStream at scale. Data produced by one team can and will be consumed by many different applications within DECATHLON. The lack of data quality can have a huge impact on downstream consumers."
msgstr "产生到VCStream的数据质量对我们来说是非常重要的，特别是因为我们正在大规模地运行VCStream。一个团队产生的数据可以并将被DECATHLON内部许多不同的应用程序所消耗。数据质量的缺乏会对下游的消费者产生巨大的影响。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "Prior to the **VCStream platform**, the Value Chain was challenged with:"
msgstr "在 *VCStream平台* 之前，价值链面临的挑战是：。"

#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "**Data standardization**: data was exposed in a non-uniform manner and without standards."
msgstr "*数据标准化* ：数据公开的方式不统一，没有标准。"

#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "**Time to market**: exposing new data would take time as we relied on manual scheduling via legacy tools."
msgstr "*上市时间* ：公开新数据需要时间，因为我们依靠传统工具进行手动调度。"

#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "**Consuming data in real time**: as opposed to the current batch mode usage."
msgstr "*实时消耗数据* ：与当前的批处理模式不同。"

#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "**Scalability and Resilience**: huge volumes of data are processed, and the legacy system is fragile."
msgstr "*可扩展性和弹性* ：处理的数据量巨大，而传统系统非常脆弱。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "We knew our Value Chain needed a platform to modernize our data exchange: a product that could enable data access, efficient data integration, container adoption, and developer velocity at scale."
msgstr "我们知道我们的价值链需要一个平台来使我们的数据交换现代化：一个能够实现数据访问、有效的数据集成、容器采用和开发人员规模化速度的产品。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "__\"Almost every weekend is the biggest weekend we've ever had in the Value Chain! our system has just become unstable. We can not deal with application deployment in the old way.”__ - is the observation from many of us."
msgstr " _\"几乎每个周末都是我们价值链中最大的周末！我们的系统就是变得不稳定。我们不能用旧的方式来处理应用程序的部署\"。-_ 是我们许多人的看法。"

#. type: Title ==
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy, no-wrap
msgid "Why Quarkus?"
msgstr "为什么是夸库斯？"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "To implement VCStream, our team evaluated Spring Boot, Micronaut and Quarkus. As none has real experience with Micronaut, we quickly leave it out."
msgstr "为了实现VCStream，我们的团队评估了Spring Boot、Micronaut和Quarkus。由于没有人对Micronaut有实际经验，我们很快就把它排除在外。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "We selected Quarkus based on the followings criterias:"
msgstr "我们选择Quarkus是基于以下标准。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "The team was interested to learn a new framework"
msgstr "该团队有兴趣学习一个新的框架"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "Microprofile reactive messaging seems very interesting and a neat API to implement messaging only microservices which is what we needed primarily."
msgstr "Microprofile反应式消息传递似乎非常有趣，是实现仅有消息传递的微服务的一个整洁的API，这正是我们主要需要的。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "Performance is at the heart of Quarkus, and more importantly, low resource consumption (both CPU and memory) which is important as we plan to deploy to the cloud, and have some ecological sensitivity on the team."
msgstr "性能是Quarkus的核心，更重要的是低资源消耗（包括CPU和内存），这很重要，因为我们计划部署到云端，而且团队中有一些对生态敏感的人。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "All the containers, Kubernetes and cloud ready functionalities that we need to properly implement a resilient application on GKE are there."
msgstr "我们需要在GKE上正确实现一个有弹性的应用程序，所有的容器、Kubernetes和云准备功能都在那里。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "Lastly, we have a Quarkus contributor on the team which allows us to have a deep understanding of the framework, and a unique contact within the community."
msgstr "最后，我们的团队中有一位Quarkus的贡献者，这使我们对该框架有深刻的理解，并在社区内有独特的联系。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "Speaking of the community, the Quarkus one is very active and welcoming. This was one of the most important criteria for us."
msgstr "说到社区，Quarkus的社区非常活跃和热情。这也是我们最重要的标准之一。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "Of course, we performed some proof of concepts with all the team members, compared implementations, and decided together what the best choice would be in our context."
msgstr "当然，我们与所有团队成员一起进行了一些概念验证，比较了各种实现方式，并共同决定在我们的环境中什么是最佳选择。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "During these proof of concepts, we particularly enjoyed the fact that the Quarkus learning curve was very rapid and easier than what we first thought. Newcomers have become comfortable with Quarkus in less than a week, and all the developer oriented functionalities (live reload FTW!) have really empowered them to be more productive on their day to day tasks."
msgstr "在这些概念验证过程中，我们特别喜欢Quarkus的学习曲线，它比我们最初想象的要快，要简单。新人在不到一周的时间里就能适应Quarkus，所有面向开发者的功能（实时重载FTW！）确实使他们在日常工作中更有效率。"

#. type: Title ==
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy, no-wrap
msgid "Our commitment"
msgstr "我们的承诺"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "Within DECATHLON, there weren't many projects that used Quarkus, unlike Spring Boot, which has already been proven, and there were several developers who are familiar with it."
msgstr "在DECATHLON内部，使用Quarkus的项目并不多，不像Spring Boot，已经得到了验证，有几个开发人员对它很熟悉。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "Quarkus' position in our current TechRadar (trial) has not necessarily helped us to weigh our usage of it. The few developers with whom we had discussions on the use of Quarkus had expressed some reservations about the notion of performance that was put forward by the framework."
msgstr "Quarkus在我们目前的TechRadar（试用）中的地位，不一定能帮助我们权衡对它的使用。与我们讨论过Quarkus使用问题的少数开发者对该框架提出的性能概念表示了一些保留。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "Making objective choices (for the company and for developers who have a passion for the framework), on a new framework for our company was very difficult! We cannot rely solely on the advice of the Quarkus expert on our team to make the choice. This is the reason why we started with a POC, with the objective that if we would face some impossible situation, we would go back to Spring Boot without hesitation! Knowing this POC would still cost us in a difficult economic context that everyone knows."
msgstr "在我们公司的新框架上做出客观的选择（对公司和对框架有热情的开发者来说），是非常困难的！我们不能仅仅依靠我们团队中Quarkus专家的建议来做出选择。我们不能仅仅依靠我们团队中Quarkus专家的建议来做出选择。这就是我们从POC开始的原因，目的是如果我们遇到一些不可能的情况，我们会毫不犹豫地回到Spring Boot！我们知道这个POC仍然需要花费很多钱。在大家都知道的困难的经济背景下，知道这个POC仍然会让我们付出代价。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "Fortunately, the project went well, and we now have successfully deployed it in production and connected many ERP modules with external IT systems thanks to VCStream."
msgstr "幸运的是，该项目进展顺利，现在我们已经成功地在生产中部署，并将许多ERP模块与外部IT系统连接起来，这要感谢VCStream。"

#. type: Title ==
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy, no-wrap
msgid "VCStream architecture"
msgstr "VCStream架构"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "This is a simplified view of the VCStream inbound process architecture: the extractor connects to multiple Kafka brokers and consumes messages from multiple topics in real time. These messages are then converted to JSON, routed and sent to multiple ERP modules (one message can go to one or more ERP modules). There is one sender instance per ERP module."
msgstr "这是VCStream入站流程架构的简化视图：提取器连接到多个Kafka经纪商，实时消耗来自多个主题的消息。然后，这些消息被转换为JSON，被路由并发送至多个ERP模块（一个消息可以发送到一个或多个ERP模块）。每个ERP模块有一个发送器实例。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "Currently, we extract from 6 topics and send to 3 ERP modules but we foresee to consume from up to 25 different topics at the end of 2022."
msgstr "目前，我们从6个主题中提取信息并发送至3个ERP模块，但我们预计在2022年底将从多达25个不同的主题中进行消费。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "This is a simplified view of the VCStream outbound process architecture: the listener watches for JSON messages from an ERP module. These messages are routed, then sent to the validator that validates them, converted to AVRO format, and exposed in dedicated topics. There is one listener instance per ERP module."
msgstr "这是VCStream出站流程架构的一个简化视图：监听器观察来自ERP模块的JSON消息。这些消息被路由，然后发送到验证器，验证它们，转换为AVRO格式，并在专用主题中公开。每个ERP模块有一个监听器实例。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "Currently we receive messages from 4 ERP modules and expose 6 topics but we foresee to expose up to 25 topics at the end of 2022."
msgstr "目前，我们从4个ERP模块接收信息，并公布了6个主题，但我们预计在2022年底将公布多达25个主题。"

#. type: Title ==
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy, no-wrap
msgid "Embracing Quarkus"
msgstr "拥抱Quarkus"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "Here are testimonials of the usage of Quarkus from the members of the VCStream platform development team."
msgstr "以下是VCStream平台开发团队成员对Quarkus使用情况的评价。"

#. type: Title ===
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy, no-wrap
msgid "__Fawaz Paraïso - Team Leader__"
msgstr " _法瓦兹-帕拉伊索--团队负责人_ "

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "As a developer and the team leader, I had to make my own beliefs about choosing to use Quarkus for our platform implementation. Our technological choice must be consistent with DECATHLON's development strategies."
msgstr "作为一个开发人员和团队领导，我必须对选择使用Quarkus来实现我们的平台做出自己的信念。我们的技术选择必须与DECATHLON的发展战略一致。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "In comparison with Spring Boot which has already established itself, Quarkus is a new framework in the Java ecosystem. Beyond these considerations (new), our team should give a concrete opinion of what Quarkus could offer. Getting started with Quarkus was easy for me, it may be related to my experience as a senior developer. After a week of development with Quarkus, I was able to regain the same level of productivity as when I was developing with Spring Boot. For the implementation of our platform, SmallRye Reactive Messaging was newer to me and met the architectural constraints of our platform. Our POC was successful with results (simplicity, performance, resilience) above our expectations. Despite the positive results obtained, I did not want to stop there. I wanted to get another perspective from a junior developer who, like me, had never used Quarkus."
msgstr "与已经确立地位的Spring Boot相比，Quarkus是Java生态系统中的一个新框架。除了这些考虑（新），我们的团队应该对Quarkus能提供的东西给出具体的意见。对我来说，开始使用Quarkus很容易，这可能与我作为一个高级开发者的经验有关。在使用Quarkus开发一周后，我就能恢复到使用Spring Boot开发时的生产力水平了。对于我们平台的实现，SmallRye Reactive Messaging对我来说比较新颖，而且符合我们平台的架构限制。我们的POC很成功，结果（简单性、性能、弹性）超过了我们的预期。尽管取得了积极的成果，我并不想就此罢休。我想从一个和我一样从未使用过Quarkus的初级开发人员那里获得另一种观点。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "The arrival of a new collaborator with a junior profile in our team who does not know our project, neither Quarkus, provided me with other elements of answers on how to get started with Quarkus. He made his first contributions to our repositories in the first week. This collaborator's experience with using Quarkus has definitely assured me of how easily a junior developer can get started with Quarkus."
msgstr "在我们的团队中，有一位资历较浅的新合作者，他既不了解我们的项目，也不了解Quarkus，他的到来为我提供了关于如何开始使用Quarkus的其他答案要素。他在第一周就对我们的资源库做出了第一次贡献。这位合作者使用Quarkus的经验无疑向我保证，一个初级开发者可以很容易地开始使用Quarkus。"

#. type: Title ===
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy, no-wrap
msgid "__Thomas Dangleterre - Junior Developer__"
msgstr " _Thomas Dangleterre - 初级开发人员_ "

#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid ""
"I joined the team 4 months after the project started. I have been recruited to step in as a junior Java Software Developer. It was the first time I had to deal with microservices architecture and I just had a small experience of the cloud.\n"
"I really enjoy the hot reload feature on Quarkus it is something that I was not used to from my previous missions on legacy applications.\n"
"I like how it is easy to interact with Kafka thanks to the abstraction offered by SmallRye Reactive Messaging."
msgstr "项目启动 4 个月后，我加入了团队。我被招聘为初级 Java 软件开发人员。这是我第一次接触微服务架构，也是我第一次接触云计算。我非常喜欢 Quarkus 的热重载功能，这是我以前在传统应用程序上执行任务时不习惯的。得益于 SmallRye Reactive Messaging 提供的抽象功能，我很喜欢与 Kafka 进行交互。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "It was pretty easy to adapt myself to Quarkus as I knowed Spring Boot a bit, and there are a lot of similarities. I also found Quarkus' documentation very clear and I’m really looking forward to keep learning more about Quarkus."
msgstr "我很容易适应Quarkus，因为我对Spring Boot有一定的了解，而且有很多相似的地方。我还发现Quarkus的文档非常清晰，我非常期待继续学习更多关于Quarkus的知识。"

#. type: Title ===
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy, no-wrap
msgid "__Victor Gallet - Senior Developer and Kafka Expert__"
msgstr " _Victor Gallet - 高级开发人员和Kafka专家_ "

#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid ""
"When I joined the team, around ten microservices had already been deployed with Quarkus.\n"
"I had not yet had the opportunity to play with Quarkus, I had just seen presentations at a meetup and the framework interested me. Having worked since the beginning of my career with the Spring framework, I wanted to discover the big differences compared to Quarkus.\n"
"Despite utility classes and different CDI annotations, I was able to get up and running with Quarkus very quickly. The Quarkus Guides have been a huge help as they focus on one topic and get straight to the point. For example, since our microservices communicate exclusively with Apache Kafka, the Quarkus integration guide with Apache Kafka allowed me to immediately understand the concepts and our different components."
msgstr "我加入团队时，大约有十个微服务已经部署了 Quarkus。我还没有机会接触 Quarkus，只是在一次聚会上看到了介绍，对这个框架很感兴趣。我的职业生涯一开始就使用 Spring 框架，因此我想发现它与 Quarkus 之间的巨大差异。尽管有实用类和不同的 CDI 注释，我还是能很快上手并运行 Quarkus。Quarkus 指南帮了我大忙，因为它们专注于一个主题，而且直奔主题。例如，由于我们的微服务只与 Apache Kafka 通信，Quarkus 与 Apache Kafka 的集成指南让我能够立即理解概念和我们的不同组件。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "Compared to the dependency injection and the implementation provided by Quarkus (ArC), I had no problem navigating it. The concepts are standard and I only had to discover some new annotations like `@ApplicationScoped` and `@Singleton` to name just the most used ones."
msgstr "与Quarkus（ArC）提供的依赖注入和实现相比，我在浏览它时没有任何问题。这些概念是标准的，我只需要发现一些新的注解，比如 `@ApplicationScoped` 和 `@Singleton` ，这只是最常用的注解。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "To sum up, here are the points that I really enjoyed working with Quarkus:"
msgstr "总而言之，以下是我非常喜欢与Quarkus合作的几点。"

#. type: Title ====
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy, no-wrap
msgid "The live reload"
msgstr "现场重装"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "One feature that I really liked is the live reload. Starting my day in the morning, I would launch the application I needed to work on, and no longer have to worry about restarting it during the day. A very practical feature coupled with a very short start-up time!"
msgstr "我非常喜欢的一个功能是实时重载。从早上开始，我将启动我需要工作的应用程序，而不再需要担心在白天重新启动它。一个非常实用的功能，再加上非常短的启动时间!"

#. type: Title ====
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy, no-wrap
msgid "Unified configuration and profile management"
msgstr "统一配置和配置文件管理"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "With this simple little bit of configuration"
msgstr "通过这个简单的小配置"

#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid ""
"greeting.message=hello\n"
"%dev.greeting.message=hey\n"
"%test.greeting.message=hi"
msgstr "greeting.message=hello %dev.greeting.message=hey %test.greeting.message=hi"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "It allows the `greeting.message` property to be overridden when launching the application locally with the value __“hey”__ and for tests with the value __”hi”__. This is very convenient and greatly simplifies configuration management for testing."
msgstr "它允许在本地启动应用程序时用 _\"hey \"_ 值覆盖 `greeting.message` 属性，在测试时用 _\"hi \"_ 值覆盖。这非常方便，大大简化了测试的配置管理。"

#. type: Title ====
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy, no-wrap
msgid "The support"
msgstr "支持"

#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid ""
"I already mentioned it above, but the documentation is very clear, and the guides allow you to discover a functionality, a use of Quarkus in a simple and fast way.\n"
"I was also pleasantly surprised at the responsiveness and support of the Quarkus community within their Zulip chat. A big thank you to Clément Escoffier who helped us improve our applications, and personally helped me to do my first open source contribution to the SmallRye Reactive Messaging project."
msgstr "我已经在上面提到过了，但文档非常清晰，指南让你可以简单快速地发现 Quarkus 的功能和用途。此外，Quarkus 社区在 Zulip 聊天室中提供的响应和支持也让我感到惊喜。非常感谢 Clément Escoffier，他帮助我们改进了应用程序，并亲自帮助我为 SmallRye Reactive Messaging 项目做出了第一个开源贡献。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "One point of attention that I have come up against with my liability as a Spring developer is that Quarkus takes a number of actions during build to reduce startup time and its memory footprint. Having wanted to have a dynamic behavior in my application, I used the annotation `@IfBuildProperty` to select the appropriate bean but, as its name suggests, the bean will be selected during the build and the alternatives will not be available at runtime."
msgstr "作为一个Spring开发者，我遇到的一个注意点是，Quarkus在构建过程中会采取一些行动来减少启动时间和内存占用。由于想在我的应用程序中拥有一个动态的行为，我使用了注解 `@IfBuildProperty` 来选择合适的bean，但正如它的名字所暗示的，bean将在构建过程中被选择，而替代物在运行时将不可用。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "Finally, to end my feedback, I regret not having faced the construction of a native image. But our project has opted for the deployment of containers within a Kubernetes cluster, which is what Quarkus is designed for."
msgstr "最后，在结束我的反馈时，我很遗憾没有面对本地镜像的构建。但我们的项目选择了在Kubernetes集群中部署容器，这正是Quarkus的设计目的。"

#. type: Title ===
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy, no-wrap
msgid "__Loïc Mathieu - Senior Developer__"
msgstr " _Loïc Mathieu - 高级开发人员_ "

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "I’m a regular Quarkus committer and knows very well Quarkus before I joined the team. So I will give a very narrow testimonial, on a very specific feature we used and that I very love."
msgstr "我是一个普通的Quarkus提交者，在我加入团队之前就非常了解Quarkus。因此，我将给出一个非常狭窄的推荐信，关于我们使用的一个非常具体的功能，我非常喜欢。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "Reactive programming is at the heart of Quarkus, and reactive messaging, as its name implies, is a reactive framework."
msgstr "反应式编程是Quarkus的核心，而反应式消息传递，正如其名称所暗示的，是一个反应式框架。"

#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid ""
"When you need to consume or produce a message, you can simply use the payload as method parameter or return type. But when you need to implement asynchronous processing or complex logic on a stream of messages, you’ll need to use Mutiny instead of directly using your payload type.\n"
"Mutiny is a set of reactive types and operators. It allows to express a set of transformations on a stream of items and  follows the reactive stream standard."
msgstr "当你需要消费或产生一条消息时，你可以简单地使用有效载荷作为方法参数或返回类型。但如果需要在消息流上实现异步处理或复杂逻辑，就需要使用 Mutiny，而不是直接使用有效载荷类型。Mutiny 是一组反应式类型和操作符。它允许在项目流上表达一系列转换，并遵循反应流标准。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "One of our needs was to group incoming messages into batches, as sending a message to an ERP module has a cost, and they fear receiving millions of messages per day. So we need to group them by type, then by batch of 50, and emit at least one batch per minute to avoid adding too much delay to the message delivery."
msgstr "我们的需求之一是将收到的消息分组，因为向ERP模块发送消息是有成本的，而且他们担心每天会收到数百万条消息。所以我们需要按类型分组，然后按50个批次分组，每分钟至少发出一个批次，以避免给消息传递增加过多的延迟。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "To implement this, we prototype the usage of Kafka Stream, but it adds some complexity to our current technical stack as we didn’t use it already, and it has some grouping limitations (grouping by size is not provided out of the box by the framework)."
msgstr "为了实现这一点，我们以Kafka Stream的使用为原型，但它给我们目前的技术栈增加了一些复杂性，因为我们本来就没有使用它，而且它有一些分组限制（框架不提供按大小分组的功能）。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "So we decided to simply use what we already have in our toolbox, Mutiny, and the code we implement is really readable for such a complex task, and we have been very happy with it since."
msgstr "所以我们决定简单地使用我们工具箱中已经有的东西--Mutiny，我们实现的代码对于这样一个复杂的任务来说确实是可读的，而且我们后来对它非常满意。"

#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid ""
"@Incoming(\"in\")\n"
"@Outgoing(\"group-out\")\n"
"public Multi<Message<List<ErpMessage>>> group(Multi<KafkaRecord<String, RawMessage>> events) { // <1>\n"
"    return events\n"
"            .group().by(record -> record.getPayload().type) // <2>\n"
"            .flatMap(group -> group.group().intoLists().of(size, duration)) // <3>\n"
"            .filter(group -> !group.isEmpty()) // <4>\n"
"            .flatMap(groupedMultis -> {\n"
"                List<ErpMessage> erpMsg = groupedMultis.stream() // <5>\n"
"                        .map(record -> toErpMessage(record))\n"
"                        .collect(Collectors.toList());\n"
"                return Multi.createFrom().item(KafkaRecord.of((String) null, erpMsg)); // <6>\n"
"            });\n"
"}"
msgstr "@Incoming(\"in\") @Outgoing(\"group-out\") public Multi<Message<List<ErpMessage>>> group(Multi<KafkaRecord<String, RawMessage>> events) { // <1> return events .group().by(record → record.getPayload().type) // <2> .flatMap(group → group.group().intoLists().of(size, duration))// <3> .filter(group → !group.isEmpty()) // <4> .flatMap(groupedMultis → { List<ErpMessage> erpMsg = groupedMultis.stream() // <5> .map(record → toErpMessage(record)) .collect(Collectors.toList()); return Multi.createFrom().item(KafkaRecord.ofString) null, erpMsg; // <6> }); }"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "The method takes a stream of Kafka messages."
msgstr "该方法接收一个Kafka消息流。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "First, we group by payload type."
msgstr "首先，我们按有效载荷类型分组。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "Then, we group by batch of size messages with a max duration of duration."
msgstr "然后，我们按最大持续时间的批量大小信息进行分组。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "Then, we remove empty batches."
msgstr "然后，我们删除空的批次。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "Then, we map each batch of message to a new format."
msgstr "然后，我们将每批信息映射到一个新的格式。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "Then we return a Kafka message with the batch in it."
msgstr "然后我们返回一个包含批处理的Kafka消息。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "Pretty straightforward, right?"
msgstr "很直接，对吗？"

#. type: Title ==
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy, no-wrap
msgid "Looking forward"
msgstr "展望未来"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "Performance was at the heart of the design and implementation of VCStream, we perform regular load tests and run regular crisis scenarios (we simulate keeping up with a high number of messages waiting in the broker by manipulating topics offset)."
msgstr "性能是VCStream设计和实现的核心，我们定期进行负载测试，并定期运行危机场景（我们通过操纵主题偏移量来模拟保持在代理中等待的大量消息）。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "Each time we encounter performance bottlenecks or regressions, we discuss them with the Quarkus community and have very prompt feedback. All issues were resolved quickly and the performance and resilience of our platform kept improving over time."
msgstr "每次我们遇到性能瓶颈或倒退时，都会与Quarkus社区讨论，并得到非常及时的反馈。所有的问题都很快得到解决，我们平台的性能和弹性随着时间的推移不断提高。"

#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid ""
"We deployed on the cloud, which implies direct cost we can measure easily. Even if today our platform is not yet used a lot in production (only half of the currently deployed topics are really used), we foreseen a need to scale to up to 1.5 million messages per minute at the end of 2022, and to connect to more than twice the current number of ERP\n"
" modules. So the level of performance and the resources needed to achieve it is very important."
msgstr "我们在云端进行部署，这意味着我们可以轻松衡量直接成本。即使现在我们的平台还没有在生产中大量使用（目前部署的主题中只有一半被真正使用），但我们预计到 2022 年底需要将平台扩展到每分钟 150 万条信息，并连接目前 ERP 模块数量的两倍以上。因此，性能水平和实现性能所需的资源非常重要。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "The good news is: we are not afraid of this as the platform in its current state can already sustain a high number of messages per minute. We benchmark our platform on our crisis scenario to **up to 500 thousand messages per minute per instance** even with Kafka clients favoring consistency"
msgstr "好消息是：我们并不害怕这种情况，因为平台在目前的状态下已经可以维持每分钟大量的消息。我们在危机情况下对我们的平台进行了基准测试，即使在Kafka客户端偏向于一致性的情况下， *每个实例每分钟也能达到50万条消息* 。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "And thanks to Quarkus, a single instance of a component uses **as less as 0.5 CPU and 512MB or memory** (heap size is around 120MB), we could go less as all the CPU and memory is not used, but it’s already very little so we prefer to be conservative on this. Oh, yes, and this is on Java 16 and using the JVM."
msgstr "多亏了Quarkus，一个组件的单个实例只用了 *0.5个CPU和512MB的内存* （堆大小约为120MB），我们可以更少，因为所有的CPU和内存都没有被使用，但这已经非常少了，所以我们宁愿在这方面保守一点。哦，对了，这是在Java 16上，使用JVM。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "To put it in another words, we achieve a **1 millions messages per minutes throughput per CPU per GB of memory** on a real world streaming application thanks to Quarkus and MicroProfile reactive messaging. This is quite an impressive throughput density, and we are very happy with it."
msgstr "换句话说，由于Quarkus和MicroProfile的反应式消息传递，我们在一个真实世界的流媒体应用上实现了 *每GB内存每CPU每分钟100万条消息* 的吞吐量。这是一个相当令人印象深刻的吞吐量密度，我们对此感到非常满意。"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "A few last words, we would like to especially thank the Quarkus community for helping us, answering our questions again and again, improving Quarkus on each release and for the really good job they made with Quarkus and the fabulous MicroProfile Reactive Messaging framework! Thank you all, you’re amazing!"
msgstr "最后，我们要特别感谢Quarkus社区对我们的帮助，一次又一次地回答我们的问题，在每个版本中改进Quarkus，并感谢他们对Quarkus和神话般的MicroProfile反应式消息框架所做的真正的工作!谢谢你们，你们真了不起!"

#. type: Plain text
#: _posts/2021-09-13-decathlon-user-story.adoc
#, fuzzy
msgid "__This article has been written and proofread by all the members of the Age of Access Accelerator team.__"
msgstr "_本文由 Access Age Accelerator 团队全体成员撰写和校对。_"
