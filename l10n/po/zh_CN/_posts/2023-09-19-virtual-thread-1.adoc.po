# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-12-14 16:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy, no-wrap
msgid "When Quarkus meets Virtual Threads"
msgstr "当夸克斯遇到虚拟线程"

#. type: YAML Front Matter: synopsis
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy, no-wrap
msgid "What do virtual threads change when building concurrent applications with Quarkus."
msgstr "使用 Quarkus 构建并发应用程序时，虚拟线程会发生哪些变化。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"Java 21 offers a new feature that will reshape the development of concurrent applications in Java.\n"
"For over two years, the Quarkus team explored integrating this new feature to ease the development of distributed applications, including microservices and event-driven applications."
msgstr "Java 21 提供的新功能将重塑 Java 并发应用程序的开发。两年多来，Quarkus 团队一直在探索集成这一新功能，以简化分布式应用程序（包括微服务和事件驱动应用程序）的开发。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"This blog post is the first part of a series of posts and videos demonstrating how to use virtual threads in Quarkus applications.\n"
"The series covers REST, messaging, containers, native compilation, and our plans for the future.\n"
"But first, let's look at virtual threads, what they change, and what you should know about them."
msgstr "本博文是演示如何在 Quarkus 应用程序中使用虚拟线程的系列博文和视频的第一部分。该系列涵盖 REST、消息传递、容器、本地编译以及我们的未来计划。但首先，让我们来看看虚拟线程、它们的变化以及你应该了解的内容。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "The Java world before Java 21"
msgstr "Java 21 之前的 Java 世界"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"At the beginning of the Java time, Java had _green threads_.\n"
"Green threads were user-level threads scheduled by the Java virtual machine (JVM) instead of natively by the underlying operating system (OS).\n"
"They emulated multithreaded environments without relying on native OS abilities.\n"
"They were managed in user space instead of kernel space, enabling them to work in environments that do not have native thread support.\n"
"Green threads were briefly available in Java between 1997 and 2000.\n"
"I used green threads; they did not leave me with a fantastic memory."
msgstr "在 Java 时代之初，Java 有 _绿色线程_ 。绿色线程是由 Java 虚拟机（JVM）调度的用户级线程，而不是由底层操作系统（OS）原生调度的线程。它们模拟了多线程环境，而不依赖于本地操作系统的能力。它们在用户空间而非内核空间进行管理，因此可以在没有本地线程支持的环境中工作。绿色线程曾在 1997 年至 2000 年间短暂出现在 Java 中。我使用过绿色线程，但它们并没有给我留下美好的回忆。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"In Java 1.3, released in 2000, Java made a big step forward and started integrating OS threads.\n"
"So, the threads are managed by the operating system.\n"
"It is still the model we are using today.\n"
"Each time a Java application creates a thread, a platform thread is created, which wraps an OS thread.\n"
"So, creating a platform thread creates an OS thread, and **blocking a platform thread blocks an OS thread**."
msgstr "在 2000 年发布的 Java 1.3 中，Java 向前迈进了一大步，开始集成操作系统线程。因此，线程由操作系统管理。这仍然是我们现在使用的模式。每当 Java 应用程序创建一个线程时，就会创建一个平台线程，它封装了一个操作系统线程。因此，创建一个平台线程就会创建一个操作系统线程，而 *阻塞一个平台线程就会阻塞一个操作系统* 线程。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"When you use a Java application framework, you rarely create threads yourself.\n"
"It is done for you by the framework.\n"
"For example, when your application receives an HTTP request, the framework creates or reuses a platform thread (and so an OS thread) and executes the processing on that thread.\n"
"The whole processing runs on this thread, and the thread cannot be reused until the processing completes (so the response is sent back).\n"
"When the processing executes a blocking I/O operation, like calling another service, writing to the file system, or interacting with a database, the thread is blocked, waiting for the response.\n"
"As mentioned above, the OS thread is also blocked while waiting.\n"
"When this response is received, the processing continues:"
msgstr "使用 Java 应用程序框架时，您很少会自己创建线程。创建线程是由框架代劳的。例如，当应用程序接收到 HTTP 请求时，框架会创建或重用一个平台线程（因此也是操作系统线程），并在该线程上执行处理。整个处理过程都在该线程上运行，在处理完成（响应被发送回来）之前，该线程不能被重用。当处理执行阻塞 I/O 操作（如调用其他服务、向文件系统写入内容或与数据库交互）时，线程会被阻塞，等待响应。如上所述，操作系统线程在等待时也会被阻塞。收到响应后，处理继续进行："

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"This model has the advantage of being simple to program with.\n"
"The code follows an imperative model.\n"
"The code is executed sequentially.\n"
"It's simple to write, simple to reason about.\n"
"For example, the following snippet shows how you receive an HTTP request, call another HTTP service, and return a response with Quarkus.\n"
"It follows the sequence diagram from above."
msgstr "这种模式的优点是编程简单。代码遵循命令式模型。代码按顺序执行。编写和推理都很简单。例如，下面的代码片段展示了如何通过 Quarkus 接收 HTTP 请求、调用另一个 HTTP 服务并返回响应。它遵循了上面的顺序图。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"But there is a limit to that imperative model.\n"
"You can only handle _n_ requests concurrently, with _n_ the number of threads the framework can create.\n"
"OS threads are expensive.\n"
"They consume memory (around 1 Mb per thread), are expensive to create, use CPU to schedule them…\n"
"Frameworks use thread pools to allow reusing idle threads, but when the concurrency level exceeds your number of threads, you start pilling up requests, increasing the response time, and, in the worst case, even rejecting requests.\n"
"Increasing the thread pool size and, consequently, swelling the memory usage can blow up your Cloud bill and deployment density.\n"
"Futhermore, adding more threads may not even improve the concurrency as explained by the https://youtu.be/07V08SB1l8c?t=142[Little Law]."
msgstr "但这种命令式模型是有限制的。你只能同时处理 _n 个_ 请求，而 _n_ 就是框架能创建的线程数。操作系统线程的成本很高。它们消耗内存（每个线程约 1 Mb）、创建成本高昂、调度线程需要使用 CPU......框架使用线程池来重用闲置线程，但当并发级别超过线程数量时，请求就会开始堆积，响应时间也会增加，最糟糕的情况甚至会拒绝请求。增加线程池的大小，进而扩大内存使用量，可能会增加云计算的成本和部署密度。此外，根据 link:https://youtu.be/07V08SB1l8c?t=142[小定律] 的解释，增加线程甚至可能无法提高并发性。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"The reactive movement proposed an alternative model to work around that issue.\n"
"It promotes the usage of non-blocking I/O and asynchronous development models to use resources (CPU and memory) more efficiently.\n"
"With the reactive model, **a single thread can handle multiple concurrent requests**.\n"
"So, instead of having a large pool of threads, you have a minimum number of threads (generally equal to the number of CPU cores).\n"
"This small amount of threads, often named event loops, handles all your requests.\n"
"When a request is received, it calls the processing code on one of these threads.\n"
"When the processing needs to execute an I/O operation, instead of using blocking I/O, it schedules the operations and passes a **continuation**.\n"
"This continuation is the code to be invoked when the I/O completes, so basically, the rest of the processing:"
msgstr "反应式运动提出了另一种模式来解决这一问题。它提倡使用非阻塞 I/O 和异步开发模型，以更高效地使用资源（CPU 和内存）。在反应式模型中， *一个线程可以处理多个并发请求* 。因此，你拥有的不是大量线程池，而是最少数量的线程（通常等于 CPU 内核数）。这一小部分线程（通常称为事件循环）负责处理所有请求。收到请求时，它会调用其中一个线程上的处理代码。当处理过程需要执行 I/O 操作时，它不会使用阻塞 I/O，而是会调度操作并传递一个 *继续* 。该继续是 I/O 完成后要调用的代码，因此基本上就是处理过程的其余部分："

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"The reactive model is highly efficient, but there is a catch.\n"
"As mentioned, you need to write your code as a chain of continuations.\n"
"While there are multiple approaches, such as callbacks, futures, reactive programming, or co-routines, it makes the code harder to reason about.\n"
"The code must be structured in a way that may not be natural for every developer.\n"
"That limits the adoption of this solution.\n"
"Also, the code can not only block during I/O operation; it must not execute lengthy processing (what we call monopolization).\n"
"The model's efficiency comes from the ability to process many requests concurrently.\n"
"If the thread is used for a long time, it does not allow the other requests to be processed, and, as for the imperative model, you start piling up requests."
msgstr "反应模型的效率很高，但也有缺陷。如前所述，你需要将代码写成一连串的连续过程。虽然有多种方法，例如回调、期货、反应式编程或共同程序，但这都会增加代码的推理难度。代码必须以一种对每个开发人员来说都不自然的方式进行结构化。这就限制了这种解决方案的采用。此外，代码不能只在 I/O 操作期间阻塞，也不能执行冗长的处理（我们称之为垄断）。该模型的效率来自于并发处理多个请求的能力。如果长时间使用线程，其他请求就无法得到处理，与命令式模型一样，请求就会开始堆积。"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "To illustrate the difference between the imperative and reactive model, the following snippet is equivalent to the previous one: it receives an HTTP request, calls another HTTP service, and returns a response. But this time, it uses the Quarkus reactive model."
msgstr "为了说明命令式模型和反应式模型之间的区别，下面的代码段与前一个代码段相同：它接收一个 HTTP 请求，调用另一个 HTTP 服务，然后返回一个响应。但这一次，它使用的是 Quarkus 的反应式模型。"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "An application with this code handles more concurrent requests and uses less memory than the imperative one, but, the development model is different."
msgstr "与命令式代码相比，使用这种代码的应用程序可以处理更多的并发请求，使用的内存也更少，但开发模式却不同。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"Most of the time, the reactive and imperative models are opposed.\n"
"This does not need to be the case.\n"
"Quarkus uses a reactive core and lets you decide if you want to use the reactive or imperative model.\n"
"Check the https://quarkus.io/blog/resteasy-reactive-smart-dispatch/['to block or not to block' article] for more details about this ability."
msgstr "大多数情况下，反应式模型和命令式模型是对立的。其实大可不必如此。Quarkus 使用反应式内核，并允许你决定是使用反应式模型还是命令式模型。请查看 link:https://quarkus.io/blog/resteasy-reactive-smart-dispatch/[\"to block or not to block\"（阻塞或不阻塞）一文] ，了解有关此功能的更多详情。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "What do virtual threads change?"
msgstr "虚拟线程能改变什么？"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"Java 19 introduced a new type of thread: virtual threads.\n"
"In Java 21, this API became generally available."
msgstr "Java 19 引入了一种新的线程类型：虚拟线程。在 Java 21 中，该 API 开始普遍可用。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"But what are these virtual threads?\n"
"Virtual threads reuse the idea of the reactive paradigm but allow an imperative development model.\n"
"You get the benefits from the reactive and imperative models without the drawbacks!"
msgstr "但这些虚拟线程是什么呢？虚拟线程重复使用了反应式范例的理念，但允许使用命令式开发模式。你可以从反应式和命令式模型中获得好处，而不会有缺点！"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"Like with green threads, virtual threads are managed by the JVM.\n"
"Virtual threads occupy less space than platform threads in memory.\n"
"Hence, using more virtual threads than platform threads simultaneously becomes possible without blowing up the memory.\n"
"Virtual threads are supposed to be disposable entities that we create when we need them; pooling or reusing them for different tasks is discouraged."
msgstr "与绿色线程一样，虚拟线程由 JVM 管理。虚拟线程占用的内存空间比平台线程小。因此，可以同时使用比平台线程更多的虚拟线程，而不会占用内存。虚拟线程应该是我们在需要时创建的一次性实体；我们不鼓励在不同任务中池化或重复使用虚拟线程。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"But what does it change?\n"
"Blocking a virtual thread is, in general, very cheap!\n"
"There is a pinch of magic that makes virtual thread very appealing.\n"
"When your code running on a virtual thread needs to execute an I/O operation, it uses a blocking API.\n"
"So, the code waits for the result, as with the imperative model.\n"
"However, since the JVM manages virtual threads, no underlying OS thread is blocked when they perform this blocking operation.\n"
"The state of the virtual thread is stored in the heap, and another virtual thread can be executed on the same Java platform (carrier) thread, exactly as in the reactive model.\n"
"When the I/O operation completes, the virtual thread becomes executable again, and when a carrier thread is available, the state of the virtual thread is restored, and the execution continues.\n"
"For the developer, this magic is invisible!\n"
"You just write synchronous code, and it's executed like proper reactive code without blocking the OS thread."
msgstr "但它能改变什么呢？一般来说，阻止虚拟线程的成本很低！虚拟线程的神奇之处在于它非常吸引人。当运行在虚拟线程上的代码需要执行 I/O 操作时，它会使用阻塞 API。因此，代码会等待结果，就像命令式模型一样。不过，由于 JVM 对虚拟线程进行管理，因此在执行阻塞操作时，底层操作系统线程不会被阻塞。虚拟线程的状态存储在堆中，另一个虚拟线程可以在同一个 Java 平台（载体）线程上执行，这与反应式模型完全相同。当 I/O 操作完成时，虚拟线程再次成为可执行线程，而当载体线程可用时，虚拟线程的状态就会恢复，并继续执行。对于开发人员来说，这种神奇的效果是不可见的！你只需编写同步代码，它就会像正确的反应代码一样执行，而不会阻塞操作系统线程。"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "Your code runs on top of virtual threads, but under the hood, only a few carrier threads execute them."
msgstr "你的代码运行在虚拟线程之上，但在引擎盖下，只有几个载体线程执行它们。"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "To summarize, virtual threads are:"
msgstr "总而言之，虚拟线程有"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "Lightweight - you can have a LOT of them"
msgstr "轻便 - 你可以拥有很多"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "Cheap to create - no need to pool them anymore"
msgstr "创建成本低廉 - 无需再汇集它们"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "Cheap to block when using blocking operations - blocking a virtual thread does not block the underlying OS thread when executing I/O operations"
msgstr "在使用阻塞操作时，阻塞成本低--阻塞虚拟线程不会在执行 I/O 操作时阻塞底层操作系统线程"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "How can you use virtual threads in Quarkus?"
msgstr "如何在 Quarkus 中使用虚拟线程？"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"Using virtual threads in Quarkus is straightforward.\n"
"You only need to use the `@RunOnVirtualThread` annotation.\n"
"It indicates to Quarkus to invoke the annotated method on a virtual thread instead of a regular platform thread."
msgstr "在 Quarkus 中使用虚拟线程非常简单。你只需使用 `@RunOnVirtualThread` 注解。它指示 Quarkus 在虚拟线程而非普通平台线程上调用注解的方法。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"This new strategy extends the _smart dispatch_ explained in the https://quarkus.io/blog/resteasy-reactive-smart-dispatch/['to block or not to block' article]. In addition to the signature, Quarkus now looks for this specific annotation.\n"
"If your JVM does not provide virtual thread support, it does fall back to platform threads."
msgstr "这一新策略扩展了 link:https://quarkus.io/blog/resteasy-reactive-smart-dispatch/[\"阻止或不阻止 \"一文] 中解释的 _智能调度_ 。除了签名外，Quarkus 现在还会查找这一特定注解。如果你的 JVM 不提供虚拟线程支持，它就会退回到平台线程。"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "Let's rewrite the same example using a virtual thread (the full code is available in https://github.com/quarkusio/virtual-threads-demos/tree/main/rest-example[this repository]):"
msgstr "让我们使用虚拟线程重写相同的示例（完整代码可在 link:https://github.com/quarkusio/virtual-threads-demos/tree/main/rest-example[此版本库中] 获取）："

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "It's the code from the first snippet (the imperative one), but its execution model is closer to the reactive one:"
msgstr "这是第一个代码片段（命令式代码）中的代码，但其执行模式更接近于反应式代码："

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"For every request, a virtual thread is created.\n"
"When a carrier thread is idle, the virtual thread is mounted on that carrier thread and executed.\n"
"When the virtual thread needs to execute the I/O (the call to the remote service), it only blocks the virtual thread.\n"
"The carrier thread is released, and can mount another virtual thread (like the one handling the second request while the I/O from the first one is pending).\n"
"When the I/O completes, a carrier thread (not necessarily the same one) restores the blocked virtual thread and continues its execution until the response is ready to be sent back to the client.\n"
"The code snippet works as described because the Quarkus REST client is virtual-thread-friendly; we will see exceptions in the next section."
msgstr "每个请求都会创建一个虚拟线程。当载体线程空闲时，虚拟线程会挂载到该载体线程上并执行。当虚拟线程需要执行 I/O（调用远程服务）时，它只会阻塞虚拟线程。载体线程被释放，可以挂载另一个虚拟线程（如在第一个线程的 I/O 待处理期间处理第二个请求的线程）。I/O 完成后，载波线程（不一定是同一线程）会恢复被阻塞的虚拟线程，并继续执行，直到响应准备好发送回客户端。由于 Quarkus REST 客户端对虚拟线程友好，因此代码片段能如描述的那样运行；我们将在下一节看到例外情况。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"Virtual threads in Quarkus are not limited to HTTP endpoints.\n"
"The following snippet shows how you can process Kafka/Pulsar/AMQP messages on virtual threads:"
msgstr "Quarkus 中的虚拟线程并不局限于 HTTP 端点。下面的代码段展示了如何在虚拟线程上处理 Kafka/Pulsar/AMQP 消息："

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"Attentive readers may have seen that the virtual thread integration relies on _reactive_ extensions.\n"
"These extensions provide more flexibility (such as the control on which thread the processing is executed) to integrate virtual threads properly and efficiently.\n"
"It's important to understand that for the developer, it's invisible (except the `@RunOnVirtualThread` annotation)."
msgstr "细心的读者可能已经发现，虚拟线程集成依赖于 _反应式_ 扩展。这些扩展提供了更多的灵活性（例如控制在哪个线程上执行处理），以便正确、高效地集成虚拟线程。重要的是要明白，对于开发人员来说，这些扩展是不可见的（除了 `@RunOnVirtualThread` 注释）。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "Five things you need to know before using virtual threads for everything"
msgstr "使用虚拟线程之前需要了解的五件事"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"Well, you probably see this coming.\n"
"There is no free lunch.\n"
"You need to know a few things before utilizing virtual threads for everything.\n"
"These are the reasons why, currently, there is no global switch to run exclusively on virtual threads in Quarkus."
msgstr "好吧，你可能已经预料到了。天下没有免费的午餐。在使用虚拟线程之前，你需要了解一些事情。这就是为什么目前 Quarkus 没有全局开关，无法完全使用虚拟线程运行的原因。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "1. Pinning"
msgstr ""
"\n"
" 别针"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"As described above, when a virtual thread executes a blocking operation, it gets unmounted from the carrier thread, preventing the carrier thread from being blocked.\n"
"However, sometimes, the virtual thread cannot be unmounted because its state cannot be stored in the heap.\n"
"It happens when the thread holds a monitor lock or has a native call in the stack:"
msgstr "如上所述，当虚拟线程执行阻塞操作时，它会从载体线程中卸载，从而防止载体线程被阻塞。但有时，虚拟线程无法卸载，因为其状态无法存储在堆中。当线程持有监控锁或堆栈中有本地调用时，就会出现这种情况："

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "In this case, the carrier thread is blocked, so the OS thread is blocked:"
msgstr "在这种情况下，载波线程被阻塞，因此操作系统线程也被阻塞："

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"Unfortunately, as of today, lots of Java libraries are pinning the carrier thread.\n"
"The Quarkus team and Red Hat, in general, have patched many libraries (such as Narayana (the transaction manager of Quarkus) or Hibernate ORM) to avoid pinning.\n"
"However, when you use a library, be careful.\n"
"It will take time until all the code gets reworked in a more virtual-thread-friendly way."
msgstr "不幸的是，到今天为止，很多 Java 库都在钉住载体线程。一般来说，Quarkus 团队和 Red Hat 已经对许多库（如 Narayana（Quarkus 的事务管理器）或 Hibernate ORM）打了补丁，以避免钉住线程。不过，在使用库时一定要小心。在所有代码都以对虚拟线程更友好的方式重新修改之前，这需要时间。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "2. Monopolization"
msgstr ""
"\n"
" 垄断"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"As for the reactive model, if the virtual thread executes intensive and long computation, it monopolizes that carrier.\n"
"The virtual thread scheduler is not preemptive.\n"
"So it cannot interrupt a running thread.\n"
"It needs to wait for an I/O or the completion of the computation.\n"
"Until then, this carrier thread cannot execute other virtual threads:"
msgstr "至于反应式模型，如果虚拟线程执行密集和长时间的计算，它就会垄断该载体。虚拟线程调度器不是抢占式的。因此它不能中断正在运行的线程。它需要等待 I/O 或计算完成。在此之前，该载体线程无法执行其他虚拟线程："

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "Using a dedicated platform thread pool might be wiser when executing long computations."
msgstr "在执行长时间计算时，使用专用平台线程池可能更明智。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "3. Carrier thread pool elasticity"
msgstr ""
"\n"
" 载体线池弹性"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "When there is pinning or monopolization, the JVM may create new carrier threads (as illustrated on the previous picture) to avoid having too many unscheduled virtual threads."
msgstr "当出现钉扎或垄断时，JVM 可能会创建新的载波线程（如上图所示），以避免出现过多未计划的虚拟线程。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"These creations are creating platform/OS threads.\n"
"So, it's expensive and uses memory.\n"
"You especially need to pay attention to the second point.\n"
"You may hit the memory limit if you run on low resources and your code is not very virtual-thread-friendly, meaning that you should always check for pinning, monopolization, and memory usage.\n"
"If you don't, in a container with memory constraints, the application can be killed."
msgstr "这些创建正在创建平台/操作系统线程。因此，这很昂贵，而且会占用内存。你尤其需要注意第二点。如果运行资源较少，而且代码对虚拟线程不太友好，就可能会触及内存限制，也就是说，你应该经常检查钉住、垄断和内存使用情况。否则，在有内存限制的容器中，应用程序可能会被杀死。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "4. Object pooling"
msgstr ""
"\n"
" 对象池"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"For years, threads were scarce resources.\n"
"It was recommended to pool them and reuse them.\n"
"This good practice has encouraged the use of thread locals as an object-pooling mechanism.\n"
"Like https://github.com/FasterXML/jackson-core/issues/919[Jackson] or Netty, many libraries store expensive objects in thread locals.\n"
"These objects can only be accessed by the code running on the thread in which the objects are stored.\n"
"Because the number of threads was limited, it capped the number of creation.\n"
"Also, because threads were reused, the objects were cached and reused.\n"
"Unfortunately, these two assumptions are not valid with virtual threads:\n"
"You can have a lot of them, they are not reused.\n"
"It's even discouraged to pool them.\n"
"Thus, libraries utilizing these pooling patterns may underperform when using virtual threads.\n"
"You will see many allocations of large objects, as every virtual thread will get its own instance of the object."
msgstr "多年来，线程一直是稀缺资源。建议将线程池化并重复使用。这种良好的做法鼓励人们使用线程本地作为对象池机制。与 link:https://github.com/FasterXML/jackson-core/issues/919[Jackson] 或 Netty 类似，许多库将昂贵的对象存储在线程局部中。只有在存储对象的线程上运行的代码才能访问这些对象。由于线程数量有限，因此创建数量也受到限制。此外，由于线程被重复使用，对象也被缓存和重复使用。遗憾的是，这两个假设在虚拟线程中并不成立：你可以有很多线程，但它们不会被重复使用。我们甚至不鼓励将它们池化。因此，使用这些池模式的库在使用虚拟线程时可能会表现不佳。你会看到很多大型对象的分配，因为每个虚拟线程都会获得自己的对象实例。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"Replacing this pattern is not an easy task.\n"
"As an example, this https://github.com/FasterXML/jackson-core/pull/1064[PR] from Mario Fusco proposes an SPI for Jackson.\n"
"Quarkus will implement the SPI to provide a virtual-thread-friendly pool mechanism."
msgstr "替换这种模式并非易事。例如，马里奥-弗斯科（Mario Fusco）的这份 link:https://github.com/FasterXML/jackson-core/pull/1064[公关] 建议为杰克逊提供 SPI。Quarkus 将实现 SPI，以提供虚拟线程友好的池机制。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "5. Stressing thread safety"
msgstr ""
"\n"
" 强调螺纹安全"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"Virtual threads provide a new way to build concurrent applications in Java.\n"
"You are not limited by the number of threads in the pool.\n"
"You do not have to use asynchronous development models."
msgstr "虚拟线程为在 Java 中构建并发应用程序提供了一种新方法。您不受线程池中线程数量的限制。您不必使用异步开发模型。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"But, before rewriting your application to leverage this new mechanism, ensure the code is thread-safe.\n"
"Many libraries and frameworks do not allow concurrent access to some objects.\n"
"For example, database connections should not be accessed concurrently.\n"
"You must be cautious when you have many virtual threads, especially when using the structured concurrency API (still in preview in Java 21)."
msgstr "但是，在重写应用程序以利用这种新机制之前，请确保代码是线程安全的。许多库和框架不允许并发访问某些对象。例如，不应并发访问数据库连接。当您有很多虚拟线程时，尤其是使用结构化并发 API（Java 21 中仍处于预览阶段）时，您必须小心谨慎。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"When using structured concurrency, it becomes easy to run tasks in _parallel_.\n"
"However, you must be absolutely sure that these tasks to not access a shared state which do not support concurrent access:"
msgstr "使用结构化并发时， _并行_ 运行任务变得很容易。但必须绝对确保这些任务不会访问不支持并发访问的共享状态："

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "Summary and what's next"
msgstr "总结和下一步工作"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"This post described the new kind of thread available in Java 21 and how to use them in Quarkus.\n"
"Virtual threads are not a silver bullet, and while they can improve the concurrency, there are a few limitations you need to be aware of:"
msgstr "这篇文章介绍了 Java 21 中的新型线程，以及如何在 Quarkus 中使用它们。虚拟线程并非灵丹妙药，虽然它们可以提高并发性，但也有一些限制需要注意："

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "Many libraries are pinning the carrier thread; it will take time until the Java world becomes virtual-thread-friendly."
msgstr "许多库都在锁定载体线程；Java 世界需要一段时间才能变得对虚拟线程友好。"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "Lengthy computations must be analyzed cautiously to avoid monopolization issues."
msgstr "必须谨慎分析冗长的计算，以避免出现垄断问题。"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "The carrier thread pool elasticity may result in high memory usage."
msgstr "载波线程池弹性可能会导致内存使用率过高。"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "The thread-local object polling pattern can have terrible consequences on the allocations and memory usage."
msgstr "线程本地对象轮询模式会给分配和内存使用带来可怕的后果。"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "Virtual threads do not prevent thread safety issues."
msgstr "虚拟线程不能防止线程安全问题。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"It is the first part (and the most boring, hopefully) post of a multiple-post series.\n"
"Next, we will cover:"
msgstr "这是多篇系列文章的第一部分（希望也是最无聊的部分）。接下来，我们将介绍"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "https://quarkus.io/blog/virtual-threads-2/[How to write a crud application using virtual threads]"
msgstr "link:https://quarkus.io/blog/virtual-threads-2/[如何使用虚拟线程编写垃圾应用程序]"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "https://quarkus.io/blog/virtual-threads-3/[How to test virtual threads applications]"
msgstr "link:https://quarkus.io/blog/virtual-threads-3/[如何测试虚拟线程应用程序]"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "https://quarkus.io/blog/virtual-threads-4/[How to process Kafka messages using virtual threads]"
msgstr "link:https://quarkus.io/blog/virtual-threads-4/[如何使用虚拟线程处理 Kafka 报文]"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "https://quarkus.io/blog/virtual-threads-5/[How to build a native executable when using virtual threads]"
msgstr "link:https://quarkus.io/blog/virtual-threads-5/[使用虚拟线程时如何创建本地可执行文件]"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "https://quarkus.io/blog/virtual-threads-6/[How to containerize an application using virtual threads]"
msgstr "link:https://quarkus.io/blog/virtual-threads-6/[如何使用虚拟线程将应用程序容器化]"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "What are we exploring to improve the virtual thread support in Quarkus (_to be published_)"
msgstr "我们正在探索如何改进 Quarkus 的虚拟线程支持 _（待发布）_"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "To know more about the virtual thread support in Quarkus, check the https://quarkus.io/guides/virtual-threads[Virtual thread reference guide]."
msgstr "要了解有关 Quarkus 虚拟线程支持的更多信息，请查看 link:https://quarkus.io/guides/virtual-threads[虚拟线程参考指南] 。"
