# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-12-14 16:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2023-09-19-virtual-thread-1.adoc
#, no-wrap
msgid "When Quarkus meets Virtual Threads"
msgstr ""

#. type: YAML Front Matter: synopsis
#: _posts/2023-09-19-virtual-thread-1.adoc
#, no-wrap
msgid "What do virtual threads change when building concurrent applications with Quarkus."
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid ""
"Java 21 offers a new feature that will reshape the development of concurrent applications in Java.\n"
"For over two years, the Quarkus team explored integrating this new feature to ease the development of distributed applications, including microservices and event-driven applications."
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid ""
"This blog post is the first part of a series of posts and videos demonstrating how to use virtual threads in Quarkus applications.\n"
"The series covers REST, messaging, containers, native compilation, and our plans for the future.\n"
"But first, let's look at virtual threads, what they change, and what you should know about them."
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid "The Java world before Java 21"
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid ""
"At the beginning of the Java time, Java had _green threads_.\n"
"Green threads were user-level threads scheduled by the Java virtual machine (JVM) instead of natively by the underlying operating system (OS).\n"
"They emulated multithreaded environments without relying on native OS abilities.\n"
"They were managed in user space instead of kernel space, enabling them to work in environments that do not have native thread support.\n"
"Green threads were briefly available in Java between 1997 and 2000.\n"
"I used green threads; they did not leave me with a fantastic memory."
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid ""
"In Java 1.3, released in 2000, Java made a big step forward and started integrating OS threads.\n"
"So, the threads are managed by the operating system.\n"
"It is still the model we are using today.\n"
"Each time a Java application creates a thread, a platform thread is created, which wraps an OS thread.\n"
"So, creating a platform thread creates an OS thread, and **blocking a platform thread blocks an OS thread**."
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid ""
"When you use a Java application framework, you rarely create threads yourself.\n"
"It is done for you by the framework.\n"
"For example, when your application receives an HTTP request, the framework creates or reuses a platform thread (and so an OS thread) and executes the processing on that thread.\n"
"The whole processing runs on this thread, and the thread cannot be reused until the processing completes (so the response is sent back).\n"
"When the processing executes a blocking I/O operation, like calling another service, writing to the file system, or interacting with a database, the thread is blocked, waiting for the response.\n"
"As mentioned above, the OS thread is also blocked while waiting.\n"
"When this response is received, the processing continues:"
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid ""
"This model has the advantage of being simple to program with.\n"
"The code follows an imperative model.\n"
"The code is executed sequentially.\n"
"It's simple to write, simple to reason about.\n"
"For example, the following snippet shows how you receive an HTTP request, call another HTTP service, and return a response with Quarkus.\n"
"It follows the sequence diagram from above."
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid ""
"But there is a limit to that imperative model.\n"
"You can only handle _n_ requests concurrently, with _n_ the number of threads the framework can create.\n"
"OS threads are expensive.\n"
"They consume memory (around 1 Mb per thread), are expensive to create, use CPU to schedule themâ€¦\n"
"Frameworks use thread pools to allow reusing idle threads, but when the concurrency level exceeds your number of threads, you start pilling up requests, increasing the response time, and, in the worst case, even rejecting requests.\n"
"Increasing the thread pool size and, consequently, swelling the memory usage can blow up your Cloud bill and deployment density.\n"
"Futhermore, adding more threads may not even improve the concurrency as explained by the https://youtu.be/07V08SB1l8c?t=142[Little Law]."
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid ""
"The reactive movement proposed an alternative model to work around that issue.\n"
"It promotes the usage of non-blocking I/O and asynchronous development models to use resources (CPU and memory) more efficiently.\n"
"With the reactive model, **a single thread can handle multiple concurrent requests**.\n"
"So, instead of having a large pool of threads, you have a minimum number of threads (generally equal to the number of CPU cores).\n"
"This small amount of threads, often named event loops, handles all your requests.\n"
"When a request is received, it calls the processing code on one of these threads.\n"
"When the processing needs to execute an I/O operation, instead of using blocking I/O, it schedules the operations and passes a **continuation**.\n"
"This continuation is the code to be invoked when the I/O completes, so basically, the rest of the processing:"
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid ""
"The reactive model is highly efficient, but there is a catch.\n"
"As mentioned, you need to write your code as a chain of continuations.\n"
"While there are multiple approaches, such as callbacks, futures, reactive programming, or co-routines, it makes the code harder to reason about.\n"
"The code must be structured in a way that may not be natural for every developer.\n"
"That limits the adoption of this solution.\n"
"Also, the code can not only block during I/O operation; it must not execute lengthy processing (what we call monopolization).\n"
"The model's efficiency comes from the ability to process many requests concurrently.\n"
"If the thread is used for a long time, it does not allow the other requests to be processed, and, as for the imperative model, you start piling up requests."
msgstr ""

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
msgid "To illustrate the difference between the imperative and reactive model, the following snippet is equivalent to the previous one: it receives an HTTP request, calls another HTTP service, and returns a response. But this time, it uses the Quarkus reactive model."
msgstr ""

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
msgid "An application with this code handles more concurrent requests and uses less memory than the imperative one, but, the development model is different."
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid ""
"Most of the time, the reactive and imperative models are opposed.\n"
"This does not need to be the case.\n"
"Quarkus uses a reactive core and lets you decide if you want to use the reactive or imperative model.\n"
"Check the https://quarkus.io/blog/resteasy-reactive-smart-dispatch/['to block or not to block' article] for more details about this ability."
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid "What do virtual threads change?"
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid ""
"Java 19 introduced a new type of thread: virtual threads.\n"
"In Java 21, this API became generally available."
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid ""
"But what are these virtual threads?\n"
"Virtual threads reuse the idea of the reactive paradigm but allow an imperative development model.\n"
"You get the benefits from the reactive and imperative models without the drawbacks!"
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid ""
"Like with green threads, virtual threads are managed by the JVM.\n"
"Virtual threads occupy less space than platform threads in memory.\n"
"Hence, using more virtual threads than platform threads simultaneously becomes possible without blowing up the memory.\n"
"Virtual threads are supposed to be disposable entities that we create when we need them; pooling or reusing them for different tasks is discouraged."
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid ""
"But what does it change?\n"
"Blocking a virtual thread is, in general, very cheap!\n"
"There is a pinch of magic that makes virtual thread very appealing.\n"
"When your code running on a virtual thread needs to execute an I/O operation, it uses a blocking API.\n"
"So, the code waits for the result, as with the imperative model.\n"
"However, since the JVM manages virtual threads, no underlying OS thread is blocked when they perform this blocking operation.\n"
"The state of the virtual thread is stored in the heap, and another virtual thread can be executed on the same Java platform (carrier) thread, exactly as in the reactive model.\n"
"When the I/O operation completes, the virtual thread becomes executable again, and when a carrier thread is available, the state of the virtual thread is restored, and the execution continues.\n"
"For the developer, this magic is invisible!\n"
"You just write synchronous code, and it's executed like proper reactive code without blocking the OS thread."
msgstr ""

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
msgid "Your code runs on top of virtual threads, but under the hood, only a few carrier threads execute them."
msgstr ""

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
msgid "To summarize, virtual threads are:"
msgstr ""

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
msgid "Lightweight - you can have a LOT of them"
msgstr ""

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
msgid "Cheap to create - no need to pool them anymore"
msgstr ""

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
msgid "Cheap to block when using blocking operations - blocking a virtual thread does not block the underlying OS thread when executing I/O operations"
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid "How can you use virtual threads in Quarkus?"
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid ""
"Using virtual threads in Quarkus is straightforward.\n"
"You only need to use the `@RunOnVirtualThread` annotation.\n"
"It indicates to Quarkus to invoke the annotated method on a virtual thread instead of a regular platform thread."
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid ""
"This new strategy extends the _smart dispatch_ explained in the https://quarkus.io/blog/resteasy-reactive-smart-dispatch/['to block or not to block' article]. In addition to the signature, Quarkus now looks for this specific annotation.\n"
"If your JVM does not provide virtual thread support, it does fall back to platform threads."
msgstr ""

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
msgid "Let's rewrite the same example using a virtual thread (the full code is available in https://github.com/quarkusio/virtual-threads-demos/tree/main/rest-example[this repository]):"
msgstr ""

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
msgid "It's the code from the first snippet (the imperative one), but its execution model is closer to the reactive one:"
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid ""
"For every request, a virtual thread is created.\n"
"When a carrier thread is idle, the virtual thread is mounted on that carrier thread and executed.\n"
"When the virtual thread needs to execute the I/O (the call to the remote service), it only blocks the virtual thread.\n"
"The carrier thread is released, and can mount another virtual thread (like the one handling the second request while the I/O from the first one is pending).\n"
"When the I/O completes, a carrier thread (not necessarily the same one) restores the blocked virtual thread and continues its execution until the response is ready to be sent back to the client.\n"
"The code snippet works as described because the Quarkus REST client is virtual-thread-friendly; we will see exceptions in the next section."
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid ""
"Virtual threads in Quarkus are not limited to HTTP endpoints.\n"
"The following snippet shows how you can process Kafka/Pulsar/AMQP messages on virtual threads:"
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid ""
"Attentive readers may have seen that the virtual thread integration relies on _reactive_ extensions.\n"
"These extensions provide more flexibility (such as the control on which thread the processing is executed) to integrate virtual threads properly and efficiently.\n"
"It's important to understand that for the developer, it's invisible (except the `@RunOnVirtualThread` annotation)."
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid "Five things you need to know before using virtual threads for everything"
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid ""
"Well, you probably see this coming.\n"
"There is no free lunch.\n"
"You need to know a few things before utilizing virtual threads for everything.\n"
"These are the reasons why, currently, there is no global switch to run exclusively on virtual threads in Quarkus."
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid "1. Pinning"
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid ""
"As described above, when a virtual thread executes a blocking operation, it gets unmounted from the carrier thread, preventing the carrier thread from being blocked.\n"
"However, sometimes, the virtual thread cannot be unmounted because its state cannot be stored in the heap.\n"
"It happens when the thread holds a monitor lock or has a native call in the stack:"
msgstr ""

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
msgid "In this case, the carrier thread is blocked, so the OS thread is blocked:"
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid ""
"Unfortunately, as of today, lots of Java libraries are pinning the carrier thread.\n"
"The Quarkus team and Red Hat, in general, have patched many libraries (such as Narayana (the transaction manager of Quarkus) or Hibernate ORM) to avoid pinning.\n"
"However, when you use a library, be careful.\n"
"It will take time until all the code gets reworked in a more virtual-thread-friendly way."
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid "2. Monopolization"
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid ""
"As for the reactive model, if the virtual thread executes intensive and long computation, it monopolizes that carrier.\n"
"The virtual thread scheduler is not preemptive.\n"
"So it cannot interrupt a running thread.\n"
"It needs to wait for an I/O or the completion of the computation.\n"
"Until then, this carrier thread cannot execute other virtual threads:"
msgstr ""

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
msgid "Using a dedicated platform thread pool might be wiser when executing long computations."
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid "3. Carrier thread pool elasticity"
msgstr ""

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
msgid "When there is pinning or monopolization, the JVM may create new carrier threads (as illustrated on the previous picture) to avoid having too many unscheduled virtual threads."
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid ""
"These creations are creating platform/OS threads.\n"
"So, it's expensive and uses memory.\n"
"You especially need to pay attention to the second point.\n"
"You may hit the memory limit if you run on low resources and your code is not very virtual-thread-friendly, meaning that you should always check for pinning, monopolization, and memory usage.\n"
"If you don't, in a container with memory constraints, the application can be killed."
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid "4. Object pooling"
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid ""
"For years, threads were scarce resources.\n"
"It was recommended to pool them and reuse them.\n"
"This good practice has encouraged the use of thread locals as an object-pooling mechanism.\n"
"Like https://github.com/FasterXML/jackson-core/issues/919[Jackson] or Netty, many libraries store expensive objects in thread locals.\n"
"These objects can only be accessed by the code running on the thread in which the objects are stored.\n"
"Because the number of threads was limited, it capped the number of creation.\n"
"Also, because threads were reused, the objects were cached and reused.\n"
"Unfortunately, these two assumptions are not valid with virtual threads:\n"
"You can have a lot of them, they are not reused.\n"
"It's even discouraged to pool them.\n"
"Thus, libraries utilizing these pooling patterns may underperform when using virtual threads.\n"
"You will see many allocations of large objects, as every virtual thread will get its own instance of the object."
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid ""
"Replacing this pattern is not an easy task.\n"
"As an example, this https://github.com/FasterXML/jackson-core/pull/1064[PR] from Mario Fusco proposes an SPI for Jackson.\n"
"Quarkus will implement the SPI to provide a virtual-thread-friendly pool mechanism."
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid "5. Stressing thread safety"
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid ""
"Virtual threads provide a new way to build concurrent applications in Java.\n"
"You are not limited by the number of threads in the pool.\n"
"You do not have to use asynchronous development models."
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid ""
"But, before rewriting your application to leverage this new mechanism, ensure the code is thread-safe.\n"
"Many libraries and frameworks do not allow concurrent access to some objects.\n"
"For example, database connections should not be accessed concurrently.\n"
"You must be cautious when you have many virtual threads, especially when using the structured concurrency API (still in preview in Java 21)."
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid ""
"When using structured concurrency, it becomes easy to run tasks in _parallel_.\n"
"However, you must be absolutely sure that these tasks to not access a shared state which do not support concurrent access:"
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid "Summary and what's next"
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid ""
"This post described the new kind of thread available in Java 21 and how to use them in Quarkus.\n"
"Virtual threads are not a silver bullet, and while they can improve the concurrency, there are a few limitations you need to be aware of:"
msgstr ""

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
msgid "Many libraries are pinning the carrier thread; it will take time until the Java world becomes virtual-thread-friendly."
msgstr ""

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
msgid "Lengthy computations must be analyzed cautiously to avoid monopolization issues."
msgstr ""

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
msgid "The carrier thread pool elasticity may result in high memory usage."
msgstr ""

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
msgid "The thread-local object polling pattern can have terrible consequences on the allocations and memory usage."
msgstr ""

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
msgid "Virtual threads do not prevent thread safety issues."
msgstr ""

#: _posts/2023-09-19-virtual-thread-1.adoc
msgid ""
"It is the first part (and the most boring, hopefully) post of a multiple-post series.\n"
"Next, we will cover:"
msgstr ""

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
msgid "https://quarkus.io/blog/virtual-threads-2/[How to write a crud application using virtual threads]"
msgstr ""

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
msgid "https://quarkus.io/blog/virtual-threads-3/[How to test virtual threads applications]"
msgstr ""

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
msgid "https://quarkus.io/blog/virtual-threads-4/[How to process Kafka messages using virtual threads]"
msgstr ""

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
msgid "https://quarkus.io/blog/virtual-threads-5/[How to build a native executable when using virtual threads]"
msgstr ""

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
msgid "https://quarkus.io/blog/virtual-threads-6/[How to containerize an application using virtual threads]"
msgstr ""

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
msgid "What are we exploring to improve the virtual thread support in Quarkus (_to be published_)"
msgstr ""

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
msgid "To know more about the virtual thread support in Quarkus, check the https://quarkus.io/guides/virtual-threads[Virtual thread reference guide]."
msgstr ""
