# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:1
#, no-wrap
msgid "cescoffier"
msgstr ""

#. type: YAML Front Matter: date
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:1
#, no-wrap
msgid "2020-09-02"
msgstr ""

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:1
#, no-wrap
msgid "post"
msgstr ""

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:1
#, no-wrap
msgid "How to compose asynchronous actions with Mutiny"
msgstr ""

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:1
#, no-wrap
msgid "reactive mutiny redis"
msgstr ""

#. type: YAML Front Matter: title
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:1
#, no-wrap
msgid "Using Redis with Mutiny - Composing asynchronous actions"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:11
msgid "I got an interesting question from a user about Redis and Mutiny. While the problem was not specifically about Redis and could be applied to many other APIs, I found the context amusing."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:13
msgid "Enrico, the user, wanted to do something like this:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:20
#, no-wrap
msgid ""
"1. get all keys from Redis\n"
"2. for each key -> retrieve the associated object\n"
"3. add this object to a JsonArray \n"
"4. produce the JsonArray with all the objects\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:23
msgid "Enrico is using the Mutiny variant of the Vert.x Redis Client."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:25
msgid "This client offers a few methods to help us with our problem:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:27
msgid "the `RedisClient.keys(pattern)` method returning `Uni<JsonArray>`. This array contains the list of keys matching a pattern passed to the `keys` method. To simplify this post, let's use: `keys(\"*\")` returning all the keys."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:28
msgid "the `RedisClient.hgetall(key)` method returning a `Uni<JsonObject>`. This method retrieves the object associated with the passed key."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:30
msgid "Both methods are asynchronous (they return `Uni`), and we need to call the second one for each retrieved key. In other words, we need to iterate over the set of keys, and for each key to invoke an asynchronous action. Finally, we want to collect the result of these asynchronous actions into a `JsonArray`."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:32
msgid "Let's start with the beginning; we need the Redis Client instance:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:38
#, no-wrap
msgid ""
"RedisClient redis = RedisClient.create(vertx, new JsonObject()\n"
"     .put(\"port\", 6379)\n"
"     .put(\"host\", \"localhost\"));\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:41
msgid "Note that in Quarkus, you should use the Redis extension directly, which exposes a similar API. Enrico wanted to use the Vert.x Redis Client directly."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:43
msgid "Now that we have our client, let's retrieve the list of keys:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:47
#, no-wrap
msgid "Uni<JsonArray> keys = redis.keys(\"*\")\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:50
msgid "That produces the `JsonArray`, but we want a stream of keys.  Again, it's an asynchronous method. The returned `Uni` receives the array when it's available. Once received (`onItem`), we can create a stream out of this array:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:56
#, no-wrap
msgid ""
"Multi<String> keys = redis.keys(\"*\")\n"
"     .onItem().transformToMulti(array -> Multi.createFrom().iterable(array))\n"
"     .onItem().castTo(String.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:59
msgid "This snippet:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:61
msgid "retrieves the `JsonArray` containing the keys"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:62
msgid "creates a `Multi` streaming these keys, it's a `Multi<Object>` as a `JsonArray` is extending `Iterable<Object>`"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:63
msgid "maps the items from this `Multi` to `String`"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:65
msgid "At this point, we have a stream of (String) keys. So, we are done with step 1."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:67
msgid "Now, step 2: for each key, we want to retrieve the associated object."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:69
msgid "So let's use the `hgetall` method:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:74
#, no-wrap
msgid ""
"Multi<JsonObject> objects = keys\n"
"  .onItem().transformToUniAndMerge(key -> redis.hgetall(key));\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:77
msgid "This snippet requires a bit of an explanation."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:79
msgid "For each item of the stream `keys`, we call `hgetall`, which produces a `Uni<JsonObject>`."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:81
msgid "So, we want to transform our key into a Uni (*transformToUni*)."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:83
msgid "When you have a stream of items and need to invoke an asynchronous action for each item, you must choose how you will merge the results. Mutiny provides two strategies:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:85
#, no-wrap
msgid "*merge -* as soon as the item produced by the `Uni` is received we send it downstream\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:86
#, no-wrap
msgid "*concatenate* - we preserve the order of the input stream to be sure that the items are sent downstream in the same order\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:88
msgid "Let's illustrate this. Imagine we have the keys `1`, `2`, `3` and to the stream `{1, 2, 3}`. Also, let's consider that in our Redis database, the key `1` is associated to `A`, `2` to `B` and `3` to `C`."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:90
msgid "If you use the *merge* strategy, we are retrieving the associated objects in an undetermined order. We can end up with `{A, C, B}` or `{B, A, C}`. It depends on many factors, such as the latency, scheduling, load and so on. However, it also means we can retrieve all the associated objects concurrently and produce the resulting stream without taking care of the order."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:92
msgid "If you use the *concatenate* strategy, it preserves the order from the input stream. So, it will always produce `{A, B, C}`. While it may be desirable, it may reduce the ability to retrieve the object concurrently, as Mutiny has to *wait* for all the retrieval of all the previous objects. For example, if Mutiny receives `C` first, it needs to wait for `A` and `B` before sending `C` downstream."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:94
msgid "In our context, let's not preserve the order and use the *merge* strategy. So we use `transformToUniAndMerge`."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:96
msgid "If you run the code multiple times, you might see order changes in the resulting array."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:98
msgid "Ok, step 2 done. Let's focus on the final steps: accumulate the objects into a `JsonArray`, and produce a `Uni<JsonArray>`, containing all the objects. Mutiny provides methods to gather items from a stream into lists, maps, sets, but there is no built-in `JsonArray` support. Fortunately, Mutiny offers a method that you can use to collect items in any structure:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:103
#, no-wrap
msgid ""
"Uni<JsonArray> result = objects\n"
"   .collectItems().in(() -> new JsonArray(), (arr, obj) -> arr.add(obj));\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:106
msgid "`collectItems().in` allows accumulating the items in your own structure. It takes two parameters: a supplier of the structure, called only once, and a bi-consumer taking the structure and the item to add, called for each item."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:108
msgid "Here we go, we have everything to solve Enrico's question."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:110
msgid "The *all in one* code is the following:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:122
#, no-wrap
msgid ""
"Uni<JsonArray> result = \n"
"  // Step 1 - retrieve the keys\n"
"  redis.keys(\"*\") \n"
"    .onItem().transformToMulti(keys -> Multi.createFrom().iterable(keys))\n"
"    .onItem().castTo(String.class)\n"
"  // Step 2 - retrieve the associated object for each key\n"
"    .onItem().transformToUniAndMerge(key -> redis.hgetall(key))\n"
"  // Step 3 and 4 - accumulate the retrieved object in a JsonArray\n"
"    .collectItems().in(() -> new JsonArray(), (arr, obj) -> arr.add(obj));\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:125
msgid "In this snippet, there are a few interesting patterns:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:127
msgid "When you have a collection, and you want to iterate on it with Mutiny, transform it into a `Multi`"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:128
msgid "When you execute asynchronous action for each item of a stream, think about *merge* vs. *concatenate.* Use the one that makes sense for you."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:129
msgid "To accumulate items into a structure, use `collectItems`, it offers many methods to produce your structure of choice."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:131
msgid "If you want to see this code in action, check this https://gist.github.com/cescoffier/e8c8a18897f9e5ca15f1378876a1bd93[gist]. You even can run it directly with JBang:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:135
#, no-wrap
msgid "jbang https://gist.github.com/cescoffier/e8c8a18897f9e5ca15f1378876a1bd93\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:138
msgid "You can replace *merge* with *concatenate* to see the difference."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:139
msgid "Enjoy!"
msgstr ""
