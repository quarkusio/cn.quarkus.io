# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-06-26 15:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: _posts/2023-06-26-podman-for-windows.adoc
#, fuzzy, no-wrap
msgid "Quarkus Native with Podman for Windows"
msgstr "Quarkus Native与Podman for Windows"

#: _posts/2023-06-26-podman-for-windows.adoc
msgid ""
"Developers who use Windows workstations might face the challenge of running Linux-native workflows.\n"
"One way to achieve this is by using Podman, a container engine that provides a command line capability\n"
"to run Linux containers. Podman supports running containers both as \"rootful\" and as \"rootless\",\n"
"with the latter being the default that doesn't require elevated privileges. In this blog post,\n"
"we'll explore how to use Podman with Quarkus Native to build and run applications on Windows."
msgstr ""

#. type: Title ==
#: _posts/2023-06-26-podman-for-windows.adoc
#, fuzzy, no-wrap
msgid "Installing Podman on Windows"
msgstr "在Windows上安装Podman"

#: _posts/2023-06-26-podman-for-windows.adoc
msgid ""
"In my latest experience, I used two setups, a Windows 10 on an older baremetal Xeon based desktop\n"
"and a Windows 10 Qemu driven VM on my CentOS 8 Stream Linux laptop. The former being without any\n"
"hiccups using https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md[Podman for Windows]\n"
"guide while the latter required some link:/assets/examples/posts/podman-for-windows/win10.xml.txt[manual tweaks] in\n"
"`+/etc/libvirt/qemu/win10.xml+` to allow for nested virtualization.\n"
"Your mileage might vary with guest Windows and hypervisor versions though."
msgstr ""

#: _posts/2023-06-26-podman-for-windows.adoc
msgid ""
"Besides the command line, there is also a full Podman Desktop experience available on https://podman-desktop.io/.\n"
"The installer checks your setup and guides you:"
msgstr ""

#. type: Title ==
#: _posts/2023-06-26-podman-for-windows.adoc
#, fuzzy, no-wrap
msgid "Quarkus Native builder image"
msgstr "Quarkus Native builder形象"

#: _posts/2023-06-26-podman-for-windows.adoc
msgid ""
"Both the latest Quarkus 2 and Quarkus 3 autodetects whether either Podman or Docker is installed, and it uses\n"
"it to run containers."
msgstr ""

#: _posts/2023-06-26-podman-for-windows.adoc
msgid ""
"We will use a QuickStart example that watermarks images. The example depends on Quarkus AWT extension that is not yet\n"
"ported to run natively on Windows, yet we use a Windows workstation to develop our Java code, so using a Linux container to do the\n"
"native build suits us well. We use https://github.com/cmderdev/cmder[cmder] terminal on Windows, but a plain cmd prompt\n"
"would do too."
msgstr ""

#: _posts/2023-06-26-podman-for-windows.adoc
msgid ""
"Depending on your Podman installation, you might need to run `+podman machine start+` too.\n"
"link:/assets/examples/posts/podman-for-windows/podman-win-output-sdasff.txt[Podman output]."
msgstr ""

#: _posts/2023-06-26-podman-for-windows.adoc
msgid ""
"C:\\tmp\\quarkus-quickstarts\\awt-graphics-rest-quickstart (development -> origin)\n"
"λ mvnw package -Dnative -Dquarkus.native.container-build=true -Dquarkus.platform.version=3.1.2.Final"
msgstr ""

#. type: Plain text
#: _posts/2023-06-26-podman-for-windows.adoc
#, fuzzy
msgid "link:/assets/examples/posts/podman-for-windows/podman-win-awt-quickstart-build.txt[Full output]"
msgstr "link:/assets/examples/posts/podman-for-windows/podman-win-awt-quickstart-build.txt[全面输出]"

#: _posts/2023-06-26-podman-for-windows.adoc
msgid ""
"We can see in the log that Quarkus detected that we had `+podman.exe+` available, and it used Mandrel builder image\n"
"to do the build, i.e. our Java bytecode alongside with various resources and properties was made available inside\n"
"a Linux container where a `+native-image+` tool created an ELF64 Linux executable. We can see that artifact right in\n"
"our `+target+` directory now:"
msgstr ""

#: _posts/2023-06-26-podman-for-windows.adoc
msgid ""
"We cannot run the executable here on our Windows workstation, yet we can immediately use another Linux image to\n"
"run it in a container:"
msgstr ""

#. type: Plain text
#: _posts/2023-06-26-podman-for-windows.adoc
#, fuzzy
msgid "link:/assets/examples/posts/podman-for-windows/podman-win-container-build.txt[Full output]"
msgstr "link:/assets/examples/posts/podman-for-windows/podman-win-container-build.txt[全面输出]"

#. type: Plain text
#: _posts/2023-06-26-podman-for-windows.adoc
#, fuzzy
msgid "Let’s run it:"
msgstr "让我们来运行它："

#. type: Plain text
#: _posts/2023-06-26-podman-for-windows.adoc
#, fuzzy
msgid "We can have the application watermark an image for us now. First, we need some image to watermark:"
msgstr "我们现在可以让应用程序为我们的图像加水印。首先，我们需要一些图像来做水印："

#. type: Plain text
#: _posts/2023-06-26-podman-for-windows.adoc
#, fuzzy
msgid "Next, we use our locally running container to watermark it:"
msgstr "接下来，我们用我们本地运行的容器来做水印："

#. type: Plain text
#: _posts/2023-06-26-podman-for-windows.adoc
#, fuzzy
msgid "And see the result, word Mandrel in the top left corner and a Quarkus logotype in the bottom right corner:"
msgstr "请看结果，左上角有Mandrel字样，右下角有Quarkus标志："

#. type: Title ==
#: _posts/2023-06-26-podman-for-windows.adoc
#, fuzzy, no-wrap
msgid "Linux containers in your test flow"
msgstr "在你的测试流程中使用Linux容器"

#. type: Plain text
#: _posts/2023-06-26-podman-for-windows.adoc
#, fuzzy
msgid "You can use Podman to run your tests in Linux containers too. For example, you can take advantage of the `+quarkus-container-image-docker+` extension. Add it to the `+pom.xml+`:"
msgstr "你也可以使用Podman在Linux容器中运行你的测试。例如，你可以利用 `quarkus-container-image-docker` 扩展。将其添加到 `pom.xml` ："

#. type: Plain text
#: _posts/2023-06-26-podman-for-windows.adoc
#, fuzzy
msgid "Let's run it:"
msgstr "让我们来运行它："

#. type: Plain text
#: _posts/2023-06-26-podman-for-windows.adoc
#, fuzzy
msgid "Here is the link:/assets/examples/posts/podman-for-windows/podman-win-test-in-linux-container.txt[Full output]."
msgstr "这里是 link:/assets/examples/posts/podman-for-windows/podman-win-test-in-linux-container.txt[完整的输出] 。"

#. type: Plain text
#: _posts/2023-06-26-podman-for-windows.adoc
#, fuzzy
msgid "Browsing the log, we can see that the JVM based test passed first:"
msgstr "浏览日志，我们可以看到，基于JVM的测试首先通过："

#. type: Plain text
#: _posts/2023-06-26-podman-for-windows.adoc
#, fuzzy
msgid "Then the Linux builder image is used to build a Linux executable:"
msgstr "然后使用Linux构建器图像来构建一个Linux可执行文件："

#. type: Plain text
#: _posts/2023-06-26-podman-for-windows.adoc
#, fuzzy
msgid "Next we can see that the integration testsuite decided to build a Linux container image with our newly built executable in it:"
msgstr "接下来我们可以看到，集成测试工具决定建立一个Linux容器镜像，其中有我们新建立的可执行文件："

#. type: Plain text
#: _posts/2023-06-26-podman-for-windows.adoc
#, fuzzy
msgid "Finally, the integration testsuite starts the application in a container and runs the tests against it:"
msgstr "最后，集成测试套件在一个容器中启动应用程序，并针对它运行测试："

#. type: Plain text
#: _posts/2023-06-26-podman-for-windows.adoc
#, fuzzy
msgid "We can check in the preserved `+target/quarkus.log+` that the application was indeed ran in a Linux container as a native executable:"
msgstr "我们可以在保留的 `target/quarkus.log` ，应用程序确实是作为一个本地可执行文件在Linux容器中运行："

#. type: Plain text
#: _posts/2023-06-26-podman-for-windows.adoc
#, fuzzy
msgid "This way we can have our test application executed in a Linux container while keeping our Windows development environment."
msgstr "这样，我们就可以让我们的测试应用程序在Linux容器中执行，同时保持我们的Windows开发环境。"

#. type: Title ==
#: _posts/2023-06-26-podman-for-windows.adoc
#, fuzzy, no-wrap
msgid "Troubleshooting"
msgstr "故障排除"

#: _posts/2023-06-26-podman-for-windows.adoc
msgid ""
"**File permissions:** The Linux executable file might have missing its executable flag, so you might need to set\n"
"it in your Dockerfile as we do in the Quickstart AWT example, i.e. `+RUN chmod \"ugo+x\" /work/application+`."
msgstr ""

#: _posts/2023-06-26-podman-for-windows.adoc
msgid ""
"**Podman machine must be inited:** If something goes south, an Administrator can fix it by removing the machine\n"
"(the Linux VM providing podman services), e.g. `+podman machine rm \"podman-machine-default\"+` and then\n"
"`+podman machine init+`."
msgstr ""

#: _posts/2023-06-26-podman-for-windows.adoc
msgid ""
"*Directory or a file access:* When more services or more complex multimodule projects are being built, one could\n"
"hit `+The process cannot access the file because it is being used by another process+`. The easiest way to debug\n"
"such situation is to use https://download.sysinternals.com/files/Handle.zip[Handle] tool by Sysinternals."
msgstr ""

#. type: Plain text
#: _posts/2023-06-26-podman-for-windows.adoc
#, fuzzy
msgid "Note that none of the aforementioned situations is Quarkus specific per se."
msgstr "请注意，上述情况本身都不是Quarkus特有的。"

#. type: Title ==
#: _posts/2023-06-26-podman-for-windows.adoc
#, no-wrap
msgid "Conclusion"
msgstr "解决方案"

#. type: Plain text
#: _posts/2023-06-26-podman-for-windows.adoc
msgid "Podman is perfectly capable of running your Linux containers on Windows, being it test apps or databases. It is definitely worth trying out."
msgstr ""

#. type: Plain text
#: _posts/2023-06-26-podman-for-windows.adoc
msgid "Do you have a question regarding this post? Feel free to hit us up on https://quarkusio.zulipchat.com/#[Zulip chat], https://stackoverflow.com/questions/tagged/quarkus%20podman?sort=Newest[Stack Overflow] or on https://github.com/quarkusio/quarkus/issues?q=label%3Aenv%2Fpodman[GitHub]."
msgstr ""
