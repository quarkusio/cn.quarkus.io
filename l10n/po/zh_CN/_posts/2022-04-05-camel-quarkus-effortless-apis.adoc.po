# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:1
#, no-wrap
msgid "bmeseguer"
msgstr ""

#. type: YAML Front Matter: date
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:1
#, no-wrap
msgid "2022-04-05"
msgstr ""

#. type: YAML Front Matter: layout
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:1
#, no-wrap
msgid "post"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:1
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:16
#, no-wrap
msgid "Discover Camel, the swiss-knife of integration brought to Quarkus. The example encourages API best practices, with effortless coding effort showcasing AtlasMap for data transformation."
msgstr ""

#. type: YAML Front Matter: tags
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:1
#, no-wrap
msgid "camel openapi api integration atlasmap rest swagger-ui data-mapping web"
msgstr ""

#. type: Title =
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:1
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:11
#, no-wrap
msgid "Riding Camel Quarkus: effortless APIs"
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:13
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:70
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:171
#, no-wrap
msgid "Camel"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:13
#, no-wrap
msgid "camel-quarkus.png"
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:17
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:20
msgid "Quarkus offers an extensive collection of extensions to connect to web, data and messaging systems, providing the developer fantastic functionality at his disposal. However, in many cases, the problem at hand already belongs to one (or more) of the well-known https://www.enterpriseintegrationpatterns.com/toc.html[enterprise integration patterns^]."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:22
msgid "Developers often kickstart their projects unaware that Apache Camel has perfected how to best address integration patterns. Camel Quarkus provides https://camel.apache.org/camel-quarkus/2.7.x/reference/index.html[hundreds of connectors^] and rich functionality for data mediation: data formats, transformers, templating, custom processors, etc."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:24
msgid "https://camel.apache.org/camel-quarkus/[Camel Quarkus^] is a subproject in the https://camel.apache.org/[Apache Camel^] community that enables Camel to run on https://developers.redhat.com/products/quarkus/overview[Quarkus^]. Apache Camel, often called the swiss-knife of integration, is the most popular open source community project aimed at solving all things integration."
msgstr ""

#. type: delimited block +
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:27
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:59
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:76
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:133
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:272
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:351
#, no-wrap
msgid "<br>\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:29
#, no-wrap
msgid "An OpenAPI example"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:32
msgid "Let’s pick a helpful example that highlights the benefits of using Camel Quarkus in contrast with other development approaches. Implementing and evolving API services sounds like a use case almost every reader can relate to. We’ll use the broadly adopted OpenApi specification."
msgstr ""

#. type: Block title
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:33
#, no-wrap
msgid "Piecing together an OpenAPI service"
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:34
#, no-wrap
msgid "Putting"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:34
#, no-wrap
msgid "openapi.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:37
msgid "Of course, the example illustrated in this article plays in the context of integration, where you’re enabling access or integrating source systems, performing data processing of some sort, and connecting and sending data to back endpoints."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:39
msgid "By all means, Camel Quarkus is not a “one to rule them all” solution. It will not be a good fit if your scenario deviates from the above context, for instance, a data access layer with heavy datastore interaction, a web server, a media application, etc."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:41
msgid "We find many Quarkus (non-Quarkus too) examples showing how to define and implement APIs. They all try to be as helpful as possible and propose the way forward. I realise this article is no different. However, I’m certain Camel Quarkus brings an elegant and effortless approach worth considering."
msgstr ""

#. type: Title ===
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:43
#, no-wrap
msgid "Code-first vs Contract-first"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:46
msgid "Although these are two different strategies to implement APIs, with their pros and cons, we are sticking to the contract-first approach, that is, when the API specification (the contract) is provided before the code implementation begins."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:48
msgid "In our example, the development team does not own the API. Their task is to implement the services to expose and comply with the given API specification. A different team in the organisation is responsible for designing, releasing, and delivering API governance. The picture below illustrates a contract-first approach."
msgstr ""

#. type: Block title
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:49
#, no-wrap
msgid "Contract-first approach"
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:50
#, no-wrap
msgid "Contract-first"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:50
#, no-wrap
msgid "dev-contract-first.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:53
msgid "A code-first strategy implies the API specification derives from the implemented code. You can use libraries to auto-generate the specification based on the code the developer has crafted. Code-first would be more appropriate for fast prototyping or simply when you have complete control over the API with a very open, relaxed and flexible approach to your development with little or no impact on others."
msgstr ""

#. type: Block title
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:54
#, no-wrap
msgid "Code-first approach"
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:55
#, no-wrap
msgid "Code-first"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:55
#, no-wrap
msgid "dev-code-first.png"
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:61
#, no-wrap
msgid "Basics about Camel and REST"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:64
msgid "Here's a speedy summary for those unfamiliar with Camel and how to implement REST APIs."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:66
msgid "Camel has its domain-specific language (DSL) to define processing flows, known as the Camel DSL. You use Camel components (aka. connectors) in the DSL to move data from sources to targets. Camel Quarkus has https://camel.apache.org/camel-quarkus/2.7.x/reference/index.html[300+ available extensions^]."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:68
msgid "Camel provides an additional domain-specific language for specific REST implementations: the REST DSL. When implementing REST services with Camel, you chain both DSLs to define the service’s end-to-end behaviour."
msgstr ""

#. type: Block title
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:69
#, no-wrap
msgid "Camel DSLs chained to process incoming requests."
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:70
#, no-wrap
msgid "camel-basics-dsl.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:73
msgid "Camel forwards incoming REST requests from the REST DSL to the main DSL via the Camel ‘direct’ component, which is essentially a connector used for internal invocations, as if calling a Java method from a line of Java code."
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:78
#, no-wrap
msgid "Easy ride preparations"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:81
msgid "The ultimate goal is to relieve the developer from dealing with API related preparations and configurations and allow him to concentrate on the business logic."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:83
msgid "To be more specific, in the previous diagram, the REST DSL comes handy when developers adopt a code-first approach. However, its definition feels redundant in a contract-first world since the provided OpenAPI specification already defines all the API details."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:85
msgid "Camel allows you to auto-generate the REST DSL out of an OpenAPI specification. This automation simplifies the work by letting the developer just focus on the processing flow implementation."
msgstr ""

#. type: Block title
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:86
#, no-wrap
msgid "Automated REST DSL, hand coded Main DSL."
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:87
#, no-wrap
msgid "Automated"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:87
#, no-wrap
msgid "camel-easy-ride.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:90
msgid "The automated code generation shown above is enabled via the configuration of the following Maven plugin:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:110
#, no-wrap
msgid ""
"<plugin>\n"
"    <groupId>org.apache.camel</groupId>\n"
"    <artifactId>camel-restdsl-openapi-plugin</artifactId>\n"
"    <executions>\n"
"        <execution>\n"
"            <id>simple</id>\n"
"            <goals>\n"
"                <goal>generate-xml</goal>\n"
"            </goals>\n"
"            <configuration>\n"
"                <specificationUri>src/main/resources/META-INF/openapi.json</specificationUri>\n"
"                <restConfiguration>false</restConfiguration>\n"
"                <outputDirectory>${project.build.directory}/classes/routes</outputDirectory>\n"
"            </configuration>\n"
"        </execution>\n"
"    </executions>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:113
msgid "Notice the `+<outputDirectory>+` parameter set to a destination inside the target directory. The setting allows Quarkus to load the Camel REST resource at start-up time and prevents the source directory from being polluted with unnecessary code."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:115
msgid "Also, you’ll observe we’re picking the OpenApi specification from the project’s source directory. The best practice would be to fetch, via another Maven plugin, the OpenAPI from a remote Service Registry representing the source of truth."
msgstr ""

#. type: delimited block =
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:119
msgid "The OpenApi definition used in our example has been created with https://www.apicur.io/[Apicurio Studio^], a beautiful and intuitive design time visual tool."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:122
msgid "Let’s pretend we do fetch the OpenApi definition from a remote server. Under that assumption, the diagram below shows how the project is kept simple and clean. Maven injects both the OpenApi and REST definition into the target directory at compilation time. When packaging the solution, it includes all necessary artefacts to run."
msgstr ""

#. type: Block title
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:123
#, no-wrap
msgid "Source is clean. Essential artefacts are generated and injected"
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:124
#, no-wrap
msgid "Source"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:124
#, no-wrap
msgid "maven-automation.png"
msgstr ""

#. type: delimited block =
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:129
msgid "The best practice is to fetch the OpenAPI specification from a remote https://www.apicur.io/registry/[Service Registry^] (the source of truth). For simplicity, our project already includes the specification."
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:135
#, no-wrap
msgid "Application version 1.0"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:138
msgid "Let’s look at our chosen (example) API service and see how to drive its implementation in its first iteration. The API Design team has released an OpenApi specification v1.0 for a service called ‘Individual’, and we, the developers, need to implement the service in compliance with its definition."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:140
msgid "This first version of the service has a single operation to retrieve the details of an individual. By setting up our project to parse and auto-generate the REST DSL as described in the previous section, we just need to implement a single Camel Route to process incoming service calls, as illustrated below:"
msgstr ""

#. type: Block title
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:141
#, no-wrap
msgid "First version of the service to implement."
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:142
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:388
#, no-wrap
msgid "First"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:142
#, no-wrap
msgid "service-version-1.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:145
msgid "We’ll keep the use case relatively thin; our focus stays at “Easy APIs with Camel Quarkus”.  But still, we want the scenario to be within an integration context to showcase some Camel Quarkus capabilities."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:147
msgid "Our Camel route connects with a legacy backend that enables access to ‘individual’ data. The processing logic requires adapting the incoming OpenApi call to the legacy backend system’s interface. This data adaptation requires data transformation both during the request and response flows."
msgstr ""

#. type: Block title
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:148
#, no-wrap
msgid "End to end processing flow."
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:149
#, no-wrap
msgid "End"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:149
#, no-wrap
msgid "service-e2e.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:152
msgid "In a classic development approach, the developer needs to incorporate a Java data model to operate and handle incoming and outgoing data, for example, by defining Java classes and data structures to represent the data the service needs to manipulate."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:154
msgid "In our example, the OpenApi contract already predefined the data model describing the inputs and outputs of each operation. Likewise, the backend also defines a contract (or interface) to comply with when triggering calls."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:156
msgid "With Apache Camel, we can keep the implementation very clean by using Camel functionality dedicated explicitly to data transformation. In our example, we’ll use the AtlasMap component for various reasons:"
msgstr ""

#. type: delimited block +
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:163
#, no-wrap
msgid ""
"<ul>\n"
"  <li>It provides intuitive visual tooling to map source data to target data</li>\n"
"  <li>It performs structural and data transformation (JSON ⇄ XML) in a single action </li>\n"
"  <li>It does not require predefined Java data models</li>\n"
"</ul>\n"
msgstr ""

#. type: Block title
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:165
#, no-wrap
msgid "AtlasMap combines 2 actions in 1: structural and format transformations."
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:166
#, no-wrap
msgid "AtlasMap"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:166
#, no-wrap
msgid "map-json-xml.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:169
msgid "Let’s start looking at the route definition the developer needs to produce and how Camel links the OpenAPI operation to its code implementation:"
msgstr ""

#. type: Block title
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:170
#, no-wrap
msgid "Camel uses the `+operationId+` as a link to invoke the Camel route."
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:171
#, no-wrap
msgid "openapi-camel-link.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:174
msgid "Camel Quarkus uses the `+operationId+` from the OpenAPI specification to trigger an internal call (using the `+direct+` component) and expects a Camel consumer (`+from+` tag) with a matching `+operationId+` value to process the client request."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:176
msgid "The Camel route couldn’t be simpler:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:183
#, no-wrap
msgid ""
"from(\"direct:getDetails\")\n"
".to(\"atlasmap:map/request.adm\")\n"
".to(\"direct:call-backend\")\n"
".to(\"atlasmap:map/response.adm\");\n"
msgstr ""

#. type: delimited block +
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:193
#, no-wrap
msgid ""
"<ol>\n"
"  <li>The first line declares the route (and matches the `+operationId+`).</li>\n"
"  <li>The second line applies a data adaptation (or mapping) to prepare the back-end call's payload.</li>\n"
"  <li>The third line invokes a Camel route that calls the backend and collects the response.</li>\n"
"  <li>The fourth line maps the response XML into JSON data in compliance with the OpenApi definition.</li>\n"
"</ol>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:197
msgid "You can easily create the data mapping definitions using AtlasMap’s VSCode extension.  When editing the Camel route in VSCode, you’ll find a contextual and actionable hint you can click (over the ‘atlasmap’ code line) that launches the AtlasMap editor with the data mapping definition loaded."
msgstr ""

#. type: Block title
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:198
#, no-wrap
msgid "VSCode prepends an action link to open the visual mapping editor."
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:199
#, no-wrap
msgid "VSCode"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:199
#, no-wrap
msgid "vscode-codelens.png"
msgstr ""

#. type: delimited block =
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:204
msgid "The following https://camel.apache.org/blog/2021/11/vscode-atlasmap-release-0.1.0/[blog in the Apache Camel^] community describes how to use the tooling."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:207
msgid "The picture below shows the data mapping definition in AtlasMap for the request flow:"
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:208
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:239
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:317
#, no-wrap
msgid "Mapping"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:208
#, no-wrap
msgid "atlasmap-mapping-request.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:211
msgid "The property `+id+` (left) represents the `+{id}+` path parameter from the HTTP URL. It maps to the target XML data structure, connected to the `+id+` node (right). You define mappings with drag and drop actions from left to the right."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:213
msgid "Following the data transformation action, the flow invokes the backend. The snippet below shows the developer's Camel route definition to trigger the HTTP request."
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:221
#, no-wrap
msgid ""
"from(\"direct:call-backend\")\n"
".removeHeaders(\"*\")\n"
".setHeader(Exchange.HTTP_METHOD,  constant(\"POST\"))\n"
".setHeader(Exchange.CONTENT_TYPE, constant(\"application/xml\"))\n"
".to(\"http:{{api.backend1.host}}/camel/individual/details\");\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:224
msgid "The two main actions in this route are:"
msgstr ""

#. type: delimited block +
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:230
#, no-wrap
msgid ""
"<ol>\n"
"  <li>Set headers (ensuring we clean up incoming ones)</li>\n"
"  <li>Trigger the call using Camel’s HTTP component. </li>\n"
"</ol>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:233
msgid "The expected XML interaction with the legacy backend system is as follows:"
msgstr ""

#. type: Block title
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:234
#, no-wrap
msgid "Call from Camel to the backend."
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:235
#, no-wrap
msgid "Call"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:235
#, no-wrap
msgid "camel-backend-call.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:238
msgid "The response data mapping definition would be defined in AtlasMap as shown below:"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:239
#, no-wrap
msgid "atlasmap-mapping-response.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:242
msgid "The data structure on the left represents the source XML to map (backend response), and the data structure on the right represents the target JSON data to compose and send back to the client."
msgstr ""

#. type: Title ===
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:243
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:332
#, no-wrap
msgid "Summary"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:246
msgid "Let’s review the implementation effort the developer needs to undergo in this first iteration of the Individual API:"
msgstr ""

#. type: delimited block +
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:265
#, no-wrap
msgid ""
"<ol>\n"
"    <li>Setup the project (include dependencies, plugins, etc.)</li>\n"
"    <br>\n"
"    <li>Define the Camel routes:</li>\n"
"    <ol type=\"a\">\n"
"        <li><span>The main Camel route<br/>(4 lines of code)</span></li>\n"
"        <li><span>The backend invocation route <br/>(5 lines of code)</span></li>\n"
"    </ol>\n"
"    <br>\n"
"    <li>Define the data transformations:</li>\n"
"    <ol type=\"a\">\n"
"        <li>Request mapping</li>\n"
"        <li>Response mapping</li>\n"
"    </ol>  \n"
"</ol>\n"
"<br>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:269
msgid "That’s looks neat to me."
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:274
#, no-wrap
msgid "Application version 2.0"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:277
msgid "The real benefit of this development approach, and its simplicity using Camel Quarkus, becomes more evident when the DEV team receives a new version 2.0 of the Individual API, released by the Design team, with a new operation to be implemented."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:279
msgid "Version 1.0 was only intended for internal consumption. Now there is a demand to expose the service externally, which requires introducing a level of data protection to ensure the customer’s data is kept confidential."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:281
msgid "Version 2.0 defines a new operation the developer needs to implement. Hopefully, the impact on the current code will not be too significant."
msgstr ""

#. type: Block title
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:282
#, no-wrap
msgid "Second version of the service with a new operation."
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:283
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:405
#, no-wrap
msgid "Second"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:283
#, no-wrap
msgid "service-version-2.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:286
msgid "The main goal of the new operation is to anonymise sensitive data in the JSON response payload to send back. Other than that, the same logic applies, we prepare and invoke the backend in the same manner to obtain the individual data."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:288
msgid "In version 1.0, we saw the routes implemented using the Java DSL. In version 2.0, we will use the XML DSL."
msgstr ""

#. type: delimited block =
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:292
msgid "The use of one DSL over the other is more of a user preference. The XML DSL helps in keeping Camel routes definitions well organised. In contrast, the Java DSL is placed inside Java classes, at times challenging to locate, along with other regular Java code. Your code can get a bit messy and disorganised. Also, the Java DSL doesn’t enjoy the support of graphical tooling, while XML and YAML are DSLs that allow visual helpers."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:295
msgid "Let’s look at the new Camel route definition the developer has coded in XML:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:304
#, no-wrap
msgid ""
"<route>\n"
"    <from uri=\"direct:getAnonymousDetails\"/>\n"
"    <to uri=\"atlasmap:map/request.adm\"/>\n"
"    <to uri=\"direct:call-backend\"/>\n"
"    <to uri=\"atlasmap:map/response-anonymous.adm\"/> \n"
"</route>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:307
msgid "The new route is almost identical to the first one. You will observe only two differences:"
msgstr ""

#. type: delimited block +
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:313
#, no-wrap
msgid ""
"<ol>\n"
"    <li>The <code>‘direct’</code> component matches the new <code>‘operationId’</code> in version 2.0</li>\n"
"    <li>The response data mapping is new</li>\n"
"</ol>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:316
msgid "The data mapping definition from 2) looks as follows in the AtlasMap editor:"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:317
#, no-wrap
msgid "atlasmap-mapping-response-anonymous.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:321
msgid "The main highlight from above is the definition of an `+‘anonymous’+` constant that maps to the `+‘fullName’+` and `+‘passportId’+` target fields:"
msgstr ""

#. type: delimited block +
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:327
#, no-wrap
msgid ""
"<ul>\n"
"    <li><code>Name:  anonymous</code></li>\n"
"    <li><code>Value: *********</code></li>\n"
"</ul>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:330
msgid "The new Camel route and the new mapping definition completes the implementation of the new operation in v2.0. At this stage, the developer is sweating from the enormous effort and the long hours it took to deliver the new version."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:335
msgid "Let’s quickly review the actions required to complete the second iteration of the service:"
msgstr ""

#. type: delimited block +
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:345
#, no-wrap
msgid ""
"<ol>\n"
"    <li>Replace the OpenApi v1.0 with the new specification v2.0</li>\n"
"    <br/>\n"
"    <li><span>Create the new Camel route<br/>(1-line if you copy/paste)</span></li>\n"
"    <br/>\n"
"    <li><span>Create the new data mapping<br/>(2 drag and drop actions if you copy/paste)</span></li>\n"
"</ol>\n"
"<br>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:348
msgid "Again, not bad at all. The effort was truly minimal."
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:353
#, no-wrap
msgid "Trying out the operations"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:356
msgid "To discover and explore services in code-first developments, you need to ensure the project auto-generates the specification from the implemented code."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:358
msgid "In our case (contract-first) the specification is already provided. We can easily expose it and embed a Swagger-UI client using the Smallrye OpenApi extension that Quarkus provides. Ensure your POM file includes the following dependency:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:365
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-openapi</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:368
msgid "For more detailed information on how to expose OpenApi definitions, you can read the following section in the Quarkus documentation. There are different settings we can configure to our liking. We’ve configured some of them. If you feel curious, we encourage you to look at the source code provided with the article."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:370
msgid "We can compile and run our application locally with the following command:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:374
#, no-wrap
msgid "./mvnw clean quarkus:dev\n"
msgstr ""

#. type: delimited block =
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:380
msgid "Remember, our Camel integration invokes a legacy backend. We’ve provided one included in the GitHub project. Ensure you read and follow the ‘Readme.md’ instructions to prepare the stub (legacy backend)."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:383
msgid "Once the application is up and running, open a browser and discover the service by entering the following URL on your address bar:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:385
#, no-wrap
msgid "\thttp://localhost:8080/camel/openapi.json\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:387
msgid "Click and try out the v1.0 operation:"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:388
#, no-wrap
msgid "swagger-op1.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:391
msgid "Enter a dummy value for the `+{id}+` parameter, for example, `+‘123’+`. If your legacy system (stub) is up and running, you should obtain the following response:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:401
#, no-wrap
msgid ""
"{\n"
"  \"passportId\": \"123456789-A\",\n"
"  \"fullName\": \"Some One\",\n"
"  \"addressLine1\": \"1 Some Street\",\n"
"  \"addressLine2\": \"Somewhere SOME C0D3\",\n"
"  \"addressLine3\": \"UK\"\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:404
msgid "Now, give a go to our v.2.0 operation:"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:405
#, no-wrap
msgid "swagger-op2.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:408
msgid "You should obtain the following response:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:418
#, no-wrap
msgid ""
"{\n"
"  \"addressLine1\": \"1 Some Street\",\n"
"  \"addressLine2\": \"Somewhere SOME C0D3\",\n"
"  \"addressLine3\": \"UK\",\n"
"  \"passportId\": \"**********\",\n"
"  \"fullName\": \"**********\"\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:421
msgid "You will observe some of the fields now anonymised as per the mapping settings in AtlasMap."
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:423
#, no-wrap
msgid "Last words"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:426
msgid "This article shows you how choosing Camel Quarkus, and a contract-first implementation approach provides great simplicity and low maintenance cost. It allows rapid functionality growth."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:428
msgid "When your processes move data from sources to targets, use Camel Quarkus, probably the best fit for the job when building integration services."
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:430
#, no-wrap
msgid "Resources:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:433
msgid "Here is a list of related resources you may be interested to explore:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:435
msgid "https://github.com/brunoNetId/camel-quarkus-api-first[Github project] where the blog's source code lives."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:436
msgid "https://developers.redhat.com/articles/2022/03/14/choose-best-camel-your-integration-ride-part-1[Article] covering Camel Quarkus and Camel K, also based in Quarkus."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:437
msgid "https://camel.apache.org/camel-quarkus/next/index.html[Camel Quarkus] home page in Apache Camel."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:438
msgid "https://www.atlasmap.io/[AtlasMap] home page, the visual data mapping tool that accelerates your implementation."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:438
msgid "https://www.apicur.io/[Apicurio] home page, the Design time tool to create your OpenAPI contracts."
msgstr ""
