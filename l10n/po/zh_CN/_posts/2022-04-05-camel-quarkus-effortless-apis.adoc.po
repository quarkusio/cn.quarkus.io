# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy, no-wrap
msgid "Riding Camel Quarkus: effortless APIs"
msgstr "骑骆驼Quarkus：毫不费力的API"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy, no-wrap
msgid "Discover Camel, the swiss-knife of integration brought to Quarkus. The example encourages API best practices, with effortless coding effort showcasing AtlasMap for data transformation."
msgstr "发现Camel，集成的瑞士刀带到了Quarkus。这个例子鼓励API的最佳实践，以毫不费力的编码工作展示AtlasMap的数据转换。"

#. type: Title ==
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, no-wrap
msgid "Introduction"
msgstr "简介"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "Quarkus offers an extensive collection of extensions to connect to web, data and messaging systems, providing the developer fantastic functionality at his disposal. However, in many cases, the problem at hand already belongs to one (or more) of the well-known https://www.enterpriseintegrationpatterns.com/toc.html[enterprise integration patterns^]."
msgstr "Quarkus提供了一个广泛的扩展集合，以连接到网络、数据和消息系统，为开发者提供了奇妙的功能。然而，在许多情况下，手头的问题已经属于一个（或多个）著名的 link:https://www.enterpriseintegrationpatterns.com/toc.html[企业集成模式, target=\"_blank\"] 。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "Developers often kickstart their projects unaware that Apache Camel has perfected how to best address integration patterns. Camel Quarkus provides https://camel.apache.org/camel-quarkus/2.7.x/reference/index.html[hundreds of connectors^] and rich functionality for data mediation: data formats, transformers, templating, custom processors, etc."
msgstr "开发人员经常在没有意识到Apache Camel已经完善了如何最好地解决集成模式的情况下启动他们的项目。Camel Quarkus为数据调解提供了 link:https://camel.apache.org/camel-quarkus/2.7.x/reference/index.html[数百个连接器, target=\"_blank\"] 和丰富的功能：数据格式、转换器、模板、自定义处理器等。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "https://camel.apache.org/camel-quarkus/[Camel Quarkus^] is a subproject in the https://camel.apache.org/[Apache Camel^] community that enables Camel to run on https://developers.redhat.com/products/quarkus/overview[Quarkus^]. Apache Camel, often called the swiss-knife of integration, is the most popular open source community project aimed at solving all things integration."
msgstr "link:https://camel.apache.org/camel-quarkus/[Camel Quarkus, target=\"_blank\"] 是 link:https://camel.apache.org/[Apache Camel, target=\"_blank\"] 社区的一个子项目，它使Camel可以在 link:https://developers.redhat.com/products/quarkus/overview[Quarkus, target=\"_blank\"] 上运行。Apache Camel通常被称为集成的瑞士刀，是最受欢迎的开源社区项目，旨在解决所有的集成问题。"

#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "<br>"
msgstr "<br>"

#. type: Title ==
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy, no-wrap
msgid "An OpenAPI example"
msgstr "一个OpenAPI的例子"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "Let’s pick a helpful example that highlights the benefits of using Camel Quarkus in contrast with other development approaches. Implementing and evolving API services sounds like a use case almost every reader can relate to. We’ll use the broadly adopted OpenApi specification."
msgstr "让我们挑选一个有用的例子，突出使用Camel Quarkus与其他开发方法相比的好处。实施和发展API服务听起来像是一个几乎每个读者都能想到的用例。我们将使用广泛采用的OpenApi规范。"

#. type: Block title
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy, no-wrap
msgid "Piecing together an OpenAPI service"
msgstr "拼凑出一个OpenAPI服务"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "Of course, the example illustrated in this article plays in the context of integration, where you’re enabling access or integrating source systems, performing data processing of some sort, and connecting and sending data to back endpoints."
msgstr "当然，本文所举的例子是在整合的背景下进行的，你要实现访问或整合源系统，进行某种数据处理，并连接和发送数据到后面的终端。"

#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "By all means, Camel Quarkus is not a “one to rule them all” solution. It will not be a good fit if your scenario deviates from the above context, for instance, a data access layer with heavy datastore interaction,  a web server, a media application, etc."
msgstr "无论如何，Camel Quarkus 都不是 \"一统天下 \"的解决方案。如果你的应用场景与上述情况有偏差，例如，与数据存储交互较多的数据访问层、网络服务器、媒体应用程序等，它就不太适合。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "We find many Quarkus (non-Quarkus too) examples showing how to define and implement APIs. They all try to be as helpful as possible and propose the way forward. I realise this article is no different. However, I’m certain Camel Quarkus brings an elegant and effortless approach worth considering."
msgstr "我们发现许多Quarkus（非Quarkus）的例子显示如何定义和实现API。它们都尽可能地提供帮助，并提出前进的方向。我意识到这篇文章也不例外。然而，我确信Camel Quarkus带来了一种优雅和毫不费力的方法，值得考虑。"

#. type: Title ===
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy, no-wrap
msgid "Code-first vs Contract-first"
msgstr "代码优先与合同优先"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "Although these are two different strategies to implement APIs, with their pros and cons, we are sticking to the contract-first approach, that is, when the API specification (the contract) is provided before the code implementation begins."
msgstr "虽然这是两种不同的实现API的策略，各有优缺点，但我们坚持采用合同优先的方法，也就是在代码实现开始之前提供API规范（合同）。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "In our example, the development team does not own the API. Their task is to implement the services to expose and comply with the given API specification. A different team in the organisation is responsible for designing, releasing, and delivering API governance. The picture below illustrates a contract-first approach."
msgstr "在我们的例子中，开发团队并不拥有API。他们的任务是实现服务，暴露并遵守给定的API规范。组织中的另一个团队负责设计、发布和交付API治理。下图说明了一个合同优先的方法。"

#. type: Block title
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy, no-wrap
msgid "Contract-first approach"
msgstr "合同第一的方法"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "A code-first strategy implies the API specification derives from the implemented code. You can use libraries to auto-generate the specification based on the code the developer has crafted. Code-first would be more appropriate for fast prototyping or simply when you have complete control over the API with a very open, relaxed and flexible approach to your development with little or no impact on others."
msgstr "代码优先的策略意味着API规范来自于实现的代码。你可以使用库来自动生成基于开发者编写的代码的规范。代码优先更适合于快速的原型设计，或者仅仅是当你对API有完全的控制，对你的开发有一个非常开放、宽松和灵活的方法，对其他人几乎没有影响。"

#. type: Block title
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy, no-wrap
msgid "Code-first approach"
msgstr "代码优先的方法"

#. type: Title ==
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy, no-wrap
msgid "Basics about Camel and REST"
msgstr "关于Camel和REST的基础知识"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "Here's a speedy summary for those unfamiliar with Camel and how to implement REST APIs."
msgstr "对于那些不熟悉Camel和如何实现REST API的人来说，这里有一个快速的总结。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "Camel has its domain-specific language (DSL) to define processing flows, known as the Camel DSL. You use Camel components (aka. connectors) in the DSL to move data from sources to targets. Camel Quarkus has https://camel.apache.org/camel-quarkus/2.7.x/reference/index.html[300+ available extensions^]."
msgstr "Camel有其特定领域的语言（DSL）来定义处理流程，被称为Camel DSL。你在DSL中使用Camel组件（又称连接器），将数据从源头移到目标。Camel Quarkus有 link:https://camel.apache.org/camel-quarkus/2.7.x/reference/index.html[300多个可用的扩展, target=\"_blank\"] 。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "Camel provides an additional domain-specific language for specific REST implementations: the REST DSL. When implementing REST services with Camel, you chain both DSLs to define the service’s end-to-end behaviour."
msgstr "Camel为特定的REST实现提供了一个额外的特定领域语言：REST DSL。当用Camel实现REST服务时，你将两种DSL连接起来，以定义服务的端到端行为。"

#. type: Block title
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy, no-wrap
msgid "Camel DSLs chained to process incoming requests."
msgstr "骆驼DSL链来处理传入的请求。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "Camel forwards incoming REST requests from the REST DSL to the main DSL via the Camel ‘direct’ component, which is essentially a connector used for internal invocations, as if calling a Java method from a line of Java code."
msgstr "Camel通过Camel \"直接 \"组件将REST请求从REST DSL转发到主DSL，该组件基本上是一个用于内部调用的连接器，就像从一行Java代码中调用一个Java方法一样。"

#. type: Title ==
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy, no-wrap
msgid "Easy ride preparations"
msgstr "轻松骑行的准备工作"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "The ultimate goal is to relieve the developer from dealing with API related preparations and configurations and allow him to concentrate on the business logic."
msgstr "最终的目标是将开发人员从处理与API相关的准备工作和配置中解脱出来，使其能够集中精力处理业务逻辑。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "To be more specific, in the previous diagram, the REST DSL comes handy when developers adopt a code-first approach. However, its definition feels redundant in a contract-first world since the provided OpenAPI specification already defines all the API details."
msgstr "更具体地说，在前面的图表中，当开发者采用代码优先的方法时，REST DSL就很方便。然而，它的定义在契约优先的世界里感觉是多余的，因为提供的OpenAPI规范已经定义了所有的API细节。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "Camel allows you to auto-generate the REST DSL out of an OpenAPI specification. This automation simplifies the work by letting the developer just focus on the processing flow implementation."
msgstr "Camel允许你从OpenAPI规范中自动生成REST DSL。这种自动化简化了工作，让开发者只需专注于处理流程的实现。"

#. type: Block title
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy, no-wrap
msgid "Automated REST DSL, hand coded Main DSL."
msgstr "自动化的REST DSL，手工编码的Main DSL。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "The automated code generation shown above is enabled via the configuration of the following Maven plugin:"
msgstr "上图所示的自动代码生成是通过配置以下Maven插件实现的。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "Notice the `+<outputDirectory>+` parameter set to a destination inside the target directory. The setting allows Quarkus to load the Camel REST resource at start-up time and prevents the source directory from being polluted with unnecessary code."
msgstr "请注意 `<outputDirectory>` ，参数设置为目标目录内的一个目的地。这个设置允许Quarkus在启动时加载Camel REST资源，并防止源目录被不必要的代码所污染。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "Also, you’ll observe we’re picking the OpenApi specification from the project’s source directory. The best practice would be to fetch, via another Maven plugin, the OpenAPI from a remote Service Registry representing the source of truth."
msgstr "另外，你会发现我们是从项目的源代码目录中提取OpenApi规范。最好的做法是通过另一个Maven插件，从代表真理之源的远程服务注册中心获取OpenAPI。"

#. type: delimited block =
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "The OpenApi definition used in our example has been created with https://www.apicur.io/[Apicurio Studio^], a beautiful and intuitive design time visual tool."
msgstr "我们的例子中使用的OpenApi定义是用 link:https://www.apicur.io/[Apicurio Studio, target=\"_blank\"] 创建的，这是一个漂亮而直观的设计时间可视化工具。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "Let’s pretend we do fetch the OpenApi definition from a remote server. Under that assumption, the diagram below shows how the project is kept simple and clean. Maven injects both the OpenApi and REST definition into the target directory at compilation time. When packaging the solution, it includes all necessary artefacts to run."
msgstr "让我们假设我们确实从一个远程服务器上获取了OpenApi定义。在这种假设下，下图显示了项目是如何保持简单、干净的。Maven在编译时将OpenApi和REST定义都注入目标目录。在打包解决方案时，它包括所有运行所需的人工制品。"

#. type: Block title
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy, no-wrap
msgid "Source is clean. Essential artefacts are generated and injected"
msgstr "来源是干净的。基本的人工制品被生成并注入了"

#. type: delimited block =
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "The best practice is to fetch the OpenAPI specification from a remote https://www.apicur.io/registry/[Service Registry^] (the source of truth). For simplicity, our project already includes the specification."
msgstr "最好的做法是从远程 link:https://www.apicur.io/registry/[服务注册中心, target=\"_blank\"] （真理之源）获取OpenAPI规范。为了简单起见，我们的项目已经包括了该规范。"

#. type: Title ==
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy, no-wrap
msgid "Application version 1.0"
msgstr "应用程序1.0版"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "Let’s look at our chosen (example) API service and see how to drive its implementation in its first iteration. The API Design team has released an OpenApi specification v1.0 for a service called ‘Individual’, and we, the developers, need to implement the service in compliance with its definition."
msgstr "让我们看看我们选择的（示例）API服务，看看如何在第一次迭代中推动其实现。API设计团队已经发布了一个OpenApi规范V1.0，用于一个名为 \"个人 \"的服务，而我们这些开发者则需要按照其定义来实现该服务。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "This first version of the service has a single operation to retrieve the details of an individual. By setting up our project to parse and auto-generate the REST DSL as described in the previous section, we just need to implement a single Camel Route to process incoming service calls, as illustrated below:"
msgstr "这个服务的第一个版本有一个单一的操作来检索一个人的详细信息。通过设置我们的项目来解析和自动生成REST DSL，如上一节所述，我们只需要实现一个Camel路线来处理传入的服务调用，如下图所示。"

#. type: Block title
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy, no-wrap
msgid "First version of the service to implement."
msgstr "要实施的第一个版本的服务。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "We’ll keep the use case relatively thin; our focus stays at “Easy APIs with Camel Quarkus”.  But still, we want the scenario to be within an integration context to showcase some Camel Quarkus capabilities."
msgstr "我们将保持用例相对单薄；我们的重点保持在 \"用Camel Quarkus轻松实现API\"。但是，我们仍然希望这个场景是在一个整合的背景下，展示一些Camel Quarkus的能力。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "Our Camel route connects with a legacy backend that enables access to ‘individual’ data. The processing logic requires adapting the incoming OpenApi call to the legacy backend system’s interface. This data adaptation requires data transformation both during the request and response flows."
msgstr "我们的Camel路由与一个传统的后端连接，可以访问 \"个人 \"数据。处理逻辑需要将传入的OpenApi调用与传统后端系统的接口相适应。这种数据适应需要在请求和响应流程中进行数据转换。"

#. type: Block title
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy, no-wrap
msgid "End to end processing flow."
msgstr "端到端处理流程。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "In a classic development approach, the developer needs to incorporate a Java data model to operate and handle incoming and outgoing data, for example, by defining Java classes and data structures to represent the data the service needs to manipulate."
msgstr "在经典的开发方法中，开发者需要纳入一个Java数据模型来操作和处理传入和传出的数据，例如，通过定义Java类和数据结构来表示服务需要操作的数据。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "In our example, the OpenApi contract already predefined the data model describing the inputs and outputs of each operation. Likewise, the backend also defines a contract (or interface) to comply with when triggering calls."
msgstr "在我们的例子中，OpenApi合同已经预定了描述每个操作的输入和输出的数据模型。同样地，后端也定义了一个合同（或接口），以便在触发调用时遵守。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "With Apache Camel, we can keep the implementation very clean by using Camel functionality dedicated explicitly to data transformation. In our example, we’ll use the AtlasMap component for various reasons:"
msgstr "有了Apache Camel，我们可以通过使用Camel明确用于数据转换的功能来保持实现非常干净。在我们的例子中，由于各种原因，我们将使用AtlasMap组件。"

#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid ""
"<ul>\n"
"  <li>It provides intuitive visual tooling to map source data to target data</li>\n"
"  <li>It performs structural and data transformation (JSON ⇄ XML) in a single action </li>\n"
"  <li>It does not require predefined Java data models</li>\n"
"</ul>"
msgstr "<ul> <li>它提供直观的可视化工具，将源数据映射到目标数据</li> <li>它在单个操作中执行结构和数据转换（JSON ⇄ XML）</li> <li>它不需要预定义的 Java 数据模型</li> </ul>"

#. type: Block title
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy, no-wrap
msgid "AtlasMap combines 2 actions in 1: structural and format transformations."
msgstr "AtlasMap集2个动作于一身：结构和格式转换。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "Let’s start looking at the route definition the developer needs to produce and how Camel links the OpenAPI operation to its code implementation:"
msgstr "让我们开始看看开发者需要产生的路由定义，以及Camel如何将OpenAPI操作与它的代码实现联系起来。"

#. type: Block title
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy, no-wrap
msgid "Camel uses the `+operationId+` as a link to invoke the Camel route."
msgstr "骆驼使用 `operationId` 作为链接来调用骆驼路由。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "Camel Quarkus uses the `+operationId+` from the OpenAPI specification to trigger an internal call (using the `+direct+` component) and expects a Camel consumer (`+from+` tag) with a matching `+operationId+` value to process the client request."
msgstr "Camel Quarkus使用OpenAPI规范中的 `operationId` 来触发内部调用（使用 `direct` 组件），并期望一个具有匹配的 `operationId` 值的Camel消费者（ `from` 标签）来处理客户端请求。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "The Camel route couldn’t be simpler:"
msgstr "骆驼路线再简单不过了。"

#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid ""
"<ol>\n"
"  <li>The first line declares the route (and matches the `+operationId+`).</li>\n"
"  <li>The second line applies a data adaptation (or mapping) to prepare the back-end call's payload.</li>\n"
"  <li>The third line invokes a Camel route that calls the backend and collects the response.</li>\n"
"  <li>The fourth line maps the response XML into JSON data in compliance with the OpenApi definition.</li>\n"
"</ol>"
msgstr "<ol> <li>第一行声明路由（并匹配 `operationId` ）。</li> <li>第二行应用数据适配（或映射）以准备后端调用的有效负载。</li> <li>第三行调用 Camel 路由，调用后端并收集响应。</li> <li>第三行调用 Camel 路由，调用后端并收集响应。</li> <li>第四行根据 OpenApi 定义将响应 XML 映射为 JSON 数据。"

#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid ""
"You can easily create the data mapping definitions using AtlasMap’s VSCode extension.\n"
"When editing the Camel route in VSCode, you’ll find a contextual and actionable hint you can click (over the ‘atlasmap’ code line) that launches the AtlasMap editor with the data mapping definition loaded."
msgstr "您可以使用 AtlasMap 的 VSCode 扩展轻松创建数据映射定义。在 VSCode 中编辑 Camel 路由时，您会发现一个上下文可操作提示，点击该提示（在 \"atlasmap \"代码行上）即可启动 AtlasMap 编辑器并加载数据映射定义。"

#. type: Block title
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy, no-wrap
msgid "VSCode prepends an action link to open the visual mapping editor."
msgstr "VSCode预置了一个动作链接，以打开可视化映射编辑器。"

#. type: delimited block =
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "The following https://camel.apache.org/blog/2021/11/vscode-atlasmap-release-0.1.0/[blog in the Apache Camel^] community describes how to use the tooling."
msgstr "link:https://camel.apache.org/blog/2021/11/vscode-atlasmap-release-0.1.0/[Apache Camel, target=\"_blank\"] 社区 link:https://camel.apache.org/blog/2021/11/vscode-atlasmap-release-0.1.0/[的, target=\"_blank\"] 以下 link:https://camel.apache.org/blog/2021/11/vscode-atlasmap-release-0.1.0/[博客, target=\"_blank\"] 描述了如何使用该工具。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "The picture below shows the data mapping definition in AtlasMap for the request flow:"
msgstr "下图是AtlasMap中请求流的数据映射定义。"

#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "The property `+id+` (left) represents the `+{id}+` path parameter from the HTTP URL. It maps  to the target XML data structure, connected to the `+id+` node (right). You define mappings with drag and drop actions from left to the right."
msgstr "属性 `id` （左）表示 HTTP URL 中的 `{id}` 路径参数。它映射到与 `id` 节点（右）相连的目标 XML 数据结构。您可以通过从左到右的拖放操作来定义映射。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "Following the data transformation action, the flow invokes the backend. The snippet below shows the developer's Camel route definition to trigger the HTTP request."
msgstr "在数据转换动作之后，流程调用了后端。下面的片段显示了开发者的Camel路由定义来触发HTTP请求。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "The two main actions in this route are:"
msgstr "这条路线上的两个主要行动是。"

#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid ""
"<ol>\n"
"  <li>Set headers (ensuring we clean up incoming ones)</li>\n"
"  <li>Trigger the call using Camel’s HTTP component. </li>\n"
"</ol>"
msgstr "<ol> <li>设置标头（确保我们清理了传入的标头）</li> <li>使用 Camel 的 HTTP 组件触发调用。 </li> </ol>"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "The expected XML interaction with the legacy backend system is as follows:"
msgstr "预计与传统后端系统的XML互动情况如下。"

#. type: Block title
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy, no-wrap
msgid "Call from Camel to the backend."
msgstr "从Camel调用到后端。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "The response data mapping definition would be defined in AtlasMap as shown below:"
msgstr "响应数据映射定义将在AtlasMap中定义，如下所示。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "The data structure on the left represents the source XML to map (backend response), and the data structure on the right represents the target JSON data to compose and send back to the client."
msgstr "左边的数据结构代表要映射的源XML（后台响应），右边的数据结构代表要编排并发回给客户端的目标JSON数据。"

#. type: Title ===
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy, no-wrap
msgid "Summary"
msgstr "摘要"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "Let’s review the implementation effort the developer needs to undergo in this first iteration of the Individual API:"
msgstr "让我们回顾一下，在这个个人API的第一次迭代中，开发者需要经历的实施工作。"

#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid ""
"<ol>\n"
"    <li>Setup the project (include dependencies, plugins, etc.)</li>\n"
"    <br>\n"
"    <li>Define the Camel routes:</li>\n"
"    <ol type=\"a\">\n"
"        <li><span>The main Camel route<br/>(4 lines of code)</span></li>\n"
"        <li><span>The backend invocation route <br/>(5 lines of code)</span></li>\n"
"    </ol>\n"
"    <br>\n"
"    <li>Define the data transformations:</li>\n"
"    <ol type=\"a\">\n"
"        <li>Request mapping</li>\n"
"        <li>Response mapping</li>\n"
"    </ol>\n"
"</ol>\n"
"<br>"
msgstr "<ol> <li>设置项目（包括依赖关系、插件等。</li> <br> <li>定义 Camel 路由：</li> <ol type=\"a\"> <li><span>主 Camel 路由<br/>（4 行代码）</span></li> <li><span后台调用路由<br/>（5 行代码）</span></li> </ol> <br> <li>定义数据转换：</li> <ol type=\"a\"> <li>请求映射</li> <li>响应映射</li> </ol> </ol> <br"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "That’s looks neat to me."
msgstr "对我来说，这看起来很整洁。"

#. type: Title ==
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy, no-wrap
msgid "Application version 2.0"
msgstr "应用程序2.0版"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "The real benefit of this development approach, and its simplicity using Camel Quarkus, becomes more evident when the DEV team receives a new version 2.0 of the Individual API, released by the Design team, with a new operation to be implemented."
msgstr "当DEV团队收到由设计团队发布的新的2.0版本的Individual API，并有新的操作需要实现时，这种开发方法的真正好处，以及使用Camel Quarkus的简单性，就变得更加明显了。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "Version 1.0 was only intended for internal consumption. Now there is a demand to expose the service externally, which requires introducing a level of data protection to ensure the customer’s data is kept confidential."
msgstr "1.0版本仅用于内部消费。现在有了将服务对外公开的需求，这就需要引入一定程度的数据保护以确保客户的数据得到保密。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "Version 2.0 defines a new operation the developer needs to implement. Hopefully, the impact on the current code will not be too significant."
msgstr "2.0版本定义了开发人员需要实现的一个新操作。希望对当前代码的影响不会太大。"

#. type: Block title
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy, no-wrap
msgid "Second version of the service with a new operation."
msgstr "第二个版本的服务有一个新的操作。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "The main goal of the new operation is to anonymise sensitive data in the JSON response payload to send back. Other than that, the same logic applies, we prepare and invoke the backend in the same manner to obtain the individual data."
msgstr "新操作的主要目标是对JSON响应有效载荷中的敏感数据进行匿名化处理，以便送回。除此之外，同样的逻辑适用，我们以同样的方式准备和调用后端，以获得个别数据。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "In version 1.0, we saw the routes implemented using the Java DSL. In version 2.0, we will use the XML DSL."
msgstr "在1.0版本中，我们看到使用Java DSL实现的路由。在2.0版本中，我们将使用XML DSL。"

#. type: delimited block =
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "The use of one DSL over the other is more of a user preference. The XML DSL helps in keeping Camel routes definitions well organised. In contrast, the Java DSL is placed inside Java classes, at times challenging to locate, along with other regular Java code. Your code can get a bit messy and disorganised. Also, the Java DSL doesn’t enjoy the support of graphical tooling, while XML and YAML are DSLs that allow visual helpers."
msgstr "使用一种DSL而不是另一种DSL更多的是用户的偏好。XML DSL有助于保持Camel路由定义的井然有序。相比之下，Java DSL被放在Java类中，有时很难找到，与其他常规的Java代码一起。你的代码可能会变得有点凌乱和无序。另外，Java DSL不享受图形工具的支持，而XML和YAML是允许可视化帮助的DSL。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "Let’s look at the new Camel route definition the developer has coded in XML:"
msgstr "让我们看看开发者用XML编码的新Camel路由定义。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "The new route is almost identical to the first one. You will observe only two differences:"
msgstr "新路线与第一条路线几乎相同。你将看到只有两个不同之处。"

#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid ""
"<ol>\n"
"    <li>The <code>‘direct’</code> component matches the new <code>‘operationId’</code> in version 2.0</li>\n"
"    <li>The response data mapping is new</li>\n"
"</ol>"
msgstr "<ol> <li><code>'direct'</code>组件与 2.0 版中新的 <code>'operationId'</code> 匹配</li> <li>新的响应数据映射</li> </ol>"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "The data mapping definition from 2) looks as follows in the AtlasMap editor:"
msgstr "2）中的数据映射定义在AtlasMap编辑器中看起来如下。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "The main highlight from above is the definition of an `+‘anonymous’+` constant that maps to the `+‘fullName’+` and `+‘passportId’+` target fields:"
msgstr "上面的主要亮点是定义了一个 `‘anonymous’` 常数，它映射到 `‘fullName’` 和 `‘passportId’` 目标字段。"

#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid ""
"<ul>\n"
"    <li><code>Name:  anonymous</code></li>\n"
"    <li><code>Value: *********</code></li>\n"
"</ul>"
msgstr "<ul> <li><code>名称：匿名</code></li> <li><code>值： *<strong></strong>* ***</code></li> </ul>"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "The new Camel route and the new mapping definition completes the implementation of the new operation in v2.0. At this stage, the developer is sweating from the enormous effort and the long hours it took to deliver the new version."
msgstr "新的Camel路线和新的映射定义完成了v2.0版中新操作的实现。在这个阶段，开发人员为新版本的交付付出了巨大的努力和漫长的时间而汗流浃背。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "Let’s quickly review the actions required to complete the second iteration of the service:"
msgstr "让我们快速回顾一下完成服务的第二次迭代所需的行动。"

#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid ""
"<ol>\n"
"    <li>Replace the OpenApi v1.0 with the new specification v2.0</li>\n"
"    <br/>\n"
"    <li><span>Create the new Camel route<br/>(1-line if you copy/paste)</span></li>\n"
"    <br/>\n"
"    <li><span>Create the new data mapping<br/>(2 drag and drop actions if you copy/paste)</span></li>\n"
"</ol>\n"
"<br>"
msgstr "<ol> <li>用新规范 v2.0 替换 OpenApi v1.00</li> <br/> <li><span>创建新的 Camel 路由<br/>（如果复制/粘贴，则为 1 行）</span></li> <br/><li><span>创建新的数据映射<br/>（如果复制/粘贴，则需要 2 个拖放操作）</span> </li> </ol> <br"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "Again, not bad at all. The effort was truly minimal."
msgstr "同样，一点也不差。所做的努力确实是最小的。"

#. type: Title ==
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy, no-wrap
msgid "Trying out the operations"
msgstr "试用操作"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "To discover and explore services in code-first developments, you need to ensure the project auto-generates the specification from the implemented code."
msgstr "为了在代码优先的开发中发现和探索服务，你需要确保项目从实现的代码中自动生成规范。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "In our case (contract-first) the specification is already provided. We can easily expose it and embed a Swagger-UI client using the Smallrye OpenApi extension that Quarkus provides. Ensure your POM file includes the following dependency:"
msgstr "在我们的案例中（合同优先），规范已经被提供了。我们可以使用Quarkus提供的Smallrye OpenApi扩展，轻松地公开它并嵌入一个Swagger-UI客户端。确保你的POM文件包括以下依赖关系。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "For more detailed information on how to expose OpenApi definitions, you can read the following section in the Quarkus documentation. There are different settings we can configure to our liking. We’ve configured some of them. If you feel curious, we encourage you to look at the source code provided with the article."
msgstr "关于如何暴露OpenApi定义的更详细的信息，你可以阅读Quarkus文档中的以下部分。有不同的设置，我们可以根据自己的喜好进行配置。我们已经配置了其中的一些。如果你觉得好奇，我们鼓励你看一下文章中提供的源代码。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "We can compile and run our application locally with the following command:"
msgstr "我们可以用以下命令在本地编译和运行我们的应用程序。"

#. type: delimited block =
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "Remember, our Camel integration invokes a legacy backend. We’ve provided one included in the GitHub project. Ensure you read and follow the ‘Readme.md’ instructions to prepare the stub (legacy backend)."
msgstr "请记住，我们的Camel集成调用了一个传统的后端。我们已经在GitHub项目中提供了一个。确保你阅读并遵循 \"Readme.md \"的指示来准备存根（遗留后端）。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "Once the application is up and running, open a browser and discover the service by entering the following URL on your address bar:"
msgstr "一旦应用程序启动并运行，打开浏览器，在地址栏上输入以下URL，即可发现该服务。"

#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "http://localhost:8080/camel/openapi.json"
msgstr "http://localhost:8080/camel/openapi.json"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "Click and try out the v1.0 operation:"
msgstr "点击并尝试V1.0版本的操作。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "Enter a dummy value for the `+{id}+` parameter, for example, `+‘123’+`. If your legacy system (stub) is up and running, you should obtain the following response:"
msgstr "为 `{id}` 参数输入一个假值，例如， `‘123’` 。如果你的遗留系统（存根）已经启动并运行，你应该得到以下响应。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "Now, give a go to our v.2.0 operation:"
msgstr "现在，给我们的v.2.0操作一个机会。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "You should obtain the following response:"
msgstr "你应该得到以下答复。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "You will observe some of the fields now anonymised as per the mapping settings in AtlasMap."
msgstr "你会发现，根据AtlasMap中的映射设置，一些字段现在是匿名的。"

#. type: Title ==
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy, no-wrap
msgid "Last words"
msgstr "最后的话"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "This article shows you how choosing Camel Quarkus, and a contract-first implementation approach provides great simplicity and low maintenance cost. It allows rapid functionality growth."
msgstr "这篇文章向您展示了选择Camel Quarkus和合同优先的实施方法如何提供极大的简单性和低维护成本。它允许快速的功能增长。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "When your processes move data from sources to targets, use Camel Quarkus, probably the best fit for the job when building integration services."
msgstr "当你的流程将数据从源头移动到目标时，使用Camel Quarkus，这可能是构建集成服务时最适合的工作。"

#. type: Title ==
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy, no-wrap
msgid "Resources:"
msgstr "资源。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "Here is a list of related resources you may be interested to explore:"
msgstr "以下是你可能有兴趣探索的相关资源清单。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "https://github.com/brunoNetId/camel-quarkus-api-first[Github project] where the blog's source code lives."
msgstr "博客的源代码所在的 link:https://github.com/brunoNetId/camel-quarkus-api-first[Github项目] 。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "https://developers.redhat.com/articles/2022/03/14/choose-best-camel-your-integration-ride-part-1[Article] covering Camel Quarkus and Camel K, also based in Quarkus."
msgstr "涵盖骆驼Quarkus和骆驼K的 link:https://developers.redhat.com/articles/2022/03/14/choose-best-camel-your-integration-ride-part-1[文章] ，也位于Quarkus。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "https://camel.apache.org/camel-quarkus/next/index.html[Camel Quarkus] home page in Apache Camel."
msgstr "Apache Camel中的 link:https://camel.apache.org/camel-quarkus/next/index.html[Camel Quarkus] 主页。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "https://www.atlasmap.io/[AtlasMap] home page, the visual data mapping tool that accelerates your implementation."
msgstr "link:https://www.atlasmap.io/[AtlasMap] 主页，可加速实施的可视化数据制图工具。"

#. type: Plain text
#: _posts/2022-04-05-camel-quarkus-effortless-apis.adoc
#, fuzzy
msgid "https://www.apicur.io/[Apicurio] home page, the Design time tool to create your OpenAPI contracts."
msgstr "link:https://www.apicur.io/[Apicurio] 主页，用于创建 OpenAPI 合同的设计时间工具。"
