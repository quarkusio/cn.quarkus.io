# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy, no-wrap
msgid "How to Use Kafka, Schema Registry and Avro with Quarkus"
msgstr "如何用Quarkus使用Kafka、Schema Registry和Avro"

#. type: YAML Front Matter: synopsis
#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy, no-wrap
msgid "How to Use Kafka, Schema Registry, and Avro with Quarkus"
msgstr "如何用Quarkus使用Kafka、Schema Registry和Avro"

#: _posts/2020-09-22-kafka-avro.adoc
msgid ""
"In the Kafka world, Apache Avro is by far the most used serialization protocol.\n"
"Avro is a data serialization system.\n"
"Combined with Kafka, it provides schema-based, robust, and fast binary serialization."
msgstr ""

#: _posts/2020-09-22-kafka-avro.adoc
msgid ""
"In this blog post, we will see how you can use Avro with a schema registry in a Quarkus application.\n"
"This blog focuses on the JVM mode.\n"
"We will cover the native mode in another post."
msgstr ""

#: _posts/2020-09-22-kafka-avro.adoc
msgid ""
"We will write a simple application receiving HTTP requests, writing the payload into Kafka, and reading them from Kafka.\n"
"For simplicity, the same application will write into Kafka and read from it, but obviously, it would be different applications in the real world."
msgstr ""

#. type: Plain text
#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "image:/assets/images/posts/kafka-avro/architecture.png[]"
msgstr "image:/assets/images/posts/kafka-avro/architecture.png[alt=\"architecture\"]"

#: _posts/2020-09-22-kafka-avro.adoc
msgid "How to start"
msgstr ""

#: _posts/2020-09-22-kafka-avro.adoc
msgid ""
"Well, let's start from the beginning.\n"
"Go to https://code.quarkus.io to create your project, and select the following extension:"
msgstr ""

#. type: Plain text
#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "RESTEasy JSON-B"
msgstr "RESTEasy JSON-B"

#. type: Plain text
#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "SmallRye Reactive Messaging - Kafka Connector"
msgstr "SmallRye Reactive Messaging - Kafka连接器"

#. type: Plain text
#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "Apache Avro"
msgstr "阿帕奇-阿夫罗"

#. type: Plain text
#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "image:/assets/images/posts/kafka-avro/project.png[]"
msgstr "image:/assets/images/posts/kafka-avro/project.png[alt=\"project\"]"

#. type: Plain text
#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "Download the project and open it in your favorite IDE."
msgstr "下载该项目并在你最喜欢的IDE中打开它。"

#: _posts/2020-09-22-kafka-avro.adoc
msgid ""
"We need to add a few more content to the generated `pom.xml`.\n"
"Open the `pom.xml` file and add the following `dependency`:"
msgstr ""

#: _posts/2020-09-22-kafka-avro.adoc
msgid ""
"This dependency provides Avro serializer and deserializer.\n"
"There are multiple versions of this _serde_.\n"
"In this blog post, we use the ones provided by Apicurio.\n"
"You can also use Confluent's one (the artifact is not on Maven Central, so you need to add an extra repository)."
msgstr ""

#: _posts/2020-09-22-kafka-avro.adoc
msgid ""
"We also need to add the `avro-maven-plugin`.\n"
"Under `<build><plugins>`, add:"
msgstr ""

#: _posts/2020-09-22-kafka-avro.adoc
msgid ""
"This plugin generates the code from Avro schema files located in the `src/main/avro` directory.\n"
"With this setup, we can finally start to write some code."
msgstr ""

#: _posts/2020-09-22-kafka-avro.adoc
msgid "The Avro schema"
msgstr ""

#: _posts/2020-09-22-kafka-avro.adoc
msgid ""
"First, we need to write the schema representing the object we will read and write in Kafka.\n"
"Create the `src/main/avro/movie.avsc` file with the following content:"
msgstr ""

#: _posts/2020-09-22-kafka-avro.adoc
msgid ""
"The `avro-maven-plugin`, configured in the `pom.xml` file, generates the `me.escoffier.quarkus.Movie` class with the `title` and `year` attributes.\n"
"To generate the class, run:"
msgstr ""

#: _posts/2020-09-22-kafka-avro.adoc
msgid "The Movie Resource"
msgstr ""

#: _posts/2020-09-22-kafka-avro.adoc
msgid ""
"The first class we will write receives HTTP requests and writes the (Movie) payload into Kafka.\n"
"Create the `src/main/java/me/escoffier/MovieResource.java` with the following content:"
msgstr ""

#: _posts/2020-09-22-kafka-avro.adoc
msgid ""
"This JAX-RS resource is straightforward.\n"
"It has a single endpoint method, receiving JSON payload on `/movies`.\n"
"RESTEasy maps the JSON document into `Movie` objects automatically.\n"
"As described in the `avsc` file, the expected JSON contains two fields: `title` and `year`."
msgstr ""

#: _posts/2020-09-22-kafka-avro.adoc
msgid ""
"When using Quarkus with Reactive Messaging, you don't interact with Kafka directly.\n"
"You inject an `Emitter`, which sends an object (our movie) to a _channel_.\n"
"The application configuration maps this channel to a Kafka topic."
msgstr ""

#: _posts/2020-09-22-kafka-avro.adoc
msgid "Speaking about configuration, open the `src/main/resources/application.properties`, and add:"
msgstr ""

#: _posts/2020-09-22-kafka-avro.adoc
msgid ""
"This configuration requires a bit of an explanation.\n"
"First, `mp.messaging.connector.smallrye-kafka.apicurio.registry.url` configure the schema registry URL.\n"
"If you use the Confluent _serde_, instead of the Apicurio one, the property is named `mp.messaging.connector.smallrye-kafka.schema.registry.url`."
msgstr ""

#: _posts/2020-09-22-kafka-avro.adoc
msgid ""
"The `mp.messaging.outgoing.movies` configure the `movies` channel.\n"
"The `connector` attribute indicates that the SmallRye Kafka connector manages the channel.\n"
"The `topic` attribute (which we could omit in this case as it matches the channel name) specifies the topic's name.\n"
"`value.serializer` sets the serializer to use.\n"
"Here we use `io.apicurio.registry.utils.serde.AvroKafkaSerializer` provided by Apicurio.\n"
"The `registry.*` properties configure how the registry handles the schema."
msgstr ""

#: _posts/2020-09-22-kafka-avro.adoc
msgid "The movie consumer"
msgstr ""

#: _posts/2020-09-22-kafka-avro.adoc
msgid ""
"The second half of the application is even simpler.\n"
"It just logs the received movies."
msgstr ""

#: _posts/2020-09-22-kafka-avro.adoc
msgid "Creates the `src/main/java/me/escoffier/MovieConsumer.java` with the following content:"
msgstr ""

#: _posts/2020-09-22-kafka-avro.adoc
msgid ""
"The `@Incoming` annotation indicates that the method is called for each `Movie` object transiting on the `movies-from-kafka` channel.\n"
"In this case, we simply write a log message."
msgstr ""

#: _posts/2020-09-22-kafka-avro.adoc
msgid ""
"We are almost there.\n"
"We need to configure the reception from Kafka.\n"
"Re-open the `application.properties` and add:"
msgstr ""

#: _posts/2020-09-22-kafka-avro.adoc
msgid ""
"These properties map the `movies-from-kafka` to the `movies` Kafka topic.\n"
"It also configures the deserializer (`io.apicurio.registry.utils.serde.AvroKafkaDeserializer`).\n"
"We disable Kafka auto-commit (`enable.auto.commit=false`), as Reactive Messaging handles the offset commit for you."
msgstr ""

#: _posts/2020-09-22-kafka-avro.adoc
msgid "Because the sender and receiver are colocalized in the same application, we cannot use the same channel name."
msgstr ""

#: _posts/2020-09-22-kafka-avro.adoc
msgid "A bit of infrastructure"
msgstr ""

#: _posts/2020-09-22-kafka-avro.adoc
msgid "Before running the application, we need:"
msgstr ""

#: _posts/2020-09-22-kafka-avro.adoc
msgid "A Kafka broker"
msgstr ""

#: _posts/2020-09-22-kafka-avro.adoc
msgid "The Apicurio schema registry"
msgstr ""

#: _posts/2020-09-22-kafka-avro.adoc
msgid "Create the `docker-compose.yaml` file at the root of your project with the following content:"
msgstr ""

#: _posts/2020-09-22-kafka-avro.adoc
msgid ""
"This `docker-compose` file starts everything we need.\n"
"You may wonder about some of the properties of the Apicurio registry.\n"
"Actually, the Apicurio registry is also a Quarkus application."
msgstr ""

#: _posts/2020-09-22-kafka-avro.adoc
msgid "Time to run"
msgstr ""

#: _posts/2020-09-22-kafka-avro.adoc
msgid ""
"Alright, let's get this rolling.\n"
"First, start the infrastructure with:"
msgstr ""

#: _posts/2020-09-22-kafka-avro.adoc
msgid "Stop the infrastructure with `docker-compose down; docker-compose rm`"
msgstr ""

#: _posts/2020-09-22-kafka-avro.adoc
msgid "Then, start the application:"
msgstr ""

#: _posts/2020-09-22-kafka-avro.adoc
msgid "Once start, open another terminal and _post_ movies:"
msgstr ""

#: _posts/2020-09-22-kafka-avro.adoc
msgid "In the application log, you should see:"
msgstr ""

#: _posts/2020-09-22-kafka-avro.adoc
msgid "Conclusion"
msgstr "解决方案"

#: _posts/2020-09-22-kafka-avro.adoc
msgid ""
"Done!\n"
"In just a few code lines and a bit of configuration, we can integrate Kafka, Avro, and a schema registry in a Quarkus application!\n"
"You can found the code of this demo on https://github.com/cescoffier/quarkus-kafka-and-avro. The readme file contains the instructions to run it."
msgstr ""

#: _posts/2020-09-22-kafka-avro.adoc
msgid "Quarkus 1.9 will be a lots of new goodies around messaging and reactive in general. Stay tuned!"
msgstr ""
