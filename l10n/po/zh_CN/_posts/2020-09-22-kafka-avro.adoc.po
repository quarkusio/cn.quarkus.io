# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy, no-wrap
msgid "How to Use Kafka, Schema Registry and Avro with Quarkus"
msgstr "如何用Quarkus使用Kafka、Schema Registry和Avro"

#. type: YAML Front Matter: synopsis
#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy, no-wrap
msgid "How to Use Kafka, Schema Registry, and Avro with Quarkus"
msgstr "如何用Quarkus使用Kafka、Schema Registry和Avro"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"In the Kafka world, Apache Avro is by far the most used serialization protocol.\n"
"Avro is a data serialization system.\n"
"Combined with Kafka, it provides schema-based, robust, and fast binary serialization."
msgstr "在 Kafka 世界中，Apache Avro 是迄今为止使用最多的序列化协议。Avro 是一种数据序列化系统。它与 Kafka 相结合，可提供基于模式、稳健而快速的二进制序列化。"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"In this blog post, we will see how you can use Avro with a schema registry in a Quarkus application.\n"
"This blog focuses on the JVM mode.\n"
"We will cover the native mode in another post."
msgstr "在本篇博文中，我们将介绍如何在 Quarkus 应用程序中将 Avro 与模式注册表结合使用。本篇博文重点介绍 JVM 模式。我们将在另一篇博文中介绍本地模式。"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"We will write a simple application receiving HTTP requests, writing the payload into Kafka, and reading them from Kafka.\n"
"For simplicity, the same application will write into Kafka and read from it, but obviously, it would be different applications in the real world."
msgstr "我们将编写一个简单的应用程序，接收 HTTP 请求，将有效载荷写入 Kafka，并从 Kafka 中读取。为简单起见，同一个应用程序将写入 Kafka 并从中读取，但在现实世界中显然会是不同的应用程序。"

#. type: Plain text
#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "image:/assets/images/posts/kafka-avro/architecture.png[]"
msgstr "image:/assets/images/posts/kafka-avro/architecture.png[alt=\"architecture\"]"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "How to start"
msgstr "如何开始"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"Well, let's start from the beginning.\n"
"Go to https://code.quarkus.io to create your project, and select the following extension:"
msgstr "好吧，让我们从头开始。进入 https://code.quarkus.io 创建项目，选择以下扩展名："

#. type: Plain text
#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "RESTEasy JSON-B"
msgstr "RESTEasy JSON-B"

#. type: Plain text
#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "SmallRye Reactive Messaging - Kafka Connector"
msgstr "SmallRye Reactive Messaging - Kafka连接器"

#. type: Plain text
#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "Apache Avro"
msgstr "阿帕奇-阿夫罗"

#. type: Plain text
#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "image:/assets/images/posts/kafka-avro/project.png[]"
msgstr "image:/assets/images/posts/kafka-avro/project.png[alt=\"project\"]"

#. type: Plain text
#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "Download the project and open it in your favorite IDE."
msgstr "下载该项目并在你最喜欢的IDE中打开它。"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"We need to add a few more content to the generated `pom.xml`.\n"
"Open the `pom.xml` file and add the following `dependency`:"
msgstr "我们需要在生成的 `pom.xml` 中再添加一些内容。打开 `pom.xml` 文件并添加以下内容 `dependency` ："

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"This dependency provides Avro serializer and deserializer.\n"
"There are multiple versions of this _serde_.\n"
"In this blog post, we use the ones provided by Apicurio.\n"
"You can also use Confluent's one (the artifact is not on Maven Central, so you need to add an extra repository)."
msgstr "该依赖项提供 Avro 序列化器和反序列化器。此 _serde_ 有多个版本。在本博文中，我们使用的是 Apicurio 提供的版本。您也可以使用 Confluent 的版本（该工件不在 Maven Central 上，因此您需要添加一个额外的版本库）。"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"We also need to add the `avro-maven-plugin`.\n"
"Under `<build><plugins>`, add:"
msgstr "我们还需要添加 `avro-maven-plugin` 。在 `<build><plugins>` 下，添加："

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"This plugin generates the code from Avro schema files located in the `src/main/avro` directory.\n"
"With this setup, we can finally start to write some code."
msgstr "该插件根据 `src/main/avro` 目录中的 Avro 模式文件生成代码。有了这些设置，我们终于可以开始编写代码了。"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "The Avro schema"
msgstr "Avro 模式"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"First, we need to write the schema representing the object we will read and write in Kafka.\n"
"Create the `src/main/avro/movie.avsc` file with the following content:"
msgstr "首先，我们需要编写代表我们将在 Kafka 中读写的对象的模式。创建 `src/main/avro/movie.avsc` 文件，内容如下："

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"The `avro-maven-plugin`, configured in the `pom.xml` file, generates the `me.escoffier.quarkus.Movie` class with the `title` and `year` attributes.\n"
"To generate the class, run:"
msgstr "在 `pom.xml` 文件中配置的 `avro-maven-plugin` 会生成带有 `title` 和 `year` 属性的 `me.escoffier.quarkus.Movie` 类。要生成该类，请运行"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "The Movie Resource"
msgstr "电影资料"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"The first class we will write receives HTTP requests and writes the (Movie) payload into Kafka.\n"
"Create the `src/main/java/me/escoffier/MovieResource.java` with the following content:"
msgstr "我们要编写的第一个类将接收 HTTP 请求并将有效载荷（Movie）写入 Kafka。创建 `src/main/java/me/escoffier/MovieResource.java` ，内容如下："

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"This JAX-RS resource is straightforward.\n"
"It has a single endpoint method, receiving JSON payload on `/movies`.\n"
"RESTEasy maps the JSON document into `Movie` objects automatically.\n"
"As described in the `avsc` file, the expected JSON contains two fields: `title` and `year`."
msgstr "该 JAX-RS 资源简单明了。它只有一个端点方法，在 `/movies` 上接收 JSON 有效负载。RESTEasy 会自动将 JSON 文档映射为 `Movie` 对象。如 `avsc` 文件所述，预期 JSON 包含两个字段： `title` 和 `year` 。"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"When using Quarkus with Reactive Messaging, you don't interact with Kafka directly.\n"
"You inject an `Emitter`, which sends an object (our movie) to a _channel_.\n"
"The application configuration maps this channel to a Kafka topic."
msgstr "将 Quarkus 与 Reactive Messaging 结合使用时，你不会直接与 Kafka 交互。你只需注入一个 `Emitter` ，将一个对象（我们的影片）发送到一个 _通道_ 。应用配置会将该通道映射到 Kafka 主题。"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "Speaking about configuration, open the `src/main/resources/application.properties`, and add:"
msgstr "说到配置，请打开 `src/main/resources/application.properties` ，然后添加："

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"This configuration requires a bit of an explanation.\n"
"First, `mp.messaging.connector.smallrye-kafka.apicurio.registry.url` configure the schema registry URL.\n"
"If you use the Confluent _serde_, instead of the Apicurio one, the property is named `mp.messaging.connector.smallrye-kafka.schema.registry.url`."
msgstr "这个配置需要解释一下。首先， `mp.messaging.connector.smallrye-kafka.apicurio.registry.url` 配置模式注册表 URL。如果使用的是 Confluent _serde_ ，而不是 Apicurio，则属性名为 `mp.messaging.connector.smallrye-kafka.schema.registry.url` 。"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"The `mp.messaging.outgoing.movies` configure the `movies` channel.\n"
"The `connector` attribute indicates that the SmallRye Kafka connector manages the channel.\n"
"The `topic` attribute (which we could omit in this case as it matches the channel name) specifies the topic's name.\n"
"`value.serializer` sets the serializer to use.\n"
"Here we use `io.apicurio.registry.utils.serde.AvroKafkaSerializer` provided by Apicurio.\n"
"The `registry.*` properties configure how the registry handles the schema."
msgstr "`mp.messaging.outgoing.movies` 配置 `movies` 通道。 `connector` 属性表示由 SmallRye Kafka 连接器管理该通道。 `topic` 属性（本例中可以省略，因为它与通道名称相匹配）指定了主题的名称。 `value.serializer` 设置要使用的序列化器。这里我们使用 Apicurio 提供的 `io.apicurio.registry.utils.serde.AvroKafkaSerializer` 。 `registry.*` 属性配置注册表如何处理模式。"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "The movie consumer"
msgstr "电影消费者"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"The second half of the application is even simpler.\n"
"It just logs the received movies."
msgstr "应用程序的后半部分更加简单。它只是记录接收到的影片。"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "Creates the `src/main/java/me/escoffier/MovieConsumer.java` with the following content:"
msgstr "创建 `src/main/java/me/escoffier/MovieConsumer.java` ，内容如下："

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"The `@Incoming` annotation indicates that the method is called for each `Movie` object transiting on the `movies-from-kafka` channel.\n"
"In this case, we simply write a log message."
msgstr "`@Incoming` 注解表明，在 `movies-from-kafka` 频道上传输的每个 `Movie` 对象都会调用该方法。在这种情况下，我们只需写入一条日志信息。"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"We are almost there.\n"
"We need to configure the reception from Kafka.\n"
"Re-open the `application.properties` and add:"
msgstr "我们就快成功了。我们需要配置从 Kafka 的接收。重新打开 `application.properties` 并添加："

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"These properties map the `movies-from-kafka` to the `movies` Kafka topic.\n"
"It also configures the deserializer (`io.apicurio.registry.utils.serde.AvroKafkaDeserializer`).\n"
"We disable Kafka auto-commit (`enable.auto.commit=false`), as Reactive Messaging handles the offset commit for you."
msgstr "这些属性将 `movies-from-kafka` 映射到 `movies` Kafka 主题。它还配置了反序列化器 ( `io.apicurio.registry.utils.serde.AvroKafkaDeserializer` )。我们禁用 Kafka 自动提交 ( `enable.auto.commit=false` )，因为 Reactive Messaging 会为您处理偏移提交。"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "Because the sender and receiver are colocalized in the same application, we cannot use the same channel name."
msgstr "由于发送方和接收方位于同一个应用程序中，因此我们不能使用相同的通道名。"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "A bit of infrastructure"
msgstr "一点基础设施"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "Before running the application, we need:"
msgstr "在运行应用程序之前，我们需要"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "A Kafka broker"
msgstr "卡夫卡代理"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "The Apicurio schema registry"
msgstr "Apicurio 模式注册表"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "Create the `docker-compose.yaml` file at the root of your project with the following content:"
msgstr "在项目根目录下创建 `docker-compose.yaml` 文件，内容如下："

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"This `docker-compose` file starts everything we need.\n"
"You may wonder about some of the properties of the Apicurio registry.\n"
"Actually, the Apicurio registry is also a Quarkus application."
msgstr "这个 `docker-compose` 文件启动了我们所需的一切。你可能想知道 Apicurio 注册表的一些属性。事实上，Apicurio 注册表也是一个 Quarkus 应用程序。"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "Time to run"
msgstr "跑步时间"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"Alright, let's get this rolling.\n"
"First, start the infrastructure with:"
msgstr "好了，让我们开始吧。首先，启动基础设施："

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "Stop the infrastructure with `docker-compose down; docker-compose rm`"
msgstr "停止基础设施 `docker-compose down; docker-compose rm`"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "Then, start the application:"
msgstr "然后，启动应用程序："

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "Once start, open another terminal and _post_ movies:"
msgstr "启动后，打开另一个终端并 _发布_ 电影："

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "In the application log, you should see:"
msgstr "在应用程序日志中，您应该可以看到"

#: _posts/2020-09-22-kafka-avro.adoc
msgid "Conclusion"
msgstr "解决方案"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid ""
"Done!\n"
"In just a few code lines and a bit of configuration, we can integrate Kafka, Avro, and a schema registry in a Quarkus application!\n"
"You can found the code of this demo on https://github.com/cescoffier/quarkus-kafka-and-avro. The readme file contains the instructions to run it."
msgstr "完成！只需几行代码和一点配置，我们就能在 Quarkus 应用程序中集成 Kafka、Avro 和模式注册表！你可以在 https://github.com/cescoffier/quarkus-kafka-and-avro 上找到该演示的代码。自述文件中包含了运行说明。"

#: _posts/2020-09-22-kafka-avro.adoc
#, fuzzy
msgid "Quarkus 1.9 will be a lots of new goodies around messaging and reactive in general. Stay tuned!"
msgstr "Quarkus 1.9 将为消息传递和一般反应提供大量新功能。敬请期待！"
