# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-03-06 12:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy, no-wrap
msgid "Express Hibernate Queries as Type-Safe Java Streams"
msgstr "将Hibernate查询表达为类型安全的Java流"

#. type: YAML Front Matter: synopsis
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy, no-wrap
msgid "Writing Hibernate queries using the Criteria API can be anything but intuitive and comes at the expense of wordiness. In this article, you will learn how the JPAStreamer Quarkus extension facilitates type-safe Hibernate queries without unnecessary complexity."
msgstr "使用Criteria API编写Hibernate查询可能是不直观的，而且是以牺牲文字为代价的。在这篇文章中，你将了解到JPAStreamer Quarkus扩展如何促进类型安全的Hibernate查询，而没有不必要的复杂性。"

#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "Writing Hibernate queries using the Criteria API can be anything but intuitive and comes at the expense of wordiness. In this article, you will learn how the  Quarkus extension facilitates type-safe Hibernate queries without unnecessary complexity."
msgstr "使用标准应用程序接口（Criteria API）来编写 Hibernate 查询可能并不直观，而且还会以冗长的文字为代价。在这篇文章中，你将了解 Quarkus 扩展如何帮助实现类型安全的 Hibernate 查询，同时避免不必要的复杂性。"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "As much as the JPA Criteria builder is expressive, JPA queries are often equally verbose, and the API itself can be unintuitive to use, especially for newcomers. In the Quarkus ecosystem, Panache is a partial remedy for these problems when using Hibernate ORM. Still, I find myself juggling the Panache’s helper methods, preconfigured Enums and raw Strings when composing anything but the simplest of queries. You could claim I am just inexperienced and impatient or instead acknowledge that the perfect API is frictionless to use for everyone. Thus, the user experience of writing JPA queries can be further improved in that direction."
msgstr "就像JPA Criteria builder的表现力一样，JPA的查询往往也同样啰嗦，而且API本身的使用也不直观，尤其是对于新手来说。在Quarkus生态系统中，Panache是使用Hibernate ORM时对这些问题的部分补救措施。但是，我发现自己在组成任何东西时，除了最简单的查询外，还需要处理Panache的辅助方法、预先配置的Enums和原始字符串。你可以说我只是缺乏经验，没有耐心，或者承认完美的API对每个人来说都是无摩擦的。因此，编写JPA查询的用户体验可以朝着这个方向进一步改进。"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "One of the remaining shortcomings is that raw Strings are inherently not type-safe, meaning my IDE rejects me the helping hand of code completion and wish me good luck at best. On the upside, Quarkus facilitates application relaunches in a split second to issue quick verdicts on my code. And nothing beats the heart-felt joy and genuine surprise when I have composed a working query on the fifth, rather than the tenth, attempt..."
msgstr "剩下的一个缺点是，原始字符串本质上不是类型安全的，这意味着我的IDE拒绝了代码完成的帮助，顶多祝我好运。从好的方面看，Quarkus促进了应用程序的重新启动，在一瞬间对我的代码作出了快速的裁决。当我在第五次，而不是第十次尝试时，组成了一个有效的查询，没有什么比这更让人发自内心的喜悦和真正的惊喜了......"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "With this in mind, we built the open source library JPAStreamer to make the process of writing Hibernate queries more intuitive and less time-consuming, while leaving your existing codebase intact. It achieves this goal by allowing queries to be expressed as standard Java Streams. Upon execution, JPAStreamer translates the Stream pipeline to a HQL query for efficient execution and thereby avoids materialising anything but the relevant results."
msgstr "考虑到这一点，我们建立了开源库JPAStreamer，以使编写Hibernate查询的过程更直观、更省时，同时保留你现有的代码库。它通过允许查询被表达为标准的Java流来实现这一目标。在执行时，JPAStreamer将流管道翻译成HQL查询，以便有效地执行，从而避免了除了相关结果之外的任何东西。"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "Let me take an example - in some random database exists a table called person represented in a Hibernate application by the following standard `@Entity`:"
msgstr "让我举个例子--在某个随机的数据库中存在一个名为person的表，在Hibernate应用程序中由以下标准 `@Entity` 。"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "To fetch the `Person` with an `Id` of 1 using JPAStreamer and Hibernate ORM, all you need is the following:"
msgstr "要使用JPAStreamer和Hibernate ORM获取 `Person` ， `Id` ，你所需要的就是以下内容。"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "Initialize JPAStreamer in one line, the underlying JPA provider handles the DB configuration."
msgstr "在一行中初始化JPAStreamer，底层JPA提供者处理DB配置。"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "The Stream source is set to be the Person table."
msgstr "流源被设置为人表。"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "The filter operation is treated as a SQL WHERE clause and the condition is expressed type-safely with JPAStreamer predicates (more on this to follow)."
msgstr "过滤操作被视为SQL的WHERE子句，条件用JPAStreamer谓词进行类型安全的表达（更多内容将在后面介绍）。"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "Despite it looking as if JPAStreamer operates on all `Person` objects, the pipeline is optimized to a single query, in this case:"
msgstr "尽管看起来好像JPAStreamer对所有 `Person` 对象进行操作，但在这种情况下，流水线被优化为单一的查询。"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "Thus, only the `Person` matching the search criteria is ever materialized."
msgstr "因此，只有符合搜索标准的 `Person` ，才会被具体化。"

#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "Next, we can look at a more complex example in which I am searching  for persons with a first name ending with an “A” and a last name that starts with “B”. The matches are sorted primarily by the first name and secondly by last name. I further decide to apply an offset of 5, excluding the first five results, and to limit the total results to 10. Here is the Stream pipeline to achieve this task:"
msgstr "接下来，我们来看一个更复杂的例子：我正在搜索名字以 \"A \"结尾、姓氏以 \"B \"开头的人。匹配结果主要按名字排序，其次按姓氏排序。我还决定应用 5 的偏移量，排除前五个结果，并将结果总数限制为 10。以下是实现这一任务的流水线："

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "Filters can be combined with the and/or operators"
msgstr "过滤器可以与和/或运算符结合使用"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "Easily filter on one or more properties"
msgstr "轻松地对一个或多个属性进行过滤"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "Skip the first 5 Persons"
msgstr "跳过前5个人"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "Return at most 10 Persons"
msgstr "最多返回10人"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "In the context of queries, the Stream operators filter, sort, limit, and skip all have a natural mapping that makes the resulting query expressive and intuitive to read while remaining compact."
msgstr "在查询的背景下，流运算符过滤、排序、限制和跳过都有一个自然的映射，使产生的查询在保持紧凑的同时具有表达性和直观的阅读。"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "The Stream above is translated by JPAStreamer to the following HQL statement:"
msgstr "上面的流被JPAStreamer翻译成以下HQL语句。"

#. type: Title ==
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy, no-wrap
msgid "How JPAStreamer works"
msgstr "JPAStreamer如何工作"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "Okay, it looks simple. But how does it work? JPAstreamer uses an annotation processor to form a meta-model at compile time. It inspects any classes marked with the standard JPA annotation `@Entity`, and for every entity `Foo.class`, a corresponding `Foo$.class` is created. The generated classes represent entity attributes as Fields used to form predicates on the form `User$.firstName.startsWith(\"A\")` that can be interpreted by JPAStreamer's query optimizer."
msgstr "好吧，它看起来很简单。但它是如何工作的呢？JPAstreamer使用一个注解处理器在编译时形成一个元模型。它检查任何标有标准JPA注解的类 `@Entity` ，并为每个实体 `Foo.class` ，创建一个相应的 `Foo$.class` 。生成的类代表了实体的属性，作为用于形成预定义的字段， `User$.firstName.startsWith(\"A\")` ，可以被JPAStreamer的查询优化器所解释。"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "It is worth repeating that JPAStreamer does not alter or disturb the existing codebase but merely extends the API to handle Java Stream queries."
msgstr "值得重申的是，JPAStreamer并没有改变或干扰现有的代码库，而只是扩展了API以处理Java Stream查询。"

#. type: Title ==
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy, no-wrap
msgid "Installing the JPAstreamer Extension"
msgstr "安装JPAstreamer扩展"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "JPAStreamer is installed as any other Quarkus extension, using a Maven dependency:"
msgstr "JPAStreamer的安装与其他Quarkus扩展一样，使用Maven依赖性。"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "After the dependency is added, rebuild your Quarkus application to trigger JPAStreamer’s annotation processor. The installation is complete once the generated fields reside in `/target/generated-sources`; you’ll recognise them by the trailing $ in the classnames, e.g. `Person$.class`."
msgstr "在添加了依赖关系后，重建你的Quarkus应用程序以触发JPAStreamer的注释处理器。一旦生成的字段驻留在 `/target/generated-sources` ，安装就完成了；你可以通过类名中的尾部$来识别它们，例如： `Person$.class` 。"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "JPAStreamer requires an underlying JPA provider, such as Hibernate ORM. For this reason, JPAStreamer needs no additional configuration as the database integration is taken care of by the JPA provider."
msgstr "JPAStreamer需要一个底层JPA提供者，如Hibernate ORM。出于这个原因，JPAStreamer不需要额外的配置，因为数据库的整合是由JPA提供者负责的。"

#. type: Title ==
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy, no-wrap
msgid "JPAStreamer and Panache"
msgstr "JPAStreamer和Panache"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "Any Panache fan will note that JPAStreamer shares some of its objectives with Panache, in simplifying many common queries. Still, JPAStreamer distinguishes itself by instilling more confidence in the queries with its type-safe Stream interface. Luckily however, no one if forced to take a pick as Panache and JPAStreamer work seamlessly alongside each other."
msgstr "任何Panache的粉丝都会注意到，JPAStreamer与Panache有一些共同的目标，即简化许多常见的查询。然而，JPAStreamer的与众不同之处在于，它的类型安全的流接口为查询注入了更多信心。然而，幸运的是，没有人被迫做出选择，因为Panache和JPAStreamer可以无缝地一起工作。"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "link:https://github.com/speedment/jpa-streamer-demo/tree/master/quarkus-hibernate-panache[Here] is an example Quarkus application that uses both JPAStreamer and Panache."
msgstr "link:https//github.com/speedment/jpa-streamer-demo/tree/master/quarkus-hibernate-panache[下面] 是一个同时使用JPAStreamer和Panache的Quarkus应用实例。"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "At the time of writing, JPAStreamer does not have support for Panache’s Active Record Pattern, as it relies on standard JPA Entities to generate its meta model. This will likely change in the near future."
msgstr "在撰写本文时，JPAStreamer并不支持Panache的Active Record Pattern，因为它依赖于标准的JPA实体来生成其元模型。这可能会在不久的将来改变。"

#. type: Title ==
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy, no-wrap
msgid "Summary"
msgstr "摘要"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "JPA in general, and Hibernate ORM in particular, has greatly simplified application database access, but its API sometimes forces unnecessary complexity. With JPAstreamer, you can utilize JPA while keeping your codebase clean and maintainable."
msgstr "一般来说，JPA，尤其是Hibernate ORM，极大地简化了应用程序的数据库访问，但其API有时会迫使人们产生不必要的复杂性。通过JPAstreamer，你可以利用JPA，同时保持你的代码库的清洁和可维护。"

#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "Resources"
msgstr "资源"

#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "**GitHub:** link:https://github.com/quarkiverse/quarkus-jpastreamer[github.com/quarkiverse/quarkus-jpastreamer]"
msgstr "*GitHub：* link:https://github.com/quarkiverse/quarkus-jpastreamer[github.com/quarkiverse/quarkus-jpastreamer]"

#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "**Homepage:** link:https://jpastreamer.org[jpastreamer.org]"
msgstr "*主页：* link:https://jpastreamer.org[jpastreamer.org]"

#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "**JPAStreamer Quarkus Demo:** link:https//github.com/speedment/jpa-streamer-demo/tree/master/quarkus-hibernate-panache[github.com/speedment/jpa-streamer-demo/tree/master/quarkus-hibernate-panache]"
msgstr "*JPAStreamer Quarkus 演示：* link:https//github.com/speedment/jpa-streamer-demo/tree/master/quarkus-hibernate-panache[github.com/speedment/jpa-streamer-demo/tree/master/quarkus-hibernate-panache]"

#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "**Documentation:** link:https://speedment.github.io/jpa-streamer[speedment.github.io/jpa-streamer]"
msgstr "*文档：* link:https://speedment.github.io/jpa-streamer[speedment.github.io/jpa-streamer]"

#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "**Gitter Support Chat:** link:https://gitter.im/jpa-streamer[gitter.im/jpa-streamer]"
msgstr "*Gitter 支持聊天：* link:https://gitter.im/jpa-streamer[gitter.im/jpa-streamer]"
