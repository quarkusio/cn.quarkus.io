# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy, no-wrap
msgid "Monitoring Quarkus JVM Mode With Cryostat"
msgstr "用Cryostat监控Quarkus JVM模式"

#. type: YAML Front Matter: synopsis
#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy, no-wrap
msgid "Introduction to Cryostat for Quarkus developers and step-by-step guide on configuring Quarkus applications for Cryostat compatibility"
msgstr "为Quarkus开发人员介绍Cryostat，并逐步指导配置Quarkus应用程序的Cryostat兼容性。"

#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy
msgid ""
"https://developers.redhat.com/blog/2021/01/25/introduction-to-containerjfr-jdk-flight-recorder-for-containers[Cryostat^] is a profiling and monitoring tool that leverages the\n"
"https://developers.redhat.com/blog/2020/08/25/get-started-with-jdk-flight-recorder-in-openjdk-8u[JDK Flight Recorder^] (JFR) framework already present in your Java applications\n"
"running on the HotSpot JVM. Cryostat provides an in-cluster collection hub for easy and secure access to your JDK Flight Recorder data from outside the cluster. Cryostat is\n"
"a cloud-native application primarily targeting deployment on OpenShift, so this guide will assume you are also deploying your Quarkus applications to OpenShift for simplicity."
msgstr "link:https://developers.redhat.com/blog/2021/01/25/introduction-to-containerjfr-jdk-flight-recorder-for-containers[Cryostat] 是一种剖析和监控工具，可利用在 HotSpot JVM 上运行的 Java 应用程序中已有的 link:https://developers.redhat.com/blog/2020/08/25/get-started-with-jdk-flight-recorder-in-openjdk-8u[JDK Flight Recorder] (JFR) 框架。Cryostat 提供了一个集群内收集中心，可从集群外轻松、安全地访问 JDK Flight Recorder 数据。Cryostat 是一款云原生应用程序，主要针对在 OpenShift 上的部署，因此为简单起见，本指南将假设您也将 Quarkus 应用程序部署到 OpenShift。"

#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy
msgid ""
"In this article we will explore how to configure Quarkus applications to allow Cryostat to connect to them, allowing Cryostat to communicate with Quarkus and provide its\n"
"JDK Flight Recorder collection, storage, and analysis tooling."
msgstr "在本文中，我们将探讨如何配置 Quarkus 应用程序，使 Cryostat 能够与其连接，从而让 Cryostat 与 Quarkus 通信，并提供其 JDK 飞行记录仪收集、存储和分析工具。"

#. type: Block title
#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy, no-wrap
msgid "Cryostat Automated Analysis Report"
msgstr "低温恒温器自动分析报告"

#. type: Block title
#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy, no-wrap
msgid "Cryostat Grafana Dashboard"
msgstr "Cryostat Grafana仪表板"

#. type: Title ==
#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy, no-wrap
msgid "Caveats for Cryostat with Quarkus"
msgstr "使用Quarkus的Cryostat的注意事项"

#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy
msgid ""
"Quarkus famously has the ability to be built in standard JVM mode (the build produces .JAR files to be loaded and run by the JVM at runtime) or native mode (the build produces\n"
"a native binary to be directly executed). Cryostat relies upon both JDK Flight Recorder (JFR), which is only partially supported in Quarkus native mode, and JDK Management Extensions\n"
"(JMX), which is not supported in native mode at the time of writing. This means that, unfortunately, only JVM-mode Quarkus applications can be configured for use with Cryostat."
msgstr "众所周知，Quarkus 能以标准 JVM 模式（生成 .JAR 文件，由 JVM 在运行时加载和运行）或本地模式（生成本地二进制文件，直接执行）构建。Cryostat 依赖于 JDK Flight Recorder（JFR）和 JDK Management Extensions（JMX），前者在 Quarkus 本机模式下仅受部分支持，而后者在撰写本文时还不支持本机模式。这意味着，不幸的是，只有 JVM 模式的 Quarkus 应用程序才能配置为 Cryostat 使用。"

#. type: Title ==
#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy, no-wrap
msgid "Getting Started with Cryostat"
msgstr "开始使用低温恒温器"

#. type: Plain text
#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy
msgid "Getting started with Cryostat on OpenShift is quick and easy - just install it from OperatorHub:"
msgstr "在OpenShift上开始使用Cryostat是快速而简单的，只需从OperatorHub上安装即可。"

#. type: Block title
#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy, no-wrap
msgid "Cryostat Installation"
msgstr "低温恒温器安装"

#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy
msgid ""
"Then create a Cryostat CR resource instance to let the Operator know you'd like to deploy a Cryostat instance. At this stage you can also choose some configuration options, but\n"
"we'll assume the defaults for now."
msgstr "然后创建 Cryostat CR 资源实例，让操作员知道您要部署 Cryostat 实例。在此阶段，您还可以选择一些配置选项，但我们暂且采用默认值。"

#. type: Block title
#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy, no-wrap
msgid "Cryostat Creation"
msgstr "低温恒温器的创建"

#. type: Title ==
#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy, no-wrap
msgid "Cryostat Communication"
msgstr "低温恒温器通信"

#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy
msgid ""
"Cryostat uses JMX to talk to applications running on the HotSpot JVM, including but not limited to Java and Scala applications. JMX is a standard Java technology that allows\n"
"tools to connect to applications and perform actions or retrieve data across a variety of underlying transport protocols. If you build and deploy your Quarkus application in JVM\n"
"mode then JMX support is already built-in and ready out of the box. There are two ways to enable JMX on your application."
msgstr "Cryostat 使用 JMX 与运行在 HotSpot JVM 上的应用程序（包括但不限于 Java 和 Scala 应用程序）对话。JMX 是一种标准 Java 技术，允许工具连接到应用程序，并执行操作或通过各种底层传输协议检索数据。如果你以 JVM 模式构建和部署 Quarkus 应用程序，那么 JMX 支持已经内置，开箱即用。在应用程序上启用 JMX 有两种方法。"

#. type: Title ===
#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy, no-wrap
msgid "Method 1: Enable it at runtime"
msgstr "方法1：在运行时启用"

#. type: Plain text
#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy
msgid "JMX can be enabled by setting JVM system properties:"
msgstr "JMX可以通过设置JVM系统属性来启用。"

#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy
msgid ""
"-Dcom.sun.management.jmxremote\n"
"-Dcom.sun.management.jmxremote.port=${RJMX_PORT}\n"
"-Dcom.sun.management.jmxremote.rmi.port=${RJMX_PORT}\n"
"-Djava.rmi.server.hostname=127.0.0.1\n"
"-Dcom.sun.management.jmxremote.authenticate=false\n"
"-Dcom.sun.management.jmxremote.ssl=false\n"
"-Dcom.sun.management.jmxremote.local.only=false"
msgstr "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=${RJMX_PORT} -Dcom.sun.management.jmxremote.rmi.port=${RJMX_PORT} -Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false"

#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy
msgid ""
"Where `+${RJMX_PORT}+` is replaced with your chosen port number for the remote JMX network connection over RMI. In this example we disable JMX authentication and JMX SSL - in\n"
"practice these should both be enabled for security reasons, but configuring these particular options is out of scope for this guide. Please see\n"
"https://docs.oracle.com/javadb/10.10.1.2/adminguide/radminjmxenablepwdssl.html[this document^] for further information."
msgstr "其中 `${RJMX_PORT}` 被替换为您选择的通过 RMI 进行远程 JMX 网络连接的端口号。在本例中，我们禁用了 JMX 身份验证和 JMX SSL - 实际上，出于安全考虑，这两个选项都应启用，但配置这些特定选项不在本指南的讨论范围之内。有关详细信息，请参阅 link:https://docs.oracle.com/javadb/10.10.1.2/adminguide/radminjmxenablepwdssl.html[本文档] 。"

#. type: Plain text
#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy
msgid "Quarkus uses a feature-rich application startup script, which allows us to add JVM system properties at runtime by simply setting an environment variable:"
msgstr "Quarkus使用了一个功能丰富的应用程序启动脚本，它允许我们在运行时通过简单设置环境变量来添加JVM系统属性。"

#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy
msgid "JAVA_OPTS_APPEND=\"-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=${RJMX_PORT} -Dcom.sun.management.jmxremote.rmi.port=${RJMX_PORT} -Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false\""
msgstr "JAVA_OPTS_APPEND=\"-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=${RJMX_PORT} -Dcom.sun.management.jmxremote.rmi.port=${RJMX_PORT} -Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false\""

#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy
msgid ""
"If you are running your Quarkus application in OpenShift or Kubernetes then try setting this environment variable in your `+Deployment+` or `+DeploymentConfig+`, nested\n"
"within the `+Spec+` for the application's `+Container+`. This method of enabling JMX does not require the Quarkus application to be rebuilt, only to be redeployed."
msgstr "如果你是在 OpenShift 或 Kubernetes 中运行 Quarkus 应用程序，那么可以尝试在 `Deployment` 或 `DeploymentConfig` 中设置这个环境变量，嵌套在应用程序的 `Spec` `Container` 中。这种启用 JMX 的方法不需要重建 Quarkus 应用程序，只需要重新部署即可。"

#. type: Title ===
#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy, no-wrap
msgid "Method 2: Enable it at build time"
msgstr "方法2：在构建时启用它"

#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy
msgid ""
"The same JVM system properties as before can be added to containerized Quarkus applications by editing the `+Dockerfile.jvm+` under `+src/main/docker/+`. Below is a sample\n"
"`+Dockerfile.jvm+` from a basic Quarkus project - pay attention to the `+ENV JAVA_OPTS_APPEND+` line that has been added to append the JVM properties and expose the port number:"
msgstr "通过编辑 `src/main/docker/` 下的 `Dockerfile.jvm` ，可以向容器化的 Quarkus 应用程序添加与之前相同的 JVM 系统属性。下面是一个基本 Quarkus 项目的 `Dockerfile.jvm` 示例--请注意添加了 `ENV JAVA_OPTS_APPEND` 行，以附加 JVM 属性并公开端口号："

#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy
msgid ""
"FROM registry.access.redhat.com/ubi8/openjdk-11:1.11\n"
"\n"
"ENV LANG='en_US.UTF-8' LANGUAGE='en_US:en'\n"
"\n"
"\n"
"# We make four distinct layers so if there are application changes the library layers can be re-used\n"
"COPY --chown=185 target/quarkus-app/lib/ /deployments/lib/\n"
"COPY --chown=185 target/quarkus-app/*.jar /deployments/\n"
"COPY --chown=185 target/quarkus-app/app/ /deployments/app/\n"
"COPY --chown=185 target/quarkus-app/quarkus/ /deployments/quarkus/\n"
"\n"
"EXPOSE 8080 ${RJMX_PORT}\n"
"USER 185\n"
"ENV JAVA_OPTS=\"-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager\"\n"
"ENV JAVA_OPTS_APPEND=\"-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=${RJMX_PORT} -Dcom.sun.management.jmxremote.rmi.port=${RJMX_PORT} -Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false\"\n"
"ENV JAVA_APP_JAR=\"/deployments/quarkus-run.jar\""
msgstr "FROM registry.access.redhat.com/ubi8/openjdk-11:1.11"

#. type: Plain text
#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy
msgid "Again, be sure to replace `+${RJMX_PORT}+` on all lines with a port number in this file."
msgstr "同样，要确保在这个文件中用端口号替换所有行的 `${RJMX_PORT}` 。"

#. type: Plain text
#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy
msgid "This method is less flexible because it requires the remote JMX port number to be known at build time, and it requires the application to be rebuilt and redeployed."
msgstr "这种方法不太灵活，因为它要求在构建时知道远程JMX端口号，而且需要重建和重新部署应用程序。"

#. type: Title ==
#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy, no-wrap
msgid "Cryostat Discovery"
msgstr "低温恒温器的发现"

#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy
msgid ""
"Now that we have enabled JMX on our Quarkus application and redeployed it, it is ready to talk to Cryostat. Before this can happen, however, Cryostat needs to know how and where\n"
"to find the application. There are two ways to achieve this: automatic discovery and custom targets. Automatic discovery is the preferred method and is enabled by default. Custom\n"
"targets can be used to fill in gaps for deployed application targets that do not meet the criteria for automatic discovery, but which are known to be reachable over the network."
msgstr "现在，我们已经在 Quarkus 应用程序上启用了 JMX 并重新部署了它，它已经准备好与 Cryostat 对话了。不过，在此之前，Cryostat 需要知道如何以及在哪里找到应用程序。实现这一点有两种方法：自动发现和自定义目标。自动发现是首选方法，默认情况下已启用。自定义目标可用于填补已部署应用程序目标的空白，这些目标不符合自动发现的标准，但已知可通过网络到达。"

#. type: Title ===
#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy, no-wrap
msgid "Automatic Discovery"
msgstr "自动发现"

#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy
msgid ""
"Cryostat can discover target applications automatically and use their discovered Remote JMX service URLs to connect. Automatic discovery depends on the deployment platform - at\n"
"the time of writing, Cryostat will use the OpenShift/Kubernetes API to discover `+Endpoints+` objects when deployed on OpenShift/Kubernetes. If no OpenShift/Kubernetes API server\n"
"is available then Cryostat falls back to using the Java Discovery Protocol (JDP). In any case the automatically discovered targets are merged with the custom targets. If\n"
"OpenShift/Kubernetes `+Endpoints+` discovery is used then the target application should have an associated `+Service+` object that exposes a port for cluster-internal JMX traffic.\n"
"This port must either use the port number 9091 or have the name `+jfr-jmx+` for Cryostat to pick it up as an intended target application."
msgstr "Cryostat 可自动发现目标应用程序，并使用发现的远程 JMX 服务 URL 进行连接。自动发现取决于部署平台--在撰写本文时，Cryostat 将使用 OpenShift/Kubernetes API 发现部署在 OpenShift/Kubernetes 上的 `Endpoints` 对象。如果没有 OpenShift/Kubernetes API 服务器，Cryostat 就会退回到使用 Java 发现协议（JDP）。在任何情况下，自动发现的目标都会与自定义目标合并。如果使用 OpenShift/Kubernetes `Endpoints` 发现，则目标应用程序应拥有一个关联的 `Service` 对象，该对象应为集群内部 JMX 流量提供一个端口。该端口必须使用端口号 9091 或名称 `jfr-jmx` ，以便 Cryostat 将其作为目标应用程序。"

#. type: Title ===
#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy, no-wrap
msgid "Custom Targets"
msgstr "定制目标"

#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy
msgid ""
"This is a way for Cryostat clients (end users or other automated tooling) to tell Cryostat how and where to find a single target application instance. A Custom Target definition\n"
"is at its core simply a network-reachable remote connection JMX URL and a human-readable alias. These can be created in the Cryostat web client by clicking the `+++` (Plus) icon\n"
"on the target selection dropdown or by using your preferred HTTP client:"
msgstr "这是 Cryostat 客户（终端用户或其他自动化工具）告诉 Cryostat 如何以及在何处找到单个目标应用程序实例的一种方式。自定义目标定义的核心是一个可通过网络连接的远程连接 JMX URL 和一个人类可读的别名。在 Cryostat 网络客户端中，点击目标选择下拉菜单中的 `+` (Plus) 图标，或使用您喜欢的 HTTP 客户端，即可创建自定义目标："

#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy
msgid ""
"curl \\\n"
"  -X POST \\\n"
"  -F alias=myapp \\\n"
"  -F connectUrl=service:jmx:rmi:///jndi/rmi://myapp.my-openshift-cluster.example.com:1234/jmxrmi \\\n"
"  https://cryostat.my-openshift-cluster.example.com/api/v2/targets"
msgstr "curl \\ -X POST \\ -F alias=myapp \\ -F connectUrl=service:jmx:rmi:///jndi/rmi://myapp.my-openshift-cluster.example.com:1234/jmxrmi \\ https://cryostat.my-openshift-cluster.example.com/api/v2/targets"

#. type: Plain text
#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy
msgid "Once a custom target definition is added the `+connectUrl+` can be used as a `+targetId+` URL parameter anywhere one is expected in the Cryostat HTTP API."
msgstr "一旦添加了自定义目标定义， `connectUrl` ，就可以在Cryostat HTTP API中预期的任何地方作为 `targetId` URL参数使用。"

#. type: Plain text
#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy
msgid "Please see the following links for further information on Cryostat:"
msgstr "有关Cryostat的进一步信息，请参见以下链接。"

#. type: Plain text
#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy
msgid "https://developers.redhat.com/blog/2021/01/25/introduction-to-containerjfr-jdk-flight-recorder-for-containers[Introduction to Cryostat on the Red Hat Developers blog^]"
msgstr "link:https://developers.redhat.com/blog/2021/01/25/introduction-to-containerjfr-jdk-flight-recorder-for-containers[Red Hat Developers 博客上的 Cryostat 简介]"

#. type: Plain text
#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy
msgid "https://developers.redhat.com/articles/2021/10/26/configuring-java-applications-use-cryostat[Setup guide for Java Application to use Cryostat on the Red Hat Developers blog^]"
msgstr "link:https://developers.redhat.com/articles/2021/10/26/configuring-java-applications-use-cryostat[Red Hat Developers 博客上关于 Java 应用程序使用 Cryostat 的设置指南]"

#. type: Plain text
#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy
msgid "https://developers.redhat.com/articles/2021/11/02/java-monitoring-custom-targets-cryostat[Guide for using Cryostat Custom Targets on the Red Hat Developers blog^]"
msgstr "link:https://developers.redhat.com/articles/2021/11/02/java-monitoring-custom-targets-cryostat[Red Hat Developers 博客上的 Cryostat 自定义目标使用指南]"

#. type: Plain text
#: _posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc
#, fuzzy
msgid "https://cryostat.io/[Cryostat's upstream website^]"
msgstr "link:https://cryostat.io/[Cryostat 上游网站]"
