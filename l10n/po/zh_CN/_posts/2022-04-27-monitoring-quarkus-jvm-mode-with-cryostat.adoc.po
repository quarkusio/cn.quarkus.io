# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:1
#, fuzzy, no-wrap
msgid "aazores"
msgstr "aazores"

#. type: YAML Front Matter: date
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:1
#, fuzzy, no-wrap
msgid "2022-04-27"
msgstr "2022-04-27"

#. type: YAML Front Matter: layout
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "职位"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:1
#, fuzzy, no-wrap
msgid "Introduction to Cryostat for Quarkus developers and step-by-step guide on configuring Quarkus applications for Cryostat compatibility"
msgstr "为Quarkus开发人员介绍Cryostat，并逐步指导配置Quarkus应用程序的Cryostat兼容性。"

#. type: YAML Front Matter: tags
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:1
#, fuzzy, no-wrap
msgid "monitoring metrics profiling cryostat jfr flightrecorder kubernetes openshift containers"
msgstr "监控指标分析 cryostat jfr flightrecorder kubernetes openshift containers"

#. type: YAML Front Matter: title
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:1
#, fuzzy, no-wrap
msgid "Monitoring Quarkus JVM Mode with Cryostat"
msgstr "用Cryostat监控Quarkus JVM模式"

#. type: Title =
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:11
#, fuzzy, no-wrap
msgid "Monitoring Quarkus JVM Mode With Cryostat"
msgstr "用Cryostat监控Quarkus JVM模式"

#. type: Plain text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:17
#, fuzzy
msgid "https://developers.redhat.com/blog/2021/01/25/introduction-to-containerjfr-jdk-flight-recorder-for-containers[Cryostat^] is a profiling and monitoring tool that leverages the https://developers.redhat.com/blog/2020/08/25/get-started-with-jdk-flight-recorder-in-openjdk-8u[JDK Flight Recorder^] (JFR) framework already present in your Java applications running on the HotSpot JVM. Cryostat provides an in-cluster collection hub for easy and secure access to your JDK Flight Recorder data from outside the cluster. Cryostat is a cloud-native application primarily targeting deployment on OpenShift, so this guide will assume you are also deploying your Quarkus applications to OpenShift for simplicity."
msgstr "link:https://developers.redhat.com/blog/2021/01/25/introduction-to-containerjfr-jdk-flight-recorder-for-containers[Cryostat, target=\"_blank\"] 是一个剖析和监控工具，它利用HotSpot JVM上运行的Java应用程序中已有的 link:https://developers.redhat.com/blog/2020/08/25/get-started-with-jdk-flight-recorder-in-openjdk-8u[JDK Flight Recorder, target=\"_blank\"] （JFR）框架。Cryostat提供了一个集群内的收集中心，以便从集群外轻松、安全地访问你的JDK飞行记录器数据。Cryostat是一个云原生应用程序，主要针对OpenShift上的部署，因此本指南将假设你也将你的Quarkus应用程序部署到OpenShift上，以示简单。"

#. type: Plain text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:20
#, fuzzy
msgid "In this article we will explore how to configure Quarkus applications to allow Cryostat to connect to them, allowing Cryostat to communicate with Quarkus and provide its JDK Flight Recorder collection, storage, and analysis tooling."
msgstr "在这篇文章中，我们将探讨如何配置Quarkus应用程序以允许Cryostat与之连接，使Cryostat能够与Quarkus通信并提供其JDK飞行记录仪的收集、存储和分析工具。"

#. type: Block title
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:21
#, fuzzy, no-wrap
msgid "Cryostat Automated Analysis Report"
msgstr "低温恒温器自动分析报告"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:22
#, fuzzy, no-wrap
msgid "Automated"
msgstr "自动化的"

#. type: Target for macro image
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:22
#, no-wrap
msgid "cryostat-recording-report.png"
msgstr ""

#. type: Block title
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:24
#, fuzzy, no-wrap
msgid "Cryostat Grafana Dashboard"
msgstr "Cryostat Grafana仪表板"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:25
#, fuzzy, no-wrap
msgid "Grafana"
msgstr "ǞǞǞ"

#. type: Target for macro image
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:25
#, no-wrap
msgid "cryostat-grafana-dashboard.png"
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:27
#, fuzzy, no-wrap
msgid "Caveats for Cryostat with Quarkus"
msgstr "使用Quarkus的Cryostat的注意事项"

#. type: Plain text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:32
#, fuzzy
msgid "Quarkus famously has the ability to be built in standard JVM mode (the build produces .JAR files to be loaded and run by the JVM at runtime) or native mode (the build produces a native binary to be directly executed). Cryostat relies upon both JDK Flight Recorder (JFR), which is only partially supported in Quarkus native mode, and JDK Management Extensions (JMX), which is not supported in native mode at the time of writing. This means that, unfortunately, only JVM-mode Quarkus applications can be configured for use with Cryostat."
msgstr "Quarkus可以在标准的JVM模式（构建产生的.JAR文件在运行时由JVM加载和运行）或本地模式（构建产生的本地二进制文件可直接执行）下构建。Cryostat依赖于JDK Flight Recorder（JFR）和JDK Management Extensions（JMX），前者在Quarkus本地模式下只得到部分支持，后者在编写本文时不支持本地模式。这意味着，不幸的是，只有JVM模式的Quarkus应用程序可以被配置为Cryostat使用。"

#. type: Title ==
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:33
#, fuzzy, no-wrap
msgid "Getting Started with Cryostat"
msgstr "开始使用低温恒温器"

#. type: Plain text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:36
#, fuzzy
msgid "Getting started with Cryostat on OpenShift is quick and easy - just install it from OperatorHub:"
msgstr "在OpenShift上开始使用Cryostat是快速而简单的，只需从OperatorHub上安装即可。"

#. type: Block title
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:37
#, fuzzy, no-wrap
msgid "Cryostat Installation"
msgstr "低温恒温器安装"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:38
#, fuzzy, no-wrap
msgid "Cryostat"
msgstr "冷冻机"

#. type: Target for macro image
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:38
#, no-wrap
msgid "cryostat-operatorhub.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:42
#, fuzzy
msgid "Then create a Cryostat CR resource instance to let the Operator know you'd like to deploy a Cryostat instance. At this stage you can also choose some configuration options, but we'll assume the defaults for now."
msgstr "然后创建一个Cryostat CR资源实例，让操作员知道你想部署一个Cryostat实例。在这个阶段，你还可以选择一些配置选项，但我们现在先假设默认值。"

#. type: Block title
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:43
#, fuzzy, no-wrap
msgid "Cryostat Creation"
msgstr "低温恒温器的创建"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:44
#, fuzzy, no-wrap
msgid "A"
msgstr "A"

#. type: Target for macro image
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:44
#, no-wrap
msgid "cryostat-operator-resource.png"
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:46
#, fuzzy, no-wrap
msgid "Cryostat Communication"
msgstr "低温恒温器通信"

#. type: Plain text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:51
#, fuzzy
msgid "Cryostat uses JMX to talk to applications running on the HotSpot JVM, including but not limited to Java and Scala applications. JMX is a standard Java technology that allows tools to connect to applications and perform actions or retrieve data across a variety of underlying transport protocols. If you build and deploy your Quarkus application in JVM mode then JMX support is already built-in and ready out of the box. There are two ways to enable JMX on your application."
msgstr "Cryostat使用JMX与HotSpot JVM上运行的应用程序对话，包括但不限于Java和Scala应用程序。JMX是一种标准的Java技术，它允许工具连接到应用程序，并通过各种底层传输协议执行操作或检索数据。如果你在JVM模式下构建和部署你的Quarkus应用程序，那么JMX支持已经内置并准备好开箱即用。有两种方法可以在你的应用程序上启用JMX。"

#. type: Title ===
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:52
#, fuzzy, no-wrap
msgid "Method 1: Enable it at runtime"
msgstr "方法1：在运行时启用"

#. type: Plain text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:55
#, fuzzy
msgid "JMX can be enabled by setting JVM system properties:"
msgstr "JMX可以通过设置JVM系统属性来启用。"

#. type: delimited block .
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:64
#, fuzzy, no-wrap
msgid ""
"-Dcom.sun.management.jmxremote\n"
"-Dcom.sun.management.jmxremote.port=${RJMX_PORT}\n"
"-Dcom.sun.management.jmxremote.rmi.port=${RJMX_PORT}\n"
"-Djava.rmi.server.hostname=127.0.0.1\n"
"-Dcom.sun.management.jmxremote.authenticate=false\n"
"-Dcom.sun.management.jmxremote.ssl=false\n"
"-Dcom.sun.management.jmxremote.local.only=false\n"
msgstr "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=${RJMX_PORT} -Dcom.sun.management.jmxremote.rmi.port=${RJMX_PORT} -Djava.rmi.server。hostname=127.0.0.1 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false"

#. type: Plain text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:69
#, fuzzy
msgid "Where `+${RJMX_PORT}+` is replaced with your chosen port number for the remote JMX network connection over RMI. In this example we disable JMX authentication and JMX SSL - in practice these should both be enabled for security reasons, but configuring these particular options is out of scope for this guide. Please see https://docs.oracle.com/javadb/10.10.1.2/adminguide/radminjmxenablepwdssl.html[this document^] for further information."
msgstr "其中 `${RJMX_PORT}` ，用你选择的RMI远程JMX网络连接的端口号来代替。在这个例子中，我们禁用了JMX认证和JMX SSL--在实践中，出于安全考虑，这些都应该被启用，但配置这些特定的选项不在本指南的范围内。更多信息请参见 link:https://docs.oracle.com/javadb/10.10.1.2/adminguide/radminjmxenablepwdssl.html[本文档, target=\"_blank\"] 。"

#. type: Plain text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:71
#, fuzzy
msgid "Quarkus uses a feature-rich application startup script, which allows us to add JVM system properties at runtime by simply setting an environment variable:"
msgstr "Quarkus使用了一个功能丰富的应用程序启动脚本，它允许我们在运行时通过简单设置环境变量来添加JVM系统属性。"

#. type: delimited block .
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:74
#, fuzzy, no-wrap
msgid "JAVA_OPTS_APPEND=\"-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=${RJMX_PORT} -Dcom.sun.management.jmxremote.rmi.port=${RJMX_PORT} -Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false\"\n"
msgstr "JAVA_OPTS_APPEND=\"-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=${RJMX_PORT} -Dcom.sun.management.jmxremote.rmi.port=${RJMX_PORT} -Djava.rmi。server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false\""

#. type: Plain text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:78
#, fuzzy
msgid "If you are running your Quarkus application in OpenShift or Kubernetes then try setting this environment variable in your `+Deployment+` or `+DeploymentConfig+`, nested within the `+Spec+` for the application's `+Container+`. This method of enabling JMX does not require the Quarkus application to be rebuilt, only to be redeployed."
msgstr "如果你在OpenShift或Kubernetes中运行你的Quarkus应用程序，那么请尝试在你的 `Deployment` 或 `DeploymentConfig` ，嵌套在应用程序的 `Spec` 中设置这个环境变量 `Container` 。这种启用JMX的方法不需要重建Quarkus应用程序，只需要重新部署。"

#. type: Title ===
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:79
#, fuzzy, no-wrap
msgid "Method 2: Enable it at build time"
msgstr "方法2：在构建时启用它"

#. type: Plain text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:83
#, fuzzy
msgid "The same JVM system properties as before can be added to containerized Quarkus applications by editing the `+Dockerfile.jvm+` under `+src/main/docker/+`. Below is a sample `+Dockerfile.jvm+` from a basic Quarkus project - pay attention to the `+ENV JAVA_OPTS_APPEND+` line that has been added to append the JVM properties and expose the port number:"
msgstr "通过编辑 `src/main/docker/` 下的 `Dockerfile.jvm` ，可以将与之前相同的JVM系统属性添加到容器化Quarkus应用程序中。下面是一个来自基本Quarkus项目的样本 `Dockerfile.jvm` --注意已经添加的 `ENV JAVA_OPTS_APPEND` 行，以附加JVM属性并暴露端口号。"

#. type: delimited block .
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:86
#, fuzzy, no-wrap
msgid "FROM registry.access.redhat.com/ubi8/openjdk-11:1.11\n"
msgstr "FROM 注册表.access.redhat.com/ubi8/openjdk-11:1.11"

#. type: delimited block .
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:88
#, fuzzy, no-wrap
msgid "ENV LANG='en_US.UTF-8' LANGUAGE='en_US:en'\n"
msgstr "ENV LANG='en_US.UTF-8' LANGUAGE='en_US:en' 。"

#. type: delimited block .
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:95
#, fuzzy, no-wrap
msgid ""
"# We make four distinct layers so if there are application changes the library layers can be re-used\n"
"COPY --chown=185 target/quarkus-app/lib/ /deployments/lib/\n"
"COPY --chown=185 target/quarkus-app/*.jar /deployments/\n"
"COPY --chown=185 target/quarkus-app/app/ /deployments/app/\n"
"COPY --chown=185 target/quarkus-app/quarkus/ /deployments/quarkus/\n"
msgstr "COPY --chown=185 target/quarkus-app/app/ /deployments/app/ COPY --chown=185 target/quarkus-app/quarkus/ /deployments/quarkus/"

#. type: delimited block .
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:101
#, fuzzy, no-wrap
msgid ""
"EXPOSE 8080 ${RJMX_PORT}\n"
"USER 185\n"
"ENV JAVA_OPTS=\"-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager\"\n"
"ENV JAVA_OPTS_APPEND=\"-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=${RJMX_PORT} -Dcom.sun.management.jmxremote.rmi.port=${RJMX_PORT} -Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false\"\n"
"ENV JAVA_APP_JAR=\"/deployments/quarkus-run.jar\"\n"
msgstr "expose 8080 ${rjmx_port}.USER 185 ENV JAVA_OPTS=\"-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager\" ENV JAVA_OPTS_APPEND=\"-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=${RJMX_PORT} -Dcom.sun.management.jmxremote。ENV JAVA_APP_JAR=\"/deployments/quarkus-run.jar\" -Dcom.sun.management.jmxremote.port=${RJMX_PORT} -Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.sl=false -Dcom.sun.management.jmxremote.local.only=false\""

#. type: Plain text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:104
#, fuzzy
msgid "Again, be sure to replace `+${RJMX_PORT}+` on all lines with a port number in this file."
msgstr "同样，要确保在这个文件中用端口号替换所有行的 `${RJMX_PORT}` 。"

#. type: Plain text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:106
#, fuzzy
msgid "This method is less flexible because it requires the remote JMX port number to be known at build time, and it requires the application to be rebuilt and redeployed."
msgstr "这种方法不太灵活，因为它要求在构建时知道远程JMX端口号，而且需要重建和重新部署应用程序。"

#. type: Title ==
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:107
#, fuzzy, no-wrap
msgid "Cryostat Discovery"
msgstr "低温恒温器的发现"

#. type: Plain text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:112
#, fuzzy
msgid "Now that we have enabled JMX on our Quarkus application and redeployed it, it is ready to talk to Cryostat. Before this can happen, however, Cryostat needs to know how and where to find the application. There are two ways to achieve this: automatic discovery and custom targets. Automatic discovery is the preferred method and is enabled by default. Custom targets can be used to fill in gaps for deployed application targets that do not meet the criteria for automatic discovery, but which are known to be reachable over the network."
msgstr "现在我们已经在Quarkus应用程序上启用了JMX并重新部署了它，它已经准备好与Cryostat对话。然而，在这之前，Cryostat需要知道如何以及在哪里找到该应用程序。有两种方法来实现这一点：自动发现和自定义目标。自动发现是首选方法，默认情况下是启用的。自定义目标可用于填补部署的应用程序目标的空白，这些目标不符合自动发现的标准，但已知可通过网络到达。"

#. type: Title ===
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:113
#, fuzzy, no-wrap
msgid "Automatic Discovery"
msgstr "自动发现"

#. type: Plain text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:120
#, fuzzy
msgid "Cryostat can discover target applications automatically and use their discovered Remote JMX service URLs to connect. Automatic discovery depends on the deployment platform - at the time of writing, Cryostat will use the OpenShift/Kubernetes API to discover `+Endpoints+` objects when deployed on OpenShift/Kubernetes. If no OpenShift/Kubernetes API server is available then Cryostat falls back to using the Java Discovery Protocol (JDP). In any case the automatically discovered targets are merged with the custom targets. If OpenShift/Kubernetes `+Endpoints+` discovery is used then the target application should have an associated `+Service+` object that exposes a port for cluster-internal JMX traffic.  This port must either use the port number 9091 or have the name `+jfr-jmx+` for Cryostat to pick it up as an intended target application."
msgstr "Cryostat可以自动发现目标应用程序，并使用其发现的远程JMX服务URL进行连接。自动发现取决于部署平台--在撰写本文时，Cryostat将使用OpenShift/Kubernetes API来发现部署在OpenShift/Kubernetes上的 `Endpoints` 对象。如果没有OpenShift/Kubernetes API服务器，那么Cryostat就会退回到使用Java发现协议（JDP）。在任何情况下，自动发现的目标都会与自定义目标合并。如果使用OpenShift/Kubernetes `Endpoints` 发现，那么目标应用程序应该有一个相关的 `Service` 对象，为集群内部的JMX流量暴露一个端口。这个端口必须使用端口号9091或名称为 `jfr-jmx` ，以便Cryostat将其作为预期的目标应用程序。"

#. type: Title ===
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:121
#, fuzzy, no-wrap
msgid "Custom Targets"
msgstr "定制目标"

#. type: Plain text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:126
#, fuzzy
msgid "This is a way for Cryostat clients (end users or other automated tooling) to tell Cryostat how and where to find a single target application instance. A Custom Target definition is at its core simply a network-reachable remote connection JMX URL and a human-readable alias. These can be created in the Cryostat web client by clicking the `+++` (Plus) icon on the target selection dropdown or by using your preferred HTTP client:"
msgstr "这是一种让Cryostat客户（最终用户或其他自动化工具）告诉Cryostat如何以及在哪里找到单一目标应用程序实例的方法。自定义目标的核心是一个网络可到达的远程连接JMX URL和一个人类可读的别名。这些可以在Cryostat网络客户端中通过点击目标选择下拉菜单上的 `+` （加号）图标来创建，或者通过使用你喜欢的HTTP客户端。"

#. type: delimited block .
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:133
#, fuzzy, no-wrap
msgid ""
"curl \\\n"
"  -X POST \\\n"
"  -F alias=myapp \\\n"
"  -F connectUrl=service:jmx:rmi:///jndi/rmi://myapp.my-openshift-cluster.example.com:1234/jmxrmi \\\n"
"  https://cryostat.my-openshift-cluster.example.com/api/v2/targets\n"
msgstr "curl （ -X POST ） （ -F alias=myapp ） （ -F connectUrl=service:jmx:rmi:///jndi/rmi://myapp.my-openshift-cluster.example.com:1234/jmxrmi ） （ https://cryostat.my-openshift-cluster.example.com/api/v2/targets "

#. type: Plain text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:136
#, fuzzy
msgid "Once a custom target definition is added the `+connectUrl+` can be used as a `+targetId+` URL parameter anywhere one is expected in the Cryostat HTTP API."
msgstr "一旦添加了自定义目标定义， `connectUrl` ，就可以在Cryostat HTTP API中预期的任何地方作为 `targetId` URL参数使用。"

#. type: Plain text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:138
#, fuzzy
msgid "Please see the following links for further information on Cryostat:"
msgstr "有关Cryostat的进一步信息，请参见以下链接。"

#. type: Plain text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:140
msgid "https://developers.redhat.com/blog/2021/01/25/introduction-to-containerjfr-jdk-flight-recorder-for-containers[Introduction to Cryostat on the Red Hat Developers blog^]"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:141
msgid "https://developers.redhat.com/articles/2021/10/26/configuring-java-applications-use-cryostat[Setup guide for Java Application to use Cryostat on the Red Hat Developers blog^]"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:142
msgid "https://developers.redhat.com/articles/2021/11/02/java-monitoring-custom-targets-cryostat[Guide for using Cryostat Custom Targets on the Red Hat Developers blog^]"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:142
msgid "https://cryostat.io/[Cryostat's upstream website^]"
msgstr ""
