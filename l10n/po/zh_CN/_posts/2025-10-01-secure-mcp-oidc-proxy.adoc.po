msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Use Quarkus OIDC Proxy to encrypt Quarkus MCP Server tokens"
msgstr "使用 Quarkus OIDC 代理加密 Quarkus MCP 服务器令牌"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Explain how Quarkus OIDC Proxy can encrypt Quarkus MCP Server tokens"
msgstr "解释 Quarkus OIDC Proxy 如何加密 Quarkus MCP 服务器令牌"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
msgid "Introduction"
msgstr "简介"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"In the https://quarkus.io/blog/secure-mcp-server-oauth2/[Use MCP OAuth2 Flow "
"to access Quarkus MCP Server] blog post, we explained how an MCP Client such "
"as https://github.com/modelcontextprotocol/inspector[MCP Inspector] could "
"use the OAuth2 Flow with a pre-registered OAuth2 Client application to "
"discover the MCP server's https://datatracker.ietf.org/doc/html/"
"rfc9728[OAuth2 Protected Resource Metadata], the metadata of the "
"authorization server, login a user and acquire an access token that it could "
"use to access MCP Server provided tools."
msgstr ""
"在 \" link:https://quarkus.io/blog/secure-mcp-server-oauth2/[使用 MCP OAuth2 "
"流程访问 Quarkus MCP 服务器] \"博文中，我们介绍了 MCP 客户端（如 link:https://github.com/"
"modelcontextprotocol/inspector[MCP Inspector] ）如何使用 OAuth2 流程和预先注册的 OAuth2 "
"客户端应用程序来发现 MCP 服务器的 link:https://datatracker.ietf.org/doc/html/"
"rfc9728[OAuth2 受保护资源元数据] 、授权服务器的元数据、登录用户并获取访问令牌，以便用来访问 MCP 服务器提供的工具。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"In this blog post, we will look at how https://github.com/"
"modelcontextprotocol/inspector[MCP Inspector] can register OAuth2 Client "
"applications dynamically, instead of using a pre-registered OAuth2 Client, "
"but also, use https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC "
"Proxy] to delegate to https://www.keycloak.org/[Keycloak] during the MCP "
"OAuth2 flow, <<point-of-using-oidc-proxy,analyze why it can be useful>> and "
"show how it can <<use-oidc-proxy-to-encrypt-tokens,encrypt access and "
"refresh tokens and exclude ID tokens>>, before they are made available to "
"https://github.com/modelcontextprotocol/inspector[MCP Inspector]."
msgstr ""
"在这篇博文中，我们将探讨 link:https://github.com/modelcontextprotocol/inspector[MCP "
"Inspector] 如何动态注册 OAuth2 Client 应用程序，而不是使用预先注册的 OAuth2 Client，同时，在 MCP "
"OAuth2 流程中使用 link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus "
"OIDC Proxy] 委托 link:https://www.keycloak.org/[Keycloak] ， xref:point-of-"
"using-oidc-proxy[分析它为何有用] ，并展示它如何在向 link:https://github.com/"
"modelcontextprotocol/inspector[MCP Inspector] 提供之前 xref:use-oidc-proxy-to-"
"encrypt-tokens[加密访问和刷新令牌以及排除 ID 令牌] 。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Demo MCP OAuth2 Flow Diagram"
msgstr "演示 MCP OAuth2 流程图"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"In the https://quarkus.io/blog/secure-mcp-server-oauth2/[Use MCP OAuth2 Flow "
"to access Quarkus MCP Server] blog post, we looked at how https://github.com/"
"modelcontextprotocol/inspector[MCP Inspector] could use OAuth 2.0 Flow with "
"a https://quarkus.io/blog/secure-mcp-server-oauth2/#demo-flow-diagram[pre-"
"registered OAuth2 client]."
msgstr ""
"在 \" link:https://quarkus.io/blog/secure-mcp-server-oauth2/[使用 MCP OAuth2 "
"Flow 访问 Quarkus MCP 服务器] \"博文中，我们探讨了 link:https://github.com/"
"modelcontextprotocol/inspector[MCP Inspector] 如何通过 link:https://quarkus.io/"
"blog/secure-mcp-server-oauth2/#demo-flow-diagram[预先注册的 OAuth2 客户端] 使用 OAuth "
"2.0 Flow。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"The demo flow diagram in this section is very similar to the one from the "
"https://quarkus.io/blog/secure-mcp-server-oauth2/#demo-flow-diagram[Use MCP "
"OAuth2 Flow to access Quarkus MCP Server] blog post. It shows how https://"
"github.com/modelcontextprotocol/inspector[MCP Inspector] can use https://"
"datatracker.ietf.org/doc/html/rfc7591[OAuth2 Dynamic Client Registration] "
"instead of requiring that an OAuth2 Client is pre-registered, and with the "
"https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] "
"interposing between MCP Client and Keycloak."
msgstr ""
"本节中的演示流程图与 \" link:https://quarkus.io/blog/secure-mcp-server-oauth2/#demo-"
"flow-diagram[使用 MCP OAuth2 流程访问 Quarkus MCP 服务器] \"博文中的流程图非常相似。它展示了 link:"
"https://github.com/modelcontextprotocol/inspector[MCP Inspector] 如何使用 link:"
"https://datatracker.ietf.org/doc/html/rfc7591[OAuth2 动态客户端注册] ，而不是要求预先注册 "
"OAuth2 客户端，并在 MCP 客户端和 Keycloak 之间使用 link:https://github.com/quarkiverse/"
"quarkus-oidc-proxy[Quarkus OIDC 代理] 。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"When https://datatracker.ietf.org/doc/html/rfc7591[OAuth2 Dynamic Client "
"Registration] is used, MCP Client such as https://github.com/"
"modelcontextprotocol/inspector[MCP Inspector] requires configuring an MCP "
"_Streamable HTTP_ endpoint URL only."
msgstr ""
"使用 link:https://datatracker.ietf.org/doc/html/rfc7591[OAuth2 动态客户端注册] 时，MCP "
"客户端（如 link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] "
"）只需配置 MCP _Streamable HTTP_ 端点 URL。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"MCP Client starts by accessing the MCP server without a token and gets back "
"HTTP 401 with a `WWW-Authenticate` `resource_metadata` parameter that links "
"to the MCP server's https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 "
"Protected Resource Metadata] route. The client now fetches a URL of the "
"authorization server that secures the MCP server as well as the MCP server's "
"resource identifier."
msgstr ""
"MCP 客户端开始访问 MCP 服务器时不需要令牌，并返回带有 `WWW-Authenticate` `resource_metadata` 参数的 "
"HTTP 401，该参数链接到 MCP 服务器的 link:https://datatracker.ietf.org/doc/html/"
"rfc9728[OAuth2 受保护资源元数据] 路由。客户端现在会获取保护 MCP 服务器的授权服务器 URL 以及 MCP 服务器的资源标识符。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Since https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] "
"is used, MCP Client does not see a Keycloak URL as the authorization server "
"URL but `http://localhost:8080/q/oidc` URL pointing to a default https://"
"github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy]'s base URL."
msgstr ""
"由于使用了 link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC "
"代理] ，MCP 客户端不会将 Keycloak URL 作为授权服务器 URL，而是将 `http://localhost:8080/q/oidc` "
"指向默认 link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC "
"Proxy] 基本 URL 的 URL。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Next, MCP Client uses the https://github.com/quarkiverse/quarkus-oidc-"
"proxy[Quarkus OIDC Proxy]'s URL to discover its authorization, token, client "
"registration and other endpoint URLs. https://github.com/quarkiverse/quarkus-"
"oidc-proxy[Quarkus OIDC Proxy] provides its metadata by discovering "
"Keycloak's metadata and replacing Keycloak-specific URLs with its own proxy-"
"managed URLs, but does not transform other Keycloak metadata such as "
"supported https://www.rfc-editor.org/rfc/rfc7636[Proof Key for Code "
"Exchange] (PKCE) methods."
msgstr ""
"接下来，MCP Client 使用 link:https://github.com/quarkiverse/quarkus-oidc-"
"proxy[Quarkus OIDC Proxy] 的 URL 来发现其授权、令牌、客户端注册和其他端点 URL。 link:https://"
"github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC 代理] 通过发现 Keycloak "
"的元数据并用自己的代理管理 URL 替换 Keycloak 特定 URL 来提供元数据，但不转换其他 Keycloak 元数据，如支持的 link:"
"https://www.rfc-editor.org/rfc/rfc7636[代码交换证明密钥] （PKCE）方法。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"The user is now redirected to https://github.com/quarkiverse/quarkus-oidc-"
"proxy[Quarkus OIDC Proxy] which in turn redirects the user to Keycloak to "
"login."
msgstr ""
"现在，用户会被重定向到 link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus "
"OIDC 代理] ，然后再重定向到 Keycloak 登录。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Once the user logs in and authorizes MCP Inspector to access Quarkus MCP "
"server, the user is redirected back to the `http://localhost:6274/oauth/"
"callback` endpoint, MCP client exchanges the returned `code` to get ID, "
"access and refresh tokens, and uses the access token to access the MCP "
"server, allowing the user to select and run the tool."
msgstr ""
"一旦用户登录并授权 MCP Inspector 访问 Quarkus MCP 服务器，用户就会被重定向回端点。 `http://localhost:"
"6274/oauth/callback` 端点，MCP 客户端交换返回的 `code` 以获取 ID、访问令牌和刷新令牌，并使用访问令牌访问 MCP "
"服务器，允许用户选择并运行工具。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "We are now ready to have a deeper look at how it works in the demo."
msgstr "现在，我们可以深入了解一下它在演示中是如何工作的。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"You can find the complete project source in the https://github.com/"
"sberyozkin/quarkus-mcp-server-oidc-proxy/tree/main/secure-mcp-http-server-"
"with-oidc-proxy[Secure Quarkus MCP HTTP Server with OIDC Proxy sample]."
msgstr ""
"您可以在 link:https://github.com/sberyozkin/quarkus-mcp-server-oidc-proxy/tree/"
"main/secure-mcp-http-server-with-oidc-proxy[Secure Quarkus MCP HTTP Server "
"with OIDC Proxy 示例] 中找到完整的项目源代码。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Step 1 - Create and start MCP server"
msgstr "步骤 1 - 创建并启动 MCP 服务器"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "First, let's create a secure Quarkus MCP server."
msgstr "首先，让我们创建一个安全的 Quarkus MCP 服务器。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "MCP server maven dependencies"
msgstr "MCP 服务器 maven 依赖项"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Add the following dependencies:"
msgstr "添加以下依赖项"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"`quarkus-mcp-server-sse` is required to support both MCP Streamable HTTP and "
"SSE transports."
msgstr "`quarkus-mcp-server-sse` 需要同时支持 MCP Streamable HTTP 和 SSE 传输。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"`quarkus-oidc` is required to secure access to Quarkus MCP Server. Its "
"version is defined in the Quarkus BOM."
msgstr "`quarkus-oidc` 是确保访问 Quarkus MCP 服务器的必要条件。其版本在 Quarkus BOM 中定义。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"`quarkus-oidc-proxy` is required to support OIDC proxy between MCP Client "
"and Keycloak"
msgstr "`quarkus-oidc-proxy` 需要支持 MCP 客户端和 Keycloak 之间的 OIDC 代理。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "MCP Server Configuration"
msgstr "MCP 服务器配置"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Let's configure the MCP server:"
msgstr "让我们配置 MCP 服务器："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Require authentication for all requests to the MCP server. This "
"authentication policy is enforced by the default OIDC tenant configuration."
msgstr "要求对 MCP 服务器的所有请求进行身份验证。默认 OIDC 租户配置强制执行此身份验证策略。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Default OIDC tenant secures the MCP server, Keycloak DevService inserts a "
"missing `quarkus.oidc.auth-server-url` property that links to the Keycloak "
"`quarkus-mcp-realm` realm endpoint."
msgstr ""
"默认 OIDC 租户会保护 MCP 服务器，Keycloak DevService 会插入一个缺失的 `quarkus.oidc.auth-server-"
"url` 属性，链接到 Keycloak `quarkus-mcp-realm` realm 端点。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Require that tokens that are allowed to access the MCP server must have an "
"audience (`aud`) claim that contains a `quarkus-mcp-server` value."
msgstr "要求允许访问 MCP 服务器的令牌必须有一个包含 `quarkus-mcp-server` 值的受众 ( `aud` ) 声明。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Enable the https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 Protected "
"Resource Metadata] route for the default OIDC tenant. It will help https://"
"github.com/modelcontextprotocol/inspector[MCP Inspector] to find out about "
"the authorization server that secures the MCP server."
msgstr ""
"为默认 OIDC 租户启用 link:https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 "
"受保护资源元数据] 路由。它将帮助 link:https://github.com/modelcontextprotocol/inspector[MCP "
"Inspector] 找到保护 MCP 服务器的授权服务器。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Quarkus https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 Protected "
"Resource Metadata] handler is not aware that https://github.com/quarkiverse/"
"quarkus-oidc-proxy[Quarkus OIDC Proxy] is meant to intercept OAuth2 Flow "
"requests between https://github.com/modelcontextprotocol/inspector[MCP "
"Inspector] and Keycloak, so we help it to return a correct URL by setting an "
"absolute URL that points to the base https://github.com/quarkiverse/quarkus-"
"oidc-proxy[Quarkus OIDC Proxy] URL."
msgstr ""
"Quarkus link:https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 受保护资源元数据] "
"处理器并不知道 link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC "
"Proxy] 用于拦截 link:https://github.com/modelcontextprotocol/inspector[MCP "
"Inspector] 和 Keycloak 之间的 OAuth2 Flow 请求，因此我们通过设置指向基本 link:https://github."
"com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] URL 的绝对 URL 来帮助它返回正确的 "
"URL。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Ask Keycloak DevService to upload the `quarkus-mcp-realm.json` realm file. "
"This realm does not have pre-registered clients."
msgstr ""
"请 Keycloak DevService 上传 `quarkus-mcp-realm.json` realm 文件。此领域没有预先注册的客户端。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Ask Keycloak not to add `quarkus.oidc.client-id` since https://github.com/"
"modelcontextprotocol/inspector[MCP Inspector] will register OAuth2 clients "
"dynamically."
msgstr ""
"请 Keycloak 不要添加 `quarkus.oidc.client-id` ，因为 link:https://github.com/"
"modelcontextprotocol/inspector[MCP Inspector] 会动态注册 OAuth2 客户端。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"CORS policy to allow https://github.com/modelcontextprotocol/inspector[MCP "
"Inspector] script requests."
msgstr ""
"CORS 策略，以允许 link:https://github.com/modelcontextprotocol/inspector[MCP 检查员] "
"脚本请求。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"You can read about how https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 "
"Protected Resource Metadata] is supported in Quarkus OIDC in the https://"
"quarkus.io/guides/security-oidc-expanded-configuration#resource-metadata-"
"properties[Expanded OpenId Connect Configuration guide]."
msgstr ""
"您可以在 link:https://quarkus.io/guides/security-oidc-expanded-"
"configuration#resource-metadata-properties[扩展 OpenId Connect 配置指南] 中了解 "
"Quarkus OIDC 如何支持 link:https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 "
"受保护资源元数据] 。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "MCP User Name Provider tool"
msgstr "MCP 用户名提供者工具"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Let's create a single tool that can return a name of the current MCP Client "
"user:"
msgstr "让我们创建一个能返回当前 MCP 客户端用户名称的工具："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Capture a security identity represented by the verified access token"
msgstr "捕获由已验证访问令牌代表的安全身份"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"The `user-name-provider` tool returns a name of the current MCP Client user."
msgstr "`user-name-provider` 工具会返回当前 MCP 客户端用户的名称。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"The `user-name-provider` tool is a very simple tool designed to show that an "
"identity of the MCP client user on whose behalf this tool is called by the "
"MCP client is available for the tool to perform a user identity specific "
"action, an important element for a secure agentic AI system."
msgstr ""
"`user-name-provider` 工具是一个非常简单的工具，旨在显示 MCP 客户端用户的身份，MCP "
"客户端以其名义调用该工具时，该工具可执行用户身份特定的操作，这是安全代理人工智能系统的一个重要元素。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Keycloak Configuration"
msgstr "钥匙斗篷配置"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"The Keycloak configuration has already been prepared in the `quarkus-mcp-"
"realm.json` that Keycloak DevService uploads to Keycloak at the start-up "
"time."
msgstr "Keycloak DevService 会在启动时将 Keycloak 配置上传到 `quarkus-mcp-realm.json` 中。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Let's have a closer look. Please go to `http://localhost:8080/q/dev-ui` and "
"select an `OpenId Connect` card:"
msgstr "让我们仔细看看。请访问 `http://localhost:8080/q/dev-ui` 并选择 `OpenId Connect` 卡："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Click on `Keycloak Admin`, login as `admin:admin` and check the `quarkus-mcp-"
"realm` realm configuration."
msgstr ""
"点击 `Keycloak Admin` ，以 `admin:admin` 的身份登录，并检查 `quarkus-mcp-realm` 领域配置。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"The `quarkus-mcp-realm` has only Keycloak specific clients registered that "
"are required to support various Keycloak realm operations, it has no custom "
"clients registered.\n"
"This realm has a single user, `alice` with a password `alice`.\n"
"It also has a custom `quarkus-mcp-server` client scope with an audience "
"mapping:"
msgstr ""
"`quarkus-mcp-realm` 只注册了支持各种 Keycloak 领域操作所需的 Keycloak "
"特定客户端，没有注册自定义客户端。此领域只有一个用户 `alice` ，密码为 `alice` 。它还有一个带有受众映射的自定义 `quarkus-"
"mcp-server` 客户端范围："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "The `quarkus-mcp-server` scope has an audience mapping:"
msgstr "`quarkus-mcp-server` 范围具有受众映射："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"The `quarkus-mcp-realm` realm have the `quarkus-mcp-server` client scope "
"with the `quarkus-mcp-server` audience mapping to let users specify the "
"`quarkus-mcp-server` scope in order to request the correct token audience "
"when https://github.com/modelcontextprotocol/inspector[MCP Inspector] "
"initiates OAuth2 Flow."
msgstr ""
"`quarkus-mcp-realm` realm 具有 `quarkus-mcp-server` 客户端范围和 `quarkus-mcp-"
"server` 受众映射，让用户指定 `quarkus-mcp-server` 范围，以便在 link:https://github.com/"
"modelcontextprotocol/inspector[MCP Inspector] 启动 OAuth2 Flow 时请求正确的令牌受众。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2 Resource Indicator] "
"specification provides an alternative option, where MCP Client can pass an "
"MCP Server's `resource` indicator to the OAuth2 provider and the provider "
"can add it to the token audience. You can choose to avoid creating custom "
"Keycloak client scopes with an audience mapping once Keycloak starts "
"supporting the https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2 Resource "
"Indicator] specification."
msgstr ""
"link:https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2 资源指示器] 规范提供了另一种选择，即 "
"MCP 客户端可将 MCP 服务器的 `resource` 指示器传递给 OAuth2 提供商，然后提供商可将其添加到令牌受众中。一旦 Keycloak "
"开始支持 link:https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2 资源指示器] "
"规范，您就可以选择避免创建带有受众映射的自定义 Keycloak 客户端作用域。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Start the MCP server in dev mode"
msgstr "以开发模式启动 MCP 服务器"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Now let's start the MCP server in dev mode:"
msgstr "现在，让我们以开发模式启动 MCP 服务器："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"You can see that default _Streamable HTTP_ and SSE endpoints are available "
"at `http://localhost:8080/mcp` and `http://localhost:8080/mcp/sse` "
"respectively."
msgstr ""
"您可以看到默认的 _可流 HTTP_ 和 SSE 端点位于 `http://localhost:8080/mcp` 和 `http://"
"localhost:8080/mcp/sse` 和"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Step 2: Start the MCP Inspector"
msgstr "步骤 2：启动 MCP 检查器"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"While https://github.com/modelcontextprotocol/inspector[MCP Inspector] "
"provides a very good OAuth2 Flow support, it is still a very active project "
"and at the moment, you may observe https://github.com/modelcontextprotocol/"
"inspector[MCP Inspector] failing to connect to the OAuth2 provider in some "
"versions. https://github.com/modelcontextprotocol/inspector[MCP Inspector] "
"v0.16.7 is currently recommended."
msgstr ""
"虽然 link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] "
"提供了很好的 OAuth2 Flow 支持，但它仍是一个非常活跃的项目，目前您可能会发现 link:https://github.com/"
"modelcontextprotocol/inspector[MCP Inspector] 在某些版本中无法连接到 OAuth2 提供商。目前推荐使用 "
"link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] v0.16."
"7。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "As you can see, no pre-configured OAuth2 Client ID is set."
msgstr "可以看到，没有设置预配置的 OAuth2 客户 ID。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Now, do not press `Connect` immediately. We are going to follow the https://"
"github.com/modelcontextprotocol/inspector[MCP Inspector]'s `Guided OAuth "
"Flow` to <<use-mcp-inspector-to-access-mcp-server,register an OAuth2 Client, "
"login a user and acquire an access token>> instead, and request a `Connect` "
"once the `Guided OAuth Flow` is complete."
msgstr ""
"现在，不要立即按 `Connect` 。我们将按照 link:https://github.com/modelcontextprotocol/"
"inspector[MCP Inspector] 的 `Guided OAuth Flow` xref:use-mcp-inspector-to-"
"access-mcp-server[注册 OAuth2 客户端、登录用户并获取访问令牌，] 并在 `Guided OAuth Flow` 完成后请求 "
"`Connect` 。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"We will then have a look at how to <<use-oidc-proxy-to-encrypt-tokens>>."
msgstr "然后，我们将了解如何 <<use-oidc-proxy-to-encrypt-tokens>> 。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"See the <<demo-flow-diagram>> section for an overview of how https://github."
"com/modelcontextprotocol/inspector[MCP Inspector] performs a `Connect` "
"request."
msgstr ""
"有关 link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] "
"如何执行 `Connect` 请求的概述，请参阅 <<demo-flow-diagram>> 部分。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Please keep your browser's `Developer Tools`'s `Network` tab open if you "
"would like to observe how MCP Inspector probes various MCP server and https:/"
"/github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] endpoints and "
"eventually succeeds in getting a user logged in and acquiring the access "
"token."
msgstr ""
"如果您想观察 MCP Inspector 如何探测各种 MCP 服务器和 link:https://github.com/quarkiverse/"
"quarkus-oidc-proxy[Quarkus OIDC 代理] 端点，并最终成功让用户登录和获取访问令牌，请打开浏览器的 `Developer "
"Tools’s `Network` 标签。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Step 3: Use MCP Inspector to register OAuth2 Client and access MCP Server"
msgstr "第 3 步：使用 MCP Inspector 注册 OAuth2 客户端并访问 MCP 服务器"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"We are now going to use the https://github.com/modelcontextprotocol/"
"inspector[MCP Inspector]'s `Guided OAuth Flow` to register an OAuth2 Client, "
"login a user and acquire tokens."
msgstr ""
"现在，我们将使用 link:https://github.com/modelcontextprotocol/inspector[MCP "
"Inspector] 's `Guided OAuth Flow` 注册 OAuth2 客户端、登录用户并获取令牌。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Click on `Open Auth Settings` which you can find opposite the Connection "
"settings that you saw in the <<start-mcp-inspector>> section, and click on "
"the `Guided OAuth2 Flow`:"
msgstr ""
"点击 `Open Auth Settings` ，在 <<start-mcp-inspector>> 部分看到的连接设置对面，点击 `Guided "
"OAuth2 Flow` ："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"The `Guided OAuth2 Flow` may not be highlighted after you select it but "
"https://github.com/modelcontextprotocol/inspector[MCP Inspector] will run it "
"once you press `Continue`."
msgstr ""
"选择 `Guided OAuth2 Flow` 后，它可能不会突出显示，但一旦按下 `Continue` ， link:https://github."
"com/modelcontextprotocol/inspector[MCP Inspector] 就会运行它。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Press `Continue` to do the `Metadata Discovery`:"
msgstr "按 `Continue` 进行 `Metadata Discovery` ："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"As you can see, https://github.com/modelcontextprotocol/inspector[MCP "
"Inspector] discovers the MCP Server's https://datatracker.ietf.org/doc/html/"
"rfc9728[OAuth2 Protected Resource Metadata] first, finds out the https://"
"github.com/quarkiverse/quarkus-oidc-proxy[OIDC Proxy]'s URL, and uses it to "
"fetch the the OIDC Proxy's metadata. As mentioned in the <<demo-flow-"
"diagram>> section, https://github.com/quarkiverse/quarkus-oidc-proxy[OIDC "
"Proxy] provides its metadata by discovering Keycloak's metadata and "
"replacing Keycloak-specific URLs with its own proxy-managed URLs, but does "
"not transform other Keycloak metadata."
msgstr ""
"如您所见， link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] "
"会首先发现 MCP 服务器的 link:https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 "
"受保护资源元数据] ，然后找出 link:https://github.com/quarkiverse/quarkus-oidc-proxy[OIDC "
"代理] 的 URL，并使用它来获取 OIDC 代理的元数据。如 <<demo-flow-diagram>> 部分所述， link:https://"
"github.com/quarkiverse/quarkus-oidc-proxy[OIDC 代理] 通过发现 Keycloak "
"元数据并用自己的代理管理 URL 替换 Keycloak 特定 URL 来提供元数据，但不会转换其他 Keycloak 元数据。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "The next step is the `Client Registration`, press `Continue`."
msgstr "下一步是 `Client Registration` ，按 `Continue` 。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"https://github.com/modelcontextprotocol/inspector[MCP Inspector] posts a "
"client registration request that you can see in the browser's developer "
"tools:"
msgstr ""
"link:https://github.com/modelcontextprotocol/inspector[MCP Inspector 会] "
"发出客户端注册请求，您可以在浏览器的开发工具中看到该请求："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Note that the `token_endpoint_auth_method` property is set to `none` - this "
"is how a `public` OAuth2 Client is registered, since managing confidential "
"OAuth2 Clients that have secrets is harder for Single-page application (SPA) "
"such as https://github.com/modelcontextprotocol/inspector[MCP Inspector]."
msgstr ""
"请注意， `token_endpoint_auth_method` 属性已设置为 `none` - `public` OAuth2 "
"客户端就是这样注册的，因为对于单页面应用程序（SPA）（如 link:https://github.com/modelcontextprotocol/"
"inspector[MCP Inspector] ）来说，管理保密的 OAuth2 客户端比较困难。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "The `Client Registration` succeeds:"
msgstr "`Client Registration` 成功了："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"The `client_id` is a dynamically generated value. You will see a different "
"`client_id` when you work with this blog post."
msgstr "`client_id` 是动态生成的值。在使用本博文时，您将看到不同的 `client_id` 。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"At this point, we have to pause the `Guided OAuth2 Flow` sequence, go to "
"Keycloak and assign the `quarkus-mcp-server` and `profile` scopes to the "
"registered client."
msgstr ""
"此时，我们必须暂停 `Guided OAuth2 Flow` 序列，转到 Keycloak 并将 `quarkus-mcp-server` 和 "
"`profile` 权限分配给已注册的客户端。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"The whole point of registering OAuth2 Clients dynamically is to avoid having "
"to deal with manually configuring them.\n"
"However, as you could see in the Client Registration Request image above, "
"https://github.com/modelcontextprotocol/inspector[MCP Inspector] currently "
"does not allow\n"
"to pass OAuth2 scopes during the OAuth2 Client Registration - irrespectively "
"of whether you configure `Scope` in its <<start-mcp-inspector,Connection "
"settings>> or not."
msgstr ""
"动态注册 OAuth2 客户端的目的是避免手动配置它们。不过，正如您在上面的客户端注册请求图片中看到的， link:https://github.com/"
"modelcontextprotocol/inspector[MCP Inspector] 目前不允许在 OAuth2 客户端注册过程中传递 "
"OAuth2 作用域，无论您是否在其 xref:start-mcp-inspector[连接设置] 中配置了 `Scope` 。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"The scopes impact what an issued access token can do, what kind of "
"information it can include. The current OAuth2 Client application that "
"logins the current user can request some scopes, for the user to authorize "
"the client to use the access token according to permissions enabled by these "
"scopes. Without requesting scopes during the OAuth2 Client Registration, "
"Keycloak can only issue access tokens with a very limited content, with no "
"audience and the logged-in user information included."
msgstr ""
"作用域会影响已签发的访问令牌可以做什么，可以包含什么样的信息。登录当前用户的 OAuth2 "
"客户端程序可以请求一些作用域，以便用户授权客户端根据这些作用域启用的权限使用访问令牌。如果在 OAuth2 客户端注册时不请求范围，Keycloak "
"只能发出内容非常有限的访问令牌，不包括受众和登录用户信息。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Therefore, to support this post's demo flow, we need to manually assign the "
"required scopes to the registered client directly in the Keycloak Admin "
"Dashboard."
msgstr "因此，为了支持本文章的演示流程，我们需要直接在 Keycloak 管理控制面板中手动为注册客户端分配所需的作用域。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"In general, the https://modelcontextprotocol.io/specification/2025-06-18/"
"basic/authorization[MCP Authorization]-compliant MCP Clients should be able "
"to use custom OAuth2 scopes during the https://datatracker.ietf.org/doc/html/"
"rfc7591[OAuth2 Dynamic Client Registration] going forward."
msgstr ""
"一般来说， link:https://modelcontextprotocol.io/specification/2025-06-18/basic/"
"authorization[符合 MCP 授权的] MCP 客户端应能在 link:https://datatracker.ietf.org/doc/"
"html/rfc7591[OAuth2 动态客户端注册] 过程中使用自定义 OAuth2 范围。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "OK, let's update the registered client in Keycloak."
msgstr "好了，让我们更新 Keycloak 中的注册客户端。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Login to Keycloak as described in the <<keycloak-configuration>> section, "
"select the `quarkus-mcp-realm` in `Manage Realms` and the registered client "
"in this realm's `Clients`:"
msgstr ""
"按照 <<keycloak-configuration>> 部分所述登录 Keycloak，在 `Manage Realms` 中选择 `quarkus-"
"mcp-realm` ，在此领域的 `Clients` 中选择注册客户端："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Click on its `Client Scopes` tab, and add `profile` and `quarkus-mcp-server` "
"scopes as `Default` scopes:"
msgstr ""
"单击 `Client Scopes` 选项卡，将 `profile` 和 `quarkus-mcp-server` 范围添加为 `Default` "
"范围："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Usually, these scopes should be optional for them to be requested at the "
"authorization code flow login time, but in this case we set them as default "
"scopes since the registered client is currently not aware of such scopes at "
"the registration and login times due to the https://github.com/"
"modelcontextprotocol/inspector[MCP Inspector]'s limitation described above "
"in this section."
msgstr ""
"通常，这些作用域应该是可选的，以便在授权码流登录时请求使用，但在本例中，我们将其设置为默认作用域，因为由于本节上文所述 link:https://"
"github.com/modelcontextprotocol/inspector[MCP 检查器] "
"的限制，注册客户端目前在注册和登录时并不知道这些作用域。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"As far as these two scopes are concerned, the `quarkus-mcp-server` scope was "
"described in the <<keycloak-configuration>> section and is used to ensure "
"the access tokens that are issued to the registered client include the "
"correct MCP server audience, while the `profile` scope is only added for the "
"access tokens to contain the logged-in user's name - adding this scope is "
"not strictly necessary."
msgstr ""
"就这两个作用域而言， `quarkus-mcp-server` 作用域已在 <<keycloak-configuration>> "
"章节中描述过，它用于确保向注册客户端发出的访问令牌包含正确的 MCP 服务器受众，而 `profile` "
"作用域只是为了让访问令牌包含登录用户的名称而添加的--添加此作用域严格来说并无必要。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Let's go back to the https://github.com/modelcontextprotocol/inspector[MCP "
"Inspector]'s `Guided OAuth Flow` where we have already completed the "
"`Metadata Discovery` and `Client Registration` steps."
msgstr ""
"让我们回到 link:https://github.com/modelcontextprotocol/inspector[MCP 检查员] 的 "
"`Guided OAuth Flow` ，在这里我们已经完成了 `Metadata Discovery` 和 `Client Registration` "
"步骤。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Press `Continue` to begin the `Preparing Authorization` step and you will "
"see an `Authorization URL` displayed:"
msgstr ""
"按 `Continue` 开始 `Preparing Authorization` 步骤，您将看到显示 `Authorization URL` ："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Click on it using the provided button on the right, and you will be "
"redirected to Keycloak, via https://github.com/quarkiverse/quarkus-oidc-"
"proxy[OIDC Proxy], to login:"
msgstr ""
"使用右侧提供的按钮点击它，您将通过 link:https://github.com/quarkiverse/quarkus-oidc-"
"proxy[OIDC 代理] 重定向到 Keycloak 进行登录："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Login as `alice:alice`, and now Keycloak will request you to give your "
"consent to the registered MCP Inspector Client to access Quarkus MCP Server:"
msgstr ""
"以 `alice:alice` 登录，现在 Keycloak 会要求您同意注册的 MCP 检查员客户端访问 Quarkus MCP 服务器："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"This is what using scopes during the client registration, and `quarkus-mcp-"
"server` scope in particular, give you: a must have option to authorize the "
"registered MCP client application to access the MCP Server on your behalf."
msgstr ""
"这就是在客户端注册过程中使用作用域（尤其是 `quarkus-mcp-server` 作用域）给您带来的好处：授权已注册的 MCP 客户端程序代表您访问 "
"MCP 服务器的必备选项。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Press `Yes`, Keycloak will redirect you back to the https://github.com/"
"modelcontextprotocol/inspector[MCP Inspector]'s callback page in another tab "
"that will display the authorization code:"
msgstr ""
"按 `Yes` ，Keycloak 会将您重定向到另一个选项卡中的 link:https://github.com/"
"modelcontextprotocol/inspector[MCP 检查员] 回调页面，该页面将显示授权代码："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Copy and paste this code into the `Prepare Authorization` field in the "
"`Guided OAuth Flow` view:"
msgstr "将此代码复制并粘贴到 `Guided OAuth Flow` 视图中的 `Prepare Authorization` 字段："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Press `Continue`. https://github.com/modelcontextprotocol/inspector[MCP "
"Inspector] now successfully acquires the tokens:"
msgstr ""
"按 `Continue` 。 link:https://github.com/modelcontextprotocol/inspector[MCP "
"Inspector] 现在成功获取了代币："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"As you can see, 3 tokens, the access and refresh tokens but also the ID "
"token are returned. https://github.com/modelcontextprotocol/inspector[MCP "
"Inspector] does not really need the ID token, it only needs an access token "
"in order to be able to access the MCP server, and optionally, the refresh "
"token to get another access token when the current one expires. We'll have a "
"look at how to drop the ID token in the <<use-oidc-proxy-to-encrypt-tokens>> "
"section."
msgstr ""
"正如您所看到的，会返回 3 个令牌，即访问令牌和刷新令牌，以及 ID 令牌。 link:https://github.com/"
"modelcontextprotocol/inspector[MCP Inspector] 并不真正需要 ID 令牌，它只需要访问令牌才能访问 MCP "
"服务器，还需要刷新令牌，以便在当前访问令牌过期时获得另一个访问令牌。我们将在 <<use-oidc-proxy-to-encrypt-tokens>> "
"部分介绍如何删除 ID 令牌。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Copy the access token from the provided JSON data and paste it into https://"
"www.jwt.io/[jwt.io]:"
msgstr "从提供的 JSON 数据中复制访问令牌并将其粘贴到 link:https://www.jwt.io/[jwt.io] 中："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"It contains a required `quarkus-mcp-server` audience, exactly what the <<mcp-"
"server-configuration,MCP Server expects>>."
msgstr ""
"它包含所需的 `quarkus-mcp-server` 受众，正是 xref:mcp-server-configuration[MCP 服务器所期望的] "
"。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Now you are ready to press `Connect` in the Connection view that you saw in "
"the <<start-mcp-inspector>> section."
msgstr "现在，您可以在 <<start-mcp-inspector>> 部分看到的 \"连接 \"视图中按 `Connect` 。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"At this point, the access token is already available, so https://github.com/"
"modelcontextprotocol/inspector[MCP Inspector] uses this token to let you "
"select and run the `user-name-provider` tool:"
msgstr ""
"此时，访问令牌已经可用，因此 link:https://github.com/modelcontextprotocol/inspector[MCP "
"Inspector 会] 使用该令牌让您选择并运行 `user-name-provider` 工具："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Now press `Disconnect` first, and then `Clear OAuth State`:"
msgstr "现在先按 `Disconnect` ，然后按 `Clear OAuth State` ："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "But keep the <<start-mcp-server,MCP server running>>, do not stop it."
msgstr "但要保持 xref:start-mcp-server[MCP 服务器运行] ，不要停止。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Let's see next how <<use-oidc-proxy,OIDC Proxy can encrypt access and "
"refresh tokens and drop ID token>>."
msgstr ""
"接下来让我们看看 xref:use-oidc-proxy[OIDC 代理] 如何 xref:use-oidc-proxy[加密访问和刷新令牌以及丢弃 "
"ID 令牌] 。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Step 4: Use OIDC Proxy to encrypt access and refresh tokens and drop ID "
"token"
msgstr "第 4 步：使用 OIDC 代理加密访问和刷新令牌，并丢弃 ID 令牌"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "What is the point of using OIDC Proxy ?"
msgstr "使用 OIDC 代理的意义何在？"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"You may be wondering by now, what is the point of using https://github.com/"
"quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] and https://github.com/"
"quarkiverse/quarkus-mcp-server[Quarkus MCP Server] together, with all the "
"proxying going on between https://github.com/modelcontextprotocol/"
"inspector[MCP Inspector] and Keycloak ?"
msgstr ""
"您现在可能想知道，在 link:https://github.com/modelcontextprotocol/inspector[MCP "
"Inspector] 和 Keycloak 之间进行代理的情况下，同时使用 link:https://github.com/quarkiverse/"
"quarkus-oidc-proxy[Quarkus OIDC Proxy] 和 link:https://github.com/quarkiverse/"
"quarkus-mcp-server[Quarkus MCP Server] 有什么意义？"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"And if you have been following the evolution of the MCP Authorization "
"specification, from its older https://modelcontextprotocol.io/specification/"
"2025-03-26/basic/authorization[2025-03-26 version] to the https://"
"modelcontextprotocol.io/specification/2025-06-18/basic/authorization[latest "
"one], you may want to ask, does the idea of using https://github.com/"
"quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] bring us back to the days "
"where the MCP Server was expected to do OAuth2 itself in the https://"
"modelcontextprotocol.io/specification/2025-03-26/basic/authorization[2025-03-"
"26 version] ?"
msgstr ""
"如果你一直在关注 MCP 授权规范从 link:https://modelcontextprotocol.io/specification/2025-"
"03-26/basic/authorization[2025-03-26 旧版本] 到 link:https://"
"modelcontextprotocol.io/specification/2025-06-18/basic/authorization[最新] "
"link:https://modelcontextprotocol.io/specification/2025-03-26/basic/"
"authorization[版本] 的演变，那么你可能会想问，使用 link:https://github.com/quarkiverse/"
"quarkus-oidc-proxy[Quarkus OIDC 代理的] 想法是否会让我们回到 link:https://"
"modelcontextprotocol.io/specification/2025-03-26/basic/authorization[2025-03-"
"26 版本] 中 MCP 服务器本身要做 OAuth2 的时代？"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Not really, https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC "
"Proxy] was introduced in the https://quarkus.io/blog/oidc-proxy/[Use OIDC "
"Proxy to integrate OIDC service endpoints with custom GPT] blog post, more "
"than half a year before the original MCP specification was published."
msgstr ""
"其实不然， link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC "
"Proxy] 是在《 link:https://quarkus.io/blog/oidc-proxy/[使用 OIDC Proxy 将 OIDC "
"服务端点与自定义 GPT 集成] 》博文中介绍的，比最初的 MCP 规范发布时间早了半年多。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"The main idea behind https://github.com/quarkiverse/quarkus-oidc-"
"proxy[Quarkus OIDC Proxy] is to let SPA applications write the same OAuth2 "
"code no matter what the connection details and capabilities of the actual "
"proxied OAuth2 provider are, with the https://github.com/quarkiverse/quarkus-"
"oidc-proxy[Quarkus OIDC Proxy] mediating between the client that is trying "
"to perform various OAuth2 actions and the actual provider."
msgstr ""
"link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] "
"背后的主要理念是让 SPA 应用程序编写相同的 OAuth2 代码，无论实际代理的 OAuth2 提供商的连接细节和功能如何， link:https://"
"github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] 都能在试图执行各种 "
"OAuth2 操作的客户端和实际提供商之间进行调解。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"For example, as it happens, Keycloak currently does not accept OAuth2 "
"dynamic client registration requests that are sent directly from the https://"
"github.com/modelcontextprotocol/inspector[MCP Inspector] SPA because its "
"client registration endpoint does not support CORS. However, https://github."
"com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy], by being co-located "
"with the Quarkus MCP Server, does support CORS, and thus can approve and "
"forward OAuth2 client registration requests from the https://github.com/"
"modelcontextprotocol/inspector[MCP Inspector] SPA's host to Keycloak. https:/"
"/github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] can also "
"augment or transform some of the OAuth2 requests and responses."
msgstr ""
"例如，Keycloak 目前不接受直接从 link:https://github.com/modelcontextprotocol/"
"inspector[MCP Inspector] SPA 发送的 OAuth2 动态客户端注册请求，因为其客户端注册端点不支持 CORS。但是， "
"link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] 与 "
"Quarkus MCP Server 位于同一地点，支持 CORS，因此可以批准并将来自 link:https://github.com/"
"modelcontextprotocol/inspector[MCP Inspector] SPA 主机的 OAuth2 客户端注册请求转发给 "
"Keycloak。 link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus "
"OIDC 代理] 还可以增强或转换某些 OAuth2 请求和响应。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Besides helping SPAs write an interoperable OAuth2 code, https://quarkus.io/"
"blog/oidc-proxy/#security-considerations[it can help with restricting which "
"authorization code flow tokens can be returned and support a locally managed "
"redirect endpoint]."
msgstr ""
"除了帮助 SPA 编写可互操作的 OAuth2 代码外， link:https://quarkus.io/blog/oidc-proxy/"
"#security-considerations[它] 还 link:https://quarkus.io/blog/oidc-proxy/"
"#security-considerations[能帮助限制哪些授权代码流令牌可以返回，并支持本地管理的重定向端点] 。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Recently, we have also enhanced https://github.com/quarkiverse/quarkus-oidc-"
"proxy[Quarkus OIDC Proxy] to support encrypting access and refresh tokens "
"before returning them to SPA. We'll look at it in the next <<use-oidc-proxy-"
"to-encrypt-tokens>> section."
msgstr ""
"最近，我们还增强了 link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus "
"OIDC 代理] ，支持在将访问和刷新令牌返回 SPA 之前对其进行加密。我们将在下一节 <<use-oidc-proxy-to-encrypt-"
"tokens>> 中对此进行介绍。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Encrypt access and refresh tokens and drop ID token"
msgstr "加密访问和刷新令牌并丢弃 ID 令牌"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"When we were discussing the early https://modelcontextprotocol.io/"
"specification/2025-03-26/basic/authorization[MCP Authorizaton version 2025-"
"03-26] options in the https://quarkus.io/blog/secure-mcp-sse-server/[Getting "
"ready for secure MCP with Quarkus MCP Server] blog post, my colleague https:/"
"/github.com/BarDweller[Ozzy Osborne] thought about the security of access "
"tokens that were made available to MCP Clients and prototyped a Quarkus MCP "
"Server demo where the MCP Server was used to access GitHub but the Claude AI "
"MCP Client only had access to the wrapped access tokens that can not be used "
"directly against GitHub."
msgstr ""
"当我们在《 link:https://quarkus.io/blog/secure-mcp-sse-server/[使用 Quarkus MCP "
"服务器为安全 MCP 做好准备] 》博文中讨论早期 link:https://modelcontextprotocol.io/specification/"
"2025-03-26/basic/authorization[MCP 授权版本 2025-03-26] 选项时，我的同事 link:https://"
"github.com/BarDweller[奥兹-奥斯本（Ozzy Osborne] ）想到了提供给 MCP 客户端的访问令牌的安全性问题，并制作了一个 "
"Quarkus MCP 服务器演示原型，其中 MCP 服务器用于访问 GitHub，但 Claude AI MCP "
"客户端只能访问封装后的访问令牌，而这些令牌不能直接用于 GitHub。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] builds "
"on Ozzy's idea to wrap tokens and makes it possible to encrypt both access "
"and refresh tokens that are returned to the MCP Client."
msgstr ""
"link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] "
"基于 Ozzy 封装令牌的想法，可以对返回给 MCP 客户端的访问令牌和刷新令牌进行加密。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Let's see how it works."
msgstr "让我们看看它是如何工作的。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Add the following configuration properties to the <<mcp-server-"
"configuration>>, without restarting the <<start-mcp-server,MCP Server>>:"
msgstr ""
"在 <<mcp-server-configuration>> 中添加以下配置属性，而无需重启 xref:start-mcp-server[MCP "
"服务器] ："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"https://github.com/sberyozkin/quarkus-mcp-server-oidc-proxy/blob/main/secure-"
"mcp-http-server-with-oidc-proxy/src/main/resources/publicKey.jwk[Public RSA "
"key] that OIDC Proxy must use to encrypt access and refresh tokens, when "
"intercepting the `authorization_code` and `refresh_token` grant responses. "
"Note that Quarkus OIDC that protects the MCP Server does not control the "
"communication between https://github.com/modelcontextprotocol/inspector[MCP "
"Inspector] and the token issuer, therefore it can not encrypt the tokens, "
"only OIDC Proxy can."
msgstr ""
"OIDC Proxy 在拦截 `authorization_code` 和 `refresh_token` grant 响应时必须使用的 link:"
"https://github.com/sberyozkin/quarkus-mcp-server-oidc-proxy/blob/main/secure-"
"mcp-http-server-with-oidc-proxy/src/main/resources/publicKey.jwk[公开 RSA 密钥] "
"，用于加密访问和刷新令牌。请注意，保护 MCP 服务器的 Quarkus OIDC 无法控制 link:https://github.com/"
"modelcontextprotocol/inspector[MCP 检查员] 与令牌签发者之间的通信，因此它无法加密令牌，只有 OIDC 代理可以。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"https://github.com/sberyozkin/quarkus-mcp-server-oidc-proxy/blob/main/secure-"
"mcp-http-server-with-oidc-proxy/src/main/resources/privateKey.jwk[Private "
"RSA key] that OIDC Proxy must use to decrypt refresh tokens and Quarkus OIDC "
"- bearer access tokens. Note that OIDC Proxy does not control access to the "
"Quarkus service endpoint such as Quarkus MCP server but only intercepts "
"requests/responses to/from the token issuer, therefore it can only decrypt "
"refresh tokens when intercepting `refresh_token` grant requests, while "
"Quarkus OIDC must handle the decryption of the access tokens that were "
"encrypted by OIDC Proxy and are used to access the MCP Server."
msgstr ""
"OIDC 代理必须用于解密刷新令牌和 Quarkus OIDC--承载访问令牌的 link:https://github.com/sberyozkin/"
"quarkus-mcp-server-oidc-proxy/blob/main/secure-mcp-http-server-with-oidc-"
"proxy/src/main/resources/privateKey.jwk[私有 RSA 密钥] 。请注意，OIDC 代理并不控制对 Quarkus "
"服务端点（如 Quarkus MCP 服务器）的访问，而只是拦截向/从令牌发行者发出的请求/响应，因此它只能在拦截 `refresh_token` "
"授予请求时解密刷新令牌，而 Quarkus OIDC 必须处理由 OIDC 代理加密并用于访问 MCP 服务器的访问令牌的解密。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"This is a hint to Quarkus OIDC that when the `quarkus.oidc.token.decryption-"
"key-location` is set, that only an access token, either the bearer or "
"authorization code flow one, that must be decrypted."
msgstr ""
"这是给 Quarkus OIDC 的一个提示，即当 `quarkus.oidc.token.decryption-key-location` "
"被设置时，必须解密的只有一个访问令牌，即承载流或授权码流。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"As you could see at the end of the <<use-mcp-inspector-to-access-mcp-"
"server>> section, ID token was also returned to https://github.com/"
"modelcontextprotocol/inspector[MCP Inspector] which does not need it. OIDC "
"proxy also does not encrypt ID tokens the same way it can encrypt access and "
"refresh tokens, because the whole point of an ID token when SPA applications "
"login the user is for SPA be able to find some information about the user "
"from the ID token, therefore encrypting it by the OIDC proxy would make it "
"impossible. But an ID token can contain sensitive information so why return "
"it to SPA which does not need it ? So we let https://github.com/quarkiverse/"
"quarkus-oidc-proxy[OIDC Proxy] remove it from the authorization code flow "
"grant response."
msgstr ""
"正如您在 <<use-mcp-inspector-to-access-mcp-server>> 部分末尾所看到的，ID 令牌也返回给了不需要它的 "
"link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] 。OIDC "
"代理也不会像加密访问和刷新令牌那样加密 ID 令牌，因为当 SPA 应用程序登录用户时，ID 令牌的全部意义就在于让 SPA 能够从 ID "
"令牌中找到有关用户的某些信息，因此 OIDC 代理对其加密将使其不可能实现。但 ID 令牌可能包含敏感信息，为什么要将其返回给不需要它的 SPA "
"呢？因此，我们让 link:https://github.com/quarkiverse/quarkus-oidc-proxy[OIDC 代理] "
"将其从授权代码流授予响应中删除。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Save the updated configuration, Quarkus MCP Server will notice them in dev "
"mode."
msgstr "保存更新后的配置，Quarkus MCP 服务器会在开发模式下注意到它们。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Now please go back to the <<use-mcp-inspector-to-access-mcp-server>> section "
"and repeat the same steps, including updating another registered client in "
"Keycloak.\n"
"Once you completed the https://github.com/modelcontextprotocol/inspector[MCP "
"Inspector]'s `Guided OAuth Flow`, check the returned tokens:"
msgstr ""
"现在请回到 <<use-mcp-inspector-to-access-mcp-server>> 部分，重复同样的步骤，包括更新 Keycloak "
"中的另一个注册客户端。完成 link:https://github.com/modelcontextprotocol/inspector[MCP "
"检查员] 的 `Guided OAuth Flow` 后，请检查返回的令牌："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"As you can see an ID token is no longer returned.\n"
"Now copy the access token value. https://www.jwt.io/[jwt.io] no longer "
"accepts encrypted JWT tokens, but you can find another JWT decoder online "
"such as https://fusionauth.io/dev-tools/jwt-decoder[FusionAuth JWT Decoder].\n"
"Paste the access token - the actual claims are encrypted but it can still "
"show the JWT headers:"
msgstr ""
"正如你所看到的，ID 令牌不再返回。现在复制访问令牌值。 link:https://www.jwt.io/[jwt.io] 不再接受加密的 JWT "
"令牌，但你可以在网上找到其他 link:https://fusionauth.io/dev-tools/jwt-decoder[JWT 解码器] ，如 "
"link:https://fusionauth.io/dev-tools/jwt-decoder[FusionAuth JWT 解码器] 。粘贴访问令牌-"
"-实际请求已加密，但仍可显示 JWT 标头："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"These are not signing but encryption algorithms. `RSA-OAEP` encrypts the "
"generated content encryption key while `A256GCM` algorithm uses this key to "
"encrypt claims."
msgstr "`RSA-OAEP` 对生成的内容加密密钥进行加密，而 `A256GCM` 算法则使用该密钥对权利要求进行加密。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"In this particular demo, the fact that the access and refresh tokens are "
"encrypted primarily eliminates the information leak risk as Keycloak access "
"and refresh tokens are usually in JWT format and can contain sensitive "
"details. We also rely on the MCP Client to use https://modelcontextprotocol."
"io/specification/2025-06-18/basic/authorization#authorization-code-"
"protection[Proof Key for Code Exchange] to minimize a risk of the "
"authorizaion code being leaked and the attacker acquiring the tokens, and we "
"enforce the CORS policy in the <<mcp-server-configuration>> section to allow "
"requests to the MCP Server only from the known https://github.com/"
"modelcontextprotocol/inspector[MCP Inspector]'s host and port."
msgstr ""
"在此特定演示中，访问和刷新令牌经过加密这一事实主要消除了信息泄漏风险，因为 Keycloak 访问和刷新令牌通常采用 JWT "
"格式，可能包含敏感细节。我们还依靠 MCP 客户端使用 link:https://modelcontextprotocol.io/"
"specification/2025-06-18/basic/authorization#authorization-code-"
"protection[证明密钥进行代码交换] ，以最大限度地降低授权代码泄露和攻击者获取令牌的风险，并在 <<mcp-server-"
"configuration>> 部分执行 CORS 策略，只允许从已知 link:https://github.com/"
"modelcontextprotocol/inspector[MCP 检查员] 的主机和端口向 MCP 服务器发出请求。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Encrypting access tokens before returning them to the MCP Client is very "
"useful when your MCP Server is implemented to propagate the incoming access "
"tokens to other services, such as GitHub, or downstream microservices that "
"may not enforce specific CORS policies, or token verification constraints "
"such as a token audience check. In such cases, if the MCP Client leaks the "
"access token, the attacker can bypass Quarkus MCP server and access those "
"other services directly. This risk is avoided when the access token is "
"encrypted by https://github.com/quarkiverse/quarkus-oidc-proxy[OIDC Proxy] "
"because those other services won't be able to decrypt it."
msgstr ""
"在将访问令牌返回给 MCP 客户端之前对其进行加密非常有用，因为您的 MCP 服务器会将传入的访问令牌传播给其他服务（如 GitHub "
"或下游微服务），而这些服务可能不执行特定的 CORS 策略或令牌验证约束（如令牌受众检查）。在这种情况下，如果 MCP "
"客户端泄漏了访问令牌，攻击者就可以绕过 Quarkus MCP 服务器，直接访问这些其他服务。如果访问令牌是由 link:https://github."
"com/quarkiverse/quarkus-oidc-proxy[OIDC 代理] 加密的，就可以避免这种风险，因为其他服务将无法解密访问令牌。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Similarly, when the SPA tries to use a refresh token to refresh the expired "
"access token and the attacker manages to get hold of the refresh token and "
"is aware of the actual token issuer's refresh endpoint, then the refresh "
"grant request can go directly to the provider. This risk is avoided when the "
"refresh token is encrypted by https://github.com/quarkiverse/quarkus-oidc-"
"proxy[OIDC Proxy] because the token issuer won't be able to decrypt it."
msgstr ""
"同样，当 SPA "
"试图使用刷新令牌来刷新过期的访问令牌，而攻击者设法获得了刷新令牌并知道实际令牌发行者的刷新端点时，刷新授予请求就会直接转到提供者。如果刷新令牌是由 "
"link:https://github.com/quarkiverse/quarkus-oidc-proxy[OIDC 代理] "
"加密的，就可以避免这种风险，因为令牌发行者无法对其进行解密。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Now that we discussed why it may be worth encrypting the access and refresh "
"tokens, please go to the end of the <<use-mcp-inspector-to-access-mcp-"
"server>> section, `Connect` to the MCP Server, and run the tool to confirm "
"that the encrypted access token is correctly decrypted by the MCP Server."
msgstr ""
"既然我们已经讨论了为什么值得对访问令牌和刷新令牌进行加密，请转到 <<use-mcp-inspector-to-access-mcp-server>> "
"部分的末尾， `Connect` 到 MCP 服务器，并运行工具确认加密的访问令牌已被 MCP 服务器正确解密。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Security Considerations"
msgstr "安全考虑因素"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"The key security recommendation remains the same as the one in the https://"
"quarkus.io/blog/secure-mcp-server-oauth2/#security-considerations[Use MCP "
"OAuth2 Flow to access Quarkus MCP Server] blog post: secure Quarkus MCP "
"servers must enforce that access tokens have a correct audience, for the MCP "
"Server to assert that the current token is meant to access this MCP server "
"only. And indeed, MCP Servers that propagate tokens further should consider "
"exchanging such tokens, for a new token to target the downstream service "
"correctly - it also minimizes the risk discussed next."
msgstr ""
"关键的安全建议与 \" link:https://quarkus.io/blog/secure-mcp-server-oauth2/#security-"
"considerations[使用 MCP OAuth2 流程访问 Quarkus MCP 服务器] \"博文中的建议相同：安全的 Quarkus "
"MCP 服务器必须确保访问令牌有正确的受众，以便 MCP 服务器断言当前令牌仅用于访问此 MCP 服务器。事实上，进一步传播令牌的 MCP "
"服务器应考虑交换此类令牌，以获得新的令牌，从而正确定位下游服务--这也可将接下来讨论的风险降至最低。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"When your MCP server forwards the tokens, please consider how to minimize a "
"risk of the attacker stealing the tokens from the MCP Client and using them "
"to access directly the same services that MCP Server forwards tokens to. "
"https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] "
"provides a way to <<use-oidc-proxy-to-encrypt-tokens,encrypt access and "
"refresh tokens>> that are returned to the MCP Client, making them acceptable "
"only by either the MCP server or https://github.com/quarkiverse/quarkus-oidc-"
"proxy[OIDC Proxy] itself."
msgstr ""
"当您的 MCP 服务器转发令牌时，请考虑如何最大限度地降低攻击者从 MCP 客户端窃取令牌并使用它们直接访问 MCP 服务器转发令牌的相同服务的风险。 "
"link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] "
"提供了一种对返回给 MCP 客户端的 xref:use-oidc-proxy-to-encrypt-tokens[访问和刷新令牌进行加密的] "
"方法，使其只能被 MCP 服务器或 link:https://github.com/quarkiverse/quarkus-oidc-"
"proxy[OIDC Proxy] 本身接受。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"When MCP Client registers OAuth2 Clients dynamically, please consider "
"enforcing a user consent during the authentication with a standard OpenId "
"Connect `prompt=consent` parameter. https://github.com/quarkiverse/quarkus-"
"oidc-proxy[Quarkus OIDC Proxy] recognizes the `quarkus.oidc.authentication."
"extra-params.prompt=consent` property that you can use if the MCP Client "
"does not add it itself when initiating an authorization code flow for the "
"dynamically registered client."
msgstr ""
"当 MCP 客户端动态注册 OAuth2 客户端时，请考虑在认证过程中使用标准 OpenId Connect `prompt=consent` "
"参数强制用户同意。 link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus "
"OIDC Proxy] 可识别 `quarkus.oidc.authentication.extra-params.prompt=consent` "
"属性，如果 MCP 客户端在为动态注册的客户端启动授权代码流时没有自行添加该属性，您可以使用该属性。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Please note that the https://github.com/quarkiverse/quarkus-oidc-"
"proxy[Quarkus OIDC Proxy] extension currently has an `experimental` status, "
"therefore, while we do encourage you to experiment with it, we do not "
"recommend to use it in production for the purpose of hardening the https://"
"github.com/quarkiverse/quarkus-mcp-server[Quarkus MCP Server] token security "
"yet."
msgstr ""
"请注意， link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC "
"Proxy] 扩展目前的状态是 `experimental` ，因此，虽然我们鼓励您尝试使用它，但我们不建议您在生产中使用它来加固 link:https:"
"//github.com/quarkiverse/quarkus-mcp-server[Quarkus MCP 服务器] 令牌的安全性。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Please never use a wildcard CORS policy in production, get the MCP server "
"accept only known MCP Client SPA origins."
msgstr "请不要在生产中使用通配符 CORS 策略，让 MCP 服务器只接受已知的 MCP 客户端 SPA 起源。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
msgid "Conclusion"
msgstr "解决方案"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"In this blog post we looked at how https://github.com/quarkiverse/quarkus-"
"oidc-proxy[Quarkus OIDC Proxy] can help to harden the security of https://"
"github.com/quarkiverse/quarkus-mcp-server[Quarkus MCP Server] tokens, by "
"encrypting access and refresh tokens, and removing a possibly sensitive ID "
"token, before the tokens are returned to the MCP Client."
msgstr ""
"在这篇博文中，我们探讨了 link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus "
"OIDC Proxy] 如何通过加密访问和刷新令牌，以及在令牌返回 MCP 客户端之前移除可能敏感的 ID 令牌，来帮助加强 link:https://"
"github.com/quarkiverse/quarkus-mcp-server[Quarkus] MCP link:https://github."
"com/quarkiverse/quarkus-mcp-server[服务器] 令牌的安全性。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"We also used https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC "
"Proxy] to get OAuth2 Dynamic Client Registration working by controlling the "
"CORS policy at the https://github.com/quarkiverse/quarkus-mcp-server[Quarkus "
"MCP Server] level and forwarding the client registration requests to "
"Keycloak."
msgstr ""
"我们还使用了 link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC "
"Proxy] ，通过在 link:https://github.com/quarkiverse/quarkus-mcp-server[Quarkus "
"MCP 服务器] 级别控制 CORS 策略，并将客户端注册请求转发给 Keycloak，来实现 OAuth2 动态客户端注册。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Please let us know what you think, enjoy !"
msgstr "请告诉我们您的想法，祝您玩得愉快！"
