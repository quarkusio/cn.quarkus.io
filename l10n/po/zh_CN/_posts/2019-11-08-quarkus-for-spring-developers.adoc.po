# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: _posts/2019-11-08-quarkus-for-spring-developers.adoc
#, fuzzy, no-wrap
msgid "Quarkus for Spring Developers"
msgstr "面向Spring开发者的Quarkus"

#. type: Plain text
#: _posts/2019-11-08-quarkus-for-spring-developers.adoc
#, fuzzy
msgid "The arrival of Quarkus 1.0 brings an innovative platform for developing Linux container- and kubernetes-native Java microservices. Developers typically have to set aside their existing knowledge as they begin to evaluate new and innovative runtime frameworks. Quarkus is different because it was created by a collection of engineers with a deep expertise in a broad collection of Java technologies. This includes Spring API compatibility, brought to Quarkus by the same engineers that bring Spring Boot support to https://www.redhat.com/en/products/runtimes[Red Hat Runtimes]."
msgstr "Quarkus 1.0的到来为开发Linux容器和kubernetes原生Java微服务带来了一个创新平台。开发人员在开始评估新的和创新的运行时框架时，通常要把他们现有的知识放在一边。Quarkus之所以与众不同，是因为它是由一群在广泛的Java技术领域具有深厚专业知识的工程师共同创建的。这包括Spring API的兼容性，由为 link:https://www.redhat.com/en/products/runtimes[Red Hat Runtimes] 带来Spring Boot支持的同一批工程师带到Quarkus。"

#: _posts/2019-11-08-quarkus-for-spring-developers.adoc
#, fuzzy
msgid ""
"A free 140-page book, https://red.ht/quarkus-spring-devs[Quarkus for Spring Developers],\n"
"is now available that discusses this topic in greater, and updated, detail."
msgstr "现在有一本 140 页的免费书籍《 link:https://red.ht/quarkus-spring-devs[Quarkus for Spring Developers] 》，其中对这一主题进行了更详细的讨论和更新。"

#. type: Title ==
#: _posts/2019-11-08-quarkus-for-spring-developers.adoc
#, fuzzy, no-wrap
msgid "I'm a Spring developer. Why Quarkus?"
msgstr "我是一个Spring开发者。为什么选择Quarkus？"

#: _posts/2019-11-08-quarkus-for-spring-developers.adoc
#, fuzzy
msgid "It is becoming increasingly apparent that containerization in general and Kubernetes in particular is forcing a re-evaluation of Java for the development of cloud native applications. Kubernetes is a  highly dynamic shared infrastructure that becomes more cost effective as the number of applications a cluster can host grows and the responsiveness to application lifecycle changes improves, like redeployments and scaling up/down. Traditional Java cloud native runtimes have layered new functionality on an existing stack, without really re-thinking the underlying stack itself. This results in larger memory consumption and slower startup times, to the point where organizations are now willing to forgo their deep Java expertise to retrain and retool for Go and Node.js to drive more value out of their large investment in Kubernetes clusters."
msgstr "容器化尤其是 Kubernetes 正迫使人们重新评估 Java 在开发云本地应用程序方面的作用，这一点正变得越来越明显。Kubernetes 是一种高度动态的共享基础架构，随着集群可承载的应用程序数量的增加以及对应用程序生命周期变化（如重新部署和向上/向下扩展）响应速度的提高，它变得更具成本效益。传统的 Java 云原生运行时在现有堆栈上叠加了新功能，而没有真正重新思考底层堆栈本身。这导致内存消耗更大、启动时间更慢，以至于企业现在愿意放弃深厚的 Java 专业知识，重新培训和改造 Go 和 Node.js，以便从 Kubernetes 集群的巨额投资中获取更多价值。"

#. type: Plain text
#: _posts/2019-11-08-quarkus-for-spring-developers.adoc
#, fuzzy
msgid "This is the very problem that Quarkus addresses.  Quarkus is optimized for memory density and rapid startup time. Quarkus applications running on the JVM can deliver nearly twice as many application instances in the same amount of RAM when compared to other cloud native Java stacks, and up to 7x more instances when packaged as a native binary. This is more than simply compiling to a native binary using https://github.com/oracle/graal/tree/master/substratevm[SubstrateVM] (a feature of https://www.graalvm.org/[GraalVM]). Quarkus has optimized traditionally “highly dynamic” frameworks for Kubernetes immutable infrastructure, resulting in reduced memory utilization and faster initialization. These optimized and https://quarkus.io/guides/[well-documented] frameworks, called “extensions”, consist of best of breed and standard APIs. The result is https://quarkus.io/assets/images/quarkus_metrics_graphic_bootmem_wide.png[significant improvements in runtime efficiency]."
msgstr "这正是Quarkus要解决的问题。Quarkus针对内存密度和快速启动时间进行了优化。与其他云原生Java堆栈相比，在JVM上运行的Quarkus应用程序可以在相同数量的RAM中提供近两倍的应用程序实例，而在打包成原生二进制文件时，实例数量最多可达7倍。这不仅仅是使用 link:https://github.com/oracle/graal/tree/master/substratevm[SubstrateVM] （ link:https://www.graalvm.org/[GraalVM] 的一项功能）编译成本地二进制文件那么简单。Quarkus已经为Kubernetes不可变的基础设施优化了传统的 \"高动态 \"框架，从而降低了内存利用率，加快了初始化。这些优化过的、 link:https://quarkus.io/guides/[有据可查] 的框架被称为 \"扩展\"，由最佳和标准的API组成。其结果是 link:https://quarkus.io/assets/images/quarkus_metrics_graphic_bootmem_wide.png[运行时效率的显著提高] 。"

#. type: Title ==
#: _posts/2019-11-08-quarkus-for-spring-developers.adoc
#, fuzzy, no-wrap
msgid "What existing knowledge can Spring developers bring to Quarkus?"
msgstr "Spring开发者可以为Quarkus带来哪些现有知识？"

#. type: Plain text
#: _posts/2019-11-08-quarkus-for-spring-developers.adoc
#, fuzzy
msgid "Quarkus’ Spring API compatibility includes https://quarkus.io/guides/spring-di-guide[Spring DI], https://quarkus.io/guides/spring-web-guide[Spring Web], and https://quarkus.io/guides/spring-data-jpa-guide[Spring Data JPA]. Additional Spring APIs are being planned like Spring Security and Spring Config. When running on the JVM, Quarkus applications can utilize virtually any Java library. Many libraries, as long as they do not use Java reflection, will compile to native\". Lombok, a popular library among Spring developers for example, works with native compilation. To be clear, the Spring API compatibility in Quarkus is not intended to be a complete Spring platform to re-host existing Spring applications. The intent is to offer enough Spring API compatibility to make developing new applications with Quarkus a natural getting started experience. When combined with pre-optimized extensions, Quarkus delivers an https://quarkus.io/guides/[amazing amount of functionality] for microservices development. With all this being said, developers have successfully migrated Spring applications to Quarkus :-)"
msgstr "Quarkus?Spring API的兼容性包括 link:https://quarkus.io/guides/spring-di-guide[Spring DI] 、 link:https://quarkus.io/guides/spring-web-guide[Spring Web] 和 link:https://quarkus.io/guides/spring-data-jpa-guide[Spring Data JPA] 。其他Spring API正在计划中，比如Spring Security和Spring Config。当在JVM上运行时，Quarkus应用程序可以利用几乎所有的Java库。许多库，只要不使用Java反射，就会被编译成本地的\"。例如，Lombok，一个在Spring开发者中很受欢迎的库，可以使用本地编译。要明确的是，Quarkus中的Spring API兼容性并不打算成为一个完整的Spring平台来重新托管现有的Spring应用。我们的目的是提供足够的Spring API兼容性，使用Quarkus开发新的应用程序成为一种自然的入门体验。当与预先优化的扩展相结合时，Quarkus为微服务开发提供了大量的 link:https://quarkus.io/guides/[功能] 。综上所述，开发人员已经成功地将Spring应用程序迁移到Quarkus上了。）"

#. type: delimited block =
#: _posts/2019-11-08-quarkus-for-spring-developers.adoc
#, fuzzy
msgid "The Spring Framework is highly dynamic in nature. To address this, the Quarkus Spring compatibility extensions map Spring APIs to APIs in existing extensions that have already been optimized for fast startup, reduced memory utilization and native compilation, like RestEasy and CDI. Also, the Quarkus Spring compatibility extensions do not utilize the Spring application context. For these reasons, attempting to utilize additional Spring libraries will likely not work."
msgstr "Spring框架在本质上是高度动态的。为了解决这个问题，Quarkus Spring兼容扩展将Spring的API映射到现有扩展中的API，这些扩展已经为快速启动、降低内存利用率和本地编译进行了优化，如RestEasy和CDI。另外，Quarkus Spring兼容扩展并不利用Spring应用上下文。由于这些原因，试图利用额外的Spring库很可能不会成功。"

#: _posts/2019-11-08-quarkus-for-spring-developers.adoc
#, fuzzy
msgid "*Quarkus Spring Web Example*"
msgstr "*Quarkus Spring Web 示例*"

#: _posts/2019-11-08-quarkus-for-spring-developers.adoc
#, fuzzy
msgid "*Quarkus Spring Repository Example*"
msgstr "*Quarkus Spring 资源库示例*"

#: _posts/2019-11-08-quarkus-for-spring-developers.adoc
#, fuzzy
msgid "*Quarkus Spring Service + MicroProfile Fault Tolerance Example*"
msgstr "*Quarkus Spring 服务 + 微配置文件容错示例*"

#. type: Title ==
#: _posts/2019-11-08-quarkus-for-spring-developers.adoc
#, fuzzy, no-wrap
msgid "Are there additional benefits for Spring developers?"
msgstr "对Spring开发者来说，是否有额外的好处？"

#. type: Plain text
#: _posts/2019-11-08-quarkus-for-spring-developers.adoc
#, fuzzy
msgid "In addition to the improved memory utilization and startup time, Quarkus offers the following benefits to Spring developers:"
msgstr "除了改善内存利用率和启动时间，Quarkus还为Spring开发者提供了以下好处。"

#: _posts/2019-11-08-quarkus-for-spring-developers.adoc
#, fuzzy
msgid "*Function-as-a-Service (FaaS) Runtime.* When compiled to a native binary, Quarkus applications can start in under .0015 seconds, making it possible to use the existing Spring and Java API knowledge with FaaS functions. (https://quarkus.io/guides/azure-functions-http[Azure], https://quarkus.io/guides/amazon-lambda[AWS Lambda])"
msgstr "*功能即服务（FaaS）运行时。* 当编译成本地二进制文件时，Quarkus 应用程序可以在 0.0015 秒内启动，从而可以将现有的 Spring 和 Java API 知识与 FaaS 功能结合起来使用。( link:https://quarkus.io/guides/azure-functions-http[Azure] , link:https://quarkus.io/guides/amazon-lambda[AWS Lambda] )"

#: _posts/2019-11-08-quarkus-for-spring-developers.adoc
#, fuzzy
msgid "*Live Coding.* Start with a “Hello World” sample app and transform it into a complex microservice without ever restarting the app. Just save and reload browser to see changes along the way. Quarkus live coding “just works” out of the box, regardless of IDE."
msgstr "*实时编码。* 从 \"Hello World \"示例应用程序开始，将其转化为复杂的微服务，而无需重新启动应用程序。只需保存并重新加载浏览器，即可查看沿途的变化。Quarkus 实时编码 \"开箱即用\"，与集成开发环境无关。"

#: _posts/2019-11-08-quarkus-for-spring-developers.adoc
#, fuzzy
msgid "*Support for reactive and imperative models.* Quarkus has a reactive core that supports the traditional imperative model, reactive model, or both in the same application."
msgstr "*支持反应式和命令式模型。* Quarkus 的反应式内核支持传统的命令式模型、反应式模型或在同一应用程序中同时支持这两种模型。"

#: _posts/2019-11-08-quarkus-for-spring-developers.adoc
#, fuzzy
msgid "*Early detection of dependency injection errors.* Quarkus catches dependency injection errors during compilation instead of at runtime."
msgstr "*早期检测依赖注入错误。* Quarkus 可在编译期间而非运行时捕获依赖注入错误。"

#: _posts/2019-11-08-quarkus-for-spring-developers.adoc
#, fuzzy
msgid "*Use best of breed frameworks and standards together.* Quarkus supports Spring API compatibility, Eclipse Vert.x, MicroProfile (JAX-RS, CDI, etc), reactive streams and messaging, and more in the same application. Read https://developers.redhat.com/blog/2019/10/02/autowire-microprofile-into-spring-with-quarkus/[“@Autowire MicroProfile into Spring Boot”] for using Spring and MicroProfile APIs together in the same project."
msgstr "*同时使用最佳框架和标准。* Quarkus 支持在同一应用程序中兼容 Spring API、Eclipse Vert.x、MicroProfile（JAX-RS、CDI 等）、反应流和消息传递等。阅读 link:https://developers.redhat.com/blog/2019/10/02/autowire-microprofile-into-spring-with-quarkus/[\"@Autowire MicroProfile into Spring Boot\"] ，了解如何在同一项目中同时使用 Spring 和 MicroProfile API。"

#. type: Title ==
#: _posts/2019-11-08-quarkus-for-spring-developers.adoc
#, fuzzy, no-wrap
msgid "How should Spring developers get started with Quarkus?"
msgstr "Spring开发者应该如何开始使用Quarkus？"

#. type: Plain text
#: _posts/2019-11-08-quarkus-for-spring-developers.adoc
#, fuzzy
msgid "Recommended steps include:"
msgstr "建议的步骤包括。"

#. type: Plain text
#: _posts/2019-11-08-quarkus-for-spring-developers.adoc
#, fuzzy
msgid "Follow the https://quarkus.io/get-started/[Getting Started Guide] as a general Quarkus introduction."
msgstr "遵循《 link:https://quarkus.io/get-started/[入门指南》] 作为Quarkus的一般介绍。"

#. type: Plain text
#: _posts/2019-11-08-quarkus-for-spring-developers.adoc
#, fuzzy
msgid "Follow the https://quarkus.io/guides/spring-di-guide[Spring DI], https://quarkus.io/guides/spring-web-guide[Spring Web], and https://quarkus.io/guides/spring-data-jpa-guide[Spring Data JPA] guides."
msgstr "遵循 link:https://quarkus.io/guides/spring-di-guide[Spring DI] 、 link:https://quarkus.io/guides/spring-web-guide[Spring Web] 和 link:https://quarkus.io/guides/spring-data-jpa-guide[Spring Data JPA] 指南。"

#. type: Plain text
#: _posts/2019-11-08-quarkus-for-spring-developers.adoc
#, fuzzy
msgid "Create a new app using https://code.quarkus.io/[code.quarkus.io]."
msgstr "使用 link:https://code.quarkus.io/[code.quarkus.io] 创建一个新的应用程序。"

#. type: Plain text
#: _posts/2019-11-08-quarkus-for-spring-developers.adoc
#, fuzzy
msgid "Optionally watch https://www.youtube.com/watch?v=9wJm8g83vqA&list=PLsM3ZE5tGAVYUKfQRUC6Gp61oV1WJEIPJ&index=10&t=0s[Kubernetes Native Spring Apps on Quarkus] Devoxx presentation"
msgstr "可选择观看 link:https://www.youtube.com/watch?v=9wJm8g83vqA&list=PLsM3ZE5tGAVYUKfQRUC6Gp61oV1WJEIPJ&index=10&t=0s[Quarkus] Devoxx link:https://www.youtube.com/watch?v=9wJm8g83vqA&list=PLsM3ZE5tGAVYUKfQRUC6Gp61oV1WJEIPJ&index=10&t=0s[上的 Kubernetes 原生 Spring 应用程序] 演示"
