# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-11-29 06:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title ==
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "Quarkus support for AWS Lambda SnapStart"
msgstr "Quarkus对AWS Lambda SnapStart的支持"

#. type: YAML Front Matter: synopsis
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "Amazon Web Services (AWS)  announced the SnapStart feature for AWS Lambda. SnapStart reduces startup latency for Java-based functions running on AWS Lambda, and Quarkus supports it from day one!"
msgstr "亚马逊网络服务（AWS）宣布为AWS Lambda推出SnapStart功能。SnapStart减少了在AWS Lambda上运行的基于Java的函数的启动延迟，Quarkus从第一天起就支持该功能!"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "Amazon Web Services (AWS)  http://aws.amazon.com/blogs/aws/new-accelerate-your-lambda-functions-with-lambda-snapstart[announced] the SnapStart feature for AWS Lambda. SnapStart for Java reduces startup latency for Java-based functions running on AWS Lambda, and Quarkus supports it from day one!"
msgstr "亚马逊网络服务（AWS） link:http://aws.amazon.com/blogs/aws/new-accelerate-your-lambda-functions-with-lambda-snapstart[宣布] 为AWS Lambda推出SnapStart功能。SnapStart for Java减少了在AWS Lambda上运行的基于Java的函数的启动延迟，Quarkus从第一天起就支持该功能!"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "Quarkus is supersonic subatomic Java with a focus on cloud-native applications. The idea behind Quarkus has always been to do at build-time what traditional frameworks do at runtime. Quarkus is optimized for low memory usage and fast startup times. Quarkus brings back _developer joy_ to Java and enables every Java developer out there to use their skills to develop cloud-native apps, including AWS Lambda workloads."
msgstr "Quarkus是超音速的亚原子Java，专注于云原生应用。Quarkus的理念一直是在构建时完成传统框架在运行时的工作。Quarkus针对低内存使用率和快速启动时间进行了优化。Quarkus将 _开发者的快乐_ 带回了Java，使每一个Java开发者都能利用他们的技能来开发云原生应用，包括AWS Lambda工作负载。"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "Quarkus uses the ‘quarkus-amazon-lambda’ extension to build and deploy functions to AWS Lambda. The extension allows developers to use the Quarkus development model like live coding, continuous testing, etc., and the ability to use CDI Injections and additional quarkus extensions. Developers can deploy functions to AWS Lambda using native or Java mode. With today's http://aws.amazon.com/blogs/aws/new-accelerate-your-lambda-functions-with-lambda-snapstart[announcement], the SnapStart feature is now an additional option to build and deploy functions written with Quarkus to AWS Lambda."
msgstr "Quarkus使用'quarkus-amazon-lambda'扩展来构建和部署功能到AWS Lambda。该扩展允许开发者使用Quarkus的开发模式，如实时编码、持续测试等，并能够使用CDI注入和其他quarkus扩展。开发人员可以使用本地或Java模式将功能部署到AWS Lambda。通过今天的 link:http://aws.amazon.com/blogs/aws/new-accelerate-your-lambda-functions-with-lambda-snapstart[公告] ，SnapStart功能现在是一个额外的选择，可以将用Quarkus编写的函数构建和部署到AWS Lambda。"

#. type: Title ===
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "What is SnapStart?"
msgstr "什么是SnapStart？"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "Typically AWS Lambda creates a new execution environment when invoking a new function for the first time or when it is scaled up to handle the traffic. SnapStart takes a different approach by taking a snapshot of the execution environment(memory and application state)  of the initialized function execution environment. Furthermore, it persists the snapshot and caches it for low-latency access. When invoking the function, it does not need to spend time initializing code, dependencies, or framework. Instead, Lambda resumes the new execution environment from the persisted snapshot."
msgstr "通常情况下，AWS Lambda在首次调用一个新函数时，或在扩大规模以处理流量时，会创建一个新的执行环境。SnapStart采取了不同的方法，对初始化函数执行环境（内存和应用状态）进行快照。此外，它坚持快照，并为低延迟的访问进行缓存。当调用函数时，它不需要花费时间来初始化代码、依赖关系或框架。相反，Lambda从持久化的快照中恢复新的执行环境。"

#. type: Title ===
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "SnapStart considerations"
msgstr "SnapStart的注意事项"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "Because of how SnapStart works with snapshots and resumes the execution environment with low latency, this benefits functions written with Quarkus. Quarkus can leverage the snapshotting and warm-up code paths for the libraries Quarkus supports."
msgstr "由于SnapStart是如何与快照一起工作的，并以低延迟恢复执行环境，这有利于用Quarkus编写的功能。Quarkus可以利用Quarkus支持的库的快照和暖机代码路径。"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "For the Developer's code and libraries, they need to consider particular cases when utilizing SnapStart:"
msgstr "对于开发者的代码和库，他们在利用SnapStart时需要考虑特殊情况。"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid ""
"*Resource connections over the network***:** Snapshots do not guarantee connections back to remote hosts when a function is resumed. Developers will need to ensure and validate the state of connections.  +\n"
"*Pulling in-memory data from sources*: Often, one needs to pull data from a different source into memory. This can also lead to inconsistency if the data at the source has changed or even expired. Ensure and verify the state of such data. +\n"
"*Randomness*: Lambda SnapStart speeds up applications by re-using a single initialized snapshot many times over to resume execution environments. As a result, unique content which was included in the snapshot during initialization may be reused across execution environments and so may no longer remain unique. Ensure that unique content is generated after initialization, and avoid caching unique content during initialization. Refer to the feature documentation to understand these considerations around uniqueness and interfaces available to customers to restore uniqueness."
msgstr ""
"*网络资源连接<strong></strong> ：* 当功能恢复时，快照不能保证连接回远程主机。开发人员需要确保并验证连接状态。\n"
" *从资源中提取内存数据* ：通常情况下，我们需要将数据从不同来源调入内存。如果数据源的数据已经更改甚至过期，这也会导致数据不一致。确保并验证此类数据的状态。\n"
" ** 随机性：Lambda SnapStart 通过多次重复使用单个初始化快照来恢复执行环境，从而加快应用程序的速度。因此，初始化期间快照中包含的唯一内容可能会在不同的执行环境中重复使用，从而不再保持唯一性。请确保在初始化后生成唯一内容，并避免在初始化期间缓存唯一内容。请参阅功能文档，了解有关唯一性的注意事项以及客户可用于恢复唯一性的接口。"

#. type: Title ===
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "Quarkus fast startup times and integration with SnapStart"
msgstr "Quarkus快速启动时间和与SnapStart的整合"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "A typical Java application uses JIT (Just in time) compilation. When an application starts up, it needs time for specific warm-up code paths to perform better, which means additional CPU cycles for warm-up times. Cloud-native applications demand a faster startup time. Ahead-of-time (AOT) compilation enables that by doing most of the optimizations at build time. A good example here is Quarkus. As a result, we have full speed from startup and no CPU overhead for compilations at startup time. Quarkus application initialization has two phases: static initialization and runtime initialization. This distinction follows the principles of the GraalVM native compilation, inlining the static initialization in the resulting executable, while the runtime initialization happens during the regular execution. We compared multiple functions to understand the benefits of each feature we added:"
msgstr "一个典型的Java应用程序使用JIT（Just in time）编译。当一个应用程序启动时，它需要时间让特定的预热代码路径表现得更好，这意味着预热时间需要额外的CPU周期。云原生应用需要更快的启动时间。通过在构建时进行大部分优化，时间前置（AOT）编译可以实现这一点。Quarkus就是一个很好的例子。因此，我们从启动开始就拥有全速，并且在启动时没有CPU开销的编译。Quarkus应用程序的初始化有两个阶段：静态初始化和运行时初始化。这种区分遵循GraalVM本地编译的原则，在产生的可执行文件中内联静态初始化，而运行时初始化则发生在常规执行期间。我们比较了多个功能，以了解我们所添加的每个功能的好处。"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "The Hello function is a simple function returning “Hello” and using the Quarkus AWS Lambda extension"
msgstr "Hello函数是一个简单的函数，返回 \"Hello\"，并使用Quarkus AWS Lambda扩展。"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "The Heroes function implements a CRUD interface on top of DynamoDB. It uses the Quarkus AWS Lamdba HTTP and RESTEasy Reactive. Invocations go through an AWS API Gateway."
msgstr "Heroes函数在DynamoDB之上实现了一个CRUD接口。它使用Quarkus AWS Lamdba HTTP和RESTEasy Reactive。调用通过AWS API网关进行。"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "For each function, we compare:"
msgstr "对于每个函数，我们进行比较。"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "The invocation duration, memory, and billed duration without SnapStart"
msgstr "不使用SnapStart的调用时间、内存和计费时间"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "The invocation duration, memory, and billed duration with a full startup during the warmup phase and the preloading of the classes."
msgstr "在热身阶段和预装类的过程中，调用持续时间、内存和计费持续时间与全面启动。"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "The class preloading loads and initializes all the classes used by the application."
msgstr "类的预加载加载并初始化应用程序使用的所有类。"

#. type: Title ===
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "Results"
msgstr "结果"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "*Hello Function*"
msgstr "*你好，功能*"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "*Without SnapStart*"
msgstr "*无 SnapStart*"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "*With SnapStart*"
msgstr "*使用 SnapStart*"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "*Native*"
msgstr "*本地*"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "Total duration"
msgstr "总时间"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "2230 ms"
msgstr "2230 毫秒"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "202 ms"
msgstr "202 毫秒"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "-90.93%"
msgstr "-90.93%"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "356 ms"
msgstr "356 毫秒"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "-84.05%"
msgstr "-84.05%"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "Billed duration"
msgstr "计费期限"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "131 ms"
msgstr "131 毫秒"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "109 ms"
msgstr "109 毫秒"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "-16.79%"
msgstr "-16.79%"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "171.76%"
msgstr "171.76%"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "Memory"
msgstr "记忆"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "115 MB"
msgstr "115 MB"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "104 MB"
msgstr "104 MB"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "-9.57%"
msgstr "-9.57%"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "59 MB"
msgstr "59 MB"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "-48.70%"
msgstr "-48.70%"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "*Heroes Function*"
msgstr "*英雄功能*"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "15728 ms"
msgstr "15728 毫秒"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "965 ms"
msgstr "965 毫秒"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "-93.87%"
msgstr "-93.87%"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "1112 ms"
msgstr "1112 毫秒"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "-92.93%"
msgstr "-92.93%"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "12550 ms"
msgstr "12550 毫秒"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "885 ms"
msgstr "885 毫秒"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "-92.95%"
msgstr "-92.95%"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "1113 ms"
msgstr "1113 毫秒"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "-91.13%"
msgstr "-91.13%"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "222 MB"
msgstr "222 MB"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "173 MB"
msgstr "173 MB"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "-22.07%"
msgstr "-22.07%"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "96 MB"
msgstr "96 MB"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "-56.76%"
msgstr "-56.76%"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "Quarkus together with AWS Lambda SnapStart functions enables further runtime optimizations close to the native performance and much faster than the regular Java ones. For some functions, SnapStart is faster than a cold start of a native executable in AWS Lambda. For others, memory usage is better with the native image."
msgstr "Quarkus与AWS Lambda的SnapStart函数一起实现了进一步的运行时优化，接近本地性能，比常规的Java性能快得多。对于某些功能，SnapStart比AWS Lambda中的本地可执行文件的冷启动要快。对于其他函数，内存使用情况比本地图像更好。"

#. type: Title ===
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, no-wrap
msgid "Conclusion"
msgstr "解决方案"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "Developers now have three options to build and deploy functions to AWS Lambda; JVM mode, Native mode, and the latest inclusion of the SnapStart feature. All three have different use cases. It is important to note that SnapStart is an AWS Lambda feature only."
msgstr "开发人员现在有三种选择来构建和部署功能到AWS Lambda；JVM模式、本地模式和最新加入的SnapStart功能。这三种方式都有不同的使用情况。值得注意的是，SnapStart只是AWS Lambda的一个功能。"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "With the SnapStart feature, it is possible to run Quarkus in JVM mode with similar and, in some cases, faster startup times than the native image in the AWS Lambda environment. For this to work, developers need to ensure that applications can startup in a safe state, e.g., network connections, resources, etc. Luckily if you are using Quarkus a lot of this is done for you."
msgstr "通过SnapStart功能，可以在JVM模式下运行Quarkus，其启动时间与AWS Lambda环境中的原生镜像相似，在某些情况下甚至更快。要做到这一点，开发人员需要确保应用程序能够在安全状态下启动，例如，网络连接、资源等。幸运的是，如果你使用Quarkus，很多事情都会为你完成。"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "With https://github.com/quarkusio/quarkus/pull/29108[PR #29108] merged into the Quarkus main branch, Quarkus applications can use the SnapStart features on AWS Lambda. The feature will land in the 2.15 platform release as an experimental feature."
msgstr "随着 link:https://github.com/quarkusio/quarkus/pull/29108[PR #29108] 合并到 Quarkus 主分支，Quarkus 应用程序可以在 AWS Lambda 上使用 SnapStart 功能。该功能将作为实验功能出现在 2.15 平台版本中。"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "If you are an AWS Lambda user we encourage you to try out Quarkus with and without AWS Snapstart and compare. Let us know your results and feedback."
msgstr "如果您是 AWS Lambda 用户，我们鼓励您在使用和不使用 AWS Snapstart 的情况下试用 Quarkus 并进行比较。让我们了解您的结果和反馈。"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "For more technical details, visit the AWS Lambda SnapStart blog http://aws.amazon.com/blogs/aws/new-accelerate-your-lambda-functions-with-lambda-snapstart[here]."
msgstr "有关更多技术细节，请访问 AWS Lambda SnapStart 博客 link:http://aws.amazon.com/blogs/aws/new-accelerate-your-lambda-functions-with-lambda-snapstart[。]"
