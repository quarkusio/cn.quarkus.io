msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "Running SQLite in Pure Java with Quarkus"
msgstr "用 Quarkus 在纯 Java 中运行 SQLite"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid ""
"What if you could run a C-based database in pure Java, with zero "
"configuration, and even compile it to a native image effortlessly? With the "
"new Quarkiverse extension https://github.com/quarkiverse/quarkus-jdbc-"
"sqlite4j[quarkus-jdbc-sqlite4j], you can do exactly that."
msgstr ""
"如果你可以在纯 Java 环境中运行基于 C 语言的数据库，无需任何配置，甚至可以毫不费力地将其编译为本地映像，那会怎么样？有了 Quarkiverse "
"的新扩展 link:https://github.com/quarkiverse/quarkus-jdbc-sqlite4j[quarkus-jdbc-"
"sqlite4j] ，你就可以做到这一点。"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid ""
"Traditionally, embedded databases in Java require reimplementing their C "
"counterparts, often leading to differences in behavior, missing "
"optimizations, and delayed bug fixes. However, https://github.com/"
"roastedroot/sqlite4j[sqlite4j] provides a JDBC driver that leverages the "
"original SQLite C implementation while running safely inside a sandbox."
msgstr ""
"传统上，Java 中的嵌入式数据库需要重新实现 C 语言对应的数据库，这往往会导致行为差异、优化缺失和错误修复延迟。然而， link:https://"
"github.com/roastedroot/sqlite4j[sqlite4j] 提供的 JDBC 驱动程序可利用原始 SQLite C "
"实现，同时在沙箱中安全运行。"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "Hands-on Example"
msgstr "实践范例"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid ""
"To see https://github.com/quarkiverse/quarkus-jdbc-sqlite4j[quarkus-jdbc-"
"sqlite4j] in action, you can start with any existing Quarkus application or "
"one of the https://github.com/quarkusio/quarkus-quickstarts[quickstarts]. If "
"you prefer a ready-made example, check out https://github.com/andreaTP/demo-"
"hibernate-orm-quickstart-wasm[this demo repository], which integrates SQLite "
"within a Quarkus application using Hibernate ORM."
msgstr ""
"要查看 link:https://github.com/quarkiverse/quarkus-jdbc-sqlite4j[quarkus-jdbc-"
"sqlite4j 的] 运行情况，你可以从任何现有的 Quarkus 应用程序或 link:https://github.com/quarkusio/"
"quarkus-quickstarts[快速启动] 程序开始。如果你更喜欢现成的示例，请查看 link:https://github.com/"
"andreaTP/demo-hibernate-orm-quickstart-wasm[此演示存储库] ，它使用 Hibernate ORM 将 "
"SQLite 集成到了 Quarkus 应用程序中。"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid ""
"By simply changing the JDBC driver dependency, you can embed a fully "
"functional SQLite database inside your application while retaining all the "
"benefits of the native SQLite implementation."
msgstr "只需更改 JDBC 驱动程序的依赖关系，就能在应用程序中嵌入功能完备的 SQLite 数据库，同时保留本地 SQLite 实现的所有优点。"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "To get started, add the extension dependency to your _pom.xml_:"
msgstr "要开始使用，请将扩展依赖关系添加到 _pom.xml_ 中："

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid ""
"Then, configure your Quarkus application to use SQLite with standard JDBC "
"settings:"
msgstr "然后，配置 Quarkus 应用程序，使用标准 JDBC 设置来使用 SQLite："

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid ""
"You can now use your datasource as you normally would with Hibernate and "
"Panache.\n"
"Note that we keep a minimum connection pool size > 0 to avoid redundant "
"copies from disk to memory of the database."
msgstr ""
"现在你可以像通常使用 Hibernate 和 Panache 一样使用数据源了。请注意，我们保持最小连接池大小大于 "
"0，以避免数据库从磁盘到内存的冗余拷贝。"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "Running in a Secure Sandbox"
msgstr "在安全沙箱中运行"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid ""
"Under the hood, SQLite runs in a fully in-memory sandboxed environment, "
"ensuring security and isolation."
msgstr "在引擎盖下，SQLite 在完全内存沙箱环境中运行，确保了安全性和隔离性。"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "When a connection to a local file is opened, the following occurs:"
msgstr "打开与本地文件的连接时，会出现以下情况："

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid ""
"The database file is copied from disk to an in-memory Virtual FileSystem."
msgstr "数据库文件从磁盘复制到内存中的虚拟文件系统。"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "A connection is established to the in-memory database."
msgstr "与内存数据库建立连接。"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid ""
"While this approach is highly secure, many users need to persist database "
"changes. One recommended solution is to periodically back up the in-memory "
"database to disk. This can be achieved through a scheduled job that:"
msgstr "虽然这种方法具有很高的安全性，但许多用户需要持久保存数据库更改。一种推荐的解决方案是定期将内存数据库备份到磁盘。这可以通过计划作业来实现："

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "Backs up the in-memory database to a new file."
msgstr "将内存数据库备份到新文件。"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "Copies the backup to the host file system."
msgstr "将备份复制到主机文件系统。"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "Atomically replaces the old database file with the new backup."
msgstr "用新的备份文件原子式地替换旧的数据库文件。"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid ""
"This setup ensures a seamless experience while maintaining SQLite's "
"sandboxed security. You can adapt this approach to fit your specific needs."
msgstr "这种设置可确保无缝体验，同时维护 SQLite 的沙盒安全性。您可以根据具体需要调整这种方法。"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "Here's a sample implementation:"
msgstr "下面是一个实施示例："

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "Technical Deep Dive"
msgstr "技术深潜"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid ""
"https://github.com/roastedroot/sqlite4j[sqlite4j] compiles the official "
"SQLite C https://www.sqlite.org/amalgamation.html[amalgamation] to "
"WebAssembly (Wasm), which is then translated into Java bytecode using the "
"https://chicory.dev/docs/experimental/aot[Chicory AOT compiler].\n"
"This enables SQLite to run in a pure Java environment while maintaining its "
"full functionality."
msgstr ""
"link:https://github.com/roastedroot/sqlite4j[sqlite4j] 将官方 SQLite C link:"
"https://www.sqlite.org/amalgamation.html[混合] link:https://chicory.dev/docs/"
"experimental/aot[编译] 为 WebAssembly (Wasm)，然后使用 link:https://chicory.dev/docs/"
"experimental/aot[Chicory AOT 编译器] 将其翻译为 Java 字节码。这样，SQLite 就能在纯 Java "
"环境中运行，同时保持其全部功能。"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "Security and Isolation"
msgstr "安全与隔离"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid ""
"One of the key benefits of this approach is security.\n"
"Running SQLite inside a Wasm sandbox ensures memory safety and isolates it "
"from the host system, making it an excellent choice for applications that "
"require embedded databases while avoiding the risks of native code execution."
""
msgstr ""
"这种方法的主要优势之一是安全性。在 Wasm 沙箱中运行 SQLite "
"可确保内存安全，并将其与主机系统隔离，这使其成为需要嵌入式数据库的应用程序的绝佳选择，同时避免了本地代码执行的风险。"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
msgid "Conclusion"
msgstr "解决方案"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid ""
"With the new https://github.com/quarkiverse/quarkus-jdbc-sqlite4j[quarkus-"
"jdbc-sqlite4j] extension, you get the best of both worlds: the power and "
"reliability of SQLite combined with the safety and portability of Java.\n"
"This extension seamlessly integrates SQLite into Quarkus applications while "
"maintaining a lightweight and secure architecture. Best of all, everything "
"compiles effortlessly with __native-image__."
msgstr ""
"有了新的 link:https://github.com/quarkiverse/quarkus-jdbc-sqlite4j[quarkus-jdbc-"
"sqlite4j] 扩展，您就能获得两个世界的最佳体验：SQLite 的强大功能和可靠性与 Java 的安全性和可移植性相结合。该扩展可将 SQLite "
"无缝集成到 Quarkus 应用程序中，同时保持轻量级的安全架构。最重要的是，一切都可以通过 _本地镜像_ 轻松编译。"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid ""
"Ready to try it out? Give https://github.com/quarkiverse/quarkus-jdbc-"
"sqlite4j[quarkus-jdbc-sqlite4j] a spin in your projects and experience the "
"benefits of running SQLite in pure Java with Quarkus!"
msgstr ""
"准备好试用了吗？在你的项目中试试 link:https://github.com/quarkiverse/quarkus-jdbc-"
"sqlite4j[quarkus-jdbc-sqlite4j，] 体验用 Quarkus 在纯 Java 中运行 SQLite 的好处！"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "Prior Art"
msgstr "现有技术"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "https://github.com/ncruces/go-sqlite3[ncruces/go-sqlite3]"
msgstr "link:https://github.com/ncruces/go-sqlite3[ncruces/go-sqlite3]"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid ""
"https://www.infoq.com/articles/sqlite-java-integration-webassembly/[Ben "
"Eckel - Infoq - WebAssembly, the Safer Alternative to Integrating Native "
"Code in Java]"
msgstr ""
"link:https://www.infoq.com/articles/sqlite-java-integration-webassembly/[Ben "
"Eckel - Infoq - WebAssembly，在 Java 中集成本地代码的更安全替代方案]"
