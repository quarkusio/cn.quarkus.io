# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy, no-wrap
msgid "Kafka - When to commit?"
msgstr "Kafka - 何时提交？"

#. type: YAML Front Matter: synopsis
#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy, no-wrap
msgid "Offset commiting strategies in the Kafka connector"
msgstr "Kafka连接器中的偏移提交策略"

#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid ""
"In a https://quarkus.io/blog/kafka-failure-strategy/[previous blog post], we have looked at failure strategies provided by the Reactive Messaging Kafka connector.\n"
"But, imagine it's our lucky day, and for once it worked.\n"
"We should inform Kafka that the processing succeeded.\n"
"In Kafka terminology, we call this: _offset commit_.\n"
"This post covers the different strategies to commit offsets with the Reactive Messaging Kafka connector."
msgstr "在 link:https://quarkus.io/blog/kafka-failure-strategy/[上] 一篇 link:https://quarkus.io/blog/kafka-failure-strategy/[博文] 中，我们了解了 Reactive Messaging Kafka 连接器提供的故障策略。但是，想象一下，今天是我们的幸运日，这一次它成功了。我们应该通知 Kafka 处理成功了。用 Kafka 术语来说，我们称之为： _偏移提交_ 。本篇文章将介绍使用 Reactive Messaging Kafka 连接器提交偏移量的不同策略。"

#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid "Kafka Consumer Group and Offsets"
msgstr "卡夫卡消费者集团与抵消"

#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid ""
"Kafka organizes records (_i.e._ messages) around _topics_.\n"
"Each topic has a name, and applications send records to topics and poll records from topics.\n"
"So far, nothing out of the ordinary."
msgstr "Kafka 围绕 _主题_ 组织记录 _（即_ 消息）。每个主题都有一个名称，应用程序向主题发送记录，并从主题轮询记录。到目前为止，还没有什么特别的地方。"

#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid ""
"Topics are divided into partitions.\n"
"Each partition is an ordered, immutable sequence of records.\n"
"Sending a message to a topic appends it to the selected partition.\n"
"Each message from a partition gets a sequential id number called _offset_.\n"
"It uniquely identifies each message within the partition.\n"
"So, with Kafka, you can identify an individual record using a `<topic, partition, offset>` tuple."
msgstr "主题被划分为多个分区。每个分区都是有序的、不可更改的记录序列。向主题发送消息时，会将其附加到所选的分区中。分区中的每条信息都有一个顺序 ID 号，称为 _偏移量_ 。它唯一标识了分区内的每条消息。因此，在 Kafka 中，您可以使用 `<topic, partition, offset>` 元组来识别单条记录。"

#. type: Plain text
#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid "image:/assets/images/posts/kafka-commit-strategies/topics-partitions.png[]"
msgstr "image:/assets/images/posts/kafka-commit-strategies/topics-partitions.png[alt=\"topics partitions\"]"

#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid ""
"When an application consumes messages from Kafka, it uses a Kafka consumer.\n"
"With this consumer, it polls batches of messages from a specific topic, for example, `movies` or `actors`.\n"
"Retrieved messages belong to partitions assigned to this consumer.\n"
"And that aspect is essential."
msgstr "应用程序从 Kafka 消费消息时，会使用 Kafka 消费者。通过该消费者，它可以轮询来自特定主题（例如 `movies` 或 `actors` ）的消息批次。检索到的消息属于分配给该消费者的分区。这一点至关重要。"

#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid ""
"Consumers belong to a consumer group, identified with a name (`A` and `B` in the picture above).\n"
"A group contains one or more consumers.\n"
"In general, when you scale up your application, it creates a consumer joining the same group."
msgstr "消费者属于一个消费者群组，群组以名称标识（上图中的 `A` 和 `B` ）。一个组包含一个或多个消费者。一般来说，当你扩展应用程序时，它会创建一个消费者加入同一个组。"

#. type: Plain text
#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid "image:/assets/images/posts/kafka-commit-strategies/consumer-groups.png[]"
msgstr "image:/assets/images/posts/kafka-commit-strategies/consumer-groups.png[alt=\"consumer groups\"]"

#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid ""
"Each consumer group receives each record from a topic once.\n"
"To achieve this, it assigns each consumer from a group to a set of partitions.\n"
"For example, in the above picture, the consumer from the application A1 receives the records from the partitions 0 and 1.\n"
"A2 receives the records from the partition 2.\n"
"App B is the only consumer from its consumer group.\n"
"So, it gets the records from all three partitions.\n"
"Consequently (ignore rebalance or other subtilities for now), each record from a topic is only received once per consumer group, by a specific consumer from that group."
msgstr "每个消费者组只接收一次来自主题的每条记录。为此，它将一个用户组的每个用户分配到一组分区。例如，在上图中，应用程序 A1 的消费者接收来自分区 0 和 1 的记录，A2 接收来自分区 2 的记录。应用程序 B 是其消费者组中唯一的消费者。因此，它从所有三个分区获取记录。因此（暂不考虑再平衡或其他子功能），每个消费者组中的特定消费者只能接收一次来自主题的记录。"

#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid ""
"To orchestrate each consumer group's progress, each consumer periodically informs the broker of its current position - the last processed offset.\n"
"It commits the offset, indicating that all the previous records from that partition have been processed.\n"
"So, if a consumer stops and comes back later, it restarts from the last committed position (if assigned to that partition again).\n"
"Note that this behavior is configurable."
msgstr "为了协调每个消费者组的进度，每个消费者都会定期向代理通报其当前位置--最后处理的偏移量。它提交偏移量，表明该分区之前的所有记录都已处理完毕。因此，如果消费者停止了，后来又回来了，它就会从上次提交的位置重新开始（如果再次分配给该分区的话）。请注意，这种行为是可配置的。"

#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid ""
"What's important to notice is the periodic aspect of the commit.\n"
"Offset commit is expensive, and to enhance performance, we should not commit the offset after each processed record.\n"
"In this regard, Kafka behaves differently from traditional messaging solutions, such as JMS, which acknowledges each message individually.\n"
"Another important characteristic is the positional aspect of the commit.\n"
"You commit the position indicating that all the records located before that position are processed.\n"
"But is it really the case?"
msgstr "值得注意的是周期性提交。偏移量提交的成本很高，为了提高性能，我们不应该在每次处理完记录后都提交偏移量。在这方面，Kafka 的行为与传统的消息传递解决方案（如单独确认每条消息的 JMS）不同。另一个重要特性是提交的位置性。提交位置表明位于该位置之前的所有记录都已处理完毕。但事实真的如此吗？"

#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid "The Kafka default behavior"
msgstr "Kafka 默认行为"

#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid ""
"The Apache Kafka consumer uses an auto-commit approach by default.\n"
"Applications using such a consumer are structured around a polling loop:"
msgstr "Apache Kafka 消费者默认使用自动提交方法。使用这种消费者的应用程序是围绕轮询循环结构的："

#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid ""
"Such a program polls a batch of records, processes them, and then polls the next set.\n"
"While calling the `poll` method, the consumer periodically commits the last offset of the previous batches transparently."
msgstr "这样的程序会轮询一批记录，处理这些记录，然后轮询下一组记录。在调用 `poll` 方法时，消费者会定期透明地提交前一批记录的最后一个偏移量。"

#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid ""
"Quite nice, right?\n"
"If the application fails to process a message, it throws an exception, which either interrupts the while loop or is handled gracefully (within the `processRetrievedRecords` method).\n"
"In the first case, it means that it won't commit anymore (as it happens in the `poll` method, not called anymore).\n"
"If the application restarts, it resumes from the last committed offset (or apply the `auto.offset.reset` strategy, defaulting to `latest`, if there are no offsets for this group yet).\n"
"It may re-process a set of messages (it's the application's responsibility to handle duplicates), but at least nothing is lost."
msgstr "很不错吧？如果应用程序处理消息失败，就会抛出异常，要么中断 while 循环，要么进行优雅处理（在 `processRetrievedRecords` 方法中）。在第一种情况下，这意味着它不会再提交（就像在 `poll` 方法中发生的那样，不会再被调用）。如果应用程序重新启动，则会从上次提交的偏移量开始恢复（或应用 `auto.offset.reset` 策略，如果该组还没有偏移量，则默认为 `latest` ）。它可能会重新处理一组信息（处理重复信息是应用程序的责任），但至少不会丢失任何信息。"

#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid ""
"So, is there anything wrong with this?\n"
"Looks wonderful... until you add a pinch of asynchrony."
msgstr "那么，这有什么问题吗？看起来很好......直到你加上一撮异步。"

#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid "What if the message's processing is asynchronous"
msgstr "如果信息的处理是异步的怎么办？"

#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid ""
"If the message processing is asynchronous (offloaded to another thread, use non-blocking I/O...), failures may not interrupt the while loop from above.\n"
"Failure happens asynchronously, outside the polling thread.\n"
"If the `poll` method gets called again despite a failed processing, and _auto-commit_ is still enabled, we may commit offsets while something wrong happened.\n"
"If some processing of previously retrieved records is not completed yet, while this auto commit happens, it may consider the record as processed correctly, but the outcome is unknown at that point."
msgstr "如果消息处理是异步的（卸载到另一个线程，使用非阻塞 I/O......），故障可能不会中断上面的 while 循环。故障是在轮询线程之外异步发生的。如果在处理失败的情况下再次调用 `poll` 方法，且 _自动_ 提交功能仍处于启用状态，我们可能会在发生错误时提交偏移量。如果自动提交发生时，先前检索记录的某些处理尚未完成，则可能会认为记录已正确处理，但此时结果尚不清楚。"

#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid ""
"So to handle these case, we can disable the auto-commit and switch to manual commit.\n"
"In this case, it's the application's responsibility to commit the offsets regularly.\n"
"So, the application needs to track the polled records, their processing, failures, and periodically commits the offsets.\n"
"It might not look too tricky, but actually, it can become quite challenging.\n"
"Again, in asynchronous scenarios, you may complete the processing of messages in various orders.\n"
"For example, if you call a remote service for each record, the responses may not come in the same orders as the records.\n"
"You need to track messages individually and only commit the offsets if all the previous messages are processed successfully.\n"
"Without this, you may commit offsets while there is processing from previous records still in progress or even failed processing."
msgstr "因此，在这种情况下，我们可以禁用自动提交，改用手动提交。在这种情况下，应用程序有责任定期提交偏移量。因此，应用程序需要跟踪轮询记录、其处理过程和失败情况，并定期提交偏移量。这看起来并不复杂，但实际上却很有挑战性。同样，在异步场景中，您可能以不同的顺序完成消息处理。例如，如果为每条记录调用远程服务，响应的顺序可能与记录的顺序不同。您需要单独跟踪报文，只有在成功处理了前面所有报文后才提交偏移量。否则，您可能会在前一条记录的处理仍在进行甚至处理失败的情况下提交偏移。"

#. type: Plain text
#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid "What can we do about this?"
msgstr "对此我们能做些什么呢？"

#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid "Kafka connector commit strategies"
msgstr "Kafka 连接器提交策略"

#. type: Plain text
#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid "When using Reactive Messaging and the Kafka connector, you entered an asynchronous world."
msgstr "当使用Reactive Messaging和Kafka连接器时，你进入了一个异步的世界。"

#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid ""
"Message processing may not happen synchronously and sequentially.\n"
"When a Reactive Messaging `Message` processing completes, it acknowledges the message.\n"
"In the case of processing failures, it sends a negative acknowledgment.\n"
"The Kafka connector receives these acknowledgments and can decide what needs to be done, basically: to commit or not to commit."
msgstr "消息处理可能不是同步和按顺序进行的。当 Reactive Messaging `Message` 处理完成时，它会确认消息。在处理失败的情况下，它会发送否定的确认。Kafka 连接器收到这些确认后，可以决定需要做什么，基本上就是：提交或不提交。"

#. type: Plain text
#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid "You can choose among three strategies:"
msgstr "你可以在三种策略中选择。"

#. type: Plain text
#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid "throttled (default starting Quarkus 1.10)"
msgstr "节流（默认从Quarkus 1.10开始）。"

#. type: Plain text
#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid "latest (default before Quarkus 1.10)"
msgstr "最新的（Quarkus 1.10之前默认的）。"

#. type: Plain text
#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid "ignore (default if `enabled.auto.commit=true` is set)"
msgstr "忽略（如果设置了 `enabled.auto.commit=true` ，则默认为忽略）。"

#. type: Plain text
#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid "This is configured using the `commit-strategy` attribute:"
msgstr "这是用 `commit-strategy` 属性配置的。"

#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid "The throttled strategy"
msgstr "节流战略"

#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid ""
"The throttled strategy can be seen as an asynchronous variant of the default \"auto-commit\" behavior described above.\n"
"When enabled, the connector tracks each received message and monitors their acknowledgment.\n"
"When the connector finds out that all messages before a position are processed successfully, it commits that position.\n"
"This commit happens periodically to avoid committing too often."
msgstr "节流策略可视为上述默认 \"自动提交 \"行为的异步变体。启用后，连接器会跟踪收到的每条信息，并监控它们的确认情况。当连接器发现某个位置前的所有消息都已成功处理时，它就会提交该位置。这种提交会定期进行，以避免提交过于频繁。"

#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid ""
"This strategy provides very good throughput and can handle asynchronous processing.\n"
"To enable this strategy configures the channel with:"
msgstr "该策略可提供非常好的吞吐量，并能处理异步处理。要启用此策略，请使用以下命令配置通道："

#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid ""
"There is one detail to mention.\n"
"If an old message is neither acked nor nacked, the strategy cannot commit the position anymore.\n"
"It will enqueue messages forever, waiting for that missing ack to happen.\n"
"It can lead to out of memory, as the connector would never be able to commit a position and to clear the queue.\n"
"Fortunately, the strategy detects this situation and reports a failure to the connector, marking the application unhealthy.\n"
"The `throttled.unprocessed-record-max-age.ms` attribute configures the deadline for each message to be acked or nacked before being considered as a poison pill (Default is 1 minute)."
msgstr "有一个细节需要提及。如果一条旧信息既没有被接受，也没有被记录，那么策略就不能再提交头寸。它将永远地排队等待丢失的回执。这会导致内存不足，因为连接器将永远无法提交头寸和清除队列。幸运的是，策略会检测到这种情况，并向连接器报告失败，同时标记应用程序不健康。 `throttled.unprocessed-record-max-age.ms` 属性配置了每条信息在被视为毒丸之前被ack 或 nack 的截止时间（默认为 1 分钟）。"

#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid "The Ignore strategy"
msgstr "忽略策略"

#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid ""
"The connector uses this strategy by default if you explicitly enabled Kafka's auto-commit (with the `enable.auto.commit` attribute set to `true`).\n"
"In this case, the connector ignores acknowledgment and won't commit the offsets.\n"
"The Kafka consumer commits the offset periodically when polling batches, as described above.\n"
"This strategy works well if the message processing is synchronous and failures handled gracefully."
msgstr "如果您显式启用了 Kafka 的自动提交（ `enable.auto.commit` 属性设置为 `true` ），连接器默认会使用这种策略。在这种情况下，连接器会忽略确认，不会提交偏移量。如上所述，Kafka 消费者会在轮询批次时定期提交偏移量。如果消息处理是同步的，并且能优雅地处理故障，那么这种策略就能很好地发挥作用。"

#. type: Plain text
#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid "You can enable this strategy by configured enabled-auto-commit to true:"
msgstr "你可以通过将enabled-auto-commit配置为true来启用这个策略。"

#. type: Plain text
#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid "Be aware that starting Quarkus 1.9, auto commit is disabled by default. So you need to explicitly enable it."
msgstr "请注意，从Quarkus 1.9开始，自动提交默认是禁用的。所以你需要明确地启用它。"

#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid ""
"If you don't enable auto-commit, using this strategy is still possible but will never commit the offsets.\n"
"In other words, you would restart from the oldest stored records every time.\n"
"While there are use cases for this, double-check that's what you want. In this case, enable this strategy with:"
msgstr "如果不启用自动提交功能，使用该策略仍然可行，但永远不会提交偏移量。换句话说，每次都要从存储的最旧记录重新开始。虽然有这样的用例，但请仔细确认这是否是你想要的。在这种情况下，请使用以下命令启用该策略"

#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid "The latest strategy"
msgstr "最新战略"

#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid ""
"This strategy commits the offset every time a message is acknowledged.\n"
"This strategy tends to commit often, and so decrease the throughput.\n"
"However, it also reduces the risk of duplicates if the messages are processed synchronously."
msgstr "这种策略会在每次确认报文时提交偏移量。这种策略往往会频繁提交，从而降低吞吐量。不过，如果报文是同步处理的，它也能降低重复报文的风险。"

#. type: Plain text
#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid "Enable this strategy with:"
msgstr "用以下方法启用这一战略："

#: _posts/2020-11-03-kafka-commit-strategies.adoc
msgid "Conclusion"
msgstr "解决方案"

#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid ""
"In general, use the `throttled` strategy.\n"
"It provides high-throughput and handles the asynchronous use cases.\n"
"This strategy is becoming the default strategy in Quarkus 1.10.\n"
"You can also switch to the `ignore` strategy if the Kafka auto-commit is acceptable for you, or if you want to skip offset commit altogether."
msgstr "一般来说，使用 `throttled` 策略。它能提供高吞吐量并处理异步用例。在 Quarkus 1.10 中，该策略已成为默认策略。如果你可以接受 Kafka 自动提交，或者想完全跳过偏移提交，也可以切换到 `ignore` 策略。"

#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid ""
"That concludes this blog post.\n"
"The next one will discuss how to receive and produce Cloud Events using the Kafka connector."
msgstr "本篇博文到此结束。下一篇博文将讨论如何使用 Kafka 连接器接收和生成云事件。"
