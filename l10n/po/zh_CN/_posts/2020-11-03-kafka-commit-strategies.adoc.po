# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy, no-wrap
msgid "Kafka - When to commit?"
msgstr "Kafka - 何时提交？"

#. type: YAML Front Matter: synopsis
#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy, no-wrap
msgid "Offset commiting strategies in the Kafka connector"
msgstr "Kafka连接器中的偏移提交策略"

#: _posts/2020-11-03-kafka-commit-strategies.adoc
msgid ""
"In a https://quarkus.io/blog/kafka-failure-strategy/[previous blog post], we have looked at failure strategies provided by the Reactive Messaging Kafka connector.\n"
"But, imagine it's our lucky day, and for once it worked.\n"
"We should inform Kafka that the processing succeeded.\n"
"In Kafka terminology, we call this: _offset commit_.\n"
"This post covers the different strategies to commit offsets with the Reactive Messaging Kafka connector."
msgstr ""

#: _posts/2020-11-03-kafka-commit-strategies.adoc
msgid "Kafka Consumer Group and Offsets"
msgstr ""

#: _posts/2020-11-03-kafka-commit-strategies.adoc
msgid ""
"Kafka organizes records (_i.e._ messages) around _topics_.\n"
"Each topic has a name, and applications send records to topics and poll records from topics.\n"
"So far, nothing out of the ordinary."
msgstr ""

#: _posts/2020-11-03-kafka-commit-strategies.adoc
msgid ""
"Topics are divided into partitions.\n"
"Each partition is an ordered, immutable sequence of records.\n"
"Sending a message to a topic appends it to the selected partition.\n"
"Each message from a partition gets a sequential id number called _offset_.\n"
"It uniquely identifies each message within the partition.\n"
"So, with Kafka, you can identify an individual record using a `<topic, partition, offset>` tuple."
msgstr ""

#. type: Plain text
#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid "image:/assets/images/posts/kafka-commit-strategies/topics-partitions.png[]"
msgstr "image:/assets/images/posts/kafka-commit-strategies/topics-partitions.png[alt=\"topics partitions\"]"

#: _posts/2020-11-03-kafka-commit-strategies.adoc
msgid ""
"When an application consumes messages from Kafka, it uses a Kafka consumer.\n"
"With this consumer, it polls batches of messages from a specific topic, for example, `movies` or `actors`.\n"
"Retrieved messages belong to partitions assigned to this consumer.\n"
"And that aspect is essential."
msgstr ""

#: _posts/2020-11-03-kafka-commit-strategies.adoc
msgid ""
"Consumers belong to a consumer group, identified with a name (`A` and `B` in the picture above).\n"
"A group contains one or more consumers.\n"
"In general, when you scale up your application, it creates a consumer joining the same group."
msgstr ""

#. type: Plain text
#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid "image:/assets/images/posts/kafka-commit-strategies/consumer-groups.png[]"
msgstr "image:/assets/images/posts/kafka-commit-strategies/consumer-groups.png[alt=\"consumer groups\"]"

#: _posts/2020-11-03-kafka-commit-strategies.adoc
msgid ""
"Each consumer group receives each record from a topic once.\n"
"To achieve this, it assigns each consumer from a group to a set of partitions.\n"
"For example, in the above picture, the consumer from the application A1 receives the records from the partitions 0 and 1.\n"
"A2 receives the records from the partition 2.\n"
"App B is the only consumer from its consumer group.\n"
"So, it gets the records from all three partitions.\n"
"Consequently (ignore rebalance or other subtilities for now), each record from a topic is only received once per consumer group, by a specific consumer from that group."
msgstr ""

#: _posts/2020-11-03-kafka-commit-strategies.adoc
msgid ""
"To orchestrate each consumer group's progress, each consumer periodically informs the broker of its current position - the last processed offset.\n"
"It commits the offset, indicating that all the previous records from that partition have been processed.\n"
"So, if a consumer stops and comes back later, it restarts from the last committed position (if assigned to that partition again).\n"
"Note that this behavior is configurable."
msgstr ""

#: _posts/2020-11-03-kafka-commit-strategies.adoc
msgid ""
"What's important to notice is the periodic aspect of the commit.\n"
"Offset commit is expensive, and to enhance performance, we should not commit the offset after each processed record.\n"
"In this regard, Kafka behaves differently from traditional messaging solutions, such as JMS, which acknowledges each message individually.\n"
"Another important characteristic is the positional aspect of the commit.\n"
"You commit the position indicating that all the records located before that position are processed.\n"
"But is it really the case?"
msgstr ""

#: _posts/2020-11-03-kafka-commit-strategies.adoc
msgid "The Kafka default behavior"
msgstr ""

#: _posts/2020-11-03-kafka-commit-strategies.adoc
msgid ""
"The Apache Kafka consumer uses an auto-commit approach by default.\n"
"Applications using such a consumer are structured around a polling loop:"
msgstr ""

#: _posts/2020-11-03-kafka-commit-strategies.adoc
msgid ""
"Such a program polls a batch of records, processes them, and then polls the next set.\n"
"While calling the `poll` method, the consumer periodically commits the last offset of the previous batches transparently."
msgstr ""

#: _posts/2020-11-03-kafka-commit-strategies.adoc
msgid ""
"Quite nice, right?\n"
"If the application fails to process a message, it throws an exception, which either interrupts the while loop or is handled gracefully (within the `processRetrievedRecords` method).\n"
"In the first case, it means that it won't commit anymore (as it happens in the `poll` method, not called anymore).\n"
"If the application restarts, it resumes from the last committed offset (or apply the `auto.offset.reset` strategy, defaulting to `latest`, if there are no offsets for this group yet).\n"
"It may re-process a set of messages (it's the application's responsibility to handle duplicates), but at least nothing is lost."
msgstr ""

#: _posts/2020-11-03-kafka-commit-strategies.adoc
msgid ""
"So, is there anything wrong with this?\n"
"Looks wonderful... until you add a pinch of asynchrony."
msgstr ""

#: _posts/2020-11-03-kafka-commit-strategies.adoc
msgid "What if the message's processing is asynchronous"
msgstr ""

#: _posts/2020-11-03-kafka-commit-strategies.adoc
msgid ""
"If the message processing is asynchronous (offloaded to another thread, use non-blocking I/O...), failures may not interrupt the while loop from above.\n"
"Failure happens asynchronously, outside the polling thread.\n"
"If the `poll` method gets called again despite a failed processing, and _auto-commit_ is still enabled, we may commit offsets while something wrong happened.\n"
"If some processing of previously retrieved records is not completed yet, while this auto commit happens, it may consider the record as processed correctly, but the outcome is unknown at that point."
msgstr ""

#: _posts/2020-11-03-kafka-commit-strategies.adoc
msgid ""
"So to handle these case, we can disable the auto-commit and switch to manual commit.\n"
"In this case, it's the application's responsibility to commit the offsets regularly.\n"
"So, the application needs to track the polled records, their processing, failures, and periodically commits the offsets.\n"
"It might not look too tricky, but actually, it can become quite challenging.\n"
"Again, in asynchronous scenarios, you may complete the processing of messages in various orders.\n"
"For example, if you call a remote service for each record, the responses may not come in the same orders as the records.\n"
"You need to track messages individually and only commit the offsets if all the previous messages are processed successfully.\n"
"Without this, you may commit offsets while there is processing from previous records still in progress or even failed processing."
msgstr ""

#. type: Plain text
#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid "What can we do about this?"
msgstr "对此我们能做些什么呢？"

#: _posts/2020-11-03-kafka-commit-strategies.adoc
msgid "Kafka connector commit strategies"
msgstr ""

#. type: Plain text
#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid "When using Reactive Messaging and the Kafka connector, you entered an asynchronous world."
msgstr "当使用Reactive Messaging和Kafka连接器时，你进入了一个异步的世界。"

#: _posts/2020-11-03-kafka-commit-strategies.adoc
msgid ""
"Message processing may not happen synchronously and sequentially.\n"
"When a Reactive Messaging `Message` processing completes, it acknowledges the message.\n"
"In the case of processing failures, it sends a negative acknowledgment.\n"
"The Kafka connector receives these acknowledgments and can decide what needs to be done, basically: to commit or not to commit."
msgstr ""

#. type: Plain text
#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid "You can choose among three strategies:"
msgstr "你可以在三种策略中选择。"

#. type: Plain text
#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid "throttled (default starting Quarkus 1.10)"
msgstr "节流（默认从Quarkus 1.10开始）。"

#. type: Plain text
#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid "latest (default before Quarkus 1.10)"
msgstr "最新的（Quarkus 1.10之前默认的）。"

#. type: Plain text
#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid "ignore (default if `enabled.auto.commit=true` is set)"
msgstr "忽略（如果设置了 `enabled.auto.commit=true` ，则默认为忽略）。"

#. type: Plain text
#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid "This is configured using the `commit-strategy` attribute:"
msgstr "这是用 `commit-strategy` 属性配置的。"

#: _posts/2020-11-03-kafka-commit-strategies.adoc
msgid "The throttled strategy"
msgstr ""

#: _posts/2020-11-03-kafka-commit-strategies.adoc
msgid ""
"The throttled strategy can be seen as an asynchronous variant of the default \"auto-commit\" behavior described above.\n"
"When enabled, the connector tracks each received message and monitors their acknowledgment.\n"
"When the connector finds out that all messages before a position are processed successfully, it commits that position.\n"
"This commit happens periodically to avoid committing too often."
msgstr ""

#: _posts/2020-11-03-kafka-commit-strategies.adoc
msgid ""
"This strategy provides very good throughput and can handle asynchronous processing.\n"
"To enable this strategy configures the channel with:"
msgstr ""

#: _posts/2020-11-03-kafka-commit-strategies.adoc
msgid ""
"There is one detail to mention.\n"
"If an old message is neither acked nor nacked, the strategy cannot commit the position anymore.\n"
"It will enqueue messages forever, waiting for that missing ack to happen.\n"
"It can lead to out of memory, as the connector would never be able to commit a position and to clear the queue.\n"
"Fortunately, the strategy detects this situation and reports a failure to the connector, marking the application unhealthy.\n"
"The `throttled.unprocessed-record-max-age.ms` attribute configures the deadline for each message to be acked or nacked before being considered as a poison pill (Default is 1 minute)."
msgstr ""

#: _posts/2020-11-03-kafka-commit-strategies.adoc
msgid "The Ignore strategy"
msgstr ""

#: _posts/2020-11-03-kafka-commit-strategies.adoc
msgid ""
"The connector uses this strategy by default if you explicitly enabled Kafka's auto-commit (with the `enable.auto.commit` attribute set to `true`).\n"
"In this case, the connector ignores acknowledgment and won't commit the offsets.\n"
"The Kafka consumer commits the offset periodically when polling batches, as described above.\n"
"This strategy works well if the message processing is synchronous and failures handled gracefully."
msgstr ""

#. type: Plain text
#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid "You can enable this strategy by configured enabled-auto-commit to true:"
msgstr "你可以通过将enabled-auto-commit配置为true来启用这个策略。"

#. type: Plain text
#: _posts/2020-11-03-kafka-commit-strategies.adoc
#, fuzzy
msgid "Be aware that starting Quarkus 1.9, auto commit is disabled by default. So you need to explicitly enable it."
msgstr "请注意，从Quarkus 1.9开始，自动提交默认是禁用的。所以你需要明确地启用它。"

#: _posts/2020-11-03-kafka-commit-strategies.adoc
msgid ""
"If you don't enable auto-commit, using this strategy is still possible but will never commit the offsets.\n"
"In other words, you would restart from the oldest stored records every time.\n"
"While there are use cases for this, double-check that's what you want. In this case, enable this strategy with:"
msgstr ""

#: _posts/2020-11-03-kafka-commit-strategies.adoc
msgid "The latest strategy"
msgstr ""

#: _posts/2020-11-03-kafka-commit-strategies.adoc
msgid ""
"This strategy commits the offset every time a message is acknowledged.\n"
"This strategy tends to commit often, and so decrease the throughput.\n"
"However, it also reduces the risk of duplicates if the messages are processed synchronously."
msgstr ""

#. type: Plain text
#: _posts/2020-11-03-kafka-commit-strategies.adoc
msgid "Enable this strategy with:"
msgstr ""

#: _posts/2020-11-03-kafka-commit-strategies.adoc
msgid "Conclusion"
msgstr ""

#: _posts/2020-11-03-kafka-commit-strategies.adoc
msgid ""
"In general, use the `throttled` strategy.\n"
"It provides high-throughput and handles the asynchronous use cases.\n"
"This strategy is becoming the default strategy in Quarkus 1.10.\n"
"You can also switch to the `ignore` strategy if the Kafka auto-commit is acceptable for you, or if you want to skip offset commit altogether."
msgstr ""

#: _posts/2020-11-03-kafka-commit-strategies.adoc
msgid ""
"That concludes this blog post.\n"
"The next one will discuss how to receive and produce Cloud Events using the Kafka connector."
msgstr ""
