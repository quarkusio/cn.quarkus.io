# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy, no-wrap
msgid "Unused Beans and Why We Remove Them"
msgstr "未使用的豆子和我们为什么要移除它们"

#. type: YAML Front Matter: synopsis
#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy, no-wrap
msgid "Why does Quarkus detect and remove unused beans by default?"
msgstr "为什么Quarkus默认会检测并删除未使用的豆子？"

#: _posts/2021-09-23-unused-beans.adoc
msgid ""
"Quarkus is a build-time oriented stack, i.e. it tries to do as much as possible at build time to improve the startup time and memory usage of your application.\n"
"However, it's not always so easy and straightforward as many existing frameworks and libraries do not take this design choice into account.\n"
"And CDI is one of them."
msgstr ""

#. type: Title ==
#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy, no-wrap
msgid "Why Bother"
msgstr "何必纠结"

#: _posts/2021-09-23-unused-beans.adoc
msgid ""
"A traditional CDI container attempts to find all beans during the application bootstrap.\n"
"For each bean a metadata object is created and kept for the lifetime of the application.\n"
"This allows for certain degree of dynamicity at runtime but it's suboptimal when it comes to memory consumption and application startup time.\n"
"Quarkus, on the other hand, attempts to detect and remove all _unused_ beans, interceptors and decorators during build by default.\n"
"And the reason is simple.\n"
"This optimization helps to minimize the amount of generated classes and the number of metadata objects used at runtime, thus conserving memory."
msgstr ""

#: _posts/2021-09-23-unused-beans.adoc
msgid ""
"Speaking of generated classes.\n"
"The bean discovery, validation and wiring all components together - all this is perfomed at build time.\n"
"Quarkus then stores the collected metadata in the bytecode, i.e. for each bean one or more classes are generated.\n"
"In order to fullfill some basic CDI API requirements, a bean has at least a corresponding `javax.enterprise.inject.spi.Bean` implementation.\n"
"If it's a normal scoped bean then a client proxy class must be also generated.\n"
"Finally, intercepted and decorated beans require some more internal constructs."
msgstr ""

#: _posts/2021-09-23-unused-beans.adoc
msgid ""
"Imagine that your application contains 50 beans that are actually not used anywhere.\n"
"If they have a normal scope (e.g. `@ApplicationScoped`) and are intercepted (e.g. declare a method annotated with `@Transactional`) you can expect more than 150 generated classes.\n"
"And these classes are completely useless.\n"
"Still, the container would have to instantiate and hold a reference on those 50+ bean metadata classes.\n"
"Needless to say, that the bean classes and any referenced classes cannot be a subject to dead code elimination when a native image is generated.\n"
"Therefore, Quarkus implements an algorithm to get rid of all these classes."
msgstr ""

#. type: Title ==
#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy, no-wrap
msgid "What’s Actually Removed?"
msgstr "实际上被移除的是什么？"

#: _posts/2021-09-23-unused-beans.adoc
msgid ""
"Quarkus first identifies so-called _unremovable_ beans that form the roots in the dependency tree.\n"
"Unremovable beans:"
msgstr ""

#. type: Plain text
#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy
msgid "declare an observer method, or"
msgstr "声明一个观察者方法，或"

#. type: Plain text
#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy
msgid "have a name designated via `@Named`, or"
msgstr "有一个通过 `@Named` 指定的名称，或"

#. type: Plain text
#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy
msgid "are annotated with `@io.quarkus.arc.Unremovable`, or"
msgstr "被注释为 `@io.quarkus.arc.Unremovable` ，或"

#. type: Plain text
#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy
msgid "are excluded via the `quarkus.arc.unremovable-types` config property, or"
msgstr "通过 `quarkus.arc.unremovable-types` 配置属性排除，或"

#. type: Plain text
#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy
msgid "are otherwise identified by Quarkus extensions."
msgstr "是由Quarkus扩展的其他标识。"

#: _posts/2021-09-23-unused-beans.adoc
msgid ""
"The last point is probably most important, because this is how application entry points are made unremovable.\n"
"A good example is a JAX-RS resource class, identified by the RESTEasy extension.\n"
"Another example is a bean which declares a `@Scheduled` method, identified by the Scheduler extension."
msgstr ""

#. type: Plain text
#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy
msgid "An _unused_ bean:"
msgstr "一个 _未使用的_ 豆子。"

#. type: Plain text
#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy
msgid "is not unremovable, and"
msgstr "并非不可移除，而且"

#. type: Plain text
#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy
msgid "is not eligible for injection to any injection point in the dependency tree, and"
msgstr "没有资格被注入到依赖树中的任何注入点，并且"

#. type: Plain text
#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy
msgid "does not declare any producer which is eligible for injection to any injection point in the dependency tree, and"
msgstr "没有声明任何有资格被注入到依赖树中任何注入点的生产者，并且"

#. type: Plain text
#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy
msgid "is not eligible for injection into any `javax.enterprise.inject.Instance` or `javax.inject.Provider` injection point."
msgstr "没有资格注射到任何 `javax.enterprise.inject.Instance` 或 `javax.inject.Provider` 注射点。"

#. type: Plain text
#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy
msgid "Finally, unused interceptors and decorators are not associated with any bean."
msgstr "最后，未使用的拦截器和装饰器不与任何Bean关联。"

#. type: Plain text
#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy
msgid "When using the dev mode (e.g. running `./mvnw quarkus:dev`), you can see more information about which beans are being removed in the Dev UI."
msgstr "当使用开发模式时（例如运行 `./mvnw quarkus:dev` ），你可以在开发界面看到更多关于哪些Bean被移除的信息。"

#. type: Title ==
#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy, no-wrap
msgid "Main Drawback"
msgstr "主要缺点"

#: _posts/2021-09-23-unused-beans.adoc
msgid ""
"But there's one problem.\n"
"Quarkus can't detect the programmatic lookup performed via the `CDI.current()` static method.\n"
"Therefore, it is possible that a certain bean removal results in a false positive error, i.e. a bean is removed although it's actually used.\n"
"In such cases, you'll notice a big warning in the log.\n"
"Of course, users and extension authors have several options how to eliminate these errors.\n"
"For users, the easiest way is to add a special annotation: `@io.quarkus.arc.Unremovable` or use the `quarkus.arc.unremovable-types` config property.\n"
"Finally, it's also possible to disable this optimization via the `quarkus.arc.remove-unused-beans=false` config property."
msgstr ""

#. type: Title ==
#: _posts/2021-09-23-unused-beans.adoc
#, no-wrap
msgid "Conclusion"
msgstr "解决方案"

#: _posts/2021-09-23-unused-beans.adoc
msgid ""
"Quarkus detects and removes unused beans to help you on your way to a subatomic application.\n"
"And if something goes wrong, there are options that make it possible to configure the behavior of this optimization."
msgstr ""
