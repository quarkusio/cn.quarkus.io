# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy, no-wrap
msgid "Unused Beans and Why We Remove Them"
msgstr "未使用的豆子和我们为什么要移除它们"

#. type: YAML Front Matter: synopsis
#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy, no-wrap
msgid "Why does Quarkus detect and remove unused beans by default?"
msgstr "为什么Quarkus默认会检测并删除未使用的豆子？"

#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy
msgid ""
"Quarkus is a build-time oriented stack, i.e. it tries to do as much as possible at build time to improve the startup time and memory usage of your application.\n"
"However, it's not always so easy and straightforward as many existing frameworks and libraries do not take this design choice into account.\n"
"And CDI is one of them."
msgstr "Quarkus 是一个面向构建时间的堆栈，也就是说，它试图在构建时尽可能地改善应用程序的启动时间和内存使用情况。然而，这并不总是那么简单明了，因为许多现有的框架和库并没有考虑到这一设计选择。CDI 就是其中之一。"

#. type: Title ==
#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy, no-wrap
msgid "Why Bother"
msgstr "何必纠结"

#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy
msgid ""
"A traditional CDI container attempts to find all beans during the application bootstrap.\n"
"For each bean a metadata object is created and kept for the lifetime of the application.\n"
"This allows for certain degree of dynamicity at runtime but it's suboptimal when it comes to memory consumption and application startup time.\n"
"Quarkus, on the other hand, attempts to detect and remove all _unused_ beans, interceptors and decorators during build by default.\n"
"And the reason is simple.\n"
"This optimization helps to minimize the amount of generated classes and the number of metadata objects used at runtime, thus conserving memory."
msgstr "传统的 CDI 容器会尝试在应用程序启动过程中找到所有 Bean。为每个 Bean 创建一个元数据对象，并在应用程序的整个生命周期内保存。这样做可以在运行时实现一定程度的动态性，但在内存消耗和应用程序启动时间方面并不理想。另一方面，Quarkus 默认会在构建过程中检测并移除所有 _未使用的_ Bean、拦截器和装饰器。原因很简单。这种优化有助于最大限度地减少生成类的数量和运行时使用的元数据对象的数量，从而节省内存。"

#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy
msgid ""
"Speaking of generated classes.\n"
"The bean discovery, validation and wiring all components together - all this is perfomed at build time.\n"
"Quarkus then stores the collected metadata in the bytecode, i.e. for each bean one or more classes are generated.\n"
"In order to fullfill some basic CDI API requirements, a bean has at least a corresponding `javax.enterprise.inject.spi.Bean` implementation.\n"
"If it's a normal scoped bean then a client proxy class must be also generated.\n"
"Finally, intercepted and decorated beans require some more internal constructs."
msgstr "说到生成的类。Bean的发现、验证以及将所有组件连接在一起--所有这些都是在构建时完成的。然后，Quarkus 将收集到的元数据存储在字节码中，即为每个 Bean 生成一个或多个类。为了满足一些基本的 CDI API 要求，Bean 至少有一个相应的 `javax.enterprise.inject.spi.Bean` 实现。如果是普通作用域 Bean，还必须生成客户端代理类。最后，拦截豆和装饰豆还需要一些内部构造。"

#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy
msgid ""
"Imagine that your application contains 50 beans that are actually not used anywhere.\n"
"If they have a normal scope (e.g. `@ApplicationScoped`) and are intercepted (e.g. declare a method annotated with `@Transactional`) you can expect more than 150 generated classes.\n"
"And these classes are completely useless.\n"
"Still, the container would have to instantiate and hold a reference on those 50+ bean metadata classes.\n"
"Needless to say, that the bean classes and any referenced classes cannot be a subject to dead code elimination when a native image is generated.\n"
"Therefore, Quarkus implements an algorithm to get rid of all these classes."
msgstr "想象一下，您的应用程序包含 50 个实际上没有在任何地方使用的 Bean。如果它们有一个正常的作用域（如 `@ApplicationScoped` ）并被拦截（如声明一个注释为 `@Transactional` 的方法），那么生成的类将超过 150 个。而这些类是完全无用的。而且，容器还必须实例化这 50 多个 Bean 元数据类并保持引用。毋庸置疑，在生成本地映像时，Bean 类和任何引用的类都不可能成为消除死代码的对象。因此，Quarkus 采用了一种算法来消除所有这些类。"

#. type: Title ==
#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy, no-wrap
msgid "What’s Actually Removed?"
msgstr "实际上被移除的是什么？"

#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy
msgid ""
"Quarkus first identifies so-called _unremovable_ beans that form the roots in the dependency tree.\n"
"Unremovable beans:"
msgstr "Quarkus 首先会识别所谓的 _不可移除_ 豆，这些豆构成了依赖关系树的根。不可移除的豆："

#. type: Plain text
#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy
msgid "declare an observer method, or"
msgstr "声明一个观察者方法，或"

#. type: Plain text
#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy
msgid "have a name designated via `@Named`, or"
msgstr "有一个通过 `@Named` 指定的名称，或"

#. type: Plain text
#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy
msgid "are annotated with `@io.quarkus.arc.Unremovable`, or"
msgstr "被注释为 `@io.quarkus.arc.Unremovable` ，或"

#. type: Plain text
#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy
msgid "are excluded via the `quarkus.arc.unremovable-types` config property, or"
msgstr "通过 `quarkus.arc.unremovable-types` 配置属性排除，或"

#. type: Plain text
#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy
msgid "are otherwise identified by Quarkus extensions."
msgstr "是由Quarkus扩展的其他标识。"

#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy
msgid ""
"The last point is probably most important, because this is how application entry points are made unremovable.\n"
"A good example is a JAX-RS resource class, identified by the RESTEasy extension.\n"
"Another example is a bean which declares a `@Scheduled` method, identified by the Scheduler extension."
msgstr "最后一点可能是最重要的，因为这就是应用程序入口点的不可移除性。JAX-RS 资源类就是一个很好的例子，它由 RESTEasy 扩展标识。另一个例子是声明了 `@Scheduled` 方法的 bean，它由 Scheduler 扩展标识。"

#. type: Plain text
#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy
msgid "An _unused_ bean:"
msgstr "一个 _未使用的_ 豆子。"

#. type: Plain text
#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy
msgid "is not unremovable, and"
msgstr "并非不可移除，而且"

#. type: Plain text
#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy
msgid "is not eligible for injection to any injection point in the dependency tree, and"
msgstr "没有资格被注入到依赖树中的任何注入点，并且"

#. type: Plain text
#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy
msgid "does not declare any producer which is eligible for injection to any injection point in the dependency tree, and"
msgstr "没有声明任何有资格被注入到依赖树中任何注入点的生产者，并且"

#. type: Plain text
#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy
msgid "is not eligible for injection into any `javax.enterprise.inject.Instance` or `javax.inject.Provider` injection point."
msgstr "没有资格注射到任何 `javax.enterprise.inject.Instance` 或 `javax.inject.Provider` 注射点。"

#. type: Plain text
#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy
msgid "Finally, unused interceptors and decorators are not associated with any bean."
msgstr "最后，未使用的拦截器和装饰器不与任何Bean关联。"

#. type: Plain text
#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy
msgid "When using the dev mode (e.g. running `./mvnw quarkus:dev`), you can see more information about which beans are being removed in the Dev UI."
msgstr "当使用开发模式时（例如运行 `./mvnw quarkus:dev` ），你可以在开发界面看到更多关于哪些Bean被移除的信息。"

#. type: Title ==
#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy, no-wrap
msgid "Main Drawback"
msgstr "主要缺点"

#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy
msgid ""
"But there's one problem.\n"
"Quarkus can't detect the programmatic lookup performed via the `CDI.current()` static method.\n"
"Therefore, it is possible that a certain bean removal results in a false positive error, i.e. a bean is removed although it's actually used.\n"
"In such cases, you'll notice a big warning in the log.\n"
"Of course, users and extension authors have several options how to eliminate these errors.\n"
"For users, the easiest way is to add a special annotation: `@io.quarkus.arc.Unremovable` or use the `quarkus.arc.unremovable-types` config property.\n"
"Finally, it's also possible to disable this optimization via the `quarkus.arc.remove-unused-beans=false` config property."
msgstr "但有一个问题。Quarkus 无法检测通过 `CDI.current()` 静态方法执行的编程查找。因此，在删除某个 Bean 时，有可能会出现假阳性错误，也就是说，虽然实际使用了某个 Bean，但它还是被删除了。在这种情况下，您会在日志中注意到一个很大的警告。当然，用户和扩展作者有几种消除这些错误的方法。对于用户来说，最简单的方法是添加特殊注释： `@io.quarkus.arc.Unremovable` 或使用 `quarkus.arc.unremovable-types` 配置属性。最后，还可以通过 `quarkus.arc.remove-unused-beans=false` 配置属性禁用此优化。"

#. type: Title ==
#: _posts/2021-09-23-unused-beans.adoc
#, no-wrap
msgid "Conclusion"
msgstr "解决方案"

#: _posts/2021-09-23-unused-beans.adoc
#, fuzzy
msgid ""
"Quarkus detects and removes unused beans to help you on your way to a subatomic application.\n"
"And if something goes wrong, there are options that make it possible to configure the behavior of this optimization."
msgstr "Quarkus 可以检测并移除未使用的 Bean，帮助你实现亚原子应用程序。如果出现问题，还可以通过选项来配置优化行为。"
