# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy, no-wrap
msgid "Handling paginated APIs with Mutiny"
msgstr "用Mutiny处理分页的API"

#. type: YAML Front Matter: synopsis
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy, no-wrap
msgid "How to use API using pagination with Mutiny"
msgstr "如何利用Mutiny的分页功能来使用API"

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid ""
"At the beginning of the Mutiny adventure, my friend Alex came to me with an interesting problem.\n"
"Alex wanted to retrieve data from a REST service in a reactive manner.\n"
"So far, no problem, we have everything for this in our toolbox.\n"
"But, this service, as many services, is using pagination.\n"
"Ah! That makes things a bit more spicy.\n"
"Alex wanted to retrieve all the items and consume them as a stream, but you can't retrieve the items in one batch.\n"
"You need to invoke the service for every page, extract the items and feed the stream."
msgstr "在 Mutiny 冒险之初，我的朋友亚历克斯（Alex）向我提出了一个有趣的问题。亚历克斯想以反应方式从 REST 服务中获取数据。到目前为止，没问题，我们的工具箱里有这方面的所有工具。但是，这个服务和许多服务一样，使用了分页。这让事情变得更加棘手。艾利克斯想检索所有项目并以流的形式使用它们，但你不能一次性检索所有项目。你需要调用每一页的服务，提取项目并将其输入流。"

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid ""
"So, how to achieve this in a reactive manner and build a proper stream of items without loosing your sanity?\n"
"Let's have a look!"
msgstr "那么，如何以被动的方式实现这一目标，并在不丧失理智的情况下建立适当的项目流呢？让我们一起来看看！"

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "The Punk API"
msgstr "朋克 API"

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid ""
"First, we need an API.\n"
"Alex introduced me to the https://punkapi.com/documentation/v2[Punk API], a REST API to retrieve beers.\n"
"That's fun, and even better, it uses pagination.\n"
"We got our API!"
msgstr "首先，我们需要一个应用程序接口。亚历克斯向我介绍了 link:https://punkapi.com/documentation/v2[朋克应用程序接口（Punk API] ），这是一个检索啤酒的 REST 应用程序接口。这很有趣，更棒的是，它使用了分页功能。我们有了应用程序接口！"

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "If you call `https://api.punkapi.com/v2/beers?page=1`, you get a JSON array like:"
msgstr "如果你调用 `<a href=\"https://api.punkapi.com/v2/beers?page=1\" class=\"bare\">https://api.punkapi.com/v2/beers?page=1</a>` ，你会得到一个JSON数组，比如。"

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid ""
"I won't show discuss the content of each object, the documentation page does a great job about that.\n"
"Let's focus on the pagination aspect.\n"
"First, we passed the `page` query parameter, indicating which page we want.\n"
"Generally, when you retrieve a page, the API provides a way to know if there is a next page (a special field in the JSON document, or HTTP header), but the Punk API does not provide any hint.\n"
"So, to retrieve all the beers, we need to invoke the service for page 1, 2, 3... until the returned JSON array is empty."
msgstr "我就不讨论每个对象的内容了，文档页面在这方面做得很好。让我们把注意力集中在分页方面。首先，我们传递 `page` 查询参数，说明我们想要哪个页面。一般情况下，当您检索一个页面时，API 会提供一种方法（JSON 文档中的一个特殊字段或 HTTP 头信息）让您知道是否还有下一页，但 Punk API 没有提供任何提示。因此，要检索所有啤酒，我们需要调用第 1 页、第 2 页、第 3 页......的服务，直到返回的 JSON 数组为空。"

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "In an imperative world, to retrieve all the beers, you would do something like this:"
msgstr "在一个命令式的世界里，为了检索所有的啤酒，你会做这样的事情。"

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "How can we achieve the same in a reactive manner and build a stream of beer?"
msgstr "我们如何以被动的方式实现同样的目标，并建立一个啤酒流？"

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "image:/assets/images/posts/mutiny-pagination/mutiny-pagination.png[]"
msgstr "image:/assets/images/posts/mutiny-pagination/mutiny-pagination.png[alt=\"mutiny pagination\"]"

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "Let's proceed step by step."
msgstr "让我们一步一步地进行。"

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "Retrieving a single page"
msgstr "检索单个页面"

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid ""
"First, we need to see how we can retrieve a single page.\n"
"I'm going to use the Vert.x Web Client, but you can use any reactive HTTP clients providing a Mutiny API."
msgstr "首先，我们需要了解如何检索单个页面。我将使用 Vert.x Web Client，但你也可以使用任何提供 Mutiny API 的反应式 HTTP 客户端。"

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid ""
"This snippet creates the web client.\n"
"Then, we use that client and retrieve the first page."
msgstr "该代码段创建了网络客户端。然后，我们使用该客户端检索第一个页面。"

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "When we receive the result (`onItem`), we transform the JSON array into a list of beers."
msgstr "当我们收到结果( `onItem` )时，我们将JSON数组转化为啤酒列表。"

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "Let's extract this code in a method and take the page number as parameter:"
msgstr "让我们在一个方法中提取这段代码，并把页码作为参数。"

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "So far, so good."
msgstr "到目前为止，一切都很好。"

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "Retrieving multiple page"
msgstr "检索多个页面"

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid ""
"So, now, we know how to retrieve a single page and extract the items from it.\n"
"We just need to repeat this operation for every page, and provide a stream."
msgstr "现在，我们知道如何检索单个页面并从中提取项目了。我们只需对每一页重复这一操作，并提供一个数据流。"

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid ""
"Mutiny provides a method to create a `Multi` by repeating multiple times a `Uni`.\n"
"Under the hood, it calls a method returning a `Uni` and subscribe on it.\n"
"But we need to make _progress_, and pass the current page.\n"
"Mutiny offers the possibility to store a state in order to let the method creating the `Uni` increments the page number:"
msgstr "Mutiny 提供了一种通过多次重复 `Uni` 来创建 `Multi` 的方法。在引擎盖下，它调用一个返回 `Uni` 的方法并对其进行订阅。但我们需要取得 _进展_ ，并传递当前页面。Mutiny 提供了存储状态的可能性，以便让创建 `Uni` 的方法增加页码："

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid ""
"This code above creates a stream with the item emitted by the `Unis` returned by the `getPage` method.\n"
"We increment the page number (stored in an `AtomicInteger`) every time.\n"
"So, it retrieves the page 1, 2, 3 ... and every time emits the received `List<Beer>` downstream."
msgstr "上面的代码创建了一个流，其中包含由 `getPage` 方法返回的 `Unis` 发送的项目。我们每次都会递增页码（存储在 `AtomicInteger` 中）。因此，它会检索第 1、2、3 页......，并每次向下游发送接收到的 `List<Beer>` 。"

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid ""
"However, at some point, we must stop.\n"
"As we said earlier, we can stop when the returned list is empty:"
msgstr "不过，到了某个时候，我们必须停止。如前所述，我们可以在返回的列表为空时停止："

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid ""
"The `until` clause indicates when the iteration must be stopped.\n"
"It receives the retrieved list (produced by `getPage`), and when this list is empty, stops the repetition.\n"
"If the list still contains beers, it retrieves the next page."
msgstr "`until` 子句表示何时必须停止迭代。它接收检索到的列表（由 `getPage` 生成），当该列表为空时，停止重复。如果列表中仍有啤酒，则检索下一页。"

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "Unpacking the beers"
msgstr "拆开啤酒包装"

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid ""
"We now have a stream of list, and each list contain a set of beers.\n"
"We are almost there, but Alex wants a stream of beer.\n"
"So we need to unpack the beers."
msgstr "我们现在有一个列表流，每个列表包含一组啤酒。我们就快成功了，但亚历克斯想要啤酒流。因此，我们需要解压缩啤酒。"

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "The first approach to achieve this uses `transformToMultiAndConcatenate`, i.e. for each list create a new `multi` with the contained beers and concatenate these `multis`:"
msgstr "实现这一目标的第一种方法是使用 `transformToMultiAndConcatenate` ，即为每个列表创建一个包含啤酒的新 `multi` ，并将这些 `multis` 。"

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "Wondering about `concatenate`? Check out this https://quarkus.io/blog/mutiny-redis/[other blog post]"
msgstr "想知道 `concatenate` ?请看 link:https://quarkus.io/blog/mutiny-redis/[另一篇博文]"

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "image:/assets/images/posts/mutiny-pagination/disjoint.png[]"
msgstr "image:/assets/images/posts/mutiny-pagination/disjoint.png[alt=\"disjoint\"]"

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "Because this is a common operation, Mutiny provides the `disjoint` method doing exactly the same:"
msgstr "因为这是一个常见的操作，Mutiny提供了 `disjoint` 方法，做得完全一样。"

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "And we are done!"
msgstr "我们已经完成了!"

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "The benefits of reactive"
msgstr "被动反应的好处"

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid ""
"We have our stream, it's time to use it!\n"
"Let's, for example, retrieve the first 10 beers with \"IPA\" (let's be trendy) in their description:"
msgstr "我们有了数据流，是时候使用它了！举例来说，让我们检索前 10 种在描述中带有 \"IPA\"（时髦点）的啤酒："

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid ""
"The advantage of our stream is that we won't retrieve every page.\n"
"As soon as we have enough beers, we stop the repetition.\n"
"How? Because it informs the upstream that it does not need more items (*cancellation*) and that stops the repetition.\n"
"So, retrieving items from paginated APIs this way can reduce the number of requests and, as a consequence the load on the remote service."
msgstr "我们的数据流的优势在于，我们不会检索每一页。只要有足够的啤酒，我们就会停止重复。怎么停止？因为它会通知上游不再需要更多项目 *（取消* ），从而停止重复。因此，以这种方式从分页 API 中检索项目可以减少请求数量，从而减轻远程服务的负担。"

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "Feel thirsty?"
msgstr "口渴吗？"

#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid ""
"Wanna try this code, checkout this https://gist.github.com/cescoffier/18a326a5c057392bec54d95ec5a06ca6[gist].\n"
"You can run it immediately with jbang:"
msgstr "想试试这段代码，请查看此 link:https://gist.github.com/cescoffier/18a326a5c057392bec54d95ec5a06ca6[gist] 。你可以立即用 jbang 运行它："
