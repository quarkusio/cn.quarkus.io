# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy, no-wrap
msgid "Handling paginated APIs with Mutiny"
msgstr "用Mutiny处理分页的API"

#. type: YAML Front Matter: synopsis
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy, no-wrap
msgid "How to use API using pagination with Mutiny"
msgstr "如何利用Mutiny的分页功能来使用API"

#: _posts/2020-09-15-mutiny-pagination.adoc
msgid ""
"At the beginning of the Mutiny adventure, my friend Alex came to me with an interesting problem.\n"
"Alex wanted to retrieve data from a REST service in a reactive manner.\n"
"So far, no problem, we have everything for this in our toolbox.\n"
"But, this service, as many services, is using pagination.\n"
"Ah! That makes things a bit more spicy.\n"
"Alex wanted to retrieve all the items and consume them as a stream, but you can't retrieve the items in one batch.\n"
"You need to invoke the service for every page, extract the items and feed the stream."
msgstr ""

#: _posts/2020-09-15-mutiny-pagination.adoc
msgid ""
"So, how to achieve this in a reactive manner and build a proper stream of items without loosing your sanity?\n"
"Let's have a look!"
msgstr ""

#: _posts/2020-09-15-mutiny-pagination.adoc
msgid "The Punk API"
msgstr ""

#: _posts/2020-09-15-mutiny-pagination.adoc
msgid ""
"First, we need an API.\n"
"Alex introduced me to the https://punkapi.com/documentation/v2[Punk API], a REST API to retrieve beers.\n"
"That's fun, and even better, it uses pagination.\n"
"We got our API!"
msgstr ""

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "If you call `https://api.punkapi.com/v2/beers?page=1`, you get a JSON array like:"
msgstr "如果你调用 `<a href=\"https://api.punkapi.com/v2/beers?page=1\" class=\"bare\">https://api.punkapi.com/v2/beers?page=1</a>` ，你会得到一个JSON数组，比如。"

#: _posts/2020-09-15-mutiny-pagination.adoc
msgid ""
"I won't show discuss the content of each object, the documentation page does a great job about that.\n"
"Let's focus on the pagination aspect.\n"
"First, we passed the `page` query parameter, indicating which page we want.\n"
"Generally, when you retrieve a page, the API provides a way to know if there is a next page (a special field in the JSON document, or HTTP header), but the Punk API does not provide any hint.\n"
"So, to retrieve all the beers, we need to invoke the service for page 1, 2, 3... until the returned JSON array is empty."
msgstr ""

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "In an imperative world, to retrieve all the beers, you would do something like this:"
msgstr "在一个命令式的世界里，为了检索所有的啤酒，你会做这样的事情。"

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "How can we achieve the same in a reactive manner and build a stream of beer?"
msgstr "我们如何以被动的方式实现同样的目标，并建立一个啤酒流？"

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "image:/assets/images/posts/mutiny-pagination/mutiny-pagination.png[]"
msgstr "image:/assets/images/posts/mutiny-pagination/mutiny-pagination.png[alt=\"mutiny pagination\"]"

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "Let's proceed step by step."
msgstr "让我们一步一步地进行。"

#: _posts/2020-09-15-mutiny-pagination.adoc
msgid "Retrieving a single page"
msgstr ""

#: _posts/2020-09-15-mutiny-pagination.adoc
msgid ""
"First, we need to see how we can retrieve a single page.\n"
"I'm going to use the Vert.x Web Client, but you can use any reactive HTTP clients providing a Mutiny API."
msgstr ""

#: _posts/2020-09-15-mutiny-pagination.adoc
msgid ""
"This snippet creates the web client.\n"
"Then, we use that client and retrieve the first page."
msgstr ""

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "When we receive the result (`onItem`), we transform the JSON array into a list of beers."
msgstr "当我们收到结果( `onItem` )时，我们将JSON数组转化为啤酒列表。"

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "Let's extract this code in a method and take the page number as parameter:"
msgstr "让我们在一个方法中提取这段代码，并把页码作为参数。"

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "So far, so good."
msgstr "到目前为止，一切都很好。"

#: _posts/2020-09-15-mutiny-pagination.adoc
msgid "Retrieving multiple page"
msgstr ""

#: _posts/2020-09-15-mutiny-pagination.adoc
msgid ""
"So, now, we know how to retrieve a single page and extract the items from it.\n"
"We just need to repeat this operation for every page, and provide a stream."
msgstr ""

#: _posts/2020-09-15-mutiny-pagination.adoc
msgid ""
"Mutiny provides a method to create a `Multi` by repeating multiple times a `Uni`.\n"
"Under the hood, it calls a method returning a `Uni` and subscribe on it.\n"
"But we need to make _progress_, and pass the current page.\n"
"Mutiny offers the possibility to store a state in order to let the method creating the `Uni` increments the page number:"
msgstr ""

#: _posts/2020-09-15-mutiny-pagination.adoc
msgid ""
"This code above creates a stream with the item emitted by the `Unis` returned by the `getPage` method.\n"
"We increment the page number (stored in an `AtomicInteger`) every time.\n"
"So, it retrieves the page 1, 2, 3 ... and every time emits the received `List<Beer>` downstream."
msgstr ""

#: _posts/2020-09-15-mutiny-pagination.adoc
msgid ""
"However, at some point, we must stop.\n"
"As we said earlier, we can stop when the returned list is empty:"
msgstr ""

#: _posts/2020-09-15-mutiny-pagination.adoc
msgid ""
"The `until` clause indicates when the iteration must be stopped.\n"
"It receives the retrieved list (produced by `getPage`), and when this list is empty, stops the repetition.\n"
"If the list still contains beers, it retrieves the next page."
msgstr ""

#: _posts/2020-09-15-mutiny-pagination.adoc
msgid "Unpacking the beers"
msgstr ""

#: _posts/2020-09-15-mutiny-pagination.adoc
msgid ""
"We now have a stream of list, and each list contain a set of beers.\n"
"We are almost there, but Alex wants a stream of beer.\n"
"So we need to unpack the beers."
msgstr ""

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "The first approach to achieve this uses `transformToMultiAndConcatenate`, i.e. for each list create a new `multi` with the contained beers and concatenate these `multis`:"
msgstr "实现这一目标的第一种方法是使用 `transformToMultiAndConcatenate` ，即为每个列表创建一个包含啤酒的新 `multi` ，并将这些 `multis` 。"

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "Wondering about `concatenate`? Check out this https://quarkus.io/blog/mutiny-redis/[other blog post]"
msgstr "想知道 `concatenate` ?请看 link:https://quarkus.io/blog/mutiny-redis/[另一篇博文]"

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "image:/assets/images/posts/mutiny-pagination/disjoint.png[]"
msgstr "image:/assets/images/posts/mutiny-pagination/disjoint.png[alt=\"disjoint\"]"

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "Because this is a common operation, Mutiny provides the `disjoint` method doing exactly the same:"
msgstr "因为这是一个常见的操作，Mutiny提供了 `disjoint` 方法，做得完全一样。"

#. type: Plain text
#: _posts/2020-09-15-mutiny-pagination.adoc
#, fuzzy
msgid "And we are done!"
msgstr "我们已经完成了!"

#: _posts/2020-09-15-mutiny-pagination.adoc
msgid "The benefits of reactive"
msgstr ""

#: _posts/2020-09-15-mutiny-pagination.adoc
msgid ""
"We have our stream, it's time to use it!\n"
"Let's, for example, retrieve the first 10 beers with \"IPA\" (let's be trendy) in their description:"
msgstr ""

#: _posts/2020-09-15-mutiny-pagination.adoc
msgid ""
"The advantage of our stream is that we won't retrieve every page.\n"
"As soon as we have enough beers, we stop the repetition.\n"
"How? Because it informs the upstream that it does not need more items (*cancellation*) and that stops the repetition.\n"
"So, retrieving items from paginated APIs this way can reduce the number of requests and, as a consequence the load on the remote service."
msgstr ""

#: _posts/2020-09-15-mutiny-pagination.adoc
msgid "Feel thirsty?"
msgstr ""

#: _posts/2020-09-15-mutiny-pagination.adoc
msgid ""
"Wanna try this code, checkout this https://gist.github.com/cescoffier/18a326a5c057392bec54d95ec5a06ca6[gist].\n"
"You can run it immediately with jbang:"
msgstr ""
