# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:1
#, no-wrap
msgid "cescoffier"
msgstr ""

#. type: YAML Front Matter: date
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:1
#, no-wrap
msgid "2020-09-15"
msgstr ""

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:1
#, no-wrap
msgid "post"
msgstr ""

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:1
#, no-wrap
msgid "How to use API using pagination with Mutiny"
msgstr ""

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:1
#, no-wrap
msgid "reactive rest mutiny http pagination"
msgstr ""

#. type: YAML Front Matter: title
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:1
#, no-wrap
msgid "Handling paginated APIs with Mutiny"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:17
msgid "At the beginning of the Mutiny adventure, my friend Alex came to me with an interesting problem.  Alex wanted to retrieve data from a REST service in a reactive manner.  So far, no problem, we have everything for this in our toolbox.  But, this service, as many services, is using pagination.  Ah! That makes things a bit more spicy.  Alex wanted to retrieve all the items and consume them as a stream, but you can't retrieve the items in one batch.  You need to invoke the service for every page, extract the items and feed the stream."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:20
msgid "So, how to achieve this in a reactive manner and build a proper stream of items without loosing your sanity? Let's have a look!"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:22
msgid "## The Punk API"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:27
msgid "First, we need an API.  Alex introduced me to the https://punkapi.com/documentation/v2[Punk API], a REST API to retrieve beers.  That's fun, and even better, it uses pagination.  We got our API!"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:29
msgid "If you call `https://api.punkapi.com/v2/beers?page=1`, you get a JSON array like:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:41
#, no-wrap
msgid ""
"[\n"
"    {\n"
"        first beer\n"
"    },\n"
"    {\n"
"        second beer\n"
"    }, \n"
"    // ...\n"
"]\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:48
msgid "I won't show discuss the content of each object, the documentation page does a great job about that.  Let's focus on the pagination aspect.  First, we passed the `page` query parameter, indicating which page we want.  Generally, when you retrieve a page, the API provides a way to know if there is a next page (a special field in the JSON document, or HTTP header), but the Punk API does not provide any hint.  So, to retrieve all the beers, we need to invoke the service for page 1, 2, 3... until the returned JSON array is empty."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:50
msgid "In an imperative world, to retrieve all the beers, you would do something like this:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:61
#, no-wrap
msgid ""
"List<Beer> beers = ...;\n"
"int page = 1;\n"
"List<Beer> batch = ...\n"
"do {\n"
"  batch= getBeersFromPage(page);\n"
"  beers.addAll(batch);\n"
"  page = page + 1;\n"
"} while (! batch.isEmpty());\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:64
msgid "How can we achieve the same in a reactive manner and build a stream of beer?"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:66
msgid "image:/assets/images/posts/mutiny-pagination/mutiny-pagination.png[]"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:68
msgid "Let's proceed step by step."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:70
msgid "## Retrieving a single page"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:73
msgid "First, we need to see how we can retrieve a single page.  I'm going to use the Vert.x Web Client, but you can use any reactive HTTP clients providing a Mutiny API."
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:82
#, no-wrap
msgid ""
"// Create the client\n"
"WebClient client = WebClient.create(vertx, new WebClientOptions()\n"
"      .setDefaultHost(\"api.punkapi.com\")\n"
"      .setDefaultPort(443)\n"
"      .setSsl(true)\n"
");\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:87
#, no-wrap
msgid ""
"// Retrieve the first page\n"
"Uni<List<Beer>> uni = client.get(\"/v2/beers?page=1\")\n"
"      .send()\n"
"      .onItem().transform(Pagination::toListOfBeer);\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:91
msgid "This snippet creates the web client.  Then, we use that client and retrieve the first page."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:93
msgid "When we receive the result (`onItem`), we transform the JSON array into a list of beers."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:95
msgid "Let's extract this code in a method and take the page number as parameter:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:103
#, no-wrap
msgid ""
"private static Uni<List<Beer>> getPage(WebClient client, int page) {\n"
"    return client.get(\"/v2/beers?page=\" + page)\n"
"            .send()\n"
"            .onItem().transform(Pagination::toListOfBeer);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:106
msgid "So far, so good."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:108
msgid "## Retrieving multiple page"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:111
msgid "So, now, we know how to retrieve a single page and extract the items from it.  We just need to repeat this operation for every page, and provide a stream."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:116
msgid "Mutiny provides a method to create a `Multi` by repeating multiple times a `Uni`.  Under the hood, it calls a method returning a `Uni` and subscribe on it.  But we need to make _progress_, and pass the current page.  Mutiny offers the possibility to store a state in order to let the method creating the `Uni` increments the page number:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:122
#, no-wrap
msgid ""
"Multi.createBy().repeating().uni(AtomicInteger::new, page ->\n"
"\t\tgetPage(client, page.incrementAndGet())\n"
")\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:127
msgid "This code above creates a stream with the item emitted by the `Unis` returned by the `getPage` method.  We increment the page number (stored in an `AtomicInteger`) every time.  So, it retrieves the page 1, 2, 3 ... and every time emits the received `List<Beer>` downstream."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:130
msgid "However, at some point, we must stop.  As we said earlier, we can stop when the returned list is empty:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:137
#, no-wrap
msgid ""
"Multi<List<Beer>> multi = Multi.createBy().repeating().uni(AtomicInteger::new, page ->\n"
"     getPage(client, page.incrementAndGet())\n"
")\n"
".until(List::isEmpty);\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:142
msgid "The `until` clause indicates when the iteration must be stopped.  It receives the retrieved list (produced by `getPage`), and when this list is empty, stops the repetition.  If the list still contains beers, it retrieves the next page."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:144
msgid "## Unpacking the beers"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:148
msgid "We now have a stream of list, and each list contain a set of beers.  We are almost there, but Alex wants a stream of beer.  So we need to unpack the beers."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:150
msgid "The first approach to achieve this uses `transformToMultiAndConcatenate`, i.e. for each list create a new `multi` with the contained beers and concatenate these `multis`:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:158
#, no-wrap
msgid ""
"Multi<Beer> multi = Multi.createBy().repeating().uni(AtomicInteger::new, page ->\n"
"        getPage(client, page.incrementAndGet())\n"
"    )\n"
"    .until(List::isEmpty)\n"
"    .onItem().transformToMultiAndConcatenate(l -> Multi.createFrom().iterable(l));\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:161
msgid "Wondering about `concatenate`? Check out this https://quarkus.io/blog/mutiny-redis/[other blog post]"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:163
msgid "image:/assets/images/posts/mutiny-pagination/disjoint.png[]"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:165
msgid "Because this is a common operation, Mutiny provides the `disjoint` method doing exactly the same:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:173
#, no-wrap
msgid ""
"Multi<Beer> multi = Multi.createBy().repeating().uni(AtomicInteger::new, page ->\n"
"    getPage(client, page.incrementAndGet())\n"
")\n"
"  .until(List::isEmpty)\n"
"  .onItem().disjoint();\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:176
msgid "And we are done!"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:178
msgid "## The benefits of reactive"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:181
msgid "We have our stream, it's time to use it! Let's, for example, retrieve the first 10 beers with \"IPA\" (let's be trendy) in their description:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:187
#, no-wrap
msgid ""
"multi\n"
"    .transform().byFilteringItemsWith(beer -> beer.description.contains(\"IPA\"))\n"
"    .transform().byTakingFirstItems(10);\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:193
msgid "The advantage of our stream is that we won't retrieve every page.  As soon as we have enough beers, we stop the repetition.  How? Because it informs the upstream that it does not need more items (*cancellation*) and that stops the repetition.  So, retrieving items from paginated APIs this way can reduce the number of requests and, as a consequence the load on the remote service."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:195
msgid "## Feel thirsty?"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:198
msgid "Wanna try this code, checkout this https://gist.github.com/cescoffier/18a326a5c057392bec54d95ec5a06ca6[gist].  You can run it immediately with jbang:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-15-mutiny-pagination.adoc:202
#, no-wrap
msgid "jbang https://gist.github.com/cescoffier/18a326a5c057392bec54d95ec5a06ca6\n"
msgstr ""
