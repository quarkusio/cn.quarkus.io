# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2021-01-12-magic-control.adoc:1
#, fuzzy, no-wrap
msgid "cescoffier"
msgstr "鹤壁市"

#. type: YAML Front Matter: date
#: upstream/_posts/2021-01-12-magic-control.adoc:1
#, fuzzy, no-wrap
msgid "2021-01-12"
msgstr "2021-01-12"

#. type: YAML Front Matter: layout
#: upstream/_posts/2021-01-12-magic-control.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "职位"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2021-01-12-magic-control.adoc:1
#, fuzzy, no-wrap
msgid "How to control the amount of magic from Quarkus"
msgstr "如何控制Quarkus的魔法量"

#. type: YAML Front Matter: tags
#: upstream/_posts/2021-01-12-magic-control.adoc:1
#, fuzzy, no-wrap
msgid "vert.x"
msgstr "vert.x"

#. type: YAML Front Matter: title
#: upstream/_posts/2021-01-12-magic-control.adoc:1
#, fuzzy, no-wrap
msgid "Bored with magic tricks?"
msgstr "厌倦了魔术表演吗？"

#. type: Plain text
#: upstream/_posts/2021-01-12-magic-control.adoc:13
#, fuzzy
msgid "Just before my PTO, someone told me: '_I don't like magic._' In this context, _magic_ refers to the amount of hidden _stuff_ done by Quarkus under the hood for the sake of simplicity.  It includes dependency injection, annotations, and so on."
msgstr "就在我的PTO之前，有人告诉我： _'我不喜欢魔法。_ '在这里， _魔法_ 指的是Quarkus为了简化而在引擎盖下做的大量隐藏的 _东西_ 。它包括依赖性注入、注解等等。"

#. type: Plain text
#: upstream/_posts/2021-01-12-magic-control.adoc:17
#, fuzzy
msgid "It's not the first time that I get that kind of comment, and coming from the Vert.x project, it makes sense.  Vert.x has (almost) no magic, and for a good reason: too much magic can be terrible and make production tuning utterly expensive.  Sometimes you want to have more control and avoid unexpected behaviors: execute the code you wrote, and nothing else."
msgstr "这不是我第一次收到这样的评论，而且来自Vert.x项目，这很有意义。Vert.x（几乎）没有魔法，这是有原因的：太多的魔法会很糟糕，并使生产调整变得非常昂贵。有时你想拥有更多的控制权，避免意外的行为：执行你写的代码，而不是别的。"

#. type: Plain text
#: upstream/_posts/2021-01-12-magic-control.adoc:22
#, fuzzy
msgid "But magic is not inherently bad.  Magic is power that can be used for good or for bad.  After all, your application runs on a silicon with microcode magic powering an Operating System with abstraction magic powering the Java Virtual Machine with Just In Time magic.  There is magic, it's just magic you have enough knowledge (or trust) of vs magic you don't."
msgstr "但魔法本质上并不坏。魔法是可以用来做好事或做坏事的力量。毕竟，你的应用程序运行在一个具有微代码魔法的硅片上，而操作系统具有抽象魔法，而Java虚拟机具有及时魔法。有魔法，只是你有足够的知识（或信任）的魔法与你没有的魔法。"

#. type: Plain text
#: upstream/_posts/2021-01-12-magic-control.adoc:27
#, fuzzy
msgid "You may think that Quarkus has a lot of magic tricks.  It is true in some sense but it is easily understood and comes with strong benefits in either memory optimization, startup time optimization or last but not least developer experience improvements.  You can decide the amount of magic that you want and the amount of control you feel comfortable with.  You don't have to use dependency injection or managed clients if you prefer doing things yourself."
msgstr "你可能认为Quarkus有很多神奇的技巧。从某种意义上说，这是真的，但它很容易理解，而且在内存优化、启动时间优化或最后但并非最不重要的开发者经验改进方面都有很大的好处。你可以决定你想要的魔法的数量和你觉得舒服的控制量。如果你喜欢自己做事情，你不必使用依赖性注入或管理客户端。"

#. type: Plain text
#: upstream/_posts/2021-01-12-magic-control.adoc:31
#, fuzzy
msgid "In this post, we will cover three different approaches to reducing the amount of magic.  We will go from almost no magic to just enough to get a good developer experience.  Examples from this blog post are available on https://github.com/cescoffier/quarkus-magic-control[GitHub]."
msgstr "在这篇文章中，我们将介绍三种不同的方法来减少魔法的数量。我们将从几乎没有魔法到只够得到一个好的开发者体验。这篇博文的例子可以在 link:https://github.com/cescoffier/quarkus-magic-control[GitHub] 上找到。"

#. type: Title ==
#: upstream/_posts/2021-01-12-magic-control.adoc:32
#, fuzzy, no-wrap
msgid "The _almost no magic_ approach"
msgstr " _几乎没有魔法_ 的方法"

#. type: Plain text
#: upstream/_posts/2021-01-12-magic-control.adoc:38
#, fuzzy
msgid "Quarkus applications are Java applications.  So, somewhere there is a `public static void main(String... args)`.  While you don't need to write that method when using Quarkus, it can still be convenient and give you more control about your application startup.  It's also a good trick to start your Quarkus application directly from your IDE."
msgstr "Quarkus应用程序是Java应用程序。因此，在某处有一个 `public static void main(String…​ args)` 。 虽然你在使用Quarkus时不需要写这个方法，但它仍然可以很方便，让你对应用程序的启动有更多的控制。从你的IDE中直接启动你的Quarkus应用程序也是一个不错的技巧。"

#. type: Plain text
#: upstream/_posts/2021-01-12-magic-control.adoc:40
#, fuzzy
msgid "As an example, we will implement a straightforward HTTP application. Nothing fancy:"
msgstr "作为一个例子，我们将实现一个简单的HTTP应用程序。没有什么花哨的东西。"

#. type: delimited block -
#: upstream/_posts/2021-01-12-magic-control.adoc:44
#, no-wrap
msgid "package me.escoffier.quarkus.nomagic;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-12-magic-control.adoc:52
#, no-wrap
msgid ""
"import io.quarkus.runtime.Quarkus;\n"
"import io.quarkus.runtime.QuarkusApplication;\n"
"import io.quarkus.runtime.annotations.QuarkusMain;\n"
"import io.vertx.core.Vertx;\n"
"import io.vertx.core.http.HttpServer;\n"
"import io.vertx.ext.web.Router;\n"
"import org.eclipse.microprofile.config.ConfigProvider;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-12-magic-control.adoc:55
#, no-wrap
msgid ""
"@QuarkusMain\n"
"public class Main implements QuarkusApplication {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-12-magic-control.adoc:59
#, no-wrap
msgid ""
"    public static void main(String... args) {\n"
"        Quarkus.run(Main.class, args);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-12-magic-control.adoc:64
#, no-wrap
msgid ""
"    @Override\n"
"    public int run(String... args) {\n"
"        Vertx vertx = Vertx.vertx();\n"
"        Router router = Router.router(vertx);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-12-magic-control.adoc:66
#, no-wrap
msgid "        String message = ConfigProvider.getConfig().getValue(\"message\", String.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-12-magic-control.adoc:72
#, no-wrap
msgid ""
"        router.get(\"/\").handler(rc -> rc.response().end(message));\n"
"        router.get(\"/bye\").handler(rc -> {\n"
"            rc.response().end(\"bye\");\n"
"            Quarkus.asyncExit();\n"
"        });\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-12-magic-control.adoc:76
#, no-wrap
msgid ""
"        HttpServer server = vertx.createHttpServer()\n"
"                .requestHandler(router)\n"
"                .listen(8080);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-12-magic-control.adoc:78
#, no-wrap
msgid "        Quarkus.waitForExit();\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-12-magic-control.adoc:83
#, no-wrap
msgid ""
"        server.close();\n"
"        return 0;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-01-12-magic-control.adoc:87
#, fuzzy
msgid "The complete source code is available https://github.com/cescoffier/quarkus-magic-control/tree/main/no-magic-example[here].  Don't expect much more; the application had only one Java class, but let's look into it."
msgstr "完整的源代码可以 link:https://github.com/cescoffier/quarkus-magic-control/tree/main/no-magic-example[在这里] 找到。不要期望太多，该应用程序只有一个Java类，但让我们来研究一下。"

#. type: Plain text
#: upstream/_posts/2021-01-12-magic-control.adoc:96
#, fuzzy
msgid "The `@QuarkusMain` indicates that Quarkus should use this class as the _main entry point_ of the application.  The `run` method contains your application logic.  We will come back to this logic later.  First, look at the `public static void main(String... args)` method.  It just starts the application.  You can use this entry point directly from your IDE.  Yes, there is still a bit of magic behind `Quarkus.run`; that's where the extension initialization happens - not unlike _any_ framework initialization including Vert.x.  As this application does not use any extension, nothing much will happen."
msgstr " `@QuarkusMain` 表示Quarkus应该使用这个类作为应用程序的 _主要入口点_ 。 `run` 方法包含你的应用逻辑。我们将在后面回到这个逻辑。首先，看一下 `public static void main(String…​ args)` 方法。它只是启动应用程序。你可以直接从你的IDE中使用这个入口点。是的，在 `Quarkus.run` 后面还有一点神奇的东西；这就是发生扩展初始化的地方--与包括Vert.x在内的 _任何_ 框架初始化都不一样。由于这个应用程序不使用任何扩展，所以不会发生什么。"

#. type: Plain text
#: upstream/_posts/2021-01-12-magic-control.adoc:99
#, fuzzy
msgid "This application https://github.com/cescoffier/quarkus-magic-control/blob/main/no-magic-example/pom.xml#L17-L26[depends] directly on Vert.x Web and Vert.x Core.  The only Quarkus dependency is Arc (not used directly but required):"
msgstr "这个应用程序直接 link:https://github.com/cescoffier/quarkus-magic-control/blob/main/no-magic-example/pom.xml#L17-L26[依赖于] Vert.x Web和Vert.x Core。唯一依赖Quarkus的是Arc（不直接使用但需要）。"

#. type: delimited block -
#: upstream/_posts/2021-01-12-magic-control.adoc:107
#, no-wrap
msgid ""
"<dependencies>\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-arc</artifactId>\n"
"    </dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-12-magic-control.adoc:114
#, no-wrap
msgid ""
"    <dependency>\n"
"        <groupId>io.vertx</groupId>\n"
"        <artifactId>vertx-web</artifactId>\n"
"        <version>3.9.5</version>\n"
"    </dependency>\n"
"</dependencies>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-01-12-magic-control.adoc:121
#, fuzzy
msgid "Let's go back to the `run` method.  It contains the application logic, here, a dummy Vert.x application.  It creates the `Vertx` instance, a `Router`, registers a few routes, and starts the HTTP server.  Because we don't want the application to stop immediately, we _wait for exit_.  The `/bye` request handler illustrates how you can programmatically trigger the application shutdown."
msgstr "让我们回到 `run` 方法。它包含应用逻辑，这里是一个虚拟的Vert.x应用程序。它创建了 `Vertx` 实例，一个 `Router` ，注册了一些路由，并启动了HTTP服务器。因为我们不希望应用程序立即停止，所以我们 _等待退出_ 。 `/bye` 请求处理程序说明了你如何以编程方式触发应用程序的关闭。"

#. type: Plain text
#: upstream/_posts/2021-01-12-magic-control.adoc:125
#, fuzzy
msgid "This application has almost no magic, just a single annotation, and a regular Java entry point.  You may wonder why not using a bare Java program? Even used that way, Quarkus provides benefits. For example, you can access the built-in configuration support as illustrated in the snippet:"
msgstr "这个应用程序几乎没有任何魔力，只有一个注释，和一个普通的Java入口点。你可能会问，为什么不使用一个裸露的Java程序呢？即使以这种方式使用，Quarkus也提供了好处。例如，你可以访问内置的配置支持，如图中的片段所示。"

#. type: delimited block -
#: upstream/_posts/2021-01-12-magic-control.adoc:129
#, no-wrap
msgid "String message = ConfigProvider.getConfig().getValue(\"message\", String.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-01-12-magic-control.adoc:132
#, fuzzy
msgid "The configuration is located in the `application.properties` file."
msgstr "该配置位于 `application.properties` 文件中。"

#. type: Plain text
#: upstream/_posts/2021-01-12-magic-control.adoc:138
#, fuzzy
msgid "This first approach has a few drawbacks.  It does not benefit from the built-time processing of Quarkus.  The logic executed at build time is packaged inside extensions, and in this case, we don't use extensions (except Arc).  Another issue is that compiling this application to native will fail because extensions are also involved during the native compilation.  Finally, the hot reload won't work, but you can directly restart the application from your IDE."
msgstr "这第一种方法有几个缺点。它不能从Quarkus的构建时处理中获益。在构建时执行的逻辑被打包在扩展中，而在这种情况下，我们不使用扩展（除了Arc）。另一个问题是，将这个应用程序编译为本地程序会失败，因为在本地编译过程中也会涉及到扩展。最后，热重载不会起作用，但你可以直接从你的IDE中重新启动应用程序。"

#. type: Title ==
#: upstream/_posts/2021-01-12-magic-control.adoc:139
#, fuzzy, no-wrap
msgid "Using the managed Vert.x instance"
msgstr "使用管理的Vert.x实例"

#. type: Plain text
#: upstream/_posts/2021-01-12-magic-control.adoc:146
#, fuzzy
msgid "Quarkus uses Vert.x heavily.  The `quarkus-vertx-core` extension manages the Vert.x instance used by Quarkus.  You can use that instance directly and avoid creating the Vert.x instance.  If you need to configure the instance, you can configure it from https://quarkus.io/guides/all-config#quarkus-vertx-core_quarkus-vertx-core-eclipse-vert.x-core[the `application.properties`].  It also enables native packaging (as that extension contains the directive to compile Vert.x applications to native)."
msgstr "Quarkus大量使用Vert.x。 `quarkus-vertx-core` 扩展管理着Quarkus使用的Vert.x实例。你可以直接使用该实例，避免创建Vert.x实例。如果你需要配置这个实例，你可以从 link:https://quarkus.io/guides/all-config#quarkus-vertx-core_quarkus-vertx-core-eclipse-vert.x-core[`application.properties`] 。 它还可以实现本地打包（因为该扩展包含将Vert.x应用程序编译为本地的指令）。 "

#. type: Plain text
#: upstream/_posts/2021-01-12-magic-control.adoc:148
#, fuzzy
msgid "In your pom.xml file, just add the following dependency:"
msgstr "在你的pom.xml文件中，只需添加以下依赖关系。"

#. type: delimited block -
#: upstream/_posts/2021-01-12-magic-control.adoc:155
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-vertx-core</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-01-12-magic-control.adoc:158
#, fuzzy
msgid "With this, the _run_ method becomes:"
msgstr "有了这个， _运行_ 方法就变成了。"

#. type: delimited block -
#: upstream/_posts/2021-01-12-magic-control.adoc:165
#, no-wrap
msgid ""
"@Override\n"
"public int run(String... args) {\n"
"    Vertx vertx = CDI.current().select(Vertx.class).get();\n"
"    Router router = Router.router(vertx);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-12-magic-control.adoc:167
#: upstream/_posts/2021-01-12-magic-control.adoc:231
#, no-wrap
msgid "    String message = ConfigProvider.getConfig().getValue(\"message\", String.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-12-magic-control.adoc:173
#, no-wrap
msgid ""
"    router.get(\"/\").handler(rc -> rc.response().end(message + \" world!\"));\n"
"    router.get(\"/stop\").handler(rc -> {\n"
"        rc.response().end(\"bye\");\n"
"        Quarkus.asyncExit();\n"
"    });\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-12-magic-control.adoc:177
#, no-wrap
msgid ""
"    HttpServer server = vertx.createHttpServer()\n"
"            .requestHandler(router)\n"
"            .listen(8080);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-12-magic-control.adoc:179
#, no-wrap
msgid "    Quarkus.waitForExit();\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-12-magic-control.adoc:183
#, no-wrap
msgid ""
"    server.close();\n"
"    return 0;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-01-12-magic-control.adoc:189
#, fuzzy
msgid "Note how it retrieves the managed Vert.x instance.  While you can use `@Inject`, you can also retrieve it programmatically, the rest of the code does not change.  See? No magic for you! We can still start it from the IDE using the _main_ method."
msgstr "注意它是如何检索管理的Vert.x实例的。虽然你可以使用 `@Inject` ，但你也可以通过编程来检索它，其余的代码并没有改变。看到了吗？对你来说没有魔法!我们仍然可以使用 _main_ 方法从IDE中启动它。"

#. type: Plain text
#: upstream/_posts/2021-01-12-magic-control.adoc:191
#, fuzzy
msgid "If you don't include the `quarkus-vertx-core` extension (or any extension depending on it), Quarkus won't create the Vert.x instance."
msgstr "如果你不包括 `quarkus-vertx-core` 扩展（或任何依赖于它的扩展），Quarkus将不会创建Vert.x实例。"

#. type: Plain text
#: upstream/_posts/2021-01-12-magic-control.adoc:193
#, fuzzy
msgid "Using extensions gives you some property wiring as well as the build time optimisations and native image compilation:"
msgstr "使用扩展可以提供一些属性接线，以及构建时间优化和本地图像编译。"

#. type: delimited block -
#: upstream/_posts/2021-01-12-magic-control.adoc:199
#, no-wrap
msgid ""
"> mvn package -Dnative\n"
"...\n"
"> ./target/managed-vertx-example-1.0-SNAPSHOT-runner\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-01-12-magic-control.adoc:202
#, fuzzy
msgid "But, still no hot reload 😿."
msgstr "但是，仍然没有热重装😿。"

#. type: Title ==
#: upstream/_posts/2021-01-12-magic-control.adoc:203
#, fuzzy, no-wrap
msgid "Using the managed HTTP server"
msgstr "使用被管理的HTTP服务器"

#. type: Plain text
#: upstream/_posts/2021-01-12-magic-control.adoc:207
#, fuzzy
msgid "Instead of using only the `quarkus-vertx-core` extension, we can choose to delegate the HTTP server to Quarkus.  You may see that as a loss of control, but actually, we rarely do much around it, and again, you can configure it from the `application.properties` file if needed."
msgstr "我们可以选择将HTTP服务器委托给Quarkus，而不是只使用 `quarkus-vertx-core` 扩展。你可能会认为这是一种控制权的丧失，但实际上，我们很少围绕它做什么，同样，如果需要，你可以从 `application.properties` 文件中进行配置。"

#. type: Plain text
#: upstream/_posts/2021-01-12-magic-control.adoc:209
#, fuzzy
msgid "Instead of ``quarkus-vertx-core`, use `quarkus-vertx-http`:"
msgstr "用 ``quarkus-vertx-core` ，而不是用 `quarkus-vertx-http` 。"

#. type: delimited block -
#: upstream/_posts/2021-01-12-magic-control.adoc:218
#, no-wrap
msgid ""
"<dependencies>\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-vertx-http</artifactId>\n"
"    </dependency>\n"
"</dependencies>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-01-12-magic-control.adoc:221
#, fuzzy
msgid "No need to depend on Vert.x Web directly, it's included."
msgstr "不需要直接依赖Vert.x Web，它已经包括在内。"

#. type: Plain text
#: upstream/_posts/2021-01-12-magic-control.adoc:223
#, fuzzy
msgid "You will still register your routes, but using a managed `Router`:"
msgstr "你仍将注册你的路线，但使用一个管理的 `Router` 。"

#. type: delimited block -
#: upstream/_posts/2021-01-12-magic-control.adoc:229
#, no-wrap
msgid ""
"@Override\n"
"public int run(String... args) {\n"
"    Router router = CDI.current().select(Router.class).get();\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-12-magic-control.adoc:237
#, no-wrap
msgid ""
"    router.get(\"/\").handler(rc -> rc.response().end(message));\n"
"    router.get(\"/bye\").handler(rc -> {\n"
"        rc.response().end(\"bye\");\n"
"        Quarkus.asyncExit();\n"
"    });\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-12-magic-control.adoc:241
#, no-wrap
msgid ""
"    Quarkus.waitForExit();\n"
"    return 0;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-01-12-magic-control.adoc:245
#, fuzzy
msgid "That approach enables the Quarkus hot reload as it intercepts the HTTP requests.  You are still in control of everything related to your application logic."
msgstr "这种方法使Quarkus在拦截HTTP请求时能够热重载。你仍然控制着与你的应用逻辑有关的一切。"

#. type: Plain text
#: upstream/_posts/2021-01-12-magic-control.adoc:247
#, fuzzy
msgid "You can start the hot reload using:"
msgstr "你可以用以下方法启动热重装。"

#. type: delimited block -
#: upstream/_posts/2021-01-12-magic-control.adoc:251
#, no-wrap
msgid "> mvn quarkus:dev\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2021-01-12-magic-control.adoc:253
#, fuzzy, no-wrap
msgid "The final _magic touch_"
msgstr "最后的 _神奇_ 之处"

#. type: Plain text
#: upstream/_posts/2021-01-12-magic-control.adoc:258
#, fuzzy
msgid "The question, now, is how far are we from a _regular_ Quarkus application? Quite close, actually.  The equivalent application using RESTEasy Reactive would be something like:"
msgstr "现在的问题是，我们离 _正规的_ Quarkus应用还有多远？其实很接近。使用RESTEasy Reactive的同等应用将是这样的。"

#. type: delimited block -
#: upstream/_posts/2021-01-12-magic-control.adoc:263
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"public class MyResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-12-magic-control.adoc:265
#, no-wrap
msgid "    @Inject @ConfigProperty(\"message\") String message;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-12-magic-control.adoc:270
#, no-wrap
msgid ""
"    @GET\n"
"    public String hello() {\n"
"        return message;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-12-magic-control.adoc:272
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-01-12-magic-control.adoc:279
#, fuzzy
msgid "Unlike the previous approaches, this one leverages a declarative (annotation-based) model.  Under the hood, it's not that different from the last approach.  Quarkus registers a route (on the router), which then calls the `hello` method when a matching request is received.  The router gets initialized during the `Quarkus.run` method.  No need for the _main_ endpoint, but you can still use one, often convenient in IDEs."
msgstr "与之前的方法不同，这个方法利用了声明性（基于注释的）模型。在结构上，它与上一个方法没有什么不同。Quarkus注册了一个路由（在路由器上），然后在收到一个匹配的请求时调用 `hello` 方法。路由器在 `Quarkus.run` 方法中被初始化。不需要 _主_ 端点，但你仍然可以使用一个，在IDE中往往很方便。"

#. type: Title ==
#: upstream/_posts/2021-01-12-magic-control.adoc:280
#, fuzzy, no-wrap
msgid "Summary"
msgstr "摘要"

#. type: Plain text
#: upstream/_posts/2021-01-12-magic-control.adoc:286
#, fuzzy
msgid "Our relation to magic depends on our background and experience.  Quarkus lets you decide how much magic you accept.  This post presented fours configurations, going from almost no magic to the _regular_ Quarkus code.  Each approach has pros and cons:"
msgstr "我们与魔法的关系取决于我们的背景和经验。Quarkus让你决定你接受多少魔法。这篇文章介绍了四种配置，从几乎没有魔法到 _常规的_ Quarkus代码。每种方法都有优点和缺点。"

#. type: Table
#: upstream/_posts/2021-01-12-magic-control.adoc:288
#, fuzzy, no-wrap
msgid "Control"
msgstr "控制"

#. type: Table
#: upstream/_posts/2021-01-12-magic-control.adoc:288
#, fuzzy, no-wrap
msgid "Build time optimizations"
msgstr "构建时间的优化"

#. type: Table
#: upstream/_posts/2021-01-12-magic-control.adoc:288
#, fuzzy, no-wrap
msgid "Native executable"
msgstr "本地可执行文件"

#. type: Table
#: upstream/_posts/2021-01-12-magic-control.adoc:290
#, no-wrap
msgid "Hot Reload"
msgstr ""

#. type: Table
#: upstream/_posts/2021-01-12-magic-control.adoc:291
#, no-wrap
msgid "_Almost no magic_"
msgstr ""

#. type: Table
#: upstream/_posts/2021-01-12-magic-control.adoc:292
#, no-wrap
msgid "Full"
msgstr ""

#. type: Table
#: upstream/_posts/2021-01-12-magic-control.adoc:293
#: upstream/_posts/2021-01-12-magic-control.adoc:294
#: upstream/_posts/2021-01-12-magic-control.adoc:296
#: upstream/_posts/2021-01-12-magic-control.adoc:302
#, no-wrap
msgid "🥵"
msgstr ""

#. type: Table
#: upstream/_posts/2021-01-12-magic-control.adoc:297
#, no-wrap
msgid "Use the managed Vert.x instance"
msgstr ""

#. type: Table
#: upstream/_posts/2021-01-12-magic-control.adoc:298
#, no-wrap
msgid "Everything but Vert.x"
msgstr ""

#. type: Table
#: upstream/_posts/2021-01-12-magic-control.adoc:299
#, no-wrap
msgid "😀, for Vert.x"
msgstr ""

#. type: Table
#: upstream/_posts/2021-01-12-magic-control.adoc:300
#: upstream/_posts/2021-01-12-magic-control.adoc:306
#: upstream/_posts/2021-01-12-magic-control.adoc:308
#: upstream/_posts/2021-01-12-magic-control.adoc:311
#: upstream/_posts/2021-01-12-magic-control.adoc:312
#: upstream/_posts/2021-01-12-magic-control.adoc:314
#, no-wrap
msgid "😀"
msgstr ""

#. type: Table
#: upstream/_posts/2021-01-12-magic-control.adoc:303
#, no-wrap
msgid "Use the managed HTTP server"
msgstr ""

#. type: Table
#: upstream/_posts/2021-01-12-magic-control.adoc:304
#, no-wrap
msgid "Everything but Vert.x and the HTTP server"
msgstr ""

#. type: Table
#: upstream/_posts/2021-01-12-magic-control.adoc:305
#, no-wrap
msgid "😀, for Vert.x and HTTP"
msgstr ""

#. type: Table
#: upstream/_posts/2021-01-12-magic-control.adoc:309
#, no-wrap
msgid "_Regular_ Quarkus"
msgstr ""

#. type: Table
#: upstream/_posts/2021-01-12-magic-control.adoc:310
#, no-wrap
msgid "Endpoint managed by Quarkus"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-01-12-magic-control.adoc:318
msgid "Pick the approach that fits your needs.  Besides, most of Quarkus services are also available using a programmatic approach, as we have seen for configuration.  So, if you prefer avoiding managed objects, feel free just to use the available APIs."
msgstr ""
