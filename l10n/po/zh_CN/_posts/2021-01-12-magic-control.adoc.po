# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2021-01-12-magic-control.adoc
#, fuzzy, no-wrap
msgid "Bored with magic tricks?"
msgstr "厌倦了魔术表演吗？"

#. type: YAML Front Matter: synopsis
#: _posts/2021-01-12-magic-control.adoc
#, fuzzy, no-wrap
msgid "How to control the amount of magic from Quarkus"
msgstr "如何控制Quarkus的魔法量"

#: _posts/2021-01-12-magic-control.adoc
#, fuzzy
msgid ""
"Just before my PTO, someone told me: '_I don't like magic._'\n"
"In this context, _magic_ refers to the amount of hidden _stuff_ done by Quarkus under the hood for the sake of simplicity.\n"
"It includes dependency injection, annotations, and so on."
msgstr "就在我 PTO 之前，有人告诉我： _'我不喜欢魔法。_ 在这里，\" _魔法_ \"指的是 Quarkus 为了简单而在引擎盖下做的大量隐藏 _工作_ 。它包括依赖注入、注解等。"

#: _posts/2021-01-12-magic-control.adoc
#, fuzzy
msgid ""
"It's not the first time that I get that kind of comment, and coming from the Vert.x project, it makes sense.\n"
"Vert.x has (almost) no magic, and for a good reason: too much magic can be terrible and make production tuning utterly expensive.\n"
"Sometimes you want to have more control and avoid unexpected behaviors: execute the code you wrote, and nothing else."
msgstr "这已经不是我第一次收到这样的评论了，而且来自 Vert.x 项目的评论也很有道理。Vert.x 没有（几乎没有）魔法，这是有道理的：太多魔法会很糟糕，会让生产调整变得非常昂贵。有时，你想拥有更多的控制权并避免意外行为：执行你编写的代码，而不是其他。"

#: _posts/2021-01-12-magic-control.adoc
#, fuzzy
msgid ""
"But magic is not inherently bad.\n"
"Magic is power that can be used for good or for bad.\n"
"After all, your application runs on a silicon with microcode magic powering an Operating System with abstraction magic powering the Java Virtual Machine with Just In Time magic.\n"
"There is magic, it's just magic you have enough knowledge (or trust) of vs magic you don't."
msgstr "但魔法本质上并不坏。魔法是一种力量，可以用来做好事，也可以用来做坏事。毕竟，你的应用程序运行在硅片上，有微码魔法，操作系统有抽象魔法，Java 虚拟机有及时魔法。魔法是存在的，只是你有足够知识（或信任）的魔法与你没有足够知识（或信任）的魔法之争。"

#: _posts/2021-01-12-magic-control.adoc
#, fuzzy
msgid ""
"You may think that Quarkus has a lot of magic tricks.\n"
"It is true in some sense but it is easily understood and comes with strong benefits in either memory optimization, startup time optimization or last but not least developer experience improvements.\n"
"You can decide the amount of magic that you want and the amount of control you feel comfortable with.\n"
"You don't have to use dependency injection or managed clients if you prefer doing things yourself."
msgstr "你可能会认为 Quarkus 有很多神奇的技巧。从某种意义上来说确实如此，但它很容易理解，而且在内存优化、启动时间优化或最后但并非最不重要的开发人员体验改进方面都有很大的优势。你可以根据自己的喜好来决定需要多少魔术和多少控制权。如果你喜欢自己动手，就不必使用依赖注入或托管客户端。"

#: _posts/2021-01-12-magic-control.adoc
#, fuzzy
msgid ""
"In this post, we will cover three different approaches to reducing the amount of magic.\n"
"We will go from almost no magic to just enough to get a good developer experience.\n"
"Examples from this blog post are available on https://github.com/cescoffier/quarkus-magic-control[GitHub]."
msgstr "在本篇文章中，我们将介绍减少魔法数量的三种不同方法。我们将从几乎不使用魔法到只使用足够的魔法来获得良好的开发体验。本博文中的示例可在 link:https://github.com/cescoffier/quarkus-magic-control[GitHub] 上获取。"

#. type: Title ==
#: _posts/2021-01-12-magic-control.adoc
#, fuzzy, no-wrap
msgid "The _almost no magic_ approach"
msgstr " _几乎没有魔法_ 的方法"

#: _posts/2021-01-12-magic-control.adoc
#, fuzzy
msgid ""
"Quarkus applications are Java applications.\n"
"So, somewhere there is a `public static void main(String... args)`.\n"
"While you don't need to write that method when using Quarkus, it can still be convenient and give you more control about your application startup.\n"
"It's also a good trick to start your Quarkus application directly from your IDE."
msgstr "Quarkus 应用程序是 Java 应用程序。因此，在某个地方有一个 `public static void main(String…​ args)` 方法。虽然在使用 Quarkus 时不需要编写该方法，但它仍然很方便，可以让你更好地控制应用程序的启动。直接从集成开发环境启动 Quarkus 应用程序也是一个不错的技巧。"

#. type: Plain text
#: _posts/2021-01-12-magic-control.adoc
#, fuzzy
msgid "As an example, we will implement a straightforward HTTP application. Nothing fancy:"
msgstr "作为一个例子，我们将实现一个简单的HTTP应用程序。没有什么花哨的东西。"

#: _posts/2021-01-12-magic-control.adoc
#, fuzzy
msgid ""
"The complete source code is available https://github.com/cescoffier/quarkus-magic-control/tree/main/no-magic-example[here].\n"
"Don't expect much more; the application had only one Java class, but let's look into it."
msgstr "link:https://github.com/cescoffier/quarkus-magic-control/tree/main/no-magic-example[这里] 有完整的源代码。不要期望更多，该应用程序只有一个 Java 类，但让我们来看看它。"

#: _posts/2021-01-12-magic-control.adoc
#, fuzzy
msgid ""
"The `@QuarkusMain` indicates that Quarkus should use this class as the _main entry point_ of the application.\n"
"The `run` method contains your application logic.\n"
"We will come back to this logic later.\n"
"First, look at the `public static void main(String... args)` method.\n"
"It just starts the application.\n"
"You can use this entry point directly from your IDE.\n"
"Yes, there is still a bit of magic behind `Quarkus.run`; that's where the extension initialization happens - not unlike _any_ framework initialization including Vert.x.\n"
"As this application does not use any extension, nothing much will happen."
msgstr "`@QuarkusMain` 表示 Quarkus 应将该类作为应用程序的 _主入口_ 。 `run` 方法包含应用程序逻辑。我们稍后再讨论这个逻辑。首先，请看 `public static void main(String…​ args)` 方法。它只是启动应用程序。您可以直接在集成开发环境中使用这个入口点。是的，在 `Quarkus.run` 后面还有一些魔法；这就是扩展初始化的地方--与包括 Vert.x 在内的 _任何_ 框架初始化都不一样。由于此应用程序不使用任何扩展，所以不会发生什么。"

#: _posts/2021-01-12-magic-control.adoc
#, fuzzy
msgid ""
"This application https://github.com/cescoffier/quarkus-magic-control/blob/main/no-magic-example/pom.xml#L17-L26[depends] directly on Vert.x Web and Vert.x Core.\n"
"The only Quarkus dependency is Arc (not used directly but required):"
msgstr "该应用程序直接 link:https://github.com/cescoffier/quarkus-magic-control/blob/main/no-magic-example/pom.xml#L17-L26[依赖] Vert.x Web 和 Vert.x Core。唯一依赖 Quarkus 的是 Arc（不直接使用，但必须使用）："

#: _posts/2021-01-12-magic-control.adoc
#, fuzzy
msgid ""
"Let's go back to the `run` method.\n"
"It contains the application logic, here, a dummy Vert.x application.\n"
"It creates the `Vertx` instance, a `Router`, registers a few routes, and starts the HTTP server.\n"
"Because we don't want the application to stop immediately, we _wait for exit_.\n"
"The `/bye` request handler illustrates how you can programmatically trigger the application shutdown."
msgstr "让我们回到 `run` 方法。它包含应用程序逻辑，这里是一个虚拟的 Vert.x 应用程序。它创建 `Vertx` 实例、 `Router` 、注册一些路由并启动 HTTP 服务器。因为我们不想让应用程序立即停止，所以要 _等待退出_ 。 `/bye` 请求处理程序说明了如何通过编程触发应用程序关闭。"

#: _posts/2021-01-12-magic-control.adoc
#, fuzzy
msgid ""
"This application has almost no magic, just a single annotation, and a regular Java entry point.\n"
"You may wonder why not using a bare Java program?\n"
"Even used that way, Quarkus provides benefits. For example, you can access the built-in configuration support as illustrated in the snippet:"
msgstr "这个应用程序几乎没有任何魔法，只有一个注释和一个普通的 Java 入口点。你可能会问，为什么不使用裸 Java 程序呢？即使以这种方式使用，Quarkus 也能带来很多好处。例如，你可以访问内置的配置支持，如代码段所示："

#. type: Plain text
#: _posts/2021-01-12-magic-control.adoc
#, fuzzy
msgid "The configuration is located in the `application.properties` file."
msgstr "该配置位于 `application.properties` 文件中。"

#: _posts/2021-01-12-magic-control.adoc
#, fuzzy
msgid ""
"This first approach has a few drawbacks.\n"
"It does not benefit from the built-time processing of Quarkus.\n"
"The logic executed at build time is packaged inside extensions, and in this case, we don't use extensions (except Arc).\n"
"Another issue is that compiling this application to native will fail because extensions are also involved during the native compilation.\n"
"Finally, the hot reload won't work, but you can directly restart the application from your IDE."
msgstr "第一种方法有一些缺点。它无法从 Quarkus 的构建时处理中获益。在构建时执行的逻辑打包在扩展中，而在本例中，我们不使用扩展（Arc 除外）。另一个问题是，将此应用程序编译为本地程序会失败，因为在本地程序编译过程中也涉及到扩展。最后，热重载不起作用，但可以直接从集成开发环境重新启动应用程序。"

#. type: Title ==
#: _posts/2021-01-12-magic-control.adoc
#, fuzzy, no-wrap
msgid "Using the managed Vert.x instance"
msgstr "使用管理的Vert.x实例"

#: _posts/2021-01-12-magic-control.adoc
#, fuzzy
msgid ""
"Quarkus uses Vert.x heavily.\n"
"The `quarkus-vertx-core` extension manages the Vert.x instance used by Quarkus.\n"
"You can use that instance directly and avoid creating the Vert.x instance.\n"
"If you need to configure the instance, you can configure it from https://quarkus.io/guides/all-config#quarkus-vertx-core_quarkus-vertx-core-eclipse-vert.x-core[the `application.properties`].\n"
"It also enables native packaging (as that extension contains the directive to compile Vert.x applications to native)."
msgstr "Quarkus 大量使用 Vert.x。 `quarkus-vertx-core` 扩展管理 Quarkus 使用的 Vert.x 实例。你可以直接使用该实例，避免创建 Vert.x 实例。如果需要配置该实例，可以通过 link:https://quarkus.io/guides/all-config#quarkus-vertx-core_quarkus-vertx-core-eclipse-vert.x-core[application.properties 进行] 配置。它还支持本机打包（因为该扩展包含将 Vert.x 应用程序编译为本机的指令）。"

#. type: Plain text
#: _posts/2021-01-12-magic-control.adoc
#, fuzzy
msgid "In your pom.xml file, just add the following dependency:"
msgstr "在你的pom.xml文件中，只需添加以下依赖关系。"

#. type: Plain text
#: _posts/2021-01-12-magic-control.adoc
#, fuzzy
msgid "With this, the _run_ method becomes:"
msgstr "有了这个， _运行_ 方法就变成了。"

#: _posts/2021-01-12-magic-control.adoc
#, fuzzy
msgid ""
"Note how it retrieves the managed Vert.x instance.\n"
"While you can use `@Inject`, you can also retrieve it programmatically, the rest of the code does not change.\n"
"See? No magic for you!\n"
"We can still start it from the IDE using the _main_ method."
msgstr "请注意它是如何检索托管 Vert.x 实例的。虽然可以使用 `@Inject` ，但也可以通过编程检索，代码的其余部分不会改变。看到了吗？没有魔法！我们仍然可以在 IDE 中使用 _main_ 方法启动它。"

#. type: Plain text
#: _posts/2021-01-12-magic-control.adoc
#, fuzzy
msgid "If you don't include the `quarkus-vertx-core` extension (or any extension depending on it), Quarkus won't create the Vert.x instance."
msgstr "如果你不包括 `quarkus-vertx-core` 扩展（或任何依赖于它的扩展），Quarkus将不会创建Vert.x实例。"

#. type: Plain text
#: _posts/2021-01-12-magic-control.adoc
#, fuzzy
msgid "Using extensions gives you some property wiring as well as the build time optimisations and native image compilation:"
msgstr "使用扩展可以提供一些属性接线，以及构建时间优化和本地图像编译。"

#. type: Plain text
#: _posts/2021-01-12-magic-control.adoc
#, fuzzy
msgid "But, still no hot reload 😿."
msgstr "但是，仍然没有热重装😿。"

#. type: Title ==
#: _posts/2021-01-12-magic-control.adoc
#, fuzzy, no-wrap
msgid "Using the managed HTTP server"
msgstr "使用被管理的HTTP服务器"

#: _posts/2021-01-12-magic-control.adoc
#, fuzzy
msgid ""
"Instead of using only the `quarkus-vertx-core` extension, we can choose to delegate the HTTP server to Quarkus.\n"
"You may see that as a loss of control, but actually, we rarely do much around it, and again, you can configure it from the `application.properties` file if needed."
msgstr "我们可以选择将 HTTP 服务器委托给 Quarkus，而不是只使用 `quarkus-vertx-core` 扩展。你可能会认为这样做会失去控制，但实际上，我们很少这样做，而且，如果需要的话，你也可以在 `application.properties` 文件中进行配置。"

#. type: Plain text
#: _posts/2021-01-12-magic-control.adoc
#, fuzzy
msgid "Instead of ``quarkus-vertx-core`, use `quarkus-vertx-http`:"
msgstr "用 ``quarkus-vertx-core` ，而不是用 `quarkus-vertx-http` 。"

#. type: Plain text
#: _posts/2021-01-12-magic-control.adoc
#, fuzzy
msgid "No need to depend on Vert.x Web directly, it's included."
msgstr "不需要直接依赖Vert.x Web，它已经包括在内。"

#. type: Plain text
#: _posts/2021-01-12-magic-control.adoc
#, fuzzy
msgid "You will still register your routes, but using a managed `Router`:"
msgstr "你仍将注册你的路线，但使用一个管理的 `Router` 。"

#: _posts/2021-01-12-magic-control.adoc
#, fuzzy
msgid ""
"That approach enables the Quarkus hot reload as it intercepts the HTTP requests.\n"
"You are still in control of everything related to your application logic."
msgstr "这种方法可以让 Quarkus 在拦截 HTTP 请求时进行热重载。您仍然可以控制与应用程序逻辑相关的一切。"

#. type: Plain text
#: _posts/2021-01-12-magic-control.adoc
#, fuzzy
msgid "You can start the hot reload using:"
msgstr "你可以用以下方法启动热重装。"

#. type: Title ==
#: _posts/2021-01-12-magic-control.adoc
#, fuzzy, no-wrap
msgid "The final _magic touch_"
msgstr "最后的 _神奇_ 之处"

#: _posts/2021-01-12-magic-control.adoc
#, fuzzy
msgid ""
"The question, now, is how far are we from a _regular_ Quarkus application?\n"
"Quite close, actually.\n"
"The equivalent application using RESTEasy Reactive would be something like:"
msgstr "现在的问题是，我们离 _普通的_ Quarkus 应用程序还有多远？其实已经很接近了。使用 RESTEasy Reactive 的等效应用程序会是这样的："

#: _posts/2021-01-12-magic-control.adoc
#, fuzzy
msgid ""
"Unlike the previous approaches, this one leverages a declarative (annotation-based) model.\n"
"Under the hood, it's not that different from the last approach.\n"
"Quarkus registers a route (on the router), which then calls the `hello` method when a matching request is received.\n"
"The router gets initialized during the `Quarkus.run` method.\n"
"No need for the _main_ endpoint, but you can still use one, often convenient in IDEs."
msgstr "与前几种方法不同的是，这种方法采用了声明式（基于注释）模型。在引擎盖下，它与上一种方法并无太大区别。Quarkus 在路由器上注册一个路由，然后在收到匹配请求时调用 `hello` 方法。路由器会在 `Quarkus.run` 方法中初始化。不需要 _主_ 端点，但你仍然可以使用 _主_ 端点，这在集成开发环境中通常很方便。"

#. type: Title ==
#: _posts/2021-01-12-magic-control.adoc
#, fuzzy, no-wrap
msgid "Summary"
msgstr "摘要"

#: _posts/2021-01-12-magic-control.adoc
#, fuzzy
msgid ""
"Our relation to magic depends on our background and experience.\n"
"Quarkus lets you decide how much magic you accept.\n"
"This post presented fours configurations, going from almost no magic to the _regular_ Quarkus code.\n"
"Each approach has pros and cons:"
msgstr "我们与魔法的关系取决于我们的背景和经验。Quarkus 可以让你决定接受多少魔法。这篇文章介绍了四种配置，从几乎没有魔法到 _常规的_ Quarkus 代码。每种方法都各有利弊："

#. type: Table
#: _posts/2021-01-12-magic-control.adoc
#, fuzzy, no-wrap
msgid "Control"
msgstr "控制"

#. type: Table
#: _posts/2021-01-12-magic-control.adoc
#, fuzzy, no-wrap
msgid "Build time optimizations"
msgstr "构建时间的优化"

#. type: Table
#: _posts/2021-01-12-magic-control.adoc
#, fuzzy, no-wrap
msgid "Native executable"
msgstr "本地可执行文件"

#. type: Table
#: _posts/2021-01-12-magic-control.adoc
#, fuzzy, no-wrap
msgid "Hot Reload"
msgstr "热重装"

#. type: Table
#: _posts/2021-01-12-magic-control.adoc
#, fuzzy, no-wrap
msgid "_Almost no magic_"
msgstr "_几乎没有魔法_"

#. type: Table
#: _posts/2021-01-12-magic-control.adoc
#, fuzzy, no-wrap
msgid "Full"
msgstr "全部"

#. type: Table
#: _posts/2021-01-12-magic-control.adoc
#, fuzzy, no-wrap
msgid "🥵"
msgstr "🥵"

#. type: Table
#: _posts/2021-01-12-magic-control.adoc
#, fuzzy, no-wrap
msgid "Use the managed Vert.x instance"
msgstr "使用托管的 Vert.x 实例"

#. type: Table
#: _posts/2021-01-12-magic-control.adoc
#, fuzzy, no-wrap
msgid "Everything but Vert.x"
msgstr "除 Vert.x 以外的所有内容"

#. type: Table
#: _posts/2021-01-12-magic-control.adoc
#, fuzzy, no-wrap
msgid "😀, for Vert.x"
msgstr "😀，为 Vert.x"

#. type: Table
#: _posts/2021-01-12-magic-control.adoc
#, fuzzy, no-wrap
msgid "😀"
msgstr "😀"

#. type: Table
#: _posts/2021-01-12-magic-control.adoc
#, fuzzy, no-wrap
msgid "Use the managed HTTP server"
msgstr "使用托管 HTTP 服务器"

#. type: Table
#: _posts/2021-01-12-magic-control.adoc
#, fuzzy, no-wrap
msgid "Everything but Vert.x and the HTTP server"
msgstr "除 Vert.x 和 HTTP 服务器外的所有内容"

#. type: Table
#: _posts/2021-01-12-magic-control.adoc
#, fuzzy, no-wrap
msgid "😀, for Vert.x and HTTP"
msgstr "😀，用于 Vert.x 和 HTTP"

#. type: Table
#: _posts/2021-01-12-magic-control.adoc
#, fuzzy, no-wrap
msgid "_Regular_ Quarkus"
msgstr "_普通_ 夸克"

#. type: Table
#: _posts/2021-01-12-magic-control.adoc
#, fuzzy, no-wrap
msgid "Endpoint managed by Quarkus"
msgstr "由 Quarkus 管理的终端"

#: _posts/2021-01-12-magic-control.adoc
#, fuzzy
msgid ""
"Pick the approach that fits your needs.\n"
"Besides, most of Quarkus services are also available using a programmatic approach, as we have seen for configuration.\n"
"So, if you prefer avoiding managed objects, feel free just to use the available APIs."
msgstr "选择适合你需要的方法。此外，大多数 Quarkus 服务也可以使用编程方法，就像我们在配置中看到的那样。因此，如果你不想使用托管对象，可以直接使用可用的应用程序接口。"
