# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:1
#, fuzzy, no-wrap
msgid "jcarvaja"
msgstr "jcarvaja"

#. type: YAML Front Matter: date
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:1
#, fuzzy, no-wrap
msgid "2021-03-15"
msgstr "2021-03-15"

#. type: YAML Front Matter: layout
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "职位"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:1
#, fuzzy, no-wrap
msgid "Expose Quarkus Apps metrics into OpenShift using Micrometer and Prometheus"
msgstr "使用Micrometer和Prometheus将Quarkus Apps的指标暴露在OpenShift中"

#. type: YAML Front Matter: tags
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:1
#, fuzzy, no-wrap
msgid "extension"
msgstr "延伸"

#. type: YAML Front Matter: title
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:1
#, fuzzy, no-wrap
msgid "Monitoring Quarkus apps using Micrometer and Prometheus into OpenShift"
msgstr "在OpenShift中使用Micrometer和Prometheus监控Quarkus应用程序"

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:11
#, fuzzy
msgid "Metrics are the measurements of any aspect of an application such as resource usage or behaviors. We can expose these metrics from our Quarkus applications by using the https://quarkus.io/guides/micrometer[Micrometer] extension via the `/q/metrics` endpoint."
msgstr "指标是对一个应用程序的任何方面的测量，如资源使用或行为。我们可以通过 `/q/metrics` 端点使用 link:https://quarkus.io/guides/micrometer[Micrometer] 扩展，从我们的Quarkus应用程序中公开这些指标。"

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:13
#, fuzzy
msgid "What metrics will be exposed? Only by adding the Micrometer extension, a lot of metrics are exposed by default for example metrics about the JVM engine like the number of current live threads `jvm_threads_live_threads` or metrics about the system itself like the current CPU usage `system_cpu_usage`. Additionally, more metrics will automatically be exposed depending on other Quarkus extensions we might be using. For example, if we are using a Quarkus REST extension such as Resteasy, it will automatically expose metrics about your running services:"
msgstr "哪些指标将被公开？只有通过添加Micrometer扩展，很多指标才会被默认暴露出来，例如关于JVM引擎的指标，如当前实时线程数 `jvm_threads_live_threads` ，或者关于系统本身的指标，如当前CPU使用率 `system_cpu_usage` 。此外，根据我们可能使用的其他Quarkus扩展，更多的指标会自动暴露。例如，如果我们使用Quarkus的REST扩展，如Resteasy，它将自动暴露关于你的运行服务的指标。"

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:18
#, fuzzy
msgid "``` http_server_requests_seconds_count{method=\"GET\",outcome=\"SUCCESS\",status=\"200\",uri=\"/hello\",} 1.0 http_server_requests_seconds_sum{method=\"GET\",outcome=\"SUCCESS\",status=\"200\",uri=\"/hello\",} 0.018198043 ```"
msgstr " `` "

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:20
#, fuzzy
msgid "The same will happen if we're using the Kafka extension. All this configuration is well documented in https://quarkus.io/guides/micrometer[the Quarkus Micrometer guide]."
msgstr "如果我们使用Kafka扩展，也会发生同样的情况。所有这些配置在 link:https://quarkus.io/guides/micrometer[Quarkus Micrometer指南] 中都有详细说明。"

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:22
#, fuzzy
msgid "__How are these metrics consumed?__ As said, Micrometer exposes the metrics on the `/q/metrics` endpoint in order to be consumed by third parties like https://prometheus.io/[Prometheus]. OpenShift provides an embedded Prometheus instance that we can use. So, let's see what we need to do to integrate our Quarkus Applications metrics and the Prometheus embedded instance provided in OpenShift."
msgstr " _这些指标是如何被消费的？_ 如前所述，Micrometer将指标暴露在 `/q/metrics` 端点上，以便被 link:https://prometheus.io/[Prometheus] 等第三方使用。OpenShift提供了一个嵌入式Prometheus实例，我们可以使用。所以，让我们看看我们需要做什么来整合我们的Quarkus应用程序指标和OpenShift提供的Prometheus嵌入式实例。"

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:24
#, fuzzy
msgid "Basically, we need to complete the next following steps:"
msgstr "基本上，我们需要完成接下来的以下步骤。"

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:26
#, fuzzy
msgid "Enable Monitoring for user-defined projects in OpenShift"
msgstr "为OpenShift中用户定义的项目启用监控"

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:27
#, fuzzy
msgid "Deploy our Quarkus application"
msgstr "部署我们的Quarkus应用程序"

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:28
#, fuzzy
msgid "Create a Service monitor in our project"
msgstr "在我们的项目中创建一个服务监视器"

#. type: Title ==
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:29
#, fuzzy, no-wrap
msgid "Requirements"
msgstr "要求"

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:32
#, fuzzy
msgid "https://docs.openshift.com/container-platform/4.7/cli_reference/openshift_cli/getting-started-cli.html[Openshift CLI]"
msgstr "link:https://docs.openshift.com/container-platform/4.7/cli_reference/openshift_cli/getting-started-cli.html[Openshift CLI]"

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:33
#, fuzzy
msgid "An Openshift instance"
msgstr "一个Openshift实例"

#. type: Title ==
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:34
#, fuzzy, no-wrap
msgid "Step 1 - Enable Monitoring for user-defined projects in OpenShift"
msgstr "第1步 - 为OpenShift中的用户定义的项目启用监控"

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:37
#, fuzzy
msgid "In order to enable the Monitoring for user-defined projects, we need to follow the instructions https://docs.openshift.com/container-platform/4.7/monitoring/enabling-monitoring-for-user-defined-projects.html[from OpenShift documentation]."
msgstr "为了启用用户定义项目的监控，我们需要遵循 link:https://docs.openshift.com/container-platform/4.7/monitoring/enabling-monitoring-for-user-defined-projects.html[OpenShift文档中的] 指示。"

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:39
#, fuzzy
msgid "In essence, we need to create a ConfigMap in the namespace `openshift-monitoring`."
msgstr "从本质上讲，我们需要在命名空间 `openshift-monitoring` ，创建一个ConfigMap。"

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:41
#, fuzzy
msgid "`cluster-monitoring-config.yaml`:"
msgstr " `cluster-monitoring-config.yaml` :"

#. type: delimited block -
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:51
#, no-wrap
msgid ""
"apiVersion: v1\n"
"kind: ConfigMap\n"
"metadata:\n"
"    name: cluster-monitoring-config\n"
"    namespace: openshift-monitoring\n"
"data:\n"
"    config.yaml: |\n"
"    enableUserWorkload: true\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:54
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:198
#, fuzzy
msgid "And apply it:"
msgstr "并应用它。"

#. type: delimited block -
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:58
#, no-wrap
msgid "oc apply -f cluster-monitoring-config.yaml\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:61
#, fuzzy
msgid "For 4.5 or previous versions of OpenShift, you need to use instead:"
msgstr "对于4.5或以前版本的OpenShift，你需要使用代替。"

#. type: delimited block -
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:73
#, no-wrap
msgid ""
"apiVersion: v1\n"
"kind: ConfigMap\n"
"metadata:\n"
"    name: cluster-monitoring-config\n"
"    namespace: openshift-monitoring\n"
"data:\n"
"    config.yaml: |\n"
"    techPreviewUserWorkload:\n"
"        enabled: true\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:76
#, fuzzy
msgid "Openshift will automatically create the `openshift-user-workload-monitoring` namespace and deploy the required resources for Prometheus to it."
msgstr "Openshift会自动创建 `openshift-user-workload-monitoring` 命名空间，并将Prometheus所需的资源部署到其中。"

#. type: Title ==
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:77
#, fuzzy, no-wrap
msgid "2. Deploy our Quarkus application"
msgstr " 部署我们的Quarkus应用程序 "

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:80
#, fuzzy
msgid "After the required infrastructure in OpenShift is ready, then let's continue with the Quarkus application. We'll implement a REST API and enable micrometer with prometheus which requires the addition of two Quarkus extensions to our `pom.xml` file:"
msgstr "在OpenShift中所需要的基础设施准备好之后，让我们继续进行Quarkus应用。我们将实现一个REST API，并通过Prometheus启用micrometer，这需要在我们的 `pom.xml` 文件中添加两个Quarkus扩展。"

#. type: delimited block -
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:91
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-micrometer-registry-prometheus</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:94
#, fuzzy
msgid "And we'll add the Greeting resource:"
msgstr "我们将添加问候语资源。"

#. type: delimited block -
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:101
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.PathParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:104
#, no-wrap
msgid ""
"import io.micrometer.core.instrument.MeterRegistry;\n"
"import io.micrometer.core.instrument.Tags;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:107
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class GreetingsResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:110
#, no-wrap
msgid ""
"    @Inject\n"
"    MeterRegistry registry;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:115
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/{name}\")\n"
"    public String sayHello(@PathParam(value = \"name\") String name) {\n"
"        registry.counter(\"greeting_counter\", Tags.of(\"name\", name)).increment();\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:119
#, no-wrap
msgid ""
"        return \"Hello!\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:122
#, fuzzy
msgid "As we can see, we use the micrometer registry facade to create a counter with a tag by name that will be incremented every time it's invoked."
msgstr "正如我们所看到的，我们使用micrometer注册表的facade来创建一个带有标签名称的计数器，每次调用都会递增。"

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:124
#, fuzzy
msgid "Let's try this application by running it:"
msgstr "让我们通过运行这个应用程序来试试。"

#. type: delimited block -
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:128
#, no-wrap
msgid "mvn compile quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:131
#, fuzzy
msgid "Now, we should be able to call our service:"
msgstr "现在，我们应该能够调用我们的服务。"

#. type: delimited block -
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:135
#, no-wrap
msgid "curl http://localhost:8080/hello/quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:138
#, fuzzy
msgid "And it should return `Hello!`. So good so far, we can also see the metrics in `http://localhost:8080/q/metrics` where should see our `greeting_counter` counter:"
msgstr "而它应该返回 `Hello!` 。到目前为止很好，我们还可以看到在 `<a href=\"http://localhost:8080/q/metrics\" class=\"bare\">http://localhost:8080/q/metrics</a>` 其中应该看到我们的 `greeting_counter` 计数器。"

#. type: delimited block -
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:144
#, no-wrap
msgid ""
"# HELP greeting_counter_total  \n"
"# TYPE greeting_counter_total counter\n"
"greeting_counter_total{name=\"quarkus\",} 1.0\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:147
#, fuzzy
msgid "Next, we need to deploy our Quarkus application into OpenShift. For ease this step, Quarkus provides a super useful extension called `quarkus-openshift`, let's add it into our `pom.xml` file:"
msgstr "接下来，我们需要将我们的Quarkus应用程序部署到OpenShift中。为了简化这一步，Quarkus提供了一个超级有用的扩展，叫做 `quarkus-openshift` ，让我们把它添加到我们的 `pom.xml` 文件中。"

#. type: delimited block -
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:154
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-openshift</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:157
#, fuzzy
msgid "So, let's deploy our application into a newly created project `my-project` in OpenShift:"
msgstr "因此，让我们把我们的应用程序部署到OpenShift中一个新创建的项目 `my-project` 。"

#. type: delimited block -
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:162
#, no-wrap
msgid ""
"oc new-project my-project\n"
"mvn clean package -Dquarkus.kubernetes.deploy=true -Dquarkus.openshift.expose=true -Dquarkus.openshift.labels.app-with-metrics=quarkus-app\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:165
#, fuzzy
msgid "The label `app-with-metrics` will be used in a later step to select the applications to monitor by OpenShift."
msgstr "标签 `app-with-metrics` 将在后面的步骤中用于选择由OpenShift监控的应用程序。"

#. type: Title ==
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:166
#, fuzzy, no-wrap
msgid "3. Create a Service monitor in our project"
msgstr " 在我们的项目中创建一个服务监视器 "

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:169
#, fuzzy
msgid "Before moving forward, let's explain first how Prometheus works. Prometheus uses a pull model to get metrics from applications. This means that Prometheus will scrape or watch endpoints to pull metrics from."
msgstr "在前进之前，让我们首先解释一下Prometheus是如何工作的。普罗米修斯使用拉动模型从应用程序中获取指标。这意味着普罗米修斯将刮取或观察端点，以便从中获取指标。"

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:171
#, fuzzy
msgid "From the previous step, our service is now running in OpenShift, but we didn't configure anything in Prometheus to scrape our service yet. This is done by the Service Monitor resource:"
msgstr "从上一步来看，我们的服务现在已经在OpenShift中运行了，但是我们还没有在Prometheus中配置任何东西来搜刮我们的服务。这是由服务监控资源完成的。"

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:173
#, fuzzy
msgid "`service-monitor.yaml`:"
msgstr " `service-monitor.yaml` :"

#. type: delimited block -
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:191
#, no-wrap
msgid ""
"apiVersion: monitoring.coreos.com/v1\n"
"kind: ServiceMonitor\n"
"metadata:\n"
"  labels:\n"
"    k8s-app: prometheus-app-monitor\n"
"  name: prometheus-app-monitor\n"
"  namespace: my-project\n"
"spec:\n"
"  endpoints:\n"
"  - interval: 30s\n"
"    targetPort: 8080\n"
"    path: /q/metrics\n"
"    scheme: http\n"
"  selector:\n"
"    matchLabels:\n"
"      app-with-metrics: 'quarkus-app'\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:194
#, fuzzy
msgid "The path `/q/metrics` is the default metrics endpoint in Quarkus."
msgstr "路径 `/q/metrics` 是Quarkus中默认的度量衡端点。"

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:196
#, fuzzy
msgid "We could configure the `/metrics` endpoint Prometheus expects in `application.properties` instead of adding the path attribute above using the following property: `quarkus.micrometer.export.prometheus.path=/metrics`."
msgstr "我们可以在 `application.properties` 中配置Prometheus期望的 `/metrics` 端点，而不是使用以下属性添加上面的路径属性： `quarkus.micrometer.export.prometheus.path=/metrics` 。"

#. type: delimited block -
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:202
#, no-wrap
msgid "oc apply -f service-monitor.yaml\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:205
#, fuzzy
msgid "What we have just done is to create a Service Monitor named `prometheus-app-monitor` that will select apps with the label `app-with-metrics: quarkus-app` that was added in the previous step. Then, OpenShift will call the endpoint `/q/metrics` for all the services labeled with `app-with-metrics: quarkus-app` every 30 seconds."
msgstr "我们刚才做的是创建一个名为 `prometheus-app-monitor` 的服务监控器，它将选择上一步中添加的标签为 `app-with-metrics: quarkus-app` 的应用。然后，OpenShift将每隔30秒为所有标有 `app-with-metrics: quarkus-app` 的服务调用端点 `/q/metrics` 。"

#. type: Title ==
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:206
#, fuzzy, no-wrap
msgid "Finally, let's start using it!"
msgstr "最后，让我们开始使用它吧!"

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:209
#, fuzzy
msgid "First, we need to call our greetings service: `http://quarkus-micrometer-my-project.ocp.host/hello/quarkus`. This will increment the `greeting_counter_total` counter. But where can we see the metrics? Let's browse to OpenShift Console in the `Developer > Monitoring` view, select `Metrics`, then `Custom Query` and type `greeting_counter_total{name = \"quarkus\"}`, we should see now:"
msgstr "首先，我们需要调用我们的问候服务。 `<a href=\"http://quarkus-micrometer-my-project.ocp.host/hello/quarkus\" class=\"bare\">http://quarkus-micrometer-my-project.ocp.host/hello/quarkus</a>` .这将使 `greeting_counter_total` 计数器增量。但是我们在哪里可以看到这些指标呢？让我们在 `Developer > Monitoring` 视图中浏览OpenShift控制台，选择 `Metrics` ，然后选择 `Custom Query` ，再输入 `greeting_counter_total{name = \"quarkus\"}` ，我们现在应该看到。"

#. type: Target for macro image
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:210
#, no-wrap
msgid "/assets/images/posts/micrometer-openshift/micrometer-quarkus-io.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:212
msgid "Great! We are now exposing our Quarkus Application metrics in OpenShift!"
msgstr ""
