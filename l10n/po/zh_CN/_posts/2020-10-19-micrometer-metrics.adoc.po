# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:1
#, fuzzy, no-wrap
msgid "kenfinnigan"
msgstr "冯小刚"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:1
#, fuzzy, no-wrap
msgid "2020-10-19"
msgstr "2020-10-19"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "职位"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:1
#, fuzzy, no-wrap
msgid "Micrometer is the recommended approach for metrics with Quarkus."
msgstr "Micrometer是推荐使用Quarkus进行度量的方法。"

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:1
#, fuzzy, no-wrap
msgid "metrics announcement micrometer"
msgstr "度量衡公告千分尺"

#. type: YAML Front Matter: title
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:1
#, fuzzy, no-wrap
msgid "Micrometer is recommended for metrics with Quarkus 1.9"
msgstr "建议用Quarkus 1.9进行测量时使用千分表。"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:13
#, fuzzy
msgid "Though Quarkus offers extensions for MicroProfile, including metrics, we're now recommending the use of the Micrometer extension for metrics in Quarkus with the release of 1.9."
msgstr "尽管Quarkus为MicroProfile提供了扩展，包括度量衡，但我们现在推荐在Quarkus中使用Micrometer扩展的度量衡，1.9版本的发布。"

#. type: Title ==
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:14
#, fuzzy, no-wrap
msgid "Brief MicroProfile Metrics History"
msgstr "MicroProfile度量衡简史"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:19
#, fuzzy
msgid "During the creation of the MicroProfile Metrics specification in 2017, Dropwizard Metrics was the most popular metrics library at that time.  It was a natural fit for MicroProfile to use DropWizard Metrics as inspiration for a metrics specification."
msgstr "在2017年创建MicroProfile度量规范期间，Dropwizard Metrics是当时最流行的度量库。MicroProfile使用DropWizard Metrics作为度量规范的灵感是很自然的。"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:22
#, fuzzy
msgid "The monitoring ecosystem for cloud environments has evolved considerably since then, and that has prompted a re-evaluation of how we approach working with metrics."
msgstr "从那时起，云环境的监控生态系统有了很大的发展，这也促使我们重新评估如何处理与指标的关系。"

#. type: Title ==
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:24
#, fuzzy, no-wrap
msgid "Why Micrometer?"
msgstr "为什么是千分尺？"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:30
#, fuzzy
msgid "During the last 3-4 years, there's been a growing focus on the needs of Site Reliability Engineers (SREs) in monitoring the operations of many varied services.  This focus leads to driving simplicity and ease of use to the SRE world.  We don't want make the life of an SRE harder!"
msgstr "在过去的3-4年中，人们越来越关注网站可靠性工程师（SRE）在监控许多不同服务的运行方面的需求。这种关注导致了SRE世界的简单性和易用性的推动。我们不希望让SRE的生活变得更难!"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:35
#, fuzzy
msgid "The design and development of Micrometer focused on the needs of SREs from the very beginning.  A key aspect to that approach is separating out the metric implementation into the registries, enabling different registries to customize how the metric export, aligning with a specific monitoring tool."
msgstr "Micrometer的设计和开发从一开始就关注SRE的需求。这种方法的一个关键方面是将公制的实施分离到登记处，使不同的登记处能够定制公制的输出方式，与特定的监测工具保持一致。"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:41
#, fuzzy
msgid "Micrometer was built to adapt to the changing cloud native landscape while presenting a steady API for applications and libraries to use.  Each MeterRegistry implementation encapsulates its specific aggregation and reporting requirements.  There are MeterRegistry implementations available for cloud monitoring systems like Prometheus and Statsd, as well as service providers like Datadog, New Relic or Stackdriver.  You can include more than one of these registries at the same time, too."
msgstr "Micrometer的建立是为了适应不断变化的云原生环境，同时为应用程序和库提供了一个稳定的API。每个MeterRegistry的实现都封装了其特定的聚集和报告要求。有一些MeterRegistry实现可用于云监控系统，如Prometheus和Statsd，以及Datadog、New Relic或Stackdriver等服务提供商。你也可以同时包括一个以上的注册表。"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:46
#, fuzzy
msgid "While Micrometer has an API for applications to use, practical usage is more focused on the MeterBinder abstraction.  MeterBinders allow instrumentation for application libraries to be added later.  It is even better when your application framework can register discovered MeterBinders on your behalf."
msgstr "虽然Micrometer有一个供应用程序使用的API，但实际使用中更注重MeterBinder的抽象性。MeterBinders允许以后添加应用程序库的仪器。如果你的应用程序框架可以代表你注册发现的MeterBinders，那就更好了。"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:52
#, fuzzy
msgid "Micrometer does follow different naming conventions than Dropwizard or MP Metrics, for a few reasons.  First, it uses a dot notation for all metric names, e.g. my.metric.name.  Each registry implementation can then apply its own naming convention to convert that name into something that matches its convention.  The Prometheus MeterRegistry converts my.metric.name into my_metric_name, for example.  Second, Micrometer was built around the notion of dimensional metrics, rather than adapting to it later."
msgstr "Micrometer确实遵循与Dropwizard或MP Metrics不同的命名惯例，原因有以下几点。首先，它对所有的度量衡名称使用点符号，例如：my.metric.name。然后，每个注册表的实现都可以应用它自己的命名惯例，将该名称转换为符合其惯例的东西。例如，Prometheus MeterRegistry将my.metric.name转换为my_metric_name。第二，Micrometer是围绕着尺寸度量的概念建立的，而不是后来才适应的。"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:57
#, fuzzy
msgid "Another benefit to using Micrometer is its usage in the wider Java ecosystem.  Spring Boot and Micronaut both use Micrometer, amongst others.  In an environment where SREs are monitoring instances of different Java frameworks, having them all produce metrics with the same names and dimensions is incredibly beneficial."
msgstr "使用Micrometer的另一个好处是它在更广泛的Java生态系统中的应用。Spring Boot和Micronaut都使用Micrometer，还有其他的。在SRE监控不同Java框架实例的环境中，让它们都产生具有相同名称和尺寸的指标是非常有益的。"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:59
#, fuzzy
msgid "For example, we likely have a metric for an HTTP endpoint like below:"
msgstr "例如，我们可能有一个HTTP端点的指标，如下所示。"

#. type: delimited block -
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:64
#, no-wrap
msgid ""
"http_server_requests{method=\"GET\", uri=\"/hello\", status=\"200\", outcome=\"SUCCESS\"}\n"
"http_server_requests{method=\"GET\", uri=\"/hello\", status=\"500\", outcome=\"SERVER_ERROR\"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:70
#, fuzzy
msgid "With Quarkus, the Micrometer extension emits the same HTTP endpoint metric irrespective of whether it was created by JAX-RS, Vert.x, or Undertow without the developer needing to add anything to their code.  The only effort required is to activate metrics."
msgstr "有了Quarkus，Micrometer扩展会发出相同的HTTP端点度量，无论它是由JAX-RS、Vert.x还是Undertow创建的，开发人员都不需要在他们的代码中添加任何东西。唯一需要做的就是激活度量。"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:73
#, fuzzy
msgid "The http metrics emitted by the Micrometer extension is the also same as what is emitted by Spring Boot and Micronaut, allowing SREs to work with aggregated http metrics regardless of which Java framework is used."
msgstr "Micrometer扩展发出的http指标也与Spring Boot和Micronaut发出的指标相同，允许SRE使用聚合的http指标，而不管使用哪种Java框架。"

#. type: Title ==
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:74
#, fuzzy, no-wrap
msgid "Can I still use MicroProfile Metrics?"
msgstr "我还能使用MicroProfile Metrics吗？"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:80
#, fuzzy
msgid "The MicroProfile Metrics extension, `quarkus-smallrye-metrics`, is still available and usable by applications.  For all the reasons outlined in <<why-micrometer>>, Quarkus no longer recommends applications use the extension."
msgstr "MicroProfile Metrics扩展， `quarkus-smallrye-metrics` ，仍然是可用的，并且可以被应用程序使用。由于 link:#why-micrometer[[why-micrometer]] 中列出的所有原因，Quarkus不再推荐应用程序使用该扩展。"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:84
msgid "In the short to medium term, we will be working with the MicroProfile Metrics community to evolve the specification to be aligned with Micrometer.  What that means for the specification is not likely to be known until some time in 2021."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:89
msgid "For those that prefer to retain compatibility with MicroProfile Metrics, despite the problems discussed in <<why-micrometer>>, that will remain possible, but at the discretion of application developers to make the informed choice."
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:90
#, no-wrap
msgid "Summary"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:96
msgid "Since 1.8 Quarkus offered two extensions for metrics, `quarkus-micrometer` and `quarkus-smallrye-metrics`.  With the release of 1.9, Quarkus will be recommending `quarkus-micrometer` for use with metrics."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:99
msgid "Come play with the extension, we love it for many reasons and hope you will too.  Reach out if you have any issues using the Micrometer extension in Quarkus!"
msgstr ""
