# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-07-11 19:07+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy, no-wrap
msgid "On the Road to CDI Compatibility"
msgstr "实现 CDI 兼容性之路"

#. type: YAML Front Matter: synopsis
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy, no-wrap
msgid "Quarkus is now compatible with CDI Lite."
msgstr "Quarkus 现在与 CDI Lite 兼容。"

#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid ""
"Ever since the very first days of Quarkus, the days that are now covered by the blissful fog of oblivion and the survivors only talk about them after a few pints of beer, dependency injection container was an integral part of the envisioned framework.\n"
"And not just any dependency injection container -- a link:/blog/quarkus-dependency-injection/[CDI implementation], of all things."
msgstr "自 Quarkus 诞生伊始，依赖注入容器就成为了设想框架中不可分割的一部分。而且还不是普通的依赖注入容器，而是一种 link:/blog/quarkus-dependency-injection/[CDI 实现] 。"

#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid ""
"At the very beginning, the CDI implementation used was Weld.\n"
"Very soon, the Masterminds and Deep Thoughts behind the CDI work in what eventually became Quarkus, Martin Kouba and Stuart Douglas, realized that Weld cannot possibly unlock the full potential that a build-time oriented framework conceals.\n"
"Thus, ArC was born."
msgstr "最初，CDI 使用的是 Weld。很快，Quarkus（最终成为 Quarkus）中 CDI 工作的幕后策划者和深思者马丁-库巴（Martin Kouba）和斯图尔特-道格拉斯（Stuart Douglas）意识到，Weld 不可能释放出面向构建时间的框架所隐藏的全部潜力。于是，ArC 应运而生。"

#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid ""
"When I first heard of ArC, I thought, surely that means _A reduced CDI_, especially with that capitalization!\n"
"Alas, I was deeply mistaken.\n"
"It is a reference to an activity that I could never possibly indulge in out of the simple concern for my health and safety: _arc welding_.\n"
"(That indeed is a backreference to Weld. There are some clever people here!)"
msgstr "当我第一次听说 ArC 时，我想，这肯定是 _A reduced CDI_ 的意思，尤其是大写字母！唉，我大错特错了。它指的是一种我出于对健康和安全的简单考虑而永远不可能沉迷的活动： _电弧焊_ 。(这确实是对 Weld 的反向引用，这里的人可真聪明！）。"

#. type: Title ==
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy, no-wrap
msgid "Arc Welding"
msgstr "电弧焊接"

#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid ""
"ArC started with one important architectural constraint that was significantly different to all other existing CDI implementations at that time: it ought to perform the heavy lifting during application build.\n"
"Among others, this includes the entire bean discovery process.\n"
"If you are familiar with AtInject and its various implementations, this concept doesn't come as a surprise.\n"
"For example, Guice is a popular dependency injection container that does all the work at application runtime, while Dagger is a popular alternative that precomputes dependency wiring at build time."
msgstr "ArC 一开始就有一个重要的架构约束，它与当时所有其他现有的 CDI 实现有很大不同：它应该在应用程序构建过程中执行繁重的工作。其中包括整个 Bean 发现过程。如果您熟悉 AtInject 及其各种实现，就不会对这一概念感到惊讶。例如，Guice 是一种流行的依赖注入容器，它在应用程序运行时完成所有工作，而 Dagger 则是一种流行的替代方案，它在构建时预先计算依赖布线。"

#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid ""
"With CDI, the situation is not that simple.\n"
"CDI 2.0, the latest version at that time, includes features that ultimately preclude running bean discovery at build time; most notably, the _Portable Extensions_ API.\n"
"To be able to execute portable extensions, you need to have a running CDI container (to deliver events or use the `BeanManager` API), you need to be able to reflect on application classes (the `Annotated*` types directly expose `java.lang.reflect` types), and you need to support portable extension instances holding various kinds of state (including started threads or open sockets)."
msgstr "对于 CDI 而言，情况并非如此简单。CDI 2.0（当时的最新版本）包含的功能最终排除了在构建时运行 bean 发现的可能性；其中最显著的是 _可移植_ 扩展 API。为了能够执行可移植扩展，您需要有一个正在运行的 CDI 容器（以传递事件或使用 `BeanManager` API），您需要能够反映应用程序类（ `Annotated*` 类型直接暴露 `java.lang.reflect` 类型），您还需要支持持有各种状态（包括已启动线程或已打开套接字）的可移植扩展实例。"

#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid ""
"There are also features that were challenging to implement, like efficient bean metadata storage and runtime access, or dynamic lookup, but those are _just work_.\n"
"Portable Extensions were downright impossible."
msgstr "还有一些功能的实现也很有挑战性，比如高效的 Bean 元数据存储和运行时访问，或者动态查找，但这些 _只是工作而已_ 。便携式扩展则完全不可能实现。"

#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid ""
"ArC made an obvious choice: it will not support Portable Extensions, it will not be a fully compatible implementation of CDI, and it will not be verified by the CDI TCK.\n"
"This decision opened the door to pruning some ancient CDI features that have not been widely used or were deemed not important enough for contemporary software world: conversations, specialization, passivation, interceptors bound using the `@Interceptors` annotation, enablement using `beans.xml`, and so on.\n"
"Some other features are not a good fit for the build-time approach either: the notion of explicit bean archives, `InterceptionFactory`, or some parts of the `BeanManager` API.\n"
"This might sound like a long list, but as a matter of fact, the result was a perfectly \"just enough\" implementation of CDI that allowed running a huge number of existing CDI-based libraries and frameworks, after writing a Quarkus-specific integration."
msgstr "ArC 做出了一个显而易见的选择：它将不支持可移植扩展（Portable Extensions），不是一个完全兼容的 CDI 实现，也不会通过 CDI TCK 的验证。这一决定为删减一些古老的 CDI 特性打开了大门，这些特性没有被广泛使用，或者被认为对当代软件世界不够重要：对话、特化、钝化、使用 `@Interceptors` 注释绑定的拦截器、使用 `beans.xml` 的启用等等。还有一些特性也不适合构建时方法：显式 Bean 档案的概念、 `InterceptionFactory` 或 `BeanManager` API 的某些部分。这听起来似乎是一个很长的列表，但事实上，在编写了 Quarkus 特定的集成之后，CDI 的实现已经 \"恰到好处\"，可以运行大量基于 CDI 的现有库和框架。"

#. type: Plain text
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid "All was nice and rosy, pink unicorns happily roamed flowery meadows, double rainbows glowed on clear sunny skies, and developers developed mighty microservices all over the link:https://twitter.com/Grady_Booch/status/1154493591487537152[kuberspace]. Over time, some features that were originally omitted, such as decorators, were also implemented."
msgstr "一切都很美好，粉红色的独角兽快乐地徜徉在鲜花盛开的草地上，双彩虹在晴朗的天空中熠熠生辉，开发人员在整个 link:https://twitter.com/Grady_Booch/status/1154493591487537152[库伯空间] 开发出了强大的微服务。随着时间的推移，一些原本被省略的功能（如装饰器）也得以实现。"

#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid ""
"Of course, some people tried to complain that Quarkus claims it implements CDI, while it really doesn't, because it doesn't pass the TCK, but we don't have to fuss over that.\n"
"The absence of these features has been clearly documented, and majestic exclusion lists have been a noble tradition in the CDI world since the beginning of time anyway."
msgstr "当然，有些人试图抱怨 Quarkus 声称自己实现了 CDI，但实际上并没有，因为它没有通过 TCK，但我们不必为此大惊小怪。这些功能的缺失已被清楚地记录在案，而雄伟的排除列表自古以来就是 CDI 世界的崇高传统。"

#. type: Title ==
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy, no-wrap
msgid "CDI Lite"
msgstr "CDI Lite"

#. type: Plain text
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid "ArC has quite successfully proven that there indeed is a small seed hidden in CDI, waiting to be watered and manured, waiting to grow and blossom and show to the world that CDI need not be just \"guiced\"; it can also be \"daggered\"."
msgstr "ArC 相当成功地证明，在 CDI 中确实隐藏着一粒小小的种子，等待着浇水和施肥，等待着生长和开花，并向世人展示，CDI 不需要只是 \"被指导\"，它也可以 \"被匕首\"。"

#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid ""
"A small group of engineers convened in Red Hat, trying to contrive a diabolical plan: could this be made part of CDI proper?\n"
"The idea was link:https://github.com/jakartaee/cdi/issues/425[discussed] externally and internally fairly extensively.\n"
"Fortunately, CDI was conceived at Red Hat, so we had all the experts, and the link:https://www.cdi-spec.org/news/2020/03/09/CDI_for_the_future/[first concrete idea] of how this could be done was published relatively soon."
msgstr "一小组工程师聚集在红帽公司，试图制定一个邪恶的计划：能否将其作为 CDI 的一部分？外部和内部都对这个想法进行了相当广泛的 link:https://github.com/jakartaee/cdi/issues/425[讨论] 。幸运的是，CDI 是在红帽公司构思的，因此我们拥有所有的专家，而且关于如何实现这一目标的 link:https://www.cdi-spec.org/news/2020/03/09/CDI_for_the_future/[第一个具体想法] 也很快公布了。"

#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid ""
"A huge part of those discussions revolved around Portable Extensions.\n"
"As mentioned earlier, they cannot be supported at build time, so we knew early on that we had to design a new extension API.\n"
"(This is when yours truly enters the scene, not planning to leave until the curtain falls.)\n"
"We made several prototypes of various aspects of the API, including a new language model, and eventually link:https://www.cdi-spec.org/news/2020/09/15/CDI_Lite_extension/[published a proposal] (beware, the article is now severely outdated!).\n"
"We called it _Build Compatible Extensions_, to highlight the stark contrast with Portable Extensions: this API can be implemented both at build time and at runtime."
msgstr "这些讨论的很大一部分都围绕可移植扩展展开。如前所述，在构建时无法支持这些扩展，因此我们很早就知道必须设计一个新的扩展 API。(这也是我真正进入现场的时候，我不打算在谢幕前离开）。我们为 API 的各个方面制作了几个原型，包括一个新的语言模型，并最终 link:https://www.cdi-spec.org/news/2020/09/15/CDI_Lite_extension/[发布了一份提案] （注意，这篇文章现在已经严重过时了！）。我们将其命名为 \" _构建兼容扩展\"（Build Compatible_ Extensions），以突出与 \"可移植扩展\"（Portable Extensions）的鲜明对比：该 API 既可以在构建时实现，也可以在运行时实现。"

#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid ""
"Publishing that proposal had two effects.\n"
"First, it has shown that communication is hard, online communication is harder and online communication in a non-native language is pretty darn painful.\n"
"Second, it has shown serious interest from us in doing the necessary work.\n"
"And it wasn't just us -- some Oracle people have also shown up, most notably Graeme Rocher of the Micronaut fame.\n"
"Over the subsequent year, the Core CDI specification was link:https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/CDI-Full-vs-CDI-Lite-What-changed-in-Contexts-and-Dependency-Injection-40[refactored] into CDI Lite and CDI Full, the Build Compatible Extensions API was link:https://jakartaee.github.io/cdi/2021/12/03/you-know-build-compatible-extensions.html[incorporated] (and for that, I actually implemented two prototypes, one in ArC and the other as a Portable Extension for Weld), the CDI TCK was split to support testing only CDI Lite implementations, and so on."
msgstr "发表该提案有两个效果。首先，它表明交流是困难的，在线交流更困难，而用非母语进行在线交流是非常痛苦的。其次，它显示了我们对开展必要工作的浓厚兴趣。不仅是我们，一些甲骨文公司的人也出现了，其中最著名的是 Micronaut 的格雷姆-罗彻尔（Graeme Rocher）。在随后的一年中，CDI 核心规范被 link:https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/CDI-Full-vs-CDI-Lite-What-changed-in-Contexts-and-Dependency-Injection-40[重构] 为 CDI Lite 和 CDI Full，Build Compatible Extensions API 被 link:https://jakartaee.github.io/cdi/2021/12/03/you-know-build-compatible-extensions.html[纳入] 其中（为此，我实际上实现了两个原型，一个在 ArC 中，另一个作为 Weld 的可移植扩展），CDI TCK 被拆分以仅支持 CDI Lite 实现的测试，等等。"

#. type: Plain text
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid "Finally, as part of Jakarta EE 10, CDI 4.0 was released, featuring the Lite specification, which became the cornerstone of Jakarta EE Core Profile, which in turn became the cornerstone of MicroProfile."
msgstr "最后，作为 Jakarta EE 10 的一部分，CDI 4.0 发布，其特点是 Lite 规范，它成为 Jakarta EE Core Profile 的基石，而 Core Profile 又成为 MicroProfile 的基石。"

#. type: Plain text
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid "End of story, go home? Not so fast."
msgstr "故事结束，回家？没那么快"

#. type: Title ==
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy, no-wrap
msgid "Compatible Implementation"
msgstr "兼容实施"

#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid ""
"Now that we have the CDI Lite specification, do we have any implementations?\n"
"Of course, all existing implementations of CDI become CDI Full implementations relatively easily; the hardest part is implementing the new extension API, which is possible using a Portable Extension.\n"
"But are there any _new_ implementations?\n"
"Is ArC a CDI Lite implementation now?\n"
"Is it verified by the TCK at last?"
msgstr "现在我们有了 CDI Lite 规范，那么我们是否有任何实现呢？当然，所有现有的 CDI 实现都可以比较容易地成为 CDI Full 实现；最困难的部分是实现新的扩展 API，这可以通过便携式扩展来实现。但是有 _新的_ 实现吗？ArC 现在是 CDI Lite 实现吗？它最终通过 TCK 验证了吗？"

#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid ""
"We naturally intended for ArC to implement CDI Lite, but it wasn't just ArC.\n"
"The link:https://projects.eclipse.org/projects/ee4j.odi[Eclipse Open DI] project also strives to become a CDI Lite implementation, and it is built on top of the Micronaut framework.\n"
"I can't speak for that project, but I can say that working on the CDI Lite specification together with the talented people behind ODI was a great experience!"
msgstr "我们自然希望 ArC 能够实现 CDI Lite，但这不仅仅是 ArC 的事情。 link:https://projects.eclipse.org/projects/ee4j.odi[Eclipse Open DI] 项目也致力于成为 CDI Lite 的实现，它建立在 Micronaut 框架之上。我不能代表该项目发言，但我可以说，与 ODI 背后的天才们一起制定 CDI Lite 规范是一次很棒的经历！"

#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid ""
"Now, when it comes to ArC, more work obviously ensued.\n"
"I fortunately already had an Arquillian adapter for ArC from the previous prototyping work (Arquillian is a testing framework the CDI TCK relies upon), and the other relevant TCKs are very easy to embed.\n"
"It wasn't too hard to start running them: the AtInject TCK, the CDI Lang Model TCK and the CDI Lite TCK.\n"
"We started running the TCKs with standalone ArC, to make the work easier and faster.\n"
"The CDI Lang Model TCK was always passing, as I was developing the implementation together with the specification, and getting the AtInject TCK to pass did not require too much time (it was mostly about implementing a precise resolution of overriden methods).\n"
"The CDI Lite TCK is clearly the most complex one; at the beginning, we had roughly 2/3 of the tests passing and the remaining 1/3 failing, for many different reasons."
msgstr "现在，说到 ArC，显然需要做更多的工作。幸运的是，我在之前的原型开发工作中已经有了 ArC 的 Arquillian 适配器（Arquillian 是 CDI TCK 依赖的测试框架），而且其他相关 TCK 也很容易嵌入。开始运行它们并不难：AtInject TCK、CDI Lang Model TCK 和 CDI Lite TCK。我们开始使用独立的 ArC 运行 TCK，以使工作更轻松、更快捷。CDI Lang Model TCK 一直都在通过，因为我是与规范一起开发实现的，而 AtInject TCK 的通过并不需要太多时间（主要是实现对重载方法的精确解析）。CDI Lite TCK 显然是最复杂的一个；一开始，我们大约有 2/3 的测试通过了，剩下的 1/3 则由于各种原因而失败。"

#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid ""
"During the Quarkus 2.16 development cycle, I created an initial exclusion list and we started closing the gap.\n"
"For a while, we had to work in an extra repository, until Quarkus moved from the `javax` dependencies to `jakarta`, but that was fairly simple to set up.\n"
"The Arquillian adapter needed improvements to correctly implement the CDI type discovery rules (because ArC leaves most of type discovery to the integrator).\n"
"Many validations were missing from ArC and we added those.\n"
"We even implemented some more features.\n"
"When standalone ArC was passing the TCKs, it didn't take much time to run them with full Quarkus too.\n"
"Overall, this link:https://github.com/quarkusio/quarkus/issues/28558[took] 26 pull requests and 109 commits, over the course of four to five months."
msgstr "在 Quarkus 2.16 开发周期中，我创建了一个初始排除列表，然后我们开始缩小差距。在 Quarkus 从 `javax` 迁移到 `jakarta` 之前，有一段时间，我们不得不在一个额外的资源库中工作，但设置起来相当简单。Arquillian 适配器需要改进才能正确实施 CDI 类型发现规则（因为 ArC 将大部分类型发现工作留给了集成者）。ArC 中缺少许多验证，我们添加了这些验证。我们甚至实现了更多的功能。当单机版 ArC 通过 TCK 时，在完整版 Quarkus 中运行它们也不会花费太多时间。总的来说，在四五个月的时间里，我们 link:https://github.com/quarkusio/quarkus/issues/28558[花了] 26 次拉取请求和 109 次提交。"

#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid ""
"We unfortunately also had to create a _strict mode_.\n"
"ArC has several usability improvements on top of the CDI specification, and a few of them go against the specification rules.\n"
"We recommend users to use the default mode which includes these improvements, but we also want to have an option to turn those improvements off, for people who value specification compatibility more."
msgstr "不幸的是，我们还不得不创建一个 _严格模式_ 。ArC 在 CDI 规范的基础上进行了多项可用性改进，其中一些改进违背了规范规则。我们建议用户使用包含这些改进的默认模式，但我们也希望为更重视规范兼容性的用户提供关闭这些改进的选项。"

#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid ""
"And since we are lazy people, like all decent programmers, running the TCKs is automated as part of the Quarkus Maven build (which means they also run on all pull requests to Quarkus that touch ArC).\n"
"If you want to try it yourself, it requires very little manual work."
msgstr "和所有正派的程序员一样，我们也是懒人，因此运行 TCK 是 Quarkus Maven 编译的一部分（这意味着它们也会在所有涉及 ArC 的 Quarkus 拉取请求中运行）。如果你想自己试试，只需要很少的手工操作。"

#. type: Plain text
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid "Clone the Quarkus repository, if you don’t have it already:"
msgstr "克隆 Quarkus 软件仓库（如果还没有）："

#. type: Plain text
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid "Build Quarkus:"
msgstr "建造夸克斯"

#. type: Plain text
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid "Run the AtInject TCK:"
msgstr "运行 AtInject TCK："

#. type: Plain text
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid "Run the CDI Lang Model TCK:"
msgstr "运行 CDI 朗模型 TCK："

#. type: Plain text
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid "Run the CDI Lite TCK:"
msgstr "运行 CDI Lite TCK："

#. type: Plain text
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid "If everything went fine, you should see the following outputs."
msgstr "如果一切顺利，您将看到以下输出结果。"

#. type: Plain text
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid "For AtInject:"
msgstr "用于 AtInject："

#. type: Plain text
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid "For CDI Lang Model:"
msgstr "用于 CDI Lang 型号："

#. type: Plain text
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid "For CDI Lite:"
msgstr "用于 CDI Lite："

#. type: Plain text
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid "And that's all, folks!"
msgstr "就这样，各位！"

#. type: Plain text
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid "It is my pleasure to announce that Quarkus 3.2 successfully passes the AtInject TCK, the CDI Lang Model TCK and the CDI Lite TCK and hence becomes a compatible implementation of CDI Lite."
msgstr "我很高兴地宣布，Quarkus 3.2 成功通过了 AtInject TCK、CDI Lang Model TCK 和 CDI Lite TCK，从而成为 CDI Lite 的兼容实现。"

#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid ""
"I would also like to extend my sincere gratitude to Martin Kouba and Matěj Novotný, our resident CDI gurus, for welcoming me and sharing with me their deep knowledge of the subject.\n"
"I mostly just tried to not wreck their code.\n"
"(Which, over time, also became my code, I guess. Whoops!)"
msgstr "我还要衷心感谢我们的常驻 CDI 大师马丁-库巴（Martin Kouba）和马特-诺沃特尼（Matěj Novotný）对我的热情接待，并与我分享了他们在这方面的渊博知识。我只是尽量不破坏他们的代码。(随着时间的推移，我想他们的代码也变成了我的代码。）"
