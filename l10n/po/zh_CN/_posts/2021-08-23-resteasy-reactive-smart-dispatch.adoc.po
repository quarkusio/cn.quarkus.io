# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "RESTEasy Reactive - To block or not to block"
msgstr "RESTEasy 反应性 - 阻止或不阻止"

#. type: YAML Front Matter: synopsis
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "Quarkus 2.2 includes a new dispatching strategy to make RESTEasy Reactive even better."
msgstr "Quarkus 2.2包括一个新的调度策略，使RESTEasy Reactive更加出色。"

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid ""
"In January 2021, the Quarkus team announced RESTEasy Reactive, a novel way to serve HTTP API in Quarkus.\n"
"Since its introduction, RESTEasy Reactive adoption has been quite good, and we plan to make it the default approach to implement HTTP API shortly."
msgstr "2021 年 1 月，Quarkus 团队发布了 RESTEasy Reactive，这是一种在 Quarkus 中提供 HTTP API 的新方法。自推出以来，RESTEasy Reactive 的采用情况相当不错，我们计划在短期内将其作为实现 HTTP API 的默认方法。"

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid ""
"But, wait a minute, what does that mean for my imperative APIs? Do I need to learn reactive programming to use Quarkus now? Let's be clear: **no**.\n"
"This blog post will look at a few changes we made in RESTEasy reactive to make the transition smooth and transparent."
msgstr "但是，等等，这对我的命令式 API 意味着什么？我现在需要学习反应式编程来使用 Quarkus 吗？让我们明确一点： *不* 需要。这篇博文将介绍我们在 RESTEasy reactive 中做出的几处改动，以实现平稳、透明的过渡。"

#. type: Title ==
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "A brief history of HTTP APIs in Quarkus"
msgstr "Quarkus中HTTP APIs的简史"

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid ""
"Quarkus has, since its genesis, has been able to serve HTTP API. The inclusion of https://resteasy.github.io/[RESTEasy] has been a major milestone of the first Quarkus beta releases.\n"
"With RESTEasy _classic_, you develop HTTP APIs using the well-known JAX-RS annotations such as `@GET`, `@Path`, `@POST`...\n"
"The following snippet shows a short _hello world_ example:"
msgstr "Quarkus 自诞生之日起就能够为 HTTP API 提供服务。 link:https://resteasy.github.io/[RESTEasy] 的加入是第一批 Quarkus 测试版的一个重要里程碑。有了 RESTEasy _classic_ ，你就可以使用著名的 JAX-RS 注释开发 HTTP API，如 `@GET` , `@Path` , `@POST` ......下面的代码段展示了一个简短的 _hello world_ 示例："

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid ""
"RESTEasy _classic_ invokes the HTTP endpoint (the `hello` method in the previous snippet) on a worker thread associated with the HTTP request.\n"
"It is a well-understood model, simple to understand.\n"
"However, relying on worker threads introduces a concurrency limit: the number of threads."
msgstr "RESTEasy _classic_ 在与 HTTP 请求相关联的工作线程上调用 HTTP 端点（上一个代码段中的 `hello` 方法）。这是一个很好理解的模型，简单易懂。不过，依赖工作线程会带来并发限制：线程数量。"

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid ""
"Even with the infusion of reactive at the core of Quarkus, RESTEasy _classic_ kept this dispatching strategy.\n"
"It was fragmenting the Quarkus ecosystem. On one side, we had the the imperative camp using RESTEasy _classic_, Hibernate ORM...\n"
"On the other side, we had the reactive camp using Reactive Routes, Vert.x APIs and other reactive extensions.\n"
"Both were using, under the hood, the reactive engine of Quarkus, but the reactive camp we using it in a more efficient way."
msgstr "即使 Quarkus 的核心注入了反应式技术，RESTEasy _classic_ 仍保留了这种调度策略。这让 Quarkus 生态系统变得支离破碎。一边是使用 RESTEasy _classic_ 、Hibernate ORM 的命令式阵营......另一边是使用 Reactive Routes、Vert.x API 和其他反应式扩展的反应式阵营。两者都在使用 Quarkus 的反应式引擎，但反应式阵营的使用方式更为高效。"

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid ""
"Following the unification of imperative and reactive idea, in Quarkus 1.11, we introduced RESTEasy _reactive_, a novel implementation of the JAX-RS model on top of the Quarkus reactive architecture.\n"
"It offers a similar development model and much better throughput.\n"
"I won't detail the RESTEasy _reactive_ architecture and benefits.\n"
"Georgios covered them in two posts: https://quarkus.io/blog/resteasy-reactive/[RESTEasy Reactive introduction] and https://quarkus.io/blog/resteasy-reactive-faq/[Massive performance without headaches]."
msgstr "遵循命令式和反应式的统一思想，我们在 Quarkus 1.11 中引入了 RESTEasy reactive，它是在 Quarkus _反应式_ 架构之上对 JAX-RS 模型的新颖实现。它提供了类似的开发模型和更好的吞吐量。我就不详细介绍 RESTEasy _reactive_ 的架构和优势了。Georgios 在两篇文章中介绍了它们： link:https://quarkus.io/blog/resteasy-reactive/[RESTEasy Reactive 简介] 》和《 link:https://quarkus.io/blog/resteasy-reactive-faq/[无需头痛的高性能] 》。"

#. type: Plain text
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid "From the user point of view, the main difference between RESTEasy _classic_ and _reactive_ is how they call the HTTP endpoint methods:"
msgstr "从用户的角度看，RESTEasy _经典_ 和 _反应式_ 的主要区别在于它们如何调用HTTP端点方法。"

#. type: Plain text
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid "_classic_ - always on a worker thread,"
msgstr " _经典_ --总是在一个工人线程上。"

#. type: Plain text
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid "_reactive_ - on the I/O thread or on a worker thread (and you, as the developer, have the choice)"
msgstr " _反应式_ --在I/O线程或工作线程上（而你，作为开发者，可以选择）。"

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid ""
"You may wonder why it's so important.\n"
"Threads are expensive, especially in containers or on the cloud where the resources are limited.\n"
"Using the I/O threads avoids creating additional threads (improving memory consumption) and avoids context switches (improving response time).\n"
"Emmanuel explained the benefits in the https://quarkus.io/blog/io-thread-benchmark/[A IO thread and a worker thread walk into a bar: a microbenchmark story] blog post."
msgstr "你可能想知道为什么它如此重要。线程的成本很高，尤其是在资源有限的容器或云计算中。使用 I/O 线程可以避免创建额外的线程（改善内存消耗），避免上下文切换（改善响应时间）。Emmanuel 在《 link:https://quarkus.io/blog/io-thread-benchmark/[一个 IO 线程和一个工作线程走进酒吧：一个微基准测试故事] 》博文中解释了其中的好处。"

#. type: Title ==
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "To block or not to block, that is the question."
msgstr "阻止或不阻止，这是一个问题。"

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid ""
"When we introduced RESTEasy _reactive_, we decided to use a non-blocking approach by default: if not stated otherwise, it calls the HTTP endpoint method on the I/O thread.\n"
"This model resulted in outstanding performance and was simple enough, thanks to the usage of the `@Blocking` annotation."
msgstr "在引入 RESTEasy _reactive_ 时，我们决定默认使用非阻塞方法：如果没有其他说明，它会在 I/O 线程上调用 HTTP 端点方法。由于使用了 `@Blocking` 注释，这种模式不仅性能出色，而且非常简单。"

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid ""
"In the last few months, the adoption of RESTEasy _reactive_ has been incredible!\n"
"We have received many questions and, obviously, bug reports.\n"
"The central question is about the usage of Hibernate ORM."
msgstr "在过去的几个月里，RESTEasy _reactive_ 的采用情况令人难以置信！我们收到了许多问题，当然还有错误报告。核心问题是关于 Hibernate ORM 的使用。"

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid ""
"As Hibernate ORM _classic_ (we also have Hibernate _reactive_) is blocking, you can't use it with RESTEasy _reactive_ without using the `@Blocking` annotation.\n"
"This annotation changes the dispatching strategy to use a worker thread (instead of the I/O thread)."
msgstr "由于 Hibernate ORM _classic_ （我们也有 Hibernate _reactive_ ）是阻塞型的，因此如果不使用 `@Blocking` 注解，就无法与 RESTEasy _reactive_ 一起使用。该注解改变了调度策略，使用工作线程（而不是 I/O 线程）。"

#. type: Plain text
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid "While the resulting model looked efficient and straightforward for us, non-aware users have seen a lot of:"
msgstr "虽然所产生的模型对我们来说看起来很高效、很直接，但没有意识到的用户已经看到了很多。"

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid ""
"The error message is explicit.\n"
"But, it rarely makes us happy when we have such a wall of text printed in our terminal."
msgstr "错误信息是明确的。但是，当我们的终端中打印出这样一堵文字墙时，我们很少会感到高兴。"

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid ""
"You may say... “well, let's do blocking by default.”\n"
"It's not that simple.\n"
"It's as dangerous to call reactive APIs expected to be called on an I/O thread on a worker thread than calling blocking APIs on the I/O thread."
msgstr "你可能会说...... \"好吧，那就默认阻塞吧\"。事情没那么简单。在工作线程上调用预期在 I/O 线程上调用的反应式 API，比在 I/O 线程上调用阻塞式 API 更危险。"

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid "New world, new rules!"
msgstr "新世界，新规则！"

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid ""
"In Quarkus 2.2.0, we introduced a new dispatching strategy based on the method signatures.\n"
"The Quarkus build-time approach lets us be wise and deduce if a method should be called on the I/O thread or a worker thread at build time, reducing the runtime overhead."
msgstr "在 Quarkus 2.2.0 中，我们引入了一种基于方法签名的新调度策略。通过 Quarkus 的构建时方法，我们可以在构建时明智地推断出一个方法应该在 I/O 线程还是工作线程上调用，从而减少运行时开销。"

#. type: Plain text
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid "The following table summarizes the new set of rules:"
msgstr "下表总结了这套新规则。"

#. type: Table
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "Method signature"
msgstr "方法签名"

#. type: Table
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "Dispatching strategy"
msgstr "调度策略"

#. type: Table
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "`T method(...)`"
msgstr " `T method(…​)` "

#. type: Table
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "Worker thread"
msgstr "工作者线程"

#. type: Table
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "`Uni<T> method(...)`"
msgstr " `Uni<T> method(…​)` "

#. type: Table
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "I/O thread"
msgstr "I/O线程"

#. type: Table
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "`CompletionStage<T> method(...)`"
msgstr " `CompletionStage<T> method(…​)` "

#. type: Table
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "`Multi<T> method(...)`"
msgstr " `Multi<T> method(…​)` "

#. type: Table
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "`Publisher<T> method(...)`"
msgstr " `Publisher<T> method(…​)` "

#. type: Table
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "`@Transactional CompletionStage<T>  method(...)`"
msgstr " `@Transactional CompletionStage<T> method(…​)`"

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid ""
"Basically: _synchronous methods default to worker threads, and asynchronous methods default to I/O threads, except if explicitly stated otherwise_.\n"
"Of course, you can override the behavior using the `@Blocking` and `@NonBlocking` annotations.\n"
"The `@Transactional` annotation is an exception to the default rules as it often means you are accessing blocking resources (such as an entity manager)."
msgstr "基本上： _同步方法默认使用工作线程，异步方法默认使用 I/O 线程，除非另有明确说明_ 。当然，您可以使用 `@Blocking` 和 `@NonBlocking` 注释来重写行为。 `@Transactional` 注解是默认规则的一个例外，因为它通常意味着您正在访问阻塞资源（如实体管理器）。"

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid "What does that change for you?"
msgstr "这对你有什么改变？"

#. type: Plain text
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid "Let’s discuss a few examples explaining how this new strategy improves the user experience without limiting efficiency and flexibility."
msgstr "让我们讨论几个例子，解释一下这个新策略如何在不限制效率和灵活性的情况下改善用户体验。"

#. type: Title ===
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "Hello RESTEasy Reactive"
msgstr "你好，RESTEasy Reactive"

#. type: Plain text
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid "Using RESTEasy _reactive_ does not change the _hello_ example from above:"
msgstr "使用RESTEasy _reactive_ 并不改变上面的 _Hello_ 例子。"

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid ""
"That method is invoked on a worker thread because it has a synchronous signature.\n"
"Previously (before Quarkus 2.2), with RESTEasy _reactive_, it would have been called on the I/O thread.\n"
"To switch back to that behavior, add `@NonBlocking`:"
msgstr "该方法在工作线程上调用，因为它具有同步签名。以前（Quarkus 2.2 之前），如果使用 RESTEasy _reactive_ ，该方法会在 I/O 线程上调用。要切换回该行为，请添加 `@NonBlocking` ："

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid "Alternatively, you can return a `Uni`:"
msgstr "或者，您也可以返回 `Uni` ："

#. type: Title ===
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "Integrating with Hibernate ORM"
msgstr "与Hibernate ORM集成"

#. type: Plain text
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid "Following the feedback from users, let’s imagine you want to use Hibernate _classic_ with RESTEasy _reactive_:"
msgstr "根据用户的反馈，让我们设想一下，你想把Hibernate _经典_ 与RESTEasy _反应式_ 一起使用。"

#. type: Plain text
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid "You don't need to use `@Blocking` as the signature is synchronous. No more wall of text!"
msgstr "你不需要使用 `@Blocking` ，因为签名是同步的。不再有文字墙!"

#. type: Title ===
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "Integrating with Hibernate Reactive"
msgstr "与Hibernate Reactive的整合"

#. type: Plain text
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid "If you use Hibernate _reactive_, you will use the Mutiny API, and so the resulting code will be:"
msgstr "如果你使用Hibernate _反应式_ ，你将使用Mutiny API，因此产生的代码将是。"

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid "This method runs on the I/O thread, which is what Hibernate _reactive_  expects."
msgstr "该方法在 I/O 线程上运行，这正是 Hibernate _reactive_ 所期望的。"

#. type: Title ===
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "Integrating with Kafka"
msgstr "与Kafka集成"

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid ""
"If you combine HTTP and Kafka (using reactive messaging), you will use an emitter.\n"
"Depending on the emitter type (`Emitter` or `MutinyEmitter`), the `send` method returns a `CompletionStage` or a `Uni`.\n"
"So, the following HTTP method runs on the I/O thread:"
msgstr "如果将 HTTP 和 Kafka（使用反应式消息传递）结合起来，就需要使用发射器。根据发射器类型（ `Emitter` 或 `MutinyEmitter` ）， `send` 方法会返回 `CompletionStage` 或 `Uni` 。因此，以下 HTTP 方法在 I/O 线程上运行："

#. type: Plain text
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid "If you change it to a synchronous signature, it runs on a worker thread:"
msgstr "如果你把它改为同步签名，它就会在一个工作线程上运行。"

#. type: Title ===
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "Combining RESTEasy Reactive, Hibernate ORM and Kafka"
msgstr "结合RESTEasy Reactive、Hibernate ORM和Kafka"

#. type: Plain text
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid "Let's now combine Resteasy _reactive_, Hibernate ORM _classic_ and Kafka to persist an entity and write it to a Kafka topic:"
msgstr "现在让我们结合Resteasy _reactive_ 、Hibernate ORM _classic_ 和Kafka来持久化一个实体并将其写入Kafka主题。"

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid ""
"This method runs on a worker thread despite the signature.\n"
"The `@Transactional` annotation configures the dispatching strategy to use a worker thread."
msgstr "尽管签名如此，该方法仍在工作线程上运行。 `@Transactional` 注解将调度策略配置为使用工作线程。"

#. type: Title ==
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "Summary"
msgstr "摘要"

#. type: Plain text
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid "With Quarkus 2.2, the dispatching strategy of RESTEasy _reactive_ becomes smarter thus improving the developer experience."
msgstr "有了Quarkus 2.2，RESTEasy _反应式_ 的调度策略变得更加智能，从而改善了开发者的体验。"

#. type: Plain text
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid "You don't need to learn the reactive way; you can keep using imperative code."
msgstr "你不需要学习反应式方法；你可以继续使用命令式代码。"

#. type: Plain text
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid "You don't need to think about your threads; Quarkus does that for you."
msgstr "你不需要考虑你的线程，Quarkus 会帮你考虑。"

#. type: Plain text
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid "You don't lose in flexibility; you can override the decision."
msgstr "你不会失去灵活性；你可以推翻决定。"

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid ""
"Starting with Quarkus 2.3, the Quarkus team is thinking of making RESTEasy _reactive_  the default way to implement HTTP APIs.\n"
"It does not mean that the RESTEasy _classic_ extension will be retired, just that we reach the point where RESTEasy _reactive_ gives you more without burden."
msgstr "从 Quarkus 2.3 开始，Quarkus 团队考虑将 RESTEasy _reactive_ 作为实现 HTTP API 的默认方式。这并不意味着 RESTEasy _classic_ 扩展将退出历史舞台，只是我们已经达到了 RESTEasy _reactive_ 为您提供更多而不增加负担的程度。"
