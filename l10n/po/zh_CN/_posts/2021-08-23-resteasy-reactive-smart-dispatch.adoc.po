# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:1
#, no-wrap
msgid "cescoffier"
msgstr ""

#. type: YAML Front Matter: date
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:1
#, no-wrap
msgid "2021-08-25"
msgstr ""

#. type: YAML Front Matter: layout
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:1
#, no-wrap
msgid "post"
msgstr ""

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:1
#, no-wrap
msgid "Quarkus 2.2 includes a new dispatching strategy to make RESTEasy Reactive even better."
msgstr ""

#. type: YAML Front Matter: tags
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:1
#, no-wrap
msgid "reactive rest"
msgstr ""

#. type: YAML Front Matter: title
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:1
#, no-wrap
msgid "RESTEasy Reactive - To block or not to block"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:14
msgid "In January 2021, the Quarkus team announced RESTEasy Reactive, a novel way to serve HTTP API in Quarkus.  Since its introduction, RESTEasy Reactive adoption has been quite good, and we plan to make it the default approach to implement HTTP API shortly."
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:17
msgid "But, wait a minute, what does that mean for my imperative APIs? Do I need to learn reactive programming to use Quarkus now? Let's be clear: **no**.  This blog post will look at a few changes we made in RESTEasy reactive to make the transition smooth and transparent."
msgstr ""

#. type: Title ==
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:18
#, no-wrap
msgid "A brief history of HTTP APIs in Quarkus"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:23
msgid "Quarkus has, since its genesis, has been able to serve HTTP API. The inclusion of https://resteasy.github.io/[RESTEasy] has been a major milestone of the first Quarkus beta releases.  With RESTEasy _classic_, you develop HTTP APIs using the well-known JAX-RS annotations such as `@GET`, `@Path`, `@POST`...  The following snippet shows a short _hello world_ example:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:27
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:126
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:192
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:217
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:245
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:271
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:300
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:30
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:129
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:174
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:197
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:223
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:33
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:132
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:177
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class GreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:39
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:138
#, no-wrap
msgid ""
"   @GET\n"
"   public String hello() {\n"
"       return \"Hello\";\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:44
msgid "RESTEasy _classic_ invokes the HTTP endpoint (the `hello` method in the previous snippet) on a worker thread associated with the HTTP request.  It is a well-understood model, simple to understand.  However, relying on worker threads introduces a concurrency limit: the number of threads."
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:49
msgid "Even with the infusion of reactive at the core of Quarkus, RESTEasy _classic_ kept this dispatching strategy.  It was fragmenting the Quarkus ecosystem. On one side, we had the the imperative camp using RESTEasy _classic_, Hibernate ORM...  On the other side, we had the reactive camp using Reactive Routes, Vert.x APIs and other reactive extensions.  Both were using, under the hood, the reactive engine of Quarkus, but the reactive camp we using it in a more efficient way."
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:54
msgid "Following the unification of imperative and reactive idea, in Quarkus 1.11, we introduced RESTEasy _reactive_, a novel implementation of the JAX-RS model on top of the Quarkus reactive architecture.  It offers a similar development model and much better throughput.  I won't detail the RESTEasy _reactive_ architecture and benefits.  Georgios covered them in two posts: https://quarkus.io/blog/resteasy-reactive/[RESTEasy Reactive introduction] and https://quarkus.io/blog/resteasy-reactive-faq/[Massive performance without headaches]."
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:56
msgid "From the user point of view, the main difference between RESTEasy _classic_ and _reactive_ is how they call the HTTP endpoint methods:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:58
msgid "_classic_ - always on a worker thread,"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:59
msgid "_reactive_ - on the I/O thread or on a worker thread (and you, as the developer, have the choice)"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:64
msgid "You may wonder why it's so important.  Threads are expensive, especially in containers or on the cloud where the resources are limited.  Using the I/O threads avoids creating additional threads (improving memory consumption) and avoids context switches (improving response time).  Emmanuel explained the benefits in the https://quarkus.io/blog/io-thread-benchmark/[A IO thread and a worker thread walk into a bar: a microbenchmark story] blog post."
msgstr ""

#. type: Title ==
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:65
#, no-wrap
msgid "To block or not to block, that is the question."
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:69
msgid "When we introduced RESTEasy _reactive_, we decided to use a non-blocking approach by default: if not stated otherwise, it calls the HTTP endpoint method on the I/O thread.  This model resulted in outstanding performance and was simple enough, thanks to the usage of the `@Blocking` annotation."
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:73
msgid "In the last few months, the adoption of RESTEasy _reactive_ has been incredible! We have received many questions and, obviously, bug reports.  The central question is about the usage of Hibernate ORM."
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:76
msgid "As Hibernate ORM _classic_ (we also have Hibernate _reactive_) is blocking, you can't use it with RESTEasy _reactive_ without using the `@Blocking` annotation.  This annotation changes the dispatching strategy to use a worker thread (instead of the I/O thread)."
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:78
msgid "While the resulting model looked efficient and straightforward for us, non-aware users have seen a lot of:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:82
#, no-wrap
msgid "You have attempted to perform a blocking operation on a IO thread. This is not allowed, as blocking the IO thread will cause major performance issues with your application. If you want to perform blocking EntityManager operations make sure you are doing it from a worker thread.: java.lang.IllegalStateException: You have attempted to perform a blocking operation on a IO thread. This is not allowed, as blocking the IO thread will cause major performance issues with your application. If you want to perform blocking EntityManager operations make sure you are doing it from a worker thread.\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:86
msgid "The error message is explicit.  But, it rarely makes us happy when we have such a wall of text printed in our terminal."
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:90
msgid "You may say... “well, let's do blocking by default.” It's not that simple.  It's as dangerous to call reactive APIs expected to be called on an I/O thread on a worker thread than calling blocking APIs on the I/O thread."
msgstr ""

#. type: Title ==
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:91
#, no-wrap
msgid "New world, new rules! "
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:95
msgid "In Quarkus 2.2.0, we introduced a new dispatching strategy based on the method signatures.  The Quarkus build-time approach lets us be wise and deduce if a method should be called on the I/O thread or a worker thread at build time, reducing the runtime overhead."
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:97
msgid "The following table summarizes the new set of rules:"
msgstr ""

#. type: Table
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:100
#, no-wrap
msgid "Method signature"
msgstr ""

#. type: Table
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:102
#, no-wrap
msgid "Dispatching strategy"
msgstr ""

#. type: Table
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:102
#, no-wrap
msgid "`T method(...)`"
msgstr ""

#. type: Table
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:103
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:108
#, no-wrap
msgid "Worker thread"
msgstr ""

#. type: Table
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:103
#, no-wrap
msgid "`Uni<T> method(...)`"
msgstr ""

#. type: Table
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:104
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:105
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:106
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:107
#, no-wrap
msgid "I/O thread"
msgstr ""

#. type: Table
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:104
#, no-wrap
msgid "`CompletionStage<T> method(...)`"
msgstr ""

#. type: Table
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:105
#, no-wrap
msgid "`Multi<T> method(...)`"
msgstr ""

#. type: Table
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:106
#, no-wrap
msgid "`Publisher<T> method(...)`"
msgstr ""

#. type: Table
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:107
#, no-wrap
msgid "`@Transactional CompletionStage<T>  method(...)`"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:113
msgid "Basically: _synchronous methods default to worker threads, and asynchronous methods default to I/O threads, except if explicitly stated otherwise_.  Of course, you can override the behavior using the `@Blocking` and `@NonBlocking` annotations.  The `@Transactional` annotation is an exception to the default rules as it often means you are accessing blocking resources (such as an entity manager)."
msgstr ""

#. type: Title ==
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:114
#, no-wrap
msgid "What does that change for you? "
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:117
msgid "Let’s discuss a few examples explaining how this new strategy improves the user experience without limiting efficiency and flexibility."
msgstr ""

#. type: Title ===
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:119
#, no-wrap
msgid "Hello RESTEasy Reactive"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:122
msgid "Using RESTEasy _reactive_ does not change the _hello_ example from above:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:124
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:145
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:190
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:215
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:243
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:269
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:298
#, no-wrap
msgid "[source, java]    \n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:143
msgid "That method is invoked on a worker thread because it has a synchronous signature.  Previously (before Quarkus 2.2), with RESTEasy _reactive_, it would have been called on the I/O thread.  To switch back to that behavior, add `@NonBlocking`:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:147
#, no-wrap
msgid ""
"\n"
"package org.acme;\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:149
msgid "import io.smallrye.common.annotation.NonBlocking;"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:152
msgid "import javax.ws.rs.GET; import javax.ws.rs.Path;"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:155
msgid "@Path(\"/hello\")  public class GreetingResource {"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:162
#, no-wrap
msgid ""
"   @GET\n"
"   @NonBlocking\n"
"   public String hello() {\n"
"       return \"Hello\";\n"
"   }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:165
#, no-wrap
msgid "Alternatively, you can return a `Uni`:    \n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:169
#, no-wrap
msgid ""
"[source, java]    \n"
"----    \n"
"package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:171
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:183
#, no-wrap
msgid ""
"   @GET\n"
"   public Uni<String> hello() {\n"
"       return Uni.createFrom().item(\"Hello\");\n"
"   }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:185
#, no-wrap
msgid "Integrating with Hibernate ORM"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:188
msgid "Following the feedback from users, let’s imagine you want to use Hibernate _classic_ with RESTEasy _reactive_:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:194
#, no-wrap
msgid "import org.jboss.resteasy.reactive.RestQuery;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:200
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:226
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:255
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:281
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:311
#, no-wrap
msgid ""
"@Path(\"/fruit\")\n"
"public class FruitResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:206
#, no-wrap
msgid ""
"   @GET\n"
"   public Fruit getFruit(@RestQuery String name) {\n"
"       return Fruit.find(\"name\", name).firstResult();\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:209
msgid "You don't need to use `@Blocking` as the signature is synchronous. No more wall of text!"
msgstr ""

#. type: Title ===
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:210
#, no-wrap
msgid "Integrating with Hibernate Reactive"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:213
msgid "If you use Hibernate _reactive_, you will use the Mutiny API, and so the resulting code will be:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:220
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import org.jboss.resteasy.reactive.RestQuery;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:232
#, no-wrap
msgid ""
"   @GET\n"
"   public Uni<Fruit> getFruit(@RestQuery String name) {\n"
"       return Fruit.find(\"name\", name).firstResult();\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:235
msgid "This method runs on the I/O thread, which is what Hibernate _reactive_ expects."
msgstr ""

#. type: Title ===
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:236
#, no-wrap
msgid "Integrating with Kafka"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:241
msgid "If you combine HTTP and Kafka (using reactive messaging), you will use an emitter.  Depending on the emitter type (`Emitter` or `MutinyEmitter`), the `send` method returns a `CompletionStage` or a `Uni`.  So, the following HTTP method runs on the I/O thread:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:249
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:304
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.smallrye.reactive.messaging.MutinyEmitter;\n"
"import org.eclipse.microprofile.reactive.messaging.Channel;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:252
#, no-wrap
msgid ""
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:258
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:284
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:314
#, no-wrap
msgid ""
"   @Channel(\"kafka\")\n"
"   MutinyEmitter<Fruit> emitter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:264
#, no-wrap
msgid ""
"   @POST\n"
"   public Uni<Void> writeToKafka(Fruit fruit) {\n"
"       return emitter.send(fruit);\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:267
msgid "If you change it to a synchronous signature, it runs on a worker thread:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:274
#, no-wrap
msgid ""
"import io.smallrye.reactive.messaging.MutinyEmitter;\n"
"import org.eclipse.microprofile.reactive.messaging.Channel;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:278
#, no-wrap
msgid ""
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import java.time.Duration;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:291
#, no-wrap
msgid ""
"   @POST\n"
"   public void writeToKafka(Fruit fruit) {\n"
"       System.out.println(Thread.currentThread().getName());\n"
"       emitter.send(fruit).await().atMost(Duration.ofSeconds(5));\n"
"   }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:293
#, no-wrap
msgid "Combining RESTEasy Reactive, Hibernate ORM and Kafka"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:296
msgid "Let's now combine Resteasy _reactive_, Hibernate ORM _classic_ and Kafka to persist an entity and write it to a Kafka topic:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:308
#, no-wrap
msgid ""
"import javax.transaction.Transactional;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:323
#, no-wrap
msgid ""
"   @POST\n"
"   @Transactional\n"
"   public Uni<Void> persistAndWriteToKafka(Fruit fruit) {\n"
"       System.out.println(Thread.currentThread().getName());\n"
"       fruit.persist();\n"
"       return emitter.send(fruit);\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:327
msgid "This method runs on a worker thread despite the signature.  The `@Transactional` annotation configures the dispatching strategy to use a worker thread."
msgstr ""

#. type: Title ==
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:329
#, no-wrap
msgid "Summary"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:332
msgid "With Quarkus 2.2, the dispatching strategy of RESTEasy _reactive_ becomes smarter thus improving the developer experience."
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:334
msgid "You don't need to learn the reactive way; you can keep using imperative code."
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:335
msgid "You don't need to think about your threads; Quarkus does that for you."
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:336
msgid "You don't lose in flexibility; you can override the decision."
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:339
msgid "Starting with Quarkus 2.3, the Quarkus team is thinking of making RESTEasy _reactive_ the default way to implement HTTP APIs.  It does not mean that the RESTEasy _classic_ extension will be retired, just that we reach the point where RESTEasy _reactive_ gives you more without burden."
msgstr ""
