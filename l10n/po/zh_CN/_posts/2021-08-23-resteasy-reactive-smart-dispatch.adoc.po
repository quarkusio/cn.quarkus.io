# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "RESTEasy Reactive - To block or not to block"
msgstr "RESTEasy 反应性 - 阻止或不阻止"

#. type: YAML Front Matter: synopsis
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "Quarkus 2.2 includes a new dispatching strategy to make RESTEasy Reactive even better."
msgstr "Quarkus 2.2包括一个新的调度策略，使RESTEasy Reactive更加出色。"

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
msgid ""
"In January 2021, the Quarkus team announced RESTEasy Reactive, a novel way to serve HTTP API in Quarkus.\n"
"Since its introduction, RESTEasy Reactive adoption has been quite good, and we plan to make it the default approach to implement HTTP API shortly."
msgstr ""

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
msgid ""
"But, wait a minute, what does that mean for my imperative APIs? Do I need to learn reactive programming to use Quarkus now? Let's be clear: **no**.\n"
"This blog post will look at a few changes we made in RESTEasy reactive to make the transition smooth and transparent."
msgstr ""

#. type: Title ==
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "A brief history of HTTP APIs in Quarkus"
msgstr "Quarkus中HTTP APIs的简史"

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
msgid ""
"Quarkus has, since its genesis, has been able to serve HTTP API. The inclusion of https://resteasy.github.io/[RESTEasy] has been a major milestone of the first Quarkus beta releases.\n"
"With RESTEasy _classic_, you develop HTTP APIs using the well-known JAX-RS annotations such as `@GET`, `@Path`, `@POST`...\n"
"The following snippet shows a short _hello world_ example:"
msgstr ""

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
msgid ""
"RESTEasy _classic_ invokes the HTTP endpoint (the `hello` method in the previous snippet) on a worker thread associated with the HTTP request.\n"
"It is a well-understood model, simple to understand.\n"
"However, relying on worker threads introduces a concurrency limit: the number of threads."
msgstr ""

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
msgid ""
"Even with the infusion of reactive at the core of Quarkus, RESTEasy _classic_ kept this dispatching strategy.\n"
"It was fragmenting the Quarkus ecosystem. On one side, we had the the imperative camp using RESTEasy _classic_, Hibernate ORM...\n"
"On the other side, we had the reactive camp using Reactive Routes, Vert.x APIs and other reactive extensions.\n"
"Both were using, under the hood, the reactive engine of Quarkus, but the reactive camp we using it in a more efficient way."
msgstr ""

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
msgid ""
"Following the unification of imperative and reactive idea, in Quarkus 1.11, we introduced RESTEasy _reactive_, a novel implementation of the JAX-RS model on top of the Quarkus reactive architecture.\n"
"It offers a similar development model and much better throughput.\n"
"I won't detail the RESTEasy _reactive_ architecture and benefits.\n"
"Georgios covered them in two posts: https://quarkus.io/blog/resteasy-reactive/[RESTEasy Reactive introduction] and https://quarkus.io/blog/resteasy-reactive-faq/[Massive performance without headaches]."
msgstr ""

#. type: Plain text
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid "From the user point of view, the main difference between RESTEasy _classic_ and _reactive_ is how they call the HTTP endpoint methods:"
msgstr "从用户的角度看，RESTEasy _经典_ 和 _反应式_ 的主要区别在于它们如何调用HTTP端点方法。"

#. type: Plain text
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid "_classic_ - always on a worker thread,"
msgstr " _经典_ --总是在一个工人线程上。"

#. type: Plain text
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid "_reactive_ - on the I/O thread or on a worker thread (and you, as the developer, have the choice)"
msgstr " _反应式_ --在I/O线程或工作线程上（而你，作为开发者，可以选择）。"

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
msgid ""
"You may wonder why it's so important.\n"
"Threads are expensive, especially in containers or on the cloud where the resources are limited.\n"
"Using the I/O threads avoids creating additional threads (improving memory consumption) and avoids context switches (improving response time).\n"
"Emmanuel explained the benefits in the https://quarkus.io/blog/io-thread-benchmark/[A IO thread and a worker thread walk into a bar: a microbenchmark story] blog post."
msgstr ""

#. type: Title ==
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "To block or not to block, that is the question."
msgstr "阻止或不阻止，这是一个问题。"

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
msgid ""
"When we introduced RESTEasy _reactive_, we decided to use a non-blocking approach by default: if not stated otherwise, it calls the HTTP endpoint method on the I/O thread.\n"
"This model resulted in outstanding performance and was simple enough, thanks to the usage of the `@Blocking` annotation."
msgstr ""

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
msgid ""
"In the last few months, the adoption of RESTEasy _reactive_ has been incredible!\n"
"We have received many questions and, obviously, bug reports.\n"
"The central question is about the usage of Hibernate ORM."
msgstr ""

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
msgid ""
"As Hibernate ORM _classic_ (we also have Hibernate _reactive_) is blocking, you can't use it with RESTEasy _reactive_ without using the `@Blocking` annotation.\n"
"This annotation changes the dispatching strategy to use a worker thread (instead of the I/O thread)."
msgstr ""

#. type: Plain text
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid "While the resulting model looked efficient and straightforward for us, non-aware users have seen a lot of:"
msgstr "虽然所产生的模型对我们来说看起来很高效、很直接，但没有意识到的用户已经看到了很多。"

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
msgid ""
"The error message is explicit.\n"
"But, it rarely makes us happy when we have such a wall of text printed in our terminal."
msgstr ""

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
msgid ""
"You may say... “well, let's do blocking by default.”\n"
"It's not that simple.\n"
"It's as dangerous to call reactive APIs expected to be called on an I/O thread on a worker thread than calling blocking APIs on the I/O thread."
msgstr ""

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
msgid "New world, new rules!"
msgstr ""

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
msgid ""
"In Quarkus 2.2.0, we introduced a new dispatching strategy based on the method signatures.\n"
"The Quarkus build-time approach lets us be wise and deduce if a method should be called on the I/O thread or a worker thread at build time, reducing the runtime overhead."
msgstr ""

#. type: Plain text
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid "The following table summarizes the new set of rules:"
msgstr "下表总结了这套新规则。"

#. type: Table
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "Method signature"
msgstr "方法签名"

#. type: Table
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "Dispatching strategy"
msgstr "调度策略"

#. type: Table
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "`T method(...)`"
msgstr " `T method(…​)` "

#. type: Table
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "Worker thread"
msgstr "工作者线程"

#. type: Table
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "`Uni<T> method(...)`"
msgstr " `Uni<T> method(…​)` "

#. type: Table
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "I/O thread"
msgstr "I/O线程"

#. type: Table
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "`CompletionStage<T> method(...)`"
msgstr " `CompletionStage<T> method(…​)` "

#. type: Table
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "`Multi<T> method(...)`"
msgstr " `Multi<T> method(…​)` "

#. type: Table
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "`Publisher<T> method(...)`"
msgstr " `Publisher<T> method(…​)` "

#. type: Table
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "`@Transactional CompletionStage<T>  method(...)`"
msgstr " `@Transactional CompletionStage<T> method(…​)` "

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
msgid ""
"Basically: _synchronous methods default to worker threads, and asynchronous methods default to I/O threads, except if explicitly stated otherwise_.\n"
"Of course, you can override the behavior using the `@Blocking` and `@NonBlocking` annotations.\n"
"The `@Transactional` annotation is an exception to the default rules as it often means you are accessing blocking resources (such as an entity manager)."
msgstr ""

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
msgid "What does that change for you?"
msgstr ""

#. type: Plain text
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid "Let’s discuss a few examples explaining how this new strategy improves the user experience without limiting efficiency and flexibility."
msgstr "让我们讨论几个例子，解释一下这个新策略如何在不限制效率和灵活性的情况下改善用户体验。"

#. type: Title ===
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "Hello RESTEasy Reactive"
msgstr "你好，RESTEasy Reactive"

#. type: Plain text
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid "Using RESTEasy _reactive_ does not change the _hello_ example from above:"
msgstr "使用RESTEasy _reactive_ 并不改变上面的 _Hello_ 例子。"

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
msgid ""
"That method is invoked on a worker thread because it has a synchronous signature.\n"
"Previously (before Quarkus 2.2), with RESTEasy _reactive_, it would have been called on the I/O thread.\n"
"To switch back to that behavior, add `@NonBlocking`:"
msgstr ""

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
msgid "Alternatively, you can return a `Uni`:"
msgstr ""

#. type: Title ===
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "Integrating with Hibernate ORM"
msgstr "与Hibernate ORM集成"

#. type: Plain text
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid "Following the feedback from users, let’s imagine you want to use Hibernate _classic_ with RESTEasy _reactive_:"
msgstr "根据用户的反馈，让我们设想一下，你想把Hibernate _经典_ 与RESTEasy _反应式_ 一起使用。"

#. type: Plain text
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid "You don't need to use `@Blocking` as the signature is synchronous. No more wall of text!"
msgstr "你不需要使用 `@Blocking` ，因为签名是同步的。不再有文字墙!"

#. type: Title ===
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "Integrating with Hibernate Reactive"
msgstr "与Hibernate Reactive的整合"

#. type: Plain text
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid "If you use Hibernate _reactive_, you will use the Mutiny API, and so the resulting code will be:"
msgstr "如果你使用Hibernate _反应式_ ，你将使用Mutiny API，因此产生的代码将是。"

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
msgid "This method runs on the I/O thread, which is what Hibernate _reactive_  expects."
msgstr ""

#. type: Title ===
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "Integrating with Kafka"
msgstr "与Kafka集成"

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
msgid ""
"If you combine HTTP and Kafka (using reactive messaging), you will use an emitter.\n"
"Depending on the emitter type (`Emitter` or `MutinyEmitter`), the `send` method returns a `CompletionStage` or a `Uni`.\n"
"So, the following HTTP method runs on the I/O thread:"
msgstr ""

#. type: Plain text
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid "If you change it to a synchronous signature, it runs on a worker thread:"
msgstr "如果你把它改为同步签名，它就会在一个工作线程上运行。"

#. type: Title ===
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "Combining RESTEasy Reactive, Hibernate ORM and Kafka"
msgstr "结合RESTEasy Reactive、Hibernate ORM和Kafka"

#. type: Plain text
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid "Let's now combine Resteasy _reactive_, Hibernate ORM _classic_ and Kafka to persist an entity and write it to a Kafka topic:"
msgstr "现在让我们结合Resteasy _reactive_ 、Hibernate ORM _classic_ 和Kafka来持久化一个实体并将其写入Kafka主题。"

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
msgid ""
"This method runs on a worker thread despite the signature.\n"
"The `@Transactional` annotation configures the dispatching strategy to use a worker thread."
msgstr ""

#. type: Title ==
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy, no-wrap
msgid "Summary"
msgstr "摘要"

#. type: Plain text
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid "With Quarkus 2.2, the dispatching strategy of RESTEasy _reactive_ becomes smarter thus improving the developer experience."
msgstr "有了Quarkus 2.2，RESTEasy _反应式_ 的调度策略变得更加智能，从而改善了开发者的体验。"

#. type: Plain text
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
#, fuzzy
msgid "You don't need to learn the reactive way; you can keep using imperative code."
msgstr "你不需要学习反应式方法；你可以继续使用命令式代码。"

#. type: Plain text
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
msgid "You don't need to think about your threads; Quarkus does that for you."
msgstr ""

#. type: Plain text
#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
msgid "You don't lose in flexibility; you can override the decision."
msgstr ""

#: _posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc
msgid ""
"Starting with Quarkus 2.3, the Quarkus team is thinking of making RESTEasy _reactive_  the default way to implement HTTP APIs.\n"
"It does not mean that the RESTEasy _classic_ extension will be retired, just that we reach the point where RESTEasy _reactive_ gives you more without burden."
msgstr ""
