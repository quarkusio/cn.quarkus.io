msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Getting ready for secure MCP with Quarkus MCP Server"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Explain how MCP clients can access Quarkus MCP SSE servers with access tokens"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Introduction"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "https://modelcontextprotocol.io/specification/2025-03-26[The latest version of the Model Context Protocol (MCP) specification] introduces an https://modelcontextprotocol.io/specification/2025-03-26/basic/authorization[authorization] flow."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "While it will take a bit of time for the new MCP specification to be widely supported, you can already add authentication to client and server following the https://modelcontextprotocol.io/specification/2024-11-05[previous MCP version]."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "You only need an MCP client that can receive an access token and pass it to the MCP server and, obviously, an MCP server that verifies the token."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "In this post, we will detail how you can enforce authentication with the https://github.com/quarkiverse/quarkus-mcp-server[Quarkus MCP SSE Server]."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "We will first use Keycloak as an OpenID Connect (OIDC) provider to login and use a Keycloak JWT access token to access the server with `Quarkus MCP SSE Server Dev UI` in dev mode."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Secondly, we will show how to log in using GitHub OAuth2 and use a GitHub binary access token to access the server in prod mode with both https://modelcontextprotocol.io/docs/tools/inspector[MCP inspector] and the `curl` tools."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Step 1 - Create an MCP server using the SSE transport"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "First, let's create a secure Quarkus MCP SSE server that requires authentication to establish Server-Sent Events (SSE) connection and also when invoking the tools."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "You can find the complete project source in the https://github.com/quarkiverse/quarkus-mcp-server/tree/main/samples/secure-mcp-sse-server[Quarkus MCP SSE Server samples]."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Maven dependencies"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Add the following dependencies:"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "`quarkus-mcp-server-sse` is required to support MCP SSE transport."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "`quarkus-oidc` is required to secure access to MCP SSE endpoints. Its version is defined in the Quarkus BOM."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Tool"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Let's create a tool that can be invoked only if the current MCP request is authenticated:"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Provide a tool that can return a name of the current user. Note the `user-name-provider` tool name, you will use it later for a tool call."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid ""
"Require authenticated tool access - yes, the only difference with an unauthenticated MCP server tool is `@Authenticated`, that's it!\n"
"See also how the main MCP SSE endpoint is secured in the <<initial-configuration>> section below."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Use the injected `SecurityIdentity` to return the current user's name."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Configuration"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Finally, let's configure our secure MCP server:"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Enforce an authenticated access to the main MCP SSE endpoint during the initial handshake. See also how the tool is secured with an annotation in the <<tool>> section above, though you can also secure access to the tool by listing both main and tools endpoints in the configuration, for example: `quarkus.http.auth.permission.authenticated.paths=/mcp/sse,/mcp/messages/*`."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "We are ready to test our secure MCP server in dev mode."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Step 2 - Access the MCP server in dev mode"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Start the MCP server in dev mode"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "The configuration properties that we set in the <<initial-configuration>> section above are sufficient to start the application in dev mode."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "The OIDC configuration is provided in dev mode automatically by https://quarkus.io/guides/security-openid-connect-dev-services[Dev Services for Keycloak]. It creates a default realm, client and adds two users, `alice` and `bob`, for you to get started with OIDC immediately. You can also register a custom Keycloak realm to work with the existing realm, client and user registrations."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "You can also login to other OIDC and OAuth2 providers in OIDC Dev UI, see the <<mcp-server-devui>> section for more details."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Use OIDC Dev UI to login and copy access token"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Go to http://localhost:8080/q/dev[Dev UI], find the OpenId Connect card:"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Follow the `Keycloak Provider` link and https://quarkus.io/guides/security-openid-connect-dev-services#develop-service-applications[login to Keycloak] using an `alice` name and an `alice` password."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "You can login to other providers such as `Auth0` or https://quarkus.io/guides/security-openid-connect-providers#github[GitHub] from OIDC DevUI as well. The only requirement is to update your application registration to allow callbacks to DevUI. For example, see how you can https://quarkus.io/guides/security-oidc-auth0-tutorial#looking-at-auth0-tokens-in-the-oidc-dev-ui[login to Auth0 from Dev UI]."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "After logging in with `Keycloak` as `alice`, copy the acquired access token using a provided copy button:"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Use Quarkus MCP Server Dev UI to access the MCP server"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Make sure to login and copy the access token as explained in the <<oidc-devui>> section above."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Go to http://localhost:8080/q/dev[Dev UI], find the MCP Server card:"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Select its `Tools` option and choose to `Call` the `user-name-provider` tool:"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Paste the copied Keycloak access token into the Tool's `Bearer token` field, and request a new MCP SSE session:"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Make a tool call and get a response which contains the `alice` user name:"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid ""
"All is good in dev mode; it is time to see how it will work in prod mode.\n"
"Before that, stop the MCP server, which runs in dev mode."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Step 3 - Access the MCP server in prod mode"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Register GitHub OAuth2 application"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Before it was all in dev mode - using Quarkus devservices to try things out. Now, let's move to prod mode. If you already have a Keycloak instance running then you can use it. But to illustrate how OAuth2 works with more than just Keycloak, we will switch to GitHub OAuth2 when the application runs in _prod mode_."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "First, start with registering a GitHub OAuth2 application."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Follow the https://quarkus.io/guides/security-openid-connect-providers#github[GitHub OAuth2 registration] process, and make sure to register the `http://localhost:8080/login` callback URL."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Next, use the client id and secret generated during the GitHub OAuth2 application registration to <<update-config-to-support-github,update the configuration to support GitHub>>."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Update the configuration to support GitHub"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "The <<initial-configuration, configuration>> that was used to run the MCP server in dev mode was suffient because Keycloak Dev Service was supporting the OIDC login."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "To work with GitHub in prod mode, we update the configuration as follows:"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Enforce an authenticated access to the main MCP SSE endpoint during the initial handshake. See also how the tool is secured with an annotation in the <<tool>> section above."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Default Quarkus OIDC configuration requires that only GitHub access tokens can be used to access MCP SSE server."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "By default, `quarkus.oidc.provider=github` supports an authorization code flow only. `quarkus.oidc.application-type=service` overrides it and requires the use of bearer tokens."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Use GitHub authorization code flow to support the login endpoint with a dedicated Quarkus OIDC `login` https://quarkus.io/guides/security-openid-connect-multitenancy[tenant] configuration."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Use the client id and secret generated in the <<register-github-application>> section."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Note the use of the `%prod.` prefixes. It ensures the configuration properties prefixed with `%prod.` are only effective in prod mode and do not interfere with dev mode."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Implement Login endpoint"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Currently, MCP clients can not use the authorization code flow themselves. Therefore, we implement an OAuth2 login endpoint that will return a GitHub token for the user to use with MCP clients, which can work with bearer tokens."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Add another dependency to support Qute templates:"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "`quarkus-rest-qute` is required to generate HTML pages. Its version is defined in the Quarkus BOM."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "and implement the login endpoint:"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "GitHub access tokens are binary and Quarkus OIDC indirectly verifies them by using them to request GitHub specific `UserInfo` representation."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "`AccessTokenCredential` is used to capture a binary GitHub access token."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid ""
"After the user logs in to GitHub and is redirected to this endpoint, the access token will be returned to the user in an HTML page generated with a simple https://github.com/quarkiverse/quarkus-mcp-server/tree/main/samples/secure-mcp-sse-server/src/main/resources/templates/accessTokenPage.html[Qute template].\n"
"Of course, you would not do that in a real application. It is just an example to demonstrate the capability."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Package and run the MCP Server"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Package the MCP server application:"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Run it:"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "You can also run the MCP server from its Maven coordinates directly with `jbang`:"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Login to GitHub and copy the access token"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Access `http://localhost:8080/login`, login to GitHub, and copy the returned access token:"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Use MCP Inspector to access the MCP server"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "https://modelcontextprotocol.io/docs/tools/inspector[MCP Inspector] is an interactive developer tool for testing and debugging MCP servers. Let's use it to invoke our MCP server with the authentication."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Launch https://modelcontextprotocol.io/docs/tools/inspector[MCP inspector]:"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Paste the copied GitHub access token to the `Bearer Token` field and connect to the Quarkus MCP SSE server:"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Next, make a `user-name-provider` tool call:"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "You will see the name from your GitHub account returned."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Use curl to access the MCP server"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Finally, let's use `curl` and also learn a little bit how both the MCP protocol and MCP SSE transport work."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "First, access the main SSE endpoint without the GitHub access token:"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "You will get HTTP 401 error."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Use the access token to access MCP server:"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "and get an SSE response such as:"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid ""
"The SSE connection is created.  Note the unique path in the received `data`, we need this path to invoke the tools.\n"
"We cannot invoke the tool directly, we first need to follow the MCP handshake protocol."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Open another window and use the same access token to initialize the curl as MCP client, and access the tool, using the value of the `data` property to build the target URL."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Send the client initialization request:"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "where the `initialize.json` file has a content like this:"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Send the client initialization confirmation:"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "where the `initialized.json` file has a content like this:"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Finally, send the request that will invoke the tool:"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "where the `call.json` file has a content like this:"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Now look at the SSE connection window and you will see the name from your GitHub account returned."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Conclusion"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid ""
"In this blog post, we explained how you can easily create a Quarkus MCP SSE server that requires authentication, obtain an access token and use it to access the MCP server tool in dev mode with `Quarkus MCP SSE Server Dev UI` and prod mode with both the https://modelcontextprotocol.io/docs/tools/inspector[MCP inspector] and the curl tools.\n"
"You can use any MCP client that allows passing a bearer token to the server."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Notice, that there is no real difference in how OAuth2 is done for either Quarkus MCP server or REST endpoints. The most complex part is to get the settings configured correctly for your OAuth2 provider - but when all is done you just apply a few annotations to mark relevant methods as secure and Quarkus handles the authentication for you."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "This blog post uses the previous version of the MCP protocol. The Quarkus team is keeping a close eye on the MCP Authorization specification evolution and working on having all possible MCP Authorization scenarios supported."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Stay tuned for more updates!"
msgstr ""
