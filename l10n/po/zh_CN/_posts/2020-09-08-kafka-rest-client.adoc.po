# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy, no-wrap
msgid "Combining Apache Kafka and the Rest client"
msgstr "结合Apache Kafka和Rest客户端"

#. type: YAML Front Matter: synopsis
#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy, no-wrap
msgid "How to combine reactive messaging, Kafka and the Rest client"
msgstr "如何结合反应式消息传递、Kafka和Rest客户端"

#: _posts/2020-09-08-kafka-rest-client.adoc
msgid ""
"Another week, another interesting question.\n"
"This week, someone asks me about combining Kafka and the Rest Client.\n"
"That is a recurring subject, and most of the time, the goal is to achieve the following process:"
msgstr ""

#. type: Plain text
#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid "image:/assets/images/posts/kafka-rest-client/kafka-rest-architecture.png[]"
msgstr "image:/assets/images/posts/kafka-rest-client/kafka-rest-architecture.png[alt=\"kafka rest architecture\"]"

#: _posts/2020-09-08-kafka-rest-client.adoc
msgid ""
"In other words, we want to call a remote service for each Kafka message we receive.\n"
"Therefore, we have a first topic (\"in\") containing the data we are consuming, for instance, \"transactions\".\n"
"Then, we have the central piece of the architecture: the processing component.\n"
"It consumes the incoming transactions, and for each of them, calls a remote service.\n"
"It also writes the response (produced by the remote service) to another Kafka topic \"out\"."
msgstr ""

#: _posts/2020-09-08-kafka-rest-client.adoc
msgid ""
"Implementing this with Quarkus is straightforward, and that's what we will cover in this post.\n"
"Thanks to Reactive Messaging and the Rest Client, this should not take more than 20 lines of code!"
msgstr ""

#. type: Title ==
#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy, no-wrap
msgid "The Remote Service"
msgstr "远程服务"

#: _posts/2020-09-08-kafka-rest-client.adoc
msgid ""
"Let's start with the remote service.\n"
"Quarkus offers multiple ways to invoke a remote HTTP service, but let's use the Rest Client as it provides an excellent way to interact with HTTP services without having to handle the low-level details of HTTP."
msgstr ""

#. type: Plain text
#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid "You can use any HTTP API, but to simplify, let's consider a straightforward remote service, something like:"
msgstr "你可以使用任何HTTP API，但为了简化，让我们考虑一个直接的远程服务，比如说。"

#: _posts/2020-09-08-kafka-rest-client.adoc
msgid ""
"This service contains two methods calling the same HTTP endpoint.\n"
"The first one is synchronous, and so blocks the caller thread until the response is received.\n"
"The second is asynchronous, and the returned `Uni` gets the response when received.\n"
"In this case, the caller thread is not blocked and can do something else.\n"
"We are going to see how to use these methods later, but first, a bit of configuration.\n"
"In the `application.properties` add:"
msgstr ""

#: _posts/2020-09-08-kafka-rest-client.adoc
msgid ""
"Of course, update the URL.\n"
"The https://quarkus.io/guides/rest-client[https://quarkus.io/guides/rest-client] guide gives more details about the usage and configuration of the Rest Client."
msgstr ""

#. type: Title ==
#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy, no-wrap
msgid "Invoking the service for each incoming transaction"
msgstr "为每个传入的交易调用服务"

#: _posts/2020-09-08-kafka-rest-client.adoc
msgid ""
"Ok, we can call our service, but remember, we want to invoke it for every incoming transaction, and these transactions come from a Kafka topic.\n"
"With Reactive Messaging, there is no need to handle Kafka right now.\n"
"We can focus on the logic.\n"
"Let's say we have a *channel* (a stream of data), in which to transit our transactions.\n"
"We call this first channel `in`."
msgstr ""

#: _posts/2020-09-08-kafka-rest-client.adoc
msgid ""
"We also want to write the responses from the remote service into another Kafka topic.\n"
"Again, no need to handle Kafka right now.\n"
"Let's say we write the responses into a channel named `out`."
msgstr ""

#. type: Plain text
#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid "So, we have the following (incomplete) code:"
msgstr "因此，我们有以下（不完整）的代码。"

#: _posts/2020-09-08-kafka-rest-client.adoc
msgid ""
"`@Incoming` configures the read channel.\n"
"`@Outgoing` configures the written channel.\n"
"But, something is missing... we need to call our remote service:"
msgstr ""

#: _posts/2020-09-08-kafka-rest-client.adoc
msgid ""
"First, we inject the Rest Client.\n"
"Then, we just invoke it in our method."
msgstr ""

#: _posts/2020-09-08-kafka-rest-client.adoc
msgid ""
"You may wonder about `@Blocking`.\n"
"With reactive messaging, you need to indicate when you are using blocking code, as by default, it uses an event loop architecture.\n"
"While convenient, you should not abuse `@Blocking`, as it relies on a thread pool limiting your concurrency.\n"
"But, it keeps your logic synchronous."
msgstr ""

#: _posts/2020-09-08-kafka-rest-client.adoc
msgid "Using Asynchronous operations"
msgstr ""

#. type: Plain text
#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid "We can get rid of `@Blocking` annotation by using the second method provided by the `TransactionService`: `postAsync:`"
msgstr "我们可以通过使用 `TransactionService` 所提供的第二种方法来摆脱 `@Blocking` 注释。 `postAsync:` "

#: _posts/2020-09-08-kafka-rest-client.adoc
msgid ""
"Using the *async* variant of the `post` method allows us to remove `@Blocking`.\n"
"We return the `Uni` directly.\n"
"When that `Uni` receives the remote service's response, it writes the value to the `out` channel."
msgstr ""

#: _posts/2020-09-08-kafka-rest-client.adoc
msgid "Mapping channel to Kafka"
msgstr ""

#: _posts/2020-09-08-kafka-rest-client.adoc
msgid ""
"So far, so good.\n"
"It's time to connect our code with Kafka.\n"
"With Reactive Messaging, we map channels to _connectors_, here Kafka.\n"
"So, we just need to configure the application to indicate that the `in` and `out` channels are Kafka topics.\n"
"Once again, edit the `application.properties` file, and add:"
msgstr ""

#: _posts/2020-09-08-kafka-rest-client.adoc
msgid ""
"The first block is about the `in` channel.\n"
"It's connected to the `transactions` Kafka topic.\n"
"The data is deserialized with a https://github.com/cescoffier/quarkus-kafka-rest-client-demo/blob/master/src/main/java/org/acme/model/TransactionDeserializer.java[custom deserializer].\n"
"The last other properties disable the auto-commit (Reactive Messaging is handling commits for you) and read the data since the last committed offset."
msgstr ""

#: _posts/2020-09-08-kafka-rest-client.adoc
msgid ""
"The second block configures the `out` channel.\n"
"We connect it with the `output` Kafka topic and configure the value serializer.\n"
"For this simple example, we write the data as JSON."
msgstr ""

#. type: Plain text
#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid "So, when a transaction is written to the Kafka `transaction` topic, it gets received by our processing component, sent to the remote service, and the result is written to the `output` Kafka topic:"
msgstr "因此，当一个事务被写入Kafka `transaction` 主题时，它被我们的处理组件接收，发送到远程服务，然后结果被写入 `output` Kafka主题。"

#. type: Plain text
#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid "If you look inside the `output` topic, you will see the `TransactionResult` flowing:"
msgstr "如果你看一下 `output` 主题里面，你会看到 `TransactionResult` 流动。"

#. type: Plain text
#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid "image:/assets/images/posts/kafka-rest-client/output.png[]"
msgstr "image:/assets/images/posts/kafka-rest-client/output.png[alt=\"output\"]"

#: _posts/2020-09-08-kafka-rest-client.adoc
msgid "We are done!"
msgstr ""

#. type: Plain text
#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid "With a few lines of code and a bit of configuration, we can read data from a Kafka topic, call a remote service, and write the result to another Kafka topic. Plain simple."
msgstr "通过几行代码和一些配置，我们可以从一个Kafka主题读取数据，调用一个远程服务，并将结果写入另一个Kafka主题。简单明了。"

#: _posts/2020-09-08-kafka-rest-client.adoc
msgid ""
"Want to try by yourself?\n"
"Check out the code in this https://github.com/cescoffier/quarkus-kafka-rest-client-demo[GitHub repository] and follow the instructions from the readme."
msgstr ""

#. type: Plain text
#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid "Reactive Messaging and the Rest client contain other gems, check the related guides and documentation to learn more about them:"
msgstr "Reactive Messaging和Rest客户端包含了其他的宝石，请查看相关的指南和文档以了解更多信息。"

#. type: Plain text
#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid "https://quarkus.io/guides/rest-client[Using the Rest Client]"
msgstr "link:https://quarkus.io/guides/rest-client[使用Rest客户端]"

#. type: Plain text
#: _posts/2020-09-08-kafka-rest-client.adoc
msgid "https://quarkus.io/guides/kafka[Interacting with Kafka]"
msgstr ""

#. type: Plain text
#: _posts/2020-09-08-kafka-rest-client.adoc
msgid "https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.2/kafka/kafka.html[The Kafka Connector documentation]"
msgstr ""
