# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:1
#, fuzzy, no-wrap
msgid "cescoffier"
msgstr "鹤壁市"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:1
#, fuzzy, no-wrap
msgid "2020-09-08"
msgstr "2020-09-08"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "职位"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:1
#, fuzzy, no-wrap
msgid "How to combine reactive messaging, Kafka and the Rest client"
msgstr "如何结合反应式消息传递、Kafka和Rest客户端"

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:1
#, fuzzy, no-wrap
msgid "reactive kafka rest mutiny http"
msgstr "反应式kafka rest mutiny http"

#. type: YAML Front Matter: title
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:1
#, fuzzy, no-wrap
msgid "Combining Apache Kafka and the Rest client"
msgstr "结合Apache Kafka和Rest客户端"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:13
#, fuzzy
msgid "Another week, another interesting question.  This week, someone asks me about combining Kafka and the Rest Client.  That is a recurring subject, and most of the time, the goal is to achieve the following process:"
msgstr "又是一周，又是一个有趣的问题。这周，有人问我关于结合Kafka和Rest客户端的问题。这是一个反复出现的话题，大多数时候，目标都是为了实现以下过程。"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:15
#, fuzzy
msgid "image:/assets/images/posts/kafka-rest-client/kafka-rest-architecture.png[]"
msgstr "image:/assets/images/posts/kafka-rest-client/kafka-rest-architecture.png[alt=\"kafka rest architecture\"]"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:21
#, fuzzy
msgid "In other words, we want to call a remote service for each Kafka message we receive.  Therefore, we have a first topic (\"in\") containing the data we are consuming, for instance, \"transactions\".  Then, we have the central piece of the architecture: the processing component.  It consumes the incoming transactions, and for each of them, calls a remote service.  It also writes the response (produced by the remote service) to another Kafka topic \"out\"."
msgstr "换句话说，我们想为我们收到的每个Kafka消息调用一个远程服务。因此，我们有一个第一主题（\"in\"），包含我们正在消费的数据，例如，\"事务\"。然后，我们有架构的核心部分：处理组件。它消费传入的事务，并为每个事务调用一个远程服务。它还将响应（由远程服务产生）写到另一个Kafka主题 \"out\"。"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:24
#, fuzzy
msgid "Implementing this with Quarkus is straightforward, and that's what we will cover in this post.  Thanks to Reactive Messaging and the Rest Client, this should not take more than 20 lines of code!"
msgstr "用Quarkus实现这一点是很简单的，这就是我们在这篇文章中要介绍的。多亏了Reactive Messaging和Rest Client，这应该不会超过20行的代码。"

#. type: Title ==
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:25
#, fuzzy, no-wrap
msgid "The Remote Service"
msgstr "远程服务"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:29
#, fuzzy
msgid "Let's start with the remote service.  Quarkus offers multiple ways to invoke a remote HTTP service, but let's use the Rest Client as it provides an excellent way to interact with HTTP services without having to handle the low-level details of HTTP."
msgstr "让我们从远程服务开始。Quarkus提供了多种调用远程HTTP服务的方法，但让我们使用Rest Client，因为它提供了一种与HTTP服务交互的绝佳方式，而不需要处理HTTP的低级细节。"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:31
#, fuzzy
msgid "You can use any HTTP API, but to simplify, let's consider a straightforward remote service, something like:"
msgstr "你可以使用任何HTTP API，但为了简化，让我们考虑一个直接的远程服务，比如说。"

#. type: delimited block -
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:38
#, no-wrap
msgid ""
"@RegisterRestClient(configKey = \"transaction-service\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public interface TransactionService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:42
#, no-wrap
msgid ""
"    @Path(\"/transactions\")\n"
"    @POST \n"
"    TransactionResult postSync(Transaction transaction);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:46
#, no-wrap
msgid ""
"    @Path(\"/transactions\")\n"
"    @POST \n"
"    Uni<TransactionResult> postAsync(Transaction transaction);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:48
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:92
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:116
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:147
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:56
#, fuzzy
msgid "This service contains two methods calling the same HTTP endpoint.  The first one is synchronous, and so blocks the caller thread until the response is received.  The second is asynchronous, and the returned `Uni` gets the response when received.  In this case, the caller thread is not blocked and can do something else.  We are going to see how to use these methods later, but first, a bit of configuration.  In the `application.properties` add:"
msgstr "这个服务包含两个调用同一HTTP端点的方法。第一个是同步的，所以会阻塞调用者线程直到收到响应。第二个是异步的，返回的 `Uni` ，在收到时得到响应。在这种情况下，调用者线程不会被阻塞，可以做其他事情。我们将在后面看到如何使用这些方法，但首先要做一点配置。在 `application.properties` 中添加。"

#. type: delimited block -
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:61
#, no-wrap
msgid ""
"# Configure the transaction-service (rest client)\n"
"transaction-service/mp-rest/url=http://localhost:8080\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:65
#, fuzzy
msgid "Of course, update the URL.  The https://quarkus.io/guides/rest-client[https://quarkus.io/guides/rest-client] guide gives more details about the usage and configuration of the Rest Client."
msgstr "当然，要更新URL。 link:https://quarkus.io/guides/rest-client[https://quarkus.io/guides/rest-client] 指南给出了关于Rest客户端的使用和配置的更多细节。"

#. type: Title ==
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:66
#, fuzzy, no-wrap
msgid "Invoking the service for each incoming transaction"
msgstr "为每个传入的交易调用服务"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:73
#, fuzzy
msgid "Ok, we can call our service, but remember, we want to invoke it for every incoming transaction, and these transactions come from a Kafka topic.  With Reactive Messaging, there is no need to handle Kafka right now.  We can focus on the logic.  Let's say we have a *channel* (a stream of data), in which to transit our transactions.  We call this first channel `in`."
msgstr "好的，我们可以调用我们的服务，但是记住，我们要为每一个传入的事务调用它，而这些事务来自于Kafka主题。有了Reactive Messaging，现在就不需要处理Kafka了。我们可以把注意力放在逻辑上。假设我们有一个 *通道* （一个数据流），在其中转运我们的事务。我们把这第一个通道称为 `in` 。"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:77
#, fuzzy
msgid "We also want to write the responses from the remote service into another Kafka topic.  Again, no need to handle Kafka right now.  Let's say we write the responses into a channel named `out`."
msgstr "我们还想把远程服务的响应写进另一个Kafka主题。同样，现在不需要处理Kafka。假设我们把响应写进一个名为 `out` 的通道。"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:79
#, fuzzy
msgid "So, we have the following (incomplete) code:"
msgstr "因此，我们有以下（不完整）的代码。"

#. type: delimited block -
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:84
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:102
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:134
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class TransactionProcessor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:90
#, no-wrap
msgid ""
"    @Incoming(\"in\") // The first channel - we read from it\n"
"    @Outgoing(\"out\") // The second channel - we write to it\n"
"    public TransactionResult sendToTransactionService(Transaction transaction) {\n"
"       // Need to call our service here\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:97
#, fuzzy
msgid "`@Incoming` configures the read channel.  `@Outgoing` configures the written channel.  But, something is missing... we need to call our remote service:"
msgstr " `@Incoming` 配置读取通道。 配置写入通道。但是，还缺少一些东西...我们需要调用我们的远程服务。 `@Outgoing` "

#. type: delimited block -
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:104
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:136
#, no-wrap
msgid "    private static final Logger LOGGER = Logger.getLogger(\"TransactionProcessor\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:106
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:138
#, no-wrap
msgid "    @Inject @RestClient TransactionService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:114
#, no-wrap
msgid ""
"    @Incoming(\"in\")\n"
"    @Outgoing(\"out\")\n"
"    @Blocking\n"
"    public TransactionResult sendToTransactionService(Transaction transaction) {\n"
"        LOGGER.infof(\"Sending %s transaction service\", transaction);\n"
"        return service.postSync(transaction);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:120
#, fuzzy
msgid "First, we inject the Rest Client.  Then, we just invoke it in our method."
msgstr "首先，我们注入Rest Client。然后，我们就在我们的方法中调用它。"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:125
#, fuzzy
msgid "You may wonder about `@Blocking`.  With reactive messaging, you need to indicate when you are using blocking code, as by default, it uses an event loop architecture.  While convenient, you should not abuse `@Blocking`, as it relies on a thread pool limiting your concurrency.  But, it keeps your logic synchronous."
msgstr "你可能想知道 `@Blocking` 。使用反应式消息传递，你需要说明你何时使用阻塞代码，因为在默认情况下，它使用事件循环架构。虽然方便，但你不应该滥用 `@Blocking` ，因为它依靠线程池限制了你的并发性。但是，它保持了你的逻辑的同步性。"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:127
#, fuzzy
msgid "### Using Asynchronous operations"
msgstr "使用异步操作"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:129
#, fuzzy
msgid "We can get rid of `@Blocking` annotation by using the second method provided by the `TransactionService`: `postAsync:`"
msgstr "我们可以通过使用 `TransactionService` 所提供的第二种方法来摆脱 `@Blocking` 注释。 `postAsync:` "

#. type: delimited block -
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:145
#, no-wrap
msgid ""
"    @Incoming(\"in\")\n"
"    @Outgoing(\"out\")\n"
"    public Uni<TransactionResult> sendToTransactionService(Transaction transaction) {\n"
"        LOGGER.infof(\"Sending %s transaction service\", transaction);\n"
"        return service.postAsync(transaction);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:152
#, fuzzy
msgid "Using the *async* variant of the `post` method allows us to remove `@Blocking`.  We return the `Uni` directly.  When that `Uni` receives the remote service's response, it writes the value to the `out` channel."
msgstr "使用 `post` 方法的 *异步* 变体允许我们删除 `@Blocking` 。我们直接返回 `Uni` 。当该 `Uni` 收到远程服务的响应时，它将该值写入 `out` 通道。"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:154
#, fuzzy
msgid "### Mapping channel to Kafka"
msgstr "将通道映射到Kafka"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:160
#, fuzzy
msgid "So far, so good.  It's time to connect our code with Kafka.  With Reactive Messaging, we map channels to _connectors_, here Kafka.  So, we just need to configure the application to indicate that the `in` and `out` channels are Kafka topics.  Once again, edit the `application.properties` file, and add:"
msgstr "到目前为止，一切都很好。现在是时候将我们的代码与Kafka连接起来了。通过Reactive Messaging，我们将通道映射到 _连接器_ ，这里是Kafka。所以，我们只需要配置应用程序，以表明 `in` 和 `out` 通道是Kafka主题。再一次，编辑 `application.properties` 文件，并添加。"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:167
#, fuzzy
msgid "``` mp.messaging.incoming.in.connector=smallrye-kafka mp.messaging.incoming.in.topic=transactions mp.messaging.incoming.in.value.deserializer=org.acme.model.TransactionDeserializer mp.messaging.incoming.in.auto.offset.reset=earliest mp.messaging.incoming.in.enable.auto.commit=false"
msgstr " `` "

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:172
#, fuzzy
msgid "mp.messaging.outgoing.out.connector=smallrye-kafka mp.messaging.outgoing.out.topic=output mp.messaging.outgoing.out.value.serializer=io.quarkus.kafka.client.serialization.JsonbSerializer ```"
msgstr "mp.messaging.outgoing.out.connector=smallrye-kafka mp.messaging.outgoing.out.topic=output mp.messaging.outgoing.out.value.serializer=io.quarkus.kafka.client.serialization.JsonbSerializer ``` "

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:177
#, fuzzy
msgid "The first block is about the `in` channel.  It's connected to the `transactions` Kafka topic.  The data is deserialized with a https://github.com/cescoffier/quarkus-kafka-rest-client-demo/blob/master/src/main/java/org/acme/model/TransactionDeserializer.java[custom deserializer].  The last other properties disable the auto-commit (Reactive Messaging is handling commits for you) and read the data since the last committed offset."
msgstr "第一个区块是关于 `in` 频道的。它被连接到 `transactions` Kafka主题。数据是用一个 link:https://github.com/cescoffier/quarkus-kafka-rest-client-demo/blob/master/src/main/java/org/acme/model/TransactionDeserializer.java[自定义的反序列化器反序列] 化的。最后的其他属性禁用了自动提交（Reactive Messaging为你处理提交），并读取自上次提交的偏移量以来的数据。"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:181
#, fuzzy
msgid "The second block configures the `out` channel.  We connect it with the `output` Kafka topic and configure the value serializer.  For this simple example, we write the data as JSON."
msgstr "第二个块配置了 `out` 通道。我们将其与 `output` Kafka主题连接，并配置值序列化器。对于这个简单的例子，我们把数据写成JSON。"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:183
#, fuzzy
msgid "So, when a transaction is written to the Kafka `transaction` topic, it gets received by our processing component, sent to the remote service, and the result is written to the `output` Kafka topic:"
msgstr "因此，当一个事务被写入Kafka `transaction` 主题时，它被我们的处理组件接收，发送到远程服务，然后结果被写入 `output` Kafka主题。"

#. type: delimited block -
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:190
#, no-wrap
msgid ""
"2020-08-27 10:04:44,141 INFO  [TransactionProcessor] (vert.x-eventloop-thread-0) Sending Transaction{name='MacroHard', amount=20} transaction service\n"
"2020-08-27 10:04:44,196 INFO  [TransactionResource] (executor-thread-2) Handling transaction MacroHard / 20\n"
"2020-08-27 10:04:44,240 INFO  [TransactionProcessor] (vert.x-eventloop-thread-0) Sending Transaction{name='BlueHat', amount=10} transaction service\n"
"2020-08-27 10:04:44,245 INFO  [TransactionResource] (executor-thread-2) Handling transaction BlueHat / 10\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:193
#, fuzzy
msgid "If you look inside the `output` topic, you will see the `TransactionResult` flowing:"
msgstr "如果你看一下 `output` 主题里面，你会看到 `TransactionResult` 流动。"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:195
#, fuzzy
msgid "image:/assets/images/posts/kafka-rest-client/output.png[]"
msgstr "image:/assets/images/posts/kafka-rest-client/output.png[alt=\"output\"]"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:197
#, fuzzy
msgid "### We are done!"
msgstr "我们已经完成了!"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:199
#, fuzzy
msgid "With a few lines of code and a bit of configuration, we can read data from a Kafka topic, call a remote service, and write the result to another Kafka topic. Plain simple."
msgstr "通过几行代码和一些配置，我们可以从一个Kafka主题读取数据，调用一个远程服务，并将结果写入另一个Kafka主题。简单明了。"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:202
#, fuzzy
msgid "Want to try by yourself? Check out the code in this https://github.com/cescoffier/quarkus-kafka-rest-client-demo[GitHub repository] and follow the instructions from the readme."
msgstr "想自己试试吗？请查看 link:https://github.com/cescoffier/quarkus-kafka-rest-client-demo[GitHub仓库] 中的代码，并按照readme中的说明操作。"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:204
#, fuzzy
msgid "Reactive Messaging and the Rest client contain other gems, check the related guides and documentation to learn more about them:"
msgstr "Reactive Messaging和Rest客户端包含了其他的宝石，请查看相关的指南和文档以了解更多信息。"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:206
#, fuzzy
msgid "https://quarkus.io/guides/rest-client[Using the Rest Client]"
msgstr "link:https://quarkus.io/guides/rest-client[使用Rest客户端]"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:207
msgid "https://quarkus.io/guides/kafka[Interacting with Kafka]"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:207
msgid "https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.2/kafka/kafka.html[The Kafka Connector documentation]"
msgstr ""
