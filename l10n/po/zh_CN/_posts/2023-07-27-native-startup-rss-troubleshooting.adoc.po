# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-07-26 17:17+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy, no-wrap
msgid "Analysing Quarkus Native startup RSS consumption"
msgstr "分析 Quarkus Native 启动时的 RSS 消耗量"

#. type: YAML Front Matter: synopsis
#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy, no-wrap
msgid "Use Linux native tooling and JFR to understand Quarkus Native startup RSS consumption"
msgstr "使用 Linux 本机工具和 JFR 了解 Quarkus 本机启动 RSS 消耗情况"

#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid ""
"During the development of Quarkus 2.13,\n"
"we discovered that there was a startup degradation in native mode.\n"
"One of the key aspects of this degradation was that RSS consumption on start up had gone up by about 10-15% compared to Quarkus 2.7.\n"
"In this blog post you will learn how the Quarkus native RSS consumption debugging techniques described in\n"
"https://quarkus.io/guides/native-reference#rss[the Quarkus native reference guide]\n"
"were used to diagnose this issue.\n"
"You will also learn about recent updates in GraalVM that make doing this kind of analysis more convenient."
msgstr "在开发 Quarkus 2.13 的过程中，我们发现原生模式下的启动性能有所下降。这种退化的一个关键方面是，与 Quarkus 2.7 相比，启动时的 RSS 消耗量增加了约 10-15%。在这篇博文中，你将了解到如何使用 Quarkus 本机 link:https://quarkus.io/guides/native-reference#rss[参考指南] 中描述的 Quarkus link:https://quarkus.io/guides/native-reference#rss[本机] RSS 消耗调试技术来诊断这个问题。您还将了解到 GraalVM 的最新更新，这些更新使此类分析更加方便。"

#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid ""
"Our analysis showed that the RSS consumption for Quarkus 2.7 was about ~33MB while for Quarkus 2.13 it was about ~36MB, roughly a 10 % increase.\n"
"Below we see how we measured the RSS consumption for Quarkus 2.7.6.Final:"
msgstr "我们的分析表明，Quarkus 2.7 的 RSS 消耗量约为 33MB，而 Quarkus 2.13 的消耗量约为 36MB，大约增加了 10%。下面是我们测量 Quarkus 2.7.6.Final RSS 消耗量的方法："

#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid ""
"Similarly, below we see how we measured the RSS consumption for Quarkus 2.13.4.Final:\n"
"In our environment, the RSS consumption had gone up to about ~36M, roughly a 10% increase:"
msgstr "同样，下面是我们测量 Quarkus 2.13.4.Final 的 RSS 消耗情况：在我们的环境中，RSS 消耗量上升到约 36M，大约增加了 10%："

#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid ""
"Since Quarkus 2.7 and 2.13 used different GraalVM versions (21.3 vs 22.3),\n"
"we first investigated whether the increase in the startup time and RSS consumption was due to a change in GraalVM.\n"
"This turned out to not be the case,\n"
"as using the same GraalVM version on both Quarkus versions still resulted in similar differences."
msgstr "由于 Quarkus 2.7 和 2.13 使用了不同的 GraalVM 版本（21.3 与 22.3），我们首先研究了启动时间和 RSS 消耗的增加是否是由于 GraalVM 的变化造成的。事实证明并非如此，因为在两个 Quarkus 版本上使用相同的 GraalVM 版本仍然会产生类似的差异。"

#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid ""
"We also profiled the startup time in JVM mode,\n"
"and although we could observe some slight increase in heap usage,\n"
"the RSS increase was not apparent at runtime.\n"
"So, the challenge was to understand what was causing the RSS increase that seemed to only affect native mode\n"
"and that was Quarkus specific."
msgstr "我们还对 JVM 模式下的启动时间进行了剖析，虽然我们可以观察到堆使用量略有增加，但 RSS 的增加在运行时并不明显。因此，我们面临的挑战是了解是什么导致了 RSS 的增加，而 RSS 的增加似乎只影响本地模式，并且是 Quarkus 特有的。"

#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid ""
"In native mode we needed to look for system calls that increased RSS,\n"
"and investigate what caused them.\n"
"There are several system calls that can be used to allocate memory, e.g. `malloc`, `mmap`...etc,\n"
"but when we analysed the system calls emitted on startup,\n"
"we discovered that `mmap` calls were the prominent ones.\n"
"Following\n"
"https://www.brendangregg.com/FlameGraphs/memoryflamegraphs.html[Brendan Gregg’s Memory Leak (and Growth) Flame Graphs guide]\n"
"on a Linux environment,\n"
"we were able to produce flamegraphs for the `mmap` system calls.\n"
"To obtain these flamegraphs, we capture the `sys_enter_mmap` system call events with `perf record`,\n"
"and then we generate flamegraphs with the recorded data:"
msgstr "在本机模式下，我们需要查找会增加 RSS 的系统调用，并研究其原因。有几种系统调用可用于分配内存，如 `malloc` , `mmap` ......等，但当我们分析启动时发出的系统调用时，我们发现 `mmap` 调用是最主要的调用。根据 link:https://www.brendangregg.com/FlameGraphs/memoryflamegraphs.html[Brendan Gregg] 在 Linux 环境下的 link:https://www.brendangregg.com/FlameGraphs/memoryflamegraphs.html[内存泄漏（和增长）火焰图指南] ，我们为 `mmap` 系统调用生成了火焰图。为了获得这些火焰图，我们使用 `perf record` 捕捉 `sys_enter_mmap` 系统调用事件，然后使用记录的数据生成火焰图："

#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid ""
"The native executable above was created passing in\n"
"`-Dquarkus.native.debug.enabled` and `-Dquarkus.native.additional-build-args=-H:-DeleteLocalSymbols`\n"
"as extra build flags."
msgstr "上面的本地可执行文件是通过 `-Dquarkus.native.debug.enabled` 和 `-Dquarkus.native.additional-build-args=-H:-DeleteLocalSymbols` 作为额外的构建标志创建的。"

#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid ""
"`mmap` calls happen for a variety of reasons,\n"
"but in the context of this blog post,\n"
"we're interested in those `mmap` calls that are triggered by object allocations.\n"
"Not every object allocation triggers an `mmap` call.\n"
"Instead, each thread in SubstrateVM will allocate a heap chunk using `mmap` when the first object is allocated,\n"
"and it will use this heap chunk as long as there's space for further objects allocated in the same thread.\n"
"When the heap chunk is full,\n"
"the thread will request a new heap chunk using `mmap`.\n"
"This pattern is called thread-local allocation.\n"
"HotSpot has a similar feature as well,\n"
"but there the heap chunk size is dynamically computed depending on multiple factors,\n"
"while on SubstrateVM the size is fixed.\n"
"At the time of writing, the default heap chunk size is 1MB,\n"
"but an upcoming change will make it 512KB instead."
msgstr "`mmap` 调用发生的原因多种多样，但在本博文中，我们感兴趣的是由对象分配触发的 调用。并非每次对象分配都会触发 调用。相反，SubstrateVM 中的每个线程都会在分配第一个对象时使用 分配一个堆块，只要同一线程中还有空间分配其他对象，就会使用这个堆块。当堆块已满时，线程将使用 申请一个新的堆块。这种模式称为线程本地分配。HotSpot 也有类似的功能，但它的堆块大小是根据多种因素动态计算的，而 SubstrateVM 的堆块大小是固定的。在撰写本文时，堆块的默认大小是 1MB，但即将进行的修改会将其改为 512KB。 `mmap` `mmap` `mmap` `mmap`"

#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid ""
"We describe the object allocation as fast when the thread has a heap chunk cached and there's enough space for the object.\n"
"We describe the object allocation as slow when the thread needs to request a new heap chunk via the `mmap` system call to satisfy the object allocation.\n"
"Slow allocations are the most interesting in this case,\n"
"because they give us a rough indication of which allocations are pushing the number of heap chunks up,\n"
"and therefore are pushing the RSS consumption up.\n"
"In SubstrateVM, stacktraces of the slow allocation path contain invocations to methods defined in the `com.oracle.svm.core.genscavenge.ThreadLocalAllocation` class that contain the `slowPathNew` prefix in their name .\n"
"E.g. `slowPathNewInstance` for plain objects or `slowPathNewArray` for arrays."
msgstr "当线程缓存了一个堆块，并且有足够的空间分配对象时，我们将对象分配描述为快速。当线程需要通过 `mmap` 系统调用请求一个新的堆块来满足对象分配时，我们将对象分配描述为慢速分配。在这种情况下，慢速分配是最有趣的，因为它们能让我们大致了解哪些分配会导致堆块数量增加，从而导致 RSS 消耗增加。在 SubstrateVM 中，慢速分配路径的堆栈跟踪包含对 `com.oracle.svm.core.genscavenge.ThreadLocalAllocation` 类中定义的方法的调用，这些方法的名称中包含 `slowPathNew` 前缀。例如， `slowPathNewInstance` 用于纯对象， `slowPathNewArray` 用于数组。"

#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid ""
"The areas of interest in the flamegraphs are those stacktraces that contain `ApplicationImpl.doStart()` method call,\n"
"because that's the method that is responsible for starting up Quarkus applications.\n"
"We want to find out how many slow path allocations are visible in these stacktraces,\n"
"which are executed by the `main` thread.\n"
"Also, by looking at the stacktraces that cause these slow path allocations,\n"
"we can get an idea of which components might be allocation heavy.\n"
"If you focus the flamegraph on that method,\n"
"and then click on `Search` at the top right and type `slowPathNew`,\n"
"you can observe which of the `sys_enter_mmap` system calls are related to native heap memory allocation."
msgstr "火焰图中值得关注的区域是包含 `ApplicationImpl.doStart()` 方法调用的堆栈跟踪，因为该方法负责启动 Quarkus 应用程序。我们想找出这些堆栈跟踪中可见的慢速路径分配的数量，它们是由 `main` 线程执行的。此外，通过查看导致这些慢路径分配的堆栈跟踪，我们还可以了解哪些组件可能是重分配组件。如果将 flamegraph 聚焦在该方法上，然后点击右上角的 `Search` 并输入 `slowPathNew` ，就可以观察到 `sys_enter_mmap` 中哪些系统调用与本地堆内存分配有关。"

#. type: Plain text
#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid "For Quarkus 2.7.6.Final, the flamegraph looks like this:"
msgstr "在 Quarkus 2.7.6.Final 中，火焰图如下所示："

#. type: Plain text
#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid "And here's a screenshot highlighting the stacktraces that contain slow path allocations:"
msgstr "下面是一张截图，突出显示了包含慢速路径分配的堆栈跟踪："

#. type: Plain text
#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid "Observing the number of stacktraces that contain `slowPathNew` invocations above, i.e. 2, we can say that the `main` thread in Quarkus 2.7.6.Final allocates roughly 2MB of heap chunks."
msgstr "通过观察上述包含 `slowPathNew` 调用的堆栈跟踪次数（即 2 次），我们可以说，Quarkus 2.7.6.Final 中的 `main` 线程分配了大约 2MB 的堆块。"

#. type: Plain text
#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid "For Quarkus 2.13.4.Final, the flamegraph looks like this:"
msgstr "在 Quarkus 2.13.4.Final 中，火焰图如下所示："

#. type: Plain text
#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid "Focusing on the same area, we observe that the `slowPathNew` stacktrace count is 5 in this case, so the `main` thread allocates roughly 5MB of heap chunks:"
msgstr "针对同一区域，我们观察到 `slowPathNew` 堆栈跟踪计数为 5，因此 `main` 线程分配了大约 5MB 的堆块："

#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid ""
"The increase in object allocation at runtime startup between these two Quarkus versions,\n"
"combined with the idiosyncrasies of how thread local allocation works in SubstrateVM,\n"
"is what was causing the increase in RSS consumption.\n"
"In other words, even though both HotSpot and SubstrateVM experience higher allocations,\n"
"SubstrateVM's fixed thread-local allocation heap chunk sizes make this more apparent,\n"
"compared to the dynamic thread-local allocation logic in HotSpot."
msgstr "这两个 Quarkus 版本在运行时启动时对象分配的增加，再加上 SubstrateVM 中线程本地分配工作方式的特殊性，是导致 RSS 消耗增加的原因。换句话说，尽管 HotSpot 和 SubstrateVM 都经历了较高的分配量，但与 HotSpot 的动态线程本地分配逻辑相比，SubstrateVM 的固定线程本地分配堆块大小使这种情况更加明显。"

#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid ""
"Since then, improvements were made to the components that caused the extra object allocation.\n"
"We were able to detect the changes that had caused these extra allocations\n"
"by looking at the components that appeared in the stacktrace leading to slow allocations,\n"
"and inspecting updates that had happened in those components.\n"
"In this case, updates to the SmallRye configuration handling at startup caused the regression."
msgstr "此后，我们对导致额外对象分配的组件进行了改进。通过查看堆栈跟踪中出现的导致分配缓慢的组件，并检查这些组件中发生的更新，我们能够检测到导致这些额外分配的更改。在这种情况下，启动时对 SmallRye 配置处理的更新导致了回归。"

#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid ""
"The stacktraces that cause slow object allocations give us an approximation on the components that cause memory usage increase.\n"
"There could be situations where the stacktrace leading to a slow allocation is perfectly valid,\n"
"but due to the non-deterministic nature of object allocation,\n"
"the stacktrace just happens to be the one that caused a new heap chunk to be allocated.\n"
"However, if you see multiple stacktraces in the same area,\n"
"that's probably a good hint that something in that area needs to be investigated."
msgstr "通过导致对象分配缓慢的堆栈跟踪，我们可以大致了解导致内存使用量增加的原因。在某些情况下，导致缓慢分配的堆栈跟踪是完全正确的，但由于对象分配的非确定性，该堆栈跟踪恰好是导致分配新堆块的堆栈跟踪。不过，如果你在同一区域看到多个堆栈跟踪，这很可能是一个很好的提示，说明需要对该区域的某些问题进行调查。"

#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid ""
"By Quarkus version 2.13.7.Final, the RSS consumption on startup was back to previous levels.\n"
"The RSS regression was introduced by the changes in\n"
"https://github.com/quarkusio/quarkus/pull/26802#issue-1308798216[PR #26802],\n"
"and the fixes in https://github.com/quarkusio/quarkus/pull/29408[PR #29408]\n"
"and https://github.com/quarkusio/quarkus/pull/29842[PR #29842]\n"
"brought it back down."
msgstr "在 Quarkus 2.13.7.Final 版本中，启动时的 RSS 消耗量已恢复到以前的水平。 link:https://github.com/quarkusio/quarkus/pull/26802#issue-1308798216[PR #26802] 中的更改导致了 RSS 的回归，而 link:https://github.com/quarkusio/quarkus/pull/29408[PR #29408] 和 link:https://github.com/quarkusio/quarkus/pull/29842[PR #29842] 中的修复则使其回归到了原来的水平。"

#. type: Title ==
#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy, no-wrap
msgid "Performing the analysis with `ObjectAllocationInNewTLAB` JFR event"
msgstr "使用 `ObjectAllocationInNewTLAB` JFR 事件进行分析"

#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid ""
"As newer versions of GraalVM implement https://github.com/oracle/graal/issues/5410[more and more JFR events] in native mode,\n"
"it also becomes easier to analyse Quarkus application performance.\n"
"For instance the recent release of GraalVM for JDK 17/20 adds support for the `jdk.ObjectAllocationInNewTLAB` event,\n"
"which would have highlighted the discrepancies in the Quarkus versions compared above.\n"
"Unfortunately, the Quarkus versions tested here are not compatible with this GraalVM version,\n"
"but we can give it a go with the latest Quarkus version to see what comes out."
msgstr "随着新版本的 GraalVM 在本地模式下实现 link:https://github.com/oracle/graal/issues/5410[越来越多的 JFR 事件] ，分析 Quarkus 应用程序性能也变得更加容易。例如，最近发布的适用于 JDK 17/20 的 GraalVM 添加了对 `jdk.ObjectAllocationInNewTLAB` 事件的支持，这本可以突出显示上述 Quarkus 版本之间的差异。遗憾的是，这里测试的 Quarkus 版本与此 GraalVM 版本不兼容，但我们可以用最新的 Quarkus 版本试一试，看看会有什么结果。"

#. type: Plain text
#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid "First, we build the native Quarkus application with JFR support:"
msgstr "首先，我们构建支持 JFR 的本地 Quarkus 应用程序："

#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid ""
"To obtain `jdk.ObjectAllocationInNewTLAB` events,\n"
"a custom JFC configuration file is required.\n"
"We use `jfr configure` to generate it:"
msgstr "要获取 `jdk.ObjectAllocationInNewTLAB` 事件，需要自定义 JFC 配置文件。我们使用 `jfr configure` 生成该文件："

#. type: Plain text
#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid "Then, we start the Quarkus native executable with the necessary JFR flags:"
msgstr "然后，我们使用必要的 JFR 标志启动 Quarkus 本地可执行文件："

#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid ""
"After shutting down Quarkus,\n"
"we can use https://adoptium.net/jmc[Adoptium's Eclipse Mission Control]\n"
"to visualize a flamegraph for all the `jdk.ObjectAllocationInNewTLAB` events.\n"
"We can also do a similar focus on `ApplicationImpl.doStart()` method to observe which slow path allocations get triggered from there:"
msgstr "关闭 Quarkus 后，我们可以使用 link:https://adoptium.net/jmc[Adoptium 的 Eclipse Mission Control] 可视化所有 `jdk.ObjectAllocationInNewTLAB` 事件的火焰图。我们还可以对 `ApplicationImpl.doStart()` 方法进行类似的关注，观察哪些慢速路径分配是从这里触发的："

#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid ""
"Looking at the flamegraph,\n"
"we can count 7 stacktraces for slow path allocations for the `main` thread.\n"
"Whether this is a problem,\n"
"or maybe code execution has shifted from another thread to `main`,\n"
"would be something we would need to explore further and see if there's a regression."
msgstr "查看 flamegraph，我们可以发现 `main` 线程有 7 个堆栈跟踪存在缓慢的路径分配。这究竟是一个问题，还是代码执行从另一个线程转移到了 `main` ，我们需要进一步研究，看看是否出现了回归。"

#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid ""
"If you encounter memory issues in your native applications,\n"
"or any other type of performance issues,\n"
"do not hesitate giving JFR a go.\n"
"Robert Toyonaga has written a couple of blog posts on the latest JFR additions,\n"
"see link:/blog/profile-and-monitor-native-executables-with-jfr[here] to find out more."
msgstr "如果您在本地应用程序中遇到内存问题或任何其他类型的性能问题，请不要犹豫，试试 JFR。罗伯特-丰永（Robert Toyonaga）撰写了几篇关于 JFR 最新添加功能的博文，请点击 link:/blog/profile-and-monitor-native-executables-with-jfr[此处] 了解更多信息。"
