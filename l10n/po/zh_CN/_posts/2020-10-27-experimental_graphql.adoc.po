# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:1
#, no-wrap
msgid "phillipkruger"
msgstr ""

#. type: YAML Front Matter: date
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:1
#, no-wrap
msgid "2020-10-27"
msgstr ""

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:1
#, no-wrap
msgid "post"
msgstr ""

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:1
#, no-wrap
msgid "Exploring some experimental SmallRye GraphQL features"
msgstr ""

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:1
#, no-wrap
msgid "extension graphql"
msgstr ""

#. type: Title =
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:1
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:11
#, no-wrap
msgid "Experimental GraphQL"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:14
msgid "This blog post is a follow up on the initial introductory post, link:/blog/supersonic-subatomic-graphql/[Supersonic Subatomic GraphQL], and here we will explore more features, some that is experimental, that we hope to eventually move to the MicroProfile GraphQL Specification (based on your feedback !)"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:16
msgid "We will look at the following:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:18
msgid "Operational Context - Optimize your downstream processes."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:19
msgid "Cache - Caching your endpoints."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:20
msgid "Asynchronous - Concurrent execution of multiple requests or sources."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:21
msgid "Batch - Solving N+1."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:22
msgid "Generics support."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:23
msgid "Events and custom execution."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:24
msgid "Transformation and mapping."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:25
msgid "Build tools - Maven and Gradle support."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:27
msgid "All source code is available here: https://github.com/phillip-kruger/graphql-experimental[github.com/phillip-kruger/graphql-experimental]"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:28
#, no-wrap
msgid "Operational Context"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:31
msgid "The Context Object is an experimental Object that can be injected anywhere in your code, downstream from your `@GraphQLApi`."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:33
msgid "It's in the `api` module in SmallRye GraphQL, with the intention to eventually move this up to the MicroProfile GraphQL Api."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:35
msgid "Example:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:37
msgid "We have a Person GraphQL Endpoint, that uses some service to get the person from where ever it is stored."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:39
msgid "The endpoint:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:44
#, no-wrap
msgid ""
"@GraphQLApi\n"
"public class PersonEndpoint {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:47
#, no-wrap
msgid ""
"    @Inject\n"
"    PersonService personService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:52
#, no-wrap
msgid ""
"    @Query\n"
"    public List<Person> getPeople(){\n"
"        return personService.getAllPeople();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:58
#, no-wrap
msgid ""
"    @Query\n"
"    public Person getPerson(int id){\n"
"        return personService.getPerson(id);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:61
msgid "A Person is a basic POJO, that can have multiple relationships, that in turn has a Person. So making a call to the database to get a person, can end up retuning more people, depending on the number of relationships. In our example, we have Person 1 that has a `Spouse`, Person 2."
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:62
#, no-wrap
msgid "classdiagramm"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:62
#, no-wrap
msgid "PersonClassDiagram.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:66
msgid "Now let's assume that `PersonService` makes a call to a database or some other storage to get the data. We can now inject the context object to get details on the request, and optimise our call:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:71
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:73
#, no-wrap
msgid "    @Inject Context context;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:78
#, no-wrap
msgid ""
"    public Person getPerson(int id){\n"
"        // Use context to get more information on the query\n"
"        // Let's print out the context here and see what we have\n"
"        System.out.println(context);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:82
#, no-wrap
msgid ""
"        // Get the person from the datastore here.\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:85
msgid "Let's do a `Query` to get the name and surname of Person 1:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:94
#, no-wrap
msgid ""
"{\n"
"  person(id:1){\n"
"    names\n"
"    surname\n"
"  }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:96
#, no-wrap
msgid "So what can you get from context ?"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:99
msgid "There are a few things we can get:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:119
#, no-wrap
msgid ""
"executionId = 30337360\n"
"request = {\"query\":\"{\\n  person(id:1){\\n    names\\n    surname\\n  }\\n}\",\"variables\":null}\n"
"operationName = null\n"
"operationTypes = [Query]\n"
"parentTypeName = Query\n"
"variables = null\n"
"query = {\n"
"  person(id:1){\n"
"    names\n"
"    surname\n"
"  }\n"
"},\n"
"fieldName = person\n"
"selectedFields = [\"names\",\"surname\"]\n"
"source = null\n"
"arguments = {id=1}\n"
"path = /person\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:122
msgid "What we probably want to know is which fields have been requested, so that we can do a better database query."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:124
msgid "So the fieldName (`person`) and the selectedFields (`names`,`surname`) is what we need."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:126
msgid "A more complex GraphQL Request, will then lead to a more complex datasource query, example, if we want to know the relationships we would do:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:142
#, no-wrap
msgid ""
"{\n"
"  person(id:1){\n"
"    names\n"
"    surname\n"
"    relations{\n"
"      relationType\n"
"      person{\n"
"        names\n"
"        surname\n"
"      }\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:145
msgid "That will give us this in the `Context` selectedFields:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:166
#, no-wrap
msgid ""
"[\n"
"   \"names\",\n"
"   \"surname\",\n"
"   {\n"
"      \"relations\":[\n"
"         {\n"
"            \"relationType\":[\n"
"            ]\n"
"         },\n"
"         {\n"
"            \"person\":[\n"
"               \"names\",\n"
"               \"surname\"\n"
"            ]\n"
"         }\n"
"      ]\n"
"   }\n"
"]\n"
msgstr ""

#. type: Title ===
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:168
#, no-wrap
msgid "Context in source methods"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:171
msgid "Let's add a field to person using `@Source` and see what the context can give us then. First we will add a service that fetches the exchange rate from an api (http://exchangeratesapi.io/[exchangeratesapi.io]). This allows us to add the exchange rate for that person against some currency."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:173
msgid "In Java we add this `Source` method:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:181
#, no-wrap
msgid ""
"public ExchangeRate getExchangeRate(@Source Person person, CurencyCode against){\n"
"    Map<CurencyCode, Double> map = exchangeRateService.getExchangeRates(against);\n"
"    Double rate = map.get(person.curencyCode);\n"
"    return new ExchangeRate(person.curencyCode, against, rate);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:184
msgid "Now we can query that (`ExchangeRate`) field:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:196
#, no-wrap
msgid ""
"{\n"
"  person(id:1){\n"
"    names\n"
"    surname\n"
"    exchangeRate(against:GBP){\n"
"      rate\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:199
msgid "When we `Inject` and print the context in the `ExchangeRateService` we now get:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:223
#, no-wrap
msgid ""
"executionId = 17333236733\n"
"request = {\"query\":\"{\\n  person(id:1){\\n    names\\n    surname\\n    exchangeRate(against:GBP){\\n      rate\\n    }\\n  }\\n}\",\"variables\":null}\n"
"operationName = null\n"
"operationTypes = [Query]\n"
"parentTypeName = Person\n"
"variables = null\n"
"query = {\n"
"  person(id:1){\n"
"    names\n"
"    surname\n"
"    exchangeRate(against:GBP){\n"
"      rate\n"
"    }\n"
"  }\n"
"}\n"
"fieldName = exchangeRate\n"
"selectedFields = [\"rate\"]\n"
"source = com.github.phillipkruger.user.model.Person@7929ad0a\n"
"arguments = {against=GBP}\n"
"fieldName = exchangeRate\n"
"path = /person/exchangeRate\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:226
msgid "Note that the fieldName is now `exchangeRate` and the selectedFields is `[\"rate\"]`. You will also note that the source field is populated with the person."
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:227
#, no-wrap
msgid "Cache"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:230
msgid "Another question that comes up regularly is how can you cache your endpoint results. As an example, let's say the Exchange Rate information can be updated daily, so we do not want to make a call to the http://exchangeratesapi.io/[exchangeratesapi.io] for every call."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:232
msgid "You can just use the caching that comes with Quarkus! Simply include the cache extension:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:239
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-cache</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:242
msgid "And add the `@CacheResult` annotation to your method:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:251
#, no-wrap
msgid ""
"@CacheResult(cacheName = \"exchange-rate-cache\")\n"
"public ExchangeRate getExchangeRate(@Source Person person, CurencyCode against){\n"
"    Map<CurencyCode, Double> map = exchangeRateService.getExchangeRates(against);\n"
"    Double rate = map.get(person.curencyCode);\n"
"    return new ExchangeRate(person.curencyCode, against, rate);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:254
msgid "Read more about caching in Quarkus here: https://quarkus.io/guides/cache[quarkus.io/guides/cache]"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:255
#, no-wrap
msgid "Asynchronous"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:258
msgid "Now, let's add another service that returns the weather conditions for a city:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:263
#, no-wrap
msgid ""
"@GraphQLApi\n"
"public class TravelEndpoint {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:266
#, no-wrap
msgid ""
"    @Inject\n"
"    WeatherService weatherService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:271
#, no-wrap
msgid ""
"    @Query\n"
"    public Weather getWeather(String city){\n"
"        return weatherService.getWeather(city);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:273
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:276
msgid "Let's say this person is traveling to London, you can now do something like this:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:293
#, no-wrap
msgid ""
"{\n"
"  person(id:1){\n"
"    names\n"
"    surname\n"
"    exchangeRate(against:GBP){\n"
"      rate\n"
"    }\n"
"  }\n"
"  weather(city:\"London\"){\n"
"    description\n"
"    min\n"
"    max\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:296
msgid "At the moment the person and weather query will execute sequentially, and there is no real reason that this should be the case. We can get the weather at the same time that we get the person."
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:297
#, no-wrap
msgid "async1"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:297
#, no-wrap
msgid "async1.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:300
msgid "Let's change the java code:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:307
#, no-wrap
msgid ""
"@Query\n"
"public CompletableFuture<Person> getPerson(int id){\n"
"    return CompletableFuture.supplyAsync(() -> personService.getPerson(id));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:310
msgid "and"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:317
#, no-wrap
msgid ""
"@Query\n"
"public CompletableFuture<Weather> getWeather(String city){\n"
"    return weatherService.getWeather(city);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:320
msgid "Now person and weather are being fetched concurrently."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:322
msgid "Let's say this person actually wants to travel to London _and_ New York, we can do something like this:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:347
#, no-wrap
msgid ""
"{\n"
"  person(id:1){\n"
"    names\n"
"    surname\n"
"    gbp:exchangeRate(against:GBP){\n"
"      rate\n"
"    }\n"
"    usd:exchangeRate(against:USD){\n"
"      rate\n"
"    }\n"
"  }\n"
"  uk:weather(city:\"London\"){\n"
"    description\n"
"    min\n"
"    max\n"
"  }\n"
"  us:weather(city:\"New York\"){\n"
"    description\n"
"    min\n"
"    max\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:350
msgid "We can now change the code to also fetch the exchange rates concurrently:"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:351
#, no-wrap
msgid "async2"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:351
#, no-wrap
msgid "async2.png"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:358
#, no-wrap
msgid ""
"public CompletableFuture<ExchangeRate> getExchangeRate(@Source Person person, CurencyCode against){\n"
"    return CompletableFuture.supplyAsync(() -> exchangeRateService.getExchangeRate(against,person.curencyCode));\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:360
#, no-wrap
msgid "Batch"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:363
msgid "If you want to get ALL people, and you are including a field (like `exchangeRate`) with a `Source` method, it means that for every person, we will call the `getExchangeRate` method. Depending on the number of people, that could be a lot of calls. So you might rather want to do a batch source method."
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:364
#, no-wrap
msgid "batch"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:364
#, no-wrap
msgid "batch.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:367
msgid "This will allow you to get all the people in one method and do one call to get their exchange rates."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:369
msgid "So, let's change the `getExchangeRate` method to take a `List` of person and return a `List` of `ExchangeRate`:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:374
#, no-wrap
msgid ""
"public List<ExchangeRate> getExchangeRate(@Source List<Person> people, CurencyCode against){\n"
"    Map<CurencyCode, Double> map = exchangeRateService.getExchangeRates(against);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:380
#, no-wrap
msgid ""
"    List<ExchangeRate> rates = new ArrayList<>();\n"
"    for(Person person : people){\n"
"        Double rate = map.get(person.curencyCode);\n"
"        rates.add(new ExchangeRate(person.curencyCode, against, rate));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:383
#, no-wrap
msgid ""
"    return rates;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:386
msgid "Above will still work on `getPerson` method where there is only one person."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:388
msgid "Doing a query on all people:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:400
#, no-wrap
msgid ""
"{\n"
"  people{\n"
"    names\n"
"    surname\n"
"    exchangeRate(against:GBP){\n"
"      rate\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:403
msgid "This will call the `getExchangeRate` method with all people."
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:404
#, no-wrap
msgid "Generics"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:407
msgid "It's the year 2050 and we need to extend our travel service to also cater for aliens. Let's add a generic `Being` type:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:411
#, no-wrap
msgid "public class Being<T> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:413
#, no-wrap
msgid "    private T being;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:416
#, no-wrap
msgid ""
"    public Being() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:420
#, no-wrap
msgid ""
"    public Being(T being) {\n"
"        this.being = being;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:424
#, no-wrap
msgid ""
"    public T getBeing() {\n"
"        return being;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:429
#, no-wrap
msgid ""
"    public void setBeing(T being) {\n"
"        this.being = being;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:432
msgid "And now change the Endpoint to allow people and alien queries:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:439
#, no-wrap
msgid ""
"@Query\n"
"public Being<Person> getPerson(int id){\n"
"    return new Being<>(personService.getPerson(id));\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:444
#, no-wrap
msgid ""
"@Query\n"
"public Being<Alien> getAlien(int id){\n"
"    return new Being<>(alienService.getAlien(id));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:447
msgid "We can then query both human and alien beings:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:464
#, no-wrap
msgid ""
"{\n"
"  person(id:1){\n"
"    being{\n"
"      names\n"
"      surname\n"
"    }\n"
"  }\n"
"  alien(id:1){\n"
"    being{\n"
"      type\n"
"      from\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:466
#, no-wrap
msgid "Events and custom execution"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:470
msgid "Events are used internally when you enable integration with MicroProfile Metrics, MicroProfile OpenTracing and Bean Validation, but you can also take part in these events.  These are all CDI Events and can be used with the `@Observes` annotation."
msgstr ""

#. type: Title ===
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:471
#, no-wrap
msgid "While building the schema"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:474
msgid "When we scan the classpath for annotations and types, we build up a https://github.com/smallrye/smallrye-graphql/tree/main/common/schema-model[model] of all the operations. You can manipulate this model by taking part in the _create operation_ event:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:481
#, no-wrap
msgid ""
"public Operation createOperation(@Observes Operation operation) {\n"
"    // Here manipulate operation\n"
"    return operation;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:485
msgid "Just before the final schema is built, after scanning all annotations and after the above event, you can _take part_ and contribute to the schema: This exposes the underlying `graphql-java` implementation details, and can be useful when you want to do things that are not yet implemented in SmallRye GraphQL, like subscriptions for instance:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:492
#, no-wrap
msgid ""
"public GraphQLSchema.Builder beforeSchemaBuild(@Observes GraphQLSchema.Builder builder) {\n"
"    // Here add you own, in example a subscription\n"
"    return builder;\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:494
#, no-wrap
msgid "While running a request"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:496
#, no-wrap
msgid "events"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:496
#, no-wrap
msgid "events.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:499
msgid "In this example request:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:512
#, no-wrap
msgid ""
"{\n"
"  person(id:1){\n"
"    names\n"
"    surname\n"
"    exchangeRate(against:USD){\n"
"      rate\n"
"      base\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:515
msgid "the request flow is as follows:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:517
msgid "The Execution service gets the request."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:518
msgid "The person is being fetched with a `datafetcher`."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:519
msgid "Your CDI bean (`@GraphQLApi`) method (`getPerson`) is being invoked."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:520
msgid "The exchange rate is being fetched, passing the above person as an argument."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:521
msgid "Your CDI bean (`@GraphQLApi`) method (`getExchangeRate`) is being invoked."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:522
msgid "Data is being returned."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:524
msgid "You can receive events on all of these points:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:530
#, no-wrap
msgid ""
"public void beforeExecute(@Observes @BeforeExecute Context context) {\n"
"    System.err.println(\">>>>> Received beforeExecute event [\" + context.getQuery() + \"]\");\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:534
#, no-wrap
msgid ""
"public void beforeDataFetch(@Observes @BeforeDataFetch Context context) {\n"
"    System.err.println(\">>>>> Received beforeDataFetch event [\" + context.getQuery() + \"]\");\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:538
#, no-wrap
msgid ""
"public void beforeInvoke(@Observes InvokeInfo invokeInfo) {\n"
"    System.err.println(\">>>>> Received beforeInvoke event [\" + invokeInfo.getOperationMethod().getName() + \"]\");\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:542
#, no-wrap
msgid ""
"public void afterDataFetch(@Observes @AfterDataFetch Context context) {\n"
"    System.err.println(\">>>>> Received afterDataFetch event [\" + context.getQuery() + \"]\");\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:546
#, no-wrap
msgid ""
"public void afterExecute(@Observes @AfterExecute Context context) {\n"
"    System.err.println(\">>>>> Received afterExecute event [\" + context.getQuery() + \"]\");\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:549
msgid "You can also get events when an error occurs:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:555
#, no-wrap
msgid ""
"public void errorExecute(@Observes @ErrorExecute ErrorInfo errorInfo) {\n"
"    System.err.println(\">>>>> Received errorExecute event [\" + errorInfo.getT() + \"]\");\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:559
#, no-wrap
msgid ""
"public void errorDataFetch(@Observes @ErrorDataFetch ErrorInfo errorInfo) {\n"
"    System.err.println(\">>>>> Received errorDataFetch event [\" + errorInfo.getT() + \"]\");\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:561
#, no-wrap
msgid "Using the Execution Service directly"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:564
msgid "The default assumed behavior is to interact with your endpoint via HTTP, you can however inject the `ExecutionService` yourself and execute requests."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:566
msgid "As an example, lets do a request that gets all the names of all the people on startup:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:574
#, no-wrap
msgid ""
"{\n"
"  people{\n"
"    names\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:577
msgid "We can now do this:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:582
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class StartupService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:584
#, no-wrap
msgid "    @Inject ExecutionService executionService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:586
#, no-wrap
msgid "    public void init(@Observes StartupEvent event){\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:591
#, no-wrap
msgid ""
"        JsonObjectBuilder builder = Json.createObjectBuilder();\n"
"        builder.add(\"query\", ALL_NAMES);\n"
"        JsonObject request = builder.build();\n"
"        JsonObject response = executionService.execute(request);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:593
#, no-wrap
msgid "        System.err.println(\">>>>> \" + response);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:595
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:602
#, no-wrap
msgid ""
"    private static final String ALL_NAMES = \"{\\n\" +\n"
"                                            \"people{\\n\" +\n"
"                                            \"    names\\n\" +\n"
"                                            \"  }\\n\" +\n"
"                                            \"}\";\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:604
#, no-wrap
msgid "Transformation and mapping"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:607
msgid "By default, Date and Number values can be transformed using https://javaee.github.io/jsonb-spec/docs/user-guide.html#date-number-formats[JsonB Formats]"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:612
#, no-wrap
msgid ""
"public class Person {\n"
"    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:615
#, no-wrap
msgid ""
"    @JsonbDateFormat(\"dd.MM.yyyy\")\n"
"    private Date birthDate;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:619
#, no-wrap
msgid ""
"    @JsonbNumberFormat(\"#0.00\")\n"
"    public BigDecimal salary;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:622
msgid "MicroProfile GraphQL Specification maps the relevant Java types to a GraphQL Scalar. You can change the mapping of an existing field to map to another Scalar type like this:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:627
#, no-wrap
msgid ""
"@ToScalar(Scalar.Int.class)\n"
"Long id; // This usually maps to BigInteger\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:630
msgid "In the GraphQL Schema this will now map to an `int`."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:632
msgid "You can also add an Object that should transform to a `Scalar` Type and not a complex object, example you might have an `Email` Object, but do not want to use a complex type in GraphQL, and rather map this to a `String`:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:634
msgid "To do this your `Email` POJO needs to implement the `toString` method and have a constructor that takes a String, or a static `Email fromString(String s)` method, or a `setValue(String value)` method."
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:639
#, no-wrap
msgid ""
"public class Email {\n"
"    private String value;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:642
#, no-wrap
msgid ""
"    public Email() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:646
#, no-wrap
msgid ""
"    public Email(String value) {\n"
"        this.value = value;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:650
#, no-wrap
msgid ""
"    public String getValue() {\n"
"        return value;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:654
#, no-wrap
msgid ""
"    public void setValue(String value) {\n"
"        this.value = value;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:660
#, no-wrap
msgid ""
"    @Override\n"
"    public String toString() {\n"
"        return value;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:663
msgid "You can then use this as a field on your Response and add the `@ToScalar` annotation, i.e. person:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:668
#, no-wrap
msgid ""
"@ToScalar(Scalar.String.class)\n"
"Email email; // This usually maps to a complex object\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:670
#, no-wrap
msgid "Build tools"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:673
msgid "Lastly, support has been added to generate the schema on https://github.com/smallrye/smallrye-graphql/tree/main/tools[build] using https://github.com/smallrye/smallrye-graphql/tree/main/tools/maven-plugin[`maven`] (or https://github.com/smallrye/smallrye-graphql/tree/main/tools/gradle-plugin[`gradle`])."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:675
msgid "Example, in `maven` you can add this to your `pom.xml`:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:689
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>smallrye-graphql-maven-plugin</artifactId>\n"
"    <groupId>io.smallrye</groupId>\n"
"    <executions>\n"
"        <execution>\n"
"            <goals>\n"
"                <goal>generate-schema</goal>\n"
"            </goals>\n"
"        </execution>\n"
"    </executions>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:691
msgid "and the generated schema will be stored in `target/generated/`."
msgstr ""
