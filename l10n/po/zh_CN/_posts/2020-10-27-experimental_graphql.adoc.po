# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy, no-wrap
msgid "Experimental GraphQL"
msgstr "实验性的GraphQL"

#. type: YAML Front Matter: synopsis
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy, no-wrap
msgid "Exploring some experimental SmallRye GraphQL features"
msgstr "探索SmallRye GraphQL的一些实验性功能"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "This blog post is a follow up on the initial introductory post, link:/blog/supersonic-subatomic-graphql/[Supersonic Subatomic GraphQL], and here we will explore more features, some that is experimental, that we hope to eventually move to the MicroProfile GraphQL Specification (based on your feedback !)"
msgstr "这篇博文是最初的介绍性文章《 link:/blog/supersonic-subatomic-graphql/[超音速亚原子GraphQL] 》的后续文章，在这里我们将探索更多的功能，有些是实验性的，我们希望最终能将其转移到MicroProfile GraphQL规范中（基于你的反馈！）。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "We will look at the following:"
msgstr "我们将研究以下问题。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "Operational Context - Optimize your downstream processes."
msgstr "业务背景 - 优化你的下游流程。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "Cache - Caching your endpoints."
msgstr "缓存 - 缓存你的端点。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "Asynchronous - Concurrent execution of multiple requests or sources."
msgstr "异步 - 多个请求或来源的并发执行。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "Batch - Solving N+1."
msgstr "批量 - 解决N+1。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "Generics support."
msgstr "仿制药支持。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "Events and custom execution."
msgstr "事件和自定义执行。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "Transformation and mapping."
msgstr "转化和制图。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "Build tools - Maven and Gradle support."
msgstr "构建工具 - 支持Maven和Gradle。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "All source code is available here: https://github.com/phillip-kruger/graphql-experimental[github.com/phillip-kruger/graphql-experimental]"
msgstr "所有的源代码都可以在这里找到： link:https://github.com/phillip-kruger/graphql-experimental[github.com/phillip-kruger/graphql-experimental]"

#. type: Title ==
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy, no-wrap
msgid "Operational Context"
msgstr "业务背景"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "The Context Object is an experimental Object that can be injected anywhere in your code, downstream from your `@GraphQLApi`."
msgstr "Context Object是一个实验性的Object，它可以被注入到你的代码中的任何地方，从你的 `@GraphQLApi` 。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "It's in the `api` module in SmallRye GraphQL, with the intention to eventually move this up to the MicroProfile GraphQL Api."
msgstr "它在SmallRye GraphQL的 `api` 模块中，并打算最终将其提升到MicroProfile GraphQL Api中。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
msgid "Example:"
msgstr "例如："

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "We have a Person GraphQL Endpoint, that uses some service to get the person from where ever it is stored."
msgstr "我们有一个Person GraphQL端点，它使用一些服务来从它所存储的地方获得人。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "The endpoint:"
msgstr "的终点。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "A Person is a basic POJO, that can have multiple relationships, that in turn has a Person. So making a call to the database to get a person, can end up retuning more people, depending on the number of relationships. In our example, we have Person 1 that has a `Spouse`, Person 2."
msgstr "一个人是一个基本的POJO，它可以有多个关系，而这些关系又有一个人。因此，调用数据库来获取一个人，最终可能会检索到更多的人，这取决于关系的数量。在我们的例子中，我们有一个Person 1，它有一个 `Spouse` ，Person 2。"

#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid ""
"Now let's assume that `PersonService` makes a call to a database or some other storage to get the data. We can now inject the context object to get\n"
"details on the request, and optimise our call:"
msgstr "现在，让我们假设 `PersonService` 调用数据库或其他存储设备来获取数据。现在，我们可以注入上下文对象来获取请求的详细信息，并优化我们的调用："

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "Let's do a `Query` to get the name and surname of Person 1:"
msgstr "让我们做一个 `Query` ，得到人1的名字和姓氏。"

#. type: Title ===
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy, no-wrap
msgid "So what can you get from context ?"
msgstr "那么，你能从背景中得到什么？"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "There are a few things we can get:"
msgstr "有几样东西我们可以得到。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "What we probably want to know is which fields have been requested, so that we can do a better database query."
msgstr "我们可能想知道的是哪些字段被请求了，这样我们可以做一个更好的数据库查询。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "So the fieldName (`person`) and the selectedFields (`names`,`surname`) is what we need."
msgstr "所以fieldName ( `person` ) 和selectedFields ( `names` , `surname` ) 是我们需要的。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "A more complex GraphQL Request, will then lead to a more complex datasource query, example, if we want to know the relationships we would do:"
msgstr "一个更复杂的GraphQL请求，将导致一个更复杂的数据源查询，例如，如果我们想知道关系，我们会做。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "That will give us this in the `Context` selectedFields:"
msgstr "这将使我们在 `Context` selectedFields中得到这个。"

#. type: Title ===
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy, no-wrap
msgid "Context in source methods"
msgstr "源方法中的语境"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "Let's add a field to person using `@Source` and see what the context can give us then. First we will add a service that fetches the exchange rate from an api (http://exchangeratesapi.io/[exchangeratesapi.io]). This allows us to add the exchange rate for that person against some currency."
msgstr "让我们使用 `@Source` ，给人添加一个字段，然后看看上下文能给我们什么。首先，我们将添加一个服务，从一个api link:http://exchangeratesapi.io/[（exchangeratesapi.io] ）获取汇率。这允许我们添加该人对某种货币的汇率。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "In Java we add this `Source` method:"
msgstr "在Java中，我们添加了这个 `Source` 方法。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "Now we can query that (`ExchangeRate`) field:"
msgstr "现在我们可以查询那个( `ExchangeRate` )字段。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "When we `Inject` and print the context in the `ExchangeRateService` we now get:"
msgstr "当我们 `Inject` ，并在 `ExchangeRateService` 中打印上下文时，我们现在得到了。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "Note that the fieldName is now `exchangeRate` and the selectedFields is `[\"rate\"]`. You will also note that the source field is populated with the person."
msgstr "请注意，fieldName现在是 `exchangeRate` ，selectedFields是 `[\"rate\"]` 。你还会注意到，源字段被填充为人。"

#. type: Title ==
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy, no-wrap
msgid "Cache"
msgstr "缓存"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "Another question that comes up regularly is how can you cache your endpoint results. As an example, let's say the Exchange Rate information can be updated daily, so we do not want to make a call to the http://exchangeratesapi.io/[exchangeratesapi.io] for every call."
msgstr "另一个经常出现的问题是如何能缓存你的端点结果。举个例子，比方说汇率信息可以每天更新，所以我们不想每次调用 link:http://exchangeratesapi.io/[exchangeratesapi.io] 。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "You can just use the caching that comes with Quarkus! Simply include the cache extension:"
msgstr "你可以直接使用Quarkus自带的缓存!只需包括缓存扩展。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "And add the `@CacheResult` annotation to your method:"
msgstr "并在你的方法中加入 `@CacheResult` 注解。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "Read more about caching in Quarkus here: https://quarkus.io/guides/cache[quarkus.io/guides/cache]"
msgstr "在这里阅读更多关于Quarkus中的缓存的信息： link:https://quarkus.io/guides/cache[quarkus.io/guides/cache]"

#. type: Title ==
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy, no-wrap
msgid "Asynchronous"
msgstr "异步"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "Now, let's add another service that returns the weather conditions for a city:"
msgstr "现在，让我们添加另一项服务，返回一个城市的天气状况。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "Let's say this person is traveling to London, you can now do something like this:"
msgstr "假设这个人要去伦敦旅行，你现在可以做这样的事情。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "At the moment the person and weather query will execute sequentially, and there is no real reason that this should be the case. We can get the weather at the same time that we get the person."
msgstr "目前，人和天气查询将按顺序执行，没有真正的理由应该如此。我们可以在得到人的同时得到天气信息。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "Let's change the java code:"
msgstr "让我们修改一下java代码。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "and"
msgstr "和"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "Now person and weather are being fetched concurrently."
msgstr "现在，人和天气被同时取走了。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "Let's say this person actually wants to travel to London _and_ New York, we can do something like this:"
msgstr "假设这个人真的想去伦敦 _和_ 纽约旅行，我们可以做这样的事情。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "We can now change the code to also fetch the exchange rates concurrently:"
msgstr "我们现在可以改变代码，同时获取汇率。"

#. type: Title ==
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy, no-wrap
msgid "Batch"
msgstr "批量"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "If you want to get ALL people, and you are including a field (like `exchangeRate`) with a `Source` method, it means that for every person, we will call the `getExchangeRate` method. Depending on the number of people, that could be a lot of calls. So you might rather want to do a batch source method."
msgstr "如果你想获得所有的人，并且你包括一个字段（如 `exchangeRate` ），有一个 `Source` 方法，这意味着对于每一个人，我们将调用 `getExchangeRate` 方法。根据人数的多少，这可能是一个很多的调用。所以你可能更想做一个批处理源方法。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "This will allow you to get all the people in one method and do one call to get their exchange rates."
msgstr "这将使你能够以一种方法获得所有的人，并做一个电话来获得他们的汇率。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "So, let's change the `getExchangeRate` method to take a `List` of person and return a `List` of `ExchangeRate`:"
msgstr "因此，让我们改变 `getExchangeRate` 方法，取一个 `List` 的人并返回一个 `List` 的 `ExchangeRate` 。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "Above will still work on `getPerson` method where there is only one person."
msgstr "在只有一个人的情况下，上述方法仍将适用于 `getPerson` 。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "Doing a query on all people:"
msgstr "对所有的人做一个查询。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "This will call the `getExchangeRate` method with all people."
msgstr "这将与所有的人一起调用 `getExchangeRate` 方法。"

#. type: Title ==
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy, no-wrap
msgid "Generics"
msgstr "非专利品"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "It's the year 2050 and we need to extend our travel service to also cater for aliens. Let's add a generic `Being` type:"
msgstr "现在是2050年，我们需要扩展我们的旅行服务，以满足外国人的需求。让我们添加一个通用的 `Being` 。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "And now change the Endpoint to allow people and alien queries:"
msgstr "现在把端点改成允许人和外国人查询。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "We can then query both human and alien beings:"
msgstr "然后我们可以查询人类和外星生物。"

#. type: Title ==
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy, no-wrap
msgid "Events and custom execution"
msgstr "事件和自定义执行"

#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid ""
"Events are used internally when you enable integration with MicroProfile Metrics, MicroProfile OpenTracing and Bean Validation, but you can also take part in these events.\n"
"These are all CDI Events and can be used with the `@Observes` annotation."
msgstr "当您启用与 MicroProfile Metrics、MicroProfile OpenTracing 和 Bean Validation 的集成时，会在内部使用事件，但您也可以参与这些事件。这些都是 CDI 事件，可与 `@Observes` 注释一起使用。"

#. type: Title ===
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy, no-wrap
msgid "While building the schema"
msgstr "在建立模式的同时"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "When we scan the classpath for annotations and types, we build up a https://github.com/smallrye/smallrye-graphql/tree/main/common/schema-model[model] of all the operations. You can manipulate this model by taking part in the _create operation_ event:"
msgstr "当我们扫描classpath中的注解和类型时，我们建立了一个所有操作的 link:https://github.com/smallrye/smallrye-graphql/tree/main/common/schema-model[模型] 。你可以通过参与 _创建操作_ 事件来操纵这个模型。"

#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid ""
"Just before the final schema is built, after scanning all annotations and after the above event, you can _take part_ and contribute to the schema:\n"
"This exposes the underlying `graphql-java` implementation details, and can be useful when you want to do things that are not yet implemented in SmallRye GraphQL, like subscriptions for instance:"
msgstr "在构建最终模式之前、扫描所有注释之后以及上述事件之后，您可以 _参与_ 并为模式做出贡献：这将暴露 `graphql-java` 的底层实现细节，当您想做 SmallRye GraphQL 尚未实现的事情（例如订阅）时，这将非常有用："

#. type: Title ===
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy, no-wrap
msgid "While running a request"
msgstr "在运行一个请求时"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "In this example request:"
msgstr "在这个例子中，请求。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "the request flow is as follows:"
msgstr "请求流如下。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "The Execution service gets the request."
msgstr "执行服务获得请求。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "The person is being fetched with a `datafetcher`."
msgstr "该人被人用 `datafetcher` 。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "Your CDI bean (`@GraphQLApi`) method (`getPerson`) is being invoked."
msgstr "你的CDI bean ( `@GraphQLApi` ) 方法 ( `getPerson` ) 正在被调用。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "The exchange rate is being fetched, passing the above person as an argument."
msgstr "正在获取汇率，将上述人作为一个参数传递。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "Your CDI bean (`@GraphQLApi`) method (`getExchangeRate`) is being invoked."
msgstr "你的CDI bean ( `@GraphQLApi` ) 方法 ( `getExchangeRate` ) 正在被调用。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "Data is being returned."
msgstr "数据正在被返回。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "You can receive events on all of these points:"
msgstr "你可以收到关于所有这些点的事件。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "You can also get events when an error occurs:"
msgstr "当发生错误时，你也可以获得事件。"

#. type: Title ===
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy, no-wrap
msgid "Using the Execution Service directly"
msgstr "直接使用执行服务"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "The default assumed behavior is to interact with your endpoint via HTTP, you can however inject the `ExecutionService` yourself and execute requests."
msgstr "默认的假设行为是通过HTTP与你的端点互动，然而你可以自己注入 `ExecutionService` ，并执行请求。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "As an example, lets do a request that gets all the names of all the people on startup:"
msgstr "作为一个例子，让我们做一个请求，获得所有启动的人的名字。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "We can now do this:"
msgstr "我们现在可以这样做。"

#. type: Title ==
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy, no-wrap
msgid "Transformation and mapping"
msgstr "转化和制图"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "By default, Date and Number values can be transformed using https://javaee.github.io/jsonb-spec/docs/user-guide.html#date-number-formats[JsonB Formats]"
msgstr "默认情况下，日期和数字值可以使用 link:https://javaee.github.io/jsonb-spec/docs/user-guide.html#date-number-formats[JsonB格式] 进行转换"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "MicroProfile GraphQL Specification maps the relevant Java types to a GraphQL Scalar. You can change the mapping of an existing field to map to another Scalar type like this:"
msgstr "MicroProfile GraphQL规范将相关的Java类型映射到GraphQL Scalar。你可以改变现有字段的映射，以便像这样映射到另一个Scalar类型。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "In the GraphQL Schema this will now map to an `int`."
msgstr "在GraphQL模式中，这现在将映射到一个 `int` 。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "You can also add an Object that should transform to a `Scalar` Type and not a complex object, example you might have an `Email` Object, but do not want to use a complex type in GraphQL, and rather map this to a `String`:"
msgstr "你也可以添加一个应该转换为 `Scalar` 类型而不是复杂对象的对象，例如你可能有一个 `Email` 对象，但不想在GraphQL中使用复杂类型，而是将其映射到一个 `String` 。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "To do this your `Email` POJO needs to implement the `toString` method and have a constructor that takes a String, or a static `Email fromString(String s)` method, or a `setValue(String value)` method."
msgstr "要做到这一点，你的 `Email` POJO需要实现 `toString` 方法，并且有一个接受字符串的构造函数，或者一个静态 `Email fromString(String s)` 方法，或者一个 `setValue(String value)` 方法。"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "You can then use this as a field on your Response and add the `@ToScalar` annotation, i.e. person:"
msgstr "然后你可以在你的 \"回应 \"中使用这个字段，并添加 `@ToScalar` 注释，即人。"

#. type: Title ==
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy, no-wrap
msgid "Build tools"
msgstr "构建工具"

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "Lastly, support has been added to generate the schema on https://github.com/smallrye/smallrye-graphql/tree/main/tools[build] using https://github.com/smallrye/smallrye-graphql/tree/main/tools/maven-plugin[`maven`] (or https://github.com/smallrye/smallrye-graphql/tree/main/tools/gradle-plugin[`gradle`])."
msgstr "最后，增加了对在 link:https://github.com/smallrye/smallrye-graphql/tree/main/tools[构建] 时生成模式的支持，即使用 link:https://github.com/smallrye/smallrye-graphql/tree/main/tools/maven-plugin[`maven`] (或 link:https://github.com/smallrye/smallrye-graphql/tree/main/tools/gradle-plugin[`gradle`] )."

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "Example, in `maven` you can add this to your `pom.xml`:"
msgstr "例如，在 `maven` 中，您可以在 `pom.xml` 中添加以下内容："

#. type: Plain text
#: _posts/2020-10-27-experimental_graphql.adoc
#, fuzzy
msgid "and the generated schema will be stored in `target/generated/`."
msgstr "生成的模式将存储在 `target/generated/` 中。"
