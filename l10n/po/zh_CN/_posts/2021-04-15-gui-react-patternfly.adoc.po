# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:1
#, fuzzy, no-wrap
msgid "dbrintzi"
msgstr "dbrintzi"

#. type: YAML Front Matter: date
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:1
#, fuzzy, no-wrap
msgid "2021-04-15"
msgstr "2021-04-15"

#. type: YAML Front Matter: layout
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "职位"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:1
#, fuzzy, no-wrap
msgid "Find out how to easily integrate the React and Patternfly GUI frameworks into your projects for development as well as production"
msgstr "了解如何轻松地将React和Patternnfly GUI框架集成到你的项目中，用于开发和生产。"

#. type: YAML Front Matter: tags
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:1
#, fuzzy, no-wrap
msgid "web gui react patternfly"
msgstr "web gui react patternfly"

#. type: YAML Front Matter: title
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:1
#, fuzzy, no-wrap
msgid "Adding Eyecandy to your Quarkus App with React and Patternfly"
msgstr "用React和Patternnfly向你的Quarkus应用程序添加Eyecandy"

#. type: Plain text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:11
#, fuzzy
msgid "A common pattern for containerized and distributed Quarkus applications is to serve as an efficient and scalable backend for a separate frontend application.  In the Kubernetes world a frontend application could be a pure web layer pod such as React, Angular or Vue.js, delegating all REST calls to these Quarkus service layer pods."
msgstr "容器化和分布式Quarkus应用程序的一个常见模式是作为一个独立的前端应用程序的高效和可扩展的后端。在Kubernetes世界中，前端应用程序可以是一个纯粹的Web层pod，如React、Angular或Vue.js，将所有REST调用委托给这些Quarkus服务层pod。"

#. type: Target for macro image
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:13
#, no-wrap
msgid "/assets/images/posts/gui-react-patternfly/frontend_pod_pattern.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:16
#, fuzzy
msgid "While this approach has the benefit of independent container scaling as well as an independent lifecycle it may sometimes be over engineered for small applications."
msgstr "虽然这种方法有独立的容器扩展以及独立的生命周期的好处，但对于小型应用来说，有时可能是过度设计。"

#. type: Plain text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:18
#, fuzzy
msgid "Perhaps you just want to create a small self-contained CRUD application without compromising in modern web GUI technologies? We have seen how to achieve this with https://quarkus.io/blog/quarkus-and-web-ui-development-mode/[Angular] but what about React which at least according to GitHub stars has surpassed Angular in terms of popularity? It is all about choice and I will show you how you can not only integrate React but also use a web component framework called https://www.patternfly.org/[Patternfly].  Patternfly is a collection of patterns, components and styles for creating rich, consistent and interactive GUIs."
msgstr "也许你只是想创建一个小型的独立的CRUD应用程序，而不影响现代网络GUI技术？我们已经看到了如何用 link:https://quarkus.io/blog/quarkus-and-web-ui-development-mode/[Angular] 来实现这一点，但是React呢，至少根据GitHub上的星星已经超过了Angular的流行程度？这一切都与选择有关，我将向你展示你如何不仅可以整合React，还可以使用一个名为 link:https://www.patternfly.org/[Patternfly] 的Web组件框架。Patternfly是一个模式、组件和风格的集合，用于创建丰富、一致和互动的GUI。"

#. type: Plain text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:20
#, fuzzy
msgid "Let's create a Quarkus App with a REST endpoint that serves atomic particle objects to be displayed in a React/Patternfly table.  The sourcecode for the final application can be found https://github.com/nexus-Six/quarkus-gui-react-patternfly[here]."
msgstr "让我们创建一个带有REST端点的Quarkus应用程序，为原子粒子对象提供服务，并在React/Patternfly表中显示。最终应用程序的源代码可以 link:https://github.com/nexus-Six/quarkus-gui-react-patternfly[在这里] 找到。"

#. type: Title ==
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:21
#, fuzzy, no-wrap
msgid "Step 1 - Generate the Quarkus Project"
msgstr "第1步 - 生成Quarkus项目"

#. type: Plain text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:24
#, fuzzy
msgid "To generate a starter project go to https://code.quarkus.io. Enter 'io.quarkus' as Maven Group and 'quarkus-react' as Artifact.  In the list of extensions choose *RESTEasy JAX-RS* and *RESTEasy JSON-B*. Then generate and download the project, unzip it on your local machine and open the project folder in your favorite IDE."
msgstr "要生成一个启动项目，请登录 https://code.quarkus.io 在Maven组中输入 \"io.quarkus\"，在Artifact中输入 \"quarkus-react\"。在扩展列表中选择 *RESTEasy JAX-RS* 和 *RESTEasy JSON-B* 。然后生成并下载项目，在本地机器上解压，在你喜欢的IDE中打开项目文件夹。"

#. type: Title ==
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:25
#, fuzzy, no-wrap
msgid "Step 2 - Add the Quarkus REST Endpoint"
msgstr "第2步 - 添加Quarkus REST端点"

#. type: Plain text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:28
#, fuzzy
msgid "In the Java package folder /src/main/java/io/quarkus where the sample *GreetingResource.java* resides, create a new bean class called *Particle.java* with the following content:"
msgstr "在样本 *GreetingResource.java* 所在的Java包文件夹/src/main/java/io/quarkus中，创建一个名为 *Particle.java* 的新豆类，内容如下。"

#. type: delimited block -
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:32
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:55
#, no-wrap
msgid "package io.quarkus;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:34
#, no-wrap
msgid "public class Particle {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:36
#, no-wrap
msgid "    private String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:41
#, no-wrap
msgid ""
"    public void setName(String name)\n"
"    {\n"
"        this.name = name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:46
#, no-wrap
msgid ""
"    public String getName()\n"
"    {\n"
"        return this.name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:48
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:51
#, fuzzy
msgid "Now create a new REST resource class called *ParticleResource.java* where we return some test particles (neglecting any atomic physics implications here)."
msgstr "现在创建一个新的REST资源类，名为 *ParticleResource.java* ，在这里我们返回一些测试粒子（这里忽略了任何原子物理学的影响）。"

#. type: delimited block -
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:59
#, no-wrap
msgid ""
"import java.util.Collections;\n"
"import java.util.LinkedHashMap;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:62
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:65
#, no-wrap
msgid ""
"@Path(\"/particles\")\n"
"public class ParticleResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:68
#, no-wrap
msgid ""
"    @GET\n"
"    public Set<Particle> getUsers() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:70
#, no-wrap
msgid "        Set <Particle> particleList = Collections.newSetFromMap(Collections.synchronizedMap(new LinkedHashMap<>()));\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:74
#, no-wrap
msgid ""
"        Particle particle = new Particle();\n"
"        particle.setName(\"Graviton\");\n"
"        particleList.add(particle);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:81
#, no-wrap
msgid ""
"        Particle particle2 = new Particle();\n"
"        particle2.setName(\"Pentaquark\");\n"
"        particleList.add(particle2);        \n"
"        return particleList;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:84
#, fuzzy
msgid "Test if everything works by starting up Quarkus in dev mode:"
msgstr "通过在开发模式下启动Quarkus来测试一切是否正常。"

#. type: delimited block -
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:88
#, no-wrap
msgid "$ mvn quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:91
#, fuzzy
msgid "In a new terminal call the endpoint to see your particle response:"
msgstr "在一个新的终端中调用端点，查看你的粒子响应。"

#. type: delimited block -
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:95
#, no-wrap
msgid "$ curl http://localhost:8080/particles\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:97
#, no-wrap
msgid "[{\"name\":\"Graviton\"},{\"name\":\"Pentaquark\"}]                                              \n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:100
#, fuzzy
msgid "Our Quarkus data layer is now ready, so let's create the React GUI next."
msgstr "我们的Quarkus数据层现在已经准备好了，所以接下来让我们创建React GUI。"

#. type: Title ==
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:101
#, fuzzy, no-wrap
msgid "Step 3 - Generate the React Project"
msgstr "第3步 - 生成React项目"

#. type: Plain text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:104
#, fuzzy
msgid "Make sure you have installed *Node.js* and *npm* on your system.  Refer to the https://nodejs.org/en/download/[official documentation] for more information if required."
msgstr "确保你已经在你的系统上安装了 *Node.js* 和 *npm* 。如果需要，请参考 link:https://nodejs.org/en/download/[官方文档] 以获得更多信息。"

#. type: Plain text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:106
#, fuzzy
msgid "Create a new folder in your project /src/main/*webapp* which will be the base folder for your React project. Now open another terminal in this folder, run the React project initializer and then add the Patternfly node module:"
msgstr "在你的项目中创建一个新的文件夹/src/main/ *webapp* ，这将是你React项目的基础文件夹。现在在这个文件夹中打开另一个终端，运行React项目初始化程序，然后添加Patternnfly节点模块。"

#. type: delimited block -
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:111
#, no-wrap
msgid ""
"$ npx create-react-app .\n"
"$ npm install @patternfly/patternfly --save\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:114
#, fuzzy
msgid "When starting the React app it will run on port 3000 by default. When we then try to access our Quarkus endpoint on port 8080 the browser will prevent this due to https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS[CORS security policies].  In production this will not matter as the compiled static React app will be served from Quarkus over port 8080 as well but during development this is an issue."
msgstr "当启动React应用程序时，它将默认在3000端口运行。当我们试图在8080端口访问我们的Quarkus端点时，浏览器会因为 link:https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS[CORS安全策略] 而阻止它。在生产中，这并不重要，因为编译好的静态React应用也会通过8080端口从Quarkus提供服务，但在开发过程中这是一个问题。"

#. type: Plain text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:116
#, fuzzy
msgid "Fortunately React has a neat little feature called *proxy* which forwards all requests for unknown endpoints to another URL. In the */webapp* folder open the file *package.json* and add the proxy line forwarding everything to our Quarkus port on 8080:"
msgstr "幸运的是，React有一个整洁的小功能，叫做 *代理* ，它可以将所有对未知端点的请求转发到另一个URL。在 */webapp* 文件夹中，打开 *package.json* 文件，添加代理行，将所有请求转发到我们的Quarkus端口8080上。"

#. type: delimited block -
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:158
#, no-wrap
msgid ""
"{\n"
"  \"name\": \"webapp\",\n"
"  \"version\": \"0.1.0\",\n"
"  \"private\": true,\n"
"  \"dependencies\": {\n"
"    \"@testing-library/jest-dom\": \"^5.11.4\",\n"
"    \"@testing-library/react\": \"^11.1.0\",\n"
"    \"@testing-library/user-event\": \"^12.1.10\",\n"
"    \"react\": \"^17.0.1\",\n"
"    \"react-dom\": \"^17.0.1\",\n"
"    \"react-scripts\": \"4.0.3\",\n"
"    \"web-vitals\": \"^1.0.1\"\n"
"  },\n"
"  \"scripts\": {\n"
"    \"start\": \"react-scripts start\",\n"
"    \"build\": \"react-scripts build\",\n"
"    \"test\": \"react-scripts test\",\n"
"    \"eject\": \"react-scripts eject\"\n"
"  },\n"
"  \"proxy\": \"http://localhost:8080/\",\n"
"  \"eslintConfig\": {\n"
"    \"extends\": [\n"
"      \"react-app\",\n"
"      \"react-app/jest\"\n"
"    ]\n"
"  },\n"
"  \"browserslist\": {\n"
"    \"production\": [\n"
"      \">0.2%\",\n"
"      \"not dead\",\n"
"      \"not op_mini all\"\n"
"    ],\n"
"    \"development\": [\n"
"      \"last 1 chrome version\",\n"
"      \"last 1 firefox version\",\n"
"      \"last 1 safari version\"\n"
"    ]\n"
"  }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:161
#, fuzzy, no-wrap
msgid "Step 4 - Create a Patternfly Table Component to Populate with our Data"
msgstr "第4步 - 创建一个Patternnfly表组件来填充我们的数据"

#. type: Plain text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:164
#, fuzzy
msgid "Import the Patternfly CSS in the React project in */webapp/src/index.js*"
msgstr "在React项目的 */webapp/src/index.js* 中导入Patternfly CSS。"

#. type: delimited block -
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:172
#, no-wrap
msgid ""
"...\n"
"import './index.css';\n"
"import '@patternfly/patternfly/patternfly.css';\n"
"import App from './App';\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:175
#, fuzzy
msgid "In /webapp/src create a new folder called *components*, inside create a file called *particles.js* and generate a Patternfly table by looping over a list of particle objects:"
msgstr "在/webapp/src中创建一个名为 *组件* 的新文件夹，在里面创建一个名为 *partes.js* 的文件，通过循环播放粒子对象的列表来生成一个Patternnfly表。"

#. type: delimited block -
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:179
#, no-wrap
msgid "import React from 'react'\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:200
#, no-wrap
msgid ""
"const Particles = ({ particles }) => {\n"
"    return (\n"
"        <div>\n"
"            <center><h1>Particles List</h1></center>\n"
"            <table class=\"pf-c-table pf-m-grid-md\" role=\"grid\" aria-label=\"Supersonic Subatomic Particles\" id=\"table-basic\">\n"
"                <caption>Supersonic Subatomic Particles</caption>\n"
"                <thead>\n"
"                    <tr role=\"row\">\n"
"                        <th role=\"columnheader\" scope=\"col\">Name</th>\n"
"                    </tr>\n"
"                </thead>\n"
"                {particles.map((particle) => (\n"
"                    <tbody role=\"rowgroup\">\n"
"                        <tr role=\"row\">\n"
"                            <td role=\"cell\" data-label=\"Particle name\">{particle.name}</td>\n"
"                        </tr>\n"
"                    </tbody>\n"
"                ))}\n"
"            </table>\n"
"        </div>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:203
#, no-wrap
msgid ""
"    )\n"
"};\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:205
#, no-wrap
msgid "export default Particles\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:208
#, fuzzy
msgid "Next adjust */webapp/src/App.js* to call our Quarkus service endpoint and render our particle component with the response data:"
msgstr "接下来调整 */webapp/src/App.js* ，调用我们的Quarkus服务端点，用响应数据渲染我们的粒子组件。"

#. type: delimited block -
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:213
#, no-wrap
msgid ""
"import React, {Component} from 'react';\n"
"import Particles from './components/particles'\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:218
#, no-wrap
msgid ""
"class App extends Component {\n"
"  state = {\n"
"    particles: []\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:227
#, no-wrap
msgid ""
"  componentDidMount() {\n"
"    fetch('/particles')\n"
"    .then(res => res.json())\n"
"    .then((data) => {\n"
"      this.setState({ particles: data })\n"
"    })\n"
"    .catch(console.log)\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:234
#, no-wrap
msgid ""
"  render () {\n"
"    return (     \n"
"      <Particles particles={this.state.particles} />         \n"
"    );\n"
"  }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:236
#, no-wrap
msgid "export default App;\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:239
#, fuzzy
msgid "We are now ready to test our GUI in React development mode."
msgstr "我们现在准备在React开发模式下测试我们的GUI。"

#. type: Plain text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:241
#, fuzzy
msgid "Make sure Quarkus is still running in another terminal."
msgstr "确保Quarkus仍在另一个终端中运行。"

#. type: Plain text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:243
#, fuzzy
msgid "In the */webapp* folder execute :"
msgstr "在 */webapp* 文件夹中执行:"

#. type: delimited block -
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:247
#, no-wrap
msgid "$ npm start\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:250
#, fuzzy
msgid "A browser will open to http://localhost:3000.  If not navigate to that URL.  You should see our table dynamically populated from your Quarkus particle backend.  In the developer tools of your browser you will see that the data is actually retrieved from http://localhost:3000/particles"
msgstr "浏览器将打开到 http://localhost:3000 如果没有的话，请导航到该URL。你应该看到我们的表格从你的Quarkus粒子后台动态地填充出来。在浏览器的开发工具中，你会看到数据实际上是从 http://localhost:3000/particles 。"

#. type: Target for macro image
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:251
#, no-wrap
msgid "/assets/images/posts/gui-react-patternfly/patternfly_table.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:254
#, fuzzy
msgid "We are running in a double developer mode now. Any changes made to either your Java or Javascript code will be applied immediately.  Isn't that developer bliss?"
msgstr "我们现在是以双重开发模式运行。对你的Java或Javascript代码所做的任何修改都将被立即应用。这难道不是开发者的幸福吗？"

#. type: Plain text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:256
#, fuzzy
msgid "But what about containerized deployment you ask? Well, once your shiny new GUI app is ready for primetime there are some last adjustments that we need to build runnable jars and images."
msgstr "但是，你问的容器化部署是怎么回事？好吧，一旦你闪亮的新GUI应用准备好了，还有一些最后的调整，我们需要建立可运行的jars和image。"

#. type: Title ==
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:257
#, fuzzy, no-wrap
msgid "Step 5 - Prepare our Project for Production Build"
msgstr "第5步 - 为生产构建准备我们的项目"

#. type: Plain text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:260
#, fuzzy
msgid "In */webapp/package.json* add a prod build phase:"
msgstr "在 */webapp/package.json* 中添加一个prod构建阶段。"

#. type: delimited block -
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:269
#, no-wrap
msgid ""
"...\n"
" \"eject\": \"react-scripts eject\",\n"
" \"prod\": \"react-scripts build --dest && rsync -a build/* ../resources/META-INF/resources\"\n"
"  },\n"
"  \"proxy\": \"http://localhost:8080/\",\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:271
#, fuzzy
msgid "This will do a production build of the static React assets and copy them over into the default Quarkus directory for static files."
msgstr "这将对静态React资产进行生产构建，并将其复制到静态文件的默认Quarkus目录。"

#. type: Plain text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:273
#, fuzzy
msgid "The rsync command is specific for Linux.  For other operating systems please substitute with an equivalent command."
msgstr "rsync命令是针对Linux的。对于其他操作系统，请用一个同等的命令来代替。"

#. type: Plain text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:275
#, fuzzy
msgid "For the last step we will add the excellent https://github.com/eirslett/frontend-maven-plugin[frontend-maven-plugin] to our pom.xml that will trigger these React build phases from a normal maven build. Adjust the npm and node versions to match your locally installed ones. The maven install phase would actually install these two packages which can be handy for a CI/CD build or when starting with this project."
msgstr "最后一步，我们将在pom.xml中添加出色的 link:https://github.com/eirslett/frontend-maven-plugin[frontend-maven-plugin] ，它将从普通的maven构建中触发这些React构建阶段。调整npm和node的版本，使其与你本地安装的版本相匹配。maven安装阶段实际上会安装这两个包，这对CI/CD构建或开始使用该项目时很方便。"

#. type: delimited block -
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:320
#, no-wrap
msgid ""
"<build>\n"
"...\n"
" <plugin>\n"
"  <groupId>com.github.eirslett</groupId>\n"
"  <artifactId>frontend-maven-plugin</artifactId>\n"
"  <version>1.11.2</version>\n"
"  <configuration>\n"
"    <workingDirectory>${project.basedir}/src/main/webapp</workingDirectory>\n"
"    <installDirectory>target</installDirectory>\n"
"  </configuration>\n"
"  <executions>\n"
"    <execution>\n"
"      <id>install node and npm</id>\n"
"      <goals>\n"
"        <goal>install-node-and-npm</goal>\n"
"      </goals>\n"
"      <configuration>\n"
"        <nodeVersion>v14.15.4</nodeVersion>\n"
"        <npmVersion>6.14.10</npmVersion>\n"
"      </configuration>\n"
"    </execution>\n"
"    <execution>\n"
"      <id>npm install</id>\n"
"      <goals>\n"
"        <goal>npm</goal>\n"
"      </goals>\n"
"      <configuration>\n"
"        <arguments>install</arguments>\n"
"      </configuration>\n"
"    </execution>\n"
"    <execution>\n"
"      <id>npm run build</id>\n"
"      <goals>\n"
"        <goal>npm</goal>\n"
"      </goals>\n"
"      <configuration>\n"
"        <arguments>run prod</arguments>\n"
"      </configuration>\n"
"    </execution>\n"
"  </executions>\n"
"</plugin>\n"
"</build>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:323
#, fuzzy
msgid "Now let's build our runnable jar:"
msgstr "现在让我们建立我们的可运行的jar。"

#. type: delimited block -
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:326
#, no-wrap
msgid "$ mvn clean package\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:328
#, fuzzy
msgid "Stop all other running environments to free up the ports and run:"
msgstr "停止所有其他正在运行的环境以腾出端口并运行。"

#. type: delimited block -
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:332
#, no-wrap
msgid "$ java -jar target/quarkus-app/quarkus-run.jar \n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:335
#, fuzzy
msgid "Open your browser to http://localhost:8080 to see you table again, now running from a single optimized Quarkus jar."
msgstr "打开你的浏览器 http://localhost:8080 ，再次看到你的表格，现在从一个优化的Quarkus jar运行。"

#. type: Title ==
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:336
#, fuzzy, no-wrap
msgid "Take Away"
msgstr "采纳意见"

#. type: Plain text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:339
#, fuzzy
msgid "There you go. With just a few easy steps you can use the power of React and Patternfly to add slick looking interactive GUIs to your Quarkus apps."
msgstr "这就是了。只需几个简单的步骤，你就可以利用React和Patternfly的力量为你的Quarkus应用程序添加漂亮的交互式图形用户界面。"

#. type: Plain text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:341
#, no-wrap
msgid "How about compiling this app to https://quarkus.io/guides/building-native-image[native] next to deploy an extremely lightweight webapp? Or you may want to look at some of other https://www.patternfly.org/v4/get-started/develop/[Patternfly components] to create a more sophisticated web interface. Either way there no boundaries except for your creativity to make you Quarkus apps shine.       \n"
msgstr ""
