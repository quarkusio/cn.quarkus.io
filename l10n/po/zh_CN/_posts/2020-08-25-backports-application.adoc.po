# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-08-25-backports-application.adoc:1
#, no-wrap
msgid "gastaldi"
msgstr ""

#. type: YAML Front Matter: date
#: upstream/_posts/2020-08-25-backports-application.adoc:1
#, no-wrap
msgid "2020-08-25"
msgstr ""

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-08-25-backports-application.adoc:1
#, no-wrap
msgid "post"
msgstr ""

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-08-25-backports-application.adoc:1
#, no-wrap
msgid "user-story"
msgstr ""

#. type: Title =
#: upstream/_posts/2020-08-25-backports-application.adoc:1
#: upstream/_posts/2020-08-25-backports-application.adoc:8
#, no-wrap
msgid "From zero to hero on backporting pull requests"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:14
msgid "The Quarkus project moves fast and when we prepare bugfix releases, we usually have several dozens of pull requests to backport.  The number of pull requests to backport is enormous and doing it via the GitHub UI is inconvenient and takes a lot of time (click PR, copy/paste commit hashes to cherry-pick, remove label, assign milestone, assign milestone to all fixed issues, next) plus some limitation of the UI (it's not possible to sort by merge date to avoid conflicts, for example).  So we decided to automate this work, and built an application.  Of course, with Quarkus!"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:16
msgid "Before we dig into the solution, let me give you a quick explanation of our release process."
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-08-25-backports-application.adoc:17
#, no-wrap
msgid "Release process"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:20
msgid "The Quarkus Team adopts a `Major.Minor.Patch.Classifier` (eg. _1.7.0.CR1_, _1.7.0.Final_) version pattern. Depending on the version bumped, different processes are adopted:"
msgstr ""

#. type: Title ===
#: upstream/_posts/2020-08-25-backports-application.adoc:21
#, no-wrap
msgid "Major and Minor bumps"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:23
msgid "Our main branch is always ready for the next major or minor release.  This process is usually very smooth and involves no backporting."
msgstr ""

#. type: Title ===
#: upstream/_posts/2020-08-25-backports-application.adoc:24
#, no-wrap
msgid "Patch or Classifier bumps"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:27
msgid "Whenever a new patched version (or a second CR) is about to be released in Quarkus, our Release team starts backporting commits from pull requests that were merged in the master branch.  How do they know which pull request to grab? We have a `triage/backport?` label that our team add to pull requests for features that would be worth having it in the upcoming patch release."
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-08-25-backports-application.adoc:28
#, no-wrap
msgid "How do we automate that?"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:31
msgid "The application basically queries a GitHub repository's merged pull requests and closed issues (using https://docs.github.com/en/graphql[the GraphQL API exposed by GitHub]) containing a certain label and changes their milestones to one selected in the UI (and removing the certain label afterwards).  Applying the changes introduced by these pull-requests (aka. _cherry-picking_) is simplified by providing a button next to each pull-request to copy the necessary `git cherry-pick` commands to the clipboard - we prefer this step to be done manually by the Release engineer."
msgstr ""

#. type: Title ===
#: upstream/_posts/2020-08-25-backports-application.adoc:32
#, no-wrap
msgid "Screenshots"
msgstr ""

#. type: Title ====
#: upstream/_posts/2020-08-25-backports-application.adoc:33
#, no-wrap
msgid "Choosing a milestone"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2020-08-25-backports-application.adoc:34
#, no-wrap
msgid "https://raw.githubusercontent.com/quarkusio/quarkus-backports/main/documentation/screenshots/index.png"
msgstr ""

#. type: Title ====
#: upstream/_posts/2020-08-25-backports-application.adoc:36
#, no-wrap
msgid "Choosing the pull requests to be backported"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2020-08-25-backports-application.adoc:37
#, no-wrap
msgid "https://raw.githubusercontent.com/quarkusio/quarkus-backports/main/documentation/screenshots/backports.png"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-08-25-backports-application.adoc:39
#, no-wrap
msgid "Our experience with Quarkus"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:42
msgid "Here you can find a summary of the extensions used in the backports application:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:44
msgid "ArC (CDI): Manages the services lifecycle"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:45
msgid "<<microprofile-config>>: To externalize properties"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:46
msgid "RESTEasy: Exposes an endpoint the UI can consume. Also serves the UI using Qute's Type-safe templates (see <<qute>>)."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:47
msgid "<<qute>>: Used on all templates (UI and GraphQL query payload)"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:48
msgid "<<rest-client>>: To invoke the https://docs.github.com/en/graphql[GitHub's GraphQL endpoint]"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:49
msgid "Cache: For https://github.com/quarkusio/quarkus-backports/blob/291868a9480601dd13b71703e7f8f73552109ded/src/main/java/io/quarkus/backports/GitHubService.java#L84[caching open Milestones] from the GitHub's GraphQL endpoint"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:50
msgid "Hibernate Validator: For validating input"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:51
msgid "Jackson (JSON library): To parse the result from the GitHub GraphQL endpoint"
msgstr ""

#. type: Title ===
#: upstream/_posts/2020-08-25-backports-application.adoc:52
#, no-wrap
msgid "Live Coding"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:55
msgid "The live coding is a killer feature in Quarkus and provided a quick feedback while classes and methods were changed during development. As a rule of thumb, always use `./mvnw quarkus:dev` while developing a Quarkus application."
msgstr ""

#. type: Title ===
#: upstream/_posts/2020-08-25-backports-application.adoc:57
#, no-wrap
msgid "MicroProfile Config"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:62
msgid "Configuring which GitHub repository to use (to test or even for non-Quarkus repositories) and the GitHub authentication token (plus a different backport label if necessary) should be easy to configure without changing any source code.  Quarkus uses Microprofile Config, so we externalized these properties.  Quarkus also supports `.env` files, which we used while testing. This made local testing easier by not requiring us to change the `application.properties` directly or setting any environment or system property before running the application."
msgstr ""

#. type: Title ===
#: upstream/_posts/2020-08-25-backports-application.adoc:64
#, no-wrap
msgid "Qute"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:68
msgid "Qute is a template engine. We used it to generate the UI and to generate GraphQL queries where simply using GraphQL variables are not enough - for example, https://github.com/quarkusio/quarkus-backports/blob/291868a9480601dd13b71703e7f8f73552109ded/src/main/resources/templates/GitHubService/findIssues.txt#L3-L7[getting issue data from a list of issue numbers].  We used https://quarkus.io/guides/qute#type-safe-templates[Type-safe templates] to generate the UI and the GraphQL queries."
msgstr ""

#. type: Title ===
#: upstream/_posts/2020-08-25-backports-application.adoc:69
#, no-wrap
msgid "Rest Client"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:72
msgid "GraphQL, in a nutshell, means POSTing some JSON data to an HTTP endpoint and parsing the result as a JSON document. Simply that. The Microprofile REST Client is a good option to perform this task, so we came up with this:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:77
msgid "```java import javax.ws.rs.HeaderParam; import javax.ws.rs.POST; import javax.ws.rs.core.HttpHeaders;"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:80
msgid "import io.vertx.core.json.JsonObject; import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:83
msgid "@RegisterRestClient(baseUri = \"https://api.github.com/graphql\")  public interface GraphQLClient {"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:88
#, no-wrap
msgid ""
"    @POST\n"
"    JsonObject graphql(@HeaderParam(HttpHeaders.AUTHORIZATION) String authentication, JsonObject query);\n"
"}\n"
"```\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:90
msgid "In the GitHubService we can now consume the GraphQLClient object:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:96
#, no-wrap
msgid ""
"```java\n"
"    @Inject\n"
"    @RestClient\n"
"    GraphQLClient graphQLClient;\n"
"```\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:98
msgid "You can see how the client is invoked https://github.com/quarkusio/quarkus-backports/blob/291868a9480601dd13b71703e7f8f73552109ded/src/main/java/io/quarkus/backports/GitHubService.java#L85-L101[here]"
msgstr ""

#. type: Title ===
#: upstream/_posts/2020-08-25-backports-application.adoc:100
#, no-wrap
msgid "Next steps"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:103
msgid "Given the nature of dynamic queries, we decided to not use the SmallRye GraphQL extension, but that can be changed when the extension supports that feature."
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-08-25-backports-application.adoc:104
#, no-wrap
msgid "Thanks"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:107
msgid "This application took ~1 week to be developed (learning GraphQL included). That was made possible due to the following Quarkus team members:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:110
msgid "image:https://github.com/gsmet.png?v=3&s=96[48,48] https://github.com/gsmet[Guillaume Smet]: For the beautiful frontend work"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:111
msgid "image:https://github.com/gastaldi.png?v=3&s=96[48,48] https://github.com/gastaldi[George Gastaldi]: For having fun developing the backend and the GraphQL integration"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:112
msgid "image:https://github.com/dmlloyd.png?v=3&s=96[48,48] https://github.com/dmlloyd[David Lloyd]: For the crazy regular expressions needed to extract issue numbers in commit messages."
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-08-25-backports-application.adoc:113
#, no-wrap
msgid "More information"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:116
msgid "Quarkus Backports sources: https://github.com/quarkusio/quarkus-backports"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:117
msgid "Quarkus website: https://quarkus.io"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:118
msgid "Quarkus GitHub project: https://github.com/quarkusio/quarkus"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:119
msgid "Quarkus Twitter: https://twitter.com/QuarkusIO"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:120
msgid "Quarkus chat: https://quarkusio.zulipchat.com/"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:121
msgid "Quarkus mailing list: https://groups.google.com/forum/#!forum/quarkus-dev"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-25-backports-application.adoc:121
msgid "https://www.redhat.com/cms/managed-files/cl-4-reasons-try-quarkus-checklist-f19180cs-201909-en.pdf[Four reasons to use Quarkus]"
msgstr ""
