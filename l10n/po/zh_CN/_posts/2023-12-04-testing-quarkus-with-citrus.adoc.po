# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-12-04 10:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy, no-wrap
msgid "Testing Quarkus with Citrus"
msgstr "用柑橘测试夸克"

#. type: YAML Front Matter: synopsis
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy, no-wrap
msgid "Explore how to verify Quarkus event-driven applications with the Citrus integration test framework."
msgstr "探索如何使用 Citrus 集成测试框架验证 Quarkus 事件驱动应用程序。"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"This post shows how to combine Quarkus with the https://citrusframework.org[Citrus] test framework in order to write automated tests for event-driven applications.\n"
"https://citrusframework.org[Citrus] is an Open Source Java test framework focusing on messaging and integration testing in general."
msgstr "这篇文章展示了如何将 Quarkus 与 link:https://citrusframework.org[Citrus] 测试框架相结合，以便为事件驱动型应用程序编写自动化测试。 link:https://citrusframework.org[Citrus] 是一个开源 Java 测试框架，重点关注消息传递和集成测试。"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"Developers can easily empower the *@QuarkusTest* with Citrus capabilities in order to produce and consume events during the test.\n"
"As a result the test is able to interact with the Quarkus event-driven application by exchanging events and messages with real messaging communication."
msgstr "开发人员可以轻松地为 *@QuarkusTest* 赋予 Citrus 功能，以便在测试过程中产生和消耗事件。这样，测试就能与 Quarkus 事件驱动应用程序交互，通过真正的消息通信交换事件和消息。"

#. type: Title ==
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy, no-wrap
msgid "Introducing the demo application"
msgstr "演示应用程序介绍"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"In this post we use a Quarkus demo application called `food-market`.\n"
"You can find the demo application code and all Citrus tests in https://github.com/citrusframework/citrus-samples/tree/main/demo/sample-quarkus[this GitHub code repository].\n"
"The Quarkus application connects to Kafka streams as an event-driven application that produces and consumes various events (e.g. bookings, supplies, shipping events).\n"
"The processed events and their individual status are stored in a PostgreSQL database."
msgstr "在这篇文章中，我们使用了名为 `food-market` 的 Quarkus 演示应用程序。您可以在 link:https://github.com/citrusframework/citrus-samples/tree/main/demo/sample-quarkus[GitHub 代码库中] 找到演示应用程序代码和所有 Citrus 测试。Quarkus 应用程序连接到 Kafka 流，作为一个事件驱动应用程序，它产生并消耗各种事件（如预订、供应、发货事件）。处理过的事件及其各自的状态都存储在 PostgreSQL 数据库中。"

#. type: Plain text
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "The food-market application matches incoming `booking` and `supply` events and produces `shipping` and `booking-completed` events accordingly."
msgstr "食品市场应用程序会匹配传入的 `booking` 和 `supply` 事件，并相应生成 `shipping` 和 `booking-completed` 事件。"

#. type: Plain text
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "Each event references a product and specifies an amount as well as a price in a simple Json object structure."
msgstr "每个事件都引用一个产品，并以简单的 Json 对象结构指定金额和价格。"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"Clients create the `booking` events and at the same time suppliers will add their individual `supply` events.\n"
"The Quarkus food-market application consumes both event types and finds matching bookings and supplies.\n"
"Once a booking and a supply do match in certain criteria the application produces `booking-completed` and `shipping` events as a result."
msgstr "客户创建 `booking` 活动，与此同时，供应商将添加他们各自的 `supply` 活动。Quarkus 食品市场应用程序会同时使用这两种事件类型，并找到匹配的预订和供应。一旦预订和供应在特定条件下匹配，应用程序就会生成 `booking-completed` 和 `shipping` 事件。"

#. type: Plain text
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "Last but not least the booking client gets informed via email about the completed booking status."
msgstr "最后但并非最不重要的一点是，预订客户会通过电子邮件获知预订完成的状态。"

#. type: Plain text
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "In a fully automated integration test we want to verify all events and their processing using real messaging communication with Kafka streams and database persistence."
msgstr "在完全自动化的集成测试中，我们希望使用 Kafka 流和数据库持久性的真实消息通信来验证所有事件及其处理过程。"

#. type: Title ==
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy, no-wrap
msgid "Testing the application with Citrus"
msgstr "使用 Citrus 测试应用程序"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"The Quarkus application connects to different infrastructure (Kafka, PostgreSQL, Mail SMTP).\n"
"The automated integration test should verify the message communication, the event processing and connectivity to all components.\n"
"We will use the Citrus test framework as it provides the complete toolset for testing this kind of event-driven message-based solutions."
msgstr "Quarkus 应用程序连接到不同的基础设施（Kafka、PostgreSQL、Mail SMTP）。自动化集成测试应验证消息通信、事件处理以及与所有组件的连接。我们将使用 Citrus 测试框架，因为它为测试这类基于事件驱动消息的解决方案提供了完整的工具集。"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"The first thing to do is to add Citrus to the Quarkus project.\n"
"The most convenient way is to import the `citrus-bom`."
msgstr "首先要做的是将 Citrus 添加到 Quarkus 项目中。最方便的方法是导入 `citrus-bom` .NET Framework。"

#. type: Block title
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy, no-wrap
msgid "Citrus BOM"
msgstr "柑橘类 BOM"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"The `citrus-quarkus` extension provides a special `@QuarkusTest` resource implementation that enables us to combine Citrus with a Quarkus test.\n"
"So let's add this extension as a test scoped dependency."
msgstr "`citrus-quarkus` 扩展提供了一种特殊的 `@QuarkusTest` 资源实现，使我们能够将 Citrus 与 Quarkus 测试结合起来。因此，让我们将该扩展添加为测试作用域依赖关系。"

#. type: Block title
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy, no-wrap
msgid "Citrus Quarkus extension"
msgstr "柑橘类 Quarkus 扩展"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"Also, we need to include some other Citrus modules because we want to exchange data via Kafka and connect to the PostgreSQL database as part of the test.\n"
"Citrus is very modular. This means you can choose from a wide range of modules each of them adding specific testing capabilities to your project (e.g. `citrus-kafka`, `citrus-sql`, `citrus-validation-json`)."
msgstr "此外，我们还需要包含其他一些 Citrus 模块，因为我们希望通过 Kafka 交换数据，并连接 PostgreSQL 数据库作为测试的一部分。Citrus 非常模块化。这意味着您可以从众多模块中进行选择，每个模块都能为您的项目添加特定的测试功能（如 `citrus-kafka` , `citrus-sql` , `citrus-validation-json` ）。"

#. type: Plain text
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "In this sample project we include the following Citrus modules as test scoped dependencies:"
msgstr "在该示例项目中，我们将以下 Citrus 模块作为测试范围依赖项："

#. type: Plain text
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "citrus-quarkus"
msgstr "柑橘-夸克"

#. type: Plain text
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "citrus-kafka"
msgstr "citrus-kafka"

#. type: Plain text
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "citrus-validation-json"
msgstr "citrus-validation-json"

#. type: Plain text
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "citrus-sql"
msgstr "citrus-sql"

#. type: Plain text
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "citrus-mail"
msgstr "柑橘邮件"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"This completes the setup of all required Citrus modules.\n"
"Now we can move on to writing an automated integration test in order to verify the Quarkus event-driven application."
msgstr "至此，所有必要的 Citrus 模块都已设置完毕。现在，我们可以继续编写自动化集成测试，以验证 Quarkus 事件驱动应用程序。"

#. type: Title ==
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy, no-wrap
msgid "Writing Citrus tests on top of QuarkusTest"
msgstr "在 QuarkusTest 基础上编写 Citrus 测试"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "We want to write an automated test that makes sure that all inbound events (`booking` and `supply`) are being processed properly and that the resulting outbound  events (`booking-completed` and `shipping`) are being produced as expected."
msgstr "我们想编写一个自动测试，以确保所有入站事件（ `booking` 和 `supply` ）都得到正确处理，并确保由此产生的出站事件（ `booking-completed` 和 `shipping` ）按预期生成。"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"Citrus as a test framework will act as all surrounding components producing client events and verifying resulting outbound events.\n"
"Also, Citrus will have a look into the database in order to verify the persisted domain model objects.\n"
"Later on in a more advanced test scenario Citrus will also receive and verify the mail message content that is sent by the food-market Quarkus application."
msgstr "作为测试框架，Citrus 将充当产生客户端事件的所有周边组件，并验证由此产生的出站事件。此外，Citrus 还将查看数据库，以验证持久化领域模型对象。随后，在更高级的测试场景中，Citrus 还将接收并验证由食品市场 Quarkus 应用程序发送的邮件内容。"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"For now let's start with a normal Quarkus test.\n"
"The test needs to start the Quarkus application and also needs to prepare some infrastructure such as the database and the Kafka streams message broker. Fortunately Quarkus dev services provides the awesome testing capability to automatically start Testcontainers that represent the required infrastructure."
msgstr "现在，让我们从一个普通的 Quarkus 测试开始。测试需要启动 Quarkus 应用程序，还需要准备一些基础设施，如数据库和 Kafka 流消息代理。幸运的是，Quarkus 开发服务提供了强大的测试功能，可以自动启动代表所需基础设施的测试容器。"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"The test is annotated with the `@QuarkusTest` annotation.\n"
"It enables the Quarkus dev services test capabilities and takes care of setting everything up for you.\n"
"The test itself is an arbitrary JUnit Jupiter unit test, so you can start this test from your Java IDE or as part of the Maven test lifecycle."
msgstr "测试使用 `@QuarkusTest` 注释。它启用了 Quarkus 开发服务的测试功能，并为你设置了一切。测试本身是一个任意的 JUnit Jupiter 单元测试，因此您可以从 Java IDE 或作为 Maven 测试生命周期的一部分启动该测试。"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"Now let's add Citrus to the picture.\n"
"With the Citrus Quarkus extension that we have added to the Maven project in the previous section we can now enable the Citrus capabilities for the test.\n"
"Just add the `@CitrusSupport` annotation to the test class."
msgstr "现在让我们添加 Citrus。通过在上一节中添加到 Maven 项目中的 Citrus Quarkus 扩展，我们现在可以为测试启用 Citrus 功能。只需在测试类中添加 `@CitrusSupport` 注解即可。"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"This annotation enables the Citrus capabilities for the Quarkus test.\n"
"Citrus will now participate in the Quarkus test lifecycle which enables you to inject specific Citrus resources such as endpoints as well as the Citrus test runner."
msgstr "该注解为 Quarkus 测试启用了 Citrus 功能。现在，Citrus 将参与 Quarkus 测试生命周期，使您能够注入特定的 Citrus 资源（如端点和 Citrus 测试运行器）。"

#. type: Block title
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy, no-wrap
msgid "Citrus enabled Quarkus test"
msgstr "启用 Quarkus 测试的柑橘"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"The Citrus enabled test uses additional resources such as the `KafkaEndpoint` named bookings.\n"
"The `KafkaEndpoint` component comes with the `citrus-kafka` module and allows us to interact with Kafka streams by sending and receiving events to a topic."
msgstr "启用 Citrus 的测试使用了其他资源，如 `KafkaEndpoint` 命名的预订。 `KafkaEndpoint` 组件附带 `citrus-kafka` 模块，允许我们通过向主题发送和接收事件与 Kafka 流交互。"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"The Citrus `TestCaseRunner` resource represents the entrance to the Citrus Java domain specific testing language.\n"
"This allows us to run any Citrus test action (e.g. send/receive messages, verify data in an SQL database) during the test."
msgstr "Citrus `TestCaseRunner` 资源代表 Citrus Java 特定领域测试语言的入口。这使我们能够在测试期间运行任何 Citrus 测试操作（如发送/接收消息、验证 SQL 数据库中的数据）。"

#. type: Plain text
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "See this sample code to send a message to the Kafka streams topic."
msgstr "请参阅此示例代码，向 Kafka 流主题发送消息。"

#. type: Block title
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy, no-wrap
msgid "Send booking event"
msgstr "发送预订活动"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"The injected Citrus `TestCaseRunner` is able to use a Gherkin `Given-When-Then` syntax and executes Citrus test operations.\n"
"This first test activity references the KafkaEndpoint `bookings` in a send operation.\n"
"The test is able to use domain model objects (`Product` and `Booking`) as message body.\n"
"The send operation properly serializes the domain model objects to Json with the injected `ObjectMapper`."
msgstr "注入的 Citrus `TestCaseRunner` 能够使用 Gherkin `Given-When-Then` 语法并执行 Citrus 测试操作。第一个测试活动在发送操作中引用了 KafkaEndpoint `bookings` 。该测试能够使用领域模型对象（ `Product` 和 `Booking` ）作为消息体。发送操作使用注入的 `ObjectMapper` 将领域模型对象正确序列化为 Json。"

#. type: Plain text
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "You can also use the `@QuarkusIntegrationTest` annotation in order to start the demo application in a separate JVM. This separates the test code from the application and usually binds the test to the integration-test phase in Maven. Please be aware that an integration test is not able to inject application resources such as ObjectMapper or DataSource. The good news is that you can use the very same Citrus extension also with the `@QuarkusIntegrationTest`."
msgstr "您还可以使用 `@QuarkusIntegrationTest` 注解，以便在单独的 JVM 中启动演示应用程序。这将测试代码与应用程序分离，通常会将测试与 Maven 中的集成测试阶段绑定。请注意，集成测试不能注入 ObjectMapper 或 DataSource 等应用程序资源。好消息是，您也可以在 `@QuarkusIntegrationTest` .NET Framework 中使用相同的 Citrus 扩展。"

#. type: Plain text
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "This is basically how you can combine Citrus capabilities with Quarkus test dev services in an automated integration test."
msgstr "这就是如何在自动化集成测试中将 Citrus 功能与 Quarkus 测试开发服务相结合的基本方法。"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"The rest of the story is quite easy.\n"
"In the same way as sending the booking event we can now also send a matching `supply` event."
msgstr "剩下的事情就很简单了。在发送预订事件的同时，我们还可以发送与之匹配的 `supply` 事件。"

#. type: Block title
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy, no-wrap
msgid "Send supply event"
msgstr "发送供应事件"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"The test now has produced a booking and a matching supply event.\n"
"This should trigger the food-market application to produce respective `booking-completed` and `shipping` events.\n"
"As a next step in the test we should receive and verify these events with Citrus."
msgstr "现在，测试已经生成了一个预订和一个匹配的供应事件。这将触发食品市场应用程序产生相应的 `booking-completed` 和 `shipping` 事件。作为测试的下一步，我们应通过 Citrus 接收并验证这些事件。"

#. type: Block title
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy, no-wrap
msgid "Receive and verify events"
msgstr "接收并验证事件"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"Citrus is able to perform powerful message validation when receiving the events.\n"
"This is why we have added the `citrus-validation-json` module in the very beginning.\n"
"The Json message validator in Citrus will compare the received Json object with an expected Json template and make sure that all fields and properties do match as expected."
msgstr "Citrus 能够在接收事件时执行强大的消息验证。这就是我们在一开始就添加 `citrus-validation-json` 模块的原因。Citrus 中的 Json 消息验证器将把接收到的 Json 对象与预期的 Json 模板进行比较，确保所有字段和属性都符合预期。"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"The test creates the expected `shippingEvent` Json object which uses properties like the `client`, `product` and the `amount`.\n"
"The received event must match these expected values in order to pass the test.\n"
"Unfortunately we are not able to verify the `address` field because it has been generated by the Quarkus application.\n"
"This is why the `address` gets ignored during the validation by using the `@ignored@` Citrus validation expression as an expected value."
msgstr "该测试创建了预期的 `shippingEvent` Json 对象，其中使用了 `client` 、 `product` 和 `amount` 等属性。接收到的事件必须与这些预期值相匹配，才能通过测试。遗憾的是，我们无法验证 `address` 字段，因为它是由 Quarkus 应用程序生成的。这就是为什么在使用 `@ignored@` Citrus 验证表达式作为预期值进行验证时， `address` 会被忽略的原因。"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"The Citrus Json message validator is quite powerful and will now compare the received shipping event with the expected Json object.\n"
"All given Json properties get verified and the test will fail when there is a mismatch."
msgstr "Citrus Json 消息验证器非常强大，现在会将收到的发货事件与预期的 Json 对象进行比较。所有给定的 Json 属性都会得到验证，一旦出现不匹配，测试就会失败。"

#. type: Block title
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy, no-wrap
msgid "Received Json"
msgstr "接收 Json"

#. type: Block title
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy, no-wrap
msgid "Control Json"
msgstr "控制 Json"

#. type: Plain text
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "You can use ignore expressions, use validation matchers, functions and test variables in the expected template."
msgstr "您可以在预期模板中使用忽略表达式、验证匹配器、函数和测试变量。"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"This completes the first test with many events being exchanged with the application under test.\n"
"Now let's run the test."
msgstr "这就完成了第一次测试，与被测应用程序交换了许多事件。现在让我们运行测试。"

#. type: Title ==
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy, no-wrap
msgid "Running the Citrus tests"
msgstr "运行柑橘测试"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"The Quarkus test framework in the example uses JUnit Jupiter as a test driver.\n"
"This means you can run the tests just like any other JUnit test from your Java IDE or with Maven for instance."
msgstr "示例中的 Quarkus 测试框架使用 JUnit Jupiter 作为测试驱动程序。这意味着您可以像在 Java IDE 或 Maven 中运行其他 JUnit 测试一样运行测试。"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"The test is now run with the Maven test lifecycle.\n"
"The `@QuarkusTest` dev services will start the application and prepare the infrastructure with Testcontainers.\n"
"Then Citrus will produce the events and verify the outcome with powerful Json validation."
msgstr "现在，测试将通过 Maven 测试生命周期运行。 `@QuarkusTest` 开发服务将启动应用程序，并使用 Testcontainers 准备基础设施。然后，Citrus 将生成事件，并通过强大的 Json 验证来验证结果。"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"In this first test we made sure that the application is able to process the incoming events and that the resulting events are produced as expected.\n"
"Now let's move on to more advanced tests including the database and a mail server SMTP communication."
msgstr "在第一个测试中，我们确保应用程序能够处理传入的事件，并按照预期生成事件。现在，让我们继续进行更高级的测试，包括数据库和邮件服务器 SMTP 通信。"

#. type: Title ==
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy, no-wrap
msgid "Verify stored data with SQL"
msgstr "使用 SQL 验证存储数据"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"When testing distributed event-driven applications the timing of events is an essential ingredient to success.\n"
"Each test scenario is keen to verify a specific application behavior and the correct timing of events is key to triggering and verifying this behavior.\n"
"Also timing is very important to avoid running into flaky tests where racing conditions may influence the test result on slower machines (e.g. CI jobs)."
msgstr "在测试分布式事件驱动应用程序时，事件发生的时间是成功的关键因素。每个测试场景都需要验证特定的应用程序行为，而事件的正确计时是触发和验证该行为的关键。此外，时间安排也非常重要，可避免在慢速机器（如 CI 作业）上运行测试时出现不稳定的情况，因为竞速条件可能会影响测试结果。"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"As an example assume the test needs to create a new product first and then sends a new booking event referencing this newly added product.\n"
"The test needs to wait for the product event to be processed completely before sending the booking event."
msgstr "举例来说，假设测试需要先创建一个新产品，然后发送一个新的预订事件，引用这个新添加的产品。在发送预订事件之前，测试需要等待产品事件完全处理完毕。"

#. type: Plain text
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "In Citrus we are able to add this waiting state very easily."
msgstr "在 Citrus 中，我们可以非常容易地添加这种等待状态。"

#. type: Block title
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy, no-wrap
msgid "Wait for object to be created in persistence layer"
msgstr "等待在持久层中创建对象"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"After the product event has been sent we use the `repeatOnError()` test action.\n"
"In combination with an `autoSleep` and a max retry count setting the action periodically polls the database for the created product.\n"
"This makes sure that we do not continue with the test until the new product has been properly stored to the database."
msgstr "发送产品事件后，我们使用 `repeatOnError()` 测试操作。结合 `autoSleep` 和最大重试次数设置，该操作会定期在数据库中轮询已创建的产品。这样可以确保在新产品正确存储到数据库之前，我们不会继续进行测试。"

#. type: Plain text
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "The database interaction in Citrus comes with the `citrus-sql` module and enables you to verify any SQL result set."
msgstr "Citrus 中的数据库交互附带 `citrus-sql` 模块，可让您验证任何 SQL 结果集。"

#. type: Plain text
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "Quarkus is able to inject the `dataSource` that is being used to connect to the PostgreSQL database. This also works when Quarkus uses the PostgreSQL Testcontainers infrastructure in the test. Just use the `@Inject` annotation in your test and reference the datasource in the Citrus `sql()` test action."
msgstr "Quarkus 能够注入用于连接 PostgreSQL 数据库的 `dataSource` 。当 Quarkus 在测试中使用 PostgreSQL Testcontainers 基础架构时，这也同样有效。只需在测试中使用 `@Inject` 注释，并在 Citrus `sql()` 测试操作中引用数据源即可。"

#. type: Plain text
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "You may introduce test behaviors for common Citrus test logic such as waiting for a domain model object to be persisted in the database. In general a test behavior encapsulates a set of Citrus test actions to a reusable entity that you can reference many times from your tests."
msgstr "您可以为常见的 Citrus 测试逻辑（如等待领域模型对象在数据库中持久化）引入测试行为。一般来说，测试行为将一组 Citrus 测试操作封装为一个可重复使用的实体，您可以在测试中多次引用该实体。"

#. type: Block title
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy, no-wrap
msgid "Citrus test behavior"
msgstr "柑橘测试行为"

#. type: Plain text
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "In a test you can apply the test behavior."
msgstr "在测试中，您可以应用测试行为。"

#. type: Block title
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy, no-wrap
msgid "Apply test behaviors"
msgstr "应用测试行为"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"The ability to look into the database in order to check on the persisted entities is quite powerful as it allows us to fully control the test workflow.\n"
"We could also use the Citrus SQL result set verification in the test to verify a booking status."
msgstr "查看数据库以检查持久化实体的功能非常强大，因为它允许我们完全控制测试工作流。我们还可以在测试中使用 Citrus SQL 结果集验证来验证预订状态。"

#. type: Block title
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy, no-wrap
msgid "Verify booking status completed"
msgstr "验证预订状态已完成"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"This verifies that the booking with the given id has the status `COMPLETED`.\n"
"The SQL result set validation in Citrus is able to handle complex column sets with multiple rows."
msgstr "这将验证给定 id 的预订状态是否为 `COMPLETED` 。Citrus 中的 SQL 结果集验证可处理多行复杂列集。"

#. type: Title ==
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy, no-wrap
msgid "Verify the mail server interaction"
msgstr "验证邮件服务器交互"

#. type: Plain text
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "The food-market Quarkus application under test may inform the client about a completed booking via email."
msgstr "测试中的食品市场 Quarkus 应用程序可通过电子邮件通知客户预订已完成。"

#. type: Block title
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy, no-wrap
msgid "Mail content"
msgstr "邮件内容"

#. type: Plain text
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "The Citrus test is able to verify this particular mail content by starting an SMTP mail server that will receive that mail message and verify its content."
msgstr "Citrus 测试能够通过启动 SMTP 邮件服务器来验证特定邮件内容，该服务器将接收该邮件并验证其内容。"

#. type: Plain text
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "In Quarkus we can use the `quarkus-mailer` extension to send mails via SMTP."
msgstr "在 Quarkus 中，我们可以使用 `quarkus-mailer` 扩展通过 SMTP 发送邮件。"

#. type: Block title
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy, no-wrap
msgid "Quarkus mail service"
msgstr "Quarkus 邮件服务"

#. type: Plain text
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "For the test Citrus starts an SMTP mail server that is able to accept the mail messages sent by Quarkus."
msgstr "为了进行测试，Citrus 启动了一个 SMTP 邮件服务器，该服务器能够接受 Quarkus 发送的邮件信息。"

#. type: Block title
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy, no-wrap
msgid "Citrus mail server component"
msgstr "Citrus 邮件服务器组件"

#. type: Plain text
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "Let's tell Quarkus to connect to this Citrus mail server during the test."
msgstr "让我们告诉 Quarkus 在测试期间连接到该 Citrus 邮件服务器。"

#. type: Block title
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy, no-wrap
msgid "Quarkus mailer configuration"
msgstr "夸克邮件发送器配置"

#. type: Plain text
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "With this setup we can now add a test action that receives and verifies the mail message sent."
msgstr "有了这些设置，我们现在就可以添加一个测试操作，用于接收和验证发送的邮件信息。"

#. type: Block title
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy, no-wrap
msgid "Verify mail message sent"
msgstr "验证已发送的邮件信息"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"The expected mail content uses some test variables `${client}` and `${product}`.\n"
"You may set these test variables in Citrus accordingly so these placeholders get resolved before the validation is performed."
msgstr "预期的邮件内容使用了一些测试变量 `${client}` 和 `${product}` 。您可以在 Citrus 中相应地设置这些测试变量，以便在进行验证之前解决这些占位符问题。"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"The mail server responds with a code and a text according to the SMTP protocol.\n"
"In the success case this is a `250` `Ok` response."
msgstr "邮件服务器会根据 SMTP 协议回复一个代码和一个文本。在成功的情况下，回复是 `250` `Ok` 。"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"Again you can introduce a Citrus test behavior that covers the booking completed mail message verification.\n"
"Many tests may apply this behavior in their test logic then."
msgstr "同样，您可以引入一个 Citrus 测试行为，涵盖预订完成邮件消息验证。许多测试可能会在其测试逻辑中应用该行为。"

#. type: Plain text
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "Another interesting point about the mail server interaction is that the Citrus mail server component is also able to simulate a mail server error."
msgstr "关于邮件服务器交互的另一个有趣之处是，Citrus 邮件服务器组件还能模拟邮件服务器出错。"

#. type: Block title
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy, no-wrap
msgid "Simulate mail server error"
msgstr "模拟邮件服务器出错"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"This time the Citrus mail server explicitly responds with a `443` `Failed!` error and the Quarkus application needs to handle this error accordingly.\n"
"Verifying error scenarios in automated integration tests is very important and helps us to develop robust applications.\n"
"It is great to have the opportunity to trigger these error scenarios with Citrus in an automated test."
msgstr "这次，Citrus 邮件服务器明确响应 `443` `Failed!` 错误，Quarkus 应用程序需要相应地处理该错误。在自动化集成测试中验证错误场景非常重要，有助于我们开发健壮的应用程序。有机会在自动测试中使用 Citrus 触发这些错误场景，真是太棒了。"

#. type: Title ==
#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy, no-wrap
msgid "Summary"
msgstr "摘要"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"In this post we have seen how to combine the Citrus test framework with Quarkus test dev services in order to perform automated integration testing of event-driven applications.\n"
"The test is able to produce/consume events on Kafka streams and verifies the Quarkus application accordingly by verifying the Json data and the persisted entities in the database."
msgstr "在这篇文章中，我们看到了如何将 Citrus 测试框架与 Quarkus 测试开发服务相结合，以便对事件驱动型应用程序执行自动化集成测试。该测试能够在 Kafka 流上产生/消费事件，并通过验证 Json 数据和数据库中的持久化实体来相应地验证 Quarkus 应用程序。"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"Citrus as a framework provides many modules each of them providing endpoints (client and server) for straight forward messaging interaction during an integration test (e.g. Kafka, JMS, FTP, Http, SOAP, Mail, ...).\n"
"The message validation capabilities allow us to verify the exchanged message content with different formats (e.g. Json, XML, plaintext)."
msgstr "作为一个框架，Citrus 提供了许多模块，每个模块都提供了端点（客户端和服务器），可在集成测试期间直接进行消息交互（如 Kafka、JMS、FTP、Http、SOAP、邮件......）。消息验证功能允许我们验证不同格式（如 Json、XML、纯文本）的交换消息内容。"

#: _posts/2023-12-04-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"While the Citrus project has been around for quite some time the Citrus Quarkus extension is a new addition in the most recent Citrus version 4.0.\n"
"As always, your feedback is much appreciated!\n"
"Please give it a try and let us know what you think about this approach of automated integration testing with the combination of Citrus and Quarkus testing."
msgstr "虽然 Citrus 项目已经存在了很长时间，但 Citrus Quarkus 扩展是最新的 Citrus 4.0 版本中新增的功能。我们将一如既往地感谢您的反馈意见！请尝试一下，并告诉我们您对这种结合 Citrus 和 Quarkus 测试的自动化集成测试方法的看法。"
