# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:1
#, no-wrap
msgid "cescoffier"
msgstr ""

#. type: YAML Front Matter: date
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:1
#, no-wrap
msgid "2020-10-06"
msgstr ""

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:1
#, no-wrap
msgid "post"
msgstr ""

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:1
#, no-wrap
msgid "Emitting messages with Reactive Messaging Emitters"
msgstr ""

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:1
#, no-wrap
msgid "reactive mutiny messaging kafka"
msgstr ""

#. type: YAML Front Matter: title
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:1
#, no-wrap
msgid "Emitter - Bridging the imperative and the reactive worlds"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:11
msgid "In a https://quarkus.io/blog/kafka-avro/[previous blog post] about Kafka and Avro, we used an _emitter_ to send Kafka messages."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:13
msgid "image:/assets/images/posts/reactive-messaging-emitter/architecture.png[width=70%]"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:15
msgid "In this post, we are going look at this emitter construct a little bit more closely."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:17
msgid "## Injecting an Emitter"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:20
msgid "Injecting an emitter is straightforward.  You indicate the targeted channel, i.e., where do you send your messages:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:24
#, no-wrap
msgid "@Inject @Channel(\"movies\") Emitter<Movie> emitter;\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:28
msgid "Remember that reactive messaging uses _channels_ as a primary abstraction.  They can be in-memory channels or mapped to a remote broker."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:33
msgid "In the previous code snippet, we inject an `Emitter<Movie>`.  It means you will send messages containing movies as payload.  So, the specified type is the payload type.  That lets you send: payloads directly (wrapped automatically in a message) or more detailed messages containing a movie as payload:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:37
#, no-wrap
msgid "Movie movie = ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:40
#, no-wrap
msgid ""
"// Send payloads directly\n"
"emitter.send(movie);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:43
#, no-wrap
msgid ""
"// Send messages\n"
"emitter.send(Message.of(movie));\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:46
msgid "## Sending payloads"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:50
msgid "Sending payload is the simplest way to send data.  You just pass the payload to the `send` method like an instance of `Movie`.  Under the hood, it just creates a simple `Message` wrapping the payload."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:52
msgid "When used with payload, the `send` method returns a `CompletionStage` indicating if the message processing succeeded or failed:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:63
#, no-wrap
msgid ""
"emitter.send(movie)\n"
"    .whenComplete((success, failure) -> {\n"
"        if (failure != null) {\n"
"            System.out.println(\"D'oh! \" + failure.getMessage());\n"
"        } else {\n"
"            System.out.println(\"Message processed successfully\");\n"
"        }\n"
"    });\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:71
msgid "Processing, and will see later event the emission, happens asynchronously.  So, the returned `CompletionStage` lets you know when the message is processed.  The `CompletionStage` is completed successfully when the message is acknowledged.  Most of the time, it means that the processing has been completed smoothly, or the message has been sent to a broker successfully.  If something wrong happens, the `CompletionStage` is completed exceptionally.  The passed exception gives you an idea of the reason."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:73
msgid "## Sending messages"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:79
msgid "While sending payloads is more straightforward, sometimes you want to attach metadata to the message, like configuring how it should be written in Kafka, tracing information, etc.  The emitter also allows sending messages, and so attach the metadata you want.  In the following example, we configure the outbound Kafka record.  We set the key, the topic, and so on.  That way, you can dispatch messages to different topics and even decide dynamically:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:87
#, no-wrap
msgid ""
"OutgoingKafkaRecordMetadata<?> metadata = OutgoingKafkaRecordMetadata.builder()\n"
"        .withTopic(\"movies\")\n"
"        .withKey(movie.getYear())\n"
"        .build();\n"
"emitter.send(Message.of(movie).addMetadata(metadata));\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:90
msgid "## Emissions are asynchronous"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:97
msgid "Emitters form a bridge between the imperative and the reactive worlds.  When you emit a message, this message is not processed immediately.  The downstream component consuming the message are part of a _Reactive Streams_.  Passing the message immediately would violate the Reactive Streams protocol.  We must be sure that the downstream components are ready to accept this message.  As a result, the emitter is not pushing the message directly, but enqueue it in a buffer used to handle the downstream capacity (requests in Reactive Streams lingo)."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:99
msgid "image:/assets/images/posts/reactive-messaging-emitter/buffer.png[width=90%]"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:101
msgid "The downstream component receives the messages according to the requests it makes, ensuring its capacity is never exceeded."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:103
msgid "## Overflow management"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:111
msgid "But with buffer comes... overflow.  If you emit too many messages and the downstream cannot keep up, the messages are stored in the buffer until it reaches its maximum capacity.  Then, you cannot emit anymore, and attempting to emit will throw exceptions.  But what can we do in this case? When injecting the emitter, you can configure an Overflow strategy.  For example, you can set the buffer size, use an unbounded buffer, drop the messages, fail, or just ignore the back pressure and let the downstream handle it.  By default, it uses a buffer, but depending on your use case, you may want to configure it differently:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:118
#, no-wrap
msgid ""
"@Inject \n"
"@Channel(\"movies\") \n"
"@OnOverflow(value = OnOverflow.Strategy.BUFFER, bufferSize = 1000) \n"
"Emitter<Movie> emitter1;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:123
#, no-wrap
msgid ""
"@Inject \n"
"@Channel(\"movies\") \n"
"@OnOverflow(value = OnOverflow.Strategy.NONE) \n"
"Emitter<Movie> emitter2;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:128
#, no-wrap
msgid ""
"@Inject \n"
"@Channel(\"movies\") \n"
"@OnOverflow(value = OnOverflow.Strategy.UNBOUNDED_BUFFER) \n"
"Emitter<Movie> emitter3;\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:131
msgid "## Conclusion"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:134
msgid "This post is a brief introduction to the `Emitter` construct from Reactive Messaging.  More information is available on the https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.2/emitter/emitter.html[SmallRye Reactive Messaging documentation]."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:138
msgid "In the next Quarkus version (1.9), this feature will be improved with two very nice enhancements.  First, it will offer a Mutiny variant, easing the integration with Mutiny APIs.  Then, it would be possible for the Kafka case to directly emit key/value pairs without needing to use metadata."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:139
msgid "Stay tuned! Will will cover these in a follow-up post!"
msgstr ""
