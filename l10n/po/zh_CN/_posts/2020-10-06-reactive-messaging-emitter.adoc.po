# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy, no-wrap
msgid "Emitter - Bridging the imperative and the reactive worlds"
msgstr "发射器 - 衔接必要的和反应的世界"

#. type: YAML Front Matter: synopsis
#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy, no-wrap
msgid "Emitting messages with Reactive Messaging Emitters"
msgstr "用反应式消息发射器发射消息"

#. type: Plain text
#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "In a https://quarkus.io/blog/kafka-avro/[previous blog post] about Kafka and Avro, we used an _emitter_ to send Kafka messages."
msgstr "在 link:https://quarkus.io/blog/kafka-avro/[之前] 一篇关于Kafka和Avro的 link:https://quarkus.io/blog/kafka-avro/[博文] 中，我们使用了一个 _发射器_ 来发送Kafka消息。"

#. type: Plain text
#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "image:/assets/images/posts/reactive-messaging-emitter/architecture.png[width=70%]"
msgstr "image:/assets/images/posts/reactive-messaging-emitter/architecture.png[alt=\"architecture\", width=\"70%\"]"

#. type: Plain text
#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "In this post, we are going look at this emitter construct a little bit more closely."
msgstr "在这篇文章中，我们将更仔细地看一下这个发射器的结构。"

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "Injecting an Emitter"
msgstr "注入发射器"

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid ""
"Injecting an emitter is straightforward.\n"
"You indicate the targeted channel, i.e., where do you send your messages:"
msgstr "注入发射器非常简单。您只需指明目标频道，即您要向哪里发送信息："

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid ""
"Remember that reactive messaging uses _channels_ as a primary abstraction.\n"
"They can be in-memory channels or mapped to a remote broker."
msgstr "请记住，反应式消息传递使用 _通道_ 作为主要抽象。它们可以是内存通道，也可以映射到远程代理。"

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid ""
"In the previous code snippet, we inject an `Emitter<Movie>`.\n"
"It means you will send messages containing movies as payload.\n"
"So, the specified type is the payload type.\n"
"That lets you send: payloads directly (wrapped automatically in a message) or more detailed messages containing a movie as payload:"
msgstr "在前面的代码片段中，我们注入了 `Emitter<Movie>` 。这意味着您将发送包含电影作为有效载荷的信息。因此，指定的类型就是有效载荷类型。这样，您就可以直接发送：有效载荷（自动封装在信息中）或包含影片作为有效载荷的更详细的信息："

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "Sending payloads"
msgstr "发送有效载荷"

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid ""
"Sending payload is the simplest way to send data.\n"
"You just pass the payload to the `send` method like an instance of `Movie`.\n"
"Under the hood, it just creates a simple `Message` wrapping the payload."
msgstr "发送有效载荷是发送数据的最简单方法。您只需将有效载荷传递给 `send` 方法，就像传递 `Movie` 的实例一样。在引擎盖下，它只是创建一个简单的 `Message` ，将有效载荷包裹起来。"

#. type: Plain text
#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "When used with payload, the `send` method returns a `CompletionStage` indicating if the message processing succeeded or failed:"
msgstr "当与payload一起使用时， `send` 方法返回一个 `CompletionStage` ，表明消息处理是成功还是失败。"

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid ""
"Processing, and will see later event the emission, happens asynchronously.\n"
"So, the returned `CompletionStage` lets you know when the message is processed.\n"
"The `CompletionStage` is completed successfully when the message is acknowledged.\n"
"Most of the time, it means that the processing has been completed smoothly, or the message has been sent to a broker successfully.\n"
"If something wrong happens, the `CompletionStage` is completed exceptionally.\n"
"The passed exception gives you an idea of the reason."
msgstr "处理是异步进行的，稍后我们将看到发送事件。因此，返回的 `CompletionStage` 会让您知道消息何时被处理。当信息被确认时， `CompletionStage` 就成功完成了。大多数情况下，这意味着处理已顺利完成，或消息已成功发送到代理。如果发生错误， `CompletionStage` 会异常完成。通过传递的异常可以了解原因。"

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
msgid "Sending messages"
msgstr "发送信息"

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid ""
"While sending payloads is more straightforward, sometimes you want to attach metadata to the message, like configuring how it should be written in Kafka, tracing information, etc.\n"
"The emitter also allows sending messages, and so attach the metadata you want.\n"
"In the following example, we configure the outbound Kafka record.\n"
"We set the key, the topic, and so on.\n"
"That way, you can dispatch messages to different topics and even decide dynamically:"
msgstr "虽然发送有效载荷更为直接，但有时您需要为消息附加元数据，例如配置消息在 Kafka 中的写入方式、跟踪信息等。发射器也允许发送消息，因此可以附加你想要的元数据。在下面的示例中，我们配置了向外发送的 Kafka 记录。我们设置了密钥、主题等。这样，你就可以向不同的主题发送消息，甚至可以动态决定："

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "Emissions are asynchronous"
msgstr "排放不同步"

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid ""
"Emitters form a bridge between the imperative and the reactive worlds.\n"
"When you emit a message, this message is not processed immediately.\n"
"The downstream component consuming the message are part of a _Reactive Streams_.\n"
"Passing the message immediately would violate the Reactive Streams protocol.\n"
"We must be sure that the downstream components are ready to accept this message.\n"
"As a result, the emitter is not pushing the message directly, but enqueue it in a buffer used to handle the downstream capacity (requests in Reactive Streams lingo)."
msgstr "发射器是命令式世界和反应式世界之间的桥梁。当你发出一条消息时，这条消息不会立即被处理。消耗该消息的下游组件是 _Reactive Streams_ 的一部分。立即传递消息会违反 Reactive Streams 协议。我们必须确保下游组件已准备好接受该消息。因此，发射器不会直接推送消息，而是将其在缓冲区（用于处理下游能力（用 Reactive Streams 的行话说就是请求））中等待。"

#. type: Plain text
#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "image:/assets/images/posts/reactive-messaging-emitter/buffer.png[width=90%]"
msgstr "image:/assets/images/posts/reactive-messaging-emitter/buffer.png[alt=\"buffer\", width=\"90%\"]"

#. type: Plain text
#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "The downstream component receives the messages according to the requests it makes, ensuring its capacity is never exceeded."
msgstr "下游组件根据其提出的请求接收信息，确保其容量永远不会被超过。"

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "Overflow management"
msgstr "溢流管理"

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid ""
"But with buffer comes... overflow.\n"
"If you emit too many messages and the downstream cannot keep up, the messages are stored in the buffer until it reaches its maximum capacity.\n"
"Then, you cannot emit anymore, and attempting to emit will throw exceptions.\n"
"But what can we do in this case?\n"
"When injecting the emitter, you can configure an Overflow strategy.\n"
"For example, you can set the buffer size, use an unbounded buffer, drop the messages, fail, or just ignore the back pressure and let the downstream handle it.\n"
"By default, it uses a buffer, but depending on your use case, you may want to configure it differently:"
msgstr "但缓冲区也会......溢出。如果发送的信息过多，下游无法跟上，信息就会存储在缓冲区中，直到达到最大容量。然后，你就不能再发送信息了，而试图发送信息时又会抛出异常。但在这种情况下，我们能做什么呢？在注入发射器时，可以配置溢出策略。例如，可以设置缓冲区大小、使用无界缓冲区、丢弃信息、失败，或者直接忽略反向压力，让下游处理。默认情况下，它会使用缓冲区，但根据您的使用情况，您可能需要进行不同的配置："

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
msgid "Conclusion"
msgstr "解决方案"

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid ""
"This post is a brief introduction to the `Emitter` construct from Reactive Messaging.\n"
"More information is available on the https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.2/emitter/emitter.html[SmallRye Reactive Messaging documentation]."
msgstr "这篇文章简要介绍了 Reactive Messaging 的 `Emitter` 结构。更多信息请参见 link:https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.2/emitter/emitter.html[SmallRye Reactive Messaging 文档] 。"

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid ""
"In the next Quarkus version (1.9), this feature will be improved with two very nice enhancements.\n"
"First, it will offer a Mutiny variant, easing the integration with Mutiny APIs.\n"
"Then, it would be possible for the Kafka case to directly emit key/value pairs without needing to use metadata."
msgstr "在 Quarkus 的下一个版本（1.9）中，这一功能将通过两个非常好的增强功能得到改进。首先，它将提供一个 Mutiny 变体，简化与 Mutiny API 的集成。然后，Kafka 案例将有可能直接发射键/值对，而无需使用元数据。"

#. type: Plain text
#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "Stay tuned! Will will cover these in a follow-up post!"
msgstr "敬请期待！Will 将在后续文章中介绍这些内容！"
