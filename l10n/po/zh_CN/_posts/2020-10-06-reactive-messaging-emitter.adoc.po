# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:1
#, fuzzy, no-wrap
msgid "cescoffier"
msgstr "鹤壁市"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:1
#, fuzzy, no-wrap
msgid "2020-10-06"
msgstr "2020-10-06"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "职位"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:1
#, fuzzy, no-wrap
msgid "Emitting messages with Reactive Messaging Emitters"
msgstr "用反应式消息发射器发射消息"

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:1
#, fuzzy, no-wrap
msgid "reactive mutiny messaging kafka"
msgstr "反应式突变的消息传递卡夫卡"

#. type: YAML Front Matter: title
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:1
#, fuzzy, no-wrap
msgid "Emitter - Bridging the imperative and the reactive worlds"
msgstr "发射器 - 衔接必要的和反应的世界"

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:11
#, fuzzy
msgid "In a https://quarkus.io/blog/kafka-avro/[previous blog post] about Kafka and Avro, we used an _emitter_ to send Kafka messages."
msgstr "在 link:https://quarkus.io/blog/kafka-avro/[之前] 一篇关于Kafka和Avro的 link:https://quarkus.io/blog/kafka-avro/[博文] 中，我们使用了一个 _发射器_ 来发送Kafka消息。"

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:13
#, fuzzy
msgid "image:/assets/images/posts/reactive-messaging-emitter/architecture.png[width=70%]"
msgstr "image:/assets/images/posts/reactive-messaging-emitter/architecture.png[alt=\"architecture\", width=\"70%\"]"

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:15
#, fuzzy
msgid "In this post, we are going look at this emitter construct a little bit more closely."
msgstr "在这篇文章中，我们将更仔细地看一下这个发射器的结构。"

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:17
#, fuzzy
msgid "## Injecting an Emitter"
msgstr "注入一个发射器\n"

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:20
#, fuzzy
msgid "Injecting an emitter is straightforward.  You indicate the targeted channel, i.e., where do you send your messages:"
msgstr "注入一个发射器是直接的。你指出目标通道，即你在哪里发送你的信息。"

#. type: delimited block -
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:24
#, no-wrap
msgid "@Inject @Channel(\"movies\") Emitter<Movie> emitter;\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:28
#, fuzzy
msgid "Remember that reactive messaging uses _channels_ as a primary abstraction.  They can be in-memory channels or mapped to a remote broker."
msgstr "记住，反应式消息传递使用 _通道_ 作为主要抽象。它们可以是内存中的通道，也可以映射到远程代理。"

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:33
#, fuzzy
msgid "In the previous code snippet, we inject an `Emitter<Movie>`.  It means you will send messages containing movies as payload.  So, the specified type is the payload type.  That lets you send: payloads directly (wrapped automatically in a message) or more detailed messages containing a movie as payload:"
msgstr "在前面的代码片段中，我们注入了一个 `Emitter<Movie>` 。这意味着你将发送包含电影的消息作为有效载荷。所以，指定的类型就是有效载荷类型。这让你可以发送：直接发送有效载荷（自动包装在消息中）或包含电影作为有效载荷的更详细消息。"

#. type: delimited block -
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:37
#, no-wrap
msgid "Movie movie = ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:40
#, no-wrap
msgid ""
"// Send payloads directly\n"
"emitter.send(movie);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:43
#, no-wrap
msgid ""
"// Send messages\n"
"emitter.send(Message.of(movie));\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:46
#, fuzzy
msgid "## Sending payloads"
msgstr "发送有效载荷\n"

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:50
#, fuzzy
msgid "Sending payload is the simplest way to send data.  You just pass the payload to the `send` method like an instance of `Movie`.  Under the hood, it just creates a simple `Message` wrapping the payload."
msgstr "发送有效载荷是发送数据的最简单方法。你只需将有效载荷传递给 `send` 方法，就像一个 `Movie` 的实例。在引擎盖下，它只是创建一个简单的 `Message` ，包裹有效载荷。"

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:52
#, fuzzy
msgid "When used with payload, the `send` method returns a `CompletionStage` indicating if the message processing succeeded or failed:"
msgstr "当与payload一起使用时， `send` 方法返回一个 `CompletionStage` ，表明消息处理是成功还是失败。"

#. type: delimited block -
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:63
#, no-wrap
msgid ""
"emitter.send(movie)\n"
"    .whenComplete((success, failure) -> {\n"
"        if (failure != null) {\n"
"            System.out.println(\"D'oh! \" + failure.getMessage());\n"
"        } else {\n"
"            System.out.println(\"Message processed successfully\");\n"
"        }\n"
"    });\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:71
#, fuzzy
msgid "Processing, and will see later event the emission, happens asynchronously.  So, the returned `CompletionStage` lets you know when the message is processed.  The `CompletionStage` is completed successfully when the message is acknowledged.  Most of the time, it means that the processing has been completed smoothly, or the message has been sent to a broker successfully.  If something wrong happens, the `CompletionStage` is completed exceptionally.  The passed exception gives you an idea of the reason."
msgstr "处理过程，以及稍后将看到的事件排放，是异步发生的。因此，返回的 `CompletionStage` 让你知道消息何时被处理。当消息被确认时， `CompletionStage` ，成功完成。大多数时候，这意味着处理已经顺利完成，或者消息已经被成功地发送到一个代理。如果发生错误， `CompletionStage` ，就会异常完成。传递的异常让你知道原因是什么。"

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:73
#, fuzzy
msgid "## Sending messages"
msgstr "发出信息\n"

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:79
#, fuzzy
msgid "While sending payloads is more straightforward, sometimes you want to attach metadata to the message, like configuring how it should be written in Kafka, tracing information, etc.  The emitter also allows sending messages, and so attach the metadata you want.  In the following example, we configure the outbound Kafka record.  We set the key, the topic, and so on.  That way, you can dispatch messages to different topics and even decide dynamically:"
msgstr "虽然发送有效载荷是比较直接的，但有时你想给消息附加元数据，比如配置它应该如何在Kafka中写入，追踪信息，等等。发射器也允许发送消息，所以要附加你想要的元数据。在下面的例子中，我们配置了出站的Kafka记录。我们设置了键、主题等等。这样，你就可以把消息派发到不同的主题，甚至动态地决定。"

#. type: delimited block -
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:87
#, no-wrap
msgid ""
"OutgoingKafkaRecordMetadata<?> metadata = OutgoingKafkaRecordMetadata.builder()\n"
"        .withTopic(\"movies\")\n"
"        .withKey(movie.getYear())\n"
"        .build();\n"
"emitter.send(Message.of(movie).addMetadata(metadata));\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:90
#, fuzzy
msgid "## Emissions are asynchronous"
msgstr "排放是不同步的\n"

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:97
#, fuzzy
msgid "Emitters form a bridge between the imperative and the reactive worlds.  When you emit a message, this message is not processed immediately.  The downstream component consuming the message are part of a _Reactive Streams_.  Passing the message immediately would violate the Reactive Streams protocol.  We must be sure that the downstream components are ready to accept this message.  As a result, the emitter is not pushing the message directly, but enqueue it in a buffer used to handle the downstream capacity (requests in Reactive Streams lingo)."
msgstr "发射器在命令性和反应性世界之间形成了一座桥梁。当你发射一个消息时，这个消息不会被立即处理。消费该消息的下游组件是 _Reactive Streams_ 的一部分。立即传递消息会违反Reactive Streams的协议。我们必须确定下游组件已经准备好接受这个消息。因此，发射器不是直接推送消息，而是在用于处理下游容量的缓冲区（Reactive Streams行话中的请求）中排队。"

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:99
#, fuzzy
msgid "image:/assets/images/posts/reactive-messaging-emitter/buffer.png[width=90%]"
msgstr "image:/assets/images/posts/reactive-messaging-emitter/buffer.png[alt=\"buffer\", width=\"90%\"]"

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:101
#, fuzzy
msgid "The downstream component receives the messages according to the requests it makes, ensuring its capacity is never exceeded."
msgstr "下游组件根据其提出的请求接收信息，确保其容量永远不会被超过。"

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:103
#, fuzzy
msgid "## Overflow management"
msgstr "溢出管理\n"

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:111
#, fuzzy
msgid "But with buffer comes... overflow.  If you emit too many messages and the downstream cannot keep up, the messages are stored in the buffer until it reaches its maximum capacity.  Then, you cannot emit anymore, and attempting to emit will throw exceptions.  But what can we do in this case? When injecting the emitter, you can configure an Overflow strategy.  For example, you can set the buffer size, use an unbounded buffer, drop the messages, fail, or just ignore the back pressure and let the downstream handle it.  By default, it uses a buffer, but depending on your use case, you may want to configure it differently:"
msgstr "但是随着缓冲区的到来......溢出。如果你发送了太多的信息，而下游无法跟上，信息就会被储存在缓冲区，直到它达到最大容量。然后，你就不能再发射了，试图发射的时候会出现异常。但在这种情况下，我们能做什么呢？在注入发射器的时候，你可以配置一个溢出策略。例如，你可以设置缓冲区大小，使用无界缓冲区，放弃消息，失败，或者直接忽略背压，让下游来处理。默认情况下，它使用一个缓冲区，但根据你的用例，你可能想以不同的方式配置它。"

#. type: delimited block -
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:118
#, no-wrap
msgid ""
"@Inject \n"
"@Channel(\"movies\") \n"
"@OnOverflow(value = OnOverflow.Strategy.BUFFER, bufferSize = 1000) \n"
"Emitter<Movie> emitter1;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:123
#, no-wrap
msgid ""
"@Inject \n"
"@Channel(\"movies\") \n"
"@OnOverflow(value = OnOverflow.Strategy.NONE) \n"
"Emitter<Movie> emitter2;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:128
#, no-wrap
msgid ""
"@Inject \n"
"@Channel(\"movies\") \n"
"@OnOverflow(value = OnOverflow.Strategy.UNBOUNDED_BUFFER) \n"
"Emitter<Movie> emitter3;\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:131
#, fuzzy
msgid "## Conclusion"
msgstr "总结\n"

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:134
#, fuzzy
msgid "This post is a brief introduction to the `Emitter` construct from Reactive Messaging.  More information is available on the https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.2/emitter/emitter.html[SmallRye Reactive Messaging documentation]."
msgstr "这篇文章是对Reactive Messaging的 `Emitter` 构造的简要介绍。更多信息可在 link:https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.2/emitter/emitter.html[SmallRye Reactive Messaging文档] 中找到。"

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:138
msgid "In the next Quarkus version (1.9), this feature will be improved with two very nice enhancements.  First, it will offer a Mutiny variant, easing the integration with Mutiny APIs.  Then, it would be possible for the Kafka case to directly emit key/value pairs without needing to use metadata."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:139
msgid "Stay tuned! Will will cover these in a follow-up post!"
msgstr ""
