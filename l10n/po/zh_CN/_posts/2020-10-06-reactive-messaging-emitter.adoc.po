# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy, no-wrap
msgid "Emitter - Bridging the imperative and the reactive worlds"
msgstr "发射器 - 衔接必要的和反应的世界"

#. type: YAML Front Matter: synopsis
#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy, no-wrap
msgid "Emitting messages with Reactive Messaging Emitters"
msgstr "用反应式消息发射器发射消息"

#. type: Plain text
#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "In a https://quarkus.io/blog/kafka-avro/[previous blog post] about Kafka and Avro, we used an _emitter_ to send Kafka messages."
msgstr "在 link:https://quarkus.io/blog/kafka-avro/[之前] 一篇关于Kafka和Avro的 link:https://quarkus.io/blog/kafka-avro/[博文] 中，我们使用了一个 _发射器_ 来发送Kafka消息。"

#. type: Plain text
#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "image:/assets/images/posts/reactive-messaging-emitter/architecture.png[width=70%]"
msgstr "image:/assets/images/posts/reactive-messaging-emitter/architecture.png[alt=\"architecture\", width=\"70%\"]"

#. type: Plain text
#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "In this post, we are going look at this emitter construct a little bit more closely."
msgstr "在这篇文章中，我们将更仔细地看一下这个发射器的结构。"

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
msgid "Injecting an Emitter"
msgstr ""

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
msgid ""
"Injecting an emitter is straightforward.\n"
"You indicate the targeted channel, i.e., where do you send your messages:"
msgstr ""

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
msgid ""
"Remember that reactive messaging uses _channels_ as a primary abstraction.\n"
"They can be in-memory channels or mapped to a remote broker."
msgstr ""

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
msgid ""
"In the previous code snippet, we inject an `Emitter<Movie>`.\n"
"It means you will send messages containing movies as payload.\n"
"So, the specified type is the payload type.\n"
"That lets you send: payloads directly (wrapped automatically in a message) or more detailed messages containing a movie as payload:"
msgstr ""

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
msgid "Sending payloads"
msgstr ""

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
msgid ""
"Sending payload is the simplest way to send data.\n"
"You just pass the payload to the `send` method like an instance of `Movie`.\n"
"Under the hood, it just creates a simple `Message` wrapping the payload."
msgstr ""

#. type: Plain text
#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "When used with payload, the `send` method returns a `CompletionStage` indicating if the message processing succeeded or failed:"
msgstr "当与payload一起使用时， `send` 方法返回一个 `CompletionStage` ，表明消息处理是成功还是失败。"

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
msgid ""
"Processing, and will see later event the emission, happens asynchronously.\n"
"So, the returned `CompletionStage` lets you know when the message is processed.\n"
"The `CompletionStage` is completed successfully when the message is acknowledged.\n"
"Most of the time, it means that the processing has been completed smoothly, or the message has been sent to a broker successfully.\n"
"If something wrong happens, the `CompletionStage` is completed exceptionally.\n"
"The passed exception gives you an idea of the reason."
msgstr ""

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
msgid "Sending messages"
msgstr ""

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
msgid ""
"While sending payloads is more straightforward, sometimes you want to attach metadata to the message, like configuring how it should be written in Kafka, tracing information, etc.\n"
"The emitter also allows sending messages, and so attach the metadata you want.\n"
"In the following example, we configure the outbound Kafka record.\n"
"We set the key, the topic, and so on.\n"
"That way, you can dispatch messages to different topics and even decide dynamically:"
msgstr ""

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
msgid "Emissions are asynchronous"
msgstr ""

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
msgid ""
"Emitters form a bridge between the imperative and the reactive worlds.\n"
"When you emit a message, this message is not processed immediately.\n"
"The downstream component consuming the message are part of a _Reactive Streams_.\n"
"Passing the message immediately would violate the Reactive Streams protocol.\n"
"We must be sure that the downstream components are ready to accept this message.\n"
"As a result, the emitter is not pushing the message directly, but enqueue it in a buffer used to handle the downstream capacity (requests in Reactive Streams lingo)."
msgstr ""

#. type: Plain text
#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "image:/assets/images/posts/reactive-messaging-emitter/buffer.png[width=90%]"
msgstr "image:/assets/images/posts/reactive-messaging-emitter/buffer.png[alt=\"buffer\", width=\"90%\"]"

#. type: Plain text
#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "The downstream component receives the messages according to the requests it makes, ensuring its capacity is never exceeded."
msgstr "下游组件根据其提出的请求接收信息，确保其容量永远不会被超过。"

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
msgid "Overflow management"
msgstr ""

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
msgid ""
"But with buffer comes... overflow.\n"
"If you emit too many messages and the downstream cannot keep up, the messages are stored in the buffer until it reaches its maximum capacity.\n"
"Then, you cannot emit anymore, and attempting to emit will throw exceptions.\n"
"But what can we do in this case?\n"
"When injecting the emitter, you can configure an Overflow strategy.\n"
"For example, you can set the buffer size, use an unbounded buffer, drop the messages, fail, or just ignore the back pressure and let the downstream handle it.\n"
"By default, it uses a buffer, but depending on your use case, you may want to configure it differently:"
msgstr ""

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
msgid "Conclusion"
msgstr ""

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
msgid ""
"This post is a brief introduction to the `Emitter` construct from Reactive Messaging.\n"
"More information is available on the https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.2/emitter/emitter.html[SmallRye Reactive Messaging documentation]."
msgstr ""

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
msgid ""
"In the next Quarkus version (1.9), this feature will be improved with two very nice enhancements.\n"
"First, it will offer a Mutiny variant, easing the integration with Mutiny APIs.\n"
"Then, it would be possible for the Kafka case to directly emit key/value pairs without needing to use metadata."
msgstr ""

#. type: Plain text
#: _posts/2020-10-06-reactive-messaging-emitter.adoc
msgid "Stay tuned! Will will cover these in a follow-up post!"
msgstr ""
