# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-08-31 13:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy, no-wrap
msgid "Generate Helm charts manifests with Quarkus Helm"
msgstr "用Quarkus Helm生成Helm图表清单"

#. type: YAML Front Matter: synopsis
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy, no-wrap
msgid "How to use the Quarkus Helm extension to generate the Helm chart manifests"
msgstr "如何使用Quarkus Helm扩展来生成Helm图表清单"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "https://helm.sh/[Helm] is the most popular package manager that finds, shares, and deploys software built for Kubernetes. To configure Java applications for distribution through Helm, you need to package them as Helm charts containing all the necessary metadata and resource definitions and this can be a very tedious task. The good news is that Quarkus has recently released the new https://github.com/quarkiverse/quarkus-helm[Quarkus Helm] extension that will automatically generate all these Helm chart manifests and resources!"
msgstr "link:https://helm.sh/[Helm] 是最受欢迎的软件包管理器，它可以找到、分享和部署为Kubernetes构建的软件。为了配置Java应用程序以便通过Helm发布，你需要把它们打包成Helm图表，其中包含所有必要的元数据和资源定义，这可能是一项非常繁琐的工作。好消息是，Quarkus最近发布了新的 link:https://github.com/quarkiverse/quarkus-helm[Quarkus Helm] 扩展，它将自动生成所有这些Helm图表清单和资源!"

#. type: Title ==
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy, no-wrap
msgid "Introduction to Helm charts"
msgstr "舵手图的介绍"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "First of all, let's introduce how a Helm chart looks like. A Helm chart is a collection of files inside a directory. The following files are mandatory:"
msgstr "首先，让我们介绍一下Helm图表是什么样子的。Helm图表是一个目录中的文件集合。以下文件是必须的。"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "`Chart.yaml`: Chart metadata, such as name, version, and developers."
msgstr " `Chart.yaml` :图表元数据，如名称、版本和开发者。"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "`values.yaml`: Default configuration values for the chart in YAML."
msgstr " `values.yaml` :YAML中图表的默认配置值。"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "`templates`: A directory containing the list of resources that, in combination with `values.yaml`, generate the application when the chart is installed. The resources are also specified in YAML."
msgstr " `templates` :一个包含资源列表的目录，与 `values.yaml` ，在安装图表时生成应用程序。这些资源也是用YAML指定的。"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "Find more information about Helm charts in the https://helm.sh/docs/topics/charts/[official Helm documentation]."
msgstr "关于Helm图表的更多信息，请查阅 link:https://helm.sh/docs/topics/charts/[官方Helm文档] 。"

#. type: Title ==
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy, no-wrap
msgid "Getting started with the Quarkus Helm extension"
msgstr "开始使用Quarkus Helm扩展程序"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "Let's now see how we can generate the Helm chart of a Quarkus application."
msgstr "现在让我们看看如何生成Quarkus应用程序的Helm图表。"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "In this example, we’ll create a Quarkus application with the Quarkus Helm and the Quarkus Kubernetes extensions by running the following command:"
msgstr "在这个例子中，我们将通过运行以下命令，用Quarkus Helm和Quarkus Kubernetes扩展创建一个Quarkus应用程序。"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "If you already have your Quarkus project configured, you can add the Helm extension to your project by running the following command in your project base directory:"
msgstr "如果你已经配置了你的Quarkus项目，你可以通过在你的项目基础目录下运行以下命令来添加Helm扩展到你的项目。"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "This command will add the following dependency to your `pom.xml` file:"
msgstr "这个命令将在你的 `pom.xml` 文件中添加以下依赖关系。"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "And now you can generate the Helm resources using the Maven build command:"
msgstr "现在你可以使用Maven构建命令生成Helm资源。"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "Depending on the Quarkus Kubernetes extensions that you are using in your project, the Helm resources will include some resources or others. Since we have used the Quarkus Kubernetes extension, the Helm chart resources will be generated in the `target/helm/kubernetes/<chart name>/` directory."
msgstr "根据你在项目中使用的Quarkus Kubernetes扩展，Helm资源将包括一些资源或其他资源。由于我们使用了Quarkus Kubernetes扩展，Helm图表资源将在 `target/helm/kubernetes/<chart name>/` 目录中生成。"

#. type: delimited block =
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "The `<chart name>` is set from either the property `quarkus.helm.name` or the Quarkus application name."
msgstr " `<chart name>` 是从属性 `quarkus.helm.name` 或Quarkus应用程序名称中设置的。"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "Moreover, the Helm resources include the following files in the `target/helm/kubernetes/<chart name>/templates` directory:"
msgstr "此外，Helm资源在 `target/helm/kubernetes/<chart name>/templates` 目录中包括以下文件。"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "`deployment.yaml`"
msgstr " `deployment.yaml` "

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "`ingress.yaml`"
msgstr " `ingress.yaml` "

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "`service.yaml`"
msgstr " `service.yaml` "

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "Instead, if we were using the Quarkus OpenShift extension, the Helm chart sources would be generated in the `target/helm/openshift/<chart name>/` directory and it would include the files `buildconfig.yaml`, `deploymentconfig.yaml`, `service.yaml` and `imagestream.yaml`."
msgstr "相反，如果我们使用Quarkus OpenShift扩展，Helm图表源将在 `target/helm/openshift/<chart name>/` 目录下生成，它将包括文件 `buildconfig.yaml` 、 `deploymentconfig.yaml` 、 `service.yaml` 和 `imagestream.yaml` 。"

#. type: Title ==
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy, no-wrap
msgid "Helm use"
msgstr "舵手使用"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "Let's see next how to use the previously generated Helm chart."
msgstr "接下来让我们看看如何使用之前生成的Helm图表。"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "First, make sure you have installed the https://helm.sh/docs/intro/install/[Helm command-line interface] (CLI) and logged into a Kubernetes cluster."
msgstr "首先，确保你已经安装了 link:https://helm.sh/docs/intro/install/[Helm命令行界面] （CLI）并登录到Kubernetes集群。"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "Then run the following Maven command to generate the Helm artifacts:"
msgstr "然后运行以下Maven命令，生成Helm工件。"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "And install the generated Helm chart into the cluster:"
msgstr "并将生成的Helm图表安装到集群中。"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "The `helm` command waits until the chart is fully installed and the application is up and running."
msgstr " `helm` 命令会等待，直到图表完全安装完毕，应用程序启动并运行。"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "You can update your deployment in a couple of ways. The first is via the `upgrade` command of the Helm CLI. After having made changes to your project and regenerated the resources, you can upgrade your deployment using the following command:"
msgstr "你可以通过几种方式更新你的部署。首先是通过Helm CLI的 `upgrade` 命令。在对你的项目进行修改并重新生成资源后，你可以使用以下命令升级你的部署。"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "The second way to update a deployment is through the `--set` option of the helm upgrade command:"
msgstr "更新部署的第二种方式是通过Helm upgrade命令的 `--set` 选项。"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "The `app.replicas` option is a parameterized property that is mapped by the `values.yaml` file. We'll explore this function more in the next section."
msgstr " `app.replicas` 选项是一个参数化的属性，由 `values.yaml` 文件来映射。我们将在下一节中更多地探讨这个功能。"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "Finally, to delete a deployment, enter:"
msgstr "最后，要删除一个部署，请输入。"

#. type: Title ==
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy, no-wrap
msgid "Mapping values"
msgstr "映射值"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "Helm allows _mapping_ to set properties of your resources when installing your chart or after your chart has been installed. For example, suppose your deployment template in the `templates/deployment.yaml` file looks like this:"
msgstr "Helm允许 _映射_ 在安装你的图表时或在你的图表被安装后设置你的资源的属性。例如，假设你在 `templates/deployment.yaml` 文件中的部署模板是这样的。"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "You can set the number of replicas to use when installing the chart using the `helm` command, as shown in the previous section:"
msgstr "你可以在安装图表时使用 `helm` 命令来设置复制的数量，如上节所示。"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "Alternatively, you can set the number of replicas to use in the generated `values.yaml` file, located in the chart's directory at `target/helm/kubernetes/<chart name>/values.yaml`:"
msgstr "另外，你可以在生成的 `values.yaml` 文件中设置要使用的复制数量，该文件位于图表的目录中，网址是 `target/helm/kubernetes/<chart name>/values.yaml` 。"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "So, do I need to manually update the `values.yaml` and the template resources to map these properties? No! The Quarkus Helm extension will automatically map some preconfigured properties, such as the Kubernetes replicas or the ingress host. The complete list of preconfigured properties is in the https://quarkiverse.github.io/quarkiverse-docs/quarkus-helm/dev/index.html#_mapping_values[official Quarkus Helm site] documentation."
msgstr "那么，我是否需要手动更新 `values.yaml` 和模板资源来映射这些属性？不需要!Quarkus Helm扩展会自动映射一些预配置的属性，如Kubernetes副本或入口主机。预配置属性的完整列表在 link:https://quarkiverse.github.io/quarkiverse-docs/quarkus-helm/dev/index.html#_mapping_values[官方Quarkus Helm网站] 文档中。"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "Let's try out an example of configuring the replicas using the Quarkus Kubernetes `quarkus.kubernetes.replicas` property. We'll see how the Quarkus Helm extension automatically maps it into the generated Helm chart."
msgstr "让我们尝试一下使用Quarkus Kubernetes `quarkus.kubernetes.replicas` 属性配置副本的例子。我们将看到Quarkus Helm扩展如何将其自动映射到生成的Helm图表中。"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "First, set 3 replicas in your `application.properties` file:"
msgstr "首先，在你的 `application.properties` 文件中设置3个副本。"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "Now, the generated Helm values file at `target/helm/kubernetes/<chart name>/values.yaml` will contain the replicas value:"
msgstr "现在，在 `target/helm/kubernetes/<chart name>/values.yaml` ，生成的Helm值文件将包含复制值。"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "Also, the deployment template file at `target/helm/kubernetes/<chart name>/templates/deployment.yaml` will have a reference to this value."
msgstr "另外，在 `target/helm/kubernetes/<chart name>/templates/deployment.yaml` ，部署模板文件将有一个对这个值的参考。"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "But what if we want to map other properties that are not preconfigured? For example, given the following deployment template file, I want to map the value `example` that appears in the `metadata.name` property:"
msgstr "但是如果我们想映射其他没有预设的属性呢？例如，鉴于以下部署模板文件，我想映射出现在 `metadata.name` 属性中的值 `example` 。"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "You can configure the Quarkus Helm extension to map any properties that are present in your resources using https://github.com/yaml-path/YamlPath[YAMLPath expressions]. To continue with the preceding example, you only need to add the following configuration to your properties:"
msgstr "你可以配置Quarkus Helm扩展，使用 link:https://github.com/yaml-path/YamlPath[YAMLPath表达式] 来映射你的资源中存在的任何属性。为了继续前面的例子，你只需要在你的属性中添加以下配置。"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "`property` is the property name to be set in the generated `values.yaml`"
msgstr " `property` 是要在生成的 `values.yaml` "

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "`paths` is a list of YAMLPath expressions that identify the properties you want to use"
msgstr " `paths` 是一个YAMLPath表达式的列表，用于识别你要使用的属性"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "Using the properties just defined, the resulting Helm values file at `target/helm/kubernetes/<chart name>/values.yaml` will now include:"
msgstr "使用刚才定义的属性，在 `target/helm/kubernetes/<chart name>/values.yaml` ，产生的Helm值文件现在将包括。"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "YAMLPath expressions also support more complex scenarios. You can use the expressions to replace properties for a certain resource type, or properties described as a key-value map. You can find all the supported features in https://quarkiverse.github.io/quarkiverse-docs/quarkus-helm/dev/index.html#_mapping_user_properties_using_yamlpath_expressions[here]."
msgstr "YAMLPath 表达式还支持更复杂的情况。你可以使用表达式来替换某种资源类型的属性，或以键值映射方式描述的属性。你可以在 link:https://quarkiverse.github.io/quarkiverse-docs/quarkus-helm/dev/index.html#_mapping_user_properties_using_yamlpath_expressions[这里] 找到所有支持的功能。"

#. type: Title ==
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy, no-wrap
msgid "Helm profiles"
msgstr "舵手简介"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "By default, all properties are mapped to the same Helm `values.yaml` file. However, the Quarkus Helm extension also supports the generation of other Helm values files."
msgstr "默认情况下，所有属性都被映射到同一个Helm `values.yaml` 文件。然而，Quarkus Helm扩展也支持生成其他Helm值文件。"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "For example, let's say you have two environments: one for testing and another for production. Each environment has a different ingress host that exposes your Kubernetes application. You can configure your application as follows:"
msgstr "例如，假设您有两个环境：一个用于测试，另一个用于生产。每个环境都有不同的入口主机，用于暴露 Kubernetes 应用程序。您可以如下配置您的应用程序："

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "The ingress host property is preconfigured by the Quarkus Helm extension. So you will find the `my-host` value in the `target/helm/kubernetes/<chart name>/values.yaml` file:"
msgstr "入口主机属性由 Quarkus Helm 扩展预配置。因此，你可以在 `target/helm/kubernetes/<chart name>/values.yaml` 文件中找到 `my-host` 值："

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "But because you are also using a profile named `test` in one of your properties, the Quarkus Helm extension also generates a `target/helm/kubernetes/<chart name>/values-test.yaml` file with the content:"
msgstr "但是，由于你在其中一个属性中也使用了名为 `test` 的配置文件，Quarkus Helm 扩展程序也会生成一个包含内容的 `target/helm/kubernetes/<chart name>/values-test.yaml` 文件："

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "When installing your chart in the test environment, you can make use of this values file as shown in the following command:"
msgstr "在测试环境中安装图表时，可以使用该值文件，如以下命令所示："

#. type: Title ==
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy, no-wrap
msgid "Summary"
msgstr "摘要"

#. type: Plain text
#: _posts/2022-08-31-quarkus-helm.adoc
#, fuzzy
msgid "In this article, we learned how to easily generate Helm charts using the Quarkus Helm extension, how to map properties to be set when installing or updating your charts, and how to use Helm profiles."
msgstr "在本文中，我们学习了如何使用 Quarkus Helm 扩展轻松生成 Helm 图表，如何映射安装或更新图表时要设置的属性，以及如何使用 Helm 配置文件。"
