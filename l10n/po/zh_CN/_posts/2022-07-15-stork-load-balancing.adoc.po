# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-07-15 12:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy, no-wrap
msgid "How to select the \"right\" service with Stork?"
msgstr "如何用Stork选择 \"正确 \"的服务？"

#. type: YAML Front Matter: synopsis
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy, no-wrap
msgid "How Stork selects the best service instance and the various built-in stategies."
msgstr "Stork如何选择最佳服务实例和各种内置策略。"

#: _posts/2022-07-15-stork-load-balancing.adoc
msgid ""
"The essence of distributed systems resides in the interaction between _services_.\n"
"In modern architectures, you often have multiple instances of your service to share the load or improve the resilience by redundancy."
msgstr ""

#: _posts/2022-07-15-stork-load-balancing.adoc
msgid ""
"But, when you have all these instances, how do you select the _best_ one? That's where Stork helps.\n"
"Stork is a service discovery and load balancing framework. Stork will locate and choose the most appropriate instance for each call.\n"
"In this post, we will look into some of the load-balancing strategies offered by Stork, so you can decide which one is the best for you."
msgstr ""

#. type: Title ==
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy, no-wrap
msgid "Playground"
msgstr "游乐场"

#: _posts/2022-07-15-stork-load-balancing.adoc
msgid ""
"When your application needs to invoke a remote service (2), it asks Stork to locate this service (3).\n"
"This service discovery step retrieves the service instances. You may have a single instance, which eases the selection process, but you can also have multiple instances available.\n"
"Then, you need to pick one.\n"
"That's where Stork load balancing capability comes and selects the instance (4)."
msgstr ""

#: _posts/2022-07-15-stork-load-balancing.adoc
msgid ""
"To illustrate this service selection feature, we need an application.\n"
"The following picture represents our system:"
msgstr ""

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "You can find the source code on https://github.com/cescoffier/stork-load-balancing-playground[https://github.com/cescoffier/stork-load-balancing-playground]."
msgstr "你可以在 link:https://github.com/cescoffier/stork-load-balancing-playground[https://github.com/cescoffier/stork-load-balancing-playground] ，找到源代码。"

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "The system is composed of three service instances: blue, yellow, and green:"
msgstr "该系统由三个服务实例组成：蓝色、黄色和绿色。"

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "The blue instance returns 🔵 ."
msgstr "蓝色实例返回🔵。"

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "The yellow instance returns 🟡 . This service is slightly slower than the blue service."
msgstr "黄色实例返回🟡 。这个服务比蓝色服务稍微慢一些。"

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "The green instance returns 🟢 . It's the fastest but with a 20% chance of failing."
msgstr "绿色的实例返回🟢。它是最快的，但有20%的失败机会。"

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "The main application contains a REST Client configured to use stork:"
msgstr "主应用程序包含一个配置为使用stork的REST客户端。"

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "The main endpoint delegates the invocation to the client:"
msgstr "主端点将调用委托给客户端。"

#: _posts/2022-07-15-stork-load-balancing.adoc
msgid ""
"The UI (exposed on http://localhost:8080[http://localhost:8080]) allows you to invoke the `/dispatcher` endpoint ten times. It will use the REST Client ten times, which will lead to ten service selections.\n"
"These calls can be either:"
msgstr ""

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "Sequential calls: it calls the service ten times sequentially, waiting for the previous call to complete before emitting the next one. This approach preserves the ordering."
msgstr "顺序调用：它按顺序调用服务十次，在发出下一次调用之前，等待前一次调用的完成。这种方法保留了排序。"

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "Concurrent calls: it emits ten requests concurrently. You do not control how these requests are sent and the order they are received and processed."
msgstr "并发调用：它同时发出十个请求。你不能控制这些请求的发送方式以及接收和处理的顺序。"

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "Let's now look at the various load-balancing strategies offered by Stork."
msgstr "现在我们来看看Stork提供的各种负载平衡策略。"

#. type: Title ==
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy, no-wrap
msgid "The round-robin strategy"
msgstr "循环战略"

#: _posts/2022-07-15-stork-load-balancing.adoc
msgid ""
"Stork uses a round-robin if you do not set any load balancing strategy.\n"
"When you call the service (either sequentially or concurrently), you get something like:"
msgstr ""

#: _posts/2022-07-15-stork-load-balancing.adoc
msgid ""
"Stork iterates over the available instances. So we can see 🔵 🟡 🟢 🔵 🟡 🟢 🔵 🟡 🟢 sequences.\n"
"It does not change the strategy when the call fails.\n"
"When the green instance fails (❌), it does not evict the instance, continues the iteration, and picks the blue instance, then the yellow instance, and then the green one again."
msgstr ""

#: _posts/2022-07-15-stork-load-balancing.adoc
msgid ""
"The round-robin strategy is convenient to dispatch the load equally among a set of service instances.\n"
"When there is a failure, and when a retry is possible, you can use `@Retry` to use the next service instance."
msgstr ""

#. type: Title ==
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy, no-wrap
msgid "The random strategy"
msgstr "随机策略"

#: _posts/2022-07-15-stork-load-balancing.adoc
msgid ""
"Unlike the round-robin, iterating over a set of service instances, the random strategy randomly picks an instance.\n"
"The following dependency provides the random strategy:"
msgstr ""

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "To use this load balancing strategy, you must configure the load balancer of your service:"
msgstr "要使用这种负载平衡策略，你必须配置你的服务的负载平衡器。"

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "As you can see in the picture below, it does not follow a pattern. So, the same service instance can be called multiple times consecutively."
msgstr "正如你在下图中看到的，它并不遵循一个模式。所以，同一个服务实例可以被连续调用多次。"

#: _posts/2022-07-15-stork-load-balancing.adoc
msgid ""
"This strategy does not share the load equally between the instances.\n"
"It can, in the worst case, pick a busy instance.\n"
"However, suppose the invoked service is also used by other applications (also using the random load balancing).\n"
"In that case, it can be convenient to share the load and avoid overloading a specific instance globally."
msgstr ""

#. type: Title ==
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy, no-wrap
msgid "Least-Requests"
msgstr "最少的请求"

#: _posts/2022-07-15-stork-load-balancing.adoc
msgid ""
"The two previous strategies do not monitor the invocations.\n"
"The _least-requests_ strategy does. When an instance is selected, it tracks the invocations, which counts the number of inflight requests in the case of this strategy.\n"
"When a call completes (successfully or not), it decrements the counter.\n"
"Thus, selecting an instance returns the instance with fewer inflight calls."
msgstr ""

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "To use this strategy, you need the following dependency:"
msgstr "要使用这一策略，你需要以下依赖性。"

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "You also need to configure the load balancer of your service:"
msgstr "你还需要配置你的服务的负载平衡器。"

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "If you call the service sequentially, it always picks the same instance:"
msgstr "如果你连续调用该服务，它总是挑选同一个实例。"

#: _posts/2022-07-15-stork-load-balancing.adoc
msgid ""
"Indeed, the number of inflight requests for the service is always 0, as it waits for the response before calling it another time.\n"
"However, when you call the service concurrently, this strategy becomes a lot more relevant:"
msgstr ""

#: _posts/2022-07-15-stork-load-balancing.adoc
msgid ""
"As the green service is the fastest, it gets called more frequently as inflight requests decrease quickly.\n"
"Thus, while the blue and yellow services still have inflight calls, the green service is back to 0 and selected."
msgstr ""

#: _posts/2022-07-15-stork-load-balancing.adoc
msgid ""
"This strategy is convenient when you have services with an API having different response times.\n"
"For example, you can have endpoints answering quickly and endpoints doing a lot more work, thus taking more time."
msgstr ""

#: _posts/2022-07-15-stork-load-balancing.adoc
msgid ""
"This strategy has one drawback.\n"
"If you have many service instances, you need to iterate over the whole set to find the one to pick."
msgstr ""

#. type: Title ==
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy, no-wrap
msgid "The power of two random choices"
msgstr "两个随机选择的力量"

#: _posts/2022-07-15-stork-load-balancing.adoc
msgid ""
"This strategy extends the _least-request_ one and addresses the drawback mentioned above.\n"
"Instead of iterating over the whole list of instances, it picks two instances randomly and selects the one with the fewer inflight requests."
msgstr ""

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "You also need to configure the load balancer for the service:"
msgstr "你还需要为该服务配置负载平衡器。"

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "The results are similar to the _least-request_ as we have only three instances:"
msgstr "结果与 _最小请求_ 相似，因为我们只有三个实例。"

#: _posts/2022-07-15-stork-load-balancing.adoc
msgid ""
"However, this strategy is less expensive when you have many instances and when the iteration takes too much time.\n"
"In the worst case, it would pick the two most busy instances and select the one with fewer requests."
msgstr ""

#. type: Title ==
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy, no-wrap
msgid "Least response time"
msgstr "最短的响应时间"

#: _posts/2022-07-15-stork-load-balancing.adoc
msgid ""
"The least response time keeps track of the response time and failures.\n"
"Thus, it selects the fastest instances.\n"
"That strategy handles failures by adding a penalty to failing instances."
msgstr ""

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "You also need to configure the load-balancer for the service:"
msgstr "你还需要为服务配置负载平衡器。"

#: _posts/2022-07-15-stork-load-balancing.adoc
msgid ""
"This strategy selects the green instance more often.\n"
"However, due to the chance of failure, it will also pick the other ones once in a while."
msgstr ""

#. type: Title ==
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy, no-wrap
msgid "Summary"
msgstr "摘要"

#: _posts/2022-07-15-stork-load-balancing.adoc
msgid ""
"This blog post has presented the load balancing strategies offered by Stork.\n"
"You can find the full list on http://smallrye.io/smallrye-stork/latest[the Stork web site]."
msgstr ""

#: _posts/2022-07-15-stork-load-balancing.adoc
msgid ""
"Strategies like `random` or `round-robin` allow dispatching the load between instances.\n"
"The `least-request`, `power-of-two-choices`, and `least-response-time` strategies monitor the calls to select the less loaded or fastest instance."
msgstr ""

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "If these strategies do not fit your requirements, that's not a problem because http://smallrye.io/smallrye-stork/latest/load-balancer/custom-load-balancer/[you can implement your own] and craft the perfect selection algorithm."
msgstr "如果这些策略不符合你的要求，那也不是问题，因为 link:http://smallrye.io/smallrye-stork/latest/load-balancer/custom-load-balancer/[你可以实现你自己的] 策略，并制作完美的选择算法。"

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
msgid "You can also learn more about Stork and it integration in Quarkus in the http://smallrye.io/smallrye-stork/latest/quarkus/[Using Stork with Quarkus guide]."
msgstr ""
