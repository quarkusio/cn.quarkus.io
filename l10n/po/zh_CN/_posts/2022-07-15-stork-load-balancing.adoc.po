# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-07-15 12:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy, no-wrap
msgid "How to select the \"right\" service with Stork?"
msgstr "如何用Stork选择 \"正确 \"的服务？"

#. type: YAML Front Matter: synopsis
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy, no-wrap
msgid "How Stork selects the best service instance and the various built-in stategies."
msgstr "Stork如何选择最佳服务实例和各种内置策略。"

#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid ""
"The essence of distributed systems resides in the interaction between _services_.\n"
"In modern architectures, you often have multiple instances of your service to share the load or improve the resilience by redundancy."
msgstr "分布式系统的精髓在于 _服务_ 之间的交互。在现代架构中，服务通常有多个实例，以分担负载或通过冗余提高弹性。"

#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid ""
"But, when you have all these instances, how do you select the _best_ one? That's where Stork helps.\n"
"Stork is a service discovery and load balancing framework. Stork will locate and choose the most appropriate instance for each call.\n"
"In this post, we will look into some of the load-balancing strategies offered by Stork, so you can decide which one is the best for you."
msgstr "但是，当你遇到所有这些情况时，如何选择 _最好的_ 一个呢？这正是 Stork 可以提供帮助的地方。Stork 是一个服务发现和负载平衡框架。Stork 会为每次调用找到并选择最合适的实例。在本篇文章中，我们将介绍 Stork 提供的一些负载平衡策略，这样你就可以决定哪种策略最适合你。"

#. type: Title ==
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy, no-wrap
msgid "Playground"
msgstr "游乐场"

#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid ""
"When your application needs to invoke a remote service (2), it asks Stork to locate this service (3).\n"
"This service discovery step retrieves the service instances. You may have a single instance, which eases the selection process, but you can also have multiple instances available.\n"
"Then, you need to pick one.\n"
"That's where Stork load balancing capability comes and selects the instance (4)."
msgstr "当应用程序需要调用远程服务（2）时，它会要求 Stork 找到该服务（3）。服务发现步骤会检索服务实例。你可能只有一个实例，这就简化了选择过程，但你也可能有多个可用实例。然后，你需要选择一个。这就是 Stork 负载均衡功能的作用，它可以选择实例 (4)。"

#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid ""
"To illustrate this service selection feature, we need an application.\n"
"The following picture represents our system:"
msgstr "为了说明这种服务选择功能，我们需要一个应用程序。下图代表了我们的系统："

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "You can find the source code on https://github.com/cescoffier/stork-load-balancing-playground[https://github.com/cescoffier/stork-load-balancing-playground]."
msgstr "你可以在 link:https://github.com/cescoffier/stork-load-balancing-playground[https://github.com/cescoffier/stork-load-balancing-playground] ，找到源代码。"

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "The system is composed of three service instances: blue, yellow, and green:"
msgstr "该系统由三个服务实例组成：蓝色、黄色和绿色。"

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "The blue instance returns 🔵 ."
msgstr "蓝色实例返回🔵。"

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "The yellow instance returns 🟡 . This service is slightly slower than the blue service."
msgstr "黄色实例返回🟡 。这个服务比蓝色服务稍微慢一些。"

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "The green instance returns 🟢 . It's the fastest but with a 20% chance of failing."
msgstr "绿色的实例返回🟢。它是最快的，但有20%的失败机会。"

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "The main application contains a REST Client configured to use stork:"
msgstr "主应用程序包含一个配置为使用stork的REST客户端。"

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "The main endpoint delegates the invocation to the client:"
msgstr "主端点将调用委托给客户端。"

#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid ""
"The UI (exposed on http://localhost:8080[http://localhost:8080]) allows you to invoke the `/dispatcher` endpoint ten times. It will use the REST Client ten times, which will lead to ten service selections.\n"
"These calls can be either:"
msgstr "用户界面（在 http://localhost:8080 上公开 link:http://localhost:8080[）] 允许您调用 `/dispatcher` 端点十次。它将使用 REST 客户端十次，这将导致十次服务选择。这些调用可以是"

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "Sequential calls: it calls the service ten times sequentially, waiting for the previous call to complete before emitting the next one. This approach preserves the ordering."
msgstr "顺序调用：它按顺序调用服务十次，在发出下一次调用之前，等待前一次调用的完成。这种方法保留了排序。"

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "Concurrent calls: it emits ten requests concurrently. You do not control how these requests are sent and the order they are received and processed."
msgstr "并发调用：它同时发出十个请求。你不能控制这些请求的发送方式以及接收和处理的顺序。"

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "Let's now look at the various load-balancing strategies offered by Stork."
msgstr "现在我们来看看Stork提供的各种负载平衡策略。"

#. type: Title ==
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy, no-wrap
msgid "The round-robin strategy"
msgstr "循环战略"

#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid ""
"Stork uses a round-robin if you do not set any load balancing strategy.\n"
"When you call the service (either sequentially or concurrently), you get something like:"
msgstr "如果不设置任何负载平衡策略，Stork 会使用轮循方式。当你调用服务时（无论是顺序调用还是并发调用），你会得到类似下面的信息"

#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid ""
"Stork iterates over the available instances. So we can see 🔵 🟡 🟢 🔵 🟡 🟢 🔵 🟡 🟢 sequences.\n"
"It does not change the strategy when the call fails.\n"
"When the green instance fails (❌), it does not evict the instance, continues the iteration, and picks the blue instance, then the yellow instance, and then the green one again."
msgstr "Stork 对可用实例进行迭代。因此，我们可以看到 🔵 🟡 🟢 🔵 🟡 🟢 🔵 🟡 🟢 序列。当调用失败时，它不会改变策略。当绿色实例调用失败时 (❌)，它不会驱逐该实例，而是继续迭代，先选择蓝色实例，再选择黄色实例，然后再次选择绿色实例。"

#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid ""
"The round-robin strategy is convenient to dispatch the load equally among a set of service instances.\n"
"When there is a failure, and when a retry is possible, you can use `@Retry` to use the next service instance."
msgstr "轮循策略便于在一组服务实例之间平均分配负载。当出现故障且可以重试时，可以使用 `@Retry` 来使用下一个服务实例。"

#. type: Title ==
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy, no-wrap
msgid "The random strategy"
msgstr "随机策略"

#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid ""
"Unlike the round-robin, iterating over a set of service instances, the random strategy randomly picks an instance.\n"
"The following dependency provides the random strategy:"
msgstr "与在一组服务实例上迭代的循环策略不同，随机策略是随机选择一个实例。下面的依赖关系提供了随机策略："

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "To use this load balancing strategy, you must configure the load balancer of your service:"
msgstr "要使用这种负载平衡策略，你必须配置你的服务的负载平衡器。"

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "As you can see in the picture below, it does not follow a pattern. So, the same service instance can be called multiple times consecutively."
msgstr "正如你在下图中看到的，它并不遵循一个模式。所以，同一个服务实例可以被连续调用多次。"

#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid ""
"This strategy does not share the load equally between the instances.\n"
"It can, in the worst case, pick a busy instance.\n"
"However, suppose the invoked service is also used by other applications (also using the random load balancing).\n"
"In that case, it can be convenient to share the load and avoid overloading a specific instance globally."
msgstr "这种策略不会在实例之间平均分担负载。在最坏的情况下，它会选择一个繁忙的实例。不过，假设被调用的服务也被其他应用程序使用（也使用随机负载平衡）。在这种情况下，就可以方便地分担负载，避免特定实例全局超载。"

#. type: Title ==
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy, no-wrap
msgid "Least-Requests"
msgstr "最少的请求"

#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid ""
"The two previous strategies do not monitor the invocations.\n"
"The _least-requests_ strategy does. When an instance is selected, it tracks the invocations, which counts the number of inflight requests in the case of this strategy.\n"
"When a call completes (successfully or not), it decrements the counter.\n"
"Thus, selecting an instance returns the instance with fewer inflight calls."
msgstr "前两种策略不监控调用。而 _最少请求_ 策略则会。当选择一个实例时，它会跟踪调用，在该策略中会计算空中请求的次数。当调用完成时（无论成功与否），它都会递减计数器。因此，选择实例时，会返回调用次数较少的实例。"

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "To use this strategy, you need the following dependency:"
msgstr "要使用这一策略，你需要以下依赖性。"

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "You also need to configure the load balancer of your service:"
msgstr "你还需要配置你的服务的负载平衡器。"

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "If you call the service sequentially, it always picks the same instance:"
msgstr "如果你连续调用该服务，它总是挑选同一个实例。"

#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid ""
"Indeed, the number of inflight requests for the service is always 0, as it waits for the response before calling it another time.\n"
"However, when you call the service concurrently, this strategy becomes a lot more relevant:"
msgstr "事实上，该服务的空中请求数始终为 0，因为它会等待响应，然后再调用一次。然而，当您同时调用服务时，这一策略就变得更加重要了："

#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid ""
"As the green service is the fastest, it gets called more frequently as inflight requests decrease quickly.\n"
"Thus, while the blue and yellow services still have inflight calls, the green service is back to 0 and selected."
msgstr "由于绿色服务速度最快，随着航班请求的迅速减少，绿色服务被呼叫的频率也会增加。因此，当蓝色和黄色服务仍有航班呼叫时，绿色服务就会恢复为 0 并被选中。"

#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid ""
"This strategy is convenient when you have services with an API having different response times.\n"
"For example, you can have endpoints answering quickly and endpoints doing a lot more work, thus taking more time."
msgstr "这种策略在使用具有不同响应时间的 API 服务时非常方便。例如，您可以让端点快速响应，也可以让端点做更多工作，从而花费更多时间。"

#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid ""
"This strategy has one drawback.\n"
"If you have many service instances, you need to iterate over the whole set to find the one to pick."
msgstr "这种策略有一个缺点。如果有很多服务实例，就需要遍历整个服务实例集才能找到要选取的服务实例。"

#. type: Title ==
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy, no-wrap
msgid "The power of two random choices"
msgstr "两个随机选择的力量"

#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid ""
"This strategy extends the _least-request_ one and addresses the drawback mentioned above.\n"
"Instead of iterating over the whole list of instances, it picks two instances randomly and selects the one with the fewer inflight requests."
msgstr "这一策略扩展了 _最小请求_ 策略，并解决了上述缺点。它不是对整个实例列表进行迭代，而是随机挑选两个实例，并选择机上请求较少的那个。"

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "You also need to configure the load balancer for the service:"
msgstr "你还需要为该服务配置负载平衡器。"

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "The results are similar to the _least-request_ as we have only three instances:"
msgstr "结果与 _最小请求_ 相似，因为我们只有三个实例。"

#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid ""
"However, this strategy is less expensive when you have many instances and when the iteration takes too much time.\n"
"In the worst case, it would pick the two most busy instances and select the one with fewer requests."
msgstr "不过，当实例数量较多、迭代耗时过长时，这种策略的成本较低。在最糟糕的情况下，它会选择两个最繁忙的实例，然后选择请求较少的那个。"

#. type: Title ==
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy, no-wrap
msgid "Least response time"
msgstr "最短的响应时间"

#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid ""
"The least response time keeps track of the response time and failures.\n"
"Thus, it selects the fastest instances.\n"
"That strategy handles failures by adding a penalty to failing instances."
msgstr "最短响应时间跟踪响应时间和故障情况。因此，它会选择最快的实例。该策略通过对失败实例增加惩罚来处理失败。"

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "You also need to configure the load-balancer for the service:"
msgstr "你还需要为服务配置负载平衡器。"

#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid ""
"This strategy selects the green instance more often.\n"
"However, due to the chance of failure, it will also pick the other ones once in a while."
msgstr "这种策略会更多地选择绿色实例。不过，由于存在失败的可能性，它偶尔也会选择其他实例。"

#. type: Title ==
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy, no-wrap
msgid "Summary"
msgstr "摘要"

#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid ""
"This blog post has presented the load balancing strategies offered by Stork.\n"
"You can find the full list on http://smallrye.io/smallrye-stork/latest[the Stork web site]."
msgstr "本博文介绍了 Stork 提供的负载平衡策略。你可以在 link:http://smallrye.io/smallrye-stork/latest[Stork 网站] 上找到完整的列表。"

#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid ""
"Strategies like `random` or `round-robin` allow dispatching the load between instances.\n"
"The `least-request`, `power-of-two-choices`, and `least-response-time` strategies monitor the calls to select the less loaded or fastest instance."
msgstr "`random` 或 `round-robin` 等策略允许在实例之间调度负载。 `least-request` 、 `power-of-two-choices` 和 `least-response-time` 策略监控调用，以选择负载较少或速度最快的实例。"

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "If these strategies do not fit your requirements, that's not a problem because http://smallrye.io/smallrye-stork/latest/load-balancer/custom-load-balancer/[you can implement your own] and craft the perfect selection algorithm."
msgstr "如果这些策略不符合你的要求，那也不是问题，因为 link:http://smallrye.io/smallrye-stork/latest/load-balancer/custom-load-balancer/[你可以实现你自己的] 策略，并制作完美的选择算法。"

#. type: Plain text
#: _posts/2022-07-15-stork-load-balancing.adoc
#, fuzzy
msgid "You can also learn more about Stork and it integration in Quarkus in the http://smallrye.io/smallrye-stork/latest/quarkus/[Using Stork with Quarkus guide]."
msgstr "您还可以在 \"Stork link:http://smallrye.io/smallrye-stork/latest/quarkus/[与] Quarkus link:http://smallrye.io/smallrye-stork/latest/quarkus/[的使用指南] \"中了解更多有关 link:http://smallrye.io/smallrye-stork/latest/quarkus/[Stork] 及其与 link:http://smallrye.io/smallrye-stork/latest/quarkus/[Quarkus] 集成的信息。"
