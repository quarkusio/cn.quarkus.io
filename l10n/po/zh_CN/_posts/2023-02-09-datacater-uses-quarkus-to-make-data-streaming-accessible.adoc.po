# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-02-09 10:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: _posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc
#, fuzzy, no-wrap
msgid "DataCater uses Quarkus to make Data Streaming more accessible"
msgstr "DataCater使用Quarkus使数据流更容易获取"

#. type: YAML Front Matter: synopsis
#: _posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc
#, fuzzy, no-wrap
msgid "DataCater provides a developer-friendly ETL platform. Learn why it chose Quarkus for its recent rewrite."
msgstr "DataCater提供了一个方便开发者的ETL平台。了解它为什么选择Quarkus进行最近的重写。"

#: _posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc
#, fuzzy
msgid ""
"This article gives a brief overview of the data streaming platform DataCater, discusses how we moved from Scala Play! and Kafka Streams to Quarkus, and\n"
"presents why we think that Quarkus is an exceptional framework for developing cloud-native Java applications."
msgstr "本文简要概述了数据流平台 DataCater，讨论了我们如何从 Scala Play! 和 Kafka Streams 迁移到 Quarkus，并介绍了我们为何认为 Quarkus 是开发云原生 Java 应用程序的出色框架。"

#. type: Title ==
#: _posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc
#, fuzzy, no-wrap
msgid "What is DataCater?"
msgstr "什么是DataCater？"

#: _posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc
#, fuzzy
msgid ""
"https://datacater.io[DataCater^] is a real-time, cloud-native data pipeline platform based on Apache Kafka and Kubernetes. It allows users to build streaming data pipelines that stream records between different\n"
"Apache Kafka topics and can apply filters or transforms to the records on the way.\n"
"Given its focus on data scientists and data engineers as target users, DataCater enables users\n"
"to develop transforms in Python. It provides an https://www.loom.com/share/15947f13e71540948e3f9d57eac64976[interactive, UI-based preview of streaming data pipelines^]\n"
"and uses Kubernetes as the runtime for pipeline deployments."
msgstr "link:https://datacater.io[DataCater] 是一个基于 Apache Kafka 和 Kubernetes 的实时云原生数据管道平台。它允许用户构建流式数据管道，在不同的 Apache Kafka 主题之间传输记录，并在传输过程中对记录进行过滤或转换。DataCater 的目标用户主要是数据科学家和数据工程师，因此用户可以使用 Python 开发转换。它提供 link:https://www.loom.com/share/15947f13e71540948e3f9d57eac64976[基于 UI 的流数据管道交互式预览] ，并使用 Kubernetes 作为管道部署的运行时。"

#. type: Title ==
#: _posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc
#, fuzzy, no-wrap
msgid "Why did DataCater choose Quarkus?"
msgstr "为什么DataCater选择Quarkus？"

#: _posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc
#, fuzzy
msgid ""
"DataCater was created in 2020 and initially built its control plane on top of the Scala framework https://www.playframework.com/[Play^] and implemented pipelines with https://kafka.apache.org/documentation/streams/[Kafka Streams^].\n"
"Over time, we experienced the following limitations and issues with the chosen technologies:"
msgstr "DataCater 创建于 2020 年，最初是在 Scala 框架 link:https://www.playframework.com/[Play] 的基础上构建控制平面，并使用 link:https://kafka.apache.org/documentation/streams/[Kafka Streams] 实施管道。随着时间的推移，我们在所选技术方面遇到了以下限制和问题："

#: _posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc
#, fuzzy
msgid "*Inefficient resource usage:* Kafka Streams applications consume a considerable amount of main memory, making it quite expensive to operate at scale."
msgstr "*资源使用效率低：* Kafka Streams 应用程序需要消耗大量主内存，因此大规模运行的成本相当高。"

#: _posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc
#, fuzzy
msgid "*Long startup times:* Starting a Kafka Streams application can take up to a few minutes, which has a negative impact on the availability of streaming data pipelines."
msgstr "*启动时间长：* 启动 Kafka Streams 应用程序可能需要几分钟时间，这对流式数据管道的可用性有负面影响。"

#: _posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc
#, fuzzy
msgid ""
"*Restriction to intra-cluster streaming:* By default, Kafka Streams can only stream data between topics of the same Apache Kafka cluster. When facing use cases that stream data between different Kafka clusters, for instance, between a production and test cluster,\n"
"we had to employ additional tooling, e.g., MirrorMaker 2."
msgstr "*限制集群内流：* 默认情况下，Kafka Streams 只能在同一个 Apache Kafka 集群的主题之间进行数据流。在面对不同 Kafka 集群之间（例如生产集群和测试集群之间）的数据流用例时，我们不得不使用额外的工具，例如 MirrorMaker 2。"

#: _posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc
#, fuzzy
msgid "*No support for Java 17:* The current Play! version 2.8 does not support running on top of Java 17."
msgstr "*不支持 Java 17：* 当前的 Play！2.8 版本不支持在 Java 17 上运行。"

#. type: Plain text
#: _posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc
#, fuzzy
msgid "Especially the first two issues, inefficient resource usage and long startup times, hurt a lot when operating in the cloud at scale."
msgstr "特别是前两个问题，即资源使用效率低下和启动时间长，在云计算中大规模运行时伤害很大。"

#: _posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc
#, fuzzy
msgid ""
"In 2022, we rewrote DataCater to implement lots of learnings that we made when working with early users.\n"
"Using this unique opportunity, we also switched from Play! and Kafka Streams to Quarkus,\n"
"thus using Quarkus for implementing both our control plane and the data pipelines."
msgstr "2022 年，我们重写了 DataCater，实施了与早期用户合作时获得的大量经验。利用这次难得的机会，我们还从 Play! 和 Kafka Streams 转向了 Quarkus，从而使用 Quarkus 实现了控制平面和数据管道。"

#: _posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc
#, fuzzy
msgid ""
"With Quarkus, we are able to bring the best of cloud native and messaging applications together. Streaming messages, especially in the context of Apache Kafka, is still a Java-dominated environment, while the traditional Java stack lacks the characteristics of cloud-native applications, like small footprints, fast startups, and self-containment.\n"
"*-Hakan Lofcali, CTO, DataCater*"
msgstr "有了Quarkus，我们就能将云原生应用和消息应用的优点结合在一起。流消息，尤其是在 Apache Kafka 的背景下，仍然是一个以 Java 为主导的环境，而传统的 Java 栈缺乏云原生应用的特性，如占用空间小、启动速度快和自包含性。 *-DataCater 首席技术官 Hakan Lofcali*"

#. type: Plain text
#: _posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc
#, fuzzy
msgid "In the following, we list the main reasons why we chose Quarkus over other Java frameworks:"
msgstr "在下文中，我们列出了我们选择Quarkus而不是其他Java框架的主要原因。"

#: _posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc
#, fuzzy
msgid "*Versatility:* We cannot only implement the API of our control plane with the Quarkus RESTeasy extension but can also employ Quarkus as the base for implementing streaming data pipelines using its https://smallrye.io/smallrye-reactive-messaging[SmallRye Reactive Messaging^] extension."
msgstr "*多功能性：* 我们不仅可以使用 Quarkus RESTeasy 扩展实现控制平面的 API，还可以使用 Quarkus 的 link:https://smallrye.io/smallrye-reactive-messaging[SmallRye Reactive Messaging] 扩展作为实现流式数据管道的基础。"

#: _posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc
#, fuzzy
msgid ""
"*Dev services:* Quarkus' dev services help us to spin up dependencies, like PostgreSQL or Apache Kafka, very fast and provide an outstanding developer experience. Our developers can focus on their job instead of\n"
"messing with the configuration of tooling."
msgstr "*开发服务：* Quarkus 的开发服务帮助我们快速启动 PostgreSQL 或 Apache Kafka 等依赖项，并为开发人员提供出色的体验。我们的开发人员可以专注于自己的工作，而不是忙于配置工具。"

#: _posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc
#, fuzzy
msgid "*Support for native executables:* Quarkus allows us to easily build native executables, which are very beneficial when operating in a cloud context. They require much fewer resources and achieve faster startup times."
msgstr "*支持本地可执行文件：* Quarkus 允许我们轻松构建本地可执行文件，这对在云环境中运行非常有利。它们需要的资源更少，启动时间更短。"

#: _posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc
#, fuzzy
msgid "*Minimal footprint:* Quarkus’ build time optimizations allow for smaller footprints of JVM- and GraalVM-based containers."
msgstr "*占用空间最小：* Quarkus 对构建时间进行了优化，使基于 JVM 和 GraalVM 的容器占用空间更小。"

#. type: Title ==
#: _posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc
#, no-wrap
msgid "References"
msgstr "参考文献"

#. type: Plain text
#: _posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc
#, fuzzy
msgid "https://github.com/DataCater/datacater[DataCater GitHub repository^]"
msgstr "link:https://github.com/DataCater/datacater[DataCater GitHub 存储库]"

#. type: Plain text
#: _posts/2023-02-09-datacater-uses-quarkus-to-make-data-streaming-accessible.adoc
#, fuzzy
msgid "https://docs.datacater.io[DataCater documentation^]"
msgstr "link:https://docs.datacater.io[DataCater 文档]"
