# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy, no-wrap
msgid "How Quarkus has been used to deploy applications on OpenShift"
msgstr "Quarkus是如何被用于在OpenShift上部署应用程序的"

#. type: YAML Front Matter: synopsis
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy, no-wrap
msgid "Find out how Quarkus has been used to deploy application components in Kubernetes, and provision satellite systems such as Vault, adfs and others, with a low memory and CPU footprint, while providing a high level abstraction."
msgstr "了解Quarkus如何用于在Kubernetes中部署应用组件，并提供Vault、adfs等卫星系统，内存和CPU占用率低，同时提供高水平的抽象。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "This post gives some feedback on a particular challenge I have been facing in a professional context with respect to deploying applications on Kubernetes, and how we were able to provide a solution that met our goals using Quarkus."
msgstr "这篇文章反馈了我在专业领域面临的一个特殊挑战，即在Kubernetes上部署应用程序，以及我们如何使用Quarkus提供一个满足我们目标的解决方案。"

#. type: Title ==
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy, no-wrap
msgid "The challenge"
msgstr "挑战"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "For a few years now I have been involved in a Kubernetes project, aiming at:"
msgstr "几年来，我一直在参与一个Kubernetes项目，目的是为了。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Onboarding more easily and more quickly new technologies (either applicative frameworks, or middleware products)."
msgstr "更容易和更快地加入新技术（无论是应用性框架，还是中间件产品）。"

#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid ""
"Lowering the administrative burden of deploying distributed inter-related services by creating a logical deployment abstraction on top of these\n"
"services; something like the https://helm.sh/docs/howto/charts_tips_and_tricks/#complex-charts-with-many-dependencies[umbrella chart] pattern."
msgstr "通过在这些服务之上创建一个逻辑部署抽象概念，减轻部署分布式相互关联服务的管理负担；类似于 link:https://helm.sh/docs/howto/charts_tips_and_tricks/#complex-charts-with-many-dependencies[伞形图] 模式。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Limiting the work needed by an application team to deploy a component, and hyper-standardize Kubernetes deployment objects."
msgstr "限制应用团队部署一个组件所需的工作，并对Kubernetes部署对象进行超标准化。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Transitioning to an hybrid cloud deployment model."
msgstr "过渡到混合云部署模式。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "In addition to those goals, there was a constraint related to the fact that applications may be deployed by tenant (i.e. they are not multi-tenant, for different reasons, some being regulatory related). Depending on the application, there may be a few dozens tenants, which would translate into deploying the application once per tenant (so if we had 10 tenants for an application, there would be 10 processes running in production). However, if processes needed to be physically separated, often some portions of configuration could be shared between some tenants, and/or IT environments, and/or geographical zones according to different business rules. Highly simplified and factorized bits of configuration would be a true source of simplicity for the development team, and a true source of complexity for the deployment process."
msgstr "除了这些目标之外，还有一个限制因素，即应用程序可能是按租户部署的（也就是说，由于不同的原因，它们不是多租户，有些是与监管有关的）。根据应用程序，可能有几十个租户，这将转化为每个租户部署一次应用程序（所以如果我们有10个租户的应用程序，将有10个进程在生产中运行）。然而，如果流程需要物理分离，通常配置的某些部分可以根据不同的业务规则在一些租户、和/或IT环境、和/或地理区域之间共享。高度简化和因素化的配置位将是开发团队的真正简单来源，也是部署过程的真正复杂来源。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Some projections indicated that at project end, the different clusters in production would contain 10'000 pods."
msgstr "一些预测表明，在项目结束时，生产中的不同集群将包含10'000个豆荚。"

#. type: Title ==
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy, no-wrap
msgid "First attempts"
msgstr "第一次尝试"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Given that complexity we created our own tool for configuration and deployment. The initial version was based on Ansible and ran into Tower workflows. For different reasons we decided to rewrite it in Java a year ago, mainly to:"
msgstr "鉴于这种复杂性，我们创建了自己的配置和部署工具。最初的版本是基于Ansible的，并且遇到了Tower工作流程。出于不同的原因，我们在一年前决定用Java重写它，主要是为了。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Get better performances."
msgstr "获得更好的表演。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Use a high level language that could cope with algorithm complexity."
msgstr "使用一种能够应对算法复杂性的高级语言。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Get better support for unit and integration testing."
msgstr "获得对单元和集成测试的更好支持。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Improve productivity with quality development tools (e.g. IDE)."
msgstr "用高质量的开发工具（如IDE）提高生产力。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "One thing we were concerned about though, was memory consumption, CPU usage and startup times since for a given application, each tenant is deployed in isolation in its own deployment process. For that reason we decided to not depend on any application framework when we started the Java rewrite, because if they do offer productivity and standardization, the abstraction they provide comes with a resource cost. So the program was written in plain Java, and it was small enough in size and use cases that we were able get away with it, provided we relied on a few patterns (e.g. constructor based injection by hand) for clean code. This program is called _ocpdeploy_."
msgstr "但我们担心的是内存消耗、CPU使用率和启动时间，因为对于一个特定的应用程序，每个租户都是在自己的部署过程中孤立地部署。出于这个原因，我们决定在开始重写Java时不依赖任何应用框架，因为如果它们确实提供了生产力和标准化，那么它们所提供的抽象性是有资源成本的。所以，这个程序是用普通的Java写的，它的规模和用例都很小，只要我们依靠一些模式（如基于构造函数的手工注入）来获得干净的代码，我们就能够摆脱它。这个程序被称为 _ocpdeploy_ 。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "As we were moving away from Tower, we decided to leverage our Kubernetes infrastructure by running _ocpdeploy_ as tasks in Tekton pipelines. This gave us repeatability, a way to deploy different applications, or even different tenants for the same application with different _ocpdeploy_ versions. The use of java (any other high level language would have been a good fit) provided us with a high level of productivity, and maintainable code, while being able to implement complex algorithms for configuration processing, and raised the level of quality of _ocpdeploy_ releases thanks to our extensive regression testing suite."
msgstr "由于我们正在从Tower迁移，我们决定利用我们的Kubernetes基础设施，将 _ocpdeploy_ 作为Tekton管道的任务运行。这为我们提供了可重复性，使我们能够部署不同的应用程序，甚至为同一个应用程序部署不同的租户，并使用不同的 _ocpdeploy_ 版本。使用java（任何其他高级语言都很适合）为我们提供了高水平的生产力和可维护的代码，同时能够实现复杂的配置处理算法，并且由于我们广泛的回归测试套件，提高了 _ocpdeploy_ 发布的质量水平。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "All was well... until we started deploying multiple tenants at the same time, and/or different applications. We had sized the _ocpdeploy_ container to `200 millicores` and `280 Mb` of RAM. For some applications there were around 30 tenants, that would be all deployed in parallel. This meant 30 pods, which accounted for `6 cores` and `8 Gb` of RAM. This seems livable, but deployments tend to be done after business hours, between 7 and 8pm for many. And we started being afraid of the impact _ocpdeploy_ itself would have if we were running multiple deployments in parallel, on top of our SpringBoot or WildFly applications, which take their toll on the cluster at startup."
msgstr "一切都很好......直到我们开始同时部署多个租户，和/或不同的应用程序。我们将 _ocpdeploy_ 容器的大小设定为 `200 millicores` 和 `280 Mb` 的内存。对于一些应用程序，大约有30个租户，它们将被平行部署。这意味着30个pods，占了 `6 cores` 和 `8 Gb` 的内存。这似乎是可行的，但部署往往是在营业时间之后进行的，对许多人来说是在晚上7点到8点之间。我们开始担心，如果我们在SpringBoot或WildFly应用程序上并行运行多个部署， _ocpdeploy_ 本身会产生影响，因为这些应用程序在启动时对集群造成损失。"

#. type: Title ==
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy, no-wrap
msgid "Enter the Quarkus Universe"
msgstr "进入Quarkus宇宙"

#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid ""
"So less than a year ago we decided to launch a Quarkus POC on _ocpdeploy_, the goal being to deploy it as a GraalVM executable.\n"
"The main challenges we ran into were related to the lack of support for GraalVM in some of the libraries we were using: FreeMarker, https://github.com/hierynomus/smbj[SMBJ] (a java client library that implements the Server Message Block SMB2 and SMB3 protocols), the Fabric8 OpenShift client (when instantiating OpenShift specific CRDs), and a home made java agent that ships logs to a proprietary centralized logging system."
msgstr "不到一年前，我们决定在 _ocpdeploy_ 上启动 Quarkus POC，目标是将其部署为 GraalVM 可执行文件。我们遇到的主要挑战与我们使用的一些库不支持 GraalVM 有关：FreeMarker、 link:https://github.com/hierynomus/smbj[SMBJ] （一个实现服务器消息块 SMB2 和 SMB3 协议的 Java 客户端库）、Fabric8 OpenShift 客户端（实例化 OpenShift 特定 CRD 时），以及一个将日志发送到专有集中式日志系统的自制 Java 代理。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Fortunately, other bits were already there in Quarkus, such as support for command mode applications, a rest client, the Vault extension, and support for the Fabric8 Kubernetes Client, which provided a nice base for a new OpenShift Client extension that was added to the core. The Kubernetes Client extension alone was a huge push for the project because when we started we did not have Argo available, so we had to implement _apply_ and _prune_ ourselves."
msgstr "幸运的是，Quarkus中已经有了其他的部分，比如对命令模式应用程序的支持、休息客户端、Vault扩展，以及对Fabric8 Kubernetes客户端的支持，这为新的OpenShift客户端扩展提供了一个很好的基础，并被添加到核心中。仅仅是Kubernetes客户端扩展就对项目产生了巨大的推动作用，因为当我们开始的时候，还没有Argo可用，所以我们不得不自己实现 _应用_ 和 _修剪_ 。"

#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid ""
"For FreeMarker we pushed a new extension to the Quarkiverse, with code largely inspired from work by https://github.com/ppalaga[ppalaga] and https://github.com/carlosthe19916[carlosthe19916].\n"
"For SMBJ we created an extension in our internal Quarkiverse. And for our logging client, I was able to draw some inspiration from the `quarkus-logging-gelf` extension, and created an additional internal extension."
msgstr "对于 FreeMarker，我们向 Quarkiverse 推送了一个新的扩展，代码的灵感主要来自 link:https://github.com/ppalaga[ppalaga] 和 link:https://github.com/carlosthe19916[carlosthe19916] 。对于 SMBJ，我们在内部 Quarkiverse 中创建了一个扩展。对于我们的日志客户端，我从 `quarkus-logging-gelf` 扩展中汲取了一些灵感，并创建了一个额外的内部扩展。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Getting a library to run in native was facilitated by the very good documentation that comes from the Quarkus project and support in the framework (e.g. _processors_ and _recorders_): https://quarkus.io/guides/writing-native-applications-tips#native-in-extension[Supporting native in a Quarkus extension]."
msgstr "Quarkus项目提供的非常好的文档和框架的支持（如 _处理器_ 和 _记录器_ ）促进了一个库在本地运行。 link:https://quarkus.io/guides/writing-native-applications-tips#native-in-extension[在Quarkus扩展中支持本地] 。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "When things got a little hairy (SMBJ was trickier than we thought), we got some help from the https://medium.com/GraalVM/introducingthe-tracing-agent-simplifying-GraalVM-native-image-configuration-c3b56c486271[GraalVM tracing agent]."
msgstr "当事情变得有点棘手时（SMBJ比我们想象的要棘手），我们得到了 link:https://medium.com/GraalVM/introducingthe-tracing-agent-simplifying-GraalVM-native-image-configuration-c3b56c486271[GraalVM追踪代理] 的一些帮助。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Here is the list of extensions that we happened to use: `cdi, config-yaml, freemarker, hibernate-validator, kubernetes-client, openshift-client, rest-client, restclient-jackson, vault` (plus internal extensions for SMBJ and our internal centralized logging system)."
msgstr "以下是我们碰巧使用的扩展列表： `cdi, config-yaml, freemarker, hibernate-validator, kubernetes-client, openshift-client, rest-client, restclient-jackson, vault` （加上用于SMBJ和我们内部集中日志系统的内部扩展）。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Eventually we got all the required libraries to work in native mode, and we could switch efforts toward migrating the application to look like a _real_ Quarkus application:"
msgstr "最终，我们得到了所有需要的库，使其在本地模式下工作，我们可以将工作转向迁移应用程序，使其看起来像一个 _真正的_ Quarkus应用程序。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Using injection, with qualifiers and producers when necessary."
msgstr "使用注入法，必要时使用限定词和生产者。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Rewriting tests to use the different mocking approaches, including the new (at the time) https://quarkus.io/blog/quarkus-test-profiles/[QuarkusTest profiles]."
msgstr "重写测试以使用不同的嘲弄方法，包括新的（当时） link:https://quarkus.io/blog/quarkus-test-profiles/[QuarkusTest配置文件] 。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "This allowed us to provide extensive testing through Kubernetes yaml generation, _snapshotting_ and _replay_ in a variety of situations transforming all the configuration to be _MP config_ compliant."
msgstr "这使我们能够通过Kubernetes yaml的生成、 _快照_ 和 _重放_ ，在各种情况下提供广泛的测试，将所有配置转化为符合 _MP配置_ 。"

#. type: Title ==
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy, no-wrap
msgid "Benchmarks"
msgstr "基准"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Then, we ran some benchmarks to assess resource consumption compared to the old version. We were not really worried about startup time. We knew it would be very good. And as long as it stayed in the few seconds window (which we were experiencing on the plain Java version), we were OK. But memory and CPU consumption was another story. The whole exercise was motivated by hopes for some real gains."
msgstr "然后，我们运行了一些基准测试，以评估与旧版本相比的资源消耗。我们并不真正担心启动时间。我们知道它将是非常好的。只要它保持在几秒钟的时间内（我们在普通Java版本上遇到过），我们就没有问题。但内存和CPU的消耗是另一回事。整个工作的动机是希望得到一些实际的收益。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "With the plain Java version we were able to squeeze the container down to `180 Mb` (below that it would either go _OOM_, or the _GC_ would kill the performances). And for the native version, we were able to go as low as `50 Mb`."
msgstr "在普通的Java版本中，我们能够将容器压缩到 `180 Mb` （低于这个数值，要么就会出现 _OOM_ ，要么就会被 _GC_ 杀死）。而对于本地版本，我们能够将其降低到 `50 Mb` 。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Then we executed several runs with different configurations (`plain Java 180 Mb`, `Quarkus native 180 Mb`, `Quarkus jvm 180 Mb`, `Quarkus native 50 Mb` , starting from `50 millicores request=limit`, moving up to `100`, `150`, …"
msgstr "然后，我们用不同的配置（ `plain Java 180 Mb` , `Quarkus native 180 Mb` , `Quarkus jvm 180 Mb` , `Quarkus native 50 Mb` , 从 `50 millicores request=limit` 开始，到 `100` , `150` , ...）执行了几次运行。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "At `50 millicores`, `Quarkus native 180 Mb` would run in 20 seconds, `Quarkus native 50 Mb` in 60 seconds, and the others 2 in 300 seconds. This meant that if we allowed `180 Mb` to _ocpdeploy_, we could go from 300 to 20 seconds. A _x15_ times improvement."
msgstr "在 `50 millicores` ， `Quarkus native 180 Mb` 将在20秒内运行， `Quarkus native 50 Mb` 在60秒内运行，而其他2个在300秒内运行。这意味着，如果我们允许 `180 Mb` _ocpdeploy_ ，我们可以从300秒到20秒。一个 _x15_ 倍的改进。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "At `250 millicores` we had `Quarkus native 180 Mb` under 5 seconds, `Quarkus native 50 Mb` at 10 seconds, and the 2 others around 40 seconds."
msgstr "在 `250 millicores` ，我们有5秒以下的 `Quarkus native 180 Mb` ，10秒的 `Quarkus native 50 Mb` ，其他2个约40秒。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "We searched also how much CPU was needed to get a deployment under 60 seconds."
msgstr "我们还搜索了需要多少CPU才能在60秒内完成部署。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "For `Quarkus native 50 Mb` it was `50 millicores`, for `plain Java 180 Mb` and `Quarkus jvm 180 Mb` it was `240 millicores` (`Quarkus native 180 Mb` was out of scope since its \"worst\" result was 20 seconds as discussed in the first test). This meant that if time was our constraint, we could go from `240 millicores` to `50 millicores`, while going from `180 Mb` to `50 Mb` by moving to Quarkus native."
msgstr "对于 `Quarkus native 50 Mb` ，它是 `50 millicores` ，对于 `plain Java 180 Mb` 和 `Quarkus jvm 180 Mb` ，它是 `240 millicores` （ `Quarkus native 180 Mb` 不在范围内，因为它的 \"最差 \"结果是20秒，这在第一次测试中已经讨论过了）。这意味着，如果时间是我们的约束条件，我们可以从 `240 millicores` 到 `50 millicores` ，而从 `180 Mb` 到 `50 Mb` ，则要移到Quarkus native。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "The comparison between `Quarkus native 180 Mb` and `50 Mb` was interesting as well, because it showed that by pushing up and down the memory and CPU knobs we could work on the use case execution duration. It was then up to us to decide where was the sweet spot between execution time and resource consumption."
msgstr " `Quarkus native 180 Mb` 和 `50 Mb` 之间的比较也很有趣，因为它表明通过推高和推低内存和CPU旋钮，我们可以解决用例执行时间的问题。然后由我们来决定执行时间和资源消耗之间的甜蜜点在哪里。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "The last interesting observation we made was that the results for `plain Java 180 Mb` were nearly identical to `Quarkus jvm 180 Mb`. This meant that the cost of the applicative framework, which provides maintainability and productivity, was 0 in our case. It's like having your cake and eating it as well. In our case we did not mind slow executions, as long as we could save a lot on memory and CPU, which we were able to achieve."
msgstr "我们最后一个有趣的观察是， `plain Java 180 Mb` 的结果几乎与 `Quarkus jvm 180 Mb` 相同。这意味着，在我们的案例中，提供可维护性和生产力的应用性框架的成本为0。这就像在吃蛋糕的同时也在吃它。在我们的案例中，我们并不介意缓慢的执行，只要我们能够节省大量的内存和CPU，而这是我们能够做到的。"

#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Program execution in seconds for different limits (in millicores)"
msgstr "不同限值下的程序执行秒数（单位：毫摩尔）"

#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "plain Java (180Mb)"
msgstr "纯 Java (180Mb)"

#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Quarkus Native (180Mb)"
msgstr "原生 Quarkus (180Mb)"

#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Quarkus JVM (180Mb)"
msgstr "Quarkus JVM（180Mb）"

#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Quarkus Native (50Mb)"
msgstr "原生 Quarkus (50Mb)"

#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "50m"
msgstr "50m"

#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "283"
msgstr "283"

#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "18"
msgstr "18"

#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "306"
msgstr "306"

#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "61"
msgstr "61"

#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "100m"
msgstr "100m"

#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "95"
msgstr "95"

#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "9"
msgstr "9"

#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "120"
msgstr "120"

#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "32"
msgstr "32"

#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "250m"
msgstr "250m"

#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "38"
msgstr "38"

#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "4"
msgstr "4"

#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "43"
msgstr "43"

#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "11"
msgstr "11"

#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "500m"
msgstr "500m"

#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "17"
msgstr "17"

#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "3"
msgstr "3"

#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "21"
msgstr "21"

#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "8"
msgstr "8"

#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "1000m"
msgstr "1000m"

#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "5"
msgstr "5"

#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "1500m"
msgstr "1500m"

#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "2000m"
msgstr "2000m"

#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "7"
msgstr "7"

#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "No Limit"
msgstr "无限制"

#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "6"
msgstr "6"

#. type: Title ==
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy, no-wrap
msgid "A few issues"
msgstr "几个问题"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Beside the challenges of running ad hoc libraries in GraalVM, there were a few unexpected behaviors or minor pain points we ran into, such as:"
msgstr "除了在GraalVM中运行特设库的挑战之外，我们还遇到了一些意想不到的行为或小的痛点，例如。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Missing warning on unknown application configuration property https://github.com/quarkusio/quarkus/issues/14889[#14889]"
msgstr "缺少对未知应用程序配置属性的警告 link:https://github.com/quarkusio/quarkus/issues/14889[#14889]"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Default on config pojo should behave the same if set in `src/main/resources/application.yaml` https://github.com/quarkusio/quarkus/issues/13423[#13423]"
msgstr "如果在 `src/main/resources/application.yaml` link:https://github.com/quarkusio/quarkus/issues/13423[#13423] 中设置，配置pojo的默认行为应该是一样的。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Warn or fail if an application.yaml is provided without the `quarkus-config-yaml` dependency https://github.com/quarkusio/quarkus/issues/13227[#13227]"
msgstr "如果提供的application.yaml中没有 `quarkus-config-yaml` 依赖关系，则警告或失败 link:https://github.com/quarkusio/quarkus/issues/13227[#13227]"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Upgrade to _MP Rest Client_ 2.0 https://github.com/quarkusio/quarkus/issues/10520[#10520], which we have been waiting for, to get \"follow redirects\""
msgstr "升级到我们一直在等待的 _MP Rest Client_ 2.0 link:https://github.com/quarkusio/quarkus/issues/10520[#10520] ，以获得 \"跟随重定向\"。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "I wished there was a way to define mock alternatives per test through annotation, but this was answered in https://groups.google.com/g/quarkus-dev/c/IBojyD1BplY/m/NWFmsX3NBwAJ[this thread]"
msgstr "我希望有一种方法可以通过注解来定义每个测试的模拟替代方案，但这个问题已经在 link:https://groups.google.com/g/quarkus-dev/c/IBojyD1BplY/m/NWFmsX3NBwAJ[这个主题] 中得到了回答。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Inability to provide certificates at run time instead of build time (GraalVM limitation) https://github.com/oracle/graal/pull/3091[#3091]"
msgstr "无法在运行时而不是构建时提供证书（GraalVM限制） link:https://github.com/oracle/graal/pull/3091[#3091]"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Visibility of `src/main/resources/application.properties` in test as discussed in https://groups.google.com/g/Quarkus-dev/c/xCU6Yvw__ks/m/cogHVvNsAwAJ[this thread]; A lot of work has been done since then such as \"Use AbstractLocationConfigSourceLoader to load application.properties and application.yaml\" https://github.com/quarkusio/quarkus/pull/15282[#15282], so I need to recheck"
msgstr " `src/main/resources/application.properties` 在测试中的可见性，正如在 link:https://groups.google.com/g/Quarkus-dev/c/xCU6Yvw__ks/m/cogHVvNsAwAJ[这个主题] 中所讨论的那样；从那时起已经做了很多工作，例如 \"使用AbstractLocationConfigSourceLoader加载application.properties和application.yaml\" link:https://github.com/quarkusio/quarkus/pull/15282[#15282] ，因此我需要重新检查"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Optional config property overriden with empty value as discussed in https://groups.google.com/g/Quarkus-dev/c/_g-6qfUFA3A/m/2s9XjTVxAwAJ[this thread]"
msgstr "可选的配置属性以空值覆盖， link:https://groups.google.com/g/Quarkus-dev/c/_g-6qfUFA3A/m/2s9XjTVxAwAJ[如本主题] 中所讨论的那样"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Quarkus YAML configuration keys are implicitly escaped https://github.com/quarkusio/quarkus/issues/11744[#11744]"
msgstr "Quarkus YAML 配置键被隐式转义 link:https://github.com/quarkusio/quarkus/issues/11744[#11744]"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "https://groups.google.com/g/Quarkus-dev/c/KXzJ2UPGRvI/m/3AEsLvZNBAAJ[application.properties included in archive]"
msgstr "link:https://groups.google.com/g/Quarkus-dev/c/KXzJ2UPGRvI/m/3AEsLvZNBAAJ[档案中包含的application.properties]"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "This seems quite a bit, but actually none of those bullet points were major issues, or something we could not work around. Several issues were related to configuration, in part because the program was run as a Tekton task, and there is limited flexibility on how you define optional parameters in Tekton. I have listed only those points that we had to work around. Many issues or questions were actually resolved as we were making progress through answers in the google group, or actual fixes."
msgstr "这看起来很多，但实际上这些要点都不是主要问题，或我们无法解决的问题。有几个问题与配置有关，部分原因是程序是作为Tekton任务运行的，而在Tekton中如何定义可选参数，灵活性有限。我只列出了那些我们不得不解决的问题。许多问题或疑问实际上是在我们通过谷歌小组的回答或实际修复取得进展时得到解决的。"

#. type: Title ==
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy, no-wrap
msgid "CI for native builds"
msgstr "用于本地构建的CI"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Another challenge was related to native build time, memory and CPU usage during those builds. The approach we took was to only generate a native executable on master, and run tests in jvm mode on the feature branches. We would still have an option to test against native in a particular feature branch if we needed to. But unless we were integrating a new library, getting the jvm tests to pass gave us sufficient confidence that we would have an identical behavior in native."
msgstr "另一个挑战是与本地构建时间有关的，在这些构建过程中内存和CPU的使用。我们采取的方法是只在主干线上生成本地可执行文件，而在特性分支上以jvm模式运行测试。如果需要的话，我们仍然可以选择在特定的特性分支上进行本地测试。但是，除非我们要集成一个新的库，否则让jvm测试通过就能让我们有足够的信心在本地有相同的行为。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "The other trick we applied was to cancel the current build on _master_ if a new one got triggered; that way we would not have multiple native builds running at the same time. In theory it could be frustrating to get a build killed because another commit was done. In practice this was not an issue because the rate of PRs getting merged on _master_ stayed low."
msgstr "我们采用的另一个技巧是，如果一个新的构建被触发，就取消当前在 _主控_ 上的构建；这样，我们就不会有多个本地构建同时运行。理论上说，如果因为另一个提交完成而导致构建被取消，这可能是令人沮丧的。在实践中，这并不是一个问题，因为PR被合并到 _主站_ 的比率一直很低。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "But there are definitely some questions around sizing a build infrastructure if we had wanted to increase the number of Quarkus applications developed internally."
msgstr "但是，如果我们想增加内部开发的Quarkus应用程序的数量，围绕构建基础设施的规模肯定会有一些问题。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "The only drawback compared to the original solution was that our regression test suite was slower to run, essentially because our tests generated resources in the context of a specific configuration. And since we were using _MP config_, we needed to boot a new Quarkus context every time we wanted to test a different configuration. Fortunately booting a new context is extremely fast in Quarkus, but still a lot slower than with our original plain Java solution."
msgstr "与原来的解决方案相比，唯一的缺点是我们的回归测试套件运行速度较慢，主要是因为我们的测试是在特定配置的背景下生成资源。由于我们使用的是 _MP配置_ ，所以每次我们想测试不同的配置时，都需要启动一个新的Quarkus上下文。幸运的是，在Quarkus中启动一个新的上下文是非常快的，但仍然比我们原来的普通Java解决方案慢得多。"

#. type: Title ==
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy, no-wrap
msgid "It is all about the community"
msgstr "这都是关于社区的"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Beside work on the Vault, FreeMarker and OpenShift Client extensions, we started contributing a few PRs in and outside Quarkus, hoping to speed up the process of getting improvements, such as:"
msgstr "除了在Vault、FreeMarker和OpenShift客户端扩展方面的工作外，我们开始在Quarkus内外贡献一些PR，希望能加快获得改进的进程，比如说。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Add `appendResourceVersionInObject` for CRD objects https://github.com/fabric8io/kubernetes-client/pull/2365[#2365] (merged)"
msgstr "为CRD对象添加 `appendResourceVersionInObject` link:https://github.com/fabric8io/kubernetes-client/pull/2365[#2365] （已合并）。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Add cert-manager extension support https://github.com/fabric8io/kubernetes-client/pull/2930[#2930] (merged)"
msgstr "增加cert-manager扩展支持 link:https://github.com/fabric8io/kubernetes-client/pull/2930[#2930] （已合并）。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Build distroless image using cekit in ci https://github.com/quarkusio/quarkus-images/pull/118[#118] (merged)"
msgstr "在ci中使用cekit构建无发行版图像 link:https://github.com/quarkusio/quarkus-images/pull/118[#118] (已合并)"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Allow root certificates to be configured at run time of native image https://github.com/oracle/graal/pull/3091[#3091] (_teshull_ assigned by Christian Wimmer at Oracle to work on this for the GraalVM 21.3 release)"
msgstr "允许在本地镜像运行时配置根证书 link:https://github.com/oracle/graal/pull/3091[#3091] _（_ Oracle的Christian Wimmer指派 _Teshull_ 为GraalVM 21.3版本进行这项工作）。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "It is worth noting that the Quarkus community has been a huge factor for success, by:"
msgstr "值得注意的是，Quarkus社区一直是成功的一个巨大因素，由。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Answering questions on the google group, zulip or other means such as stackoverflow."
msgstr "在谷歌小组、zulip或其他方式（如stackoverflow）上回答问题。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Investigating issues in a timely fashion, and depending on the situation either providing fixes, guidance on applying the right approach, or workarounds."
msgstr "及时调查问题，并根据情况提供修复方法，指导应用正确的方法，或解决方法。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Being open to improvements (e.g. on configuration)."
msgstr "对改进持开放态度（例如在配置方面）。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Reviewing PRs quickly, and facilitating contributions."
msgstr "迅速审查PR，并促进贡献。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Releasing with high frequency."
msgstr "以高频率释放。"

#. type: Title ==
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy, no-wrap
msgid "Takeovers"
msgstr "接管"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "It took us only a few months to do the migration, and we started deploying our first OpenShift application with our Quarkus powered _ocpdeploy_ end of last year. Since then, it was used to run hundreds of deployments. We were able to follow the pace of new releases with limited effort. We incurred very few bugs, usually fixed in time for the next release. The applicative framework provided by Quarkus allowed us to better structure our code, making it more maintainable, and easy to tests with mock features and test profiles. It is interesting to note as well that _ocpdeploy_ development was done by team members that were not Quarkus developers, or even strong Java specialists. This is a sign that the framework is light enough that once the overall structure (e.g. components, tests, configuration, ci) is in place, we can forget about it."
msgstr "我们只花了几个月就完成了迁移，去年年底我们开始用Quarkus支持的 _ocpdeploy_ 部署我们的第一个OpenShift应用。从那时起，它被用来运行数百次的部署。我们能够以有限的努力跟随新版本的步伐。我们产生了很少的错误，通常在下一个版本中及时修复。Quarkus提供的应用性框架使我们能够更好地组织我们的代码，使其更易于维护，并易于使用模拟功能和测试配置文件进行测试。值得注意的是， _ocpdeploy_ 的开发是由那些不是Quarkus开发者，甚至不是强大的Java专家的团队成员完成的。这表明该框架足够轻巧，一旦整体结构（如组件、测试、配置、CI）到位，我们就可以忘记它。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Our program was not business critical in the sense that if it did not work, business would not stop. But it is the only mean to deploy all of our OpenShift microservices. And given the pace of internal developments, it is considered a critical piece in the value chain. _ocpdeploy_ is not evidently ultra sophisticated, and we only scratched the surface of what could be done with Quarkus, but yet it worked for us, showing that it can tackle many different use cases."
msgstr "我们的项目不是业务关键，因为如果它不工作，业务就不会停止。但它是部署我们所有OpenShift微服务的唯一手段。 _ocpdeploy_ 显然不是很复杂，我们只是触及了Quarkus可以做的表面，但它却为我们工作，表明它可以处理许多不同的用例。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "In conclusion, I think the strong selling points for Quarkus are:"
msgstr "总之，我认为Quarkus的强大卖点是。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "A vivid community, which listens actively for feedback, and welcome contributions"
msgstr "一个生动的社区，它积极听取反馈意见，并欢迎贡献。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "A project developed with high velocity"
msgstr "一个以高速度发展的项目"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "The right positioning (cloud native, developer joy, …) with versatility"
msgstr "正确的定位（云原生、开发者的喜悦......）与多功能性"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Willingness to pragmatically bend, a little, specifications when they would work against the Quarkus values"
msgstr "愿意务实地弯曲，一点点，当他们会对夸父的价值观起作用时的规格。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "An architecture with a compact core and extensions, allowing for rapid expansion, which will nurture innovation"
msgstr "一个具有紧凑的核心和扩展的架构，允许快速扩展，这将培育创新。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Support for native by default, but also some improvements in jvm mode also"
msgstr "默认支持本地，但在jvm模式下也有一些改进。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Fast growing eco-system through the core extensions, the universe extensions (e.g. camel) and the Quarkiverse"
msgstr "通过核心扩展、宇宙扩展（如骆驼）和夸克宇宙，快速增长的生态体系。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "Dev mode (local and remote)"
msgstr "开发模式（本地和远程）"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "A framework for developing extensions that facilitate implementing patterns such as the build time initialization"
msgstr "一个开发扩展的框架，便于实现构建时间初始化等模式。"

#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid ""
"The main challenge I see going forward, similarly to app stores 10 or 15 years ago, is to make sure that the extension eco-system grows in quantity without sacrifice for quality. Or at least provide a way to rate extensions, so that people building business critical applications get assurances that their investment in the technology is sound. In other words going deep in addition to going wide.\n"
"The other challenge I see is progressively filling the gaps of enterprise readiness; for instance finishing up solutions sometimes partially developed today, and making sure there is a clear and mature solution for the most common use cases."
msgstr "与 10 年或 15 年前的应用商店类似，我认为未来的主要挑战是确保扩展生态系统在数量增长的同时不牺牲质量。或者至少提供一种对扩展进行评级的方法，从而使构建关键业务应用程序的人员能够确保他们在该技术上的投资是合理的。换句话说，除了广度，还要深度。我看到的另一个挑战是逐步填补企业准备工作的空白；例如，完成目前有时部分开发的解决方案，并确保为最常见的使用案例提供清晰、成熟的解决方案。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "That is how Quarkus will win over enterprises. And I can see this being in motion."
msgstr "这就是夸克斯赢得企业的方式。我可以预见到这一点。"

#. type: Plain text
#: _posts/2021-06-08-quarkus-deploys-apps-on-openshift.adoc
#, fuzzy
msgid "I am very hopeful for the project. Can't wait to expand the use cases."
msgstr "我对这个项目充满希望。我迫不及待地想扩展使用案例。"
