# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy, no-wrap
msgid "Quarkus and Web UI Development"
msgstr "Quarkus和Web UI开发"

#. type: Plain text
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "In this blog post we will take advantage of the respective development modes of both Quarkus and Angular CLI and see how we can develop a zero turnaround web application backed by a RESTful API on Quarkus. While I am using Angular, *the concepts are the same for other modern web application frameworks.*"
msgstr "在这篇博文中，我们将利用Quarkus和Angular CLI各自的开发模式，看看我们如何在Quarkus上开发一个由RESTful API支持的零周转的Web应用。虽然我使用的是Angular，但 *这些概念对于其他现代Web应用框架也是一样的。* "

#. type: Plain text
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "The source code for this blog can be found at https://github.com/kabir/blog-quarkus-ui-development. It contains a README which explains in detail how the application was set up and how we implemented each step, addressing problems we uncovered along our way."
msgstr "这个博客的源代码可以在 https://github.com/kabir/blog-quarkus-ui-development 它包含一个README，详细解释了应用程序是如何设置的，以及我们是如何实现每一个步骤的，解决了我们一路走来发现的问题。"

#. type: Plain text
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "You need to have https://nodejs.org/en/download/package-manager/[Node], https://yarnpkg.com/en/docs/install[Yarn] and https://cli.angular.io[Angular CLI] installed on your system, and familiarity with Angular and Quarkus is assumed."
msgstr "你需要在你的系统上安装 link:https://nodejs.org/en/download/package-manager/[Node] 、 link:https://yarnpkg.com/en/docs/install[Yarn] 和 link:https://cli.angular.io[Angular CLI] ，并假定对Angular和Quarkus熟悉。"

#. type: Plain text
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "Clone the https://github.com/kabir/blog-quarkus-ui-development[project], and go into its folder. First run:"
msgstr "克隆该 link:https://github.com/kabir/blog-quarkus-ui-development[项目] ，并进入其文件夹。第一次运行。"

#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "$mvn -Dui.deps compile"
msgstr "$mvn -Dui.deps 编译"

#. type: Plain text
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "This downloads all the dependencies needed to build our web application. Then run:"
msgstr "这将下载构建我们的网络应用程序所需的所有依赖项。然后运行。"

#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "$mvn package -Dui.dev -Dui.proxy quarkus:dev"
msgstr "$mvn package -Dui.dev -Dui.proxy quarkus:dev"

#. type: Plain text
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "The `-Dui` system property enables a Maven profile to build the web application. The output directory for the web application `webapp/dist/webapp` gets bundled into the Quarkus application. We will talk about `-Dui.proxy` later on."
msgstr " `-Dui` 系统属性使Maven配置文件能够构建网络应用。网络应用程序的输出目录 `webapp/dist/webapp` ，被捆绑到Quarkus应用程序中。我们将在后面讨论 `-Dui.proxy` 。"

#. type: Plain text
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "Go to http://localhost:8080 in your browser and take a look at our sample application. It contains a few different pages. Go to the one called `Rest` which makes a REST call. We can change the return value of the https://github.com/kabir/blog-quarkus-ui-development/blob/master/src/main/java/org/kabir/quarkus/ui/SampleResource.java[`SampleServlet.hello()`] method. If you refresh the page you will see the changes made reflected automatically!"
msgstr "在你的浏览器中进入 http://localhost:8080 ，看一下我们的示例应用程序。它包含几个不同的页面。转到一个叫做 `Rest` 的页面，它进行了一个REST调用。我们可以改变该方法的返回值 link:https://github.com/kabir/blog-quarkus-ui-development/blob/master/src/main/java/org/kabir/quarkus/ui/SampleResource.java[`SampleServlet.hello()`] 方法的返回值。如果你刷新页面，你会看到所做的改变会自动反映出来!"

#. type: Plain text
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "With what we have so far, if we were to make changes to the user interface in our web application, we would need to stop Quarkus and run the above command to build the web application again and restart quarkus. This is not what we want, so we take advantage of Angular's https://angular.io/guide/build#proxying-to-a-backend-server[proxy]. https://facebook.github.io/create-react-app/docs/proxying-api-requests-in-development[React] and https://cli.vuejs.org/config/#devserver-proxy[Vue] have something similar."
msgstr "就目前的情况来看，如果我们要对我们的Web应用中的用户界面进行修改，我们需要停止Quarkus并运行上述命令，重新构建Web应用并重新启动quarkus。这不是我们想要的，所以我们利用了Angular的 link:https://angular.io/guide/build#proxying-to-a-backend-server[代理] 。 link:https://facebook.github.io/create-react-app/docs/proxying-api-requests-in-development[React] 和 link:https://cli.vuejs.org/config/#devserver-proxy[Vue] 也有类似的东西。"

#. type: Plain text
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "In another terminal window go into the `webapp/` folder of the cloned project, and run:"
msgstr "在另一个终端窗口，进入克隆项目的 `webapp/` 文件夹，并运行。"

#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "$yarn proxy"
msgstr "yarn 代理"

#. type: Plain text
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "This will start the Angular development server in proxy mode on port 4200. Go to http://localhost:4200 and you will see the same application as you saw earlier on port 8080, but served by the Angular development server while accessing the REST endpoints from the running Quarkus application. If you make any changes to any of the Angular components set up in https://github.com/kabir/blog-quarkus-ui-development/blob/master/webapp/src/app/app.component.ts[`app.component.ts`] you will see your changes reflected."
msgstr "这将在代理模式下启动Angular开发服务器，端口为4200。进入 http://localhost:4200 ，你会看到与你之前在8080端口看到的相同的应用程序，但由Angular开发服务器提供服务，同时从运行中的Quarkus应用程序访问REST端点。如果你对设置在Quarkus中的任何Angular组件做了任何改动，你会看到你的改动被反映出来。 link:https://github.com/kabir/blog-quarkus-ui-development/blob/master/webapp/src/app/app.component.ts[`app.component.ts`] 中设置的任何Angular组件做任何改动，你都会看到你的改动被反映出来。"

#. type: Plain text
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "This is great!!! We can now be super-productive and make changes in both our front-end and our back-end, and see the changes immediately without needing to rebuild, repackage and restart our application!"
msgstr "这真是太好了！！！我们现在可以超强的生产力，在我们的前端和后端都进行修改，并立即看到变化，而不需要重建和重新启动我们的应用程序。现在，我们可以提高生产力，在前端和后端都进行修改，并立即看到修改，而不需要重建、重新打包和重新启动我们的应用程序"

#. type: Title ==
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy, no-wrap
msgid "Adjustments Summary"
msgstr "调整摘要"

#. type: Plain text
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "The example project has already been set up with the needed adjustments to work properly both as a bundled application and in development mode. These are the main tweaks:"
msgstr "示例项目已经设置了所需的调整，以便在捆绑的应用程序和开发模式下都能正常工作。这些是主要的调整。"

#. type: Plain text
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "Handle the Angular routes in the UI rather than on the back-end. This is important for the bundled version (running on port 8080)."
msgstr "在UI中处理Angular路由，而不是在后端。这对捆绑版本很重要（运行在8080端口）。"

#. type: Plain text
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "Enable the Angular proxy to allow for the UI to call REST endpoints served by Quarkus."
msgstr "启用Angular代理，允许UI调用由Quarkus提供的REST端点。"

#. type: Plain text
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "Signal to the back-end that the front-end is running in a proxy, i.e. not served by us. This is important if the back-end needs to redirect to a page in the front-end."
msgstr "向后端发出信号，表明前端在代理中运行，即不是由我们提供服务。如果后端需要重定向到前端的一个页面，这很重要。"

#. type: Plain text
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "We will focus on the changes needed to make this work well, and not go into the details of how the application is set up."
msgstr "我们将专注于使其良好运行所需的变化，而不去讨论应用程序如何设置的细节。"

#. type: Title ===
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy, no-wrap
msgid "Handle Angular Routes"
msgstr "处理角型路线"

#. type: Plain text
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "Add a filter, https://github.com/kabir/blog-quarkus-ui-development/blob/master/src/main/java/org/kabir/quarkus/ui/AngularRouteFilter.java[AngularRouteFilter]. The essence of its `doFilter()` method is:"
msgstr "添加一个过滤器， link:https://github.com/kabir/blog-quarkus-ui-development/blob/master/src/main/java/org/kabir/quarkus/ui/AngularRouteFilter.java[AngularRouteFilter] 。其 `doFilter()` 方法的本质是。"

#. type: Plain text
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "This filter is only needed when running the application bundled in Quarkus (port 8080). It is not needed when connecting to the application running in Angular (port 4200). It's purpose is to allow us to **bookmark pages** in the application. All the server knows about are things like:"
msgstr "这个过滤器只在运行捆绑在Quarkus中的应用程序时需要（端口8080）。当连接到在Angular中运行的应用程序（端口4200）时不需要它。它的目的是让我们在应用程序中为 *页面做书签* 。服务器所知道的都是一些事情，比如。"

#. type: Plain text
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "the REST endpoints"
msgstr "的REST端点"

#. type: Plain text
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "deployed servlets"
msgstr "部署的servlets"

#. type: Plain text
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "the resources in the `META-INF/resources/` folder of the application"
msgstr "应用程序的 `META-INF/resources/` 文件夹中的资源。"

#. type: Plain text
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "The `META-INF/resources/` in our case contains the application's index.html and the transpiled resources."
msgstr "在我们的例子中， `META-INF/resources/` 包含应用程序的index.html和转码资源。"

#. type: Plain text
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "Without this filter, if you go to one of the Angular routes directly (e.g if you try to refresh when on http://localhost:8080/rest which is the `Rest` page we saw earlier) Quarkus will think it is a file, a REST endpoint or a servlet. Since Quarkus has no knowledge of anything called `/rest` you end up with a 404 (Not Found) status. The filter checks the status code of the request after calling `chain.doFilter()`. If the status is 404 and does not seem to be a file, we forward this request to `/`, which in turn serves up the `index.html` file. By doing a forward the path and parameters of the request are preserved. Angular then figures out that `/rest` is one of its known routes and displays the appropriate page of the application. Once the web application is loaded in the browser, Angular takes over and handles all the internal links to other routes in the web application (as an example, if you are on http://localhost:8080 and click on the link taking you to http://localhost:8080/other there is no round-trip to the server)."
msgstr "如果没有这个过滤器，如果你直接进入Angular路线之一（例如，如果你在 http://localhost:8080/rest ，也就是我们之前看到的 `Rest` 页面时尝试刷新），Quarkus会认为它是一个文件、一个REST端点或一个servlet。因为Quarkus不知道有什么东西叫 `/rest` ，所以你最终会得到404（未找到）的状态。过滤器在调用 `chain.doFilter()` 后检查请求的状态代码。如果状态是404，而且似乎不是一个文件，我们就把这个请求转发到 `/` ，而后者又提供了 `index.html` 文件。通过转发，请求的路径和参数被保留下来。然后Angular发现 `/rest` 是它的一个已知路由，并显示应用程序的适当页面。一旦网络应用被加载到浏览器中，Angular就会接管并处理所有到网络应用中其他路由的内部链接（举例来说，如果你在 http://localhost:8080 ，并点击带你到 http://localhost:8080/other 的链接，就不会有到服务器的往返过程）。"

#. type: Plain text
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "There are other ways you can handle this too, e.g. by checking the path against a set of hard-coded known paths that are to be handled by the back-end, but for my purposes the above has worked very well. The key is to invoke:"
msgstr "你也可以用其他方法来处理这个问题，例如根据一组硬编码的已知路径来检查路径，这些路径将由后端处理，但对于我的目的来说，上述方法非常好用。关键是要调用。"

#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "request.getRequestDispatcher(\"/\").forward(request, response);"
msgstr "request.getRequestDispatcher(\"/\").forward(request, response)；"

#. type: Plain text
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "if it is something that should be handled by Angular."
msgstr "如果它是应该由Angular来处理的事情。"

#. type: Title ===
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy, no-wrap
msgid "Set up the Angular proxy"
msgstr "设置Angular代理"

#. type: Plain text
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "The proxy is configured in https://github.com/kabir/blog-quarkus-ui-development/blob/master/webapp/proxy.conf.json[proxy.conf.json]. All REST calls to anything under `/api` will be passed to the back-end running on port 8080. To run the Angular development server with this configuration, we have added a `proxy` configuration to the `scripts` section of https://github.com/kabir/blog-quarkus-ui-development/blob/master/webapp/package.json[`package.json`]."
msgstr "代理是在 link:https://github.com/kabir/blog-quarkus-ui-development/blob/master/webapp/proxy.conf.json[proxy.conf.json] 中配置的。所有对 `/api` 下的REST调用都将被传递到运行在8080端口的后端。为了在这个配置下运行Angular开发服务器，我们在 `scripts` 部分添加了一个 `proxy` 的配置。 link:https://github.com/kabir/blog-quarkus-ui-development/blob/master/webapp/package.json[`package.json`] ."

#. type: Plain text
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "In our case, we have a servlet which needs to redirect back to the front-end (something I found I needed to implement OAuth in my main project). That has a check for the `-Dui.proxy` system property we saw earlier when handling the `/callback` path in https://github.com/kabir/blog-quarkus-ui-development/blob/master/src/main/java/org/kabir/quarkus/ui/SampleServlet.java[`SampleServlet`]. If this property is set, we prepend `https://localhost:4200` (the address of the Angular proxy) to the redirect URL if we find the proxy is running on port 4200."
msgstr "在我们的案例中，我们有一个servlet需要重定向到前端（我发现我需要在我的主项目中实现OAuth）。这有一个对 `-Dui.proxy` 系统属性的检查，我们早先在处理 `/callback` 路径时看到在 link:https://github.com/kabir/blog-quarkus-ui-development/blob/master/src/main/java/org/kabir/quarkus/ui/SampleServlet.java[`SampleServlet`] .如果这个属性被设置了，我们就会预置 `<a href=\"https://localhost:4200\" class=\"bare\">https://localhost:4200</a>` (Angular代理的地址)到重定向URL中，如果我们发现代理运行在4200端口。"

#. type: Plain text
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "Finally, `DefaultComponent` in https://github.com/kabir/blog-quarkus-ui-development/blob/master/webapp/src/app/app.component.ts[`app.component.ts`] has a direct link to our servlet running in the back-end. It has a check to see if the web application is running in the proxy (i.e. its port is 4200), and if this is the case it adjusts the url from `/servlet/make-external-call` to point to the Quarkus back-end running on port 8080."
msgstr "最后， `DefaultComponent` 在 link:https://github.com/kabir/blog-quarkus-ui-development/blob/master/webapp/src/app/app.component.ts[`app.component.ts`] 有一个直接链接到我们在后端运行的Servlet。它有一个检查，看网络应用程序是否在代理中运行（即它的端口是4200），如果是这样，它就从 `/servlet/make-external-call` ，调整url指向运行在8080端口的Quarkus后端。"

#. type: Title ==
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy, no-wrap
msgid "Last words"
msgstr "最后的话"

#. type: Plain text
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "We have seen how with a minimum amount of configuration we can have both the back-end and front-end of our application running in Quarkus's and Angular's respective development modes. During development this removes the need to rebuild the application when we change something. You can just code away, and see the changes when you refresh your browser. This is done by starting Quarkus with:"
msgstr "我们已经看到了如何通过最少的配置，让我们的应用程序的后端和前端都运行在Quarkus和Angular各自的开发模式中。在开发过程中，当我们改变某些东西时，就不需要重建应用程序了。你可以直接编码，当你刷新你的浏览器时，就可以看到这些变化。这可以通过启动Quarkus来实现。"

#. type: Plain text
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "and starting the Angular application (from the `webapp/` folder) with"
msgstr "并启动Angular应用程序（从 `webapp/` 文件夹），用"

#. type: Title ===
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy, no-wrap
msgid "Packaging for development"
msgstr "发展的包装"

#. type: Plain text
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "If you want to do a rebuild now and again to package the application and run it all in Quarkus run"
msgstr "如果你想时不时地进行一次重建，将应用程序打包并在 Quarkus 中运行，请运行"

#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "$mvn package -Dui.dev quarkus:dev"
msgstr "$mvn package -Dui.dev quarkus:dev"

#. type: Plain text
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "By not passing in -Dui.proxy we disable the checks for whether the front-end runs in a proxy. `-Dui.dev` builds the web application so it is part of the Quarkus application."
msgstr "通过不传递 -Dui.proxy，我们禁用了前端是否在代理中运行的检查。 `-Dui.dev` 构建网络应用程序，使其成为 Quarkus 应用程序的一部分。"

#. type: Title ===
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy, no-wrap
msgid "Packaging for production"
msgstr "生产包装"

#. type: Plain text
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "To package the application for production, use"
msgstr "要打包应用程序用于生产，请使用"

#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "$mvn package -Dui"
msgstr "$mvn package -Dui"

#. type: Plain text
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "`-Dui` builds the web application just like `-Dui.dev`, but it does more optimisations for production. Those optimisations take some time."
msgstr "`-Dui` 就像 一样构建网络应用程序，但它为生产做了更多优化。这些优化需要一些时间。 `-Dui.dev`"

#. type: Title ===
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy, no-wrap
msgid "Packaging for cloud native"
msgstr "云原生打包"

#. type: Plain text
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "Finally to build a native image, make sure you have set up GraalVM as outlined https://quarkus.io/guides/building-native-image[here]. Then build the application to generate the native executable."
msgstr "最后，要生成本地镜像，请确保已按 link:https://quarkus.io/guides/building-native-image[此处] 所述设置好 GraalVM。然后构建应用程序，生成本地可执行文件。"

#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "$mvn package -Dui -Pnative"
msgstr "$mvn package -Dui -Pnative"

#. type: Plain text
#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid "Running this we see the super-fast startup time Quarkus gives us in native mode:"
msgstr "运行这个程序，我们可以看到 Quarkus 在原生模式下的超快启动时间："

#: _posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc
#, fuzzy
msgid ""
"$./target/blog-quarkus-ui-development-0.1.0-runner\n"
"2019-06-06 10:57:02,254 INFO  [io.quarkus] (main) Quarkus 0.15.0 started in 0.005s. Listening on: http://[::]:8080\n"
"2019-06-06 10:57:02,464 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy, resteasy-jsonb]"
msgstr "$./target/blog-quarkus-ui-development-0.1.0-runner 2019-06-06 10:57:02,254 INFO [io.quarkus] (main) Quarkus 0.15.0 在 0.005 秒内启动。监听：http://[::]:8080 2019-06-06 10:57:02,464 INFO [io.quarkus] (main) 已安装功能：[cdi, resteasy, resteasy-jsonb］"
