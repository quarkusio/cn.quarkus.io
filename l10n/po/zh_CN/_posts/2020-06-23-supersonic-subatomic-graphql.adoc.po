# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy, no-wrap
msgid "Supersonic Subatomic GraphQL"
msgstr "超音速亚原子GraphQL"

#. type: YAML Front Matter: synopsis
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy, no-wrap
msgid "Quick look at MicroProfile GraphQL version 1.0 that is now part of Quarkus 1.5."
msgstr "快速查看MicroProfile GraphQL 1.0版，它现在是Quarkus 1.5的一部分。"

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "https://github.com/eclipse/microprofile-graphql[MicroProfile GraphQL] is now included in the just released https://quarkus.io/blog/quarkus-1-5-final-released/[version 1.5.0] of Quarkus."
msgstr "link:https://github.com/eclipse/microprofile-graphql[MicroProfile GraphQL] 现在包含在刚刚发布的 link:https://quarkus.io/blog/quarkus-1-5-final-released/[1.5.0版本] 的Quarkus中。"

#. type: Title ==
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy, no-wrap
msgid "What is GraphQL?"
msgstr "什么是GraphQL？"

#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid ""
"\"GraphQL is an open-source data query and manipulation language for APIs, and a runtime for fulfilling queries with existing data.\n"
"GraphQL interprets strings from the client, and returns data in an understandable, predictable, pre-defined manner.\n"
"GraphQL is an alternative, though not necessarily a replacement for REST.\""
msgstr "\"GraphQL是一种用于应用程序接口的开源数据查询和操作语言，也是一种运行时，用于实现对现有数据的查询。GraphQL 解释来自客户端的字符串，并以可理解、可预测和预定义的方式返回数据。GraphQL 是 REST 的替代品，但不一定能取代 REST。"

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "Read the full http://spec.graphql.org/draft/[GraphQL Specification]"
msgstr "阅读完整的 link:http://spec.graphql.org/draft/[GraphQL规范]"

#. type: Title ==
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy, no-wrap
msgid "Why GraphQL ?"
msgstr "为什么是GraphQL？"

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "The main reasons for using GraphQL are:"
msgstr "使用GraphQL的主要原因是。"

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "Avoiding over-fetching or under-fetching data. Clients can retrieve several types of data in a single request or can limit the response data based on specific criteria."
msgstr "避免过度取用或取用不足的数据。客户端可以在一个请求中检索几种类型的数据，或者可以根据特定标准限制响应数据。"

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "Enabling data models to evolve. Changes to the schema can be made so as to not require changes on existing clients, and vice versa - this can be done without a need for a new version of the application."
msgstr "使得数据模型能够不断发展。可以对模式进行修改，以便不需要对现有客户进行修改，反之亦然--这可以在不需要新版本的应用程序的情况下完成。"

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "Advanced developer experience:"
msgstr "高级开发人员的经验。"

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "The schema defines how the data can be accessed and serves as the contract between the client and the server. Development teams on both sides can work without further communication."
msgstr "模式定义了数据的访问方式，并作为客户端和服务器之间的合同。双方的开发团队可以在没有进一步沟通的情况下工作。"

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "Native schema introspection enables users to discover APIs and to refine the queries on the client-side. This advantage is increased with graphical tools such as GraphiQL and GraphQL Voyager enabling smooth and easy API discovery."
msgstr "本机模式自省使用户能够发现API并在客户端完善查询。这一优势在GraphiQL和GraphQL Voyager等图形化工具的帮助下得到了加强，使API的发现更加顺畅和容易。"

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "On the client-side, the query language provides flexibility and efficiency enabling developers to adapt to the constraints of their technical environments while reducing server round-trips."
msgstr "在客户端，查询语言提供了灵活性和效率，使开发人员能够适应其技术环境的限制，同时减少服务器往返次数。"

#. type: Title ==
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy, no-wrap
msgid "What is MicroProfile GraphQL?"
msgstr "什么是MicroProfile GraphQL？"

#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid ""
"\"The intent of the MicroProfile GraphQL specification is to provide a \"code-first\" set of APIs that will enable users to quickly develop portable GraphQL-based applications in Java.\n"
"There are 2 main requirements for all implementations of this specification, namely:"
msgstr "\"MicroProfile GraphQL 规范的目的是提供一套 \"代码优先 \"的应用程序接口，使用户能够在 Java 中快速开发基于 GraphQL 的可移植应用程序。本规范的所有实施都有两个主要要求，即"

#. type: Bullet: '* '
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "Generate and make the GraphQL Schema available. This is done by looking at the annotations in the users code, and must include all GraphQL Queries and Mutations as well as all entities as defined implicitly via the response type or argument(s) of Queries and Mutations."
msgstr "生成并使GraphQL模式可用。这是通过查看用户代码中的注释来完成的，并且必须包括所有GraphQL查询和突变，以及通过查询和突变的响应类型或参数隐含定义的所有实体。"

#. type: Bullet: '* '
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "Execute GraphQL requests. This will be in the form of either a Query or a Mutation. As a minimum the specification must support executing these requests via HTTP.\""
msgstr "执行GraphQL请求。这将是查询或突变的形式。作为最低限度，规范必须支持通过HTTP执行这些请求。\""

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "Read the full https://download.eclipse.org/microprofile/microprofile-graphql-1.0/microprofile-graphql.html[MicroProfile GraphQL Specification]"
msgstr "阅读完整的 link:https://download.eclipse.org/microprofile/microprofile-graphql-1.0/microprofile-graphql.html[MicroProfile GraphQL规范]"

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "You can now use https://code.quarkus.io/[code.quarkus.io] to get going with Quarkus and include the https://github.com/smallrye/smallrye-graphql[SmallRye GraphQL Extension]."
msgstr "你现在可以使用 link:https://code.quarkus.io/[code.quarkus.io] 来开始使用Quarkus，并包括 link:https://github.com/smallrye/smallrye-graphql[SmallRye GraphQL扩展] 。"

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "This will create a Quarkus starter application with the following dependencies:"
msgstr "这将创建一个具有以下依赖性的Quarkus启动程序。"

#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid ""
"At the moment, the example application created is a JAX-RS application. There is https://github.com/quarkusio/quarkus/issues/8134[some work in progress] to allow extensions\n"
"to define custom examples application, but until then we always get a JAX-RS application. You can remove the `quarkus-resteasy` dependency as we do not need JAX-RS."
msgstr "目前，创建的示例应用程序是一个 JAX-RS 应用程序。允许扩展程序定义自定义示例应用程序的 link:https://github.com/quarkusio/quarkus/issues/8134[工作正在进行] 中，但在此之前，我们始终会得到一个 JAX-RS 应用程序。您可以移除 `quarkus-resteasy` 的依赖关系，因为我们不需要 JAX-RS。"

#. type: Title ==
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy, no-wrap
msgid "Your first GraphQL Endpoint."
msgstr "你的第一个GraphQL端点。"

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "Let's change the `ExampleResource` Rest service to be a GraphQL endpoint."
msgstr "让我们把 `ExampleResource` Rest服务改成GraphQL端点。"

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "Replace the `@Path(\"/hello\")` class annotation with `@GraphQLApi`."
msgstr "用 `@GraphQLApi` 替换 `@Path(\"/hello\")` 类注释。"

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "Replace the `@GET` method annotation with `@Query`."
msgstr "用 `@Query` 替换 `@GET` 方法注释。"

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "Remove the `@Produces(MediaType.TEXT_PLAIN)` method annotation and all JAX-RS imports."
msgstr "删除 `@Produces(MediaType.TEXT_PLAIN)` 方法注解和所有JAX-RS导入。"

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "That is it! Your `ExampleResource` should look like this now:"
msgstr "这就是了!你的 `ExampleResource` ，现在应该看起来像这样。"

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "You can now run the application using Quarkus dev mode:"
msgstr "现在你可以使用Quarkus开发模式运行该应用程序。"

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "Now browse to http://localhost:8080/graphql-ui/[localhost:8080/graphql-ui/] and run the following query:"
msgstr "现在浏览到 link:http://localhost:8080/graphql-ui/[localhost:8080/graphql-ui/] ，并运行以下查询。"

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "This will return:"
msgstr "这将返回。"

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "Also see the link:/guides/microprofile-graphql[MicroProfile GraphQL guide]."
msgstr "也请看 link:/guides/microprofile-graphql[MicroProfile GraphQL指南] 。"

#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "A more detailed example"
msgstr "更详细的示例"

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "Let's look at a more detailed example, get the source from https://github.com/phillip-kruger/graphql-example[this GitHub project]."
msgstr "让我们看一个更详细的例子，从 link:https://github.com/phillip-kruger/graphql-example[这个GitHub项目] 中获取源码。"

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "This is a multi-module application. First compile all modules. In the root:"
msgstr "这是一个多模块的应用程序。首先编译所有模块。在根目录下。"

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "Now browse to the quarkus example:"
msgstr "现在浏览一下quarkus的例子。"

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "Look at `ProfileGraphQLApi.java` that is marked as a `@GraphQLApi`:"
msgstr "请看 `ProfileGraphQLApi.java` ，它被标记为 `@GraphQLApi` 。"

#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid ""
"Above method will get a person by `personId`. As you can see the method is made queryable with the `@Query` annotation. You can optionally provide the name (\"person\" in this case),\n"
"however the default would be \"person\" anyway (method name without \"get\"). You can also optionally name the parameter, but the default would be the parameter name (\"personId\")."
msgstr "上述方法将通过 `personId` 获取一个人。正如您所看到的，该方法可通过 `@Query` 注解进行查询。您可以选择提供名称（本例中为 \"person\"），但默认值还是 \"person\"（方法名称中没有 \"get\"）。您也可以选择为参数命名，但默认值是参数名（\"personId\"）。"

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "The Person Object is a POJO that represents a Person (User or Member) in the system. It has many fields, some that are other complex POJOs:"
msgstr "Person对象是一个POJO，代表系统中的一个人（用户或会员）。它有很多字段，有些是其他复杂的POJO。"

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "However, the `Query` annotation makes it possible to query the exact fields we are interested in."
msgstr "然而， `Query` 注释使我们有可能查询到我们感兴趣的确切字段。"

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "Run the example application:"
msgstr "运行示例应用程序。"

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "Notice that you have 'code insight' in the editor. That is because GraphQL has a schema and also supports introspection."
msgstr "注意到你在编辑器里有'代码洞察力'。这是因为GraphQL有一个模式，也支持自省。"

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "We can request only the fields we are interested in, making the payload much smaller."
msgstr "我们可以只请求我们感兴趣的字段，使有效载荷大大减少。"

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "We can also combine queries, i.e., lets say we want to get the fields for person 1 as shown above, and also the name and surname for person 2, we can do the following:"
msgstr "我们还可以组合查询，例如，假设我们想获得如上所示的人1的字段，以及人2的名字和姓氏，我们可以这样做。"

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "This will return :"
msgstr "这将返回:"

#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "Source fields"
msgstr "来源领域"

#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid ""
"If you look closely at our query, you will see we asked for the `scores` field of the person, however, the `Person` POJO does not contain a `scores` field.\n"
"We added the `scores` field by adding a `@Source` field to the person:"
msgstr "如果仔细观察我们的查询，就会发现我们要求输入个人的 `scores` 字段，但 `Person` POJO 并不包含 `scores` 字段。我们通过向个人添加 `@Source` 字段来添加 `scores` 字段："

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "So we can add fields that merge onto the output by adding the `@Source` parameter that matches the response type."
msgstr "因此，我们可以通过添加与响应类型相匹配的 `@Source` 参数，将字段合并到输出上。"

#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "Partial results"
msgstr "部分成果"

#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid ""
"The above example merges two different data sources, but let's say the score system is down. We will then still return the data we have, and an error\n"
"for the score:"
msgstr "上述示例合并了两个不同的数据源，但假设记分系统瘫痪了。这时，我们仍将返回现有数据，但分数会出现错误："

#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "Native mode"
msgstr "本地模式"

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "Let's run this example in native mode (using graalvm-ce-java11-19.3.2):"
msgstr "让我们在本地模式下运行这个例子（使用graalvm-ce-java11-19.3.2）。"

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "This will create a native executable and will now start the application very quickly:"
msgstr "这将创建一个本地可执行文件，现在将非常迅速地启动应用程序。"

#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "In the pipeline"
msgstr "筹备中"

#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid ""
"This is the first version of the MicroProfile GraphQL Spec and there are many things in the pipeline. One of those is a client.\n"
"We are proposing two types of clients:"
msgstr "这是 MicroProfile GraphQL Spec 的第一个版本，有很多东西正在开发中。其中之一就是客户端。我们提出了两种类型的客户端："

#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "Dynamic"
msgstr "动态"

#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "The dynamic client will allow you to build a query using a builder:"
msgstr "动态客户端允许您使用生成器创建查询："

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "For more details see: https://github.com/worldline/dynaql[github.com/worldline/dynaql]"
msgstr "更多细节见： link:https://github.com/worldline/dynaql[github.com/worldline/dynaql]"

#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "Type safe"
msgstr "类型安全"

#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid ""
"The type safe client will be closer to MicroProfile RESTClient. Looking at the same example as above, lets see how we can to use it.\n"
"From the root of the project, browse to the `quarkus-client` folder. This example uses https://quarkus.io/blog/introducing-command-mode/[Quarkus Command Mode] to make a Query."
msgstr "安全客户端类型将更接近 MicroProfile RESTClient。看一下上面的例子，让我们看看如何使用它。从项目根目录浏览到 `quarkus-client` 文件夹。本例使用 link:https://quarkus.io/blog/introducing-command-mode/[Quarkus 命令模式] 进行查询。"

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "The client is not yet a Quarkus Extension, so we add it in our project like this:"
msgstr "客户端还不是Quarkus扩展，所以我们像这样把它添加到我们的项目中。"

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "Now we can create a POJO that contains only fields that we are interested in. Looking at `Person` and `Score` in the client module, it is much smaller than the definition on the server side:"
msgstr "现在我们可以创建一个只包含我们感兴趣的字段的POJO。看看客户端模块中的 `Person` 和 `Score` ，它比服务器端的定义小得多。"

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "All we need to do now is to add an interface that defines the queries that we are interested in:"
msgstr "我们现在需要做的就是添加一个接口，用于定义我们感兴趣的查询："

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "And now we can use this:"
msgstr "现在我们可以用这个了："

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "Running the Quarkus client appication we can now make a call to the server (make sure this is still running) and print the response:"
msgstr "运行 Quarkus 客户端应用程序后，我们就可以调用服务器（确保它仍在运行）并打印响应："

#. type: Plain text
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid "The number (2) is the `personId` in our example:"
msgstr "在我们的例子中，数字 (2) 是 `personId` ："

#. type: Title ==
#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy, no-wrap
msgid "Summary"
msgstr "摘要"

#: _posts/2020-06-23-supersonic-subatomic-graphql.adoc
#, fuzzy
msgid ""
"This is a short and quick introduction to MicroProfile GraphQL that is now available in Quarkus.\n"
"There are many more https://download.eclipse.org/microprofile/microprofile-graphql-1.0.2/microprofile-graphql.html[features]\n"
"and even more https://github.com/eclipse/microprofile-graphql/issues[planned], so stay tuned."
msgstr "这是对 Quarkus 中现有 MicroProfile GraphQL 的简短快速介绍。还有更多的 link:https://download.eclipse.org/microprofile/microprofile-graphql-1.0.2/microprofile-graphql.html[功能] 和 link:https://github.com/eclipse/microprofile-graphql/issues[计划] ，敬请期待。"
