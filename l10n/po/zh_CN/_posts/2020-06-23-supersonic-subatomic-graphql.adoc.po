# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:1
#, no-wrap
msgid "phillipkruger"
msgstr ""

#. type: YAML Front Matter: date
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:1
#, no-wrap
msgid "2020-06-23"
msgstr ""

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:1
#, no-wrap
msgid "post"
msgstr ""

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:1
#, no-wrap
msgid "Quick look at MicroProfile GraphQL version 1.0 that is now part of Quarkus 1.5."
msgstr ""

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:1
#, no-wrap
msgid "extension graphql"
msgstr ""

#. type: YAML Front Matter: title
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:1
#, no-wrap
msgid "Supersonic Subatomic GraphQL"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:12
msgid "https://github.com/eclipse/microprofile-graphql[MicroProfile GraphQL] is now included in the just released https://quarkus.io/blog/quarkus-1-5-final-released/[version 1.5.0] of Quarkus."
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:13
#, no-wrap
msgid "What is GraphQL?"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:16
msgid "\"GraphQL is an open-source data query and manipulation language for APIs, and a runtime for fulfilling queries with existing data."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:17
msgid "GraphQL interprets strings from the client, and returns data in an understandable, predictable, pre-defined manner."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:18
msgid "GraphQL is an alternative, though not necessarily a replacement for REST.\""
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:20
msgid "Read the full http://spec.graphql.org/draft/[GraphQL Specification]"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:21
#, no-wrap
msgid "Why GraphQL ?"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:24
msgid "The main reasons for using GraphQL are:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:26
msgid "Avoiding over-fetching or under-fetching data. Clients can retrieve several types of data in a single request or can limit the response data based on specific criteria."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:27
msgid "Enabling data models to evolve. Changes to the schema can be made so as to not require changes on existing clients, and vice versa - this can be done without a need for a new version of the application."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:28
msgid "Advanced developer experience:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:29
msgid "The schema defines how the data can be accessed and serves as the contract between the client and the server. Development teams on both sides can work without further communication."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:30
msgid "Native schema introspection enables users to discover APIs and to refine the queries on the client-side. This advantage is increased with graphical tools such as GraphiQL and GraphQL Voyager enabling smooth and easy API discovery."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:31
msgid "On the client-side, the query language provides flexibility and efficiency enabling developers to adapt to the constraints of their technical environments while reducing server round-trips."
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:32
#, no-wrap
msgid "What is MicroProfile GraphQL?"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:35
msgid "\"The intent of the MicroProfile GraphQL specification is to provide a \"code-first\" set of APIs that will enable users to quickly develop portable GraphQL-based applications in Java."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:36
msgid "There are 2 main requirements for all implementations of this specification, namely:"
msgstr ""

#. type: Bullet: '* '
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:38
msgid "Generate and make the GraphQL Schema available. This is done by looking at the annotations in the users code, and must include all GraphQL Queries and Mutations as well as all entities as defined implicitly via the response type or argument(s) of Queries and Mutations."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:39
#, no-wrap
msgid "\n"
msgstr ""

#. type: Bullet: '* '
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:40
msgid "Execute GraphQL requests. This will be in the form of either a Query or a Mutation. As a minimum the specification must support executing these requests via HTTP.\""
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:42
msgid "Read the full https://download.eclipse.org/microprofile/microprofile-graphql-1.0/microprofile-graphql.html[MicroProfile GraphQL Specification]"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:44
msgid "You can now use https://code.quarkus.io/[code.quarkus.io] to get going with Quarkus and include the https://github.com/smallrye/smallrye-graphql[SmallRye GraphQL Extension]."
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:45
#, no-wrap
msgid "Code"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:45
#, no-wrap
msgid "code_quarkus.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:48
msgid "This will create a Quarkus starter application with the following dependencies:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:69
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-resteasy</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-junit5</artifactId>\n"
"  <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"  <groupId>io.rest-assured</groupId>\n"
"  <artifactId>rest-assured</artifactId>\n"
"  <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-smallrye-graphql</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block =
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:75
msgid "At the moment, the example application created is a JAX-RS application. There is https://github.com/quarkusio/quarkus/issues/8134[some work in progress] to allow extensions to define custom examples application, but until then we always get a JAX-RS application. You can remove the `quarkus-resteasy` dependency as we do not need JAX-RS."
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:77
#, no-wrap
msgid "Your first GraphQL Endpoint."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:80
msgid "Let's change the `ExampleResource` Rest service to be a GraphQL endpoint."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:82
msgid "Replace the `@Path(\"/hello\")` class annotation with `@GraphQLApi`."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:83
msgid "Replace the `@GET` method annotation with `@Query`."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:84
msgid "Remove the `@Produces(MediaType.TEXT_PLAIN)` method annotation and all JAX-RS imports."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:86
msgid "That is it! Your `ExampleResource` should look like this now:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:90
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:93
#, no-wrap
msgid ""
"import org.eclipse.microprofile.graphql.GraphQLApi;\n"
"import org.eclipse.microprofile.graphql.Query;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:96
#, no-wrap
msgid ""
"@GraphQLApi\n"
"public class ExampleResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:102
#, no-wrap
msgid ""
"    @Query\n"
"    public String hello() {\n"
"        return \"hello\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:105
msgid "You can now run the application using Quarkus dev mode:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:109
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:174
#, no-wrap
msgid "mvn quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:112
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:177
msgid "Now browse to http://localhost:8080/graphql-ui/[localhost:8080/graphql-ui/] and run the following query:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:118
#, no-wrap
msgid ""
"{\n"
"  hello\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:121
msgid "This will return:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:129
#, no-wrap
msgid ""
"{\n"
"  \"data\": {\n"
"    \"hello\": \"hello\"\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:131
msgid "Also see the link:/guides/microprofile-graphql[MicroProfile GraphQL guide]."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:133
msgid "## A more detailed example"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:135
msgid "Let's look at a more detailed example, get the source from https://github.com/phillip-kruger/graphql-example[this GitHub project]."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:137
msgid "This is a multi-module application. First compile all modules. In the root:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:141
#, no-wrap
msgid "mvn clean install\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:144
msgid "Now browse to the quarkus example:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:148
#, no-wrap
msgid "cd quarkus-example\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:151
msgid "Look at `ProfileGraphQLApi.java` that is marked as a `@GraphQLApi`:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:158
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:271
#, no-wrap
msgid ""
"    @Query(\"person\")\n"
"    public Person getPerson(@Name(\"personId\") int personId){\n"
"        return personDB.getPerson(personId);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:162
msgid "Above method will get a person by `personId`. As you can see the method is made queryable with the `@Query` annotation. You can optionally provide the name (\"person\" in this case), however the default would be \"person\" anyway (method name without \"get\"). You can also optionally name the parameter, but the default would be the parameter name (\"personId\")."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:164
msgid "The Person Object is a POJO that represents a Person (User or Member) in the system. It has many fields, some that are other complex POJOs:"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:165
#, no-wrap
msgid "Person"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:165
#, no-wrap
msgid "person.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:168
msgid "However, the `Query` annotation makes it possible to query the exact fields we are interested in."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:170
msgid "Run the example application:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:190
#, no-wrap
msgid ""
"{\n"
"  person(personId:1){\n"
"    names\n"
"    surname\n"
"    scores{\n"
"      name\n"
"      value\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:193
msgid "Notice that you have 'code insight' in the editor. That is because GraphQL has a schema and also supports introspection."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:195
msgid "We can request only the fields we are interested in, making the payload much smaller."
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:196
#, no-wrap
msgid "GraphiQL"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:196
#, no-wrap
msgid "graphiql.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:199
msgid "We can also combine queries, i.e., lets say we want to get the fields for person 1 as shown above, and also the name and surname for person 2, we can do the following:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:216
#, no-wrap
msgid ""
"{\n"
"  person1: person(personId:1){\n"
"    names\n"
"    surname\n"
"    scores{\n"
"      name\n"
"      value\n"
"    }\n"
"  }\n"
"  person2: person(personId:2){\n"
"    names\n"
"    surname\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:219
msgid "This will return :"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:258
#, no-wrap
msgid ""
"{\n"
"  \"data\": {\n"
"    \"person1\": {\n"
"      \"names\": [\n"
"        \"Christine\",\n"
"        \"Fabian\"\n"
"      ],\n"
"      \"surname\": \"O'Reilly\",\n"
"      \"scores\": [\n"
"        {\n"
"          \"name\": \"Driving\",\n"
"          \"value\": 15\n"
"        },\n"
"        {\n"
"          \"name\": \"Fitness\",\n"
"          \"value\": 94\n"
"        },\n"
"        {\n"
"          \"name\": \"Activity\",\n"
"          \"value\": 63\n"
"        },\n"
"        {\n"
"          \"name\": \"Financial\",\n"
"          \"value\": 22\n"
"        }\n"
"      ]\n"
"    },\n"
"    \"person2\": {\n"
"      \"names\": [\n"
"        \"Masako\",\n"
"        \"Errol\"\n"
"      ],\n"
"      \"surname\": \"Zemlak\"\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:261
msgid "### Source fields"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:264
msgid "If you look closely at our query, you will see we asked for the `scores` field of the person, however, the `Person` POJO does not contain a `scores` field.  We added the `scores` field by adding a `@Source` field to the person:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:275
#, no-wrap
msgid ""
"    public List<Score> getScores(@Source Person person) {\n"
"        return scoreDB.getScores(person.getIdNumber());\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:278
msgid "So we can add fields that merge onto the output by adding the `@Source` parameter that matches the response type."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:280
msgid "### Partial results"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:283
msgid "The above example merges two different data sources, but let's say the score system is down. We will then still return the data we have, and an error for the score:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:317
#, no-wrap
msgid ""
"{\n"
"  \"errors\": [\n"
"    {\n"
"      \"message\": \"Scores for person [797-95-4822] is not available\",\n"
"      \"locations\": [\n"
"        {\n"
"          \"line\": 5,\n"
"          \"column\": 5\n"
"        }\n"
"      ],\n"
"      \"path\": [\n"
"        \"person\",\n"
"        \"scores2\"\n"
"      ],\n"
"      \"extensions\": {\n"
"        \"exception\": \"com.github.phillipkruger.user.graphql.ScoresNotAvailableException\",\n"
"        \"classification\": \"DataFetchingException\"\n"
"      }\n"
"    }\n"
"  ],\n"
"  \"data\": {\n"
"    \"person\": {\n"
"      \"names\": [\n"
"        \"Christine\",\n"
"        \"Fabian\"\n"
"      ],\n"
"      \"surname\": \"O'Reilly\",\n"
"      \"scores2\": null\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:320
msgid "### Native mode"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:322
msgid "Let's run this example in native mode (using graalvm-ce-java11-19.3.2):"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:326
#, no-wrap
msgid "mvn -Pnative clean install\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:329
msgid "This will create a native executable and will now start the application very quickly:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:340
#, no-wrap
msgid ""
"./target/quarkus-example-1.0.0-SNAPSHOT-runner\n"
"__  ____  __  _____   ___  __ ____  ______\n"
" --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/\n"
" -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\\n"
"--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/\n"
"2020-06-11 17:02:55,041 INFO  [io.quarkus] (main) quarkus-example 1.0.0-SNAPSHOT native (powered by Quarkus 1.5.0.Final) started in 0.026s. Listening on: http://0.0.0.0:8080\n"
"2020-06-11 17:02:55,041 INFO  [io.quarkus] (main) Profile prod activated.\n"
"2020-06-11 17:02:55,041 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy, resteasy-jsonb, smallrye-graphql, smallrye-openapi, swagger-ui]\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:343
msgid "## In the pipeline"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:346
msgid "This is the first version of the MicroProfile GraphQL Spec and there are many things in the pipeline. One of those is a client.  We are proposing two types of clients:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:349
msgid "### Dynamic The dynamic client will allow you to build a query using a builder:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:359
#, no-wrap
msgid ""
"// Building of the graphql document.\n"
"Document myDocument = document(\n"
"                operation(Operation.Type.QUERY,\n"
"                        field(\"people\",\n"
"                                field(\"id\"),\n"
"                                field(\"name\")\n"
"                        )));\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:362
#, no-wrap
msgid ""
"// Serialization of the document into a string, ready to be sent.\n"
"String graphqlRequest = myDocument.toString();\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:365
msgid "For more details see: https://github.com/worldline/dynaql[github.com/worldline/dynaql]"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:367
msgid "### Type safe"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:370
msgid "The type safe client will be closer to MicroProfile RESTClient. Looking at the same example as above, lets see how we can to use it.  From the root of the project, browse to the `quarkus-client` folder. This example uses https://quarkus.io/blog/introducing-command-mode/[Quarkus Command Mode] to make a Query."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:372
msgid "The client is not yet a Quarkus Extension, so we add it in our project like this:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:380
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.smallrye</groupId>\n"
"    <artifactId>smallrye-graphql-client</artifactId>\n"
"    <version>${smallrye-graphql.version}</version>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:383
msgid "Now we can create a POJO that contains only fields that we are interested in. Looking at `Person` and `Score` in the client module, it is much smaller than the definition on the server side:"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:384
#, no-wrap
msgid "Client"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:384
#, no-wrap
msgid "client.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:387
msgid "All we need to do now is to add an interface that defines the queries that we are interested in:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:392
#, no-wrap
msgid ""
"@GraphQlClientApi\n"
"public interface PersonGraphQLClient {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:394
#, no-wrap
msgid "    public Person person(int personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:396
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:399
msgid "And now we can use this:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:405
#, no-wrap
msgid ""
"    //@Inject\n"
"    //PersonGraphQLClient personClient; or\n"
"    PersonGraphQLClient personClient = GraphQlClientBuilder.newBuilder().build(PersonGraphQLClient.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:408
#, no-wrap
msgid ""
"    // ...\n"
"    Person person = personClient.person(id);\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:411
msgid "Running the Quarkus client appication we can now make a call to the server (make sure this is still running) and print the response:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:432
#, no-wrap
msgid ""
"java -jar target/quarkus-client-1.0.0-SNAPSHOT-runner.jar 2\n"
"Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=lcd\n"
"=========================\n"
"|  Masako Zemlak        |\n"
"|                       |\n"
"|        Driving        |\n"
"|        48             |\n"
"|                       |\n"
"|        Fitness        |\n"
"|        73             |\n"
"|                       |\n"
"|        Activity       |\n"
"|        62             |\n"
"|                       |\n"
"|        Financial      |\n"
"|        54             |\n"
"|                       |\n"
"=========================\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:435
msgid "The number (2) is the `personId` in our example:"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:436
#, no-wrap
msgid "Summary"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-06-23-supersonic-subatomic-graphql.adoc:440
msgid "This is a short and quick introduction to MicroProfile GraphQL that is now available in Quarkus.  There are many more https://download.eclipse.org/microprofile/microprofile-graphql-1.0.2/microprofile-graphql.html[features] and even more https://github.com/eclipse/microprofile-graphql/issues[planned], so stay tuned."
msgstr ""
