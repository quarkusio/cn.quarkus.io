# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:1
#, no-wrap
msgid "cescoffier"
msgstr ""

#. type: YAML Front Matter: date
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:1
#, no-wrap
msgid "2020-09-29"
msgstr ""

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:1
#, no-wrap
msgid "post"
msgstr ""

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:1
#, no-wrap
msgid "Running concurrent asynchronous actions with Mutiny"
msgstr ""

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:1
#, no-wrap
msgid "reactive mutiny async"
msgstr ""

#. type: YAML Front Matter: title
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:1
#, no-wrap
msgid "Concurrent asynchronous actions with Mutiny"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:13
msgid "This week, I've been asked about a widespread use case around concurrency.  This user wanted to call two microservices _in parallel_, and when both results are received, join them and continue the processing.  Basically, the following pattern:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:15
msgid "image:/assets/images/posts/mutiny-concurrent-uni/pattern.png[width=50%]"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:18
msgid "In a non-reactive approach, both calls would block the caller thread, and, except if you use a worker thread pool, the calls are not concurrent.  Even if you use a worker thread pool, these threads are likely blocked, consuming resources for nothing."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:20
msgid "But no worries, Quarkus reactive nature and Mutiny have everything to handle this scenario."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:22
msgid "## Let's call two services"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:27
msgid "In this post, I'm going to use the Vert.x Web Client, a reactive HTTP client.  It leverages non-blocking I/O to be highly performant and truly non-blocking.  It does not rely on a hidden thread pool.  You can also use the Quarkus Rest Client, but, at the moment, it still uses worker threads."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:30
msgid "No matter which client we use, we need some remote services to call.  Let's use:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:32
msgid "https://programming-quotes-api.herokuapp.com/ - to get a quote about programming"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:33
msgid "https://api.chucknorris.io/ - to get a quote about _Chuck Norris_"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:38
msgid "First thing first, let's see the code required to retrieve our quotes: While both services are similar, the structure of the response differs a little bit.  So we end up with:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:47
#, no-wrap
msgid ""
"private static Uni<String> getProgrammingQuote(WebClient client) {\n"
"    return client.getAbs(PROGRAMMING_QUOTE)\n"
"            .as(BodyCodec.jsonObject())\n"
"            .send()\n"
"            .onItem().transform(r -> r.body().getString(\"en\") + \" (\" + r.body().getString(\"author\") + \")\");\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:54
#, no-wrap
msgid ""
"private static Uni<String> getChuckNorrisQuote(WebClient client) {\n"
"    return client.getAbs(CHUCK_NORRIS_QUOTE)\n"
"            .as(BodyCodec.jsonObject())\n"
"            .send()\n"
"            .onItem().transform(r -> r.body().getString(\"value\"));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:62
msgid "These two methods receive a `WebClient`, invoke the services, retrieve the JSON responses, and extract them.  They both return a `Uni`.  So they are asynchronous.  The result (the quote) is provided _later_ when available.  Also, returning a `Uni` means that the services will only be invoked when someone subscribes to the returned `Uni`.  If you subscribe multiple times, you will call the service multiple times."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:64
msgid "## Combining Unis"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:67
msgid "So far, we have two methods to call our services.  But we want to call them concurrently, as depicted above."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:69
msgid "Mutiny provides a way to _combine_ items produced by `Unis`:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:75
#, no-wrap
msgid ""
"Uni<Tuple2<String, String>> tuple = Uni.combine().all()\n"
"    .unis(getProgrammingQuote(client), getChuckNorrisQuote(client))\n"
"    .asTuple();\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:79
msgid "When someone subscribes to the `Uni tuple`, it subscribes to the `getProgrammingQuote(client)` and `getChuckNorrisQuote(client)` `Unis`, which invoke the services.  So the requests are emitted, and the services are invoked concurrently."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:81
msgid "When both responses are available, it combines them into a _Tuple_, a simple structure carrying multiple items."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:85
msgid "In other words, concurrently calling our services is pretty straightforward.  Just create the `Unis` representing the services or the asynchronous action you want to achieve and combine them using `Uni.combine().all()` You can decide to combine the results using _tuples_ or to use a combinator function."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:87
msgid "## Putting everything together"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:92
#, no-wrap
msgid ""
"// Create a Web Client\n"
"WebClient client = WebClient.create(vertx);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:97
#, no-wrap
msgid ""
"// Combine the result of our 2 Unis in a tuple\n"
"Uni.combine().all()\n"
"        .unis(getProgrammingQuote(client), getChuckNorrisQuote(client))\n"
"        .asTuple()\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:104
#, no-wrap
msgid ""
"        // Subscribe (which will trigger the calls)\n"
"        .subscribe().with(tuple -> {\n"
"    System.out.println(\"Programming Quote: \" + tuple.getItem1());\n"
"    System.out.println(\"Chuck Norris Quote: \" + tuple.getItem2());\n"
"});\n"
"----        \n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:107
#, no-wrap
msgid ""
"That's it! \n"
"If you want to see this code in action, check this https://gist.github.com/cescoffier/1ed68bef12b798529e10350f77686e9a[gist]. You even can run it directly with JBang:\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:109
#, no-wrap
msgid "[source,bash]\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:111
msgid "jbang https://gist.github.com/cescoffier/1ed68bef12b798529e10350f77686e9a"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:113
#, no-wrap
msgid "Enjoy!\n"
msgstr ""
