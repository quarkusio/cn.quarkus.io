# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-09-07 16:15+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy, no-wrap
msgid "Introducing the new Redis API - How to cache with Redis?"
msgstr "介绍一下新的Redis API - 如何用Redis进行缓存？"

#. type: YAML Front Matter: synopsis
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy, no-wrap
msgid "How to implement a simple cache with the Redis data source"
msgstr "如何用Redis数据源实现一个简单的缓存"

#: _posts/2022-09-07-redis-api-intro.adoc
msgid ""
"In Quarkus 2.11, we introduced a new API to interact with Redis.\n"
"The Redis DataSource APIs aim to be simpler, more extensive, and type-safe.\n"
"Under the hood, it uses a performant, non-blocking client (that you can also use if you prefer low-level APIs)."
msgstr ""

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "In this post, we will introduce this new API and use it to build a cache, one of the main Redis use cases."
msgstr "在这篇文章中，我们将介绍这个新的API，并使用它来建立一个缓存，这是Redis的主要用例之一。"

#. type: Title ==
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy, no-wrap
msgid "What is Redis?"
msgstr "什么是Redis？"

#: _posts/2022-09-07-redis-api-intro.adoc
msgid ""
"https://redis.io/[Redis] is an open-source, in-memory data store that can be used as a database, cache, streaming engine, and message broker.\n"
"Redis is often used as real-time data stores,  cache backends, data storage for geospatial entities, and so on.\n"
"To interact with Redis, you emit _commands_ and receive responses.\n"
"These commands target _keys_ and manipulate the associated data.\n"
"There are many commands divided into groups, including:"
msgstr ""

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "the BitMap group to manipulate bit vectors"
msgstr "用BitMap组来操作位向量"

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "the Generic group to manipulate the keys"
msgstr "通用组来操作钥匙"

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "the Geospatial group to manipulate geo items"
msgstr "通过地理空间组来操作地理项目"

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "the Hash group to manipulate sets of `+field -> item+` pairs (like `Map` in Java)"
msgstr "Hash组来操作 `field -> item` 对的集合（像Java中的 `Map` ）。"

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "the List, Set, and Sorted Set groups to store list, set, and sorted set of items"
msgstr "列表、集和排序集组，以存储列表、集和排序集的项目。"

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "the Pub/Sub group to emit messages on channels and receive them"
msgstr "在信道上发出信息和接收信息的Pub/Sub组"

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "the String group to manipulate value (in Redis, Strings represent values including binary, numbers...)"
msgstr "操作值的字符串组（在Redis中，字符串代表包括二进制、数字在内的值。）"

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "the Transaction group to execute transactions"
msgstr "交易组来执行交易"

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "You can find the complete list of commands on the https://redis.io/commands/[Redis Commands page]."
msgstr "你可以在 link:https://redis.io/commands/[Redis命令页面] 找到完整的命令列表。"

#. type: Title ==
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy, no-wrap
msgid "The new Quarkus Redis API"
msgstr "新的Quarkus Redis API"

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "The entry point of the new Quarkus Redis API are the two _data sources_ interfaces:"
msgstr "新的Quarkus Redis API的入口是两个 _数据源_ 接口。"

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "`io.quarkus.redis.datasource.RedisDataSource` - the imperative (blocking) API"
msgstr " `io.quarkus.redis.datasource.RedisDataSource` - 命令式（阻塞式）API"

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "`io.quarkus.redis.datasource.ReactiveRedisDataSource` - the reactive API"
msgstr " `io.quarkus.redis.datasource.ReactiveRedisDataSource` - 反应式API"

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "As mentioned above, these APIs are implemented on top of a lower-level client:"
msgstr "如上所述，这些API是在一个较低级别的客户端之上实现的。"

#: _posts/2022-09-07-redis-api-intro.adoc
msgid ""
"The data source APIs follow the command group structure.\n"
"For each group, you retrieve an object dedicated to emitting the commands of that group.\n"
"In that regard, this new API is not an abstraction of Redis.\n"
"You still need to know the command you need."
msgstr ""

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "For example, to manipulate a `Set<Person>`, you will use the following code:"
msgstr "例如，要操作一个 `Set<Person>` ，你将使用以下代码。"

#: _posts/2022-09-07-redis-api-intro.adoc
msgid ""
"The API manages the serialization and deserialization for you.\n"
"Currently, it uses JSON for objects (using Jackson), but soon the API will offer more advanced features."
msgstr ""

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "This example uses the imperative API, but the reactive API is symmetric."
msgstr "这个例子使用了命令式的API，但反应式API是对称的。"

#. type: Title ==
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy, no-wrap
msgid "Implementing a Redis cache"
msgstr "实现Redis缓存"

#: _posts/2022-09-07-redis-api-intro.adoc
msgid ""
"Time for more cohesive code.\n"
"Let's imagine the following https://github.com/cescoffier/quarkus-redis-demo[application]:"
msgstr ""

#: _posts/2022-09-07-redis-api-intro.adoc
msgid ""
"We have a database storing `Heroes`, a lot of them.\n"
"You need to return the 3 most powerful heroes based on their level.\n"
"Of course, you can use your SQL ninja skills, but let's imagine that this code was coded a long time ago, cannot be changed, and is very time-consuming:"
msgstr ""

#: _posts/2022-09-07-redis-api-intro.adoc
msgid ""
"So, one solution to avoid having to re-compute this set of heroes on every call is to cache the result for a bit of time, let's say 10 seconds.\n"
"Let's consider that it's acceptable in this case to return a potentially outdated result set."
msgstr ""

#: _posts/2022-09-07-redis-api-intro.adoc
msgid ""
"To use the new Redis API, we need to use the `redis-client` extension.\n"
"For users from the previous API, it's the same extension. The previous API is still available but is deprecated, and we plan to remove it at some point."
msgstr ""

#: _posts/2022-09-07-redis-api-intro.adoc
msgid "Now that we can use the  `RedisDataSource`, we can implement the https://github.com/cescoffier/quarkus-redis-demo/blob/735f8cdbe579ef5c13631e8ec6e3ddad6821a3cb/src/main/java/me/escoffier/quarkus/supes/MyRedisCache.java[`MyRedisCache` class] as follows:"
msgstr ""

#: _posts/2022-09-07-redis-api-intro.adoc
msgid ""
"Note that it's a simple cache without any fancy features.\n"
"Redis provides more advanced commands to implement more complicated strategies."
msgstr ""

#: _posts/2022-09-07-redis-api-intro.adoc
msgid ""
"The constructor receives the `RedisDataSource` and gets an object to manipulate Redis _values_.\n"
"In our case, https://github.com/cescoffier/quarkus-redis-demo/blob/735f8cdbe579ef5c13631e8ec6e3ddad6821a3cb/src/main/java/me/escoffier/quarkus/supes/Ranking.java[`Ranking`] (the top 3 heroes)"
msgstr ""

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "The `get` method emits the Redis `get` command to retrieve an already stored ``Ranking(``null` if it does not)."
msgstr " `get` 方法发出Redis `get` 命令来检索已经存储的 `Ranking(` null`，如果没有的话）。"

#: _posts/2022-09-07-redis-api-intro.adoc
msgid ""
"The `set` method emits the Redis `set` command and store a `Ranking` to the passed key.\n"
"The command also configures the expiration time.\n"
"So, after 10 seconds, the value is removed by Redis.\n"
"As mentioned above, the Ranking instance is serialized into a JSON document."
msgstr ""

#: _posts/2022-09-07-redis-api-intro.adoc
msgid ""
"The `evict` method allows removing the stored value.\n"
"Multiple commands can do this, such as the `del` or `getdel` (which also returned the stored value)."
msgstr ""

#: _posts/2022-09-07-redis-api-intro.adoc
msgid ""
"For our application, we need something a bit more fancy.\n"
"We want to check if we have a value in Redis.\n"
"If so, uses that value, and if not, compute the value and store it.\n"
"This is implemented in the `getOrSetIfAbsent`."
msgstr ""

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "Now, we can just use this cache to avoid the heavy computation on every call (check the https://github.com/cescoffier/quarkus-redis-demo/blob/735f8cdbe579ef5c13631e8ec6e3ddad6821a3cb/src/main/java/me/escoffier/quarkus/supes/HeroService.java[HeroService] class to see the complete code):"
msgstr "现在，我们可以直接使用这个缓存来避免每次调用时的繁重计算（查看 link:https://github.com/cescoffier/quarkus-redis-demo/blob/735f8cdbe579ef5c13631e8ec6e3ddad6821a3cb/src/main/java/me/escoffier/quarkus/supes/HeroService.java[HeroService] 类的完整代码）。"

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "To run the application, just start `mvn quarkus:dev` and open your browser to http://localhost:8080:"
msgstr "要运行该应用程序，只需启动 `mvn quarkus:dev` ，并打开浏览器到 http://localhost:8080 "

#: _posts/2022-09-07-redis-api-intro.adoc
msgid ""
"To see the cache in action, check the time displayed on the page and refresh the page.\n"
"Don't forget that the cached value is only valid for 10 seconds (as set in `MyRedisCache`).\n"
"So, if you wait 10 seconds, it will recompute the result."
msgstr ""

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "Quarkus comes with a Redis Dev Service that automatically starts a Redis instance on your machine and configures the application. Note that you need to be able to run containers locally to use this feature."
msgstr "Quarkus自带的Redis Dev Service可以在你的机器上自动启动一个Redis实例并配置应用程序。注意，你需要能够在本地运行容器才能使用这个功能。"

#. type: Title ==
#: _posts/2022-09-07-redis-api-intro.adoc
#, no-wrap
msgid "Conclusion"
msgstr "解决方案"

#: _posts/2022-09-07-redis-api-intro.adoc
msgid ""
"This post briefly introduces the new Redis API and demonstrates its usage with a cache implementation example.\n"
"The complete code is available from this  https://github.com/cescoffier/quarkus-redis-demo[GitHub repo]."
msgstr ""

#: _posts/2022-09-07-redis-api-intro.adoc
msgid ""
"The API supports many more features, such as geospatial data, pub/sub, and transactions, which could be used to improve the `getOrSetIfAbsent`  method.\n"
"We will cover more advanced use cases in future posts."
msgstr ""

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
msgid "You can find more details about the new API in the:"
msgstr ""

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
msgid "https://quarkus.io/guides/redis[Quarkus Getting Started guide]"
msgstr ""

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
msgid "https://quarkus.io/guides/redis-reference[Quarkus Redis Reference guide]"
msgstr ""

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
msgid "Also, the Quarkus team is working on integrating https://github.com/quarkusio/quarkus/issues/27785[Redis as a cache implementation]. So, eventually, you will just need to use `@CacheResult`, and let the magic happens."
msgstr ""
