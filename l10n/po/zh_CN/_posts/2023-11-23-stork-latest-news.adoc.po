# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-11-28 15:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy, no-wrap
msgid "SmallRye Stork Unwrapped: Exploring New Features and Enhancements"
msgstr "揭开 SmallRye Stork 的神秘面纱：探索新功能和增强功能"

#. type: YAML Front Matter: synopsis
#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy, no-wrap
msgid "Explore in detail the latest features added to Smallrye Stork"
msgstr "详细了解 Smallrye Stork 的最新功能"

#. type: Plain text
#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "Since its initial release in January 2022, Stork has undergone significant development, introducing new features that extended its capabilities and improved developer experience."
msgstr "自 2022 年 1 月首次发布以来，Stork 经历了重大发展，引入了新功能，扩展了其功能并改善了开发人员的体验。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid ""
"This blog post takes a deep dive into the evolution of SmallRye Stork beyond its initial release, providing a detailed exploration of its fresh additions.\n"
"But first, let's describe briefly what Stork can do for you.\n"
"SmallRye Stork is a client-side service discovery and selection framework.\n"
"It provides out-of-the-box integrations with Kubernetes, Eureka, and Hashicorp Consul, as well as a set of selection strategies, including round-robin, power-of-two-choices and best response time.\n"
"But the most noteworthy feature of Stork is its extensibility. You can create your own service selection strategy or plug in your own service discovery mechanism.\n"
"If you don't know it yet, a good way to get started is to take a look at our https://quarkus.io/guides/stork[getting started guide]."
msgstr "这篇博文将深入探讨 SmallRye Stork 在最初发布之后的演变，详细介绍其新增功能。但首先，让我们简要介绍一下 Stork 能为你做些什么。SmallRye Stork 是一个客户端服务发现和选择框架。它提供了与 Kubernetes、Eureka 和 Hashicorp Consul 的开箱即用集成，以及一系列选择策略，包括循环、二选一和最佳响应时间。不过，Stork 最值得一提的是它的可扩展性。你可以创建自己的服务选择策略，或插入自己的服务发现机制。如果你还不了解它，可以看看我们的入门 link:https://quarkus.io/guides/stork[指南] 。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid ""
"Additionally, our documentation has also been enhanced, offering comprehensive guides for both seasoned users and those taking their first steps with Stork.\n"
"To further support your exploration, there is https://www.youtube.com/watch?v=fCNwxPDGt7Q[a video] and supplementary content that show Stork's capabilities in detail, don’t hesitate to check them out.\n"
"Don't have much time? Don't worry, we have the https://www.youtube.com/shorts/F4Gd1I1zfjs[perfect video] to understand Stork in less than 1 minute."
msgstr "此外，我们的文档也得到了增强，为经验丰富的用户和初次使用 Stork 的用户提供了全面的指南。为了进一步支持您的探索，我们还提供了 link:https://www.youtube.com/watch?v=fCNwxPDGt7Q[视频] 和补充内容，详细介绍了 Stork 的功能，请随时查看。没有太多时间？别担心，我们有一个 link:https://www.youtube.com/shorts/F4Gd1I1zfjs[完美的视频] ，让您在 1 分钟内了解 Stork。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid ""
"With the latest added additions we highlight how Stork\n"
"continues to reshape the client-side service discovery and selection landscape."
msgstr "通过最新增加的功能，我们重点介绍了 Stork 如何继续重塑客户端服务发现和选择的格局。"

#. type: Plain text
#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "Let's now have a look at the most interesting additions added to Stork since its initial release."
msgstr "现在，让我们来看看 Stork 自发布以来新增的最有趣的功能。"

#. type: Title ==
#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy, no-wrap
msgid "Programmatic service definition"
msgstr "计划服务定义"

#. type: Plain text
#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "Initially, you had to configure Stork in the application configuration. You needed to configure the service discovery and selection (optionally) for each _service_ you wanted to discover and select."
msgstr "最初，你必须在应用程序配置中配置 Stork。你需要为你想要发现和选择的每项 _服务_ 配置服务发现和选择（可选）。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid ""
"Stork, from the 1.2.0 version, proposes a programmatic API to allow users to define the service discovery and selection configuration through code rather\n"
"than through declarative or external configuration files. This means that you can use the full expressive power of Java to explicitly specify new service\n"
"definitions and do manual lookup and selection. This is particularly beneficial when the configuration requirements of an application are not known until runtime,\n"
"and it provides the ability to adjust settings without restarting the application."
msgstr "从 1.2.0 版本开始，Stork 就提出了一种编程式 API，允许用户通过代码而非声明式或外部配置文件来定义服务发现和选择配置。这意味着你可以使用 Java 的全部表达能力来明确指定新的服务定义，并进行手动查找和选择。当应用程序的配置要求在运行时才被知晓时，这一点尤为有利，因为它提供了在不重启应用程序的情况下调整设置的能力。"

#. type: Plain text
#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "When using the programmatic API of Stork, you can:"
msgstr "使用 Stork 的程序化 API 时，您可以"

#. type: Plain text
#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "Retrieve the singleton `Stork` instance. This instance is configured with the set of `Services` it manages."
msgstr "检索单例 `Stork` 实例。该实例配置有其管理的 `Services` 。"

#. type: Plain text
#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "Register new service definition."
msgstr "注册新的服务定义。"

#. type: Plain text
#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "Retrieve the `Service` you want to use. Each Service is associated with a name."
msgstr "检索要使用的 `Service` 。每个服务都有一个名称。"

#. type: Plain text
#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "Retrieve the `ServiceInstance`, which will provide the metadata to access the actual instance."
msgstr "读取 `ServiceInstance` ，它将为访问实际实例提供元数据。"

#. type: Plain text
#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "In the following code, we use Stork programmatic API to set up and configure services with different discovery methods and selection strategies:"
msgstr "在下面的代码中，我们使用 Stork 编程 API 来设置和配置具有不同发现方法和选择策略的服务："

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid ""
"It’s important to note that the choice between programmatic and declarative configuration often depends on the specific requirements and constraints of\n"
"your application."
msgstr "需要注意的是，在编程式配置和声明式配置之间做出选择，往往取决于应用程序的具体要求和限制。"

#. type: Title ==
#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy, no-wrap
msgid "Service discovery and selection strategies provided as CDI beans."
msgstr "以 CDI bean 的形式提供服务发现和选择策略。"

#. type: Plain text
#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "The second noticeable improvement is the integration with CDI."
msgstr "第二个明显的改进是与 CDI 的集成。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid ""
"Users may prefer using a framework that leverages CDI mechanism to easily manage and inject dependencies and have a more testable and maintainable code.\n"
"Stork can now do that. Starting from the 2.0.1 release, users can use the service discovery and load balancer as beans.\n"
"For that, it looks for CDI beans during the initialization in addition to the SPI providers.\n"
"It is worth mentioning that this enhancement also contributes to improving the Quarkus experience."
msgstr "用户可能更喜欢使用利用 CDI 机制的框架，以轻松管理和注入依赖关系，并获得更可测试和可维护的代码。Stork 现在就能做到这一点。从 2.0.1 版开始，用户可以将服务发现和负载平衡器作为 Bean 使用。为此，除了 SPI 提供者外，它还会在初始化过程中查找 CDI Bean。值得一提的是，这一增强功能还有助于改善 Quarkus 体验。"

#. type: Title ==
#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy, no-wrap
msgid "New service discovery approaches added."
msgstr "新增服务发现方法。"

#. type: Plain text
#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "We are happy to announce a few added service discovery strategies using DNS and Knative."
msgstr "我们很高兴地宣布，我们增加了一些使用 DNS 和 Knative 的服务发现策略。"

#. type: Plain text
#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "With the Knative service discovery, Smallrye Stork introduces seamless service discovery through its serverless infrastructure, even when there are no 'pod' running."
msgstr "借助 Knative 服务发现功能，Smallrye Stork 通过其无服务器基础设施引入了无缝服务发现功能，即使在没有 \"pod \"运行的情况下也是如此。"

#. type: Plain text
#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "The Stork Knative service discovery implementation is very similar to the Kubernetes one."
msgstr "Stork Knative 服务发现实现与 Kubernetes 非常相似。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid ""
"Stork will ask for https://knative.dev/docs/serving/reference/serving-api/#serving.knative.dev/v1.Service[Knative services] to the cluster instead of vanilla https://kubernetes.io/docs/concepts/services-networking/service/#service-resource[Kubernetes services] used by the Kubernetes implementation.\n"
"Again, to do so, Stork uses https://github.com/fabric8io/kubernetes-client/blob/master/extensions/knative/client/src/main/java/io/fabric8/knative/client/KnativeClient.java[Fabric 8 Knative Client] which is just an extension of Fabric8 Kubernetes Client."
msgstr "Stork 会向集群请求 link:https://knative.dev/docs/serving/reference/serving-api/#serving.knative.dev/v1.Service[Knative 服务] ，而不是 Kubernetes 实现所使用的 link:https://kubernetes.io/docs/concepts/services-networking/service/#service-resource[Kubernetes 服务] 。为此，Stork 再次使用 link:https://github.com/fabric8io/kubernetes-client/blob/master/extensions/knative/client/src/main/java/io/fabric8/knative/client/KnativeClient.java[Fabric 8 Knative Client] ，它只是 Fabric8 Kubernetes Client 的扩展。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid ""
"The DNS-based service discovery is also here to stay. When a service has registered one or more instances in a Domain Name System (DNS) server,\n"
"Stork will be able to discover them by querying the DNS. This strategy is simple and widely used, so Stork could not fail to implement it."
msgstr "基于 DNS 的服务发现也将继续存在。当一项服务在域名系统（DNS）服务器上注册了一个或多个实例时，Stork 就能通过查询 DNS 发现它们。这种策略既简单又被广泛使用，所以 Stork 不可能不实施。"

#. type: Title ==
#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy, no-wrap
msgid "New sticky service selection strategy"
msgstr "新的粘性服务选择战略"

#. type: Plain text
#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "The Stork load balancer family has been extended with a new one: the sticky service selection implementation."
msgstr "Stork 负载均衡器家族又添新成员：粘性服务选择实现。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid ""
"The sticky service selection implemented by Stork refers to a strategy where a client \"sticks\" to a particular instance of a service until it fails,\n"
"then it selects another one. It is also possible to configure a backoff period for specifying how long a failing service instance should be retried.\n"
"This can be useful in scenarios where maintaining a consistent connection to the same instance is beneficial, such as when dealing with sessions or\n"
"stateful applications."
msgstr "Stork 实现的粘性服务选择指的是一种策略，即客户端 \"坚持 \"使用某个特定的服务实例，直到它出现故障，然后再选择另一个。还可以配置一个延迟时间，用于指定重试失败服务实例的时间。在处理会话或有状态应用程序等有利于与同一实例保持一致连接的情况下，这一点非常有用。"

#. type: Title ==
#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy, no-wrap
msgid "Enhanced service instances cache expiration policy."
msgstr "增强服务实例缓存过期策略。"

#. type: Plain text
#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "Since almost the first release, Stork has provided in-memory caching of discovered instances by extending the `CachingServiceDiscovery` class."
msgstr "几乎从第一个版本开始，Stork 就通过扩展 `CachingServiceDiscovery` 类为已发现的实例提供内存缓存。"

#. type: Plain text
#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "As of version 1.3, this capability has been expanded to allow the retention of the cached service instances for a specified duration and the implementation of custom business logic for decision-making and data expiration."
msgstr "从 1.3 版开始，这一功能得到了扩展，允许在指定期限内保留缓存服务实例，并允许执行自定义业务逻辑以进行决策和数据过期。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid ""
"This enhancement was driven by the specific requirements of Kubernetes service discovery as contacting the cluster too frequently can result in performance\n"
"problems. So, out of the box, Stork Kubernetes service discovery now comes with a tailored cache expiration strategy to keep service instances until an event occurs."
msgstr "这一改进是由 Kubernetes 服务发现的特定需求驱动的，因为过于频繁地联系集群会导致性能问题。因此，Stork Kubernetes 服务发现开箱即用，现在还配备了量身定制的缓存过期策略，以保留服务实例，直到事件发生。"

#. type: Plain text
#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "If you would like to do so for your custom service discovery implementations, you need:"
msgstr "如果您想为您的自定义服务发现实施这样做，您需要这样做："

#. type: Plain text
#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "Extend the CachingServiceDiscovery as mentioned above."
msgstr "如上所述，扩展 CachingServiceDiscovery。"

#. type: Plain text
#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "Implement the `cache` method where the expiration strategy is defined."
msgstr "执行 `cache` 方法，其中定义了到期策略。"

#. type: Plain text
#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "Invalidate the cache when the expiration condition evaluates to `true`."
msgstr "当过期条件求值为 `true` 时，缓存失效。"

#. type: Plain text
#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "Look at the example bellow:"
msgstr "请看下面的例子："

#. type: Plain text
#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "You can check the https://github.com/smallrye/smallrye-stork/blob/main/service-discovery/kubernetes/src/main/java/io/smallrye/stork/servicediscovery/kubernetes/KubernetesServiceDiscovery.java[Kubernetes Service Discovery code] for further details about an event-based invalidation example."
msgstr "您可以查看 link:https://github.com/smallrye/smallrye-stork/blob/main/service-discovery/kubernetes/src/main/java/io/smallrye/stork/servicediscovery/kubernetes/KubernetesServiceDiscovery.java[Kubernetes 服务发现代码] ，了解基于事件的失效示例的更多详情。"

#. type: Title ==
#: _posts/2023-11-23-stork-latest-news.adoc
#, no-wrap
msgid "Observability"
msgstr "可观察性"

#. type: Plain text
#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "Observability refers to the ability to understand and gain insights into the internal workings and behaviors of a system through the analysis of its external outputs or observations. Stork observability support has been integrated in Quarkus 3.6.0 release (release planned for next week). This addition brings automated observability to the forefront of service discovery and selection providing a window into how Stork behaves in real-time. Now you can effortlessly monitor metrics such as service discovery and selection durations and error rates."
msgstr "可观察性是指通过分析系统的外部输出或观察结果来了解和洞察系统内部运作和行为的能力。Quarkus 3.6.0 版本（计划于下周发布）已集成了 Stork 可观察性支持。这一新增功能将自动可观察性带到了服务发现和选择的最前沿，为了解 Stork 的实时行为提供了一个窗口。现在，您可以毫不费力地监控服务发现和选择的持续时间以及错误率等指标。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid ""
"If you're leveraging Stork within your Quarkus application, now, you can easily check and analyze metrics such as service discovery and selection\n"
"response times and errors directly in Prometheus. Check the https://quarkus.io/version/main/guides/stork-reference#configure-stork-observability[Stork reference guide] for details."
msgstr "如果您在 Quarkus 应用程序中使用 Stork，现在就可以直接在 Prometheus 中轻松检查和分析服务发现和选择响应时间以及错误等指标。详情请查看 link:https://quarkus.io/version/main/guides/stork-reference#configure-stork-observability[Stork 参考指南] 。"

#. type: Plain text
#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "In conclusion, all these advancements in Stork signify our commitment to enhancing your experience with service discovery and selection."
msgstr "总之，Stork 的所有这些进步都表明，我们致力于提升您在发现和选择服务方面的体验。"

#. type: Plain text
#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "Stay tuned for more updates. Your feedback is invaluable to us so share it and contribute to making Stork even better."
msgstr "敬请关注更多更新。您的反馈意见对我们来说非常宝贵，因此请与我们分享您的反馈意见，为使 Stork 更上一层楼做出贡献。"
