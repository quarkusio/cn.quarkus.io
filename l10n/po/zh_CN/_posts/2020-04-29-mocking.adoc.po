# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2020-04-29-mocking.adoc
#, fuzzy, no-wrap
msgid "Mocking CDI beans in Quarkus"
msgstr "在Quarkus中嘲弄CDI Bean"

#. type: YAML Front Matter: synopsis
#: _posts/2020-04-29-mocking.adoc
#, fuzzy, no-wrap
msgid "Quarkus 1.4 introduces some interesting new capabilities for mocking CDI beans."
msgstr "Quarkus 1.4为嘲弄CDI Bean引入了一些有趣的新功能。"

#: _posts/2020-04-29-mocking.adoc
msgid ""
"Testing Quarkus applications has been an important part of the Quarkus Developer Joy, which is why\n"
"`@QuarkusTest` for testing JVM applications and `@NativeTest` for black-box testing of the native images have been\n"
"part of Quarkus since the first release.\n"
"A recurring request however amongst our community members has been to have Quarkus allow them to selectively\n"
"mock certain CDI beans for specific tests. This post will introduce the new mocking capabilities\n"
"that `1.4` brings which aim to address those concerns, while also providing a glimpse of additional\n"
"improvements in this are that will be part of `1.5`."
msgstr ""

#. type: Title ==
#: _posts/2020-04-29-mocking.adoc
#, fuzzy, no-wrap
msgid "Old approach"
msgstr "老办法"

#. type: Plain text
#: _posts/2020-04-29-mocking.adoc
#, fuzzy
msgid "Let us assume that a Quarkus application contains the following (purely contrived) bean:"
msgstr "让我们假设一个Quarkus应用程序包含以下（纯属臆造的）bean。"

#: _posts/2020-04-29-mocking.adoc
msgid ""
"When testing the `generateSendInvoice` method we most likely don't want to use the actual `InvoiceNotificationService` as it would\n"
"result in sending real notifications. With the old Quarkus approach one could \"override\"\n"
"the `InvoiceNotificationService` in tests by adding the following bean in the test sources:"
msgstr ""

#: _posts/2020-04-29-mocking.adoc
msgid ""
"When Quarkus scanned this code, the use of `@Mock` would result in `MockInvoiceNotificationService` being used as\n"
"the implementation of `InvoiceNotificationService` in every place where a `InvoiceNotificationService` bean was injected\n"
"(in CDI terms this is called an injection point)."
msgstr ""

#. type: Plain text
#: _posts/2020-04-29-mocking.adoc
#, fuzzy
msgid "Although this mechanism is fairly straightforward to use, it nonetheless suffers from a few problems:"
msgstr "尽管这种机制使用起来相当简单，但它仍然存在一些问题。"

#: _posts/2020-04-29-mocking.adoc
msgid ""
"A new class (or a new CDI producer method) needs to be used for each bean type that requires a mock. In a large application where a lot of\n"
"mocks are needed, the amount of boilerplate code increases unacceptably."
msgstr ""

#: _posts/2020-04-29-mocking.adoc
msgid ""
"There is no way for a mock to be used for certain tests only. This is due to the fact that beans that are annotated with `@Mock` are normal\n"
"CDI beans (and are therefore used throughout the application).\n"
"Depending on what needs to be tested, this can be very problematic."
msgstr ""

#: _posts/2020-04-29-mocking.adoc
msgid ""
"There is a no out of the box integration with https://site.mockito.org/[Mockito], which is the de-facto standard for\n"
"mocking in Java applications. Users can certainly use Mockito (most commonly by using a CDI producer method), but there\n"
"is boilerplate code involved."
msgstr ""

#. type: Title ==
#: _posts/2020-04-29-mocking.adoc
#, fuzzy, no-wrap
msgid "New approach"
msgstr "新方法"

#: _posts/2020-04-29-mocking.adoc
msgid ""
"Starting with Quarkus `1.4`, users have the ability to create and inject per-test mocks for normal scoped CDI beans using\n"
"`io.quarkus.test.junit.QuarkusMock`. Moreover, Quarkus provides out of the box integration with Mockito\n"
"allowing for zero effort mocking of CDI beans using the `io.quarkus.test.junit.mockito.@InjectMock` annotation."
msgstr ""

#. type: Title ===
#: _posts/2020-04-29-mocking.adoc
#, fuzzy, no-wrap
msgid "Using QuarkusMock"
msgstr "使用QuarkusMock"

#: _posts/2020-04-29-mocking.adoc
msgid ""
"`QuarkusMock` provides the foundation for mocking normal scoped CDI beans and is also used under the hood by `@InjectMock`, so let us examine\n"
"it first. The best way to do this is using an example:"
msgstr ""

#: _posts/2020-04-29-mocking.adoc
msgid "This part of the  example uses Mockito for convenience's sake only. `QuarkusMock` is not tied to Mockito in any way."
msgstr ""

#: _posts/2020-04-29-mocking.adoc
msgid ""
"We use `QuarkusMock.installMockForType()` because the injected bean instance is not yet available. Very important to note is that\n"
"the mock setup in a JUnit `@BeforeAll` method, is used for *all* test methods of the class (other test classes are *not* affected by this)."
msgstr ""

#. type: Plain text
#: _posts/2020-04-29-mocking.adoc
#, fuzzy
msgid "The mock for `MockableBean1` is being used as it was defined for all test methods of the class."
msgstr " `MockableBean1` 的模拟正在被使用，因为它被定义为类的所有测试方法。"

#. type: Plain text
#: _posts/2020-04-29-mocking.adoc
#, fuzzy
msgid "Since no mock has been set up for `MockableBean2`, the CDI bean is being used."
msgstr "由于没有为 `MockableBean2` ，所以正在使用CDI Bean。"

#. type: Plain text
#: _posts/2020-04-29-mocking.adoc
#, fuzzy
msgid "We use `QuarkusMock.installMockForInstance()` here because inside the test method, the injected bean instance is available."
msgstr "我们在这里使用 `QuarkusMock.installMockForInstance()` ，因为在测试方法里面，注入的bean实例是可用的。"

#. type: Plain text
#: _posts/2020-04-29-mocking.adoc
#, fuzzy
msgid "As we used `BonjourMockableBean2` as a mock `MockableBean2`, this class is now used."
msgstr "由于我们用 `BonjourMockableBean2` 作为模拟 `MockableBean2` ，现在使用这个类。"

#: _posts/2020-04-29-mocking.adoc
msgid ""
"`QuarkusMock` can be used for any normal scoped CDI bean - the most common of which are `@ApplicationScoped` and `@RequestScoped`.\n"
"This means that beans with `@Singleton` and `@Dependent` scope *cannot* be used with `QuarkusMock`."
msgstr ""

#. type: delimited block =
#: _posts/2020-04-29-mocking.adoc
#, fuzzy
msgid "Furthermore, `QuarkusMock` will not work properly when it's used in tests that run parallel in the same JVM."
msgstr "此外， `QuarkusMock` ，当它被用于在同一JVM中并行运行的测试时，将无法正常工作。"

#: _posts/2020-04-29-mocking.adoc
msgid ""
"Returning to the original example of the blog post, we could get rid of the `MockInvoiceNotificationService` class and\n"
"instead use something like the following:"
msgstr ""

#: _posts/2020-04-29-mocking.adoc
msgid ""
"Note that in this case we don't need to create a new class implementing `InvoiceNotificationService`.\n"
"Moreover, we have full and per test control over the mock, something which grants up a lot of flexibility when writing tests."
msgstr ""

#: _posts/2020-04-29-mocking.adoc
msgid ""
"For example, if we had some other test where we did want to use the real `InvoiceNotificationService`, then in that test\n"
"we would simply not do any mocking of `InvoiceNotificationService`."
msgstr ""

#: _posts/2020-04-29-mocking.adoc
msgid ""
"If yet another test needed to mock `InvoiceNotificationService` in some other way, then it would be perfectly free to do so,\n"
"using the same method `OrderServiceTest` uses, without causing any problems to the other tests."
msgstr ""

#. type: Plain text
#: _posts/2020-04-29-mocking.adoc
#, fuzzy
msgid "Finally, note in the example above we didn't mock `InvoiceService`, which meant that the real `InvoiceService` was being used in `OrderServiceTest`."
msgstr "最后，注意在上面的例子中，我们没有模拟 `InvoiceService` ，这意味着真正的 `InvoiceService` 被用在 `OrderServiceTest` 。"

#. type: Title ===
#: _posts/2020-04-29-mocking.adoc
#, fuzzy, no-wrap
msgid "Using @InjectMock"
msgstr "使用@InjectMock"

#: _posts/2020-04-29-mocking.adoc
msgid ""
"Hopefully the previous section convinced you of the merits of `QuarkusMock` over the old approach. You might also be wondering\n"
"however if there is a way to reduce boilerplate code even further and provide tighter integration with Mockito. That is\n"
"where `@InjectMock` comes in handy."
msgstr ""

#. type: Plain text
#: _posts/2020-04-29-mocking.adoc
#, fuzzy
msgid "To demonstrate `@InjectMock` let's rewrite the `MockTestCase` from the previous section."
msgstr "为了证明 `@InjectMock` ，让我们重写一下上一节的 `MockTestCase` 。"

#. type: Plain text
#: _posts/2020-04-29-mocking.adoc
#, fuzzy
msgid "First of all, we need to add the following dependency:"
msgstr "首先，我们需要添加以下依赖关系。"

#. type: Plain text
#: _posts/2020-04-29-mocking.adoc
#, fuzzy
msgid "Now we can rewrite the `MockTestCase` like so:"
msgstr "现在我们可以这样改写 `MockTestCase` 。"

#. type: Plain text
#: _posts/2020-04-29-mocking.adoc
#, fuzzy
msgid "`@InjectMock` results in a mock being created and being available in *all* test methods of the test class (other test classes are *not* affected by this)"
msgstr " `@InjectMock` 导致模拟被创建并在测试类的 *所有* 测试方法中可用（其他测试 *类不受* 此影响）。"

#. type: Plain text
#: _posts/2020-04-29-mocking.adoc
#, fuzzy
msgid "The `mockableBean1` is configured here for all test methods of the class"
msgstr " `mockableBean1` 在这里为类的所有测试方法配置了"

#. type: Plain text
#: _posts/2020-04-29-mocking.adoc
#, fuzzy
msgid "Configure `mockableBean2` for this test only"
msgstr "仅为该测试配置 `mockableBean2` "

#. type: delimited block =
#: _posts/2020-04-29-mocking.adoc
#, fuzzy
msgid "Since `@InjectMock` uses `QuarkusMock` under the hood, the same limitations apply to its use."
msgstr "由于 `@InjectMock` ，在引擎盖下使用了 `QuarkusMock` ，所以同样的限制也适用于其使用。"

#: _posts/2020-04-29-mocking.adoc
msgid ""
"Additionally, `@InjectMock` works like an injection point for the bean, so for it to work properly when\n"
"the target bean uses CDI qualifiers, those qualifiers also need to be added to the field.\n"
"We will see an example of this in next section about mocking a `@RestClient` bean."
msgstr ""

#. type: Plain text
#: _posts/2020-04-29-mocking.adoc
#, fuzzy
msgid "As a final example, we can rewrite the `OrderServiceTest` test like so:"
msgstr "作为最后一个例子，我们可以这样重写 `OrderServiceTest` 测试。"

#. type: Title ====
#: _posts/2020-04-29-mocking.adoc
#, fuzzy, no-wrap
msgid "Using @InjectMock with @RestClient"
msgstr "使用@InjectMock和@RestClient"

#: _posts/2020-04-29-mocking.adoc
msgid ""
"A very common need is to mock `@RestClient` beans. Thankfully it's a need well covered by `@InjectMock` - as long\n"
"as two principles are followed:"
msgstr ""

#. type: Plain text
#: _posts/2020-04-29-mocking.adoc
#, fuzzy
msgid "The bean is made `@ApplicationScoped` (instead of accepting the default scope which `@RegisterRestClient` implies, i.e. `@Dependent`)"
msgstr "这个豆子被做成了 `@ApplicationScoped` （而不是接受 `@RegisterRestClient` 所暗示的默认范围，即 `@Dependent` ）。"

#. type: Plain text
#: _posts/2020-04-29-mocking.adoc
#, fuzzy
msgid "The `@RestClient` CDI qualifier is used when injecting the bean into the test."
msgstr " `@RestClient` CDI限定符是在将豆子注入测试时使用的。"

#. type: Plain text
#: _posts/2020-04-29-mocking.adoc
#, fuzzy
msgid "As usual, an example best demonstrates these requirements. Say we have a `GreetingService` which we wish to use to build a rest client:"
msgstr "像往常一样，一个例子最能说明这些要求。假设我们有一个 `GreetingService` ，我们希望用它来建立一个休息客户端。"

#. type: Plain text
#: _posts/2020-04-29-mocking.adoc
#, fuzzy
msgid "`@ApplicationScoped` needs to be used to make `GreetingService` mockable."
msgstr " `@ApplicationScoped` 需要使用 ，以使其成为可模拟的。 `GreetingService` "

#. type: Plain text
#: _posts/2020-04-29-mocking.adoc
#, fuzzy
msgid "An example test class could be:"
msgstr "一个测试类的例子可以是。"

#. type: Plain text
#: _posts/2020-04-29-mocking.adoc
#, fuzzy
msgid "We need to use the `@RestClient` CDI qualifier, since Quarkus creates the `GreetingService` bean with this qualifier."
msgstr "我们需要使用 `@RestClient` CDI限定词，因为Quarkus用这个限定词创建了 `GreetingService` Bean。"

#. type: Title ==
#: _posts/2020-04-29-mocking.adoc
#, fuzzy, no-wrap
msgid "More Mocking in Quarkus 1.5"
msgstr "在Quarkus 1.5中更多的嘲讽"

#: _posts/2020-04-29-mocking.adoc
msgid ""
"Quarkus 1.5 will ship with a new testing module (`quarkus-panache-mock`) that will make mocking Panache entities a breeze.\n"
"If you are eager to see what this feature is all about, check out https://github.com/quarkusio/quarkus/blob/3a5680ea367c5dad60655dcef0ca9765f14d5efe/docs/src/main/asciidoc/getting-started-testing.adoc#73-mocking-with-panache[this]\n"
"and feel free to give us early feedback."
msgstr ""
