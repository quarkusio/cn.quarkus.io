# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-04-29-mocking.adoc:1
#, fuzzy, no-wrap
msgid "geoand"
msgstr "地质和"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-04-29-mocking.adoc:1
#, fuzzy, no-wrap
msgid "2020-04-28"
msgstr "2020-04-28"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-04-29-mocking.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "职位"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-04-29-mocking.adoc:1
#, fuzzy, no-wrap
msgid "Quarkus 1.4 introduces some interesting new capabilities for mocking CDI beans."
msgstr "Quarkus 1.4为嘲弄CDI Bean引入了一些有趣的新功能。"

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-04-29-mocking.adoc:1
#, fuzzy, no-wrap
msgid "testing"
msgstr "检验"

#. type: YAML Front Matter: title
#: upstream/_posts/2020-04-29-mocking.adoc:1
#, fuzzy, no-wrap
msgid "Mocking CDI beans in Quarkus"
msgstr "在Quarkus中嘲弄CDI Bean"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:17
#, fuzzy
msgid "Testing Quarkus applications has been an important part of the Quarkus Developer Joy, which is why `@QuarkusTest` for testing JVM applications and `@NativeTest` for black-box testing of the native images have been part of Quarkus since the first release.  A recurring request however amongst our community members has been to have Quarkus allow them to selectively mock certain CDI beans for specific tests. This post will introduce the new mocking capabilities that `1.4` brings which aim to address those concerns, while also providing a glimpse of additional improvements in this are that will be part of `1.5`."
msgstr "测试Quarkus应用程序一直是Quarkus开发者快乐的一个重要部分，这就是为什么从第一个版本开始，用于测试JVM应用程序的 `@QuarkusTest` 和用于本地图像的黑盒测试的 `@NativeTest` 已经成为Quarkus的一部分。然而，在我们的社区成员中，一个经常性的要求是让Quarkus允许他们有选择地模拟特定的CDI Bean进行测试。这篇文章将介绍 `1.4` 带来的新的嘲弄功能，旨在解决这些问题，同时也提供了这一领域的额外改进的一瞥，这将是 `1.5` 的一部分。"

#. type: Title ==
#: upstream/_posts/2020-04-29-mocking.adoc:18
#, fuzzy, no-wrap
msgid "Old approach"
msgstr "老办法"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:21
#, fuzzy
msgid "Let us assume that a Quarkus application contains the following (purely contrived) bean:"
msgstr "让我们假设一个Quarkus应用程序包含以下（纯属臆造的）bean。"

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:26
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class OrderService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:29
#, no-wrap
msgid ""
"    private final InvoiceService invoiceService;\n"
"    private final InvoiceNotificationService invoiceNotificationService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:34
#, no-wrap
msgid ""
"    public OrderService(InvoiceService invoiceService, InvoiceNotificationService invoiceNotificationService) {\n"
"        this.invoiceService = invoiceService;\n"
"        this.invoiceNotificationService = invoiceNotificationService;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:45
#, no-wrap
msgid ""
"    public Invoice generateSendInvoice(Long orderId) {\n"
"        final Invoice invoice = invoiceService.generateForOrder(orderId);\n"
"        if (invoice.isAlreadySent()) {\n"
"            invoiceNotificationService.sendInvoice(invoice);\n"
"        } else {\n"
"            invoiceNotificationService.notifyInvoiceAlreadySent(invoice);\n"
"        }\n"
"        return invoice;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:50
#, fuzzy
msgid "When testing the `generateSendInvoice` method we most likely don't want to use the actual `InvoiceNotificationService` as it would result in sending real notifications. With the old Quarkus approach one could \"override\" the `InvoiceNotificationService` in tests by adding the following bean in the test sources:"
msgstr "当测试 `generateSendInvoice` 方法时，我们很可能不想使用实际的 `InvoiceNotificationService` ，因为这将导致发送真实的通知。使用旧的Quarkus方法，我们可以在测试中 \"覆盖 \" `InvoiceNotificationService` ，方法是在测试源中添加以下bean。"

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:55
#, no-wrap
msgid ""
"@Mock\n"
"public class MockInvoiceNotificationService implements InvoiceNotificationService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:57
#, no-wrap
msgid "    public void sendInvoice(Invoice invoice) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:59
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:61
#, no-wrap
msgid "    public void notifyInvoiceAlreadySent(Invoice invoice) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:64
#, no-wrap
msgid ""
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:69
#, fuzzy
msgid "When Quarkus scanned this code, the use of `@Mock` would result in `MockInvoiceNotificationService` being used as the implementation of `InvoiceNotificationService` in every place where a `InvoiceNotificationService` bean was injected (in CDI terms this is called an injection point)."
msgstr "当Quarkus扫描这段代码时，使用 `@Mock` 会导致 `MockInvoiceNotificationService` 在每个注入 `InvoiceNotificationService` Bean的地方被用作 `InvoiceNotificationService` 的实现（在CDI术语中这被称为注入点）。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:71
#, fuzzy
msgid "Although this mechanism is fairly straightforward to use, it nonetheless suffers from a few problems:"
msgstr "尽管这种机制使用起来相当简单，但它仍然存在一些问题。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:74
#, fuzzy
msgid "A new class (or a new CDI producer method) needs to be used for each bean type that requires a mock. In a large application where a lot of mocks are needed, the amount of boilerplate code increases unacceptably."
msgstr "一个新的类（或一个新的CDI生产者方法）需要被用于每个需要模拟的bean类型。在一个需要大量mock的大型应用中，模板代码的数量增加得令人难以接受。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:77
#, fuzzy
msgid "There is no way for a mock to be used for certain tests only. This is due to the fact that beans that are annotated with `@Mock` are normal CDI beans (and are therefore used throughout the application).  Depending on what needs to be tested, this can be very problematic."
msgstr "没有办法让一个mock只用于某些测试。这是由于被注解为 `@Mock` 的bean是正常的CDI beans（因此在整个应用程序中使用）。根据需要测试的内容，这可能是非常有问题的。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:80
#, fuzzy
msgid "There is a no out of the box integration with https://site.mockito.org/[Mockito], which is the de-facto standard for mocking in Java applications. Users can certainly use Mockito (most commonly by using a CDI producer method), but there is boilerplate code involved."
msgstr "没有开箱即用的 link:https://site.mockito.org/[Mockito] 集成，它是Java应用中嘲弄的事实标准。用户当然可以使用Mockito（最常见的是通过使用CDI生产者方法），但会涉及到模板代码。"

#. type: Title ==
#: upstream/_posts/2020-04-29-mocking.adoc:81
#, fuzzy, no-wrap
msgid "New approach"
msgstr "新方法"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:86
#, fuzzy
msgid "Starting with Quarkus `1.4`, users have the ability to create and inject per-test mocks for normal scoped CDI beans using `io.quarkus.test.junit.QuarkusMock`. Moreover, Quarkus provides out of the box integration with Mockito allowing for zero effort mocking of CDI beans using the `io.quarkus.test.junit.mockito.@InjectMock` annotation."
msgstr "从Quarkus `1.4` 开始，用户可以使用 `io.quarkus.test.junit.QuarkusMock` ，为普通范围的CDI Bean创建和注入每个测试模拟。此外，Quarkus提供了与Mockito的开箱集成，允许使用 `io.quarkus.test.junit.mockito.@InjectMock` 注释对CDI Bean进行零努力的模拟。"

#. type: Title ===
#: upstream/_posts/2020-04-29-mocking.adoc:87
#, fuzzy, no-wrap
msgid "Using QuarkusMock"
msgstr "使用QuarkusMock"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:91
#, fuzzy
msgid "`QuarkusMock` provides the foundation for mocking normal scoped CDI beans and is also used under the hood by `@InjectMock`, so let us examine it first. The best way to do this is using an example:"
msgstr " `QuarkusMock` 提供了嘲弄正常范围的CDI Bean的基础，并且也被 ，所以让我们首先检查它。最好的方法是用一个例子来做这件事。 `@InjectMock` "

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:96
#: upstream/_posts/2020-04-29-mocking.adoc:228
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class MockTestCase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:99
#, no-wrap
msgid ""
"    @Inject\n"
"    MockableBean1 mockableBean1;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:102
#, no-wrap
msgid ""
"    @Inject\n"
"    MockableBean2 mockableBean2;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:109
#, no-wrap
msgid ""
"    @BeforeAll\n"
"    public static void setup() {\n"
"        MockableBean1 mock = Mockito.mock(MockableBean1.class);  // <1>\n"
"        Mockito.when(mock.greet(\"Stuart\")).thenReturn(\"A mock for Stuart\");\n"
"        QuarkusMock.installMockForType(mock, MockableBean1.class);  // <2>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:115
#, no-wrap
msgid ""
"    @Test\n"
"    public void testBeforeAll() {\n"
"        Assertions.assertEquals(\"A mock for Stuart\", mockableBean1.greet(\"Stuart\"));  // <3>\n"
"        Assertions.assertEquals(\"Hello Stuart\", mockableBean2.greet(\"Stuart\")); // <4>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:122
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPerTestMock() {\n"
"        QuarkusMock.installMockForInstance(new BonjourMockableBean2(), mockableBean2); // <5>\n"
"        Assertions.assertEquals(\"A mock for Stuart\", mockableBean1.greet(\"Stuart\"));  // <6>\n"
"        Assertions.assertEquals(\"Bonjour Stuart\", mockableBean2.greet(\"Stuart\")); // <7>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:125
#: upstream/_posts/2020-04-29-mocking.adoc:255
#, no-wrap
msgid ""
"    @ApplicationScoped\n"
"    public static class MockableBean1 {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:130
#: upstream/_posts/2020-04-29-mocking.adoc:138
#: upstream/_posts/2020-04-29-mocking.adoc:260
#, no-wrap
msgid ""
"        public String greet(String name) {\n"
"            return \"Hello \" + name;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:133
#: upstream/_posts/2020-04-29-mocking.adoc:263
#, no-wrap
msgid ""
"    @ApplicationScoped\n"
"    public static class MockableBean2 {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:146
#, no-wrap
msgid ""
"    public static class BonjourMockableBean2 extends MockableBean2 {\n"
"        @Override\n"
"        public String greet(String name) {\n"
"            return \"Bonjour \" + name;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:148
#, fuzzy
msgid "This part of the example uses Mockito for convenience's sake only. `QuarkusMock` is not tied to Mockito in any way."
msgstr "这一部分的例子使用Mockito只是为了方便。 `QuarkusMock` ，与Mockito没有任何关系。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:150
#, fuzzy
msgid "We use `QuarkusMock.installMockForType()` because the injected bean instance is not yet available. Very important to note is that the mock setup in a JUnit `@BeforeAll` method, is used for *all* test methods of the class (other test classes are *not* affected by this)."
msgstr "我们使用 `QuarkusMock.installMockForType()` ，因为注入的Bean实例还不可用。非常重要的一点是，在JUnit `@BeforeAll` 方法中的模拟设置，被用于该类的 *所有* 测试方法（其他测试 *类不受* 此影响）。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:151
#: upstream/_posts/2020-04-29-mocking.adoc:154
#, fuzzy
msgid "The mock for `MockableBean1` is being used as it was defined for all test methods of the class."
msgstr " `MockableBean1` 的模拟正在被使用，因为它被定义为类的所有测试方法。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:152
#, fuzzy
msgid "Since no mock has been set up for `MockableBean2`, the CDI bean is being used."
msgstr "由于没有为 `MockableBean2` ，所以正在使用CDI Bean。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:153
#, fuzzy
msgid "We use `QuarkusMock.installMockForInstance()` here because inside the test method, the injected bean instance is available."
msgstr "我们在这里使用 `QuarkusMock.installMockForInstance()` ，因为在测试方法里面，注入的bean实例是可用的。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:155
#, fuzzy
msgid "As we used `BonjourMockableBean2` as a mock `MockableBean2`, this class is now used."
msgstr "由于我们用 `BonjourMockableBean2` 作为模拟 `MockableBean2` ，现在使用这个类。"

#. type: delimited block =
#: upstream/_posts/2020-04-29-mocking.adoc:160
#, fuzzy
msgid "`QuarkusMock` can be used for any normal scoped CDI bean - the most common of which are `@ApplicationScoped` and `@RequestScoped`.  This means that beans with `@Singleton` and `@Dependent` scope *cannot* be used with `QuarkusMock`."
msgstr " `QuarkusMock` 可以用于任何普通范围的CDI Bean--其中最常见的是 和 。这意味着具有 和 范围的Bean `@ApplicationScoped` `@RequestScoped` `@Singleton` `@Dependent` *不能* 与 。 `QuarkusMock` "

#. type: delimited block =
#: upstream/_posts/2020-04-29-mocking.adoc:162
#, fuzzy
msgid "Furthermore, `QuarkusMock` will not work properly when it's used in tests that run parallel in the same JVM."
msgstr "此外， `QuarkusMock` ，当它被用于在同一JVM中并行运行的测试时，将无法正常工作。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:166
#, fuzzy
msgid "Returning to the original example of the blog post, we could get rid of the `MockInvoiceNotificationService` class and instead use something like the following:"
msgstr "回到博客文章的最初例子，我们可以摆脱 `MockInvoiceNotificationService` 类，而使用类似以下的东西。"

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:170
#: upstream/_posts/2020-04-29-mocking.adoc:288
#, no-wrap
msgid "public class OrderServiceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:173
#, no-wrap
msgid ""
"    @Inject\n"
"    OrderService orderService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:181
#, no-wrap
msgid ""
"    @BeforeAll\n"
"    public static void setup() {\n"
"        MockableBean1 mock = Mockito.mock(InvoiceNotificationService.class);\n"
"        Mockito.doNothing().when(mock).sendInvoice(any());\n"
"        Mockito.doNothing().when(mock).notifyInvoiceAlreadySent(any());\n"
"        QuarkusMock.installMockForType(mock, MockableBean1.class);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:184
#: upstream/_posts/2020-04-29-mocking.adoc:303
#, no-wrap
msgid ""
"    public void testGenerateSendInvoice() {\n"
"        // perform some setup\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:186
#: upstream/_posts/2020-04-29-mocking.adoc:305
#, no-wrap
msgid "        Invoice invoice = orderService.generateSendInvoice(1L);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:190
#: upstream/_posts/2020-04-29-mocking.adoc:309
#, no-wrap
msgid ""
"        // perform some assertions\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:194
#, fuzzy
msgid "Note that in this case we don't need to create a new class implementing `InvoiceNotificationService`.  Moreover, we have full and per test control over the mock, something which grants up a lot of flexibility when writing tests."
msgstr "注意，在这种情况下，我们不需要创建一个新的类来实现 `InvoiceNotificationService` 。此外，我们可以完全和每次测试控制模拟，这在编写测试时有很大的灵活性。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:197
#, fuzzy
msgid "For example, if we had some other test where we did want to use the real `InvoiceNotificationService`, then in that test we would simply not do any mocking of `InvoiceNotificationService`."
msgstr "例如，如果我们有一些其他的测试，我们确实想使用真正的 `InvoiceNotificationService` ，那么在那个测试中，我们将简单地不对 `InvoiceNotificationService` 进行任何模拟。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:200
#, fuzzy
msgid "If yet another test needed to mock `InvoiceNotificationService` in some other way, then it would be perfectly free to do so, using the same method `OrderServiceTest` uses, without causing any problems to the other tests."
msgstr "如果另一个测试需要以其他方式模拟 `InvoiceNotificationService` ，那么它可以完全自由地这样做，使用相同的方法 `OrderServiceTest` ，而不会给其他测试带来任何问题。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:202
#, fuzzy
msgid "Finally, note in the example above we didn't mock `InvoiceService`, which meant that the real `InvoiceService` was being used in `OrderServiceTest`."
msgstr "最后，注意在上面的例子中，我们没有模拟 `InvoiceService` ，这意味着真正的 `InvoiceService` 被用在 `OrderServiceTest` 。"

#. type: Title ===
#: upstream/_posts/2020-04-29-mocking.adoc:203
#, fuzzy, no-wrap
msgid "Using @InjectMock"
msgstr "使用@InjectMock"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:208
#, fuzzy
msgid "Hopefully the previous section convinced you of the merits of `QuarkusMock` over the old approach. You might also be wondering however if there is a way to reduce boilerplate code even further and provide tighter integration with Mockito. That is where `@InjectMock` comes in handy."
msgstr "希望上一节能让你相信 `QuarkusMock` 相对于旧方法的优点。然而，你可能还想知道是否有一种方法可以进一步减少模板代码，并与Mockito进行更紧密的整合。这就是 `@InjectMock` 的用武之地。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:210
#, fuzzy
msgid "To demonstrate `@InjectMock` let's rewrite the `MockTestCase` from the previous section."
msgstr "为了证明 `@InjectMock` ，让我们重写一下上一节的 `MockTestCase` 。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:212
#, fuzzy
msgid "First of all, we need to add the following dependency:"
msgstr "首先，我们需要添加以下依赖关系。"

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:220
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5-mockito</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:223
#, fuzzy
msgid "Now we can rewrite the `MockTestCase` like so:"
msgstr "现在我们可以这样改写 `MockTestCase` 。"

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:231
#, no-wrap
msgid ""
"    @InjectMock\n"
"    MockableBean1 mockableBean1; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:234
#, no-wrap
msgid ""
"    @InjectMock\n"
"    MockableBean2 mockableBean2;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:239
#, no-wrap
msgid ""
"    @BeforeEach\n"
"    public void setup() {\n"
"        Mockito.when(mockableBean1.greet(\"Stuart\")).thenReturn(\"A mock for Stuart\"); // <2>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:245
#, no-wrap
msgid ""
"    @Test\n"
"    public void firstTest() {\n"
"        Assertions.assertEquals(\"A mock for Stuart\", mockableBean1.greet(\"Stuart\"));\n"
"        Assertions.assertEquals(null, mockableBean2.greet(\"Stuart\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:252
#, no-wrap
msgid ""
"    @Test\n"
"    public void secondTest() {\n"
"        Mockito.when(mockableBean2.greet(\"Stuart\")).thenReturn(\"Bonjour Stuart\"); // <3>\n"
"        Assertions.assertEquals(\"A mock for Stuart\", mockableBean1.greet(\"Stuart\"));\n"
"        Assertions.assertEquals(\"Bonjour Stuart\", mockableBean2.greet(\"Stuart\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:269
#, no-wrap
msgid ""
"        public String greet(String name) {\n"
"            return \"Hello \" + name;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:271
#, fuzzy
msgid "`@InjectMock` results in a mock being created and being available in *all* test methods of the test class (other test classes are *not* affected by this)"
msgstr " `@InjectMock` 导致模拟被创建并在测试类的 *所有* 测试方法中可用（其他测试 *类不受* 此影响）。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:272
#, fuzzy
msgid "The `mockableBean1` is configured here for all test methods of the class"
msgstr " `mockableBean1` 在这里为类的所有测试方法配置了"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:273
#, fuzzy
msgid "Configure `mockableBean2` for this test only"
msgstr "仅为该测试配置 `mockableBean2` "

#. type: delimited block =
#: upstream/_posts/2020-04-29-mocking.adoc:277
#, fuzzy
msgid "Since `@InjectMock` uses `QuarkusMock` under the hood, the same limitations apply to its use."
msgstr "由于 `@InjectMock` ，在引擎盖下使用了 `QuarkusMock` ，所以同样的限制也适用于其使用。"

#. type: delimited block =
#: upstream/_posts/2020-04-29-mocking.adoc:281
#, fuzzy
msgid "Additionally, `@InjectMock` works like an injection point for the bean, so for it to work properly when the target bean uses CDI qualifiers, those qualifiers also need to be added to the field.  We will see an example of this in next section about mocking a `@RestClient` bean."
msgstr "此外， `@InjectMock` 就像Bean的一个注入点，所以当目标Bean使用CDI限定词时，为了使其正常工作，这些限定词也需要被添加到字段中。我们将在下一节中看到一个关于嘲弄 `@RestClient` Bean的例子。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:284
#, fuzzy
msgid "As a final example, we can rewrite the `OrderServiceTest` test like so:"
msgstr "作为最后一个例子，我们可以这样重写 `OrderServiceTest` 测试。"

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:291
#, no-wrap
msgid ""
"    @Inject\n"
"    private OrderService orderService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:294
#, no-wrap
msgid ""
"    @InjectMock\n"
"    private InvoiceNotificationService invoiceNotificationService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:300
#, no-wrap
msgid ""
"    @BeforeAll\n"
"    public static void setup() {\n"
"        doNothing().when(invoiceNotificationService).sendInvoice(any());\n"
"        doNothing().when(invoiceNotificationService).notifyInvoiceAlreadySent(any());\n"
"    }\n"
msgstr ""

#. type: Title ====
#: upstream/_posts/2020-04-29-mocking.adoc:311
#, fuzzy, no-wrap
msgid "Using @InjectMock with @RestClient"
msgstr "使用@InjectMock和@RestClient"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:315
#, fuzzy
msgid "A very common need is to mock `@RestClient` beans. Thankfully it's a need well covered by `@InjectMock` - as long as two principles are followed:"
msgstr "一个非常常见的需求是模拟 `@RestClient` beans。值得庆幸的是，只要遵循两个原则， `@InjectMock` 就能很好地满足这一需求。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:317
#, fuzzy
msgid "The bean is made `@ApplicationScoped` (instead of accepting the default scope which `@RegisterRestClient` implies, i.e. `@Dependent`)"
msgstr "这个豆子被做成了 `@ApplicationScoped` （而不是接受 `@RegisterRestClient` 所暗示的默认范围，即 `@Dependent` ）。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:318
#, fuzzy
msgid "The `@RestClient` CDI qualifier is used when injecting the bean into the test."
msgstr " `@RestClient` CDI限定符是在将豆子注入测试时使用的。"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:320
#, fuzzy
msgid "As usual, an example best demonstrates these requirements. Say we have a `GreetingService` which we wish to use to build a rest client:"
msgstr "像往常一样，一个例子最能说明这些要求。假设我们有一个 `GreetingService` ，我们希望用它来建立一个休息客户端。"

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:327
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"@ApplicationScoped  // <1>\n"
"@RegisterRestClient\n"
"public interface GreetingService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:333
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/hello\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    String hello();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:335
#, fuzzy
msgid "`@ApplicationScoped` needs to be used to make `GreetingService` mockable."
msgstr " `@ApplicationScoped` 需要使用 ，以使其成为可模拟的。 `GreetingService` "

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:337
#, fuzzy
msgid "An example test class could be:"
msgstr "一个测试类的例子可以是。"

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:342
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class GreetingResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:346
#, no-wrap
msgid ""
"    @InjectMock\n"
"    @RestClient // <1>\n"
"    GreetingService greetingService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:350
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHelloEndpoint() {\n"
"        Mockito.when(greetingService.hello()).thenReturn(\"hello from mockito\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:357
#, no-wrap
msgid ""
"        given()\n"
"          .when().get(\"/hello\")\n"
"          .then()\n"
"             .statusCode(200)\n"
"             .body(is(\"hello from mockito\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:359
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:361
#, fuzzy
msgid "We need to use the `@RestClient` CDI qualifier, since Quarkus creates the `GreetingService` bean with this qualifier."
msgstr "我们需要使用 `@RestClient` CDI限定词，因为Quarkus用这个限定词创建了 `GreetingService` Bean。"

#. type: Title ==
#: upstream/_posts/2020-04-29-mocking.adoc:362
#, fuzzy, no-wrap
msgid "More Mocking in Quarkus 1.5"
msgstr "在Quarkus 1.5中更多的嘲讽"

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:366
msgid "Quarkus 1.5 will ship with a new testing module (`quarkus-panache-mock`) that will make mocking Panache entities a breeze.  If you are eager to see what this feature is all about, check out https://github.com/quarkusio/quarkus/blob/3a5680ea367c5dad60655dcef0ca9765f14d5efe/docs/src/main/asciidoc/getting-started-testing.adoc#73-mocking-with-panache[this] and feel free to give us early feedback."
msgstr ""
