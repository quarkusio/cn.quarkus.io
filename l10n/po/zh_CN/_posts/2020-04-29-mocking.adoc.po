# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-04-29-mocking.adoc:1
#, no-wrap
msgid "geoand"
msgstr ""

#. type: YAML Front Matter: date
#: upstream/_posts/2020-04-29-mocking.adoc:1
#, no-wrap
msgid "2020-04-28"
msgstr ""

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-04-29-mocking.adoc:1
#, no-wrap
msgid "post"
msgstr ""

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-04-29-mocking.adoc:1
#, no-wrap
msgid "Quarkus 1.4 introduces some interesting new capabilities for mocking CDI beans."
msgstr ""

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-04-29-mocking.adoc:1
#, no-wrap
msgid "testing"
msgstr ""

#. type: YAML Front Matter: title
#: upstream/_posts/2020-04-29-mocking.adoc:1
#, no-wrap
msgid "Mocking CDI beans in Quarkus"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:17
msgid "Testing Quarkus applications has been an important part of the Quarkus Developer Joy, which is why `@QuarkusTest` for testing JVM applications and `@NativeTest` for black-box testing of the native images have been part of Quarkus since the first release.  A recurring request however amongst our community members has been to have Quarkus allow them to selectively mock certain CDI beans for specific tests. This post will introduce the new mocking capabilities that `1.4` brings which aim to address those concerns, while also providing a glimpse of additional improvements in this are that will be part of `1.5`."
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-04-29-mocking.adoc:18
#, no-wrap
msgid "Old approach"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:21
msgid "Let us assume that a Quarkus application contains the following (purely contrived) bean:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:26
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class OrderService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:29
#, no-wrap
msgid ""
"    private final InvoiceService invoiceService;\n"
"    private final InvoiceNotificationService invoiceNotificationService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:34
#, no-wrap
msgid ""
"    public OrderService(InvoiceService invoiceService, InvoiceNotificationService invoiceNotificationService) {\n"
"        this.invoiceService = invoiceService;\n"
"        this.invoiceNotificationService = invoiceNotificationService;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:45
#, no-wrap
msgid ""
"    public Invoice generateSendInvoice(Long orderId) {\n"
"        final Invoice invoice = invoiceService.generateForOrder(orderId);\n"
"        if (invoice.isAlreadySent()) {\n"
"            invoiceNotificationService.sendInvoice(invoice);\n"
"        } else {\n"
"            invoiceNotificationService.notifyInvoiceAlreadySent(invoice);\n"
"        }\n"
"        return invoice;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:50
msgid "When testing the `generateSendInvoice` method we most likely don't want to use the actual `InvoiceNotificationService` as it would result in sending real notifications. With the old Quarkus approach one could \"override\" the `InvoiceNotificationService` in tests by adding the following bean in the test sources:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:55
#, no-wrap
msgid ""
"@Mock\n"
"public class MockInvoiceNotificationService implements InvoiceNotificationService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:57
#, no-wrap
msgid "    public void sendInvoice(Invoice invoice) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:59
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:61
#, no-wrap
msgid "    public void notifyInvoiceAlreadySent(Invoice invoice) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:64
#, no-wrap
msgid ""
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:69
msgid "When Quarkus scanned this code, the use of `@Mock` would result in `MockInvoiceNotificationService` being used as the implementation of `InvoiceNotificationService` in every place where a `InvoiceNotificationService` bean was injected (in CDI terms this is called an injection point)."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:71
msgid "Although this mechanism is fairly straightforward to use, it nonetheless suffers from a few problems:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:74
msgid "A new class (or a new CDI producer method) needs to be used for each bean type that requires a mock. In a large application where a lot of mocks are needed, the amount of boilerplate code increases unacceptably."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:77
msgid "There is no way for a mock to be used for certain tests only. This is due to the fact that beans that are annotated with `@Mock` are normal CDI beans (and are therefore used throughout the application).  Depending on what needs to be tested, this can be very problematic."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:80
msgid "There is a no out of the box integration with https://site.mockito.org/[Mockito], which is the de-facto standard for mocking in Java applications. Users can certainly use Mockito (most commonly by using a CDI producer method), but there is boilerplate code involved."
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-04-29-mocking.adoc:81
#, no-wrap
msgid "New approach"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:86
msgid "Starting with Quarkus `1.4`, users have the ability to create and inject per-test mocks for normal scoped CDI beans using `io.quarkus.test.junit.QuarkusMock`. Moreover, Quarkus provides out of the box integration with Mockito allowing for zero effort mocking of CDI beans using the `io.quarkus.test.junit.mockito.@InjectMock` annotation."
msgstr ""

#. type: Title ===
#: upstream/_posts/2020-04-29-mocking.adoc:87
#, no-wrap
msgid "Using QuarkusMock"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:91
msgid "`QuarkusMock` provides the foundation for mocking normal scoped CDI beans and is also used under the hood by `@InjectMock`, so let us examine it first. The best way to do this is using an example:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:96
#: upstream/_posts/2020-04-29-mocking.adoc:228
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class MockTestCase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:99
#, no-wrap
msgid ""
"    @Inject\n"
"    MockableBean1 mockableBean1;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:102
#, no-wrap
msgid ""
"    @Inject\n"
"    MockableBean2 mockableBean2;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:109
#, no-wrap
msgid ""
"    @BeforeAll\n"
"    public static void setup() {\n"
"        MockableBean1 mock = Mockito.mock(MockableBean1.class);  // <1>\n"
"        Mockito.when(mock.greet(\"Stuart\")).thenReturn(\"A mock for Stuart\");\n"
"        QuarkusMock.installMockForType(mock, MockableBean1.class);  // <2>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:115
#, no-wrap
msgid ""
"    @Test\n"
"    public void testBeforeAll() {\n"
"        Assertions.assertEquals(\"A mock for Stuart\", mockableBean1.greet(\"Stuart\"));  // <3>\n"
"        Assertions.assertEquals(\"Hello Stuart\", mockableBean2.greet(\"Stuart\")); // <4>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:122
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPerTestMock() {\n"
"        QuarkusMock.installMockForInstance(new BonjourMockableBean2(), mockableBean2); // <5>\n"
"        Assertions.assertEquals(\"A mock for Stuart\", mockableBean1.greet(\"Stuart\"));  // <6>\n"
"        Assertions.assertEquals(\"Bonjour Stuart\", mockableBean2.greet(\"Stuart\")); // <7>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:125
#: upstream/_posts/2020-04-29-mocking.adoc:255
#, no-wrap
msgid ""
"    @ApplicationScoped\n"
"    public static class MockableBean1 {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:130
#: upstream/_posts/2020-04-29-mocking.adoc:138
#: upstream/_posts/2020-04-29-mocking.adoc:260
#, no-wrap
msgid ""
"        public String greet(String name) {\n"
"            return \"Hello \" + name;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:133
#: upstream/_posts/2020-04-29-mocking.adoc:263
#, no-wrap
msgid ""
"    @ApplicationScoped\n"
"    public static class MockableBean2 {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:146
#, no-wrap
msgid ""
"    public static class BonjourMockableBean2 extends MockableBean2 {\n"
"        @Override\n"
"        public String greet(String name) {\n"
"            return \"Bonjour \" + name;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:148
msgid "This part of the example uses Mockito for convenience's sake only. `QuarkusMock` is not tied to Mockito in any way."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:150
msgid "We use `QuarkusMock.installMockForType()` because the injected bean instance is not yet available. Very important to note is that the mock setup in a JUnit `@BeforeAll` method, is used for *all* test methods of the class (other test classes are *not* affected by this)."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:151
#: upstream/_posts/2020-04-29-mocking.adoc:154
msgid "The mock for `MockableBean1` is being used as it was defined for all test methods of the class."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:152
msgid "Since no mock has been set up for `MockableBean2`, the CDI bean is being used."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:153
msgid "We use `QuarkusMock.installMockForInstance()` here because inside the test method, the injected bean instance is available."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:155
msgid "As we used `BonjourMockableBean2` as a mock `MockableBean2`, this class is now used."
msgstr ""

#. type: delimited block =
#: upstream/_posts/2020-04-29-mocking.adoc:160
msgid "`QuarkusMock` can be used for any normal scoped CDI bean - the most common of which are `@ApplicationScoped` and `@RequestScoped`.  This means that beans with `@Singleton` and `@Dependent` scope *cannot* be used with `QuarkusMock`."
msgstr ""

#. type: delimited block =
#: upstream/_posts/2020-04-29-mocking.adoc:162
msgid "Furthermore, `QuarkusMock` will not work properly when it's used in tests that run parallel in the same JVM."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:166
msgid "Returning to the original example of the blog post, we could get rid of the `MockInvoiceNotificationService` class and instead use something like the following:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:170
#: upstream/_posts/2020-04-29-mocking.adoc:288
#, no-wrap
msgid "public class OrderServiceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:173
#, no-wrap
msgid ""
"    @Inject\n"
"    OrderService orderService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:181
#, no-wrap
msgid ""
"    @BeforeAll\n"
"    public static void setup() {\n"
"        MockableBean1 mock = Mockito.mock(InvoiceNotificationService.class);\n"
"        Mockito.doNothing().when(mock).sendInvoice(any());\n"
"        Mockito.doNothing().when(mock).notifyInvoiceAlreadySent(any());\n"
"        QuarkusMock.installMockForType(mock, MockableBean1.class);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:184
#: upstream/_posts/2020-04-29-mocking.adoc:303
#, no-wrap
msgid ""
"    public void testGenerateSendInvoice() {\n"
"        // perform some setup\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:186
#: upstream/_posts/2020-04-29-mocking.adoc:305
#, no-wrap
msgid "        Invoice invoice = orderService.generateSendInvoice(1L);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:190
#: upstream/_posts/2020-04-29-mocking.adoc:309
#, no-wrap
msgid ""
"        // perform some assertions\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:194
msgid "Note that in this case we don't need to create a new class implementing `InvoiceNotificationService`.  Moreover, we have full and per test control over the mock, something which grants up a lot of flexibility when writing tests."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:197
msgid "For example, if we had some other test where we did want to use the real `InvoiceNotificationService`, then in that test we would simply not do any mocking of `InvoiceNotificationService`."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:200
msgid "If yet another test needed to mock `InvoiceNotificationService` in some other way, then it would be perfectly free to do so, using the same method `OrderServiceTest` uses, without causing any problems to the other tests."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:202
msgid "Finally, note in the example above we didn't mock `InvoiceService`, which meant that the real `InvoiceService` was being used in `OrderServiceTest`."
msgstr ""

#. type: Title ===
#: upstream/_posts/2020-04-29-mocking.adoc:203
#, no-wrap
msgid "Using @InjectMock"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:208
msgid "Hopefully the previous section convinced you of the merits of `QuarkusMock` over the old approach. You might also be wondering however if there is a way to reduce boilerplate code even further and provide tighter integration with Mockito. That is where `@InjectMock` comes in handy."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:210
msgid "To demonstrate `@InjectMock` let's rewrite the `MockTestCase` from the previous section."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:212
msgid "First of all, we need to add the following dependency:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:220
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5-mockito</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:223
msgid "Now we can rewrite the `MockTestCase` like so:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:231
#, no-wrap
msgid ""
"    @InjectMock\n"
"    MockableBean1 mockableBean1; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:234
#, no-wrap
msgid ""
"    @InjectMock\n"
"    MockableBean2 mockableBean2;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:239
#, no-wrap
msgid ""
"    @BeforeEach\n"
"    public void setup() {\n"
"        Mockito.when(mockableBean1.greet(\"Stuart\")).thenReturn(\"A mock for Stuart\"); // <2>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:245
#, no-wrap
msgid ""
"    @Test\n"
"    public void firstTest() {\n"
"        Assertions.assertEquals(\"A mock for Stuart\", mockableBean1.greet(\"Stuart\"));\n"
"        Assertions.assertEquals(null, mockableBean2.greet(\"Stuart\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:252
#, no-wrap
msgid ""
"    @Test\n"
"    public void secondTest() {\n"
"        Mockito.when(mockableBean2.greet(\"Stuart\")).thenReturn(\"Bonjour Stuart\"); // <3>\n"
"        Assertions.assertEquals(\"A mock for Stuart\", mockableBean1.greet(\"Stuart\"));\n"
"        Assertions.assertEquals(\"Bonjour Stuart\", mockableBean2.greet(\"Stuart\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:269
#, no-wrap
msgid ""
"        public String greet(String name) {\n"
"            return \"Hello \" + name;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:271
msgid "`@InjectMock` results in a mock being created and being available in *all* test methods of the test class (other test classes are *not* affected by this)"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:272
msgid "The `mockableBean1` is configured here for all test methods of the class"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:273
msgid "Configure `mockableBean2` for this test only"
msgstr ""

#. type: delimited block =
#: upstream/_posts/2020-04-29-mocking.adoc:277
msgid "Since `@InjectMock` uses `QuarkusMock` under the hood, the same limitations apply to its use."
msgstr ""

#. type: delimited block =
#: upstream/_posts/2020-04-29-mocking.adoc:281
msgid "Additionally, `@InjectMock` works like an injection point for the bean, so for it to work properly when the target bean uses CDI qualifiers, those qualifiers also need to be added to the field.  We will see an example of this in next section about mocking a `@RestClient` bean."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:284
msgid "As a final example, we can rewrite the `OrderServiceTest` test like so:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:291
#, no-wrap
msgid ""
"    @Inject\n"
"    private OrderService orderService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:294
#, no-wrap
msgid ""
"    @InjectMock\n"
"    private InvoiceNotificationService invoiceNotificationService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:300
#, no-wrap
msgid ""
"    @BeforeAll\n"
"    public static void setup() {\n"
"        doNothing().when(invoiceNotificationService).sendInvoice(any());\n"
"        doNothing().when(invoiceNotificationService).notifyInvoiceAlreadySent(any());\n"
"    }\n"
msgstr ""

#. type: Title ====
#: upstream/_posts/2020-04-29-mocking.adoc:311
#, no-wrap
msgid "Using @InjectMock with @RestClient"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:315
msgid "A very common need is to mock `@RestClient` beans. Thankfully it's a need well covered by `@InjectMock` - as long as two principles are followed:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:317
msgid "The bean is made `@ApplicationScoped` (instead of accepting the default scope which `@RegisterRestClient` implies, i.e. `@Dependent`)"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:318
msgid "The `@RestClient` CDI qualifier is used when injecting the bean into the test."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:320
msgid "As usual, an example best demonstrates these requirements. Say we have a `GreetingService` which we wish to use to build a rest client:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:327
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"@ApplicationScoped  // <1>\n"
"@RegisterRestClient\n"
"public interface GreetingService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:333
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/hello\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    String hello();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:335
msgid "`@ApplicationScoped` needs to be used to make `GreetingService` mockable."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:337
msgid "An example test class could be:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:342
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class GreetingResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:346
#, no-wrap
msgid ""
"    @InjectMock\n"
"    @RestClient // <1>\n"
"    GreetingService greetingService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:350
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHelloEndpoint() {\n"
"        Mockito.when(greetingService.hello()).thenReturn(\"hello from mockito\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:357
#, no-wrap
msgid ""
"        given()\n"
"          .when().get(\"/hello\")\n"
"          .then()\n"
"             .statusCode(200)\n"
"             .body(is(\"hello from mockito\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-04-29-mocking.adoc:359
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:361
msgid "We need to use the `@RestClient` CDI qualifier, since Quarkus creates the `GreetingService` bean with this qualifier."
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-04-29-mocking.adoc:362
#, no-wrap
msgid "More Mocking in Quarkus 1.5"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-29-mocking.adoc:366
msgid "Quarkus 1.5 will ship with a new testing module (`quarkus-panache-mock`) that will make mocking Panache entities a breeze.  If you are eager to see what this feature is all about, check out https://github.com/quarkusio/quarkus/blob/3a5680ea367c5dad60655dcef0ca9765f14d5efe/docs/src/main/asciidoc/getting-started-testing.adoc#73-mocking-with-panache[this] and feel free to give us early feedback."
msgstr ""
