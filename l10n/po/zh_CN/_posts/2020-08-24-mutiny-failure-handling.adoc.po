# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:1
#, fuzzy, no-wrap
msgid "cescoffier"
msgstr "鹤壁市"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:1
#, fuzzy, no-wrap
msgid "2020-08-24"
msgstr "2020-08-24"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "职位"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:1
#, fuzzy, no-wrap
msgid "Failures are an inherent part of any software. This post explains how you handle them with Mutiny"
msgstr "失败是任何软件固有的一部分。这篇文章解释了你如何用Mutiny处理它们。"

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:1
#, fuzzy, no-wrap
msgid "reactive mutiny"
msgstr "反应性叛变"

#. type: YAML Front Matter: title
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:1
#, fuzzy, no-wrap
msgid "How to handle failures with Mutiny"
msgstr "如何用Mutiny处理失败的情况"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:11
#, fuzzy
msgid "In the past week, I got several questions about failure handling with Mutiny. So, maybe it deserves a bit more explanation."
msgstr "在过去的一周里，我收到了几个关于用Mutiny处理失败的问题。所以，也许它值得多解释一下。"

#. type: Title ==
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:12
#, fuzzy, no-wrap
msgid "Failures are events"
msgstr "失败是事件"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:15
#, fuzzy
msgid "First, Mutiny is an event-driven reactive programming library. With Mutiny, you handle events. An upstream `Uni` or `Multi` propagates these events and gives you the possibility to process them. These events can be *item*, *completion*, *cancellation*, and... *failure*:"
msgstr "首先，Mutiny是一个事件驱动的反应式编程库。通过Mutiny，你可以处理事件。一个上游的 `Uni` 或 `Multi` 传播这些事件，并给你处理它们的可能性。这些事件可以是 *项目* ， *完成* ， *取消* ，以及...... *失败* 。"

#. type: delimited block -
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:24
#, no-wrap
msgid ""
"Multi.createFrom().range(0, 10)\n"
"    .onItem().invoke(i -> System.out.println(\"Received item \" + i))\n"
"    .onCompletion().invoke(() -> System.out.println(\"We are done!\"))\n"
"    .onCancellation().invoke(() -> System.out.println(\n"
"        \"The downstream does not want our items anymore!\")\n"
"    )\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:28
#, no-wrap
msgid ""
"    .onFailure().invoke(t -> System.out.println(\n"
"        \"Oh no! We received a failure: \" + t.getMessage())\n"
"    )\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:30
#, fuzzy, no-wrap
msgid "What can you do when you receive a failure?"
msgstr "当你收到失败的消息时，你能做什么？"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:33
#, fuzzy
msgid "In addition to calling an action, as shown in the previous snippet, there are multiple things you can do when you receive a failure."
msgstr "除了调用一个动作外，如前面的片段所示，当你收到一个失败时，你可以做多种事情。"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:35
#, fuzzy
msgid "The most common thing to do is to recover. You can recover by passing a specific item or with another `Uni`:"
msgstr "最常做的事情是恢复。你可以通过一个特定的项目或用另一个 `Uni` 来恢复。"

#. type: delimited block -
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:41
#, no-wrap
msgid ""
"upstream\n"
"    .onFailure().recoverWithItem(failure -> \"hello (fallback)\")\n"
"    .subscribe().with(i -> System.out.println(\"Received: \" + i));\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:45
#, no-wrap
msgid ""
"upstream\n"
"    .onFailure().recoverWithUni(failure -> getAnotherUni(failure))\n"
"    .subscribe().with(i -> System.out.println(\"Received: \" + i));\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:48
#, fuzzy
msgid "On Multi, you can also recover by providing another `Multi` or completing the stream:"
msgstr "在Multi上，你也可以通过提供另一个 `Multi` 或完成流来恢复。"

#. type: delimited block -
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:53
#, no-wrap
msgid ""
"upstream\n"
"  .onFailure().recoverWithCompletion();\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:56
#, fuzzy
msgid "If you have faith in your system, you can also *retry*. Note that you need to make sure you can retry the operation safely first!"
msgstr "如果你对你的系统有信心，你也可以 *重试* 。请注意，你需要先确保你能安全地重试操作!"

#. type: delimited block -
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:63
#, no-wrap
msgid ""
"upstream\n"
"      .onFailure().retry()\n"
"        .withBackOff(Duration.ofSeconds(1), Duration.ofSeconds(10)).atMost(10)\n"
"      .subscribe().with(i -> System.out.println(\"Received: \" + i));\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:66
#, fuzzy
msgid "You can also transform the failure. For example, you can map a low-level failure into something more business-friendly. It propagates that second failure downstream, hiding the low-level failure:"
msgstr "你也可以转化失败。例如，你可以将一个低级别的故障映射成对业务更有利的东西。它将第二个故障向下游传播，隐藏低级故障。"

#. type: delimited block -
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:71
#, no-wrap
msgid ""
"Uni.createFrom().failure(new IOException(\"boom\"))\n"
"      .onFailure().transform(t -> new BusinessException(t))\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:73
#, fuzzy, no-wrap
msgid "Failures are terminal"
msgstr "失败是终点"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:76
#, fuzzy
msgid "Failures are terminal events. If your upstream propagates a failure, it means it can't operate normally. For Uni, that's not a problem, as you can only have an item or a failure. But for multi, it's a bit more complicated."
msgstr "故障是终端事件。如果你的上游传播了一个故障，这意味着它不能正常运行。对于Uni来说，这不是一个问题，因为你只能有一个项目或一个失败。但对多人来说，这就有点复杂了。"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:78
#, fuzzy
msgid "Even if you recover, by handling the failure, you won't get the rest of the stream. Your upstream is ... *kaputt*."
msgstr "即使你恢复了，通过处理失败，你也不会得到其余的流。你的上游是...... *kaputt* 。"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:80
#, fuzzy
msgid "Let's take the following code:"
msgstr "让我们来看看下面的代码。"

#. type: delimited block -
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:94
#, no-wrap
msgid ""
"List<String> list = Multi.createFrom().range(0, 10)\n"
"      .onItem().invoke(v -> {\n"
"              if (v == 7) {\n"
"                throw new IllegalArgumentException(\"We don't like seven!\");\n"
"              }\n"
"      })\n"
"      .onFailure().recoverWithItem(7)\n"
"      .map(integer -> integer.toString())\n"
"      .onItem().invoke(s -> System.out.println(s))\n"
"      .collectItems().asList()\n"
"      .await().indefinitely();\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:97
#, fuzzy
msgid "It produces [1, 2, 3, 4, 5, 6, 7] and not the rest of the stream. When the `onItem().invoke()` stage is called with `7`, it produces a failure. That stops the stream. It does not process more items from upstream."
msgstr "它产生[1, 2, 3, 4, 5, 6, 7]，而不是其余的流。当 `onItem().invoke()` 阶段被调用时， `7` ，它产生一个失败。这就停止了流。它不会处理更多来自上游的项目。"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:99
#, fuzzy
msgid "So what can we do? Isolate!"
msgstr "那么我们能做什么？隔离!"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:101
#, fuzzy
msgid "When a *stage* sends a failure, it sends a failure terminating the stream and cancels its subscription to the upstream (informing that it does not need more items as it's not operating correctly). So, if we need to continue processing the other items from upstream; we just need to isolate that failure and be sure we do not cancel our subscription to the upstream."
msgstr "当一个 *阶段* 发送故障时，它就会发送一个终止流的故障，并取消它对上游的订阅（告知它不需要更多的项目，因为它的操作不正确）。因此，如果我们需要继续处理来自上游的其他项目；我们只需要隔离该故障并确保不取消对上游的订阅。"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:103
#, fuzzy
msgid "The most common approach to achieve this is the following:"
msgstr "实现这一目标的最常见方法如下。"

#. type: delimited block -
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:121
#, no-wrap
msgid ""
"List<String> list = Multi.createFrom().range(0, 10)\n"
"    .onItem().transformToUniAndConcatenate(i ->\n"
"            // Isolate the failure in this block\n"
"            Uni.createFrom().item(i)\n"
"                    .onItem().invoke(v -> {\n"
"                        if (v == 7) {\n"
"                            throw new IllegalArgumentException(\"We don't like seven!\");\n"
"                        }\n"
"                    })\n"
"                    .onFailure().recoverWithItem(7)\n"
"    )\n"
"    .map(integer -> integer.toString())\n"
"    .onItem().invoke(s -> System.out.println(s))\n"
"    .collectItems().asList()\n"
"    .await().indefinitely();\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:124
#, fuzzy
msgid "Basically, we isolate the potentially failing operation. If it fails, we recover. But the cancellation only cancels that item, not the full stream, meaning we will receive the next one item and so on. This code produces the expected list."
msgstr "基本上，我们隔离了可能失败的操作。如果它失败了，我们就恢复。但是取消操作只取消了那个项目，而不是整个流，这意味着我们将收到下一个项目，以此类推。这段代码产生了预期的列表。"

#. type: Title ==
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:125
#, fuzzy, no-wrap
msgid "Summary"
msgstr "摘要"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:128
msgid "Here you go, you can now handle failure and continue the streams gracefully."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:130
msgid "If you want to know more about Mutiny, check the following video:"
msgstr ""

#. type: delimited block +
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:133
#, no-wrap
msgid "<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/kWlrGtwvOxg\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n"
msgstr ""
