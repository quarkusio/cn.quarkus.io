msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid "Why you should always update to the latest micro versions!"
msgstr "为什么要始终更新到最新的 micro 版本？"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid "How does quarkus use branches and the implication on releases and Quarkus versions"
msgstr "夸克如何使用分支以及对版本和夸克版本的影响"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid "We often get questions about how the Quarkus maintainers handle multiple branches and how this impacts releases. This short post attempts to provide the necessary information for answering such questions."
msgstr "我们经常会收到关于 Quarkus 维护者如何处理多个分支以及这对发布有何影响的问题。这篇短文试图为回答此类问题提供必要的信息。"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid "Development branch"
msgstr "发展分支"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid ""
"When a maintainer or contributor wants to make a change to Quarkus source code, a Pull Request is opened against the `main` branch.\n"
"This means that all changes once merged are part of the `main` branch and there are no feature branches (a practice that is sometimes referred to as trunk based development)."
msgstr "当维护者或贡献者想对 Quarkus 源代码进行修改时，就会针对 `main` 分支开启一个拉取请求（Pull Request）。这意味着所有修改一旦合并，就会成为 `main` 分支的一部分，而没有任何特性分支（这种做法有时被称为基于主干的开发）。"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid "The Maven version used on the `main` branch is always `999-SNAPSHOT`"
msgstr "`main` 分支上使用的 Maven 版本总是 `999-SNAPSHOT`"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid "For folks who want to contribute to Quarkus but are uncertain which branch their new change should target, the answer is unequivocally the `main` branch."
msgstr "对于那些想为 Quarkus 做出贡献，但又不确定自己的新改动应该针对哪个分支的人来说，答案无疑是 `main` 分支。"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid "New major or minor version"
msgstr "新的主版本或次要版本"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid ""
"As a short reminder, Quarkus always provides at least one Candidate Release version of a new minor or major version (in the latter case, there are almost always multiple such releases).\n"
"These releases use the `CR*` suffix, so for example the first candidate release for the `3.11` release was `3.11.CR1`."
msgstr "作为一个简短的提醒，Quarkus 总是为一个新的次版本或主版本提供至少一个候选版本（在后一种情况下，几乎总是有多个这样的版本）。这些版本使用 `CR*` 后缀，例如 `3.11` 版本的第一个候选版本是 `3.11.CR1` 。"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid ""
"When time comes to do the new Candidate Release version of a new minor version a new branch using the major and minor is created at the head of the `main` branch.\n"
"For example for the `3.11` release, the branch was made of the following HEAD:"
msgstr "当需要为一个新的次版本制作新的候选发布版本时，就会在 `main` 分支的头部创建一个使用主次版本的新分支。例如，在 `3.11` 版本中，该分支由以下 HEAD 组成："

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid "After the release process is completed, the branch looks like this:"
msgstr "发布流程完成后，分支看起来就像这样："

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid "New micro version"
msgstr "新微型版本"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid "After creating the release branch, all subsequent changes to `main` will target a future release unless they are backported to the release branch."
msgstr "创建发布分支后，除非向发布分支回溯，否则对 `main` 的所有后续修改都将以未来的发布版本为目标。"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid ""
"As we absolutely want a release branch to include the latest bug fixes from `main`, a manual triage needs to occur in order to decide\n"
"which changes in `main` should be backported to the release branch. The maintainers of the Quarkus use the `triage/backport*` labels\n"
"on candidate changes."
msgstr "由于我们绝对希望发行版分支包含 `main` 中的最新错误修复，因此需要进行人工分流，以决定 `main` 中的哪些变更应回传到发行版分支。Quarkus 的维护者在候选变更上使用 `triage/backport*` 标签。"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid "When time comes to release a new micro version (or the final `.0` version), the selected changes are manually backported to the branch"
msgstr "当需要发布新的微型版本（或最终 `.0` 版本）时，选定的更改会手动回传至分支"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid "New features from `main` are **not** backported to the release branch (with very few exceptions) as we want release branches to be as stable as possible."
msgstr "`main` 中的新功能 *不会* 回传到发布分支（极少数例外），因为我们希望发布分支尽可能稳定。"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid "For example, for the `3.11.0` release the branch looked like this:"
msgstr "例如， `3.11.0` 版本的分支是这样的："

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid "Compare this with the image for `3.11.0.CR1` and you'll see that only safe changes are included."
msgstr "将其与 `3.11.0.CR1` 的图片进行比较，你会发现其中只包含安全更改。"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid "Same for `3.11.1`:"
msgstr "`3.11.1` 也是如此："

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid "This backport process happens independently for each supported release branch. It's also the reason why the GitHub project has multiple backport labels."
msgstr "每个受支持的发布分支都有独立的 backport 流程。这也是 GitHub 项目有多个 backport 标签的原因。"

#: _posts/2024-06-12-branching-and-versioning.adoc
msgid "Conclusion"
msgstr "解决方案"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid "If Quarkus users should take away one thing from this post it's this:"
msgstr "如果说 Quarkus 用户应该从这篇文章中得到什么启示，那就是：\"Quarkus 的用户应该从这篇文章中得到什么启示？"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid ""
"Regardless of the minor version of Quarkus being used, it is important to always use the latest micro version of a release. The reason for doing so should be evident from\n"
"this blog post, but it is worth reemphasizing: The latest micro release - let's call it `.z` - is almost always going to be more stable than `.0` (or anything before `.z`)\n"
"since it only contains bug fixes and does not contain new features, as those have a higher chance of introducing new bugs."
msgstr "无论使用的是 Quarkus 的哪个次版本，重要的是始终使用最新发布的微型版本。这样做的原因在这篇博文中应该很明显，但值得再次强调：最新的微型版本（我们姑且称之为 `.z` ）几乎总是比 `.0` （或 `.z` 之前的任何版本）更稳定，因为它只包含错误修复，而不包含新功能，因为新功能引入新错误的几率更高。"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid "As to which version of Quarkus to use, it comes down to the following question:"
msgstr "至于使用哪个版本的 Quarkus，归根结底是以下问题："

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid "Does my project value bleeding edge features or stability?"
msgstr "我的项目看重的是先进功能还是稳定性？"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid ""
"If the answer is the former, then the absolute latest Quarkus version on Maven Central should be used.\n"
"If the answer is the latter, then the latest https://quarkus.io/blog/lts-releases/[LTS] version of Quarkus should be used."
msgstr "如果答案是前者，则应使用 Maven Central 上绝对最新的 Quarkus 版本。如果答案是后者，则应使用 Quarkus 的最新 link:https://quarkus.io/blog/lts-releases/[LTS] 版本。"
