msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "Getting Started with Quarkus and the A2A Java SDK"
msgstr "Quarkus 和 A2A Java SDK 入门"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "Today, we released A2A Java SDK 0.2.3.Beta1. This makes it possible to quickly get started with Quarkus and A2A."
msgstr "今天，我们发布了 A2A Java SDK 0.2.3.Beta1。这使您可以快速开始使用 Quarkus 和 A2A。"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "A couple of weeks ago, we https://quarkus.io/blog/a2a-project-launches-java-sdk/[announced] that our https://github.com/a2aproject/a2a-java[A2A Java SDK] has been contributed to the official A2A project! This was a collaboration between our WildFly and Quarkus teams at Red Hat and Google. Today, we have released A2A Java SDK 0.2.3.Beta1, which aligns with the v0.2.3 version of the https://github.com/a2aproject/A2A/tree/v0.2.3[A2A specification]. In this blog post, we'll cover how to easily get started with Quarkus and A2A using the A2A Java SDK."
msgstr "几周前，我们 link:https://quarkus.io/blog/a2a-project-launches-java-sdk/[宣布] 我们的 link:https://github.com/a2aproject/a2a-java[A2A Java SDK] 已加入 A2A 官方项目！这是我们在 Red Hat 和 Google 的 WildFly 和 Quarkus 团队之间的一次合作。今天，我们发布了 A2A Java SDK 0.2.3.Beta1，它与 link:https://github.com/a2aproject/A2A/tree/v0.2.3[A2A 规范] 的 v0.2.3 版本保持一致。在本篇博文中，我们将介绍如何使用 A2A Java SDK 轻松上手 Quarkus 和 A2A。"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "You can also check out our https://www.youtube.com/watch?v=5CZzW-wvEQs[short video] that gives an introduction to the A2A Java SDK."
msgstr "您还可以观看我们介绍 A2A Java SDK 的 link:https://www.youtube.com/watch?v=5CZzW-wvEQs[视频短片] 。"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "What's A2A?"
msgstr "什么是 A2A？"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "Before jumping into the details, let's go through what https://a2aproject.github.io/A2A/specification/[A2A] is. The _Agent2Agent_ (A2A) protocol is an open standard developed by Google. It enables AI agents to communicate and collaborate with one another, regardless of each agent's underlying framework, language, or vendor. This is important, as it paves the way for polyglot multi-agent systems."
msgstr "在了解细节之前，我们先来了解一下什么是 link:https://a2aproject.github.io/A2A/specification/[A2A] 。 _Agent2Agent_ （A2A）协议是谷歌开发的一项开放标准。它能让人工智能代理相互通信和协作，而无需考虑每个代理的底层框架、语言或供应商。这一点非常重要，因为它为多语言多代理系统铺平了道路。"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "Main Concepts"
msgstr "主要概念"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "The A2A protocol involves a few important concepts:"
msgstr "A2A 协议涉及几个重要概念："

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "*User* - This is the end user who has a request that will require the help of one or more agents."
msgstr "*用户* - 这是提出请求的最终用户，需要一个或多个代理的帮助。"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "*A2A Client* - This is the client that will send requests on the user's behalf to an A2A server agent."
msgstr "*A2A 客户端* - 这是代表用户向 A2A 服务器代理发送请求的客户端。"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "*A2A Server* - This is the server agent that will receive and respond to requests from an A2A client agent. An A2A server agent exposes an HTTP endpoint that implements the A2A protocol."
msgstr "*A2A 服务器* - 这是服务器代理，将接收并响应 A2A 客户端代理的请求。A2A 服务器代理公开一个实现 A2A 协议的 HTTP 端点。"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "A2A client and A2A server agents can be implemented using different languages and frameworks. They just need to be able to speak with each other using the A2A protocol. Communication happens using JSON-RPC 2.0 over HTTP(S) as the transport. A2A SDKs written for various programming languages enable this interoperability."
msgstr "A2A 客户端和 A2A 服务器代理可以使用不同的语言和框架实现。它们只需能使用 A2A 协议相互对话即可。通信使用 JSON-RPC 2.0 通过 HTTP(S) 作为传输方式。为各种编程语言编写的 A2A SDK 实现了这种互操作性。"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "The https://github.com/orgs/a2aproject/repositories[A2A project] aims to provide SDKs for various languages. Using the https://github.com/a2aproject/a2a-python[A2A Python SDK] and our https://github.com/a2aproject/a2a-java[A2A Java SDK], for example, it's possible for an A2A client agent written in Python to communicate with an A2A server agent written in Java and vice versa."
msgstr "link:https://github.com/orgs/a2aproject/repositories[A2A 项目] 旨在为各种语言提供 SDK。例如，使用 link:https://github.com/a2aproject/a2a-python[A2A Python SDK] 和我们的 link:https://github.com/a2aproject/a2a-java[A2A Java SDK] ，用 Python 编写的 A2A 客户端代理可以与用 Java 编写的 A2A 服务器代理进行通信，反之亦然。"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "From a Quarkus LangChain4j AI Service to an A2A Server Agent"
msgstr "从 Quarkus LangChain4j AI 服务到 A2A 服务器代理"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "Let's say we have a https://docs.quarkiverse.io/quarkus-langchain4j/dev/ai-services.html[Quarkus LangChain4j AI service] that can respond to user queries about the weather by making use of a weather MCP server:"
msgstr "假设我们有一个 link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/ai-services.html[Quarkus LangChain4j 人工智能服务] ，它可以利用天气 MCP 服务器来响应用户对天气的查询："

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "To turn this weather agent into an A2A server agent, there are a few simple steps we need to follow:"
msgstr "要将气象代理变为 A2A 服务器代理，我们需要遵循几个简单的步骤："

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "Add an A2A Java SDK Server Dependency"
msgstr "添加 A2A Java SDK 服务器依赖项"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "The `io.github.a2asdk` `groupId` is temporary and will likely change for future releases. Keep an eye on the `a2a-java` https://github.com/a2aproject/a2a-java/blob/main/README.md[README] for up-to-date documentation."
msgstr "`io.github.a2asdk` `groupId` 是临时性的，在未来的版本中可能会有所改变。请关注 `a2a-java` link:https://github.com/a2aproject/a2a-java/blob/main/README.md[README] 以获取最新文档。"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "`a2a-java-sdk-server-quarkus` provides access to the core classes that make up the A2A specification and provides the HTTP endpoint that implements the A2A protocol. This dependency makes use of Quarkus Reactive Routes. If not using Quarkus, the `a2a-java-sdk-server-jakarta` dependency can be used to expose an A2A server agent in a Jakarta server supporting CDI and Jakarta RESTful Web Services."
msgstr "`a2a-java-sdk-server-quarkus` 提供了对构成 A2A 规范的核心类的访问，并提供了实现 A2A 协议的 HTTP 端点。该依赖项使用了 Quarkus Reactive Routes。如果不使用 Quarkus， 依赖关系可用于在支持 CDI 和 Jakarta RESTful Web 服务的 Jakarta 服务器中公开 A2A 服务器代理。 `a2a-java-sdk-server-jakarta` "

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "Add a Class that Creates an A2A `AgentCard`"
msgstr "添加创建 A2A 的类 `AgentCard`"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "The `AgentCard` is a class that describes the capabilities of an A2A server agent. Other agents or clients will use this to understand what our weather agent can do. The A2A Java SDK will automatically expose this agent card at the server agent's `.well-known/agent.json` URI. For example, if our A2A server agent is running on http://localhost:10001, the agent card will be available at http://localhost:10001/.well-known/agent.json."
msgstr "`AgentCard` 是一个描述 A2A 服务器代理能力的类。其他代理或客户端将使用它来了解我们的天气代理能做什么。A2A Java SDK 将在服务器代理的 `.well-known/agent.json` URI 上自动公开该代理卡。例如，如果我们的 A2A 服务器代理运行在 http://localhost:10001 上 link:http://localhost:10001[，] 代理卡将在 http://localhost:10001/.well-known/agent.json 上提供。"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "The URL of our A2A server agent. We set `quarkus.http.port` to `10001` in our `application.properties` file so our A2A server agent will be available at http://localhost:10001."
msgstr "我们的 A2A 服务器代理的 URL。我们在 `application.properties` 文件中将 `quarkus.http.port` 设置为 `10001` ，这样我们的 A2A 服务器代理就可以在 http://localhost:10001 上使用 link:http://localhost:10001[。]"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "Indicates the capabilities of our A2A server agent like whether it supports streaming, push notifications, and state transition history."
msgstr "表示 A2A 服务器代理的功能，如是否支持流媒体、推送通知和状态转换历史。"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "Describes what our agent can do."
msgstr "说明我们的代理可以做什么。"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "An example query that our agent can handle."
msgstr "我们的代理可以处理的查询示例。"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "Add a class that creates an A2A `AgentExecutor`"
msgstr "添加一个创建 A2A 的类 `AgentExecutor`"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "The `AgentExecutor` is a class that will be used to process requests sent to our A2A server agent. It will pass the requests received from the A2A client to our Quarkus LangChain4j AI service and is responsible for returning the responses back to the A2A client. The A2A Java SDK will call this executor when a request is sent to our A2A server agent."
msgstr "`AgentExecutor` 是一个用于处理发送到 A2A 服务器代理的请求的类。它将把从 A2A 客户端接收到的请求传递给我们的 Quarkus LangChain4j AI 服务，并负责将响应返回给 A2A 客户端。当请求发送到我们的 A2A 服务器代理时，A2A Java SDK 将调用此执行器。"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "Notice that the `AgentExecutor` interface specifies two methods, `execute` and `cancel`, that we need to implement."
msgstr "请注意， `AgentExecutor` 接口指定了我们需要实现的两个方法 `execute` 和 `cancel` 。"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "This is our Quarkus LangChain4j AI service."
msgstr "这是我们的 Quarkus LangChain4j AI 服务。"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "The `execute` method will be used to process requests from an A2A client."
msgstr "`execute` 方法将用于处理 A2A 客户端的请求。"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "Here we are invoking our Quarkus LangChain4j AI service."
msgstr "在这里，我们调用 Quarkus LangChain4j AI 服务。"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "The `cancel` method be used to cancel an ongoing request."
msgstr "`cancel` 方法用于取消正在进行的请求。"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "That's it, we can now start our Quarkus application as shown below and our A2A server agent will be available at http://localhost:10001. A2A client agents can now send weather-related queries to our A2A server agent and our agent will respond with the weather information."
msgstr "就是这样，我们现在可以启动 Quarkus 应用程序，如下图所示，我们的 A2A 服务器代理将在 http://localhost:10001 上可用 link:http://localhost:10001[。] A2A 客户端代理现在可以向我们的 A2A 服务器代理发送天气相关查询，我们的代理将回复天气信息。"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "We've gone from a Quarkus LangChain4j AI service to an A2A server agent in just a few steps!"
msgstr "我们只用了几个步骤就从 Quarkus LangChain4j AI 服务变成了 A2A 服务器代理！"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "The source code for this example is available https://github.com/a2aproject/a2a-samples/tree/main/samples/multi_language/python_and_java_multiagent/weather_agent[here]."
msgstr "此示例的源代码可在 link:https://github.com/a2aproject/a2a-samples/tree/main/samples/multi_language/python_and_java_multiagent/weather_agent[此处] 获取。"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "Validating our A2A Server Agent Using the A2A Inspector"
msgstr "使用 A2A 检查器验证我们的 A2A 服务器代理"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "The https://github.com/a2aproject/a2a-inspector[A2A Inspector] is a web application that's very easy to run and can be used to inspect any A2A server agent."
msgstr "link:https://github.com/a2aproject/a2a-inspector[A2A 检查器是] 一个网络应用程序，运行非常简单，可用于检查任何 A2A 服务器代理。"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "We can use the A2A Inspector to validate our A2A server agent by specifying our server agent's URL in the `Connect` text box."
msgstr "我们可以在 `Connect` 文本框中指定服务器代理的 URL，使用 A2A 检查器来验证我们的 A2A 服务器代理。"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "The A2A Inspector will obtain and show our server agent's agent card:"
msgstr "A2A 检查员将获取并出示我们服务器代理的代理卡："

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "Notice that this matches the information we provided in our `WeatherAgentCardProducer` class."
msgstr "请注意，这与我们在 `WeatherAgentCardProducer` 类中提供的信息一致。"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "You can also use the inspector to send requests to the A2A server agent and to view the raw HTTP requests and responses."
msgstr "您还可以使用检查器向 A2A 服务器代理发送请求，并查看原始 HTTP 请求和响应。"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "Multi-Agent Orchestration with Python and Java Server Agents"
msgstr "使用 Python 和 Java 服务器代理进行多代理协调"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "Let's take a look at a more complex example that makes use of our weather A2A server agent."
msgstr "让我们来看一个更复杂的例子，它使用了我们的天气 A2A 服务器代理。"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "This is a multi-agent example where a host agent delegates requests to two different A2A server agents, an Airbnb agent and our Weather agent, based on the user's question. Under the hood, the host agent makes use of each agent's agent card to determine the capabilities of each agent and uses an LLM to determine which agent to delegate the request to based on their capabilities."
msgstr "这是一个多代理示例，其中主机代理根据用户的问题将请求委托给两个不同的 A2A 服务器代理，一个是 Airbnb 代理，另一个是我们的天气代理。在引擎盖下，主机代理使用每个代理的代理卡来确定每个代理的能力，并使用 LLM 根据它们的能力来确定将请求委托给哪个代理。"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "The https://github.com/a2aproject/a2a-samples/tree/main/samples/multi_language/python_and_java_multiagent/airbnb_agent[Airbnb agent] is a Python agent that's implemented using LangGraph and makes use of the A2A Python SDK."
msgstr "link:https://github.com/a2aproject/a2a-samples/tree/main/samples/multi_language/python_and_java_multiagent/airbnb_agent[Airbnb 代理] 是一个使用 LangGraph 实现的 Python 代理，并使用了 A2A Python SDK。"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "The https://github.com/a2aproject/a2a-samples/tree/main/samples/multi_language/python_and_java_multiagent/weather_agent[Weather agent] is our Java agent that's implemented using Quarkus LangChain4j and makes use of the A2A Java SDK."
msgstr "link:https://github.com/a2aproject/a2a-samples/tree/main/samples/multi_language/python_and_java_multiagent/weather_agent[气象代理] 是我们的 Java 代理，使用 Quarkus LangChain4j 实现，并使用 A2A Java SDK。"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "Notice that the host agent uses A2A clients written in Python to communicate with the server agents. It's also possible to use an https://github.com/a2aproject/a2a-java?tab=readme-ov-file#a2a-client[A2A client] written in Java using our A2A Java SDK."
msgstr "请注意，主机代理使用用 Python 编写的 A2A 客户端与服务器代理进行通信。也可以使用我们的 A2A Java SDK，使用 Java 编写的 A2A link:https://github.com/a2aproject/a2a-java?tab=readme-ov-file#a2a-client[客户端] 。"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "The complete source code for this example is available https://github.com/a2aproject/a2a-samples/tree/main/samples/multi_language/python_and_java_multiagent[here]. To experiment with this multi-agent example, try sending different types of questions to the host agent, for example:"
msgstr "本示例的完整源代码可在 link:https://github.com/a2aproject/a2a-samples/tree/main/samples/multi_language/python_and_java_multiagent[此处] 获取。要试用这个多代理示例，可以尝试向主机代理发送不同类型的问题，例如"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "What's the weather in New York, NY?"
msgstr "纽约州纽约市的天气如何？"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "Find me a room in LA, CA, July 7-9, 2 adults"
msgstr "7 月 7 日至 9 日在加利福尼亚州洛杉矶为我找一个房间，2 名成人"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "Notice that the host agent will delegate the first question to the Weather agent and the second question to the Airbnb agent."
msgstr "请注意，房东代理将把第一个问题委托给天气代理，第二个问题委托给 Airbnb 代理。"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "And the second question will be delegated to the Airbnb agent:"
msgstr "第二个问题将交给 Airbnb 代理："

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
msgid "Conclusion"
msgstr "解决方案"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "We've seen how easy it is to get started with Quarkus and A2A using the A2A Java SDK. With just a few steps, we can turn a Quarkus LangChain4j AI service into an A2A server agent that can communicate with other A2A agents, regardless of the language or framework they are implemented in. The LangChain4j and Quarkus teams are also working on removing most of the boilerplate code to expose an A2A server and interact with A2A clients. So, stay tuned!"
msgstr "我们已经看到，使用 A2A Java SDK 开始使用 Quarkus 和 A2A 是多么容易。只需几步，我们就能将 Quarkus LangChain4j AI 服务转化为 A2A 服务器代理，它可以与其他 A2A 代理进行通信，无论它们是用哪种语言或框架实现的。LangChain4j 和 Quarkus 团队还在努力移除大部分模板代码，以便公开 A2A 服务器并与 A2A 客户端交互。敬请期待！"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "Further Reading"
msgstr "更多阅读"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "https://a2aproject.github.io/A2A/specification/[A2A Specification]"
msgstr "link:https://a2aproject.github.io/A2A/specification/[A2A 规格]"

#: _posts/2025-07-09-quarkus-and-a2a-java-sdk.adoc
#, fuzzy
msgid "https://github.com/a2aproject/a2a-java/blob/main/README.md[A2A Java SDK Documentation]"
msgstr "link:https://github.com/a2aproject/a2a-java/blob/main/README.md[A2A Java SDK 文档]"
