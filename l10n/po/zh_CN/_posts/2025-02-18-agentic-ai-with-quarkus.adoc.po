msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "Agentic AI with Quarkus - part 1"
msgstr "使用 Quarkus 的代理人工智能 - 第 1 部分"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid ""
"Although there is no universally agreed definition of an AI agent, several "
"emerging patterns demonstrate how to coordinate and combine the capabilities "
"of multiple AI services to create AI-infused applications that can "
"accomplish more complex tasks."
msgstr ""
"尽管对人工智能代理还没有一个普遍认同的定义，但一些新兴模式展示了如何协调和结合多种人工智能服务的能力，以创建能够完成更复杂任务的人工智能应用。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid ""
"According to a https://www.anthropic.com/research/building-effective-"
"agents[recent article published by Antropic researchers], these _Agentic "
"System architectures_ can be grouped into two main categories:"
msgstr ""
"根据 link:https://www.anthropic.com/research/building-effective-"
"agents[Antropic 研究人员最近发表的] 一篇 link:https://www.anthropic.com/research/"
"building-effective-agents[文章] ，这些 _代理系统架构_ 可分为两大类："

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid ""
"**workflows**: LLMs and tools are orchestrated through predefined code "
"paths,"
msgstr "*工作流程* ：LLM 和工具通过预定义的代码路径进行协调、"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid ""
"**agents**: LLMs dynamically direct their processes and tool usage, "
"maintaining control over how they execute tasks."
msgstr "*代理* ：LLM 动态指导其进程和工具的使用，保持对任务执行方式的控制。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid ""
"The goal of this series of articles is to discuss the most common workflow "
"and agentic AI patterns and architectures, with the practical aid of https://"
"github.com/mariofusco/quarkus-agentic-ai[this project] that demonstrates for "
"each of them an example of how they can be implemented through Quarkus and "
"its LangChain4j integration. Of course, a real-world application may use and "
"combine these patterns in multiple ways to implement a complex behavior."
msgstr ""
"本系列文章的目的是讨论最常见的工作流和代理人工智能模式和架构，并通过 link:https://github.com/mariofusco/"
"quarkus-agentic-ai[本项目] 的实际帮助，展示如何通过 Quarkus 及其 LangChain4j "
"集成来实现这些模式和架构。当然，现实世界中的应用可能会以多种方式使用和组合这些模式，以实现复杂的行为。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid ""
"This first article focuses on the _workflow_ patterns. A second article will "
"cover the _agent_ patterns."
msgstr "第一篇文章主要介绍 _工作流_ 模式。第二篇文章将介绍 _代理_ 模式。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid ""
"All the demos in that project run the LLMs inference locally through an "
"https://ollama.com/[ollama] server. In particular the demos in the workflow "
"section use a llama3.2 model, while the ones relative to the pure agents one "
"employ qwen2.5 since this last model empirically demonstrated of working "
"better when multiple tool callings are required."
msgstr ""
"该项目中的所有演示都是通过 link:https://ollama.com/[ollama] 服务器在本地运行 LLMs "
"推断。特别是工作流程部分的演示使用了 llama3.2 模型，而纯代理部分的演示则使用了 qwen2."
"5，因为根据经验，当需要调用多个工具时，最后一个模型的效果更好。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "Workflow patterns"
msgstr "工作流程模式"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid ""
"AI workflows are patterns in which different LLM-based services (_AI "
"services_ in the Quarkus vocabulary) are coordinated **programmatically** in "
"a predetermined manner.\n"
"This article introduces three base patterns, namely:"
msgstr ""
"人工智能工作流是一种模式，在这种模式中，不同的基于 LLM 的服务 _（_ Quarkus 词汇表中的 _人工智能服务_ ）以预定的方式进行 *编程* "
"协调。本文介绍三种基本模式，即"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "xref:#prompt-chaining[the prompt chaining pattern]"
msgstr "xref:prompt-chaining[提示链模式]"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "xref:#parallelization[the parallelization pattern]"
msgstr "xref:parallelization[并行模式]"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "xref:#routing[the routing pattern]"
msgstr "xref:routing[路由模式]"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "Prompt chaining"
msgstr "提示链"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid ""
"Prompt chaining is, without a doubt, the simplest yet powerful and effective "
"technique in agentic AI workflows. In this technique, the output of one "
"prompt (the response from an LLM) becomes the input of the next, enabling "
"complex, multi-step reasoning or task execution. It is ideal for situations "
"with a straightforward way to decompose a complex task into smaller and "
"better-delimited steps, thus reducing the possibility of hallucinations or "
"other LLMs misbehaving."
msgstr ""
"毫无疑问，提示链是代理人工智能工作流程中最简单但却强大有效的技术。在这种技术中，一个提示的输出（来自 LLM "
"的响应）成为下一个提示的输入，从而实现复杂的多步骤推理或任务执行。它非常适合在有直接方法的情况下将复杂任务分解成更小、更明确的步骤，从而降低幻觉或其他 "
"LLM 出现异常的可能性。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid ""
"Understanding that each coordinated call to LLM may rely on different models "
"and system messages is essential. Thus, each step can be implemented using a "
"more specialized model and system message."
msgstr "理解 LLM 的每次协调调用都可能依赖于不同的模型和系统信息是至关重要的。因此，每个步骤都可以使用更专业的模型和系统信息来实现。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid ""
"A typical use case for applying this technique is content creation, like "
"advertising or novel writing. For instance, this https://github.com/"
"mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/"
"promptchaining[first example] leverages this pattern to implement a creative "
"writing and editing workflow, where the https://github.com/mariofusco/"
"quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/promptchaining/"
"CreativeWriter.java[first AI service] is the following:"
msgstr ""
"应用这种技术的典型用例是内容创作，如广告或小说写作。例如， link:https://github.com/mariofusco/quarkus-"
"agentic-ai/blob/main/src/main/java/org/agenticai/promptchaining[第一个例子] "
"利用这种模式实现了创意写作和编辑工作流程，其中 link:https://github.com/mariofusco/quarkus-agentic-"
"ai/blob/main/src/main/java/org/agenticai/promptchaining/CreativeWriter."
"java[第一个人工智能服务] 如下："

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid ""
"It generates a story draft on a topic provided by the user. In contrast, two "
"more services, implemented very similarly to this one, subsequently modify "
"the outcome of the first one. In particular, a https://github.com/mariofusco/"
"quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/promptchaining/"
"StyleEditor.java[second service] rewrites the draft to make it more coherent "
"with a determined style, while a https://github.com/mariofusco/quarkus-"
"agentic-ai/blob/main/src/main/java/org/agenticai/promptchaining/"
"AudienceEditor.java[third one] executes a final edit to make it a good fit "
"for the required audience."
msgstr ""
"它根据用户提供的主题生成故事草稿。与此相反，另外两个服务的实现方式与此非常相似，它们随后对第一个服务的结果进行修改。其中， link:https://"
"github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/"
"agenticai/promptchaining/StyleEditor.java[第二个服务会] 对草稿进行改写，使其更符合所确定的风格，而 link:"
"https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/"
"agenticai/promptchaining/AudienceEditor.java[第三个] link:https://github.com/"
"mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/"
"promptchaining/StyleEditor.java[服务] 则会进行最后的编辑，使其更适合所需的受众。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid ""
"It is also worth to be noted that all these three AI services are intended "
"to be used through one-shot calls in a completely stateless way, so they are "
"configured to not have any https://docs.langchain4j.dev/tutorials/chat-"
"memory/[chat memory]. Regardless of this configuration, each AI service has "
"its own chat memory, confined to the single service, and this is why it is "
"necessary to explicitly pass to each of them the output produced by the "
"former LLM in the chain."
msgstr ""
"还值得注意的是，所有这三个人工智能服务都是通过一次性调用以完全无状态的方式使用的，因此它们被配置为没有任何 link:https://docs."
"langchain4j.dev/tutorials/chat-memory/[聊天内存] "
"。无论配置如何，每个人工智能服务都有自己的聊天内存，仅限于单个服务，这就是为什么有必要将链中前一个 LLM 产生的输出明确传递给每个服务的原因。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "Prompt chaining pattern"
msgstr "提示链模式"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid ""
"In this case, it is pretty straightforward to expose this service through a "
"https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/"
"agenticai/promptchaining/WriterResource.java[HTTP endpoint] that invokes "
"these AI services one after the other, making the editors rewrite or refine "
"the content produced by the first creative writer:"
msgstr ""
"在这种情况下，通过 link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/"
"src/main/java/org/agenticai/promptchaining/WriterResource.java[HTTP 端点] "
"公开这项服务是非常简单的，它可以一个接一个地调用这些人工智能服务，让编辑们改写或完善第一位创意写手制作的内容："

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid ""
"The HTTP endpoint allows us to define a topic, style, and audience of the "
"novel to be produced; so, for example, running the project locally, it would "
"be possible to obtain a drama about dogs having kids as the target audience "
"by calling this URL:"
msgstr ""
"HTTP 端点允许我们定义要制作的小说的主题、风格和受众；因此，举例来说，在本地运行该项目时，可以通过调用此 URL "
"获得一部以狗生孩子为目标受众的电视剧："

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid ""
"As an example, it generates a result like https://github.com/mariofusco/"
"quarkus-agentic-ai/blob/main/text/dogs-novel.txt[this]. Since this project "
"integrates the observability capabilities provided by Quarkus out-of-the-"
"box, it is also possible to look at the tracing of the flow of invocations "
"performed to fulfill this request, which, of course, puts in evidence of the "
"sequential nature of this pattern."
msgstr ""
"举例来说，它生成了 link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/"
"text/dogs-novel.txt[这样] 一个结果。由于该项目集成了 Quarkus "
"提供的开箱即用的可观察性功能，因此还可以查看为满足该请求而执行的调用流的跟踪，当然，这也证明了这种模式的顺序性。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "Tracing sequential execution of the prompt chaining pattern"
msgstr "跟踪提示链模式的顺序执行情况"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "Parallelization"
msgstr "并行化"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid ""
"This second pattern also orchestrates multiple calls to LLMs. However, "
"unlike the prompt chaining pattern, the calls are independent and do not "
"require the output of one call to be used as the input of another. In these "
"situations, those calls can be performed in parallel, followed by an "
"aggregator that combines their outcomes."
msgstr ""
"第二种模式也是协调对 LLM "
"的多次调用。不过，与提示链模式不同的是，这些调用是独立的，不需要将一个调用的输出作为另一个调用的输入。在这种情况下，这些调用可以并行执行，然后由聚合器将它们的结果组合起来。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid ""
"To demonstrate how this works, let's consider this https://github.com/"
"mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/"
"parallelization[second example]. This code recommends a plan for a lovely "
"evening with a specific mood, combining a movie and a meal that matches that "
"mood. The https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/"
"main/java/org/agenticai/parallelization/EveningPlannerResource.java[HTTP "
"endpoint] implements this goal by invoking two different AI services **in "
"parallel** and then combining their outcome, putting together the three "
"different suggestions of the two different LLM-based experts."
msgstr ""
"为了演示其工作原理，我们来看看 link:https://github.com/mariofusco/quarkus-agentic-ai/blob/"
"main/src/main/java/org/agenticai/parallelization[第二个示例] "
"。这段代码推荐了一个具有特定情绪的美好夜晚的计划，结合了一部电影和一顿符合这种情绪的饭菜。 link:https://github.com/"
"mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/"
"parallelization/EveningPlannerResource.java[HTTP 端点] 通过 *并行* "
"调用两个不同的人工智能服务来实现这一目标，然后将它们的结果结合起来，将两个不同的基于 LLM 的专家提出的三个不同建议放在一起。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid ""
"The https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/"
"org/agenticai/parallelization/MovieExpert.java[first LLM] is an AI service "
"asked to provide three titles of movies matching the given mood."
msgstr ""
"link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/"
"java/org/agenticai/parallelization/MovieExpert.java[第一个 LLM] "
"是一项人工智能服务，要求它提供三部与给定情绪相匹配的电影。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid ""
"The https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/"
"org/agenticai/parallelization/FoodExpert.java[second one], with a very "
"similar implementation is asked to provide three meals. When these LLM calls "
"are complete, the results (3 lists of 3 items each) are aggregated to create "
"a list of 3 fantastic evening plans with a suggested movie and meal each."
msgstr ""
"link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/"
"java/org/agenticai/parallelization/FoodExpert.java[第二个] "
"列表的实现方式非常相似，要求提供三餐。当这些 LLM 调用完成后，结果（3 份清单，每份清单包含 3 个项目）会汇总在一起，形成 3 "
"个梦幻般的晚间计划清单，每份清单包含一部电影和一顿饭。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "The parallelization pattern"
msgstr "并行化模式"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid ""
"For instance asking that endpoint to provide evening plans for a romantic "
"mood:"
msgstr "例如，要求该终端提供晚上的浪漫计划："

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "The outcome is something like:"
msgstr "结果是这样的"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid ""
"[\n"
"  EveningPlan[movie=1. The Notebook, meal=1. Candlelit Chicken Piccata],\n"
"  EveningPlan[movie=2. La La Land, meal=2. Rose Petal Risotto],\n"
"  EveningPlan[movie=3. Crazy, Stupid, Love., meal=3. Sunset Seared Scallops]\n"
"]"
msgstr ""
"[晚间计划[电影=1.恋恋笔记本，餐食=1.烛光鸡肉]，晚间计划[电影=2.拉拉乐园，餐食=2.玫瑰花瓣烩饭]，晚间计划[电影=3.疯狂愚蠢的爱，餐食="
"3.日落烤扇贝] ]。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid ""
"In this case, the tracing of the flow of invocations performed to fulfill "
"this request shows, as expected, that the two LLM invocations are performed "
"in parallel."
msgstr "在这种情况下，对为满足该请求而执行的调用流的跟踪显示，正如预期的那样，两个 LLM 调用是并行执行的。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "Tracing parallel LLMs invocation"
msgstr "跟踪并行 LLM 的调用"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "Routing"
msgstr "路由"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid ""
"Another common situation is the need to direct tasks requiring specific "
"handling to specialized models, tools, or processes based on determined "
"criteria. In these cases, the routing workflow allows the dynamic allocation "
"of tasks to the most suitable AI service."
msgstr ""
"另一种常见情况是，需要根据确定的标准将需要特定处理的任务分配给专门的模型、工具或流程。在这种情况下，路由工作流程可以将任务动态分配给最合适的人工智能服务。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid ""
"https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/"
"agenticai/routing[This example] shows how this pattern can be applied in a "
"simple scenario where a user asks a question that has to be redirected to a "
"https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/"
"agenticai/routing/LegalExpert.java[legal], https://github.com/mariofusco/"
"quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/routing/"
"MedicalExpert.java[medical] or https://github.com/mariofusco/quarkus-agentic-"
"ai/blob/main/src/main/java/org/agenticai/routing/TechnicalExpert."
"java[technical] expert to be answered most accurately, where any of these "
"experts are an AI service implemented for instance as follows:"
msgstr ""
"link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/"
"java/org/agenticai/routing[本示例] 展示了如何将这种模式应用到一个简单的场景中，即用户提出的问题必须转到 link:"
"https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/"
"agenticai/routing/LegalExpert.java[法律] 、 link:https://github.com/mariofusco/"
"quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/routing/"
"MedicalExpert.java[医学] 或 link:https://github.com/mariofusco/quarkus-agentic-"
"ai/blob/main/src/main/java/org/agenticai/routing/TechnicalExpert.java[技术] "
"专家那里才能得到最准确的回答，而这些专家中的任何一个都是人工智能服务，例如实现方式如下："

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid ""
"The categorization of the user's request is performed by https://github.com/"
"mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/routing/"
"CategoryRouter.java[another LLM service]"
msgstr ""
"用户请求的分类由 link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/"
"main/java/org/agenticai/routing/CategoryRouter.java[另一项本地语言管理服务] 执行"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid ""
"that returns one of the possible categories of the user's request, encoded "
"in this enumeration:"
msgstr "返回以该枚举编码的用户请求的可能类别之一："

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid ""
"Thus, the https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/"
"main/java/org/agenticai/routing/RouterService.java[router service] can send "
"the question to the right expert."
msgstr ""
"这样， link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/"
"java/org/agenticai/routing/RouterService.java[路由器服务] 就能将问题发送给合适的专家。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "Routing pattern"
msgstr "路由模式"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid ""
"In this way, when the user calls the https://github.com/mariofusco/quarkus-"
"agentic-ai/blob/main/src/main/java/org/agenticai/routing/"
"ExpertAssistanceResource.java[HTTP endpoint], exposing this service writing "
"something like: \"I broke my leg what should I do\":"
msgstr ""
"这样，当用户调用 link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/"
"main/java/org/agenticai/routing/ExpertAssistanceResource.java[HTTP 端点] "
"时，该服务就会显示出类似的内容：\"我的腿摔断了，我该怎么办？"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid ""
"The first LLM categorizes this request as a medical one, and the router "
"forwards it to the medical expert LLM, thus generating a result like https://"
"github.com/mariofusco/quarkus-agentic-ai/blob/main/text/expert-response."
"txt[this]."
msgstr ""
"第一个 LLM 将该请求归类为医疗请求，路由器将其转发给医疗专家 LLM，从而产生了这样 link:https://github.com/"
"mariofusco/quarkus-agentic-ai/blob/main/text/expert-response.txt[的] 结果。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
msgid "Conclusion"
msgstr "解决方案"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid ""
"This article demonstrated how you can implement _workflow patterns_ with "
"Quarkus Langchain4J.\n"
"Quarkus Langchain4J provides a powerful and flexible way to implement these "
"patterns, allowing you to orchestrate multiple AI services in a way that is "
"both efficient and easy to understand."
msgstr ""
"本文展示了如何使用 Quarkus Langchain4J 实现 _工作流模式_ 。Quarkus Langchain4J "
"提供了实现这些模式的强大而灵活的方法，使您能够以一种既高效又易于理解的方式协调多个人工智能服务。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "The next article will cover the _agent patterns_. So, stay tuned!"
msgstr "下一篇文章将介绍 _代理模式_ 。敬请期待！"
