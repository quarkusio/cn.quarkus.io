# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:1
#, fuzzy, no-wrap
msgid "cescoffier"
msgstr "鹤壁市"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:1
#, fuzzy, no-wrap
msgid "2020-10-27"
msgstr "2020-10-27"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "职位"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:1
#, fuzzy, no-wrap
msgid "How does flow control works with Mutiny"
msgstr "流量控制是如何在Mutiny中工作的"

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:1
#, fuzzy, no-wrap
msgid "reactive mutiny streams"
msgstr "反应性叛变流"

#. type: YAML Front Matter: title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:1
#, fuzzy, no-wrap
msgid "Mutiny - Flow control and Back-pressure"
msgstr "叛变--流量控制和背压"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:13
#, fuzzy
msgid "Reactive Programming offers an elegant, flexible, and powerful way to write asynchronous code.  It supports failure handling, both sequential and parallel operation composition, and plenty of operators.  Reactive programming promotes data streams as a primary construct, and your code is observing streams and reacting to signals."
msgstr "反应式编程为编写异步代码提供了一种优雅、灵活和强大的方式。它支持故障处理，支持顺序和平行操作组成，以及大量的操作符。反应式编程提倡将数据流作为一种主要的构造，你的代码在观察数据流并对信号做出反应。"

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:14
#, fuzzy, no-wrap
msgid "Origins of back-pressure (https://impurepics.com/posts/2018-05-26-backpressure-origins.html)   "
msgstr "背压的起源 https://impurepics.com/posts/2018-05-26-backpressure-origins.html "

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:15
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:27
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:169
#, fuzzy, no-wrap
msgid "800"
msgstr "800"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:15
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/back-pressure-origin.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:19
#, fuzzy
msgid "However, using data streams as primary constructs does not come without some issues.  One of the main problems is the need for flow control."
msgstr "然而，使用数据流作为主要结构并不是没有问题的。其中一个主要问题是对流量控制的需求。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:21
#, fuzzy
msgid "## The producer/consumer problem"
msgstr "生产者/消费者问题\n"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:25
#, fuzzy
msgid "Let's imagine a fast producer and a slow consumer.  The producer sends events too quickly for the consumer that can't keep up.  That phenomenon is remarkably well illustrated in the following picture."
msgstr "让我们想象一个快速的生产者和一个缓慢的消费者。生产者发送事件的速度过快，而消费者则无法跟上。这种现象在下图中得到了显著的说明。"

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:26
#, fuzzy, no-wrap
msgid "No Back-Pressure (https://impurepics.com/posts/2018-05-26-backpressure-origins.html)"
msgstr "无背压 https://impurepics.com/posts/2018-05-26-backpressure-origins.html "

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:27
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/back-pressure-no.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:31
#, fuzzy
msgid "Let's see some code.  Imagine a producer emitting an event every ten milliseconds, while the consumer can only consume one per second."
msgstr "让我们看看一些代码。想象一下，生产者每10毫秒发出一个事件，而消费者每秒钟只能消费一个。"

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:41
#, no-wrap
msgid ""
"Multi.createFrom().ticks().every(Duration.ofMillis(10))\n"
"    .emitOn(Infrastructure.getDefaultExecutor())\n"
"    .onItem().transform(BackPressureExample::canOnlyConsumeOneItemPerSecond)\n"
"    .subscribe().with(\n"
"        item -> System.out.println(\"Got item: \" + item),\n"
"        failure -> System.out.println(\"Got failure: \" + failure)\n"
");\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:44
#, fuzzy
msgid "If you run that code, you will see that the subscriber gets a `MissingBackPressureFailure,` indicating that the downstream cannot keep up:"
msgstr "如果你运行这段代码，你会看到订阅者得到一个 `MissingBackPressureFailure,` ，表明下游无法跟上。"

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:49
#, no-wrap
msgid ""
"Got item: 0\n"
"Got failure: io.smallrye.mutiny.subscription.BackPressureFailure: Could not emit tick 16 due to lack of requests\n"
msgstr ""

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:52
#, fuzzy, no-wrap
msgid "emitOn"
msgstr "排放"

#. type: delimited block =
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:57
#, fuzzy
msgid "In the previous code, you may wonder about the `emitOn.` It's a Mutiny operator allowing controlling on which thread the Subscriber receives the events.  Back-pressure is often required when multiple threads are involved, as in a single thread approach, blocking the thread would block the source, which may have dramatic consequences."
msgstr "在前面的代码中，你可能会想知道 `emitOn.` It's a Mutiny operator允许控制订阅者在哪个线程上接收事件。当涉及到多个线程时，通常需要进行反压，因为在单线程的方法中，阻塞线程会阻塞源，这可能会产生戏剧性的后果。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:60
#, fuzzy
msgid "So, what can we do to handle this _overflow_?"
msgstr "那么，我们可以做什么来处理这种 _溢出_ ？"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:62
#, fuzzy
msgid "### Buffering items"
msgstr "缓冲项目"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:65
#, fuzzy
msgid "The first natural solution uses buffers.  The consumer can buffer the events, so it does not fail:"
msgstr "第一个自然解决方案是使用缓冲器。消费者可以缓冲事件，所以它不会失败。"

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:66
#, fuzzy, no-wrap
msgid "Buffering to avoid overwhelming downstream consumers"
msgstr "缓冲以避免下游消费者不堪重负"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:67
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/back-pressure-buffer.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:71
#, fuzzy
msgid "Using a buffer allows handling small bumps, but it's not a long term solution.  If we update the code to use a large buffer, the consumer can handle more events but eventually fails:"
msgstr "使用缓冲区可以处理小的颠簸，但这不是一个长期的解决方案。如果我们更新代码，使用一个大的缓冲区，消费者可以处理更多的事件，但最终会失败。"

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:82
#, no-wrap
msgid ""
"Multi.createFrom().ticks().every(Duration.ofMillis(10))\n"
"    .onOverflow().buffer(250)\n"
"    .emitOn(Infrastructure.getDefaultExecutor())\n"
"    .onItem().transform(BufferingExample::canOnlyConsumeOneItemPerSecond)\n"
"    .subscribe().with(\n"
"        item -> System.out.println(\"Got item: \" + item),\n"
"        failure -> System.out.println(\"Got failure: \" + failure)\n"
");\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:90
#, no-wrap
msgid ""
"Got item: 0\n"
"Got item: 1\n"
"Got item: 2\n"
"Got failure: io.smallrye.mutiny.subscription.BackPressureFailure: Buffer is full due to lack of downstream consumption\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:95
#, fuzzy
msgid "You can imagine increasing the buffer's size, but it's hard to anticipate the optimal value.  What about unbounded buffers? In general, that's a terrible idea as you may run out of memory."
msgstr "你可以想象增加缓冲区的大小，但很难预测到最佳值。不受限制的缓冲区如何处理？一般来说，这是个糟糕的主意，因为你可能会耗尽内存。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:97
#, fuzzy
msgid "### Dropping items"
msgstr "掉落物品"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:99
#, fuzzy
msgid "Another solution consists of dropping items:"
msgstr "另一个解决方案包括掉落物品。"

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:100
#, fuzzy, no-wrap
msgid "Dropping items to avoid overwhelming downstream consumers"
msgstr "丢弃物品以避免下游消费者不堪重负"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:101
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/back-pressure-drop.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:104
#, fuzzy
msgid "You can drop the newest received items or oldest ones:"
msgstr "你可以放弃最新收到的物品或最旧的物品。"

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:116
#, no-wrap
msgid ""
"Multi.createFrom().ticks().every(Duration.ofMillis(10))\n"
"    .onOverflow().drop(x -> System.out.println(\"Dropping item \" + x))\n"
"    .emitOn(Infrastructure.getDefaultExecutor())\n"
"    .onItem().transform(DropExample::canOnlyConsumeOneItemPerSecond)\n"
"    .transform().byTakingFirstItems(10)\n"
"    .subscribe().with(\n"
"        item -> System.out.println(\"Got item: \" + item),\n"
"        failure -> System.out.println(\"Got failure: \" + failure)\n"
");\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:129
#, no-wrap
msgid ""
"// ....\n"
"Dropping item 997\n"
"Dropping item 998\n"
"Dropping item 999\n"
"Dropping item 1000\n"
"Dropping item 1001\n"
"Dropping item 1002\n"
"Dropping item 1003\n"
"Got item: 9\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:134
#, fuzzy
msgid "Dropping items provides a sustainable solution to our problem, but we are losing events! As we can see in the previous output, we may drop the high majority of items.  In many cases, this is not acceptable."
msgstr "丢弃物品为我们的问题提供了一个可持续的解决方案，但我们正在失去事件正如我们在前面的输出中所看到的，我们可能会放弃绝大多数的项目。在许多情况下，这是不可以接受的。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:137
#, fuzzy
msgid "So, we need another solution, a solution where the overall pace is adjusted to satisfy the pipeline's slowest element.  We need flow control."
msgstr "因此，我们需要另一种解决方案，一种调整整体节奏以满足管道中最慢元素的解决方案。我们需要流量控制。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:139
#, fuzzy
msgid "### What the heck is Back-Pressure?"
msgstr "背压到底是什么？"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:144
#, fuzzy
msgid "You may have seen this term many times, and often associated with Reactive.  In mechanics, back-pressure is a way to control the flow of fluid through pipes, leading to a pressure drop.  That control can use reducers or bends.  While very interesting, if you are a plumber, it's not clear how it can help us here?"
msgstr "你可能已经多次看到这个术语，而且经常与反作用力相关联。在机械学中，背压是控制流体在管道中流动的一种方式，导致压力下降。这种控制可以使用减压器或弯管。虽然非常有趣，但如果你是一名水管工，就不清楚它在这里能给我们带来什么帮助？"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:147
#, fuzzy
msgid "We can see our streams as a flow of fluid, and the set of stages (operator or subscriber) forms a pipe.  We want to make the fluid flows as frictionless as possible without swirls and waves."
msgstr "我们可以把我们的水流看作是流体的流动，而一组阶段（操作员或用户）形成了一个管道。我们希望使流体的流动尽可能没有摩擦，没有漩涡和波浪。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:150
#, fuzzy
msgid "An interesting characteristic of fluid mechanics is how a downstream reduction of the throughput affects the upstream.  Essentially, that's what we need: a way for the downstream operators and subscribers to reduce the throughput, not only locally but also upstream."
msgstr "流体力学的一个有趣的特点是，下游的吞吐量减少是如何影响上游的。从本质上讲，这就是我们所需要的：下游运营商和用户减少吞吐量的方法，不仅在本地，而且在上游。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:156
#, fuzzy
msgid "Don't be mistaken; back-pressure is not something new in the IT world and is not limited to Reactive.  One of the most brilliant usages of back-pressure is in TCP.  A reader, receiving data, can block the writer, on the other side of the wire, if it does not read the sent data.  That way, the reader is never overwhelmed.  But, the consequence need to be understood: blocking the writer may not be without side-effects."
msgstr "不要搞错了，背压在IT界并不是什么新鲜事，也不限于Reactive。背压的一个最出色的应用是在TCP中。一个接收数据的读者，如果没有读到发送的数据，就可以阻止电线另一端的作者。这样一来，读者就不会被淹没了。但是，需要理解其后果：阻断写入者可能没有副作用。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:160
#, fuzzy
msgid "There are other back-pressure implementations.  AMQP uses a credit-based flow control, where you can only send if you have enough credit.  Eclipse Vert.x back-pressure is based on pause/resume, where a consumer can pause the upstream until it catches up and resume it once back on track."
msgstr "还有其他的背压实现方式。AMQP使用基于信用的流量控制，只有当你有足够的信用时，你才能发送。Eclipse Vert.x的背压是基于暂停/恢复的，消费者可以暂停上游，直到它赶上，一旦回到正轨，就恢复它。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:162
#, fuzzy
msgid "### Introducing Reactive Streams"
msgstr "引入反应式流"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:167
#, fuzzy
msgid "Let's now focus on another back-pressure protocol: https://www.reactive-streams.org/[Reactive Streams].  It defines an asynchronous and back-pressure protocol suiting to our fast producer/slow consumer problem.  With Reactive Streams, the consumer, named `Subscriber`, requests items from the producer, named `Publisher`.  The `Publisher` cannot send more than the requested amount of items:"
msgstr "现在让我们来关注另一个背压协议。 link:https://www.reactive-streams.org/[Reactive Streams] 。它定义了一个异步和背压协议，适合于我们的快速生产者/慢速消费者问题。通过Reactive Streams，消费者，名为 `Subscriber` ，向生产者，名为 `Publisher` ，请求项目。 `Publisher` 不能发送超过请求量的项目。"

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:168
#, fuzzy, no-wrap
msgid "Reactive Streams Back-Pressure (https://impurepics.com/posts/2018-05-26-backpressure-origins.html)"
msgstr "反应流背压 https://impurepics.com/posts/2018-05-26-backpressure-origins.html )"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:169
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/back-pressure.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:173
#, fuzzy
msgid "When the items are received and processed, the consumer can request more items, and so on.  Thus, the consumer controls the flow."
msgstr "当物品被接收和处理后，消费者可以要求更多的物品，以此类推。因此，消费者控制着流量。"

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:174
#, fuzzy, no-wrap
msgid "Using flow control to avoid overwhelming consumers"
msgstr "使用流量控制以避免消费者不堪重负"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:175
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/back-pressure-flow-control.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:178
#, fuzzy
msgid "### Reactive Streams entities"
msgstr "反应式流的实体"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:185
#, fuzzy
msgid "To implement that protocol, Reactive Streams define a set of entities.  First, a `Subscriber` is a consumer.  It subscribes to a `Publisher,` producing items.  Then, the `Publisher` sends, asynchronously, a `Subscription` object to the `Subscriber`.  This `Subscription` is a contract.  With this `Subscription,` the `Subscriber` can request items and cancels the subscription when it does not want any more items."
msgstr "为了实现该协议，Reactive Streams定义了一系列的实体。首先，一个 `Subscriber` 是一个消费者。它订阅了一个产生项目的 `Publisher,` 。然后， `Publisher` 异步地发送一个 `Subscription` 对象给 `Subscriber` 。这个 `Subscription` 是一个合同。通过这个 `Subscription,` ， `Subscriber` 可以请求项目，并在它不想要任何项目时取消订阅。"

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:186
#, fuzzy, no-wrap
msgid "Example of interactions between a `Subscriber` and a `Publisher`"
msgstr "一个 `Subscriber` 和一个 之间相互作用的例子。 `Publisher` "

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:187
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/back-pressure-sequence.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:190
#, fuzzy
msgid "A `Publisher` cannot send more items than requested to the `Subscriber,` and the `Subscriber` can request more items at any time."
msgstr " `Publisher` 不能发送超过要求的物品给 `Subscriber,` ， `Subscriber` 可以在任何时候要求更多的物品。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:193
#, fuzzy
msgid "It is essential to understand that the requests and emissions are not necessarily happening synchronously.  A `Subscriber` can request three items, and the Publisher will send one by one when they are available."
msgstr "必须明白，请求和排放不一定是同步进行的。一个 `Subscriber` ，可以请求三个项目，当它们可用时，发布者将一个一个地发送。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:197
#, fuzzy
msgid "Reactive Streams introduces another entity named `Processor.` A `Processor` is a `Subscriber` and a `Publisher` simultaneously.  In other words, it's a link in our pipeline:"
msgstr "Reactive Streams引入了另一个实体，名为 `Processor.` 一个 `Processor` ，同时是一个 `Subscriber` ，一个 `Publisher` 。换句话说，它是我们管道中的一个链接。"

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:198
#, fuzzy, no-wrap
msgid "Example of interactions between a `Subscriber,` a `Processor` and a `Publisher`"
msgstr "一个 `Subscriber,` 一个 `Processor` 和一个 之间相互作用的例子。 `Publisher` "

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:199
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/pipeline-with-processor.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:210
#, fuzzy
msgid "A `Subscriber` calls `subscribe` on a `Processor.` Before receiving a `Subscription,` the `Processor` subscribes to its own upstream (the `Publisher` in the picture above).  When that upstream provides a `Subscription` to our Processor, it can give a `Subscription` to the Subscriber.  All these interactions are asynchronous.  When this handshake completes, the `Subscriber` can start requesting items.  The Processor is responsible for mediating the `Subscriber` requests with its upstream.  For example, as illustrated in the picture above, if the `Subscriber` requires two items, the `Processor` also requests two items to its own upstream.  Of course, depending on the `Processor` code, it may not be that simple.  What's fundamental is that each `Publisher` and `Processor` enforces the flowing requests never to overload downstream Subscribers."
msgstr "一个 `Subscriber` 在一个 `Processor.` 上调用 `subscribe` 在收到一个 `Subscription,` 之前， `Processor` 订阅了它自己的上游（上图中的 `Publisher` ）。当该上游向我们的处理器提供一个 `Subscription` ，它可以给订阅者一个 `Subscription` 。所有这些互动都是异步的。当这个握手完成后， `Subscriber` 可以开始请求项目。处理器负责调解 `Subscriber` 与其上游的请求。例如，如上图所示，如果 `Subscriber` 需要两个项目， `Processor` 也向自己的上游请求两个项目。当然，根据 `Processor` 的代码，它可能没有那么简单。最根本的是，每个 `Publisher` 和 `Processor` 强制执行流动的请求，决不让下游的订阅者过载。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:212
#, fuzzy
msgid "### Be warned; it's a trap!"
msgstr "请注意；这是个陷阱。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:217
#, fuzzy
msgid "If you look at the http://www.reactive-streams.org/reactive-streams-1.0.3-javadoc/org/reactivestreams/package-summary.html[Reactive Streams API], you will find it straightforward.  Be warned; it's a trap! Behind this apparent simplicity, implementing Reactive Streams entities yourself is a nightmare.  Reactive Streams come with a broad set of rules and a strict TCK."
msgstr "如果你看一下 link:http://www.reactive-streams.org/reactive-streams-1.0.3-javadoc/org/reactivestreams/package-summary.html[Reactive Streams] 的 link:http://www.reactive-streams.org/reactive-streams-1.0.3-javadoc/org/reactivestreams/package-summary.html[API] ，你会发现它很直接。请注意，这是个陷阱在这种表面上的简单性背后，自己实现Reactive Streams实体是一场噩梦。Reactive Streams有一套广泛的规则和严格的TCK。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:221
#, fuzzy
msgid "But, no worries, Mutiny implements the Reactive Streams protocol for you.  In other words, when using `Multi,` you are using a `Publisher` following the Reactive Streams protocol.  All the subscription handshakes and requests negotiations are done for you."
msgstr "但是，不用担心，Mutiny为你实现了Reactive Streams协议。换句话说，当使用 `Multi,` ，你就是在使用一个遵循Reactive Streams协议的 `Publisher` 。所有的订阅握手和请求协商都为你完成。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:223
#, fuzzy
msgid "### Looking under the hood"
msgstr "观察引擎盖下的情况"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:226
#, fuzzy
msgid "I knew it! You are curious! You can use `onSubscribe().invoke()` and `onRequest().invoke()` to check what's going on:"
msgstr "我就知道!你很好奇!你可以用 `onSubscribe().invoke()` 和 `onRequest().invoke()` 来检查发生了什么事。"

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:238
#, no-wrap
msgid ""
"Multi.createFrom().range(0, 10)\n"
"    .onSubscribe().invoke(sub -> System.out.println(\"Received subscription: \" + sub))\n"
"    .onRequest().invoke(req -> System.out.println(\"Got a request: \" + req))\n"
"    .transform().byFilteringItemsWith(i -> i % 2 == 0)\n"
"    .onItem().transform(i -> i * 100)\n"
"    .subscribe().with(\n"
"            i -> System.out.println(\"i: \" + i)\n"
");\n"
"---- \n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:240
#, no-wrap
msgid "You can also go a step further and not only observing but also controlling the flow yourself:\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:242
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:265
#, no-wrap
msgid "[source, java, indent=0]\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:260
#, fuzzy, no-wrap
msgid ""
"Multi.createFrom().range(0, 10)\n"
"    .onSubscribe().invoke(sub -> System.out.println(\"Received subscription: \" + sub))\n"
"    .onRequest().invoke(req -> System.out.println(\"Got a request: \" + req))\n"
"    .onItem().transform(i -> i * 100)\n"
"    .subscribe().with(\n"
"            subscription -> {\n"
"                // Got the subscription\n"
"                upstream.set(subscription);\n"
"                subscription.request(1);\n"
"            },\n"
"            i -> {\n"
"                System.out.println(\"i: \" + i);\n"
"                upstream.get().request(1);\n"
"            },\n"
"            f -> System.out.println(\"Failed with \" + f),\n"
"            () -> System.out.println(\"Completed\")\n"
");\n"
msgstr "Multi.createFrom().range(0, 10) .onSubscribe().invoke(sub → System.out.println(\"Received subscription: \" + sub)) .onRequest().invoke(req → System.out.println(\"Got a request: \" + req)) .onItem() .transform(i→ i * 100) .subscribe().with( subscription → { // 得到了订阅 upstream.set(subscription); subscription.request(1); }, i → { System.out.println(\"i: \" + i); upstream.get().request(1); }, f → System.out.println(\"Failed with \" + f), () → System.out.println(\"Completed\" ) )。"

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:263
#, no-wrap
msgid "And, if you are a bit insane, you can even implement a `Subscriber` directly:\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:271
#, fuzzy, no-wrap
msgid ""
"Multi.createFrom().range(0, 10)\n"
"    .onSubscribe().invoke(sub -> System.out.println(\"Received subscription: \" + sub))\n"
"    .onRequest().invoke(req -> System.out.println(\"Got a request: \" + req))\n"
"    .onItem().transform(i -> i * 100)\n"
"    .subscribe().withSubscriber(new Subscriber<Integer>() {\n"
msgstr "Multi.createFrom().range(0, 10) .onSubscribe().invoke(sub → System.out.println(\"Received subscription: \" + sub) .onRequest().invoke(req → System.out.println(\"Got a request: \" + req) .onItem().transform(i→i * 100) .subscribe().withSubscriber(new Subscriber<Integer>() {"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:273
#, fuzzy, no-wrap
msgid "        private Subscription subscription;\n"
msgstr "私有化的Subscription订阅。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:279
#, fuzzy, no-wrap
msgid ""
"        @Override\n"
"        public void onSubscribe(Subscription s) {\n"
"            this.subscription = s;\n"
"            s.request(1);\n"
"        }\n"
msgstr ""
"@Override\n"
"public void onSubscribe(Subscription s) {\n"
"    this.subscription = s;\n"
"    s.request(1);\n"
"}"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:285
#, fuzzy, no-wrap
msgid ""
"        @Override\n"
"        public void onNext(Integer item) {\n"
"            System.out.println(\"Got item \" + item);\n"
"            subscription.request(1);\n"
"        }\n"
msgstr ""
"@Override\n"
"public void onNext(Integer item) {\n"
"    System.out.println(\"Got item \" + item)。\n"
"    subscription.request(1);\n"
"}"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:290
#, fuzzy, no-wrap
msgid ""
"        @Override\n"
"        public void onError(Throwable t) {\n"
"            // ...\n"
"        }\n"
msgstr ""
"@Override\n"
"public void onError(Throwable t) {\n"
"    // ...\n"
"}"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:297
#, fuzzy, no-wrap
msgid ""
"        @Override\n"
"        public void onComplete() {\n"
"            // ...\n"
"        }\n"
"    }\n"
");\n"
msgstr ""
"        @Override\n"
"        public void onComplete() {\n"
"            // ...\n"
"        }\n"
"    }\n"
");"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:298
#, fuzzy, no-wrap
msgid "\n"
msgstr "\n"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:301
#, fuzzy
msgid "### Summary"
msgstr "摘要"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:311
#, fuzzy
msgid "This post described the different approaches offered by Mutiny to handle back-pressure.  The Reactive Streams protocol works well when you can control the pace of the upstream.  But it's not always the case.  Streams representing physical entities are rarely controllable.  Imagine a stream emitting user's keystrokes.  You cannot ask the users to slow down.  That would be a terrible user experience.  As we have seen above, time is also not something we can slow down, unfortunately...  In this case, the `onOverflow()` group lets you decide the mitigation, such as using buffers or dropping items."
msgstr "这篇帖子描述了Mutiny提供的处理背压的不同方法。当你能控制上游的节奏时，反应式流协议效果很好。但这并不总是这样的。代表物理实体的流很少是可控的。想象一下，一个流发出用户的击键声。你不能要求用户放慢速度。那将是一个糟糕的用户体验。正如我们在上面看到的，时间也不是我们可以放慢的，不幸的是......在这种情况下， `onOverflow()` 组让你决定缓解，如使用缓冲区或丢弃项目。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:314
msgid "It's critical to avoid overwhelming downstream subscribers.  It is the small crack that ripples in your system with dreadful consequences."
msgstr ""
