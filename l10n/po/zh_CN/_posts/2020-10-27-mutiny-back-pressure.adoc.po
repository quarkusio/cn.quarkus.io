# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "Mutiny - Flow control and Back-pressure"
msgstr "叛变--流量控制和背压"

#. type: YAML Front Matter: synopsis
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "How does flow control works with Mutiny"
msgstr "流量控制是如何在Mutiny中工作的"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"Reactive Programming offers an elegant, flexible, and powerful way to write asynchronous code.\n"
"It supports failure handling, both sequential and parallel operation composition, and plenty of operators.\n"
"Reactive programming promotes data streams as a primary construct, and your code is observing streams and reacting to signals."
msgstr "反应式编程（Reactive Programming）为编写异步代码提供了一种优雅、灵活和强大的方法。它支持故障处理、顺序和并行操作组合以及大量操作符。反应式编程提倡将数据流作为主要结构，您的代码将观察数据流并对信号做出反应。"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "Origins of back-pressure (https://impurepics.com/posts/2018-05-26-backpressure-origins.html)"
msgstr "背压的起源 ( link:https://impurepics.com/posts/2018-05-26-backpressure-origins.html[https://impurepics.com/posts/2018-05-26-backpressure-origins.html)]"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"However, using data streams as primary constructs does not come without some issues.\n"
"One of the main problems is the need for flow control."
msgstr "然而，使用数据流作为主要结构并不是没有问题的。其中一个主要问题就是需要流量控制。"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "The producer/consumer problem"
msgstr "生产者/消费者问题"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"Let's imagine a fast producer and a slow consumer.\n"
"The producer sends events too quickly for the consumer that can't keep up.\n"
"That phenomenon is remarkably well illustrated in the following picture."
msgstr "让我们想象一个快速的生产者和一个慢速的消费者。生产者发送事件的速度太快，消费者跟不上。下图很好地说明了这一现象。"

#. type: Block title
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "No Back-Pressure (https://impurepics.com/posts/2018-05-26-backpressure-origins.html)"
msgstr "无背压 https://impurepics.com/posts/2018-05-26-backpressure-origins.html "

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"Let's see some code.\n"
"Imagine a producer emitting an event every ten milliseconds, while the consumer can only consume one per second."
msgstr "让我们来看一些代码。想象一下，生产者每 10 毫秒发出一个事件，而消费者每秒只能消费一个事件。"

#. type: Plain text
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "If you run that code, you will see that the subscriber gets a `MissingBackPressureFailure,` indicating that the downstream cannot keep up:"
msgstr "如果你运行这段代码，你会看到订阅者得到一个 `MissingBackPressureFailure,` ，表明下游无法跟上。"

#. type: Block title
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "emitOn"
msgstr "排放"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"In the previous code, you may wonder about the `emitOn.`\n"
"It's a Mutiny operator allowing controlling on which thread the Subscriber receives the events.\n"
"Back-pressure is often required when multiple threads are involved, as in a single thread approach, blocking the thread would block the source, which may have dramatic consequences."
msgstr "在前面的代码中，你可能会对 `emitOn.` It's a Mutiny 运算符感到好奇，它允许控制订阅者在哪个线程上接收事件。当涉及多个线程时，通常需要反向压力，因为在单线程方法中，阻塞线程将阻塞源，这可能会产生严重后果。"

#. type: Plain text
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "So, what can we do to handle this _overflow_?"
msgstr "那么，我们可以做什么来处理这种 _溢出_ ？"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "Buffering items"
msgstr "缓冲项目"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"The first natural solution uses buffers.\n"
"The consumer can buffer the events, so it does not fail:"
msgstr "第一种自然解决方案是使用缓冲器。消费者可以对事件进行缓冲，这样就不会发生故障："

#. type: Block title
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "Buffering to avoid overwhelming downstream consumers"
msgstr "缓冲以避免下游消费者不堪重负"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"Using a buffer allows handling small bumps, but it's not a long term solution.\n"
"If we update the code to use a large buffer, the consumer can handle more events but eventually fails:"
msgstr "使用缓冲区可以处理小的颠簸，但这不是一个长期的解决方案。如果我们更新代码，使用大缓冲区，消费者就能处理更多事件，但最终还是会失败："

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"You can imagine increasing the buffer's size, but it's hard to anticipate the optimal value.\n"
"What about unbounded buffers?\n"
"In general, that's a terrible idea as you may run out of memory."
msgstr "你可以想象增加缓冲区的大小，但很难预测最佳值。那么无限制缓冲区呢？一般来说，这是一个糟糕的想法，因为你可能会耗尽内存。"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "Dropping items"
msgstr "丢弃物品"

#. type: Plain text
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "Another solution consists of dropping items:"
msgstr "另一个解决方案包括掉落物品。"

#. type: Block title
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "Dropping items to avoid overwhelming downstream consumers"
msgstr "丢弃物品以避免下游消费者不堪重负"

#. type: Plain text
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "You can drop the newest received items or oldest ones:"
msgstr "你可以放弃最新收到的物品或最旧的物品。"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"Dropping items provides a sustainable solution to our problem, but we are losing events!\n"
"As we can see in the previous output, we may drop the high majority of items.\n"
"In many cases, this is not acceptable."
msgstr "丢弃物品为我们的问题提供了一个可持续的解决方案，但我们会失去事件！从前面的输出中我们可以看到，我们可能会丢弃绝大多数物品。在很多情况下，这是不可接受的。"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"So, we need another solution, a solution where the overall pace is adjusted to satisfy the pipeline's slowest element.\n"
"We need flow control."
msgstr "因此，我们需要另一种解决方案，一种调整整体速度以满足管道中最慢元素需求的解决方案。我们需要流量控制。"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "What the heck is Back-Pressure?"
msgstr "什么是背压？"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"You may have seen this term many times, and often associated with Reactive.\n"
"In mechanics, back-pressure is a way to control the flow of fluid through pipes, leading to a pressure drop.\n"
"That control can use reducers or bends.\n"
"While very interesting, if you are a plumber, it's not clear how it can help us here?"
msgstr "您可能已经见过很多次这个词了，它通常与反应式（Reactive）联系在一起。在机械学中，背压是一种控制流体在管道中流动的方法，会导致压力下降。这种控制可以使用减压器或弯管。虽然非常有趣，但如果你是水管工，就不清楚它在这里能给我们带来什么帮助？"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"We can see our streams as a flow of fluid, and the set of stages (operator or subscriber) forms a pipe.\n"
"We want to make the fluid flows as frictionless as possible without swirls and waves."
msgstr "我们可以将流媒体看作是流体的流动，而一系列阶段（操作员或用户）则构成了管道。我们希望流体流动尽可能无摩擦，不产生漩涡和波浪。"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"An interesting characteristic of fluid mechanics is how a downstream reduction of the throughput affects the upstream.\n"
"Essentially, that's what we need: a way for the downstream operators and subscribers to reduce the throughput, not only locally but also upstream."
msgstr "流体力学的一个有趣特性是，下游吞吐量的减少如何影响上游。从根本上说，这正是我们所需要的：下游运营商和用户不仅可以降低本地吞吐量，还可以降低上游吞吐量。"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"Don't be mistaken; back-pressure is not something new in the IT world and is not limited to Reactive.\n"
"One of the most brilliant usages of back-pressure is in TCP.\n"
"A reader, receiving data, can block the writer, on the other side of the wire, if it does not read the sent data.\n"
"That way, the reader is never overwhelmed.\n"
"But, the consequence need to be understood: blocking the writer may not be without side-effects."
msgstr "别误会，反向压力并不是 IT 界的新鲜事物，也不局限于反应式。反向压力最出色的用法之一是在 TCP 中。接收数据的读取器如果不读取发送的数据，就会阻塞另一端的写入器。这样，读取器就不会被淹没。但是，我们需要了解这样做的后果：阻塞写入器可能会产生副作用。"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"There are other back-pressure implementations.\n"
"AMQP uses a credit-based flow control, where you can only send if you have enough credit.\n"
"Eclipse Vert.x back-pressure is based on pause/resume, where a consumer can pause the upstream until it catches up and resume it once back on track."
msgstr "还有其他背压实现方式。AMQP 使用基于信用的流量控制，只有在有足够信用的情况下才能发送。Eclipse Vert.x 反向压力基于暂停/恢复，消费者可以暂停上游，直到赶上为止，一旦回到正轨就恢复上游。"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "Introducing Reactive Streams"
msgstr "介绍反应式流"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"Let's now focus on another back-pressure protocol: https://www.reactive-streams.org/[Reactive Streams].\n"
"It defines an asynchronous and back-pressure protocol suiting to our fast producer/slow consumer problem.\n"
"With Reactive Streams, the consumer, named `Subscriber`, requests items from the producer, named `Publisher`.\n"
"The `Publisher` cannot send more than the requested amount of items:"
msgstr "现在，让我们关注另一个反压协议： link:https://www.reactive-streams.org/[反应流] 。它定义了一种异步和反向压力协议，适合我们的快速生产者/慢速消费者问题。使用 Reactive Streams 时，名为 `Subscriber` 的消费者向名为 `Publisher` 的生产者请求项目。 `Publisher` 不能发送超过请求数量的项目："

#. type: Block title
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "Reactive Streams Back-Pressure (https://impurepics.com/posts/2018-05-26-backpressure-origins.html)"
msgstr "反应流背压 https://impurepics.com/posts/2018-05-26-backpressure-origins.html )"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"When the items are received and processed, the consumer can request more items, and so on.\n"
"Thus, the consumer controls the flow."
msgstr "当收到并处理完物品后，消费者可以要求更多的物品，以此类推。因此，消费者控制着流程。"

#. type: Block title
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "Using flow control to avoid overwhelming consumers"
msgstr "使用流量控制以避免消费者不堪重负"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "Reactive Streams entities"
msgstr "反应流实体"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"To implement that protocol, Reactive Streams define a set of entities.\n"
"First, a `Subscriber` is a consumer.\n"
"It subscribes to a `Publisher,` producing items.\n"
"Then, the `Publisher` sends, asynchronously, a `Subscription` object to the `Subscriber`.\n"
"This `Subscription` is a contract.\n"
"With this `Subscription,` the `Subscriber` can request items and cancels the subscription when it does not want any more items."
msgstr "为了实现该协议，反应流定义了一系列实体。首先， `Subscriber` 是一个消费者。它订阅产生项目的 `Publisher,` 。然后， `Publisher` 异步发送一个 `Subscription` 对象给 `Subscriber` 。这个 `Subscription` 是一个合约。通过该 `Subscription,` ， `Subscriber` 可以请求项目，并在不需要更多项目时取消订阅。"

#. type: Block title
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "Example of interactions between a `Subscriber` and a `Publisher`"
msgstr "一个 `Subscriber` 和一个 之间相互作用的例子。 `Publisher` "

#. type: Plain text
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "A `Publisher` cannot send more items than requested to the `Subscriber,` and the `Subscriber` can request more items at any time."
msgstr " `Publisher` 不能发送超过要求的物品给 `Subscriber,` ， `Subscriber` 可以在任何时候要求更多的物品。"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"It is essential to understand that the requests and emissions are not necessarily happening synchronously.\n"
"A `Subscriber` can request three items, and the Publisher will send one by one when they are available."
msgstr "我们必须明白，请求和发送并不一定是同步进行的。 `Subscriber` 可以请求三个项目，发布者会在这些项目可用时逐一发送。"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"Reactive Streams introduces another entity named `Processor.`\n"
"A `Processor` is a `Subscriber` and a `Publisher` simultaneously.\n"
"In other words, it's a link in our pipeline:"
msgstr "反应流引入了另一个名为 `Processor.` 的实体 `Processor` 同时是 `Subscriber` 和 `Publisher` 。换句话说，它是我们管道中的一个链接："

#. type: Block title
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "Example of interactions between a `Subscriber,` a `Processor` and a `Publisher`"
msgstr "一个 `Subscriber,` 一个 `Processor` 和一个 之间相互作用的例子。 `Publisher` "

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"A `Subscriber` calls `subscribe` on a `Processor.`\n"
"Before receiving a `Subscription,` the `Processor` subscribes to its own upstream (the `Publisher` in the picture above).\n"
"When that upstream provides a `Subscription` to our Processor, it can give a `Subscription` to the Subscriber.\n"
"All these interactions are asynchronous.\n"
"When this handshake completes, the `Subscriber` can start requesting items.\n"
"The Processor is responsible for mediating the `Subscriber` requests with its upstream.\n"
"For example, as illustrated in the picture above, if the `Subscriber` requires two items, the `Processor` also requests two items to its own upstream.\n"
"Of course, depending on the `Processor` code, it may not be that simple.\n"
"What's fundamental is that each `Publisher` and `Processor` enforces the flowing requests never to overload downstream Subscribers."
msgstr "`Subscriber` 在 `Processor.` 上调用 `subscribe` 在收到 `Subscription,` 之前， `Processor` 会订阅自己的上游（上图中的 `Publisher` ）。当上游向我们的处理器提供 `Subscription` 时，它可以向订阅者提供 `Subscription` 。所有这些交互都是异步的。握手完成后， `Subscriber` 就可以开始请求项目。处理器负责调解 `Subscriber` 与其上游的请求。例如，如上图所示，如果 `Subscriber` 需要两个项目， `Processor` 也会向自己的上游请求两个项目。当然，根据 `Processor` 代码的不同，情况可能不会这么简单。最基本的是，每个 `Publisher` 和 `Processor` 都会强制执行流动请求，绝不让下游 Subscribers 超载。"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "Be warned; it's a trap!"
msgstr "请注意，这是一个陷阱！"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"If you look at the http://www.reactive-streams.org/reactive-streams-1.0.3-javadoc/org/reactivestreams/package-summary.html[Reactive Streams API], you will find it straightforward.\n"
"Be warned; it's a trap!\n"
"Behind this apparent simplicity, implementing Reactive Streams entities yourself is a nightmare.\n"
"Reactive Streams come with a broad set of rules and a strict TCK."
msgstr "如果你查看一下 link:http://www.reactive-streams.org/reactive-streams-1.0.3-javadoc/org/reactivestreams/package-summary.html[Reactive Streams API] ，你会发现它很简单明了。请注意，这是一个陷阱！在表面简单的背后，自己实现 Reactive Streams 实体却是一场噩梦。反应流有一套广泛的规则和严格的 TCK。"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"But, no worries, Mutiny implements the Reactive Streams protocol for you.\n"
"In other words, when using `Multi,` you are using a `Publisher` following the Reactive Streams protocol.\n"
"All the subscription handshakes and requests negotiations are done for you."
msgstr "不过，不用担心，Mutiny 为你实现了 Reactive Streams 协议。换句话说，当使用 `Multi,` 时，你就是在使用一个遵循 Reactive Streams 协议的 `Publisher` 。所有的订阅握手和请求协商都会为你完成。"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "Looking under the hood"
msgstr "看引擎盖下"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"I knew it! You are curious!\n"
"You can use `onSubscribe().invoke()` and `onRequest().invoke()` to check what's going on:"
msgstr "我就知道你很好奇！您可以使用 `onSubscribe().invoke()` 和 `onRequest().invoke()` 来查看情况："

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "You can also go a step further and not only observing but also controlling the flow yourself:"
msgstr "您还可以更进一步，不仅要观察，还要自己控制流程："

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "And, if you are a bit insane, you can even implement a `Subscriber` directly:"
msgstr "如果你有点疯狂，你甚至可以直接实现 `Subscriber` ："

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "Summary"
msgstr "摘要"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"This post described the different approaches offered by Mutiny to handle back-pressure.\n"
"The Reactive Streams protocol works well when you can control the pace of the upstream.\n"
"But it's not always the case.\n"
"Streams representing physical entities are rarely controllable.\n"
"Imagine a stream emitting user's keystrokes.\n"
"You cannot ask the users to slow down.\n"
"That would be a terrible user experience.\n"
"As we have seen above, time is also not something we can slow down, unfortunately...\n"
"In this case, the `onOverflow()` group lets you decide the mitigation, such as using buffers or dropping items."
msgstr "这篇文章介绍了 Mutiny 提供的处理反向压力的不同方法。当你能控制上游的节奏时，反应流协议就能很好地发挥作用。但情况并非总是如此。代表物理实体的流很少是可控的。试想一下，一个流会发出用户的按键声。你不能要求用户放慢速度。那样的用户体验会很糟糕。正如我们在上文所看到的，不幸的是，时间也不是我们可以放慢的东西......在这种情况下， `onOverflow()` 组可以让您决定如何缓解，例如使用缓冲区或丢弃项目。"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"It's critical to avoid overwhelming downstream subscribers.\n"
"It is the small crack that ripples in your system with dreadful consequences."
msgstr "避免下游用户不堪重负至关重要。正是这细小的裂缝在您的系统中激起了涟漪，造成了可怕的后果。"
