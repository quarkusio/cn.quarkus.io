# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "Mutiny - Flow control and Back-pressure"
msgstr "叛变--流量控制和背压"

#. type: YAML Front Matter: synopsis
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "How does flow control works with Mutiny"
msgstr "流量控制是如何在Mutiny中工作的"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid ""
"Reactive Programming offers an elegant, flexible, and powerful way to write asynchronous code.\n"
"It supports failure handling, both sequential and parallel operation composition, and plenty of operators.\n"
"Reactive programming promotes data streams as a primary construct, and your code is observing streams and reacting to signals."
msgstr ""

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid "Origins of back-pressure (https://impurepics.com/posts/2018-05-26-backpressure-origins.html)"
msgstr ""

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid ""
"However, using data streams as primary constructs does not come without some issues.\n"
"One of the main problems is the need for flow control."
msgstr ""

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid "The producer/consumer problem"
msgstr ""

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid ""
"Let's imagine a fast producer and a slow consumer.\n"
"The producer sends events too quickly for the consumer that can't keep up.\n"
"That phenomenon is remarkably well illustrated in the following picture."
msgstr ""

#. type: Block title
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "No Back-Pressure (https://impurepics.com/posts/2018-05-26-backpressure-origins.html)"
msgstr "无背压 https://impurepics.com/posts/2018-05-26-backpressure-origins.html "

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid ""
"Let's see some code.\n"
"Imagine a producer emitting an event every ten milliseconds, while the consumer can only consume one per second."
msgstr ""

#. type: Plain text
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "If you run that code, you will see that the subscriber gets a `MissingBackPressureFailure,` indicating that the downstream cannot keep up:"
msgstr "如果你运行这段代码，你会看到订阅者得到一个 `MissingBackPressureFailure,` ，表明下游无法跟上。"

#. type: Block title
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "emitOn"
msgstr "排放"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid ""
"In the previous code, you may wonder about the `emitOn.`\n"
"It's a Mutiny operator allowing controlling on which thread the Subscriber receives the events.\n"
"Back-pressure is often required when multiple threads are involved, as in a single thread approach, blocking the thread would block the source, which may have dramatic consequences."
msgstr ""

#. type: Plain text
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "So, what can we do to handle this _overflow_?"
msgstr "那么，我们可以做什么来处理这种 _溢出_ ？"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid "Buffering items"
msgstr ""

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid ""
"The first natural solution uses buffers.\n"
"The consumer can buffer the events, so it does not fail:"
msgstr ""

#. type: Block title
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "Buffering to avoid overwhelming downstream consumers"
msgstr "缓冲以避免下游消费者不堪重负"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid ""
"Using a buffer allows handling small bumps, but it's not a long term solution.\n"
"If we update the code to use a large buffer, the consumer can handle more events but eventually fails:"
msgstr ""

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid ""
"You can imagine increasing the buffer's size, but it's hard to anticipate the optimal value.\n"
"What about unbounded buffers?\n"
"In general, that's a terrible idea as you may run out of memory."
msgstr ""

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid "Dropping items"
msgstr ""

#. type: Plain text
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "Another solution consists of dropping items:"
msgstr "另一个解决方案包括掉落物品。"

#. type: Block title
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "Dropping items to avoid overwhelming downstream consumers"
msgstr "丢弃物品以避免下游消费者不堪重负"

#. type: Plain text
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "You can drop the newest received items or oldest ones:"
msgstr "你可以放弃最新收到的物品或最旧的物品。"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid ""
"Dropping items provides a sustainable solution to our problem, but we are losing events!\n"
"As we can see in the previous output, we may drop the high majority of items.\n"
"In many cases, this is not acceptable."
msgstr ""

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid ""
"So, we need another solution, a solution where the overall pace is adjusted to satisfy the pipeline's slowest element.\n"
"We need flow control."
msgstr ""

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid "What the heck is Back-Pressure?"
msgstr ""

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid ""
"You may have seen this term many times, and often associated with Reactive.\n"
"In mechanics, back-pressure is a way to control the flow of fluid through pipes, leading to a pressure drop.\n"
"That control can use reducers or bends.\n"
"While very interesting, if you are a plumber, it's not clear how it can help us here?"
msgstr ""

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid ""
"We can see our streams as a flow of fluid, and the set of stages (operator or subscriber) forms a pipe.\n"
"We want to make the fluid flows as frictionless as possible without swirls and waves."
msgstr ""

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid ""
"An interesting characteristic of fluid mechanics is how a downstream reduction of the throughput affects the upstream.\n"
"Essentially, that's what we need: a way for the downstream operators and subscribers to reduce the throughput, not only locally but also upstream."
msgstr ""

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid ""
"Don't be mistaken; back-pressure is not something new in the IT world and is not limited to Reactive.\n"
"One of the most brilliant usages of back-pressure is in TCP.\n"
"A reader, receiving data, can block the writer, on the other side of the wire, if it does not read the sent data.\n"
"That way, the reader is never overwhelmed.\n"
"But, the consequence need to be understood: blocking the writer may not be without side-effects."
msgstr ""

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid ""
"There are other back-pressure implementations.\n"
"AMQP uses a credit-based flow control, where you can only send if you have enough credit.\n"
"Eclipse Vert.x back-pressure is based on pause/resume, where a consumer can pause the upstream until it catches up and resume it once back on track."
msgstr ""

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid "Introducing Reactive Streams"
msgstr ""

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid ""
"Let's now focus on another back-pressure protocol: https://www.reactive-streams.org/[Reactive Streams].\n"
"It defines an asynchronous and back-pressure protocol suiting to our fast producer/slow consumer problem.\n"
"With Reactive Streams, the consumer, named `Subscriber`, requests items from the producer, named `Publisher`.\n"
"The `Publisher` cannot send more than the requested amount of items:"
msgstr ""

#. type: Block title
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "Reactive Streams Back-Pressure (https://impurepics.com/posts/2018-05-26-backpressure-origins.html)"
msgstr "反应流背压 https://impurepics.com/posts/2018-05-26-backpressure-origins.html )"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid ""
"When the items are received and processed, the consumer can request more items, and so on.\n"
"Thus, the consumer controls the flow."
msgstr ""

#. type: Block title
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "Using flow control to avoid overwhelming consumers"
msgstr "使用流量控制以避免消费者不堪重负"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid "Reactive Streams entities"
msgstr ""

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid ""
"To implement that protocol, Reactive Streams define a set of entities.\n"
"First, a `Subscriber` is a consumer.\n"
"It subscribes to a `Publisher,` producing items.\n"
"Then, the `Publisher` sends, asynchronously, a `Subscription` object to the `Subscriber`.\n"
"This `Subscription` is a contract.\n"
"With this `Subscription,` the `Subscriber` can request items and cancels the subscription when it does not want any more items."
msgstr ""

#. type: Block title
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "Example of interactions between a `Subscriber` and a `Publisher`"
msgstr "一个 `Subscriber` 和一个 之间相互作用的例子。 `Publisher` "

#. type: Plain text
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "A `Publisher` cannot send more items than requested to the `Subscriber,` and the `Subscriber` can request more items at any time."
msgstr " `Publisher` 不能发送超过要求的物品给 `Subscriber,` ， `Subscriber` 可以在任何时候要求更多的物品。"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid ""
"It is essential to understand that the requests and emissions are not necessarily happening synchronously.\n"
"A `Subscriber` can request three items, and the Publisher will send one by one when they are available."
msgstr ""

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid ""
"Reactive Streams introduces another entity named `Processor.`\n"
"A `Processor` is a `Subscriber` and a `Publisher` simultaneously.\n"
"In other words, it's a link in our pipeline:"
msgstr ""

#. type: Block title
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "Example of interactions between a `Subscriber,` a `Processor` and a `Publisher`"
msgstr "一个 `Subscriber,` 一个 `Processor` 和一个 之间相互作用的例子。 `Publisher` "

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid ""
"A `Subscriber` calls `subscribe` on a `Processor.`\n"
"Before receiving a `Subscription,` the `Processor` subscribes to its own upstream (the `Publisher` in the picture above).\n"
"When that upstream provides a `Subscription` to our Processor, it can give a `Subscription` to the Subscriber.\n"
"All these interactions are asynchronous.\n"
"When this handshake completes, the `Subscriber` can start requesting items.\n"
"The Processor is responsible for mediating the `Subscriber` requests with its upstream.\n"
"For example, as illustrated in the picture above, if the `Subscriber` requires two items, the `Processor` also requests two items to its own upstream.\n"
"Of course, depending on the `Processor` code, it may not be that simple.\n"
"What's fundamental is that each `Publisher` and `Processor` enforces the flowing requests never to overload downstream Subscribers."
msgstr ""

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid "Be warned; it's a trap!"
msgstr ""

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid ""
"If you look at the http://www.reactive-streams.org/reactive-streams-1.0.3-javadoc/org/reactivestreams/package-summary.html[Reactive Streams API], you will find it straightforward.\n"
"Be warned; it's a trap!\n"
"Behind this apparent simplicity, implementing Reactive Streams entities yourself is a nightmare.\n"
"Reactive Streams come with a broad set of rules and a strict TCK."
msgstr ""

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid ""
"But, no worries, Mutiny implements the Reactive Streams protocol for you.\n"
"In other words, when using `Multi,` you are using a `Publisher` following the Reactive Streams protocol.\n"
"All the subscription handshakes and requests negotiations are done for you."
msgstr ""

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid "Looking under the hood"
msgstr ""

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid ""
"I knew it! You are curious!\n"
"You can use `onSubscribe().invoke()` and `onRequest().invoke()` to check what's going on:"
msgstr ""

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid "You can also go a step further and not only observing but also controlling the flow yourself:"
msgstr ""

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid "And, if you are a bit insane, you can even implement a `Subscriber` directly:"
msgstr ""

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid "Summary"
msgstr ""

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid ""
"This post described the different approaches offered by Mutiny to handle back-pressure.\n"
"The Reactive Streams protocol works well when you can control the pace of the upstream.\n"
"But it's not always the case.\n"
"Streams representing physical entities are rarely controllable.\n"
"Imagine a stream emitting user's keystrokes.\n"
"You cannot ask the users to slow down.\n"
"That would be a terrible user experience.\n"
"As we have seen above, time is also not something we can slow down, unfortunately...\n"
"In this case, the `onOverflow()` group lets you decide the mitigation, such as using buffers or dropping items."
msgstr ""

#: _posts/2020-10-27-mutiny-back-pressure.adoc
msgid ""
"It's critical to avoid overwhelming downstream subscribers.\n"
"It is the small crack that ripples in your system with dreadful consequences."
msgstr ""
