# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy, no-wrap
msgid "Why did Payair Technologies switch to Quarkus?"
msgstr "为什么Payair Technologies公司转而使用Quarkus？"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "image:payair_logo_rgb.png[Payair Logo]"
msgstr "image:payair_logo_rgb.png[alt=\"Payair Logo\"]"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "Developing cloud-ready solutions has become an industry standard, especially in the enterprise world. Sooner or later your application has to face the problem of poor horizontal scalability or high memory usage and we all know it is better to be prepared."
msgstr "开发适合云计算的解决方案已经成为一个行业标准，特别是在企业界。你的应用程序迟早要面对水平可扩展性差或内存使用量大的问题，我们都知道最好是做好准备。"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "We understand this at https://www.payair.com[Payair] as well. When we faced the challenge of preparing the backend to our mobile payment app, we decided to use frameworks supporting a serverless approach as much as possible. One of these was Quarkus."
msgstr "在 link:https://www.payair.com[Payair] ，我们也理解这一点。当我们面临为移动支付应用准备后台的挑战时，我们决定尽可能地使用支持无服务器方法的框架。Quarkus就是其中之一。"

#. type: Title ==
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, no-wrap
msgid "Supersonic Subatomic Java"
msgstr "超音速 亚原子 Java"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "As creators of the framework are describing it, Quarkus is:"
msgstr "正如该框架的创建者所描述的那样，Quarkus是。"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "A Kubernetes native Java stack tailored for OpenJDK HotSpot and GraalVM, crafted from the best of breed Java libraries and standards."
msgstr "为OpenJDK HotSpot和GraalVM定制的Kubernetes原生Java堆栈，由最佳的Java库和标准制作而成。"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "On the Quarkus website you can find information that it has been designed around \"container first\" philosophy, meaning that it is optimized for fast boot times and low memory usage. As a result, we should gain near instant scale-up and high-density memory utilization in container orchestration platforms."
msgstr "在Quarkus网站上，你可以找到这样的信息：它是围绕 \"容器优先 \"理念设计的，这意味着它为快速启动时间和低内存使用进行了优化。因此，我们应该在容器编排平台中获得近乎即时的扩展和高密度的内存利用。"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "The way this has been achieved can be summarized as follows:"
msgstr "实现这一目标的方式可以归纳为以下几点。"

#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "*Build time metadata processing.* As much processing as possible is moved into the build process e.g. all of the classes required to perform initial application deployment are used and dropped while building. They are not loaded into final JARs (and JVMs) or native executables. You can say that the framework is tailor-made for you every time you press a build button, without compromising the effectiveness of a declarative approach."
msgstr "*构建时的元数据处理。* 尽可能将更多的处理工作转移到构建过程中，例如，在构建过程中使用并删除执行初始应用部署所需的所有类。它们不会加载到最终的 JAR（和 JVM）或本地可执行文件中。可以说，每次按下构建按钮时，框架都是为你量身定制的，而不会影响声明式方法的有效性。"

#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "*Reduction in reflection usage.* Considering the point above, the resulting application contains only direct invocations. All of the fields, methods and classes that are not being called directly are purposefully removed. The same applies to dependencies as well. There is a way to include such calls (register them for reflection), but Quarkus will gently warn you that you may be deflecting from the real purpose of the framework."
msgstr "*减少反射的使用。* 考虑到上述观点，最终的应用程序只包含直接调用。所有不被直接调用的字段、方法和类都会被有意删除。这同样适用于依赖关系。有一种方法可以包含这些调用（将它们注册为反射），但 Quarkus 会温和地警告你，你可能会偏离框架的真正目的。"

#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "*Native image pre-boot.* Quarkus supports native executables that can be run with GraalVM. Actually, the creators of Quarkus state that the framework was designed to be run as a native image. The ahead-of-time compilation reduces the need of dynamic scanning and loading classes into a JVM."
msgstr "*原生镜像预启动。* Quarkus 支持可通过 GraalVM 运行的本地可执行文件。事实上，Quarkus 的创建者表示，该框架的设计初衷就是作为本地映像运行。提前编译减少了动态扫描和将类加载到 JVM 中的需要。"

#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "*GraalVM.* GraalVM is a native code generator which will compile your project into an executable that can be run without the JVM. You can read more about this superb project here: https://www.graalvm.org."
msgstr "*GraalVM* GraalVM 是一个本地代码生成器，可以将项目编译成无需 JVM 即可运行的可执行文件。您可以在 https://www.graalvm.org 上阅读更多关于这个卓越项目的信息。"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "Below you can see a comparison of memory usage and boot time of sample applications:"
msgstr "下面你可以看到样本应用程序的内存使用和启动时间的比较。"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "source: https://quarkus.io"
msgstr "来源 https://quarkus.io "

#. type: Title ==
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy, no-wrap
msgid "Evolution, not revolution"
msgstr "进化，而不是革命"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "What is interesting about this framework is that it is not revolutionary. Since some of Payair’s developers had mainly Spring experience, we were concerned that it would be difficult for them to “switch sides”. It turned out that our fear of the unknown was completely unfounded. Quarkus leverages some good old Jakarta EE standards that all Java developers are familiar with. We did not have to learn a bunch of new APIs that are advertised as \"the best way to create REST endpoint\" or \"reinvented database access\". Instead, Quarkus uses Context Dependency Injection for beans, JAX-RS for RESTful web services, JPA for database access and many others."
msgstr "这个框架的有趣之处在于，它并不是革命性的。由于Payair的一些开发人员主要有Spring的经验，我们担心他们会很难 \"换位\"。事实证明，我们对未知的恐惧是完全没有根据的。Quarkus利用了所有Java开发人员都熟悉的一些古老的Jakarta EE标准。我们不需要学习一堆新的API，这些API被宣传为 \"创建REST端点的最佳方式 \"或 \"重新发明的数据库访问\"。相反，Quarkus对Bean使用了上下文依赖注入，对RESTful Web服务使用了JAX-RS，对数据库访问使用了JPA，还有其他许多。"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "On top of that, Quarkus extends available Jakarta EE functionalities responding to modern world developers' demands. These are called Quarkus extensions and, to name a few, they contain support for reactive programming (but using the declarative approach), event messaging, etc."
msgstr "在此基础上，Quarkus扩展了可用的Jakarta EE功能，以应对现代世界开发者的需求。这些被称为Quarkus扩展，仅举几例，它们包含对反应式编程（但使用声明式方法）、事件消息传递等的支持。"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "Apart from a wide variety of available extensions, there is also a way to create your own, based on the library of your choice. Keep in mind though, that if you want to preserve those drastic optimizations that Quarkus offers, you will have to apply them manually to your extension as well."
msgstr "除了各种各样的可用扩展，还有一种方法可以在你选择的库的基础上创建你自己的扩展。但请记住，如果你想保留Quarkus提供的那些大幅度的优化，你将不得不把它们手动应用到你的扩展中。"

#. type: Title ==
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy, no-wrap
msgid "Shout-out to MicroProfile"
msgstr "向MicroProfile致意"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "I would like to stop here for a second and give a big shout-out to the Eclipse MicroProfile initiative. It specifies a collection of APIs and technologies to form a baseline for quick and effective enterprise Java microservices creation. The goal of MicroProfile is to define a specification for building microservices and deliver portable applications across multiple runtime implementations."
msgstr "我想在这里停一下，对Eclipse MicroProfile倡议大加赞赏。它规定了一个API和技术的集合，以形成快速有效地创建企业Java微服务的基线。MicroProfile的目标是为构建微服务定义一个规范，并在多个运行时实现中提供可移植的应用程序。"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "Optimizing enterprise Java for a microservice architecture is a challenging task and, in my opinion, MicroProfile handles it pretty well. As a long term Spring developer I realized that Spring is slowly becoming the very thing it swore to destroy. The initial premises of Spring (which basically can be summed up as a lightweight alternative to Jakarta EE) are way past the expiry date now. Spring is the undisputed heavyweight champion that can handle everything you imagine but is not your best option for fast and light services. And that applies to Spring Boot as well."
msgstr "为微服务架构优化企业Java是一项具有挑战性的任务，在我看来，MicroProfile处理得相当好。作为一个长期的Spring开发者，我意识到Spring正在慢慢变成它发誓要摧毁的东西。Spring最初的前提（基本上可以总结为Jakarta EE的轻量级替代品）现在已经过了有效期。Spring是无可争议的重量级冠军，它可以处理你所想象的一切，但却不是你快速和轻量级服务的最佳选择。这也适用于Spring Boot。"

#. type: Title ==
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy, no-wrap
msgid "Developer joy"
msgstr "开发者的喜悦"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "It is worth mentioning how the development process of Quarkus application looks. First of all, you are not forced to use native images from day one. Normal JVM builds are still available. Resulting JARs are not as fast as native images, but still faster than your normal enterprise applications."
msgstr "值得一提的是，Quarkus应用程序的开发过程是怎样的。首先，你不会从第一天起就被迫使用本地图像。正常的JVM构建仍然可用。由此产生的JARs不像本地镜像那么快，但仍然比你的普通企业应用快。"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "This leads us to the most important thing: dev mode. The special Maven plugin allows you to quickly reload classes while you are editing them, leaving an impression of hot deployment. Changing the functionality and testing it right away without further ado is a real joy. No more distracting builds and endless context switching. Pure development mode, hence the name of the plugin."
msgstr "这将我们引向最重要的事情：开发模式。特殊的Maven插件可以让你在编辑类时快速重新加载，留下热部署的印象。改变功能并立即进行测试，不需要再多费口舌，这真是一种乐趣。不再有令人分心的构建和无休止的上下文切换。纯粹的开发模式，因此该插件的名字是这样的。"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "There is one more benefit of a quick startup time. Writing RESTful applications requires significant amount of integration tests on the API level. With Quarkus on board, running them gives a unit-test-smoothness feeling and if you are even a slight fan of TDD, you will appreciate the difference."
msgstr "还有一个快速启动时间的好处。编写RESTful应用程序需要在API层面进行大量的集成测试。有了Quarkus的加入，运行这些测试会有一种单元测试的顺畅感，如果你是TDD的一个小粉丝，你会欣赏到这种不同。"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "One of my personal concerns when switching from Spring to something based on Jakarta EE was lack of Spring Data JPA. I really like the mix of simplicity and functionality this module provides. But it turned out that Quarkus has my back on this one as well. There is an extension called Hibernate ORM with Panache. It is a layer on top of Hibernate ORM which focuses on simplifying ORM to the maximum without compromising the actual power that ORM gives. Panache has managed to find a sweet spot of making it trivial to work with simple entities without giving up possibilities for handling complicated use case scenarios. Bravo to Panache and adios to Spring Data!"
msgstr "当我从Spring切换到基于Jakarta EE的东西时，我个人的担忧之一是缺乏Spring Data JPA。我真的很喜欢这个模块提供的简单性和功能性的结合。但事实证明，Quarkus在这方面也支持我。有一个扩展叫Hibernate ORM with Panache。它是Hibernate ORM上面的一层，主要是最大限度地简化ORM，而不影响ORM赋予的实际功能。Panache成功地找到了一个甜蜜的点，在不放弃处理复杂用例场景的可能性的情况下，使简单的实体工作变得微不足道。为Panache喝彩，为Spring Data告别。"

#. type: Title ==
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy, no-wrap
msgid "Simplified maintenance?"
msgstr "简化维护？"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "We are yet to implement the first release of Payair’s Quarkus application into our production environment. Based on our experiences from lower level environments, we just cannot wait for it! CI/CD is no more complex than with any other framework. We only needed vigilance while setting up native build scripts. The differences between JVM and GraalVM runtimes are negligible. Moreover, our initial performance tests are looking very promising."
msgstr "我们还没有将Payair的Quarkus应用程序的第一个版本实施到我们的生产环境中。根据我们在低级别环境中的经验，我们已经迫不及待了。CI/CD并不比任何其他框架复杂。我们只需要在设置本地构建脚本时保持警惕。JVM和GraalVM运行时间之间的差异可以忽略不计。此外，我们最初的性能测试看起来非常有希望。"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "On the other hand Payair has many demanding customers who happen to be financial institutions. Throughout the years we have learned that they expect global reach, high performance and high availability from our products. Our solutions must be thoroughly tested, reliable and bulletproof. We are in an industry that is very risk averse and although we are aware that others are already using Quarkus in production (https://quarkus.io/blog/tag/user-story), we need to verify this for ourselves since the framework is still considered a new player on the market."
msgstr "另一方面，Payair有许多要求严格的客户，他们恰好是金融机构。多年来，我们了解到，他们希望我们的产品能够覆盖全球，具有高性能和高可用性。我们的解决方案必须经过全面的测试、可靠和防弹。我们所处的行业是一个非常规避风险的行业，虽然我们知道其他人已经在生产中使用Quarkus https://quarkus.io/blog/tag/user-story ，但我们需要亲自验证，因为这个框架仍然被认为是市场上的一个新角色。"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "The next step is to push our Quarkus implementation to the limits to see how it behaves under a real and heavy load. For now we believe that everything will work even better than we could have anticipated. We will let you know how it went."
msgstr "下一步是将我们的Quarkus实现推向极限，看看它在真正的重负载下的表现。目前，我们相信一切都会比我们预期的要好。我们会让你知道情况如何。"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "For more information about Payair Technologies please visit our website: https://www.payair.com"
msgstr "有关 Payair Technologies 的更多信息，请访问我们的网站 link:https://www.payair.com[： https://www.payair.com]"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "For more information on Quarkus:"
msgstr "关于Quarkus的更多信息。"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "Quarkus website: http://quarkus.io"
msgstr "Quarkus网站 http://quarkus.io "

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "Quarkus GitHub project: https://github.com/quarkusio/quarkus"
msgstr "Quarkus GitHub项目: https://github.com/quarkusio/quarkus "

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "Quarkus Twitter: https://twitter.com/QuarkusIO"
msgstr "Quarkus Twitter: https://twitter.com/QuarkusIO "

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "Quarkus chat: https://quarkusio.zulipchat.com/"
msgstr "Quarkus chat: https://quarkusio.zulipchat.com/ "

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "Quarkus mailing list: https://groups.google.com/forum/#!forum/quarkus-dev"
msgstr "Quarkus邮件列表 https://groups.google.com/forum/#!forum/quarkus-dev "

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "https://youtube.com/quarkusio[Quarkus YouTube Channel]"
msgstr "link:https://youtube.com/quarkusio[夸库斯YouTube频道]"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "https://www.redhat.com/cms/managed-files/cl-4-reasons-try-quarkus-checklist-f19180cs-201909-en.pdf[Four reasons to use Quarkus]"
msgstr "link:https://www.redhat.com/cms/managed-files/cl-4-reasons-try-quarkus-checklist-f19180cs-201909-en.pdf[使用 Quarkus 的四个理由]"
