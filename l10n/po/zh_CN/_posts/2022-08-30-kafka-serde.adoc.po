# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-08-29 07:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy, no-wrap
msgid "How to implement Kafka Serializers and Deserializers?"
msgstr "如何实现Kafka序列化器和反序列化器？"

#. type: YAML Front Matter: synopsis
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy, no-wrap
msgid "JSON, Avro and Custom Kafka Serializers and Deserializers with Quarkus"
msgstr "使用Quarkus的JSON、Avro和自定义Kafka序列化器和反序列化器"

#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid ""
"When your application writes a _record_ into a Kafka topic or when it consumes a _record_ from a Kafka topic, a mechanism of serialization and deserialization happens.\n"
"The serialization process transforms the business objects you want to send to Kafka into bytes.\n"
"The deserialization process is the opposite.\n"
"It receives the bytes from Kafka and recreates the business objects."
msgstr "当您的应用程序向 Kafka 主题写入 _记录_ 或从 Kafka 主题消费 _记录_ 时，会发生序列化和反序列化机制。序列化过程会把要发送到 Kafka 的业务对象转换成字节。反序列化过程正好相反。它从 Kafka 接收字节并重新创建业务对象。"

#. type: Plain text
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid "This blog post explores different approaches for this serialization and deserialization and explains how you can implement a custom serializer and deserializer. It also highlights facilities provided by the Kafka connector from Quarkus."
msgstr "这篇博文探讨了这种序列化和反序列化的不同方法，并解释了你如何实现一个自定义的序列化器和反序列化器。它还强调了Quarkus的Kafka连接器所提供的设施。"

#. type: Title ==
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy, no-wrap
msgid "Why do I need a custom serializer and deserializer?"
msgstr "为什么我需要一个自定义的序列化器和反序列化器？"

#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid ""
"https://javadoc.io/static/org.apache.kafka/kafka-clients/3.2.1/org/apache/kafka/common/serialization/package-summary.html[Kafka] provides a set of serializers and deserializers for the common types: `String`, `Double`, `Integer`, `Bytes`...\n"
"But that's rarely enough for business objects, even for objects are simple as:"
msgstr "link:https://javadoc.io/static/org.apache.kafka/kafka-clients/3.2.1/org/apache/kafka/common/serialization/package-summary.html[Kafka] 为常见类型提供了一系列序列化器和反序列化器： `String` , `Double` , `Integer` , `Bytes` ......但对于业务对象来说，这还远远不够，即使是对于简单的对象也是如此："

#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid ""
"Fortunately, Kafka lets us implement our own.\n"
"To achieve this, you need to implement the following interfaces:"
msgstr "幸运的是，Kafka 允许我们实现自己的接口。为此，您需要实现以下接口："

#. type: Block title
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy, no-wrap
msgid "The Serializer interface"
msgstr "串行器接口"

#. type: Block title
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy, no-wrap
msgid "The Deserializer interface"
msgstr "反序列化器接口"

#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid ""
"Once implemented, you need to configure your Kafka producer and consumer's key and value serializer and deserializer.\n"
"If you are using the Kafka connector from Quarkus, it will look like this:"
msgstr "实现后，你需要配置 Kafka 生产者和消费者的键和值序列化器和反序列化器。如果你使用的是 Quarkus 的 Kafka 连接器，它看起来就像这样："

#. type: Plain text
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid "But, no worries, Quarkus has a few magic tricks for you."
msgstr "但是，不用担心，夸库斯为你准备了一些神奇的技巧。"

#. type: Plain text
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid "In the rest of this post, we will use the following application:"
msgstr "在这篇文章的其余部分，我们将使用以下应用程序。"

#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid ""
"The code can be found on https://github.com/cescoffier/quarkus-kafka-serde-demo.\n"
"We will develop three variants:"
msgstr "代码可在 https://github.com/cescoffier/quarkus-kafka-serde-demo 上找到。我们将开发三种变体："

#. type: Plain text
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid "The first version uses JSON."
msgstr "第一个版本使用JSON。"

#. type: Plain text
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid "The second version uses Avro."
msgstr "第二个版本使用阿夫罗。"

#. type: Plain text
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid "The third version uses custom (and dumb) serializer and deserializer."
msgstr "第三个版本使用自定义的（也是愚蠢的）序列化器和解序列化器。"

#. type: Title ==
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy, no-wrap
msgid "Using JSON"
msgstr "使用JSON"

#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid ""
"Using JSON with Kafka is very popular.\n"
"As most web applications use JSON to exchange messages, using it with Kafka sounds like a natural extension."
msgstr "将 JSON 与 Kafka 结合使用非常流行。由于大多数网络应用都使用 JSON 来交换信息，因此在 Kafka 中使用 JSON 听起来像是一种自然的扩展。"

#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid ""
"In our case, it means transforming the instances of https://github.com/cescoffier/quarkus-kafka-serde-demo/blob/main/json-serde/json-serde-publisher/src/main/java/me/escoffier/quarkus/json/publisher/Hero.java[Hero] to a JSON document and then using the String serializer.\n"
"For the deserialization process, we would do the reverse process.\n"
"To do that with Quarkus, you have *nothing* to do: Quarkus generates the custom JSON serializer and deserializer for you."
msgstr "在我们的例子中，这意味着将 link:https://github.com/cescoffier/quarkus-kafka-serde-demo/blob/main/json-serde/json-serde-publisher/src/main/java/me/escoffier/quarkus/json/publisher/Hero.java[Hero] 实例转换为 JSON 文档，然后使用字符串序列化器。至于反序列化过程，我们将做相反的处理。使用 Quarkus 时，你无需做 *任何* 事情：Quarkus 会为你生成自定义的 JSON 序列化器和反序列化器。"

#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid ""
"In the https://github.com/cescoffier/quarkus-kafka-serde-demo/tree/main/json-serde[json-serde directory], you can find a version of the application using JSON to serialize and deserialize the records.\n"
"It does not contain any custom code or configuration.\n"
"Quarkus automatically detects that you need to write and consume Heroes and generates the serializer and deserializer for you.\n"
"It also configures the channels for you.\n"
"Of course, you can override the configuration, but it's what you want most of the time."
msgstr "在 link:https://github.com/cescoffier/quarkus-kafka-serde-demo/tree/main/json-serde[json-serde 目录] 中，您可以找到使用 JSON 对记录进行序列化和反序列化的应用程序版本。它不包含任何自定义代码或配置。Quarkus 会自动检测到你需要写入和消耗 Heroes，并为你生成序列化器和反序列化器。它还会为你配置通道。当然，你可以覆盖配置，但这是你大多数时候想要的。"

#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid ""
"To run this application, open two terminals.\n"
"In the first one, navigate to `json-serde/json-serde-publisher`, and run `mvn quarkus:dev`.\n"
"In the second terminal, navigate to `json-serde/json-serde-consumer`, and run `mvn quarkus:dev`.\n"
"Then, open a browser to http://localhost:8080.\n"
"Every 5 seconds, a new picture of a hero is displayed."
msgstr "要运行此应用程序，请打开两个终端。在第一个终端，导航到 `json-serde/json-serde-publisher` ，然后运行 `mvn quarkus:dev` 。在第二个终端，导航到 `json-serde/json-serde-consumer` ，然后运行 `mvn quarkus:dev` 。然后，打开浏览器 link:http://localhost:8080[http://localhost:8080。] 每隔 5 秒钟就会显示一张新的英雄图片。"

#. type: Title ==
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy, no-wrap
msgid "Using Avro"
msgstr "使用Avro"

#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid ""
"The second approach uses https://avro.apache.org/[Avro].\n"
"Avro has several advantages over (bare) JSON:"
msgstr "第二种方法使用 link:https://avro.apache.org/[Avro] 。与（裸）JSON 相比，Avro 有几个优点："

#. type: Plain text
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid "It's a binary and compact protocol. The payloads will be a lot smaller than with JSON."
msgstr "这是一个二进制和紧凑的协议。有效载荷将比用JSON小得多。"

#. type: Plain text
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid "The serialization and deserialization processes are a lot faster (avoiding reflection)."
msgstr "序列化和反序列化过程要快得多（避免了反射）。"

#. type: Plain text
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid "The format of the message is defined using a schema stored on a schema registry which enables versioning and enforces the structure."
msgstr "消息的格式是使用存储在模式注册表上的模式来定义的，该模式可以进行版本管理并强制执行结构。"

#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid ""
"The last point is essential.\n"
"To use Avro, you need a schema registry.\n"
"In this post, we are using https://www.apicur.io/registry/[Apicurio], but you can use the https://docs.confluent.io/platform/current/schema-registry/index.html[Confluent Schema Registry] or https://github.com/aiven/karapace[Karapace].\n"
"Quarkus provides a dev service for Apicurio, so you have nothing to do (as soon as you can run containers on your machine)."
msgstr "最后一点至关重要。要使用 Avro，您需要一个模式注册表。在这篇文章中，我们使用的是 link:https://www.apicur.io/registry/[Apicurio] ，但你也可以使用 link:https://docs.confluent.io/platform/current/schema-registry/index.html[Confluent Schema Registry] 或 link:https://github.com/aiven/karapace[Karapace] 。Quarkus 为 Apicurio 提供了开发服务，因此你无需做任何事情（只要你能在机器上运行容器即可）。"

#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid ""
"To use Avro, we need a schema.\n"
"In https://github.com/cescoffier/quarkus-kafka-serde-demo/blob/main/avro-serde/avro-serde-consumer/src/main/avro/hero.avsc[hero.avsc], you can find the schema representing our heroes:"
msgstr "要使用 Avro，我们需要一个模式。在 link:https://github.com/cescoffier/quarkus-kafka-serde-demo/blob/main/avro-serde/avro-serde-consumer/src/main/avro/hero.avsc[hero.avsc] 中，您可以找到代表我们英雄的模式："

#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid ""
"Avro relies on code generation.\n"
"It processes the schema to generate Java classes with the defined fields and serialization and deserialization methods."
msgstr "Avro 依靠代码生成。它处理模式，生成带有已定义字段、序列化和反序列化方法的 Java 类。"

#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid ""
"While in general, using code generation is an extra step, with Quarkus, it's built-in!\n"
"Once you have a schema in `src/main/avro`, it generates the code for you, and you are ready to use the produced classes."
msgstr "一般来说，使用代码生成是一个额外的步骤，但对于 Quarkus 来说，它是内置的！一旦你在 `src/main/avro` 中创建了模式，它就会为你生成代码，然后你就可以使用生成的类了。"

#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid ""
"In https://github.com/cescoffier/quarkus-kafka-serde-demo/blob/main/avro-serde/avro-serde-publisher/src/main/java/me/escoffier/quarkus/json/publisher/AvroPublisherApp.java[AvroPublisherApp] and https://github.com/cescoffier/quarkus-kafka-serde-demo/blob/main/avro-serde/avro-serde-consumer/src/main/java/me/escoffier/quarkus/AvroConsumerResource.java[AvroConsumerResource], we are using the `Hero` class generated from the schema.\n"
"As an example, the consumer application looks like this:"
msgstr "在 link:https://github.com/cescoffier/quarkus-kafka-serde-demo/blob/main/avro-serde/avro-serde-publisher/src/main/java/me/escoffier/quarkus/json/publisher/AvroPublisherApp.java[AvroPublisherApp] 和 link:https://github.com/cescoffier/quarkus-kafka-serde-demo/blob/main/avro-serde/avro-serde-consumer/src/main/java/me/escoffier/quarkus/AvroConsumerResource.java[AvroConsumerResource] 中，我们使用从模式生成的 `Hero` 类。举例来说，消费者应用程序如下所示："

#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid ""
"Quarkus automatically finds the serializer and deserializer and configures the channels, so again: *no config*.\n"
"However, you still need to instruct Apicurio to register the schema.\n"
"In general, it's a manual operation, but for development, you can use the following property:"
msgstr "Quarkus 会自动找到序列化器和反序列化器，并配置通道，所以还是那句话： *无需配置* 。不过，你仍然需要指示 Apicurio 注册模式。一般来说，这是一项手动操作，但在开发过程中，你可以使用以下属性："

#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid ""
"To run this application, open two terminals.\n"
"In the first one, navigate to `avro-serde/avro-serde-publisher`, and run `mvn quarkus:dev`.\n"
"In the second terminal, navigate to `avro-serde/avro-serde-consumer`, and run `mvn quarkus:dev`.\n"
"Then, open a browser to http://localhost:8080.\n"
"As for the JSON variant, every 5 seconds, a new picture of a hero is displayed.\n"
"This time the Kafka records are serialized using Avro"
msgstr "要运行此应用程序，请打开两个终端。在第一个终端，导航到 `avro-serde/avro-serde-publisher` ，然后运行 `mvn quarkus:dev` 。在第二个终端，导航到 `avro-serde/avro-serde-consumer` ，然后运行 `mvn quarkus:dev` 。然后，打开浏览器 link:http://localhost:8080[http://localhost:8080。] 至于 JSON 变体，每 5 秒钟就会显示一张新的英雄图片。这次的 Kafka 记录使用 Avro 进行序列化"

#. type: Title ==
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy, no-wrap
msgid "Writing a custom serializer and deserializer"
msgstr "编写一个自定义的序列化器和反序列化器"

#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid ""
"Of course, you can still write your custom serializer and deserializer.\n"
"As mentioned above, you need to implement the `Serializer` and `Deserializer` interfaces."
msgstr "当然，您仍然可以编写自定义的序列化器和反序列化器。如上所述，您需要实现 `Serializer` 和 `Deserializer` 接口。"

#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid "For example, the  https://github.com/cescoffier/quarkus-kafka-serde-demo/blob/main/custom-serde/custom-serde-publisher/src/main/java/me/escoffier/quarkus/json/publisher/HeroSerializer.java[HeroSerializer class] contains a straightforward (and inefficient) approach to serializing our heroes:"
msgstr "例如， link:https://github.com/cescoffier/quarkus-kafka-serde-demo/blob/main/custom-serde/custom-serde-publisher/src/main/java/me/escoffier/quarkus/json/publisher/HeroSerializer.java[HeroSerializer 类] 包含一种直接（但低效）的英雄序列化方法："

#. type: Plain text
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid "The https://github.com/cescoffier/quarkus-kafka-serde-demo/blob/main/custom-serde/custom-serde-consumer/src/main/java/me/escoffier/quarkus/HeroDeserializer.java[HeroDeserializer class] contains the deserialization counterpart."
msgstr "link:https://github.com/cescoffier/quarkus-kafka-serde-demo/blob/main/custom-serde/custom-serde-consumer/src/main/java/me/escoffier/quarkus/HeroDeserializer.java[HeroDeserializer类] 包含了反序列化的对应部分。"

#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid ""
"As before, Quarkus discovers these implementations and configures the channels for you.\n"
"So you do not have to configure anything."
msgstr "和以前一样，Quarkus 会发现这些实现，并为你配置通道。因此，你无需配置任何东西。"

#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid ""
"Custom serializers and deserializers can receive configuration attributes.\n"
"They receive the producer/consumer configuration in the `configure` method."
msgstr "自定义序列化器和反序列化器可以接收配置属性。它们在 `configure` 方法中接收生产者/消费者配置。"

#. type: Plain text
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid "Custom serializers and deserializers cannot be CDI beans. Kafka instantiates them directly using reflection."
msgstr "自定义序列化器和反序列化器不能是CDI beans。Kafka使用反射直接将它们实例化。"

#. type: Title ==
#: _posts/2022-08-30-kafka-serde.adoc
#, no-wrap
msgid "Conclusion"
msgstr "解决方案"

#. type: Plain text
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid "This post explores different possibilities to serialize and deserialize your messages with Kafka and how Quarkus reduces the amount of boilerplate and configuration you need to use."
msgstr "这篇文章探讨了使用 Kafka 对消息进行序列化和反序列化的各种可能性，以及 Quarkus 如何减少所需的模板和配置。"

#. type: Plain text
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid "So, what should you use?"
msgstr "那么，你应该使用什么呢？"

#. type: Plain text
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid "JSON is massively used, but the lack of structure verification, by default, can quickly be a problem if the format evolves rapidly."
msgstr "JSON 的使用量很大，但如果格式发展迅速，默认情况下缺乏结构验证很快就会成为问题。"

#. type: Plain text
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid "Avro provides better performances and handles validation and evolutions. But it requires a schema registry. If your system exchanges lots of messages with evolving structures, Avro should be preferred. Also, Avro produces smaller payloads."
msgstr "Avro 可提供更好的性能，并能处理验证和演变。但它需要一个模式注册表。如果你的系统与不断变化的结构交换大量信息，那么 Avro 应该是首选。此外，Avro 产生的有效载荷较小。"

#. type: Plain text
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid "If you have stringent requirements not covered by the JSON and Avro approaches, you can develop a custom serializer and deserializer."
msgstr "如果您有 JSON 和 Avro 方法无法满足的严格要求，可以开发自定义的序列化器和反序列化器。"

#. type: Plain text
#: _posts/2022-08-30-kafka-serde.adoc
#, fuzzy
msgid "Note that JSON can be combined with JSON-Schema (with the schema stored on a schema registry). Protobuf is also a possible alternative if you prefer a binary format."
msgstr "请注意，JSON 可以与 JSON 模式相结合（模式存储在模式注册表中）。如果你更喜欢二进制格式，Protobuf 也是一种可能的选择。"
