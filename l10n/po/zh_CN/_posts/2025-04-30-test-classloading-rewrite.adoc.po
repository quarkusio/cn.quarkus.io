msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid ""
"The internals (and a few externals) of Quarkus test classloading have "
"changed"
msgstr "Quarkus 测试类加载的内部（和一些外部）已发生变化"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid ""
"The way that Quarkus loads test classes has been updated. Most tests will "
"not need to change, but here are some things to watch out for."
msgstr "Quarkus 加载测试类的方式已经更新。大多数测试不需要更改，但这里有一些需要注意的地方。"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid "What's changing?"
msgstr "有什么变化？"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid ""
"The internals of Quarkus test classloading have been rewritten in 3.22.\n"
"It does not affect production and dev modes, or some Quarkus test modes, "
"such as `@QuarkusIntegrationTest`, `@QuarkusComponentTest`.\n"
"However, `@QuarkusTest` has changed.\n"
"This change should make Quarkus testing work better, and it allowed us to "
"fix a pile of longstanding bugs.\n"
"It will also allow us to improve the integration with test frameworks such "
"as Pact.\n"
"However, it did introduce a few bugs we know about, and most likely also "
"some bugs we don't yet know about.\n"
"We're keen to get feedback from the community so that we can get fixing."
msgstr ""
"Quarkus 测试类加载的内部结构已在 3.22 中重写。它不会影响生产和开发模式，也不会影响某些 Quarkus 测试模式，如 "
"`@QuarkusIntegrationTest` , `@QuarkusComponentTest` 。但是， `@QuarkusTest` "
"已经改变。这一改动应能使 Quarkus 测试工作得更好，并使我们修复了一大堆长期存在的 bug。它还能让我们改进与 Pact "
"等测试框架的集成。不过，它也引入了一些我们已知的错误，很可能还有一些我们还不知道的错误。我们非常希望得到社区的反馈，以便我们能够修复这些问题。"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid "Why?"
msgstr "为什么？"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid ""
"In previous versions, Quarkus tests were invoked using the default JUnit "
"classloader, and then executed in a different, Quarkus-aware, classloader."
msgstr "在以前的版本中，Quarkus 测试使用默认的 JUnit 类加载器调用，然后在不同的、可感知 Quarkus 的类加载器中执行。"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid ""
"This mostly worked very well, and meant that `QuarkusTest` tests mostly "
"behaved as if they were part of the same application as the code under test.\n"
"The Quarkus test framework could start and stop Quarkus instances at the "
"right point in the test lifecycle, inject CDI dependencies, and do other "
"useful Quarkus bytecode manipulation.\n"
"However, some use cases didn't work. Tests using advanced JUnit 5 features "
"like `@TestTemplate` and `@ParameterizedTest` sometimes found that the same "
"test code might appear to run in several classloaders in a single test, or "
"that injected dependencies weren't always available."
msgstr ""
"这在大多数情况下运行得非常好，意味着 `QuarkusTest` 测试在大多数情况下的表现就好像它们与被测代码是同一个应用程序的一部分。Quarkus "
"测试框架可以在测试生命周期的正确位置启动和停止 Quarkus 实例，注入 CDI 依赖项，并进行其他有用的 Quarkus "
"字节码操作。但是，有些用例无法正常工作。使用高级 JUnit 5 功能（如 `@TestTemplate` 和 `@ParameterizedTest` "
"）进行的测试有时会发现，在一次测试中，相同的测试代码可能会在多个类加载器中运行，或者注入的依赖关系并不总是可用的。"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid ""
"While Quarkus extensions can do all sorts of marvellous bytecode "
"manipulation to improve the developer experience, they cannot manipulate "
"test classes with the same freedom that they do normal application classes."
msgstr "虽然 Quarkus 扩展可以进行各种奇妙的字节码操作，以改善开发人员的体验，但它们无法像操作普通应用程序类那样自由地操作测试类。"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid ""
"Over time, test-related defects were building up that couldn't be changed "
"without a fundamental rewrite of how Quarkus loads and executes tests.\n"
"The Quarkus test code itself was also growing ever-more complex as it tried "
"to work around various JUnit edge cases. Moving test instances from one "
"classloader to another involved serializing and deserialization, which is "
"harder to implement on newer JVM versions with tighter class security. For "
"example, Quarkus used to use XStream as the serialization provider, but "
"XStream no longer works with Java 17 and higher, because of reflection "
"restrictions in the newer JVMs."
msgstr ""
"随着时间的推移，与测试相关的缺陷越来越多，如果不从根本上重写 Quarkus 加载和执行测试的方式，就无法改变这些缺陷。Quarkus "
"测试代码本身也变得越来越复杂，因为它试图绕过各种 JUnit "
"边缘情况。将测试实例从一个类加载器移至另一个类加载器涉及序列化和反序列化，这在类安全性更严格的新版 JVM 上更难实现。例如，Quarkus 曾使用 "
"XStream 作为序列化提供程序，但由于较新 JVM 中的反射限制，XStream 不再适用于 Java 17 及更高版本。"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid ""
"What if, instead, Quarkus tests were simply run in the same classloader used "
"to to load them?"
msgstr "如果 Quarkus 测试只是在用于加载它们的同一个类加载器中运行呢？"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid "What you need to do"
msgstr "您需要做什么"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid ""
"From Quarkus 3.22 onwards, this is exactly how `@QuarkusTest` classloading "
"works.\n"
"What do your tests need to change in order to work with the new "
"architecture?\n"
"*Nothing* (hopefully!)."
msgstr ""
"从 Quarkus 3.22 开始， `@QuarkusTest` classloading 就是这样工作的。为了使用新架构，您的测试需要做哪些更改？ "
"*没什么* （希望如此！）。"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid ""
"One of the goals of this change was that the rewrite didn't touch any tests "
"in our test suite, to make sure they'd all continue working without updates.\n"
"In practice, there have been a few hiccups and we've also discovered some "
"edge cases in the broader ecosystem."
msgstr ""
"这次改动的目标之一是，重写不会触及我们测试套件中的任何测试，以确保它们都能在不更新的情况下继续工作。在实践中，出现了一些小插曲，我们还在更广泛的生态系统中发现了一些边缘情况。"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid "Known regressions"
msgstr "已知回归"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid ""
"*All dev services now start in the JUnit discovery phase*. https://quarkus."
"io/guides/dev-services[Quarkus Dev Services] are currently started during "
"https://quarkus.io/guides/reaugmentation#what-is-augmentation[the "
"augmentation phase], along with bytecode manipulation and other application "
"initialization steps. With the new testing design, all augmentation happens "
"at the beginning of the test run, during the JUnit discovery phase. This "
"means all Dev Services also start at the beginning of the test run. If "
"several test classes with different Dev Service configuration are augmented "
"before any tests are run, multiple differently-configured Dev Services may "
"be running at the same time. This can cause port conflicts and cross-talk on "
"configuration values. We're hoping to have a https://github.com/quarkusio/"
"quarkus/issues/45785[fix] for this in the next release. As a workaround, "
"splitting conflicting tests into separate projects should fix symptoms."
msgstr ""
"*现在，所有开发服务都在 JUnit 发现阶段启动* 。目前， link:https://quarkus.io/guides/dev-"
"services[Quarkus 开发服务] 与字节码操作和其他应用程序初始化步骤一起，在 link:https://quarkus.io/guides/"
"reaugmentation#what-is-augmentation[增强阶段] 启动。在新的测试设计中，所有增强都发生在测试运行的开始阶段，即 "
"JUnit "
"发现阶段。这意味着所有开发服务也在测试运行开始时启动。如果在运行任何测试之前，对具有不同开发服务配置的多个测试类进行增强，那么多个不同配置的开发服务可能会同时运行。这可能会导致端口冲突和配置值交叉。我们希望在下一个版本中 "
"link:https://github.com/quarkusio/quarkus/issues/45785[解决] "
"这个问题。作为一种变通方法，将有冲突的测试拆分为不同的项目应该可以解决这些问题。"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid ""
"*Config access from JUnit conditions*. Using a `ConfigProvider` from a "
"custom JUnit condition will https://github.com/quarkusio/quarkus/issues/"
"47081[trigger a `ServiceConfigurationError`]. The workaround is to set the "
"thread context classloader to `this.getClass().getClassLoader()` before "
"reading config, and then set it back afterwards. This is fixed in 3.23."
msgstr ""
"*从 JUnit 条件访问配置* 。从自定义 JUnit 条件中使用 `ConfigProvider` 会 link:https://github."
"com/quarkusio/quarkus/issues/47081[触发ServiceConfigurationError] "
"。解决方法是在读取配置之前将线程上下文 classloader 设置为 `this.getClass().getClassLoader()` "
"，之后再将其设置为 。3.23 版已修复了这一问题。"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid ""
"*Nested test issues*. If nested `@QuarkusTest` tests are mixed in the same "
"project with plain tests, the plain tests https://github.com/quarkusio/"
"quarkus/issues/47657[will not be able to access Quarkus config], because the "
"thread context classloader does not get correctly reset. As a workaround, "
"you can manually set the thread context classloader to the system "
"classloader in the plain tests. The nested tests also https://github.com/"
"quarkusio/quarkus/issues/47671[have problems in dev mode]. Most of these "
"issues are fixed in 3.23, and the remaining cases are sorted out in 3.24."
msgstr ""
"*嵌套测试问题* 。如果嵌套的 `@QuarkusTest` 测试与普通测试混合在同一个项目中，普通测试 link:https://github.com/"
"quarkusio/quarkus/issues/47657[将无法访问 Quarkus 配置] "
"，因为线程上下文类加载器没有被正确重置。作为一种解决方法，你可以在普通测试中手动将线程上下文类加载器设置为系统类加载器。嵌套测试 link:https:/"
"/github.com/quarkusio/quarkus/issues/47671[在开发模式下] 也 link:https://github.com/"
"quarkusio/quarkus/issues/47671[有问题] 。这些问题大部分已在 3.23 版中修复，其余情况将在 3.24 版中解决。"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid ""
"*junit-platform.properties* Including a `junit-platform.properties` in a "
"project https://github.com/quarkusio/quarkus/issues/47646[causes problems] "
"for tests using `@QuarkusTest`. This is fixed in 3.24, but note that `junit-"
"platform.properties` files can also https://github.com/quarkusio/quarkus/"
"issues/48125[interfere with multi-profile tests]. To register a class "
"orderer, it is best to https://quarkus.io/guides/getting-started-"
"testing#testing_different_profiles[configure the orderer] in the Quarkus "
"application properties."
msgstr ""
"*junit-platform.properties* 在项目中包含 `junit-platform.properties` link:https://"
"github.com/quarkusio/quarkus/issues/47646[会导致] 使用 `@QuarkusTest` 的测试 link:"
"https://github.com/quarkusio/quarkus/issues/47646[出现问题] 。3.24 修正了这一问题，但请注意 "
"`junit-platform.properties` 文件也会 link:https://github.com/quarkusio/quarkus/"
"issues/48125[干扰多配置文件测试] 。要注册类订购器，最好在 Quarkus 应用程序属性中 link:https://quarkus.io/"
"guides/getting-started-testing#testing_different_profiles[配置订购器] 。"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid ""
"*Gradle source sets*. In some cases classes in one gradle source set https://"
"github.com/quarkusio/quarkus/issues/47760[cannot access package-private "
"fields and classes in a different source set]. This causes an "
"`IllegalAccessError`. The workaround is to switch from package-private to "
"public. This is fixed in 3.24."
msgstr ""
"*Gradle 源代码集* 。在某些情况下，一个 gradle 源集中的类 link:https://github.com/quarkusio/"
"quarkus/issues/47760[无法访问另一个源集中的包私有字段和类] 。这将导致 `IllegalAccessError` "
"。解决方法是将私有包切换为公共包。3.24 中修复了这一问题。"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid ""
"*IDE support*. Running `QuarkusTest` tests from the Eclipse IDE is https://"
"github.com/quarkusio/quarkus/issues/47656[more challenging]. Running a class "
"as a JUnit test gives an error. To workaround, you can individual test "
"methods, or run a whole package also works, or add `-uniqueId [engine:junit-"
"jupiter]/[class:<your.class.name.here>]` to the program arguments in the run "
"configuration. This is fixed in Eclipse 4.37. Similar, in Visual Studio "
"Code, running all tests in a class or package https://github.com/quarkusio/"
"quarkus/issues/48014[will fail], but running individual test methods will "
"work."
msgstr ""
"*IDE 支持* 。从 Eclipse IDE 运行 `QuarkusTest` 测试 link:https://github.com/"
"quarkusio/quarkus/issues/47656[更具挑战性] 。将一个类作为 JUnit "
"测试运行时会出错。为了解决这个问题，你可以使用单个测试方法，或者运行整个包也可以，或者在运行配置中的程序参数中添加 `-uniqueId [engine:"
"junit-jupiter]/[class:<your.class.name.here>]` 。Eclipse 4.37 修正了这一问题。类似地，在 "
"Visual Studio Code 中，运行类或包中的所有测试都 link:https://github.com/quarkusio/quarkus/"
"issues/48014[会失败] ，但运行单个测试方法则会正常。"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid ""
"*Increased memory footprint running tests.* For suites using multiple "
"profiles and resources, more heap or metaspace may be needed."
msgstr "*运行测试时内存占用增加。* 对于使用多个配置文件和资源的套件，可能需要更多的堆或元空间。"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid "Things to watch out for"
msgstr "需要注意的事项"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid ""
"*Test order change*. As part of the rewrite, the execution order of some "
"tests has swapped around. Of course, we all know tests should not depend on "
"execution order if they don't set an order explicitly. However, it's easy to "
"not notice that a test requires a certain order... until the order changes. "
"We discovered some tests in our own suite that were sensitive to the "
"execution order, and other people may make similar discoveries."
msgstr ""
"*测试顺序更改* "
"。作为重写的一部分，一些测试的执行顺序发生了变化。当然，我们都知道，如果测试没有明确设置执行顺序，就不应该依赖于执行顺序。然而，我们很容易注意不到测试需要特定的顺序."
".....直到顺序发生变化。我们在自己的测试套件中发现了一些对执行顺序很敏感的测试，其他人也可能会有类似的发现。"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid ""
"*Test timing change*. We also discovered that the rewrite exposed some "
"timing issues in tests. Because classloading is frontloaded at the beginning "
"of the test run, rather than between test executions, there's less time for "
"asynchronous operations to finish between tests. For example, there may no "
"longer be time for external state to 'reset' before the next test starts. "
"This might expose some heisenbugs in test suites."
msgstr ""
"*测试时间变化* "
"。我们还发现，重写暴露了测试中的一些时序问题。由于类加载是在测试运行开始时前置的，而不是在测试执行之间，因此在测试之间完成异步操作的时间较少。例如，在下一次测试开始前，外部状态可能不再有时间 "
"\"重置\"。这可能会暴露测试套件中的一些缺陷。"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid "Dropped support"
msgstr "支持减少"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid ""
"*`@TestProfile` on `@Nested` tests.* Mixing different test profiles and test "
"resources on `@Nested` tests is no longer supported. By definition, every "
"`@TestProfile` must get its own Quarkus application and classloader. Having "
"multiple classloaders execute one test isn't compatible with loading the "
"test with the classloader used to run it."
msgstr ""
"*<code>@TestProfile</code> <code>@Nested</code> 测试。* 不再支持在 "
"测试中混合使用不同的测试配置文件和测试资源。根据定义，每个 都必须有自己的 Quarkus "
"应用程序和类加载器。让多个类加载器执行一个测试与用类加载器加载测试是不兼容的。 `@Nested` `@TestProfile` "

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid ""
"*Version 2.x of the Maven Surefire plugin*. Versions below 3.x of the Maven "
"Surefire plugin will no longer work with `@QuarkusTest`. Version 3 of the "
"Surefire plugin was released in 2023, so version 2 is now rather old."
msgstr ""
"*Maven Surefire 插件的 2.x 版本* 。低于 3.x 版本的 Maven Surefire 插件将不再与 `@QuarkusTest` "
"兼容。Surefire 插件的第 3 版于 2023 年发布，因此第 2 版已相当老旧。"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid ""
"*Parallel test execution.* Running Quarkus tests in parallel has https://"
"github.com/quarkusio/quarkus/issues/42296[never been supported], but it "
"would work in some circumstances. It is now less likely to work."
msgstr ""
"*并行测试执行。* 一直以来，Quarkus 都 link:https://github.com/quarkusio/quarkus/issues/"
"42296[不支持] 并行运行测试，但在某些情况下是可行的。现在，并行运行的可能性降低了。"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid "Next steps"
msgstr "下一步工作"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid ""
"The main work of the test classloading rewrite has been delivered in 3.22, "
"and has unlocked a bunch of possible improvements.\n"
"Some test defects weren't directly fixed by the main change, but the "
"architecture is now in place to enable a fix.\n"
"More excitingly, test-related extensions, like the Pact extensions, can now "
"add new features to reduce test boilerplate."
msgstr ""
"测试类加载重写的主要工作已在 3.22 "
"中完成，并解锁了一系列可能的改进。一些测试缺陷并没有直接通过主要改动得到修复，但现在已经具备了修复缺陷的架构。更令人兴奋的是，与测试相关的扩展（如 "
"Pact 扩展）现在可以添加新功能以减少测试模板。"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid ""
"As always, if you spot issues or oddities, please let us know on https://"
"quarkusio.zulipchat.com/[zulip] or https://github.com/quarkusio/quarkus/"
"issues[raise an issue].\n"
"The https://github.com/orgs/quarkusio/projects/30[working group for test "
"classloading] is still underway, and welcomes contributions."
msgstr ""
"一如既往，如果您发现问题或怪异之处，请在 link:https://quarkusio.zulipchat.com/[zulip] 上告知我们或 "
"link:https://github.com/quarkusio/quarkus/issues[提出问题] 。 link:https://github."
"com/orgs/quarkusio/projects/30[测试类加载工作组] 仍在工作中，欢迎大家献计献策。"
