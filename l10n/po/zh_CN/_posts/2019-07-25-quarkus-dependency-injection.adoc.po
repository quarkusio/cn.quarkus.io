# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:1
#, fuzzy, no-wrap
msgid "mkouba"
msgstr "mkouba"

#. type: YAML Front Matter: date
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:1
#, fuzzy, no-wrap
msgid "2019-07-25 00:00 +0100"
msgstr "2019-07-25 00:00 +0100"

#. type: YAML Front Matter: layout
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "职位"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:1
#, fuzzy, no-wrap
msgid "Quarkus ArC is a build-time oriented dependency injection based on CDI 2.0. But what does it actually mean and what benefits does a build-time processing DI bring?"
msgstr "Quarkus ArC是一个基于CDI 2.0的面向构建时的依赖注入。但它实际上意味着什么，构建时处理的DI会带来什么好处？"

#. type: YAML Front Matter: tags
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:1
#, fuzzy, no-wrap
msgid "extension arc development-tips"
msgstr "延伸弧线发展-提示"

#. type: Title =
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:9
#, fuzzy, no-wrap
msgid "Quarkus Dependency Injection"
msgstr "Quarkus依赖性注入"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:13
#, fuzzy
msgid "Quarkus ArC is a build-time oriented dependency injection based on http://cdi-spec.org/[CDI 2.0].  In this blogpost, we're going to explain the relationship to the specification and describe some of the benefits and drawbacks of the build-time processing design."
msgstr "Quarkus ArC是一个基于 link:http://cdi-spec.org/[CDI 2.0] 的面向构建时的依赖注入。在这篇博文中，我们将解释与规范的关系，并描述构建时处理设计的一些好处和缺点。"

#. type: Title ==
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:14
#, fuzzy, no-wrap
msgid "Compatibility"
msgstr "兼容性"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:20
#, fuzzy
msgid "It does not make sense to reinvent the wheel, especially when it comes to dependency injection.  There are many frameworks that try to solve similar problems.  A year ago, we made a design decision to build Quarkus DI on top of CDI.  We had some very good reasons to choose CDI:"
msgstr "重新发明轮子是没有意义的，特别是在涉及到依赖注入时。有很多框架都试图解决类似的问题。一年前，我们做了一个设计决定，在CDI之上建立Quarkus DI。我们有一些非常好的理由来选择CDI。"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:22
#, fuzzy
msgid "CDI is a mature and proven component model"
msgstr "CDI是一个成熟的、经过验证的组件模型"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:23
#, fuzzy
msgid "We at Red Hat have almost ten years of experience with developing http://weld.cdi-spec.org/[Weld - the CDI Reference Implementation]"
msgstr "我们红帽公司在开发 link:http://weld.cdi-spec.org/[Weld] 方面有近十年的经验 link:http://weld.cdi-spec.org/[--CDI参考实现。]"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:24
#, fuzzy
msgid "The CDI API is built on top of `javax.inject` so that it should be easy to migrate from any DI framework compatible with `@Inject`"
msgstr "CDI API是建立在 `javax.inject` 的基础上的，所以它应该很容易从任何兼容DI框架中迁移出来。 `@Inject` "

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:28
#, fuzzy
msgid "Our primary goal was to implement a supersonic build-time oriented DI solution compatible with CDI.  This would allow users to continue using CDI in their applications but also leverage Quarkus build-time optimizations.  However, ArC is not a full CDI implementation verified by the TCK - see also the list of https://quarkus.io/guides/cdi-reference#supported_features[supported features] and the list of https://quarkus.io/guides/cdi-reference#limitations[limitations]."
msgstr "我们的主要目标是实现一个与CDI兼容的超音速构建时间导向的DI解决方案。这将允许用户继续在他们的应用程序中使用CDI，但也可以利用Quarkus的构建时间优化。然而，ArC并不是一个经过TCK验证的完整的CDI实现--参见 link:https://quarkus.io/guides/cdi-reference#supported_features[支持的功能] 列表和 link:https://quarkus.io/guides/cdi-reference#limitations[限制] 列表。"

#. type: Title ==
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:29
#, fuzzy, no-wrap
msgid "Build-time Processing Benefits and Drawbacks"
msgstr "构建时间处理的好处和坏处"

#. type: Title ===
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:31
#, fuzzy, no-wrap
msgid "Fail Fast"
msgstr "快速失败"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:34
#, fuzzy
msgid "Beans and dependencies are validated during the build so that your application can never fail in production with common problems such as `AmbiguousResolutionException` or `UnsatisfiedResolutionException`."
msgstr "在构建过程中对Bean和依赖关系进行了验证，这样你的应用程序就不会在生产中出现常见问题，如 `AmbiguousResolutionException` 或 `UnsatisfiedResolutionException` 。"

#. type: Title ===
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:35
#, fuzzy, no-wrap
msgid "Instant Startup"
msgstr "即时启动"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:40
#, fuzzy
msgid "When the app starts ArC just loads all the metadata and initializes some internal structures.  There is no need to analyze the application classes again.  This means negligible startup overhead."
msgstr "当应用程序启动时，ArC只是加载所有的元数据并初始化一些内部结构。没有必要再次分析应用程序的类。这意味着启动的开销可以忽略不计。"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:42
#, fuzzy
msgid "This applies to both the GraalVM and OpenJDK HotSpot runtimes."
msgstr "这同时适用于GraalVM和OpenJDK HotSpot运行系统。"

#. type: Title ===
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:43
#, fuzzy, no-wrap
msgid "Minimized Runtime"
msgstr "最小化的运行时间"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:48
#, fuzzy
msgid "In Quarkus 0.19, ArC plus integration runtime consist of 72 classes and occupies ~ 140 KB in jars.  http://weld.cdi-spec.org/[Weld 3.1.1] (CDI Reference Implementation) core is roughly 1200 classes and approx. 2 MB jar.  In other words, ArC runtime takes approx. 7% of the Weld runtime in terms of number of classes and jar footprint."
msgstr "在Quarkus 0.19中，ArC加集成运行时由72个类组成，在jar中占据了约140KB。 link:http://weld.cdi-spec.org/[Weld 3.1.1] （CDI参考实现）的核心大约有1200个类和大约2MB的jar。换句话说，ArC运行时在类的数量和jar占用的空间方面大约是Weld运行时的7%。"

#. type: Title ===
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:49
#, fuzzy, no-wrap
msgid "Optimized Code Paths and Metadata Structures"
msgstr "优化的代码路径和元数据结构"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:53
#, fuzzy
msgid "When generating the metadata classes ArC can sometimes produce leaner and smarter logic because it has the whole application analyzed already.  This is one of the areas where we would like to develop and improve ArC."
msgstr "在生成元数据类时，ArC有时可以产生更精简、更智能的逻辑，因为它已经分析了整个应用。这是我们希望发展和改进ArC的领域之一。"

#. type: Title ===
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:54
#, fuzzy, no-wrap
msgid "Extension Points"
msgstr "扩展点"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:60
#, fuzzy
msgid "Unfortunately, CDI portable extensions are inherently runtime constructs and therefore cannot be fully supported in Quarkus.  In fact, all CDI extensions are ignored at the moment.  Nevertheless, most of the functionality can be achieved using https://quarkus.io/guides/cdi-reference#build-time-extension-points[Quarkus extensions].  The CDI extensions are encouraged to generalize the code, and if possible provide a Quarkus extension to make full use of build-time metadata processing."
msgstr "不幸的是，CDI可移植扩展本身是运行时结构，因此在Quarkus中不能完全支持。事实上，目前所有的CDI扩展都被忽略了。尽管如此，大部分的功能还是可以通过 link:https://quarkus.io/guides/cdi-reference#build-time-extension-points[Quarkus扩展] 来实现。我们鼓励CDI扩展将代码通用化，如果可能的话，提供一个Quarkus扩展来充分利用构建时元数据处理。"

#. type: Title ==
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:61
#, fuzzy, no-wrap
msgid "Non-standard Features"
msgstr "非标准功能"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:65
#, fuzzy
msgid "ArC is not limited to standards and we're constantly looking for ways to go beyond and extend the possibilities.  Following are some examples of non-standard features provided by Quarkus DI."
msgstr "ArC并不局限于标准，我们一直在寻找超越和扩展可能性的方法。以下是Quarkus DI提供的一些非标准功能的例子。"

#. type: Title ===
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:66
#, fuzzy, no-wrap
msgid "Qualified Injected Fields"
msgstr "合格的注射场"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:69
#, fuzzy
msgid "Normally, if you declare an injected field you'll always need to use `@Inject` and optionally required qualifiers:"
msgstr "通常情况下，如果你声明一个注入的字段，你总是需要使用 `@Inject` 和可选的必要限定词。"

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:75
#, no-wrap
msgid ""
"  @Inject\n"
"  @ConfigProperty(name = \"cool\")\n"
"  String coolProperty;\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:78
#, fuzzy
msgid "In Quarkus, you can skip the `@Inject` annotation completely if an injected field declares at least one qualifier:"
msgstr "在Quarkus中，如果一个注入的字段至少声明了一个限定词，你可以完全跳过 `@Inject` 注释。"

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:83
#, no-wrap
msgid ""
"  @ConfigProperty(name = \"cool\")\n"
"  String coolProperty;\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:86
#, fuzzy
msgid "`@Inject` is still required for constructor and method injection."
msgstr " `@Inject` 仍然需要构造函数和方法注入。"

#. type: Title ===
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:87
#, fuzzy, no-wrap
msgid "Simplified Constructor Injection"
msgstr "简化的构造函数注入"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:91
#, fuzzy
msgid "In CDI, a normal scoped bean must always declare a no-args constructor (this constructor is normally generated by the compiler unless you declare any other constructor).  However, this requirement complicates constructor injection - you would need to provide a dummy no-args constructor to make things work in CDI."
msgstr "在CDI中，一个正常范围的Bean必须始终声明一个no-args构造函数（这个构造函数通常由编译器生成，除非你声明任何其他构造函数）。然而，这个要求使构造函数注入变得复杂--你需要提供一个假的无args构造函数来使事情在CDI中运作。"

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:96
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:116
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyCoolService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:98
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:118
#, no-wrap
msgid "  private SimpleProcessor processor;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:101
#, no-wrap
msgid ""
"  MyCoolService() { // dummy constructor needed\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:107
#, no-wrap
msgid ""
"  @Inject // constructor injection\n"
"  MyCoolService(SimpleProcessor processor) {\n"
"    this.processor = processor;\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:111
#, fuzzy
msgid "There is no need to declare dummy constructors for normal scoped bean in Quarkus - they are generated automatically.  Also if there's only one constructor there is no need for `@Inject`."
msgstr "在Quarkus中不需要为普通范围的Bean声明虚拟构造函数--它们是自动生成的。另外，如果只有一个构造函数，就不需要 `@Inject` 。"

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:123
#, no-wrap
msgid ""
"  MyCoolService(SimpleProcessor processor) {\n"
"    this.processor = processor;\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:126
#, fuzzy
msgid "We don't generate a no-args constructor automatically if a bean class extends another class that does not declare a no-args constructor."
msgstr "如果一个Bean类扩展了另一个没有声明no-args构造函数的类，我们不会自动生成no-args构造函数。"

#. type: Title ===
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:127
#, fuzzy, no-wrap
msgid "Default Beans"
msgstr "默认豆类"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:131
#, fuzzy
msgid "CDI has a feature called https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#alternatives[alternatives].  Simply said a bean annotated with `@Alternative` and `@Priority` takes precedence over the non-alternative beans during type-safe resolution."
msgstr "CDI有一个叫做 link:https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#alternatives[替代物的] 功能。简单地说，在类型安全解析过程中，用 `@Alternative` 和 `@Priority` 注释的bean优先于非替代性bean。"

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:136
#, no-wrap
msgid ""
"class MyBean {\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:141
#, no-wrap
msgid ""
"@Alternative\n"
"@Priority(1)\n"
"class MyAlternativeBean extends MyBean {\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:144
#, no-wrap
msgid ""
"@Inject // MyAlternativeBean wins and is injected!\n"
"MyBean bean;\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:153
#, fuzzy
msgid "So, what if a user wants to override a bean defined by a library/extension? The bean would have to be marked as a CDI `@Alternative` that is enabled using the `@Priority` annotation.  Is there a simpler approach? Yes, there is.  You can use a non-standard feature called \"default beans\".  In this case, a bean that can be overridden should be annotated with `@io.quarkus.arc.DefaultBean`.  And that's it."
msgstr "那么，如果用户想要覆盖一个由库/扩展定义的Bean呢？这个Bean必须被标记为CDI `@Alternative` ，使用 `@Priority` 注解来启用。有没有一个更简单的方法呢？是的，有的。你可以使用一种叫做 \"默认Bean \"的非标准特性。在这种情况下，一个可以被重写的bean应该被注解为 `@io.quarkus.arc.DefaultBean` 。就这样了。"

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:159
#, no-wrap
msgid ""
"@DefaultBean\n"
"class MyBean {\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:162
#, no-wrap
msgid ""
"class MyOwnBean extends MyBean {\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:165
#, no-wrap
msgid ""
"@Inject // MyOwnBean wins and is injected!\n"
"MyBean bean;\n"
msgstr ""

#. type: Title ===
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:167
#, fuzzy, no-wrap
msgid "Removing Unused Beans"
msgstr "移除未使用的豆子"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:173
#, fuzzy
msgid "GraalVM native image does a pretty good job when removing all classes that are not reachable from your application.  However, sometimes checking reachability is not enough.  Sometimes the framework itself must decide whether a component is needed or not.  In standard CDI, all beans are retained by the container no matter whether they're needed or not."
msgstr "GraalVM的本地图像在删除所有无法从你的应用程序中到达的类时做得相当好。然而，有时检查可及性是不够的。有时，框架本身必须决定是否需要一个组件。在标准的CDI中，无论是否需要，所有的Bean都被容器保留。"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:180
#, fuzzy
msgid "Let's suppose we have a bean class `org.acme.Foo`.  This bean class imports and uses a lot of various classes.  It's annotated with `@ApplicationScoped` and so Quarkus needs to generate a bean metadata class and a client proxy and register this metadata when the application starts.  But what if nobody ever uses this bean? We would still hold a reference on the generated metadata, and the bean class itself, and its dependencies.  In other words, all these classes would be reachable."
msgstr "让我们假设我们有一个bean类 `org.acme.Foo` 。这个Bean类导入并使用了很多不同的类。它被注解为 `@ApplicationScoped` ，因此Quarkus需要生成一个bean元数据类和一个客户端代理，并在应用程序启动时注册这些元数据。但是如果没有人使用这个Bean呢？我们仍然会在生成的元数据上持有一个引用，还有Bean类本身，以及它的依赖关系。换句话说，所有这些类都是可及的。"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:187
msgid "Quarkus attempts to remove all *unused beans* during build by default.  This helps to reduce the number of generated classes and also the amount of memory needed at runtime.  But how do we actually detect an unused bean? The rules are described in the https://quarkus.io/guides/cdi-reference#remove_unused_beans[reference guide] but simply said: if a bean is not injected anywhere and cannot be reached in any other standard way (e.g. observer notification) it is removed.  Moreover, users can instruct the container to not remove a bean by annotating the bean class with `@io.quarkus.arc.Unremovable`.  Finally, this optimization can be disabled and fine tuned by using the `quarkus.arc.remove-unused-beans` property."
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:188
msgid "This feature applies to the JVM mode as well."
msgstr ""
