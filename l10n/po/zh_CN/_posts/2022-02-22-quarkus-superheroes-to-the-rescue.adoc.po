# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy, no-wrap
msgid "Quarkus Superheroes to the Rescue!"
msgstr "夸库斯超级英雄来拯救!"

#. type: YAML Front Matter: synopsis
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy, no-wrap
msgid "Introduction to the Quarkus Superheroes sample application, discusses some of the requirements for building it, and illustrates how to run it locally or deploy it to Kubernetes."
msgstr "介绍Quarkus Superheroes示例应用程序，讨论构建它的一些要求，并说明如何在本地运行它或将它部署到Kubernetes。"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "Are you a developer building microservices? Do you struggle with developing and testing individual microservices that are part of a larger system? Do you want to learn about building REST-based and event-driven applications?"
msgstr "你是一个构建微服务的开发者吗？你是否为开发和测试作为大系统一部分的单个微服务而苦恼？你想了解如何构建基于REST和事件驱动的应用程序吗？"

#. type: Title ==
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, no-wrap
msgid "Introduction"
msgstr "简介"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "Quarkus has excellent https://quarkus.io/guides[documentation^] and https://github.com/quarkusio/quarkus-quickstarts[quickstarts^] to help developers become familiar with various features in the Quarkus ecosystem. However, what was missing was a fully-implemented sample set of real-world applications that use these features, patterns, and best practices while also reflecting problems Quarkus is trying to solve."
msgstr "Quarkus有很好的 link:https://quarkus.io/guides[文档, target=\"_blank\"] 和 link:https://github.com/quarkusio/quarkus-quickstarts[快速入门, target=\"_blank\"] ，帮助开发者熟悉Quarkus生态系统中的各种功能。然而，缺少的是一套完全实现的真实世界的应用样本，这些应用使用了这些功能、模式和最佳实践，同时也反映了Quarkus试图解决的问题。"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "This article introduces the https://github.com/quarkusio/quarkus-super-heroes[Quarkus Superheroes sample application^], discusses some of the requirements for building it, and illustrates how to run it locally or deploy it to https://kubernetes.io[Kubernetes^]. You can also watch the https://youtu.be/7M0Tvlx-GTA[Quarkus Insights episode^] where it was introduced."
msgstr "本文介绍了 link:https://github.com/quarkusio/quarkus-super-heroes[Quarkus Superheroes示例应用程序, target=\"_blank\"] ，讨论了构建它的一些要求，并说明了如何在本地运行它或将它部署到 link:https://kubernetes.io[Kubernetes, target=\"_blank\"] 。你也可以观看介绍 link:https://youtu.be/7M0Tvlx-GTA[Quarkus Insights的那一集, target=\"_blank\"] 。"

#. type: Title ===
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy, no-wrap
msgid "Requirements"
msgstr "要求"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "In addition to simply being fun, some other requirements were essential as well:"
msgstr "除了单纯的有趣之外，其他一些要求也是必不可少的。"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "The overall architecture should be a multi-service microservices architecture."
msgstr "整体架构应该是一个多服务的微服务架构。"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "It needs to be more than “hello world” but not the “kitchen sink,” picking a set of common capabilities, such as https://en.wikipedia.org/wiki/Representational_state_transfer[REST^], https://en.wikipedia.org/wiki/WebSocket[WebSockets^], database interaction, messaging, https://quarkus.io/guides/smallrye-health[health checks^], https://quarkus.io/guides/micrometer[monitoring/metrics^], https://quarkus.io/guides/kafka-schema-registry-avro[Apache Avro^], and https://quarkus.io/guides/openapi-swaggerui[OpenAPI^] integration."
msgstr "它需要比 \"hello world \"更多，但不是 \"厨房水槽\"，挑选一套通用能力，如 link:https://en.wikipedia.org/wiki/Representational_state_transfer[REST, target=\"_blank\"] 、 link:https://en.wikipedia.org/wiki/WebSocket[WebSockets, target=\"_blank\"] 、数据库交互、消息传递、 link:https://quarkus.io/guides/smallrye-health[健康检查, target=\"_blank\"] 、 link:https://quarkus.io/guides/micrometer[监控/指标, target=\"_blank\"] 、 link:https://quarkus.io/guides/kafka-schema-registry-avro[Apache Avro, target=\"_blank\"] 和 link:https://quarkus.io/guides/openapi-swaggerui[OpenAPI, target=\"_blank\"] 集成。"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "The applications should be kept up-to-date with each Quarkus version and be part of the https://github.com/quarkusio/quarkus-ecosystem-ci[standard Quarkus ecosystem continuous integration^] and shown on the https://status.quarkus.io[Quarkus status dashboard^]."
msgstr "这些应用程序应该与每个Quarkus版本保持同步，成为 link:https://github.com/quarkusio/quarkus-ecosystem-ci[标准Quarkus生态系统持续集成, target=\"_blank\"] 的一部分，并显示在 link:https://status.quarkus.io[Quarkus状态仪表板, target=\"_blank\"] 上。"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "There should be both blocking and reactive examples as much as possible."
msgstr "应该尽可能地有阻断和反应的例子。"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "The system as a whole should"
msgstr "整个系统应该"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "Be simple to build, run, deploy, and demo on a local developer machine or in Kubernetes."
msgstr "在本地开发者机器上或在Kubernetes中简单构建、运行、部署和演示。"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "Show how Quarkus can help facilitate local development of independent microservices."
msgstr "展示Quarkus如何帮助促进独立微服务的本地开发。"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "Be contained in a https://github.com/quarkusio/quarkus-super-heroes[single GitHub repository^] for simplicity, but *NOT* a multi-module project."
msgstr "为简单起见，应包含在一个 link:https://github.com/quarkusio/quarkus-super-heroes[GitHub, target=\"_blank\"] 仓库中，但 *不是* 一个多模块项目。"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "Each application within the system should"
msgstr "系统内的每个应用都应该"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "Provide https://quay.io/quarkus-super-heroes[container images^] for Java versions 11 and 17, both JVM and native."
msgstr "为Java 11和17版本提供 link:https://quay.io/quarkus-super-heroes[容器镜像, target=\"_blank\"] ，包括JVM和本地镜像。"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "Be fully documented."
msgstr "要有充分的文件记录。"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "Have fully automated (and documented) CI/CD practices."
msgstr "拥有完全自动化（并记录在案）的CI/CD实践。"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "Contain a complete test suite of unit and integration tests."
msgstr "包含一个完整的单元和集成测试的测试套件。"

#. type: Title ==
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy, no-wrap
msgid "Initial Release"
msgstr "首次发布"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "The initial version of the Quarkus Superheroes application was released in early February 2022. Several microservices co-exist to form a larger system, communicating synchronously via REST or event-driven via https://kafka.apache.org[Apache Kafka^]. Some of the applications are reactive, while others are more traditional, showcasing how to build each kind."
msgstr "Quarkus Superheroes应用程序的初始版本于2022年2月初发布。几个微服务共存，形成一个更大的系统，通过REST进行同步通信或通过 link:https://kafka.apache.org[Apache Kafka, target=\"_blank\"] 进行事件驱动。一些应用是反应式的，而另一些则比较传统，展示了如何构建每一种。"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "A web-based user interface, shown in Figure 1, allows superheroes to fight against supervillains. Previous fight outcomes are also shown on this page."
msgstr "一个基于网络的用户界面，如图1所示，允许超级英雄与超级恶棍作战。以前的战斗结果也显示在这个页面上。"

#. type: Block title
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy, no-wrap
msgid "Super Heroes User Interface"
msgstr "超级英雄的用户界面"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "An additional user interface, shown in Figure 2, displays previous fight statistics, including the percentage of wins for heroes vs. villains and the top 10 winners and the number of wins for each."
msgstr "一个额外的用户界面，如图2所示，显示了以前的战斗统计数据，包括英雄与反派的胜率，以及前10名获胜者和每个人的获胜次数。"

#. type: Block title
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy, no-wrap
msgid "Fight Statistics"
msgstr "战斗统计"

#. type: Title ==
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy, no-wrap
msgid "Under the Cape!"
msgstr "在海角下!"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "Figure 3 shows the overall architecture of the application."
msgstr "图3显示了应用程序的整体架构。"

#. type: Block title
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy, no-wrap
msgid "Overall Architecture"
msgstr "整体架构"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "There are four Quarkus applications, each of which will be described further below, an http://angular.io/[Angular^] application, and some backing services: https://prometheus.io[Prometheus^], https://www.postgresql.org[PostgreSQL^], https://kafka.apache.org[Apache Kafka^], and https://www.apicur.io/registry[Apicurio Schema Registry^]."
msgstr "有四个Quarkus应用程序，每个都将在下面进一步描述，一个 link:http://angular.io/[Angular, target=\"_blank\"] 应用程序，以及一些支持服务。 link:https://prometheus.io[Prometheus, target=\"_blank\"] 、 link:https://www.postgresql.org[PostgreSQL, target=\"_blank\"] 、 link:https://kafka.apache.org[Apache Kafka, target=\"_blank\"] 和 link:https://www.apicur.io/registry[Apicurio Schema Registry, target=\"_blank\"] 。"

#. type: Title ===
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy, no-wrap
msgid "Hero Service"
msgstr "英雄服务"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "The Hero service is a fully reactive and non-blocking HTTP microservice exposing CRUD operations on a `+Hero+` data model. The REST layer is implemented using https://quarkus.io/guides/resteasy-reactive[RESTEasy Reactive^] with reactive endpoints. Data is persisted into a https://www.postgresql.org[PostgreSQL^] database using the https://quarkus.io/guides/hibernate-reactive-panache#solution-2-using-the-repository-pattern[repository pattern^] from https://quarkus.io/guides/hibernate-reactive-panache[Quarkus Hibernate Reactive with Panache^]. Additionally, the Hero service favors https://quarkus.io/guides/cdi-reference#simplified-constructor-injection[constructor injection^] of beans over https://quarkus.io/guides/cdi-reference#qualified-injected-fields[field injection^]. The Hero service contains a full suite of unit and integration tests, using https://quarkus.io/guides/getting-started-testing#further-simplification-with-injectmock[mocking^], https://quarkus.io/guides/getting-started-testing#using-spies-instead-of-mocks-with-injectspy[spying^], and testing within https://quarkus.io/guides/hibernate-reactive-panache#transactions[isolated transactions^]."
msgstr "Hero服务是一个完全反应式和非阻塞式的HTTP微服务，在 `Hero` 数据模型上公开CRUD操作。REST层是使用 link:https://quarkus.io/guides/resteasy-reactive[RESTEasy Reactive, target=\"_blank\"] 与反应式端点实现的。数据通过使用 link:https://quarkus.io/guides/hibernate-reactive-panache[Quarkus Hibernate Reactive与Panache, target=\"_blank\"] 的存储库 link:https://quarkus.io/guides/hibernate-reactive-panache#solution-2-using-the-repository-pattern[模式, target=\"_blank\"] 被持久化到 link:https://www.postgresql.org[PostgreSQL, target=\"_blank\"] 数据库。此外，Hero服务更倾向于Bean的 link:https://quarkus.io/guides/cdi-reference#simplified-constructor-injection[构造器注入, target=\"_blank\"] ，而不是 link:https://quarkus.io/guides/cdi-reference#qualified-injected-fields[字段注入, target=\"_blank\"] 。Hero服务包含一套完整的单元和集成测试，使用 link:https://quarkus.io/guides/getting-started-testing#further-simplification-with-injectmock[嘲弄, target=\"_blank\"] 、 link:https://quarkus.io/guides/getting-started-testing#using-spies-instead-of-mocks-with-injectspy[窥探, target=\"_blank\"] 和在 link:https://quarkus.io/guides/hibernate-reactive-panache#transactions[隔离的事务, target=\"_blank\"] 中测试。"

#. type: delimited block =
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "To ensure fast startup times, only 100 random heroes from the https://github.com/quarkusio/quarkus-super-heroes/blob/characterdata/all-heroes.sql[3,458 total available heroes^] are loaded into the database. If you'd like to load more data, grab the https://github.com/quarkusio/quarkus-super-heroes/blob/characterdata/all-heroes.sql[`+all-heroes.sql+` from the `+characterdata+` branch in the repo^]. Copy the data into https://github.com/quarkusio/quarkus-super-heroes/blob/main/rest-heroes/src/main/resources/import.sql[`+rest-heroes/src/main/resources/import.sql+`^] as well as into https://github.com/quarkusio/quarkus-super-heroes/blob/main/rest-heroes/deploy/db-init/initialize-tables.sql[`+rest-heroes/deploy/db-init/initialize-tables.sql+`^]."
msgstr "为了确保快速启动，在 link:https://github.com/quarkusio/quarkus-super-heroes/blob/characterdata/all-heroes.sql[总共3458个可用的英雄, target=\"_blank\"] 中只有100个随机英雄被加载到数据库中。如果你想加载更多的数据，请 link:https://github.com/quarkusio/quarkus-super-heroes/blob/characterdata/all-heroes.sql[从repo中的 `characterdata` 分支, target=\"_blank\"] 抓取 link:https://github.com/quarkusio/quarkus-super-heroes/blob/characterdata/all-heroes.sql[`all-heroes.sql`, target=\"_blank\"] 。将这些数据复制到 link:https://github.com/quarkusio/quarkus-super-heroes/blob/main/rest-heroes/src/main/resources/import.sql[`rest-heroes/src/main/resources/import.sql`, target=\"_blank\"] 以及到 link:https://github.com/quarkusio/quarkus-super-heroes/blob/main/rest-heroes/deploy/db-init/initialize-tables.sql[`rest-heroes/deploy/db-init/initialize-tables.sql`, target=\"_blank\"] ."

#. type: Title ===
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy, no-wrap
msgid "Villain Service"
msgstr "小人服务"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "The Villain service is a blocking HTTP microservice exposing CRUD operations on a `+Villain+` data model. In fact, the `+Villain+` data model is identical to the `+Hero+` data model in the <<hero-service,Hero service>> (other than the table's name). It also implements all the same use cases as the Hero service. The only difference is that the Villain service is blocking, and it uses the https://quarkus.io/guides/hibernate-orm-panache#solution-1-using-the-active-record-pattern[active record pattern^] from https://quarkus.io/guides/hibernate-orm-panache[Quarkus Hibernate ORM with Panache^]."
msgstr "小人服务是一个阻塞的HTTP微服务，暴露了对 `Villain` 数据模型的CRUD操作。事实上， `Villain` 数据模型与 link:#hero-service[Hero服务] 中的 `Hero` 数据模型相同（除了表的名字）。它也实现了所有与Hero服务相同的用例。唯一不同的是，小人服务是阻塞的，它使用了 link:https://quarkus.io/guides/hibernate-orm-panache[Quarkus Hibernate ORM with Panache, target=\"_blank\"] 中的 link:https://quarkus.io/guides/hibernate-orm-panache#solution-1-using-the-active-record-pattern[活动记录模式, target=\"_blank\"] 。"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "The REST layer is implemented using https://quarkus.io/guides/resteasy-reactive[RESTEasy Reactive^] with blocking endpoints. Data is persisted into a https://www.postgresql.org[PostgreSQL^] database. The Villain service also creates some custom configurations which show how to use https://quarkus.io/guides/config-mappings[`+ConfigMapping+`^] objects. Additionally, the Villain service favors https://quarkus.io/guides/cdi-reference#qualified-injected-fields[field injection^] of beans over https://quarkus.io/guides/cdi-reference#simplified-constructor-injection[constructor injection^]. The Villain service contains a full suite of unit and integration tests, using https://quarkus.io/guides/getting-started-testing#further-simplification-with-injectmock[mocking^], https://quarkus.io/guides/getting-started-testing#using-spies-instead-of-mocks-with-injectspy[spying^], and testing within https://quarkus.io/guides/getting-started-testing#tests-and-transactions[isolated transactions^]."
msgstr "REST层是使用 link:https://quarkus.io/guides/resteasy-reactive[RESTEasy Reactive, target=\"_blank\"] 实现的，带有阻塞的端点。数据被持久化到一个 link:https://www.postgresql.org[PostgreSQL, target=\"_blank\"] 数据库中。Villain服务还创建了一些自定义配置，显示了如何使用 link:https://quarkus.io/guides/config-mappings[`ConfigMapping`, target=\"_blank\"] 对象。此外，Villain服务更倾向于豆的 link:https://quarkus.io/guides/cdi-reference#qualified-injected-fields[字段注入, target=\"_blank\"] ，而不是 link:https://quarkus.io/guides/cdi-reference#simplified-constructor-injection[构造函数注入, target=\"_blank\"] 。Villain服务包含一套完整的单元和集成测试，使用 link:https://quarkus.io/guides/getting-started-testing#further-simplification-with-injectmock[嘲弄, target=\"_blank\"] 、 link:https://quarkus.io/guides/getting-started-testing#using-spies-instead-of-mocks-with-injectspy[窥探, target=\"_blank\"] 和在 link:https://quarkus.io/guides/getting-started-testing#tests-and-transactions[隔离的事务, target=\"_blank\"] 中测试。"

#. type: delimited block =
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "To ensure fast startup times, only 100 random villains from the https://github.com/quarkusio/quarkus-super-heroes/blob/characterdata/all-villains.sql[1,797 total available villains^] are loaded into the database. If you'd like to load more data, grab the https://github.com/quarkusio/quarkus-super-heroes/blob/characterdata/all-villains.sql[`+all-villains.sql+` from the `+characterdata+` branch in the repo^]. Copy the data into https://github.com/quarkusio/quarkus-super-heroes/blob/main/rest-villains/src/main/resources/import.sql[`+rest-villains/src/main/resources/import.sql+`^] as well as into https://github.com/quarkusio/quarkus-super-heroes/blob/main/rest-villains/deploy/db-init/initialize-tables.sql[`+rest-villains/deploy/db-init/initialize-tables.sql+`^]."
msgstr "为了确保快速启动，在 link:https://github.com/quarkusio/quarkus-super-heroes/blob/characterdata/all-villains.sql[总共1797个可用的, target=\"_blank\"] 恶棍中，只有100个随机恶棍被载入数据库。如果你想加载更多的数据，请 link:https://github.com/quarkusio/quarkus-super-heroes/blob/characterdata/all-villains.sql[从repo中的 `characterdata` 分支, target=\"_blank\"] 抓取 link:https://github.com/quarkusio/quarkus-super-heroes/blob/characterdata/all-villains.sql[`all-villains.sql`, target=\"_blank\"] 。将数据复制到 link:https://github.com/quarkusio/quarkus-super-heroes/blob/main/rest-villains/src/main/resources/import.sql[`rest-villains/src/main/resources/import.sql`, target=\"_blank\"] 以及到 link:https://github.com/quarkusio/quarkus-super-heroes/blob/main/rest-villains/deploy/db-init/initialize-tables.sql[`rest-villains/deploy/db-init/initialize-tables.sql`, target=\"_blank\"] ."

#. type: Title ===
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy, no-wrap
msgid "Fight Service"
msgstr "战斗服务"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "The Fight service is a fully reactive and non-blocking HTTP microservice exposing a RESTful API for performing fights between heroes and villains. The REST layer is implemented using https://quarkus.io/guides/resteasy-reactive[RESTEasy Reactive^] with reactive endpoints. Fight data is persisted into a MongoDB database using the https://quarkus.io/guides/mongodb-panache#solution-1-using-the-active-record-pattern[active record pattern^] from https://quarkus.io/guides/mongodb-panache#reactive[Quarkus MongoDB Reactive with Panache^]. The Fight service also favors https://quarkus.io/guides/cdi-reference#simplified-constructor-injection[constructor injection^] of beans over https://quarkus.io/guides/cdi-reference#qualified-injected-fields[field injection^]."
msgstr "格斗服务是一个完全反应式和非阻塞的HTTP微服务，暴露了一个RESTful API，用于执行英雄和恶棍之间的格斗。REST层使用 link:https://quarkus.io/guides/resteasy-reactive[RESTEasy Reactive, target=\"_blank\"] 和反应式端点实现。格斗数据使用 link:https://quarkus.io/guides/mongodb-panache#reactive[Quarkus MongoDB Reactive with Panache, target=\"_blank\"] 的 link:https://quarkus.io/guides/mongodb-panache#solution-1-using-the-active-record-pattern[主动记录模式, target=\"_blank\"] 被持久化到MongoDB数据库。Fight服务也倾向于Bean的 link:https://quarkus.io/guides/cdi-reference#simplified-constructor-injection[构造器注入, target=\"_blank\"] 而不是 link:https://quarkus.io/guides/cdi-reference#qualified-injected-fields[字段注入, target=\"_blank\"] 。"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "The Fight service makes outgoing REST calls to both the Hero and Villain services. Calls to the Hero service use the https://quarkus.io/guides/rest-client-reactive[reactive rest client^] while calls to the Villain service use the https://quarkus.io/guides/resteasy-reactive#resteasy-reactive-client[RESTEasy Reactive client^], a https://download.eclipse.org/microprofile/microprofile-rest-client-3.0/microprofile-rest-client-spec-3.0.html[MicroProfile Rest Client^] implementation of the https://docs.oracle.com/javaee/7/tutorial/jaxrs-client001.htm[JAX-RS client API^] that is non-blocking at its core. All outgoing calls use https://quarkus.io/guides/smallrye-fault-tolerance[resilience patterns^] such as https://quarkus.io/guides/smallrye-fault-tolerance#adding-resiliency-retries[retry^], https://quarkus.io/guides/smallrye-fault-tolerance#adding-resiliency-timeouts[timeout^], https://quarkus.io/guides/smallrye-fault-tolerance#adding-resiliency-fallbacks[fallback^], and https://quarkus.io/guides/smallrye-fault-tolerance#adding-resiliency-circuit-breaker[circuit breaking^]."
msgstr "Fight服务对Hero和Villain服务进行外发REST调用。对Hero服务的调用使用 link:https://quarkus.io/guides/rest-client-reactive[反应式客户端, target=\"_blank\"] ，而对Villain服务的调用使用 link:https://quarkus.io/guides/resteasy-reactive#resteasy-reactive-client[RESTEasy反应式客户端, target=\"_blank\"] ，这是 link:https://docs.oracle.com/javaee/7/tutorial/jaxrs-client001.htm[JAX-RS客户端API, target=\"_blank\"] 的 link:https://download.eclipse.org/microprofile/microprofile-rest-client-3.0/microprofile-rest-client-spec-3.0.html[MicroProfile Rest, target=\"_blank\"] Client实现，其核心是非阻塞。所有发出的调用都使用 link:https://quarkus.io/guides/smallrye-fault-tolerance[弹性模式, target=\"_blank\"] ，如 link:https://quarkus.io/guides/smallrye-fault-tolerance#adding-resiliency-retries[重试, target=\"_blank\"] 、 link:https://quarkus.io/guides/smallrye-fault-tolerance#adding-resiliency-timeouts[超时, target=\"_blank\"] 、 link:https://quarkus.io/guides/smallrye-fault-tolerance#adding-resiliency-fallbacks[回退, target=\"_blank\"] 和 link:https://quarkus.io/guides/smallrye-fault-tolerance#adding-resiliency-circuit-breaker[断路, target=\"_blank\"] 。"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "Additionally, the Fight service https://quarkus.io/guides/kafka#integrating-with-kafka-common-patterns[emits^] fight events in https://avro.apache.org/docs/current[Apache Avro^] format to Kafka. The fight schema is automatically registered in an https://www.apicur.io/registry[Apicurio Schema Registry^] by the https://quarkus.io/guides/kafka-schema-registry-avro[Quarkus Apicurio Avro extension^]."
msgstr "此外，Fight服务以 link:https://avro.apache.org/docs/current[Apache Avro, target=\"_blank\"] 格式向Kafka link:https://quarkus.io/guides/kafka#integrating-with-kafka-common-patterns[发射, target=\"_blank\"] 战斗事件。格斗模式被 link:https://quarkus.io/guides/kafka-schema-registry-avro[Quarkus Apicurio Avro扩展, target=\"_blank\"] 自动注册到 link:https://www.apicur.io/registry[Apicurio模式注册处, target=\"_blank\"] 。"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "The Fight service contains a full suite of unit and integration tests, using https://quarkus.io/guides/getting-started-testing#further-simplification-with-injectmock[mocking^], https://quarkus.io/guides/getting-started-testing#using-spies-instead-of-mocks-with-injectspy[spying^], and testing within https://quarkus.io/guides/hibernate-reactive-panache#transactions[isolated transactions^]. It also makes heavy use of https://wiremock.org/[Wiremock^] for mocking downstream REST endpoints, an https://quarkus.io/guides/kafka#testing-without-a-broker[in-memory Kafka connector^] for performing message verification within unit tests. It also shows how to https://quarkus.io/guides/getting-started-testing#testing-dev-services[inject Dev Services information^] to configure test resources, such as a `+KafkaConsumer+`."
msgstr "Fight服务包含一套完整的单元和集成测试，使用 link:https://quarkus.io/guides/getting-started-testing#further-simplification-with-injectmock[嘲弄, target=\"_blank\"] 、 link:https://quarkus.io/guides/getting-started-testing#using-spies-instead-of-mocks-with-injectspy[窥探, target=\"_blank\"] 和 link:https://quarkus.io/guides/hibernate-reactive-panache#transactions[隔离事务, target=\"_blank\"] 中的测试。它还大量使用 link:https://wiremock.org/[Wiremock, target=\"_blank\"] 来嘲弄下游的REST端点，一个内存 link:https://quarkus.io/guides/kafka#testing-without-a-broker[中的Kafka连接器, target=\"_blank\"] 用于在单元测试中执行消息验证。它还展示了如何 link:https://quarkus.io/guides/getting-started-testing#testing-dev-services[注入Dev Services信息, target=\"_blank\"] 来配置测试资源，例如 `KafkaConsumer` 。"

#. type: Title ===
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy, no-wrap
msgid "Event Statistics Service"
msgstr "事件统计服务"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "The Event Statistics Service is an event-driven microservice exposing a https://en.wikipedia.org/wiki/WebSocket[WebSocket^] HTTP layer. It listens for fight events in https://avro.apache.org/docs/current[Apache Avro^] format on a Kafka topic utilizing https://quarkus.io/guides/kafka[SmallRye Reactive Messaging^]. The fight schema is automatically registered in an https://www.apicur.io/registry[Apicurio Schema Registry^] by the https://quarkus.io/guides/kafka-schema-registry-avro[Quarkus Apicurio Avro extension^]."
msgstr "事件统计服务是一个事件驱动的微服务，暴露了一个 link:https://en.wikipedia.org/wiki/WebSocket[WebSocket, target=\"_blank\"] HTTP层。它利用 link:https://quarkus.io/guides/kafka[SmallRye Reactive Messaging, target=\"_blank\"] 在Kafka主题上监听 link:https://avro.apache.org/docs/current[Apache Avro, target=\"_blank\"] 格式的战斗事件。战斗模式由 link:https://quarkus.io/guides/kafka-schema-registry-avro[Quarkus Apicurio Avro扩展, target=\"_blank\"] 自动注册在 link:https://quarkus.io/guides/kafka-schema-registry-avro[Apicurio, target=\"_blank\"] link:https://www.apicur.io/registry[模式注册处, target=\"_blank\"] 。"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "Statistic information is presented via a browser-based user interface, shown in Figure 2 above. Team statistics are accumulated as a percentage of wins by heroes vs. villains. Winner statistics are accumulated by the number of wins for each hero or villain, retaining the top 10 winners. The statistics are pushed to the UI over WebSockets."
msgstr "统计信息通过一个基于浏览器的用户界面呈现，如上图2所示。团队统计资料以英雄与反派的胜率来累积。胜利者的统计资料按每个英雄或反派的胜利次数累积，保留前10名胜利者。统计数据通过WebSockets被推送到用户界面。"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "The Event Statistics service contains a full suite of unit and integration tests using https://quarkus.io/guides/getting-started-testing#further-simplification-with-injectmock[mocking^] and https://quarkus.io/guides/getting-started-testing#using-spies-instead-of-mocks-with-injectspy[spying^]. It also shows how to https://quarkus.io/guides/getting-started-testing#testing-dev-services[inject Dev Services information^] to configure test resources, such as a `+KafkaProducer+`."
msgstr "事件统计服务包含了一整套使用 link:https://quarkus.io/guides/getting-started-testing#further-simplification-with-injectmock[嘲弄, target=\"_blank\"] 和 link:https://quarkus.io/guides/getting-started-testing#using-spies-instead-of-mocks-with-injectspy[窥探, target=\"_blank\"] 的单元和集成测试。它还展示了如何 link:https://quarkus.io/guides/getting-started-testing#testing-dev-services[注入Dev Services信息, target=\"_blank\"] 来配置测试资源，例如 `KafkaProducer` 。"

#. type: Title ===
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy, no-wrap
msgid "Super Hero UI"
msgstr "超级英雄用户界面"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "The Super Hero UI application, shown in Figure 1 above, is an http://angular.io/[Angular^] single-page application deployed via Node.js. It communicates to the Fight service via REST. The focus of the sample application is on the Quarkus applications and not the Angular UI."
msgstr "超级英雄UI应用程序，如上图1所示，是一个通过Node.js部署的 link:http://angular.io/[Angular, target=\"_blank\"] 单页应用程序。它通过REST与Fight服务进行通信。该示例应用程序的重点是Quarkus应用程序，而不是Angular UI。"

#. type: Title ==
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy, no-wrap
msgid "Run the Application Locally"
msgstr "在本地运行应用程序"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "There are a few ways to run the application locally depending on what your goals are. https://docs.docker.com/compose[Docker Compose^] can be used if you want to run the <<running-the-entire-application,entire application>>, or a <<running-a-subset-of-the-application,subset of it>>, using the https://quay.io/quarkus-super-heroes[pre-built container images^]. Alternatively, each application can be <<running-locally-via-quarkus-dev-mode,run from source>>."
msgstr "有几种方法可以在本地运行应用程序，这取决于你的目标是什么。如果你想使用 link:https://quay.io/quarkus-super-heroes[预先构建的容器镜像, target=\"_blank\"] 来运行 link:#running-the-entire-application[整个应用程序] ，或 link:#running-a-subset-of-the-application[其中的一个子集] ，就可以使用 link:https://docs.docker.com/compose[Docker Compose, target=\"_blank\"] 。另外，每个应用程序都可以 link:#running-locally-via-quarkus-dev-mode[从源头运行] 。"

#. type: Title ===
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy, no-wrap
msgid "Running Locally via Docker Compose"
msgstr "通过Docker Compose在本地运行"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "The entire application or a subset of it can be started with a single Docker Compose command."
msgstr "整个应用程序或其子集可以通过一个Docker Compose命令启动。"

#. type: Title ====
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy, no-wrap
msgid "Running the Entire Application"
msgstr "运行整个应用程序"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "The https://github.com/quarkusio/quarkus-super-heroes/tree/main/deploy/docker-compose[`+deploy/docker-compose+`^] directory in the https://github.com/quarkusio/quarkus-super-heroes[root of the respository^] contains compose files for each of the four versions of the application: JVM 11, JVM 17, native built with Java 11, and native built with Java 17. Additionally, https://prometheus.io[Prometheus^] monitoring can be started with the https://github.com/quarkusio/quarkus-super-heroes/blob/main/deploy/docker-compose/prometheus.yml[supplied `+prometheus.yml+` file^]."
msgstr "资源库根部的 link:https://github.com/quarkusio/quarkus-super-heroes/tree/main/deploy/docker-compose[`deploy/docker-compose`, target=\"_blank\"] 在 link:https://github.com/quarkusio/quarkus-super-heroes[资源库根部, target=\"_blank\"] 的目录包含了四个版本的应用程序的编译文件。JVM 11、JVM 17、用Java 11构建的本地程序，以及用Java 17构建的本地程序。此外， link:https://prometheus.io[Prometheus, target=\"_blank\"] 监控可以通过 link:https://github.com/quarkusio/quarkus-super-heroes/blob/main/deploy/docker-compose/prometheus.yml[提供的 `prometheus.yml` 文件, target=\"_blank\"] 启动。"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "From the +quarkus-super-heroes+ directory, simply run the https://github.com/quarkusio/quarkus-super-heroes#running-locally-via-docker-compose[command based on the version of the application you want to run^]. For example, to run the native Java 17 version, run `+docker-compose -f deploy/docker-compose/native-java17.yml -f deploy/docker-compose/prometheus.yml up+`."
msgstr "从quarkus-super-heroes目录，简单地运行 link:https://github.com/quarkusio/quarkus-super-heroes#running-locally-via-docker-compose[基于你想运行的应用程序的版本的命令, target=\"_blank\"] 。例如，要运行本地Java 17版本，运行 `docker-compose -f deploy/docker-compose/native-java17.yml -f deploy/docker-compose/prometheus.yml up` 。"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "The https://github.com/quarkusio/quarkus-super-heroes/tree/main/scripts[`+scripts+`^] directory contains a https://github.com/quarkusio/quarkus-super-heroes/blob/main/scripts/watch-services.sh[`+watch-services.sh+`^] script that can be run in a separate terminal. This script will watch the startup of all the services and report when they are all up and ready."
msgstr "该 link:https://github.com/quarkusio/quarkus-super-heroes/tree/main/scripts[`scripts`, target=\"_blank\"] 目录包含一个 link:https://github.com/quarkusio/quarkus-super-heroes/blob/main/scripts/watch-services.sh[`watch-services.sh`, target=\"_blank\"] 脚本，可以在一个单独的终端中运行。这个脚本将观察所有服务的启动情况，并在它们全部启动并准备好后报告。"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "You may see errors as the applications start up. This may happen if one service completes startup before one of its required services (i.e. a database, Kafka broker, etc). Once everything completes startup things will work as intended."
msgstr "你可能会在应用程序启动时看到错误。如果一个服务在其所需的服务（如数据库、Kafka代理等）之前完成启动，这可能会发生。一旦所有东西都完成了启动，事情就会按计划进行。"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "The following URLs will be available once everything is ready:"
msgstr "一旦一切准备就绪，将提供以下网址。"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "Super Heroes UI: http://localhost:8080[http://localhost:8080^]"
msgstr "超级英雄用户界面: link:http://localhost:8080[http://localhost:8080, target=\"_blank\"]"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "Event statistics UI: http://localhost:8085[http://localhost:8085^]"
msgstr "事件统计用户界面 link:http://localhost:8085[：http://localhost:8085, target=\"_blank\"]"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "Apicurio Schema Registry: http://localhost:8086[http://localhost:8086^]"
msgstr "Apicurio Schema Registry: link:http://localhost:8086[http://localhost:8086, target=\"_blank\"]"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "Prometheus: http://localhost:9090[http://localhost:9090^]"
msgstr "普罗米修斯: link:http://localhost:9090[http://localhost:9090, target=\"_blank\"]"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "Fight service: http://localhost:8082[http://localhost:8082^]"
msgstr "战斗服务: link:http://localhost:8082[http://localhost:8082, target=\"_blank\"]"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "Hero service: http://localhost:8083[http://localhost:8083^]"
msgstr "英雄服务 link:http://localhost:8083[：http://localhost:8083, target=\"_blank\"]"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "Villain service: http://localhost:8084[http://localhost:8084^]"
msgstr "小人服务 link:http://localhost:8084[：http://localhost:8084, target=\"_blank\"]"

#. type: Title ====
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy, no-wrap
msgid "Running a Subset of the Application"
msgstr "运行应用程序的一个子集"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "Each individual service can also be run via Docker Compose."
msgstr "每个单独的服务也可以通过Docker Compose运行。"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "Inside each service’s subdirectory in the repository is a `+deploy/docker-compose+` directory containing the compose files for the four versions of the application. Multiple compose files can be combined into a single command."
msgstr "在资源库中每个服务的子目录内都有一个 `deploy/docker-compose` ，其中包含四个版本的应用程序的编译文件。多个编译文件可以合并成一个命令。"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "This is useful if you wanted to, for example, work on the Fight service in https://quarkus.io/guides/maven-tooling#dev-mode[Quarkus Dev Mode^] and need to have the Hero and Villain services available. From the `+quarkus-super-heroes+` directory, simply run the https://github.com/quarkusio/quarkus-super-heroes/tree/main/rest-fights#only-downstream-dependencies[command based on the version of the application you want to run^]. For example, to run the native Java 17 version, run `+docker-compose -f rest-heroes/deploy/docker-compose/native-java17.yml -f rest-villains/deploy/docker-compose/native-java17.yml up+`."
msgstr "如果你想，例如，在 link:https://quarkus.io/guides/maven-tooling#dev-mode[Quarkus开发模式, target=\"_blank\"] 中研究Fight服务，并且需要有Hero和Villain服务，这很有用。从 `quarkus-super-heroes` 目录中，简单地运行 link:https://github.com/quarkusio/quarkus-super-heroes/tree/main/rest-fights#only-downstream-dependencies[基于你想运行的应用程序的版本的命令, target=\"_blank\"] 。例如，要运行本地Java 17版本，运行 `docker-compose -f rest-heroes/deploy/docker-compose/native-java17.yml -f rest-villains/deploy/docker-compose/native-java17.yml up` 。"

#. type: Title ===
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy, no-wrap
msgid "Running Locally via Quarkus Dev Mode"
msgstr "通过Quarkus开发模式在本地运行"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "Each of the services can also be run via https://quarkus.io/guides/maven-tooling#dev-mode[Quarkus Dev Mode^] simultaneously. For each Quarkus service (`+event-statistics+`, `+rest-fights+`, `+rest-heroes+`, `+rest-villains+`) open a terminal, `+cd+` into the project directory, and run `+./mvnw quarkus:dev+`."
msgstr "每个服务也可以通过 link:https://quarkus.io/guides/maven-tooling#dev-mode[Quarkus开发模式, target=\"_blank\"] 同时运行。对于每个Quarkus服务 ( `event-statistics` , `rest-fights` , `rest-heroes` , `rest-villains` ) 打开终端， `cd` 进入项目目录，并运行 `./mvnw quarkus:dev` 。"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "The Super Heroes UI can be https://github.com/quarkusio/quarkus-super-heroes/tree/main/ui-super-heroes#building-the-application[built and run from source^], but since the focus of this article is Quarkus, we will run it as a container image. Open a new terminal and run `+docker run -p 8080:8080 -e API_BASE_URL=http://localhost:8082 quay.io/quarkus-super-heroes/ui-super-heroes:latest+`."
msgstr "超级英雄用户界面可以 link:https://github.com/quarkusio/quarkus-super-heroes/tree/main/ui-super-heroes#building-the-application[从源代码构建和运行, target=\"_blank\"] ，但由于本文的重点是Quarkus，我们将把它作为一个容器镜像来运行。打开一个新的终端，运行 `docker run -p 8080:8080 -e API_BASE_URL=http://localhost:8082 quay.io/quarkus-super-heroes/ui-super-heroes:latest` 。"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "Now you have all the benefits of https://quarkus.io/guides/maven-tooling#dev-mode[Quarkus Dev Mode^] and https://quarkus.io/guides/continuous-testing[Quarkus Continuous Testing^] across the entire application at once! All backing infrastructure (databases, Kafka, Apicurio) is provisioned for you automatically by https://quarkus.io/guides/dev-services[Quarkus Dev Services^]."
msgstr "现在，你可以在整个应用程序中一次性获得 link:https://quarkus.io/guides/maven-tooling#dev-mode[Quarkus Dev模式, target=\"_blank\"] 和 link:https://quarkus.io/guides/continuous-testing[Quarkus持续测试, target=\"_blank\"] 的所有好处所有支持的基础设施（数据库、Kafka、Apicurio）都由 link:https://quarkus.io/guides/dev-services[Quarkus Dev Services, target=\"_blank\"] 自动为你提供。"

#. type: Title ==
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy, no-wrap
msgid "Deploy the Application to Kubernetes"
msgstr "将应用程序部署到Kubernetes上"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "Kubernetes descriptors are provided for various flavors of Kubernetes: https://www.openshift.com[OpenShift^], https://quarkus.io/guides/deploying-to-kubernetes#deploying-to-minikube[Minikube^], https://knative.dev[KNative^], and “vanilla” https://www.kubernetes.io[Kubernetes^]."
msgstr "Kubernetes描述符是为各种类型的Kubernetes提供的。 link:https://www.openshift.com[OpenShift, target=\"_blank\"] 、 link:https://quarkus.io/guides/deploying-to-kubernetes#deploying-to-minikube[Minikube, target=\"_blank\"] 、 link:https://knative.dev[KNative, target=\"_blank\"] 和 \"vanilla \" link:https://www.kubernetes.io[Kubernetes, target=\"_blank\"] 。"

#. type: delimited block =
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "The only real difference between the Minikube and Kubernetes descriptors is that all the application ``Service``s in the Minikube descriptors use `+type: NodePort+` so that a list of all the applications can be obtained simply by running `+minikube service list+`."
msgstr " `minikube service list` Minikube和Kubernetes描述符之间唯一真正的区别是，Minikube描述符中的所有应用程序 `Service` ，因此可以通过运行 `type: NodePort` ，获得所有应用程序的列表。"

#. type: delimited block =
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "The KNative descriptors use https://knative.dev/docs/serving[KNative Serving^] for each of the five applications."
msgstr "KNative描述符对五个应用中的每一个都使用了 link:https://knative.dev/docs/serving[KNative Serving, target=\"_blank\"] 。"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "Similar to Docker Compose, the https://quay.io/quarkus-super-heroes[pre-built container images^] of the entire application, or a subset of it, can be deployed to Kubernetes with a single `+kubectl apply -f+` (or `+oc apply -f+` if using OpenShift)."
msgstr "与Docker Compose类似，整个应用程序或其子集的 link:https://quay.io/quarkus-super-heroes[预建容器镜像, target=\"_blank\"] 可以通过一个 `kubectl apply -f` （如果使用OpenShift，则 `oc apply -f` ）部署到Kubernetes。"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "The https://github.com/quarkusio/quarkus-super-heroes/tree/main/deploy/k8s[`+deploy/k8s+`^] directory in the https://github.com/quarkusio/quarkus-super-heroes[root of the respository^] contains Kubernetes descriptors for each of the four versions of the application: JVM 11, JVM 17, native built with Java 11, and native built with Java 17."
msgstr "仓库根部的 link:https://github.com/quarkusio/quarkus-super-heroes/tree/main/deploy/k8s[`deploy/k8s`, target=\"_blank\"] link:https://github.com/quarkusio/quarkus-super-heroes[资源库根部, target=\"_blank\"] 的目录包含四个版本的应用程序的Kubernetes描述符。JVM 11、JVM 17、用Java 11构建的本地程序，以及用Java 17构建的本地程序。"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "For example, to deploy the native Java 17 version to OpenShift, simply run `+kubectl apply -f deploy/k8s/native-java17-openshift.yml+` (or `+oc apply -f deploy/k8s/native-java17-openshift.yml+`)."
msgstr "例如，要将原生Java 17版本部署到OpenShift，只需运行 `kubectl apply -f deploy/k8s/native-java17-openshift.yml` （或 `oc apply -f deploy/k8s/native-java17-openshift.yml` ）。"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "To deploy Prometheus monitoring in addition to the application, `+kubectl apply -f+` (or `+oc apply -f+` if using OpenShift) the appropriate Prometheus Kubernetes descriptor based on the target Kubernetes environment: https://github.com/quarkusio/quarkus-super-heroes/blob/main/deploy/k8s/prometheus-openshift.yml[`+prometheus-openshift.yml+`^], https://github.com/quarkusio/quarkus-super-heroes/blob/main/deploy/k8s/prometheus-minikube.yml[`+prometheus-minikube.yml+`^], or https://github.com/quarkusio/quarkus-super-heroes/blob/main/deploy/k8s/prometheus-kubernetes.yml[`+prometheus-kubernetes.yml+`^]."
msgstr "要在应用程序之外部署Prometheus监控，请根据目标Kubernetes环境， `kubectl apply -f` （如果使用OpenShift，则 `oc apply -f` ）相应的Prometheus Kubernetes描述符。 link:https://github.com/quarkusio/quarkus-super-heroes/blob/main/deploy/k8s/prometheus-openshift.yml[`prometheus-openshift.yml`, target=\"_blank\"] , link:https://github.com/quarkusio/quarkus-super-heroes/blob/main/deploy/k8s/prometheus-minikube.yml[`prometheus-minikube.yml`, target=\"_blank\"] ，或 link:https://github.com/quarkusio/quarkus-super-heroes/blob/main/deploy/k8s/prometheus-kubernetes.yml[`prometheus-kubernetes.yml`, target=\"_blank\"] ."

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "On Minikube or Kubernetes only the Super Heroes UI and the Fights service is exposed outside the cluster. If you want to access Prometheus or the Event Statistics service then you will need to expose it, either by using an `+Ingress+` or doing a `+kubectl port-forward+` of the Pod. On OpenShift, all of the applications have ``Route``s which expose them outside the cluster."
msgstr "在Minikube或Kubernetes上，只有超级英雄用户界面和战斗服务在集群外暴露。如果你想访问Prometheus或事件统计服务，那么你将需要通过使用 `Ingress` ，或对Pod进行 `kubectl port-forward` 。在OpenShift上，所有的应用程序都有 `Route` ，将它们暴露在集群之外。"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "Additionally, individual applications can be deployed in a similar manner. Inside each service’s subdirectory in the repository is a `+deploy/k8s+` directory containing a similar matrix of Kubernetes descriptors."
msgstr "此外，单个应用程序也可以用类似的方式进行部署。在资源库中每个服务的子目录内有一个 `deploy/k8s` ，其中包含一个类似的Kubernetes描述符矩阵。"

#. type: delimited block =
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "These descriptors are *NOT* considered to be production-ready. They are basic enough to deploy and run the system with as little configuration as possible. The databases, Kafka broker, and schema registry deployed are not highly-available and do not use any Kubernetes operators for management or monitoring. They also only use ephemeral storage."
msgstr "这些描述符 *不* 被认为是可用于生产的。它们是基本的，足以在尽可能少的配置下部署和运行系统。所部署的数据库、Kafka代理和模式注册表都不是高可用的，也没有使用任何Kubernetes操作者进行管理或监控。它们也只使用短暂的存储。"

#. type: delimited block =
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "For production-ready Kafka brokers, please see the https://strimzi.io/[Strimzi documentation^] for how to properly deploy and configure production-ready Kafka brokers on Kubernetes. You can also try out a https://developers.redhat.com/products/red-hat-openshift-streams-for-apache-kafka/getting-started[fully hosted and managed Kafka service^]!"
msgstr "对于生产就绪的Kafka经纪人，请参见 link:https://strimzi.io/[Strimzi文档, target=\"_blank\"] ，了解如何在Kubernetes上正确部署和配置生产就绪的Kafka经纪人。你也可以尝试一下 link:https://developers.redhat.com/products/red-hat-openshift-streams-for-apache-kafka/getting-started[完全托管和管理的Kafka服务, target=\"_blank\"] !"

#. type: delimited block =
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "For a production-ready Apicurio Schema Registry, please see the https://www.apicur.io/registry/docs/apicurio-registry-operator/1.0.0/index.html[Apicurio Registry Operator documentation^]. You can also try out a https://console.redhat.com/application-services/service-registry[fully hosted and managed Schema Registry service^]!"
msgstr "关于生产就绪的Apicurio Schema Registry，请参见 link:https://www.apicur.io/registry/docs/apicurio-registry-operator/1.0.0/index.html[Apicurio Registry Operator文档, target=\"_blank\"] 。你也可以尝试一下 link:https://console.redhat.com/application-services/service-registry[完全托管和管理的模式注册处服务, target=\"_blank\"] !"

#. type: delimited block =
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "For production-ready Prometheus instances, please see the https://operatorhub.io/operator/prometheus[Prometheus Operator documentation^] for how to properly deploy and configure production-ready instances."
msgstr "对于生产就绪的普罗米修斯实例，请参见 link:https://operatorhub.io/operator/prometheus[普罗米修斯操作员文档, target=\"_blank\"] ，了解如何正确部署和配置生产就绪的实例。"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "The possibilities are endless once deployed to Kubernetes! Reusing the same example above (developing the Fight service), you could use https://quarkus.io/guides/maven-tooling#remote-development-mode[Quarkus Remote Development Mode^] to connect the remote instance to your local machine and get an experience similar to https://quarkus.io/guides/maven-tooling#dev-mode[Quarkus Dev Mode^]. No need to do any port forwarding!"
msgstr "一旦部署到Kubernetes，可能性是无穷无尽的!重复上面的例子（开发Fight服务），你可以使用 link:https://quarkus.io/guides/maven-tooling#remote-development-mode[Quarkus远程开发模式, target=\"_blank\"] 来连接远程实例到你的本地机器，获得类似 link:https://quarkus.io/guides/maven-tooling#dev-mode[Quarkus开发模式, target=\"_blank\"] 的体验。不需要做任何端口转发!"

#. type: Title ==
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy, no-wrap
msgid "Want to Get Involved?"
msgstr "想参与其中吗？"

#. type: Plain text
#: _posts/2022-02-22-quarkus-superheroes-to-the-rescue.adoc
#, fuzzy
msgid "We’re always looking for involvement from the community! There is always a list of https://github.com/quarkusio/quarkus-super-heroes/issues?q=is%3Aopen+is%3Aissue+label%3Aenhancement[enhancements^] and https://github.com/quarkusio/quarkus-super-heroes/issues?q=is%3Aopen+is%3Aissue+label%3Abug[bugs^] to pick from if you’re interested in getting involved."
msgstr "我们一直在寻求社区的参与！如果您有兴趣参与其中，我们总有一系列 link:https://github.com/quarkusio/quarkus-super-heroes/issues?q=is%3Aopen+is%3Aissue+label%3Aenhancement[改进] 和 link:https://github.com/quarkusio/quarkus-super-heroes/issues?q=is%3Aopen+is%3Aissue+label%3Abug[错误] 供您选择。"
