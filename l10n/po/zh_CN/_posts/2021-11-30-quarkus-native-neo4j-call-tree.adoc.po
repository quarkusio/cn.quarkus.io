# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-06-26 15:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy, no-wrap
msgid "Inspecting the Quarkus Native call path universe with Neo4j"
msgstr "用Neo4j检查Quarkus Native调用路径宇宙"

#. type: YAML Front Matter: synopsis
#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy, no-wrap
msgid "Inspect the call paths that get included into a Quarkus Native app with Neo4j"
msgstr "用Neo4j检查包含在Quarkus Native应用中的调用路径"

#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid ""
"This blog post is the culmination of an idea that Sanne (Grinovero) floated to me during some lunch,\n"
"back at a time when we, remote engineers, would occasionally meet face to face and have the opportunity to share ideas spontaneously.\n"
"I'm unsure if the lunch was in Neuchâtel or Barcelona,\n"
"but essentially Sanne was diagnosing an issue and he struggled with GraalVM's native image analysis call tree text output.\n"
"He wondered whether that data could instead be formatted differently and imported into a graph database for easier inspection.\n"
"I'm happy to announce that the GraalVM and Mandrel 21.3.0 releases include improvements to address this particular issue."
msgstr "这篇博文是 Sanne (Grinovero) 在一次午餐会上向我提出的一个想法的结晶，当时我们这些远程工程师偶尔会面对面交流，并有机会自发地分享想法。我不确定这次午餐是在纳沙泰尔还是在巴塞罗那，但基本上 Sanne 是在诊断一个问题，他对 GraalVM 的本地图像分析调用树文本输出感到很棘手。他想知道这些数据是否可以采用不同的格式，并导入图形数据库以方便检查。我很高兴地宣布，GraalVM 和 Mandrel 21.3.0 版本包含了解决这一特殊问题的改进。"

#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid ""
"Essentially, they bring much needed improvements for analysing code paths that get included in the native binary.\n"
"Debugging these code paths aims to answer questions such as:"
msgstr "从本质上讲，它们为分析包含在本地二进制文件中的代码路径带来了亟需的改进。调试这些代码路径旨在回答以下问题："

#. type: Plain text
#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid "why does this code path get included in the native binary?"
msgstr "为什么这个代码路径被包含在本地二进制文件中？"

#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid ""
"These code paths can be optionally reported when enabling printing of the analysis call tree.\n"
"With Quarkus, this is achieved by passing in the `-Dquarkus.native.enable-reports` option."
msgstr "在启用打印分析调用树时，可以选择报告这些代码路径。在 Quarkus 中，可以通过 `-Dquarkus.native.enable-reports` 选项来实现。"

#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid ""
"Before 21.3.0, when Quarkus instructed a GraalVM distribution to print out the call tree,\n"
"the resulting output would be a single text file representing the call tree in a https://www.graalvm.org/reference-manual/native-image/Reports[custom tree format].\n"
"This text file would contain a lot of duplicated information and could be as big as several gigabytes in size."
msgstr "在 21.3.0 之前，当 Quarkus 命令 GraalVM 发行版打印出调用树时，输出结果将是一个以 link:https://www.graalvm.org/reference-manual/native-image/Reports[自定义树格式] 表示调用树的单一文本文件。该文本文件包含大量重复信息，大小可能高达数千兆字节。"

#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid ""
"GraalVM 21.3.0 introduces the possibility of representing call trees as CSV files instead of a single text file.\n"
"These CSV files contain method information and different connections between them\n"
"(e.g. direct calls, virtual calls, overrides, etc).\n"
"One immediate benefit is that there's no information duplication,\n"
"so the CSV files can be several times smaller in size compared to the corresponding text file.\n"
"In some situations, they can be as much as several thousands times smaller.\n"
"However, the main reason why this feature was implemented was\n"
"to make it easier to feed the call tree to other tools, like graph databases such as\n"
"https://neo4j.com/[Neo4j].\n"
"Once imported, a user can execute graph queries over the call tree,\n"
"which makes it easier to extract relevant information and answer questions like the one above."
msgstr "GraalVM 21.3.0 引入了将调用树表示为 CSV 文件而非单一文本文件的可能性。这些 CSV 文件包含方法信息和它们之间的不同连接（如直接调用、虚拟调用、覆盖等）。这样做的一个直接好处是没有信息重复，因此 CSV 文件的大小比相应的文本文件小几倍。在某些情况下，CSV 文件的大小甚至可以缩小几千倍。不过，实现这一功能的主要原因是为了更方便地将调用树馈送给其他工具，如 link:https://neo4j.com/[Neo4j] 等图数据库。一旦导入，用户就可以对调用树执行图查询，从而更容易提取相关信息并回答类似上述的问题。"

#. type: Plain text
#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid "In this blog post, you will learn how to:"
msgstr "在这篇博文中，你将学习如何。"

#. type: Plain text
#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid "Instruct a Quarkus application to generate call tree CSV files."
msgstr "指导Quarkus应用程序生成呼叫树CSV文件。"

#. type: Plain text
#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid "Run a Neo4j graph database within a container"
msgstr "在容器中运行Neo4j图形数据库"

#. type: Plain text
#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid "Import those CSV files into a Neo4j graph database."
msgstr "将这些CSV文件导入Neo4j图形数据库。"

#. type: Plain text
#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid "Run Neo4j cypher queries against the graph database to understand the call paths in the Quarkus application."
msgstr "针对图数据库运行Neo4j cypher查询，以了解Quarkus应用程序中的调用路径。"

#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid ""
"This blog post uses the\n"
"https://github.com/quarkusio/quarkus-quickstarts/tree/main/hibernate-orm-quickstart[Quarkus Hibernate ORM quickstart]\n"
"as a sample Quarkus application.\n"
"Download the application and execute:"
msgstr "本博文使用 link:https://github.com/quarkusio/quarkus-quickstarts/tree/main/hibernate-orm-quickstart[Quarkus Hibernate ORM 快速入门] 作为 Quarkus 应用程序示例。下载应用程序并执行："

#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid ""
"./mvnw package -DskipTests -Pnative \\\n"
"    -Dquarkus.native.container-build=true \\\n"
"    -Dquarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-mandrel:21.3-java11 \\\n"
"    -Dquarkus.native.enable-reports"
msgstr ""
"/mvnw package -DskipTests -Pnative （本地\n"
"-Dquarkus.native.container-build=true \\\n"
"-Dquarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-mandrel:21.3-java11 \\\n"
"-Dquarkus.native.enable-reports"

#. type: Plain text
#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid "The above command will generate a native binary and the CSV files mentioned above."
msgstr "上述命令将生成一个本地二进制文件和上述的CSV文件。"

#. type: Plain text
#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid "Next, start Neo4j in a container:"
msgstr "接下来，在一个容器中启动Neo4j。"

#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid ""
"$ export NEO_PASS=...\n"
"$ podman run \\\n"
"    --detach \\\n"
"    --rm \\\n"
"    --name testneo4j \\\n"
"    -p7474:7474 -p7687:7687 \\\n"
"    --env NEO4J_AUTH=neo4j/${NEO_PASS} \\\n"
"    neo4j:latest"
msgstr "$ export NEO_PASS=... $ podman run\\ --detach \\ --rm \\ --name testneo4j \\ -p7474:7474 -p7687:7687 \\ --env NEO4J_AUTH=neo4j/${NEO_PASS}\\ neo4j:latest"

#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid ""
"Once the container is running,\n"
"you can access the Neo4j browser via http://localhost:7474[http://localhost:7474].\n"
"Use `neo4j` as the username and the value of `NEO_PASS` as the password to log in."
msgstr "容器运行后，可通过 http://localhost:7474 访问 Neo4j 浏览器。使用 `neo4j` 作为用户名，使用 `NEO_PASS` 的值作为密码登录。"

#. type: Plain text
#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid "To import the CSV files, we need the following cypher script which will import the data within the CSV files and create graph database nodes and edges:"
msgstr "为了导入CSV文件，我们需要以下Cypher脚本，它将导入CSV文件内的数据，并创建图数据库的节点和边。"

#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid ""
"You can download the cypher script from\n"
"link:/assets/examples/posts/quarkus-native-neo4j-call-tree/import.cypher[this link]\n"
"or copy and paste it in a file called `import.cypher`."
msgstr "您可以从 link:/assets/examples/posts/quarkus-native-neo4j-call-tree/import.cypher[该链接] 下载加密脚本，或将其复制并粘贴到名为 `import.cypher` 的文件中。"

#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid ""
"The script above is generic enough to work with any Quarkus application,\n"
"but it will only work with Mandrel 21.3.0.Final.\n"
"GraalVM CE 21.3.0.Final lacks the symbolic links to make the `csv` file references work,\n"
"so if you're on this GraalVM CE, you'll have to modify the CSV file names with project specific, timestamped, file names."
msgstr "上面的脚本足够通用，可以在任何 Quarkus 应用程序中使用，但只能在 Mandrel 21.3.0.Final 中使用。GraalVM CE 21.3.0.Final 缺乏使 `csv` 文件引用生效的符号链接，因此如果您使用的是此 GraalVM CE，则必须用特定项目的时间戳文件名来修改 CSV 文件名。"

#. type: Plain text
#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid "Next, copy the import cypher script and CSV files into Neo4j's import folder:"
msgstr "接下来，将导入的cypher脚本和CSV文件复制到Neo4j的导入文件夹。"

#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid ""
"$ podman cp target/*-native-image-source-jar/reports testneo4j:/var/lib/neo4j/import\n"
"$ podman cp import.cypher testneo4j:/var/lib/neo4j"
msgstr "$ podman cp target/*-native-image-source-jar/reports testneo4j:/var/lib/neo4j/import $ podman cp import.cypher testneo4j:/var/lib/neo4j"

#. type: Plain text
#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid "After copying all the files, invoke the import script:"
msgstr "拷贝完所有文件后，调用导入脚本。"

#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid "$ podman exec testneo4j bin/cypher-shell -u neo4j -p ${NEO_PASS} -f import.cypher"
msgstr "$ podman exec testneo4j bin/cypher-shell -u neo4j -p ${NEO_PASS}-导入.cypher"

#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid ""
"If you need to reimport the data,\n"
"you'll need to clear the previously imported data,\n"
"otherwise you'll get errors.\n"
"You can clear the previously imported data by executing:"
msgstr "如果需要重新导入数据，则需要清除之前导入的数据，否则会出错。您可以执行以下操作清除之前导入的数据："

#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid ""
"$ podman exec testneo4j bin/cypher-shell -u neo4j -p ${NEO_PASS} \"MATCH(n) DETACH DELETE n\"\n"
"$ podman exec testneo4j bin/cypher-shell -u neo4j -p ${NEO_PASS} \"DROP CONSTRAINT unique_vm_id\"\n"
"$ podman exec testneo4j bin/cypher-shell -u neo4j -p ${NEO_PASS} \"DROP CONSTRAINT unique_method_id\""
msgstr "$ podman exec testneo4j bin/cypher-shell -u neo4j -p ${NEO_PASS}\"MATCH(n) DETACH DELETE n\" $ podman exec testneo4j bin/cypher-shell -u neo4j -p ${NEO_PASS}\"DROP CONSTRAINT unique_vm_id\" $ podman exec testneo4j bin/cypher-shell -u neo4j -p ${NEO_PASS}\"DROP CONSTRAINT unique_method_id"

#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid ""
"Once the import completes (shouldn't take more than a couple of minutes),\n"
"go to the Neo4j browser and you'll be able to observe a small summary of the data in the graph:"
msgstr "导入完成后（应该不会超过几分钟），访问 Neo4j 浏览器，就能在图表中看到数据的小结："

#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid ""
"The data above shows that there are ~100000 methods,\n"
"and just over ~300000 edges between them."
msgstr "上述数据显示，有 ~100000 种方法，它们之间的边超过 ~300000 条。"

#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid ""
"Next, let's try out some cypher queries to explore the call graph.\n"
"I don't know anything about the Quarkus application itself,\n"
"but given it's a Hibernate ORM application,\n"
"I can assume that some sort of `persist` method will be called.\n"
"Go into the browser and type a query for this:"
msgstr "接下来，让我们试着使用一些加密查询来探索调用图。我对 Quarkus 应用程序本身一无所知，但鉴于它是一个 Hibernate ORM 应用程序，我可以假定会调用 `persist` 方法。进入浏览器并为此键入一个查询："

#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid ""
"We got some hits,\n"
"but the default style for the nodes presented is not very readable.\n"
"We can however tweak the stylesheet as shown by\n"
"https://neo4j.com/developer/neo4j-browser/#browser-styling-adv[this guide].\n"
"Two useful modifications for this use case is to increase the default `node` `diameter` value to say, `150px`.\n"
"The other modification is to switch `node.Method` `caption` value to `\"{display}\"`."
msgstr "我们获得了一些点击率，但所显示节点的默认样式不太好读。不过，我们可以根据 link:https://neo4j.com/developer/neo4j-browser/#browser-styling-adv[本指南] 对样式表进行调整。对于本使用案例，有两个有用的修改，一个是将 `node` `diameter` 的默认值增加到 `150px` 。另一项修改是将 `node.Method` `caption` 的值改为 `\"{display}\"` 。"

#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid ""
"`display` is a field within each method that shows a shortened id of the method,\n"
"that includes package and classname (only the first letter of each),\n"
"and the method name in camel case with single letters.\n"
"E.g. `j.p.EM.persist` would be the `display` for the `persist` method in `javax.persistence.EntityManager`."
msgstr "`display` 是每个方法中的一个字段，显示该方法的缩写 id，包括包和类名（只显示每个包和类名的第一个字母），以及用单个字母表示的驼峰形方法名。例如， 就是 中 方法的 。 `j.p.EM.persist` `javax.persistence.EntityManager` `persist` `display`"

#. type: Plain text
#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid "Let's repeat the query after modifying the browser style and moving the nodes to clearly view them:"
msgstr "让我们在修改浏览器样式和移动节点以清楚地查看它们之后重复查询。"

#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid ""
"We can see above that one of the `persist` is to `javax.persistence.EntityManager`.\n"
"This is the JPA method for persisting entities and the one we'll be exploring further.\n"
"Let's narrow the query down to that one to have a clearer view:"
msgstr "我们可以看到，上面的 `persist` 之一是 `javax.persistence.EntityManager` 。这是用于持久化实体的 JPA 方法，也是我们要进一步探讨的方法。让我们把查询范围缩小到这一个，以便更清楚地了解情况："

#. type: Plain text
#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid "Note that if we hover over the node we get information about the method itself."
msgstr "请注意，如果我们将鼠标悬停在节点上，就会得到关于方法本身的信息。"

#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid ""
"Going back to the original question,\n"
"we wanted to find out why a given code path gets included.\n"
"One way to do it is to start by the method itself,\n"
"and then walk backwards to find what links\n"
"(e.g. direct calls, virtual calls, overrides...etc)\n"
"exist to that method within a certain depth.\n"
"For example, let's try to find what other methods have a direct link to the `persist` method:"
msgstr "回到最初的问题，我们想找出特定代码路径被包含的原因。一种方法是从方法本身入手，然后逆向寻找在一定深度内与该方法存在的链接（如直接调用、虚拟调用、重写......等）。例如，让我们试着找出与 `persist` 方法有直接链接的其他方法："

#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid ""
"Aha, so there's only one path and that's a virtual call (i.e., an interface call) that comes from the `create` method in the `org.acme.hibernate.orm.FruitResource` class,\n"
"which takes a `org.acme.hibernate.orm.Fruit` parameter and returns a `javax.ws.rs.core.Response`."
msgstr "啊哈，原来只有一条路径，那就是来自 `org.acme.hibernate.orm.FruitResource` 类中 `create` 方法的虚拟调用（即接口调用），该方法接收一个 `org.acme.hibernate.orm.Fruit` 参数并返回一个 `javax.ws.rs.core.Response` 。"

#. type: Plain text
#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid "Next, let's expand the query further and try to find all links with a depth of 2 to the `persist` method:"
msgstr "接下来，让我们进一步扩大查询范围，尝试找到所有深度为2的链接， `persist` 。"

#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid ""
"As we peel further back,\n"
"we start to see some generated classes that invoke the `create` method in `org.acme.hibernate.orm.FruitResource`.\n"
"`org.acme.hibernate.orm.FruitResource_ClientProxy` and `org.acme.hibernate.orm.FruitResource_Subclass` both directly call the method.\n"
"One more interesting call comes from the `FruitResource_create_d0...` method in `com.oracle.svm.core.reflect.ReflectionAccessorHolder`.\n"
"This essentially means that the `create` method has been registered in GraalVM for access via reflection."
msgstr "再往后，我们开始看到一些生成的类调用 `org.acme.hibernate.orm.FruitResource` 中的 `create` 方法。 `org.acme.hibernate.orm.FruitResource_ClientProxy` 和 `org.acme.hibernate.orm.FruitResource_Subclass` 都直接调用了该方法。还有一个有趣的调用来自 `com.oracle.svm.core.reflect.ReflectionAccessorHolder` 中的 `FruitResource_create_d0…​` 方法。这基本上意味着 `create` 方法已在 GraalVM 中注册，可以通过反射访问。"

#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid ""
"If we query for a depth of 3, we'll find that the reflection access is an entry point.\n"
"So, we've found the shortest path to the `persist` method,\n"
"but that's not necessarily the only path:"
msgstr "如果我们查询深度为 3，就会发现反射访问是一个入口点。因此，我们找到了通往 `persist` 方法的最短路径，但这并不一定是唯一的路径："

#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid ""
"You can continue going up layers,\n"
"but unfortunately if you reach a depth with too many nodes,\n"
"the Neo4j browser will be unable to visualize them all.\n"
"When that happens, you can alternatively run the queries directly against the cypher shell. E.g."
msgstr "你可以继续往上分层，但不幸的是，如果到达节点过多的深度，Neo4j 浏览器将无法将它们全部可视化。如果出现这种情况，你也可以直接在 cypher shell 中运行查询。例如"

#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid ""
"$ podman exec testneo4j bin/cypher-shell -u neo4j -p ${NEO_PASS} \\\n"
"    \"match (m:Method) <- [*1..10] - (o) where m.name = 'persist' and m.type =~ '.*EntityManager' return *\""
msgstr "$ podman exec testneo4j bin/cypher-shell -u neo4j -p ${NEO_PASS}\\ 匹配 (m:Method) ← [*1..10] - (o) where m.name = 'persistent' and m.type =~ '.*EntityManager' return *\""

#. type: Plain text
#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid "After you are done with the exploration don't forget to shut down (`kill`) the `testneo4j` container:"
msgstr "完成探索后，别忘了关闭 `testneo4j` 容器 ( `kill` )："

#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid "$ podman kill testneo4j"
msgstr "$ podman kill testneo4j"

#. type: Plain text
#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid "Note that this will also remove the container (since we used `--rm` when we created it)."
msgstr "请注意，这也将移除容器（因为我们在创建容器时使用了 `--rm` ）。"

#: _posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc
#, fuzzy
msgid ""
"We've only just started exploring the possibilities of Neo4j for this use case,\n"
"and so we still have to learn all the tips and tricks to make the most out of it.\n"
"As we learn more we'll share any tips or query templates with the community."
msgstr "我们才刚刚开始探索 Neo4j 在这种使用情况下的可能性，因此我们还需要学习所有的技巧和窍门，以便充分利用它。当我们学到更多知识时，我们将与社区分享任何提示或查询模板。"
