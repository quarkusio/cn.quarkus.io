# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:1
#, fuzzy, no-wrap
msgid "galderz"
msgstr "galderz"

#. type: YAML Front Matter: date
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:1
#, fuzzy, no-wrap
msgid "2021-11-30"
msgstr "2021-11-30"

#. type: YAML Front Matter: layout
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "职位"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:1
#, fuzzy, no-wrap
msgid "Inspect the call paths that get included into a Quarkus Native app with Neo4j"
msgstr "用Neo4j检查包含在Quarkus Native应用中的调用路径"

#. type: YAML Front Matter: tags
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:1
#, fuzzy, no-wrap
msgid "development-tips native neo4j"
msgstr "开发-提示 本地neo4j"

#. type: YAML Front Matter: title
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:1
#, fuzzy, no-wrap
msgid "Inspecting the Quarkus Native call path universe with Neo4j"
msgstr "用Neo4j检查Quarkus Native调用路径宇宙"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:17
#, fuzzy
msgid "This blog post is the culmination of an idea that Sanne (Grinovero) floated to me during some lunch, back at a time when we, remote engineers, would occasionally meet face to face and have the opportunity to share ideas spontaneously.  I'm unsure if the lunch was in Neuchâtel or Barcelona, but essentially Sanne was diagnosing an issue and he struggled with GraalVM's native image analysis call tree text output.  He wondered whether that data could instead be formatted differently and imported into a graph database for easier inspection.  I'm happy to announce that the GraalVM and Mandrel 21.3.0 releases include improvements to address this particular issue."
msgstr "这篇博文是Sanne（Grinovero）在某次午餐中向我提出的一个想法的结晶，那时我们这些远程工程师偶尔会面对面交流，有机会自发地分享想法。我不确定那次午餐是在纳沙泰尔还是在巴塞罗那，但基本上Sanne是在诊断一个问题，他对GraalVM的原生图像分析调用树文本输出感到纠结。他想知道这些数据是否可以改成不同的格式，并导入一个图形数据库，以便于检查。我很高兴地宣布，GraalVM和Mandrel 21.3.0版本包括了解决这个特殊问题的改进。"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:20
#, fuzzy
msgid "Essentially, they bring much needed improvements for analysing code paths that get included in the native binary.  Debugging these code paths aims to answer questions such as:"
msgstr "基本上，它们为分析包含在本地二进制文件中的代码路径带来了亟需的改进。调试这些代码路径的目的是回答以下问题。"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:23
#, fuzzy
msgid "why does this code path get included in the native binary?"
msgstr "为什么这个代码路径被包含在本地二进制文件中？"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:26
#, fuzzy
msgid "These code paths can be optionally reported when enabling printing of the analysis call tree.  With Quarkus, this is achieved by passing in the `-Dquarkus.native.enable-reports` option."
msgstr "这些代码路径可以在启用打印分析调用树时被选择性地报告。在Quarkus中，这可以通过传递 `-Dquarkus.native.enable-reports` 选项来实现。"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:30
#, fuzzy
msgid "Before 21.3.0, when Quarkus instructed a GraalVM distribution to print out the call tree, the resulting output would be a single text file representing the call tree in a https://www.graalvm.org/reference-manual/native-image/Reports[custom tree format].  This text file would contain a lot of duplicated information and could be as big as several gigabytes in size."
msgstr "在21.3.0之前，当Quarkus指示GraalVM发行版打印出调用树时，输出的结果将是一个单一的文本文件，以 link:https://www.graalvm.org/reference-manual/native-image/Reports[自定义的树形格式] 表示调用树。这个文本文件包含很多重复的信息，大小可能达到几千兆字节。"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:42
#, fuzzy
msgid "GraalVM 21.3.0 introduces the possibility of representing call trees as CSV files instead of a single text file.  These CSV files contain method information and different connections between them (e.g. direct calls, virtual calls, overrides, etc).  One immediate benefit is that there's no information duplication, so the CSV files can be several times smaller in size compared to the corresponding text file.  In some situations, they can be as much as several thousands times smaller.  However, the main reason why this feature was implemented was to make it easier to feed the call tree to other tools, like graph databases such as https://neo4j.com/[Neo4j].  Once imported, a user can execute graph queries over the call tree, which makes it easier to extract relevant information and answer questions like the one above."
msgstr "GraalVM 21.3.0引入了将调用树表示为CSV文件而不是单一文本文件的可能性。这些CSV文件包含方法信息和它们之间的不同连接（例如直接调用、虚拟调用、重写等）。一个直接的好处是没有信息重复，所以CSV文件的大小与相应的文本文件相比可以小几倍。在某些情况下，它们可以小到几千倍之多。然而，实现这一功能的主要原因是为了使调用树更容易输入其他工具，如 link:https://neo4j.com/[Neo4j] 等图形数据库。一旦导入，用户可以在调用树上执行图形查询，这使得提取相关信息和回答上述问题更加容易。"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:44
#, fuzzy
msgid "In this blog post, you will learn how to:"
msgstr "在这篇博文中，你将学习如何。"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:46
#, fuzzy
msgid "Instruct a Quarkus application to generate call tree CSV files."
msgstr "指导Quarkus应用程序生成呼叫树CSV文件。"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:47
#, fuzzy
msgid "Run a Neo4j graph database within a container"
msgstr "在容器中运行Neo4j图形数据库"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:48
#, fuzzy
msgid "Import those CSV files into a Neo4j graph database."
msgstr "将这些CSV文件导入Neo4j图形数据库。"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:49
#, fuzzy
msgid "Run Neo4j cypher queries against the graph database to understand the call paths in the Quarkus application."
msgstr "针对图数据库运行Neo4j cypher查询，以了解Quarkus应用程序中的调用路径。"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:54
#, fuzzy
msgid "This blog post uses the https://github.com/quarkusio/quarkus-quickstarts/tree/main/hibernate-orm-quickstart[Quarkus Hibernate ORM quickstart] as a sample Quarkus application.  Download the application and execute:"
msgstr "这篇博文使用 link:https://github.com/quarkusio/quarkus-quickstarts/tree/main/hibernate-orm-quickstart[Quarkus Hibernate ORM quickstart] 作为Quarkus应用程序的样本。下载该应用程序并执行。"

#. type: delimited block -
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:60
#, no-wrap
msgid ""
"./mvnw package -DskipTests -Pnative \\\n"
"    -Dquarkus.native.container-build=true \\\n"
"    -Dquarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-mandrel:21.3-java11 \\\n"
"    -Dquarkus.native.enable-reports\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:63
#, fuzzy
msgid "The above command will generate a native binary and the CSV files mentioned above."
msgstr "上述命令将生成一个本地二进制文件和上述的CSV文件。"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:65
#, fuzzy
msgid "Next, start Neo4j in a container:"
msgstr "接下来，在一个容器中启动Neo4j。"

#. type: delimited block -
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:75
#, no-wrap
msgid ""
"$ export NEO_PASS=...\n"
"$ podman run \\\n"
"    --detach \\\n"
"    --rm \\\n"
"    --name testneo4j \\\n"
"    -p7474:7474 -p7687:7687 \\\n"
"    --env NEO4J_AUTH=neo4j/${NEO_PASS} \\\n"
"    neo4j:latest\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:80
#, fuzzy
msgid "Once the container is running, you can access the Neo4j browser via http://localhost:7474[http://localhost:7474].  Use `neo4j` as the username and the value of `NEO_PASS` as the password to log in."
msgstr "容器运行后，你可以通过 link:http://localhost:7474[http://localhost:7474] ，访问Neo4j浏览器 link:http://localhost:7474[。] 使用 `neo4j` 作为用户名，使用 `NEO_PASS` 的值作为密码来登录。"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:82
#, fuzzy
msgid "To import the CSV files, we need the following cypher script which will import the data within the CSV files and create graph database nodes and edges:"
msgstr "为了导入CSV文件，我们需要以下Cypher脚本，它将导入CSV文件内的数据，并创建图数据库的节点和边。"

#. type: delimited block -
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:86
#, no-wrap
msgid "include::../assets/examples/posts/quarkus-native-neo4j-call-tree/import.cypher[]\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:91
#, fuzzy
msgid "You can download the cypher script from link:../assets/examples/posts/quarkus-native-neo4j-call-tree/import.cypher[this link] or copy and paste it in a file called `import.cypher`."
msgstr "你可以从 link:../assets/examples/posts/quarkus-native-neo4j-call-tree/import.cypher[这个链接] 中下载cypher脚本，或者将其复制并粘贴到一个名为 `import.cypher` 的文件中。"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:96
#, fuzzy
msgid "The script above is generic enough to work with any Quarkus application, but it will only work with Mandrel 21.3.0.Final.  GraalVM CE 21.3.0.Final lacks the symbolic links to make the `csv` file references work, so if you're on this GraalVM CE, you'll have to modify the CSV file names with project specific, timestamped, file names."
msgstr "上面的脚本是通用的，可以适用于任何Quarkus应用程序，但它只适用于Mandrel 21.3.0.Final。GraalVM CE 21.3.0.Final缺乏符号链接来使 `csv` ，所以如果你在这个GralVM CE上，你必须用项目特定的、有时间戳的文件名来修改CSV文件名。"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:98
#, fuzzy
msgid "Next, copy the import cypher script and CSV files into Neo4j's import folder:"
msgstr "接下来，将导入的cypher脚本和CSV文件复制到Neo4j的导入文件夹。"

#. type: delimited block -
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:102
#, no-wrap
msgid ""
"$ podman cp target/*-native-image-source-jar/reports testneo4j:/var/lib/neo4j/import\n"
"$ podman cp import.cypher testneo4j:/var/lib/neo4j\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:105
#, fuzzy
msgid "After copying all the files, invoke the import script:"
msgstr "拷贝完所有文件后，调用导入脚本。"

#. type: delimited block -
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:108
#, no-wrap
msgid "$ podman exec testneo4j bin/cypher-shell -u neo4j -p ${NEO_PASS} -f import.cypher\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:114
#, fuzzy
msgid "If you need to reimport the data, you'll need to clear the previously imported data, otherwise you'll get errors.  You can clear the previously imported data by executing:"
msgstr "如果你需要重新导入数据，你需要清除之前导入的数据，否则你会得到错误。你可以通过执行以下操作来清除以前导入的数据。"

#. type: delimited block -
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:118
#, no-wrap
msgid ""
"$ podman exec testneo4j bin/cypher-shell -u neo4j -p ${NEO_PASS} \"MATCH(n) DETACH DELETE n\"\n"
"$ podman exec testneo4j bin/cypher-shell -u neo4j -p ${NEO_PASS} \"DROP CONSTRAINT unique_vm_id\"\n"
"$ podman exec testneo4j bin/cypher-shell -u neo4j -p ${NEO_PASS} \"DROP CONSTRAINT unique_method_id\"\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:122
#, fuzzy
msgid "Once the import completes (shouldn't take more than a couple of minutes), go to the Neo4j browser and you'll be able to observe a small summary of the data in the graph:"
msgstr "一旦导入完成（应该不会超过几分钟），进入Neo4j浏览器，你就可以观察到图表中的数据小结。"

#. type: Target for macro image
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:123
#, no-wrap
msgid "data-loaded-side.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:127
#, fuzzy
msgid "The data above shows that there are ~100000 methods, and just over ~300000 edges between them."
msgstr "上面的数据显示，有~100000种方法，而它们之间的边刚刚超过~300000条。"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:133
#, fuzzy
msgid "Next, let's try out some cypher queries to explore the call graph.  I don't know anything about the Quarkus application itself, but given it's a Hibernate ORM application, I can assume that some sort of `persist` method will be called.  Go into the browser and type a query for this:"
msgstr "接下来，让我们尝试一些加密查询来探索调用图。我对Quarkus应用程序本身一无所知，但鉴于它是一个Hibernate ORM应用程序，我可以假设会调用某种 `persist` 方法。进入浏览器，为其输入一个查询。"

#. type: delimited block -
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:137
#, no-wrap
msgid "match (m:Method) where m.name = \"persist\" return *\n"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:139
#, no-wrap
msgid "persist-query.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:147
#, fuzzy
msgid "We got some hits, but the default style for the nodes presented is not very readable.  We can however tweak the stylesheet as shown by https://neo4j.com/developer/neo4j-browser/#browser-styling-adv[this guide].  Two useful modifications for this use case is to increase the default `node` `diameter` value to say, `150px`.  The other modification is to switch `node.Method` `caption` value to `\"{display}\"`."
msgstr "我们得到了一些点击率，但所呈现的节点的默认样式不是很可读。然而，我们可以按照 link:https://neo4j.com/developer/neo4j-browser/#browser-styling-adv[本指南] 所示，对样式表进行调整。对于这个用例，两个有用的修改是将默认的 `node` `diameter` 的值增加到例如 `150px` 。另一个修改是将 `node.Method` `caption` 的值改为 `\"{display}\"` 。"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:152
#, fuzzy
msgid "`display` is a field within each method that shows a shortened id of the method, that includes package and classname (only the first letter of each), and the method name in camel case with single letters.  E.g. `j.p.EM.persist` would be the `display` for the `persist` method in `javax.persistence.EntityManager`."
msgstr " `display` 是每个方法中的一个字段，它显示了该方法的缩写ID，其中包括包和类名（只包括每个包的第一个字母），以及用单字母表示的方法名称。例如， 将是 中 方法的 。 `j.p.EM.persist` `javax.persistence.EntityManager` `persist` `display` "

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:154
#, fuzzy
msgid "Let's repeat the query after modifying the browser style and moving the nodes to clearly view them:"
msgstr "让我们在修改浏览器样式和移动节点以清楚地查看它们之后重复查询。"

#. type: Target for macro image
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:155
#, no-wrap
msgid "persist-query-big-nodes.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:160
#, fuzzy
msgid "We can see above that one of the `persist` is to `javax.persistence.EntityManager`.  This is the JPA method for persisting entities and the one we'll be exploring further.  Let's narrow the query down to that one to have a clearer view:"
msgstr "我们可以看到，上面的 `persist` ，其中一个是 `javax.persistence.EntityManager` 。这是JPA持久化实体的方法，也是我们要进一步探讨的方法。让我们把查询的范围缩小到这一个，以便有一个更清晰的视野。"

#. type: delimited block -
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:164
#, no-wrap
msgid "match (m:Method) where m.name = \"persist\" and m.type =~ \".*EntityManager\" return *\n"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:166
#, no-wrap
msgid "entitymanager-persist-query.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:169
#, fuzzy
msgid "Note that if we hover over the node we get information about the method itself."
msgstr "请注意，如果我们将鼠标悬停在节点上，就会得到关于方法本身的信息。"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:177
#, fuzzy
msgid "Going back to the original question, we wanted to find out why a given code path gets included.  One way to do it is to start by the method itself, and then walk backwards to find what links (e.g. direct calls, virtual calls, overrides...etc)  exist to that method within a certain depth.  For example, let's try to find what other methods have a direct link to the `persist` method:"
msgstr "回到最初的问题，我们想知道为什么一个给定的代码路径被包括在内。一种方法是，从方法本身开始，然后向后走，找到在一定深度内与该方法存在的链接（例如直接调用、虚拟调用、重写......等）。例如，让我们试着找到还有哪些方法与 `persist` 方法有直接联系。"

#. type: delimited block -
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:181
#, no-wrap
msgid "match (m:Method) <- [*1..1] - (o) where m.name = \"persist\" and m.type =~ \".*EntityManager\" return *\n"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:183
#, no-wrap
msgid "entitymanager-persist-depth-1-query.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:187
#, fuzzy
msgid "Aha, so there's only one path and that's a virtual call (i.e., an interface call) that comes from the `create` method in the `org.acme.hibernate.orm.FruitResource` class, which takes a `org.acme.hibernate.orm.Fruit` parameter and returns a `javax.ws.rs.core.Response`."
msgstr "啊哈，所以只有一条路径，那就是虚拟调用（即接口调用），它来自 `org.acme.hibernate.orm.FruitResource` 类中的 `create` 方法，该方法接受一个 `org.acme.hibernate.orm.Fruit` 参数并返回一个 `javax.ws.rs.core.Response` 。"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:189
#, fuzzy
msgid "Next, let's expand the query further and try to find all links with a depth of 2 to the `persist` method:"
msgstr "接下来，让我们进一步扩大查询范围，尝试找到所有深度为2的链接， `persist` 。"

#. type: delimited block -
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:193
#, no-wrap
msgid "match (m:Method) <- [*1..2] - (o) where m.name = \"persist\" and m.type =~ \".*EntityManager\" return *\n"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:195
#, no-wrap
msgid "entitymanager-persist-depth-2-query.png"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:197
#, no-wrap
msgid "subclass.png"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:199
#, no-wrap
msgid "reflection-access-holder.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:206
#, fuzzy
msgid "As we peel further back, we start to see some generated classes that invoke the `create` method in `org.acme.hibernate.orm.FruitResource`.  `org.acme.hibernate.orm.FruitResource_ClientProxy` and `org.acme.hibernate.orm.FruitResource_Subclass` both directly call the method.  One more interesting call comes from the `FruitResource_create_d0...` method in `com.oracle.svm.core.reflect.ReflectionAccessorHolder`.  This essentially means that the `create` method has been registered in GraalVM for access via reflection."
msgstr "当我们再往后看时，我们开始看到一些生成的类在 `org.acme.hibernate.orm.FruitResource` 中调用了 `create` 方法。 `org.acme.hibernate.orm.FruitResource_ClientProxy` 和 `org.acme.hibernate.orm.FruitResource_Subclass` 都直接调用了这个方法。还有一个有趣的调用来自于 `com.oracle.svm.core.reflect.ReflectionAccessorHolder` 中的 `FruitResource_create_d0…​` 方法。这基本上意味着 `create` 方法已经在GraalVM中注册了，可以通过反射访问。"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:210
#, fuzzy
msgid "If we query for a depth of 3, we'll find that the reflection access is an entry point.  So, we've found the shortest path to the `persist` method, but that's not necessarily the only path:"
msgstr "如果我们查询的深度是3，我们会发现反射访问是一个入口点。所以，我们已经找到了通往 `persist` 方法的最短路径，但这不一定是唯一的路径。"

#. type: Target for macro image
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:211
#, no-wrap
msgid "entitymanager-persist-depth-3-query.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:217
msgid "You can continue going up layers, but unfortunately if you reach a depth with too many nodes, the Neo4j browser will be unable to visualize them all.  When that happens, you can alternatively run the queries directly against the cypher shell. E.g."
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:221
#, no-wrap
msgid ""
"$ podman exec testneo4j bin/cypher-shell -u neo4j -p ${NEO_PASS} \\\n"
"    \"match (m:Method) <- [*1..10] - (o) where m.name = 'persist' and m.type =~ '.*EntityManager' return *\"\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:224
msgid "After you are done with the exploration don't forget to shut down (`kill`) the `testneo4j` container:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:226
#, no-wrap
msgid "$ podman kill testneo4j\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:228
msgid "Note that this will also remove the container (since we used `--rm` when we created it)."
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:231
msgid "We've only just started exploring the possibilities of Neo4j for this use case, and so we still have to learn all the tips and tricks to make the most out of it.  As we learn more we'll share any tips or query templates with the community."
msgstr ""
