# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy, no-wrap
msgid "Getting Started with Apache Kafka in your Quarkus application"
msgstr "在你的Quarkus应用程序中开始使用Apache Kafka"

#. type: YAML Front Matter: synopsis
#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy, no-wrap
msgid "How to build a Quarkus application using Apache Kafka in less than 10 minutes"
msgstr "如何在10分钟内使用Apache Kafka构建一个Quarkus应用程序"

#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy
msgid ""
"https://kafka.apache.org/[Apache] Kafka is a prevalent distributed streaming platform offering a unique set of characteristics such as message retention, replay capabilities, consumer groups, and so on.\n"
"Kafka is highly scalable, fault-tolerant, and is becoming the spine of many modern systems.\n"
"That being said, Kafka is not the only one out there, and choosing the right messaging technology for your application can be challenging.\n"
"There are many articles to help you drive your decision, such as https://medium.com/@graemecolman/mind-your-amqps-or-kafka-or-interconnect-what-is-in-the-red-hat-messaging-box-9ed5aa590e92[this one].\n"
"This post is about Kafka, and an equivalent post about AMQP will be published later."
msgstr "link:https://kafka.apache.org/[Apache] Kafka 是一种流行的分布式流平台，具有一系列独特的特性，如消息保留、重播功能、消费者群组等。Kafka 具有高度可扩展性和容错性，正在成为许多现代系统的支柱。尽管如此，Kafka 并不是唯一的消息传递技术，为应用程序选择合适的消息传递技术可能具有挑战性。有很多文章可以帮助你做出决定，比如 link:https://medium.com/@graemecolman/mind-your-amqps-or-kafka-or-interconnect-what-is-in-the-red-hat-messaging-box-9ed5aa590e92[这篇] 文章。这篇文章是关于 Kafka 的，稍后将发表一篇关于 AMQP 的相应文章。"

#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy
msgid ""
"In this post, you will learn how to get started with Apache Kafka in your Quarkus application in less than 10 steps.\n"
"We will use https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.7/index.html[Reactive Messaging] - a declarative approach to build event-driven microservices, but you can also use _bare_ Kafka APIs or Kafka Streams."
msgstr "在这篇文章中，你将学习如何在不到 10 个步骤的时间内，在 Quarkus 应用程序中开始使用 Apache Kafka。我们将使用 link:https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.7/index.html[反应式消息传递] （ link:https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.7/index.html[Reactive Messaging] ）--一种声明式方法来构建事件驱动的微服务，但你也可以使用 _裸_ Kafka API 或 Kafka Streams。"

#. type: Plain text
#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy
msgid "The complete code is available from https://github.com/cescoffier/getting-started-quarkus-kafka[GitHub]."
msgstr "完整的代码可从 link:https://github.com/cescoffier/getting-started-quarkus-kafka[GitHub] 获得。"

#. type: Title ==
#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy, no-wrap
msgid "Step 1 - Generate your project"
msgstr "第1步 - 生成你的项目"

#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy
msgid ""
"Let's start with the very beginning, getting a new project structure with the right dependencies.\n"
"Go to https://code.quarkus.io, enter your group id and artifact id.\n"
"Then in the extension list, select:"
msgstr "让我们从头开始，用正确的依赖关系创建一个新的项目结构。进入 link:https://code.quarkus.io[https://code.quarkus.io，] 输入组 ID 和工件 ID。然后在扩展列表中选择"

#. type: Plain text
#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy
msgid "SmallRye Reactive Messaging - Kafka Connector"
msgstr "SmallRye Reactive Messaging - Kafka连接器"

#. type: Plain text
#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy
msgid "RESTEasy Jackson"
msgstr "RESTEasy Jackson"

#. type: Plain text
#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy
msgid "image:/assets/images/posts/getting-started-kafka/getting-started-kafka-code.png[]"
msgstr "image:/assets/images/posts/getting-started-kafka/getting-started-kafka-code.png[alt=\"getting started kafka code\"]"

#. type: Plain text
#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy
msgid "You can disable the \"Example Code\" to avoid the generated project to contain examples."
msgstr "你可以禁用 \"实例代码\"，以避免生成的项目包含实例。"

#. type: Plain text
#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy
msgid "Then, click on __Generate your application__, download the project as a zip file, unzip it, and load it in your favorite IDE."
msgstr "然后，点击 \" _生成你的应用程序_ \"，将项目下载为zip文件，解压缩，并将其加载到你最喜欢的IDE。"

#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy
msgid ""
"If you opened the generated `pom.xml`, you would see that the `quarkus-smallrye-reactive-messaging-kafka`  and `quarkus-resteasy-jackson`\n"
"dependencies are declared, so we're ready to write some code."
msgstr "如果打开生成的 `pom.xml` ，就会看到 `quarkus-smallrye-reactive-messaging-kafka` 和 `quarkus-resteasy-jackson` 的依赖关系已声明，因此我们可以编写一些代码了。"

#. type: Title ==
#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy, no-wrap
msgid "Step 2 - What are we going to exchange?"
msgstr "第2步 - 我们要交换什么？"

#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy
msgid ""
"We need something to exchange.\n"
"Without much originality, let's say we will send and receive `Movie` objects.\n"
"In your project, create the `org.acme.Movie` class with the following content:"
msgstr "我们需要一些东西来交换。没有太多新意，就说我们要发送和接收 `Movie` 对象。在项目中创建 `org.acme.Movie` 类，内容如下："

#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy
msgid ""
"In Kafka, we produce and consume records.\n"
"A record contains a key and a value.\n"
"Let's say we will use the movie's publication year as key and the title as value."
msgstr "在 Kafka 中，我们生产和消费记录。一条记录包含一个键和一个值。比方说，我们将电影的出版年份作为键，标题作为值。"

#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy
msgid ""
"We also need to decide on which topic we are going to send these records.\n"
"Let's keep things simple and name our topic __movies__."
msgstr "我们还需要决定将这些记录发送到哪个主题。简单起见，我们将主题命名为 \" _电影_ \"。"

#. type: Title ==
#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy, no-wrap
msgid "Step 3 - Configure the application"
msgstr "第3步 - 配置应用程序"

#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy
msgid ""
"As said above, we will use Reactive Messaging.\n"
"When you use Reactive Messaging, you send messages to a channel and receive them from another channel.\n"
"These channels are mapped to the underlying messaging technology by configuration.\n"
"In our application, we must indicate that our reception and publication channels will use the __movies__ Kafka channel.\n"
"In `src/main/resources/application.properties`, add the following content:"
msgstr "如上所述，我们将使用反应式消息传递。使用反应式消息传递时，我们会向一个通道发送消息，并从另一个通道接收消息。这些通道通过配置映射到底层消息传递技术。在我们的应用程序中，我们必须指出我们的接收和发布通道将使用 _电影_ Kafka 通道。在 `src/main/resources/application.properties` 中，添加以下内容："

#. type: Plain text
#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy
msgid "After having configured the broker location with `kafka.bootstrap.servers`, we configure our two channels: `movies-in` (receiving the records) and `movies-out` (publishing the records)."
msgstr "在用 `kafka.bootstrap.servers` 配置了经纪人位置后，我们配置了两个通道： `movies-in` （接收记录）和 `movies-out` （发布记录）。"

#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy
msgid ""
"We use the `mp.messaging.incoming.movies-in` prefix to configure the channel.\n"
"The `connector` attribute indicates who's responsible for this channel, here the Kafka connector.\n"
"We also need to configure the key and value deserializers."
msgstr "我们使用 `mp.messaging.incoming.movies-in` 前缀来配置通道。 `connector` 属性表示谁负责这个通道，这里是 Kafka 连接器。我们还需要配置键和值反序列化器。"

#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy
msgid ""
"To configure the outbound `movies-out` channel, we use the `mp.messaging.outgoing.movies-out` prefix.\n"
"In addition to indicate who's responsible for that channel, we also need to configure the key and value serializers."
msgstr "要配置对外 `movies-out` 通道，我们使用 `mp.messaging.outgoing.movies-out` 前缀。除了指明谁负责该通道外，我们还需要配置键和值序列化器。"

#. type: Title ==
#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy, no-wrap
msgid "Step 4 - Publishing movies to Kafka"
msgstr "第4步 - 发布电影到Kafka"

#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy
msgid ""
"Now, it's time to send a record to Kafka.\n"
"Create the `org.acme.MovieProducer` class with the following content:"
msgstr "现在，是时候向 Kafka 发送一条记录了。创建 `org.acme.MovieProducer` 类，内容如下："

#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy
msgid ""
"In this class, we inject an `Emitter`, i.e., an object responsible for sending a message to a channel.\n"
"This emitter is attached to the `movies-out` channel (and so will send messages to Kafka).\n"
"We are sending `Record` objects containing the movie's publication year as key and its title as value."
msgstr "在该类中，我们注入了一个 `Emitter` ，即一个负责向通道发送消息的对象。该发射器连接到 `movies-out` 频道（因此将向 Kafka 发送消息）。我们将发送 `Record` 对象，其中包含作为键的电影出版年份和作为值的电影标题。"

#. type: Plain text
#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy
msgid "So, the rest of our application can simply use the `sendMovieToKafka` method to send a movie to our Kafka topic."
msgstr "因此，我们应用程序的其他部分可以简单地使用 `sendMovieToKafka` 方法来发送一个电影到我们的Kafka主题。"

#. type: Title ==
#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy, no-wrap
msgid "Step 5 - Consuming movies"
msgstr "第5步 - 消费电影"

#. type: Plain text
#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy
msgid "Let's now look at the other side and retrieve the movies from Kafka."
msgstr "现在让我们看看另一面，从卡夫卡那里找回电影。"

#. type: Plain text
#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy
msgid "Here, we use the `@Incoming` annotation to indicate to Quarkus to call the `receive` method for every received record."
msgstr "在这里，我们使用 `@Incoming` 注释来向Quarkus表明对每一条收到的记录都要调用 `receive` 方法。"

#. type: Title ==
#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy, no-wrap
msgid "Step 6 - Sending movies from a REST endpoint"
msgstr "第6步 - 从REST端点发送电影"

#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy
msgid ""
"It's quite common to send messages to Kafka from a REST endpoint.\n"
"To do this, create the `org.acme.MovieResource` class with the following content:"
msgstr "从 REST 端点向 Kafka 发送消息是很常见的。为此，请创建包含以下内容的 `org.acme.MovieResource` 类："

#. type: Title ==
#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy, no-wrap
msgid "Step 7 - Let's get this running!"
msgstr "第7步 - 让我们开始运行!"

#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy
msgid ""
"Well, first, we need a Kafka broker.\n"
"You can follow the https://kafka.apache.org/quickstart[Apache Kafka quickstart], or use the following `docker-compose.yaml` file:"
msgstr "首先，我们需要一个 Kafka 代理。你可以参考 link:https://kafka.apache.org/quickstart[Apache Kafka quickstart] ，或者使用下面的 `docker-compose.yaml` 文件："

#. type: Plain text
#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy
msgid "Copy the `docker-compose.yaml` file in your project, and from a terminal, start your broker with: `docker-compose up -d`"
msgstr "在你的项目中复制 `docker-compose.yaml` 文件，并从终端启动你的经纪人。 `docker-compose up -d` "

#. type: Plain text
#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy
msgid "Then, run the application using:"
msgstr "然后，用以下方法运行该应用程序。"

#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy
msgid ""
"The application runs in dev mode, meaning that you can still update the code.\n"
"It will reload it automatically."
msgstr "应用程序在开发模式下运行，这意味着你仍然可以更新代码。它会自动重新加载。"

#. type: Plain text
#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy
msgid "In another terminal, emit a few HTTP POST request such as:"
msgstr "在另一个终端，发出一些HTTP POST请求，如：。"

#. type: Plain text
#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy
msgid "In the terminal running the application, you will see:"
msgstr "在运行应用程序的终端，你会看到。"

#. type: Plain text
#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy
msgid "It works!"
msgstr "它是有效的!"

#. type: Title ==
#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy, no-wrap
msgid "Step 8 - Native packaging"
msgstr "第8步 - 本地包装"

#. type: Plain text
#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy
msgid "If you have https://quarkus.io/guides/building-native-image[GraalVM installed and configured correctly], you can package this application as a native executable:"
msgstr "如果你已经 link:https://quarkus.io/guides/building-native-image[安装并正确配置了GraalVM] ，你可以把这个应用程序打包成一个本地可执行文件。"

#. type: Plain text
#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy
msgid "Then, execute your native executable with: `./target/getting-started-kafka-1.0.0-SNAPSHOT-runner`, and you get a Quarkus application using Kafka starting in a few milliseconds and consuming a ridiculous amount of memory: less than 30Mb after 100 ingested records!"
msgstr "然后，使用 `./target/getting-started-kafka-1.0.0-SNAPSHOT-runner` 这样，使用 Kafka 的 Quarkus 应用程序就能在几毫秒内启动，而且内存消耗少得离谱：100 条摄取记录后，内存消耗不到 30Mb！"

#. type: Title ==
#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy, no-wrap
msgid "Summary"
msgstr "摘要"

#: _posts/2021-01-18-getting-started-kafka.adoc
#, fuzzy
msgid ""
"In less than 10 minutes, we have a new Quarkus application using Apache Kafka.\n"
"If you want to go further, check the https://quarkus.io/guides/kafka[Kafka guide]."
msgstr "不到 10 分钟，我们就使用 Apache Kafka 创建了一个新的 Quarkus 应用程序。如果你想更进一步，请查看 link:https://quarkus.io/guides/kafka[Kafka 指南] 。"
