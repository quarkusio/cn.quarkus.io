# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:1
#, fuzzy, no-wrap
msgid "cescoffier"
msgstr "鹤壁市"

#. type: YAML Front Matter: date
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:1
#, fuzzy, no-wrap
msgid "2021-01-19"
msgstr "2021-01-19"

#. type: YAML Front Matter: layout
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "职位"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:1
#, fuzzy, no-wrap
msgid "How to build a Quarkus application using Apache Kafka in less than 10 minutes"
msgstr "如何在10分钟内使用Apache Kafka构建一个Quarkus应用程序"

#. type: YAML Front Matter: tags
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:1
#, fuzzy, no-wrap
msgid "kafka"
msgstr "卡夫卡"

#. type: YAML Front Matter: title
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:1
#, fuzzy, no-wrap
msgid "Getting Started with Apache Kafka in your Quarkus application"
msgstr "在你的Quarkus应用程序中开始使用Apache Kafka"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:15
#, fuzzy
msgid "https://kafka.apache.org/[Apache] Kafka is a prevalent distributed streaming platform offering a unique set of characteristics such as message retention, replay capabilities, consumer groups, and so on.  Kafka is highly scalable, fault-tolerant, and is becoming the spine of many modern systems.  That being said, Kafka is not the only one out there, and choosing the right messaging technology for your application can be challenging.  There are many articles to help you drive your decision, such as https://medium.com/@graemecolman/mind-your-amqps-or-kafka-or-interconnect-what-is-in-the-red-hat-messaging-box-9ed5aa590e92[this one].  This post is about Kafka, and an equivalent post about AMQP will be published later."
msgstr "link:https://kafka.apache.org/[Apache] Kafka是一个盛行的分布式流媒体平台，提供了一系列独特的特性，如消息保留、重放功能、消费者群体等。Kafka具有高度的可扩展性和容错性，并且正在成为许多现代系统的脊柱。也就是说，Kafka并不是唯一的，为你的应用选择合适的消息传递技术可能是一个挑战。有很多文章可以帮助你推动你的决定，比如 link:https://medium.com/@graemecolman/mind-your-amqps-or-kafka-or-interconnect-what-is-in-the-red-hat-messaging-box-9ed5aa590e92[这篇文章] 。这篇文章是关于Kafka的，关于AMQP的同等文章将在以后发表。"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:18
#, fuzzy
msgid "In this post, you will learn how to get started with Apache Kafka in your Quarkus application in less than 10 steps.  We will use https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.7/index.html[Reactive Messaging] - a declarative approach to build event-driven microservices, but you can also use _bare_ Kafka APIs or Kafka Streams."
msgstr "在这篇文章中，你将学习如何在你的Quarkus应用程序中开始使用Apache Kafka，只需不到10步。我们将使用 link:https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.7/index.html[Reactive Messaging] --一种建立事件驱动的微服务的声明式方法，但你也可以使用 _裸露的_ Kafka API或Kafka流。"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:20
#, fuzzy
msgid "The complete code is available from https://github.com/cescoffier/getting-started-quarkus-kafka[GitHub]."
msgstr "完整的代码可从 link:https://github.com/cescoffier/getting-started-quarkus-kafka[GitHub] 获得。"

#. type: Title ==
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:21
#, fuzzy, no-wrap
msgid "Step 1 - Generate your project"
msgstr "第1步 - 生成你的项目"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:26
#, fuzzy
msgid "Let's start with the very beginning, getting a new project structure with the right dependencies.  Go to https://code.quarkus.io, enter your group id and artifact id.  Then in the extension list, select:"
msgstr "让我们从最开始做起，用正确的依赖关系获得一个新的项目结构。转到 https://code.quarkus.io 输入你的组ID和工件ID。然后在扩展列表中，选择。"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:28
#, fuzzy
msgid "SmallRye Reactive Messaging - Kafka Connector"
msgstr "SmallRye Reactive Messaging - Kafka连接器"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:29
#, fuzzy
msgid "RESTEasy Jackson"
msgstr "RESTEasy Jackson"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:31
#, fuzzy
msgid "image:/assets/images/posts/getting-started-kafka/getting-started-kafka-code.png[]"
msgstr "image:/assets/images/posts/getting-started-kafka/getting-started-kafka-code.png[alt=\"getting started kafka code\"]"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:33
#, fuzzy
msgid "You can disable the \"Example Code\" to avoid the generated project to contain examples."
msgstr "你可以禁用 \"实例代码\"，以避免生成的项目包含实例。"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:35
#, fuzzy
msgid "Then, click on __Generate your application__, download the project as a zip file, unzip it, and load it in your favorite IDE."
msgstr "然后，点击 \" _生成你的应用程序_ \"，将项目下载为zip文件，解压缩，并将其加载到你最喜欢的IDE。"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:38
#, fuzzy
msgid "If you opened the generated `pom.xml`, you would see that the `quarkus-smallrye-reactive-messaging-kafka` and `quarkus-resteasy-jackson` dependencies are declared, so we're ready to write some code."
msgstr "如果你打开生成的 `pom.xml` ，你会看到 `quarkus-smallrye-reactive-messaging-kafka` 和 `quarkus-resteasy-jackson` 的依赖关系已经声明，所以我们准备写一些代码。"

#. type: Title ==
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:39
#, fuzzy, no-wrap
msgid "Step 2 - What are we going to exchange?"
msgstr "第2步 - 我们要交换什么？"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:44
#, fuzzy
msgid "We need something to exchange.  Without much originality, let's say we will send and receive `Movie` objects.  In your project, create the `org.acme.Movie` class with the following content:"
msgstr "我们需要一些东西来交换。没有太多的原创性，让我们说我们将发送和接收 `Movie` 对象。在你的项目中，创建 `org.acme.Movie` 类，内容如下。"

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:48
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:107
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:140
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:169
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:50
#, no-wrap
msgid "public class Movie {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:53
#, no-wrap
msgid ""
"    public String title;\n"
"    public int year;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:55
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:60
#, fuzzy
msgid "In Kafka, we produce and consume records.  A record contains a key and a value.  Let's say we will use the movie's publication year as key and the title as value."
msgstr "在Kafka中，我们生产和消费记录。一条记录包含一个键和一个值。比方说，我们将使用电影的出版年份作为键，标题作为值。"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:63
#, fuzzy
msgid "We also need to decide on which topic we are going to send these records.  Let's keep things simple and name our topic __movies__."
msgstr "我们还需要决定将这些记录发送到哪个主题上。让我们保持简单，将我们的主题命名为 _电影_ 。"

#. type: Title ==
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:64
#, fuzzy, no-wrap
msgid "Step 3 - Configure the application"
msgstr "第3步 - 配置应用程序"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:71
#, fuzzy
msgid "As said above, we will use Reactive Messaging.  When you use Reactive Messaging, you send messages to a channel and receive them from another channel.  These channels are mapped to the underlying messaging technology by configuration.  In our application, we must indicate that our reception and publication channels will use the __movies__ Kafka channel.  In `src/main/resources/application.properties`, add the following content:"
msgstr "如上所述，我们将使用反应式消息传递。当你使用反应式消息传递时，你向一个通道发送消息并从另一个通道接收消息。这些通道通过配置被映射到底层的消息传递技术。在我们的应用程序中，我们必须指出我们的接收和发布通道将使用 _电影_ Kafka通道。在 `src/main/resources/application.properties` ，添加以下内容。"

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:76
#, no-wrap
msgid ""
"# The Kafka broker location (defaults to localhost:9092)\n"
"kafka.bootstrap.servers=localhost:9092\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:82
#, no-wrap
msgid ""
"# Configuring the incoming channel (reading from Kafka)\n"
"mp.messaging.incoming.movies-in.connector=smallrye-kafka\n"
"mp.messaging.incoming.movies-in.topic=movies\n"
"mp.messaging.incoming.movies-in.key.deserializer=org.apache.kafka.common.serialization.IntegerDeserializer\n"
"mp.messaging.incoming.movies-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:88
#, no-wrap
msgid ""
"# Configuring the outgoing channel (writing to Kafka)\n"
"mp.messaging.outgoing.movies-out.connector=smallrye-kafka\n"
"mp.messaging.outgoing.movies-out.topic=movies\n"
"mp.messaging.outgoing.movies-out.key.serializer=org.apache.kafka.common.serialization.IntegerSerializer\n"
"mp.messaging.outgoing.movies-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:91
#, fuzzy
msgid "After having configured the broker location with `kafka.bootstrap.servers`, we configure our two channels: `movies-in` (receiving the records) and `movies-out` (publishing the records)."
msgstr "在用 `kafka.bootstrap.servers` 配置了经纪人位置后，我们配置了两个通道： `movies-in` （接收记录）和 `movies-out` （发布记录）。"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:95
#, fuzzy
msgid "We use the `mp.messaging.incoming.movies-in` prefix to configure the channel.  The `connector` attribute indicates who's responsible for this channel, here the Kafka connector.  We also need to configure the key and value deserializers."
msgstr "我们使用 `mp.messaging.incoming.movies-in` 前缀来配置这个通道。 `connector` 属性表明谁负责这个通道，这里是Kafka连接器。我们还需要配置键和值的反序列化器。"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:98
#, fuzzy
msgid "To configure the outbound `movies-out` channel, we use the `mp.messaging.outgoing.movies-out` prefix.  In addition to indicate who's responsible for that channel, we also need to configure the key and value serializers."
msgstr "为了配置出站的 `movies-out` 通道，我们使用 `mp.messaging.outgoing.movies-out` 前缀。除了表明谁负责该通道之外，我们还需要配置键和值序列化器。"

#. type: Title ==
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:99
#, fuzzy, no-wrap
msgid "Step 4 - Publishing movies to Kafka"
msgstr "第4步 - 发布电影到Kafka"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:103
#, fuzzy
msgid "Now, it's time to send a record to Kafka.  Create the `org.acme.MovieProducer` class with the following content:"
msgstr "现在，是时候向Kafka发送一条记录了。创建 `org.acme.MovieProducer` 类，内容如下。"

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:111
#, no-wrap
msgid ""
"import io.smallrye.reactive.messaging.kafka.Record;\n"
"import org.eclipse.microprofile.reactive.messaging.Channel;\n"
"import org.eclipse.microprofile.reactive.messaging.Emitter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:114
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:117
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MovieProducer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:120
#, no-wrap
msgid ""
"    @Inject @Channel(\"movies-out\")\n"
"    Emitter<Record<Integer, String>> emitter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:125
#, no-wrap
msgid ""
"    public void sendMovieToKafka(Movie movie) {\n"
"        emitter.send(Record.of(movie.year, movie.title));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:130
#, fuzzy
msgid "In this class, we inject an `Emitter`, i.e., an object responsible for sending a message to a channel.  This emitter is attached to the `movies-out` channel (and so will send messages to Kafka).  We are sending `Record` objects containing the movie's publication year as key and its title as value."
msgstr "在这个类中，我们注入一个 `Emitter` ，即一个负责向通道发送消息的对象。这个发射器连接到 `movies-out` 通道（因此将发送消息到Kafka）。我们正在发送 `Record` 对象，其中包含以电影的出版年份为键，以其标题为值。"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:132
#, fuzzy
msgid "So, the rest of our application can simply use the `sendMovieToKafka` method to send a movie to our Kafka topic."
msgstr "因此，我们应用程序的其他部分可以简单地使用 `sendMovieToKafka` 方法来发送一个电影到我们的Kafka主题。"

#. type: Title ==
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:133
#, fuzzy, no-wrap
msgid "Step 5 - Consuming movies"
msgstr "第5步 - 消费电影"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:136
#, fuzzy
msgid "Let's now look at the other side and retrieve the movies from Kafka."
msgstr "现在让我们看看另一面，从卡夫卡那里找回电影。"

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:144
#, no-wrap
msgid ""
"import io.smallrye.reactive.messaging.kafka.Record;\n"
"import org.eclipse.microprofile.reactive.messaging.Incoming;\n"
"import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:146
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:149
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MovieConsumer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:151
#, no-wrap
msgid "    private final Logger logger = Logger.getLogger(MovieConsumer.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:157
#, no-wrap
msgid ""
"    @Incoming(\"movies-in\")\n"
"    public void receive(Record<Integer, String> record) {\n"
"        logger.infof(\"Got a movie: %d - %s\", record.key(), record.value());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:160
#, fuzzy
msgid "Here, we use the `@Incoming` annotation to indicate to Quarkus to call the `receive` method for every received record."
msgstr "在这里，我们使用 `@Incoming` 注释来向Quarkus表明对每一条收到的记录都要调用 `receive` 方法。"

#. type: Title ==
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:161
#, fuzzy, no-wrap
msgid "Step 6 - Sending movies from a REST endpoint"
msgstr "第6步 - 从REST端点发送电影"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:165
#, fuzzy
msgid "It's quite common to send messages to Kafka from a REST endpoint.  To do this, create the `org.acme.MovieResource` class with the following content:"
msgstr "从REST端点向Kafka发送消息是很常见的。要做到这一点，创建具有以下内容的 `org.acme.MovieResource` 类。"

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:177
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import javax.ws.rs.core.Response;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:182
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"public class MovieResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:185
#, no-wrap
msgid ""
"    @Inject\n"
"    MovieProducer producer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:193
#, no-wrap
msgid ""
"    @POST\n"
"    public Response send(Movie movie) {\n"
"        producer.sendMovieToKafka(movie);\n"
"        // Return an 202 - Accepted response.\n"
"        return Response.accepted().build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:195
#, fuzzy, no-wrap
msgid "Step 7 - Let's get this running!"
msgstr "第7步 - 让我们开始运行!"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:199
#, fuzzy
msgid "Well, first, we need a Kafka broker.  You can follow the https://kafka.apache.org/quickstart[Apache Kafka quickstart], or use the following `docker-compose.yaml` file:"
msgstr "那么，首先，我们需要一个Kafka代理。你可以按照 link:https://kafka.apache.org/quickstart[Apache Kafka的快速入门] ，或者使用下面的 `docker-compose.yaml` 文件。"

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:203
#, no-wrap
msgid "version: '2'\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:205
#, no-wrap
msgid "services:\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:216
#, no-wrap
msgid ""
"  zookeeper:\n"
"    image: strimzi/kafka:0.20.1-kafka-2.6.0\n"
"    command: [\n"
"        \"sh\", \"-c\",\n"
"        \"bin/zookeeper-server-start.sh config/zookeeper.properties\"\n"
"    ]\n"
"    ports:\n"
"      - \"2181:2181\"\n"
"    environment:\n"
"      LOG_DIR: /tmp/logs\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:232
#, no-wrap
msgid ""
"  kafka:\n"
"    image: strimzi/kafka:0.20.1-kafka-2.6.0\n"
"    command: [\n"
"        \"sh\", \"-c\",\n"
"        \"bin/kafka-server-start.sh config/server.properties --override listeners=$${KAFKA_LISTENERS} --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect=$${KAFKA_ZOOKEEPER_CONNECT}\"\n"
"    ]\n"
"    depends_on:\n"
"      - zookeeper\n"
"    ports:\n"
"      - \"9092:9092\"\n"
"    environment:\n"
"      LOG_DIR: \"/tmp/logs\"\n"
"      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092\n"
"      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092\n"
"      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:235
#, fuzzy
msgid "Copy the `docker-compose.yaml` file in your project, and from a terminal, start your broker with: `docker-compose up -d`"
msgstr "在你的项目中复制 `docker-compose.yaml` 文件，并从终端启动你的经纪人。 `docker-compose up -d` "

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:237
#, fuzzy
msgid "Then, run the application using:"
msgstr "然后，用以下方法运行该应用程序。"

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:241
#, no-wrap
msgid "./mvnw quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:245
#, fuzzy
msgid "The application runs in dev mode, meaning that you can still update the code.  It will reload it automatically."
msgstr "该应用程序在开发模式下运行，意味着你仍然可以更新代码。它将自动重新加载。"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:247
#, fuzzy
msgid "In another terminal, emit a few HTTP POST request such as:"
msgstr "在另一个终端，发出一些HTTP POST请求，如：。"

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:254
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"--request POST \\\n"
"--data '{\"year\":1994, \"title\":\"The Shawshank Redemption\"}' \\\n"
"http://localhost:8080/\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:259
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"--request POST \\\n"
"--data '{\"year\":1972, \"title\":\"The Godfather\"}' \\\n"
"http://localhost:8080/\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:264
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"--request POST \\\n"
"--data '{\"year\":2008, \"title\":\"The Dark Knight\"}' \\\n"
"http://localhost:8080/\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:269
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"--request POST \\\n"
"--data '{\"year\":1994, \"title\":\"Pulp Fiction\"}' \\\n"
"http://localhost:8080/\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:274
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"--request POST \\\n"
"--data '{\"year\":2010, \"title\":\"Inception\"}' \\\n"
"http://localhost:8080/\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:277
#, fuzzy
msgid "In the terminal running the application, you will see:"
msgstr "在运行应用程序的终端，你会看到。"

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:284
#, no-wrap
msgid ""
"...\n"
"2021-01-13 09:29:41,087 INFO  [org.acm.MovieConsumer] (vert.x-eventloop-thread-9) Got a movie: 1994 - Pulp Fiction\n"
"2021-01-13 09:29:41,114 INFO  [org.acm.MovieConsumer] (vert.x-eventloop-thread-9) Got a movie: 2010 - Inception\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:287
#, fuzzy
msgid "It works!"
msgstr "它是有效的!"

#. type: Title ==
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:288
#, fuzzy, no-wrap
msgid "Step 8 - Native packaging"
msgstr "第8步 - 本地包装"

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:291
msgid "If you have https://quarkus.io/guides/building-native-image[GraalVM installed and configured correctly], you can package this application as a native executable:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:295
#, no-wrap
msgid "./mvnw package -Pnative\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:298
msgid "Then, execute your native executable with: `./target/getting-started-kafka-1.0.0-SNAPSHOT-runner`, and you get a Quarkus application using Kafka starting in a few milliseconds and consuming a ridiculous amount of memory: less than 30Mb after 100 ingested records!"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:304
#, no-wrap
msgid ""
"$ rss getting-started-kafka-1.0.0-SNAPSHOT-runner\n"
"PID 0M COMMAND\n"
"49321 30M ./target/getting-started-kafka-1.0.0-SNAPSHOT-runner\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:306
#, no-wrap
msgid "Summary"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-01-18-getting-started-kafka.adoc:309
msgid "In less than 10 minutes, we have a new Quarkus application using Apache Kafka.  If you want to go further, check the https://quarkus.io/guides/kafka[Kafka guide]."
msgstr ""
