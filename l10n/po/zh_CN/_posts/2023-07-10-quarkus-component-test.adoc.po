# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-04 08:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy, no-wrap
msgid "Explore a new way of testing CDI components in Quarkus"
msgstr "探索Quarkus中测试CDI组件的新方法"

#. type: YAML Front Matter: synopsis
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy, no-wrap
msgid "Quarkus 3.2 introduced an experimental feature to ease the testing of CDI components and mocking of their dependencies."
msgstr "Quarkus 3.2引入了一个实验性的功能，以简化CDI组件的测试和对其依赖关系的嘲弄。"

#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid ""
"The Quarkus component model is built on top of CDI.\n"
"However, writing unit tests for beans without a running CDI container is often a tedious work.\n"
"Without the container services up and running, all the work has to be done manually.\n"
"First of all, no dependency injection is performed.\n"
"Furthermore, no events are fired and no observers are notified.\n"
"Also, interceptors are not applied.\n"
"In short, everything needs to be wired together by hand.\n"
"But Quarkus can do better, right?\n"
"Of course, it can!\n"
"Quarkus 3.2 introduced an experimental feature to ease the testing of CDI components and mocking of their dependencies.\n"
"It's a lightweight JUnit 5 extension that does not start a full Quarkus application but merely runs the services needed to make the testing a joyful experience."
msgstr "Quarkus 组件模型建立在 CDI 的基础之上。然而，在没有运行 CDI 容器的情况下为 Bean 编写单元测试往往是一项乏味的工作。没有运行的容器服务，所有工作都必须手动完成。首先，不会执行依赖注入。此外，不会触发事件，也不会通知观察者。此外，也不会应用拦截器。简而言之，所有工作都需要手工完成。但 Quarkus 可以做得更好，对吗？当然可以！Quarkus 3.2 引入了一项实验性功能，以简化 CDI 组件的测试及其依赖关系的模拟。这是一个轻量级的 JUnit 5 扩展，它不会启动一个完整的 Quarkus 应用程序，而只是运行所需的服务，使测试成为一种快乐的体验。"

#. type: Title ==
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy, no-wrap
msgid "A simple example"
msgstr "一个简单的例子"

#. type: Plain text
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid "First of all, add the `quarkus-junit5-component` module dependency to your project."
msgstr "首先，在你的项目中添加 `quarkus-junit5-component` 模块的依赖关系。"

#. type: Block title
#: _posts/2023-07-10-quarkus-component-test.adoc
#, no-wrap
msgid "Maven"
msgstr "Maven"

#. type: Block title
#: _posts/2023-07-10-quarkus-component-test.adoc
#, no-wrap
msgid "Gradle"
msgstr "Gradle"

#. type: delimited block *
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid "Now, imagine that we have a component `Foo` which is an `@ApplicationScoped` CDI bean."
msgstr "现在，想象一下，我们有一个组件 `Foo` ，这是一个 `@ApplicationScoped` CDI bean。"

#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid "`Foo` depends on `Charlie` which declares a method `ping()`."
msgstr " `Foo` 依赖于 ，它声明了一个方法 。 `Charlie` `ping()` "

#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid "`Foo` depends on the config property `bar`."
msgstr " `Foo` 取决于配置属性 。 `bar` "

#. type: Plain text
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid "The goal is to test this method which makes use of the `Charlie` dependency and the `bar` config property."
msgstr "我们的目标是测试这个方法，它利用了 `Charlie` 依赖关系和 `bar` 配置属性。"

#. type: Plain text
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid "Then, a simple component test looks like this:"
msgstr "然后，一个简单的组件测试看起来像这样："

#. type: Plain text
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid "`@QuarkusComponentTest` registers the `QuarkusComponentTestExtension` that does all the heavy lifting under the hood."
msgstr " `@QuarkusComponentTest` 注册送彩金不限ip链接 ，在引擎盖下做所有的重活。 `QuarkusComponentTestExtension` "

#. type: Plain text
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid "`@TestConfigProperty` is used to set the value of a configuration property for the test."
msgstr " `@TestConfigProperty` 是用来设置测试的配置属性值的。"

#. type: Plain text
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid "The test injects the tested component. The types of all fields annotated with `@Inject` are considered the component types under test."
msgstr "该测试注入被测试的组件。所有用 `@Inject` 注释的字段的类型都被认为是被测试的组件类型。"

#. type: Plain text
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid "The test also injects a mock of `Charlie`, a dependency for which a `@Singleton` bean is registered automatically. The injected reference is an \"unconfigured\" Mockito mock."
msgstr "该测试还注入了一个 `Charlie` 的模拟，这个依赖关系中的 `@Singleton` bean是自动注册的。注入的引用是一个 \"未配置的 \"Mockito模拟。"

#. type: Plain text
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid "The Mockito API is used to configure the behavior of the injected mock."
msgstr "Mockito的API被用来配置注入的模拟的行为。"

#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid ""
"In this particular test, the only \"real\" component under the test is `org.acme.Foo`.\n"
"The `Charlie` dependency is a mock that is created automatically.\n"
"And the value of the `bar` configuration property is set with the `@TestConfigProperty` annotation."
msgstr "在这个测试中，唯一的 \"真实 \"组件是 `org.acme.Foo` 。 `Charlie` 依赖项是自动创建的模拟。 `bar` 配置属性的值是通过 `@TestConfigProperty` 注解设置的。"

#. type: Title ==
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy, no-wrap
msgid "How does it work?"
msgstr "它是如何工作的？"

#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid ""
"The `QuarkusComponentTestExtension` does several things during the `before all` test phase.\n"
"It starts ArC - the CDI container in Quarkus.\n"
"It also registers a dedicated configuration object.\n"
"The container is then stopped and the config is released during the `after all` test phase.\n"
"The fields annotated with `@Inject` and `@InjectMock` are injected after a test instance is created.\n"
"Finally, the CDI request context is activated and terminated per each test method."
msgstr "`QuarkusComponentTestExtension` 在 `before all` 测试阶段做了几件事。它启动 Quarkus 中的 CDI 容器 ArC。它还会注册一个专用配置对象。然后在 `after all` 测试阶段停止容器并释放配置。在创建测试实例后，会注入注释为 `@Inject` 和 `@InjectMock` 的字段。最后，根据每个测试方法激活和终止 CDI 请求上下文。"

#. type: Title ===
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy, no-wrap
msgid "Tested components"
msgstr "经过测试的组件"

#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid ""
"By default, the types of all fields annotated with `@Inject` are considered component types.\n"
"However, you can also specify additional test components: either with the `@QuarkusComponentTest#value()` or programmatically as the arguments of the <<advanced_features,`QuarkusComponentTestExtension(Class<?>...)`>> constructor.\n"
"Finally, the static nested classes declared on the test class are components too."
msgstr "默认情况下，所有用 `@Inject` 注释的字段类型都被视为组件类型。不过，您也可以指定其他测试组件：通过 `@QuarkusComponentTest#value()` 或以编程方式作为 xref:advanced_features[QuarkusComponentTestExtension(Class<?>…)] 构造函数的参数。最后，在测试类上声明的静态嵌套类也是组件。"

#. type: Plain text
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid "Static nested classed declared on a test class that is annotated with `@QuarkusComponentTest` are excluded from bean discovery when running a regular `@QuarkusTest` in order to prevent unintentional CDI conflicts."
msgstr " `@QuarkusComponentTest` 当运行常规的 `@QuarkusTest` ，在测试类上声明的静态嵌套类被排除在Bean发现之外，以防止无意中的CDI冲突。"

#. type: Title ===
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy, no-wrap
msgid "Automatic mocking of unsatisfied dependencies"
msgstr "对不满足的依赖关系进行自动嘲弄"

#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid ""
"Unlike in regular CDI environments, the test does not fail if a component injects an unsatisfied dependency.\n"
"Instead, a mock bean is registered automatically for each combination of required type and qualifiers of an injection point that resolves to an unsatisfied dependency.\n"
"The mock bean has the `@Singleton` scope so it’s shared across all injection points with the same required type and qualifiers.\n"
"And the injected reference is an unconfigured Mockito mock.\n"
"This mock can be injected in the test with `@io.quarkus.test.InjectMock` and configured with the Mockito API."
msgstr "与常规 CDI 环境不同，如果组件注入了未满足的依赖关系，测试不会失败。相反，如果注入点的要求类型和限定条件的组合解析为未满足的依赖关系，则会自动注册一个 mock Bean。该 mock Bean 的作用域为 `@Singleton` ，因此它在具有相同所需类型和限定条件的所有注入点中共享。注入的引用是一个未配置的 Mockito mock。可以通过 `@io.quarkus.test.InjectMock` 在测试中注入该 mock，并使用 Mockito API 进行配置。"

#. type: Title ===
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy, no-wrap
msgid "Configuration"
msgstr "配置"

#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid ""
"A dedicated `SmallRyeConfig` is registered during the `before all` test phase.\n"
"It’s possible to set the configuration properties with the `@TestConfigProperty` annotation or programmatically with the `QuarkusComponentTestExtension#configProperty(String, String)` method.\n"
"If you need to use the default values for missing config properties, then `@QuarkusComponentTest#useDefaultConfigProperties()` and `QuarkusComponentTestExtension#useDefaultConfigProperties()` might come in useful."
msgstr "在 `before all` 测试阶段会注册一个专用的 `SmallRyeConfig` 。可以使用 `@TestConfigProperty` 注解或 `QuarkusComponentTestExtension#configProperty(String, String)` 方法编程设置配置属性。如果需要使用缺失配置属性的默认值，那么 `@QuarkusComponentTest#useDefaultConfigProperties()` 和 `QuarkusComponentTestExtension#useDefaultConfigProperties()` 可能会有用。"

#. type: Title ==
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy, no-wrap
msgid "Advanced features"
msgstr "高级功能"

#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid ""
"It is possible to configure the `QuarkusComponentTestExtension` programatically.\n"
"The simple example above could be rewritten like:"
msgstr "可以通过编程配置 `QuarkusComponentTestExtension` 。上面的简单示例可以改写如下"

#. type: Plain text
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid "Annotate a `static` field of type `QuarkusComponentTestExtension` with the `@RegisterExtension` annotation and configure the extension programmatically."
msgstr " `QuarkusComponentTestExtension` 用 `@RegisterExtension` 注释来注释一个 `static` 类型的字段，并以编程方式配置该扩展。"

#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid ""
"Sometimes you need full control over the bean attributes and maybe even configure the default behavior of a mocked dependency.\n"
"In this case, the mock configurator API and the `QuarkusComponentTestExtension#mock()` method is the right choice."
msgstr "有时，您需要完全控制 bean 属性，甚至可能需要配置模拟依赖项的默认行为。在这种情况下，mock configurator API 和 `QuarkusComponentTestExtension#mock()` 方法就是正确的选择。"

#. type: Plain text
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid "The scope of the mocked bean is `@Dependent`."
msgstr "模拟 bean 的作用域是 `@Dependent` 。"

#. type: Plain text
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid "Configure the default behavior of the mock."
msgstr "配置模拟的默认行为。"

#. type: Title ===
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy, no-wrap
msgid "Mocking CDI interceptors"
msgstr "模拟 CDI 拦截器"

#. type: Plain text
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid "This feature is only available in Quarkus 3.3+."
msgstr "该功能仅适用于 Quarkus 3.3 及以上版本。"

#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid ""
"If a tested component class declares an interceptor binding then you might need to mock the interception too.\n"
"You can define a mock interceptor class as a static nested class of the test class.\n"
"This interceptor class is then automatically discovered"
msgstr "如果被测试的组件类声明了拦截器绑定，那么你可能也需要模拟拦截。您可以将模拟拦截器类定义为测试类的静态嵌套类。然后，这个拦截器类就会被自动发现"

#. type: Plain text
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid "`@SimpleBinding` is an interceptor binding."
msgstr "`@SimpleBinding` 是一种拦截器绑定。"

#. type: Plain text
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid "The interceptor class is automatically considered a tested component and therefore used during the test execution."
msgstr "拦截器类会被自动视为已测试组件，因此在测试执行过程中会被使用。"

#. type: Title ==
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy, no-wrap
msgid "Summary"
msgstr "摘要"

#. type: Plain text
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid "In this article, we discussed the possibilities of a new way of testing CDI components in a Quarkus application."
msgstr "在本文中，我们讨论了在 Quarkus 应用程序中测试 CDI 组件的新方法的可能性。"
