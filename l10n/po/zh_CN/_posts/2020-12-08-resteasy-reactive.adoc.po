# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:1
#, fuzzy, no-wrap
msgid "geoand"
msgstr "地质和"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:1
#, fuzzy, no-wrap
msgid "2020-12-07"
msgstr "2020-12-07"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "职位"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:1
#, fuzzy, no-wrap
msgid "RESTEasy Reactive is ready to be tested"
msgstr "RESTEasy Reactive已准备好接受测试"

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:1
#, fuzzy, no-wrap
msgid "reactive web rest resteasy"
msgstr "反应式网络休息系统 resteasy"

#. type: YAML Front Matter: title
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:1
#, fuzzy, no-wrap
msgid "Announcing RESTEasy Reactive"
msgstr "发布RESTEasy Reactive"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:12
#, fuzzy
msgid "It gives the Quarkus and RESTEasy teams great pleasure to announce that RESTEasy Reactive integration in Quarkus has landed in the main Quarkus repo footnote:disclaimer[Currently the main RESTEasy Reactive component resides at https://github.com/quarkusio/quarkus/tree/main/independent-projects/resteasy-reactive in the main Quarkus repository; the plan is however that once things settle, this code will move to https://github.com/resteasy/resteasy-reactive. This move should not affect users of the quarkus-resteasy-reactive extensions in any way, just a heads up if anyone reads this blog post in the future and can’t find it.] and will be part of the next Quarkus release 1.11."
msgstr "Quarkus和RESTEasy团队非常高兴地宣布，RESTEasy在Quarkus中的Reactive集成已经进入Quarkus的主文件[ link:#_footnotedef_1[1, id=\"_footnoteref_1\", class=\"footnote\", title=\"View footnote.\"]]，并将成为下一个Quarkus版本1.11的一部分。"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:15
#, fuzzy
msgid "We are looking forward to everyone testing it and providing us as much feedback as possible.  In typical Quarkus fashion, the project is consumable as a new set of extensions."
msgstr "我们期待着每个人都来测试它，并为我们提供尽可能多的反馈。在典型的Quarkus方式中，该项目是可以作为一套新的扩展来消耗的。"

#. type: Title ==
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:16
#, fuzzy, no-wrap
msgid "What is it?"
msgstr "它是什么？"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:20
#, fuzzy
msgid "As you probably guessed from the name, this work is a *new JAX-RS implementation* written from the ground up to work on our common *Vert.x* layer and is thus fully *reactive*, while also being very *tightly integrated with Quarkus* and consequently moving a lot of framework specific work (like annotation scanning and metamodel generation) to *build time*."
msgstr "正如你从名字中可能猜到的那样，这项工作是一个 *新的JAX-RS实现* ，从头写起，在我们通用的 *Vert.x* 层上工作，因此是完全 *反应式* 的，同时也 *与Quarkus紧密结合* ，因此将很多框架的具体工作（比如注释扫描和元模型生成）转移到 *构建时间* 。"

#. type: Title ==
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:21
#, fuzzy, no-wrap
msgid "Why should I care?"
msgstr "我为什么要关心？"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:24
#, fuzzy
msgid "The simplest answer is that you can continue to leverage the widely used and very powerful JAX-RS APIs to expose a REST layer for your application, while gaining a significant improvement in the maximum throughput the application can achieve. The application should also start slightly faster and consume a little less memory."
msgstr "最简单的答案是，你可以继续利用广泛使用的、非常强大的JAX-RS API，为你的应用程序暴露出一个REST层，同时在应用程序所能达到的最大吞吐量方面获得显著改善。该应用程序的启动速度也应该略微快一些，消耗的内存也少一些。"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:26
#, fuzzy
msgid "Our benchmarks reveal that the measurable performance with this new extension is almost identical to what we would achieve using Quarkus' Reactive Routes API (which is a very interesting API in its own right, but is generally more low level - not to mention the fact that it's a new API developers would need to learn)."
msgstr "我们的基准测试显示，这个新扩展的可测量性能几乎与我们使用Quarkus的Reactive Routes API（它本身是一个非常有趣的API，但通常更低级--更不用说它是一个新的API，开发者需要学习）所取得的性能相同。"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:28
#, fuzzy
msgid "Furthermore, when comparing our results to other competing enterprise Java frameworks that provide annotation based REST layers, Quarkus provided as much as double the throughput depending on the benchmark."
msgstr "此外，当把我们的结果与其他提供基于注解的REST层的竞争性企业Java框架进行比较时，Quarkus提供了多达两倍的吞吐量，这取决于基准。"

#. type: Title ==
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:29
#, fuzzy, no-wrap
msgid "What other benefits are there?"
msgstr "还有什么其他好处？"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:34
#, fuzzy
msgid "As if the familiar API and the much improved runtime characteristics of the new extension weren't enough, we have added some really exciting and convenient new features (which are not part of the JAX-RS spec) that have either been requested by the community, or are things we feel improve the developer experience and soften some of the spec’s rough edge.  These new features are:"
msgstr "如果熟悉的API和新扩展的运行时特性还不够的话，我们还增加了一些非常令人兴奋和方便的新功能（这些功能不是JAX-RS规范的一部分），这些功能要么是社区要求的，要么是我们认为可以改善开发者体验和缓和规范的一些粗糙边缘的东西。这些新功能包括"

#. type: Labeled list
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:35
#, fuzzy, no-wrap
msgid "Non-blocking by default"
msgstr "默认为非阻塞式"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:38
#, fuzzy
msgid "All endpoints are now running on the IO thread by default. You can use `@Blocking` to change that."
msgstr "现在所有的端点都默认在IO线程上运行。你可以使用 `@Blocking` 来改变这一点。"

#. type: Labeled list
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:39
#, fuzzy, no-wrap
msgid "Scoring system"
msgstr "计分系统"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:42
#, fuzzy
msgid "On dev-mode startup, the application will show you a list of your endpoints, along with a performance score telling you why your endpoint is slower than an optimal version. This helps a lot in figuring out how to improve REST performance."
msgstr "在开发模式启动时，应用程序将显示你的端点列表，以及告诉你为什么你的端点比最佳版本慢的性能评分。这对弄清如何提高REST性能有很大帮助。"

#. type: Labeled list
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:43
#, fuzzy, no-wrap
msgid "New request/response filter design"
msgstr "新的请求/响应过滤器设计"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:46
#, fuzzy
msgid "JAX-RS filters require implementing an interface and injecting context objects as fields, which is costly and inflexible. Based on our success in the Quarkus build system, filters are now simply annotated methods and any parameter is automatically injected:"
msgstr "JAX-RS过滤器需要实现一个接口并将上下文对象作为字段注入，这既费钱又不灵活。基于我们在Quarkus构建系统中的成功，过滤器现在只是被注释的方法，任何参数都被自动注入。"

#. type: delimited block -
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:50
#, no-wrap
msgid "public class CustomContainerRequestFilter {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:57
#, no-wrap
msgid ""
"   @ServerRequestFilter\n"
"   public void whatever(UriInfo uriInfo, HttpHeaders httpHeaders, ContainerRequestContext requestContext) {\n"
"       String customHeaderValue = uriInfo.getPath() + \"-\" + httpHeaders.getHeaderString(\"some-input\");\n"
"       requestContext.getHeaders().putSingle(\"custom-header\", customHeaderValue);\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:60
#, fuzzy
msgid "Furthermore, if filters need to perform blocking operations, then they can return `Uni<Void>` and RESTEasy Reactive will not block the event-loop thread while executing the filter."
msgstr "此外，如果过滤器需要执行阻塞操作，那么它们可以返回 `Uni<Void>` ，RESTEasy Reactive在执行过滤器时不会阻塞事件循环线程。"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:62
#, fuzzy
msgid "Finally, although we haven’t done it yet, this approach could easily be extended to other types of JAX-RS Providers thus completely forgoing the need to use `@Context` in their code."
msgstr "最后，虽然我们还没有做，但这种方法可以很容易地扩展到其他类型的JAX-RS提供者，从而完全放弃在其代码中使用 `@Context` 。"

#. type: Labeled list
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:63
#, fuzzy, no-wrap
msgid "New `*Param` annotations"
msgstr "新的 `*Param` 注释"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:67
#, fuzzy
msgid "These annotations are meant to be used instead of the JAX-RS `@PathParam`, `@QueryParam` etc. annotations, without having the need to specify a name.  The reason we chose not to reuse the same annotation names is to avoid conflicting with either JAX-RS or other EE specs:"
msgstr "这些注解是为了代替 JAX-RS `@PathParam` , `@QueryParam` 等注解而使用的，无需指定名称。我们之所以选择不重复使用相同的注解名称，是为了避免与 JAX-RS 或其他 EE 规范冲突。"

#. type: delimited block -
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:80
#, no-wrap
msgid ""
"@POST\n"
"@Path(\"params/{p}\")\n"
"public String params(@RestPath String p,\n"
"                    @RestQuery String q,\n"
"                    @RestHeader int h,\n"
"                    @RestForm String f,\n"
"                    @RestMatrix String m,\n"
"                    @RestCookie String c) {\n"
"   return \"params: p: \" + p + \", q: \" + q + \", h: \" + h + \", f: \" + f + \", m: \" + m + \", c: \" + c;\n"
"}\n"
msgstr ""

#. type: Labeled list
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:82
#, fuzzy, no-wrap
msgid "Simpler parameter and context injection"
msgstr "更简单的参数和上下文注入"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:85
#, fuzzy
msgid "With RESTEasy Reactive you don’t even need to use `@PathParam` or `@RestPath` if your parameter has the same name as a path parameter, and similarly you can skip `@Context` for all the known context types, which makes it even simpler:"
msgstr "使用RESTEasy Reactive，如果你的参数与路径参数同名，你甚至不需要使用 `@PathParam` 或 `@RestPath` ，同样，对于所有已知的上下文类型，你可以跳过 `@Context` ，这使它变得更加简单。"

#. type: delimited block -
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:93
#, no-wrap
msgid ""
"@POST\n"
"@Path(\"params/{p}\")\n"
"public String params(String p, UriInfo info) {\n"
"   return \"params: p: \" + p + \", info: \" + info;\n"
"}\n"
msgstr ""

#. type: Labeled list
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:95
#, fuzzy, no-wrap
msgid "New optimal message body reader / writer"
msgstr "新的最佳信息体读者/作者"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:98
#, fuzzy
msgid "If no filters and interceptors are invoked when an endpoint is serviced, you can use more efficient message body writers that directly write to vert.x and don’t require reflection and annotations:"
msgstr "如果在服务端点时不调用过滤器和拦截器，你可以使用更高效的消息体写入器，直接写入vert.x，不需要反射和注解。"

#. type: delimited block -
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:104
#, no-wrap
msgid ""
"@Provider\n"
"public class ServerVertxBufferMessageBodyWriter extends VertxBufferMessageBodyWriter\n"
"       implements ServerMessageBodyWriter<Buffer> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:109
#, no-wrap
msgid ""
"   @Override\n"
"   public boolean isWriteable(Class<?> type, ResteasyReactiveResourceInfo target, MediaType mediaType) {\n"
"       return true;\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:115
#, no-wrap
msgid ""
"   @Override\n"
"   public void writeResponse(Buffer buffer, ServerRequestContext context) {\n"
"       context.serverResponse().end(buffer.getBytes());\n"
"   }\n"
"}\n"
msgstr ""

#. type: Labeled list
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:118
#, fuzzy, no-wrap
msgid "Default content types"
msgstr "默认的内容类型"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:121
#, fuzzy
msgid "Endpoints that return a String default to producing text/plain. We plan to do the same for JSON and other types."
msgstr "返回字符串的端点默认为生成text/plain。我们计划对JSON和其他类型的文件也这样做。"

#. type: Labeled list
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:122
#, fuzzy, no-wrap
msgid "CDI Integration"
msgstr "CDI整合"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:125
#, fuzzy
msgid "All injections via JAX-RS’s @Context are delegated to Arc. This provides users with the benefits of build time injection that Arc brings to all other parts of Quarkus."
msgstr "所有通过JAX-RS的@Context进行的注入都委托给了Arc。这为用户提供了构建时间注入的好处，Arc为Quarkus的所有其他部分带来了好处。"

#. type: Labeled list
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:126
#, fuzzy, no-wrap
msgid "Per-class Exception Mapper"
msgstr "每类异常映射器"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:129
#, fuzzy
msgid "In the JAX-RS specification there’s no way to handle exceptions differently for a specific JAX-RS Resource Class - all exception mapping is done in a global manner."
msgstr "在 JAX-RS 规范中，没有办法为特定的 JAX-RS 资源类处理不同的异常 - 所有的异常映射都是以全局方式进行的。"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:131
#, fuzzy
msgid "In RESTEasy Reactive however you can simply do something like:"
msgstr "然而，在RESTEasy Reactive中，你可以简单地做这样的事情。"

#. type: delimited block -
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:136
#, no-wrap
msgid ""
"@Path(\"first\")\n"
"public class FirstResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:149
#, no-wrap
msgid ""
"   @GET\n"
"   @Produces(\"text/plain\")\n"
"   public String throwsVariousExceptions(@RestQuery String name) {\n"
"       if (name.startsWith(\"IllegalArgument\")) {\n"
"           throw new IllegalArgumentException();\n"
"       } else if (name.startsWith(\"IllegalState\")) {\n"
"           throw new IllegalStateException(\"IllegalState\");\n"
"       } else if (name.startsWith(\"My\")) {\n"
"           throw new MyException();\n"
"       }\n"
"       throw new RuntimeException();\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:154
#, no-wrap
msgid ""
"   @ServerExceptionMapper({ IllegalStateException.class, IllegalArgumentException.class })\n"
"   public Response handleIllegal() {\n"
"       return Response.status(409).build();\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:161
#, no-wrap
msgid ""
"   @ServerExceptionMapper(MyException.class)\n"
"   public Response handleMy(SimpleResourceInfo simplifiedResourceInfo, MyException myException,\n"
"           ContainerRequestContext containerRequestContext, UriInfo uriInfo, HttpHeaders httpHeaders, Request request) {\n"
"       return Response.status(410).entity(uriInfo.getPath() + \"->\" + simplifiedResourceInfo.getMethodName()).build();\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:164
#, fuzzy
msgid "in order to customize the exception handling of certain Resource Classes."
msgstr "以便定制某些资源类的异常处理。"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:167
#, fuzzy
msgid "Also note that `@ServerExceptionMapper` can be used to handle exceptions in a global manner, just as JAX-RS does with `ExceptionMapper`.  To do that, simply annotate a method that does not belong to a Resource class with `@ServerExceptionMapper`."
msgstr "还要注意的是， `@ServerExceptionMapper` 可以被用来以全局的方式处理异常，就像 JAX-RS 使用 `ExceptionMapper` 一样。要做到这一点，只需用 `@ServerExceptionMapper` 注释一个不属于资源类的方法。"

#. type: Title ==
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:168
#, fuzzy, no-wrap
msgid "Do other extensions work with it?"
msgstr "其他扩展功能是否与之配合？"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:170
#, fuzzy
msgid "Absolutely!"
msgstr "绝对的!"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:172
#, fuzzy
msgid "The extensions that integrate with the existing quarkus-resteasy extension also integrate with quarkus-resteasy-reactive extensions. So you can continue to use _CDI_, _Security_, _Metrics_, _JSON_, _Qute_, _Bean Validation_, _OpenAPI_ and enjoy a great out of the box and complete development experience."
msgstr "与现有的quarkus-resteasy扩展集成的扩展也与quarkus-resteasy-reactive扩展集成。因此，你可以继续使用 _CDI_ 、 _Security_ 、 _Metrics_ 、 _JSON_ 、 _Qute_ 、 _Bean Validation_ 、 _OpenAPI_ ，并享受一个伟大的开箱即用和完整的开发体验。"

#. type: Title ==
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:173
#, fuzzy, no-wrap
msgid "How can I try it out?"
msgstr "我怎样才能试一试呢？"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:176
#, fuzzy
msgid "The project has landed in the Quarkus master branch, so if you’re eager to try it out, you'll have to build Quarkus from source by following https://github.com/quarkusio/quarkus/blob/master/CONTRIBUTING.md#building-master[this] and use the proper BOM and version following https://github.com/quarkusio/quarkus/blob/master/CONTRIBUTING.md#updating-the-version[this]."
msgstr "该项目已经登陆到Quarkus主分支，所以如果你急于尝试，你必须按照 link:https://github.com/quarkusio/quarkus/blob/master/CONTRIBUTING.md#building-master[这个] 从源码构建Quarkus，并按照 link:https://github.com/quarkusio/quarkus/blob/master/CONTRIBUTING.md#updating-the-version[这个] 使用适当的BOM和版本。"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:179
#, fuzzy
msgid "Furthermore, you can also use Maven Snapshots (as Quarkus snapshot builds are uploaded to Sonatype once a day), by specifying version `999-SNAPSHOT` as the Quarkus version and using `quarkus-bom` instead of `quarkus-universe-bom` as the BOM.  There are various ways to enable snapshot versions in Maven. https://stackoverflow.com/a/7717234/2504224[This] StackOverflow answer shows configuration that can be used either on a per project basis or globally."
msgstr "此外，您还可以使用Maven快照（因为Quarkus快照构建每天都会上传到Sonatype），方法是指定版本 `999-SNAPSHOT` 作为Quarkus版本，使用 `quarkus-bom` 而不是 `quarkus-universe-bom` 作为BOM。在Maven中启用快照版本有多种方法。StackOverflow link:https://stackoverflow.com/a/7717234/2504224[的] 答案显示了可以在每个项目中或全局中使用的配置。"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:181
#, fuzzy
msgid "The available RESTEasy Reactive extensions are:"
msgstr "可用的RESTEasy Reactive扩展是。"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:183
#, fuzzy
msgid "quarkus-resteasy-reactive"
msgstr "Quarkus-resteasy-reactive"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:184
#, fuzzy
msgid "quarkus-resteasy-reactive-jackson"
msgstr "quarkus-resteasy-reactive-jackson"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:185
#, fuzzy
msgid "quarkus-resteasy-reactive-jsonb"
msgstr "quarkus-resteasy-reactive-jsonb"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:186
#, fuzzy
msgid "quarkus-resteasy-reactive-qute"
msgstr "Quarkus-resteasy-reactive-qute"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:188
#, fuzzy
msgid "These extensions are the equivalent to the existing _quarkus-resteasy_* extensions, so simply switching from _quarkus-resteasy-jackson_ to _quarkus-resteasy-reactive-jackson_ in your application should allow you to try RESTEasy Reactive with Jackson integration."
msgstr "这些扩展等同于现有的 _quarkus-resteasy_ *扩展，因此只要在你的应用程序中从 _quarkus-resteasy-jackson_ 切换到 _quarkus-resteasy-reactive-jackson_ ，就应该可以尝试RESTEasy Reactive与Jackson的集成。"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:190
#, fuzzy
msgid "Furthermore, the _quarkus-jaxrs-client_ extension can be used if you need to use the JAX-RS client (this is not the declarative MicroProfile REST Client, but the programmatic client specified by the JAX-RS spec)."
msgstr "此外，如果你需要使用JAX-RS客户端（这不是声明性的MicroProfile REST客户端，而是JAX-RS规范指定的程序化客户端），可以使用 _quarkus-jaxrs-client_ 扩展。"

#. type: Title ==
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:191
#, fuzzy, no-wrap
msgid "What should I be careful of?"
msgstr "我应该注意什么？"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:195
#, fuzzy
msgid "The first thing to note is that for the time being this set of extensions is currently considered experimental. Although the project passes almost the entirety of the JAX-RS TCK, it’s just the first release, so keep in mind that it might have more bugs than a typical battle hardened library, while some of the new APIs and SPIs might break.  Despite this being a first release, we do envision this work becoming the default REST layer for Quarkus in the near future."
msgstr "首先要注意的是，这套扩展目前被认为是实验性的。尽管该项目几乎通过了JAX-RS TCK的全部内容，但它只是第一个版本，所以请记住，它可能比典型的加固库有更多的bug，而一些新的API和SPI可能会损坏。尽管这是第一个版本，我们确实设想这项工作在不久的将来会成为Quarkus的默认REST层。"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:198
#, fuzzy
msgid "As mentioned in the new features section, requests are served on the event-loop threads by default. This ensures maximum throughput, but also means that no blocking work should be performed on these threads. If you use Blocking IO (for example by accessing a database with Hibernate Panache), be sure to use the `@Blocking` annotation on either the method or the class.  This will ensure that the request will be served on a worker thread. It goes without saying that we are also very interested in hearing your feedback about this default."
msgstr "正如在新特性部分提到的，请求默认在事件循环线程上提供服务。这确保了最大的吞吐量，但也意味着不应该在这些线程上进行阻塞工作。如果你使用阻塞式IO（例如通过使用Hibernate Panache访问数据库），一定要在方法或类上使用 `@Blocking` 注解。这将确保请求将在一个工作线程上被提供。不言而喻，我们也非常希望听到你对这个默认的反馈。"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:201
#, fuzzy
msgid "There are no docs yet. Docs will be added before the formal 1.11 release and will be progressively enhanced.  This email should contain all the information you need to get started, but should you run into any trouble, we are available to help on any of the usual channels (Zulip chat, mailing list, GitHub Issues, StackOverflow)."
msgstr "目前还没有任何文档。文档将在1.11版本正式发布前添加，并将逐步加强。这封邮件应该包含所有你需要开始使用的信息，但如果你遇到任何麻烦，我们可以在任何常规渠道（Zulip聊天、邮件列表、GitHub问题、StackOverflow）提供帮助。"

#. type: Title ==
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:202
#, fuzzy, no-wrap
msgid "What JAX-RS features are missing?"
msgstr "JAX-RS缺少哪些功能？"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:206
#, fuzzy
msgid "We decided to focus on what most users need from a modern REST layer instead of implementing every single feature required by the JAX-RS TCK.  So in that vein, there is no XML support in RESTEasy Reactive, while various arcane features of the spec are also not supported (like _javax.activation.DataSource_, _javax.annotation.ManagedBean_, _javax.ws.rs.core.StreamingOutput_)."
msgstr "我们决定把重点放在大多数用户对现代REST层的需求上，而不是实现JAX-RS TCK要求的每一项功能。因此，在这种情况下，RESTEasy Reactive中没有对XML的支持，同时也不支持规范中的各种神秘功能（如 _javax.activation.DataSource_ 、 _javax.annotation.ManagedBean_ 和 _javax.ws.rs.core.StreamingOutput_ ）。"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:208
#, fuzzy
msgid "Furthermore, worth noting is that the first release will not contain an implementation of the MicroProfile REST Client based on the new JAX-RS Client (for which there is a dedicated extension). This will most likely change in the near future."
msgstr "此外，值得注意的是，第一个版本将不包含基于新的JAX-RS客户端的MicroProfile REST客户端的实现（为此有一个专门的扩展）。这很可能会在不久的将来发生变化。"

#. type: Title ==
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:210
#, fuzzy, no-wrap
msgid "What's next?"
msgstr "下一步是什么？"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:212
#, fuzzy
msgid "Although the new extensions will be available with the regular _1.11_ release, we are considering doing a `1.11.0.Alpha1` release to make it as easy as possible for you to try out the new extensions and provide early feedback."
msgstr "虽然新的扩展将与常规的 _1.11_ 版本一起发布，但我们正在考虑做一个 `1.11.0.Alpha1` ，以使你尽可能容易地尝试新的扩展并提供早期反馈。"

#. type: Plain text
#: upstream/_posts/2020-12-08-resteasy-reactive.adoc:213
msgid "We are very much looking forward to hearing your thoughts about and experience using RESTEasy Reactive in Quarkus and plan to put it to good use to further improve the project."
msgstr ""
