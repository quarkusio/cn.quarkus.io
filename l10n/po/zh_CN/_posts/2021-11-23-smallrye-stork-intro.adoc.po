# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2021-11-23-smallrye-stork-intro.adoc
#, fuzzy, no-wrap
msgid "SmallRye Stork meets Quarkus"
msgstr "小黑麦鹳遇见夸克斯"

#. type: YAML Front Matter: synopsis
#: _posts/2021-11-23-smallrye-stork-intro.adoc
#, fuzzy, no-wrap
msgid "Introduction to customizable service discovery and client-side load-balancing with Quarkus and SmallRye Stork"
msgstr "用Quarkus和SmallRye Stork介绍可定制的服务发现和客户端负载平衡"

#. type: Plain text
#: _posts/2021-11-23-smallrye-stork-intro.adoc
#, fuzzy
msgid "Last week, the https://www.youtube.com/watch?v=l3mLKU3wR2A[Quarkus Insights] spotlighted a new project called https://smallrye.io/smallrye-stork[SmallRye Stork] and its integration in Quarkus. In this blog post, we're going to give you a concise introduction to Stork."
msgstr "上周， link:https://www.youtube.com/watch?v=l3mLKU3wR2A[Quarkus Insights] 关注了一个名为 link:https://smallrye.io/smallrye-stork[SmallRye Stork] 的新项目以及它在Quarkus中的整合。在这篇博文中，我们将对Stork做一个简明的介绍。"

#. type: Plain text
#: _posts/2021-11-23-smallrye-stork-intro.adoc
#, fuzzy
msgid "This post has been updated to use the `quarkus.` prefix when configuring stork properties. This prefix is required since Quarkus 2.8."
msgstr "这篇文章已经更新，在配置stork属性时使用 `quarkus.` 前缀。从Quarkus 2.8开始，这个前缀是必须的。"

#. type: Title ==
#: _posts/2021-11-23-smallrye-stork-intro.adoc
#, fuzzy, no-wrap
msgid "What's the problem?"
msgstr "有什么问题呢？"

#. type: Plain text
#: _posts/2021-11-23-smallrye-stork-intro.adoc
#, fuzzy
msgid "Nowadays, systems we build consist of numerous applications, often called microservices. The system's overall behavior emerges from the interactions between all these services. So, a microservice is likely going to invoke other ones. But here is the catch. In dynamic environments, such as Kubernetes, or the Cloud, the locations of these services may change over time. So, how does our microservice locate the services it needs to call?"
msgstr "如今，我们构建的系统由许多应用程序组成，通常被称为微服务。系统的整体行为是由所有这些服务之间的互动产生的。因此，一个微服务很可能会调用其他服务。但这里有一个问题。在动态环境中，如Kubernetes或云，这些服务的位置可能会随着时间而改变。那么，我们的微服务如何定位它需要调用的服务？"

#. type: Plain text
#: _posts/2021-11-23-smallrye-stork-intro.adoc
#, fuzzy
msgid "Service discovery solves that problem, as it provides a mechanism to register and find the services. But it leads to another issue. What happens when there are multiple instances of the same service? How does a microservice select the right one? This scenario typically occurs when there are multiple replicas or versions available at the same time. Thus, in addition to service discovery, we need a way to select the right one."
msgstr "服务发现解决了这个问题，因为它提供了一个注册和寻找服务的机制。但它导致了另一个问题。当同一服务有多个实例时，会发生什么？微服务如何选择正确的一个？这种情况通常发生在有多个副本或版本同时可用时。因此，除了服务发现之外，我们还需要一种方法来选择正确的服务。"

#. type: Plain text
#: _posts/2021-11-23-smallrye-stork-intro.adoc
#, fuzzy
msgid "Some environments, e.g., Kubernetes, provide ways to discover service locations and load-balance the traffic. Some do not. In some cases, the capabilities of the environment are not sufficient for the needs of the system."
msgstr "一些环境，例如Kubernetes，提供了发现服务位置和负载平衡流量的方法。有些则没有。在某些情况下，环境的能力不足以满足系统的需求。"

#. type: Plain text
#: _posts/2021-11-23-smallrye-stork-intro.adoc
#, fuzzy
msgid "To address these issues, we have created https://smallrye.io/smallrye-stork[SmallRye Stork]. Stork provides both features:"
msgstr "为了解决这些问题，我们创建了 link:https://smallrye.io/smallrye-stork[SmallRye Stork] 。Stork提供了这两种功能。"

#. type: Plain text
#: _posts/2021-11-23-smallrye-stork-intro.adoc
#, fuzzy
msgid "service discovery - it lets you locate the service you need to call;"
msgstr "服务发现 - 它让你找到你需要调用的服务。"

#. type: Plain text
#: _posts/2021-11-23-smallrye-stork-intro.adoc
#, fuzzy
msgid "service selection - it lets you select the right one when there is more than one instance"
msgstr "服务选择--当有多个实例时，它让你选择正确的实例。"

#. type: Title ==
#: _posts/2021-11-23-smallrye-stork-intro.adoc
#, fuzzy, no-wrap
msgid "What is Stork?"
msgstr "什么是斯托克？"

#. type: Plain text
#: _posts/2021-11-23-smallrye-stork-intro.adoc
#, fuzzy
msgid "SmallRye Stork is a _service discovery and client-side load-balancing framework_."
msgstr "SmallRye Stork是一个 _服务发现和客户端负载平衡框架_ 。"

#. type: Plain text
#: _posts/2021-11-23-smallrye-stork-intro.adoc
#, fuzzy
msgid "Out of the box, it provides integrations with Hashicorp Consul, Eureka, and Kubernetes and brings in a couple of load-balancer (handling the service selection) implementations, such as round-robin. But the most significant strength of Stork is its extensibility. You can plug your own service discovery mechanism or implement your own, maybe business-related, service selection strategy."
msgstr "开箱即用，它提供了与Hashicorp Consul、Eureka和Kubernetes的集成，并带来了一些负载平衡器（处理服务选择）的实现，如轮回。但Stork最重要的优势是其可扩展性。你可以插入你自己的服务发现机制，或者实现你自己的，也许与业务有关的服务选择策略。"

#. type: Title ==
#: _posts/2021-11-23-smallrye-stork-intro.adoc
#, fuzzy, no-wrap
msgid "Stork and Quarkus"
msgstr "鹳鸟和夸克斯"

#. type: Plain text
#: _posts/2021-11-23-smallrye-stork-intro.adoc
#, fuzzy
msgid "As of Quarkus 2.5.0.Final, Quarkus gRPC and the Quarkus Reactive REST Client can use Stork to handle the discovery and the selection of the services."
msgstr "从Quarkus 2.5.0.Final开始，Quarkus gRPC和Quarkus Reactive REST客户端可以使用Stork来处理服务的发现和选择。"

#. type: Plain text
#: _posts/2021-11-23-smallrye-stork-intro.adoc
#, fuzzy
msgid "You just need to configure how you want to locate and select your services. The rest will be handled by the clients directly."
msgstr "你只需要配置你想如何定位和选择你的服务。其余的将由客户直接处理。"

#. type: Plain text
#: _posts/2021-11-23-smallrye-stork-intro.adoc
#, fuzzy
msgid "For example, to use Stork to determine the actual address for REST Client Reactive, set the scheme of your client's URI to `stork`, and the hostname of the URI to the name of the Stork service. If your client's `configKey` is `my-client`, to use it with Hashicorp Consul and the `round-robin` load balancer, put the following in your `application.properties:"
msgstr "例如，为了使用Stork来确定REST Client Reactive的实际地址，将你的客户端URI的方案设置为 `stork` ，URI的主机名设置为Stork服务的名称。如果你的客户端的 `configKey` 是 `my-client` ，为了与Hashicorp Consul和 `round-robin` 负载平衡器一起使用，在你的`application.properties中放入以下内容。"

#. type: Block title
#: _posts/2021-11-23-smallrye-stork-intro.adoc
#, fuzzy, no-wrap
msgid "application.properties"
msgstr "应用程序属性"

#. type: Plain text
#: _posts/2021-11-23-smallrye-stork-intro.adoc
#, fuzzy
msgid "The http://smallrye.io/smallrye-stork/1.0.0.Beta1/quarkus/[project's documentation] describes step by step how to use Stork with the REST Client, using Consul and round-robin load balancer as examples."
msgstr "该 link:http://smallrye.io/smallrye-stork/1.0.0.Beta1/quarkus/[项目文档] 逐步描述了如何使用Stork与REST客户端，以Consul和round-robin负载平衡器为例。"

#. type: Plain text
#: _posts/2021-11-23-smallrye-stork-intro.adoc
#, fuzzy
msgid "Service selection can be pretty advanced. For instance, the least-response-time strategy monitors the service calls to select the _fastest_ service instance."
msgstr "服务选择可以相当先进。例如，最小响应时间策略监测服务调用，以选择 _最快的_ 服务实例。"

#. type: Plain text
#: _posts/2021-11-23-smallrye-stork-intro.adoc
#, fuzzy
msgid "In Quarkus 2.5, the gRPC extension does not propagate statistics of the calls, such as response time or encountered errors. Therefore, a load balancer that relies on this data, such as least-response-time, will not work correctly. We are working on it and hope to have it in Quarkus 2.6."
msgstr "在Quarkus 2.5中，gRPC扩展并不传播调用的统计数据，如响应时间或遇到的错误。因此，依赖这些数据的负载均衡器，如最小响应时间，将不能正常工作。我们正在努力解决这个问题，并希望在Quarkus 2.6中实现。"

#. type: Title ===
#: _posts/2021-11-23-smallrye-stork-intro.adoc
#, fuzzy, no-wrap
msgid "A demo and a lot more!"
msgstr "一个演示和更多的东西!"

#. type: Plain text
#: _posts/2021-11-23-smallrye-stork-intro.adoc
#, fuzzy
msgid "Take a look at the https://www.youtube.com/watch?v=l3mLKU3wR2A[70th episode of Quarkus Insights] for a more detailed explanation and examples."
msgstr "请看 link:https://www.youtube.com/watch?v=l3mLKU3wR2A[第70集《Quarkus Insights] 》，了解更详细的解释和例子。"

#. type: Plain text
#: _posts/2021-11-23-smallrye-stork-intro.adoc
#, fuzzy
msgid "The demo used https://github.com/michalszynkiewicz/rest-client-reactive-stork[this project] as the client-side, each of the steps has a corresponding commit in the `main` branch. The backend services were instances of https://github.com/michalszynkiewicz/configurable-rest-service[this project], and the custom service discovery server implementation can be found https://github.com/michalszynkiewicz/simple-service-discovery-server[here]."
msgstr "该演示使用 link:https://github.com/michalszynkiewicz/rest-client-reactive-stork[这个项目] 作为客户端，每个步骤在 `main` 分支都有相应的提交。后台服务是 link:https://github.com/michalszynkiewicz/configurable-rest-service[这个项目] 的实例，自定义服务发现服务器的实现可以 link:https://github.com/michalszynkiewicz/simple-service-discovery-server[在这里] 找到。"

#. type: Title ==
#: _posts/2021-11-23-smallrye-stork-intro.adoc
#, no-wrap
msgid "Conclusion"
msgstr "解决方案"

#: _posts/2021-11-23-smallrye-stork-intro.adoc
#, fuzzy
msgid ""
"This post briefly introduces SmallRye Stork and its Quarkus integration. Stork provides a way to locate and select services. It's simple and customizable.\n"
"We will cover Stork features in more detail shortly."
msgstr "这篇文章简要介绍了 SmallRye Stork 及其与 Quarkus 的集成。Stork 提供了一种定位和选择服务的方法。它既简单又可定制。我们稍后将详细介绍 Stork 的功能。"

#. type: Plain text
#: _posts/2021-11-23-smallrye-stork-intro.adoc
#, fuzzy
msgid "If you have ideas for new features, or encounter a bug, please let us know by creating a https://github.com/smallrye/smallrye-stork/issues[GitHub issue]."
msgstr "如果您有新功能的想法，或遇到错误，请创建 link:https://github.com/smallrye/smallrye-stork/issues[GitHub 问题] 告诉我们。"
