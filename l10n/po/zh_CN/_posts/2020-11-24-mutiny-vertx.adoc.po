# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:1
#, fuzzy, no-wrap
msgid "cescoffier"
msgstr "鹤壁市"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:1
#, fuzzy, no-wrap
msgid "2020-11-24"
msgstr "2020-11-24"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "职位"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:1
#, fuzzy, no-wrap
msgid "Discover the Mutiny variant of the Vert.x API"
msgstr "发现Vert.x API的突变体"

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:1
#, fuzzy, no-wrap
msgid "reactive mutiny vert.x"
msgstr "反应性叛变Vert.X"

#. type: YAML Front Matter: title
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:1
#, fuzzy, no-wrap
msgid "Mutiny and the Reactiverse"
msgstr "叛变与Reactiverse"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:16
#, fuzzy
msgid "I had the question multiple times: how do I use Eclipse Vert.x in Quarkus? Indeed, you can use Vert.x in Quarkus.  You can deploy _verticles_, communicate with the event bus, or use anything from the Vert.x ecosystem.  But, you can also use the Mutiny variant of Vert.x in Quarkus, and get a seamless experience with the other reactive APIs offered by Quarkus.  Several posts have already mentioned this, but it deserves a specific blog post.  So, here we are."
msgstr "我有过多次这样的问题：如何在Quarkus中使用Eclipse Vert.x？的确，你可以在Quarkus中使用Vert.x。你可以部署 _顶点_ ，与事件总线通信，或者使用Vert.x生态系统中的任何东西。但是，你也可以在Quarkus中使用Vert.x的Mutiny变体，并获得与Quarkus提供的其他反应式API的无缝体验。有几篇文章已经提到了这一点，但它值得专门写一篇博文。所以，我们来了。"

#. type: Title ==
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:17
#, fuzzy, no-wrap
msgid "Eclipse Vert.x"
msgstr "Eclipse Vert.x"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:24
#, fuzzy
msgid "https://vertx.io[Vert.x] is a toolkit to build reactive applications.  The Vert.x ecosystem is enormous.  From HTTP and data access abilities to messaging clients via microservice and security facilities, the Vert.x ecosystem is remarkably diverse and versatile.  To understand that variety, just check the https://vertx.io/docs/[Vert.x documentation].  That makes Vert.x popular in many areas such as web applications, IoT gateways, banking applications and so on."
msgstr "link:https://vertx.io[Vert.x] 是一个构建反应式应用程序的工具包。Vert.x的生态系统是巨大的。从HTTP和数据访问能力到通过微服务和安全设施的消息传递客户端，Vert.x的生态系统是非常多样化和通用的。要了解这种多样性，只需查看 link:https://vertx.io/docs/[Vert.x的文档] 。这使得Vert.x在许多领域都很受欢迎，如网络应用、物联网网关、银行应用等。"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:27
#, fuzzy
msgid "As you may know, Quarkus is based on Vert.x.  Under the hood, there is a managed Vert.x instance that powers the rest of Quarkus."
msgstr "你可能知道，Quarkus是基于Vert.x的。在引擎盖下，有一个管理的Vert.x实例为Quarkus的其他部分提供动力。"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:29
#, fuzzy
msgid "image:/assets/images/posts/mutiny-vertx/architecture.png[width=50%]"
msgstr "image:/assets/images/posts/mutiny-vertx/architecture.png[alt=\"architecture\", width=\"50%\"]"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:32
#, fuzzy
msgid "When Quarkus serves a HTTP endpoint, under the hood, there is a Vert.x HTTP server handling the request and response.  That's also true for messaging, gRPC and almost any I/O."
msgstr "当Quarkus提供一个HTTP端点时，在引擎盖下，有一个Vert.x HTTP服务器处理请求和响应。这对于消息传递、gRPC和几乎所有的I/O也是如此。"

#. type: Title ==
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:33
#, fuzzy, no-wrap
msgid "The Vert.x \"bare\" API and friends"
msgstr "Vert.x的 \"裸 \"API和朋友们"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:37
#, fuzzy
msgid "Vert.x provides multiple APIs.  Let's focus on the \"bare\" one for now."
msgstr "Vert.x提供了多个API。现在我们先关注一下 \"裸 \"的那个。"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:40
#, fuzzy
msgid "Following the reactive nature of Vert.x, the API contains mostly asynchronous methods.  These methods are following a syntax convention:"
msgstr "遵循Vert.x的反应式特性，该API主要包含异步方法。这些方法都遵循一个语法惯例。"

#. type: delimited block -
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:46
#, no-wrap
msgid ""
"public void doSomething(param1, param2, Handler<AsyncResult<T>> handler) {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:52
#, fuzzy
msgid "The interesting part is the last parameter.  It's a function, a callback to be more precise, that gets called when the operation completes or fails.  Indeed, the asynchronous nature of Vert.x does not allow using `try/catch` blocks.  So you need to pass a continuation callback, invoked with the outcome."
msgstr "有趣的部分是最后一个参数。它是一个函数，更准确的说是一个回调，当操作完成或失败时被调用。事实上，Vert.x的异步特性不允许使用 `try/catch` 块。所以你需要传递一个延续性的回调，用结果来调用。"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:55
#, fuzzy
msgid "`AsyncResult` is a structure capturing this outcome.  It contains the result (of type `<T>`) produced by the operation, or the failure if it failed."
msgstr " `AsyncResult` 是一个捕捉这一结果的结构。它包含操作产生的结果（类型为 ），如果操作失败，则包含失败。 `<T>` "

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:57
#, fuzzy
msgid "Let's take an example:"
msgstr "让我们举一个例子。"

#. type: delimited block -
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:68
#, no-wrap
msgid ""
"vertx.fileSystem()\n"
"    .readFile(\"my-file.txt\", ar -> {\n"
"        if (ar.failed()) {\n"
"            System.out.println(\"D'oh! Cannot read the file: \" + ar.cause());\n"
"        } else {\n"
"            System.out.println(\"File content is: \" + ar.result());\n"
"        }\n"
"    });\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:74
#, fuzzy
msgid "This code reads a file, and as it's an asynchronous operation, invokes the callback when the file is read.  The `readFile` method reads the complete content of the file and accumulates it in a _buffer_.  The callback receives the asynchronous result containing either the file's content (`ar.result()`) or a failure.  Vert.x invokes this callback when the operation has either completed or failed."
msgstr "这段代码读取一个文件，由于它是一个异步操作，所以当文件被读取时调用回调。 `readFile` 方法读取了文件的全部内容，并将其累积到一个 _缓冲区_ 中。回调接收异步结果，包含文件的内容（ `ar.result()` ）或失败。当操作完成或失败时，Vert.x会调用这个回调。"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:81
#, fuzzy
msgid "Vert.x also supports streams thanks to the `ReadStream` and `WriteStream` classes.  A `ReadStream` represents a stream of data you can read.  So you can attach a callback invoked on every item traversing the stream.  A `WriteStream` is a data source.  You can push items to a `WriteStream.` These items will be consumed by a `ReadStream`:"
msgstr "Vert.x也支持流，这要感谢 `ReadStream` 和 `WriteStream` 类。一个 `ReadStream` 表示一个你可以读取的数据流。所以你可以附加一个回调，在流的每个项目上调用。一个 `WriteStream` 是一个数据源。你可以向 `WriteStream.` 推送项目，这些项目将被 `ReadStream` 消费。"

#. type: delimited block -
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:103
#, no-wrap
msgid ""
"vertx.fileSystem()\n"
"    .open(\"my-file.txt\", new OpenOptions().setRead(true), ar -> {\n"
"        if (ar.failed()) {\n"
"            System.out.println(\n"
"                    \"D'oh! Cannot read the file: \" + ar.cause()\n"
"            );\n"
"        } else {\n"
"            AsyncFile file = ar.result();\n"
"            // AsyncFile is a read stream, we can read from it:\n"
"            file\n"
"                    .exceptionHandler(t ->\n"
"                        System.out.println(\"Failure while reading the file: \" + t)\n"
"                    )\n"
"                    // Reads the file chunk by chunk\n"
"                    .handler(buffer ->\n"
"                        System.out.println(\"Received buffer: \" + buffer)\n"
"                    );\n"
"        }\n"
"    });\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:107
#, fuzzy
msgid "Vert.x streams do not implement Reactive Streams.  Vert.x provides a different back-pressure protocol."
msgstr "Vert.x的流不实现Reactive Streams。Vert.x提供了一个不同的背压协议。"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:112
#, fuzzy
msgid "Why are these API shaping rules important? Vert.x does not provide a single API.  The \"bare\" API presented above is just one of the proposed API.  It also provides API in Kotlin, API for RX Java, and so on."
msgstr "为什么这些API整形规则很重要？Vert.x并没有提供单一的API。上面介绍的 \"裸 \"API只是建议的API中的一个。它还提供了Kotlin的API，RX Java的API，等等。"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:116
#, fuzzy
msgid "These APIs are **generated**.  Vert.x provides a code generator that _ translates_ the Vert.x \"bare\" API into the other APIs.  Because all methods are well-formed, the generator understands how they should be adapted."
msgstr "这些API是 *生成的* 。Vert.x提供了一个代码生成器，可以把Vert.x的 \"裸 \"API翻译成其他API。因为所有的方法都是格式化的，所以生成器理解它们应该如何被调整。"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:118
#, fuzzy
msgid "image:/assets/images/posts/mutiny-vertx/generation.png[]"
msgstr "image:/assets/images/posts/mutiny-vertx/generation.png[alt=\"generation\"]"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:121
#, fuzzy
msgid "The generated code exposes a different API; each method delegating to the \"bare\" API.  Asynchronous methods and streams can follow different transformations, so the resulting API uses the right idioms."
msgstr "生成的代码暴露了一个不同的API；每个方法都委托给 \"裸 \"API。异步方法和流可以遵循不同的转换，所以生成的API使用了正确的习语。"

#. type: Title ==
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:122
#, fuzzy, no-wrap
msgid "The Vert.x Mutiny API"
msgstr "Vert.x Mutiny API"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:127
#, fuzzy
msgid "Mutiny is an event-driven reactive programming library.  It's not related to Vert.x.  However, we have written a code generator that generates the Mutiny variant for the Vert.x API:"
msgstr "Mutiny是一个事件驱动的反应式编程库。它与Vert.x没有关系。不过，我们已经写了一个代码生成器，可以为Vert.x的API生成Mutiny的变体。"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:129
#, fuzzy
msgid "image:/assets/images/posts/mutiny-vertx/mutiny.png[]"
msgstr "image:/assets/images/posts/mutiny-vertx/mutiny.png[alt=\"mutiny\"]"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:131
#, fuzzy
msgid "The transformations are straightforward:"
msgstr "转变是直截了当的。"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:133
#, fuzzy
msgid "`io.vertx` package => `io.vertx.mutiny` package"
msgstr " `io.vertx` 包⇒ 包 `io.vertx.mutiny` "

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:134
#, fuzzy
msgid "Asynchronous methods => method returning a `Uni<T>`"
msgstr "异步方法⇒方法返回一个 `Uni<T>` "

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:135
#, fuzzy
msgid "`ReadStreams<T>` => can be consumed as `Multi<T>`"
msgstr " `ReadStreams<T>` ⇒可以被消耗为 `Multi<T>` "

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:136
#, fuzzy
msgid "`WriteStreams<T>` => can be consumed as Reactive Streams `Subscriber<T>`"
msgstr " `WriteStreams<T>` ⇒可以作为反应式流来消费 `Subscriber<T>` "

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:138
#, fuzzy
msgid "It also adapts the Vert.x back pressure protocol to Reactive Streams, as Mutiny implements Reactive Streams."
msgstr "它还将Vert.x的背压协议改编为反应式流，因为Mutiny实现了反应式流。"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:140
#, fuzzy
msgid "For example, the first example from above becomes:"
msgstr "例如，上面的第一个例子变成了。"

#. type: delimited block -
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:146
#, no-wrap
msgid ""
"Uni<Buffer> uni = vertx.fileSystem().readFile(\"my-file.txt\");\n"
"uni.subscribe()\n"
"  .with(it -> System.out.println(\"File content is: \" + it));\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:150
#, fuzzy
msgid "One difference between the two APIs is related to laziness. The Vert.x \"bare\" API triggers the operation as soon as the method is called.  The Mutiny variant expects a subscription to trigger the operation."
msgstr "两个API之间的一个区别是与懒惰有关。Vert.x的 \"裸 \"API在方法被调用时就会触发操作。而Mutiny的变体则期望通过订阅来触发操作。"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:152
#, fuzzy
msgid "The stream example from above becomes:"
msgstr "上面的流例子变成了。"

#. type: delimited block -
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:164
#, no-wrap
msgid ""
"Uni<AsyncFile> uni = vertx.fileSystem()\n"
"        .open(\"my-file.txt\", new OpenOptions().setRead(true));\n"
"uni\n"
"    // Gets a Multi to read the file:\n"
"    .onItem().transformToMulti(asyncFile -> asyncFile.toMulti())\n"
"    // Gets the buffers one by one:\n"
"    .subscribe().with(\n"
"       buffer -> System.out.println(\"Received buffer: \" + buffer)\n"
");\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:166
#, fuzzy, no-wrap
msgid "A bit more than this"
msgstr "比这更多一点"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:170
#, fuzzy
msgid "The Mutiny variant does not only apply the rules exposed in the previous section.  For asynchronous methods, it also provides:"
msgstr "Mutiny变体不仅应用了上一节中暴露的规则。对于异步方法，它还提供了。"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:172
#, fuzzy
msgid "`xAndAwait()` methods - blocks the caller thread until the outcome is received. In the case of a failure, throws a `RuntimeException`"
msgstr " `xAndAwait()` 方法 - 阻断调用者的线程，直到收到结果。在失败的情况下，抛出一个 `RuntimeException` "

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:173
#, fuzzy
msgid "`xAndForget()` methods - triggers the operation, discard the outcome"
msgstr " `xAndForget()` 方法 - 触发操作，丢弃结果"

#. type: delimited block -
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:178
#, no-wrap
msgid ""
"// Read the content of the file in a blocking manner:\n"
"Buffer content   = vertx.fileSystem().readFileAndAwait(\"my-file.txt\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:184
#, no-wrap
msgid ""
"// Open and close the file\n"
"// Closing the file is an asynchronous operation (returning a Uni).\n"
"// We trigger the operation and discard the outcome\n"
"vertx.fileSystem().open(\"my-file.txt\", new OpenOptions().setRead(true))\n"
"    .subscribe().with(file -> file.closeAndForget());\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:186
#, fuzzy, no-wrap
msgid "Where can we find this API?"
msgstr "我们在哪里可以找到这个API？"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:190
#, fuzzy
msgid "At the moment of writing, we only provide Vert.x core and Vert.x clients (MongoDB, Redis, Web client, Mqtt, and so on).  We are extending the support to cover the full Vert.x stack."
msgstr "在撰写本文时，我们只提供Vert.x核心和Vert.x客户端（MongoDB、Redis、Web客户端、Mqtt等）。我们正在扩展支持，以覆盖整个Vert.x堆栈。"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:193
#, fuzzy
msgid "To use the Mutiny clients, you need to add the right dependency to your project.  Browse https://search.maven.org/search?q=a:smallrye-mutiny-vertx*[the list of dependency] to pick the one you need."
msgstr "为了使用Mutiny客户端，你需要在你的项目中添加正确的依赖性。浏览 link:https://search.maven.org/search?q=a:smallrye-mutiny-vertx*[依赖关系列表] ，挑选你需要的那个。"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:195
#, fuzzy
msgid "For example, to you use the Mutiny variant of the Vert.x Web client, add the following dependency:"
msgstr "例如，如果你使用Vert.x Web客户端的Mutiny变体，添加以下依赖关系。"

#. type: delimited block -
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:203
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.smallrye.reactive</groupId>\n"
"  <artifactId>smallrye-mutiny-vertx-web-client</artifactId>\n"
"  <version>...</version>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:206
#, fuzzy
msgid "Once you have the dependency, just create the web client instance:"
msgstr "一旦你有了依赖关系，只需创建网络客户端实例。"

#. type: delimited block -
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:210
#, no-wrap
msgid "@Inject Vertx vertx; // Inject the managed io.vertx.mutiny.core.Vertx instance\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:212
#, no-wrap
msgid "private WebClient client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:220
#, no-wrap
msgid ""
"@PostConstruct\n"
"public void init() {\n"
"  client = WebClient.create(vertx, new WebClientOptions()\n"
"    .setDefaultHost(\"localhost\")\n"
"    .setDefaultPort(8082)\n"
"  );\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:226
#, no-wrap
msgid ""
"private Uni<String> call(String path) {\n"
"  return client\n"
"    .get(path).send()\n"
"    .onItem().transform(HttpResponse::bodyAsString);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:229
msgid "Something missing? Open an issue on https://github.com/smallrye/smallrye-reactive-utils/issues[SmallRye Reactive Utils]."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:231
msgid "The Javadoc is available http://smallrye.io/smallrye-reactive-utils/apidocs/[here]."
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:232
#, no-wrap
msgid "The road ahead: Vert.x 4!"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:236
msgid "Vert.x 4 is coming soon! We are already working in Quarkus and the different satellite projects to migrate.  With Vert.x 4, a new generator has been implemented (following the same code generation approach), paving the road to a smooth upgrade."
msgstr ""
