# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy, no-wrap
msgid "Mutiny and the Reactiverse"
msgstr "叛变与Reactiverse"

#. type: YAML Front Matter: synopsis
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy, no-wrap
msgid "Discover the Mutiny variant of the Vert.x API"
msgstr "发现Vert.x API的突变体"

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"I had the question multiple times: how do I use Eclipse Vert.x in Quarkus?\n"
"Indeed, you can use Vert.x in Quarkus.\n"
"You can deploy _verticles_, communicate with the event bus, or use anything from the Vert.x ecosystem.\n"
"But, you can also use the Mutiny variant of Vert.x in Quarkus, and get a seamless experience with the other reactive APIs offered by Quarkus.\n"
"Several posts have already mentioned this, but it deserves a specific blog post.\n"
"So, here we are."
msgstr "我曾多次遇到这样的问题：如何在 Quarkus 中使用 Eclipse Vert.x？事实上，你可以在 Quarkus 中使用 Vert.x。你可以部署 _垂直组件_ ，与事件总线通信，或者使用 Vert.x 生态系统中的任何东西。不过，你也可以在 Quarkus 中使用 Vert.x 的 Mutiny 变体，并获得与 Quarkus 提供的其他反应式 API 的无缝体验。有几篇文章已经提到了这一点，但这值得专门写一篇博文。所以，我们在这里。"

#. type: Title ==
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy, no-wrap
msgid "Eclipse Vert.x"
msgstr "Eclipse Vert.x"

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"https://vertx.io[Vert.x] is a toolkit to build reactive applications.\n"
"The Vert.x ecosystem is enormous.\n"
"From HTTP and data access abilities to messaging clients via microservice and security facilities, the Vert.x ecosystem is remarkably diverse and versatile.\n"
"To understand that variety, just check the https://vertx.io/docs/[Vert.x documentation].\n"
"That makes Vert.x popular in many areas such as web applications, IoT gateways, banking applications and so on."
msgstr "link:https://vertx.io[Vert.x] 是构建反应式应用程序的工具包。Vert.x 生态系统非常庞大。从 HTTP 和数据访问能力到消息客户端，再到微服务和安全设施，Vert.x 生态系统非常多样化，用途广泛。要了解其多样性，只需查看 link:https://vertx.io/docs/[Vert.x 文档] 即可。这使得 Vert.x 在网络应用、物联网网关、银行应用等多个领域大受欢迎。"

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"As you may know, Quarkus is based on Vert.x.\n"
"Under the hood, there is a managed Vert.x instance that powers the rest of Quarkus."
msgstr "如你所知，Quarkus 基于 Vert.x。在引擎盖下，有一个可管理的 Vert.x 实例为 Quarkus 的其他部分提供动力。"

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "image:/assets/images/posts/mutiny-vertx/architecture.png[width=50%]"
msgstr "image:/assets/images/posts/mutiny-vertx/architecture.png[alt=\"architecture\", width=\"50%\"]"

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"When Quarkus serves a HTTP endpoint, under the hood, there is a Vert.x HTTP server handling the request and response.\n"
"That's also true for messaging, gRPC and almost any I/O."
msgstr "当 Quarkus 为 HTTP 端点提供服务时，在引擎盖下有一个 Vert.x HTTP 服务器在处理请求和响应。消息传递、gRPC 和几乎所有 I/O 也是如此。"

#. type: Title ==
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy, no-wrap
msgid "The Vert.x \"bare\" API and friends"
msgstr "Vert.x的 \"裸 \"API和朋友们"

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"Vert.x provides multiple APIs.\n"
"Let's focus on the \"bare\" one for now."
msgstr "Vert.x 提供多种应用程序接口。现在我们先关注 \"裸\" API。"

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"Following the reactive nature of Vert.x, the API contains mostly asynchronous methods.\n"
"These methods are following a syntax convention:"
msgstr "根据 Vert.x 的反应特性，API 主要包含异步方法。这些方法遵循语法约定："

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"The interesting part is the last parameter.\n"
"It's a function, a callback to be more precise, that gets called when the operation completes or fails.\n"
"Indeed, the asynchronous nature of Vert.x does not allow using `try/catch` blocks.\n"
"So you need to pass a continuation callback, invoked with the outcome."
msgstr "有趣的是最后一个参数。它是一个函数，更准确地说，是一个回调函数，在操作完成或失败时被调用。事实上，Vert.x 的异步特性不允许使用 `try/catch` 块。因此，您需要传递一个继续回调函数，并根据结果进行调用。"

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"`AsyncResult` is a structure capturing this outcome.\n"
"It contains the result (of type `<T>`) produced by the operation, or the failure if it failed."
msgstr "`AsyncResult` 是一个结构，用于捕捉这一结果。它包含操作产生的结果（类型为 ），如果操作失败，则包含失败结果。 `<T>`"

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "Let's take an example:"
msgstr "让我们举一个例子。"

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"This code reads a file, and as it's an asynchronous operation, invokes the callback when the file is read.\n"
"The `readFile` method reads the complete content of the file and accumulates it in a _buffer_.\n"
"The callback receives the asynchronous result containing either the file's content (`ar.result()`) or a failure.\n"
"Vert.x invokes this callback when the operation has either completed or failed."
msgstr "这段代码读取文件，由于是异步操作，所以在文件读取完毕后调用回调。 `readFile` 方法读取文件的全部内容，并将其累积到 _缓冲区_ 中。回调接收异步结果，其中要么包含文件内容 ( `ar.result()` ) ，要么包含失败。当操作完成或失败时，Vert.x 会调用该回调。"

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"Vert.x also supports streams thanks to the `ReadStream` and `WriteStream` classes.\n"
"A `ReadStream` represents a stream of data you can read.\n"
"So you can attach a callback invoked on every item traversing the stream.\n"
"A `WriteStream` is a data source.\n"
"You can push items to a `WriteStream.`\n"
"These items will be consumed by a `ReadStream`:"
msgstr "由于有了 `ReadStream` 和 `WriteStream` 类，Vert.x 还支持数据流。 `ReadStream` 表示可以读取的数据流。因此，您可以为流中遍历的每个项目附加一个回调。 `WriteStream` 是一个数据源。您可以向 `WriteStream.` 推送项目，这些项目将被 `ReadStream` 消耗："

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"Vert.x streams do not implement Reactive Streams.\n"
"Vert.x provides a different back-pressure protocol."
msgstr "Vert.x 流没有实现反应流。Vert.x 提供了不同的反压协议。"

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"Why are these API shaping rules important?\n"
"Vert.x does not provide a single API.\n"
"The \"bare\" API presented above is just one of the proposed API.\n"
"It also provides API in Kotlin, API for RX Java, and so on."
msgstr "为什么这些 API 塑造规则很重要？Vert.x 并不提供单一的 API。上面介绍的 \"裸 \"API 只是建议的 API 之一。它还提供 Kotlin API、RX Java API 等。"

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"These APIs are **generated**.\n"
"Vert.x provides a code generator that _ translates_ the Vert.x \"bare\" API into the other APIs.\n"
"Because all methods are well-formed, the generator understands how they should be adapted."
msgstr "这些 API 是 *生成的* 。Vert.x 提供了一个代码生成器，可将 Vert.x 的 \"裸 \"API 翻译成其他 API。由于所有方法都是格式化的，因此生成器能理解它们应如何调整。"

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "image:/assets/images/posts/mutiny-vertx/generation.png[]"
msgstr "image:/assets/images/posts/mutiny-vertx/generation.png[alt=\"generation\"]"

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"The generated code exposes a different API; each method delegating to the \"bare\" API.\n"
"Asynchronous methods and streams can follow different transformations, so the resulting API uses the right idioms."
msgstr "生成的代码会公开不同的应用程序接口；每个方法都会委托给 \"裸 \"应用程序接口。异步方法和流可以进行不同的转换，因此生成的应用程序接口会使用正确的习语。"

#. type: Title ==
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy, no-wrap
msgid "The Vert.x Mutiny API"
msgstr "Vert.x Mutiny API"

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"Mutiny is an event-driven reactive programming library.\n"
"It's not related to Vert.x.\n"
"However, we have written a code generator that generates the Mutiny variant for the Vert.x API:"
msgstr "Mutiny 是一个事件驱动的反应式编程库。不过，我们编写了一个代码生成器，可以为 Vert.x API 生成 Mutiny 变体："

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "image:/assets/images/posts/mutiny-vertx/mutiny.png[]"
msgstr "image:/assets/images/posts/mutiny-vertx/mutiny.png[alt=\"mutiny\"]"

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "The transformations are straightforward:"
msgstr "转变是直截了当的。"

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "`io.vertx` package => `io.vertx.mutiny` package"
msgstr " `io.vertx` 包⇒ 包 `io.vertx.mutiny` "

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "Asynchronous methods => method returning a `Uni<T>`"
msgstr "异步方法⇒方法返回一个 `Uni<T>` "

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "`ReadStreams<T>` => can be consumed as `Multi<T>`"
msgstr " `ReadStreams<T>` ⇒可以被消耗为 `Multi<T>` "

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "`WriteStreams<T>` => can be consumed as Reactive Streams `Subscriber<T>`"
msgstr " `WriteStreams<T>` ⇒可以作为反应式流来消费 `Subscriber<T>` "

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "It also adapts the Vert.x back pressure protocol to Reactive Streams, as Mutiny implements Reactive Streams."
msgstr "它还将Vert.x的背压协议改编为反应式流，因为Mutiny实现了反应式流。"

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "For example, the first example from above becomes:"
msgstr "例如，上面的第一个例子变成了。"

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"One difference between the two APIs is related to laziness. The Vert.x \"bare\" API triggers the operation as soon as the method is called.\n"
"The Mutiny variant expects a subscription to trigger the operation."
msgstr "这两个应用程序接口之间的一个区别与 \"懒惰 \"有关。Vert.x 的 \"裸 \"API 会在调用方法时立即触发操作。而 Mutiny 变体则希望通过订阅来触发操作。"

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "The stream example from above becomes:"
msgstr "上面的流例子变成了。"

#. type: Title ==
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy, no-wrap
msgid "A bit more than this"
msgstr "比这更多一点"

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"The Mutiny variant does not only apply the rules exposed in the previous section.\n"
"For asynchronous methods, it also provides:"
msgstr "Mutiny 变体不仅应用了上一节介绍的规则。对于异步方法，它还提供了"

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "`xAndAwait()` methods - blocks the caller thread until the outcome is received. In the case of a failure, throws a `RuntimeException`"
msgstr " `xAndAwait()` 方法 - 阻断调用者的线程，直到收到结果。在失败的情况下，抛出一个 `RuntimeException` "

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "`xAndForget()` methods - triggers the operation, discard the outcome"
msgstr " `xAndForget()` 方法 - 触发操作，丢弃结果"

#. type: Title ==
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy, no-wrap
msgid "Where can we find this API?"
msgstr "我们在哪里可以找到这个API？"

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"At the moment of writing, we only provide Vert.x core and Vert.x clients (MongoDB, Redis, Web client, Mqtt, and so on).\n"
"We are extending the support to cover the full Vert.x stack."
msgstr "目前，我们只提供 Vert.x 核心和 Vert.x 客户端（MongoDB、Redis、Web 客户端、Mqtt 等）。我们正在扩大支持范围，以覆盖整个 Vert.x 堆栈。"

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"To use the Mutiny clients, you need to add the right dependency to your project.\n"
"Browse https://search.maven.org/search?q=a:smallrye-mutiny-vertx*[the list of dependency] to pick the one you need."
msgstr "要使用 Mutiny 客户端，需要在项目中添加正确的依赖项。浏览 link:https://search.maven.org/search?q=a:smallrye-mutiny-vertx*[依赖关系列表] ，选择你需要的依赖关系。"

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "For example, to you use the Mutiny variant of the Vert.x Web client, add the following dependency:"
msgstr "例如，如果你使用Vert.x Web客户端的Mutiny变体，添加以下依赖关系。"

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "Once you have the dependency, just create the web client instance:"
msgstr "一旦你有了依赖关系，只需创建网络客户端实例。"

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "Something missing? Open an issue on https://github.com/smallrye/smallrye-reactive-utils/issues[SmallRye Reactive Utils]."
msgstr "缺少什么？在 link:https://github.com/smallrye/smallrye-reactive-utils/issues[SmallRye Reactive Utils] 上打开一个问题。"

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "The Javadoc is available http://smallrye.io/smallrye-reactive-utils/apidocs/[here]."
msgstr "Javadoc 可在 link:http://smallrye.io/smallrye-reactive-utils/apidocs/[此处] 获取。"

#. type: Title ==
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy, no-wrap
msgid "The road ahead: Vert.x 4!"
msgstr "前路漫漫：Vert.x 4！"

#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid ""
"Vert.x 4 is coming soon!\n"
"We are already working in Quarkus and the different satellite projects to migrate.\n"
"With Vert.x 4, a new generator has been implemented (following the same code generation approach), paving the road to a smooth upgrade."
msgstr "Vert.x 4 即将推出！我们已经在 Quarkus 和不同的卫星项目中开展迁移工作。Vert.x 4 采用了新的生成器（采用相同的代码生成方法），为顺利升级铺平了道路。"
