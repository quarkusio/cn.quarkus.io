# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy, no-wrap
msgid "Mutiny and the Reactiverse"
msgstr "叛变与Reactiverse"

#. type: YAML Front Matter: synopsis
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy, no-wrap
msgid "Discover the Mutiny variant of the Vert.x API"
msgstr "发现Vert.x API的突变体"

#: _posts/2020-11-24-mutiny-vertx.adoc
msgid ""
"I had the question multiple times: how do I use Eclipse Vert.x in Quarkus?\n"
"Indeed, you can use Vert.x in Quarkus.\n"
"You can deploy _verticles_, communicate with the event bus, or use anything from the Vert.x ecosystem.\n"
"But, you can also use the Mutiny variant of Vert.x in Quarkus, and get a seamless experience with the other reactive APIs offered by Quarkus.\n"
"Several posts have already mentioned this, but it deserves a specific blog post.\n"
"So, here we are."
msgstr ""

#. type: Title ==
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy, no-wrap
msgid "Eclipse Vert.x"
msgstr "Eclipse Vert.x"

#: _posts/2020-11-24-mutiny-vertx.adoc
msgid ""
"https://vertx.io[Vert.x] is a toolkit to build reactive applications.\n"
"The Vert.x ecosystem is enormous.\n"
"From HTTP and data access abilities to messaging clients via microservice and security facilities, the Vert.x ecosystem is remarkably diverse and versatile.\n"
"To understand that variety, just check the https://vertx.io/docs/[Vert.x documentation].\n"
"That makes Vert.x popular in many areas such as web applications, IoT gateways, banking applications and so on."
msgstr ""

#: _posts/2020-11-24-mutiny-vertx.adoc
msgid ""
"As you may know, Quarkus is based on Vert.x.\n"
"Under the hood, there is a managed Vert.x instance that powers the rest of Quarkus."
msgstr ""

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "image:/assets/images/posts/mutiny-vertx/architecture.png[width=50%]"
msgstr "image:/assets/images/posts/mutiny-vertx/architecture.png[alt=\"architecture\", width=\"50%\"]"

#: _posts/2020-11-24-mutiny-vertx.adoc
msgid ""
"When Quarkus serves a HTTP endpoint, under the hood, there is a Vert.x HTTP server handling the request and response.\n"
"That's also true for messaging, gRPC and almost any I/O."
msgstr ""

#. type: Title ==
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy, no-wrap
msgid "The Vert.x \"bare\" API and friends"
msgstr "Vert.x的 \"裸 \"API和朋友们"

#: _posts/2020-11-24-mutiny-vertx.adoc
msgid ""
"Vert.x provides multiple APIs.\n"
"Let's focus on the \"bare\" one for now."
msgstr ""

#: _posts/2020-11-24-mutiny-vertx.adoc
msgid ""
"Following the reactive nature of Vert.x, the API contains mostly asynchronous methods.\n"
"These methods are following a syntax convention:"
msgstr ""

#: _posts/2020-11-24-mutiny-vertx.adoc
msgid ""
"The interesting part is the last parameter.\n"
"It's a function, a callback to be more precise, that gets called when the operation completes or fails.\n"
"Indeed, the asynchronous nature of Vert.x does not allow using `try/catch` blocks.\n"
"So you need to pass a continuation callback, invoked with the outcome."
msgstr ""

#: _posts/2020-11-24-mutiny-vertx.adoc
msgid ""
"`AsyncResult` is a structure capturing this outcome.\n"
"It contains the result (of type `<T>`) produced by the operation, or the failure if it failed."
msgstr ""

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "Let's take an example:"
msgstr "让我们举一个例子。"

#: _posts/2020-11-24-mutiny-vertx.adoc
msgid ""
"This code reads a file, and as it's an asynchronous operation, invokes the callback when the file is read.\n"
"The `readFile` method reads the complete content of the file and accumulates it in a _buffer_.\n"
"The callback receives the asynchronous result containing either the file's content (`ar.result()`) or a failure.\n"
"Vert.x invokes this callback when the operation has either completed or failed."
msgstr ""

#: _posts/2020-11-24-mutiny-vertx.adoc
msgid ""
"Vert.x also supports streams thanks to the `ReadStream` and `WriteStream` classes.\n"
"A `ReadStream` represents a stream of data you can read.\n"
"So you can attach a callback invoked on every item traversing the stream.\n"
"A `WriteStream` is a data source.\n"
"You can push items to a `WriteStream.`\n"
"These items will be consumed by a `ReadStream`:"
msgstr ""

#: _posts/2020-11-24-mutiny-vertx.adoc
msgid ""
"Vert.x streams do not implement Reactive Streams.\n"
"Vert.x provides a different back-pressure protocol."
msgstr ""

#: _posts/2020-11-24-mutiny-vertx.adoc
msgid ""
"Why are these API shaping rules important?\n"
"Vert.x does not provide a single API.\n"
"The \"bare\" API presented above is just one of the proposed API.\n"
"It also provides API in Kotlin, API for RX Java, and so on."
msgstr ""

#: _posts/2020-11-24-mutiny-vertx.adoc
msgid ""
"These APIs are **generated**.\n"
"Vert.x provides a code generator that _ translates_ the Vert.x \"bare\" API into the other APIs.\n"
"Because all methods are well-formed, the generator understands how they should be adapted."
msgstr ""

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "image:/assets/images/posts/mutiny-vertx/generation.png[]"
msgstr "image:/assets/images/posts/mutiny-vertx/generation.png[alt=\"generation\"]"

#: _posts/2020-11-24-mutiny-vertx.adoc
msgid ""
"The generated code exposes a different API; each method delegating to the \"bare\" API.\n"
"Asynchronous methods and streams can follow different transformations, so the resulting API uses the right idioms."
msgstr ""

#. type: Title ==
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy, no-wrap
msgid "The Vert.x Mutiny API"
msgstr "Vert.x Mutiny API"

#: _posts/2020-11-24-mutiny-vertx.adoc
msgid ""
"Mutiny is an event-driven reactive programming library.\n"
"It's not related to Vert.x.\n"
"However, we have written a code generator that generates the Mutiny variant for the Vert.x API:"
msgstr ""

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "image:/assets/images/posts/mutiny-vertx/mutiny.png[]"
msgstr "image:/assets/images/posts/mutiny-vertx/mutiny.png[alt=\"mutiny\"]"

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "The transformations are straightforward:"
msgstr "转变是直截了当的。"

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "`io.vertx` package => `io.vertx.mutiny` package"
msgstr " `io.vertx` 包⇒ 包 `io.vertx.mutiny` "

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "Asynchronous methods => method returning a `Uni<T>`"
msgstr "异步方法⇒方法返回一个 `Uni<T>` "

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "`ReadStreams<T>` => can be consumed as `Multi<T>`"
msgstr " `ReadStreams<T>` ⇒可以被消耗为 `Multi<T>` "

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "`WriteStreams<T>` => can be consumed as Reactive Streams `Subscriber<T>`"
msgstr " `WriteStreams<T>` ⇒可以作为反应式流来消费 `Subscriber<T>` "

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "It also adapts the Vert.x back pressure protocol to Reactive Streams, as Mutiny implements Reactive Streams."
msgstr "它还将Vert.x的背压协议改编为反应式流，因为Mutiny实现了反应式流。"

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "For example, the first example from above becomes:"
msgstr "例如，上面的第一个例子变成了。"

#: _posts/2020-11-24-mutiny-vertx.adoc
msgid ""
"One difference between the two APIs is related to laziness. The Vert.x \"bare\" API triggers the operation as soon as the method is called.\n"
"The Mutiny variant expects a subscription to trigger the operation."
msgstr ""

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "The stream example from above becomes:"
msgstr "上面的流例子变成了。"

#. type: Title ==
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy, no-wrap
msgid "A bit more than this"
msgstr "比这更多一点"

#: _posts/2020-11-24-mutiny-vertx.adoc
msgid ""
"The Mutiny variant does not only apply the rules exposed in the previous section.\n"
"For asynchronous methods, it also provides:"
msgstr ""

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "`xAndAwait()` methods - blocks the caller thread until the outcome is received. In the case of a failure, throws a `RuntimeException`"
msgstr " `xAndAwait()` 方法 - 阻断调用者的线程，直到收到结果。在失败的情况下，抛出一个 `RuntimeException` "

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "`xAndForget()` methods - triggers the operation, discard the outcome"
msgstr " `xAndForget()` 方法 - 触发操作，丢弃结果"

#. type: Title ==
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy, no-wrap
msgid "Where can we find this API?"
msgstr "我们在哪里可以找到这个API？"

#: _posts/2020-11-24-mutiny-vertx.adoc
msgid ""
"At the moment of writing, we only provide Vert.x core and Vert.x clients (MongoDB, Redis, Web client, Mqtt, and so on).\n"
"We are extending the support to cover the full Vert.x stack."
msgstr ""

#: _posts/2020-11-24-mutiny-vertx.adoc
msgid ""
"To use the Mutiny clients, you need to add the right dependency to your project.\n"
"Browse https://search.maven.org/search?q=a:smallrye-mutiny-vertx*[the list of dependency] to pick the one you need."
msgstr ""

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "For example, to you use the Mutiny variant of the Vert.x Web client, add the following dependency:"
msgstr "例如，如果你使用Vert.x Web客户端的Mutiny变体，添加以下依赖关系。"

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
#, fuzzy
msgid "Once you have the dependency, just create the web client instance:"
msgstr "一旦你有了依赖关系，只需创建网络客户端实例。"

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
msgid "Something missing? Open an issue on https://github.com/smallrye/smallrye-reactive-utils/issues[SmallRye Reactive Utils]."
msgstr ""

#. type: Plain text
#: _posts/2020-11-24-mutiny-vertx.adoc
msgid "The Javadoc is available http://smallrye.io/smallrye-reactive-utils/apidocs/[here]."
msgstr ""

#. type: Title ==
#: _posts/2020-11-24-mutiny-vertx.adoc
#, no-wrap
msgid "The road ahead: Vert.x 4!"
msgstr ""

#: _posts/2020-11-24-mutiny-vertx.adoc
msgid ""
"Vert.x 4 is coming soon!\n"
"We are already working in Quarkus and the different satellite projects to migrate.\n"
"With Vert.x 4, a new generator has been implemented (following the same code generation approach), paving the road to a smooth upgrade."
msgstr ""
