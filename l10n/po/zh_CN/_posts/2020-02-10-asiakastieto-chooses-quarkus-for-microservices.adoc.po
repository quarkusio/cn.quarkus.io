# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: _posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc
#, fuzzy, no-wrap
msgid "Suomen Asiakastieto Oy chooses Quarkus for their microservices development"
msgstr "Suomen Asiakastieto Oy选择Quarkus进行微服务开发"

#: _posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc
#, fuzzy
msgid ""
"Based in Helsinki, Finland, The Asiakastieto Group is a leading provider of innovative, digital business and consumer information services in the Nordic region. In the banking, financial services, and retail industries, Asiakastieto’s products and services support risk management, finance and business administration, credit or loan-related  decision-making, sales and marketing.\n"
"When the EU introduced its revised Payment Services Directive (PSD2) in 2018 to increase competition, promote innovation, and improve security in the payments industry, Asiakastieto began evaluating how to help its customers manage the impact of the directive. This initiative aligned with one of the company’s key corporate social responsibility goals: to increase trust in society. The Asiakastieto Group has many brands such as UC AB, Intellia Oy, and Suomen Asiakastieto Oy, the latter being the one that we cover in this user story."
msgstr "Asiakastieto 集团总部位于芬兰赫尔辛基，是北欧地区领先的创新型数字商业和消费者信息服务提供商。在银行、金融服务和零售行业，Asiakastieto 的产品和服务支持风险管理、财务和业务管理、信贷或贷款相关决策、销售和营销。欧盟于 2018 年推出了修订后的《支付服务指令》（PSD2），以加强支付行业的竞争、促进创新并提高安全性，Asiakastieto 开始评估如何帮助客户管理该指令的影响。这一举措符合公司的主要企业社会责任目标之一：提高社会信任度。Asiakastieto 集团旗下有许多品牌，如 UC AB、Intellia Oy 和 Suomen Asiakastieto Oy，本用户故事将介绍 Suomen Asiakastieto Oy。"

#. type: Title ==
#: _posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc
#, fuzzy, no-wrap
msgid "Why microservices?"
msgstr "为什么选择微服务？"

#. type: Plain text
#: _posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc
#, fuzzy
msgid "Suomen Asiakastieto Oy has many different departments: Risk Decision, SME & Consumer, Customer Data Management, Digital Processes. Real Estate and Collateral Information, which operates within Digital Processes, had deployed to their application server instance a new application, which happened to have issues while running in production affecting the stability of the application server and hence other applications running on it. This resulted in the need to reboot the application server every time this anomaly occurred leading to unexpected downtime and to a negative customer satisfaction."
msgstr "Suomen Asiakastieto Oy有许多不同的部门。风险决策部、中小企业与消费者部、客户数据管理部、数字流程部。在数字流程中运作的房地产和抵押品信息部在他们的应用服务器实例中部署了一个新的应用程序，该应用程序在生产中运行时碰巧出现了问题，影响了应用服务器的稳定性，从而影响了在其上运行的其他应用程序。这导致每次发生这种异常情况时都需要重新启动应用服务器，导致意外的停机时间和负面的客户满意度。"

#. type: Plain text
#: _posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc
#, fuzzy
msgid "Because of this, they decided to adopt microservice architectures to introduce better resilience and high-availability into their solutions so that if a microservice or an application went awry, it would not affect the entire system. So, when the time came to start developing their PSD2 project, they decided to start implementing microservices in Thorntail, which is an open source application assembler - similar to Spring Boot - that also implements MicroProfile, an community-driven open source specification for Java microservices. They decided on Thorntail because its functionality and capabilities were close to the application server capabilities they were familiar with. After being in production for a few months, they learned about Quarkus and its innovative approach that rethinks Java for containers, cloud and Kubernetes. Around the same time, they also learned about the end-of-life of Thorntail. Their continued desire to develop new microservices as well as to break their monolithic application servers into microservices made them evaluate Quarkus more in depth."
msgstr "正因为如此，他们决定采用微服务架构，在其解决方案中引入更好的弹性和高可用性，这样，如果一个微服务或一个应用程序出现问题，就不会影响整个系统。因此，当开始开发他们的PSD2项目时，他们决定开始在Thorntail中实现微服务，这是一个开源的应用程序组装器--类似于Spring Boot--也实现了MicroProfile，一个社区驱动的Java微服务开源规范。他们决定采用Thorntail，因为它的功能和能力与他们所熟悉的应用服务器能力相近。在生产了几个月后，他们了解到Quarkus和它的创新方法，为容器、云和Kubernetes重新思考了Java。大约在同一时间，他们也了解到Thorntail的寿命结束了。他们继续渴望开发新的微服务，并将他们的单体应用服务器打破为微服务，这使他们更深入地评估Quarkus。"

#. type: Title ==
#: _posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc
#, fuzzy, no-wrap
msgid "Their monoliths and existing microservices"
msgstr "他们的单体和现有的微服务"

#. type: Plain text
#: _posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc
#, fuzzy
msgid "With respect to their monoliths, they have about twelve JBoss EAP instances, each running dozens of their applications. As a first step to make the entire system more distributed, they decided to start moving some of these workloads to OpenShift by running many instances of JBoss EAP, each containing a single application. As a result, they experienced high memory consumption. At this point, they started looking into ways to reduce the footprint of these applications running on OpenShift."
msgstr "关于他们的单体，他们有大约12个JBoss EAP实例，每个实例都运行着他们的几十个应用。作为使整个系统更加分布式的第一步，他们决定开始将其中一些工作负载转移到OpenShift，运行许多JBoss EAP的实例，每个实例包含一个应用程序。结果，他们遇到了高内存消耗。在这一点上，他们开始研究如何减少这些在OpenShift上运行的应用程序的足迹。"

#. type: Plain text
#: _posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc
#, fuzzy
msgid "With respect to their existing Thorntail microservices, which they needed to migrate to Quarkus, they noticed that spinning up a Thorntail container was taking about 1 minute to start up. When they migrated it to Quarkus, the service now starts in 0.4 seconds! With this improved startup time, they could scale up their services faster so that they could be readily available faster to process extra traffic leading to a better customer experience during peak times since customers would not have to wait on the browser to have their requests serviced, for example."
msgstr "关于他们现有的Thorntail微服务，他们需要将其迁移到Quarkus，他们注意到，启动一个Thorntail容器需要1分钟左右。当他们把它迁移到Quarkus时，服务现在只需要0.4秒就可以启动了。有了这个改进的启动时间，他们可以更快地扩展他们的服务，这样他们就可以更快地随时处理额外的流量，从而在高峰期带来更好的客户体验，因为客户不必在浏览器上等待他们的请求得到服务，例如。"

#. type: Plain text
#: _posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc
#, fuzzy
msgid "In fact, before going into production with Quarkus, Eero Arvonen, Solution Architect at IT Development Finland Asiakasieto Oy, made a comparative analysis between the Thorntail and Quarkus versions of a microservice. This first chart shows a comparison between the original version of one of their Thortail microservices, which used JAX-WS, next to different Quarkus versions of the same microservice."
msgstr "事实上，在使用Quarkus投入生产之前，芬兰IT开发公司Asiakasieto Oy的解决方案架构师Eero Arvonen对一个微服务的Thorntail和Quarkus版本进行了比较分析。第一个图表显示了他们的一个使用JAX-WS的Thortail微服务的原始版本与同一微服务的不同Quarkus版本之间的比较。"

#. type: Plain text
#: _posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc
#, fuzzy
msgid "This next chart shows the performance and startup time results for the same combinations of microservice versions as the previous graph."
msgstr "接下来的这张图显示了与上一张图相同的微服务版本组合的性能和启动时间结果。"

#. type: Plain text
#: _posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc
#, fuzzy
msgid "According to Eero, _“migrating from Thorntail to JVM-Quarkus was trivial and memory consumption went down by about 75% while CPU consumption was reduced by about 70%. This was accompanied by a 40% increase in throughput resulting in a faster response time. Migrating to Quarkus native, we found that the application ran at a better throughput even with 50MB of memory which is 95% less than with Thorntail. We also identified a space-time tradeoff between different native Quarkus setups: deploying it with 200MB of memory instead of 50MB will reduce its CPU requirements by two thirds. Thus, if we ever had to balance CPU vs memory within our OpenShift cluster, this would prove useful.”_"
msgstr "根据Eero的说法， _\"从Thorntail迁移到JVM-Quarkus是微不足道的，内存消耗减少了约75%，CPU消耗减少了约70%。同时，吞吐量也增加了40%，从而加快了响应时间。迁移到Quarkus本机后，我们发现，即使是50MB的内存，应用程序也能以更好的吞吐量运行，比Thorntail少了95%。我们还发现了不同的Quarkus原生设置之间的时空权衡：用200MB的内存而不是50MB的内存来部署它，将减少三分之二的CPU需求。因此，如果我们不得不在我们的OpenShift集群内平衡CPU与内存，这将证明是有用的\"。_ "

#. type: Title ==
#: _posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc
#, no-wrap
msgid "Live Coding"
msgstr "实时编码"

#: _posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc
#, fuzzy
msgid ""
"They use and like the Quarkus development mode, also known as live coding, a lot. Before Quarkus, they used to use JRebel, for hot replacing but it was unreliable. According to Eero _“Quarkus development mode has by far a better track record.”_  Now that they are writing new microservices, they have made it a best practice to use live coding. With Thorntail, there were manual steps to deploy changes to try them out whereas with Quarkus, the changes are automatically applied to the running process so that the developer can immediately test the application. This makes developers more productive in that they can verify and troubleshoot their code faster.\n"
"Eero took it upon himself to deliver a small internal Quarkus workshop, which got developers very excited about this new and innovative technology, _“people are looking forward to working with Quarkus”_, mentioned Eero. Quarkus is getting developers excited and this has led to other developers across the organization to use Quarkus for their projects."
msgstr "他们经常使用并喜欢 Quarkus 开发模式（也称为实时编码）。在使用 Quarkus 之前，他们曾使用 JRebel 进行热替换，但这种方式并不可靠。根据 Eero 的说法， _\"Quarkus 开发模式的跟踪记录要好得多\"。_ 现在，他们正在编写新的微服务，并将使用实时编码作为最佳实践。使用 Thorntail 时，需要手动部署更改以进行试用，而使用 Quarkus 时，更改会自动应用到运行进程中，这样开发人员就可以立即测试应用程序。这样，开发人员可以更快地验证代码并排除故障，从而提高了工作效率。Eero 亲自举办了一个小型的内部 Quarkus 研讨会，这让开发人员对这项新的创新技术感到非常兴奋， _\"大家都期待着使用 Quarkus 工作_ \"，Eero 说。Quarkus 让开发人员兴奋不已，这也促使整个组织的其他开发人员在他们的项目中使用 Quarkus。"

#. type: Title ==
#: _posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc
#, fuzzy, no-wrap
msgid "Learning Quarkus"
msgstr "学习Quarkus"

#. type: Plain text
#: _posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc
#, fuzzy
msgid "_“Quarkus was very easy to pick up”_, according to Eero. In his opinion, the Quarkus guides on https://quarkus.io/ are very good, thorough and comprehensive with great code examples. In addition, he found a very active community in Quarkus. When they ran into problems, they were able to search the internet for the error messages and easily found answers online. In addition, the Quarkus community and Quarkus engineers are very active even on external forums answering questions and helping folks inquiring for help."
msgstr " _\"Quarkus非常容易上手\"，_ Eero说。在他看来， https://quarkus.io/ 上的Quarkus指南非常好，很透彻，很全面，有很好的代码例子。此外，他发现Quarkus有一个非常活跃的社区。当他们遇到问题时，他们能够在网上搜索错误信息，并很容易在网上找到答案。此外，Quarkus社区和Quarkus工程师甚至在外部论坛上也非常活跃，回答问题并帮助那些寻求帮助的人们。"

#. type: Title ==
#: _posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc
#, fuzzy, no-wrap
msgid "Some pain points"
msgstr "一些痛点"

#. type: Plain text
#: _posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc
#, fuzzy
msgid "As awesome as Quarkus is, this constantly evolving and innovative technology had some areas for improvement. For example, Eero mentioned that Java API for XML Web Services (JAX-WS) didn’t work on native mode. Also SSL, by default, is disabled but available for HTTP/S, which he needed to use and got it to work following the configuration instructions, which he found complex. In addition, he would like to see improvements in how reflection is currently configured, which was time-consuming to configure because he had to use a trial-and-error approach to get it to work. He’d like to see a way to make this reflection configuration process easier to carry out."
msgstr "尽管Quarkus很了不起，但这项不断发展的创新技术也有一些需要改进的地方。例如，Eero提到Java API for XML Web Services (JAX-WS)不能在本地模式下工作。另外，SSL在默认情况下是禁用的，但对HTTP/S是可用的，他需要使用SSL，并按照配置说明让它工作，他认为这很复杂。此外，他希望看到改进目前反射的配置方式，配置起来很费时，因为他不得不使用试错的方法来使其工作。他希望看到一种方法，使这种反射配置过程更容易进行。"

#. type: Title ==
#: _posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc
#, fuzzy, no-wrap
msgid "Lessons Learned"
msgstr "汲取的经验教训"

#. type: Plain text
#: _posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc
#, fuzzy
msgid "Because Quarkus takes the approach of a closed world for application development, there needs to be a bit of a mind shift when writing applications. As an example, for their existing applications, Asiakastieto used a configuration manager to read in configuration information (connection URLs, DB connections strings, etc.) at application startup. Since with Quarkus, in native mode, part of the application startup happens during build time, they had to reconfigure the configuration manager to read in the configuration information when the application was run. Although the change was easy to make, it highlights the importance of understanding how Quarkus applications need to be implemented under this new paradigm."
msgstr "因为Quarkus采取的是封闭式的应用开发方式，所以在编写应用时需要有一定的思想转变。举个例子，对于他们现有的应用程序，Asiakastieto使用配置管理器在应用程序启动时读入配置信息（连接URL、数据库连接字符串等）。由于Quarkus在本地模式下，部分应用程序的启动发生在构建时间，他们不得不重新配置配置管理器，以便在应用程序运行时读入配置信息。虽然这个改变很容易做到，但它强调了理解Quarkus应用程序在这种新模式下需要如何实现的重要性。"

#. type: Title ==
#: _posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc
#, fuzzy, no-wrap
msgid "Current state of Quarkus projects"
msgstr "Quarkus项目的现状"

#. type: Plain text
#: _posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc
#, fuzzy
msgid "As mentioned earlier, the Asiakastieto Oy PSD2 project had been implemented in Thorntail microservices and when they learned about Quarkus, the decision was made to migrate their Thorntail microservices to Quarkus. As of this writing, out of the 7 Thorntail microservices in their PSD2 application, one has been migrated to Quarkus and is running in production."
msgstr "如前所述，Asiakastieto Oy的PSD2项目是用Thorntail微服务实现的，当他们了解到Quarkus后，决定将Thorntail微服务迁移到Quarkus。截至目前，在他们的PSD2应用中的7个Thorntail微服务中，有一个已经迁移到Quarkus并在生产中运行。"

#. type: Plain text
#: _posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc
#, fuzzy
msgid "Two more microservices have been migrated from Thorntail to Quarkus (native mode) and are currently being tested and will be deployed during their next incremental application update during February 2020."
msgstr "还有两个微服务已经从Thorntail迁移到Quarkus（本地模式），目前正在进行测试，并将在2020年2月期间的下一次增量应用更新中部署。"

#. type: Title ==
#: _posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc
#, fuzzy, no-wrap
msgid "What’s next"
msgstr "下一步是什么"

#. type: Plain text
#: _posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc
#, fuzzy
msgid "When their microservices initiative started one and a half years ago, Asiakastieto Oy decided to use Thorntail as their main technology for Java microservices. With the news of the sunsetting of Thorntail and the introduction of Quarkus, they have established a new policy that every new project will be implemented in Quarkus in JVM mode as a minimum and when feasible use Quarkus in native mode. There are already two new projects that are being implemented in Quarkus at present with more coming in the future."
msgstr "当一年半前他们的微服务计划开始时，Asiakastieto Oy决定使用Thorntail作为他们的Java微服务的主要技术。随着Thorntail的日落和Quarkus的引入，他们制定了一个新的政策，即每一个新的项目将至少在JVM模式下用Quarkus实现，在可行的情况下用Quarkus的本地模式。目前已经有两个新的项目正在Quarkus中实施，未来还会有更多的项目。"

#. type: Plain text
#: _posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc
#, fuzzy
msgid "For more information on Quarkus:"
msgstr "关于Quarkus的更多信息。"

#. type: Plain text
#: _posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc
#, fuzzy
msgid "Quarkus website: http://quarkus.io"
msgstr "Quarkus网站 http://quarkus.io "

#. type: Plain text
#: _posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc
#, fuzzy
msgid "Quarkus GitHub project: https://github.com/quarkusio/quarkus"
msgstr "Quarkus GitHub项目: https://github.com/quarkusio/quarkus "

#. type: Plain text
#: _posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc
#, fuzzy
msgid "Quarkus Twitter: https://twitter.com/QuarkusIO"
msgstr "Quarkus Twitter: https://twitter.com/QuarkusIO "

#. type: Plain text
#: _posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc
#, fuzzy
msgid "Quarkus chat: https://quarkusio.zulipchat.com/"
msgstr "Quarkus chat: https://quarkusio.zulipchat.com/ "

#. type: Plain text
#: _posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc
#, fuzzy
msgid "Quarkus mailing list: https://groups.google.com/forum/#!forum/quarkus-dev"
msgstr "Quarkus邮件列表 https://groups.google.com/forum/#!forum/quarkus-dev "

#. type: Plain text
#: _posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc
#, fuzzy
msgid "https://youtube.com/quarkusio[Quarkus YouTube Channel]"
msgstr "link:https://youtube.com/quarkusio[夸库斯YouTube频道]"

#. type: Plain text
#: _posts/2020-02-10-asiakastieto-chooses-quarkus-for-microservices.adoc
#, fuzzy
msgid "https://www.redhat.com/cms/managed-files/cl-4-reasons-try-quarkus-checklist-f19180cs-201909-en.pdf[Four reasons to use Quarkus]"
msgstr "link:https://www.redhat.com/cms/managed-files/cl-4-reasons-try-quarkus-checklist-f19180cs-201909-en.pdf[使用 Quarkus 的四个理由]"
