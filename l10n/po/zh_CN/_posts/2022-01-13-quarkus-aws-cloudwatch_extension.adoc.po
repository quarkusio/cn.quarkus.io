# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title ==
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy, no-wrap
msgid "Creating a Quarkus extension for AWS CloudWatch"
msgstr "为AWS CloudWatch创建一个Quarkus扩展"

#. type: Plain text
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid "We recently had the situation that we wanted to log our Quarkus application logs to AWS CloudWatch. Basically it takes some time but is not a big deal. Adding a CloudWatch dependency, creating a Log Handler and push the logs to CloudWatch via the provided AWS CloudWatch API. But what if you want to share it with others? Of course you could put it on GitHub as part of your project so others can copy and paste it, but that’s not the most elegant way to share code with others."
msgstr "我们最近遇到了这样的情况，我们想把我们的Quarkus应用日志记录到AWS CloudWatch。基本上这需要一些时间，但不是什么大问题。添加一个CloudWatch的依赖关系，创建一个日志处理程序，通过提供的AWS CloudWatch API将日志推送到CloudWatch。但如果你想和别人分享呢？当然，你可以把它作为项目的一部分放在GitHub上，这样别人就可以复制和粘贴它，但这并不是与他人分享代码的最优雅的方式。"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid ""
"That’s why we implemented a Quarkus extension so others can use it more easily and don’t need to reinvent the wheel or need to copy paste things around.\n"
"How do I do that? Here the Quarkiverse Hub comes in. Quarkiverse is a GitHub organization where developers can host and share their extension with others. There are several benefits you get for free when hosting the extension in Quarkiverse instead of using the good old way of doing all the things on your own. By using Quarkiverse you don’t need to build the artifact, release it with the Sonatype Nexus Manager (or something similar) and distribute it on Maven Central and other repositories.\n"
"Quarkiverse comes with all these things so you can focus on implementing the extension itself. The following post describes what needs to be done to initialize, implement and share a CloudWatch Quarkus extension."
msgstr "这就是我们实施 Quarkus 扩展的原因，这样其他人就可以更轻松地使用它，而不需要重新发明轮子或复制粘贴东西。我该怎么做呢？这就需要 Quarkiverse Hub。Quarkiverse 是一个 GitHub 组织，开发者可以在这里托管并与他人分享自己的扩展。将扩展托管到 Quarkiverse，而不是使用自己做所有事情的老办法，你可以免费获得几个好处。通过使用 Quarkiverse，您无需构建工件、使用 Sonatype Nexus Manager（或类似工具）发布工件，也无需在 Maven Central 和其他资源库中发布工件。Quarkiverse 自带了所有这些功能，因此你可以专注于实现扩展本身。下面的文章介绍了初始化、实施和共享 CloudWatch Quarkus 扩展所需的步骤。"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid ""
"If you want to use Quarkiverse to publish your extension on the Hub (which is what we recommend) and make use of all the advantages you get by using it, you simply need to open a new extension proposal issue in the quarkusio/quarkus GitHub organization. By doing this, most of the requirements are fulfilled already as there will be a template generated for you and you just have to implement your extension code. In case you are using an existing project as template, there are some requirements you need to take care of.\n"
"In order to automate extension releases and publication of docs, there are some rules that need to be followed for projects under the Quarkiverse organization:"
msgstr "如果你想使用 Quarkiverse 在 Hub 上发布你的扩展（我们推荐使用 Quarkiverse），并利用它的所有优势，你只需在 quarkusio/quarkus GitHub 组织中打开一个新的扩展提案问题。这样一来，大部分要求都已满足，因为会有一个模板为你生成，你只需实现你的扩展代码即可。如果使用现有项目作为模板，则需要注意一些要求。为了实现扩展发布和文档发布的自动化，Quarkiverse 组织下的项目需要遵循一些规则："

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid "The extension repository should be named quarkus-<project>"
msgstr "扩展库的名称应为 quarkus-<project>"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid "A Quarkiverse extension *MUST* belong to the io.quarkiverse.<project> groupId"
msgstr "Quarkiverse 扩展 *必须* 属于 io.quarkiverse.<project> 组Id"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid "The root pom.xml *MUST* inherit from io.quarkiverse:quarkiverse-parent"
msgstr "根 pom.xml *必须* 继承自 io.quarkiverse:quarkiverse-parent"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid "A Quarkiverse extension contains the following folders and files:"
msgstr "Quarkiverse 扩展名包含以下文件夹和文件："

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid "deployment"
msgstr "部署到openshift.adoc"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid "runtime"
msgstr "运行时"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid "integration-test"
msgstr "集成测试"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid "docs"
msgstr "文档"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid "LICENSE"
msgstr "许可证"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid "README"
msgstr "阅读说明"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid ""
"This article covers the runtime and deployment content only as the other things are optional, generated by the project template already or even important, but not the most important and pragmatic thing when you want to learn how a Quarkus extension can be created.\n"
"Let’s start with the deployment section. It contains classes needed for the initialization of the Quarkus extension. Without this initialization class, your extension won’t be identified when starting your Quarkus application."
msgstr "本文只涉及运行时和部署内容，因为其他内容是可选的，由项目模板生成，甚至是重要的，但在你想了解如何创建 Quarkus 扩展时并不是最重要和最实用的。让我们从部署部分开始。它包含了初始化 Quarkus 扩展所需的类。如果没有初始化类，在启动 Quarkus 应用程序时就无法识别你的扩展。"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid ""
"In the snippet above you can see a _feature()_ method which is annotated with _@BuildStep_ and returns a new FeatureBuildItem. It exposes the name of the feature (logging-cloudwatch) displayed in the log during application bootstrap.\n"
"The second method _addCloudWatchHandler()_ initializes the extensions runtime configurations provided by the LoggingCloudWatchConfig and LoggingCloudWatchHandlerValueFactory class. Luckily there is a LogHandlerBuildItem provided, so we can overwrite the existing log handler by adding our own implementation. There are lots of other BuildItems provided so it’s definitely worth it, taking a look at it if you want to create your own extension. The parameter of this method is a config class which will be described in the following snippet."
msgstr "在上面的代码段中，您可以看到一个 _feature()_ 方法，该方法使用 _@BuildStep_ 进行注解，并返回一个新的 FeatureBuildItem。该方法公开了应用程序启动时日志中显示的功能名称（logging-cloudwatch）。第二个方法 _addCloudWatchHandler()_ 将初始化由 LoggingCloudWatchConfig 和 LoggingCloudWatchHandlerValueFactory 类提供的扩展运行时配置。幸运的是，我们提供了 LogHandlerBuildItem，因此可以通过添加自己的实现来覆盖现有的日志处理程序。我们还提供了许多其他 BuildItem，因此如果你想创建自己的扩展，绝对值得一试。该方法的参数是一个配置类，将在下面的代码段中介绍。"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid ""
"The _LoggingCloudWatchConfig_ is building the bridge between the extension itself and the Quarkus application which uses the extension. It’s combining the _application.properties entries_ in the Quarkus application with our extension. That means with this class you can define the properties available in the _application.properties_ file and make the extension configurable from the outside.\n"
"The _@ConfigRoot_ defines the prefix of the property in the _application.properties_ and the _@ConfigItems_ is the postfix. One application.properties entry we are accepting with this class is log.cloudwatch.enabled for example."
msgstr "_LoggingCloudWatchConfig_ 在扩展本身和使用该扩展的 Quarkus 应用程序之间架起了一座桥梁。它将 Quarkus 应用程序中的 _application.properties 条目_ 与我们的扩展结合在一起。这意味着，通过该类，你可以定义 _application._ properties 文件中的可用属性，并从外部对扩展进行配置。 _@ConfigRoot_ 定义了 _application._ properties 中属性的前缀，而 _@ConfigItems_ 则是后缀。例如，我们使用该类接受的一个 application.properties 条目是 log.cloudwatch.enabled。"

#. type: Plain text
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid "Besides the _LoggingCloudWatchConfig_ there is another parameter of the _addCloudwatchLogHandler()_ method. It’s the corresponding factory class."
msgstr "除了 _LoggingCloudWatchConfig_ ， _addCloudwatchLogHandler()_ 方法还有一个参数。它是相应的工厂类。"

#. type: Plain text
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid "The LoggingCloudWatchHandlerValueFactory is the glue between the actually business logic of the extension: dealing with application logs and putting these logs to AWS and the configurations of the _application.properties_ file mentioned before. As you can see in the _create()_ method, configuration entries are checked and used for initializing the CloudWatch connection."
msgstr "LoggingCloudWatchHandlerValueFactory是扩展的实际业务逻辑之间的粘合剂：处理应用程序的日志并将这些日志放到AWS和前面提到的 _application.properties_ 文件的配置。正如你在 _create()_ 方法中看到的，配置项被检查并用于初始化CloudWatch连接。"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid ""
"Now that we have made the extension configurable for the extension users by adding _application.properties_ entries, exposing the extension name and providing the configurations to the handler class which creates the AWS CloudWatch objects needed to put log messages in AWS CloudWatch, we only need to add one missing piece.\n"
"The Log Handler itself. In the snippet above, in the _LoggingCloudWatchHandlerValueFactory_ we created it already and returned it as a RuntimeValue which we are using in the _LoggingCloudwatchProcessor_ class. That’s the call chain needed to overwrite the existing default log handler."
msgstr "现在，我们已经通过添加 _application.properties_ 条目、公开扩展名称以及向 _处理程序_ 类提供配置（该处理程序类可创建在 AWS CloudWatch 中放置日志消息所需的 AWS CloudWatch 对象），为扩展用户提供了可配置的扩展，我们只需添加一个缺失的部分。日志处理程序本身。在上面的代码段中，我们已经在 _LoggingCloudWatchHandlerValueFactory_ 中创建了日志处理程序，并将其作为 RuntimeValue 返回，我们将在 _LoggingCloudwatchProcessor_ 类中使用该 RuntimeValue。这就是覆盖现有默认日志处理程序所需的调用链。"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid ""
"This log handler is a java.util.LogHandler which takes the LogRecord object as a parameter of the publish method which will be called when writing a log in an application. For example like log.info(“I Love Open Source!”);. If configured correctly, this log handler will be called when writing logs. As we want to put the log messages in AWS CloudWatch, we need to add the logic for doing it.\n"
"Therefore we create an InputLogEvent and call _putLogEvents()_ which puts the log message to CloudWatch. That’s basically it."
msgstr "该日志处理程序是一个 java.util.LogHandler，它将 LogRecord 对象作为发布方法的参数，当在应用程序中写入日志时，发布方法将被调用。例如 log.info(\"我爱开源！\");。如果配置正确，该日志处理程序将在编写日志时被调用。由于我们希望将日志信息放入 AWS CloudWatch，因此需要添加相关逻辑。因此，我们创建了一个 InputLogEvent，并调用 _putLogEvents()_ 将日志信息放入 CloudWatch。基本上就是这样。"

#. type: delimited block =
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid "The snippets in this article are a bit shortened, but basically that’s what the extension contains."
msgstr "这篇文章中的片段有点简短，但基本上就是扩展的内容。"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid ""
"Let’s sum it up:\n"
"There is a processor class which initializes the extension, a configuration class which is needed to make the extension configurable, a value factory class which takes these configurations and creates a AWS CloudWatch connection  as well as a custom _LogHandler_ class which pushes each log message to CloudWatch."
msgstr "让我们来总结一下：有一个处理器类（用于初始化扩展）、一个配置类（用于对扩展进行配置）、一个值工厂类（用于获取这些配置并创建 AWS CloudWatch 连接）以及一个自定义 _LogHandler_ 类（用于将每条日志消息推送到 CloudWatch）。"

#. type: Plain text
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid "After doing all these things, the only thing missing is releasing a version of the extension. This can be done by opening a Pull Request which updates the current-version and _next-version_ entry of the _project.yml_ file in the _.github_ folder. After merging this Pull Request, some GitHub Actions will be triggered which will bring your new version to Maven Central and finally others can use your extension as well :-)"
msgstr "做完这些事情后，唯一缺少的就是发布扩展的版本。这可以通过打开一个Pull Request来实现，它可以更新 _.github_ 文件夹中 _project.yml_ 文件的当前版本和 _下一版本_ 条目。合并该拉动请求后，会触发一些GitHub动作，将你的新版本带到Maven中心，最后其他人也可以使用你的扩展 :-)"

#. type: Title ==
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy, no-wrap
msgid "Summary"
msgstr "摘要"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid ""
"As you can see, creating, implementing and sharing Quarkus extensions with others is actually very easy. So if you have\n"
"an idea of an extension which could be useful for the community, feel free to pitch your idea by creating a new extension proposal issue on the quarkusio/quarkus GitHub Issues section :-)"
msgstr "正如您所看到的，创建、实施并与他人共享 Quarkus 扩展其实非常简单。因此，如果您有一个对社区有用的扩展想法，请随时在 quarkusio/quarkus GitHub Issues 部分创建一个新的扩展提案问题，提出您的想法 :-)"

#. type: Plain text
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid "In case you have questions, suggestions or something else, please feel free to contact me on https://twitter.com/bennetelli[Twitter]."
msgstr "如果你有问题、建议或其他东西，请随时在 link:https://twitter.com/bennetelli[Twitter] 上联系我。"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid ""
"Best regards,\n"
"Bennet"
msgstr "致以最诚挚的问候，贝内特"

#. type: Title ==
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy, no-wrap
msgid "Links"
msgstr "链接"

#. type: Plain text
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid "https://quarkus.io/blog/quarkiverse/"
msgstr "https://quarkus.io/blog/quarkiverse/"

#. type: Plain text
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid "https://github.com/quarkiverse"
msgstr "https://github.com/quarkiverse"

#. type: Plain text
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid "https://github.com/quarkiverse/quarkus-logging-cloudwatch"
msgstr "https://github.com/quarkiverse/quarkus-logging-cloudwatch"

#. type: Plain text
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid "https://quarkus.io/guides/writing-extensions#create-new-extension-modules-using-maven"
msgstr "https://quarkus.io/guides/writing-extensions#create-new-extension-modules-using-maven"
