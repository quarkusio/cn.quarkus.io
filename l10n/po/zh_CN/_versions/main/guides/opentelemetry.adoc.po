# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-25 02:51+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/opentelemetry.adoc:6
#, no-wrap
msgid "Using OpenTelemetry"
msgstr "使用OpenTelemetry"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:12
msgid "This guide explains how your Quarkus application can utilize https://opentelemetry.io/[OpenTelemetry] to provide distributed tracing for interactive web applications."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:13
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:18
#, no-wrap
msgid "Architecture"
msgstr "应用结构"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:21
msgid "In this guide, we create a straightforward REST application to demonstrate distributed tracing."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:22
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:26
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can skip right to the completed example."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:28
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:30
msgid "The solution is located in the `opentelemetry-quickstart` {quickstarts-tree-url}/opentelemetry-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:31
#, no-wrap
msgid "Creating the Maven project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:34
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:42
msgid "This command generates the Maven project and imports the `quarkus-opentelemetry-exporter-otlp` extension, which includes the OpenTelemetry support, and a gRPC span exporter for https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/otlp.md[OTLP]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:45
msgid "If you already have your Quarkus project configured, you can add the `quarkus-opentelemetry-exporter-otlp` extension to your project by running the following command in your project base directory:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:50
msgid "This will add the following to your build file:"
msgstr "这会将以下内容添加到你的构建文件中:"

#. type: Block title
#: upstream/_versions/main/guides/opentelemetry.adoc:52
#: upstream/_versions/main/guides/opentelemetry.adoc:223
#: upstream/_versions/main/guides/opentelemetry.adoc:288
#: upstream/_versions/main/guides/opentelemetry.adoc:305
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:58
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-opentelemetry-exporter-otlp</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/opentelemetry.adoc:61
#: upstream/_versions/main/guides/opentelemetry.adoc:232
#: upstream/_versions/main/guides/opentelemetry.adoc:297
#: upstream/_versions/main/guides/opentelemetry.adoc:314
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:64
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-opentelemetry-exporter-otlp\")\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:66
#, no-wrap
msgid "Examine the JAX-RS resource"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:69
msgid "Create a `src/main/java/org/acme/opentelemetry/TracedResource.java` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:73
#, no-wrap
msgid "package org.acme.opentelemetry;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:79
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:82
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class TracedResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:84
#, no-wrap
msgid "    private static final Logger LOG = Logger.getLogger(TracedResource.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:92
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        LOG.info(\"hello\");\n"
"        return \"hello\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:96
msgid "Notice that there is no tracing specific code included in the application. By default, requests sent to this endpoint will be traced without any required code changes."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:97
#, no-wrap
msgid "Create the configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:100
msgid "There are two ways to configure the OTLP gRPC Exporter within the application."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:102
msgid "The first approach is by providing the properties within the `src/main/resources/application.properties` file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:108
#, no-wrap
msgid ""
"quarkus.application.name=myservice // <1>\n"
"quarkus.opentelemetry.enabled=true // <2>\n"
"quarkus.opentelemetry.tracer.exporter.otlp.endpoint=http://localhost:4317 // <3>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:110
#, no-wrap
msgid "quarkus.opentelemetry.tracer.exporter.otlp.headers=Authorization=Bearer my_secret // <4>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:112
#, no-wrap
msgid "quarkus.log.console.format=%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n  // <5>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:115
msgid "All spans created from the application will include an OpenTelemetry `Resource` indicating the span was created by the `myservice` application. If not set, it will default to the artifact id."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:116
msgid "Whether OpenTelemetry is enabled or not. The default is `true`, but shown here to indicate how it can be disabled"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:117
msgid "gRPC endpoint for sending spans"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:118
msgid "Optional gRPC headers commonly used for authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:119
msgid "Add tracing information into log message."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:119
#, no-wrap
msgid "Run the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:122
msgid "The first step is to configure and start the https://opentelemetry.io/docs/collector/[OpenTelemetry Collector] to receive, process and export telemetry data to https://www.jaegertracing.io/[Jaeger] that will display the captured traces."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:124
msgid "Configure the OpenTelemetry Collector by creating an `otel-collector-config.yaml` file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:136
#, no-wrap
msgid ""
"receivers:\n"
"  otlp:\n"
"    protocols:\n"
"      grpc:\n"
"        endpoint: otel-collector:4317\n"
"  otlp/2:\n"
"    protocols:\n"
"      grpc:\n"
"        endpoint: otel-collector:55680\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:141
#, no-wrap
msgid ""
"exporters:\n"
"  jaeger:\n"
"    endpoint: jaeger-all-in-one:14250\n"
"    insecure: true\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:144
#, no-wrap
msgid ""
"processors:\n"
"  batch:\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:147
#, no-wrap
msgid ""
"extensions:\n"
"  health_check:\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:155
#, no-wrap
msgid ""
"service:\n"
"  extensions: [health_check]\n"
"  pipelines:\n"
"    traces:\n"
"      receivers: [otlp,otlp/2]\n"
"      processors: [batch]\n"
"      exporters: [jaeger]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:159
msgid "Start the OpenTelemetry Collector and Jaeger system via the following `docker-compose.yml` file that you can launch via `docker-compose up -d`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:164
#, no-wrap
msgid ""
"version: \"2\"\n"
"services:\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:184
#, no-wrap
msgid ""
"  # Jaeger\n"
"  jaeger-all-in-one:\n"
"    image: jaegertracing/all-in-one:latest\n"
"    ports:\n"
"      - \"16686:16686\"\n"
"      - \"14268\"\n"
"      - \"14250\"\n"
"  # Collector\n"
"  otel-collector:\n"
"    image: otel/opentelemetry-collector:latest\n"
"    command: [\"--config=/etc/otel-collector-config.yaml\"]\n"
"    volumes:\n"
"      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml\n"
"    ports:\n"
"      - \"13133:13133\" # Health_check extension\n"
"      - \"4317:4317\"   # OTLP gRPC receiver\n"
"      - \"55680:55680\" # OTLP gRPC receiver alternative port\n"
"    depends_on:\n"
"      - jaeger-all-in-one\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:187
msgid "Now we are ready to run our application. If using `application.properties` to configure the tracer:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:191
msgid "or if configuring the OTLP gRPC endpoint via JVM arguments:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:197
msgid "With the OpenTelemetry Collector, Jaeger system and application running, you can make a request to the provided endpoint:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:202
#, no-wrap
msgid ""
"$ curl http://localhost:8080/hello\n"
"hello\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:205
msgid "When the first request has been submitted, you will be able to see the tracing information in the logs:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:211
#, no-wrap
msgid ""
"10:49:02 INFO  traceId=, parentId=, spanId=, sampled= [io.quarkus] (main) Installed features: [cdi, opentelemetry, opentelemetry-otlp-exporter, rest-client, resteasy, smallrye-context-propagation, vertx]\n"
"10:49:03 INFO  traceId=17ceb8429b9f25b0b879fa1503259456, parentId=3125c8bee75b7ad6, spanId=58ce77c86dd23457, sampled=true [or.ac.op.TracedResource] (executor-thread-1) hello\n"
"10:49:03 INFO  traceId=ad23acd6d9a4ed3d1de07866a52fa2df, parentId=, spanId=df13f5b45cf4d1e2, sampled=true [or.ac.op.TracedResource] (executor-thread-0) hello\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:215
msgid "Then visit the http://localhost:16686[Jaeger UI] to see the tracing information."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:217
msgid "Hit `CTRL+C` to stop the application."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:218
#, no-wrap
msgid "JDBC"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:221
msgid "The https://github.com/open-telemetry/opentelemetry-java-instrumentation/tree/main/instrumentation/jdbc/library[JDBC instrumentation] will add a span for each JDBC queries done by your application, to enable it, add the following dependency to your build file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:229
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.opentelemetry.instrumentation</groupId>\n"
"    <artifactId>opentelemetry-jdbc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:235
#, no-wrap
msgid "implementation(\"io.opentelemetry.instrumentation:opentelemetry-jdbc\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:238
msgid "As it uses a dedicated JDBC driver, you must configure your datasource and Hibernate ORM to use it."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:248
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=postgresql\n"
"# add ':otel' to your database URL\n"
"quarkus.datasource.jdbc.url=jdbc:otel:postgresql://localhost:5432/mydatabase\n"
"# use the 'OpenTelemetryDriver' instead of the one for your database\n"
"quarkus.datasource.jdbc.driver=io.opentelemetry.instrumentation.jdbc.OpenTelemetryDriver\n"
"# configure Hibernate ORM dialect\n"
"quarkus.hibernate-orm.dialect=org.hibernate.dialect.PostgreSQLDialect\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:250
#, no-wrap
msgid "Additional configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:253
msgid "Some use cases will require custom configuration of OpenTelemetry.  These sections will outline what is necessary to properly configure it."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:254
#, no-wrap
msgid "ID Generator"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:257
msgid "The OpenTelemetry extension will use by default a random https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#id-generators[ID Generator] when creating the trace and span identifier."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:260
msgid "Some vendor-specific protocols need a custom ID Generator, you can override the default one by creating a producer.  The OpenTelemetry extension will detect the `IdGenerator` CDI bean and will use it when configuring the tracer producer."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:265
#: upstream/_versions/main/guides/opentelemetry.adoc:365
#, no-wrap
msgid ""
"@Singleton\n"
"public class CustomConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:273
#, no-wrap
msgid ""
"    /** Creates a custom IdGenerator for OpenTelemetry */\n"
"    @Produces\n"
"    @Singleton\n"
"    public IdGenerator idGenerator() {\n"
"        return AwsXrayIdGenerator.getInstance();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:275
#, no-wrap
msgid "Propagators"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:278
msgid "OpenTelemetry propagates cross-cutting concerns through https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/context/api-propagators.md[propagators] that will share an underlying `Context` for storing state and accesing data across the lifespan of a distributed transaction."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:281
msgid "By default, the OpenTelemetry extension enables the https://www.w3.org/TR/trace-context/[W3C Trace Context] and the https://www.w3.org/TR/baggage/[W3C Baggage] propagators, you can however choose any of the supported OpenTelemetry propagators by setting the `propagators` config that is described in the <<configuration-reference>>."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:286
msgid "The `b3`, `b3multi`, `jaeger` and `ottrace` propagators will need the https://github.com/open-telemetry/opentelemetry-java/tree/main/extensions/trace-propagators[trace-propagators] extension to be added as a dependency to your project."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:294
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.opentelemetry</groupId>\n"
"    <artifactId>opentelemetry-extension-trace-propagators</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:300
#, no-wrap
msgid "implementation(\"io.opentelemetry:opentelemetry-extension-trace-propagators\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:303
msgid "The `xray` propagator will need the https://github.com/open-telemetry/opentelemetry-java/tree/main/extensions/aws[aws] extension to be added as a dependency to your project."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:311
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.opentelemetry</groupId>\n"
"    <artifactId>opentelemetry-extension-aws</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:317
#, no-wrap
msgid "implementation(\"io.opentelemetry:opentelemetry-extension-aws\")\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:320
#, no-wrap
msgid "Resource"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:323
msgid "A https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/overview.md#resources[resource] is a representation of the entity that is producing telemetry, it adds attributes to the exported trace to characterize who is producing the trace."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:327
msgid "You can add attributes by setting the `resource-attributes` tracer config that is described in the <<configuration-reference>>.  Since this property can be overridden at runtime, the OpenTelemetry extension will pick up its value following the order of precedence that is described in the xref:config-reference.adoc#configuration_sources[Quarkus Configuration Reference]."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:330
msgid "If by any means you need to use a custom resource or one that is provided by one of the https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk-extensions[OpenTelemetry SDK Extensions] you can create multiple resource producers. The OpenTelemetry extension will detect the `Resource` CDI beans and will merge them when configuring the tracer producer."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:335
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:341
#, no-wrap
msgid ""
"    @Produces\n"
"    @ApplicationScoped\n"
"    public Resource osResource() {\n"
"        return OsResource.get();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:348
#, no-wrap
msgid ""
"    @Produces\n"
"    @ApplicationScoped\n"
"    public Resource ecsResource() {\n"
"        return EcsResource.get();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:350
#, no-wrap
msgid "Sampler"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:354
msgid "A https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#sampling[sampler] decides whether a trace should be sampled and exported, controlling noise and overhead by reducing the number of sample of traces collected and sent to the collector."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:357
msgid "You can set a https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#built-in-samplers[built-in sampler] simply by setting the desired sampler config described in the <<configuration-reference>>."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:360
msgid "If you need to use a custom sampler or to use one that is provided by one of the https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk-extensions[OpenTelemetry SDK Extensions] you can create a sampler producer. The OpenTelemetry extension will detect the `Sampler` CDI bean and will use it when configuring the tracer producer."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:375
#, no-wrap
msgid ""
"    /** Creates a custom sampler for OpenTelemetry */\n"
"    @Produces\n"
"    @Singleton\n"
"    public Sampler sampler() {\n"
"        return JaegerRemoteSampler.builder()\n"
"        .setServiceName(\"my-service\")\n"
"        .build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:377
#, no-wrap
msgid "Additional instrumentation"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:381
msgid "Some Quarkus extensions will require additional code to ensure traces are propagated to subsequent execution.  These sections will outline what is necessary to propagate traces across process boundaries."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:383
msgid "The instrumentation documented in this section has been tested with Quarkus and works in both standard and native mode."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:384
#, no-wrap
msgid "CDI"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:388
msgid "Annotating a method in any CDI aware bean with the `io.opentelemetry.extension.annotations.WithSpan` annotation will create a new Span and establish any required relationships with the current Trace context."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:391
msgid "Method parameters can be annotated with the `io.opentelemetry.extension.annotations.SpanAttribute` annotation to indicate which method parameters should be part of the Trace."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:393
msgid "Example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:399
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class SpanBean {\n"
"    @WithSpan\n"
"    void span() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:401
#: upstream/_versions/main/guides/opentelemetry.adoc:406
#: upstream/_versions/main/guides/opentelemetry.adoc:411
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:404
#, no-wrap
msgid ""
"    @WithSpan(\"name\")\n"
"    void spanName() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:409
#, no-wrap
msgid ""
"    @WithSpan(kind = SERVER)\n"
"    void spanKind() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:414
#, no-wrap
msgid ""
"    @WithSpan\n"
"    void spanArgs(@SpanAttribute(value = \"arg\") String arg) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:417
#, no-wrap
msgid ""
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:419
#, no-wrap
msgid "SmallRye Reactive Messaging - Kafka"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:423
msgid "When using the SmallRye Reactive Messaging extension for Kafka, we are able to propagate the span into the Kafka Record with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:427
#, no-wrap
msgid "Metadata.of(TracingMetadata.withPrevious(Context.current()));\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:431
msgid "The above creates a `Metadata` object we can add to the `Message` being produced, which retrieves the OpenTelemetry `Context` to extract the current span for propagation."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:433
#, no-wrap
msgid "OpenTelemetry Configuration Reference"
msgstr ""
