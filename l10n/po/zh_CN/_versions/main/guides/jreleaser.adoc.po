# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/jreleaser.adoc:6
#, no-wrap
msgid "Packaging And Releasing With JReleaser"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:17
msgid "This guide covers packaging and releasing CLI applications using the link:https://jreleaser.org[JReleaser] tool."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/jreleaser.adoc:18
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:22
msgid "a GitHub account and a GitHub Personal Access token"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/jreleaser.adoc:23
#, no-wrap
msgid "Bootstrapping the project"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:27
msgid "First, we need a project that defines a CLI application. We recommend using the xref:picocli.adoc[PicoCLI] extension.  This can be done using the following command:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:33
msgid "This command initializes the file structure and the minimum set of required files in the project:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/jreleaser.adoc:53
#, no-wrap
msgid ""
".\n"
"├── README.md\n"
"├── mvnw\n"
"├── mvnw.cmd\n"
"├── pom.xml\n"
"└── src\n"
"    └── main\n"
"        ├── docker\n"
"        │   ├── Dockerfile.jvm\n"
"        │   ├── Dockerfile.legacy-jar\n"
"        │   └── Dockerfile.native\n"
"        ├── java\n"
"        │   └── org\n"
"        │       └── acme\n"
"        │           └── GreetingCommand.java\n"
"        └── resources\n"
"            └── application.properties\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:56
msgid "It will also configure the picocli extension in the `pom.xml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/jreleaser.adoc:63
#, no-wrap
msgid ""
"    <dependency>\n"
"      <groupId>io.quarkus</groupId>\n"
"      <artifactId>quarkus-picocli</artifactId>\n"
"    </dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/jreleaser.adoc:65
#, no-wrap
msgid "Preparing the project for GitHub releases"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:70
msgid "The project must be hosted at a GitHub repository before we continue. This task can be completed by logging into your GitHub account, creating a new repository, and adding the newly created sources to said repository. Choose the `main` branch as default to take advantage of conventions and thus configure less in your `pom.xml`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:78
msgid "You also need a GitHub Personal Access token to be able to post a release to the repository you just created. Follow the official documentation for link:https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token[creating a personal access token].  Store the newly created token at a safe place for future reference. Next, you have the choice of configuring the token as an environment variable named `JRELEASER_GITHUB_TOKEN` so that the tool can read it. Alternatively you may store the token at a secure location of your choosing, using a `.yml`, `.toml`, `.json`, or `.properties` file. The default location is `~/.jreleaser/config[format]`. For example, using the `.yml` format this file could look like:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/jreleaser.adoc:80
#, no-wrap
msgid "~/.jreleaser/config.yml"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/jreleaser.adoc:83
#, no-wrap
msgid "JRELEASER_GITHUB_TOKEN: <github-token-value>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:89
msgid "Alright. Add all sources and create a first commit. You can choose your own conventions for commit messages however you can get more bang for your buck when using JReleaser if you follow the link:https://www.conventionalcommits.org/en/v1.0.0/[Conventional Commits] specification. Make your first commit with the following message \"build: Add initial sources\"."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/jreleaser.adoc:90
#, no-wrap
msgid "Packaging as a Native Image distribution"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:95
msgid "Quarkus already knows how to create a native executable using GraalVM Native Image. The default setup will create a single executable file following a naming convention. However the JReleaser tool expects a distribution that is, a conventional file structure packaged as a Zip or Tar file. The file structure must follow this layout:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/jreleaser.adoc:103
#, no-wrap
msgid ""
".\n"
"├── LICENSE\n"
"├── README\n"
"└── bin\n"
"    └── executable\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:107
msgid "This structure lets you add all kinds of supporting files required by the executable, such as configuration files, shell completion scripts, man pages, license, readme, and more."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/jreleaser.adoc:108
#, no-wrap
msgid "Creating the distribution"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:113
msgid "We can leverage the link:http://maven.apache.org/plugins/maven-assembly-plugin/[maven-assembly-plugin] to create such a distribution. We'll also make use of the link:https://github.com/trustin/os-maven-plugin[os-maven-plugin] to properly identify the platform on which this executable can run, adding said platform to the distribution's filename."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:116
msgid "First, let's add the os-maven-plugin to the `pom.xml`. This plugin works as a Maven extension and as such must be added to the `<build>` section of the file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/jreleaser.adoc:128
#, no-wrap
msgid ""
"  <build>\n"
"    <extensions>\n"
"      <extension>\n"
"        <groupId>kr.motd.maven</groupId>\n"
"        <artifactId>os-maven-plugin</artifactId>\n"
"        <version>1.7.0</version>\n"
"      </extension>\n"
"    </extensions>\n"
"    <!-- ... -->\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:134
msgid "Next, native executables on Linux and macOS platforms typically do not have a file extension but Windows executables do, we need to take care of this when renaming the generated executable. We can also place the generated distributions into their own directory to avoid cluttering the `target` directory. Thus, let's add a couple of properties to the existing `<properties>` section in the `pom.xml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/jreleaser.adoc:139
#, no-wrap
msgid ""
"<executable-suffix/>\n"
"<distribution.directory>${project.build.directory}/distributions</distribution.directory>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:146
msgid "Now we configure the maven-assembly-plugin to create a Zip and a Tar file containing the executable and any supporting files it may need to perform its job. Take special note on the name of the distribution, this is where we make use of the platform properties detected by the os-maven-plugin. This plugin is configured in its own profile with the `single` goal bound to the `package` phase. It's done this way to avoid rebuilding the distribution every single time the build is invoked, as we only needed when we're ready for a release."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/jreleaser.adoc:191
#, no-wrap
msgid ""
"    <profile>\n"
"      <id>dist</id>\n"
"      <build>\n"
"        <plugins>\n"
"          <plugin>\n"
"            <groupId>org.apache.maven.plugins</groupId>\n"
"            <artifactId>maven-assembly-plugin</artifactId>\n"
"            <version>3.3.0</version>\n"
"            <configuration>\n"
"              <attach>false</attach>\n"
"              <appendAssemblyId>false</appendAssemblyId>\n"
"              <finalName>${project.artifactId}-${project.version}-${os.detected.classifier}</finalName>\n"
"              <outputDirectory>${distribution.directory}</outputDirectory>\n"
"              <workDirectory>${project.build.directory}/assembly/work</workDirectory>\n"
"              <descriptors>\n"
"                <descriptor>src/main/assembly/assembly.xml</descriptor>\n"
"              </descriptors>\n"
"            </configuration>\n"
"            <executions>\n"
"              <execution>\n"
"                <id>make-distribution</id>\n"
"                <phase>package</phase>\n"
"                <goals>\n"
"                  <goal>single</goal>\n"
"                </goals>\n"
"              </execution>\n"
"            </executions>\n"
"          </plugin>\n"
"        </plugins>\n"
"      </build>\n"
"    </profile>\n"
"    <profile>\n"
"      <id>dist-windows</id>\n"
"      <activation>\n"
"        <os>\n"
"          <family>windows</family>\n"
"        </os>\n"
"      </activation>\n"
"      <properties>\n"
"        <executable-suffix>.exe</executable-suffix>\n"
"      </properties>\n"
"    </profile>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:197
msgid "Note that two profiles are configured. The `dist` profile configures the assembly plugin, and it's configured in such a way that it must be activated explicitly by passing `-Pdist` as a command flag. On the other hand the `dist-windows` profile becomes active automatically when the build is run on a Windows platform. This second profile takes care of setting the value for the `executable-suffix` property which is required by the assembly descriptor, as shown next:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/jreleaser.adoc:199
#, no-wrap
msgid "src/main/assembly/assembly.xml"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/jreleaser.adoc:219
#, no-wrap
msgid ""
"<assembly\n"
"        xmlns=\"pass:[http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.0]\"\n"
"        xmlns:xsi=\"pass:[http://www.w3.org/2001/XMLSchema-instance]\"\n"
"        xsi:schemaLocation=\"pass:[http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.0] pass:[http://maven.apache.org/xsd/assembly-1.1.0.xsd]\">\n"
"    <id>dist</id>\n"
"    <formats>\n"
"        <format>tar.gz</format>\n"
"        <format>zip</format>\n"
"        <format>dir</format>\n"
"    </formats>\n"
"    <files>\n"
"        <file>\n"
"            <source>${project.build.directory}/${project.artifactId}-${project.version}-runner${executable-suffix}</source>\n"
"            <outputDirectory>./bin</outputDirectory>\n"
"            <destName>${project.artifactId}${executable-suffix}</destName>\n"
"        </file>\n"
"    </files>\n"
"</assembly>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:222
msgid "These are the files created by the assembly plugin when invoking `./mvnw -Pdist package` on macOS:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/jreleaser.adoc:233
#, no-wrap
msgid ""
"$ tree target/distributions/\n"
"target/distributions/\n"
"├── app-1.0.0-SNAPSHOT-osx-x86_64\n"
"│   └── app-1.0.0-SNAPSHOT-osx-x86_64\n"
"│       └── bin\n"
"│           └── app\n"
"├── app-1.0.0-SNAPSHOT-osx-x86_64.tar.gz\n"
"└── app-1.0.0-SNAPSHOT-osx-x86_64.zip\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:237
msgid "Feel free to update the assembly descriptor to include additional files such as LICENSE, readme, or anything else needed by the consumers of the executable. Make another commit right here with \"build: Configure distribution assembly\"."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:239
msgid "We're ready to go to the next phase: configuring the release."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/jreleaser.adoc:240
#, no-wrap
msgid "Adding JReleaser"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:245
msgid "The JReleaser tool can be invoked in many ways: as a CLI tool, as a Docker image, or as a Maven plugin. The last option is very convenient given that we are already working with Maven. Let's add yet another profile that contains the release configuration as once again we don't require this behavior to be active all the time only when we're ready to post a release:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/jreleaser.adoc:260
#, no-wrap
msgid ""
"    <profile>\n"
"      <id>release</id>\n"
"      <build>\n"
"        <plugins>\n"
"          <plugin>\n"
"            <groupId>org.jreleaser</groupId>\n"
"            <artifactId>jreleaser-maven-plugin</artifactId>\n"
"            <version>{jreleaser-version}</version>\n"
"          </plugin>\n"
"        </plugins>\n"
"      </build>\n"
"    </profile>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:266
msgid "There are a few goals we can invoke at this point, we can for example ask JReleaser to print out its current configuration by invoking the `./mvnw -Prelease jreleaser:config` command. The tool will output everything that it knows about the project. We can also generate the changelog by invoking `./mvnw -Prelease jreleaser:changelog`. A file containing the changelog will be placed at `target/jreleaser/release/CHANGELOG.md` which at this point should look like this:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/jreleaser.adoc:268
#: upstream/_versions/main/guides/jreleaser.adoc:299
#, no-wrap
msgid "target/jreleaser/release/CHANGELOG.md"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/jreleaser.adoc:271
#: upstream/_versions/main/guides/jreleaser.adoc:302
#, no-wrap
msgid "## Changelog\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/jreleaser.adoc:274
#, no-wrap
msgid ""
"8ef3307 build: Configure distribution assembly\n"
"5215200 build: Add initial sources\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:279
msgid "Not very exicting. But we can change this by instructing JReleaser to format the changelog according to our own conventions. You can manually specify patterns to categorize commits however if you chose to follow Conventional Commits we can instruct JReleaser to do the same. Add the following to the JReleaser plugin configuration section:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/jreleaser.adoc:294
#, no-wrap
msgid ""
"            <configuration>\n"
"              <jreleaser>\n"
"                <release>\n"
"                  <github>\n"
"                    <changelog>\n"
"                      <formatted>ALWAYS</formatted>\n"
"                      <preset>conventional-commits</preset>\n"
"                    </changelog>\n"
"                  </github>\n"
"                </release>\n"
"              </jreleaser>\n"
"            </configuration>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:297
msgid "Run the previous Maven command once again and inspect the generated changelog, it should now look like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/jreleaser.adoc:306
#, no-wrap
msgid ""
"## 🛠  Build\n"
"- 8ef3307 Configure distribution assembly (Andres Almiray)\n"
"- 5215200 Add initial sources (Andres Almiray)\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/jreleaser.adoc:311
#, no-wrap
msgid ""
"## Contributors\n"
"We'd like to thank the following people for their contributions:\n"
"Andres Almiray\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:316
msgid "There are more formatting options you may apply but for now these will suffice. Let's make yet another commit right now, with \"build: Configure JReleaser plugin\" as a commit message. If you want you can generate the changelog once again and see this latest commit added to the file."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/jreleaser.adoc:317
#, no-wrap
msgid "Adding distributions to the release"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:325
msgid "We've reached the point where we can configure the binary distributions. If you run the `./mvnw -Prelease jreleaser:config` command you'll notice there's no mention of any distribution files that we configured in previous steps. This is because the tool has no implicit knowledge of them, we must tell JReleaser which files we'd like to release. This decouples creation of distributions from release assets as you might like to add or remove files at your leisure. For this particular case we'll configure Zip files for both macOS and Windows, and a Tar file for Linux. These files must be added to the JReleaser plugin configuration section, like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/jreleaser.adoc:359
#, no-wrap
msgid ""
"            <configuration>\n"
"              <jreleaser>\n"
"                <release>\n"
"                  <github>\n"
"                    <changelog>\n"
"                      <formatted>ALWAYS</formatted>\n"
"                      <preset>conventional-commits</preset>\n"
"                    </changelog>\n"
"                  </github>\n"
"                </release>\n"
"                <distributions>\n"
"                  <app>\n"
"                    <type>NATIVE_IMAGE</type>\n"
"                    <artifacts>\n"
"                      <artifact>\n"
"                        <path>${distribution.directory}/{{distributionName}}-{{projectVersion}}-linux-x86_64.tar.gz</path>\n"
"                        <platform>linux-x86_64</platform>\n"
"                      </artifact>\n"
"                      <artifact>\n"
"                        <path>${distribution.directory}/{{distributionName}}-{{projectVersion}}-windows-x86_64.zip</path>\n"
"                        <platform>windows-x86_64</platform>\n"
"                      </artifact>\n"
"                      <artifact>\n"
"                        <path>${distribution.directory}/{{distributionName}}-{{projectVersion}}-osx-x86_64.zip</path>\n"
"                        <platform>osx-x86_64</platform>\n"
"                      </artifact>\n"
"                    </artifacts>\n"
"                  </app>\n"
"                </distributions>\n"
"              </jreleaser>\n"
"            </configuration>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:367
msgid "We can appreciate a distribution named `app` (same as the project's artifactId for convenience) with 3 configured artifacts.  Note the use of Maven properties and Mustache templates to define the paths. You may use explicit values if you want or rely on properties to parameterize the configuration. Maven properties resolve eagerly during build validation while Mustache templates resolve lazily during the execution of the JReleaser plugin goals. Each artifact must define a `platform` property that uniquely identifies them. If we run the `./mvnw -Prelease jreleaser:config` we'll quickly get an error as now that there's a configured distribution the plugin expects more metadata to be provided by the project:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/jreleaser.adoc:377
#, no-wrap
msgid ""
"[WARNING]   [validation] project.copyright must not be blank since 0.4.0. This warning will become an error in a future release.\n"
"[ERROR] == JReleaser ==\n"
"[ERROR] project.description must not be blank\n"
"[ERROR] project.website must not be blank\n"
"[ERROR] project.docsUrl must not be blank\n"
"[ERROR] project.license must not be blank\n"
"[ERROR] project.authors must not be blank\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:381
msgid "This metadata can be provided in two ways: either as part of the JReleaser plugin's configuration or using standard POM elements. If you choose the former option then the plugin's configuration may look like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/jreleaser.adoc:395
#, no-wrap
msgid ""
"            <configuration>\n"
"              <jreleaser>\n"
"                <project>\n"
"                 <description>app -- Sample Quarkus CLI application</description>\n"
"                 <website>pass:[https://github.com/aalmiray/app]</website>\n"
"                 <docsUrl>pass:[https://github.com/aalmiray/app]</docsUrl>\n"
"                 <license>APACHE-2.0</license>\n"
"                 <authors>Andres Almiray</authors>\n"
"                 <copyright>2021 Kordamp</copyright>\n"
"                </project>\n"
"                <!-- ... -->\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:399
msgid "If you choose to use standard POM elements then your `pom.xml` must contain these entries at the very least, of course adapting values to your own:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/jreleaser.adoc:419
#, no-wrap
msgid ""
"  <name>app</name>\n"
"  <description>app -- Sample Quarkus CLI application</description>\n"
"  <inceptionYear>2021</inceptionYear>\n"
"  <url>pass:[https://github.com/aalmiray/app]</url>\n"
"  <developers>\n"
"    <developer>\n"
"      <id>aalmiray</id>\n"
"      <name>Andres Almiray</name>\n"
"    </developer>\n"
"  </developers>\n"
"  <licenses>\n"
"    <license>\n"
"      <name>Apache-2.0</name>\n"
"      <url>pass:[http://www.apache.org/licenses/LICENSE-2.0.txt]</url>\n"
"      <distribution>repo</distribution>\n"
"    </license>\n"
"  </licenses>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:428
msgid "Yet, we're not still out of the woods as invoking the `./mvnw -Prelease jreleaser:config` once more will still result in another error, this time the failure relates to missing artifacts. This is because we did not assemble all required artifacts, yet the plugin expects them to be readily available. Here you have the choice to build the required artifacts on other nodes then copy them to their expected locations -- a task that can be performed running a GitHub Actions workflow on multiple nodes. Or you can instruct JReleaser to ignore some artifacts and select only those that match your current platform. Previously we showed how the distribution would look like when created on macOS, assuming we're still on that platform we have the correct artifact."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:433
msgid "We can instruct JReleaser to select only artifacts that match macOS at this point by invoking the `jreleaser:config` goal with an additional flag: `./mvnw -Prelease jreleaser:config -Djreleaser.select.current.platform`. This time the command will succeed and print out the model. Note that only the path for the macOS artifact has been fully resolved, leaving the other 2 paths untouched."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:438
msgid "Let's make one more commit here with \"build: Configure distribution artifacts\" as message. We can create a release right now, by invoking a different goal: `./mvnw -Prelease jreleaser:release -Djreleaser.select.current.platform`. This will create a Git release at the chosen repository, which includes tagging the repository, uploading the changelog, all distribution artifacts and their checksum as release assets."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:441
msgid "But before we do that let's add one additional feature, let's create a Homebrew formula that will make it easy for macOS users to consume the binary distribution, shall we?"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/jreleaser.adoc:442
#, no-wrap
msgid "Configuring Homebrew as a packager"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:447
msgid "link:https://brew.sh/[Homebrew] is a popular choice among macOS users to install and manage binaries. Homebrew packages are at their core a Ruby file (known as a formula) that's executed on the target environment to install or upgrade a particular binary. JReleaser can create formulae from binary distributions such as the one we already have configured."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:449
msgid "For this to work we simply have to enable Homebrew in the JReleaser plugin configuration like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/jreleaser.adoc:474
#, no-wrap
msgid ""
"                <distributions>\n"
"                  <app>\n"
"                    <type>NATIVE_IMAGE</type>\n"
"                    <brew>\n"
"                      <active>ALWAYS</active>\n"
"                    </brew>\n"
"                    <artifacts>\n"
"                      <artifact>\n"
"                        <path>${distribution.directory}/{{distributionName}}-{{projectVersion}}-linux-x86_64.tar.gz</path>\n"
"                        <platform>linux-x86_64</platform>\n"
"                      </artifact>\n"
"                      <artifact>\n"
"                        <path>${distribution.directory}/{{distributionName}}-{{projectVersion}}-windows-x86_64.zip</path>\n"
"                        <platform>windows-x86_64</platform>\n"
"                      </artifact>\n"
"                      <artifact>\n"
"                        <path>${distribution.directory}/{{distributionName}}-{{projectVersion}}-osx-x86_64.zip</path>\n"
"                        <platform>osx-x86_64</platform>\n"
"                      </artifact>\n"
"                    </artifacts>\n"
"                  </app>\n"
"                </distributions>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:479
msgid "One last thing, it's a good practice to publish Homebrew formulae for non-snapshot releases thus change the project's version from `1.0.0-SNAPSHOT` to say `1.0.0.Alpha1` or go directly with `1.0.0` as you feel like doing. One last commit and we're done, say \"feat: Add Homebrew packager configuration\" as commit message. Alright, we're finally ready, let's post a release!"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/jreleaser.adoc:480
#, no-wrap
msgid "Creating a release"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:487
msgid "It's been quite the whirlwind tour of adding configuration to the `pom.xml` but that's just for getting the project ready for its first release; subsequent release require less tampering with configuration. We can create a git release and the Homebrew formula with the `jreleaser:full-release` goal but if you still have some doubts on how things may play out then you can invoke the goal in dry-run mode that is, let JReleaser perform all local operations as needed without affecting remote resources such as Git repositories. This is how it would look like:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/jreleaser.adoc:493
#, no-wrap
msgid ""
"# because we changed the project's version\n"
"./mvnw -Pnative,dist package\n"
"./mvnw -Prelease jreleaser:full-release -Djreleaser.select.current.platform -Djreleaser.dryrun\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/jreleaser.adoc:530
#, no-wrap
msgid ""
"[INFO] --- jreleaser-maven-plugin:{jreleaser-version}:full-release (default-cli) @ app ---\n"
"[INFO] JReleaser {jreleaser-version}\n"
"[INFO]   - basedir set to /tmp/app\n"
"[WARNING] Platform selection is in effect\n"
"[WARNING] Artifacts will be filtered by platform matching: [osx-x86_64]\n"
"[INFO] Loading variables from /Users/aalmiray/.jreleaser/config.toml\n"
"[INFO] Validating configuration\n"
"[INFO] Project version set to 1.0.0.Alpha1\n"
"[INFO] Release is not snapshot\n"
"[INFO] Timestamp is 2021-12-16T13:31:12.163687+01:00\n"
"[INFO] HEAD is at a21f3f2\n"
"[INFO] Platform is osx-x86_64\n"
"[INFO] dryrun set to true\n"
"[INFO] Generating changelog: target/jreleaser/release/CHANGELOG.md\n"
"[INFO] Calculating checksums\n"
"[INFO]   [checksum] target/distributions/app-1.0.0.Alpha1-osx-x86_64.zip.sha256\n"
"[INFO] Signing files\n"
"[INFO] Signing is not enabled. Skipping\n"
"[INFO] Uploading is not enabled. Skipping\n"
"[INFO] Releasing to https://github.com/aalmiray/app\n"
"[INFO]  - uploading app-1.0.0.Alpha1-osx-x86_64.zip\n"
"[INFO]  - uploading checksums_sha256.txt\n"
"[INFO] Preparing distributions\n"
"[INFO]   - Preparing app distribution\n"
"[INFO]     [brew] preparing app distribution\n"
"[INFO] Packaging distributions\n"
"[INFO]   - Packaging app distribution\n"
"[INFO]     [brew] packaging app distribution\n"
"[INFO] Publishing distributions\n"
"[INFO]   - Publishing app distribution\n"
"[INFO]     [brew] publishing app distribution\n"
"[INFO]     [brew] setting up repository aalmiray/homebrew-tap\n"
"[INFO] Announcing release\n"
"[INFO] Announcing is not enabled. Skipping\n"
"[INFO] Writing output properties to target/jreleaser/output.properties\n"
"[INFO] JReleaser succeeded after 1.335 s\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:533
msgid "JReleaser will perform the following tasks for us:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:535
msgid "Generate a changelog based on all commits from the last tag (if any) to the latest commit."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:536
msgid "Calculate SHA256 (default) checksums for all input files."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:537
msgid "Sign all files with GPG. In our case we did not configure this step thus it's skipped."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:538
msgid "Upload assets to JFrog Artifactory or AWS S3. We also skip this step as it's not configured."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:539
msgid "Create a Git release at the chosen repository, tagging it."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:540
msgid "Upload all assets, including checksums."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:541
msgid "Create a Homebrew formula, publishing to pass:[https://gitcom.com/aamiray/homebrew-tap]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:545
msgid "Of course no remote repository was affected as we can appreciate the `-Djreleaser.dryrun` property was in effect. If you're so inclined inspect the contents of `target/jreleaser/package/app/brew/Formula/app.rb` which defines the Homebrew formula to be published. It should look something like this:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/jreleaser.adoc:547
#, no-wrap
msgid "app.rb"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/jreleaser.adoc:556
#, no-wrap
msgid ""
"class App < Formula\n"
"  desc \"app -- Sample Quarkus CLI application\"\n"
"  homepage \"pass:[https://github.com/aalmiray/app]\"\n"
"  url \"pass:[https://github.com/aalmiray/app/releases/download/v1.0.0.Alpha1/app-1.0.0.Alpha1-osx-x86_64.zip]\"\n"
"  version \"1.0.0.Alpha1\"\n"
"  sha256 \"a7e8df6eef3c4c5df7357e678b3c4bc6945b926cec4178a0239660de5dba0fc4\"\n"
"  license \"Apache-2.0\"\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/jreleaser.adoc:562
#, no-wrap
msgid ""
"  def install\n"
"    libexec.install Dir[\"*\"]\n"
"    bin.install_symlink \"#{libexec}/bin/app\"\n"
"  end\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/jreleaser.adoc:568
#, no-wrap
msgid ""
"  test do\n"
"    output = shell_output(\"#{bin}/app --version\")\n"
"    assert_match \"1.0.0.Alpha1\", output\n"
"  end\n"
"end\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:572
msgid "When ready, create a release for real this time by simply removing the `-Djreleaser.dryrun` flag from the command line, then browse to your repository and look at the freshly created release."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/jreleaser.adoc:573
#, no-wrap
msgid "Further reading"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:576
msgid "link:https://jreleaser.org/guide/latest/index.html[JReleaser] documentation."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/jreleaser.adoc:577
#, no-wrap
msgid "Reference"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/jreleaser.adoc:580
msgid "As a reference, these are the full contents of the `pom.xml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/jreleaser.adoc:824
#, no-wrap
msgid ""
"<?xml version=\"1.0\"?>\n"
"<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n"
"    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n"
"  <modelVersion>4.0.0</modelVersion>\n"
"  <groupId>org.acme</groupId>\n"
"  <artifactId>app</artifactId>\n"
"  <version>1.0.0.Alpha1</version>\n"
"  <name>app</name>\n"
"  <description>app -- Sample Quarkus CLI application</description>\n"
"  <inceptionYear>2021</inceptionYear>\n"
"  <url>https://github.com/aalmiray/app</url>\n"
"  <developers>\n"
"    <developer>\n"
"      <id>aalmiray</id>\n"
"      <name>Andres Almiray</name>\n"
"    </developer>\n"
"  </developers>\n"
"  <licenses>\n"
"    <license>\n"
"      <name>Apache-2.0</name>\n"
"      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n"
"      <distribution>repo</distribution>\n"
"    </license>\n"
"  </licenses>\n"
"  <properties>\n"
"    <executable-suffix/>\n"
"    <distribution.directory>${project.build.directory}/distributions</distribution.directory>\n"
"    <compiler-plugin.version>3.8.1</compiler-plugin.version>\n"
"    <maven.compiler.parameters>true</maven.compiler.parameters>\n"
"    <maven.compiler.source>11</maven.compiler.source>\n"
"    <maven.compiler.target>11</maven.compiler.target>\n"
"    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n"
"    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n"
"    <quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id>\n"
"    <quarkus.platform.group-id>io.quarkus.platform</quarkus.platform.group-id>\n"
"    <quarkus.platform.version>{quarkus-version}</quarkus.platform.version>\n"
"    <surefire-plugin.version>3.0.0-M5</surefire-plugin.version>\n"
"    <failsafe.useModulePath>false</failsafe.useModulePath>\n"
"  </properties>\n"
"  <dependencyManagement>\n"
"    <dependencies>\n"
"      <dependency>\n"
"        <groupId>${quarkus.platform.group-id}</groupId>\n"
"        <artifactId>${quarkus.platform.artifact-id}</artifactId>\n"
"        <version>${quarkus.platform.version}</version>\n"
"        <type>pom</type>\n"
"        <scope>import</scope>\n"
"      </dependency>\n"
"    </dependencies>\n"
"  </dependencyManagement>\n"
"  <dependencies>\n"
"    <dependency>\n"
"      <groupId>io.quarkus</groupId>\n"
"      <artifactId>quarkus-picocli</artifactId>\n"
"    </dependency>\n"
"    <dependency>\n"
"      <groupId>io.quarkus</groupId>\n"
"      <artifactId>quarkus-arc</artifactId>\n"
"    </dependency>\n"
"    <dependency>\n"
"      <groupId>io.quarkus</groupId>\n"
"      <artifactId>quarkus-junit5</artifactId>\n"
"      <scope>test</scope>\n"
"    </dependency>\n"
"  </dependencies>\n"
"  <build>\n"
"    <extensions>\n"
"      <extension>\n"
"        <groupId>kr.motd.maven</groupId>\n"
"        <artifactId>os-maven-plugin</artifactId>\n"
"        <version>1.7.0</version>\n"
"      </extension>\n"
"    </extensions>\n"
"    <plugins>\n"
"      <plugin>\n"
"        <groupId>${quarkus.platform.group-id}</groupId>\n"
"        <artifactId>quarkus-maven-plugin</artifactId>\n"
"        <version>${quarkus.platform.version}</version>\n"
"        <extensions>true</extensions>\n"
"        <executions>\n"
"          <execution>\n"
"            <goals>\n"
"              <goal>build</goal>\n"
"              <goal>generate-code</goal>\n"
"              <goal>generate-code-tests</goal>\n"
"            </goals>\n"
"          </execution>\n"
"        </executions>\n"
"      </plugin>\n"
"      <plugin>\n"
"        <artifactId>maven-compiler-plugin</artifactId>\n"
"        <version>${compiler-plugin.version}</version>\n"
"        <configuration>\n"
"          <parameters>${maven.compiler.parameters}</parameters>\n"
"        </configuration>\n"
"      </plugin>\n"
"      <plugin>\n"
"        <artifactId>maven-surefire-plugin</artifactId>\n"
"        <version>${surefire-plugin.version}</version>\n"
"        <configuration>\n"
"          <systemPropertyVariables>\n"
"            <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"            <maven.home>${maven.home}</maven.home>\n"
"          </systemPropertyVariables>\n"
"        </configuration>\n"
"      </plugin>\n"
"    </plugins>\n"
"  </build>\n"
"  <profiles>\n"
"    <profile>\n"
"      <id>native</id>\n"
"      <activation>\n"
"        <property>\n"
"          <name>native</name>\n"
"        </property>\n"
"      </activation>\n"
"      <build>\n"
"        <plugins>\n"
"          <plugin>\n"
"            <artifactId>maven-failsafe-plugin</artifactId>\n"
"            <version>${surefire-plugin.version}</version>\n"
"            <executions>\n"
"              <execution>\n"
"                <goals>\n"
"                  <goal>integration-test</goal>\n"
"                  <goal>verify</goal>\n"
"                </goals>\n"
"                <configuration>\n"
"                  <systemPropertyVariables>\n"
"                    <native.image.path>${project.build.directory}/${project.build.finalName}-runner</native.image.path>\n"
"                    <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"                    <maven.home>${maven.home}</maven.home>\n"
"                  </systemPropertyVariables>\n"
"                </configuration>\n"
"              </execution>\n"
"            </executions>\n"
"          </plugin>\n"
"        </plugins>\n"
"      </build>\n"
"      <properties>\n"
"        <quarkus.package.type>native</quarkus.package.type>\n"
"      </properties>\n"
"    </profile>\n"
"    <profile>\n"
"      <id>dist</id>\n"
"      <build>\n"
"        <plugins>\n"
"          <plugin>\n"
"            <groupId>org.apache.maven.plugins</groupId>\n"
"            <artifactId>maven-assembly-plugin</artifactId>\n"
"            <version>3.3.0</version>\n"
"            <configuration>\n"
"              <attach>false</attach>\n"
"              <appendAssemblyId>false</appendAssemblyId>\n"
"              <finalName>${project.artifactId}-${project.version}-${os.detected.classifier}</finalName>\n"
"              <outputDirectory>${distribution.directory}</outputDirectory>\n"
"              <workDirectory>${project.build.directory}/assembly/work</workDirectory>\n"
"              <descriptors>\n"
"                <descriptor>src/main/assembly/assembly.xml</descriptor>\n"
"              </descriptors>\n"
"            </configuration>\n"
"            <executions>\n"
"              <execution>\n"
"                <id>make-distribution</id>\n"
"                <phase>package</phase>\n"
"                <goals>\n"
"                  <goal>single</goal>\n"
"                </goals>\n"
"              </execution>\n"
"            </executions>\n"
"          </plugin>\n"
"        </plugins>\n"
"      </build>\n"
"    </profile>\n"
"    <profile>\n"
"      <id>dist-windows</id>\n"
"      <activation>\n"
"        <os>\n"
"          <family>windows</family>\n"
"        </os>\n"
"      </activation>\n"
"      <properties>\n"
"        <executable-suffix>.exe</executable-suffix>\n"
"      </properties>\n"
"    </profile>\n"
"    <profile>\n"
"      <id>release</id>\n"
"      <build>\n"
"        <plugins>\n"
"          <plugin>\n"
"            <groupId>org.jreleaser</groupId>\n"
"            <artifactId>jreleaser-maven-plugin</artifactId>\n"
"            <version>{jreleaser-version}</version>\n"
"            <configuration>\n"
"              <jreleaser>\n"
"                <!--project>\n"
"                 <description>app - Sample Quarkus CLI application</description>\n"
"                 <website>https://github.com/aalmiray/app</website>\n"
"                 <docsUrl>https://github.com/aalmiray/app</docsUrl>\n"
"                 <license>APACHE-2.0</license>\n"
"                 <authors>Andres Almiray</authors>\n"
"                 <copyright>2021 Kordamp</copyright>\n"
"                </project-->\n"
"                <release>\n"
"                  <github>\n"
"                    <changelog>\n"
"                      <formatted>ALWAYS</formatted>\n"
"                      <preset>conventional-commits</preset>\n"
"                    </changelog>\n"
"                  </github>\n"
"                </release>\n"
"                <distributions>\n"
"                  <app>\n"
"                    <type>NATIVE_IMAGE</type>\n"
"                    <brew>\n"
"                      <active>ALWAYS</active>\n"
"                    </brew>\n"
"                    <artifacts>\n"
"                      <artifact>\n"
"                        <path>${distribution.directory}/{{distributionName}}-{{projectVersion}}-linux-x86_64.tar.gz</path>\n"
"                        <platform>linux-x86_64</platform>\n"
"                      </artifact>\n"
"                      <artifact>\n"
"                        <path>${distribution.directory}/{{distributionName}}-{{projectVersion}}-windows-x86_64.zip</path>\n"
"                        <platform>windows-x86_64</platform>\n"
"                      </artifact>\n"
"                      <artifact>\n"
"                        <path>${distribution.directory}/{{distributionName}}-{{projectVersion}}-osx-x86_64.zip</path>\n"
"                        <platform>osx-x86_64</platform>\n"
"                      </artifact>\n"
"                    </artifacts>\n"
"                  </app>\n"
"                </distributions>\n"
"              </jreleaser>\n"
"            </configuration>\n"
"          </plugin>\n"
"        </plugins>\n"
"      </build>\n"
"    </profile>\n"
"  </profiles>\n"
"</project>\n"
msgstr ""
