# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:6
#, no-wrap
msgid "Reactive SQL Clients"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:13
msgid "The Reactive SQL Clients have a straightforward API focusing on scalability and low-overhead.  Currently, the following database servers are supported:"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:15
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:476
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:715
#, no-wrap
msgid "IBM Db2"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:16
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:496
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:660
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:731
#, no-wrap
msgid "PostgreSQL"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:17
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:481
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:678
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:719
#, no-wrap
msgid "MariaDB/MySQL"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:18
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:486
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:723
#, no-wrap
msgid "Microsoft SQL Server"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:19
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:491
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:727
#, no-wrap
msgid "Oracle"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:23
msgid "The Reactive SQL Client for Oracle is considered _tech preview_."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:27
msgid "In _tech preview_ mode, early feedback is requested to mature the idea.  There is no guarantee of stability in the platform until the solution matures.  Feedback is welcome on our https://groups.google.com/d/forum/quarkus-dev[mailing list] or as issues in our https://github.com/quarkusio/quarkus/issues[GitHub issue tracker]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:30
msgid "In this guide, you will learn how to implement a simple CRUD application exposing data stored in *PostgreSQL* over a RESTful API."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:32
msgid "Extension and connection pool class names for each client can be found at the bottom of this document."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:34
msgid "If you are not familiar with the Quarkus Vert.x extension, consider reading the xref:vertx.adoc[Using Eclipse Vert.x] guide first."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:36
msgid "The application shall manage fruit entities:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:40
#, no-wrap
msgid "public class Fruit {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:42
#, no-wrap
msgid "    public Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:44
#, no-wrap
msgid "    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:47
#, no-wrap
msgid ""
"    public Fruit() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:51
#, no-wrap
msgid ""
"    public Fruit(String name) {\n"
"        this.name = name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:57
#, no-wrap
msgid ""
"    public Fruit(Long id, String name) {\n"
"        this.id = id;\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:62
msgid "Do you need a ready-to-use PostgreSQL server to try out the examples?"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:66
#, no-wrap
msgid "docker run -it --rm=true --name quarkus_test -e POSTGRES_USER=quarkus_test -e POSTGRES_PASSWORD=quarkus_test -e POSTGRES_DB=quarkus_test -p 5432:5432 postgres:14.1\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:69
#, no-wrap
msgid "Installing"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:71
#, no-wrap
msgid "Reactive PostgreSQL Client extension"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:75
msgid "First, make sure your project has the `quarkus-reactive-pg-client` extension enabled.  If you are creating a new project, use the following command:"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:81
msgid "If you have an already created project, the `reactive-pg-client` extension can be added to an existing Quarkus project with the `add-extension` command:"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:86
msgid "Otherwise, you can manually add the dependency to your build file:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:88
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:123
#, no-wrap
msgid "pom.xml"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:94
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-reactive-pg-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:97
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:132
#, no-wrap
msgid "build.gradle"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:100
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-reactive-pg-client\")\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:102
#, no-wrap
msgid "Mutiny"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:105
msgid "RESTEasy Reactive includes supports for Mutiny types (e.g. `Uni` and `Multi`) out of the box."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:110
msgid "In this guide, we will use the Mutiny API of the Reactive PostgreSQL Client.  If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:112
#, no-wrap
msgid "JSON Binding"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:116
msgid "We will expose `Fruit` instances over HTTP in the JSON format.  Consequently, you also need to add the `quarkus-resteasy-reactive-jackson` extension:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:121
msgid "If you prefer not to use the command line, manually add the dependency to your build file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:129
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-reactive-jackson</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:135
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-resteasy-reactive-jackson\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:138
msgid "Of course, this is only a requirement for this guide, not any application using the Reactive PostgreSQL Client."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:139
#, no-wrap
msgid "Configuring"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:142
msgid "The Reactive PostgreSQL Client can be configured with standard Quarkus datasource properties and a reactive URL:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:144
#, no-wrap
msgid "src/main/resources/application.properties"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:150
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.datasource.username=quarkus_test\n"
"quarkus.datasource.password=quarkus_test\n"
"quarkus.datasource.reactive.url=postgresql://localhost:5432/quarkus_test\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:153
msgid "With that you may create your `FruitResource` skeleton and `@Inject` a `io.vertx.mutiny.pgclient.PgPool` instance:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:155
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:174
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:264
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:314
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:341
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:373
#, no-wrap
msgid "src/main/java/org/acme/vertx/FruitResource.java"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:159
#, no-wrap
msgid ""
"@Path(\"fruits\")\n"
"public class FruitResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:163
#, no-wrap
msgid ""
"    @Inject\n"
"    io.vertx.mutiny.pgclient.PgPool client;\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:165
#, no-wrap
msgid "Database schema and seed data"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:169
msgid "Before we implement the REST endpoint and data management code, we need to setup the database schema.  It would also be convenient to have some data inserted up-front."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:172
msgid "For production we would recommend to use something like the xref:flyway.adoc[Flyway database migration tool].  But for development we can simply drop and create the tables on startup, and then insert a few fruits."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:179
#, no-wrap
msgid ""
"@Inject\n"
"@ConfigProperty(name = \"myapp.schema.create\", defaultValue = \"true\") // <1>\n"
"boolean schemaCreate;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:186
#, no-wrap
msgid ""
"@PostConstruct\n"
"void config() {\n"
"    if (schemaCreate) {\n"
"        initdb();\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:190
#, no-wrap
msgid ""
"private void initdb() {\n"
"    // TODO\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:193
msgid "You may override the default value of the `myapp.schema.create` property in the `application.properties` file."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:197
msgid "Almost ready! To initialize the DB in development mode, we will use the client simple `query` method.  It returns a `Uni` and thus can be composed to execute queries sequentially:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:206
#, no-wrap
msgid ""
"client.query(\"DROP TABLE IF EXISTS fruits\").execute()\n"
"    .flatMap(r -> client.query(\"CREATE TABLE fruits (id SERIAL PRIMARY KEY, name TEXT NOT NULL)\").execute())\n"
"    .flatMap(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Orange')\").execute())\n"
"    .flatMap(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Pear')\").execute())\n"
"    .flatMap(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Apple')\").execute())\n"
"    .await().indefinitely();\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:211
msgid "Wondering why we need block until the latest query is completed? This code is part of a `@PostConstruct` method and Quarkus invokes it synchronously.  As a consequence, returning prematurely could lead to serving requests while the database is not ready yet."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:215
msgid "That's it! So far we have seen how to configure a pooled client and execute simple queries.  We are now ready to develop the data management code and implement our RESTful endpoint."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:216
#, no-wrap
msgid "Using"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:218
#, no-wrap
msgid "Query results traversal"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:222
msgid "In development mode, the database is set up with a few rows in the `fruits` table.  To retrieve all the data, we will use the `query` method again:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:226
#, no-wrap
msgid "Uni<RowSet<Row>> rowSet = client.query(\"SELECT id, name FROM fruits ORDER BY name ASC\").execute();\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:230
msgid "When the operation completes, we will get a `RowSet` that has all the rows buffered in memory.  A `RowSet` is an `java.lang.Iterable<Row>` and thus can be converted to a `Multi`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:236
#, no-wrap
msgid ""
"Multi<Fruit> fruits = rowSet\n"
"  .onItem().transformToMulti(set -> Multi.createFrom().iterable(set))\n"
"  .onItem().transform(Fruit::from);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:240
msgid "The `Fruit#from` method converts a `Row` instance to a `Fruit` instance.  It is extracted as a convenience for the implementation of the other data management methods:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:242
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:252
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:299
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:330
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:361
#, no-wrap
msgid "src/main/java/org/acme/vertx/Fruit.java"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:247
#, no-wrap
msgid ""
"private static Fruit from(Row row) {\n"
"    return new Fruit(row.getLong(\"id\"), row.getString(\"name\"));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:250
msgid "Putting it all together, the `Fruit.findAll` method looks like:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:259
#, no-wrap
msgid ""
"public static Multi<Fruit> findAll(PgPool client) {\n"
"    return client.query(\"SELECT id, name FROM fruits ORDER BY name ASC\").execute()\n"
"            .onItem().transformToMulti(set -> Multi.createFrom().iterable(set))\n"
"            .onItem().transform(Fruit::from);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:262
msgid "And the endpoint to get all fruits from the backend:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:270
#, no-wrap
msgid ""
"@GET\n"
"public Multi<Fruit> get() {\n"
"    return Fruit.findAll(client);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:273
msgid "Now start Quarkus in dev mode with:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:277
msgid "Lastly, open your browser and navigate to http://localhost:8080/fruits, you should see:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:281
#, no-wrap
msgid "[{\"id\":3,\"name\":\"Apple\"},{\"id\":1,\"name\":\"Orange\"},{\"id\":2,\"name\":\"Pear\"}]\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:283
#, no-wrap
msgid "Prepared queries"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:286
msgid "The Reactive PostgreSQL Client can also prepare queries and take parameters that are replaced in the SQL statement at execution time:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:290
#, no-wrap
msgid "client.preparedQuery(\"SELECT id, name FROM fruits WHERE id = $1\").execute(Tuple.of(id))\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:294
msgid "For PostgreSQL, the SQL string can refer to parameters by position, using `$1`, `$2`, ...etc.  Please refer to the <<Database Clients details>> section for other databases."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:297
msgid "Similar to the simple `query` method, `preparedQuery` returns an instance of `PreparedQuery<RowSet<Row>>`.  Equipped with this tooling, we are able to safely use an `id` provided by the user to get the details of a particular fruit:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:306
#, no-wrap
msgid ""
"public static Uni<Fruit> findById(PgPool client, Long id) {\n"
"    return client.preparedQuery(\"SELECT id, name FROM fruits WHERE id = $1\").execute(Tuple.of(id)) // <1>\n"
"            .onItem().transform(RowSet::iterator) // <2>\n"
"            .onItem().transform(iterator -> iterator.hasNext() ? from(iterator.next()) : null); // <3>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:308
msgid "Create a `Tuple` to hold the prepared query parameters."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:309
msgid "Get an `Iterator` for the `RowSet` result."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:310
msgid "Create a `Fruit` instance from the `Row` if an entity was found."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:312
msgid "And in the JAX-RS resource:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:323
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"{id}\")\n"
"public Uni<Response> getSingle(Long id) {\n"
"    return Fruit.findById(client, id)\n"
"            .onItem().transform(fruit -> fruit != null ? Response.ok(fruit) : Response.status(Status.NOT_FOUND)) // <1>\n"
"            .onItem().transform(ResponseBuilder::build); // <2>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:325
msgid "Prepare a JAX-RS response with either the `Fruit` instance if found or the `404` status code."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:326
msgid "Build and send the response."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:328
msgid "The same logic applies when saving a `Fruit`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:336
#, no-wrap
msgid ""
"public Uni<Long> save(PgPool client) {\n"
"    return client.preparedQuery(\"INSERT INTO fruits (name) VALUES ($1) RETURNING id\").execute(Tuple.of(name))\n"
"            .onItem().transform(pgRowSet -> pgRowSet.iterator().next().getLong(\"id\"));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:339
msgid "And in the web resource we handle the `POST` request:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:349
#, no-wrap
msgid ""
"@POST\n"
"public Uni<Response> create(Fruit fruit) {\n"
"    return fruit.save(client)\n"
"            .onItem().transform(id -> URI.create(\"/fruits/\" + id))\n"
"            .onItem().transform(uri -> Response.created(uri).build());\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:351
#, no-wrap
msgid "Result metadata"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:354
msgid "A `RowSet` does not only hold your data in memory, it also gives you some information about the data itself, such as:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:356
msgid "the number of rows affected by the query (inserted/deleted/updated/retrieved depending on the query type),"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:357
msgid "the column names."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:359
msgid "Let's use this to support removal of fruits in the database:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:367
#, no-wrap
msgid ""
"public static Uni<Boolean> delete(PgPool client, Long id) {\n"
"    return client.preparedQuery(\"DELETE FROM fruits WHERE id = $1\").execute(Tuple.of(id))\n"
"            .onItem().transform(pgRowSet -> pgRowSet.rowCount() == 1); // <1>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:369
msgid "Inspect metadata to determine if a fruit has been actually deleted."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:371
msgid "And to handle the HTTP `DELETE` method in the web resource:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:382
#, no-wrap
msgid ""
"@DELETE\n"
"@Path(\"{id}\")\n"
"public Uni<Response> delete(Long id) {\n"
"    return Fruit.delete(client, id)\n"
"            .onItem().transform(deleted -> deleted ? Status.NO_CONTENT : Status.NOT_FOUND)\n"
"            .onItem().transform(status -> Response.status(status).build());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:386
msgid "With `GET`, `POST` and `DELETE` methods implemented, we may now create a minimal web page to try the RESTful application out.  We will use https://jquery.com/[jQuery] to simplify interactions with the backend:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:399
#, no-wrap
msgid ""
"<!doctype html>\n"
"<html>\n"
"<head>\n"
"    <meta charset=\"utf-8\"/>\n"
"    <title>Reactive PostgreSQL Client - Quarkus</title>\n"
"    <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"\n"
"            integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"></script>\n"
"    <script type=\"application/javascript\" src=\"fruits.js\"></script>\n"
"</head>\n"
"<body>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:401
#, no-wrap
msgid "<h1>Fruits API Testing</h1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:404
#, no-wrap
msgid ""
"<h2>All fruits</h2>\n"
"<div id=\"all-fruits\"></div>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:409
#, no-wrap
msgid ""
"<h2>Create Fruit</h2>\n"
"<input id=\"fruit-name\" type=\"text\">\n"
"<button id=\"create-fruit-button\" type=\"button\">Create</button>\n"
"<div id=\"create-fruit\"></div>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:412
#, no-wrap
msgid ""
"</body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:415
msgid "In the Javascript code, we need a function to refresh the list of fruits when:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:417
msgid "the page is loaded, or"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:418
msgid "a fruit is added, or"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:419
msgid "a fruit is deleted."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:444
#, no-wrap
msgid ""
"function refresh() {\n"
"    $.get('/fruits', function (fruits) {\n"
"        var list = '';\n"
"        (fruits || []).forEach(function (fruit) { // <1>\n"
"            list = list\n"
"                + '<tr>'\n"
"                + '<td>' + fruit.id + '</td>'\n"
"                + '<td>' + fruit.name + '</td>'\n"
"                + '<td><a href=\"#\" onclick=\"deleteFruit(' + fruit.id + ')\">Delete</a></td>'\n"
"                + '</tr>'\n"
"        });\n"
"        if (list.length > 0) {\n"
"            list = ''\n"
"                + '<table><thead><th>Id</th><th>Name</th><th></th></thead>'\n"
"                + list\n"
"                + '</table>';\n"
"        } else {\n"
"            list = \"No fruits in database\"\n"
"        }\n"
"        $('#all-fruits').html(list);\n"
"    });\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:448
#, no-wrap
msgid ""
"function deleteFruit(id) {\n"
"    $.ajax('/fruits/' + id, {method: 'DELETE'}).then(refresh);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:450
#, no-wrap
msgid "$(document).ready(function () {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:459
#, no-wrap
msgid ""
"    $('#create-fruit-button').click(function () {\n"
"        var fruitName = $('#fruit-name').val();\n"
"        $.post({\n"
"            url: '/fruits',\n"
"            contentType: 'application/json',\n"
"            data: JSON.stringify({name: fruitName})\n"
"        }).then(refresh);\n"
"    });\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:462
#, no-wrap
msgid ""
"    refresh();\n"
"});\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:464
msgid "The `fruits` parameter is not defined when the database is empty."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:467
msgid "All done! Navigate to http://localhost:8080/fruits.html and read/create/delete some fruits."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:469
#, no-wrap
msgid "Database Clients details"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:473
#, no-wrap
msgid "Database"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:473
#, no-wrap
msgid "Extension name"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:473
#, no-wrap
msgid "Pool class name"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:475
#, no-wrap
msgid "Placeholders"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:477
#, no-wrap
msgid "`quarkus-reactive-db2-client`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:478
#, no-wrap
msgid "`io.vertx.mutiny.db2client.DB2Pool`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:480
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:485
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:495
#, no-wrap
msgid "`?`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:482
#, no-wrap
msgid "`quarkus-reactive-mysql-client`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:483
#, no-wrap
msgid "`io.vertx.mutiny.mysqlclient.MySQLPool`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:487
#, no-wrap
msgid "`quarkus-reactive-mssql-client`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:488
#, no-wrap
msgid "`io.vertx.mutiny.mssqlclient.MSSQLPool`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:490
#, no-wrap
msgid "`@p1`, `@p2`, etc."
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:492
#, no-wrap
msgid "`quarkus-reactive-oracle-client`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:493
#, no-wrap
msgid "`io.vertx.mutiny.oracleclient.OraclePool`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:497
#, no-wrap
msgid "`quarkus-reactive-pg-client`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:498
#, no-wrap
msgid "`io.vertx.mutiny.pgclient.PgPool`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:499
#, no-wrap
msgid "`$1`, `$2`, etc."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:501
#, no-wrap
msgid "Transactions"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:506
msgid "The reactive SQL clients support transactions.  A transaction is started with `io.vertx.mutiny.sqlclient.SqlConnection#begin` and terminated with either `io.vertx.mutiny.sqlclient.Transaction#commit` or `io.vertx.mutiny.sqlclient.Transaction#rollback`.  All these operations are asynchronous:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:508
msgid "`connection.begin()` returns a `Uni<Transaction>`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:509
msgid "`transaction.commit()` and `transaction.rollback()` return `Uni<Void>`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:512
msgid "Managing transactions in the reactive programming world can be cumbersome.  Instead of writing repetitive and complex (thus error-prone!) code, you can use the `io.vertx.mutiny.sqlclient.Pool#withTransaction` helper method."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:514
msgid "The following snippet shows how to run 2 insertions in the same transaction:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:523
#, no-wrap
msgid ""
"public static Uni<Void> insertTwoFruits(PgPool client, Fruit fruit1, Fruit fruit2) {\n"
"    return client.withTransaction(conn -> {\n"
"        Uni<RowSet<Row>> insertOne = conn.preparedQuery(\"INSERT INTO fruits (name) VALUES ($1) RETURNING id\")\n"
"                .execute(Tuple.of(fruit1.name));\n"
"        Uni<RowSet<Row>> insertTwo = conn.preparedQuery(\"INSERT INTO fruits (name) VALUES ($1) RETURNING id\")\n"
"                .execute(Tuple.of(fruit2.name));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:529
#, no-wrap
msgid ""
"        return Uni.combine().all().unis(insertOne, insertTwo)\n"
"                // Ignore the results (the two ids)\n"
"                .discardItems();\n"
"    });\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:532
msgid "In this example, the transaction is automatically committed on success or rolled back on failure."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:534
msgid "You can also create dependent actions as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:538
#, no-wrap
msgid "return client.withTransaction(conn -> conn\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:541
#, no-wrap
msgid ""
"        .preparedQuery(\"INSERT INTO person (firstname,lastname) VALUES ($1,$2) RETURNING id\")\n"
"        .execute(Tuple.of(person.getFirstName(), person.getLastName()))\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:544
#, no-wrap
msgid ""
"        .onItem().transformToUni(id -> conn.preparedQuery(\"INSERT INTO addr (person_id,addrline1) VALUES ($1,$2)\")\n"
"                .execute(Tuple.of(id.iterator().next().getLong(\"id\"), person.getLastName())))\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:546
#, no-wrap
msgid "        .onItem().ignore().andContinueWithNull());\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:548
#, no-wrap
msgid "Working with batch query results"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:552
msgid "When executing batch queries, reactive SQL clients return a `RowSet` that corresponds to the results of the first element in the batch.  To get the results of the following batch elements, you must invoke the `RowSet#next` method until it returns `null`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:555
msgid "Let's say you want to update some rows and compute the total number of affected rows.  You must inspect each `RowSet`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:559
#, no-wrap
msgid "PreparedQuery<RowSet<Row>> preparedQuery = client.preparedQuery(\"UPDATE fruits SET name = $1 WHERE id = $2\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:564
#, no-wrap
msgid ""
"Uni<RowSet<Row>> rowSet = preparedQuery.executeBatch(Arrays.asList(\n"
"        Tuple.of(\"Orange\", 1),\n"
"        Tuple.of(\"Pear\", 2),\n"
"        Tuple.of(\"Apple\", 3)));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:572
#, no-wrap
msgid ""
"Uni<Integer> totalAffected = rowSet.onItem().transform(res -> {\n"
"    int total = 0;\n"
"    do {\n"
"        total += res.rowCount(); // <1>\n"
"    } while ((res = res.next()) != null); // <2>\n"
"    return total;\n"
"});\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:574
msgid "Compute the sum of `RowSet#rowCount`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:575
msgid "Invoke `RowSet#next` until it returns `null`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:577
msgid "As another example, if you want to load all the rows you just inserted, you must concatenate the contents of each `RowSet`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:581
#, no-wrap
msgid "PreparedQuery<RowSet<Row>> preparedQuery = client.preparedQuery(\"INSERT INTO fruits (name) VALUES ($1) RETURNING *\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:586
#, no-wrap
msgid ""
"Uni<RowSet<Row>> rowSet = preparedQuery.executeBatch(Arrays.asList(\n"
"        Tuple.of(\"Orange\"),\n"
"        Tuple.of(\"Pear\"),\n"
"        Tuple.of(\"Apple\")));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:601
#, no-wrap
msgid ""
"// Generate a Multi of RowSet items\n"
"Multi<RowSet<Row>> rowSets = rowSet.onItem().transformToMulti(res -> {\n"
"    return Multi.createFrom().generator(() -> res, (rs, emitter) -> {\n"
"        RowSet<Row> next = null;\n"
"        if (rs != null) {\n"
"            emitter.emit(rs);\n"
"            next = rs.next();\n"
"        }\n"
"        if (next == null) {\n"
"            emitter.complete();\n"
"        }\n"
"        return next;\n"
"    });\n"
"});\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:604
#, no-wrap
msgid ""
"// Transform each RowSet into Multi of Row items and Concatenate\n"
"Multi<Row> rows = rowSets.onItem().transformToMultiAndConcatenate(Multi.createFrom()::iterable);\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:606
#, no-wrap
msgid "Multiple Datasources"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:609
msgid "The reactive SQL clients support defining several datasources."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:611
msgid "A typical configuration with several datasources would look like:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:618
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=postgresql <1>\n"
"quarkus.datasource.username=user-default\n"
"quarkus.datasource.password=password-default\n"
"quarkus.datasource.reactive.url=postgresql://localhost:5432/default\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:623
#, no-wrap
msgid ""
"quarkus.datasource.\"additional1\".db-kind=postgresql <2>\n"
"quarkus.datasource.\"additional1\".username=user-additional1\n"
"quarkus.datasource.\"additional1\".password=password-additional1\n"
"quarkus.datasource.\"additional1\".reactive.url=postgresql://localhost:5432/additional1\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:628
#, no-wrap
msgid ""
"quarkus.datasource.\"additional2\".db-kind=mysql <3>\n"
"quarkus.datasource.\"additional2\".username=user-additional2\n"
"quarkus.datasource.\"additional2\".password=password-additional2\n"
"quarkus.datasource.\"additional2\".reactive.url=mysql://localhost:3306/additional2\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:630
msgid "The default datasource - using PostgreSQL."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:631
msgid "A named datasource called `additional1` - using PostgreSQL."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:632
msgid "A named datasource called `additional2` - using MySQL."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:634
msgid "You can then inject the clients as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:639
#, no-wrap
msgid ""
"@Inject <1>\n"
"PgPool defaultClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:643
#, no-wrap
msgid ""
"@Inject\n"
"@ReactiveDataSource(\"additional1\") <2>\n"
"PgPool additional1Client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:647
#, no-wrap
msgid ""
"@Inject\n"
"@ReactiveDataSource(\"additional2\")\n"
"MySQLPool additional2Client;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:649
msgid "Injecting the client for the default datasource does not require anything special."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:650
msgid "For a named datasource, you use the `@ReactiveDataSource` CDI qualifier with the datasource name as its value."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:651
#, no-wrap
msgid "UNIX Domain Socket connections"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:654
msgid "The PostgreSQL and MariaDB/MySQL clients can be configured to connect to the server through a UNIX domain socket."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:656
msgid "First make sure that xref:vertx-reference.adoc#native-transport[native transport support] is enabled."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:659
msgid "Then configure the database connection url.  This step depends on the database type."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:663
msgid "PostgresSQL domain socket paths have the following form: `<directory>/.s.PGSQL.<port>`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:665
msgid "The database connection url must be configured so that:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:667
msgid "the `host` is the `directory` in the socket path"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:668
msgid "the `port` is the `port` in the socket path"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:670
msgid "Consider the following socket path: `/var/run/postgresql/.s.PGSQL.5432`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:672
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:685
msgid "In `application.properties` add:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:676
#, no-wrap
msgid "quarkus.datasource.reactive.url=postgresql://:5432/quarkus_test?host=/var/run/postgresql\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:681
msgid "The database connection url must be configured so that the `host` is the socket path."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:683
msgid "Consider the following socket path: `/var/run/mysqld/mysqld.sock`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:689
#, no-wrap
msgid "quarkus.datasource.reactive.url=mysql:///quarkus_test?host=/var/run/mysqld/mysqld.sock\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:691
#, no-wrap
msgid "Pooled Connection `idle-timeout`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:695
msgid "Reactive datasources can be configured with an `idle-timeout` (in milliseconds).  It is the maximum time a connection remains unused in the pool before it is closed."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:697
msgid "The `idle-timeout` is disabled by default."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:699
msgid "For example, you could expire idle connections after 60 minutes:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:703
#, no-wrap
msgid "quarkus.datasource.reactive.idle-timeout=PT60M\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:705
#, no-wrap
msgid "Configuration Reference"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:707
#, no-wrap
msgid "Common Datasource"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:711
#, no-wrap
msgid "Reactive Datasource"
msgstr ""
