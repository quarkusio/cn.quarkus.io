# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:6
#, no-wrap
msgid "Simplified Hibernate ORM with Panache and Kotlin"
msgstr "用Panache和Kotlin简化Hibernate ORM"

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:15
msgid "Hibernate ORM is the de facto standard JPA implementation and is well-known in the Java ecosystem. Hibernate ORM with Panache offers a new layer atop this familiar framework.  This guide will not dive in to the specifics of either as those are already covered in the xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache guide].  In this guide, we'll cover the Kotlin specific changes needed to use Hibernate ORM with Panache in your Kotlin-based Quarkus applications."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:17
msgid "When using the kotlin version of Hibernate ORM with Panache, note that the `PanacheEntity`, `PanacheQuery` and `PanacheRepository` are in a different package: `io.quarkus.hibernate.orm.panache.kotlin`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:18
#, no-wrap
msgid "First: an example"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:23
msgid "As we saw in the Hibernate with Panache guide, it allows us to extend the functionality in our entities and repositories (also known as DAOs) with some automatically provided functionality.  When using Kotlin, the approach is very similar to what we see in the Java version with a slight change or two.  To Panache-enable your entity, you would define it something like:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:32
#, no-wrap
msgid ""
"@Entity\n"
"class Person: PanacheEntity {\n"
"    lateinit var name: String\n"
"    lateinit var birth: LocalDate\n"
"    lateinit var status: Status\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:37
msgid "As you can see our entities remain simple.  There is, however, a slight difference from the Java version.  The Kotlin language doesn't support the notion of static methods in quite the same way as Java does.  Instead, we must use a https://kotlinlang.org/docs/tutorials/kotlin-for-py/objects-and-companion-objects.html#companion-objects[companion object]:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:47
#, no-wrap
msgid ""
"@Entity\n"
"class Person : PanacheEntity() {\n"
"    companion object: PanacheCompanion<Person> {  // <1>\n"
"        fun findByName(name: String) = find(\"name\", name).firstResult()\n"
"        fun findAlive() = list(\"status\", Status.Alive)\n"
"        fun deleteStefs() = delete(\"name\", \"Stef\")\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:52
#, no-wrap
msgid ""
"    lateinit var name: String  // <2>\n"
"    lateinit var birth: LocalDate\n"
"    lateinit var status: Status\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:55
msgid "The companion object holds all the methods not related to a specific instance allowing for general management and querying bound to a specific type."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:58
msgid "Here there are options, but we've chosen the `lateinit` approach.  This allows us to declare these fields as non-null knowing they will be properly assigned either by the constructor (not shown) or by hibernate loading data from the database."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:62
msgid "These types differ from the Java types mentioned in those tutorials.  For Kotlin support, all the Panache types will be found in the `io.quarkus.hibernate.orm.panache.kotlin` package.  This subpackage allows for the distinction between the Java and Kotlin variants and allows for both to be used unambiguously in a single project."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:66
msgid "In the Kotlin version, we've simply moved the bulk of the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[`active record pattern`] functionality to the `companion object`.  Apart from this slight change, we can then work with our types in ways that map easily from the Java side of world."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:68
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:72
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:74
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:76
msgid "The solution is located in the `hibernate-orm-panache-kotlin-quickstart` {quickstarts-tree-url}/hibernate-orm-panache-kotlin-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:78
#, no-wrap
msgid "Setting up and configuring Hibernate ORM with Panache and Kotlin"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:83
msgid "To get started using Hibernate ORM with Panache and Kotlin, you can, generally, follow the steps laid out in the Java tutorial. The biggest change to configuring your project is the Quarkus artifact to include.  You can, of course, keep the Java version if you need but if all you need are the Kotlin APIs then include the following dependency instead:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:85
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:91
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-hibernate-orm-panache-kotlin</artifactId>  // <1>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:94
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:102
msgid "Note the addition of `-kotlin` on the end. Generally you'll only need this version but if your project will be using both Java and Kotlin code, you can safely include both artifacts."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:96
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:99
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-hibernate-orm-panache-kotlin\") <1>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:103
#, no-wrap
msgid "Using the repository pattern"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:106
#, no-wrap
msgid "Defining your entity"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:109
msgid "When using the repository pattern, you can define your entities as regular JPA entities."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:120
#, no-wrap
msgid ""
"@Entity\n"
"class Person {\n"
"    @Id\n"
"    @GeneratedValue\n"
"    var id: Long? = null;\n"
"    lateinit var name: String\n"
"    lateinit var birth: LocalDate\n"
"    lateinit var status: Status\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:122
#, no-wrap
msgid "Defining your repository"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:126
msgid "When using Repositories, you get the exact same convenient methods as with the active record pattern, injected in your Repository, by making them implement `PanacheRepository`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:135
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class PersonRepository: PanacheRepository<Person> {\n"
"     fun findByName(name: String) = find(\"name\", name).firstResult()\n"
"     fun findAlive() = list(\"status\", Status.Alive)\n"
"     fun deleteStefs() = delete(\"name\", \"Stef\")\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:139
msgid "All the operations that are defined on `PanacheEntityBase` are available on your repository, so using it is exactly the same as using the active record pattern, except you need to inject it:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:144
#, no-wrap
msgid ""
"@Inject\n"
"lateinit var personRepository: PersonRepository\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:147
#, no-wrap
msgid ""
"@GET\n"
"fun count() = personRepository.count()\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:149
#, no-wrap
msgid "Most useful operations"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:152
msgid "Once you have written your repository, here are the most common operations you will be able to perform:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:160
#, no-wrap
msgid ""
"// creating a person\n"
"var person = Person()\n"
"person.name = \"Stef\"\n"
"person.birth = LocalDate.of(1910, Month.FEBRUARY, 1)\n"
"person.status = Status.Alive\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:163
#, no-wrap
msgid ""
"// persist it\n"
"personRepository.persist(person)\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:166
#, no-wrap
msgid ""
"// note that once persisted, you don't need to explicitly save your entity: all\n"
"// modifications are automatically persisted on transaction commit.\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:172
#, no-wrap
msgid ""
"// check if it's persistent\n"
"if(personRepository.isPersistent(person)){\n"
"    // delete it\n"
"    personRepository.delete(person)\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:175
#, no-wrap
msgid ""
"// getting a list of all Person entities\n"
"val allPersons = personRepository.listAll()\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:178
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"person = personRepository.findById(personId) ?: throw Exception(\"No person with that ID\")\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:181
#, no-wrap
msgid ""
"// finding all living persons\n"
"val livingPersons = personRepository.list(\"status\", Status.Alive)\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:184
#, no-wrap
msgid ""
"// counting all persons\n"
"val countAll = personRepository.count()\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:187
#, no-wrap
msgid ""
"// counting all living persons\n"
"val countAlive = personRepository.count(\"status\", Status.Alive)\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:190
#, no-wrap
msgid ""
"// delete all living persons\n"
"personRepository.delete(\"status\", Status.Alive)\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:193
#, no-wrap
msgid ""
"// delete all persons\n"
"personRepository.deleteAll()\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:196
#, no-wrap
msgid ""
"// delete by id\n"
"val deleted = personRepository.deleteById(personId)\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:199
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"personRepository.update(\"name = 'Mortal' where status = ?1\", Status.Alive)\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:203
msgid "All `list` methods have equivalent `stream` versions."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:210
#, no-wrap
msgid ""
"val persons = personRepository.streamAll();\n"
"val namesButEmmanuels = persons\n"
"    .map { it.name.toLowerCase() }\n"
"    .filter { it != \"emmanuel\" }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:213
msgid "The `stream` methods require a transaction to work."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache-kotlin.adoc:217
msgid "For more examples, please consult the xref:hibernate-orm-panache.adoc[Java version] for complete details.  Both APIs are the same and work identically except for some Kotlin-specific tweaks to make things feel more natural to Kotlin developers.  These tweaks include things like better use of nullability and the lack of `Optional` on API methods."
msgstr ""
