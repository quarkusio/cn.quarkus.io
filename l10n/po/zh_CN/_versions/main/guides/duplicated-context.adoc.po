# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-12 02:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy, no-wrap
msgid "Duplicated context, context locals, asynchronous processing and propagation"
msgstr "重复的语境、语境定位、异步处理和传播"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"When using a traditional, blocking, and synchronous framework, processing of each request is performed in a dedicated thread.\n"
"So, the same thread is used for the entire processing.\n"
"You know that this thread will not be used to execute anything else until the completion of the processing.\n"
"When you need to propagate data along the processing, such as the security principal or a trace id, you can use `ThreadLocals`.\n"
"The propagated data is cleared once the processing is complete."
msgstr "在使用传统、阻塞和同步框架时，每个请求的处理都在一个专用线程中进行。因此，整个处理过程都使用同一个线程。要知道，在处理完成之前，该线程不会被用于执行其他任何操作。如果需要在处理过程中传播数据，如安全负责人或跟踪 id，可以使用 `ThreadLocals` 。处理完成后，传播的数据将被清除。"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"When using a reactive and asynchronous execution model, you cannot use the same mechanism.\n"
"To avoid using many process threads, and reduce resource usage (and also increase the concurrency of the application), the same thread can be used to handle multiple concurrent processing.\n"
"Thus, you cannot use `ThreadLocals` as the values would be leaked between the various concurrent processing."
msgstr "在使用反应式和异步执行模型时，不能使用相同的机制。为了避免使用多个进程线程，减少资源使用（同时提高应用程序的并发性），可以使用同一个线程来处理多个并发处理。因此，不能使用 `ThreadLocals` ，因为值会在不同并发处理之间泄露。"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"Vert.x _duplicated context_ is a construct that provides the same kind of propagation but for asynchronous processing.\n"
"It can also be used with synchronous code."
msgstr "Vert.x _复制上下文_ 是一种结构，可提供同类传播，但用于异步处理。它也可用于同步代码。"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "This document explains duplicated contexts, how to retrieve one, use it, and how it's propagated along the (asynchronous) processing."
msgstr "本文档介绍了重复上下文、如何检索、使用重复上下文以及如何在（异步）处理过程中传播重复上下文。"

#. type: Title ==
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy, no-wrap
msgid "The reactive model"
msgstr "被动模式"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "This section is not an explanation of the reactive model. Refer to that xref:quarkus-reactive-architecture.adoc[the Quarkus Reactive Architecture] for more details."
msgstr "本节并非对反应模型的解释。更多详情，请参阅 xref:quarkus-reactive-architecture.adoc[《Quarkus 反应式架构》] 。"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"Under the hood, Quarkus uses a reactive engine.\n"
"This engine provides the efficiency and concurrency to cope with modern, containerized, and cloud-native applications."
msgstr "在引擎盖下，Quarkus 使用的是反应式引擎。该引擎提供了应对现代、容器化和云原生应用的效率和并发性。"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"For example, when you use Quarkus REST (formerly RESTEasy Reactive) or gRPC, Quarkus can invoke your business logic on I/O threads.\n"
"These threads are named https://en.wikipedia.org/wiki/Event_loop[event loops] and implement a https://en.wikipedia.org/wiki/Reactor_pattern[multi-reactor pattern]."
msgstr "例如，当你使用 Quarkus REST（前身为 RESTEasy Reactive）或 gRPC 时，Quarkus 可以在 I/O 线程上调用你的业务逻辑。这些线程被命名为 link:https://en.wikipedia.org/wiki/Event_loop[事件循环] ，并实现了 link:https://en.wikipedia.org/wiki/Reactor_pattern[多反应模式] 。"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"When using the imperative model, Quarkus associates a worker thread to each processing unit (like an HTTP request or a gRPC invocation).\n"
"That thread is dedicated to this specific processing until the processing completes.\n"
"Thus, you can use _Thread Locals_ to propagate data along the processing, and no other processing unit will use that thread until the completion of the current one."
msgstr "使用命令式模型时，Quarkus 会为每个处理单元（如 HTTP 请求或 gRPC 调用）关联一个工作线程。该线程专用于特定处理，直到处理完成。因此，你可以使用 _线程定位（Thread Locals_ ）在处理过程中传播数据，在当前处理完成之前，其他处理单元不会使用该线程。"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"With the reactive model, the code runs on event loop threads.\n"
"These event loops execute multiple concurrent processing units. For example,\n"
"the same event loop can handle multiple concurrent HTTP requests.\n"
"The following picture illustrates this reactive execution model:"
msgstr "在反应模型中，代码在事件循环线程上运行。这些事件循环执行多个并发处理单元。例如，同一个事件循环可以处理多个并发 HTTP 请求。下图展示了这种反应式执行模式："

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"You must **NEVER** block these event loops.\n"
"If you do, the whole model collapses.\n"
"Thus, when the processing of an HTTP request needs to execute an I/O operation (such as calling an external service), it:"
msgstr "*绝对不能* 阻塞这些事件循环。否则，整个模型就会崩溃。因此，当处理 HTTP 请求需要执行 I/O 操作（如调用外部服务）时，它就会"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "schedules the operation,"
msgstr "安排操作、"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "passes a continuation (the code to call when the I/O completes),"
msgstr "传递一个继续（I/O 完成后调用的代码）、"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "releases the thread."
msgstr "发布主题。"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"That thread can then handle another concurrent request.\n"
"When the scheduled operation completes, it executes the passed continuation **on the same event loop**."
msgstr "然后，该线程就可以处理另一个并发请求。当计划的操作完成后，它会 *在同一个事件循环* 中执行传递的继续。"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"That model is particularly efficient (low number of threads) and performant (avoid context switches).\n"
"However, it requires a different development model, and you cannot use _Thread Locals_, as the concurrent requests would see the same value.\n"
"Indeed, they are all processed by the same thread: the event loop."
msgstr "这种模式特别高效（线程数量少）、性能好（避免上下文切换）。不过，它需要不同的开发模式，而且不能使用线程 _定位_ ，因为并发请求会看到相同的值。事实上，它们都是由同一个线程处理的：事件循环。"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"The xref:context-propagation.adoc[MicroProfile Context Propagation] specification addresses this issue.\n"
"It saves and restores the values stored in thread locals whenever we switch to another processing unit.\n"
"However, that model is expensive.\n"
"Context locals (also known as _duplicated context_) is another way to do this and requires fewer mechanics."
msgstr "xref:context-propagation.adoc[微配置文件上下文传播] 规范解决了这一问题。每当我们切换到另一个处理单元时，它都会保存并恢复存储在线程本地的值。不过，这种模式成本高昂。上下文本地（也称为 _重复上下文_ ）是另一种实现方法，而且所需的机制更少。"

#. type: Title ==
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy, no-wrap
msgid "Context and duplicated context"
msgstr "上下文和重复上下文"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "In Quarkus, when you execute reactive code, you run in a _Context_, representing the execution thread (event loop or worker thread)."
msgstr "在 Quarkus 中，当你执行反应式代码时，你是在代表执行线程（事件循环或工作线程）的 _Context_ 中运行的。"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "Produces: `Hello 1, you are running on context: io.vertx.core.impl.DuplicatedContext@5dc42d4f and on thread Thread[vert.x-eventloop-thread-1,5,main]` - so invoked on an event loop."
msgstr "产生： `Hello 1, you are running on context: io.vertx.core.impl.DuplicatedContext@5dc42d4f and on thread Thread[vert.x-eventloop-thread-1,5,main]` - 因此在事件循环中调用。"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "Produces: `Hello 2, you are running on context: io.vertx.core.impl.DuplicatedContext@41781ccb and on thread Thread[executor-thread-1,5,main]` - so invoked on a worker thread."
msgstr "产生： `Hello 2, you are running on context: io.vertx.core.impl.DuplicatedContext@41781ccb and on thread Thread[executor-thread-1,5,main]` - 因此在工作线程上调用。"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"With this _Context_ object, you can schedule operations in the same context.\n"
"The context is handy for executing the continuation on the same event loop (as contexts are attached to event loops), as described in the picture above.\n"
"For example, when you need to call something asynchronous, you capture the current context, and when the response arrives, it invokes the continuation in that context:"
msgstr "有了这个 _上下文_ 对象，就可以在同一上下文中安排操作。如上图所示，上下文可以方便地在同一事件循环中执行继续操作（因为上下文附在事件循环上）。例如，当你需要异步调用某项操作时，你可以捕获当前上下文，当响应到达时，它会调用该上下文中的继续操作："

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "Emit the result in the same context."
msgstr "在相同的上下文中排放结果。"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "Most Quarkus clients do this automatically, invoking the continuation in the proper context."
msgstr "大多数 Quarkus 客户端都会在适当的上下文中自动调用延续。"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "There are two levels of contexts:"
msgstr "背景分为两个层次："

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "the root contexts representing the event loop, and thus cannot be used to propagate data without leaking it between concurrent processing"
msgstr "代表事件循环的根上下文，因此不能用来传播数据而不会在并发处理之间泄漏数据"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "the duplicated contexts, which are based on a root context, but are NOT shared and represent the processing unit"
msgstr "重复上下文，它们以根上下文为基础，但不是共享的，代表处理单元"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"Thus, a duplicated context is associated with each processing unit.\n"
"A duplicated context is still associated with a root context, and scheduling operations using a duplicated context run them in the associated root context.\n"
"But, unlike the root context, they are not shared between processing units.\n"
"Yet, continuations of a processing unit use the same duplicated context.\n"
"So, in the previous code snippet, the continuation is not only called on the same event loop but on the same duplicated context (supposing that the captured context is a duplicated context, more on that later)."
msgstr "因此，每个处理单元都会关联一个重复上下文。复制上下文仍与根上下文相关联，使用复制上下文的调度操作将在相关联的根上下文中运行。但与根上下文不同的是，它们不会在处理单元之间共享。然而，处理单元的连续操作会使用相同的复制上下文。因此，在前面的代码片段中，延续不仅在同一个事件循环中调用，而且在同一个复制上下文中调用（假设捕获的上下文是一个复制上下文，稍后详述）。"

#. type: Title ==
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy, no-wrap
msgid "Context local data"
msgstr "本地数据背景"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"When executed in a duplicated context, the code can store data without sharing it with the other concurrent processing.\n"
"So, you can store, retrieve and remove local data.\n"
"The continuation invokes on the same duplicated context, will have access to that data:"
msgstr "在复制上下文中执行时，代码可以存储数据，而不与其他并发处理共享。因此，您可以存储、检索和删除本地数据。在同一复制上下文中继续调用时，可以访问这些数据："

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"The previous code snippet uses `io.smallrye.common.vertx.ContextLocals`, which eases access to the local data.\n"
"You can also access them using `Vertx.currentContext().getLocal(\"key\")`."
msgstr "前面的代码片段使用了 `io.smallrye.common.vertx.ContextLocals` ，这方便了对本地数据的访问。您也可以使用 `Vertx.currentContext().getLocal(\"key\")` 访问它们。"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"Context local data provides an efficient way to propagate objects during a reactive execution.\n"
"Tracing metadata, metrics, and sessions can be stored and retrieved safely."
msgstr "上下文本地数据提供了一种在反应式执行过程中传播对象的有效方法。跟踪元数据、指标和会话可以安全地存储和检索。"

#. type: Title ===
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy, no-wrap
msgid "Context locals restrictions"
msgstr "语境本地限制"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"However, such a feature must only be used with duplicated contexts.\n"
"As said above, it's transparent for the code.\n"
"A duplicated context is a context, so they expose the same API."
msgstr "不过，这种功能只能用于重复上下文。如上所述，这对代码来说是透明的。复制上下文也是上下文，因此它们提供了相同的应用程序接口。"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"In Quarkus, access to the local data is restricted to duplicated contexts.\n"
"If you try to access local data from a root context, it throws an `UnsupportedOperationException`.\n"
"It prevents accessing data shared among different units of processing."
msgstr "在 Quarkus 中，对本地数据的访问仅限于重复上下文。如果试图从根上下文访问本地数据，就会抛出一个 `UnsupportedOperationException` 。它可以防止访问不同处理单元之间共享的数据。"

#. type: Title ===
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy, no-wrap
msgid "Safe context"
msgstr "安全环境"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"You can mark a context _safe_.\n"
"It is meant for other extensions to integrate with to help identify which contexts are isolated and guarantee access by a unique thread.\n"
"Hibernate Reactive uses this feature to check if the current context is safe to store the currently opened session to protect users from mistakenly interleaving multiple reactive operations that could unintentionally share the same session."
msgstr "您可以标记上下文 _安全_ 。这是为了让其他扩展与之集成，以帮助识别哪些上下文是隔离的，并保证由唯一的线程访问。Hibernate Reactive 使用该功能来检查当前上下文是否可以安全地存储当前打开的会话，以保护用户不会错误地交错执行多个反应式操作，从而无意中共享同一个会话。"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"Vert.x web will create a new duplicated context for each http web request; Quarkus REST will mark such contexts as safe.\n"
"Other extensions should follow a similar pattern when they are setting up a new context that is safe to be used for a local context guaranteeing sequential use, non-concurrent access, and scoped to the current reactive chain as a convenience not to have to pass a \"context\" object along explicitly."
msgstr "Vert.x Web 会为每个 http 网络请求创建一个新的重复上下文；Quarkus REST 会将此类上下文标记为安全上下文。其他扩展在设置新的上下文时也应遵循类似的模式，该上下文可安全地用于本地上下文，保证顺序使用、非并发访问，并且作用域为当前反应链，这样就不必明确传递 \"上下文 \"对象。"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"In other cases, it might be helpful to mark the current context as not safe instead explicitly; for example, if an existing context needs to be shared across multiple workers to process some operations in parallel: by marking and un-marking appropriately the same\n"
"context can have spans in which it's safe, followed by spans in which it's not safe."
msgstr "在其他情况下，显式地将当前上下文标记为不安全可能会有所帮助；例如，如果现有上下文需要在多个工作者之间共享，以并行处理某些操作：通过适当地标记和取消标记，同一上下文可以有安全的跨度，也可以有不安全的跨度。"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "To mark a context as safe, you can:"
msgstr "要将上下文标记为安全，您可以"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "Use the `io.quarkus.vertx.SafeVertxContext` annotation"
msgstr "使用 `io.quarkus.vertx.SafeVertxContext` 注释"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "Use the `io.quarkus.vertx.core.runtime.context.VertxContextSafetyToggle` class"
msgstr "使用 `io.quarkus.vertx.core.runtime.context.VertxContextSafetyToggle` 类"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"By using the `io.quarkus.vertx.core.runtime.context.VertxContextSafetyToggle` class, the current context can be explicitly marked as `safe`, or it can be explicitly marked as `unsafe`; there's a third state which is the default of any new context: `unmarked`.\n"
"The default is to consider any unmarked context to be `unsafe`, unless the system property `io.quarkus.vertx.core.runtime.context.VertxContextSafetyToggle.UNRESTRICTED_BY_DEFAULT` is set to `true`;"
msgstr "通过使用 `io.quarkus.vertx.core.runtime.context.VertxContextSafetyToggle` 类，当前上下文可以明确标记为 `safe` ，也可以明确标记为 `unsafe` ；还有第三种状态，即任何新上下文的默认状态： `unmarked` 。默认情况下，除非系统属性 `io.quarkus.vertx.core.runtime.context.VertxContextSafetyToggle.UNRESTRICTED_BY_DEFAULT` 被设置为 `true` ，否则任何未标记的上下文都会被视为 `unsafe` ；"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"The `SafeVertxContext` annotation marks the current duplicated context as safe and invokes the annotated method if the context is `unmarked` or already marked as `safe`.\n"
"If the context is marked as `unsafe`, you can force it to be `safe` using the `force=true` parameter.\n"
"However, this possibility must be used carefully."
msgstr "`SafeVertxContext` 注释将当前重复上下文标记为安全上下文，如果上下文是 `unmarked` 或已标记为 `safe` ，则调用注解方法。如果上下文被标记为 `unsafe` ，则可以使用 `force=true` 参数将其强制为 `safe` 。不过，必须谨慎使用这种可能性。"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"The `@SafeVertxContext` annotation is a CDI interceptor binding annotation.\n"
"Therefore, it only works for CDI beans and on non-private methods."
msgstr "`@SafeVertxContext` 注解是 CDI 拦截器绑定注解。因此，它只适用于 CDI Bean 和非私有方法。"

#. type: Title ==
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy, no-wrap
msgid "Extensions supporting duplicated contexts"
msgstr "支持重复上下文的扩展"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"In general, Quarkus invokes reactive code on duplicated contexts.\n"
"So it can safely access the local data.\n"
"It is the case with:"
msgstr "一般来说，Quarkus 会在重复的上下文中调用反应代码。因此，它可以安全地访问本地数据。以下情况就属于这种情况："

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "Quarkus REST"
msgstr "Quarkus REST"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
msgid "gRPC"
msgstr "gRPC"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "Reactive Routes"
msgstr "反应路线"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "Vert.x Event Bus `@ConsumeEvent`"
msgstr "Vert.x 事件总线 `@ConsumeEvent`"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "REST Client"
msgstr "REST 客户端"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "Reactive Messaging (Kafka, AMQP)"
msgstr "反应式消息传递（Kafka、AMQP）"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "Funqy"
msgstr "趣多多"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "Quarkus scheduler and Quartz"
msgstr "Quarkus 调度器和 Quartz"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "Redis Client (for the pub/sub commands)"
msgstr "Redis 客户端（用于发布/子命令）"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "GraphQL"
msgstr "图形QL"

#. type: Title ==
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy, no-wrap
msgid "Distinguish between root and duplicated contexts"
msgstr "区分根语境和重复语境"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "You can distinguish between a root and a duplicated context using the following:"
msgstr "您可以使用以下方法区分根上下文和重复上下文："

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "This code uses the `io.smallrye.common.vertx.VertxContext` helper class."
msgstr "该代码使用 `io.smallrye.common.vertx.VertxContext` 辅助类。"

#. type: Title ===
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy, no-wrap
msgid "Duplicated contexts and mapped diagnostic context (MDC)"
msgstr "重复上下文和映射诊断上下文 (MDC)"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"When using loggers, the MDC (contextual data added to the log messages) is stored in duplicated context when available.\n"
"Check the xref:logging.adoc#mdc-propagation[logging reference guide] for more details."
msgstr "使用日志记录器时，MDC（添加到日志信息中的上下文数据）会在可用时存储在重复上下文中。更多详情请查看日志记录 xref:logging.adoc#mdc-propagation[参考指南] 。"

#. type: Title ===
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy, no-wrap
msgid "CDI request scope"
msgstr "CDI 申请范围"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "In Quarkus, the CDI request scope is stored in a duplicated context, meaning it gets automatically propagated alongside the reactive processing of a request."
msgstr "在 Quarkus 中，CDI 请求范围存储在复制的上下文中，这意味着它会在请求的被动处理过程中自动传播。"

#. type: Title ===
#: _versions/main/guides/duplicated-context.adoc
#, no-wrap
msgid "Reactive Messaging"
msgstr "响应式消息"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"The Kafka and AMQP connector creates a duplicated context for each message, implementing a _message context_.\n"
"This message context is used for the complete message processing and thus can be used to propagate data."
msgstr "Kafka 和 AMQP 连接器会为每条消息创建一个复制上下文，实现 _消息上下文_ 。该消息上下文用于完整的消息处理，因此可用于传播数据。"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "See the https://smallrye.io/smallrye-reactive-messaging/latest/concepts/message-context/[Message Context] documentation for further information."
msgstr "更多信息，请参阅 \" link:https://smallrye.io/smallrye-reactive-messaging/latest/concepts/message-context/[消息上下文] \"文档。"

#. type: Title ===
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy, no-wrap
msgid "OpenTelemetry"
msgstr "开放式遥测"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "The OpenTelemetry extension stores the traces in the duplicated context, ensuring propagation even when using reactive and asynchronous code."
msgstr "OpenTelemetry 扩展将跟踪信息存储在复制的上下文中，即使在使用反应式和异步代码时也能确保传播。"

#. type: Title ==
#: _versions/main/guides/duplicated-context.adoc
#, no-wrap
msgid "References"
msgstr "参考文献"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture]"
msgstr "xref:quarkus-reactive-architecture.adoc[Quarkus 反应式架构]"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "https://vertx.io/docs/vertx-core/java/#_reactor_and_multi_reactor[Vert.x Reactor and Multi-Reactor documentation]"
msgstr "link:https://vertx.io/docs/vertx-core/java/#_reactor_and_multi_reactor[Vert.x 反应堆和多反应堆文档]"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "xref:logging.adoc[Quarkus logging]"
msgstr "xref:logging.adoc[夸克登录]"
