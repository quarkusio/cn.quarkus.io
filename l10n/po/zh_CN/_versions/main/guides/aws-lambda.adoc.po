# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-12 02:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/main/guides/aws-lambda.adoc
#, fuzzy, no-wrap
msgid "AWS Lambda"
msgstr "Amazon Lambda"

#: _versions/main/guides/aws-lambda.adoc
msgid ""
"The `quarkus-amazon-lambda` extension allows you to use Quarkus to build your AWS Lambdas.\n"
"Your lambdas can use injection annotations from CDI or Spring and other Quarkus facilities as you need them."
msgstr "`quarkus-amazon-lambda` 扩展允许你使用Quarkus来构建你的AWS Lambdas。你的Lambdas可以根据需要使用来自CDI或Spring的注入注解，以及其他Quarkus设施。"

#: _versions/main/guides/aws-lambda.adoc
msgid ""
"Quarkus lambdas can be deployed using the Amazon Java Runtime, or you can build a native executable and use\n"
"Amazon's Custom Runtime if you want a smaller memory footprint and faster cold boot startup time."
msgstr "Quarkus lambdas可以使用Amazon Java Runtime进行部署，如果你想要更小的内存占用和更快的冷启动启动时间，你也可以构建一个本地可执行文件，并使用Amazon的Custom Runtime。"

#: _versions/main/guides/aws-lambda.adoc
#, fuzzy
msgid ""
"Quarkus's integration with lambdas also supports Quarkus's Live Coding development cycle.  You can\n"
"bring up your Quarkus lambda project in dev or test mode and code on your project live."
msgstr "Quarkus 与 lambda 的集成还支持 Quarkus 的实时编码开发周期。你可以在开发或测试模式下启动 Quarkus lambda 项目，并在项目上实时编码。"

#. type: Title ==
#: _versions/main/guides/aws-lambda.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "准备工作"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
#, fuzzy
msgid "https://aws.amazon.com[An Amazon AWS account]"
msgstr "link:https://aws.amazon.com[亚马逊 AWS 账户]"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
#, fuzzy
msgid "https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html[AWS CLI]"
msgstr "link:https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html[AWS CLI]"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI], for local testing"
msgstr "link:https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI] ，用于本地测试"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
#, fuzzy
msgid "For Gradle projects please xref:gradle[see below], or for further reference consult the guide in the xref:gradle-tooling.adoc[Gradle setup page]."
msgstr "关于 Gradle 项目，请参 xref:gradle[阅下文] ，或查阅 xref:gradle-tooling.adoc[Gradle 设置页面] 中的指南。"

#. type: Title ==
#: _versions/main/guides/aws-lambda.adoc
#, no-wrap
msgid "Getting Started"
msgstr "入门指南"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "This guide walks you through generating an example Java project via a maven archetype and deploying it to AWS."
msgstr "本指南将指导你通过一个maven原型生成一个Java项目的例子，并将其部署到AWS。"

#. type: Title ==
#: _versions/main/guides/aws-lambda.adoc
#, no-wrap
msgid "Installing AWS bits"
msgstr "安装AWS位"

#: _versions/main/guides/aws-lambda.adoc
msgid ""
"Installing all the AWS bits is probably the most difficult thing about this guide.  Make sure that you follow all the steps\n"
"for installing AWS CLI."
msgstr "安装所有AWS位可能是本指南中最困难的事情。请确保你遵循安装AWS CLI的所有步骤。"

#. type: Title ==
#: _versions/main/guides/aws-lambda.adoc
#, no-wrap
msgid "Creating the Maven Deployment Project"
msgstr "创建Maven部署项目"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "Create the Quarkus AWS Lambda maven project using our Maven Archetype."
msgstr "使用我们的Maven Archetype创建Quarkus AWS Lambda maven项目。"

#: _versions/main/guides/aws-lambda.adoc
msgid ""
"If you prefer to use Gradle, you can quickly and easily generate a Gradle project via https://code.quarkus.io/[code.quarkus.io]\n"
"adding the `quarkus-amazon-lambda` extension as a dependency."
msgstr "如果你喜欢使用Gradle，你可以通过 link:https://code.quarkus.io/[code.quarkus.io] 将 `quarkus-amazon-lambda` 扩展添加为依赖项，来快速而轻松地生成一个Gradle项目。"

#. type: delimited block =
#: _versions/main/guides/aws-lambda.adoc
#, fuzzy
msgid "Copy the build.gradle, gradle.properties and settings.gradle into the above-generated Maven archetype project, to follow along with this guide."
msgstr "将 build.gradle、gradle.properties 和 settings.gradle 复制到上述生成的 Maven 原型项目中，以便跟进本指南。"

#. type: delimited block =
#: _versions/main/guides/aws-lambda.adoc
#, fuzzy
msgid "Execute: gradle wrapper to set up the gradle wrapper (recommended)."
msgstr "执行：gradle wrapper 设置 gradle wrapper（推荐）。"

#. type: delimited block =
#: _versions/main/guides/aws-lambda.adoc
#, fuzzy
msgid "For full Gradle details, see the xref:gradle[Gradle build] section below."
msgstr "有关 Gradle 的全部详情，请参阅下面的 xref:gradle[Gradle 构建] 部分。"

#. type: Title ==
#: _versions/main/guides/aws-lambda.adoc
#, no-wrap
msgid "Choose Your Lambda"
msgstr "选择你的Lambda"

#: _versions/main/guides/aws-lambda.adoc
#, fuzzy
msgid ""
"The `quarkus-amazon-lambda` extension scans your project for a class that directly implements the Amazon `RequestHandler<?, ?>` or `RequestStreamHandler` interface.\n"
"It must find a class in your project that implements this interface, or it will throw a build time failure.\n"
"If it finds more than one handler class, a build time exception will also be thrown."
msgstr "`quarkus-amazon-lambda` 扩展会扫描项目，查找直接实现 Amazon `RequestHandler<?, ?>` 或 `RequestStreamHandler` 接口的类。它必须在你的项目中找到一个实现该接口的类，否则会在构建时抛出故障。如果发现多个处理程序类，也会在构建时抛出异常。"

#: _versions/main/guides/aws-lambda.adoc
msgid ""
"Sometimes, though, you might have a few related lambdas that share code and creating multiple maven modules is just\n"
"an overhead you don't want to do.  The `quarkus-amazon-lambda` extension allows you to bundle multiple lambdas in one\n"
"project and use configuration or an environment variable to pick the handler you want to deploy."
msgstr "但有时，你可能会有几个共享代码的相关lambdas，创建多个maven模块是你不想做的开销。 `quarkus-amazon-lambda` 扩展允许你在一个项目中捆绑多个lambdas，并使用配置或环境变量来选择你要部署的处理程序。"

#: _versions/main/guides/aws-lambda.adoc
msgid ""
"The generated project has three lambdas within it.  Two that implement the `RequestHandler<?, ?>` interface, and one that implements the `RequestStreamHandler` interface. One that is used and two that are unused.  If you open up\n"
"`src/main/resources/application.properties` you'll see this:"
msgstr "生成的项目里有三个lambdas。两个实现 `RequestHandler<?, ?>` 接口，一个实现 `RequestStreamHandler` 接口。使用了一个，另两个未使用。如果你打开 `src/main/resources/application.properties` ，你会看到："

#: _versions/main/guides/aws-lambda.adoc
msgid ""
"The `quarkus.lambda.handler` property tells Quarkus which lambda handler to deploy. This can be overridden\n"
"with an environment variable too."
msgstr "`quarkus.lambda.handler` 属性告诉Quarkus要部署哪个lambda处理程序。这也可以用一个环境变量来覆盖。"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "If you look at the three generated handler classes in the project, you'll see that they are `@Named` differently."
msgstr "如果你查看项目中生成的三个处理程序类，你会发现它们的 `@Named` 不同。"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "The CDI name of the handler class must match the value specified within the `quarkus.lambda.handler` property."
msgstr "处理程序类的CDI名称必须与 `quarkus.lambda.handler` 属性中指定的值匹配。"

#. type: Title ==
#: _versions/main/guides/aws-lambda.adoc
#, no-wrap
msgid "Deploy to AWS Lambda Java Runtime"
msgstr "部署到AWS Lambda Java Runtime"

#: _versions/main/guides/aws-lambda.adoc
msgid ""
"There are a few steps to get your lambda running on AWS.  The generated maven project contains a helpful script to\n"
"create, update, delete, and invoke your lambdas for pure Java and native deployments."
msgstr "有几个步骤可以让lambda在AWS上运行。生成的maven项目包含一个有用的脚本，来为纯Java和原生部署创建、更新、删除和调用你的lambda。"

#. type: Title ==
#: _versions/main/guides/aws-lambda.adoc
#, no-wrap
msgid "Build and Deploy"
msgstr "构建和部署"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "Build the project:"
msgstr "构建项目："

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "This will compile and package your code."
msgstr "这将对你的代码进行编译和打包。"

#. type: Title ==
#: _versions/main/guides/aws-lambda.adoc
#, no-wrap
msgid "Create an Execution Role"
msgstr "创建一个执行角色"

#: _versions/main/guides/aws-lambda.adoc
msgid ""
"View the https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-awscli.html[Getting Started Guide] for deploying\n"
"a lambda with AWS CLI.  Specifically, make sure you have created an `Execution Role`.  You will need to define\n"
"a `LAMBDA_ROLE_ARN` environment variable in your profile or console window,  Alternatively, you can edit\n"
"the `manage.sh` script that is generated by the build and put the role value directly there:"
msgstr "查看使用AWS CLI部署lambda的 link:https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-awscli.html[入门指南] 。具体来说，确保你已经创建了一个 `Execution Role` 。你需要在你的配置文件或控制台窗口中定义一个 `LAMBDA_ROLE_ARN` 环境变量，或者，你可以编辑由构建生成的 `manage.sh` 脚本，并把角色值直接放在那里："

#. type: Title ==
#: _versions/main/guides/aws-lambda.adoc
#, no-wrap
msgid "Extra Build Generated Files"
msgstr "构建额外生成的文件"

#: _versions/main/guides/aws-lambda.adoc
#, fuzzy
msgid ""
"After you run the build, there are a few extra files generated by the `quarkus-amazon-lambda` extension.  These files\n"
"are in the build directory:  `target/` for maven, `build/` for gradle."
msgstr "运行构建后， `quarkus-amazon-lambda` 扩展会生成一些额外的文件。这些文件位于构建目录中： `target/` 用于 maven， `build/` 用于 gradle。"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
#, fuzzy
msgid "`function.zip` - lambda deployment file"
msgstr "`function.zip` - lambda 部署文件"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
#, fuzzy
msgid "`manage.sh` - wrapper around aws lambda cli calls"
msgstr "`manage.sh` - 对 aws lambda cli 调用的包装"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "`bootstrap-example.sh` - example bootstrap script for native deployments"
msgstr " `bootstrap-example.sh` - 用于原生部署的bootstrap脚本示例"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "`sam.jvm.yaml` - (optional) for use with sam cli and local testing"
msgstr " `sam.jvm.yaml` - (可选)用于sam cli和本地测试"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "`sam.native.yaml` - (optional) for use with sam cli and native local testing"
msgstr " `sam.native.yaml` - (可选)，用于Sam cli和原生本地测试"

#. type: Title ==
#: _versions/main/guides/aws-lambda.adoc
#, no-wrap
msgid "Create the function"
msgstr "创建函数"

#: _versions/main/guides/aws-lambda.adoc
msgid ""
"The `target/manage.sh` script is for managing your lambda using the AWS Lambda Java runtime.  This script is provided only for\n"
"your convenience. Examine the output of the `manage.sh` script if you want to learn what aws commands are executed\n"
"to create, delete, and update your lambdas."
msgstr "`target/manage.sh` 脚本是用于使用AWS Lambda Java runtime管理你的lambda。此脚本只是为了方便你而提供。如果你想了解执行哪些aws命令来创建、删除和更新你的lambdas，请检查 `manage.sh` 脚本的输出。"

#: _versions/main/guides/aws-lambda.adoc
msgid "`manage.sh` supports four operation:  `create`, `delete`, `update`, and `invoke`."
msgstr "`manage.sh` 支持四种操作： `create`， `delete`， `update` 和 `invoke` 。"

#: _versions/main/guides/aws-lambda.adoc
#, fuzzy
msgid ""
"To verify your setup, that you have the AWS CLI installed, executed aws configure for the AWS access keys,\n"
"and set up the `LAMBDA_ROLE_ARN` environment variable (as described above), please execute `manage.sh` without any parameters.\n"
"A usage statement will be printed to guide you accordingly."
msgstr "要验证您的设置，即已安装 AWS CLI、执行 aws configure 获取 AWS 访问密钥并设置了 `LAMBDA_ROLE_ARN` 环境变量（如上所述），请执行 `manage.sh` （不带任何参数）。系统将打印一份使用说明，为您提供相应指导。"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "If using Gradle, the path to the binaries in the `manage.sh` must be changed from `target` to `build`"
msgstr "如果使用Gradle， `manage.sh` 中二进制文件的路径必须从 `target` 变为 `build` "

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "To see the `usage` statement, and validate AWS configuration:"
msgstr "要查看  `用法`  声明，并验证AWS配置："

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "You can `create` your function using the following command:"
msgstr "你可以使用以下命令 `创建` 你的函数："

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "or if you do not have `LAMBDA_ROLE_ARN` already defined in this shell:"
msgstr "或者如果在这个shell中没有定义 `LAMBDA_ROLE_ARN` ："

#: _versions/main/guides/aws-lambda.adoc
msgid ""
"Do not change the handler switch.  This must be hardcoded to `io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest`.  This\n"
"handler bootstraps Quarkus and wraps your actual handler so that injection can be performed."
msgstr "不要改变处理程序的开关。这必须被硬编码为 `io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest` 。这个处理程序引导Quarkus，并包装你实际的处理程序，以便可以执行注入。"

#: _versions/main/guides/aws-lambda.adoc
msgid ""
"If there are any problems creating the function, you must delete it with the `delete` function before re-running\n"
"the `create` command."
msgstr "如果在创建函数时有任何问题，你必须在重新运行 `create` 命令之前使用 `delete` 函数来删除它。"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "Commands may also be stacked:"
msgstr "命令也可以是叠加的："

#. type: Title ==
#: _versions/main/guides/aws-lambda.adoc
#, no-wrap
msgid "Invoke the Lambda"
msgstr "调用Lambda"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "Use the `invoke` command to invoke your function."
msgstr "使用 `invoke` 命令来调用你的函数。"

#: _versions/main/guides/aws-lambda.adoc
msgid ""
"The example lambda takes input passed in via the `--payload` switch which points to a json file\n"
"in the root directory of the project."
msgstr "这个lambda示例接受通过 `--payload` 开关传入的输入，该开关指向项目根目录中的一个json文件。"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "The lambda can also be invoked locally with the SAM CLI like this:"
msgstr "这个lambda也可以使用SAM CLI在本地调用，如："

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "If you are working with your native image build, simply replace the template name with the native version:"
msgstr "如果你正在使用原生镜像构建，只需将模板名称替换为原生版本："

#. type: Title ==
#: _versions/main/guides/aws-lambda.adoc
#, no-wrap
msgid "Update the Lambda"
msgstr "更新Lambda"

#: _versions/main/guides/aws-lambda.adoc
msgid ""
"You can update the Java code as you see fit.  Once you've rebuilt, you can redeploy your lambda by executing the\n"
"`update` command."
msgstr "你可以在你认为合适的时候更新Java代码。一旦你重建了，你可以通过执行 `update` 命令来重新部署你的lambda。"

#. type: Title ==
#: _versions/main/guides/aws-lambda.adoc
#, no-wrap
msgid "Deploy to AWS Lambda Custom (native) Runtime"
msgstr "部署到AWS Lambda Custom (native) Runtime"

#: _versions/main/guides/aws-lambda.adoc
#, fuzzy
msgid ""
"If you want a lower memory footprint and faster initialization times for your lambda, you can compile your Java\n"
"code to a native executable.  Just make sure to rebuild your project with the `-Dnative` switch."
msgstr "如果您希望 lambda 占用的内存更少、初始化时间更快，可以将 Java 代码编译为本地可执行文件。只需确保使用 `-Dnative` 开关重建项目即可。"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "For Linux hosts, execute:"
msgstr "对于Linux主机，执行。"

#: _versions/main/guides/aws-lambda.adoc
msgid ""
"If you are building on a non-Linux system, you will need to also pass in a property instructing Quarkus to use a docker build as Amazon\n"
"Lambda requires linux binaries.  You can do this by passing this property to your build:\n"
"`-Dquarkus.native.container-build=true`. This requires you to have Docker installed locally, however."
msgstr "如果你在非Linux系统上构建，你还需要传入一个属性，指示Quarkus使用docker构建，因为Amazon Lambda需要linux二进制文件。你可以通过向你的构建传递这个属性来实现： `-Dquarkus.native.container-build=true` 。不过，这需要你在本地安装了Docker。"

#: _versions/main/guides/aws-lambda.adoc
msgid ""
"Either of these commands will compile and create a native executable image.  It also generates a zip file `target/function.zip`.\n"
"This zip file contains your native executable image renamed to `bootstrap`.  This is a requirement of the AWS Lambda\n"
"Custom (Provided) Runtime."
msgstr "这两个命令中的任何一个都会编译并创建一个本地可执行镜像。它还会生成一个zip文件 `target/function.zip` 。这个zip文件包含已重命名为 `bootstrap` 的本地可执行镜像，。这是AWS Lambda Custom (Provided) Runtime的要求。"

#: _versions/main/guides/aws-lambda.adoc
msgid ""
"The instructions here are exactly as above with one change:  you'll need to add `native` as the first parameter to the\n"
"`manage.sh` script:"
msgstr "这里的说明与上面的完全一样，但有一个变化：你需要将 `native` 作为第一个参数添加到 `manage.sh` 脚本中："

#: _versions/main/guides/aws-lambda.adoc
msgid ""
"As above, commands can be stacked.  The only requirement is that `native` be the first parameter should you wish\n"
"to work with native image builds.  The script will take care of the rest of the details necessary to manage your native\n"
"image function deployments."
msgstr "如上所述，命令可以叠加。如果你想使用原生镜像构建，唯一的要求是 `native` 是第一个参数。该脚本将处理管理你原生镜像功能部署所需的其余细节。"

#: _versions/main/guides/aws-lambda.adoc
msgid ""
"Examine the output of the `manage.sh` script if you want to learn what aws commands are executed\n"
"to create, delete, and update your lambdas."
msgstr "如果你想了解执行了哪些aws命令来创建、删除和更新lambdas，请检查 `manage.sh` 脚本的输出。"

#: _versions/main/guides/aws-lambda.adoc
msgid ""
"One thing to note about the create command for native is that the `aws lambda create-function`\n"
"call must set a specific environment variable:"
msgstr "对于原生的创建命令，需要注意的一点是， `aws lambda create-function` 调用必须设置一个特定的环境变量："

#. type: Title ==
#: _versions/main/guides/aws-lambda.adoc
#, no-wrap
msgid "Examine the POM and Gradle build"
msgstr "检查POM和Gradle构建"

#: _versions/main/guides/aws-lambda.adoc
msgid ""
"There is nothing special about the POM other than the inclusion of the `quarkus-amazon-lambda` extension\n"
"as a dependency.  The extension automatically generates everything you might need for your lambda deployment."
msgstr "除了将 `quarkus-amazon-lambda` 扩展作为一个依赖项之外，POM并没有什么特别之处。该扩展会为你的lambda部署自动生成可能需要的一切。"

#: _versions/main/guides/aws-lambda.adoc
#, fuzzy
msgid ""
"In previous versions of this extension, you had to set up your pom or gradle\n"
"to zip up your executable for native deployments, but this is not the case anymore."
msgstr "在该扩展的旧版本中，您必须设置 pom 或 gradle 以压缩可执行文件，以便进行本地部署，但现在不再需要这样做了。"

#. type: Title ==
#: _versions/main/guides/aws-lambda.adoc
#, fuzzy, no-wrap
msgid "Gradle build"
msgstr "Gradle 构建"

#: _versions/main/guides/aws-lambda.adoc
#, fuzzy
msgid ""
"Similarly, for Gradle projects, you also just have to add the `quarkus-amazon-lambda` dependency.  The extension automatically generates everything you might need\n"
"for your lambda deployment."
msgstr "同样，对于 Gradle 项目，也只需添加 `quarkus-amazon-lambda` 依赖关系即可。该扩展会自动生成 lambda 部署所需的一切。"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "Example Gradle dependencies:"
msgstr "Gradle依赖项示例："

#. type: Title ==
#: _versions/main/guides/aws-lambda.adoc
#, no-wrap
msgid "Live Coding and Unit/Integration Testing"
msgstr "实时编码和单元/集成测试"

#: _versions/main/guides/aws-lambda.adoc
#, fuzzy
msgid ""
"To mirror the AWS Lambda environment as closely as possible in a dev environment,\n"
"the Quarkus AWS Lambda extension boots up a mock AWS Lambda event server in Quarkus Dev and Test mode.\n"
"This mock event server simulates a true AWS Lambda environment."
msgstr "为了在开发环境中尽可能接近 AWS Lambda 环境，Quarkus AWS Lambda 扩展会在 Quarkus 开发和测试模式下启动一个模拟 AWS Lambda 事件服务器。该模拟事件服务器可模拟真正的 AWS Lambda 环境。"

#: _versions/main/guides/aws-lambda.adoc
msgid ""
"While running in Quarkus Dev Mode, you can feed events to it by doing an HTTP POST to `http://localhost:8080`.\n"
"The mock event server will receive the events and your lambda will be invoked.  You can perform live coding on your lambda\n"
"and changes will automatically be recompiled and available the next invocation you make.  Here's an example:"
msgstr "当在Quarkus开发模式下运行时，你可以对  `<a href=\"http://localhost:8080\" class=\"bare\">http://localhost:8080</a>`  执行HTTP POST来向它提供事件。模拟事件服务器将接收事件，你的lambda将被调用。你可以在你的lambda上执行实时编码，所做的修改将自动被重新编译，并在下次调用时可用。下面是一个例子："

#: _versions/main/guides/aws-lambda.adoc
#, fuzzy
msgid ""
"For your unit tests, you can also invoke on the mock event server using any HTTP client you want.  Here's an example\n"
"using rest-assured.  Quarkus starts up a separate Mock Event server under port 8081.\n"
"The default port for Rest Assured is automatically set to 8081 by Quarkus, so you can invoke\n"
"on this endpoint."
msgstr "对于单元测试，您也可以使用任何 HTTP 客户端调用模拟事件服务器。下面是一个使用 rest-assured 的示例。Quarkus 在 8081 端口下启动了一个单独的模拟事件服务器。Quarkus 自动将 Rest Assured 的默认端口设置为 8081，因此你可以在这个端点上调用。"

#: _versions/main/guides/aws-lambda.adoc
#, fuzzy
msgid ""
"The mock event server is also started for `@QuarkusIntegrationTest` tests so will work\n"
"with native binaries too.  All this provides similar functionality to the SAM CLI local testing, without the overhead of Docker."
msgstr "模拟事件服务器也会为 `@QuarkusIntegrationTest` 测试而启动，因此也能与本地二进制文件一起使用。所有这些都提供了与 SAM CLI 本地测试类似的功能，但没有 Docker 的开销。"

#: _versions/main/guides/aws-lambda.adoc
msgid ""
"Finally, if port 8080 or port 8081 is not available on your computer, you can modify the dev\n"
"and test mode ports with application.properties"
msgstr "最后，如果端口8080或端口8081在你的电脑上不可用，你可以使用application.properties修改开发和测试模式的端口"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "A port value of zero will result in a randomly assigned port."
msgstr "端口值为零将导致随机分配的端口。"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
#, fuzzy
msgid "To turn off the mock event server:"
msgstr "要关闭模拟事件服务器："

#. type: Title ==
#: _versions/main/guides/aws-lambda.adoc
#, no-wrap
msgid "Testing with the SAM CLI"
msgstr "使用SAM CLI进行测试"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "If you do not want to use the mock event server, you can test your lambdas with SAM CLI."
msgstr "如果你不想使用模拟事件服务器，你可以用SAM CLI测试lambdas。"

#: _versions/main/guides/aws-lambda.adoc
msgid ""
"The https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI]\n"
"allows you to run your lambdas locally on your laptop in a simulated Lambda environment.  This requires\n"
"https://www.docker.com/products/docker-desktop[docker] to be installed.  This is an optional approach should you choose\n"
"to take advantage of it.  Otherwise, the Quarkus JUnit integration should be sufficient for most of your needs."
msgstr "link:https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI] 允许你在模拟的Lambda环境中在你的笔记本电脑上本地运行lambdas。这需要安装 link:https://www.docker.com/products/docker-desktop[docker] 。如果你选择使用它，这是一个可选的方法。否则，Quarkus的JUnit集成应该足以满足你的大部分需求。"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "A starter template has been generated for both JVM and native execution modes."
msgstr "已经为JVM和原生执行模式生成了一个启动模板。"

#: _versions/main/guides/aws-lambda.adoc
msgid ""
"Run the following SAM CLI command to locally test your lambda function, passing the appropriate SAM `template`.\n"
"The `event` parameter takes any JSON file, in this case the sample `payload.json`."
msgstr "运行下面的SAM CLI命令来本地测试你的lambda函数，传递合适的SAM `模板` 。 `event` 参数使用任何JSON文件，在本例中是样本 `payload.json` 。"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "If using Gradle, the path to the binaries in the YAML templates must be changed from `target` to `build`"
msgstr "如果使用Gradle，YAML模板中的二进制文件的路径必须从 `target` 改为 `build` "

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "The native image can also be locally tested using the `sam.native.yaml` template:"
msgstr "本地镜像也可以使用  `sam.native.yaml`  模板进行本地测试："

#. type: Title ==
#: _versions/main/guides/aws-lambda.adoc
#, no-wrap
msgid "Modifying `function.zip`"
msgstr "修改 `function.zip` "

#: _versions/main/guides/aws-lambda.adoc
#, fuzzy
msgid ""
"There are times when you may have to add some additions to the `function.zip` lambda deployment that is generated\n"
"by the build.  To do this, create a `zip.jvm` or `zip.native` directory within `src/main`.\n"
"Create `zip.jvm/` if you are doing a pure Java lambda.  `zip.native/` if you are doing a native deployment."
msgstr "有时，您可能需要在构建生成的 `function.zip` lambda 部署中添加一些内容。为此，请在 `src/main` 中创建 `zip.jvm` 或 `zip.native` 目录。如果是纯 Java lambda，请创建 `zip.jvm/` 。如果是本地部署，请创建 `zip.native/` 。"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "Any you files and directories you create under your zip directory will be included within `function.zip`"
msgstr "你在zip目录下创建的任何文件和目录都将包括在 `function.zip` 内"

#. type: Title ==
#: _versions/main/guides/aws-lambda.adoc
#, no-wrap
msgid "Custom `bootstrap` script"
msgstr "自定义 `bootstrap` 脚本"

#: _versions/main/guides/aws-lambda.adoc
msgid ""
"There are times you may want to set a specific system properties or other arguments when lambda invokes\n"
"your native quarkus lambda deployment.  If you include a `bootstrap` script file within\n"
"`zip.native`, the quarkus extension will automatically rename the executable to `runner` within\n"
"`function.zip` and set the unix mode of the `bootstrap` script to executable."
msgstr "有些时候你可能想在lambda调用你的原生quarkus lambda部署时设置特定的系统属性或其他参数。如果你在 `zip.native` 中包含一个 `bootstrap` 脚本文件，quarkus 扩展会在 `function.zip` 中自动将可执行文件重命名为 `runner` ，并将 `bootstrap` 脚本的 unix 模式设置为可执行。"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "The native executable must be referenced as `runner` if you include a custom `bootstrap` script."
msgstr "如果你包含一个自定义的 `bootstrap` 脚本，那么本地可执行文件必须被引用为 `runner` 。"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "The extension generates an example script within `target/bootstrap-example.sh`."
msgstr "扩展会在 `target/bootstrap-example.sh` 中生成了一个示例脚本。"

#. type: Title ==
#: _versions/main/guides/aws-lambda.adoc
#, no-wrap
msgid "Tracing with AWS XRay and GraalVM"
msgstr "使用AWS XRay和GraalVM进行追踪"

#: _versions/main/guides/aws-lambda.adoc
msgid ""
"If you are building native images, and want to use https://aws.amazon.com/xray[AWS X-Ray Tracing] with your lambda\n"
"you will need to include `quarkus-amazon-lambda-xray` as a dependency in your pom.  The AWS X-Ray\n"
"library is not fully compatible with GraalVM, so we had to do some integration work to make this work."
msgstr "如果你正在构建原生镜像，并希望在你的lambda中使用 link:https://aws.amazon.com/xray[AWS X-Ray 追踪] ，你将需要在你的pom中把 `quarkus-amazon-lambda-xray` 作为一个依赖项来包括。AWS X-Ray库与GraalVM并不完全兼容，因此我们不得不做一些整合工作来使其可以正常工作。"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "In addition, remember to enable the AWS X-Ray tracing parameter in `manage.sh`, in the `cmd_create()` function.  This can also be set in the AWS Management Console."
msgstr "此外，记得在 `manage.sh` ， `cmd_create()` 函数中启用AWS X-Ray追踪参数。这也可以在AWS管理控制台中进行设置。"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "For the sam template files, add the following to the YAML function Properties."
msgstr "对于Sam模板文件，将以下内容添加到YAML函数属性中。"

#: _versions/main/guides/aws-lambda.adoc
msgid ""
"AWS X-Ray does add many classes to your distribution, do ensure you are using at least the 256MB AWS Lambda memory size.\n"
"This is explicitly set in `manage.sh` `cmd_create()`. Whilst the native image potentially can always use a lower memory setting, it would be recommended to keep the setting the same, especially to help compare performance."
msgstr "AWS X-Ray确实在你的发行版中添加了许多类，确保你至少使用了256MB的AWS Lambda内存大小。这在 `manage.sh` `cmd_create()` 中进行了明确的设置。虽然原生镜像可能总是使用较低的内存设置，但建议保持设置不变，特别是为了帮助比较性能。"

#. type: Title ==
#: _versions/main/guides/aws-lambda.adoc
#, no-wrap
msgid "Using HTTPS or SSL/TLS"
msgstr "使用HTTPS或SSL/TLS"

#: _versions/main/guides/aws-lambda.adoc
#, fuzzy
msgid ""
"If your code makes HTTPS calls (e.g. to a microservice, to an AWS service), you will need to add configuration to the native image,\n"
"as GraalVM will only include the dependencies when explicitly declared.  Quarkus, by default enables this functionality on extensions that implicitly require it.\n"
"For further information, please consult the xref:native-and-ssl.adoc[Quarkus SSL guide]"
msgstr "如果您的代码进行 HTTPS 调用（例如调用微服务或 AWS 服务），您需要在本地镜像中添加配置，因为 GraalVM 只会在明确声明时包含依赖关系。Quarkus默认在隐式要求的扩展上启用此功能。如需了解更多信息，请查阅 xref:native-and-ssl.adoc[Quarkus SSL 指南]"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "Open src/main/resources/application.properties and add the following line to enable SSL in your native image."
msgstr "打开src/main/resources/application.properties，并在你的原生镜像中添加以下行来启用SSL。"

#. type: Title ==
#: _versions/main/guides/aws-lambda.adoc
#, no-wrap
msgid "Using the AWS Java SDK v2"
msgstr "使用AWS Java SDK v2"

#: _versions/main/guides/aws-lambda.adoc
msgid ""
"Quarkus now has extensions for DynamoDB, S3, SNS and SQS (more coming).\n"
"Please check link:{amazon-services-guide}[those guides] on how to use the various AWS Services with Quarkus, as opposed to wiring manually like below."
msgstr "Quarkus现在有DynamoDB、S3、SNS和SQS的扩展（还会有更多）。请查看 link:{amazon-services-guide}[那些指南] 关于如何使用带有Quarkus的各种AWS服务 ，而不是像下面这样手动连接。"

#: _versions/main/guides/aws-lambda.adoc
msgid ""
"With minimal integration, it is possible to leverage the AWS Java SDK v2,\n"
"which can be used to invoke services such as SQS, SNS, S3 and DynamoDB."
msgstr "通过最小的整合，可以利用AWS Java SDK v2，其可以用来调用诸如SQS、SNS、S3和DynamoDB等服务。"

#: _versions/main/guides/aws-lambda.adoc
#, fuzzy
msgid ""
"For native image, however, the URL Connection client must be preferred over the Apache HTTP Client\n"
"when using synchronous mode, due to issues in the GraalVM compilation (at present)."
msgstr "不过，对于本地图像，由于 GraalVM 编译中的问题（目前），在使用同步模式时，URL Connection 客户端必须优先于 Apache HTTP 客户端。"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "Add `quarkus-jaxb` as a dependency in your Maven `pom.xml`, or Gradle `build.gradle` file."
msgstr "把 `quarkus-jaxb` 作为一个依赖项添加到你的Maven `pom.xml` ，或Gradle `build.gradle` 文件中。"

#: _versions/main/guides/aws-lambda.adoc
#, fuzzy
msgid ""
"You must also force your AWS service client for SQS, SNS, S3 et al., to use the URL Connection client,\n"
"which connects to AWS services over HTTPS, hence the inclusion of the SSL enabled property, as described in the xref:https[Using HTTPS or SSL/TLS] section above."
msgstr "您还必须强制 SQS、SNS、S3 等 AWS 服务客户端使用通过 HTTPS 连接到 AWS 服务的 URL Connection 客户端，因此需要包含 SSL enabled 属性，如上文 xref:https[使用 HTTPS 或 SSL/TLS] 部分所述。"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "For Maven, add the following to your `pom.xml`."
msgstr "对于Maven，在你的 `pom.xml` 中添加以下内容。"

#: _versions/main/guides/aws-lambda.adoc
msgid ""
"if you see `java.security.InvalidAlgorithmParameterException: the trustAnchors parameter must be non-empty` or similar SSL error, due to the current status of GraalVM,\n"
"there is some additional work to bundle the `function.zip`, as below.  For more information, please see the xref:native-and-ssl.adoc[Quarkus Native SSL Guide]."
msgstr "如果你看到 `java.security.InvalidAlgorithmParameterException: the trustAnchors parameter must be non-empty` 或类似的SSL错误，由于GraalVM的当前状态，有一些额外的工作来捆绑 `function.zip` ，如下所示。更多信息，请参见 link:native-and-ssl.html[Quarkus Native SSL指南] 。"

#. type: Title ==
#: _versions/main/guides/aws-lambda.adoc
#, no-wrap
msgid "Additional requirements for client SSL"
msgstr "对客户端SSL的额外要求"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "The native executable requires some additional steps to enable client SSL that S3 and other AWS libraries need."
msgstr "本地可执行文件需要一些额外的步骤来启用S3和其他AWS库需要的客户端SSL。"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "A custom `bootstrap` script"
msgstr "一个自定义的 `bootstrap` 脚本"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "`libsunec.so` must be added to `function.zip`"
msgstr "必须将 `libsunec.so` 添加到 `function.zip` 中"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "`cacerts` must be added to `function.zip`"
msgstr "必须将 `cacerts` 添加到 `function.zip` 中"

#: _versions/main/guides/aws-lambda.adoc
#, fuzzy
msgid ""
"To do this, first create a directory `src/main/zip.native/` with your build.  Next create a shell script file called `bootstrap`\n"
"within `src/main/zip.native/`, like below. An example is created automatically in your build folder (target or build), called `bootstrap-example.sh`"
msgstr "要做到这一点，首先要创建一个 `src/main/zip.native/` 目录，其中包含您的构建文件。然后在 `src/main/zip.native/` 中创建一个名为 `bootstrap` 的 shell 脚本文件，如下所示。在构建文件夹（目标或构建）中会自动创建一个示例，名为 `bootstrap-example.sh`"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "Additional set `-Djavax.net.ssl.trustStorePassword=changeit` if your `cacerts` file is password protected."
msgstr "如果你的 `cacerts` 文件有密码保护，则额外设置 `-Djavax.net.ssl.trustStorePassword=changeit` 。"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "Next you must copy some files from your GraalVM distribution into `src/main/zip.native/`."
msgstr "接下来，你必须将GraalVM发行版中的一些文件复制到 `src/main/zip.native/` 。"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
#, fuzzy
msgid "GraalVM versions can have different paths for these files whether you are using the Java 8 or 11 version. Adjust accordingly."
msgstr "无论您使用的是 Java 8 还是 11 版本，GraalVM 版本的这些文件路径都可能不同。请相应调整。"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "Now when you run the native build all these files will be included within `function.zip`"
msgstr "现在，当你运行原生构建时，所有这些文件都将包含在 `function.zip` 中"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "If you are using a Docker image to build, then you must extract these files from this image."
msgstr "如果你使用Docker镜像来进行构建，那么你必须从这个镜像中提取这些文件。"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "To extract the required ssl, you must start up a Docker container in the background, and attach to that container to copy the artifacts."
msgstr "要提取所需的ssl，你必须在后台启动一个Docker容器，并附加到该容器来复制工件。"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "First, let's start the GraalVM container, noting the container id output."
msgstr "首先，让我们启动GraalVM容器，注意容器ID的输出。"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
#, fuzzy
msgid "First, `libsunec.so`, the C library used for the SSL implementation:"
msgstr "首先是 `libsunec.so` ，它是用于实现 SSL 的 C 语言库："

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
#, fuzzy
msgid "Second, `cacerts`, the certificate store.  You may need to periodically obtain an updated copy, also."
msgstr "其次， `cacerts` ，证书存储。您可能还需要定期获取更新副本。"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "Your final archive will look like this:"
msgstr "你的最终档案将看起来像这样："

#. type: Title ==
#: _versions/main/guides/aws-lambda.adoc
#, no-wrap
msgid "Deploy to AWS Lambda using a Container Image"
msgstr "使用容器镜像部署到AWS Lambda"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
#, fuzzy
msgid "AWS Lambda supports creating your lambdas by referencing https://docs.aws.amazon.com/lambda/latest/dg/lambda-images.html[container images] rather than uploading ZIP files. This can have some benefits such as bypassing the size limit of the uploaded ZIP files. You can define lambda functions for both native builds and regular JVM builds."
msgstr "AWS Lambda 支持通过引用 link:https://docs.aws.amazon.com/lambda/latest/dg/lambda-images.html[容器映像] 而不是上传 ZIP 文件创建 lambdas。这样做有一些好处，例如可以绕过上传 ZIP 文件的大小限制。您可以为本地构建和常规 JVM 构建定义 lambda 函数。"

#. type: Title ===
#: _versions/main/guides/aws-lambda.adoc
#, fuzzy, no-wrap
msgid "JVM container image"
msgstr "JVM 容器映像"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "For a regular JVM distribution you need to base your image off the official AWS Java base images. Below is an example of a Dockerfile that would create a container image from your Quarkus Lambda project. It assumes that `mvn package` has been executed and binaries are available in the `target/` directory:"
msgstr "对于正常的JVM发行版，你需要在官方AWS Java基础镜像之上建立你的镜像。下面是一个Dockerfile的例子，它将从你的Quarkus Lambda项目创建一个容器镜像。它假设已经执行了 `mvn package` ，并且二进制文件已存在于 `target/` 目录中："

#. type: Title ===
#: _versions/main/guides/aws-lambda.adoc
#, no-wrap
msgid "Native executable container image"
msgstr "本地可执行的容器镜像"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
#, fuzzy
msgid "To create a lambda container image that uses the native executable we'll need to do things a little differently. In this case, we won't need to use the `java:11` base image from AWS, but instead we'll use a special image that assumes that the runtime environment for the lambda is provided. The example below creates such a container. It assumes that a Maven build has been executed (such as `mvn package -Dnative=true`) and has generated the native binary into the `target/` directory. The binary needs to be named `bootstrap` and be placed in `/var/runtime/`:"
msgstr "要创建一个使用本地可执行文件的 lambda 容器映像，我们需要采取一些不同的方法。在这种情况下，我们不需要使用 AWS 提供的 `java:11` 基本映像，而是使用一个特殊的映像，该映像假定 lambda 的运行环境已经提供。下面的示例创建了这样一个容器。它假定已执行 Maven 构建（如 `mvn package -Dnative=true` ）并在 `target/` 目录中生成了本地二进制文件。二进制文件需要命名为 `bootstrap` ，并放置在 `/var/runtime/` 中："

#. type: Title ===
#: _versions/main/guides/aws-lambda.adoc
#, no-wrap
msgid "Deploying a container image lambda"
msgstr "部署一个容器镜像lambda"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "Below, you can see how the container images created above can be built and deployed to AWS using the `docker` and `aws` command line tools. These instructions work for both native and jvm container images and assume that the `aws` command line tool has been logged in."
msgstr "下面，你可以看到如何使用 `docker` 和 `aws` 命令行工具将上面创建的容器镜像构建并部署到AWS中。这些指令对原生和jvm容器镜像都适用，并假设已经登录到 `aws` 命令行工具。"

#. type: Title ====
#: _versions/main/guides/aws-lambda.adoc
#, no-wrap
msgid "Build the Docker image"
msgstr "构建Docker镜像"

#. type: Title ====
#: _versions/main/guides/aws-lambda.adoc
#, no-wrap
msgid "Create an ECR repository in the users AWS account"
msgstr "在用户的AWS账户中创建一个ECR存储库"

#. type: Title ====
#: _versions/main/guides/aws-lambda.adoc
#, no-wrap
msgid "Tag the image using your ECR registry information"
msgstr "使用你的ECR注册信息给镜像打上标签"

#. type: Title ====
#: _versions/main/guides/aws-lambda.adoc
#, no-wrap
msgid "Log Docker into your ECR registry and push the Docker image to it"
msgstr "将Docker记录到你的ECR注册表中，并将Docker镜像推送到其中"

#. type: Title ====
#: _versions/main/guides/aws-lambda.adoc
#, no-wrap
msgid "Create the AWS lambda function with the AWS CLI tool"
msgstr "用AWS CLI工具创建AWS lambda函数"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "Make sure you reference the image you uploaded previously (assumes that a role exists that can be used to run the lambda). Please note that it is not unlikely that for the JVM lambda function, the default memory limit of `128Mb` will not be enough to run the function. In that case, you can increase the memory limit when creating the function by providing the `--memory-size 256` parameter to your `aws lambda create-function` command. You can also adjust the function in the AWS console after you've created it."
msgstr "请确保你引用了之前上传的镜像（假设存在一个可以用来运行lambda的角色）。请注意，对于JVM lambda函数来说，默认的 `128Mb` 内存限制不足以运行该函数，这不是不可能的。在这种情况下，你可以在创建函数时通过向 `aws lambda create-function` 命令提供 `--memory-size 256` 参数来增加内存限制。你也可以在创建函数后，在AWS控制台中调整该函数。"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "Now you can use the AWS console to view and test your new lambda function."
msgstr "现在你可以使用AWS控制台来查看和测试你的新lambda函数。"

#. type: Title ==
#: _versions/main/guides/aws-lambda.adoc
#, no-wrap
msgid "Amazon Alexa Integration"
msgstr "亚马逊Alexa整合"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
msgid "To use Alexa with Quarkus native, you need to use the https://github.com/quarkiverse/quarkus-amazon-alexa[Quarkus Amazon Alexa extension hosted at the Quarkiverse Hub]."
msgstr "要使用带有Quarkus原生的Alexa ，你需要使用link:https://github.com/quarkiverse/quarkus-amazon-alexa[托管在Quarkiverse Hub上的Quarkus Amazon Alexa扩展]"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
#, fuzzy
msgid "Define the latest version of the extension in your POM file."
msgstr "在 POM 文件中定义扩展的最新版本。"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
#, fuzzy
msgid "Create your Alexa handler, as normal, by sub-classing the abstract `com.amazon.ask.SkillStreamHandler`, and add your request handler implementation."
msgstr "像往常一样，通过子类化抽象 `com.amazon.ask.SkillStreamHandler` 来创建 Alexa 处理程序，并添加请求处理程序的实现。"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
#, fuzzy
msgid "That's all there is to it!"
msgstr "仅此而已！"

#. type: Title ==
#: _versions/main/guides/aws-lambda.adoc
#, fuzzy, no-wrap
msgid "SnapStart"
msgstr "快速启动"

#. type: Plain text
#: _versions/main/guides/aws-lambda.adoc
#, fuzzy
msgid "To optimize your application for Lambda SnapStart, check xref:aws-lambda-snapstart.adoc[the SnapStart Configuration Documentation]."
msgstr "要针对 Lambda SnapStart 优化应用程序，请查看 xref:aws-lambda-snapstart.adoc[SnapStart 配置文档] 。"
