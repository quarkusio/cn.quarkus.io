msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Quarkus for the Web"
msgstr "夸克网络"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Quarkus provides several extensions to create web applications, this document aims to provide directions on which extension to use for different use cases."
msgstr "Quarkus 提供了几种创建网络应用程序的扩展，本文档旨在提供针对不同用例使用哪种扩展的指导。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "The basics"
msgstr "基础知识"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Serving static resources"
msgstr "服务静态资源"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Let's assume you have a Quarkus backend, and you want to serve static files. This is the most basic case, it is supported out of the box with all our Vert.x based extensions, you must place them in the `META-INF/resources` directory of your application."
msgstr "假设您有一个 Quarkus 后台，并希望提供静态文件。这是最基本的情况，我们所有基于 Vert.x 的扩展都支持静态文件，您必须将它们放在应用程序的 `META-INF/resources` 目录中。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "You can find more information in the xref:http-reference#serving-static-resources[HTTP reference guide]."
msgstr "您可以在 xref:http-reference.adoc#serving-static-resources[HTTP 参考指南] 中找到更多信息。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Serving scripts, styles, and web libraries"
msgstr "为脚本、样式和网络库提供服务"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "However, if you want to insert scripts, styles, and libraries in your web pages, you have 3 options:"
msgstr "但是，如果您想在网页中插入脚本、样式和库，您有三种选择："

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Consume libraries from public CDNs such as cdnjs, unpkg, jsDelivr and more, or copy them to your `META-INF/resources` directory."
msgstr "从 cdnjs、unkg、jsDelivr 等公共 CDN 使用库，或将它们复制到 `META-INF/resources` 目录。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Use runtime web dependencies such as https://mvnpm.org[mvnpm] or https://www.webjars.org[WebJars], when added to your pom.xml or build.gradle they can be directly xref:web-dependency-locator.adoc[accessed from your web pages]."
msgstr "使用 link:https://mvnpm.org[mvnpm] 或 link:https://www.webjars.org[WebJars] 等运行时网络依赖项，将其添加到 pom.xml 或 build.gradle 中后，就可以直接 xref:web-dependency-locator.adoc[从网页访问] 它们。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Package your scripts (js, ts), styles (css, scss), and web dependencies together using a bundler (see xref:#bundling[below])."
msgstr "使用捆绑程序将脚本（js、ts）、样式（css、scss）和网络依赖项打包在一起（ xref:bundling[见下文] ）。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "*We recommend using a bundler for production* as it offers better control, consistency, security, and performance. The good news is that Quarkus makes it really easy and fast with the https://docs.quarkiverse.io/quarkus-web-bundler/dev/[Quarkus Web Bundler extension]."
msgstr "*我们建议在生产中使用捆绑程序* ，因为它能提供更好的控制、一致性、安全性和性能。好消息是，通过 Quarkus link:https://docs.quarkiverse.io/quarkus-web-bundler/dev/[Web 捆绑程序扩展] ， link:https://docs.quarkiverse.io/quarkus-web-bundler/dev/[Quarkus] 可以让这一切变得简单快捷。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Bundling scripts, styles, and libraries"
msgstr "捆绑脚本、样式和库"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "There are two ways to bundle your web assets:"
msgstr "捆绑网络资产有两种方法："

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Using https://docs.quarkiverse.io/quarkus-web-bundler/dev/[the Quarkus Web Bundler extension], which is the recommended way. Without any configuration, it puts everything together in an instant, and follows good practices such as dead-code elimination, minification, caching, and more."
msgstr "建议使用 link:https://docs.quarkiverse.io/quarkus-web-bundler/dev/[Quarkus Web Bundler 扩展] 。无需任何配置，它就能在瞬间将所有内容整合在一起，并遵循良好的做法，如消除死代码、最小化、缓存等。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Using a custom bundler such as Webpack, Parcel, Rollup, etc. This can be easily integrated with Quarkus using the https://quarkiverse.github.io/quarkiverse-docs/quarkus-quinoa/dev/[Quarkus Quinoa extension]."
msgstr "使用自定义捆绑程序，如 Webpack、Parcel、Rollup 等。这可以通过 Quark link:https://quarkiverse.github.io/quarkiverse-docs/quarkus-quinoa/dev/[us Quinoa 扩展] 轻松与 link:https://quarkiverse.github.io/quarkiverse-docs/quarkus-quinoa/dev/[Quarkus] 集成。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Server-side rendering (SSR)"
msgstr "服务器端渲染（SSR）"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "For templating and server-side rendering with Quarkus, there are different engines available such as xref:qute.adoc[Qute] or https://docs.quarkiverse.io/quarkus-freemarker/dev/[Freemarker] and others."
msgstr "在使用 Quarkus 进行模板制作和服务器端渲染时，有 xref:qute.adoc[Qute] 或 link:https://docs.quarkiverse.io/quarkus-freemarker/dev/[Freemarker] 等不同的引擎可供选择。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Qute Web"
msgstr "Qute Web"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Qute is designed specifically to meet the Quarkus needs, and help you deal with templates, snippets, and partials and render the data from your storage. It is inspired by the most famous template engines, it is fast, type-safe, works in native, and has a lot of nice features."
msgstr "Qute 是专为满足 Quarkus 的需求而设计的，它可以帮助你处理模板、片段和部分内容，并从存储中渲染数据。它的设计灵感来源于最著名的模板引擎，速度快、类型安全、可在本地运行，并拥有许多出色的功能。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "To install Qute Web, follow xref:qute.adoc#serving-templates[the instructions]."
msgstr "按照 xref:qute.adoc#serving-templates[说明] 安装 Qute Web。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Here is a simple example of a Qute template:"
msgstr "下面是 Qute 模板的一个简单示例："

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "src/main/resources/templates/pub/index.html"
msgstr "src/main/resources/templates/pub/index.html"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "With the https://docs.quarkiverse.io/quarkus-web-bundler/dev/[Web Bundler extension], this expression will be replaced by the bundled scripts and styles."
msgstr "使用 link:https://docs.quarkiverse.io/quarkus-web-bundler/dev/[Web Bundler 扩展后] ，该表达式将被捆绑的脚本和样式所取代。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "You can directly use the HTTP parameters in your templates."
msgstr "您可以在模板中直接使用 HTTP 参数。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "This expression is validated. Try to change the expression to `cdi:Product.notHere` and the build will fail."
msgstr "该表达式已通过验证。如果尝试将表达式更改为 `cdi:Product.notHere` ，则构建将失败。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "If you install xref:ide-tooling.adoc[Quarkus IDEs plugins], you will have autocompletion, link to implementation and validation."
msgstr "如果您安装了 xref:ide-tooling.adoc[Quarkus IDEs 插件] ，您将拥有自动完成、链接到实现和验证功能。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Model-View-Controller (MVC)"
msgstr "模型-视图-控制器（MVC）"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "The MVC approach is also made very easy with Quarkus thanks to https://docs.quarkiverse.io/quarkus-renarde/dev/index.html[the Renarde extension], a Rails-like framework using Qute."
msgstr "由于使用了 Qute 的 Rails 类框架 link:https://docs.quarkiverse.io/quarkus-renarde/dev/index.html[Renarde 扩展] ，Quarkus 的 MVC 方法也变得非常简单。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Associated with the https://docs.quarkiverse.io/quarkus-web-bundler/dev/[Web Bundler extension], the road is open to build modern web applications for all your needs. Here is what a simple Renarde controller looks like:"
msgstr "有了 link:https://docs.quarkiverse.io/quarkus-web-bundler/dev/[Web Bundler 扩展] ，您就可以根据自己的需要构建现代网络应用程序了。下面是一个简单的 Renarde 控制器："

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "src/main/java/rest/Todos.java"
msgstr "src/main/java/rest/Todos.java"

#: _versions/main/guides/web.adoc
msgid "Check out https://www.youtube.com/watch?v=JNmHNSmK180[Quarkus Insights Episode #178]. First part is a hands-on demonstration of creating a CMS with Renarde. You can also give it a try using https://github.com/quarkusio/quarkus-web-lab[the web-lab repo])."
msgstr ""

#: _versions/main/guides/web.adoc
msgid "Single Page Applications"
msgstr "单页应用程序"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Quarkus provides very solid tools for creating or integrating Single Page Applications to Quarkus (React, Angular, Vue, …), here are 3 options:"
msgstr "Quarkus 提供了非常可靠的工具，用于创建单页应用程序或将其集成到 Quarkus 中（React、Angular、Vue......），以下是 3 个选项："

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "https://quarkiverse.github.io/quarkiverse-docs/quarkus-quinoa/dev/[Quarkus Quinoa] bridges your npm-compatible web application and Quarkus for both dev and prod. No need to install Node.js or configure your framework, it will detect it and use sensible defaults."
msgstr "link:https://quarkiverse.github.io/quarkiverse-docs/quarkus-quinoa/dev/[Quarkus Quinoa] 可将兼容 npm 的 Web 应用程序与 Quarkus 连接起来，用于开发和生产。无需安装 Node.js 或配置框架，它就会检测并使用合理的默认值。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "The https://docs.quarkiverse.io/quarkus-web-bundler/dev/[Quarkus Web Bundler] is also a good approach, it is closer to the Java ecosystem and removes a lot of boilerplate and configuration, it is fast and efficient. For examples of such SPAs, see https://github.com/quarkusio/code.quarkus.io[code.quarkus.io] and https://github.com/mvnpm/mvnpm[mvnpm.org]."
msgstr "link:https://docs.quarkiverse.io/quarkus-web-bundler/dev/[Quarkus Web Bundler] 也是一种不错的方法，它更接近 Java 生态系统，去除了大量的模板和配置，而且快速高效。有关此类 SPA 的示例，请参阅 link:https://github.com/quarkusio/code.quarkus.io[code.quarkus.io] 和 link:https://github.com/mvnpm/mvnpm[mvnpm.org] 。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Your automation using the https://github.com/eirslett/frontend-maven-plugin[maven-frontend-plugin] or similar tools."
msgstr "使用 link:https://github.com/eirslett/frontend-maven-plugin[maven-frontend-plugin] 或类似工具实现自动化。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Full-stack microservices (Micro-frontends)"
msgstr "全栈微服务（微前端）"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Quarkus is an excellent choice for both full-stack web components and full-stack microservices aka Micro-frontends. By utilizing the Web Bundler or Quinoa, you can significantly reduce boilerplate code and manage multiple services efficiently without much configuration duplication."
msgstr "Quarkus 是全栈 Web 组件和全栈微服务（又称微前端）的绝佳选择。通过使用 Web Bundler 或 Quinoa，你可以大大减少模板代码，并有效管理多个服务，而无需重复配置。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "For example the https://github.com/quarkusio/search.quarkus.io[Quarkus documentation search engine] on https://quarkus.io[quarkus.io] uses the Web Bundler to create a full-stack web-component. With Lit Element for the web-component and OpenSearch for the indexation it is a nice way to enhance the static web-site experience in a dynamic way."
msgstr "例如， link:https://quarkus.io[quarkus.io] 上的 link:https://quarkus.io[Quarkus] link:https://github.com/quarkusio/search.quarkus.io[文档搜索引擎] 就使用 Web Bundler 创建了一个全栈网络组件。网络组件使用 Lit Element，索引使用 OpenSearch，这是一种以动态方式增强静态网站体验的好方法。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "More content about this is coming soon..."
msgstr "更多相关内容即将发布..."

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Other ways"
msgstr "其他方式"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "We described Quarkus most common ways to create web applications but there are other options:"
msgstr "我们介绍了夸克创建网络应用程序的最常见方法，但还有其他选择："

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "https://quarkus.io/extensions/com.vaadin/vaadin-quarkus-extension/[Vaadin Flow extension], for this unique framework that lets you build web apps directly from Java code without writing HTML or JavaScript."
msgstr "link:https://quarkus.io/extensions/com.vaadin/vaadin-quarkus-extension/[Vaadin Flow 扩展] ，用于这个独特的框架，让您无需编写 HTML 或 JavaScript 即可直接使用 Java 代码构建网络应用程序。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "JavaServer Faces (jsf) is a specification for building component-based web apps in Java. It available in Quarkus, the https://quarkus.io/extensions/org.apache.myfaces.core.extensions.quarkus/myfaces-quarkus/[MyFaces] extension is an implementation of Faces for Quarkus. https://quarkus.io/extensions/io.quarkiverse.primefaces/quarkus-primefaces/[PrimeFaces] is a Faces components suite, and https://quarkus.io/extensions/io.quarkiverse.omnifaces/quarkus-omnifaces/[OmniFaces], a utility library. More information is available in https://www.melloware.com/quarkus-faces-using-jsf-with-quarkus/[this blog post]."
msgstr "JavaServer Faces（jsf）是用 Java 构建基于组件的网络应用程序的规范。它可在 Quarkus 中使用， link:https://quarkus.io/extensions/org.apache.myfaces.core.extensions.quarkus/myfaces-quarkus/[MyFaces] 扩展是 Quarkus 的 Faces 实现。 link:https://quarkus.io/extensions/io.quarkiverse.primefaces/quarkus-primefaces/[PrimeFaces] 是一个 Faces 组件套件，而 link:https://quarkus.io/extensions/io.quarkiverse.omnifaces/quarkus-omnifaces/[OmniFaces] 则是一个实用库。更多信息请参阅 link:https://www.melloware.com/quarkus-faces-using-jsf-with-quarkus/[本博文] 。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Create xref:building-my-first-extension.adoc[a new extension] for your favorite web framework."
msgstr "为你喜欢的网络框架创建 xref:building-my-first-extension.adoc[一个新扩展] 。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Testing your web applications"
msgstr "测试网络应用程序"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "For testing web applications, https://docs.quarkiverse.io/quarkus-playwright/dev/[Quarkus Playwright] is very easy to use. You can create effective cross-browser end-to-end tests mimicking user interaction and making sure your web application is working as a whole. The big advantage is that it benefits from all dev-services and Quarkus mocking features."
msgstr "对于测试网络应用程序， link:https://docs.quarkiverse.io/quarkus-playwright/dev/[Quarkus Playwright] 非常易于使用。你可以创建有效的跨浏览器端到端测试，模拟用户交互，确保你的网络应用程序作为一个整体运行。它的最大优势是可以受益于所有开发服务和 Quarkus 模拟功能。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Q&A"
msgstr "问答"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Why is Quarkus a very good option for Web Applications compared to other frameworks?"
msgstr "与其他框架相比，Quarkus 为什么是网络应用程序的最佳选择？"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Quarkus is well known for its backend extensions ecosystem and developer experience, if you combine it with great extensions for frontend, then it is a perfect mix! All the testing and dev-mode features are now available for both frontend and backend."
msgstr "Quarkus 以其后端扩展生态系统和开发人员体验而闻名，如果将其与前端的优秀扩展结合起来，那将是一个完美的组合！现在，前台和后台都可以使用所有测试和开发模式功能。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "What are the advantages of SSR (Server Side Rendering) over SPA (Single Page App)?"
msgstr "与 SPA（单页面应用程序）相比，SSR（服务器端渲染）有哪些优势？"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Here are the benefits of performing rendering work on the server:"
msgstr "以下是在服务器上执行渲染工作的好处："

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "*Data Retrieval:* Fetching data on the server, closer to the data source. This enhances performance by reducing the time needed to retrieve data for rendering and minimizes client requests."
msgstr "*数据检索：* 在服务器上获取数据，更接近数据源。这样可以减少为渲染而检索数据所需的时间，并最大限度地减少客户端请求，从而提高性能。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "*Enhanced Security:* Storage of sensitive data and logic is happening on the server, such as tokens and API keys, without exposing them to client-side risks."
msgstr "*增强安全性：* 敏感数据和逻辑（如令牌和 API 密钥）存储在服务器上，不会暴露在客户端风险之下。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "*Caching Efficiency:* Server-side rendering allows for result caching, which can be reused across users and subsequent requests. This optimizes performance and lowers costs by reducing rendering and data fetching per request."
msgstr "*缓存效率：* 服务器端渲染允许结果缓存，可在用户和后续请求中重复使用。这不仅能优化性能，还能减少每次请求的渲染和数据获取，从而降低成本。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "*Improved Initial Page Load and First Contentful Paint (FCP):* Generating HTML on the server enables users to view the page immediately, eliminating the need to wait for client-side JavaScript to download, parse, and execute for rendering."
msgstr "*改进初始页面加载和首次内容绘制 (FCP)：* 在服务器上生成 HTML 可使用户立即查看页面，无需等待客户端 JavaScript 的下载、解析和执行渲染。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "*Search Engine Optimization (SEO) and Social Media Shareability:* The rendered HTML aids search engine indexing and social network previews, enhancing discoverability and shareability."
msgstr "*搜索引擎优化 (SEO) 和社交媒体共享性：* 渲染后的 HTML 可帮助搜索引擎索引和社交网络预览，提高可发现性和可分享性。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "I am hesitating between Quinoa and the Web Bundler, how should I make my decision?"
msgstr "我在 Quinoa 和 Web Bundler 之间犹豫不决，该如何做出决定？"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "You have to think that the bundled output is essentially the same with both solutions. Also, switching from one to the other is not a big deal, the choice is about the developer experience and finding the best fit for your team."
msgstr "两种解决方案的捆绑输出基本相同。此外，从一个解决方案切换到另一个解决方案并不是什么大问题，选择的关键在于开发人员的体验，以及找到最适合您团队的解决方案。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Some guidelines:"
msgstr "一些指导原则"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "*Go for Quinoa:*"
msgstr "*选择藜麦*"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "You have an existing frontend configured with a npm-compatible build tool, Quinoa is the most direct option."
msgstr "你已经用 npm 兼容的构建工具配置了现有的前端，Quinoa 是最直接的选择。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "You have a dedicated frontend team familiar with tools such as NPM, Yarn and other for building Single Page Apps."
msgstr "你们有一支专门的前端团队，熟悉 NPM、Yarn 和其他用于构建单页面应用程序的工具。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "You want to write Javascript unit tests (such as Jest, Jasmine, ..), it is not possible with the Web Bundler. However, you could publish a components library on NPM and consume it from the Web Bundler."
msgstr "您想编写 Javascript 单元测试（如 Jest、Jasmine......），这在 Web 捆绑程序中是不可能实现的。不过，您可以在 NPM 上发布组件库，并从 Web 捆绑程序中使用它。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "You use very specific bundling options or specific tools in your build process"
msgstr "您在构建过程中使用了非常特定的捆绑选项或特定工具"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "You love package.json and configurations tweaking"
msgstr "您喜欢 package.json 和配置调整"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "*Go for Web Bundler:*"
msgstr "*选择 Web Bundler：*"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "For simple web applications, the Web Bundler is the easiest and fastest way to get started"
msgstr "对于简单的网络应用程序，Web 捆绑程序是最简单快捷的入门方法"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid ""
"You prefer to stay close to the Maven/Gradle ecosystem\n"
"(Node.js is not needed), it uses an extremely fast bundler for the web (esbuild)"
msgstr "您更喜欢与 Maven/Gradle 生态系统保持紧密联系（不需要 Node.js），它使用了一个用于网络的极快捆绑程序（esbuild）。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "You want to reduce boilerplate and configuration"
msgstr "您希望减少模板和配置"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "How do I scale a Quarkus Web Application?"
msgstr "如何扩展 Quarkus Web 应用程序？"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid ""
"Serving a few static pages and scripts from an existing Quarkus backend is not a big overhead, so scaling the full app is usually the simplest option.\n"
"You could also split it in two services: one for the backend and one for the frontend. However, in most cases, this approach wouldn’t yield substantial benefits compared to the initial method."
msgstr "从现有的 Quarkus 后台提供一些静态页面和脚本并不会造成很大的开销，因此扩展整个应用程序通常是最简单的选择。您也可以将其分成两个服务：一个用于后台，一个用于前台。不过，在大多数情况下，与最初的方法相比，这种方法不会产生实质性的好处。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "If your application involves a substantial number of static resources, consider using a CDN. Both the Web Bundler and Quinoa can be configured to work seamlessly with a CDN, providing improved performance and distribution of assets."
msgstr "如果您的应用程序涉及大量静态资源，请考虑使用 CDN。Web 捆绑程序和 Quinoa 都可以配置为与 CDN 无缝协作，从而提高性能并分发资产。"
