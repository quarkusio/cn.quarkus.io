# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-13 03:17+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/qute-reference.adoc:6
#, no-wrap
msgid "Qute Reference Guide"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:20
msgid "Qute is a templating engine designed specifically to meet the Quarkus needs.  The usage of reflection is minimized to reduce the size of native images.  The API combines both the imperative and the non-blocking reactive style of coding.  In the development mode, all files located in the `src/main/resources/templates` folder are watched for changes and modifications are immediately visible in your application.  Furthermore, Qute attempts to detect most of the template problems at build time and fail fast."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:22
msgid "In this guide, you will find an <<hello_world_example,introductory example>>, the description of the <<core_features,core features>> and <<quarkus_integration,Quarkus integration>> details."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:24
msgid "Qute is primarily designed as a Quarkus extension. It is possible to use it as a \"standalone\" library too. However, in such case some of the features are not available. In general, any feature mentioned under the <<quarkus_integration>> section is missing. You can find more information about the limitations and possibilities in the <<standalone>> section."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/qute-reference.adoc:26
#, no-wrap
msgid "The Simplest Example"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:29
msgid "The easiest way to try Qute is to use the convenient `io.quarkus.qute.Qute` class and call one of its `fmt()` static methods that can be used to format simple messages:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:33
#, no-wrap
msgid "import io.quarkus.qute.Qute;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:36
#, no-wrap
msgid ""
"Qute.fmt(\"Hello {}!\", \"Lucy\"); <1>\n"
"// => Hello Lucy!\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:39
#, no-wrap
msgid ""
"Qute.fmt(\"Hello {name} {surname ?: 'Default'}!\", Map.of(\"name\", \"Andy\")); <2>\n"
"// => Hello Andy Default!\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:42
#, no-wrap
msgid ""
"Qute.fmt(\"<html>{header}</html>\").contentType(\"text/html\").data(\"header\", \"<h1>My header</h1>\").render(); <3>\n"
"// <html>&lt;h1&gt;Header&lt;/h1&gt;</html> <4>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:45
#, no-wrap
msgid ""
"Qute.fmt(\"I am {#if ok}happy{#else}sad{/if}!\", Map.of(\"ok\", true)); <5>\n"
"// => I am happy!\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:47
msgid "The empty expression `{}` is a placeholder that is replaced with an index-based array accessor, i.e. `{data[0]}`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:48
msgid "You can provide a data map instead."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:49
msgid "A builder-like API is available for more complex formatting requirements."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:50
msgid "Note that for a \"text/html\" template the special chars are replaced with html entities by default."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:51
msgid "You can use any <<basic-building-blocks,building block>> in the template. In this case, the <<if_section>> is used to render the appropriate part of the message based on the input data."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:53
msgid "In <<quarkus_integration,Quarkus>>, the engine used to format the messages is the same as the one injected by `@Inject Engine`. Therefore, you can make use of any Quarkus-specific integration feature such as <<template_extension_methods>>, <<injecting-beans-directly-in-templates>> or even <<type-safe-message-bundles>>."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:56
msgid "The format object returned by the `Qute.fmt(String)` method can be evaluated lazily and used e.g. as a log message:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:61
#, no-wrap
msgid ""
"LOG.info(Qute.fmt(\"Hello {name}!\").data(\"name\", \"Foo\"));\n"
"// => Hello Foo! and the message template is only evaluated if the log level INFO is used for the specific logger\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:64
msgid "Please read the javadoc of the `io.quarkus.qute.Qute` class for more details."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/qute-reference.adoc:66
#, no-wrap
msgid "Hello World Example"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:71
msgid "In this example, we would like to demonstrate the _basic workflow_ when working with Qute templates.  Let's start with a simple \"hello world\" example.  We will always need some *template contents*:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:72
#, no-wrap
msgid "hello.html"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:78
#, no-wrap
msgid ""
"<html>\n"
"  <p>Hello {name}! <1>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:80
msgid "`{name}` is a value expression that is evaluated when the template is rendered."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:83
msgid "Then, we will need to parse the contents into a *template definition* Java object.  A template definition is an instance of `io.quarkus.qute.Template`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:87
msgid "If using Qute \"standalone\" you'll need to create an instance of `io.quarkus.qute.Engine` first.  The `Engine` represents a central point for template management with dedicated configuration.  Let's use the convenient builder:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:91
#, no-wrap
msgid "Engine engine = Engine.builder().addDefaults().build();\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:94
msgid "In Quarkus, there is a preconfigured `Engine` available for injection - see <<quarkus_integration>>."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:96
msgid "Once we have an `Engine` instance we could parse the template contents:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:100
#, no-wrap
msgid "Template hello = engine.parse(helloHtmlContent);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:103
msgid "In Quarkus, you can simply inject the template definition. The template is automatically parsed and cached - see <<quarkus_integration>>."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:105
msgid "Finally, create a *template instance*, set the data and render the output:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:110
#, no-wrap
msgid ""
"// Renders <html><p>Hello Jim!</p></html>\n"
"hello.data(\"name\", \"Jim\").render(); <1> <2>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:112
msgid "`Template.data(String, Object)` is a convenient method that creates a template instance and sets the data in one step."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:113
msgid "`TemplateInstance.render()` triggers a synchronous rendering, i.e. the current thread is blocked until the rendering is finished. However, there are also asynchronous ways to trigger the rendering and consume the results. For example there is the `TemplateInstance.renderAsync()` method that returns `CompletionStage<String>` or `TemplateInstance.createMulti()` that returns Mutiny's `Multi<String>`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:115
msgid "So the workflow is simple:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:117
msgid "Create the template contents (`hello.html`),"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:118
msgid "Parse the template definition (`io.quarkus.qute.Template`),"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:119
msgid "Create a template instance (`io.quarkus.qute.TemplateInstance`),"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:120
msgid "Render the output."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:122
msgid "The `Engine` is able to cache the template definitions so that it's not necessary to parse the contents again and again. In Quarkus, the caching is done automatically."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/qute-reference.adoc:124
#, no-wrap
msgid "Core Features"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/qute-reference.adoc:127
#, no-wrap
msgid "Basic Building Blocks"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:130
msgid "The dynamic parts of a template include comments, expressions, sections and unparsed character data."
msgstr ""

#. type: Labeled list
#: upstream/_versions/main/guides/qute-reference.adoc:131
#, no-wrap
msgid "Comments"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:135
msgid "A comment starts with the sequence `{!` and ends with the sequence `!}`, e.g. `{! This is a comment !}`.  Can be multiline and may contain expressions and sections: `{! {#if true} !}`.  The content of a comment is completely ignored when rendering the output."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/qute-reference.adoc:136
#: upstream/_versions/main/guides/qute-reference.adoc:253
#, no-wrap
msgid "Expressions"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:141
msgid "An <<expressions,expression>> outputs an evaluated value.  It consists of one or more parts.  A part may represent simple properties: `{foo}`, `{item.name}`, and virtual methods: `{item.get(name)}`, `{name ?: 'John'}`.  An expression may also start with a namespace: `{inject:colors}`."
msgstr ""

#. type: Labeled list
#: upstream/_versions/main/guides/qute-reference.adoc:142
#: upstream/_versions/main/guides/qute-reference.adoc:567
#: upstream/_versions/main/guides/qute-reference.adoc:2275
#, no-wrap
msgid "Sections"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:147
msgid "A <<sections,section>> may contain static text, expressions and nested sections: `{#if foo.active}{foo.name}{/if}`.  The name in the closing tag is optional: `{#if active}ACTIVE!{/}`.  A section can be empty: `{#myTag image=true /}`.  A section may also declare nested section blocks: `{#if item.valid} Valid. {#else} Invalid. {/if}` and decide which block to render."
msgstr ""

#. type: Labeled list
#: upstream/_versions/main/guides/qute-reference.adoc:148
#, no-wrap
msgid "Unparsed Character Data"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:151
msgid "It is used to mark the content that should be rendered but _not parsed_.  It starts with the sequence `{|` and ends with the sequence `|}`: `{| <script>if(true){alert('Qute is cute!')};</script> |}`, and could be multi-line."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:153
msgid "Previously, unparsed character data had to start with `{[` and end with `]}`. This syntax is still supported but we encourage users to switch to the new syntax to avoid some common collisions with constructs from other languages."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/qute-reference.adoc:155
#, no-wrap
msgid "Identifiers and Tags"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:160
msgid "Identifiers are used in expressions and section tags.  A valid identifier is a sequence of non-whitespace characters.  However, users are encouraged to only use valid Java identifiers in expressions."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:162
msgid "You can use bracket notation if you need to specify an identifier that contains a dot, e.g. `{map['my.key']}`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:166
msgid "When parsing a template document the parser identifies all _tags_.  A tag starts and ends with a curly bracket, e.g. `{foo}`.  The content of a tag must start with:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:168
msgid "a digit, or"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:169
msgid "an alphabet character, or"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:170
msgid "underscore, or"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:171
msgid "a built-in command: `#`, `!`, `@`, `/`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:173
msgid "If it does not start with any of the above it is ignored by the parser."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:174
#, no-wrap
msgid "Tag Examples"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:186
#, no-wrap
msgid ""
"<html>\n"
"   <body>\n"
"   {_foo.bar}   <1>\n"
"   {! comment !}<2>\n"
"   {  foo}      <3>\n"
"   {{foo}}      <4>\n"
"   {\"foo\":true} <5>\n"
"   </body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:188
msgid "Parsed: an expression that starts with underscore."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:189
msgid "Parsed: a comment"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:190
msgid "Ignored: starts with whitespace."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:191
msgid "Ignored: starts with `{`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:192
msgid "Ignored: starts with `\"`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:194
msgid "It is also possible to use escape sequences `\\{` and `\\}` to insert delimiters in the text. In fact, an escape sequence is usually only needed for the start delimiter, ie. `\\\\{foo}` will be rendered as `{foo}` (no parsing/evaluation will happen)."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/qute-reference.adoc:195
#, no-wrap
msgid "Removing Standalone Lines From the Template"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:201
msgid "By default, the parser removes standalone lines from the template output.  A *standalone line* is a line that contains at least one section tag (e.g. `{#each}` and `{/each}`), parameter declaration (e.g. `{@org.acme.Foo foo}`) or comment but no expression and no non-whitespace character.  In other words, a line that contains no section tag or a parameter declaration is *not* a standalone line.  Likewise, a line that contains an _expression_ or a _non-whitespace character_ is *not* a standalone line."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:202
#, no-wrap
msgid "Template Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:215
#, no-wrap
msgid ""
"<html>\n"
"  <body>\n"
"     <ul>\n"
"     {#for item in items} <1>\n"
"       <li>{item.name} {#if item.active}{item.price}{/if}</li>  <2>\n"
"                          <3>\n"
"     {/for}               <4>\n"
"     </ul>\n"
"   <body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:217
msgid "This is a standalone line and will be removed."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:218
msgid "Not a standalone line - contains an expression and non-whitespace characters"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:219
msgid "Not a standalone line - contains no section tag/parameter declaration"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:220
msgid "This is a standalone line."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:221
#, no-wrap
msgid "Default Output"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:228
#, no-wrap
msgid ""
"<html>\n"
"  <body>\n"
"     <ul>\n"
"       <li>Foo 100</li>  \n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:232
#: upstream/_versions/main/guides/qute-reference.adoc:250
#, no-wrap
msgid ""
"     </ul>\n"
"   <body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:236
msgid "In Quarkus, the default behavior can be disabled by setting the property `quarkus.qute.remove-standalone-lines` to `false`.  In this case, all whitespace characters from a standalone line will be printed to the output."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:237
#, no-wrap
msgid "Output with `quarkus.qute.remove-standalone-lines=false`"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:243
#, no-wrap
msgid ""
"<html>\n"
"  <body>\n"
"     <ul>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:245
#, no-wrap
msgid "       <li>Foo 100</li>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:257
msgid "An expression is evaluated and outputs the value.  It has one or more parts, where each part represents either a property accessor (aka Field Access Expression) or a virtual method invocation (aka Method Invocation Expression)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:261
msgid "When accessing the properties you can either use the dot notation or bracket notation.  In the `object.property` (dot notation) syntax, the `property` must be a <<identifiers,valid identifier>>.  In the `object[property_name]` (bracket notation) syntax, the `property_name` has to be a non-null <<literals, literal>> value."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:265
msgid "An expression can start with an optional namespace followed by a colon (`:`).  A valid namespace consist of alphanumeric characters and underscores.  Namespace expressions are resolved differently - see also <<expression_resolution>>."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:266
#, no-wrap
msgid "Property Accessor Examples"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:273
#, no-wrap
msgid ""
"{name} <1>\n"
"{item.name} <2>\n"
"{item['name']} <3>\n"
"{global:colors} <4> \n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:275
msgid "no namespace, one part: `name`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:276
msgid "no namespace, two parts: `item`, `name`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:277
msgid "equivalent to `{item.name}` but using the bracket notation"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:278
msgid "namespace `global`, one part: `colors`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:283
msgid "A part of an expression can be a _virtual method_ in which case the name can be followed by a list of comma-separated parameters in parentheses.  A parameter of a virtual method can be either a nested expression or a <<literals, literal>> value.  We call these method _\"virtual\"_ because they does not have to be backed by a real Java method.  You can learn more about virtual methods in the <<virtual_methods,following section>>."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:284
#: upstream/_versions/main/guides/qute-reference.adoc:473
#, no-wrap
msgid "Virtual Method Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:289
#, no-wrap
msgid ""
"{item.getLabels(1)} <1>\n"
"{name or 'John'} <2>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:291
msgid "no namespace, two parts - `item`, `getLabels(1)`, the second part is a virtual method with name `getLabels` and params `1`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:292
msgid "infix notation that can be used for virtual methods with single parameter, translated to `name.or('John')`; no namespace, two parts - `name`, `or('John')`"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/qute-reference.adoc:294
#, no-wrap
msgid "Supported Literals"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:297
#, no-wrap
msgid "Literal"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:299
#: upstream/_versions/main/guides/qute-reference.adoc:388
#, no-wrap
msgid "Examples"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:300
#, no-wrap
msgid "boolean"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:302
#, no-wrap
msgid "`true`, `false`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:303
#, no-wrap
msgid "null"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:305
#, no-wrap
msgid "`null`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:306
#, no-wrap
msgid "string"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:308
#, no-wrap
msgid "`'value'`, `\"string\"`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:309
#, no-wrap
msgid "integer"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:311
#, no-wrap
msgid "`1`, `-5`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:312
#, no-wrap
msgid "long"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:314
#, no-wrap
msgid "`1l`, `-5L`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:315
#, no-wrap
msgid "double"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:317
#, no-wrap
msgid "`1D`, `-5d`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:318
#, no-wrap
msgid "float"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:320
#, no-wrap
msgid "`1f`, `-5F`"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/qute-reference.adoc:323
#, no-wrap
msgid "Resolution"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:330
msgid "The first part of the expression is always resolved against the <<current_context_object, current context object>>.  If no result is found for the first part it's resolved against the parent context object (if available).  For an expression that starts with a namespace the current context object is found using all the available ``NamespaceResolver``s.  For an expression that does not start with a namespace the current context object is *derived from the position* of the tag.  All other parts of an expression are resolved using all ``ValueResolver``s against the result of the previous resolution."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:336
msgid "For example, expression `{name}` has no namespace and single part - `name`.  The \"name\" will be resolved using all available value resolvers against the current context object.  However, the expression `{global:colors}` has the namespace `global` and single part - `colors`.  First, all available ``NamespaceResolver``s will be used to find the current context object.  And afterwards value resolvers will be used to resolve \"colors\" against the context object found."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/qute-reference.adoc:341
msgid "Data passed to the template instance are always accessible using the `data` namespace.  This could be useful to access data for which the key is overridden:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:356
#, no-wrap
msgid ""
"<html>\n"
"{item.name} <1>\n"
"<ul>\n"
"{#for item in item.derivedItems} <2>\n"
"  <li>\n"
"  {item.name} <3> \n"
"  is derived from\n"
"  {data:item.name} <4>\n"
"  </li>\n"
"{/for}\n"
"</ul>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:358
msgid "`item` is passed to the template instance as a data object."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:359
msgid "Iterate over the list of derived items."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:360
msgid "`item` is an alias for the iterated element."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:361
msgid "Use the `data` namespace to access the `item` data object."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/qute-reference.adoc:365
#, no-wrap
msgid "Current Context"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/qute-reference.adoc:371
msgid "If an expression does not specify a namespace the _current context object_ is derived from the position of the tag.  By default, the current context object represents the data passed to the template instance.  However, sections may change the current context object.  A typical example is the <<let_section,`let`>> section that can be used to define named local variables:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:378
#, no-wrap
msgid ""
"{#let myParent=order.item.parent myPrice=order.price} <1>\n"
"  <h1>{myParent.name}</h1>\n"
"  <p>Price: {myPrice}</p>\n"
"{/let}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:380
msgid "The current context object inside the section is the map of resolved parameters."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:382
msgid "The current context can be accessed via the implicit binding `this`."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/qute-reference.adoc:383
#, no-wrap
msgid "Built-in Resolvers"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:386
#, no-wrap
msgid "Name"
msgstr "名称"

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:386
#, no-wrap
msgid "Description"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:389
#, no-wrap
msgid "Elvis Operator"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:390
#, no-wrap
msgid "Outputs the default value if the previous part cannot be resolved or resolves to `null`."
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:392
#, no-wrap
msgid "`{person.name ?: 'John'}`, `{person.name or 'John'}`, `{person.name.or('John')}`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:393
#, no-wrap
msgid "orEmpty"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:394
#, no-wrap
msgid "Outputs an empty list if the previous part cannot be resolved or resolves to `null`."
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:396
#, no-wrap
msgid "`{pets.orEmpty.size}` outputs `0` if `pets` is not resolvable or `null`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:397
#, no-wrap
msgid "Ternary Operator"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:398
#, no-wrap
msgid "Shorthand for if-then-else statement. Unlike in <<if_section>> nested operators are not supported."
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:400
#, no-wrap
msgid "`{item.isActive ? item.name : 'Inactive item'}` outputs the value of `item.name` if `item.isActive` resolves to `true`."
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:401
#, no-wrap
msgid "Logical AND Operator"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:402
#, no-wrap
msgid "Outputs `true` if both parts are not `falsy` as described in the <<if_section>>. The parameter is only evaluated if needed."
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:404
#, no-wrap
msgid "`{person.isActive && person.hasStyle}`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:405
#, no-wrap
msgid "Logical OR Operator"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:406
#, no-wrap
msgid "Outputs `true` if any of the parts is not `falsy` as described in the <<if_section>>. The parameter is only evaluated if needed."
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:406
#, no-wrap
msgid "`{person.isActive \\"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:406
#: upstream/_versions/main/guides/qute-reference.adoc:751
#, no-wrap
msgid "\\"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:408
#, no-wrap
msgid "person.hasStyle}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:411
msgid "The condition in a ternary operator evaluates to `true` if the value is not considered `falsy` as described in the <<if_section>>."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:413
msgid "In fact, the operators are implemented as \"virtual methods\" that consume one parameter and can be used with infix notation. For example `{person.name or 'John'}` is translated to `{person.name.or('John')}` and `{item.isActive ? item.name : 'Inactive item'}` is translated to `{item.isActive.ifTruthy(item.name).or('Inactive item')}`"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/qute-reference.adoc:414
#, no-wrap
msgid "Arrays"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:419
msgid "You can iterate over elements of an array with the <<loop_section>>.  Moreover, it's also possible to get the length of the specified array and access the elements directly via an index value.  Additionaly, you can access the first/last `n` elements via the `take(n)/takeLast(n)` methods."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:420
#, no-wrap
msgid "Array Examples"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:435
#, no-wrap
msgid ""
"<h1>Array of length: {myArray.length}</h1> <1>\n"
"<ul>\n"
"  <li>First: {myArray.0}</li> <2>\n"
"  <li>Second: {myArray[1]}</li> <3>\n"
"  <li>Third: {myArray.get(2)}</li> <4>\n"
"</ul>\n"
"<ol>\n"
" {#for element in myArray}\n"
" <li>{element}</li>\n"
" {/for}\n"
"</ol>\n"
"First two elements: {#each myArray.take(2)}{it}{/each} <5>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:437
msgid "Outputs the length of the array."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:438
msgid "Outputs the first element of the array."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:439
msgid "Outputs the second element of the array using the bracket notation."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:440
msgid "Outputs the third element of the array via the virtual method `get()`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:441
msgid "Outputs the first two elements of the array."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/qute-reference.adoc:442
#, no-wrap
msgid "Character Escapes"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:445
msgid "For HTML and XML templates the `'`, `\"`, `<`, `>`, `&` characters are escaped by default if a template variant is set."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:447
msgid "In Quarkus, a variant is set automatically for templates located in the `src/main/resources/templates`. By default, the `java.net.URLConnection#getFileNameMap()` is used to determine the content type of a template file. The additional map of suffixes to content types can be set via `quarkus.qute.content-types`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:449
msgid "If you need to render the unescaped value:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:451
msgid "Either use the `raw` or `safe` properties implemented as extension methods of the `java.lang.Object`,"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:452
msgid "Or wrap the `String` value in a `io.quarkus.qute.RawString`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:459
#, no-wrap
msgid ""
"<html>\n"
"<h1>{title}</h1> <1>\n"
"{paragraph.raw} <2>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:461
msgid "`title` that resolves to `Expressions & Escapes` will be rendered as `Expressions &amp;amp; Escapes`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:462
msgid "`paragraph` that resolves to `<p>My text!</p>` will be rendered as `<p>My text!</p>`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:464
msgid "By default, a template with one of the following content types is escaped: `text/html`, `text/xml`, `application/xml` and `application/xhtml+xml`. However, it's possible to extend this list via the `quarkus.qute.escape-content-types` configuration property."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/qute-reference.adoc:466
#, no-wrap
msgid "Virtual Methods"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:472
msgid "A virtual method is a *part of an expression* that looks like a regular Java method invocation.  It's called \"virtual\" because it does not have to match the actual method of a Java class.  In fact, like normal properties a virtual method is also handled by a value resolver.  The only difference is that for virtual methods a value resolver consumes parameters that are also expressions."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:479
#, no-wrap
msgid ""
"<html>\n"
"<h1>{item.buildName(item.name,5)}</h1> <1>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:481
#, no-wrap
msgid "`buildName(item.name,5)` represents a virtual method with name `buildName` and two parameters: `item.name` and `5` . The virtual method could be evaluated by a value resolver generated for the following Java class:   \n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:489
#, no-wrap
msgid ""
"class Item {\n"
"   String buildName(String name, int age) {\n"
"      return name + \":\" + age;\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:492
msgid "Virtual methods are usually evaluated by value resolvers generated for <<template_extension_methods,@TemplateExtension methods>>, <<template_data,@TemplateData>> or classes used in <<typesafe_expressions,parameter declarations>>. However, a custom value resolver that is not backed by any Java class/method can be registered as well."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:494
msgid "A virtual method with single parameter can be called using the infix notation:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:495
#, no-wrap
msgid "Infix Notation Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:501
#, no-wrap
msgid ""
"<html>\n"
"<p>{item.price or 5}</p>  <1>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:503
msgid "`item.price or 5` is translated to `item.price.or(5)`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:505
msgid "Virtual method parameters can be \"nested\" virtual method invocations."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:506
#, no-wrap
msgid "Nested Virtual Method Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:512
#, no-wrap
msgid ""
"<html>\n"
"<p>{item.subtractPrice(item.calculateDiscount(10))}</p>  <1>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:514
msgid "`item.calculateDiscount(10)` is evaluated first and then passed as an argument to `item.subtractPrice()`."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/qute-reference.adoc:515
#, no-wrap
msgid "Evaluation of `CompletionStage` and `Uni` Objects"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:521
msgid "Objects that implement `java.util.concurrent.CompletionStage` and `io.smallrye.mutiny.Uni` are evaluated in a special way.  If a part of an expression resolves to a `CompletionStage`, the resolution continues once this stage is completed and the next part of the expression (if any) is evaluated against the result of the completed stage.  For example, if there is an expression `{foo.size}` and `foo` resolves to `CompletionStage<List<String>>` then `size` is resolved against the completed result, i.e. `List<String>`.  If a part of an expression resolves to a `Uni`, a `CompletionStage` is first created from `Uni` using `Uni#subscribeAsCompletionStage()` and then evaluated as described above."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:526
msgid "It can happen that a `CompletionStage` never completes or a `Uni` emits no item/failure.  In this case, the rendering methods (such as `TemplateInstance#render()` and `TemplateInstance#createUni()`) fail after a specific timeout.  The timeout can be specified as a template instance `timeout` attribute.  If no `timeout` attribute is set the global rendering timeout is used."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:528
msgid "In Quarkus, the default timeout can be set via the `io.quarkus.qute.timeout` configuration property. If using Qute standalone then the `EngineBuilder#timeout()` method can be used."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:530
msgid "In previous versions, only the `TemplateInstance#render()` method honored the timeout attribute. You can use the `io.quarkus.qute.useAsyncTimeout=false` config property to preserve the old behavior and take care of the timeout yourself, for example `templateInstance.createUtni().ifNoItem().after(Duration.ofMillis(500)).fail()`."
msgstr ""

#. type: Title =====
#: upstream/_versions/main/guides/qute-reference.adoc:531
#, no-wrap
msgid "How to Identify a Problematic Part of the Template"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:535
msgid "It's not easy to find the problematic part of a template when a timeout occurs.  You can set the `TRACE` level for the logger `io.quarkus.qute.nodeResolve` and try analyze the log output afterwards."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:536
#, no-wrap
msgid "`application.properties` Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:541
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.qute.nodeResolve\".min-level=TRACE\n"
"quarkus.log.category.\"io.quarkus.qute.nodeResolve\".level=TRACE\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:544
msgid "You should see the following pair of log messages for every expression and section used in a template:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:547
#, no-wrap
msgid ""
"TRACE [io.qua.qut.nodeResolve] Resolve {name} started: Template hello.html at line 8\n"
"TRACE [io.qua.qut.nodeResolve] Resolve {name} completed: Template hello.html at line 8\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:550
msgid "If a `completed` log message is missing then you have a good candidate to explore."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/qute-reference.adoc:551
#, no-wrap
msgid "Missing Properties"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:556
msgid "It can happen that an expression may not be evaluated at runtime.  For example, if there is an expression `{person.age}` and there is no property `age` declared on the `Person` class.  The behavior differs based on whether the <<strict_rendering>> is enabled or not."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:559
msgid "If enabled then a missing property will always result in a `TemplateException` and the rendering is aborted.  You can use _default values_ and _safe expressions_ in order to suppress the error."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:561
msgid "If disabled then the special constant `NOT_FOUND` is written to the output by default."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:563
msgid "In Quarkus, it's possible to change the default strategy via the `quarkus.qute.property-not-found-strategy` as described in the <<configuration-reference>>."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:565
msgid "Similar errors are detected at build time if <<typesafe_expressions>> and <<typesafe_templates>> are used."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:570
msgid "A section:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:572
msgid "has a start tag"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:573
msgid "starts with `#`, followed by the name of the section such as `{#if}` and `{#each}`,"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:574
msgid "may be empty"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:575
msgid "tag ends with `/`, ie. `{#emptySection /}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:576
msgid "may contain other expression, sections, etc."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:577
msgid "the end tag starts with `/` and contains the name of the section (optional): `{#if foo}Foo!{/if}` or `{#if foo}Foo!{/}`,"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:584
msgid "The start tag can also define parameters.  The parameters have optional names.  A section may contain several content *blocks*.  The \"main\" block is always present.  Additional/nested blocks also start with `#` and can have parameters too - `{#else if item.isActive}`.  A section helper that defines the logic of a section can \"execute\" any of the blocks and evaluate the parameters."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:594
#, no-wrap
msgid ""
"{#if item.name is 'sword'}\n"
"  It's a sword!\n"
"{#else if item.name is 'shield'}\n"
"  It's a shield!\n"
"{#else}\n"
"  Item is neither a sword nor a shield.\n"
"{/if}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/qute-reference.adoc:597
#, no-wrap
msgid "Loop Section"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:601
msgid "The loop section makes it possible to iterate over an instance of `Iterable`, `Iterator`, array, `Map` (element is a `Map.Entry`), `Stream`, `Integer` and `int` (primitive value).  A `null` parameter value results in a no-op."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:604
msgid "This section has two flavors.  The first one is using the name `each` and `it` is an implicit alias for the iteration element."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:610
#, no-wrap
msgid ""
"{#each items}\n"
"  {it.name} <1>\n"
"{/each}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:612
msgid "`name` is resolved against the current iteration element."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:614
msgid "The other form is using the name `for` and specifies the alias used to reference the iteration element:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:620
#, no-wrap
msgid ""
"{#for item in items} <1>\n"
"  {item.name} \n"
"{/for}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:622
msgid "`item` is the alias used for the iteration element."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:624
msgid "It's also possible to access the iteration metadata inside the loop via the following keys:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:626
msgid "`count` - 1-based index"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:627
msgid "`index` - zero-based index"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:628
msgid "`hasNext` - `true` if the iteration has more elements"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:629
msgid "`isLast` - `true` if `hasNext == false`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:630
msgid "`isFirst` - `true` if `count == 1`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:631
msgid "`odd` - `true` if the zero-based index is odd"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:632
msgid "`even` - `true` if the zero-based index is even"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:633
msgid "`indexParity` - outputs `odd` or `even` based on the zero-based index value"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:638
msgid "However, the keys cannot be used directly.  Instead, a prefix is used to avoid possible collisions with variables from the outer scope.  By default, the alias of an iterated element suffixed with an underscore is used as a prefix.  For example, the `hasNext` key must be prefixed with `it_` inside an `{#each}` section: `{it_hasNext}`."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:639
#, no-wrap
msgid "`each` Iteration Metadata Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:646
#, no-wrap
msgid ""
"{#each items}\n"
"  {it_count}. {it.name} <1>\n"
"  {#if it_hasNext}<br>{/if} <2>\n"
"{/each}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:648
msgid "`it_count` represents one-based index."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:649
#: upstream/_versions/main/guides/qute-reference.adoc:662
msgid "`<br>` is only rendered if the iteration has more elements."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:651
msgid "And must be used in a form of `{item_hasNext}` inside a `{#for}` section with the `item` element alias."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:652
#, no-wrap
msgid "`for` Iteration Metadata Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:659
#, no-wrap
msgid ""
"{#for item in items}\n"
"  {item_count}. {item.name} <1>\n"
"  {#if item_hasNext}<br>{/if} <2>\n"
"{/each}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:661
msgid "`item_count` represents one-based index."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/qute-reference.adoc:666
msgid "The iteration metadata prefix is configurable either via `EngineBuilder.iterationMetadataPrefix()` for standalone Qute or via the `quarkus.qute.iteration-metadata-prefix` configuration property in a Quarkus application. Three special constants can be used:"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/qute-reference.adoc:668
msgid "`<alias_>` - the alias of an iterated element suffixed with an underscore is used (default)"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/qute-reference.adoc:669
msgid "`<alias?>` - the alias of an iterated element suffixed with a question mark is used"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/qute-reference.adoc:670
msgid "`<none>` - no prefix is used"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:673
msgid "The `for` statement also works with integers, starting from 1. In the example below, considering that `total = 3`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:679
#, no-wrap
msgid ""
"{#for i in total}\n"
"  {i}:\n"
"{/for}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:682
msgid "And the output will be:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:686
#, no-wrap
msgid "1:2:3:\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:689
msgid "A loop section may also define the `{#else}` block that is executed when there are no items to iterate:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:697
#, no-wrap
msgid ""
"{#for item in items}\n"
"  {item.name}\n"
"{#else}\n"
"  No items.\n"
"{/for}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/qute-reference.adoc:700
#, no-wrap
msgid "If Section"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:705
msgid "The `if` section represents a basic control flow section.  The simplest possible version accepts a single parameter and renders the content if the condition is evaluated to `true`.  A condition without an operator evaluates to `true` if the value is not considered `falsy`, i.e. if the value is not `null`, `false`, an empty collection, an empty map, an empty array, an empty string/char sequence or a number equal to zero."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:711
#, no-wrap
msgid ""
"{#if item.active}\n"
"  This item is active.\n"
"{/if}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:714
msgid "You can also use the following operators in a condition:"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:716
#: upstream/_versions/main/guides/qute-reference.adoc:858
#, no-wrap
msgid "Operator"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:716
#: upstream/_versions/main/guides/qute-reference.adoc:858
#, no-wrap
msgid "Aliases"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:718
#, no-wrap
msgid "Precedence (higher wins)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:719
#, no-wrap
msgid "logical complement"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:720
#, no-wrap
msgid "`!`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:722
#, no-wrap
msgid "4"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:723
#: upstream/_versions/main/guides/qute-reference.adoc:865
#, no-wrap
msgid "greater than"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:724
#: upstream/_versions/main/guides/qute-reference.adoc:866
#, no-wrap
msgid "`gt`, `>`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:726
#: upstream/_versions/main/guides/qute-reference.adoc:730
#: upstream/_versions/main/guides/qute-reference.adoc:734
#: upstream/_versions/main/guides/qute-reference.adoc:738
#, no-wrap
msgid "3"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:727
#: upstream/_versions/main/guides/qute-reference.adoc:869
#, no-wrap
msgid "greater than or equal to"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:728
#: upstream/_versions/main/guides/qute-reference.adoc:870
#, no-wrap
msgid "`ge`, `>=`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:731
#: upstream/_versions/main/guides/qute-reference.adoc:873
#, no-wrap
msgid "less than"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:732
#: upstream/_versions/main/guides/qute-reference.adoc:874
#, no-wrap
msgid "`lt`, `<`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:735
#: upstream/_versions/main/guides/qute-reference.adoc:877
#, no-wrap
msgid "less than or equal to"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:736
#: upstream/_versions/main/guides/qute-reference.adoc:878
#, no-wrap
msgid "`le`, `\\<=`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:739
#, no-wrap
msgid "equals"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:740
#, no-wrap
msgid "`eq`, `==`, `is`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:742
#: upstream/_versions/main/guides/qute-reference.adoc:746
#, no-wrap
msgid "2"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:743
#, no-wrap
msgid "not equals"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:744
#, no-wrap
msgid "`ne`, `!=`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:747
#, no-wrap
msgid "logical AND (short-circuiting)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:748
#, no-wrap
msgid "`&&`, `and`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:750
#: upstream/_versions/main/guides/qute-reference.adoc:754
#, no-wrap
msgid "1"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:751
#, no-wrap
msgid "logical OR (short-circuiting)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:751
#, no-wrap
msgid "`\\"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:752
#, no-wrap
msgid "`, `or`"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:756
#, no-wrap
msgid "A simple operator example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:762
#, no-wrap
msgid ""
"{#if item.age > 10}\n"
"  This item is very old.\n"
"{/if}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:765
msgid "Multiple conditions are also supported."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:766
#, no-wrap
msgid "Multiple conditions example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:772
#, no-wrap
msgid ""
"{#if item.age > 10 && item.price > 500}\n"
"  This item is very old and expensive.\n"
"{/if}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:775
msgid "Precedence rules can be overridden by parentheses."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:776
#, no-wrap
msgid "Parentheses example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:782
#, no-wrap
msgid ""
"{#if (item.age > 10 || item.price > 500) && user.loggedIn}\n"
"  User must be logged in and item age must be > 10 or price must be > 500.\n"
"{/if}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:786
msgid "You can also add any number of `else` blocks:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:798
#, no-wrap
msgid ""
"{#if item.age > 10}\n"
"  This item is very old.\n"
"{#else if item.age > 5}\n"
"  This item is quite old.\n"
"{#else if item.age > 2}\n"
"  This item is old.\n"
"{#else}\n"
"  This item is not old at all!\n"
"{/if}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/qute-reference.adoc:801
#, no-wrap
msgid "When Section"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:807
msgid "This section is similar to Java's `switch` or Kotlin's `when` constructs.  It matches a _tested value_ against all blocks sequentially until a condition is satisfied.  The first matching block is executed.  All other blocks are ignored (this behavior differs to the Java `switch` where a `break` statement is necessary)."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:808
#, no-wrap
msgid "Example using the `when`/`is` name aliases"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:819
#, no-wrap
msgid ""
"{#when items.size}\n"
"  {#is 1} <1>\n"
"    There is exactly one item!\n"
"  {#is > 10} <2>\n"
"    There are more than 10 items!\n"
"  {#else} <3>\n"
"    There are 2 -10 items!\n"
"{/when}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:821
msgid "If there is exactly one parameter it's tested for equality."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:822
msgid "It's possible to use <<when_operators,an operator>> to specify the matching logic. Unlike in the <<if_section>> nested operators are not supported."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:823
msgid "`else` is block is executed if no other block matches the value."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:824
#, no-wrap
msgid "Example using the `switch`/`case` name aliases"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:833
#, no-wrap
msgid ""
"{#switch person.name}\n"
"  {#case 'John'} <1>\n"
"    Hey John!\n"
"  {#case 'Mary'}\n"
"    Hey Mary!\n"
"{/switch}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:835
msgid "`case` is an alias for `is`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:838
msgid "A tested value that resolves to an enum is handled specifically.  The parameters of an `is`/`case` block are not evaluated as expressions but compared with the result of `toString()` invocation upon the tested value."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:847
#, no-wrap
msgid ""
"{#when machine.status}\n"
"  {#is ON} \n"
"    It's running. <1>\n"
"  {#is in OFF BROKEN}\n"
"    It's broken or OFF. <2>\n"
"{/when}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:849
msgid "This block is executed if `machine.status.toString().equals(\"ON\")`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:850
msgid "This block is executed if `machine.status.toString().equals(\"OFF\")` or `machine.status.toString().equals(\"BROKEN\")`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:852
msgid "An enum constant is validated if the tested value has a type information available and resolves to an enum type."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:854
msgid "The following operators are supported in `is`/`case` block conditions:"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:860
#, no-wrap
msgid "Example"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:861
#, no-wrap
msgid "not equal"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:862
#, no-wrap
msgid "`!=`, `not`, `ne`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:864
#, no-wrap
msgid "`{#is not 10}`,`{#case != 10}`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:868
#: upstream/_versions/main/guides/qute-reference.adoc:880
#, no-wrap
msgid "`{#case le 10}`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:872
#, no-wrap
msgid "`{#is >= 10}`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:876
#, no-wrap
msgid "`{#is < 10}`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:881
#, no-wrap
msgid "in"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:882
#, no-wrap
msgid "`in`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:884
#, no-wrap
msgid "`{#is in 'foo' 'bar' 'baz'}`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:885
#, no-wrap
msgid "not in"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:886
#, no-wrap
msgid "`ni`,`!in`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/qute-reference.adoc:888
#, no-wrap
msgid "`{#is !in 1 2 3}`"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/qute-reference.adoc:891
#, no-wrap
msgid "Let Section"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:894
msgid "This section allows you to define named local variables:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:902
#, no-wrap
msgid ""
"{#let myParent=order.item.parent isActive=false age=10} <1>\n"
"  <h1>{myParent.name}</h1>\n"
"  Is active: {isActive}\n"
"  Age: {age}\n"
"{/let} <2>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:904
msgid "The local variable is initialized with an expression that can also represent a <<literals,literal>>."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:905
msgid "Keep in mind that the variable is not available outside the `let` section that defines it."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:907
msgid "If a key of a section parameter (aka the name of the local variable) ends with a `?` then the local variable is only set if the key without the `?` suffix resolves to `null` or _\"not found\"_:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:913
#, no-wrap
msgid ""
"{#let enabled?=true} <1> <2>\n"
"  {#if enabled}ON{/if} \n"
"{/let}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:915
msgid "`true` is effectively a _default value_ that is only used if the parent scope does not define `enabled` already."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:916
msgid "`enabled?=true` is a short version of `enabled=enabled.or(true)`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:918
msgid "This section tag is also registered under the `set` alias:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:925
#, no-wrap
msgid ""
"{#set myParent=item.parent price=item.price}\n"
"  <h1>{myParent.name}</h1>\n"
"  <p>Price: {price}\n"
"{/set}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/qute-reference.adoc:928
#, no-wrap
msgid "With Section"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:932
msgid "This section can be used to set the current context object.  This could be useful to simplify the template structure:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:939
#, no-wrap
msgid ""
"{#with item.parent}\n"
"  <h1>{name}</h1>  <1>\n"
"  <p>{description}</p> <2>\n"
"{/with}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:941
msgid "The `name` will be resolved against the `item.parent`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:942
msgid "The `description` will be also resolved against the `item.parent`."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/qute-reference.adoc:948
msgid "Note that the `with` section should not be used in <<typesafe_templates>> or templates that define <<typesafe_expressions>>.  The reason is that it prevents Qute from validating the nested expressions.  If possible it should be replaced with the `{#let}` section which declares an explicit binding:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:955
#, no-wrap
msgid ""
"{#let it=item.parent}\n"
"  <h1>{it.name}</h1>\n"
"  <p>{it.description}</p>\n"
"{/let}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/qute-reference.adoc:959
msgid "This section might also come in handy when we'd like to avoid multiple expensive invocations:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:969
#, no-wrap
msgid ""
"{#with item.callExpensiveLogicToGetTheValue(1,'foo',bazinga)}\n"
"  {#if this is \"fun\"} <1>\n"
"    <h1>Yay!</h1>\n"
"  {#else}\n"
"    <h1>{this} is not fun at all!</h1>\n"
"  {/if}\n"
"{/with}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:971
msgid "`this` is the result of `item.callExpensiveLogicToGetTheValue(1,'foo',bazinga)`. The method is only invoked once even though the result may be used in multiple expressions."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/qute-reference.adoc:973
#, no-wrap
msgid "Include Section"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:976
msgid "This section can be used to include another template and possibly override some parts of the template (see the _template inheritance_ below)."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:977
#, no-wrap
msgid "Simple Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:989
#, no-wrap
msgid ""
"<html>\n"
"<head>\n"
"<meta charset=\"UTF-8\">\n"
"<title>Simple Include</title>\n"
"</head>\n"
"<body>\n"
"  {#include foo limit=10 /} <1><2>\n"
"</body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:991
msgid "Include a template with id `foo`. The included template can reference data from the current context."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:992
msgid "It's also possible to define optional parameters that can be used in the included template."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:994
msgid "_Template inheritance_ makes it possible to reuse template layouts."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:995
#, no-wrap
msgid "Template \"base\""
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1007
#, no-wrap
msgid ""
"<html>\n"
"<head>\n"
"<meta charset=\"UTF-8\">\n"
"<title>{#insert title}Default Title{/}</title> <1>\n"
"</head>\n"
"<body>\n"
"  {#insert}No body!{/} <2>\n"
"</body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1009
#: upstream/_versions/main/guides/qute-reference.adoc:1085
msgid "`insert` sections are used to specify parts that could be overridden by a template that includes the given template."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1010
msgid "An `insert` section may define the default content that is rendered if not overridden. If there is no name supplied then the main block of the relevant `{#include}` section is used."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:1011
#, no-wrap
msgid "Template \"detail\""
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1020
#, no-wrap
msgid ""
"{#include base} <1>\n"
"  {#title}My Title{/title} <2>\n"
"  <div> <3>\n"
"    My body.\n"
"  </div>\n"
"{/include}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1022
msgid "`include` section is used to specify the extended template."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1023
msgid "Nested blocks are used to specify the parts that should be overridden."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1024
msgid "The content of the main block is used for an `{#insert}` section with no name parameter specified."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1026
msgid "Section blocks can also define an optional end tag - `{/title}`."
msgstr ""

#. type: Labeled list
#: upstream/_versions/main/guides/qute-reference.adoc:1028
#: upstream/_versions/main/guides/qute-reference.adoc:2290
#, no-wrap
msgid "User-defined Tags"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1032
msgid "User-defined tags can be used to include a _tag template_, optionally pass some arguments and possibly override some parts of the template.  Let's suppose we have a tag template called `itemDetail.html`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1039
#, no-wrap
msgid ""
"{#if showImage} <1>\n"
"  {it.image} <2>\n"
"  {nested-content} <3>\n"
"{/if}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1041
msgid "`showImage` is a named parameter."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1042
msgid "`it` is a special key that is replaced with the first unnamed parameter of the tag."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1043
msgid "(optional) `nested-content` is a special key that will be replaced by the content of the tag."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1046
msgid "In Quarkus, all files from the `src/main/resources/templates/tags` are registered and monitored automatically.  For Qute standalone, you need to put the parsed template under the name `itemDetail.html` and register a relevant `UserTagSectionHelper` to the engine:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1053
#, no-wrap
msgid ""
"Engine engine = Engine.builder()\n"
"                   .addSectionHelper(new UserTagSectionHelper.Factory(\"itemDetail\",\"itemDetail.html\"))\n"
"                   .build();\n"
"engine.putTemplate(\"itemDetail.html\", engine.parse(\"...\"));\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1056
msgid "Then, we can call the tag like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1068
#, no-wrap
msgid ""
"<ul>\n"
"{#for item in items}\n"
"  <li>\n"
"  {#itemDetail item showImage=true} <1>\n"
"    = <b>{item.name}</b> <2>\n"
"  {/itemDetail}\n"
"  </li>\n"
"{/for}\n"
"</ul>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1070
msgid "`item` is resolved to an iteration element and can be referenced using the `it` key in the tag template."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1071
msgid "Tag content injected using the `nested-content` key in the tag template."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1076
msgid "By default, the tag template can reference data from the parent context.  For example, the tag above could use the following expression `{items.size}`.  However, sometimes it might be useful to disable this behavior and execute the tag as an _isolated_ template, i.e. without access to the context of the template that calls the tag.  In this case, just add `_isolated` or `_isolated=true` argument to the call site, e.g. `{#itemDetail item showImage=true _isolated /}`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1078
msgid "User tags can also make use of the template inheritance in the same way as regular `{#include}` sections do."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:1079
#, no-wrap
msgid "Tag `myTag`"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1083
#, no-wrap
msgid "This is {#insert title}my title{/title}! <1>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:1086
#, no-wrap
msgid "Tag Call Site"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1094
#, no-wrap
msgid ""
"<p>\n"
"  {#myTag}\n"
"    {title}my custom title{/title} <1>\n"
"  {/myTag}\n"
"</p>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1096
msgid "The result would be something like `<p>This is my custom title!</p>`."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/qute-reference.adoc:1097
#, no-wrap
msgid "Eval Section"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1101
msgid "This section can be used to parse and evaluate a template dynamically.  The behavior is very similar to the <<include_helper>> but:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1103
msgid "The template content is passed directly, i.e. not obtained via an `io.quarkus.qute.TemplateLocator`,"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1104
msgid "It's not possible to override parts of the evaluated template."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1108
#, no-wrap
msgid "{#eval myData.template name='Mia' /} <1><2><3>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1110
msgid "The result of `myData.template` will be used as the template. The template is executed with the <<current_context_object>>, i.e. can reference data from the template it's included into."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1111
msgid "It's also possible to define optional parameters that can be used in the evaluated template."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1112
msgid "The content of the section is always ignored."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1114
msgid "The evaluated template is parsed and evaluated every time the section is executed. In other words, it's not possible to cache the parsed value to conserve resources and optimize the performance."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/qute-reference.adoc:1115
#, no-wrap
msgid "Rendering Output"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1121
msgid "`TemplateInstance` provides several ways to trigger the rendering and consume the result.  The most straightforward approach is represented by `TemplateInstance.render()`.  This method triggers a synchronous rendering, i.e. the current thread is blocked until the rendering is finished, and returns the output.  By contrast, `TemplateInstance.renderAsync()` returns a `CompletionStage<String>` which is completed when the rendering is finished."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:1122
#, no-wrap
msgid "`TemplateInstance.renderAsync()` Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1132
#, no-wrap
msgid ""
"template.data(foo).renderAsync().whenComplete((result, failure) -> { <1>\n"
"   if (failure == null) {\n"
"      // consume the output...\n"
"   } else {\n"
"      // process failure...\n"
"   }\n"
"};\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1134
msgid "Register a callback that is executed once the rendering is finished."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1139
msgid "There are also two methods that return https://smallrye.io/smallrye-mutiny/[Mutiny] types.  `TemplateInstance.createUni()` returns a new `Uni<String>` object.  If you call `createUni()` the template is not rendered right away.  Instead, every time `Uni.subscribe()` is called a new rendering of the template is triggered."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:1140
#, no-wrap
msgid "`TemplateInstance.createUni()` Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1144
#, no-wrap
msgid "template.data(foo).createUni().subscribe().with(System.out::println);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1150
msgid "`TemplateInstance.createMulti()` returns a new `Multi<String>` object.  Each item represents a part/chunk of the rendered template.  Again, `createMulti()` does not trigger rendering.  Instead, every time a computation is triggered by a subscriber the template is rendered again."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:1151
#, no-wrap
msgid "`TemplateInstance.createMulti()` Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1155
#, no-wrap
msgid "template.data(foo).createMulti().subscribe().with(buffer:append,buffer::flush);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1158
msgid "The template rendering is divided in two phases. During the first phase, which is asynchronous, all expressions in the template are resolved and a _result tree_ is built. In the second phase, which is synchronous, the result tree is _materialized_, i.e. one by one the result nodes emit chunks that are consumed/buffered by the specific consumer."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/qute-reference.adoc:1159
#, no-wrap
msgid "Engine Configuration"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/qute-reference.adoc:1162
#, no-wrap
msgid "Value Resolvers"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1166
msgid "Value resolvers are used when evaluating expressions.  A custom `io.quarkus.qute.ValueResolver` can be registered programmatically via `EngineBuilder.addValueResolver()`."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:1167
#, no-wrap
msgid "`ValueResolver` Builder Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1174
#, no-wrap
msgid ""
"engineBuilder.addValueResolver(ValueResolver.builder()\n"
"    .appliesTo(ctx -> ctx.getBase() instanceof Long && ctx.getName().equals(\"tenTimes\"))\n"
"    .resolveSync(ctx -> (Long) ctx.getBase() * 10)\n"
"    .build());\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/qute-reference.adoc:1177
#, no-wrap
msgid "Template Locator"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1182
msgid "Manual registration is sometimes handy but it's also possible to register a template locator using `EngineBuilder.addLocator()`.  This locator is used whenever the `Engine.getTemplate()` method is called and the engine has no template for a given id stored in the cache.  The locator is responsible to use the correct character encoding when reading the contents of a template."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1184
msgid "In Quarkus, all templates from the `src/main/resources/templates` are located automatically and the encoding set via `quarkus.qute.default-charset` (UTF-8 by default) is used."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/qute-reference.adoc:1185
#, no-wrap
msgid "Content Filters"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1188
msgid "Content filters can be used to modify the template contents before parsing."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:1189
#, no-wrap
msgid "Content Filter Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1198
#, no-wrap
msgid ""
"engineBuilder.addParserHook(new ParserHook() {\n"
"    @Override\n"
"    public void beforeParsing(ParserHelper parserHelper) {\n"
"        parserHelper.addContentFilter(contents -> contents.replace(\"${\", \"$\\\\{\")); <1>\n"
"    }\n"
"});\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1200
msgid "Escape all occurences of `${`."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/qute-reference.adoc:1202
#, no-wrap
msgid "Strict Rendering"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1207
msgid "The strict rendering enables the developers to catch insidious errors caused by typos and invalid expressions.  If enabled then any expression that cannot be resolved, i.e. is evaluated to an instance of `io.quarkus.qute.Results.NotFound`, will always result in a `TemplateException` and the rendering is aborted.  A `NotFound` value is considered an error because it basically means that no value resolver was able to resolve the expression correctly."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1209
msgid "`null` is a valid value though. It is considered `falsy` as described in the <<if_section>> and does not produce any output."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1212
msgid "Strict rendering is enabled by default.  However, you can disable this functionality via `io.quarkus.qute.EngineBuilder.strictRendering(boolean)`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1214
msgid "In Quarkus, a dedicated config property can be used instead: `quarkus.qute.strict-rendering`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1221
msgid "If you really need to use an expression which can potentially lead to a \"not found\" error, you can use _default values_ and _safe expressions_ in order to suppress the error.  A default value is used if the previous part of an expression cannot be resolved or resolves to `null`.  You can use the elvis operator to output the default value: `{foo.bar ?: 'baz'}`, which is effectively the same as the following virtual method: `{foo.bar.or('baz')}`.  A safe expression ends with the `??` suffix and results in `null` if the expression cannot be resolved.  It can be very useful e.g. in `{#if}` sections: `{#if valueNotFound??}Only rendered if valueNotFound is truthy!{/if}`.  In fact, `??` is just a shorthand notation for `.or(null)`, i.e. `{#if valueNotFound??}` becomes `{#if valueNotFound.or(null)}`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/qute-reference.adoc:1223
#, no-wrap
msgid "Quarkus Integration"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1226
msgid "If you want to use Qute in your Quarkus application add the following dependency to your project:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1233
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-qute</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1237
msgid "In Quarkus, a preconfigured engine instance is provided and available for injection - a bean with scope `@ApplicationScoped`, bean type `io.quarkus.qute.Engine` and qualifier `@Default` is registered automatically.  Moreover, all templates located in the `src/main/resources/templates` directory are validated and can be easily injected."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1243
#, no-wrap
msgid ""
"import io.quarkus.qute.Engine;\n"
"import io.quarkus.qute.Template;\n"
"import io.quarkus.qute.Location;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1245
#: upstream/_versions/main/guides/qute-reference.adoc:1268
#, no-wrap
msgid "class MyBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1248
#, no-wrap
msgid ""
"    @Inject \n"
"    Template items; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1251
#, no-wrap
msgid ""
"    @Location(\"detail/items2_v1.html\") <2>\n"
"    Template items2;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1255
#, no-wrap
msgid ""
"    @Inject\n"
"    Engine engine; <3>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1257
msgid "If there is no `Location` qualifier provided, the field name is used to locate the template. In this particular case, the container will attempt to locate a template with path `src/main/resources/templates/items.html`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1258
msgid "The `Location` qualifier instructs the container to inject a template from a path relative from `src/main/resources/templates`. In this case, the full path is `src/main/resources/templates/detail/items2_v1.html`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1259
msgid "Inject the configured `Engine` instance."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1261
msgid "It's also possible to contribute to the engine configuration via a CDI observer method."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:1262
#, no-wrap
msgid "`EngineBuilder` Observer Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1266
#, no-wrap
msgid "import io.quarkus.qute.EngineBuilder;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1276
#, no-wrap
msgid ""
"    void configureEngine(@Observes EngineBuilder builder) {\n"
"       builder.addValueResolver(ValueResolver.builder()\n"
"                .appliesTo(ctx -> ctx.getBase() instanceof Long && ctx.getName().equals(\"tenTimes\"))\n"
"                .resolveSync(ctx -> (Long) ec.getBase() * 10)\n"
"                .build());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/qute-reference.adoc:1278
#, no-wrap
msgid "Template Variants"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1282
msgid "Sometimes it's useful to render a specific variant of the template based on the content negotiation.  This can be done by setting a special attribute via `TemplateInstance.setAttribute()`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1286
#, no-wrap
msgid "class MyService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1289
#, no-wrap
msgid ""
"    @Inject\n"
"    Template items; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1292
#, no-wrap
msgid ""
"    @Inject\n"
"    ItemManager manager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1297
#, no-wrap
msgid ""
"    String renderItems() {\n"
"       return items.data(\"items\",manager.findItems()).setAttribute(TemplateInstance.SELECTED_VARIANT, new Variant(Locale.getDefault(),\"text/html\",\"UTF-8\")).render();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1300
msgid "When using `quarkus-resteasy-qute` the content negotiation is performed automatically. See <<resteasy_integration>>."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/qute-reference.adoc:1302
#, no-wrap
msgid "Injecting Beans Directly In Templates"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1305
msgid "A CDI bean annotated with `@Named` can be referenced in any template through `cdi` and/or `inject` namespaces:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1310
#, no-wrap
msgid ""
"{cdi:personService.findPerson(10).name} <1>\n"
"{inject:foo.price} <2>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1312
msgid "First, a bean with name `personService` is found and then used as the base object."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1313
msgid "First, a bean with name `foo` is found and then used as the base object."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1315
msgid "`@Named @Dependent` beans are shared across all expressions in a template for a single rendering operation, and destroyed after the rendering finished."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1319
msgid "All expressions with `cdi` and `inject` namespaces are validated during build.  For the expression `cdi:personService.findPerson(10).name` the implementation class of the injected bean must either declare the `findPerson` method or a matching <<template_extension_methods,template extension method>> must exist.  For the expression `inject:foo.price` the implementation class of the injected bean must either have the `price` property (e.g. a `getPrice()` method) or a matching <<template_extension_methods,template extension method>> must exist."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1321
msgid "A `ValueResolver` is also generated for all beans annotated with `@Named` so that it's possible to access its properties without reflection."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1323
msgid "If your application serves xref:http-reference.adoc[HTTP requests] you can also inject the current `io.vertx.core.http.HttpServerRequest` via the `inject` namespace, e.g. `{inject:vertxRequest.getParam('foo')}`."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/qute-reference.adoc:1325
#, no-wrap
msgid "Type-safe Expressions"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1330
msgid "Template expressions can be optionally type-safe.  Which means that an expression is validated against the existing Java types and template extension methods.  If an invalid/incorrect expression is found then the build fails."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1332
msgid "For example, if there is an expression `item.name` where `item` maps to `org.acme.Item` then `Item` must have a property `name` or a matching template extension method must exist."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1335
msgid "An optional _parameter declaration_ is used to bind a Java type to expressions whose first part matches the parameter name.  Parameter declarations are specified directly in a template."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1340
msgid "A Java type should be always identified with a _fully qualified name_ unless it's a JDK type from the `java.lang` package - in this case, the package name is optional.  Parameterized types are supported, however wildcards are always ignored - only the upper/lower bound is taken into account.  For example, the parameter declaration `{@java.util.List<? extends org.acme.Foo> list}` is recognized as `{@java.util.List<org.acme.Foo> list}`.  Type variables are not handled in a special way and should never be used."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:1341
#, no-wrap
msgid "Parameter Declaration Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1356
#, no-wrap
msgid ""
"{@org.acme.Foo foo} <1>\n"
"<!DOCTYPE html>\n"
"<html>\n"
"<head>\n"
"<meta charset=\"UTF-8\">\n"
"<title>Qute Hello</title>\n"
"</head>\n"
"<body>\n"
"  <h1>{title}</h1> <2>\n"
"  Hello {foo.message.toLowerCase}! <3> <4>\n"
"</body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1358
msgid "Parameter declaration - maps `foo` to `org.acme.Foo`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1359
msgid "Not validated - not matching a param declaration."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1360
msgid "This expression is validated. `org.acme.Foo` must have a property `message` or a matching template extension method must exist."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1361
msgid "Likewise, the Java type of the object resolved from `foo.message` must have a property `toLowerCase` or a matching template extension method must exist."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1363
msgid "A value resolver is automatically generated for all types used in parameter declarations so that it's possible to access its properties without reflection."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1365
msgid "Method parameters of <<typesafe_templates,type-safe templates>> are automatically turned into parameter declarations."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1367
msgid "Note that sections can override names that would otherwise match a parameter declaration:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1384
#, no-wrap
msgid ""
"{@org.acme.Foo foo}\n"
"<!DOCTYPE html>\n"
"<html>\n"
"<head>\n"
"<meta charset=\"UTF-8\">\n"
"<title>Qute Hello</title>\n"
"</head>\n"
"<body>\n"
"  <h1>{foo.message}</h1> <1>\n"
"  {#for foo in baz.foos}\n"
"    <p>Hello {foo.message}!</p> <2>\n"
"  {/for}\n"
"</body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1386
msgid "Validated against `org.acme.Foo`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1387
msgid "Not validated - `foo` is overridden in the loop section."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1391
msgid "A paramater declaration may specify the _default value_ after the key.  The key and the default value are separated by an equals sign: `{@int age=10}`.  The default value is used in the template if the parameter key resolves to `null` or is not found."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1394
msgid "For example, if there's a parameter declaration `{@String foo=\"Ping\"}` and `foo` is not found then you can use `{foo}` and the output will be `Ping`.  On the other hand, if the value is set (e.g. via `TemplateInstance.data(\"foo\", \"Pong\")`) then the output of `{foo}` will be `Pong`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1396
msgid "The type of a default value must be assignable to the type of the parameter declaration, i.e. the following parameter declaration is incorrect and results in a build failure: `{@org.acme.Foo foo=1}`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1398
msgid "The default value is actually an <<expressions,expression>>. So the default value does not have to be a literal (such as `42` or `true`). For example, you can leverage the `@TemplateEnum` and specify an enum constant as a default value of a parameter declaration: `{@org.acme.MyEnum myEnum=MyEnum:FOO}`. However, the infix notation is not supported in default values."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1400
msgid "The type of a default value is not validated in <<standalone, Qute standalone>>."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:1401
#, no-wrap
msgid "More Parameter Declarations Examples "
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1409
#, no-wrap
msgid ""
"{@int pages} <1>\n"
"{@java.util.List<String> strings} <2>\n"
"{@java.util.Map<String,? extends Number> numbers} <3>\n"
"{@java.util.Optional<?> param} <4>\n"
"{@String name=\"Quarkus\"} <5>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1411
msgid "A primitive type."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1412
msgid "`String` is replaced with `java.lang.String`: `{@java.util.List<java.lang.String> strings}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1413
msgid "The wildcard is ignored and the upper bound is used instead: `{@java.util.Map<String,Number>}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1414
msgid "The wildcard is ignored and the `java.lang.Object` is used instead: `{@java.util.Optional<java.lang.Object>}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1415
msgid "The type is `java.lang.String`, the key is `name` and the default value is `Quarkus`."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/qute-reference.adoc:1417
#, no-wrap
msgid "Type-safe Templates"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1420
msgid "You can also define type-safe templates in your Java code.  If using <<resteasy_integration,templates in JAX-RS resources>>, you can rely on the following convention:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1424
msgid "Organise your template files in the `/src/main/resources/templates` directory, by grouping them into one directory per resource class. So, if your `ItemResource` class references two templates `hello` and `goodbye`, place them at `/src/main/resources/templates/ItemResource/hello.txt` and `/src/main/resources/templates/ItemResource/goodbye.txt`. Grouping templates per resource class makes it easier to navigate to them."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1425
msgid "In each of your resource class, declare a `@CheckedTemplate static class Template {}` class within your resource class."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1426
msgid "Declare one `public static native TemplateInstance method();` per template file for your resource."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1427
msgid "Use those static methods to build your template instances."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:1428
#, no-wrap
msgid "ItemResource.java"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1432
#: upstream/_versions/main/guides/qute-reference.adoc:1472
#: upstream/_versions/main/guides/qute-reference.adoc:1491
#: upstream/_versions/main/guides/qute-reference.adoc:1984
#, no-wrap
msgid "package org.acme.quarkus.sample;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1438
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1442
#: upstream/_versions/main/guides/qute-reference.adoc:1476
#, no-wrap
msgid ""
"import io.quarkus.qute.TemplateInstance;\n"
"import io.quarkus.qute.Template;\n"
"import io.quarkus.qute.CheckedTemplate;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1445
#, no-wrap
msgid ""
"@Path(\"item\")\n"
"public class ItemResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1450
#, no-wrap
msgid ""
"    @CheckedTemplate\n"
"    public static class Templates {\n"
"        public static native TemplateInstance item(Item item); <1> <2>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1458
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"{id}\")\n"
"    @Produces(MediaType.TEXT_HTML)\n"
"    public TemplateInstance get(Integer id) {\n"
"        return Templates.item(service.findItem(id)); <3>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1460
msgid "Declare a method that gives us a `TemplateInstance` for `templates/ItemResource/item.html` and declare its `Item item` parameter so we can validate the template."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1461
msgid "The `item` parameter is automatically turned into a <<typesafe_expressions,parameter declaration>> and so all expressions that reference this name will be validated."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1462
msgid "Make the `Item` object accessible in the template."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1464
msgid "By default, the templates defined in a class annotated with `@CheckedTemplate` can only contain type-safe expressions, i.e. expressions that can be validated at build time. You can use `@CheckedTemplate(requireTypeSafeExpressions = false)` to relax this requirement."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1467
msgid "You can also declare a top-level Java class annotated with `@CheckedTemplate`:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:1468
#, no-wrap
msgid "Top-level checked templates"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1481
#, no-wrap
msgid ""
"@CheckedTemplate\n"
"public class Templates {\n"
"    public static native TemplateInstance hello(String name); <1>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1483
msgid "This declares a template with path `templates/hello.txt`. The `name` parameter is automatically turned into a <<typesafe_expressions,parameter declaration>> and so all expressions that reference this name will be validated."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1486
msgid "Then declare one `public static native TemplateInstance method();` per template file.  Use those static methods to build your template instances:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:1487
#: upstream/_versions/main/guides/qute-reference.adoc:1980
#, no-wrap
msgid "HelloResource.java"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1497
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.QueryParam;\n"
"import io.quarkus.qute.TemplateInstance;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1500
#: upstream/_versions/main/guides/qute-reference.adoc:1995
#, no-wrap
msgid ""
"@Path(\"hello\")\n"
"public class HelloResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1507
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public TemplateInstance get(@QueryParam(\"name\") String name) {\n"
"        return Templates.hello(name);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/qute-reference.adoc:1510
#, no-wrap
msgid "Template Extension Methods"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1514
msgid "Extension methods can be used to extend the data classes with new functionality (to extend the set of accessible properties and methods) or to resolve expressions for a specific <<namespace_extension_methods,namespace>>.  For example, it is possible to add _computed properties_ and _virtual methods_."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1519
msgid "A value resolver is automatically generated for a method annotated with `@TemplateExtension`.  If a class is annotated with `@TemplateExtension` then a value resolver is generated for every _non-private static method_ declared on the class.  Method-level annotations override the behavior defined on the class.  Methods that do not meet the following requirements are ignored."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1521
msgid "A template extension method:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1523
msgid "must not be `private`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1524
msgid "must be static,"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1525
msgid "must not return `void`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1527
msgid "If there is no namespace defined the class of the first parameter that is not annotated with `@TemplateAttribute` is used to match the base object. Otherwise the namespace is used to match an expression."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1534
msgid "The method name is used to match the property name by default.  However, it is possible to specify the matching name with `TemplateExtension#matchName()`.  A special constant - `TemplateExtension#ANY` - may be used to specify that the extension method matches any name.  It is also possible to match the name against a regular expression specified in `TemplateExtension#matchRegex()`.  In both cases, an additional string method parameter must be used to pass the property name.  If both `matchName()` and `matchRegex()` are set the regular expression is used for matching."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:1535
#, no-wrap
msgid "Extension Method Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1539
#: upstream/_versions/main/guides/qute-reference.adoc:1735
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1541
#, no-wrap
msgid "class Item {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1543
#: upstream/_versions/main/guides/qute-reference.adoc:1740
#: upstream/_versions/main/guides/qute-reference.adoc:1771
#, no-wrap
msgid "    public final BigDecimal price;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1548
#: upstream/_versions/main/guides/qute-reference.adoc:1776
#, no-wrap
msgid ""
"    public Item(BigDecimal price) {\n"
"        this.price = price;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1551
#, no-wrap
msgid ""
"@TemplateExtension\n"
"class MyExtensions {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1556
#, no-wrap
msgid ""
"    static BigDecimal discountedPrice(Item item) { <1>\n"
"        return item.getPrice().multiply(new BigDecimal(\"0.9\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1558
msgid "This method matches an expression with base object of the type `Item.class` and the `discountedPrice` property name."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1560
msgid "This template extension method makes it possible to render the following template:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1564
#, no-wrap
msgid "{item.discountedPrice} <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1566
msgid "`item` is resolved to an instance of `org.acme.Item`."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/qute-reference.adoc:1567
#, no-wrap
msgid "Method Parameters"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1574
msgid "An extension method may declare parameters.  If no namespace is specified then the first parameter that is not annotated with `@TemplateAttribute` is used to pass the base object, i.e. `org.acme.Item` in the first example.  If matching any name or using a regular expression then a string method parameter needs to be used to pass the property name.  Parameters annotated with `@TemplateAttribute` are obtained via `TemplateInstance#getAttribute()`.  All other parameters are resolved when rendering the template and passed to the extension method."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:1575
#, no-wrap
msgid "Multiple Parameters Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1580
#, no-wrap
msgid ""
"@TemplateExtension\n"
"class BigDecimalExtensions {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1585
#, no-wrap
msgid ""
"    static BigDecimal scale(BigDecimal val, int scale, RoundingMode mode) { <1>\n"
"        return val.setScale(scale, mode);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1587
msgid "This method matches an expression with base object of the type `BigDecimal.class`, with the `scale` virtual method name and two virtual method parameters."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1591
#, no-wrap
msgid "{item.discountedPrice.scale(2,mode)} <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1593
msgid "`item.discountedPrice` is resolved to an instance of `BigDecimal`."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/qute-reference.adoc:1595
#, no-wrap
msgid "Namespace Extension Methods"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1600
msgid "If `TemplateExtension#namespace()` is specified then the extension method is used to resolve expressions with the given <<expressions,namespace>>.  Template extension methods that share the same namespace are grouped in one resolver ordered by `TemplateExtension#priority()`.  The first matching extension method is used to resolve an expression."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:1601
#, no-wrap
msgid "Namespace Extension Method Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1606
#, no-wrap
msgid ""
"@TemplateExtension(namespace = \"str\")\n"
"public class StringExtensions {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1610
#, no-wrap
msgid ""
"   static String format(String fmt, Object... args) {\n"
"      return String.format(fmt, args);\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1615
#, no-wrap
msgid ""
"   static String reverse(String val) {\n"
"      return new StringBuilder(val).reverse().toString();\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1618
msgid "These extension methods can be used as follows."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1623
#, no-wrap
msgid ""
"{str:format('%s %s!','Hello', 'world')} <1>\n"
"{str:reverse('hello')} <2>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1625
msgid "The output is `Hello world!`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1626
msgid "The output is `olleh`"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/qute-reference.adoc:1628
#, no-wrap
msgid "Built-in Template Extensions"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1631
msgid "Quarkus provides a set of built-in extension methods."
msgstr ""

#. type: Title =====
#: upstream/_versions/main/guides/qute-reference.adoc:1632
#, no-wrap
msgid "Maps"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1635
msgid "`keys` or `keySet`: Returns a Set view of the keys contained in a map"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1636
msgid "`{#for key in map.keySet}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1638
msgid "`values`: Returns a Collection view of the values contained in a map"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1639
msgid "`{#for value in map.values}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1641
msgid "`size`: Returns the number of key-value mappings in a map"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1642
msgid "`{map.size}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1644
msgid "`isEmpty`: Returns true if a map contains no key-value mappings"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1645
msgid "`{#if map.isEmpty}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1647
msgid "`get(key)`: Returns the value to which the specified key is mapped"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1648
msgid "`{map.get('foo')}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1650
msgid "A map value can be also accessed directly: `{map.myKey}`. Use the bracket notation for keys that are not legal identifiers: `{map['my key']}`."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/qute-reference.adoc:1651
#, no-wrap
msgid "Lists"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1654
msgid "`get(index)`: Returns the element at the specified position in a list"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1655
msgid "`{list.get(0)}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1657
msgid "`reversed`: Returns a reversed iterator over a list"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1658
msgid "`{#for r in recordsList.reversed}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1660
msgid "`take`: Returns the first `n` elements from the given list; throws an `IndexOutOfBoundsException` if `n` is out of range"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1661
msgid "`{#for r in recordsList.take(3)}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1663
msgid "`takeLast`: Returns the last `n` elements from the given list; throws an `IndexOutOfBoundsException` if `n` is out of range"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1664
msgid "`{#for r in recordsList.takeLast(3)}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1666
msgid "`first`: Returns the first element of the given list; throws an `NoSuchElementException` if the list is empty"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1667
msgid "`{recordsList.first}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1669
msgid "`last`: Returns the last element of the given list; throws an `NoSuchElementException` if the list is empty"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1670
msgid "`{recordsList.last}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1672
msgid "A list element can be accessed directly via an index: `{list.10}` or even `{list[10]}`."
msgstr ""

#. type: Title =====
#: upstream/_versions/main/guides/qute-reference.adoc:1673
#, no-wrap
msgid "Numbers"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1676
msgid "`mod`: Modulo operation"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1677
msgid "`{#if counter.mod(5) == 0}`"
msgstr ""

#. type: Title =====
#: upstream/_versions/main/guides/qute-reference.adoc:1678
#, no-wrap
msgid "Strings"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1681
msgid "`fmt` or `format`: format the string instance via `java.lang.String.format()`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1682
msgid "`{myStr.fmt(\"arg1\",\"arg2\")}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1683
msgid "`{myStr.format(locale,arg1)}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1684
msgid "`str:fmt` or `str:format`: format the supplied string value via `java.lang.String.format()`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1685
msgid "`{str:format(\"Hello %s!\",name)}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1686
msgid "`{str:fmt(locale,'%tA',now)}`"
msgstr ""

#. type: Title =====
#: upstream/_versions/main/guides/qute-reference.adoc:1687
#, no-wrap
msgid "Config "
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1690
msgid "`config:<name>` or `config:[<name>]`: Returns the config value for the given property name"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1691
msgid "`{config:foo}` or `{config:['property.with.dot.in.name']}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1693
msgid "`config:property(name)`: Returns the config value for the given property name; the name can be obtained dynamically by an expression"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1694
msgid "`{config:property('quarkus.foo')}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1695
msgid "`{config:property(foo.getPropertyName())}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1697
msgid "`config:boolean(name)`: Returns the config value for the given property name as a boolean; the name can be obtained dynamically by an expression"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1698
msgid "`{config:boolean('quarkus.foo.boolean') ?: 'Not Found'}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1699
msgid "`{config:boolean(foo.getPropertyName()) ?: 'property is false'}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1701
msgid "`config:integer(name)`: Returns the config value for the given property name as an integer; the name can be obtained dynamically by an expression"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1702
msgid "`{config:integer('quarkus.foo')}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1703
msgid "`{config:integer(foo.getPropertyName())}`"
msgstr ""

#. type: Title =====
#: upstream/_versions/main/guides/qute-reference.adoc:1704
#, no-wrap
msgid "Time"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1707
msgid "`format(pattern)`: Formats temporal objects from the `java.time` package"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1708
msgid "`{dateTime.format('d MMM uuuu')}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1710
msgid "`format(pattern,locale)`: Formats temporal objects from the `java.time` package"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1711
msgid "`{dateTime.format('d MMM uuuu',myLocale)}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1713
msgid "`format(pattern,locale,timeZone)`: Formats temporal objects from the `java.time` package"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1714
msgid "`{dateTime.format('d MMM uuuu',myLocale,myTimeZoneId)}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1716
msgid "`time:format(dateTime,pattern)`: Formats temporal objects from the `java.time` package, `java.util.Date`, `java.util.Calendar` and `java.lang.Number`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1717
msgid "`{time:format(myDate,'d MMM uuuu')}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1719
msgid "`time:format(dateTime,pattern,locale)`: Formats temporal objects from the `java.time` package, `java.util.Date`, `java.util.Calendar` and `java.lang.Number`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1720
msgid "`{time:format(myDate,'d MMM uuuu', myLocale)}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1722
msgid "`time:format(dateTime,pattern,locale,timeZone)`: Formats temporal objects from the `java.time` package, `java.util.Date`, `java.util.Calendar` and `java.lang.Number`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1723
msgid "`{time:format(myDate,'d MMM uuuu',myLocale,myTimeZoneId)}`"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/qute-reference.adoc:1725
#, no-wrap
msgid "@TemplateData"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1729
msgid "A value resolver is automatically generated for a type annotated with `@TemplateData`.  This allows Quarkus to avoid using reflection to access the data at runtime."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1731
msgid "Non-public members, constructors, static initializers, static, synthetic and void methods are always ignored."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1738
#, no-wrap
msgid ""
"@TemplateData\n"
"class Item {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1744
#, no-wrap
msgid ""
"    public Item(BigDecimal price) {\n"
"        this.price = price;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1749
#, no-wrap
msgid ""
"    public BigDecimal getDiscountedPrice() {\n"
"        return price.multiply(new BigDecimal(\"0.9\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1752
msgid "Any instance of `Item` can be used directly in the template:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1758
#, no-wrap
msgid ""
"{#each items} <1>\n"
"  {it.price} / {it.discountedPrice}\n"
"{/each}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1760
msgid "`items` is resolved to a list of `org.acme.Item` instances."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1763
msgid "Furthermore, `@TemplateData.properties()` and `@TemplateData.ignore()` can be used to fine-tune the generated resolver.  Finally, it is also possible to specify the \"target\" of the annotation - this could be useful for third-party classes not controlled by the application:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1769
#, no-wrap
msgid ""
"@TemplateData(target = BigDecimal.class)\n"
"@TemplateData\n"
"class Item {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1783
#, no-wrap
msgid ""
"{#each items}\n"
"  {it.price.setScale(2, rounding)} <1>\n"
"{/each}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1785
msgid "The generated value resolver knows how to invoke the `BigDecimal.setScale()` method."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/qute-reference.adoc:1786
#, no-wrap
msgid "Accessing Static Fields and Methods"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1793
msgid "If `@TemplateData#namespace()` is set to a non-empty value then a namespace resolver is automatically generated to access the public static fields and methods of the target class.  By default, the namespace is the FQCN of the target class where dots and dollar signs are replaced by underscores.  For example, the namespace for a class with name `org.acme.Foo` is `org_acme_Foo`.  The static field `Foo.AGE` can be accessed via `{org_acme_Foo:AGE}`.  The static method `Foo.computeValue(int number)` can be accessed via `{org_acme_Foo:computeValue(10)}`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1795
msgid "A namespace can only consist of alphanumeric characters and underscores."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:1796
#, no-wrap
msgid "Class Annotated With `@TemplateData`"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1800
#: upstream/_versions/main/guides/qute-reference.adoc:1827
#, no-wrap
msgid "package model;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1806
#, no-wrap
msgid ""
"@TemplateData <1>\n"
"public class Statuses {\n"
"    public static final String ON = \"on\";\n"
"    public static final String OFF = \"off\";\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1808
msgid "A name resolver with the namespace `model_Status` is generated automatically."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:1809
#, no-wrap
msgid "Template Accessing Class Constants"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1815
#, no-wrap
msgid ""
"{#if machine.status == model_Status:ON}\n"
"  The machine is ON!\n"
"{/if}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/qute-reference.adoc:1818
#, no-wrap
msgid "Convenient Annotation For Enums"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1822
msgid "There's also a convenient annotation to access enum constants: `@io.quarkus.qute.TemplateEnum`.  This annotation is functionally equivalent to `@TemplateData(namespace = TemplateData.SIMPLENAME)`, i.e. a namespace resolver is automatically generated for the target enum and the simple name of the target enum is used as the namespace."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:1823
#, no-wrap
msgid "Enum Annotated With `@TemplateEnum`"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1833
#, no-wrap
msgid ""
"@TemplateEnum <1>\n"
"public enum Status {\n"
"    ON,\n"
"    OFF\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1835
msgid "A name resolver with the namespace `Status` is generated automatically."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1837
msgid "`@TemplateEnum` declared on a non-enum class is ignored. Also if an enum also declares the `@TemplateData` annotation then the `@TemplateEnum` annotation is ignored."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:1838
#, no-wrap
msgid "Template Accessing Enum Constants"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1844
#, no-wrap
msgid ""
"{#if machine.status == Status:ON}\n"
"  The machine is ON!\n"
"{/if}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1847
msgid "Quarkus detects possible namespace collisions and fails the build if a specific namespace is defined by multiple `@TemplateData` and/or `@TemplateEnum` annotations."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/qute-reference.adoc:1849
#, no-wrap
msgid "Global Variables"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1853
msgid "The `io.quarkus.qute.TemplateGlobal` annotation can be used to denote static fields and methods that supply _global variables_ which are accessible in any template.  Internally, each global variable is added to the data map of any `TemplateInstance` via the `TemplateInstance#data(String, Object)` method."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:1854
#, no-wrap
msgid "Global Variables Definition"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1858
#, no-wrap
msgid "enum Color { RED, GREEN, BLUE }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1861
#, no-wrap
msgid ""
"@TemplateGlobal <1>\n"
"public class Globals {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1863
#, no-wrap
msgid "    static int age = 40;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1867
#, no-wrap
msgid ""
"    static Color[] myColors() {\n"
"      return new Color[] { Color.RED, Color.BLUE };\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1873
#, no-wrap
msgid ""
"    @TemplateGlobal(name = \"currentUser\") <2>\n"
"    static String user() {\n"
"       return \"Mia\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1875
msgid "If a class is annotated with `@TemplateGlobal` then every non-void non-private static method that declares no parameters and every non-private static field is considered a global variable. The name is defaulted, i.e. the name of the field/method is used."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1876
msgid "Method-level annotations override the class-level annotation. In this particular case, the name is not defaulted but selected explicitly."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:1877
#, no-wrap
msgid "A Template Accessing Global Variables"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1883
#, no-wrap
msgid ""
"User: {currentUser} <1>\n"
"Age:  {age} <2>\n"
"Colors: {#each myColors}{it}{#if it_hasNext}, {/if}{/each} <3>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1885
msgid "`currentUser` resolves to `Globals#user()`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1886
msgid "`age` resolves to `Globals#age`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1887
msgid "`myColors` resolves to `Globals#myColors()`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1889
msgid "Note that global variables implicitly add <<typesafe_expressions, parameter declarations>> to all templates and so any expression that references a global variable is validated during build."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:1890
#, no-wrap
msgid "The Output"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1896
#, no-wrap
msgid ""
"User: Mia\n"
"Age:  40\n"
"Colors: RED, BLUE\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/qute-reference.adoc:1898
#, no-wrap
msgid "Resolving Conflicts"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1903
msgid "Global variables may conflict with regular data objects.  <<typesafe_templates,Type-safe templates>> override the global variables automatically.  For example, the following definition overrides the global variable supplied by the `Globals#user()` method:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:1904
#, no-wrap
msgid "Type-safe Template Definition"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1908
#, no-wrap
msgid "import org.acme.User;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1913
#, no-wrap
msgid ""
"@CheckedTemplate\n"
"public class Templates {\n"
"    static native TemplateInstance hello(User currentUser); <1>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1915
msgid "`currentUser` conflicts with the global variable supplied by `Globals#user()`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1917
msgid "So the corresponding template does not result in a validation error even though the `Globals#user()` method returns `java.lang.String` which does not have the `name` property:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:1918
#, no-wrap
msgid "`templates/hello.txt`"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1922
#, no-wrap
msgid "User name: {currentUser.name} <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1924
msgid "`org.acme.User` has the `name` property."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1926
msgid "For other templates an explicit parameter declaration is needed:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1930
#, no-wrap
msgid "{@org.acme.User currentUser} <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1932
#, no-wrap
msgid "User name: {currentUser.name}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1934
msgid "This parameter declaration overrides the declaration added by the global variable supplied by the `Globals#user()` method."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/qute-reference.adoc:1937
#, no-wrap
msgid "Native Executables"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1942
msgid "In the JVM mode a reflection-based value resolver may be used to access properties and call methods of the model classes.  But this does not work for xref:building-native-image.adoc[a native executable] out of the box.  As a result, you may encounter template exceptions like `Property \"name\" not found on the base object \"org.acme.Foo\" in expression {foo.name} in template hello.html` even if the `Foo` class declares a relevant getter method."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1944
msgid "There are several ways to solve this problem:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1946
msgid "Make use of <<typesafe_templates,type-safe templates>> or <<typesafe_expressions,type-safe expressions>>"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1947
msgid "In this case, an optimized value resolver is generated automatically and used at runtime"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1948
msgid "This is the preferred solution"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1949
msgid "Annotate the model class with <<template_data,`@TemplateData`>> - a specialized value resolver is generated and used at runtime"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1950
msgid "Annotate the model class with `@io.quarkus.runtime.annotations.RegisterForReflection` to make the reflection-based value resolver work"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/qute-reference.adoc:1953
#, no-wrap
msgid "RESTEasy Integration"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1957
msgid "If you want to use Qute in your JAX-RS application, then depending on which JAX-RS stack you are using, you'll need to register the proper extension first.  If you are using the traditional `quakus-resteasy` extension, then in your `pom.xml` file, add:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1964
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-qute</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1967
msgid "If instead you are using RESTEasy Reactive via the `quarkus-resteasy-reactive` extension, then in your `pom.xml` file, add:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1974
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-reactive-qute</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1977
msgid "Both of these extensions register a special `ContainerResponseFilter` implementation which enables resource methods to return a `TemplateInstance`, thus freeing users of having to take care of all necessary internal steps."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:1979
msgid "The end result is that a using Qute within a JAX-RS resource may look as simple as:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1989
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.QueryParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1992
#, no-wrap
msgid ""
"import io.quarkus.qute.TemplateInstance;\n"
"import io.quarkus.qute.Template;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:1998
#, no-wrap
msgid ""
"    @Inject\n"
"    Template hello; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:2005
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public TemplateInstance get(@QueryParam(\"name\") String name) {\n"
"        return hello.data(\"name\", name); <2> <3>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2007
msgid "If there is no `@Location` qualifier provided, the field name is used to locate the template. In this particular case, we're injecting a template with path `templates/hello.txt`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2008
msgid "`Template.data()` returns a new template instance that can be customized before the actual rendering is triggered. In this case, we put the name value under the key `name`. The data map is accessible during rendering."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2009
msgid "Note that we don't trigger the rendering - this is done automatically by a special `ContainerResponseFilter` implementation."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2011
msgid "Users are encouraged to use <<typesafe_templates,Type-safe templates>> that help to organize the templates for a specific JAX-RS resource and enable <<typesafe_expressions,type-safe expressions>> automatically."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2014
msgid "The content negotiation is performed automatically.  The resulting output depends on the `Accept` header received from the client."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:2019
#: upstream/_versions/main/guides/qute-reference.adoc:2040
#, no-wrap
msgid ""
"@Path(\"/detail\")\n"
"class DetailResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:2022
#, no-wrap
msgid ""
"    @Inject\n"
"    Template item; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:2029
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces({ MediaType.TEXT_HTML, MediaType.TEXT_PLAIN })\n"
"    public TemplateInstance item() {\n"
"        return item.data(\"myItem\", new Item(\"Alpha\", 1000)); <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2031
msgid "Inject a variant template with base path derived from the injected field - `src/main/resources/templates/item`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2032
msgid "For `text/plain` the `src/main/resources/templates/item.txt` template is used. For `text/html` the `META-INF/resources/templates/item.html` template is used."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2034
msgid "The `RestTemplate` util class can be used to obtain a template instance from a body of a JAX-RS resource method:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:2035
#, no-wrap
msgid "RestTemplate Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:2047
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces({ MediaType.TEXT_HTML, MediaType.TEXT_PLAIN })\n"
"    public TemplateInstance item() {\n"
"        return RestTemplate.data(\"myItem\", new Item(\"Alpha\", 1000)); <1>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2049
msgid "The name of the template is derived from the resource class and method name; `DetailResource/item` in this particular case."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2051
msgid "Unlike with `@Inject` the templates obtained via `RestTemplate` are not validated, i.e. the build does not fail if a template does not exist."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/qute-reference.adoc:2052
#, no-wrap
msgid "Development Mode"
msgstr "开发模式"

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2055
msgid "In the development mode, all files located in `src/main/resources/templates` are watched for changes and modifications are immediately visible."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/qute-reference.adoc:2057
#, no-wrap
msgid "Type-safe Message Bundles"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/qute-reference.adoc:2059
#, no-wrap
msgid "Basic Concepts"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2065
msgid "The basic idea is that every message is potentially a very simple template.  In order to prevent type errors a message is defined as an annotated method of a *message bundle interface*.  Quarkus generates the *message bundle implementation* at build time.  Subsequently, the bundles can be used at runtime:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2067
msgid "Directly in your code via `io.quarkus.qute.i18n.MessageBundles#get()`; e.g. `MessageBundles.get(AppMessages.class).hello_name(\"Lucie\")`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2068
msgid "Injected in your beans via `@Inject`; e.g. `@Inject AppMessages`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2069
msgid "Referenced in the templates via the message bundle namespace:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:2074
#, no-wrap
msgid ""
" {msg:hello_name('Lucie')} <1> <2> <3>\n"
" {msg:message(myKey,'Lu')} <4>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2076
msgid "`msg` is the default namespace."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2077
msgid "`hello_name` is the message key."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2078
msgid "`Lucie` is the parameter of the message bundle interface method."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2079
msgid "It is also possible to obtain a localized message for a key resolved at runtime using a reserved key `message`. The validation is skipped in this case though."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:2080
#, no-wrap
msgid "Message Bundle Interface Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:2085
#: upstream/_versions/main/guides/qute-reference.adoc:2229
#, no-wrap
msgid ""
"import io.quarkus.qute.i18n.Message;\n"
"import io.quarkus.qute.i18n.MessageBundle;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:2088
#, no-wrap
msgid ""
"@MessageBundle <1>\n"
"public interface AppMessages {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:2092
#, no-wrap
msgid ""
"    @Message(\"Hello {name}!\") <2>\n"
"    String hello_name(String name); <3>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2094
msgid "Denotes a message bundle interface. The bundle name is defaulted to `msg` and is used as a namespace in templates expressions, e.g. `{msg:hello_name}`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2095
msgid "Each method must be annotated with `@Message`. The value is a qute template. If no value is provided, then a corresponding value from a localized file is taken. If no such file exists an exception is thrown and the build fails."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2096
msgid "The method parameters can be used in the template."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/qute-reference.adoc:2097
#, no-wrap
msgid "Bundle Name and Message Keys"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2105
msgid "Keys are used directly in templates.  The bundle name is used as a namespace in template expressions.  The `@MessageBundle` can be used to define the default strategy used to generate message keys from method names.  However, the `@Message` can override this strategy and even define a custom key.  By default, the annotated element's name is used as-is.  Other possibilities are:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2107
msgid "De-camel-cased and hyphenated; e.g. `helloName()` -> `hello-name`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2108
msgid "De-camel-cased and parts separated by underscores; e.g. `helloName()` -> `hello_name`."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/qute-reference.adoc:2109
#, no-wrap
msgid "Validation"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2112
msgid "All message bundle templates are validated:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2113
msgid "All expressions without a namespace must map to a parameter; e.g. `Hello {foo}` -> the method must have a param of name `foo`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2114
msgid "All expressions are validated against the types of the parameters; e.g. `Hello {foo.bar}` where the parameter `foo` is of type `org.acme.Foo` -> `org.acme.Foo` must have a property of name `bar`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2116
msgid "A warning message is logged for each _unused_ parameter."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2117
msgid "Expressions that reference a message bundle method, such as `{msg:hello(item.name)}`, are validated too."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/qute-reference.adoc:2118
#, no-wrap
msgid "Localization"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2123
msgid "The default locale specified via the `quarkus.default-locale` config property is used for the `@MessageBundle` interface by default.  However, the `io.quarkus.qute.i18n.MessageBundle#locale()` can be used to specify a custom locale.  Additionally, there are two ways to define a localized bundle:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2125
msgid "Create an interface that extends the default interface that is annotated with `@Localized`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2126
msgid "Create an UTF-8 encoded file located in the `src/main/resources/messages` directory of an application archive; e.g. `msg_de.properties`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2128
msgid "While a localized interface enables easy refactoring an external file might be more convenient in many situations."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:2129
#, no-wrap
msgid "Localized Interface Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:2134
#, no-wrap
msgid ""
"import io.quarkus.qute.i18n.Localized;\n"
"import io.quarkus.qute.i18n.Message;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:2137
#, no-wrap
msgid ""
"@Localized(\"de\") <1>\n"
"public interface GermanAppMessages extends AppMessages {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:2142
#, no-wrap
msgid ""
"    @Override\n"
"    @Message(\"Hallo {name}!\") <2>\n"
"    String hello_name(String name);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2144
msgid "The value is the locale tag string (IETF)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2145
msgid "The value is the localized template."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2155
msgid "Message bundle files must be encoded in _UTF-8_.  The file name consists of the relevant bundle name (e.g. `msg`) and underscore followed by the locate tag (IETF).  The file format is very simple: each line represents either a key/value pair with the equals sign used as a separator or a comment (line starts with `#`).  Blank lines are ignored.  Keys are _mapped to method names_ from the corresponding message bundle interface.  Values represent the templates normally defined by `io.quarkus.qute.i18n.Message#value()`.  A value may be spread out across several adjacent normal lines.  In such case, the line terminator must be escaped with a backslash character `\\`.  The behavior is very similar to the behavior of the `java.util.Properties.load(Reader)` method."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:2156
#, no-wrap
msgid "Localized File Example - `msg_de.properties`"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:2161
#, no-wrap
msgid ""
"# This comment is ignored\n"
"hello_name=Hallo {name}! <1> <2>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2163
msgid "Each line in a localized file represents a key/value pair. The key must correspond to a method declared on the message bundle interface. The value is the message template."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2164
msgid "Keys and values are separated by the equals sign."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2166
msgid "We use the `.properties` suffix in our example because most IDEs and text editors support syntax highlighting of `.properties` files. But in fact, the suffix could be anything - it is just ignored."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2168
msgid "An example properties file is generated into the target directory for each message bundle interface automatically. For example, by default if no name is specified for `@MessageBundle` the file `target/qute-i18n-examples/msg.properties` is generated when the application is build via `mvn clean package`. You can use this file as a base for a specific locale. Just rename the file - e.g. `msg_fr.properties`, change the message templates and move it in the `src/main/resources/messages` directory."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:2169
#, no-wrap
msgid "Value Spread Out Across Several Adjacent Lines"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:2175
#, no-wrap
msgid ""
"hello=Hello \\\n"
"   {name} and \\\n"
"   good morning!\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2177
msgid "Note that the line terminator is escaped with a backslash character `\\` and white space at the start of the following line is ignored. I.e. `{msg:hello('Edgar')}` would be rendered as `Hello Edgar and good morning!`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2181
msgid "Once we have the localized bundles defined we need a way to _select_ the correct bundle for a specific template instance, i.e. to specify the locale for all message bundle expressions in the template.  By default, the locale specified via the `quarkus.default-locale` configuration property is used to select the bundle.  Alternatively, you can specify the `locale` attribute of a template instance."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:2182
#, no-wrap
msgid "`locale` Attribute Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:2187
#: upstream/_versions/main/guides/qute-reference.adoc:2208
#, no-wrap
msgid ""
"@Singleton\n"
"public class MyBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:2190
#, no-wrap
msgid ""
"    @Inject\n"
"    Template hello;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:2195
#, no-wrap
msgid ""
"    String render() {\n"
"       return hello.instance().setAttribute(\"locale\", Locale.forLanguageTag(\"cs\")).render(); <1>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2197
msgid "You can set a `Locale` instance or a locale tag string (IETF)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2200
msgid "When using <<resteasy_integration,quarkus-resteasy-qute>> the `locale` attribute is derived from the the `Accept-Language` header if not set by a user."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2202
msgid "The `@Localized` qualifier can be used to inject a localized message bundle interface."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:2203
#, no-wrap
msgid "Injected Localized Message Bundle Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:2211
#, no-wrap
msgid ""
"    @Localized(\"cs\") <1>\n"
"    AppMessages msg;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:2216
#, no-wrap
msgid ""
"    String render() {\n"
"       return msg.hello_name(\"Jachym\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2218
msgid "The annotation value is a locale tag string (IETF)."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/qute-reference.adoc:2219
#, no-wrap
msgid "Message Templates"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2223
msgid "Every method of a message bundle interface must define a message template. The value is normally defined by `io.quarkus.qute.i18n.Message#value()`, but for convenience, there is also an option to define the value in a localized file."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:2224
#, no-wrap
msgid "Example of the Message Bundle Interface without the value"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:2232
#, no-wrap
msgid ""
"@MessageBundle\n"
"public interface AppMessages {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:2235
#, no-wrap
msgid ""
"    @Message <1>\n"
"    String hello_name(String name);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:2239
#, no-wrap
msgid ""
"    @Message(\"Goodbye {name}!\") <2>\n"
"    String goodbye(String name);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2241
msgid "The annotation value is not defined. In such a case, the value from supplementary localized file is taken."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2242
msgid "The annotation value is defined and preferred to the value defined in the localized file."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/qute-reference.adoc:2243
#, no-wrap
msgid "Supplementary localized file"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/qute-reference.adoc:2250
#, no-wrap
msgid ""
"hello_name=Hello \\\n"
"   {name} and \\\n"
"   good morning!\n"
"goodbye=Best regards, {name} <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2252
msgid "The value is ignored as `io.quarkus.qute.i18n.Message#value()` is always prioritized."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2254
msgid "Message templates are validated during the build. If a missing message template is detected, an exception is thrown and build fails."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/qute-reference.adoc:2256
#, no-wrap
msgid "Configuration Reference"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/qute-reference.adoc:2262
#, no-wrap
msgid "Qute Used as a Standalone Library"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2267
msgid "Qute is primarily designed as a Quarkus extension.  However. it is possible to use it as a \"standalone\" library.  In this case, some features are not available and some additional configuration is needed."
msgstr ""

#. type: Labeled list
#: upstream/_versions/main/guides/qute-reference.adoc:2268
#, no-wrap
msgid "Engine"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2270
msgid "First of all, no managed `Engine` instance is available out of the box.  You'll need to configure a new instance via `Engine.builder()`."
msgstr ""

#. type: Labeled list
#: upstream/_versions/main/guides/qute-reference.adoc:2271
#, no-wrap
msgid "Templates"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2273
msgid "By default, no <<template-locator,template locators>> are registered, i.e. `Engine.getTemplate(String)` will not work."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2274
msgid "You can register a custom template locator or parse a template manually and put the reulst in the cache via `Engine.putTemplate(String, Template)`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2277
msgid "No section helpers are registered by default."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2278
msgid "The default set of value resolvers can be registered via the convenient `EngineBuilder.addDefaultSectionHelpers()` method and the `EngineBuilder.addDefaults()` method respectively."
msgstr ""

#. type: Labeled list
#: upstream/_versions/main/guides/qute-reference.adoc:2279
#, no-wrap
msgid "Value resolvers"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2281
msgid "No <<value-resolvers,``ValueResolver``s>> are generated automatically."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2282
msgid "<<template_extension_methods,`@TemplateExtension` methods>> will not work."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2283
msgid "<<template_data,`@TemplateData`>> and <<convenient-annotation-for-enums,`@TemplateEnum`>> annotations are ignored."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2284
msgid "The default set of value resolvers can be registered via the convenient `EngineBuilder.addDefaultValueResolvers()` method and the `EngineBuilder.addDefaults()` method respectively."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2286
msgid "Not all functionality provided by the built-in extension methods is covered by the default value resolvers. However, a custom value resolver can be easily built via the `ValueResolver.builder()`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2287
msgid "It's recommended to register a `ReflectionValueResolver` instance via `Engine.addValueResolver(new ReflectionValueResolver())` so that Qute can access object properties and call public methods."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2289
msgid "Keep in mind that reflection may not work correctly in some restricted environments or may require additional configuration, e.g. registration in case of a GraalVM native image."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2292
msgid "No user-defined tags are registered automatically."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2293
msgid "A tag can be registered manually via `Engine.builder().addSectionHelper(new UserTagSectionHelper.Factory(\"tagName\",\"tagTemplate.html\")).build()`"
msgstr ""

#. type: Labeled list
#: upstream/_versions/main/guides/qute-reference.adoc:2294
#, no-wrap
msgid "Type-safety"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2296
msgid "<<typesafe_expressions>> are not validated."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2297
msgid "<<type-safe-message-bundles,Type-safe message bundles>> are not supported."
msgstr ""

#. type: Labeled list
#: upstream/_versions/main/guides/qute-reference.adoc:2298
#, no-wrap
msgid "Injection"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/qute-reference.adoc:2298
msgid "It is not possible to inject a `Template` instance and vice versa - a template cannot inject a `@Named` CDI bean via the `inject:` and `cdi:` namespace."
msgstr ""
