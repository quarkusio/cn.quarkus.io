# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-11-10 02:24+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/opentracing.adoc:6
#, no-wrap
msgid "Using OpenTracing"
msgstr "使用OpenTracing"

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:16
msgid "This guide explains how your Quarkus application can utilize OpenTracing to provide distributed tracing for interactive web applications."
msgstr "本指南解释了你的Quarkus应用程序如何利用OpenTracing来为交互式网络应用程序提供分布式跟踪。"

#. type: delimited block =
#: upstream/_versions/main/guides/opentracing.adoc:20
msgid "xref:opentelemetry.adoc[OpenTelemetry] is the recommended approach to tracing and telemetry for Quarkus and xref:telemetry-opentracing-to-otel-tutorial.adoc[a guide to help with the migration] is available."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentracing.adoc:22
msgid "When Quarkus will upgrade to Eclipse MicroProfile 6, the SmallRye OpenTracing support will be discontinued."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentracing.adoc:26
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: upstream/_versions/main/guides/opentracing.adoc:31
#, no-wrap
msgid "Architecture"
msgstr "应用结构"

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:34
msgid "In this guide, we create a straightforward REST application to demonstrate distributed tracing."
msgstr "在本指南中，我们创建了一个简单的REST应用程序来演示分布式跟踪服务。"

#. type: Title ==
#: upstream/_versions/main/guides/opentracing.adoc:35
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:39
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can skip right to the completed example."
msgstr "我们建议您按照下面几节的说明，一步一步地创建应用程序。不过，您可以直接跳到已完成的例子。"

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:41
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:43
msgid "The solution is located in the `opentracing-quickstart` link:{quickstarts-tree-url}/opentracing-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentracing.adoc:44
#, no-wrap
msgid "Creating the Maven project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:47
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:54
msgid "This command generates the Maven project and imports the `smallrye-opentracing` extension, which includes the OpenTracing support and the default https://www.jaegertracing.io/[Jaeger] tracer."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:57
msgid "If you already have your Quarkus project configured, you can add the `smallrye-opentracing` extension to your project by running the following command in your project base directory:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:62
msgid "This will add the following to your build file:"
msgstr "这会将以下内容添加到你的构建文件中:"

#. type: Block title
#: upstream/_versions/main/guides/opentracing.adoc:64
#: upstream/_versions/main/guides/opentracing.adoc:210
#: upstream/_versions/main/guides/opentracing.adoc:260
#: upstream/_versions/main/guides/opentracing.adoc:300
#: upstream/_versions/main/guides/opentracing.adoc:328
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/opentracing.adoc:70
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-opentracing</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/opentracing.adoc:73
#: upstream/_versions/main/guides/opentracing.adoc:219
#: upstream/_versions/main/guides/opentracing.adoc:269
#: upstream/_versions/main/guides/opentracing.adoc:309
#: upstream/_versions/main/guides/opentracing.adoc:337
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/opentracing.adoc:76
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-smallrye-opentracing\")\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentracing.adoc:78
#, fuzzy, no-wrap
msgid "Examine the Jakarta REST resource"
msgstr "检查JAX-RS资源"

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:81
msgid "Create the `src/main/java/org/acme/opentracing/TracedResource.java` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentracing.adoc:85
#, no-wrap
msgid "package org.acme.opentracing;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentracing.adoc:91
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
"import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentracing.adoc:94
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class TracedResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentracing.adoc:96
#, no-wrap
msgid "    private static final Logger LOG = Logger.getLogger(TracedResource.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentracing.adoc:104
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        LOG.info(\"hello\"); // <1>\n"
"        return \"hello\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:107
msgid "The log event carries OpenTracing information as well. In order to print OpenTracing information to the console output, the console log handler with the required OpenTracing event's keys needs to be defined in the `application.properties` file."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:112
msgid "Notice that there is no tracing specific code included in the application. By default, requests sent to this endpoint will be traced without any code changes being required. It is also possible to enhance the tracing information.  This can be achieved by https://github.com/smallrye/smallrye-opentracing/[SmallRye OpenTracing] an implementation of https://github.com/eclipse/microprofile-opentracing/[MicroProfile OpenTracing]."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentracing.adoc:113
#, no-wrap
msgid "Create the configuration"
msgstr "创建配置"

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:116
msgid "There are two ways to configure the Jaeger tracer within the application."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:118
msgid "The first approach is by providing the properties within the `src/main/resources/application.properties` file:"
msgstr "第一种方法是通过在 `src/main/resources/application.properties` 文件内提供配置:"

#. type: delimited block -
#: upstream/_versions/main/guides/opentracing.adoc:125
#, no-wrap
msgid ""
"quarkus.jaeger.service-name=myservice // <1>\n"
"quarkus.jaeger.sampler-type=const // <2>\n"
"quarkus.jaeger.sampler-param=1 // <3>\n"
"quarkus.log.console.format=%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n // <4>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:128
msgid "If the `quarkus.jaeger.service-name` property (or `JAEGER_SERVICE_NAME` environment variable) is not provided then a \"no-op\" tracer will be configured, resulting in no tracing data being reported to the backend."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:129
msgid "Set up a sampler that uses a constant sampling strategy."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:130
msgid "Sample all requests. Set sampler-param to somewhere between 0 and 1, e.g. 0.50, if you do not wish to sample all requests."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:131
msgid "Add trace IDs into log message."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:133
msgid "The second approach is to supply the properties as https://www.jaegertracing.io/docs/latest/client-features/[environment variables]. These can be specified using `jvm.args` as shown in the following section."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentracing.adoc:134
#, no-wrap
msgid "Run the application"
msgstr "运行应用程序"

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:137
msgid "The first step is to start the tracing system to collect and display the captured traces:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentracing.adoc:141
#, no-wrap
msgid "docker run -p 5775:5775/udp -p 6831:6831/udp -p 6832:6832/udp -p 5778:5778 -p 16686:16686 -p 14268:14268 jaegertracing/all-in-one:latest\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:144
msgid "Now we are ready to run our application. If using `application.properties` to configure the tracer:"
msgstr "现在我们准备运行我们的应用程序。如果使用 `application.properties` 来配置tracer："

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:148
msgid "or if configuring the tracer via environment variables:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:154
msgid "Once both the application and tracing system are started, you can make a request to the provided endpoint:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentracing.adoc:159
#, no-wrap
msgid ""
"$ curl http://localhost:8080/hello\n"
"hello\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:161
msgid "When the first request has been submitted, the Jaeger tracer within the app will be initialized:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentracing.adoc:166
#, no-wrap
msgid ""
"2019-10-16 09:35:23,464 INFO  [io.jae.Configuration] (executor-thread-1) Initialized tracer=JaegerTracer(version=Java-0.34.0, serviceName=myservice, reporter=RemoteReporter(sender=UdpSender(), closeEnqueueTimeout=1000), sampler=ConstSampler(decision=true, tags={sampler.type=const, sampler.param=true}), tags={hostname=localhost.localdomain, jaeger.version=Java-0.34.0, ip=127.0.0.1}, zipkinSharedRpcSpan=false, expandExceptionLogs=false, useTraceId128Bit=false)\n"
"13:20:11 INFO  traceId=1336b2b0a76a96a3, parentId=0, spanId=1336b2b0a76a96a3, sampled=true [or.ac.qu.TracedResource] (executor-thread-63) hello\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:169
msgid "Then visit the http://localhost:16686[Jaeger UI] to see the tracing information."
msgstr "然后访问 link:http://localhost:16686[Jaeger界面] 来查看追踪信息。"

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:171
msgid "Hit `CTRL+C` to stop the application."
msgstr "使用 `CTRL+C` 来停止应用程序。"

#. type: Title ==
#: upstream/_versions/main/guides/opentracing.adoc:172
#, no-wrap
msgid "Tracing additional methods"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:176
msgid "REST endpoints are automatically traced.  If you need to trace additional methods, you can add the `org.eclipse.microprofile.opentracing.Traced` annotation to CDI bean classes or their non-private methods."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:178
msgid "This can be useful to trace incoming requests from non-REST calls (like request coming from a message) or to create spans inside a trace."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:180
msgid "Here is an example of a `FrancophoneService` which methods are traced."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentracing.adoc:184
#, no-wrap
msgid "import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentracing.adoc:186
#, no-wrap
msgid "import org.eclipse.microprofile.opentracing.Traced;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentracing.adoc:190
#, no-wrap
msgid ""
"@Traced\n"
"@ApplicationScoped\n"
"public class FrancophoneService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentracing.adoc:195
#, no-wrap
msgid ""
"    public String bonjour() {\n"
"        return \"bonjour\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:198
msgid "The best way to add OpenTracing capability to reactive messaging based applications is by adding the `Traced` annotation to all incoming methods."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentracing.adoc:199
#, no-wrap
msgid "Additional instrumentation"
msgstr "其他的植入(instrumentation)"

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:202
msgid "The https://github.com/opentracing-contrib[OpenTracing API Contributions project] offers additional instrumentation that can be used to add tracing to a large variety of technologies/components."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:204
msgid "The instrumentation documented in this section has been tested with Quarkus and works in both standard and native mode."
msgstr "本节中用到的植入方式已经过Quarkus测试，并且在标准和本地模式下都能工作。"

#. type: Title ===
#: upstream/_versions/main/guides/opentracing.adoc:205
#, no-wrap
msgid "JDBC"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:208
msgid "The https://github.com/opentracing-contrib/java-jdbc[JDBC instrumentation] will add a span for each JDBC queries done by your application, to enable it, add the following dependency to your build file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentracing.adoc:216
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.opentracing.contrib</groupId>\n"
"    <artifactId>opentracing-jdbc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentracing.adoc:222
#, no-wrap
msgid "implementation(\"io.opentracing.contrib:opentracing-jdbc\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:225
msgid "Then, you need to enable it in the configuration:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentracing.adoc:229
#, no-wrap
msgid "quarkus.datasource.jdbc.tracing=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:233
msgid "`quarkus.datasource.jdbc.tracing` is a build time configuration property: it makes sure all the tracing infrastructure is included in your application."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentracing.adoc:239
msgid "This is especially important when building a native executable as we need to make sure the OpenTracing JDBC driver has been registered for reflection, together with the underlying JDBC driver."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:244
msgid "The Agroal extension will take care of adjusting the JDBC URL with the `tracing` prefix when tracing is enabled, so you do not have to adjust the JDBC URL yourself."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:247
msgid "By default, when `quarkus.datasource.jdbc.tracing` is true, tracing is enabled at runtime but you can explicitly disable it by setting the following property:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentracing.adoc:251
#, no-wrap
msgid "quarkus.datasource.jdbc.tracing.enabled=false\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:254
msgid "This way, you can have your Quarkus application ready for tracing and toggle JDBC tracing at runtime."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentracing.adoc:255
#, no-wrap
msgid "Kafka"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:258
msgid "The https://github.com/opentracing-contrib/java-kafka-client[Kafka instrumentation] will add a span for each message sent to or received from a Kafka topic. To enable it, add the following dependency to your build file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentracing.adoc:266
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.opentracing.contrib</groupId>\n"
"    <artifactId>opentracing-kafka-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentracing.adoc:272
#, no-wrap
msgid "implementation(\"io.opentracing.contrib:opentracing-kafka-client\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:275
msgid "It contains OpenTracing interceptors that must be registered on Kafka producers and consumers."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:277
msgid "If you followed the xref:kafka.adoc[Kafka guide], the interceptors can be added on the `generated-price` and the `prices` channels as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentracing.adoc:285
#, no-wrap
msgid ""
"# Configure the Kafka sink (we write to it)\n"
"mp.messaging.outgoing.generated-price.connector=smallrye-kafka\n"
"mp.messaging.outgoing.generated-price.topic=prices\n"
"mp.messaging.outgoing.generated-price.value.serializer=org.apache.kafka.common.serialization.IntegerSerializer\n"
"mp.messaging.outgoing.generated-price.interceptor.classes=io.opentracing.contrib.kafka.TracingProducerInterceptor\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentracing.adoc:290
#, no-wrap
msgid ""
"# Configure the Kafka source (we read from it)\n"
"mp.messaging.incoming.prices.connector=smallrye-kafka\n"
"mp.messaging.incoming.prices.value.deserializer=org.apache.kafka.common.serialization.IntegerDeserializer\n"
"mp.messaging.incoming.prices.interceptor.classes=io.opentracing.contrib.kafka.TracingConsumerInterceptor\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:293
msgid "`interceptor.classes` accept a list of classes separated by a comma."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentracing.adoc:295
#, no-wrap
msgid "MongoDB client"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:298
msgid "The https://github.com/opentracing-contrib/java-mongo-driver[Mongo Driver instrumentation] will add a span for each command executed by your application. To enable it, add the following dependency to your build file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentracing.adoc:306
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.opentracing.contrib</groupId>\n"
"    <artifactId>opentracing-mongo-common</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentracing.adoc:312
#, no-wrap
msgid "implementation(\"io.opentracing.contrib:opentracing-mongo-common\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:316
msgid "It contains the OpenTracing CommandListener that will be registered on the configuration of the mongo client.  Following the xref:mongodb.adoc[MongoDB guide], the command listener will be registered defining the config property as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentracing.adoc:321
#, no-wrap
msgid ""
"# Enable tracing commands in mongodb client\n"
"quarkus.mongodb.tracing.enabled=true\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentracing.adoc:323
#, no-wrap
msgid "Zipkin compatibility mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:326
msgid "To enable it, add the following dependency to your build file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentracing.adoc:334
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.jaegertracing</groupId>\n"
"    <artifactId>jaeger-zipkin</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentracing.adoc:340
#, no-wrap
msgid "implementation(\"io.jaegertracing:jaeger-zipkin\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentracing.adoc:344
msgid "It contains the dependencies to convert the request to zipkin format.  The zipkin compatibility mode will be activated after defining the config property as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentracing.adoc:349
#, no-wrap
msgid ""
"# Enable zipkin compatibility mode\n"
"quarkus.jaeger.zipkin.compatibility-mode=true\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentracing.adoc:352
#, no-wrap
msgid "Jaeger Configuration Reference"
msgstr ""
