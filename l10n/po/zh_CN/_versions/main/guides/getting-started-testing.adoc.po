# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/getting-started-testing.adoc:6
#, no-wrap
msgid "Testing Your Application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:23
msgid "Learn how to test your Quarkus Application.  This guide covers:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:25
msgid "Testing in JVM mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:26
msgid "Testing in native mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:27
msgid "Injection of resources into tests"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:28
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:32
msgid "The completed greeter application from the xref:getting-started.adoc[Getting Started Guide]"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:33
#, no-wrap
msgid "Architecture"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:37
msgid "In this guide, we expand on the initial test that was created as part of the Getting Started Guide.  We cover injection into tests and also how to test native executables."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:39
msgid "Quarkus supports Continuous testing, but this is covered by the xref:continuous-testing.adoc[Continuous Testing Guide]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:40
#, no-wrap
msgid "Solution"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:44
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:46
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:48
msgid "The solution is located in the `getting-started-testing` {quickstarts-tree-url}/getting-started-testing[directory]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:50
msgid "This guide assumes you already have the completed application from the `getting-started` directory."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:51
#, no-wrap
msgid "Recap of HTTP based Testing in JVM mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:55
msgid "If you have started from the Getting Started example you should already have a completed test, including the correct tooling setup."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:57
msgid "In your build file you should see 2 test dependencies:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/getting-started-testing.adoc:58
#, no-wrap
msgid "Maven"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:72
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.rest-assured</groupId>\n"
"    <artifactId>rest-assured</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/getting-started-testing.adoc:75
#, no-wrap
msgid "Gradle"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:83
#, no-wrap
msgid ""
"dependencies {\n"
"    testImplementation(\"io.quarkus:quarkus-junit5\")\n"
"    testImplementation(\"io.rest-assured:rest-assured\")\n"
"}\n"
msgstr ""

#. type: delimited block *
#: upstream/_versions/main/guides/getting-started-testing.adoc:89
msgid "`quarkus-junit5` is required for testing, as it provides the `@QuarkusTest` annotation that controls the testing framework.  `rest-assured` is not required but is a convenient way to test HTTP endpoints, we also provide integration that automatically sets the correct URL so no configuration is required."
msgstr ""

#. type: delimited block *
#: upstream/_versions/main/guides/getting-started-testing.adoc:92
msgid "Because we are using JUnit 5, the version of the https://maven.apache.org/surefire/maven-surefire-plugin/[Surefire Maven Plugin] must be set, as the default version does not support Junit 5:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:105
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-surefire-plugin</artifactId>\n"
"    <version>${surefire-plugin.version}</version>\n"
"    <configuration>\n"
"       <systemPropertyVariables>\n"
"          <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"          <maven.home>${maven.home}</maven.home>\n"
"       </systemPropertyVariables>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:109
msgid "We also set the `java.util.logging.manager` system property to make sure tests will use the correct logmanager and `maven.home` to ensure that custom configuration from `${maven.home}/conf/settings.xml` is applied (if any)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:111
msgid "The project should also contain a simple test:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:115
#: upstream/_versions/main/guides/getting-started-testing.adoc:210
#: upstream/_versions/main/guides/getting-started-testing.adoc:274
#: upstream/_versions/main/guides/getting-started-testing.adoc:315
#: upstream/_versions/main/guides/getting-started-testing.adoc:354
#: upstream/_versions/main/guides/getting-started-testing.adoc:438
#: upstream/_versions/main/guides/getting-started-testing.adoc:501
#, no-wrap
msgid "package org.acme.getting.started.testing;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:118
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:120
#: upstream/_versions/main/guides/getting-started-testing.adoc:321
#, no-wrap
msgid "import java.util.UUID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:123
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:126
#: upstream/_versions/main/guides/getting-started-testing.adoc:1037
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class GreetingResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:135
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHelloEndpoint() {\n"
"        given()\n"
"          .when().get(\"/hello\")\n"
"          .then()\n"
"             .statusCode(200)\n"
"             .body(is(\"hello\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:146
#, no-wrap
msgid ""
"    @Test\n"
"    public void testGreetingEndpoint() {\n"
"        String uuid = UUID.randomUUID().toString();\n"
"        given()\n"
"          .pathParam(\"name\", uuid)\n"
"          .when().get(\"/hello/greeting/{name}\")\n"
"          .then()\n"
"            .statusCode(200)\n"
"            .body(is(\"hello \" + uuid));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:148
#: upstream/_versions/main/guides/getting-started-testing.adoc:414
#: upstream/_versions/main/guides/getting-started-testing.adoc:734
#: upstream/_versions/main/guides/getting-started-testing.adoc:1054
#: upstream/_versions/main/guides/getting-started-testing.adoc:1271
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:152
msgid "This test uses HTTP to directly test our REST endpoint. When the test is run the application will be started before the test is run."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:153
#, no-wrap
msgid "Controlling the test port"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:157
msgid "While Quarkus will listen on port `8080` by default, when running tests it defaults to `8081`. This allows you to run tests while having the application running in parallel."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/getting-started-testing.adoc:159
#, no-wrap
msgid "Changing the test port"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/getting-started-testing.adoc:162
msgid "You can configure the ports used by tests by configuring `quarkus.http.test-port` for HTTP and `quarkus.http.test-ssl-port` for HTTPS in your `application.properties`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:166
#, no-wrap
msgid ""
"quarkus.http.test-port=8083\n"
"quarkus.http.test-ssl-port=8446\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:168
msgid "`0` will result in the use of a random port (assigned by the operating system)."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/getting-started-testing.adoc:172
msgid "Quarkus also provides RestAssured integration that updates the default port used by RestAssured before the tests are run, so no additional configuration should be required."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:173
#, no-wrap
msgid "Controlling HTTP interaction timeout"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/getting-started-testing.adoc:177
msgid "When using REST Assured in your test, the connection and response timeouts are set to 30 seconds.  You can override this setting with the `quarkus.http.test-timeout` property:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:181
#, no-wrap
msgid "quarkus.http.test-timeout=10s\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:183
#, no-wrap
msgid "Injecting a URI"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:187
msgid "It is also possible to directly inject the URL into the test which can make is easy to use a different client. This is done via the `@TestHTTPResource` annotation."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:190
msgid "Let's write a simple test that shows this off to load some static resources. First create a simple HTML file in `src/main/resources/META-INF/resources/index.html` :"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:202
#, no-wrap
msgid ""
"<html>\n"
"    <head>\n"
"        <title>Testing Guide</title>\n"
"    </head>\n"
"    <body>\n"
"        Information about testing\n"
"    </body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:205
msgid "We will create a simple test to ensure that this is being served correctly:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:215
#: upstream/_versions/main/guides/getting-started-testing.adoc:279
#, no-wrap
msgid ""
"import java.io.IOException;\n"
"import java.io.InputStream;\n"
"import java.net.URL;\n"
"import java.nio.charset.StandardCharsets;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:218
#: upstream/_versions/main/guides/getting-started-testing.adoc:282
#: upstream/_versions/main/guides/getting-started-testing.adoc:359
#, no-wrap
msgid ""
"import org.junit.jupiter.api.Assertions;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:221
#, no-wrap
msgid ""
"import io.quarkus.test.common.http.TestHTTPResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:224
#: upstream/_versions/main/guides/getting-started-testing.adoc:289
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class StaticContentTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:227
#, no-wrap
msgid ""
"    @TestHTTPResource(\"index.html\") // <1>\n"
"    URL url;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:236
#, no-wrap
msgid ""
"    @Test\n"
"    public void testIndexHtml() throws IOException {\n"
"        try (InputStream in = url.openStream()) {\n"
"            String contents = new String(in.readAllBytes(), StandardCharsets.UTF_8);\n"
"            Assertions.assertTrue(contents.contains(\"<title>Testing Guide</title>\"));\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:238
msgid "This annotation allows you to directly inject the URL of the Quarkus instance, the value of the annotation will be the path component of the URL"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:240
msgid "For now `@TestHTTPResource` allows you to inject `URI`, `URL` and `String` representations of the URL."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:241
#, no-wrap
msgid "Testing a specific endpoint"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:246
msgid "Both RESTassured and `@TestHTTPResource` allow you to specify the endpoint class you are testing rather than hard coding a path. This currently supports both JAX-RS endpoints, Servlets and Reactive Routes. This makes it a lot easier to see exactly which endpoints a given test is testing."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:248
msgid "For the purposes of these examples I am going to assume we have an endpoint that looks like the following:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:253
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class GreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:260
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"hello\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:264
msgid "This currently does not support the `@ApplicationPath()` annotation to set the JAX-RS context path. Use the `quarkus.resteasy.path` config value instead if you want a custom context path."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:265
#, no-wrap
msgid "TestHTTPResource"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:270
msgid "You can the use the `io.quarkus.test.common.http.TestHTTPEndpoint` annotation to specify the endpoint path, and the path will be extracted from the provided endpoint. If you also specify a value for the `TestHTTPResource` endpoint it will be appended to the end of the endpoint path."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:286
#, no-wrap
msgid ""
"import io.quarkus.test.common.http.TestHTTPEndpoint;\n"
"import io.quarkus.test.common.http.TestHTTPResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:293
#, no-wrap
msgid ""
"    @TestHTTPEndpoint(GreetingResource.class)  // <1>\n"
"    @TestHTTPResource\n"
"    URL url;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:302
#, no-wrap
msgid ""
"    @Test\n"
"    public void testIndexHtml() throws IOException {\n"
"        try (InputStream in = url.openStream()) {\n"
"            String contents = new String(in.readAllBytes(), StandardCharsets.UTF_8);\n"
"            Assertions.assertEquals(\"hello\", contents);\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:305
msgid "Because `GreetingResource` is annotated with `@Path(\"/hello\")` the injected URL will end with `/hello`."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:306
#, no-wrap
msgid "RESTassured"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:311
msgid "To control the RESTassured base path (i.e. the default path that serves as the root for every request) you can use the `io.quarkus.test.common.http.TestHTTPEndpoint` annotation. This can be applied at the class or method level. To test out greeting resource we would do:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:319
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.common.http.TestHTTPEndpoint;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:324
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.when;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:328
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@TestHTTPEndpoint(GreetingResource.class) //<1>\n"
"public class GreetingResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:337
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHelloEndpoint() {\n"
"        when().get()    //<2>\n"
"          .then()\n"
"             .statusCode(200)\n"
"             .body(is(\"hello\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:339
msgid "This tells RESTAssured to prefix all requests with `/hello`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:340
msgid "Note we don't need to specify a path here, as `/hello` is the default for this test"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:341
#, no-wrap
msgid "Injection into tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:345
msgid "So far we have only covered integration style tests that test the app via HTTP endpoints, but what if we want to do unit testing and test our beans directly?"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:349
msgid "Quarkus supports this by allowing you to inject CDI beans into your tests via the `@Inject` annotation (in fact, tests in Quarkus are full CDI beans, so you can use all CDI functionality). Let's create a simple test that tests the greeting service directly without using HTTP:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:356
#, no-wrap
msgid "import javax.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:361
#, no-wrap
msgid "import io.quarkus.test.junit.QuarkusTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:364
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class GreetingServiceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:367
#, no-wrap
msgid ""
"    @Inject // <1>\n"
"    GreetingService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:373
#, no-wrap
msgid ""
"    @Test\n"
"    public void testGreetingService() {\n"
"        Assertions.assertEquals(\"hello Quarkus\", service.greeting(\"Quarkus\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:375
msgid "The `GreetingService` bean will be injected into the test"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:376
#, no-wrap
msgid "Applying Interceptors to Tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:381
msgid "As mentioned above Quarkus tests are actually full CDI beans, and as such you can apply CDI interceptors as you would normally. As an example, if you want a test method to run within the context of a transaction you can simply apply the `@Transactional` annotation to the method and the transaction interceptor will handle it."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:384
msgid "In addition to this you can also create your own test stereotypes. For example we could create a `@TransactionalQuarkusTest` as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:394
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@Stereotype\n"
"@Transactional\n"
"@Retention(RetentionPolicy.RUNTIME)\n"
"@Target(ElementType.TYPE)\n"
"public @interface TransactionalQuarkusTest {\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:398
msgid "If we then apply this annotation to a test class it will act as if we had applied both the `@QuarkusTest` and `@Transactional` annotations, e.g.:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:404
#, no-wrap
msgid ""
"@TransactionalQuarkusTest\n"
"public class TestStereotypeTestCase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:407
#, no-wrap
msgid ""
"    @Inject\n"
"    UserTransaction userTransaction;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:412
#, no-wrap
msgid ""
"    @Test\n"
"    public void testUserTransaction() throws Exception {\n"
"        Assertions.assertEquals(Status.STATUS_ACTIVE, userTransaction.getStatus());\n"
"    }\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:416
#, no-wrap
msgid "Tests and Transactions"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:422
msgid "You can use the standard Quarkus `@Transactional` annotation on tests, but this means that the changes your test makes to the database will be persistent. If you want any changes made to be rolled back at the end of the test you can use the `io.quarkus.test.TestTransaction` annotation. This will run the test method in a transaction, but roll it back once the test method is complete to revert any database changes."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:423
#, no-wrap
msgid "Enrichment via QuarkusTest*Callback"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:426
msgid "Alternatively or additionally to an interceptor, you can enrich *all* your `@QuarkusTest` classes by implementing the following callback interfaces:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:428
msgid "`io.quarkus.test.junit.callback.QuarkusTestBeforeClassCallback`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:429
msgid "`io.quarkus.test.junit.callback.QuarkusTestAfterConstructCallback`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:430
msgid "`io.quarkus.test.junit.callback.QuarkusTestBeforeEachCallback`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:431
msgid "`io.quarkus.test.junit.callback.QuarkusTestAfterEachCallback`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:433
msgid "Such a callback implementation has to be registered as a \"service provider\" as defined by `java.util.ServiceLoader`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:435
msgid "E.g. the following sample callback:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:441
#, no-wrap
msgid ""
"import io.quarkus.test.junit.callback.QuarkusTestBeforeEachCallback;\n"
"import io.quarkus.test.junit.callback.QuarkusTestMethodContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:443
#, no-wrap
msgid "public class MyQuarkusTestBeforeEachCallback implements QuarkusTestBeforeEachCallback {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:449
#, no-wrap
msgid ""
"    @Override\n"
"    public void beforeEach(QuarkusTestMethodContext context) {\n"
"        System.out.println(\"Executing \" + context.getTestMethod());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:451
msgid "has to be registered via `src/main/resources/META-INF/services/io.quarkus.test.junit.callback.QuarkusTestBeforeEachCallback` as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:454
#, no-wrap
msgid "org.acme.getting.started.testing.MyQuarkusTestBeforeEachCallback\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:457
msgid "It is possible to read annotations from the test class or method to control what the callback shall be doing."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:460
#, no-wrap
msgid ""
"While it is possible to use JUnit Jupiter callback interfaces like `BeforeEachCallback`, you might run into classloading issues because Quarkus has\n"
"         to run tests in a custom classloader which JUnit is not aware of.\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:462
#, no-wrap
msgid "Testing Different Profiles"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:467
msgid "So far in all our examples we only start Quarkus once for all tests. Before the first test is run Quarkus will boot, then all tests will run, then Quarkus will shutdown at the end. This makes for a very fast testing experience however it is a bit limited as you can't test different configurations."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:471
msgid "To get around this Quarkus supports the idea of a test profile. If a test has a different profile to the previously run test then Quarkus will be shut down and started with the new profile before running the tests. This is obviously a bit slower, as it adds a shutdown/startup cycle to the test time, but gives a great deal of flexibility."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:479
msgid "To reduce the amount of times Quarkus needs to restart, `io.quarkus.test.junit.util.QuarkusTestProfileAwareClassOrderer` is registered as a global `ClassOrderer` as described in the link:https://junit.org/junit5/docs/current/user-guide/#writing-tests-test-execution-order-classes[JUnit 5 User Guide].  The behavior of this orderer is configurable via `junit-platform.properties` (see the source code or javadoc for more details).  It can also be disabled entirely by setting another orderer that is provided by JUnit 5 or even your own custom one. + Please note that as of JUnit 5.8.2 link:https://github.com/junit-team/junit5/issues/2794[only a single `junit-platform.properties` is picked up and a warning is logged if more than one is found].  If you encounter such warnings, you can can get rid of them by removing the Quarkus-supplied `junit-platform.properties` from the classpath via an exclusion:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:492
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5</artifactId>\n"
"    <scope>test</scope>\n"
"    <exclusions>\n"
"        <exclusion>\n"
"            <groupId>io.quarkus</groupId>\n"
"            <artifactId>quarkus-junit5-properties</artifactId>\n"
"        </exclusion>\n"
"    </exclusions>\n"
"</dependency>\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:494
#, no-wrap
msgid "Writing a Profile"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:497
msgid "To implement a test profile we need to implement `io.quarkus.test.junit.QuarkusTestProfile`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:506
#, no-wrap
msgid ""
"import java.util.Collections;\n"
"import java.util.List;\n"
"import java.util.Map;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:509
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTestProfile;\n"
"import io.quarkus.test.junit.QuarkusTestProfile.TestResourceEntry;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:511
#, no-wrap
msgid "public class MockGreetingProfile implements QuarkusTestProfile { <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:524
#, no-wrap
msgid ""
"    /**\n"
"     * Returns additional config to be applied to the test. This\n"
"     * will override any existing config (including in application.properties),\n"
"     * however existing config will be merged with this (i.e. application.properties\n"
"     * config will still take effect, unless a specific config key has been overridden).\n"
"     *\n"
"     * Here we are changing the JAX-RS root path.\n"
"     */\n"
"    @Override\n"
"    public Map<String, String> getConfigOverrides() {\n"
"        return Collections.singletonMap(\"quarkus.resteasy.path\",\"/api\");\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:535
#, no-wrap
msgid ""
"    /**\n"
"     * Returns enabled alternatives.\n"
"     *\n"
"     * This has the same effect as setting the 'quarkus.arc.selected-alternatives' config key,\n"
"     * however it may be more convenient.\n"
"     */\n"
"    @Override\n"
"    public Set<Class<?>> getEnabledAlternatives() {\n"
"        return Collections.singleton(MockGreetingService.class);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:546
#, no-wrap
msgid ""
"    /**\n"
"     * Allows the default config profile to be overridden. This basically just sets the quarkus.test.profile system\n"
"     * property before the test is run.\n"
"     *\n"
"     * Here we are setting the profile to test-mocked\n"
"     */\n"
"    @Override\n"
"    public String getConfigProfile() {\n"
"        return \"test-mocked\";\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:558
#, no-wrap
msgid ""
"    /**\n"
"     * Additional {@link QuarkusTestResourceLifecycleManager} classes (along with their init params) to be used from this\n"
"     * specific test profile.\n"
"     *\n"
"     * If this method is not overridden, then only the {@link QuarkusTestResourceLifecycleManager} classes enabled via the {@link io.quarkus.test.common.QuarkusTestResource} class\n"
"     * annotation will be used for the tests using this profile (which is the same behavior as tests that don't use a profile at all).\n"
"     */\n"
"    @Override\n"
"    public List<TestResourceEntry> testResources() {\n"
"        return Collections.singletonList(new TestResourceEntry(CustomWireMockServerManager.class));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:568
#, no-wrap
msgid ""
"    /**\n"
"     * If this returns true then only the test resources returned from {@link #testResources()} will be started,\n"
"     * global annotated test resources will be ignored.\n"
"     */\n"
"    @Override\n"
"    public boolean disableGlobalTestResources() {\n"
"        return false;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:579
#, no-wrap
msgid ""
"    /**\n"
"     * The tags this profile is associated with.\n"
"     * When the {@code quarkus.test.profile.tags} System property is set (its value is a comma separated list of strings)\n"
"     * then Quarkus will only execute tests that are annotated with a {@code @TestProfile} that has at least one of the\n"
"     * supplied (via the aforementioned system property) tags.\n"
"     */\n"
"    @Override\n"
"    public Set<String> tags() {\n"
"        return Collections.emptySet();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:587
#, no-wrap
msgid ""
"    /**\n"
"     * The command line parameters that are passed to the main method on startup.\n"
"     */\n"
"    @Override\n"
"    public String[] commandLineParameters() {\n"
"        return new String[0];\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:595
#, no-wrap
msgid ""
"    /**\n"
"     * If the main method should be run.\n"
"     */\n"
"    @Override\n"
"    public boolean runMainMethod() {\n"
"        return false;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:605
#, no-wrap
msgid ""
"    /**\n"
"     * If this method returns true then all {@code StartupEvent} and {@code ShutdownEvent} observers declared on application\n"
"     * beans should be disabled.\n"
"     */\n"
"    @Override\n"
"    public boolean disableApplicationLifecycleObservers() {\n"
"        return false;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:607
msgid "All these methods have default implementations so just override the ones you need to override."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:610
msgid "Now we have defined our profile we need to include it on our test class.  We do this by annotating the test class with `@TestProfile(MockGreetingProfile.class)`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:613
msgid "All the test profile configuration is stored in a single class, which makes it easy to tell if the previous test ran with the same configuration."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:614
#, no-wrap
msgid "Running specific tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:618
msgid "Quarkus provides the ability to limit test execution to tests with specific `@TestProfile` annotations.  This works by leveraging the `tags` method of `QuarkusTestProfile` in conjunction with the `quarkus.test.profile.tags` system property."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:622
msgid "Essentially, any `QuarkusTestProfile` with at least one matching tag matching the value of `quarkus.test.profile.tags` will be considered active and all the tests annotated with `@TestProfile` of active profiles, will be run while the rest will be skipped.  This is best shown in the following example."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:624
msgid "First let's define a few `QuarkusTestProfile` implementations like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:627
#, no-wrap
msgid "public class Profiles {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:629
#, no-wrap
msgid "    public static class NoTags implements QuarkusTestProfile {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:631
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:638
#, no-wrap
msgid ""
"    public static class SingleTag implements QuarkusTestProfile {\n"
"        @Override\n"
"        public Set<String> tags() {\n"
"            return Collections.singleton(\"test1\");\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:646
#, no-wrap
msgid ""
"    public static class MultipleTags implements QuarkusTestProfile {\n"
"        @Override\n"
"        public Set<String> tags() {\n"
"            return new HashSet<>(Arrays.asList(\"test1\", \"test2\"));\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:649
msgid "Now let's assume that we have the following tests:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:654
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class NoQuarkusProfileTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:660
#: upstream/_versions/main/guides/getting-started-testing.adoc:673
#: upstream/_versions/main/guides/getting-started-testing.adoc:686
#: upstream/_versions/main/guides/getting-started-testing.adoc:699
#, no-wrap
msgid ""
"    @Test\n"
"    public void test() {\n"
"        // test something\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:667
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@TestProfile(Profiles.NoTags.class)\n"
"public class NoTagsTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:680
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@TestProfile(Profiles.SingleTag.class)\n"
"public class SingleTagTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:693
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@TestProfile(Profiles.MultipleTags.class)\n"
"public class MultipleTagsTest {\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:702
msgid "Let's consider the following scenarios:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:704
msgid "`quarkus.test.profile.tags` is not set: All tests will be executed."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:706
msgid "`quarkus.test.profile.tags=foo`: In this case none of tests will be executed because none of the tags defined on the `QuarkusTestProfile` implementations match the value of `quarkus.test.profile.tags`.  Note that `NoQuarkusProfileTest` is not executed either because it is not annotated with `@TestProfile`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:708
msgid "`quarkus.test.profile.tags=test1`: In this case `SingleTagTest` and `MultipleTagsTest` will be run because the tags on their respective `QuarkusTestProfile` implementations match the value of `quarkus.test.profile.tags`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:709
msgid "`quarkus.test.profile.tags=test1,test3`: This case results in the same tests being executed as the previous case."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:711
msgid "`quarkus.test.profile.tags=test2,test3`: In this case only `MultipleTagsTest` will be run because `MultipleTagsTest` is the only `QuarkusTestProfile` implementation whose `tags` method matches the value of `quarkus.test.profile.tags`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:712
#, no-wrap
msgid "Mock Support"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:716
msgid "Quarkus supports the use of mock objects using two different approaches. You can either use CDI alternatives to mock out a bean for all test classes, or use `QuarkusMock` to mock out beans on a per test basis."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:717
#, no-wrap
msgid "CDI `@Alternative` mechanism."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:723
msgid "To use this simply override the bean you wish to mock with a class in the `src/test/java` directory, and put the `@Alternative` and `@Priority(1)` annotations on the bean.  Alternatively, a convenient `io.quarkus.test.Mock` stereotype annotation could be used.  This built-in stereotype declares `@Alternative`, `@Priority(1)` and `@Dependent`.  For example if I have the following service:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:728
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class ExternalService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:732
#, no-wrap
msgid ""
"    public String service() {\n"
"        return \"external\";\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:737
msgid "I could mock it with the following class in `src/test/java`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:743
#, no-wrap
msgid ""
"@Mock\n"
"@ApplicationScoped // <1>\n"
"public class MockExternalService extends ExternalService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:749
#, no-wrap
msgid ""
"    @Override\n"
"    public String service() {\n"
"        return \"mock\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:751
msgid "Overrides the `@Dependent` scope declared on the `@Mock` stereotype."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:754
msgid "It is important that the alternative be present in the `src/test/java` directory rather than `src/main/java`, as otherwise it will take effect all the time, not just when testing."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:757
msgid "Note that at present this approach does not work with native image testing, as this would required the test alternatives to be baked into the native image."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:759
#, no-wrap
msgid "Mocking using QuarkusMock"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:764
msgid "The `io.quarkus.test.junit.QuarkusMock` class can be used to temporarily mock out any normal scoped bean. If you use this method in a `@BeforeAll` method the mock will take effect for all tests on the current class, while if you use this in a test method the mock will only take effect for the duration of the current test."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:767
msgid "This method can be used for any normal scoped CDI bean (e.g. `@ApplicationScoped`, `@RequestScoped` etc, basically every scope except `@Singleton` and `@Dependent`)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:769
msgid "An example usage could look like:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:774
#: upstream/_versions/main/guides/getting-started-testing.adoc:846
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class MockTestCase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:777
#, no-wrap
msgid ""
"    @Inject\n"
"    MockableBean1 mockableBean1;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:780
#, no-wrap
msgid ""
"    @Inject\n"
"    MockableBean2 mockableBean2;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:787
#, no-wrap
msgid ""
"    @BeforeAll\n"
"    public static void setup() {\n"
"        MockableBean1 mock = Mockito.mock(MockableBean1.class);\n"
"        Mockito.when(mock.greet(\"Stuart\")).thenReturn(\"A mock for Stuart\");\n"
"        QuarkusMock.installMockForType(mock, MockableBean1.class);  // <1>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:793
#, no-wrap
msgid ""
"    @Test\n"
"    public void testBeforeAll() {\n"
"        Assertions.assertEquals(\"A mock for Stuart\", mockableBean1.greet(\"Stuart\"));\n"
"        Assertions.assertEquals(\"Hello Stuart\", mockableBean2.greet(\"Stuart\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:800
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPerTestMock() {\n"
"        QuarkusMock.installMockForInstance(new BonjourGreeter(), mockableBean2); // <2>\n"
"        Assertions.assertEquals(\"A mock for Stuart\", mockableBean1.greet(\"Stuart\"));\n"
"        Assertions.assertEquals(\"Bonjour Stuart\", mockableBean2.greet(\"Stuart\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:803
#: upstream/_versions/main/guides/getting-started-testing.adoc:873
#, no-wrap
msgid ""
"    @ApplicationScoped\n"
"    public static class MockableBean1 {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:808
#: upstream/_versions/main/guides/getting-started-testing.adoc:816
#: upstream/_versions/main/guides/getting-started-testing.adoc:878
#, no-wrap
msgid ""
"        public String greet(String name) {\n"
"            return \"Hello \" + name;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:811
#: upstream/_versions/main/guides/getting-started-testing.adoc:881
#, no-wrap
msgid ""
"    @ApplicationScoped\n"
"    public static class MockableBean2 {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:824
#, no-wrap
msgid ""
"    public static class BonjourGreeter extends MockableBean2 {\n"
"        @Override\n"
"        public String greet(String name) {\n"
"            return \"Bonjour \" + name;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:826
msgid "As the injected instance is not available here we use `installMockForType`, this mock is used for both test methods"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:827
msgid "We use `installMockForInstance` to replace the injected bean, this takes effect for the duration of the test method."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:830
msgid "Note that there is no dependency on Mockito, you can use any mocking library you like, or even manually override the objects to provide the behaviour you require."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:834
msgid "Using `@Inject` will get you a CDI proxy to the mock instance you install, which is not suitable for passing to methods such as `Mockito.verify` which want the mock instance itself. So if you need to call methods such as `verify` you need to hang on to the mock instance in your test, or use `@InjectMock` as shown below."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/getting-started-testing.adoc:835
#, no-wrap
msgid "Further simplification with `@InjectMock`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:839
msgid "Building on the features provided by `QuarkusMock`, Quarkus also allows users to effortlessly take advantage of link:https://site.mockito.org/[Mockito] for mocking the beans supported by `QuarkusMock`.  This functionality is available via the `@io.quarkus.test.junit.mockito.InjectMock` annotation which is available in the `quarkus-junit5-mockito` dependency."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:841
msgid "Using `@InjectMock`, the previous example could be written as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:849
#, no-wrap
msgid ""
"    @InjectMock\n"
"    MockableBean1 mockableBean1; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:852
#, no-wrap
msgid ""
"    @InjectMock\n"
"    MockableBean2 mockableBean2;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:857
#, no-wrap
msgid ""
"    @BeforeEach\n"
"    public void setup() {\n"
"        Mockito.when(mockableBean1.greet(\"Stuart\")).thenReturn(\"A mock for Stuart\"); // <2>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:863
#, no-wrap
msgid ""
"    @Test\n"
"    public void firstTest() {\n"
"        Assertions.assertEquals(\"A mock for Stuart\", mockableBean1.greet(\"Stuart\"));\n"
"        Assertions.assertEquals(null, mockableBean2.greet(\"Stuart\")); // <3>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:870
#, no-wrap
msgid ""
"    @Test\n"
"    public void secondTest() {\n"
"        Mockito.when(mockableBean2.greet(\"Stuart\")).thenReturn(\"Bonjour Stuart\"); // <4>\n"
"        Assertions.assertEquals(\"A mock for Stuart\", mockableBean1.greet(\"Stuart\"));\n"
"        Assertions.assertEquals(\"Bonjour Stuart\", mockableBean2.greet(\"Stuart\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:887
#, no-wrap
msgid ""
"        public String greet(String name) {\n"
"            return \"Hello \" + name;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:889
msgid "`@InjectMock` results in a mock being and is available in test methods of the test class (other test classes are *not* affected by this)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:890
msgid "The `mockableBean1` is configured here for every test method of the class"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:891
msgid "Since the `mockableBean2` mock has not been configured, it will return the default Mockito response."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:892
msgid "In this test the `mockableBean2` is configured, so it returns the configured response."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:896
msgid "Although the test above is good for showing the capabilities of `@InjectMock`, it is not a good representation of a real test. In a real test we would most likely configure a mock, but then test a bean that uses the mocked bean.  Here is an example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:901
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class MockGreetingServiceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:904
#, no-wrap
msgid ""
"    @InjectMock\n"
"    GreetingService greetingService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:914
#, no-wrap
msgid ""
"    @Test\n"
"    public void testGreeting() {\n"
"        when(greetingService.greet()).thenReturn(\"hi\");\n"
"        given()\n"
"                .when().get(\"/greeting\")\n"
"                .then()\n"
"                .statusCode(200)\n"
"                .body(is(\"hi\")); // <1>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:917
#: upstream/_versions/main/guides/getting-started-testing.adoc:987
#, no-wrap
msgid ""
"    @Path(\"greeting\")\n"
"    public static class GreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:919
#: upstream/_versions/main/guides/getting-started-testing.adoc:989
#, no-wrap
msgid "        final GreetingService greetingService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:923
#: upstream/_versions/main/guides/getting-started-testing.adoc:993
#, no-wrap
msgid ""
"        public GreetingResource(GreetingService greetingService) {\n"
"            this.greetingService = greetingService;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:930
#: upstream/_versions/main/guides/getting-started-testing.adoc:1000
#, no-wrap
msgid ""
"        @GET\n"
"        @Produces(\"text/plain\")\n"
"        public String greet() {\n"
"            return greetingService.greet();\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:938
#: upstream/_versions/main/guides/getting-started-testing.adoc:1008
#, no-wrap
msgid ""
"    @ApplicationScoped\n"
"    public static class GreetingService {\n"
"        public String greet(){\n"
"            return \"hello\";\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:940
msgid "Since we configured `greetingService` as a mock, the `GreetingResource` which uses the `GreetingService` bean, we get the mocked response instead of the response of the regular `GreetingService` bean"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:944
msgid "By default the `@InjectMock` annotation can be used for any normal CDI scoped bean (e.g. `@ApplicationScoped`, `@RequestScoped`).  Mocking `@Singleton` beans can be performed by setting the `convertScopes` property to true (such as `@InjectMock(convertScopes = true`).  This will convert the `@Singleton` bean to an `@ApplicationScoped` bean for the test."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:946
msgid "This is considered an advanced option and should only be performed if you fully understand the consequences of changing the scope of the bean."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/getting-started-testing.adoc:947
#, no-wrap
msgid "Using Spies instead of Mocks with `@InjectSpy`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:951
msgid "Building on the features provided by `InjectMock`, Quarkus also allows users to effortlessly take advantage of link:https://site.mockito.org/[Mockito] for spying on the beans supported by `QuarkusMock`.  This functionality is available via the `@io.quarkus.test.junit.mockito.InjectSpy` annotation which is available in the `quarkus-junit5-mockito` dependency."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:955
msgid "Sometimes when testing you only need to verify that a certain logical path was taken, or you only need to stub out a single method's response while still executing the rest of the methods on the Spied clone. Please see link:https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#spy-T-[Mockito documentation] for more details on Spy partial mocks.  In either of those situations a Spy of the object is preferable.  Using `@InjectSpy`, the previous example could be written as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:960
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class SpyGreetingServiceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:963
#, no-wrap
msgid ""
"    @InjectSpy\n"
"    GreetingService greetingService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:971
#, no-wrap
msgid ""
"    @Test\n"
"    public void testDefaultGreeting() {\n"
"        given()\n"
"                .when().get(\"/greeting\")\n"
"                .then()\n"
"                .statusCode(200)\n"
"                .body(is(\"hello\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:974
#, no-wrap
msgid ""
"        Mockito.verify(greetingService, Mockito.times(1)).greet(); <1>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:984
#, no-wrap
msgid ""
"    @Test\n"
"    public void testOverrideGreeting() {\n"
"        when(greetingService.greet()).thenReturn(\"hi\"); <2>\n"
"        given()\n"
"                .when().get(\"/greeting\")\n"
"                .then()\n"
"                .statusCode(200)\n"
"                .body(is(\"hi\")); <3>\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1010
msgid "Instead of overriding the value, we just want to ensure that the greet method on our `GreetingService` was called by this test."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1011
msgid "Here we are telling the Spy to return \"hi\" instead of \"hello\". When the `GreetingResource` requests the greeting from `GreetingService` we get the mocked response instead of the response of the regular `GreetingService` bean"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1012
msgid "We are verifying that we get the mocked response from the Spy."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/getting-started-testing.adoc:1013
#, no-wrap
msgid "Using `@InjectMock` with `@RestClient`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1016
msgid "The `@RegisterRestClient` registers the implementation of the rest-client at runtime, and because the bean needs to be a regular scope, you have to annotate your interface with `@ApplicationScoped`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1023
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"@ApplicationScoped\n"
"@RegisterRestClient\n"
"public interface GreetingService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1029
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/hello\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    String hello();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1032
msgid "For the test class here is an example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1041
#, no-wrap
msgid ""
"    @InjectMock\n"
"    @RestClient // <1>\n"
"    GreetingService greetingService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1045
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHelloEndpoint() {\n"
"        Mockito.when(greetingService.hello()).thenReturn(\"hello from mockito\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1052
#, no-wrap
msgid ""
"        given()\n"
"          .when().get(\"/hello\")\n"
"          .then()\n"
"             .statusCode(200)\n"
"             .body(is(\"hello from mockito\"));\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1056
msgid "Indicate that this injection point is meant to use an instance of `RestClient`."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:1057
#, no-wrap
msgid "Mocking with Panache"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1060
msgid "If you are using the `quarkus-hibernate-orm-panache` or `quarkus-mongodb-panache` extensions, check out the xref:hibernate-orm-panache.adoc#mocking[Hibernate ORM with Panache Mocking] and xref:mongodb-panache.adoc#mocking[MongoDB with Panache Mocking] documentation for the easiest way to mock your data access."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:1061
#, no-wrap
msgid "Testing Security"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1064
msgid "If you are using Quarkus Security, check out the xref:security-testing.adoc[Testing Security] section for information on how to easily test security features of the application."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:1066
#, no-wrap
msgid "Starting services before the Quarkus application starts"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1069
msgid "A very common need is to start some services on which your Quarkus application depends, before the Quarkus application starts for testing. To address this need, Quarkus provides `@io.quarkus.test.common.QuarkusTestResource` and `io.quarkus.test.common.QuarkusTestResourceLifecycleManager`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1072
msgid "By simply annotating any test in the test suite with `@QuarkusTestResource`, Quarkus will run the corresponding `QuarkusTestResourceLifecycleManager` before any tests are run.  A test suite is also free to utilize multiple `@QuarkusTestResource` annotations, in which case all the corresponding `QuarkusTestResourceLifecycleManager` objects will be run before the tests. When using multiple test resources they can be started concurrently. For that you need to set `@QuarkusTestResource(parallel = true)`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1075
msgid "Test resources are global, even if they are defined on a test class or custom profile, which means they will all be activated for all tests, even though we do remove duplicates. If you want to only enable a test resource on a single test class or test profile, you can use `@QuarkusTestResource(restrictToAnnotatedClass = true)`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1080
msgid "Quarkus provides a few implementations of `QuarkusTestResourceLifecycleManager` out of the box (see `io.quarkus.test.h2.H2DatabaseTestResource` which starts an H2 database, or `io.quarkus.test.kubernetes.client.KubernetesServerTestResource` which starts a mock Kubernetes API server), but it is common to create custom implementations to address specific application needs.  Common cases include starting docker containers using https://www.testcontainers.org/[Testcontainers] (an example of which can be found https://github.com/quarkusio/quarkus/blob/main/test-framework/keycloak-server/src/main/java/io/quarkus/test/keycloak/server/KeycloakTestResourceLifecycleManager.java[here]), or starting a mock HTTP server using http://wiremock.org/[Wiremock] (an example of which can be found https://github.com/geoand/quarkus-test-demo/blob/main/src/test/java/org/acme/getting/started/country/WiremockCountries.java[here])."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:1082
#, no-wrap
msgid "Altering the test class"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1085
msgid "When creating a custom `QuarkusTestResourceLifecycleManager` that needs to inject the something into the test class, the `inject` methods can be used.  If for example you have a test like the following:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1091
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(MyWireMockResource.class)\n"
"public class MyTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1094
#, no-wrap
msgid ""
"    @InjectWireMock // this a custom annotation you are defining in your own application\n"
"    WireMockServer wireMockServer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1100
#, no-wrap
msgid ""
"    @Test\n"
"    public someTest() {\n"
"        // control wiremock in some way and perform test\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1103
msgid "Making `MyWireMockResource` inject the `wireMockServer` field can be done as shown in the `inject` method of the following code snippet:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1107
#, no-wrap
msgid "public class MyWireMockResource implements QuarkusTestResourceLifecycleManager {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1109
#, no-wrap
msgid "    WireMockServer wireMockServer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1114
#, no-wrap
msgid ""
"    @Override\n"
"    public Map<String, String> start() {\n"
"        wireMockServer = new WireMockServer(8090);\n"
"        wireMockServer.start();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1116
#, no-wrap
msgid "        // create some stubs\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1119
#, no-wrap
msgid ""
"        return Map.of(\"some.service.url\", \"localhost:\" + wireMockServer.port());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1127
#, no-wrap
msgid ""
"    @Override\n"
"    public synchronized void stop() {\n"
"        if (wireMockServer != null) {\n"
"            wireMockServer.stop();\n"
"            wireMockServer = null;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1133
#, no-wrap
msgid ""
"    @Override\n"
"    public void inject(TestInjector testInjector) {\n"
"        testInjector.injectIntoFields(wireMockServer, new TestInjector.AnnotatedAndMatchesType(InjectWireMock.class, WireMockServer.class));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1137
msgid "It is worth mentioning that this injection into the test class is not under the control of CDI and happens after CDI has performed any necessary injections into the test class."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:1138
#, no-wrap
msgid "Annotation-based test resources"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1142
msgid "It is possible to write test resources that are enabled and configured using annotations. This is enabled by placing the `@QuarkusTestResource` on an annotation which will be used to enable and configure the test resource."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1145
msgid "For example, this defines the `@WithKubernetesTestServer` annotation, which you can use on your tests to activate the `KubernetesServerTestResource`, but only for the annotated test class. You can also place them on your `QuarkusTestProfile` test profiles."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1156
#, no-wrap
msgid ""
"@QuarkusTestResource(KubernetesServerTestResource.class)\n"
"@Retention(RetentionPolicy.RUNTIME)\n"
"@Target(ElementType.TYPE)\n"
"public @interface WithKubernetesTestServer {\n"
"    /**\n"
"     * Start it with HTTPS\n"
"     */\n"
"    boolean https() default false;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1161
#, no-wrap
msgid ""
"    /**\n"
"     * Start it in CRUD mode\n"
"     */\n"
"    boolean crud() default true;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1167
#, no-wrap
msgid ""
"    /**\n"
"     * Port to use, defaults to any available port\n"
"     */\n"
"    int port() default 0;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1171
msgid "The `KubernetesServerTestResource` class has to implement the `QuarkusTestResourceConfigurableLifecycleManager` interface in order to be configured using the previous annotation:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1176
#, no-wrap
msgid ""
"public class KubernetesServerTestResource\n"
"        implements QuarkusTestResourceConfigurableLifecycleManager<WithKubernetesTestServer> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1180
#, no-wrap
msgid ""
"    private boolean https = false;\n"
"    private boolean crud = true;\n"
"    private int port = 0;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1187
#, no-wrap
msgid ""
"    @Override\n"
"    public void init(WithKubernetesTestServer annotation) {\n"
"        this.https = annotation.https();\n"
"        this.crud = annotation.crud();\n"
"        this.port = annotation.port();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1190
#, no-wrap
msgid ""
"    // ...\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:1192
#, no-wrap
msgid "Hang Detection"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1197
msgid "`@QuarkusTest` has support for hang detection to help diagnose any unexpected hangs. If no progress is made for a specified time (i.e. no JUnit callbacks are invoked) then Quarkus will print a stack trace to the console to help diagnose the hang.  The default value for this timeout is 10 minutes."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1202
msgid "No further action will be taken, and the tests will continue as normal (generally until CI times out), however the printed stack traces should help diagnose why the build has failed. You can control this timeout with the `quarkus.test.hang-detection-timeout` system property (you can also set this in application.properties, but this won't be read until Quarkus has started, so the timeout for Quarkus start will be the default of 10 minutes)."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:1203
#, no-wrap
msgid "Native Executable Testing"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1207
msgid "It is also possible to test native executables using `@QuarkusIntegrationTest`. This supports all the features mentioned in this guide except injecting into tests (and the native executable runs in a separate non-JVM process this is not really possible)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1210
msgid "This is covered in the xref:building-native-image.adoc[Native Executable Guide]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:1212
#, no-wrap
msgid "Using `@QuarkusIntegrationTest`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1219
msgid "`@QuarkusIntegrationTest` should be used to launch and test the artifact produced by the Quarkus build, and supports testing a jar (of whichever type), a native image or container image.  Put simply, this means that if the result of a Quarkus build (`mvn package` or `gradle build`) is a jar, that jar will be launched as `java -jar ...` and tests run against it.  If instead a native image was built, then the application is launched as `./application ...` and again the tests run against the running application.  Finally, if a container image was created during the build (by including the `quarkus-container-image-jib` or `quarkus-container-image-docker` extensions and having the `quarkus.container-image.build=true` property configured), then a container is created and run (this requires the `docker` executable being present)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1221
msgid "As is the case with `@NativeImageTest`, this is a black box test that supports the same set features and has the same limitations."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/getting-started-testing.adoc:1226
msgid "As a test annotated with `@QuarkusIntegrationTest` tests the result of the build, it should be run as part of the integration test suite - i.e. by setting `-DskipITs=false` if using Maven or the `quarkusIntTest` task if using Gradle.  These tests will **not** work if run in the same phase as `@QuarkusTest` as Quarkus has not yet created the final artifact."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1229
msgid "The `pom.xml` file contains:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1252
#, no-wrap
msgid ""
"<plugin>\n"
"    <groupId>org.apache.maven.plugins</groupId>\n"
"    <artifactId>maven-failsafe-plugin</artifactId>\n"
"    <version>${surefire-plugin.version}</version>\n"
"    <executions>\n"
"        <execution>\n"
"            <goals>\n"
"                <goal>integration-test</goal>\n"
"                <goal>verify</goal>\n"
"            </goals>\n"
"            <configuration>\n"
"                <systemPropertyVariables>\n"
"                    <native.image.path>${project.build.directory}/${project.build.finalName}-runner</native.image.path>\n"
"                    <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"                    <maven.home>${maven.home}</maven.home>\n"
"                </systemPropertyVariables>\n"
"            </configuration>\n"
"        </execution>\n"
"    </executions>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1255
msgid "This instructs the failsafe-maven-plugin to run integration-test."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1257
msgid "Then, open the `src/test/java/org/acme/quickstart/GreetingResourceIT.java`. It contains:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1261
#, no-wrap
msgid "package org.acme.quickstart;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1264
#, no-wrap
msgid "import io.quarkus.test.junit.QuarkusIntegrationTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1267
#, no-wrap
msgid ""
"@QuarkusIntegrationTest // <1>\n"
"public class GreetingResourceIT extends GreetingResourceTest { // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1269
#, no-wrap
msgid "    // Run the same tests\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1274
msgid "Use another test runner that starts the application from the native file before the tests.  The executable is retrieved by the _Failsafe Maven Plugin_."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1275
msgid "We extend our previous tests as a convenience, but you can also implement your tests."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1277
msgid "More information can be found in the link:building-native-image#testing-the-native-executable[Testing the native executable Guide]."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:1278
#, no-wrap
msgid "Launching containers"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1283
msgid "When `@QuarkusIntegrationTest` results in launching a container (because the application was built with `quarkus.container-image.build` set to `true`), the container is launched on a predictable container network. This facilitates writing integration tests that need to launch services to support the application.  This means that `@QuarkusIntegrationTest` works out of the box with containers launched via xref:dev-services.adoc[Dev Services], but it also means that it enables using <<quarkus-test-resource,QuarkusTestLifecycleManager>> resources that launch additional containers.  This can be achieved by having your `QuarkusTestLifecycleManager` implement `io.quarkus.test.common.DevServicesContext.ContextAware`. A simple example could be the following:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1287
msgid "The container running the resource to test against, for example PostgreSQL via Testcontainers, is assigned an IP address from the container's network.  Use the container's \"public\" IP from its network and the \"unmapped\" port number to connect to the service.  The Testcontainers library usually return connection strings without respecting the container network, so additional code is needed to provide Quarkus the \"correct\" connection string using the container's IP on the container network and the _unmapped_ port number."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1289
msgid "The following example illustrates the use with PostgreSQL, but the approach is applicable to all containers."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1294
#, no-wrap
msgid ""
"import io.quarkus.test.common.DevServicesContext;\n"
"import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1297
#, no-wrap
msgid ""
"import org.testcontainers.containers.JdbcDatabaseContainer;\n"
"import org.testcontainers.containers.PostgreSQLContainer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1301
#, no-wrap
msgid ""
"import java.util.HashMap;\n"
"import java.util.Map;\n"
"import java.util.Optional;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1303
#, no-wrap
msgid "public class CustomResource implements QuarkusTestResourceLifecycleManager, DevServicesContext.ContextAware {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1306
#, no-wrap
msgid ""
"    private Optional<String> containerNetworkId;\n"
"    private JdbcDatabaseContainer container;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1311
#, no-wrap
msgid ""
"    @Override\n"
"    public void setIntegrationTestContext(DevServicesContext context) {\n"
"        containerNetworkId = context.containerNetworkId();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1316
#, no-wrap
msgid ""
"    @Override\n"
"    public Map<String, String> start() {\n"
"        // start a container making sure to call withNetworkMode() with the value of containerNetworkId if present\n"
"        container = new PostgreSQLContainer<>(\"postgres:latest\").withLogConsumer(outputFrame -> {});\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1319
#, no-wrap
msgid ""
"        // apply the network to the container\n"
"        containerNetworkId.ifPresent(container::withNetworkMode);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1326
#, no-wrap
msgid ""
"        String jdbcUrl = container.getJdbcUrl();\n"
"        if (containerNetworkId.isPresent()) {\n"
"            // Replace hostname + port in the provided JDBC URL with the hostname of the Docker container\n"
"            // running PostgreSQL and the listening port.\n"
"            jdbcUrl = fixJdbcUrl(jdbcUrl);\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1333
#, no-wrap
msgid ""
"        // return a map containing the configuration the application needs to use the service\n"
"        return ImmutableMap.of(\n"
"            \"quarkus.datasource.username\", container.getUsername(),\n"
"            \"quarkus.datasource.password\", container.getPassword(),\n"
"            \"quarkus.datasource.jdbc.url\", jdbcUrl);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1337
#, no-wrap
msgid ""
"    private String fixJdbcUrl(String jdbcUrl) {\n"
"        // Part of the JDBC URL to replace\n"
"        String hostPort = container.getHost() + ':' + container.getMappedPort(PostgreSQLContainer.POSTGRESQL_PORT);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1343
#, no-wrap
msgid ""
"        // Host/IP on the container network plus the unmapped port\n"
"        String networkHostPort =\n"
"            container.getCurrentContainerInfo().getConfig().getHostName()\n"
"            + ':'\n"
"            + PostgreSQLContainer.POSTGRESQL_PORT;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1346
#, no-wrap
msgid ""
"        return jdbcUrl.replace(hostPort, networkHostPort);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1352
#, no-wrap
msgid ""
"    @Override\n"
"    public void stop() {\n"
"        // close container\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1355
msgid "`CustomResource` would be activated on a `@QuarkusIntegrationTest` using `@QuarkusTestResource` as is described in the corresponding section of this doc."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:1356
#, no-wrap
msgid "Executing against a running application"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/getting-started-testing.adoc:1361
msgid "This feature is considered experimental and is likely to change in future versions of Quarkus."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1365
msgid "`@QuarkusIntegrationTest` supports executing tests against an already running instance of the application. This can be achieved by setting the `quarkus.http.test-host` system property when running the tests."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1367
msgid "An example use of this could be the following Maven command, that forces `@QuarkusIntegrationTest` to execute against that is accessible at `http://1.2.3.4:4321`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1371
#, no-wrap
msgid "./mvnw verify -Dquarkus.http.test-host=1.2.3.4 -Dquarkus.http.test-port=4321\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:1374
#, no-wrap
msgid "Mixing `@QuarkusTest` with other type of tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1379
msgid "Mixing tests annotated with `@QuarkusTest` with tests annotated with either `@QuarkusDevModeTest`, `@QuarkusProdModeTest` or `@QuarkusUnitTest` is not allowed in a single execution run (in a single Maven Surefire Plugin execution, for instance), while the latter three can coexist."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1382
msgid "The reason of this restriction is that `@QuarkusTest` starts a Quarkus server for the whole lifetime of the tests execution run, thus preventing the other tests to start their own Quarkus server."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1385
msgid "To alleviate this restriction, the `@QuarkusTest` annotation defines a JUnit 5 `@Tag`: `io.quarkus.test.junit.QuarkusTest`.  You can use this tag to isolate the `@QuarkusTest` test in a specific execution run, for example with the Maven Surefire Plugin:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1417
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-surefire-plugin</artifactId>\n"
"    <version>${surefire-plugin.version}</version>\n"
"    <executions>\n"
"        <execution>\n"
"            <id>default-test</id>\n"
"            <goals>\n"
"                <goal>test</goal>\n"
"            </goals>\n"
"            <configuration>\n"
"                <excludedGroups>io.quarkus.test.junit.QuarkusTest</excludedGroups>\n"
"            </configuration>\n"
"        </execution>\n"
"        <execution>\n"
"            <id>quarkus-test</id>\n"
"            <goals>\n"
"                <goal>test</goal>\n"
"            </goals>\n"
"            <configuration>\n"
"                <groups>io.quarkus.test.junit.QuarkusTest</groups>\n"
"            </configuration>\n"
"        </execution>\n"
"    </executions>\n"
"    <configuration>\n"
"        <systemProperties>\n"
"            <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"        </systemProperties>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:1420
#, no-wrap
msgid "Running `@QuarkusTest` from an IDE"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1423
msgid "Most IDEs offer the possibility to run a selected class as a JUnit test directly. For this you should set a few properties in the settings of your chosen IDE:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1425
msgid "`java.util.logging.manager` (see xref:logging.adoc[Logging Guide])"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1427
msgid "`maven.home` (only if there are any custom settings in `${maven.home}/conf/settings.xml`, see xref:maven-tooling.adoc[Maven Guide])"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1429
msgid "`maven.settings` (in case a custom version of `settings.xml` file should be used for the tests)"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:1430
#, no-wrap
msgid "Eclipse separate JRE definition"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1433
msgid "Copy your current \"Installed JRE\" definition into a new one, where you will add the properties as a new VM arguments:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1435
msgid "`-Djava.util.logging.manager=org.jboss.logmanager.LogManager`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1437
msgid "`-Dmaven.home=<path-to-your-maven-installation>`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1439
msgid "Use this JRE definition as your Quarkus project targeted runtime and the workaround will be applied to any \"Run as JUnit\" configuration."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:1440
#, no-wrap
msgid "VSCode \"run with\" configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1443
msgid "The `settings.json` placed in the root of your project directory or in the workspace will need the following workaround in your test configuration:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1453
#, no-wrap
msgid ""
"\"java.test.config\": [\n"
"    {\n"
"        \"name\": \"quarkusConfiguration\",\n"
"        \"vmargs\": [ \"-Djava.util.logging.manager=org.jboss.logmanager.LogManager -Dmaven.home=<path-to-your-maven-installation> ...\" ],\n"
"        ...\n"
"    },\n"
"  ...\n"
"]\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:1455
#, no-wrap
msgid "IntelliJ JUnit template"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1458
msgid "Nothing needed in IntelliJ because the IDE will pick the `systemPropertyVariables` from the surefire plugin configuration in `pom.xml`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:1459
#, no-wrap
msgid "Testing Dev Services"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1463
msgid "By default tests should just work with xref:dev-services.adoc[Dev Services], however from some use cases you may need access to the automatically configured properties in your tests."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1468
msgid "You can do this with `io.quarkus.test.common.DevServicesContext`, which can be injected directly into any `@QuarkusTest` or `@QuarkusIntegrationTest`. All you need to do is define a field of type `DevServicesContext` and it will be automatically injected. Using this you can retrieve any properties that have been set. Generally this is used to directly connect to a resource from the test itself, e.g. to connect to kafka to send messages to the application under test."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1473
msgid "Injection is also supported into objects that implement `io.quarkus.test.common.DevServicesContext.ContextAware`. If you have a field that implements `io.quarkus.test.common.DevServicesContext.ContextAware` Quarkus will call the `setIntegrationTestContext` method to pass the context into this object. This allows client logic to be encapsulated in a utility class."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1476
msgid "`QuarkusTestResourceLifecycleManager` implementations can also implement `ContextAware` to get access to these properties, which allows you to setup the resource before Quarkus starts (e.g. configure a KeyCloak instance, add data to a database etc)."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/getting-started-testing.adoc:1482
msgid "For `@QuarkusIntegrationTest` tests that result in launcher the application as a container, `io.quarkus.test.common.DevServicesContext` also provides access to the id of the container network on which the application container was launched (via the `containerNetworkId` method).  This can be used by `QuarkusTestResourceLifecycleManager` that need to launch additional containers that the application will communicate with."
msgstr ""
