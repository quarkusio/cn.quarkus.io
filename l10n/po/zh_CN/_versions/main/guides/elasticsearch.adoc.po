# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-22 02:41+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/elasticsearch.adoc:6
#, no-wrap
msgid "Connecting to an Elasticsearch cluster"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:10
msgid "Elasticsearch is a well known full text search engine and NoSQL datastore."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:12
msgid "In this guide, we will see how you can get your REST services to use an Elasticsearch cluster."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:15
msgid "Quarkus provides two ways of accessing Elasticsearch: via the lower level `RestClient` or via the `RestHighLevelClient` we will call them the low level and the high level clients."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/elasticsearch.adoc:16
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:20
msgid "Elasticsearch installed or Docker installed"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/elasticsearch.adoc:21
#, no-wrap
msgid "Architecture"
msgstr "应用结构"

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:24
msgid "The application built in this guide is quite simple: the user can add elements in a list using a form and the list is updated."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:26
msgid "All the information between the browser and the server is formatted as JSON."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:28
msgid "The elements are stored in Elasticsearch."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/elasticsearch.adoc:29
#, no-wrap
msgid "Creating the Maven project"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:32
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:39
msgid "This command generates a Maven structure importing the RESTEasy Reactive/JAX-RS, Jackson, and the Elasticsearch low level client extensions.  After this, the `quarkus-elasticsearch-rest-client` extension has been added to your build file."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:41
msgid "If you want to use the high level client instead, replace the `elasticsearch-rest-client` extension by the `elasticsearch-rest-high-level-client` extension."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/elasticsearch.adoc:46
msgid "We use the `resteasy-reactive-jackson` extension here and not the JSON-B variant because we will use the Vert.x `JsonObject` helper to serialize/deserialize our objects to/from Elasticsearch and it uses Jackson under the hood."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:49
msgid "If you don’t want to generate a new project, add the following dependencies to your build file."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:51
msgid "For the Elasticsearch low level client, add:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/elasticsearch.adoc:53
#: upstream/_versions/main/guides/elasticsearch.adoc:70
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:59
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-elasticsearch-rest-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/elasticsearch.adoc:62
#: upstream/_versions/main/guides/elasticsearch.adoc:79
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:65
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-elasticsearch-rest-client\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:68
msgid "For the Elasticsearch high level client, add:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:76
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-elasticsearch-rest-high-level-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:82
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-elasticsearch-rest-high-level-client\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/elasticsearch.adoc:84
#, no-wrap
msgid "Creating your first JSON REST service"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:87
msgid "In this example, we will create an application to manage a list of fruits."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:89
msgid "First, let's create the `Fruit` bean as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:93
#: upstream/_versions/main/guides/elasticsearch.adoc:109
#: upstream/_versions/main/guides/elasticsearch.adoc:194
#, no-wrap
msgid "package org.acme.elasticsearch;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:99
#, no-wrap
msgid ""
"public class Fruit {\n"
"    public String id;\n"
"    public String name;\n"
"    public String color;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:102
msgid "Nothing fancy. One important thing to note is that having a default constructor is required by the JSON serialization layer."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:105
msgid "Now create a `org.acme.elasticsearch.FruitService` that will be the business layer of our application and store/load the fruits from the Elasticsearch instance.  Here we use the low level client, if you want to use the high level client instead follow the instructions in the <<using-the-high-level-rest-client,Using the High Level REST Client>> paragraph instead."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:113
#: upstream/_versions/main/guides/elasticsearch.adoc:399
#, no-wrap
msgid ""
"import java.io.IOException;\n"
"import java.util.ArrayList;\n"
"import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:116
#: upstream/_versions/main/guides/elasticsearch.adoc:402
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:121
#, no-wrap
msgid ""
"import org.apache.http.util.EntityUtils;\n"
"import org.elasticsearch.client.Request;\n"
"import org.elasticsearch.client.Response;\n"
"import org.elasticsearch.client.RestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:124
#, no-wrap
msgid ""
"import io.vertx.core.json.JsonArray;\n"
"import io.vertx.core.json.JsonObject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:129
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class FruitService {\n"
"    @Inject\n"
"    RestClient restClient; //<1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:137
#, no-wrap
msgid ""
"    public void index(Fruit fruit) throws IOException {\n"
"        Request request = new Request(\n"
"                \"PUT\",\n"
"                \"/fruits/_doc/\" + fruit.id); //<2>\n"
"        request.setJsonEntity(JsonObject.mapFrom(fruit).toString()); //<3>\n"
"        restClient.performRequest(request); //<4>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:147
#, no-wrap
msgid ""
"    public Fruit get(String id) throws IOException {\n"
"        Request request = new Request(\n"
"                \"GET\",\n"
"                \"/fruits/_doc/\" + id);\n"
"        Response response = restClient.performRequest(request);\n"
"        String responseBody = EntityUtils.toString(response.getEntity());\n"
"        JsonObject json = new JsonObject(responseBody); //<5>\n"
"        return json.getJsonObject(\"_source\").mapTo(Fruit.class);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:151
#: upstream/_versions/main/guides/elasticsearch.adoc:444
#, no-wrap
msgid ""
"    public List<Fruit> searchByColor(String color) throws IOException {\n"
"        return search(\"color\", color);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:155
#: upstream/_versions/main/guides/elasticsearch.adoc:448
#, no-wrap
msgid ""
"    public List<Fruit> searchByName(String name) throws IOException {\n"
"        return search(\"name\", name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:167
#, no-wrap
msgid ""
"    private List<Fruit> search(String term, String match) throws IOException {\n"
"        Request request = new Request(\n"
"                \"GET\",\n"
"                \"/fruits/_search\");\n"
"        //construct a JSON query like {\"query\": {\"match\": {\"<term>\": \"<match\"}}\n"
"        JsonObject termJson = new JsonObject().put(term, match);\n"
"        JsonObject matchJson = new JsonObject().put(\"match\", termJson);\n"
"        JsonObject queryJson = new JsonObject().put(\"query\", matchJson);\n"
"        request.setJsonEntity(queryJson.encode());\n"
"        Response response = restClient.performRequest(request);\n"
"        String responseBody = EntityUtils.toString(response.getEntity());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:179
#, no-wrap
msgid ""
"        JsonObject json = new JsonObject(responseBody);\n"
"        JsonArray hits = json.getJsonObject(\"hits\").getJsonArray(\"hits\");\n"
"        List<Fruit> results = new ArrayList<>(hits.size());\n"
"        for (int i = 0; i < hits.size(); i++) {\n"
"            JsonObject hit = hits.getJsonObject(i);\n"
"            Fruit fruit = hit.getJsonObject(\"_source\").mapTo(Fruit.class);\n"
"            results.add(fruit);\n"
"        }\n"
"        return results;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:182
#: upstream/_versions/main/guides/elasticsearch.adoc:469
msgid "In this example you can note the following:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:184
msgid "We inject an Elasticsearch low level `RestClient` into our service."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:185
msgid "We create an Elasticsearch request."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:186
#: upstream/_versions/main/guides/elasticsearch.adoc:473
msgid "We use Vert.x `JsonObject` to serialize the object before sending it to Elasticsearch, you can use whatever you want to serialize to JSON."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:187
msgid "We send the request (indexing request here) to Elasticsearch."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:188
#: upstream/_versions/main/guides/elasticsearch.adoc:475
msgid "In order to deserialize the object from Elasticsearch, we again use Vert.x `JsonObject`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:190
msgid "Now, create the `org.acme.elasticsearch.FruitResource` class as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:203
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import java.io.IOException;\n"
"import java.net.URI;\n"
"import java.util.List;\n"
"import java.util.UUID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:205
#, no-wrap
msgid "import org.jboss.resteasy.reactive.RestQuery;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:208
#, no-wrap
msgid ""
"@Path(\"/fruits\")\n"
"public class FruitResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:211
#, no-wrap
msgid ""
"    @Inject\n"
"    FruitService fruitService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:220
#, no-wrap
msgid ""
"    @POST\n"
"    public Response index(Fruit fruit) throws IOException {\n"
"        if (fruit.id == null) {\n"
"            fruit.id = UUID.randomUUID().toString();\n"
"        }\n"
"        fruitService.index(fruit);\n"
"        return Response.created(URI.create(\"/fruits/\" + fruit.id)).build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:226
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/{id}\")\n"
"    public Fruit get(String id) throws IOException {\n"
"        return fruitService.get(id);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:239
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/search\")\n"
"    public List<Fruit> search(@RestQuery String name, @RestQuery String color) throws IOException {\n"
"        if (name != null) {\n"
"            return fruitService.searchByName(name);\n"
"        } else if (color != null) {\n"
"            return fruitService.searchByColor(color);\n"
"        } else {\n"
"            throw new BadRequestException(\"Should provide name or color query parameter\");\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:242
msgid "The implementation is pretty straightforward and you just need to define your endpoints using the JAX-RS annotations and use the `FruitService` to list/add new fruits."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/elasticsearch.adoc:243
#, no-wrap
msgid "Configuring Elasticsearch"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:245
msgid "The main property to configure is the URL to connect to the Elasticsearch cluster."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:247
msgid "A sample configuration should look like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:252
#, no-wrap
msgid ""
"# configure the Elasticsearch client for a cluster of two nodes\n"
"quarkus.elasticsearch.hosts = elasticsearch1:9200,elasticsearch2:9200\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:255
msgid "In this example, we are using a single instance running on localhost:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:260
#, no-wrap
msgid ""
"# configure the Elasticsearch client for a single instance on localhost\n"
"quarkus.elasticsearch.hosts = localhost:9200\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:263
msgid "If you need a more advanced configuration, you can find the comprehensive list of supported configuration properties at the end of this guide."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/elasticsearch.adoc:265
#, no-wrap
msgid "Dev Services (Configuration Free Databases)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:270
msgid "Quarkus supports a feature called Dev Services that allows you to start various containers without any config.  In the case of Elasticsearch this support extends to the default Elasticsearch connection.  What that means practically is that, if you have not configured `quarkus.elasticsearch.hosts`, Quarkus will automatically start an Elasticsearch container when running tests or dev mode, and automatically configure the connection."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:274
msgid "When running the production version of the application, the Elasticsearch connection needs to be configured as usual, so if you want to include a production database config in your `application.properties` and continue to use Dev Services we recommend that you use the `%prod.` profile to define your Elasticsearch settings."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:276
msgid "For more information you can read the xref:elasticsearch-dev-services.adoc[Dev Services for Elasticsearch guide]."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/elasticsearch.adoc:278
#, no-wrap
msgid "Programmatically Configuring Elasticsearch"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:280
msgid "On top of the parametric configuration, you can also programmatically apply additional configuration to the client by implementing a `RestClientBuilder.HttpClientConfigCallback` and annotating it with `ElasticsearchClientConfig`. You may provide multiple implementations and configuration provided by each implementation will be applied in a randomly ordered cascading manner."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:282
msgid "For example, when accessing an Elasticsearch cluster that is set up for TLS on the HTTP layer, the client needs to trust the certificate that Elasticsearch is using. The following is an example of setting up the client to trust the CA that has signed the certificate that Elasticsearch is using, when that CA certificate is available in a PKCS#12 keystore."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:290
#, no-wrap
msgid ""
"import io.quarkus.elasticsearch.restclient.lowlevel.ElasticsearchClientConfig;\n"
"import org.apache.http.impl.nio.client.HttpAsyncClientBuilder;\n"
"import org.apache.http.ssl.SSLContextBuilder;\n"
"import org.apache.http.ssl.SSLContexts;\n"
"import org.elasticsearch.client.RestClientBuilder;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:298
#, no-wrap
msgid ""
"import javax.enterprise.context.Dependent;\n"
"import javax.net.ssl.SSLContext;\n"
"import java.io.InputStream;\n"
"import java.nio.file.Files;\n"
"import java.nio.file.Path;\n"
"import java.nio.file.Paths;\n"
"import java.security.KeyStore;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:317
#, no-wrap
msgid ""
"@ElasticsearchClientConfig\n"
"public class SSLContextConfigurator implements RestClientBuilder.HttpClientConfigCallback {\n"
"    @Override\n"
"    public HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder) {\n"
"        try {\n"
"            String keyStorePass = \"password-for-keystore\";\n"
"            Path trustStorePath = Paths.get(\"/path/to/truststore.p12\");\n"
"            KeyStore truststore = KeyStore.getInstance(\"pkcs12\");\n"
"            try (InputStream is = Files.newInputStream(trustStorePath)) {\n"
"                truststore.load(is, keyStorePass.toCharArray());\n"
"            }\n"
"            SSLContextBuilder sslBuilder = SSLContexts.custom()\n"
"                    .loadTrustMaterial(truststore, null);\n"
"            SSLContext sslContext = sslBuilder.build();\n"
"            httpClientBuilder.setSSLContext(sslContext);\n"
"        } catch (Exception e) {\n"
"            throw new RuntimeException(e);\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:321
#, no-wrap
msgid ""
"        return httpClientBuilder;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:323
msgid "See https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/_encrypted_communication.html[Elasticsearch documentation] for more details on this particular example."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/elasticsearch.adoc:328
msgid "Classes marked with `@ElasticsearchClientConfig` are made application scoped CDI beans by default.  You can override the scope at the class level if you prefer a different scope."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/elasticsearch.adoc:330
#, no-wrap
msgid "Running an Elasticsearch cluster"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:334
msgid "As by default, the Elasticsearch client is configured to access a local Elasticsearch cluster on port 9200 (the default Elasticsearch port), if you have a local running instance on this port, there is nothing more to do before being able to test it!"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:336
msgid "If you want to use Docker to run an Elasticsearch instance, you can use the following command to launch one:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:341
#, no-wrap
msgid ""
"docker run --name elasticsearch  -e \"discovery.type=single-node\" -e \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\\\n"
"       --rm -p 9200:9200 {elasticsearch-image}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/elasticsearch.adoc:343
#, no-wrap
msgid "Running the application"
msgstr "运行应用程序"

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:346
msgid "Now let's run our application via Quarkus dev mode:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:353
msgid "You can add new fruits to the list via the following curl command:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:357
#, no-wrap
msgid "curl localhost:8080/fruits -d '{\"name\": \"bananas\", \"color\": \"yellow\"}' -H \"Content-Type: application/json\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:360
msgid "And search for fruits by name or color via the flowing curl command:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:364
#, no-wrap
msgid "curl localhost:8080/fruits/search?color=yellow\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/elasticsearch.adoc:366
#, no-wrap
msgid "Using the High Level REST Client"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:369
msgid "Quarkus provides support for the Elasticsearch High Level REST Client but keep in mind that it comes with some caveats:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:371
msgid "It drags a lot of dependencies - especially Lucene -, which doesn't fit well with Quarkus philosophy. The Elasticsearch team is aware of this issue and it might improve sometime in the future."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:372
msgid "It is tied to a certain version of the Elasticsearch server: you cannot use a High Level REST Client version 7 to access a server version 6."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/elasticsearch.adoc:378
msgid "Due to the license change made by Elastic for the Elasticsearch High Level REST Client, we are keeping in Quarkus the last Open Source version of this particular client, namely 7.10, and it won't be upgraded to newer versions."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/elasticsearch.adoc:381
msgid "Given this client was deprecated by Elastic and replaced by a new Open Source Java client, the Elasticsearch High Level REST Client extension is considered deprecated and will be removed from the Quarkus codebase at some point in the future."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/elasticsearch.adoc:387
msgid "Note that contrary to the High Level REST client, we are using the latest version of the Low Level REST client (which is still Open Source), and, while we believe it should work, the situation is less than ideal and might cause some issues.  Feel free to override the versions of the clients in your applications depending on your requirements, but be aware of https://www.elastic.co/blog/elastic-license-v2[the new licence of the High Level REST Client] for versions 7.11+: it is not Open Source and has several usage restrictions."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/elasticsearch.adoc:390
msgid "We will eventually provide an extension for the new Open Source Java client but it will require changes in your applications as it is an entirely new client."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:393
msgid "Here is a version of the `FruitService` using the high level client instead of the low level one:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:415
#, no-wrap
msgid ""
"import org.elasticsearch.action.get.GetRequest;\n"
"import org.elasticsearch.action.get.GetResponse;\n"
"import org.elasticsearch.action.index.IndexRequest;\n"
"import org.elasticsearch.action.search.SearchRequest;\n"
"import org.elasticsearch.action.search.SearchResponse;\n"
"import org.elasticsearch.client.RequestOptions;\n"
"import org.elasticsearch.client.RestHighLevelClient;\n"
"import org.elasticsearch.common.xcontent.XContentType;\n"
"import org.elasticsearch.index.query.QueryBuilders;\n"
"import org.elasticsearch.search.SearchHit;\n"
"import org.elasticsearch.search.SearchHits;\n"
"import org.elasticsearch.search.builder.SearchSourceBuilder;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:417
#, no-wrap
msgid "import io.vertx.core.json.JsonObject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:422
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class FruitService {\n"
"    @Inject\n"
"    RestHighLevelClient restHighLevelClient; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:429
#, no-wrap
msgid ""
"    public void index(Fruit fruit) throws IOException {\n"
"        IndexRequest request = new IndexRequest(\"fruits\"); // <2>\n"
"        request.id(fruit.id);\n"
"        request.source(JsonObject.mapFrom(fruit).toString(), XContentType.JSON); // <3>\n"
"        restHighLevelClient.index(request, RequestOptions.DEFAULT); // <4>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:440
#, no-wrap
msgid ""
"    public Fruit get(String id) throws IOException {\n"
"        GetRequest getRequest = new GetRequest(\"fruits\", id);\n"
"        GetResponse getResponse = restHighLevelClient.get(getRequest, RequestOptions.DEFAULT);\n"
"        if (getResponse.isExists()) {\n"
"            String sourceAsString = getResponse.getSourceAsString();\n"
"            JsonObject json = new JsonObject(sourceAsString); // <5>\n"
"            return json.mapTo(Fruit.class);\n"
"        }\n"
"        return null;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:454
#, no-wrap
msgid ""
"    private List<Fruit> search(String term, String match) throws IOException {\n"
"        SearchRequest searchRequest = new SearchRequest(\"fruits\");\n"
"        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n"
"        searchSourceBuilder.query(QueryBuilders.matchQuery(term, match));\n"
"        searchRequest.source(searchSourceBuilder);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:466
#, no-wrap
msgid ""
"        SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n"
"        SearchHits hits = searchResponse.getHits();\n"
"        List<Fruit> results = new ArrayList<>(hits.getHits().length);\n"
"        for (SearchHit hit : hits.getHits()) {\n"
"            String sourceAsString = hit.getSourceAsString();\n"
"            JsonObject json = new JsonObject(sourceAsString);\n"
"            results.add(json.mapTo(Fruit.class));\n"
"        }\n"
"        return results;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:471
msgid "We inject an Elasticsearch `RestHighLevelClient` inside the service."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:472
msgid "We create an Elasticsearch index request."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:474
msgid "We send the request to Elasticsearch."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/elasticsearch.adoc:476
#, no-wrap
msgid "Hibernate Search Elasticsearch"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:479
msgid "Quarkus supports Hibernate Search with Elasticsearch via the `hibernate-search-orm-elasticsearch` extension."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:481
msgid "Hibernate Search Elasticsearch allows to synchronize your JPA entities to an Elasticsearch cluster and offers a way to query your Elasticsearch cluster using the Hibernate Search API."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:483
msgid "If you're interested in it, you can read the xref:hibernate-search-orm-elasticsearch.adoc[Hibernate Search with Elasticsearch guide]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/elasticsearch.adoc:484
#, no-wrap
msgid "Cluster Health Check"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:488
msgid "If you are using the `quarkus-smallrye-health` extension, both the extension will automatically add a readiness health check to validate the health of the cluster."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:491
msgid "So when you access the `/q/health/ready` endpoint of your application you will have information about the cluster status.  It uses the cluster health endpoint, the check will be down if the status of the cluster is **red**, or the cluster is not available."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:493
msgid "This behavior can be disabled by setting the `quarkus.elasticsearch.health.enabled` property to `false` in your `application.properties`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/elasticsearch.adoc:494
#, no-wrap
msgid "Building a native executable"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:497
msgid "You can use both clients in a native executable."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:499
msgid "You can build a native executable with the usual command:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:503
msgid "Running it is as simple as executing `./target/elasticsearch-low-level-client-quickstart-1.0.0-SNAPSHOT-runner`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:505
msgid "You can then point your browser to `http://localhost:8080/fruits.html` and use your application."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/elasticsearch.adoc:506
#, no-wrap
msgid "Conclusion"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:509
msgid "Accessing an Elasticsearch cluster from a low level or a high level client is easy with Quarkus as it provides easy configuration, CDI integration and native support for it."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/elasticsearch.adoc:510
#, no-wrap
msgid "Configuration Reference"
msgstr "配置参考"
