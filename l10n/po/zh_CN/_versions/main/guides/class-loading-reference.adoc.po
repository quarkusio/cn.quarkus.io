# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-06-07 02:38+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/class-loading-reference.adoc:6
#, no-wrap
msgid "Class Loading Reference"
msgstr "类加载参考"

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:12
msgid "This document explains the Quarkus class loading architecture. It is intended for extension authors and advanced users who want to understand exactly how Quarkus works."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:18
msgid "The Quarkus class loading architecture is slightly different depending on the mode that the application is run in. When running a production application everything is loaded in the system ClassLoader, so it is a completely flat class path. This also applies to native image mode which does not really support multiple ClassLoaders, and is based on a normal production Quarkus application."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:21
msgid "For all other use cases (e.g. tests, dev mode, and building the application) Quarkus uses the class loading architecture outlined here."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/class-loading-reference.adoc:23
#, no-wrap
msgid "Bootstrapping Quarkus"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:29
msgid "All Quarkus applications are created by the QuarkusBootstrap class in the `independent-projects/bootstrap` module. This class is used to resolve all the relevant dependencies (both deployment and runtime) that are needed for the Quarkus application. The end result of this process is a `CuratedApplication`, which contains all the class loading information for the application."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:33
msgid "The `CuratedApplication` can then be used to create an `AugmentAction` instance, which can create production application and start/restart runtime ones. This application instance exists within an isolated ClassLoader, it is not necessary to have any of the Quarkus deployment classes on the class path as the curate process will resolve them for you."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:35
msgid "This bootstrap process should be the same no matter how Quarkus is launched, just with different parameters passed in."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/class-loading-reference.adoc:36
#, no-wrap
msgid "Current Run Modes"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:39
msgid "At the moment we have the following use cases for bootstrapping Quarkus:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:41
msgid "Maven creating production application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:42
msgid "Maven dev mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:43
msgid "Gradle creating a production application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:44
msgid "Gradle dev mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:45
msgid "QuarkusTest (Maven, Gradle and IDE)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:46
msgid "QuarkusUnitTest (Maven, Gradle and IDE)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:47
msgid "QuarkusDevModeTest (Maven, Gradle and IDE)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:48
msgid "Arquillian Adaptor"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:50
msgid "One of the goals of this refactor is to have all these different run modes boot Quarkus in fundamentally the same way."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/class-loading-reference.adoc:51
#, no-wrap
msgid "Notes on Transformer Safety"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:57
msgid "A ClassLoader is said to be 'transformer safe' if it is safe to load classes in the class loader before the transformers are ready. Once a class has been loaded it cannot be changed, so if a class is loaded before the transformers have been prepared this will prevent the transformation from working. Loading classes in a transformer safe ClassLoader will not prevent the transformation, as the loaded class is not used at runtime."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/class-loading-reference.adoc:58
#, no-wrap
msgid "ClassLoader Implementations"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:61
msgid "Quarkus has the following ClassLoaders:"
msgstr ""

#. type: Labeled list
#: upstream/_versions/main/guides/class-loading-reference.adoc:62
#, no-wrap
msgid "Base ClassLoader"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:66
msgid "This is usually the normal JVM System ClassLoader. In some environments such as Maven it may be different. This ClassLoader is used to load the bootstrap classes, and other ClassLoader instances will delegate the loading of JDK classes to it."
msgstr ""

#. type: Labeled list
#: upstream/_versions/main/guides/class-loading-reference.adoc:67
#, no-wrap
msgid "Augment ClassLoader"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:73
msgid "This loads all the `-deployment` artifacts and their dependencies, as well as other user dependencies. It does not load the application root or any hot deployed code. This ClassLoader is persistent, even if the application restarts it will remain (which is why it cannot load application classes that may be hot deployed). Its parent is the base ClassLoader, and it is transformer safe."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:77
msgid "At present this can be configured to delegate to the Base ClassLoader, however the plan is for this option to go away and always have this as an isolated ClassLoader. Making this an isolated ClassLoader is complicated as it means that all the builder classes are isolated, which means that use cases that want to customise the build chains are slightly more complex."
msgstr ""

#. type: Labeled list
#: upstream/_versions/main/guides/class-loading-reference.adoc:78
#, no-wrap
msgid "Deployment ClassLoader"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:81
msgid "This can load all application classes, its parent is the Augment ClassLoader so it can also load all deployment classes."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:84
msgid "This ClassLoader is non-persistent, it will be re-created when the application is started, and is isolated. This ClassLoader is the context ClassLoader that is used when running the build steps. It is also transformer safe."
msgstr ""

#. type: Labeled list
#: upstream/_versions/main/guides/class-loading-reference.adoc:85
#, no-wrap
msgid "Base Runtime ClassLoader"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:91
msgid "This loads all the runtime extension dependencies, as well as other user dependencies (note that this may include duplicate copies of classes also loaded by the Augment ClassLoader). It does not load the application root or any hot deployed code. This ClassLoader is persistent, even if the application restarts it will remain (which is why it cannot load application classes that may be hot deployed). Its parent is the base ClassLoader."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:98
msgid "This loads code that is not hot-reloadable, but it does support transformation (although once the class is loaded this transformation is no longer possible). This means that only transformers registered in the first application start will take effect, however as these transformers are expected to be idempotent this should not cause problems. An example of the sort of transformation that might be required here is a Panache entity packaged in an external jar. This class needs to be transformed to have its static methods implemented, however this transformation only happens once, so restarts use the copy of the class that was created on the first start."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:102
msgid "This ClassLoader is isolated from the Augment and Deployment ClassLoaders. This means that it is not possible to set values in a static field in the deployment side, and expect to read it at runtime. This allows dev and test applications to behave more like a production application (production applications are isolated in that they run in a whole new JVM)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:105
msgid "This also means that the runtime version can be linked against a different set of dependencies, e.g. the hibernate version used at deployment time might want to include ByteBuddy, while the version used at runtime does not."
msgstr ""

#. type: Labeled list
#: upstream/_versions/main/guides/class-loading-reference.adoc:106
#, no-wrap
msgid "Runtime Class Loader"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:110
msgid "This ClassLoader is used to load the application classes and other hot deployable resources. Its parent is the base runtime ClassLoader, and it is recreated when the application is restarted."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/class-loading-reference.adoc:112
#, no-wrap
msgid "Isolated ClassLoaders"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:116
msgid "The runtime ClassLoader is always isolated. This means that it will have its own copies of almost every class from the resolved dependency list. The exception to this are:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:118
msgid "JDK classes"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:119
msgid "Classes from artifacts that extensions have marked as parent first (more on this later)."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/class-loading-reference.adoc:120
#, no-wrap
msgid "Parent First Dependencies"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:125
msgid "There are some classes that should not be loaded in an isolated manner, but that should always be loaded by the system ClassLoader (or whatever ClassLoader is responsible for bootstrapping Quarkus). Most extensions do not need to worry about this, however there are a few cases where this is necessary:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:127
msgid "Some logging related classes, as logging must be loaded by the system ClassLoader"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:128
msgid "Quarkus bootstrap itself"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:132
msgid "If this is required it can be configured in the `quarkus-extension-maven-plugin`. Note that if you mark a dependency as parent first then all of its dependencies must also be parent first, or a `LinkageError` can occur."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/class-loading-reference.adoc:148
#, no-wrap
msgid ""
"<plugin>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-extension-maven-plugin</artifactId>\n"
"    <configuration>\n"
"        <parentFirstArtifacts>\n"
"            <parentFirstArtifact>io.quarkus:quarkus-bootstrap-core</parentFirstArtifact>\n"
"            <parentFirstArtifact>io.quarkus:quarkus-development-mode-spi</parentFirstArtifact>\n"
"            <parentFirstArtifact>org.jboss.logmanager:jboss-logmanager-embedded</parentFirstArtifact>\n"
"            <parentFirstArtifact>org.jboss.logging:jboss-logging</parentFirstArtifact>\n"
"            <parentFirstArtifact>org.ow2.asm:asm</parentFirstArtifact>\n"
"        </parentFirstArtifacts>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/class-loading-reference.adoc:150
#, no-wrap
msgid "Banned Dependencies"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:158
msgid "There are some dependencies that we can be sure we do not want. This generally happens when a dependency has had a name change (e.g. smallrye-config changing groups from `org.smallrye` to `org.smallrye.config`, the `javax` -> `jakarta` rename).  This can cause problems, as if these artifacts end up in the dependency tree out of date classes can be loaded that are not compatible with Quarkus. To deal with this extensions can specify artifacts that should never be loaded. This is done by modifying the `quarkus-extension-maven-plugin` config in the pom (which generates the `quarkus-extension.properties` file). Simply add an `excludedArtifacts` section as shown below:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/class-loading-reference.adoc:171
#, no-wrap
msgid ""
"<plugin>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-extension-maven-plugin</artifactId>\n"
"    <configuration>\n"
"        <excludedArtifacts>\n"
"            <excludedArtifact>io.smallrye:smallrye-config</excludedArtifact>\n"
"            <excludedArtifact>javax.enterprise:cdi-api</excludedArtifact>\n"
"        </excludedArtifacts>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:175
msgid "This should only be done if the extension depends on a newer version of these artifacts. If the extension does not bring in a replacement artifact as a dependency then classes the application needs might end up missing."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/class-loading-reference.adoc:176
#, no-wrap
msgid "Configuring Class Loading"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:181
msgid "It is possible to configure some aspects of class loading in dev and test mode. This can be done using `application.properties`.  Note that class loading config is different to normal config, in that it does not use the standard Quarkus config mechanisms (as it is needed too early), so only supports `application.properties`. The following options are supported."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/class-loading-reference.adoc:185
#, no-wrap
msgid "Hiding/Removing classes and resources from dependencies"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:189
msgid "It is possible to hide/remove classes and resources from dependencies. This is an advanced option, but it can be useful at times. This is done via the `quarkus.class-loading.removed-resources` config key, for example:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:191
msgid "`quarkus.class-loading.removed-resources.\"io.quarkus\\:quarkus-integration-test-shared-library\"=io/quarkus/it/shared/RemovedResource.class`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:193
msgid "This will remove the `RemovedResource.class` file from the `io.quarkus:quarkus-integration-test-shared-library` artifact."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:196
msgid "Even though this option is a class loading option it will also affect the generated application, so when the application is created removed resources will not be accessible."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/class-loading-reference.adoc:197
#, no-wrap
msgid "Reading Class Bytecode"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:201
msgid "It is important to use the correct `ClassLoader`. The recommended approach is to get it by calling the `Thread.currentThread().getContextClassLoader()` method."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/class-loading-reference.adoc:203
msgid "Example:"
msgstr "例如："

#. type: delimited block -
#: upstream/_versions/main/guides/class-loading-reference.adoc:215
#, no-wrap
msgid ""
"@BuildStep\n"
"GeneratedClassBuildItem instrument(final CombinedIndexBuildItem index) {\n"
"    final String classname = \"com.example.SomeClass\";\n"
"    final ClassLoader cl = Thread.currentThread().getContextClassLoader();\n"
"    final byte[] originalBytecode = IoUtil.readClassAsBytes(cl, classname);\n"
"    final byte[] enhancedBytecode = ... // class instrumentation from originalBytecode\n"
"    return new GeneratedClassBuildItem(true, classname, enhancedBytecode));\n"
"}\n"
msgstr ""
