msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "Generating CycloneDX BOMs"
msgstr "生成 CycloneDX BOM"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid ""
"An SBOM (Software Bill of Material) is a manifest that describes what a given software distribution consists of in terms of components. In addition to that, it may include a lot more information such as relationships between those components, licenses, provenance, etc.\n"
"SBOMs would typically be used by software security and software supply chain risk management tools to perform vulnerability and compliance related analysis."
msgstr "SBOM（软件物料清单）是一种清单，它以组件的形式描述了特定软件发行版的组成。除此之外，它还可能包含更多信息，如这些组件之间的关系、许可证、出处等。软件安全和软件供应链风险管理工具通常会使用 SBOM 来执行漏洞和合规性相关分析。"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "This guide describes Quarkus SBOM generation capabilities following https://cyclonedx.org/[CycloneDX] specification."
msgstr "本指南介绍了 Quarkus 按照 link:https://cyclonedx.org/[CycloneDX] 规范生成 SBOM 的功能。"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "Why Quarkus-specific tooling?"
msgstr "为什么要使用 Quarkus 专用工具？"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "While Quarkus integrates with build tools such as https://maven.apache.org/[Maven] and https://gradle.org/[Gradle], it could itself be categorized as a build tool with its own component and dependency model, build steps, and build outcomes. One of the essential component types of a Quarkus application is a Quarkus extension, which consists of a runtime and a build time artifacts, and their dependencies."
msgstr "尽管 Quarkus 与 link:https://maven.apache.org/[Maven] 和 link:https://gradle.org/[Gradle] 等构建工具集成，但它本身也可以归类为一种构建工具，拥有自己的组件和依赖模型、构建步骤和构建结果。Quarkus 应用程序的基本组件类型之一是 Quarkus 扩展，它由运行时和构建时工件及其依赖关系组成。"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "To properly resolve Quarkus extension and other application dependencies Quarkus uses its own dependency resolver, which is implemented on top of the dependency resolver provided by the underlying build tool: Maven or Gradle."
msgstr "为了正确解析 Quarkus 扩展和其他应用程序的依赖关系，Quarkus 使用了自己的依赖关系解析器，该解析器是在底层构建工具提供的依赖关系解析器之上实现的：Maven 或 Gradle。"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "As a consequence, in case of Maven, for example, the results of `dependency:tree` will not include all the dependencies Quarkus will use to build an application. A similar issue will affect other dependency analysis tools that assume a project adheres to the standard Maven dependency model: they will not be able to capture the effective Quarkus application dependency graph. Unfortunately, that includes the implementation of the https://github.com/CycloneDX/cyclonedx-maven-plugin[CycloneDX Maven plugin]."
msgstr "因此，以 Maven 为例， `dependency:tree` 的结果将不包括 Quarkus 用于构建应用程序的所有依赖关系。类似的问题也会影响其他假定项目遵循标准 Maven 依赖关系模型的依赖关系分析工具：它们将无法捕获有效的 Quarkus 应用程序依赖关系图。不幸的是，这包括 link:https://github.com/CycloneDX/cyclonedx-maven-plugin[CycloneDX Maven 插件] 的实现。"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "Besides the dependencies, that are an input to a build process, there is also an outcome of the build that is the final distribution of an application. Users of an application may request an SBOM manifesting not only the dependencies (the input to a build) but also the final distribution (the outcome of the build) before they agree to deploy the application. Quarkus allows application developers to choose various packaging types for their applications, some of which are Quarkus-specific. Providing certain Quarkus-specific details about components included in a distribution may help better evaluate the impact of potential security-related issues."
msgstr "除了作为构建过程输入的依赖项之外，还有构建的结果，即应用程序的最终发布。应用程序的用户在同意部署应用程序之前，不仅可以要求 SBOM 体现依赖关系（构建过程的输入），还可以要求 SBOM 体现最终发布（构建的结果）。Quarkus 允许应用程序开发人员为其应用程序选择各种打包类型，其中一些是 Quarkus 特有的。提供发行版中包含的组件的某些特定 Quarkus 细节，有助于更好地评估潜在安全相关问题的影响。"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "Dependency SBOMs"
msgstr "依赖 SBOM"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "This chapter describes how to generate SBOMs manifesting only the dependencies of an application before it is built. In other words, these SBOMs will manifest the input into a build. These SBOMs could be used to perform vulnerability and compliance related analysis before building applications."
msgstr "本章将介绍如何在构建应用程序之前生成 SBOM，这些 SBOM 只显示应用程序的依赖关系。换句话说，这些 SBOM 会将输入内容体现到构建中。这些 SBOM 可用于在构建应用程序前执行与漏洞和合规性相关的分析。"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "Maven Dependency SBOMs"
msgstr "Maven 依赖 SBOM"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "For Quarkus Maven projects dependency SBOMs can be generated with the `quarkus:dependency-sbom` goal. The outcome of the goal will be saved in a `target/<artifactId>-<version>-dependency-cyclonedx.json` file (which can be changed by setting the `outputFile` goal parameter or the `quarkus.dependency.sbom.output-file` property). The complete Quarkus build and runtime dependency graphs will be recorded in the https://cyclonedx.org/[CycloneDX] `JSON` format."
msgstr "对于 Quarkus Maven 项目，依赖 SBOM 可通过 `quarkus:dependency-sbom` 目标生成。目标的结果将保存在 `target/<artifactId>-<version>-dependency-cyclonedx.json` 文件中（可通过设置 `outputFile` 目标参数或 `quarkus.dependency.sbom.output-file` 属性进行更改）。完整的 Quarkus 构建和运行时依赖关系图将以 link:https://cyclonedx.org/[CycloneDX] `JSON` 格式记录。"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "`XML` format can be requested by setting `format` goal parameter (or `quarkus.dependency.sbom.format` property) to `xml`."
msgstr "`XML` 可通过将 目标参数（或 属性）设置为 来请求格式。 `format` `quarkus.dependency.sbom.format` `xml`"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "Each component in the generated SBOM will include the `quarkus:component:scope` property that will indicate whether this component is used at runtime or only development/build time."
msgstr "生成的 SBOM 中的每个组件都将包含 `quarkus:component:scope` 属性，该属性将指示该组件是在运行时使用还是仅在开发/构建时使用。"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "By default, `quarkus:dependency-sbom` captures the dependencies of a production build. Quarkus supports three application bootstrap modes: normal (production), test, and dev. In all three modes, an application may have different dependency graphs. The `mode` parameter can be used to indicate which dependency graph should be recorded. If the `mode` is set to `test` or `dev`, the target file name will become `target/<artifactId>-<version>-<mode>-dependency-cyclonedx.json`."
msgstr "默认情况下， `quarkus:dependency-sbom` 会捕获生产构建的依赖关系。Quarkus 支持三种应用程序引导模式：正常（生产）、测试和开发。在这三种模式下，应用程序可能有不同的依赖关系图。 `mode` 参数可用于指示应记录哪个依赖关系图。如果 `mode` 设置为 `test` 或 `dev` ，目标文件名将变为 `target/<artifactId>-<version>-<mode>-dependency-cyclonedx.json` 。"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "The complete set of parameters and their description can be obtained by executing `mvn help:describe -Dcmd=quarkus:dependency-sbom -Ddetail`."
msgstr "全套参数及其说明可通过执行 `mvn help:describe -Dcmd=quarkus:dependency-sbom -Ddetail` 获取。"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "Gradle Dependency SBOMs"
msgstr "Gradle 依赖关系 SBOM"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "Unlike Maven, the https://github.com/CycloneDX/cyclonedx-gradle-plugin[Gradle CycloneDX plugin implementation] can be used in Quarkus projects to generate dependency SBOMs, since the implementation manifests dependency configurations registered by configured plugins."
msgstr "与 Maven 不同， link:https://github.com/CycloneDX/cyclonedx-gradle-plugin[Gradle CycloneDX 插件实现] 可在 Quarkus 项目中用于生成依赖关系 SBOM，因为该实现会显示由已配置插件注册的依赖关系配置。"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "Please, refer to the https://github.com/CycloneDX/cyclonedx-gradle-plugin[Gradle CycloneDX plugin] documentation for its configuration options. Here is a list of Quarkus dependency configurations that would be relevant for manifesting:"
msgstr "有关配置选项，请参阅 link:https://github.com/CycloneDX/cyclonedx-gradle-plugin[Gradle CycloneDX 插件] 文档。以下是与清单相关的 Quarkus 依赖关系配置列表："

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "`quarkusProdRuntimeClasspathConfiguration` - Quarkus application production runtime dependencies;"
msgstr "`quarkusProdRuntimeClasspathConfiguration` - Quarkus 应用程序生产运行时的依赖关系；"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "`quarkusProdRuntimeClasspathConfigurationDeployment` - Quarkus application production runtime and build time dependencies;"
msgstr "`quarkusProdRuntimeClasspathConfigurationDeployment` - Quarkus 应用程序生产运行时和构建时的依赖关系；"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "`quarkusTestRuntimeClasspathConfiguration` - Quarkus application test runtime dependencies;"
msgstr "`quarkusTestRuntimeClasspathConfiguration` - Quarkus 应用程序测试运行时依赖项；"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "`quarkusTestRuntimeClasspathConfigurationDeployment` - Quarkus application test runtime and build time dependencies;"
msgstr "`quarkusTestRuntimeClasspathConfigurationDeployment` - Quarkus 应用程序测试运行时和构建时的依赖关系；"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "`quarkusDevRuntimeClasspathConfiguration` - Quarkus application dev mode runtime dependencies;"
msgstr "`quarkusDevRuntimeClasspathConfiguration` - Quarkus 应用程序开发模式运行时依赖项；"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "`quarkusDevRuntimeClasspathConfigurationDeployment` - Quarkus application dev mode runtime and build time dependencies."
msgstr "`quarkusDevRuntimeClasspathConfigurationDeployment` - Quarkus 应用程序开发模式运行时和构建时的依赖关系。"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "Given that the plugin is not aware of how Quarkus uses these dependencies, it will not be able to set the `quarkus:component:scope` property for components. On the other hand, the requested configuration name can be used indicate which scope to target."
msgstr "由于插件不知道 Quarkus 如何使用这些依赖关系，因此无法为组件设置 `quarkus:component:scope` 属性。另一方面，所请求的配置名称可以用来指明要针对哪个作用域。"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "Distribution SBOMs"
msgstr "分配 SBOM"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "This chapter describes SBOMs that manifest outcomes of Quarkus builds that are final application distributions."
msgstr "本章介绍的 SBOM 体现了 Quarkus 构建的结果，即最终的应用程序发布版本。"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "During an application build and package assembly process, Quarkus captures certain details about the produced distribution and then allows an SBOM generator to consume and record that information in an SBOM format."
msgstr "在应用程序构建和软件包组装过程中，Quarkus 会捕捉所生成发行版的某些细节，然后允许 SBOM 生成器以 SBOM 格式消费和记录这些信息。"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "At this point, the only SBOM generator available for Quarkus users that can manifest application distributions is `io.quarkus:quarkus-cyclonedx`. Once it's added as a project dependency it will generate SBOMs every time an application is built. SBOMs will be saved in the project's build output directory under `<executable-name>-cyclonedx.<format>` name, where"
msgstr "目前，Quarkus 用户可以使用的、唯一可以表现应用程序发行版的 SBOM 生成器是 `io.quarkus:quarkus-cyclonedx` 。一旦将其添加为项目依赖项，它将在每次构建应用程序时生成 SBOM。SBOM 将保存在项目的构建输出目录 `<executable-name>-cyclonedx.<format>` 下，其中包括"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "`<executable-name>` is the base file name (without the extension) of the executable that launches an application;"
msgstr "`<executable-name>` 是启动应用程序的可执行文件的基本文件名（不含扩展名）；"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "`<format>` is either `json` (the default) or `xml`, which can be configured using `quarkus.cyclonedx.format` property. If both formats are desired `quarkus.cyclonedx.format` can be set to `all`."
msgstr "`<format>` 是 （默认）或 ，可使用 属性进行配置。如果两种格式都需要， 可以设置为 。 `json` `xml` `quarkus.cyclonedx.format` `quarkus.cyclonedx.format` `all`"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "Fast JAR"
msgstr "快速 JAR"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "Fast JAR packaging uses a Quarkus-specific filesystem directory layout that contains files generated by Quarkus and Maven artifacts that are runtime dependencies of an application."
msgstr "快速 JAR 打包使用 Quarkus 特有的文件系统目录布局，其中包含由 Quarkus 生成的文件和作为应用程序运行时依赖项的 Maven 工件。"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "SBOMs for Fast JAR packaging type will use the executable JAR file as their main component and record both runtime and build time Quarkus application dependencies."
msgstr "快速 JAR 打包类型的 SBOM 将使用可执行 JAR 文件作为其主要组件，并记录运行时和构建时的 Quarkus 应用程序依赖关系。"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "Runtime Components"
msgstr "运行时组件"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "Every file in the resulting Fast JAR distribution will appear in the SBOM with the `quarkus:component:scope` property set to `runtime` and `evidence.occurrences.location` field pointing to the location of the component in the application distribution directory, for example"
msgstr "生成的 Fast JAR 分发包中的每个文件都将出现在 SBOM 中，其 `quarkus:component:scope` 属性设置为 `runtime` ， `evidence.occurrences.location` 字段指向应用程序分发目录中组件的位置，例如"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "`evidence.occurrences.location` was introduced in CycloneDX schema version 1.5, for older versions the location will be indicated using the `quarkus:component:location` property."
msgstr "`evidence.occurrences.location` 是在 CycloneDX 模式 1.5 版本中引入的，对于旧版本，位置将使用 属性表示。 `quarkus:component:location` "

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "Pedigree"
msgstr "血统"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "Pedigree is a way to provide information that certain patches, or changes in general, have been applied to a certain component."
msgstr "Pedigree 是一种提供信息的方式，说明某些补丁或一般更改已应用于某个组件。"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "In certain cases, Quarkus may copy modified versions of dependency artifacts to an application distribution. Manipulating the original content of a component will change its hash sums which may get highlighted as suspicious by the tools comparing original component hash sums to those found in the distribution."
msgstr "在某些情况下，Quarkus 可能会将修改过的依赖工件拷贝到应用程序发行版中。修改组件的原始内容会改变其哈希总和，而将原始组件哈希总和与发行版中的哈希总和进行比较的工具可能会将其视为可疑内容。"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid ""
"When Quarkus applies modifications to artifacts resolved from Maven repositories, it can manifest these changes as pedigree notes in the generated SBOM.\n"
"For example, if an application developer decided to remove certain classpath resources from a dependency, such as"
msgstr "当 Quarkus 对从 Maven 资源库解析的工件进行修改时，它可以在生成的 SBOM 中将这些修改显示为血统注释。例如，如果应用程序开发人员决定从依赖关系中移除某些类路径资源，如"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "The resulting SBOM will include"
msgstr "由此产生的 SBOM 将包括"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "Build time dependencies"
msgstr "构建时间依赖性"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "Build time dependencies will be recorded with the `quarkus:component:scope` property set to `development`:"
msgstr "`quarkus:component:scope` 属性设置为 `development` 时，将记录构建时间依赖关系："

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "They will not include `evidence.occurrences.location` since they will not be found in the distribution."
msgstr "它们将不包括 `evidence.occurrences.location` ，因为它们不会出现在发行版中。"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "Uber JAR"
msgstr "Uber JAR"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "SBOMs for Uber JARs will use the Uber JAR Maven artifact as their main component."
msgstr "Uber JAR 的 SBOM 将使用 Uber JAR Maven 构件作为其主要组件。"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "Since an Uber JAR is published as a Maven artifact itself, SBOMs generated for Uber JARs will also be automatically published as Maven artifacts. This, however, can be disabled by setting the `attachSboms` parameter of the `quarkus:build` goal to `false`."
msgstr "由于 Uber JAR 本身就是作为 Maven 构件发布的，因此为 Uber JAR 生成的 SBOM 也会自动作为 Maven 构件发布。不过，可以通过将 `quarkus:build` 目标的 `attachSboms` 参数设置为 `false` 来禁用这一功能。"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "Gradle users will have to explicitly configure a publishing plugin to deploy SBOMs as Maven artifacts."
msgstr "Gradle 用户必须明确配置发布插件，才能将 SBOM 部署为 Maven 构件。"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "Runtime components in an SBOM generated for an Uber JAR will not include `evidence.occurrences.location` since their content is merged in a single JAR file."
msgstr "为 Uber JAR 生成的 SBOM 中的运行时组件将不包括 `evidence.occurrences.location` ，因为它们的内容合并在一个 JAR 文件中。"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "Native image"
msgstr "原生图像"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "SBOMs for native images will use the native executable file as their main component."
msgstr "本地图像的 SBOM 将使用本地可执行文件作为其主要组件。"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "Since native executables are not currently attached to projects as Maven artifacts, their SBOMs will not be attached as Maven artifacts either."
msgstr "由于本地可执行文件目前不会作为 Maven 构件附加到项目中，因此它们的 SBOM 也不会作为 Maven 构件附加到项目中。"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "As in the case of an Uber JAR, runtime components in an SBOM generated for an native executable will not include `evidence.occurrences.location` since their corresponding code and resources are included in a single native executable file."
msgstr "与 Uber JAR 的情况一样，为本地可执行文件生成的 SBOM 中的运行时组件将不包括 `evidence.occurrences.location` ，因为它们的相应代码和资源都包含在一个本地可执行文件中。"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "Mutable JAR"
msgstr "可变 JAR"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "Mutable JAR distribution is similar to the Fast JAR one except it also includes build time dependencies to support re-augmentation (re-building) of an application."
msgstr "可变 JAR 发行版与快速 JAR 发行版类似，不同之处在于它还包括构建时的依赖关系，以支持应用程序的重新分割（重新构建）。"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "SBOMs generated for Mutable JAR distributions will also record locations of components that will be used during re-augmentation process using `evidence.occurrences.location` but keeping their `quarkus:component:scope` property set to `development`. For example:"
msgstr "为可变 JAR 发行版生成的 SBOM 还将记录组件的位置，这些组件将在使用 `evidence.occurrences.location` 但将其 `quarkus:component:scope` 属性设置为 `development` 的重新补充过程中使用。例如"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "Quarkus Property Taxonomy"
msgstr "Quarkus 财产分类法"

#: _versions/main/guides/cyclonedx.adoc
msgid "Name"
msgstr "名称"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "Value range"
msgstr "数值范围"

#: _versions/main/guides/cyclonedx.adoc
msgid "Description"
msgstr "描述"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "`quarkus:component:scope`"
msgstr "`quarkus:component:scope`"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "`runtime` or `development`"
msgstr "`runtime` 或 `development`"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "Indicates whether a component is a runtime or a build/development time dependency of an application."
msgstr "表示组件是应用程序的运行时依赖项还是构建/开发时依赖项。"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "`quarkus:component:location`"
msgstr "`quarkus:component:location`"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "String representing a file system path using `/` as a path element"
msgstr "表示文件系统路径的字符串，使用 `/` 作为路径元素"

#: _versions/main/guides/cyclonedx.adoc
#, fuzzy
msgid "Used in SBOMs with schema versions 1.4 or older. Starting from schema 1.5, `evidence.occurrences.location` is used instead. This property is used only if a component is found in the distribution. The value is a relative path to a file pointing to the location of a component in a distribution using `/` as a path element separator."
msgstr "在模式 1.4 或更早版本的 SBOM 中使用。从模式 1.5 开始， `evidence.occurrences.location` 。该属性仅在组件出现在分发版中时使用。其值是一个文件的相对路径，指向组件在分发中的位置，使用 `/` 作为路径元素分隔符。"
