# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-06-17 02:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/reactive-event-bus.adoc:6
#, no-wrap
msgid "Using the event bus"
msgstr "使用事件总线"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:13
msgid "Quarkus allows different beans to interact using asynchronous events, thus promoting loose-coupling.  The messages are sent to _virtual addresses_.  It offers 3 types of delivery mechanism:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:15
msgid "point-to-point - send the message, one consumer receives it. If several consumers listen to the address, a round-robin is applied;"
msgstr "point-to-point - 发送消息，一个消费者接收。如果有几个消费者监听该地址，则采用轮流的方式；"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:16
msgid "publish/subscribe - publish a message, all the consumers listening to the address are receiving the message;"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:17
msgid "request/reply - send the message and expect a response. The receiver can respond to the message in an asynchronous-fashion"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:19
msgid "All these delivery mechanisms are non-blocking, and are providing one of the fundamental brick to build reactive applications."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:22
msgid "The asynchronous message passing feature allows replying to messages which is not supported by Reactive Messaging.  However, it is limited to single-event behavior (no stream) and to local messages."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/reactive-event-bus.adoc:23
#, no-wrap
msgid "Installing"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:27
msgid "This mechanism uses the Vert.x EventBus, so you need to enable the `vertx` extension to use this feature.  If you are creating a new project, set the `extensions` parameter are follows:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:34
msgid "If you have an already created project, the `vertx` extension can be added to an existing Quarkus project with the `add-extension` command:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:39
msgid "Otherwise, you can manually add this to the dependencies section of your build file:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/reactive-event-bus.adoc:41
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-event-bus.adoc:47
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-vertx</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/reactive-event-bus.adoc:50
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-event-bus.adoc:53
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-vertx\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/reactive-event-bus.adoc:55
#, no-wrap
msgid "Consuming events"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:58
msgid "To consume events, use the `io.quarkus.vertx.ConsumeEvent` annotation:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-event-bus.adoc:62
#: upstream/_versions/main/guides/reactive-event-bus.adoc:111
#: upstream/_versions/main/guides/reactive-event-bus.adoc:237
#: upstream/_versions/main/guides/reactive-event-bus.adoc:306
#: upstream/_versions/main/guides/reactive-event-bus.adoc:342
#, no-wrap
msgid "package org.acme.vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-event-bus.adoc:64
#: upstream/_versions/main/guides/reactive-event-bus.adoc:113
#: upstream/_versions/main/guides/reactive-event-bus.adoc:344
#, no-wrap
msgid "import io.quarkus.vertx.ConsumeEvent;\n"
msgstr "import io.quarkus.vertx.ConsumeEvent;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-event-bus.adoc:66
#: upstream/_versions/main/guides/reactive-event-bus.adoc:346
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-event-bus.adoc:69
#: upstream/_versions/main/guides/reactive-event-bus.adoc:121
#: upstream/_versions/main/guides/reactive-event-bus.adoc:349
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class GreetingService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-event-bus.adoc:75
#, no-wrap
msgid ""
"    @ConsumeEvent                           // <1>\n"
"    public String consume(String name) {    // <2>\n"
"        return name.toUpperCase();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:77
msgid "If not set, the address is the fully qualified name of the bean, for instance, in this snippet it's `org.acme.vertx.GreetingService`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:78
msgid "The method parameter is the message body. If the method returns _something_ it's the message response."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/reactive-event-bus.adoc:83
msgid "By default, the code consuming the event must be _non-blocking_, as it's called on the Vert.x event loop.  If your processing is blocking, use the `blocking` attribute:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-event-bus.adoc:90
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"blocking-consumer\", blocking = true)\n"
"void consumeBlocking(String message) {\n"
"    // Something blocking\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:93
msgid "Alternatively, you can annotate your method with `@io.smallrye.common.annotation.Blocking`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-event-bus.adoc:100
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"blocking-consumer\")\n"
"@Blocking\n"
"void consumeBlocking(String message) {\n"
"    // Something blocking\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:104
msgid "When using `@Blocking`, it ignores the value of the `blocking` attribute of `@ConsumeEvent`.  See the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture documentation] for further details on this topic."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/reactive-event-bus.adoc:107
msgid "Asynchronous processing is also possible by returning either an `io.smallrye.mutiny.Uni` or a `java.util.concurrent.CompletionStage`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-event-bus.adoc:118
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import java.util.concurrent.CompletableFuture;\n"
"import java.util.concurrent.CompletionStage;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-event-bus.adoc:127
#, no-wrap
msgid ""
"    @ConsumeEvent\n"
"    public CompletionStage<String> consume(String name) {\n"
"        // return a CompletionStage completed when the processing is finished.\n"
"        // You can also fail the CompletionStage explicitly\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-event-bus.adoc:134
#, no-wrap
msgid ""
"    @ConsumeEvent\n"
"    public Uni<String> process(String name) {\n"
"        // return an Uni completed when the processing is finished.\n"
"        // You can also fail the Uni explicitly\n"
"    }\n"
"}\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/reactive-event-bus.adoc:137
#, no-wrap
msgid "Mutiny"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/reactive-event-bus.adoc:141
msgid "The previous example uses Mutiny reactive types.  If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "前面的例子使用了Mutiny响应式类型。如果你不熟悉Mutiny，请查看 link:mutiny-primer.html[Mutiny - 一个直观的响应式编程库] 。"

#. type: Title ===
#: upstream/_versions/main/guides/reactive-event-bus.adoc:143
#, no-wrap
msgid "Configuring the address"
msgstr "配置地址"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:146
msgid "The `@ConsumeEvent` annotation can be configured to set the address:"
msgstr "可以配置 `@ConsumeEvent` 注解设置地址："

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-event-bus.adoc:153
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")               // <1>\n"
"public String consume(String name) {\n"
"    return name.toUpperCase();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:155
msgid "Receive the messages sent to the `greeting` address"
msgstr "接收发送到 `greeting` 地址的信息"

#. type: Title ===
#: upstream/_versions/main/guides/reactive-event-bus.adoc:156
#, no-wrap
msgid "Replying"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:160
msgid "The _return_ value of a method annotated with `@ConsumeEvent` is used as response to the incoming message.  For instance, in the following snippet, the returned `String` is the response."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-event-bus.adoc:167
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public String consume(String name) {\n"
"    return name.toUpperCase();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:170
msgid "You can also return a `Uni<T>` or a `CompletionStage<T>` to handle asynchronous reply:"
msgstr "你也可以返回一个 `Uni<T>` 或一个 `CompletionStage<T>` 来处理异步回复："

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-event-bus.adoc:177
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public Uni<String> consume2(String name) {\n"
"    return Uni.createFrom().item(() -> name.toUpperCase()).emitOn(executor);\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/reactive-event-bus.adoc:182
msgid "You can inject an `executor` if you use the Context Propagation extension:"
msgstr "如果你使用Context Propagation扩展，你可以注入一个 `executor` ："

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-event-bus.adoc:185
#, no-wrap
msgid "@Inject ManagedExecutor executor;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:188
msgid "Alternatively, you can use the default Quarkus worker pool using:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-event-bus.adoc:192
#, no-wrap
msgid "Executor executor = Infrastructure.getDefaultWorkerPool();\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-event-bus.adoc:195
#, no-wrap
msgid "Implementing fire and forget interactions"
msgstr "实现即发即弃（fire and forget）交互"

#. type: delimited block =
#: upstream/_versions/main/guides/reactive-event-bus.adoc:200
msgid "You don't have to reply to received messages.  Typically, for a _fire and forget_ interaction, the messages are consumed and the sender does not need to know about it.  To implement this, your consumer method just returns `void`"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-event-bus.adoc:207
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public void consume(String event) {\n"
"    // Do something with the event\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-event-bus.adoc:209
#, no-wrap
msgid "Dealing with messages"
msgstr "处理信息"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:212
msgid "As said above, this mechanism is based on the Vert.x event bus. So, you can also use `Message` directly:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-event-bus.adoc:220
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public void consume(Message<String> msg) {\n"
"    System.out.println(msg.address());\n"
"    System.out.println(msg.body());\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-event-bus.adoc:222
#, no-wrap
msgid "Handling Failures"
msgstr "处理故障"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:225
msgid "If a method annotated with `@ConsumeEvent` throws an exception then:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:227
msgid "if a reply handler is set then the failure is propagated back to the sender via an `io.vertx.core.eventbus.ReplyException` with code `ConsumeEvent#FAILURE_CODE` and the exception message,"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:228
msgid "if no reply handler is set then the exception is rethrown (and wrapped in a `RuntimeException` if necessary) and can be handled by the default exception handler, i.e. `io.vertx.core.Vertx#exceptionHandler()`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/reactive-event-bus.adoc:229
#, no-wrap
msgid "Sending messages"
msgstr "发送信息"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:233
msgid "Ok, we have seen how to receive messages, let's now switch to the _other side_: the sender.  Sending and publishing messages use the Vert.x event bus:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-event-bus.adoc:241
#: upstream/_versions/main/guides/reactive-event-bus.adoc:310
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.mutiny.core.eventbus.EventBus;\n"
"import io.vertx.mutiny.core.eventbus.Message;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-event-bus.adoc:247
#: upstream/_versions/main/guides/reactive-event-bus.adoc:316
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-event-bus.adoc:250
#: upstream/_versions/main/guides/reactive-event-bus.adoc:319
#, no-wrap
msgid ""
"@Path(\"/async\")\n"
"public class EventResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-event-bus.adoc:253
#, no-wrap
msgid ""
"    @Inject\n"
"    EventBus bus;                                       // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-event-bus.adoc:262
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"{name}\")\n"
"    public Uni<String> greeting(String name) {\n"
"        return bus.<String>request(\"greeting\", name)        // <2>\n"
"                .onItem().transform(Message::body);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:264
msgid "Inject the Event bus"
msgstr "注入事件总线"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:265
msgid "Send a message to the address `greeting`. Message payload is `name`"
msgstr "发送消息到地址 `greeting` 。消息的有效载荷是 `name` "

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:267
msgid "The `EventBus` object provides methods to:"
msgstr "`EventBus` 对象提供了以下方法："

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:269
msgid "`send` a message to a specific address - one single consumer receives the message."
msgstr "`send` 一个消息到一个特定的地址 - 单个消费者收到该消息。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:270
msgid "`publish` a message to a specific address - all consumers receive the messages."
msgstr "`publish` 向一个特定的地址发送消息--所有的消费者都会收到这些消息。"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:271
msgid "`send` a message and expect reply"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-event-bus.adoc:281
#, no-wrap
msgid ""
"// Case 1\n"
"bus.sendAndForget(\"greeting\", name)\n"
"// Case 2\n"
"bus.publish(\"greeting\", name)\n"
"// Case 3\n"
"Uni<String> response = bus.<String>request(\"address\", \"hello, how are you?\")\n"
"        .onItem().transform(Message::body);\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/reactive-event-bus.adoc:283
#, no-wrap
msgid "Putting things together - bridging HTTP and messages"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:289
msgid "Let's revisit a greeting HTTP endpoint and use asynchronous message passing to delegate the call to a separated bean.  It uses the request/reply dispatching mechanism.  Instead of implementing the business logic inside the JAX-RS endpoint, we are sending a message.  This message is consumed by another bean and the response is sent using the _reply_ mechanism."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:291
msgid "First create a new project using:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:297
msgid "You can already start the application in _dev mode_ using:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:301
msgid "Then, creates a new JAX-RS resource with the following content:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/reactive-event-bus.adoc:303
#, no-wrap
msgid "src/main/java/org/acme/vertx/EventResource.java"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-event-bus.adoc:322
#, no-wrap
msgid ""
"    @Inject\n"
"    EventBus bus;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-event-bus.adoc:331
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"{name}\")\n"
"    public Uni<String> greeting(String name) {\n"
"        return bus.<String>request(\"greeting\", name)            // <1>\n"
"                .onItem().transform(Message::body);            // <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:333
msgid "send the `name` to the `greeting` address and request a response"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:334
msgid "when we get the response, extract the body and send it to the user"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:337
msgid "If you call this endpoint, you will wait and get a timeout. Indeed, no one is listening.  So, we need a consumer listening on the `greeting` address. Create a `GreetingService` bean with the following content:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/reactive-event-bus.adoc:339
#, no-wrap
msgid "src/main/java/org/acme/vertx/GreetingService.java"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-event-bus.adoc:354
#, no-wrap
msgid ""
"    @ConsumeEvent(\"greeting\")\n"
"    public String greeting(String name) {\n"
"        return \"Hello \" + name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-event-bus.adoc:356
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:359
msgid "This bean receives the name, and returns the greeting message."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:361
msgid "Now, open your browser to http://localhost:8080/async/Quarkus, and you should see:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-event-bus.adoc:365
#, no-wrap
msgid "Hello Quarkus\n"
msgstr "Hello Quarkus\n"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:368
msgid "To better understand, let's detail how the HTTP request/response has been handled:"
msgstr "为了更好地理解，让我们详细介绍一下HTTP request/response 是如何被处理的："

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:370
msgid "The request is received by the `hello` method"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:371
msgid "a message containing the _name_ is sent to the event bus"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:372
msgid "Another bean receives this message and computes the response"
msgstr "另一个Bean收到这个消息，并计算出响应"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:373
msgid "This response is sent back using the reply mechanism"
msgstr "使用回复机制发回此响应"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:374
msgid "Once the reply is received by the sender, the content is written to the HTTP response"
msgstr "一旦发送方收到回复，会将内容写入 HTTP 响应"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:376
msgid "This application can be packaged using:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:380
msgid "You can also compile it as a native executable with:"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/reactive-event-bus.adoc:383
#, no-wrap
msgid "Using codecs"
msgstr "使用编解码器"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:388
msgid "The https://vertx.io/docs/vertx-core/java/#event_bus[Vert.x Event Bus] uses codecs to _serialize_ and _deserialize_ objects.  Quarkus provides a default codec for local delivery.  So you can exchange objects as follows:"
msgstr "link:https://vertx.io/docs/vertx-core/java/#event_bus[Vert.x事件总线] 使用编解码器来 _序列化_ 和 _反序列化_ 对象。Quarkus为本地交付提供了一个默认的编解码器。所以你可以按以下方式交换对象："

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-event-bus.adoc:398
#, no-wrap
msgid ""
"@GET\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"@Path(\"{name}\")\n"
"public Uni<String> greeting(String name) {\n"
"    return bus.<String>request(\"greeting\", new MyName(name))\n"
"        .onItem().transform(Message::body);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-event-bus.adoc:403
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"greeting\")\n"
"Uni<String> greeting(MyName name) {\n"
"    return Uni.createFrom().item(() -> \"Hello \" + name.getName());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:406
msgid "If you want to use a specific codec, you need to explicitly set it on both ends:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-event-bus.adoc:417
#, no-wrap
msgid ""
"@GET\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"@Path(\"{name}\")\n"
"public Uni<String> greeting(String name) {\n"
"    return bus.<String>request(\"greeting\", name,\n"
"        new DeliveryOptions().setCodecName(MyNameCodec.class.getName())) // <1>\n"
"        .onItem().transform(Message::body);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-event-bus.adoc:422
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"greeting\", codec = MyNameCodec.class)            // <2>\n"
"Uni<String> greeting(MyName name) {\n"
"    return Uni.createFrom().item(() -> \"Hello \"+name.getName());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:424
msgid "Set the name of the codec to use to send the message"
msgstr "设置用于发送消息的编解码器的名称"

#. type: Plain text
#: upstream/_versions/main/guides/reactive-event-bus.adoc:424
msgid "Set the codec to use to receive the message"
msgstr "设置用于接收信息的编解码器"
