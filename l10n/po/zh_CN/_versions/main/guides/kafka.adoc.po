# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-05-12 15:59+0000\n"
"PO-Revision-Date: 2022-06-13 08:30+0800\n"
"Last-Translator: Zheng Feng <zh.feng@gmail.com>\n"
"Language-Team: \n"
"Language: zh\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/kafka.adoc:6
#, no-wrap
msgid "Apache Kafka Reference Guide"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:16
msgid "This reference guide demonstrates how your Quarkus application can utilize SmallRye Reactive Messaging to interact with Apache Kafka."
msgstr "本参考指南展示了如何在您的Quarkus应用程序中利用SmallRye Reactive Messaging与Apache Kafka进行交互。"

#. type: Title ==
#: upstream/_versions/main/guides/kafka.adoc:17
#, no-wrap
msgid "Introduction"
msgstr "简介"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:22
msgid "https://kafka.apache.org[Apache Kafka] is a popular open-source distributed event streaming platform.  It is used commonly for high-performance data pipelines, streaming analytics, data integration, and mission-critical applications.  Similar to a message queue, or an enterprise messaging platform, it lets you:"
msgstr "link:https://kafka.apache.org[Apache Kafka] 是一个流行的开源分布式事件流平台。它通常用于高性能数据管道、流式分析、数据集成以及任务关键型应用。类似于消息队列或企业消息平台，它可以允许您："

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:24
#, no-wrap
msgid "*publish* (write) and *subscribe* to (read) streams of events, called _records_.\n"
msgstr "*发布* (写)以及 *订阅* (读)事件流，称为 _记录_ 。\n"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:25
#, no-wrap
msgid "*store* streams of records durably and reliably inside _topics_.\n"
msgstr "在 _topic_ 内持久而可靠地 *存储* 流式记录。\n"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:26
#, no-wrap
msgid "*process* streams of records as they occur or retrospectively.\n"
msgstr "对流式记录进行起始或回溯*处理*。\n"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:28
msgid "And all this functionality is provided in a distributed, highly scalable, elastic, fault-tolerant, and secure manner."
msgstr "而所有这些功能都是以分布式、高可扩展性、弹性、容错以及安全的方式提供的。"

#. type: Title ==
#: upstream/_versions/main/guides/kafka.adoc:29
#, no-wrap
msgid "Quarkus Extension for Apache Kafka"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:33
msgid "Quarkus provides support for Apache Kafka through https://smallrye.io/smallrye-reactive-messaging/[SmallRye Reactive Messaging] framework.  Based on Eclipse MicroProfile Reactive Messaging specification 2.0, it proposes a flexible programming model bridging CDI and event-driven."
msgstr "Quarkus通过 link:https://smallrye.io/smallrye-reactive-messaging/[SmallRye Reactive Messaging] 框架为Apache Kafka提供支持。基于Eclipse MicroProfile Reactive Messaging 2.0 规范，框架提供了一种灵活的基于CDI和事件驱动的编程模型。"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:38
msgid "This guide provides an in-depth look on Apache Kafka and SmallRye Reactive Messaging framework.  For a quick start take a look at xref:kafka-reactive-getting-started.adoc[Getting Started to SmallRye Reactive Messaging with Apache Kafka]."
msgstr "本指南深入介绍了Apache Kafka和SmallRye Reactive Messaging框架。要想快速入门，请参考 xref:kafka-reactive-getting-started.adoc[Getting Started to SmallRye Reactive Messaging with Apache Kafka] 。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:41
msgid "You can add the `smallrye-reactive-messaging-kafka` extensions to your project by running the following command in your project base directory:"
msgstr "您可以通过在您的项目根目录下运行以下命令来将 `smallrye-reactive-messaging-kafka` 扩展添加到您的项目中："

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:46
msgid "This will add the following to your build file:"
msgstr "这会将以下内容添加到你的构建文件中:"

#. type: Block title
#: upstream/_versions/main/guides/kafka.adoc:48
#: upstream/_versions/main/guides/kafka.adoc:1474
#: upstream/_versions/main/guides/kafka.adoc:1723
#: upstream/_versions/main/guides/kafka.adoc:1791
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:54
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-reactive-messaging-kafka</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/kafka.adoc:57
#: upstream/_versions/main/guides/kafka.adoc:1483
#: upstream/_versions/main/guides/kafka.adoc:1732
#: upstream/_versions/main/guides/kafka.adoc:1801
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:60
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-smallrye-reactive-messaging-kafka\")\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:65
msgid "The extension includes `kafka-clients` version 3.1.0 as a transitive dependency and is compatible with Kafka brokers version 2.x."
msgstr "该扩展包括 `kafka-clients` 3.1.0版本的传递依赖，而且与Kafka broker 2.x版本兼容。"

#. type: Title ==
#: upstream/_versions/main/guides/kafka.adoc:67
#, no-wrap
msgid "Configuring Smallrye Kafka Connector"
msgstr "配置Smallrye Kafka Connector"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:70
msgid "Because Smallrye Reactive Messaging framework supports different messaging backends like Apache Kafka, AMQP, Apache Camel, JMS, MQTT, etc., it employs a generic vocabulary:"
msgstr "因为Smallrye Reactive Messaging框架支持不同的消息后端，如Apache Kafka，AMQP，Apache Camel，JMS以及MQTT等，所以它使用了一个通用的术语表："

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:72
msgid "Applications send and receive *messages*. A message wraps a _payload_ and can be extended with some _metadata_. With the Kafka connector, a _message_ corresponds to a Kafka _record_."
msgstr "应用程序发送和接收 *messages* 。一条消息包含一个 _payload_ ，并可以用一些 _metadata_ 进行扩展。通过Kafka connector，一条 _message_ 对应于一条Kafka _record_。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:73
msgid "Messages transit on *channels*. Application components connect to channels to publish and consume messages. The Kafka connector maps _channels_ to Kafka _topics_."
msgstr "信息在 *channels* 上传输。应用程序组件通过连接 channels 来发布和消费消息。Kafka connector将 _channels_ 映射到Kafka的 _topics_上 。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:74
msgid "Channels are connected to message backends using *connectors*. Connectors are configured to map incoming messages to a specific channel (consumed by the application) and collect outgoing messages sent to a specific channel. Each connector is dedicated to a specific messaging technology. For example, the connector dealing with Kafka is named `smallrye-kafka`."
msgstr "Channels 通过 *connectors* 连接到消息后端。Connectors通过配置将传入的消息映射到一个指定channel上(该channel由应用程序来消费)，并对发送到指定channel的消息进行收集。每个connector都专用于某种特定的消息传递技术。例如，与Kafka交互的的connector被命名为 `smallrye-kafka` 。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:76
msgid "A minimal configuration for the Kafka connector with an incoming channel looks like the following:"
msgstr "一个配有消息接收channel的Kafka connector的最小配置如下所示："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:81
#, no-wrap
msgid ""
"%prod.kafka.bootstrap.servers=kafka:9092 <1>\n"
"mp.messaging.incoming.prices.connector=smallrye-kafka <2>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:85
msgid "Configure the broker location for the production profile. You can configure it globally or per channel using `mp.messaging.incoming.$channel.bootstrap.servers` property.  In dev mode and when running tests, <<kafka-dev-services>> automatically starts a Kafka broker.  When not provided this property defaults to `localhost:9092`."
msgstr "请务必为生产环境配置broker地址。您可以在全局环境配置或使用 `mp.messaging.incoming.$channel.bootstrap.servers` 属性来针对特定channel配置。在开发模式和运行测试时， <<kafka-dev-services>>会自动启动一个Kafka broker。如果没有提供这个属性，则默认为 `localhost:9092` 。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:86
msgid "Configure the connector to manage the prices channel. By default the topic name is same as the channel name. You can configure the topic attribute to override it."
msgstr "配置connector来管理prices channel。默认情况下，topic名称与channel名称相同。您可以通过配置topic属性来覆盖它。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:88
msgid "The `%prod` prefix indicates that the property is only used when the application runs in prod mode (so not in dev or test). Refer to the xref:config-reference.adoc#profiles[Profile documentation] for further details."
msgstr "`%prod` 前缀表示该属性只在应用程序运行在生产模式下时生效(而不是在开发或测试模式)。更多细节请参考 xref:config-reference.adoc#profiles[Profile documentation]。"

#. type: Block title
#: upstream/_versions/main/guides/kafka.adoc:90
#, no-wrap
msgid "Connector auto-attachment"
msgstr "Connector auto-attachment"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:95
msgid "If you have a single connector on your classpath, you can omit the `connector` attribute configuration.  Quarkus automatically associates _orphan_ channels to the (unique) connector found on the classpath.  _Orphans_ channels are outgoing channels without a downstream consumer or incoming channels without an upstream producer."
msgstr "如果您的classpath上只有一个connector，您可以省略 `connector` 属性配置。Quarkus会自动将 _orphan_  channel 与classpath上找到的(唯一的)connector连接。 _Orphans_  channels 是没有下游消费者的发送 channels 或没有上游生产者的接收 channels 。"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:97
msgid "This auto-attachment can be disabled using:"
msgstr "可以用以下方法禁用这种auto-attachment功能："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:101
#, no-wrap
msgid "quarkus.reactive-messaging.auto-connector-attachment=false\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/kafka.adoc:104
#, no-wrap
msgid "Receiving messages from Kafka"
msgstr "接收来自Kafka的消息"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:107
msgid "Continuing from the previous minimal configuration, your Quarkus application can receive message payload directly:"
msgstr "让我们继续刚才的最小配置。您的Quarkus应用程序可以直接接收消息payload："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:111
#: upstream/_versions/main/guides/kafka.adoc:2254
#: upstream/_versions/main/guides/kafka.adoc:2334
#, no-wrap
msgid "import org.eclipse.microprofile.reactive.messaging.Incoming;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:113
#: upstream/_versions/main/guides/kafka.adoc:1019
#: upstream/_versions/main/guides/kafka.adoc:1064
#: upstream/_versions/main/guides/kafka.adoc:1140
#: upstream/_versions/main/guides/kafka.adoc:1163
#: upstream/_versions/main/guides/kafka.adoc:1205
#: upstream/_versions/main/guides/kafka.adoc:1380
#: upstream/_versions/main/guides/kafka.adoc:2332
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:116
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PriceConsumer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:121
#, no-wrap
msgid ""
"    @Incoming(\"prices\")\n"
"    public void consume(double price) {\n"
"        // process your price.\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:123
#: upstream/_versions/main/guides/kafka.adoc:270
#: upstream/_versions/main/guides/kafka.adoc:584
#: upstream/_versions/main/guides/kafka.adoc:610
#: upstream/_versions/main/guides/kafka.adoc:738
#: upstream/_versions/main/guides/kafka.adoc:1087
#: upstream/_versions/main/guides/kafka.adoc:1153
#: upstream/_versions/main/guides/kafka.adoc:1181
#: upstream/_versions/main/guides/kafka.adoc:1233
#: upstream/_versions/main/guides/kafka.adoc:1341
#: upstream/_versions/main/guides/kafka.adoc:1399
#: upstream/_versions/main/guides/kafka.adoc:1786
#: upstream/_versions/main/guides/kafka.adoc:1866
#: upstream/_versions/main/guides/kafka.adoc:2242
#: upstream/_versions/main/guides/kafka.adoc:2322
#: upstream/_versions/main/guides/kafka.adoc:2350
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:126
msgid "There are several other ways your application can consume incoming messages:"
msgstr "您的应用程序还可以通过另外集中方式来消费接收到的消息："

#. type: Block title
#: upstream/_versions/main/guides/kafka.adoc:127
#, no-wrap
msgid "Message"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:139
#, no-wrap
msgid ""
"@Incoming(\"prices\")\n"
"public CompletionStage<Void> consume(Message<Double> msg) {\n"
"    // access record metadata\n"
"    var metadata = msg.getMetadata(IncomingKafkaRecordMetadata.class).orElseThrow();\n"
"    // process the message payload.\n"
"    double price = msg.getPayload();\n"
"    // Acknowledge the incoming message (commit the offset)\n"
"    return msg.ack();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:143
msgid "The `Message` type lets the consuming method access the incoming message metadata and handle the acknowledgment manually.  We'll explore different acknowledgment strategies in <<commit-strategies>>."
msgstr "`Message` 类型允许consuming methond访问接收到消息的metadata并手动进行确认。我们将在 <<commit-strategies>>中探讨不同的确认策略。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:145
msgid "If you want to access the Kafka record objects directly, use:"
msgstr "如果您想直接访问Kafka record对象，请使用："

#. type: Block title
#: upstream/_versions/main/guides/kafka.adoc:146
#, no-wrap
msgid "ConsumerRecord"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:157
#, no-wrap
msgid ""
"@Incoming(\"prices\")\n"
"public void consume(ConsumerRecord<String, Double> record) {\n"
"    String key = record.key(); // Can be `null` if the incoming record has no key\n"
"    String value = record.value(); // Can be `null` if the incoming record has no value\n"
"    String topic = record.topic();\n"
"    int partition = record.partition();\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:161
msgid "`ConsumerRecord` is provided by the underlying Kafka client and can be injected directly to the consumer method.  Another simpler approach consists in using `Record`:"
msgstr "`ConsumerRecord` 由底层Kafka client提供，并且可以直接注入到consumer method中。另一种更简单的方法是使用  `Record`："

#. type: Block title
#: upstream/_versions/main/guides/kafka.adoc:162
#, no-wrap
msgid "Record"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:170
#, no-wrap
msgid ""
"@Incoming(\"prices\")\n"
"public void consume(Record<String, Double> record) {\n"
"    String key = record.key(); // Can be `null` if the incoming record has no key\n"
"    String value = record.value(); // Can be `null` if the incoming record has no value\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:173
msgid "`Record` is a simple wrapper around key and payload of the incoming Kafka record."
msgstr "`Record` 提供了对接收到的Kafka record中key和payload的简单的包装。"

#. type: Block title
#: upstream/_versions/main/guides/kafka.adoc:174
#, no-wrap
msgid "@Channel"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:177
msgid "Alternatively, your application can inject a `Multi` in your bean and subscribe to its events as the following example:"
msgstr "另外，您的应用程序可以在您的Bean中注入一个 `Multi` ，然后像下面的例子那样订阅它的事件："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:182
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Multi;\n"
"import io.smallrye.reactive.messaging.annotations.Channel;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:189
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import org.jboss.resteasy.reactive.RestStreamElementType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:192
#: upstream/_versions/main/guides/kafka.adoc:819
#: upstream/_versions/main/guides/kafka.adoc:864
#: upstream/_versions/main/guides/kafka.adoc:900
#, no-wrap
msgid ""
"@Path(\"/prices\")\n"
"public class PriceResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:196
#, no-wrap
msgid ""
"    @Inject\n"
"    @Channel(\"prices\")\n"
"    Multi<Double> prices;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:205
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/prices\")\n"
"    @Produces(MediaType.SERVER_SENT_EVENTS)\n"
"    @RestStreamElementType(MediaType.TEXT_PLAIN)\n"
"    public Multi<Double> stream() {\n"
"        return prices;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:209
msgid "This is a good example of how to integrate a Kafka consumer with another downstream, in this example exposing it as a Server-Sent Events endpoint."
msgstr "这个例子很好的展示了如何将Kafka consumer与另一个downstream进行集成。在这个例子中，我们将这个downstream暴露为一个服务端事件节点(Server-Sent Events endpoint)。"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:215
msgid "When consuming messages with `@Channel`, the application code is responsible for the subscription.  In the example above, the RESTEasy Reactive endpoint handles that for you."
msgstr "当使用 `@Channel` 消费消息时，代码需要负责消息订阅。在上面的例子中，RESTEasy Reactive endpoint 已负责为您处理了这个问题。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:218
msgid "Following types can be injected as channels:"
msgstr "以下类型可以作为 channels 被注入："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:222
#, no-wrap
msgid "@Inject @Channel(\"prices\") Multi<Double> streamOfPayloads;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:224
#, no-wrap
msgid "@Inject @Channel(\"prices\") Multi<Message<Double>> streamOfMessages;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:226
#, no-wrap
msgid "@Inject @Channel(\"prices\") Publisher<Double> publisherOfPayloads;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:228
#, no-wrap
msgid "@Inject @Channel(\"prices\") Publisher<Message<Double>> publisherOfMessages;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:233
msgid "As with the previous `Message` example, if your injected channel receives payloads (`Multi<T>`), it acknowledges the message automatically, and support multiple subscribers.  If you injected channel receives Message (`Multi<Message<T>>`), you will be responsible for the acknowledgment and broadcasting.  We will explore sending broadcast messages in <<broadcasting-messages-on-multiple-consumers>>."
msgstr "如前面 `Message` 例子所示，如果您的注入channel接收到了playloads( `Multi<T>` )，它可以支持多订阅者自动确认消息。如果您的注入channel收到Message( `Multi<Message<T>>` )，那么您需要自行负责消息确认和广播。我们将在<<broadcasting-messages-on-multiple-consumers>> 中探讨消息的发送和广播。"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:238
msgid "Injecting `@Channel(\"prices\")` or having `@Incoming(\"prices\")` does not automatically configure the application to consume messages from Kafka.  You need to configure an inbound connector with `mp.messaging.incoming.prices\\...` or have an `@Outgoing(\"prices\")` method somewhere in your application (in which case, `prices` will be an in-memory channel)."
msgstr "注入 `@Channel(\"prices\")` 或使用 `@Incoming(\"prices\")` 无法通过配置使应用程序自动从Kafka消费消息。您需要用 `mp.messaging.incoming.prices...` 配置一个接收connector，或者在您的应用程序中使用 `@Outgoing(\"prices\")` 方法(在这种情况下， `prices` 将是一个内存型channel)。"

#. type: Title ===
#: upstream/_versions/main/guides/kafka.adoc:241
#, no-wrap
msgid "Blocking processing"
msgstr "阻塞处理"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:247
msgid "Reactive Messaging invokes your method on an I/O thread.  See the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture documentation] for further details on this topic.  But, you often need to combine Reactive Messaging with blocking processing such as database interactions.  For this, you need to use the `@Blocking` annotation indicating that the processing is _blocking_ and should not be run on the caller thread."
msgstr "Reactive Messaging会在一个I/O线程中调用您的方法。关于这个话题的更多细节，请看  xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture documentation]  。但是您可能需要经常将Reactive Messaging 与阻塞式处理相结合使用，比如与数据库通信。为此，您需要使用 `@Blocking` 注解来表该明处理是 _阻塞的_ ，并且不在调用者线程中运行。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:249
msgid "For example, The following code illustrates how you can store incoming payloads to a database using Hibernate with Panache:"
msgstr "例如，下面的代码演示了如何使用Hibernate与Panache将接收到的payload存储到数据库："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:254
#, no-wrap
msgid ""
"import io.smallrye.reactive.messaging.annotations.Blocking;\n"
"import org.eclipse.microprofile.reactive.messaging.Incoming;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:257
#: upstream/_versions/main/guides/kafka.adoc:2252
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.transaction.Transactional;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:260
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PriceStorage {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:268
#, no-wrap
msgid ""
"    @Incoming(\"prices\")\n"
"    @Transactional\n"
"    public void store(int priceInUsd) {\n"
"        Price price = new Price();\n"
"        price.value = priceInUsd;\n"
"        price.persist();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:273
msgid "The complete example is available in the `kafka-panache-quickstart` {quickstarts-tree-url}/kafka-panache-quickstart[directory]."
msgstr "完整的例子可以参考 `kafka-panache-quickstart` {quickstarts-tree-url}/kafka-panache-quickstart[directory]."

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:277
msgid "There are 2 `@Blocking` annotations:"
msgstr "有2种 `@Blocking` 注解："

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:279
msgid "`io.smallrye.reactive.messaging.annotations.Blocking`"
msgstr "`io.smallrye.reactive.messaging.annotations.Blocking`"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:280
msgid "`io.smallrye.common.annotation.Blocking`"
msgstr "`io.smallrye.common.annotation.Blocking`"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:285
msgid "They have the same effect.  Thus, you can use both.  The first one provides more fine-grained tuning such as the worker pool to use and whether it preserves the order.  The second one, used also with other reactive features of Quarkus, uses the default worker pool and preserves the order."
msgstr "它们效果相同。因此，您可以随意使用。第一个提供了更精细的配置，比如worker pool以及是否保留顺序。第二种，同其他的Quarkus Reactive功能类似，使用默认的worker pool并且保留了顺序。"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:287
msgid "Detailed information on the usage of `@Blocking` annotation can be found in https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/3.1/advanced/blocking.html[SmallRye Reactive Messaging – Handling blocking execution]."
msgstr "关于 `@Blocking` 注解的详细信息，可以在 link:https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/3.1/advanced/blocking.html[SmallRye Reactive Messaging – 阻塞处理] 找到。"

#. type: Block title
#: upstream/_versions/main/guides/kafka.adoc:290
#, no-wrap
msgid "@Transactional"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:293
msgid "If your method is annotated with `@Transactional`, it will be considered _blocking_ automatically, even if the method is not annotated with `@Blocking`."
msgstr "如果您的方法加了 `@Transactional` 注解，那么它即使没有添加 `@Blocking` 注解也将被自动视为 _阻塞_ 方法 。"

#. type: Title ===
#: upstream/_versions/main/guides/kafka.adoc:295
#, no-wrap
msgid "Acknowledgment Strategies"
msgstr "确认策略(Acknowledgment Strategies)"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:303
msgid "All messages received by a consumer must be acknowledged.  In the absence of acknowledgment, the processing is considered in error.  If the consumer method receives a `Record` or a payload, the message will be acked on method return, also known as `Strategy.POST_PROCESSING`.  If the consumer method returns another reactive stream or `CompletionStage`, the message will be acked when the downstream message is acked.  You can override the default behavior to ack the message on arrival (`Strategy.PRE_PROCESSING`), or do not ack the message at all (`Strategy.NONE`) on the consumer method as in the following example:"
msgstr "消费者收到的所有消息都必须被确认(acknowleged)。在没有确认的情况下，消息处理会出错。如果消费者方法收到一个 `Record` 或一个payload，该消息将通过方法返回被确认，也被称为 `Strategy.POST_PROCESSING` 。如果消费者方法返回另一个reactive stream或 `CompletionStage` ，那么当下游消息(downstream message)被确认时，该消息也将被确认。您可以覆盖默认行为从而在消息到达时进行确认( `Strategy.PRE_PROCESSING` )，或者在消费者方法中不进行任何确认( `Strategy.NONE` )，如下例所示："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:311
#, no-wrap
msgid ""
"@Incoming(\"prices\")\n"
"@Acknowledgment(Acknowledgment.Strategy.PRE_PROCESSING)\n"
"public void process(double price) {\n"
"    // process price\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:315
msgid "If the consumer method receives a `Message`, the acknowledgment strategy is `Strategy.MANUAL` and the consumer method is in charge of ack/nack the message."
msgstr "如果消费者方法接收到一个 `Message` ，那么确认策略是 `Strategy.MANUAL` 并且消费者方法将负责对消息进行ack/nack。"

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:323
#, no-wrap
msgid ""
"@Incoming(\"prices\")\n"
"public CompletionStage<Void> process(Message<Double> msg) {\n"
"    // process price\n"
"    return msg.ack();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:326
msgid "As mentioned above, the method can also override the acknowledgment strategy to `PRE_PROCESSING` or `NONE`."
msgstr "如上所述，该方法还可以将确认策略设置为 `PRE_PROCESSING` 或 `NONE` 。"

#. type: Title ===
#: upstream/_versions/main/guides/kafka.adoc:328
#, no-wrap
msgid "Commit Strategies"
msgstr "提交策略(Commit Strategies)"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:334
msgid "When a message produced from a Kafka record is acknowledged, the connector invokes a commit strategy.  These strategies decide when the consumer offset for a specific topic/partition is committed.  Committing an offset indicates that all previous records have been processed.  It is also the position where the application would restart the processing after a crash recovery or a restart."
msgstr "当一条由Kafka记录产生的消息被确认时，connector将会调用一个提交策略。这些策略决定了特定topic/分区(topic/partition)的消费者偏移将在何时被提交。提交一个偏移量(offset)表明所有之前的记录已经被处理了。它也是应用程序从崩溃中恢复后或重启后重新开始处理的位置。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:337
msgid "Committing every offset has performance penalties as Kafka offset management can be slow.  However, not committing the offset often enough may lead to message duplication if the application crashes between two commits."
msgstr "由于Kafka的偏移量管理可能很慢，所以每次提交偏移量都会有性能上的损失。然而，如果程序在两次提交之间崩溃，不够频繁的偏移量提交可能会导致消息出现重复提交。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:339
msgid "The Kafka connector supports three strategies:"
msgstr "Kafka connector支持三种策略："

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:348
msgid "`throttled` keeps track of received messages and commits an offset of the latest acked message in sequence (meaning, all previous messages were also acked).  This strategy guarantees at-least-once delivery even if the channel performs asynchronous processing.  The connector tracks the received records and periodically (period specified by `auto.commit.interval.ms`, default: 5000 ms) commits the highest consecutive offset.  The connector will be marked as unhealthy if a message associated with a record is not acknowledged in `throttled.unprocessed-record-max-age.ms` (default: 60000 ms).  Indeed, this strategy cannot commit the offset as soon as a single record processing fails (see <<error-handling>> to configure what happens on failing processing).  If `throttled.unprocessed-record-max-age.ms` is set to less than or equal to `0`, it does not perform any health check verification.  Such a setting might lead to running out of memory if there are \"poison pill\" messages (that are never acked).  This strategy is the default if `enable.auto.commit` is not explicitly set to true."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:352
msgid "`latest` commits the record offset received by the Kafka consumer as soon as the associated message is acknowledged (if the offset is higher than the previously committed offset).  This strategy provides at-least-once delivery if the channel processes the message without performing any asynchronous processing.  This strategy should not be used in high load environment, as offset commit is expensive. However, it reduces the risk of duplicates."
msgstr "`latest` 一旦关联消息被确认，Kafka消费者就会提交所接收到的record偏移量(前提是当前偏移量高于之前提交的偏移量)。如果channel在不执行任何异步处理的情况下处理消息的话，这种策略能保证至少一次提交。这种策略不推荐在高负载环境中使用，因为偏移量的提交很昂贵。但是它减少了消息重复提交的风险。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:358
msgid "`ignore` performs no commit. This strategy is the default strategy when the consumer is explicitly configured with `enable.auto.commit` to true.  It delegates the offset commit to the underlying Kafka client.  When `enable.auto.commit` is `true` this strategy **DOES NOT** guarantee at-least-once delivery.  SmallRye Reactive Messaging processes records asynchronously, so offsets may be committed for records that have been polled but not yet processed.  In case of a failure, only records that were not committed yet will be re-processed."
msgstr "`ignore` 不执行任何提交。当消费者的 `enable.auto.commit` 属性被明确配置为true时，该策略将是默认策略。它将偏移量的提交委托给底层Kafka client负责。当 `enable.auto.commit` 为true的时候 ，该策略 *不* 保证至少会有一次提交。SmallRye Reactive Messaging是异步处理记录的，所以那些已经被轮询但尚未处理的record的偏移量有可能会被提交。如果提交失败，只有那些尚未被提交的record才会被重新处理。"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:363
msgid "The Kafka connector disables the Kafka auto commit when it is not explicitly enabled. This behavior differs from the traditional Kafka consumer.  If high throughput is important for you, and you are not limited by the downstream, we recommend to either:"
msgstr "当Kafka connector没有明确启用时，它将禁用Kafka自动提交。这与传统的Kafka消费者不同。如果高吞吐量对您来说很重要而且您不受下游的限制，我们建议要么："

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:365
msgid "use the `throttled` policy,"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:366
msgid "or set `enable.auto.commit` to true and annotate the consuming method with `@Acknowledgment(Acknowledgment.Strategy.NONE)`."
msgstr "要么将 `enable.auto.commit` 设置为true，并在consuming方法中使用 `@Acknowledgment(Acknowledgment.Strategy.NONE)` 注解。"

#. type: Title ===
#: upstream/_versions/main/guides/kafka.adoc:369
#, no-wrap
msgid "Error Handling Strategies"
msgstr "错误处理策略(Error Handling Strategies)"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:372
msgid "If a message produced from a Kafka record is nacked, a failure strategy is applied. The Kafka connector supports three strategies:"
msgstr "如果从Kafka record中产生的消息未被确认，那么一个失败策略就会被启用。Kafka connector支持三种策略："

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:374
msgid "`fail`: fail the application, no more records will be processed (default strategy). The offset of the record that has not been processed correctly is not committed."
msgstr "`fail` ：直接使程序失败，不再处理更多的记录(默认策略)。未被正确处理的记录的偏移量不会被提交。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:375
msgid "`ignore`: the failure is logged, but the processing continue. The offset of the record that has not been processed correctly is committed."
msgstr "`ignore` ：记录失败的日志，但消息处理将继续进行。没有被正确处理的记录的偏移量会被提交。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:376
msgid "`dead-letter-queue`: the offset of the record that has not been processed correctly is committed, but the record is written to a Kafka dead letter topic."
msgstr "`dead-letter-queue` ：未被正确处理的记录的偏移量会被提交，但该记录会被写入Kafka的dead letter topic。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:378
msgid "The strategy is selected using the `failure-strategy` attribute."
msgstr "失败策略通过 `failure-strategy` 属性来设置。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:380
msgid "In the case of `dead-letter-queue`, you can configure the following attributes:"
msgstr "在 `dead-letter-queue` 情况下 ，您可以配置以下属性："

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:382
msgid "`dead-letter-queue.topic`: the topic to use to write the records not processed correctly, default is `dead-letter-topic-$channel`, with `$channel` being the name of the channel."
msgstr "`dead-letter-queue.topic` : 该topic用来保存未被正确处理的记录，默认为 `dead-letter-topic-$channel` ， `$channel` 是channel的名称。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:383
msgid "`dead-letter-queue.key.serializer`: the serializer used to write the record key on the dead letter queue. By default, it deduces the serializer from the key deserializer."
msgstr "`dead-letter-queue.key.serializer` 该序列化器用来对记录到dead letter queue中的record key进行序列化。默认情况下，该序列化器会从key的反序列化器反推出。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:384
msgid "`dead-letter-queue.value.serializer`: the serializer used to write the record value on the dead letter queue. By default, it deduces the serializer from the value deserializer."
msgstr "`dead-letter-queue.value.serializer` :该序列化器用来对记录到dead letter queue中的record value进行序列化。默认情况下，该序列化器会从value的反序列化器反推出。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:386
msgid "The record written on the dead letter queue contains a set of additional headers about the original record:"
msgstr "所有写入dead letter queue中的记录将包含一组关于原始记录的附加headers："

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:388
#, no-wrap
msgid "*dead-letter-reason*: the reason of the failure\n"
msgstr "*dead-letter-reason* ：失败原因\n"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:389
#, no-wrap
msgid "*dead-letter-cause*: the cause of the failure if any\n"
msgstr "*dead-letter-cause* ：失败的起因(如果有)。\n"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:390
#, no-wrap
msgid "*dead-letter-topic*: the original topic of the record\n"
msgstr "*dead-letter-topic* ：失败记录的原始topic\n"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:391
#, no-wrap
msgid "*dead-letter-partition*: the original partition of the record (integer mapped to String)\n"
msgstr "*dead-letter-partition* ：失败记录的原始分区(integer映射为String)\n"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:392
#, no-wrap
msgid "*dead-letter-offset*: the original offset of the record (long mapped to String)\n"
msgstr "*dead-letter-offset* ：失败记录的原始偏移量(long映射为String)\n"

#. type: Title ====
#: upstream/_versions/main/guides/kafka.adoc:393
#, no-wrap
msgid "Retrying processing"
msgstr "重试处理(Retrying processing)"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:396
msgid "You can combine Reactive Messaging with https://github.com/smallrye/smallrye-fault-tolerance[SmallRye Fault Tolerance], and retry processing if it failed:"
msgstr "您可以将Reactive Messaging与 link:https://github.com/smallrye/smallrye-fault-tolerance[SmallRye 容错]结合起来，如果失败的话可以进行重试："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:404
#, no-wrap
msgid ""
"@Incoming(\"kafka\")\n"
"@Retry(delay = 10, maxRetries = 5)\n"
"public void consume(String v) {\n"
"   // ... retry if this method throws an exception\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:407
msgid "You can configure the delay, the number of retries, the jitter, etc."
msgstr "您可以对延迟，重试次数以及抖动(jitter)等处理方式进行设置。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:409
msgid "If your method returns a `Uni` or `CompletionStage`, you need to add the `@NonBlocking` annotation:"
msgstr "如果您的方法返回一个 `Uni` 或 `CompletionStage` ，您需要添加 `@NonBlocking` 注解："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:418
#, no-wrap
msgid ""
"@Incoming(\"kafka\")\n"
"@Retry(delay = 10, maxRetries = 5)\n"
"@NonBlocking\n"
"public Uni<String> consume(String v) {\n"
"   // ... retry if this method throws an exception or the returned Uni produce a failure\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:423
msgid "The `@NonBlocking` annotation is only required with SmallRye Fault Tolerance 5.1.0 and earlier.  Starting with SmallRye Fault Tolerance 5.2.0 (available since Quarkus 2.1.0.Final), it is not necessary.  See https://smallrye.io/docs/smallrye-fault-tolerance/5.2.0/usage/extra.html#_non_compatible_mode[SmallRye Fault Tolerance documentation] for more information."
msgstr "`@NonBlocking` 注解仅在SmallRye Fault Tolerance 5.1.0及之前版本中需要。从SmallRye Fault Tolerance 5.2.0开始(Quarkus 2.1.0.Final开始)，它就不再必须了。更多信息请参见link:https://smallrye.io/docs/smallrye-fault-tolerance/5.2.0/usage/extra.html#_non_compatible_mode[SmallRye 容错文档] 。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:427
msgid "The incoming messages are acknowledged only once the processing completes successfully.  So, it commits the offset after the successful processing.  If the processing still fails, even after all retries, the message is _nacked_ and the failure strategy is applied."
msgstr "传入的消息只有在处理成功完成后才会被确认。所以，它在处理成功后会提交偏移量。如果在所有的重试后处理仍然失败， 消息就会被标记为 _未确认(nacked)_ ，然后触发失败策略。"

#. type: Title ====
#: upstream/_versions/main/guides/kafka.adoc:428
#, no-wrap
msgid "Handling Deserialization Failures"
msgstr "反序列化失败的处理"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:432
msgid "When a deserialization failure occurs, you can intercept it and provide a failure strategy.  To achieve this, you need to create a bean implementing `DeserializationFailureHandler<T>` interface:"
msgstr "当反序列化失败发生时，您可以对其进行拦截并提供一个失败处理策略。为了实现这一点，您需要创建一个实现 `DeserializationFailureHandler<T>` 接口的bean："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:439
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@Identifier(\"failure-retry\") // Set the name of the failure handler\n"
"public class MyDeserializationFailureHandler\n"
"    implements DeserializationFailureHandler<JsonObject> { // Specify the expected type\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:448
#, no-wrap
msgid ""
"    @Override\n"
"    public JsonObject decorateDeserialization(Uni<JsonObject> deserialization, String topic, boolean isKey,\n"
"            String deserializer, byte[] data, Headers headers) {\n"
"        return deserialization\n"
"                    .onFailure().retry().atMost(3)\n"
"                    .await().atMost(Duration.ofMillis(200));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:451
msgid "To use this failure handler, the bean must be exposed with the `@Identifier` qualifier and the connector configuration must specify the attribute `mp.messaging.incoming.$channel.[key|value]-deserialization-failure-handler` (for key or value deserializers)."
msgstr "要使用这个故障处理的handler，Bean必须使用 `@Identifier` 限定符来暴露，并且connector配置必须指定属性 `mp.messaging.incoming.$channel.[key|value]-deserialization-failure-handler` (对于键或值的反序列化器)。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:454
msgid "The handler is called with details of the deserialization, including the action represented as `Uni<T>`.  On the deserialization `Uni` failure strategies like retry, providing a fallback value or applying timeout can be implemented."
msgstr "这个handler在被调用提供反序列化的细节，包括以 `Uni<T>` 所表示的操作(action)。在 `Uni` 提供的反序列化错误处理策略中，可以实现例如重试，提供回调(fallback)值或超时处理等等方式。"

#. type: Title ===
#: upstream/_versions/main/guides/kafka.adoc:455
#, no-wrap
msgid "Consumer Groups"
msgstr "消费者组(Consumer Groups)"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:462
msgid "In Kafka, a consumer group is a set of consumers which cooperate to consume data from a topic.  A topic is divided into a set of partitions.  The partitions of a topic are assigned among the consumers in the group, effectively allowing to scale consumption throughput.  Note that each partition is assigned to a single consumer from a group.  However, a consumer can be assigned multiple partitions if the number of partitions is greater than the number of consumer in the group."
msgstr "在Kafka中，消费者组表示可以通过合作来消费来自于同一个topic的数据的一组消费者。 一个topic可以包含一组分区(partitions)。一个topic的分区会在组内的消费者之间分配，从而有效地提高消费的吞吐量。请注意，每个分区只会被分配给组内的一个消费者。但如果分区的数量大于组中消费者的数量， 那么一个消费者可以被分配多个分区。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:464
msgid "Let's explore briefly different producer/consumer patterns and how to implement them using Quarkus:"
msgstr "让我们简单展示一下不同的生产者/消费者模式以及如何使用Quarkus来实现它们："

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:466
#, no-wrap
msgid "*Single consumer thread inside a consumer group*\n"
msgstr "*消费者组内使用单一消费者线程*\n"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:470
msgid "This is the default behavior of an application subscribing to a Kafka topic: Each Kafka connector will create a single consumer thread and place it inside a single consumer group.  Consumer group id defaults to the application name as set by the `quarkus.application.name` configuration property.  It can also be set using the `kafka.group.id` property."
msgstr "这是一个应用程序订阅Kafka topic的默认方式：每个Kafka Connector将创建一个独立的消费者线程，并将其置于一个单独的消费者组内。消费者组id默认为 `quarkus.application.name` 所设定的应用程序名称。它也可以使用 `kafka.group.id` 来设置。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_versions/main/guides/kafka.adoc:471
#: upstream/_versions/main/guides/kafka.adoc:479
#: upstream/_versions/main/guides/kafka.adoc:486
#: upstream/_versions/main/guides/kafka.adoc:494
#, no-wrap
msgid "Architecture,"
msgstr "应用结构，"

#. type: Target for macro image
#: upstream/_versions/main/guides/kafka.adoc:471
#, no-wrap
msgid "kafka-one-app-one-consumer.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:474
#, no-wrap
msgid "*Multiple consumer threads inside a consumer group*\n"
msgstr "*一个消费者组内使用多个消费者线程* \n"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:478
msgid "For a given application instance, the number of consumers inside the consumer group can be configured using `mp.messaging.incoming.$channel.partitions` property.  The partitions of the subscribed topic will be divided among the consumer threads.  Note that if the `partitions` value exceed the number of partitions of the topic, some consumer threads won't be assigned any partitions."
msgstr "对于一个给定的应用程序实例，消费者组内的消费者数量可以使用 `mp.messaging.incoming.$channel.partitions` 进行配置。被订阅的topic中的分区将会在所有的消费者线程间进行分配。请注意，如果 `partitions` 值超过topic本身的分区数量，那么某些消费者线程将得不到分区分配。"

#. type: Target for macro image
#: upstream/_versions/main/guides/kafka.adoc:479
#, no-wrap
msgid "kafka-one-app-two-consumers.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:482
#, no-wrap
msgid "*Multiple consumer applications inside a consumer group*\n"
msgstr "*一个消费者组内有多个消费者应用程序* \n"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:485
msgid "Similar to the previous example, multiple instances of an application can subscribe to a single consumer group, configured via `mp.messaging.incoming.$channel.group.id` property, or left default to the application name.  This in turn will divide partitions of the topic among application instances."
msgstr "与前面的例子类似，一个应用程序的多个实例可以订阅同一个消费者组。这种方式可以通过 `mp.messaging.incoming.$channel.group.id` 进行配置，或默认为应用程序的名称。这种方式会在应用程序实例之间分配topic的分区。"

#. type: Target for macro image
#: upstream/_versions/main/guides/kafka.adoc:486
#, no-wrap
msgid "kafka-two-app-one-consumer-group.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:489
#, no-wrap
msgid "*Pub/Sub: Multiple consumer groups subscribed to a topic*\n"
msgstr "*发布/订阅：多个消费者群体订阅同一个topic* \n"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:493
msgid "Lastly different applications can subscribe independently to same topics using different *consumer group ids*.  For example, messages published to a topic called _orders_ can be consumed independently on two consumer applications, one with `mp.messaging.incoming.orders.group.id=invoicing` and second with `mp.messaging.incoming.orders.group.id=shipping`.  Different consumer groups can thus scale independently according to the message consumption requirements."
msgstr "最后，不同的应用程序可以使用不同的 *consumer group ids* 来的独立订阅同一topic。例如，发布在一个名为 _orders_ 的topic上的消息可以被两个消费者应用相互独立的消费，其中一个的group id是 `mp.messaging.incoming.orders.group.id=invoicing` ，另一个是 `mp.messaging.incoming.orders.group.id=shipping` 。因此，不同的消费者组可以根据消息消费的需求独立的进行扩容。"

#. type: Target for macro image
#: upstream/_versions/main/guides/kafka.adoc:494
#, no-wrap
msgid "kafka-two-app-two-consumer-groups.png"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:502
msgid "A common business requirement is to consume and process Kafka records in order.  The Kafka broker preserves order of records inside a partition and not inside a topic.  Therefore it is important to think about how records are partitioned inside a topic.  The default partitioner uses record key hash to compute the partition for a record, or when the key is not defined, chooses a partition randomly per batch or records."
msgstr "一个常见的业务需求是按顺序消费和处理Kafka records。Kafka broker将records的顺序保存在了分区内而不是topic内。因此，如何将records在topic内的分区中分配是需要着重考虑的。默认的分区器使用record key的哈希值计算record的分区，或者当key没有被定义时，会根据批次或records随机的选择分区。"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:505
msgid "During normal operation, a Kafka consumer preserves the order of records inside each partition assigned to it.  Smallrye Reactive Messaging keeps this order for processing, unless `@Blocking(ordered = false)` is used (see <<blocking-processing>>)."
msgstr "正常操作中，Kafka消费者会保留分配给它的每个分区里面的records的顺序。Smallrye Reactive Messaging会使用这个顺序进行处理，除非设置了 `@Blocking(ordered = false)` (参见<<blocking-processing>> )。"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:507
msgid "Note that due to consumer rebalances, Kafka consumers only guarantee at-least-once processing of single records, meaning that uncommitted records _can_ be processed again by consumers."
msgstr "请注意，由于消费者之间的再平衡(rebalances)，Kafka消费者只保证对单一records的至少一次(at-least-once)处理，这意味着未提交的records _可以_ 被消费者再次处理。"

#. type: Title ====
#: upstream/_versions/main/guides/kafka.adoc:509
#, no-wrap
msgid "Consumer Rebalance Listener"
msgstr "消费者再平衡监听器(Consumer Rebalance Listener)"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:516
msgid "Inside a consumer group, as new group members arrive and old members leave, the partitions are re-assigned so that each member receives a proportional share of the partitions.  This is known as rebalancing the group.  To handle offset commit and assigned partitions yourself, you can provide a consumer rebalance listener.  To achieve this, implement the `io.smallrye.reactive.messaging.kafka.KafkaConsumerRebalanceListener` interface and expose it as a CDI bean with the `@Idenfier` qualifier.  A common use case is to store offset in a separate data store to implement exactly-once semantic, or starting the processing at a specific offset."
msgstr "在一个消费者组内，随着新老组员的交替，分区将会被重新分配，从而使每个组员都能分配到分区。这就是组的再平衡。为了处理偏移提交以及分区的分配，您可以提供一个消费者再平衡监听器。为了实现这一点，请实现 `io.smallrye.reactive.messaging.kafka.KafkaConsumerRebalanceListener` 接口，并将其暴露为CDI bean并使用 `@Idenfier` 修饰符修饰。一个常见的用例是将偏移量存储在一个单独的数据存储中以使其保证语义上的精准一次(exactly-once semantic)，或者在某一个特定的偏移量开始时处理。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:520
msgid "The listener is invoked every time the consumer topic/partition assignment changes.  For example, when the application starts, it invokes the `partitionsAssigned` callback with the initial set of topics/partitions associated with the consumer.  If, later, this set changes, it calls the `partitionsRevoked` and `partitionsAssigned` callbacks again, so you can implement custom logic."
msgstr "监听器会在消费者的topic/分区分配发生变化时启动。例如，当应用程序启动时，它会调用 `partitionsAssigned`  回调并传入与消费者相关的初始topic/分区集合 。如果后来这个集合发生变化，它会再次调用 `partitionsRevoked` 和 `partitionsAssigned` 回调，所以您可以自行实现对应的逻辑。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:523
msgid "Note that the rebalance listener methods are called from the Kafka polling thread and **will** block the caller thread until completion.  That’s because the rebalance protocol has synchronization barriers, and using asynchronous code in a rebalance listener may be executed after the synchronization barrier."
msgstr "请注意，再平衡(rebalance)监听器方法是在Kafka轮询线程中被调用的，并且 *会* 阻塞调用者线程直到完成。这是因为再平衡协议(rebalance protocol)有同步屏障，而在再平衡监听器中的异步代码可能会在同步屏障之后执行。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:525
msgid "When topics/partitions are assigned or revoked from a consumer, it pauses the message delivery and resumes once the rebalance completes."
msgstr "当topic/分区被从消费者那里分配或撤销时，它会暂停消息传递， 然后在重平衡完成后立即恢复。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:529
msgid "If the rebalance listener handles offset commit on behalf of the user (using the `NONE` commit strategy), the rebalance listener must commit the offset synchronously in the partitionsRevoked callback.  We also recommend applying the same logic when the application stops."
msgstr "如果使用再平衡监听器代替用户来处理偏移量提交(使用 `NONE` 提交策略)，再平衡监听器就必须在partitionRevoked回调中同步提交偏移量。我们也建议在应用程序停止时使用同样的逻辑。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:531
msgid "Unlike the `ConsumerRebalanceListener` from Apache Kafka, the `io.smallrye.reactive.messaging.kafka.KafkaConsumerRebalanceListener` methods pass the Kafka Consumer and the set of topics/partitions."
msgstr "与Apache Kafka的 `ConsumerRebalanceListener` 不同， `io.smallrye.reactive.messaging.kafka.KafkaConsumerRebalanceListener` 的方法会传递Kafka消费者和topic/分区集合。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:535
msgid "In the following example we set-up a consumer that always starts on messages from at most 10 minutes ago (or offset 0).  First we need to provide a bean that implements `io.smallrye.reactive.messaging.kafka.KafkaConsumerRebalanceListener` and is annotated with `io.smallrye.common.annotation.Identifier`.  We then must configure our inbound connector to use this bean."
msgstr "在下面例子设置的消费者中，它总是会在最多10分钟前(或偏移量0)的消息上启动。首先，我们需要提供一个实现了 `io.smallrye.reactive.messaging.kafka.KafkaConsumerRebalanceListener` 并被注解为 `io.smallrye.common.annotation.Identifier` 的bean。然后我们必须配置inbound connector来使用这个Bean。"

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:539
#: upstream/_versions/main/guides/kafka.adoc:589
#, no-wrap
msgid "package inbound;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:545
#, no-wrap
msgid ""
"import io.smallrye.common.annotation.Identifier;\n"
"import io.smallrye.reactive.messaging.kafka.KafkaConsumerRebalanceListener;\n"
"import org.apache.kafka.clients.consumer.Consumer;\n"
"import org.apache.kafka.clients.consumer.OffsetAndTimestamp;\n"
"import org.apache.kafka.clients.consumer.TopicPartition;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:551
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import java.util.Collection;\n"
"import java.util.HashMap;\n"
"import java.util.Map;\n"
"import java.util.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:555
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@Identifier(\"rebalanced-example.rebalancer\")\n"
"public class KafkaRebalancedConsumerRebalanceListener implements KafkaConsumerRebalanceListener {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:557
#, no-wrap
msgid "    private static final Logger LOGGER = Logger.getLogger(KafkaRebalancedConsumerRebalanceListener.class.getName());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:569
#, no-wrap
msgid ""
"    /**\n"
"     * When receiving a list of partitions, will search for the earliest offset within 10 minutes\n"
"     * and seek the consumer to it.\n"
"     *\n"
"     * @param consumer   underlying consumer\n"
"     * @param partitions set of assigned topic partitions\n"
"     */\n"
"    @Override\n"
"    public void onPartitionsAssigned(Consumer<?, ?> consumer, Collection<TopicPartition> partitions) {\n"
"        long now = System.currentTimeMillis();\n"
"        long shouldStartAt = now - 600_000L; //10 minute ago\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:582
#, no-wrap
msgid ""
"        Map<TopicPartition, Long> request = new HashMap<>();\n"
"        for (TopicPartition partition : partitions) {\n"
"            LOGGER.info(\"Assigned \" + partition);\n"
"            request.put(partition, shouldStartAt);\n"
"        }\n"
"        Map<TopicPartition, OffsetAndTimestamp> offsets = consumer.offsetsForTimes(request);\n"
"        for (Map.Entry<TopicPartition, OffsetAndTimestamp> position : offsets.entrySet()) {\n"
"            long target = position.getValue() == null ? 0L : position.getValue().offset();\n"
"            LOGGER.info(\"Seeking position \" + target + \" for \" + position.getKey());\n"
"            consumer.seek(position.getKey(), target);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:593
#, no-wrap
msgid ""
"import io.smallrye.reactive.messaging.kafka.IncomingKafkaRecord;\n"
"import org.eclipse.microprofile.reactive.messaging.Acknowledgment;\n"
"import org.eclipse.microprofile.reactive.messaging.Incoming;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:597
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import java.util.concurrent.CompletableFuture;\n"
"import java.util.concurrent.CompletionStage;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:600
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class KafkaRebalancedConsumer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:608
#, no-wrap
msgid ""
"    @Incoming(\"rebalanced-example\")\n"
"    @Acknowledgment(Acknowledgment.Strategy.NONE)\n"
"    public CompletionStage<Void> consume(IncomingKafkaRecord<Integer, String> message) {\n"
"        // We don't need to ACK messages because in this example,\n"
"        // we set offset during consumer rebalance\n"
"        return CompletableFuture.completedFuture(null);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:614
msgid "To configure the inbound connector to use the provided listener, we either set the consumer rebalance listener’s identifier: `mp.messaging.incoming.rebalanced-example.consumer-rebalance-listener.name=rebalanced-example.rebalancer`"
msgstr "如要配置inbound connector使用所提供的监听器，我们可以通过消费者再平衡监听器的标识符 `mp.messaging.incoming.rebalanced-example.consumer-rebalance-listener.name=rebalanced-example.rebalancer` 来设置"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:616
msgid "Or have the listener’s name be the same as the group id:"
msgstr "或者令监听器的名字与消费者组的ID相同："

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:618
msgid "`mp.messaging.incoming.rebalanced-example.group.id=rebalanced-example.rebalancer`"
msgstr "`mp.messaging.incoming.rebalanced-example.group.id=rebalanced-example.rebalancer`"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:620
msgid "Setting the consumer rebalance listener’s name takes precedence over using the group id."
msgstr "注意，设置消费者再平衡监听器的名称的方式要比使用组ID的方式优先被使用。"

#. type: Title ====
#: upstream/_versions/main/guides/kafka.adoc:621
#, no-wrap
msgid "Using unique consumer groups"
msgstr "使用单一的消费者组"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:624
msgid "If you want to process all the records from a topic (from its beginning), you need:"
msgstr "如果您想处理一个topic中的所有记录(从其最开始时)，您需要："

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:626
msgid "to set `auto.offset.reset = earliest`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:627
msgid "assign your consumer to a consumer group not used by any other application."
msgstr "将您的消费者分配到一个不被任何其他程序使用的消费者组。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:630
msgid "Quarkus generates a UUID that changes between two executions (including in dev mode).  So, you are sure no other consumer uses it, and you receive a new unique group id every time your application starts."
msgstr "Quarkus生成的UUID在两次执行之间会发生变化(包括在dev模式下)。因此，您可以确定没有其他消费者使用它，而且每次您的应用程序启动时都会收到一个新的唯一的组ID。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:632
msgid "You can use that generated UUID as the consumer group as follows:"
msgstr "您可以使用生成的UUID作为消费者组id，如下所示："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:637
#, no-wrap
msgid ""
"mp.messaging.incoming.your-channel.auto.offset.reset=earliest\n"
"mp.messaging.incoming.your-channel.group.id=${quarkus.uuid}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:640
msgid "If the `group.id` attribute is not set, it defaults the `quarkus.application.name` configuration property."
msgstr "如果没有设置 `group.id` ，则其默认与 `quarkus.application.name` 相同。"

#. type: Title ===
#: upstream/_versions/main/guides/kafka.adoc:641
#, no-wrap
msgid "Receiving Kafka Records in Batches"
msgstr "批量接收Kafka记录"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:645
msgid "By default, incoming methods receive each Kafka record individually.  Under the hood, Kafka consumer clients poll the broker constantly and receive records in batches, presented inside the `ConsumerRecords` container."
msgstr "默认情况下，接收方法会单独接收每条Kafka记录。在后台，Kafka消费者client会不断地轮询broker，并批量接收记录然后放入 `ConsumerRecords` 容器中。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:647
msgid "In *batch* mode, your application can receive all the records returned by the consumer *poll* in one go."
msgstr "在 *批量* 模式下，您的程序可以一次性接收消费者 *轮询* 返回的所有记录。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:649
msgid "To achieve this you need to specify a compatible container type to receive all the data:"
msgstr "为了达到这一点，您需要指定一个兼容的容器类型来接收所有数据："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:658
#, no-wrap
msgid ""
"@Incoming(\"prices\")\n"
"public void consume(List<Double> prices) {\n"
"    for (double price : prices) {\n"
"        // process price\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:662
msgid "The incoming method can also receive `Message<List<Payload>>`, `KafkaRecordBatch<Key, Payload>` `ConsumerRecords<Key, Payload>` types.  They give access to record details such as offset or timestamp:"
msgstr "接收方法也可以接收 `Message<List<Payload>>` , `KafkaRecordBatch<Key, Payload>` `ConsumerRecords<Key, Payload>` 等类型。这些类型可以访问记录的细节，如偏移量或时间戳："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:675
#, no-wrap
msgid ""
"@Incoming(\"prices\")\n"
"public CompletionStage<Void> consumeMessage(KafkaRecordBatch<String, Double> records) {\n"
"    for (KafkaRecord<String, Double> record : records) {\n"
"        String payload = record.getPayload();\n"
"        String topic = record.getTopic();\n"
"        // process messages\n"
"    }\n"
"    // ack will commit the latest offsets (per partition) of the batch.\n"
"    return records.ack();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:680
msgid "Note that the successful processing of the incoming record batch will commit the latest offsets for each partition received inside the batch.  The configured commit strategy will be applied for these records only."
msgstr "注意，对于接收到的记录批次的成功处理会提交所收到批次内每个分区的最新偏移量。所配置的提交策略将只应用于这些记录。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:682
msgid "Conversely, if the processing throws an exception, all messages are _nacked_, applying the failure strategy for all the records inside the batch."
msgstr "反之，如果处理过程抛出一个异常，所有的消息都_不会被确认(nacked)_ ，并且对批次中的所有记录应用失败策略。"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:687
msgid "Quarkus autodetects batch types for incoming channels and sets batch configuration automatically.  You can configure batch mode explicitly with `mp.messaging.incoming.$channel.batch` property."
msgstr "Quarkus自动检测incoming channels 的批处理类型并自动设置批处理配置。您可以用 `mp.messaging.incoming.$channel.batch` 配置批处理模式。"

#. type: Title ==
#: upstream/_versions/main/guides/kafka.adoc:689
#, no-wrap
msgid "Sending messages to Kafka"
msgstr "向Kafka发送消息"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:692
msgid "Configuration for the Kafka connector outgoing channels is similar to that of incoming:"
msgstr "Kafka Connector中用于发送的 channels 的配置与用于接收的 channel 的配置类似："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:698
#, no-wrap
msgid ""
"%prod.kafka.bootstrap.servers=kafka:9092 <1>\n"
"mp.messaging.outgoing.prices-out.connector=smallrye-kafka <2>\n"
"mp.messaging.outgoing.prices-out.topic=prices <3>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:703
msgid "Configure the broker location for the production profile. You can configure it globally or per channel using `mp.messaging.outgoing.$channel.bootstrap.servers` property.  In dev mode and when running tests, <<kafka-dev-services>> automatically starts a Kafka broker.  When not provided, this property defaults to `localhost:9092`."
msgstr "请配置生产环境的broker位置。您可以在全局配置，或使用 `mp.messaging.outgoing.$channel.bootstrap.servers` 来针对特定channel配置它。在开发模式和运行测试时， <<kafka-dev-services>>会自动启动一个Kafka broker。如果该属性未提供，它将默认为 `localhost:9092` 。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:704
msgid "Configure the connector to manage the `prices-out` channel."
msgstr "配置connector来管理 `prices-out` channel。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:705
msgid "By default, the topic name is same as the channel name. You can configure the topic attribute to override it."
msgstr "默认情况下，topic名称与channel名称相同。您可以配置topic属性来覆盖它。"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:710
msgid "Inside application configuration, channel names are unique.  Therefore, if you'd like to configure an incoming and outgoing channel on the same topic, you will need to name channels differently (like in the examples of this guide, `mp.messaging.incoming.prices` and `mp.messaging.outgoing.prices-out`)."
msgstr "在应用配置里面，channel名称是唯一的。因此，如果您打算在相同topic上同时配置一个接收和一个发送的channel，您需要对这两个 channels 使用不同的名称(比如本指南的例子，`mp.messaging.incoming.prices` 和 `mp.messaging.outgoing.prices-out` )。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:714
msgid "Then, your application can generate messages and publish them to the `prices-out` channel.  It can use `double` payloads as in the following snippet:"
msgstr "然后，您的程序可以生成消息并将其发布到 `prices-out` channel。它可以使用 `double` payloads，如下所示："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:719
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Multi;\n"
"import org.eclipse.microprofile.reactive.messaging.Outgoing;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:723
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import java.time.Duration;\n"
"import java.util.Random;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:726
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class KafkaPriceProducer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:728
#: upstream/_versions/main/guides/kafka.adoc:1029
#, no-wrap
msgid "    private final Random random = new Random();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:736
#, no-wrap
msgid ""
"    @Outgoing(\"prices-out\")\n"
"    public Multi<Double> generate() {\n"
"        // Build an infinite stream of random prices\n"
"        // It emits a price every second\n"
"        return Multi.createFrom().ticks().every(Duration.ofSeconds(1))\n"
"            .map(x -> random.nextDouble());\n"
"    }\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:743
msgid "You should not call methods annotated with `@Incoming` and/or `@Outgoing` directly from your code. They are invoked by the framework. Having user code invoking them would not have the expected outcome."
msgstr "您不应该在您的代码中直接调用被标记了 `@Incoming` 和/或 `@Outgoing` 注解的方法。它们会被框架调用。如果在用户代码中调用将不会得到预期的结果。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:747
msgid "Note that the `generate` method returns a `Multi<Double>`, which implements the Reactive Streams `Publisher` interface.  This publisher will be used by the framework to generate messages and send them to the configured Kafka topic."
msgstr "请注意， `generate` 方法返回了一个 `Multi<Double>` ，它实现了Reactive Streams `Publisher` 接口。Quarkus框架会使用这个发布者生成消息，并将其发送到您配置的Kafka topic中。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:749
msgid "Instead of returning a payload, you can return a `io.smallrye.reactive.messaging.kafka.Record` to send key/value pairs:"
msgstr "为了发送键/值对， 您可以直接返回一个 `io.smallrye.reactive.messaging.kafka.Record` 来代理一个payload："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:757
#, no-wrap
msgid ""
"@Outgoing(\"out\")\n"
"public Multi<Record<String, Double>> generate() {\n"
"    return Multi.createFrom().ticks().every(Duration.ofSeconds(1))\n"
"        .map(x -> Record.of(\"my-key\", random.nextDouble()));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:760
msgid "Payload can be wrapped inside `org.eclipse.microprofile.reactive.messaging.Message` to have more control on the written records:"
msgstr "Payload可以被封装在 `org.eclipse.microprofile.reactive.messaging.Message`，以便对写入的记录有更多的控制："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:773
#, no-wrap
msgid ""
"@Outgoing(\"generated-price\")\n"
"public Multi<Message<Double>> generate() {\n"
"    return Multi.createFrom().ticks().every(Duration.ofSeconds(1))\n"
"            .map(x -> Message.of(random.nextDouble())\n"
"                    .addMetadata(OutgoingKafkaRecordMetadata.<String>builder()\n"
"                            .withKey(\"my-key\")\n"
"                            .withTopic(\"my-key-prices\")\n"
"                            .withHeaders(new RecordHeaders().add(\"my-header\", \"value\".getBytes()))\n"
"                            .build()));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:778
msgid "`OutgoingKafkaRecordMetadata` allows to set metadata attributes of the Kafka record, such as `key`, `topic`, `partition` or `timestamp`.  One use case is to dynamically select the destination topic of a message.  In this case, instead of configuring the topic inside your application configuration file, you need to use the outgoing metadata to set the name of the topic."
msgstr "`OutgoingKafkaRecordMetadata` 允许您设置Kafka记录的元数据属性，如 `key` ， `topic` ， `partition` 或 `timestamp` 。一种场景是动态地选择消息的目标topic。在这种情况下，您需要使用出站元数据(outgoing metadata)来设置topic名称，而不是在配置文件中配置topic。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:781
msgid "Other than method signatures returning a Reactive Stream `Publisher` (`Multi` being an implementation of `Publisher`), outgoing method can also return single message.  In this case the producer will use this method as generator to create an infinite stream."
msgstr "除了返回Reactive Stream `Publisher` ( `Multi` 实现了 `Publisher` )的方法签名外，发送方法也可以返回单个消息。在这种情况下，生产者将使用该方法作为生成器来创建一个无限的流(infinite stream)。"

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:785
#, no-wrap
msgid "@Outgoing(\"prices-out\") T generate(); // T excluding void\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:787
#, no-wrap
msgid "@Outgoing(\"prices-out\") Message<T> generate();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:789
#, no-wrap
msgid "@Outgoing(\"prices-out\") Uni<T> generate();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:791
#, no-wrap
msgid "@Outgoing(\"prices-out\") Uni<Message<T>> generate();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:793
#, no-wrap
msgid "@Outgoing(\"prices-out\") CompletionStage<T> generate();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:795
#, no-wrap
msgid "@Outgoing(\"prices-out\") CompletionStage<Message<T>> generate();\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/kafka.adoc:797
#, no-wrap
msgid "Sending messages with @Emitter"
msgstr "使用@Emitter发送消息"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:800
msgid "Sometimes, you need to have an imperative way of sending messages."
msgstr "有时，您需要使用命令式的方式来发送消息。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:803
msgid "For example, if you need to send a message to a stream when receiving a POST request inside a REST endpoint.  In this case, you cannot use `@Outgoing` because your method has parameters."
msgstr "例如，如果您需要在REST节点内收到一个POST请求时向一个流发送消息。在这种情况下，您无法使用 `@Outgoing` ，因为您的方法有参数。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:805
msgid "For this, you can use an `Emitter`."
msgstr "这种情况下您可以使用 `Emitter` 。"

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:810
#: upstream/_versions/main/guides/kafka.adoc:2152
#: upstream/_versions/main/guides/kafka.adoc:2200
#: upstream/_versions/main/guides/kafka.adoc:2417
#, no-wrap
msgid ""
"import org.eclipse.microprofile.reactive.messaging.Channel;\n"
"import org.eclipse.microprofile.reactive.messaging.Emitter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:816
#: upstream/_versions/main/guides/kafka.adoc:861
#: upstream/_versions/main/guides/kafka.adoc:895
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:823
#, no-wrap
msgid ""
"    @Inject\n"
"    @Channel(\"price-create\")\n"
"    Emitter<Double> priceEmitter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:830
#, no-wrap
msgid ""
"    @POST\n"
"    @Consumes(MediaType.TEXT_PLAIN)\n"
"    public void addPrice(Double price) {\n"
"        CompletionStage<Void> ack = priceEmitter.send(price);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:833
msgid "Sending a payload returns a `CompletionStage`, completed when the message is acked. If the message transmission fails, the `CompletionStage` is completed exceptionally with the reason of the nack."
msgstr "发送一个payload会返回一个 `CompletionStage` ，并且它会在消息被确认时完成。如果消息传输失败， `CompletionStage` 会以异常结束，并且包含未被确认的原因。"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:837
msgid "The `Emitter` configuration is done the same way as the other stream configuration used by `@Incoming` and `@Outgoing`."
msgstr "`Emitter` 的配置方式与 其他被 `@Incoming` 和 `@Outgoing` 使用的流配置相同。"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:846
msgid "Using the `Emitter` you are sending messages from your imperative code to reactive messaging.  These messages are stored in a queue until they are sent.  If the Kafka producer client can't keep up with messages trying to be sent over to Kafka, this queue can become a memory hog and you may even run out of memory.  You can use `@OnOverflow` to configure back-pressure strategy.  It lets you configure the size of the queue (default is 256) and the strategy to apply when the buffer size is reached. Available strategies are `DROP`, `LATEST`, `FAIL`, `BUFFER`, `UNBOUNDED_BUFFER` and `NONE`."
msgstr "使用 `Emitter` 的话您会以命令式代码的方式发送消息到响应式消息中(reactive messaging)。这些消息被存储在一个队列中，直到它们被发送。如果Kafka生产者client无法跟上发送到Kafka的消息节奏，这个队列就会成为一个内存占用者，甚至会耗尽内存。您可以使用 `@OnOverflow` 来配置背压策略。它可以让您配置队列的大小(默认是256)和达到缓冲区上限时要应用的策略。可用的策略有 `DROP` , `LATEST` , `FAIL` , `BUFFER` , `UNBOUNDED_BUFFER` 和 `NONE` 。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:849
msgid "With the `Emitter` API, you can also encapsulate the outgoing payload inside `Message<T>`. As with the previous examples, `Message` lets you handle the ack/nack cases differently."
msgstr "通过 `Emitter` API，您也可以将要发送的payload封装在 `Message<T>` 中 。与前面的例子一样， `Message` 让您以不同的方式处理确认/拒绝(ack/nack)的情况。"

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:855
#, no-wrap
msgid ""
"import java.util.concurrent.CompletableFuture;\n"
"import org.eclipse.microprofile.reactive.messaging.Channel;\n"
"import org.eclipse.microprofile.reactive.messaging.Emitter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:866
#, no-wrap
msgid "    @Inject @Channel(\"price-create\") Emitter<Double> priceEmitter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:881
#, no-wrap
msgid ""
"    @POST\n"
"    @Consumes(MediaType.TEXT_PLAIN)\n"
"    public void addPrice(Double price) {\n"
"        priceEmitter.send(Message.of(price)\n"
"            .withAck(() -> {\n"
"                // Called when the message is acked\n"
"                return CompletableFuture.completedFuture(null);\n"
"            })\n"
"            .withNack(throwable -> {\n"
"                // Called when the message is nacked\n"
"                return CompletableFuture.completedFuture(null);\n"
"            }));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:885
msgid "If you prefer using Reactive Stream APIs, you can use `MutinyEmitter` that will return `Uni<Void>` from the `send` method.  You can therefore use Mutiny APIs for handling downstream messages and errors."
msgstr "如果您偏好于使用Reactive Stream APIs，您可以使用 `MutinyEmitter` ，它将在 `send` 方法中返回 `Uni<Void>` 。因此，您可以使用Mutiny APIs来处理下游的信息和错误。"

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:889
#: upstream/_versions/main/guides/kafka.adoc:1066
#: upstream/_versions/main/guides/kafka.adoc:2454
#, no-wrap
msgid "import org.eclipse.microprofile.reactive.messaging.Channel;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:897
#, no-wrap
msgid "import io.smallrye.reactive.messaging.MutinyEmitter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:904
#, no-wrap
msgid ""
"    @Inject\n"
"    @Channel(\"price-create\")\n"
"    MutinyEmitter<Double> priceEmitter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:913
#, no-wrap
msgid ""
"    @POST\n"
"    @Consumes(MediaType.TEXT_PLAIN)\n"
"    public Uni<String> addPrice(Double price) {\n"
"        return quoteRequestEmitter.send(price)\n"
"                .map(x -> \"ok\")\n"
"                .onFailure().recoverWithItem(\"ko\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:917
msgid "It is also possible to block on sending the event to the emitter with the `sendAndAwait` method.  It will only return from the method when the event is acked or nacked by the receiver."
msgstr "也可以通过 `sendAndAwait` 方法在发送事件到emitter的时候进行阻塞。只有当事件被接收者确认或拒绝时，它才会从该方法中返回。"

#. type: Block title
#: upstream/_versions/main/guides/kafka.adoc:919
#, no-wrap
msgid "Deprecation"
msgstr "弃用"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:922
msgid "The `io.smallrye.reactive.messaging.annotations.Emitter`, `io.smallrye.reactive.messaging.annotations.Channel` and `io.smallrye.reactive.messaging.annotations.OnOverflow` classes are now deprecated and replaced by:"
msgstr "`io.smallrye.reactive.messaging.annotations.Emitter` , `io.smallrye.reactive.messaging.annotations.Channel` 和 `io.smallrye.reactive.messaging.annotations.OnOverflow` 类现在已被废弃，并被替换为："

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:924
msgid "`org.eclipse.microprofile.reactive.messaging.Emitter`"
msgstr "`org.eclipse.microprofile.reactive.messaging.Emitter`"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:925
msgid "`org.eclipse.microprofile.reactive.messaging.Channel`"
msgstr "`org.eclipse.microprofile.reactive.messaging.Channel`"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:926
msgid "`org.eclipse.microprofile.reactive.messaging.OnOverflow`"
msgstr "`org.eclipse.microprofile.reactive.messaging.OnOverflow`"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:928
msgid "The new `Emitter.send` method returns a `CompletionStage` completed when the produced message is acknowledged."
msgstr "新的 `Emitter.send` 方法会返回一个 `CompletionStage` ，并且它会在产生的消息被确认时完成。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:931
msgid "More information on how to use `Emitter` can be found in https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/3.1/emitter/emitter.html#_emitter_and_channel[SmallRye Reactive Messaging – Emitters and Channels]"
msgstr "关于如何使用 `Emitter` ，可在 link:https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/3.1/emitter/emitter.html#_emitter_and_channel[SmallRye Reactive Messaging – Emitters and Channels] 中找到更多信息。"

#. type: Title ===
#: upstream/_versions/main/guides/kafka.adoc:932
#, no-wrap
msgid "Write Acknowledgement"
msgstr "写确认"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:936
msgid "When Kafka broker receives a record, its acknowledgement can take time depending on the configuration.  Also, it stores in-memory the records that cannot be written."
msgstr "当Kafka broker收到一条记录时，它的确认可能需要时间，这取决于配置。此外，它还会在内存中存储不能写入的记录。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:939
msgid "By default, the connector does wait for Kafka to acknowledge the record to continue the processing (acknowledging the received Message).  You can disable this by setting the `waitForWriteCompletion` attribute to `false`."
msgstr "默认情况下，connector会等待Kafka确认记录以继续处理(确认收到的消息)。您可以通过将 `waitForWriteCompletion` 设置为 `false` 来禁用这个功能。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:941
msgid "Note that the `acks` attribute has a huge impact on the record acknowledgement."
msgstr "请注意， `acks` 属性对记录的确认有巨大影响。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:943
msgid "If a record cannot be written, the message is nacked."
msgstr "如果一条记录无法写入，消息就会被拒绝。"

#. type: Title ===
#: upstream/_versions/main/guides/kafka.adoc:944
#, no-wrap
msgid "Backpressure"
msgstr "背压"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:948
msgid "The Kafka outbound connector handles back-pressure, monitoring the number of in-flight messages waiting to be written to the Kafka broker.  The number of in-flight messages is configured using the `max-inflight-messages` attribute and defaults to 1024."
msgstr "Kafka的出站connector负责处理背压，并且会监测等待写入Kafka broker中的in-flight的消息数量。in-flight的消息的数量是通过 `max-inflight-messages` 配置的，默认为1024。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:953
msgid "The connector only sends that amount of messages concurrently.  No other messages will be sent until at least one in-flight message gets acknowledged by the broker.  Then, the connector writes a new message to Kafka when one of the broker’s in-flight messages get acknowledged.  Be sure to configure Kafka’s `batch.size` and `linger.ms` accordingly."
msgstr "Connector只会并行发送指定数量的消息。在至少一个in-flight的消息被broker确认之前，其他消息都不会被发送。然后，当broker中有in-flight的消息得到确认时，connector才会向Kafka写入一个新的消息。请确保相应地配置Kafka的 `batch.size` 和 `linger.ms` 属性。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:956
msgid "You can also remove the limit of in-flight messages by setting `max-inflight-messages` to `0`.  However, note that the Kafka producer may block if the number of requests reaches `max.in.flight.requests.per.connection`."
msgstr "您也可以通过将 `max-inflight-messages` 设置为 `0` 来取消in-flight消息的限制。但请注意，如果请求数量达到 `max.in.flight.requests.per.connection` 指定的值，Kafka生产者可能会阻塞。"

#. type: Title ===
#: upstream/_versions/main/guides/kafka.adoc:957
#, no-wrap
msgid "Retrying message dispatch"
msgstr "重试消息的发送"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:962
msgid "When the Kafka producer receives an error from the server, if it is a transient, recoverable error, the client will retry sending the batch of messages.  This behavior is controlled by `retries` and `retry.backoff.ms` parameters.  In addition to this, SmallRye Reactive Messaging will retry individual messages on recoverable errors, depending on the `retries` and `delivery.timeout.ms` parameters."
msgstr "当Kafka生产者收到来自服务器的错误时，如果它是一个暂时的、可恢复的错误，那么客户端将重试发送这批消息。这种行为是由 `retries` 和 `retry.backoff.ms` 参数控制的。除此之外，SmallRye Reactive Messaging还会在可恢复的错误中重试单个消息，这取决于 `retries` 和 `delivery.timeout.ms` 参数。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:965
msgid "Note that while having retries in a reliable system is a best practice, the `max.in.flight.requests.per.connection` parameter defaults to `5`, meaning that the order of the messages is not guaranteed.  If the message order is a must for your use case, setting `max.in.flight.requests.per.connection` to `1` will make sure a single batch of messages is sent at a time, in the expense of limiting the throughput of the producer."
msgstr "请注意，虽然在对一个可靠的系统来说拥有重试机制是一种最佳实践，但 `max.in.flight.requests.per.connection` 参数默认为 `5` 将会意味着消息的顺序不会被保证。如果消息的顺序对您来说是必须保证的，将 `max.in.flight.requests.per.connection` 设置为 `1` 将确保一次只发送一批消息，但代价是限制生产者的吞吐量。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:967
msgid "For applying retry mechanism on processing errors, see the section on <<retrying-processing>>."
msgstr "关于如何对错误处理应用重试机制，请参见 link:#retrying-processing[[重试-处理]] 一节。"

#. type: Title ===
#: upstream/_versions/main/guides/kafka.adoc:968
#, no-wrap
msgid "Handling Serialization Failures"
msgstr "处理序列化失败"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:972
msgid "For Kafka producer client serialization failures are not recoverable, thus the message dispatch is not retried. In these cases you may need to apply a failure strategy for the serializer.  To achieve this, you need to create a bean implementing `SerializationFailureHandler<T>` interface:"
msgstr "对于Kafka生产者客户端来说序列化失败是不可恢复的，因此消息发送不会被重试。在这些情况下，您可能需要为序列化器设置一个失败策略。为了实现这一点，您需要一个实现了 `SerializationFailureHandler<T>` 接口的bean："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:979
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@Identifier(\"failure-fallback\") // Set the name of the failure handler\n"
"public class MySerializationFailureHandler\n"
"    implements SerializationFailureHandler<JsonObject> { // Specify the expected type\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:988
#, no-wrap
msgid ""
"    @Override\n"
"    public byte[] decorateSerialization(Uni<byte[]> serialization, String topic, boolean isKey,\n"
"        String serializer, Object data, Headers headers) {\n"
"        return serialization\n"
"                    .onFailure().retry().atMost(3)\n"
"                    .await().indefinitely();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:991
msgid "To use this failure handler, the bean must be exposed with the `@Identifier` qualifier and the connector configuration must specify the attribute `mp.messaging.outgoing.$channel.[key|value]-serialization-failure-handler` (for key or value serializers)."
msgstr "要使用该故障处理，Bean必须用 `@Identifier` 限定符修饰，并且connector的配置必须指定属性 `mp.messaging.outgoing.$channel.[key|value]-serialization-failure-handler` (对于键或值序列化器)。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:994
msgid "The handler is called with details of the serialization, including the action represented as `Uni<byte[]>`.  Note that the method must await on the result and return the serialized byte array."
msgstr "处理器被调用，并被提供序列化的细节，包括以 `Uni<byte[]>` 表示的操作。注意，该方法必须对在结果处进行等待，并返回序列化后的字节数组。"

#. type: Title ===
#: upstream/_versions/main/guides/kafka.adoc:995
#, no-wrap
msgid "In-memory channels"
msgstr "内存 channels"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1000
msgid "In some use cases, it is convenient to use the messaging patterns to transfer messages inside the same application.  When you don't connect a channel to a messaging backend like Kafka, everything happens in-memory, and the streams are created by chaining methods together.  Each chain is still a reactive stream and enforces the back-pressure protocol."
msgstr "在某些情况下，使用消息模式在同一个应用程序内传输消息是很方便的。当您没有将channel连接到像Kafka这样的消息后端时，一切都会发生在内存中，并且流会通过链式方法创建。每个链式调用仍是一个响应式流，并执行背压策略。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1004
msgid "The framework verifies that the producer/consumer chain is complete, meaning that if the application writes messages into an in-memory channel (using a method with only `@Outgoing`, or an `Emitter`), it must also consume the messages from within the application (using a method with only `@Incoming` or using an unmanaged stream)."
msgstr "Quarkus框架会验证生产者/消费者链是否完整，这意味着如果应用程序将消息写入内存channel(仅使用 `@Outgoing` 修饰符方法，或 `Emitter` )，它也必须从应用程序内部消费消息(仅 `@Incoming` 修饰符方法 ，或使用不受管理的流)。"

#. type: Title ===
#: upstream/_versions/main/guides/kafka.adoc:1006
#, no-wrap
msgid "Broadcasting messages on multiple consumers"
msgstr "对多个消费者广播信息"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1011
msgid "By default, a channel can be linked to a single consumer, using `@Incoming` method or `@Channel` reactive stream.  At application startup, channels are verified to form a chain of consumers and producers with single consumer and producer.  You can override this behavior by setting `mp.messaging.$channel.broadcast=true` on a channel."
msgstr "默认情况下，一个channel可以关联到一个单一的消费者上，通过使用 `@Incoming` 方法或 `@Channel` 响应式应式流。在程序启动时，channels 会被验证，以形成一个由单个消费者和生产者组成的消费者和生产者链。您可以通过在channel上设置 `mp.messaging.$channel.broadcast=true` 来覆盖这种行为。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1013
msgid "In case of in-memory channels, `@Broadcast` annotation can be used on the `@Outgoing` method. For example,"
msgstr "在内存 channels 的情况下， `@Broadcast` 注释可以用在 `@Outgoing` 方法上。比如说,"

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1017
#, no-wrap
msgid "import java.util.Random;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1022
#: upstream/_versions/main/guides/kafka.adoc:1138
#: upstream/_versions/main/guides/kafka.adoc:1166
#, no-wrap
msgid ""
"import org.eclipse.microprofile.reactive.messaging.Incoming;\n"
"import org.eclipse.microprofile.reactive.messaging.Outgoing;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1024
#, no-wrap
msgid "import io.smallrye.reactive.messaging.annotations.Broadcast;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1027
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MultipleConsumer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1035
#, no-wrap
msgid ""
"    @Outgoing(\"in-memory-channel\")\n"
"    @Broadcast\n"
"    double generate() {\n"
"        return random.nextDouble();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1040
#, no-wrap
msgid ""
"    @Incoming(\"in-memory-channel\")\n"
"    void consumeAndLog(double price) {\n"
"        System.out.println(price);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1047
#, no-wrap
msgid ""
"    @Incoming(\"in-memory-channel\")\n"
"    @Outgoing(\"prices2\")\n"
"    double consumeAndSend(double price) {\n"
"        return price;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:1053
msgid "Reciprocally, multiple producers on the same channel can be merged by setting `mp.messaging.incoming.$channel.merge=true`.  On the `@Incoming` methods, you can control how multiple channels are merged using the `@Merge` annotation."
msgstr "相应地，同一 channel 上的多个生产者可以通过设置 `mp.messaging.incoming.$channel.merge=true` 来进行合并。在 `@Incoming` 方法上，您可以使用 `@Merge` 来控制多个 channels 的合并方式。"

#. type: Title ===
#: upstream/_versions/main/guides/kafka.adoc:1055
#, no-wrap
msgid "Kafka Transactions"
msgstr "Kafka事务处理"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1060
msgid "Kafka transactions enable atomic writes to multiple Kafka topics and partitions.  The Kafka connector provides `KafkaTransactions` custom emitter for writing Kafka records inside a transaction.  It can be injected as a regular emitter `@Channel`:"
msgstr "Kafka 事务支持对多个 Kafka 主题和分区进行原子写入。 Kafka 连接器提供了 `KafkaTransactions` 自定义emitter，用于在事务中写入 Kafka 记录。 它可以作为常规emitter `@Channel` 注入："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1070
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.smallrye.reactive.messaging.kafka.KafkaRecord;\n"
"import io.smallrye.reactive.messaging.kafka.transactions.KafkaTransactions;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1073
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class KafkaTransactionalProducer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1076
#, no-wrap
msgid ""
"    @Channel(\"tx-out-example\")\n"
"    KafkaTransactions<String> txProducer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1085
#, no-wrap
msgid ""
"    public Uni<Void> emitInTransaction() {\n"
"        return txProducer.withTransaction(emitter -> {\n"
"            emitter.send(KafkaRecord.of(1, \"a\"));\n"
"            emitter.send(KafkaRecord.of(2, \"b\"));\n"
"            emitter.send(KafkaRecord.of(3, \"c\"));\n"
"            return Uni.createFrom().voidItem();\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1090
msgid "The function given to the `withTransaction` method receives a `TransactionalEmitter` for producing records, and returns a `Uni` that provides the result of the transaction."
msgstr "传入 `withTransaction` 方法的函数参数会使用 `TransactionalEmitter` 来产生记录，并返回 `Uni` 做为事务结果。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1092
msgid "If the processing completes successfully, the producer is flushed and the transaction is committed."
msgstr "如果处理成功完成，则刷新生产者并提交事务。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1093
msgid "If the processing throws an exception, returns a failing `Uni`, or marks the `TransactionalEmitter` for abort, the transaction is aborted."
msgstr "如果处理过程抛出异常，会返回失败的 `Uni`，或将 `TransactionalEmitter` 标记为中止，然后事务会被中止。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1097
msgid "Kafka transactional producers require configuring `acks=all` client property, and a unique id for `transactional.id`, which implies `enable.idempotence=true`.  When Quarkus detects the use of `KafkaTransactions` for an outgoing channel it configures these properties on the channel, providing a default value of `\"${quarkus.application.name}-${channelName}\"` for `transactional.id` property."
msgstr "Kafka 事务生产者需要配置 `acks=all` 客户端属性，以及 `transactional.id` 的唯一 id，这意味着 `enable.idempotence=true` 。 当 Quarkus 检测到传出通道使用 `KafkaTransactions` 时，它会在通道上配置这些属性，为 `transactional.id` 属性提供默认值 `\"${quarkus.application.name}-${channelName}\"` 。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1099
msgid "Note that for production use the `transactional.id` must be unique across all application instances."
msgstr "请注意，要在生产环境使用，必须确保 `transactional.id` 在所有应用实例中是唯一的。"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:1107
msgid "While a normal message emitter would support concurrent calls to `send` methods and consequently queues outgoing messages to be written to Kafka, a `KafkaTransactions` emitter only supports one transaction at a time.  A transaction is considered in progress from the call to the `withTransaction` until the returned `Uni` results in success or failure.  While a transaction is in progress, subsequent calls to the `withTransaction`, including nested ones inside the given function, will throw `IllegalStateException`."
msgstr "虽然普通的消息emitter支持并发调用 `send` 方法并将要写入 Kafka 的传出消息顺序排队，但 `KafkaTransactions` emitter每次只支持一个事务。 从调用 `withTransaction` 直到返回的 `Uni` 导致成功或失败，事务被视为正在进行中。 当事务正在进行时，对 `withTransaction` 的后续调用，包括给定函数内的嵌套调用，都将抛出 `IllegalStateException` 。"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:1111
msgid "Note that in Reactive Messaging, the execution of processing methods, is already serialized, unless `@Blocking(ordered = false)` is used.  If `withTransaction` can be called concurrently, for example from a REST endpoint, it is recommended to limit the concurrency of the execution.  This can be done using the `@Bulkhead` annotation from link:https://quarkus.io/guides/smallrye-fault-tolerance[_Microprofile Fault Tolerance_]."
msgstr "请注意，在 Reactive Messaging 中，处理方法的执行已经被序列化，除非使用了 `@Blocking(ordered = false)` 。 如果可以同时调用 `withTransaction` ，例如从 REST 节点，建议限制执行的并发性。 这可以使用后面链接中的 `@Bulkhead` 注释来完成：link:https://quarkus.io/guides/smallrye-fault-tolerance[_Microprofile Fault Tolerance_]。"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:1113
msgid "An example usage can be found in <<chaining-kafka-transactions-with-hibernate-reactive-transactions>>."
msgstr "示例用法可以在 <<chaining-kafka-transactions-with-hibernate-reactive-transactions>> 中找到。"

#. type: Title ====
#: upstream/_versions/main/guides/kafka.adoc:1115
#, no-wrap
msgid "Transaction-aware consumers"
msgstr "事务感知型消费者"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1118
msgid "If you'd like to consume records only written and committed inside a Kafka transaction you need to configure the `isolation.level` property on the incoming channel as such:"
msgstr "如果您想使用仅在 Kafka 事务中写入和提交的记录，您需要在传入通道上配置 `isolation.level` 属性，如下所示："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1122
#, no-wrap
msgid "mp.messaging.incoming.prices-in.isolation.level=read_committed\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:1127
msgid "If you are using Dev Services for Kafka using Redpanda, you need to <<kafka-dev-services.adoc#redpanda-enabling-transactions, enable transactions>>."
msgstr "如果您使用 Redpanda 为 Kafka 使用 Dev Services，您需要 <<kafka-dev-services.adoc#redpanda-enabling-transactions, enable transactions>> 。"

#. type: Title ==
#: upstream/_versions/main/guides/kafka.adoc:1129
#, no-wrap
msgid "Processing Messages"
msgstr "处理消息"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1133
msgid "Applications streaming data often need to consume some events from a topic, process them and publish the result to a different topic.  A processor method can be simply implemented using both the `@Incoming` and `@Outgoing` annotations:"
msgstr "应用的流式数据常常需要从一个topic中消费一些事件，对其进行处理并将结果发布到不同的topic中。一个处理器方法可以简单地通过使用 `@Incoming` 和 `@Outgoing` 注解来实现："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1143
#: upstream/_versions/main/guides/kafka.adoc:1171
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PriceProcessor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1145
#: upstream/_versions/main/guides/kafka.adoc:1173
#: upstream/_versions/main/guides/kafka.adoc:1389
#, no-wrap
msgid "    private static final double CONVERSION_RATE = 0.88;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1151
#, no-wrap
msgid ""
"    @Incoming(\"price-in\")\n"
"    @Outgoing(\"price-out\")\n"
"    public double process(double price) {\n"
"        return price * CONVERSION_RATE;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1157
msgid "The parameter of the `process` method is the incoming message payload, whereas the return value will be used as the outgoing message payload.  Previously mentioned signatures for parameter and return types are also supported, such as `Message<T>`, `Record<K, V>`, etc."
msgstr "`process` 方法的参数是传入的消息的payload，而返回值将被用作传出的消息的payload。之前提到的参数和返回类型的签名也被支持，如 `Message<T>` ， `Record<K, V>` 等等。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1159
msgid "You can apply asynchronous stream processing by consuming and returning reactive stream `Multi<T>` type:"
msgstr "您可以通过消费和返回响应式流 `Multi<T>` 类型来应用异步流处理："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1168
#, no-wrap
msgid "import io.smallrye.mutiny.Multi;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1179
#, no-wrap
msgid ""
"    @Incoming(\"price-in\")\n"
"    @Outgoing(\"price-out\")\n"
"    public Multi<Double> process(Multi<Integer> prices) {\n"
"        return prices.filter(p -> p > 100).map(p -> p * CONVERSION_RATE);\n"
"    }\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/kafka.adoc:1183
#, no-wrap
msgid "Propagating Record Key"
msgstr "传播记录键"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1186
msgid "When processing messages, you can propagate incoming record key to the outgoing record."
msgstr "在处理信息时，您可以将传入的记录键发送给传出的记录。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1189
msgid "Enabled with `mp.messaging.outgoing.$channel.propagate-record-key=true` configuration, record key propagation produces the outgoing record with the same _key_ as the incoming record."
msgstr "通过启用 `mp.messaging.outgoing.$channel.propagate-record-key=true` ，记录键传播可以产生与传入记录的 _键_ 相同的传出记录。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1192
msgid "If the outgoing record already contains a _key_, it *won't be overridden* by the incoming record key.  If the incoming record does have a _null_ key, the `mp.messaging.outgoing.$channel.key` property is used."
msgstr "如果传出记录已经包含一个 _键_，那么它 *不会* 被传入记录的键所覆盖。如果传入记录的键为 _null_ ，那么 `mp.messaging.outgoing.$channel.key` 设置的值会被使用。"

#. type: Title ===
#: upstream/_versions/main/guides/kafka.adoc:1193
#, no-wrap
msgid "Exactly-Once Processing"
msgstr "（Exactly-Once Processing）精确一次处理"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1197
msgid "Kafka Transactions allows managing consumer offsets inside a transaction, together with produced messages.  This enables coupling a consumer with a transactional producer in a _consume-transform-produce_ pattern, also known as *exactly-once processing*."
msgstr "Kafka 事务可以同时管理其中的消费端和生产端的消息偏移量。 这使得消费端能够以 _consume-transform-produce_ 模式与生产端耦合，也称为 *exactly-once 精确一次性处理*。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1199
msgid "The `KafkaTransactions` custom emitter provides a way to apply exactly-once processing to an incoming Kafka message inside a transaction."
msgstr "`KafkaTransactions` 定制emitter可以提供一种对事务中传入的 Kafka 消息进行一次性处理的方法。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1201
msgid "The following example includes a batch of Kafka records inside a transaction."
msgstr "以下示例包括在事务中进行 Kafka 记录的批处理。"

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1209
#, no-wrap
msgid ""
"import org.eclipse.microprofile.reactive.messaging.Channel;\n"
"import org.eclipse.microprofile.reactive.messaging.Incoming;\n"
"import org.eclipse.microprofile.reactive.messaging.OnOverflow;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1214
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.smallrye.reactive.messaging.kafka.KafkaRecord;\n"
"import io.smallrye.reactive.messaging.kafka.KafkaRecordBatch;\n"
"import io.smallrye.reactive.messaging.kafka.transactions.KafkaTransactions;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1217
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class KafkaExactlyOnceProcessor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1221
#, no-wrap
msgid ""
"    @Channel(\"prices-out\")\n"
"    @OnOverflow(value = OnOverflow.Strategy.BUFFER, bufferSize = 500) // <3>\n"
"    KafkaTransactions<Integer> txProducer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1231
#, no-wrap
msgid ""
"    @Incoming(\"prices-in\")\n"
"    public Uni<Void> emitInTransaction(KafkaRecordBatch<String, Integer> batch) { // <1>\n"
"        return txProducer.withTransactionAndAck(batch, emitter -> { // <2>\n"
"            for (KafkaRecord<String, Integer> record : batch) {\n"
"                emitter.send(KafkaRecord.of(record.getKey(), record.getPayload() + 1)); // <3>\n"
"            }\n"
"            return Uni.createFrom().voidItem();\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1237
msgid "It is recommended to use exactly-once processing along with the batch consumption mode.  While it is possible to use it with a single Kafka message, it'll have a significant performance impact."
msgstr "建议在消费端批处理模式中采用exactly-once。 虽然可以将它与单个 Kafka 消息一起使用，但这样会对性能产生重大影响。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1238
msgid "The consumed `KafkaRecordBatch` message is passed to the `KafkaTransactions#withTransactionAndAck` in order to handle the offset commits and message acks."
msgstr "消费的 `KafkaRecordBatch` 消息被传递给 `KafkaTransactions#withTransactionAndAck` ，以处理偏移提交和消息确认。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1241
msgid "The `send` method writes records to Kafka inside the transaction, without waiting for send receipt from the broker.  Messages pending to be written to Kafka will be buffered, and flushed before committing the transaction.  It is therefore recommended configuring the `@OnOverflow` `bufferSize` in order to fit enough messages, for example the `max.poll.records`, maximum amount of records returned in a batch."
msgstr "`send` 方法将记录通过事务写入 Kafka，而无需等待来自代理的发送回执。 等待写入 Kafka 的消息将被缓冲，并在提交事务之前刷新。 因此，建议配置 `@OnOverflow` `bufferSize` 以适应足够的消息，例如 `max.poll.records`，即批处理中返回的最大记录数。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1243
msgid "If the processing completes successfully, _before committing the transaction_, the topic partition offsets of the given batch message will be committed to the transaction."
msgstr "如果处理成功完成，_在提交事务之前_ ，给定批处理消息的主题分区偏移量将提交给事务。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1244
msgid "If the processing needs to abort, _after aborting the transaction_, the consumer's position is reset to the last committed offset, effectively resuming the consumption from that offset. If no consumer offset has been committed to a topic-partition, the consumer's position is reset to the beginning of the topic-partition, _even if the offset reset policy is `latest`_."
msgstr "如果处理需要中止，_在中止事务后_ ，消费者的位置将重置为最后提交的偏移量，能有效地从该偏移量恢复消费。 如果没有消费者偏移量被提交到主题分区，消费者的位置将被重置到主题分区的开头，_即使把 `latest` 做为偏移量重置策略_ 。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1247
msgid "When using exactly-once processing, consumed message offset commits are handled by the transaction and therefore the application should not commit offsets through other means.  The consumer should have `enable.auto.commit=false` (the default) and set explicitly `commit-strategy=ignore`:"
msgstr "当使用（exactly-once）精确一次处理时，消耗的消息偏移量提交由事务处理，因此应用程序不应通过其他方式提交偏移量。 消费者应该有 `enable.auto.commit=false` （默认）并明确设置 `commit-strategy=ignore` ："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1252
#, no-wrap
msgid ""
"mp.messaging.incoming.prices-in.commit-strategy=ignore\n"
"mp.messaging.incoming.prices-in.failure-strategy=ignore\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/kafka.adoc:1254
#, no-wrap
msgid "Error handling for the exactly-once processing"
msgstr "（exactly-once）精确一次处理的错误处理"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1258
msgid "The `Uni` returned from the `KafkaTransactions#withTransaction` will yield a failure if the transaction fails and is aborted.  The application can choose to handle the error case, but if a failing `Uni` is returned from the `@Incoming` method, the incoming channel will effectively fail and stop the reactive stream."
msgstr "如果事务失败并被中止，则从 KafkaTransactions#withTransaction 返回的 `Uni` 将产生失败。 应用程序可以选择处理错误情况，但如果从 `@Incoming` 方法返回失败的 `Uni` ，则传入通道将有效地失败并停止响应流。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1262
msgid "The `KafkaTransactions#withTransactionAndAck` method acks and nacks the message but will *not* return a failing `Uni`.  Nacked messages will be handled by the failure strategy of the incoming channel, (see <<error-handling>>).  Configuring `failure-strategy=ignore` simply resets the Kafka consumer to the last committed offsets and resumes the consumption from there."
msgstr "`KafkaTransactions#withTransactionAndAck` 方法确认和确认消息，但 *不会* 返回失败的 `Uni` 。 Nacked 消息将由传入通道的故障策略处理，（参见<<error-handling>>）。 配置 `failure-strategy=ignore` 只是将 Kafka 消费者重置为最后提交的偏移量并从那里恢复消费。"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:1267
msgid "Redpanda does not yet support link:https://github.com/redpanda-data/redpanda/issues/3279[producer scalability for exactly-once processing].  In order to use Kafka exactly-once processing with Quarkus you can configure Dev Services for Kafka to <<kafka-dev-services#configuring-the-image, use Strimzi images instead of Redpanda>>."
msgstr "Redpanda 尚不支持 link:https://github.com/redpanda-data/redpanda/issues/3279[producer scaling for exactly-once processing]。 为了在 Quarkus 中使用 Kafka 一次性处理，您可以将 Dev Services for Kafka 配置为 <<kafka-dev-services#configuring-the-image, use Strimzi images instead of Redpanda>> 。"

#. type: Title ==
#: upstream/_versions/main/guides/kafka.adoc:1270
#, no-wrap
msgid "Accessing Kafka clients directly"
msgstr "直接访问Kafka客户端"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1274
msgid "In rare cases, you may need to access the underlying Kafka clients.  `KafkaClientService` provides thread-safe access to `Producer` and `Consumer`."
msgstr "在少数情况下，您可能需要访问底层的Kafka客户端。`KafkaClientService` 提供线程安全的方式来访问 `Producer` 和 `Consumer` 。"

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1280
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.enterprise.event.Observes;\n"
"import javax.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1282
#, no-wrap
msgid "import org.apache.kafka.clients.producer.ProducerRecord;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1287
#, no-wrap
msgid ""
"import io.quarkus.runtime.StartupEvent;\n"
"import io.smallrye.reactive.messaging.kafka.KafkaClientService;\n"
"import io.smallrye.reactive.messaging.kafka.KafkaConsumer;\n"
"import io.smallrye.reactive.messaging.kafka.KafkaProducer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1290
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PriceSender {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1293
#, no-wrap
msgid ""
"    @Inject\n"
"    KafkaClientService clientService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1300
#, no-wrap
msgid ""
"    void onStartup(@Observes StartupEvent startupEvent) {\n"
"        KafkaProducer<String, Double> producer = clientService.getProducer(\"generated-price\");\n"
"        producer.runOnSendingThread(client -> client.send(new ProducerRecord<>(\"prices\", 2.4)))\n"
"            .await().indefinitely();\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:1305
msgid "The `KafkaClientService` is an experimental API and can change in the future."
msgstr "`KafkaClientService` 是一个实验性的API，在未来可能会发生变化。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1308
msgid "You can also get the Kafka configuration injected to your application and create Kafka producer, consumer and admin clients directly:"
msgstr "您也可以把Kafka配置注入到您的应用程序中来直接创建Kafka生产者，消费者以及管理客户端："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1315
#, no-wrap
msgid ""
"import io.smallrye.common.annotation.Identifier;\n"
"import org.apache.kafka.clients.admin.AdminClient;\n"
"import org.apache.kafka.clients.admin.AdminClientConfig;\n"
"import org.apache.kafka.clients.admin.KafkaAdminClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1321
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.enterprise.inject.Produces;\n"
"import javax.inject.Inject;\n"
"import java.util.HashMap;\n"
"import java.util.Map;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1324
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class KafkaClients {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1328
#, no-wrap
msgid ""
"    @Inject\n"
"    @Identifier(\"default-kafka-broker\")\n"
"    Map<String, Object> config;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1339
#, no-wrap
msgid ""
"    @Produces\n"
"    AdminClient getAdmin() {\n"
"        Map<String, Object> copy = new HashMap<>();\n"
"        for (Map.Entry<String, Object> entry : config.entrySet()) {\n"
"            if (AdminClientConfig.configNames().contains(entry.getKey())) {\n"
"                copy.put(entry.getKey(), entry.getValue());\n"
"            }\n"
"        }\n"
"        return KafkaAdminClient.create(copy);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1346
msgid "The `default-kafka-broker` configuration map contains all application properties prefixed with `kafka.` or `KAFKA_`.  For more configuration options check out <<kafka-configuration-resolution>>."
msgstr "`default-kafka-broker` 配置map包含所有以 `kafka.` 或 `KAFKA_` 为前缀的应用属性。更多的配置选项，请查看 link:#kafka-configuration-resolution[[kafka配置方案]] 。"

#. type: Title ==
#: upstream/_versions/main/guides/kafka.adoc:1348
#, no-wrap
msgid "JSON serialization"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1351
msgid "Quarkus has built-in capabilities to deal with JSON Kafka messages."
msgstr "Quarkus有内置的能力来处理JSON格式的Kafka消息。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1353
msgid "Imagine we have a `Fruit` data class as follows:"
msgstr "假设我们有一个 `Fruit` 数据类，如下所示："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1357
#, no-wrap
msgid "public class Fruit {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1360
#, no-wrap
msgid ""
"    public String name;\n"
"    public int price;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1363
#, no-wrap
msgid ""
"    public Fruit() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1369
#, no-wrap
msgid ""
"    public Fruit(String name, int price) {\n"
"        this.name = name;\n"
"        this.price = price;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1372
msgid "And we want to use it to receive messages from Kafka, make some price transformation, and send messages back to Kafka."
msgstr "而我们想用它来接收来自Kafka的消息，从而进行一些价格转换，并将消息传回Kafka。"

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1378
#, no-wrap
msgid ""
"import io.smallrye.reactive.messaging.annotations.Broadcast;\n"
"import org.eclipse.microprofile.reactive.messaging.Incoming;\n"
"import org.eclipse.microprofile.reactive.messaging.Outgoing;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1387
#, no-wrap
msgid ""
"/**\n"
"* A bean consuming data from the \"fruit-in\" channel and applying some price conversion.\n"
"* The result is pushed to the \"fruit-out\" channel.\n"
"*/\n"
"@ApplicationScoped\n"
"public class FruitProcessor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1397
#, no-wrap
msgid ""
"    @Incoming(\"fruit-in\")\n"
"    @Outgoing(\"fruit-out\")\n"
"    @Broadcast\n"
"    public Fruit process(Fruit fruit) {\n"
"        fruit.price = fruit.price * CONVERSION_RATE;\n"
"        return fruit;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1402
msgid "To do this, we will need to setup JSON serialization with Jackson or JSON-B."
msgstr "要做到这一点，我们需要用Jackson或JSON-B来设置JSON序列化。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1404
msgid "With JSON serialization correctly configured, you can also use `Publisher<Fruit>` and `Emitter<Fruit>`."
msgstr "在正确配置了JSON序列化后，您也可以使用 `Publisher<Fruit>` 和 `Emitter<Fruit>` 。"

#. type: Title ===
#: upstream/_versions/main/guides/kafka.adoc:1406
#, no-wrap
msgid "Serializing via Jackson"
msgstr "通过Jackson进行序列化"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1411
msgid "Quarkus has built-in support for JSON serialization and deserialization based on Jackson.  It will also <<serialization-generation, generate>> the serializer and deserializer for you, so you do not have to configure anything.  When generation is disabled, you can use the provided `ObjectMapperSerializer` and `ObjectMapperDeserializer` as explained below."
msgstr "Quarkus内置了对基于Jackson的JSON序列化和反序列化的支持。它也会为您 link:#serialization-generation[生成] 序列化器和反序列化器，所以您不需要配置任何东西。当生成器被禁用时，您可以提供 `ObjectMapperSerializer` 和 `ObjectMapperDeserializer` ，如下所述。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1414
msgid "There is an existing `ObjectMapperSerializer` that can be used to serialize all data objects via Jackson.  You may create an empty subclass if you want to use <<serialization-autodetection>>."
msgstr "有一个现有的 `ObjectMapperSerializer` ，可以用来通过Jackson来序列化所有的数据对象。如果您想使用 link:#serialization-autodetection[[自动侦测序列化]] ，您可以创建一个空的子类来继承该类。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1418
msgid "By default, the `ObjectMapperSerializer` serializes null as the `\"null\"` String, this can be customized by setting the Kafka configuration property `json.serialize.null-as-null=true` which will serialize null as `null`.  This is handy when using a compacted topic, as `null` is used as a tombstone to know which messages delete during compaction phase."
msgstr "默认情况下， `ObjectMapperSerializer` 将null序列化为 `\"null\"` 字符串，这可以通过设置Kafka配置属性 `json.serialize.null-as-null=true` ，将null序列化为 `null` 。这在使用压缩的topic时很方便，因为 `null` 被用作标记来表示在压缩阶段哪些消息被删除了。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1421
msgid "The corresponding deserializer class needs to be subclassed.  So, let's create a `FruitDeserializer` that extends the `ObjectMapperDeserializer`."
msgstr "对应的反序列化器类也需要被子类化。因此，让我们创建一个 `FruitDeserializer` 来继承 `ObjectMapperDeserializer` 。"

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1425
#: upstream/_versions/main/guides/kafka.adoc:1456
#, no-wrap
msgid "package com.acme.fruit.jackson;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1427
#: upstream/_versions/main/guides/kafka.adoc:2281
#: upstream/_versions/main/guides/kafka.adoc:2367
#, no-wrap
msgid "import io.quarkus.kafka.client.serialization.ObjectMapperDeserializer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1433
#: upstream/_versions/main/guides/kafka.adoc:2287
#: upstream/_versions/main/guides/kafka.adoc:2373
#, no-wrap
msgid ""
"public class FruitDeserializer extends ObjectMapperDeserializer<Fruit> {\n"
"    public FruitDeserializer() {\n"
"        super(Fruit.class);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1436
msgid "Finally, configure your channels to use the Jackson serializer and deserializer."
msgstr "最后，配置您的 channelss 以使用Jackson序列化器和反序列化器。"

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1442
#, no-wrap
msgid ""
"# Configure the Kafka source (we read from it)\n"
"mp.messaging.incoming.fruit-in.topic=fruit-in\n"
"mp.messaging.incoming.fruit-in.value.deserializer=com.acme.fruit.jackson.FruitDeserializer\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1446
#, no-wrap
msgid ""
"# Configure the Kafka sink (we write to it)\n"
"mp.messaging.outgoing.fruit-out.topic=fruit-out\n"
"mp.messaging.outgoing.fruit-out.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1450
msgid "Now, your Kafka messages will contain a Jackson serialized representation of your `Fruit` data object.  In this case, the `deserializer` configuration is not necessary as the <<serialization-autodetection>> is enabled by default."
msgstr "现在，您的Kafka消息将包含 `Fruit` 数据对象的Jackson序列化格式。在这种情况下，`deserializer` 的配置不是必须的，因为 link:#serialization-autodetection[[序列化自动侦测]] 是默认启用的。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1452
msgid "If you want to deserialize a list of fruits, you need to create a deserializer with a Jackson `TypeReference` denoted the generic collection used."
msgstr "如果您想反序列化一个fruit对象列表，您需要创建一个反序列化器，它会用Jackson `TypeReference` 表示所用到的通用集合。"

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1460
#, no-wrap
msgid ""
"import java.util.List;\n"
"import com.fasterxml.jackson.core.type.TypeReference;\n"
"import io.quarkus.kafka.client.serialization.ObjectMapperDeserializer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1466
#, no-wrap
msgid ""
"public class ListOfFruitDeserializer extends ObjectMapperDeserializer<List<Fruit>> {\n"
"    public ListOfFruitDeserializer() {\n"
"        super(new TypeReference<List<Fruit>>() {});\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/kafka.adoc:1469
#, no-wrap
msgid "Serializing via JSON-B"
msgstr "通过JSON-B进行序列化"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1472
msgid "First, you need to include the `quarkus-jsonb` extension."
msgstr "首先，您需要引入 `quarkus-jsonb` 扩展。"

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1480
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-jsonb</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1486
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-jsonb\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1490
msgid "There is an existing `JsonbSerializer` that can be used to serialize all data objects via JSON-B.  You may create an empty subclass if you want to use <<serialization-autodetection>>."
msgstr "有一个现有的 `JsonbSerializer` ，可以通过JSON-B来序列化所有的数据对象。如果您想使用 link:#serialization-autodetection[[序列化自动侦测]] ，您可以创建一个空的子类类继承它。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1494
msgid "By default, the `JsonbSerializer` serializes null as the `\"null\"` String, this can be customized by setting the Kafka configuration property `json.serialize.null-as-null=true` which will serialize null as `null`.  This is handy when using a compacted topic, as `null` is used as a tombstone to know which messages delete during compaction phase."
msgstr "默认情况下， `JsonbSerializer` 将null序列化为 `\"null\"` 字符串，这可以通过设置Kafka配置属性 `json.serialize.null-as-null=true` 来将null序列化为 `null` 。这在使用压缩的topic时很方便，因为 `null` 被用作标记来表示在压缩阶段哪些消息被删除了。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1497
msgid "The corresponding deserializer class needs to be subclassed.  So, let's create a `FruitDeserializer` that extends the generic `JsonbDeserializer`."
msgstr "相应的反序列化器类需要被子类化。因此，让我们创建一个 `FruitDeserializer` 来继承 `JsonbDeserializer` 。"

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1501
#, no-wrap
msgid "package com.acme.fruit.jsonb;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1503
#, no-wrap
msgid "import io.quarkus.kafka.client.serialization.JsonbDeserializer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1509
#, no-wrap
msgid ""
"public class FruitDeserializer extends JsonbDeserializer<Fruit> {\n"
"    public FruitDeserializer() {\n"
"        super(Fruit.class);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1512
msgid "Finally, configure your channels to use the JSON-B serializer and deserializer."
msgstr "最后，通过配置来使您的 channels 使用JSON-B串行器和反串行器。"

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1519
#, no-wrap
msgid ""
"# Configure the Kafka source (we read from it)\n"
"mp.messaging.incoming.fruit-in.connector=smallrye-kafka\n"
"mp.messaging.incoming.fruit-in.topic=fruit-in\n"
"mp.messaging.incoming.fruit-in.value.deserializer=com.acme.fruit.jsonb.FruitDeserializer\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1524
#, no-wrap
msgid ""
"# Configure the Kafka sink (we write to it)\n"
"mp.messaging.outgoing.fruit-out.connector=smallrye-kafka\n"
"mp.messaging.outgoing.fruit-out.topic=fruit-out\n"
"mp.messaging.outgoing.fruit-out.value.serializer=io.quarkus.kafka.client.serialization.JsonbSerializer\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1527
msgid "Now, your Kafka messages will contain a JSON-B serialized representation of your `Fruit` data object."
msgstr "现在，您的Kafka消息将包含 `Fruit` 数据对象的JSON-B序列化格式。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1529
msgid "If you want to deserialize a list of fruits, you need to create a deserializer with a `Type` denoted the generic collection used."
msgstr "如果您想反序列化一个fruit对象列表，您需要创建一个反序列化器，它会用一个 `Type` 表示所用到的通用集合。"

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1537
#, no-wrap
msgid ""
"package com.acme.fruit.jsonb;\n"
"import java.lang.reflect.Type;\n"
"import java.util.ArrayList;\n"
"import java.util.List;\n"
"import io.quarkus.kafka.client.serialization.JsonbDeserializer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1543
#, no-wrap
msgid ""
"public class ListOfFruitDeserializer extends JsonbDeserializer<List<Fruit>> {\n"
"    public ListOfFruitDeserializer() {\n"
"        super(new ArrayList<MyEntity>() {}.getClass().getGenericSuperclass());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1547
msgid "If you don't want to create a deserializer for each data object, you can use the generic `io.vertx.kafka.client.serialization.JsonObjectDeserializer` that will deserialize to a `io.vertx.core.json.JsonObject`. The corresponding serializer can also be used: `io.vertx.kafka.client.serialization.JsonObjectSerializer`."
msgstr "如果您不想为每个数据对象创建一个反序列化器，您可以使用通用的 `io.vertx.kafka.client.serialization.JsonObjectDeserializer` ，它将把消息反序列化为一个 `io.vertx.core.json.JsonObject` 。也可以使用与之相对应的序列化器： `io.vertx.kafka.client.serialization.JsonObjectSerializer` 。"

#. type: Title ==
#: upstream/_versions/main/guides/kafka.adoc:1548
#, no-wrap
msgid "Avro Serialization"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1551
#: upstream/_versions/main/guides/kafka.adoc:1645
msgid "This is described in a dedicated guide: xref:kafka-schema-registry-avro.adoc[Using Apache Kafka with Schema Registry and Avro]."
msgstr "这部分在一个专门的指南中有所描述。 link:kafka-schema-registry-avro.html[使用Apache Kafka与Schema Registry和Avro协同工作] 。"

#. type: Title ==
#: upstream/_versions/main/guides/kafka.adoc:1553
#, no-wrap
msgid "Serializer/deserializer autodetection"
msgstr "序列化/反串行器自动侦测"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1557
msgid "When using SmallRye Reactive Messaging with Kafka (`io.quarkus:quarkus-smallrye-reactive-messaging-kafka`), Quarkus can often automatically detect the correct serializer and deserializer class.  This autodetection is based on declarations of `@Incoming` and `@Outgoing` methods, as well as injected ``@Channel``s."
msgstr "当使用SmallRye Reactive Messaging with Kafka ( `io.quarkus:quarkus-smallrye-reactive-messaging-kafka` )时，Quarkus通常可以自动检测可用的序列化器和反序列化器类。这种自动检测是基于 `@Incoming` 和 `@Outgoing` 方法的声明，以及注入的 `@Channel` 。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1559
msgid "For example, if you declare"
msgstr "例如，如果您声明"

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1566
#, no-wrap
msgid ""
"@Outgoing(\"generated-price\")\n"
"public Multi<Integer> generate() {\n"
"    ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1569
msgid "and your configuration indicates that the `generated-price` channel uses the `smallrye-kafka` connector, then Quarkus will automatically set the `value.serializer` to Kafka's built-in `IntegerSerializer`."
msgstr "而您的配置表明 `generated-price`  channel 使用了 `smallrye-kafka` 连接器，那么Quarkus会自动将 `value.serializer` 设置为Kafka内置的 `IntegerSerializer` 。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1571
msgid "Similarly, if you declare"
msgstr "同样地，如果您声明"

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1578
#, no-wrap
msgid ""
"@Incoming(\"my-kafka-records\")\n"
"public void consume(KafkaRecord<Long, byte[]> record) {\n"
"    ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1581
msgid "and your configuration indicates that the `my-kafka-records` channel uses the `smallrye-kafka` connector, then Quarkus will automatically set the `key.deserializer` to Kafka's built-in `LongDeserializer`, as well as the `value.deserializer` to `ByteArrayDeserializer`."
msgstr "并且您的配置表明 `my-kafka-records`  channel 使用了 `smallrye-kafka` 连接器，那么Quarkus会自动将 `key.deserializer` 设置为Kafka内置的 `LongDeserializer` ，以及 `value.deserializer` 设置为 `ByteArrayDeserializer` 。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1583
msgid "Finally, if you declare"
msgstr "最后，如果您声明"

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1589
#, no-wrap
msgid ""
"@Inject\n"
"@Channel(\"price-create\")\n"
"Emitter<Double> priceEmitter;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1592
msgid "and your configuration indicates that the `price-create` channel uses the `smallrye-kafka` connector, then Quarkus will automatically set the `value.serializer` to Kafka's built-in `DoubleSerializer`."
msgstr "而您的配置表明 `price-create`  channel 使用 `smallrye-kafka` 连接器，那么Quarkus将自动将 `value.serializer` 设置为Kafka内置的 `DoubleSerializer` 。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1594
msgid "The full set of types supported by the serializer/deserializer autodetection is:"
msgstr "序列化器/反序列化器自动侦测所支持的全部类型有："

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1596
msgid "`short` and `java.lang.Short`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1597
msgid "`int` and `java.lang.Integer`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1598
msgid "`long` and `java.lang.Long`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1599
msgid "`float` and `java.lang.Float`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1600
msgid "`double` and `java.lang.Double`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1601
msgid "`byte[]`"
msgstr "`byte[]`"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1602
msgid "`java.lang.String`"
msgstr "`java.lang.String`"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1603
msgid "`java.util.UUID`"
msgstr "`java.util.UUID`"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1604
msgid "`java.nio.ByteBuffer`"
msgstr "`java.nio.ByteBuffer`"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1605
msgid "`org.apache.kafka.common.utils.Bytes`"
msgstr "`org.apache.kafka.common.utils.Bytes`"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1606
msgid "`io.vertx.core.buffer.Buffer`"
msgstr "`io.vertx.core.buffer.Buffer`"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1607
msgid "`io.vertx.core.json.JsonObject`"
msgstr "`io.vertx.core.json.JsonObject`"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1608
msgid "`io.vertx.core.json.JsonArray`"
msgstr "`io.vertx.core.json.JsonArray`"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1609
msgid "classes for which a direct implementation of `org.apache.kafka.common.serialization.Serializer<T>` / `org.apache.kafka.common.serialization.Deserializer<T>` is present."
msgstr "直接实现了 `org.apache.kafka.common.serialization.Serializer<T>` / `org.apache.kafka.common.serialization.Deserializer<T>` 的类。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1610
msgid "the implementation needs to specify the type argument `T` as the (de-)serialized type."
msgstr "这些实现类需要指定类型参数 `T` 作为(反)序列化的类型。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1611
msgid "classes generated from Avro schemas, as well as Avro `GenericRecord`, if Confluent or Apicurio Registry _serde_ is present"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1612
msgid "in case multiple Avro serdes are present, serializer/deserializer must be configured manually for Avro-generated classes, because autodetection is impossible"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1613
msgid "see xref:kafka-schema-registry-avro.adoc[Using Apache Kafka with Schema Registry and Avro] for more information about using Confluent or Apicurio Registry libraries"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1614
msgid "classes for which a subclass of `ObjectMapperSerializer` / `ObjectMapperDeserializer` is present, as described in <<jackson-serialization>>"
msgstr "`ObjectMapperSerializer` / `ObjectMapperDeserializer` 的子类，如 link:#jackson-serialization[[jackson序列化]] 中所述"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1615
msgid "it is technically not needed to subclass `ObjectMapperSerializer`, but in such case, autodetection isn't possible"
msgstr "技术上不需要对 `ObjectMapperSerializer` 子类化，但在这种情况下无法进行自动侦测"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1616
msgid "classes for which a subclass of `JsonbSerializer` / `JsonbDeserializer` is present, as described in <<jsonb-serialization>>"
msgstr "`JsonbSerializer` / `JsonbDeserializer` 的子类，如 link:#jsonb-serialization[[jsonb序列化]] 中所述"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1617
msgid "it is technically not needed to subclass `JsonbSerializer`, but in such case, autodetection isn't possible"
msgstr "技术上不需要对 `JsonbSerializer` 子类化，但在这种情况下无法进行自动侦测"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1619
msgid "If a serializer/deserializer is set by configuration, it won't be replaced by the autodetection."
msgstr "如果一个序列化器/反序列化器是通过配置设置的，那么它不会被自动检测所取代。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1622
msgid "In case you have any issues with serializer autodetection, you can switch it off completely by setting `quarkus.reactive-messaging.kafka.serializer-autodetection.enabled=false`.  If you find you need to do this, please file a bug in the link:https://github.com/quarkusio/quarkus/issues[Quarkus issue tracker] so we can fix whatever problem you have."
msgstr "如果您对使用序列化器自动侦测有任何疑问，您可以通过设置 `quarkus.reactive-messaging.kafka.serializer-autodetection.enabled=false` 来彻底关闭它。如果您需要这样做，请在 link:https://github.com/quarkusio/quarkus/issues[Quarkus问题跟踪] 中提交一个bug，这样我们就能跟踪并解决您的任何问题。"

#. type: Title ==
#: upstream/_versions/main/guides/kafka.adoc:1624
#, no-wrap
msgid "JSON Serializer/deserializer generation"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1626
msgid "Quarkus automatically generates serializers and deserializers for channels where:"
msgstr "以下情况下，Quarkus会自动为 channels 生成序列化器和反序列化器："

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1628
msgid "the serializer/deserializer is not configured"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1629
msgid "the auto-detection did not find a matching serializer/deserializer"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1631
msgid "It uses Jackson underneath."
msgstr "它的底层使用了Jackson。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1633
msgid "This generation can be disabled using:"
msgstr "可以用以下方法禁用这种生成机制："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1637
#, no-wrap
msgid "quarkus.reactive-messaging.kafka.serializer-generation.enabled=false\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1641
msgid "Generation does not support collections such as `List<Fruit>`.  Refer to <<jackson-serialization>> to write your own serializer/deserializer for this case."
msgstr "生成机制不支持诸如 `List<Fruit>` 这样的集合。请参考 link:#jackson-serialization[[jackson序列化]] 为这种情况编写您自己的序列化器/反序列化器。"

#. type: Title ==
#: upstream/_versions/main/guides/kafka.adoc:1642
#, no-wrap
msgid "Using Schema Registry"
msgstr "使用Schema注册表"

#. type: Title ==
#: upstream/_versions/main/guides/kafka.adoc:1647
#, no-wrap
msgid "Health Checks"
msgstr "健康检查"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1651
msgid "Quarkus provides several health checks for Kafka.  These checks are used in combination with the `quarkus-smallrye-health` extension."
msgstr "Quarkus为Kafka提供了几种健康检查方式。这些方式需要与 `quarkus-smallrye-health` 扩展结合使用。"

#. type: Title ===
#: upstream/_versions/main/guides/kafka.adoc:1652
#, no-wrap
msgid "Kafka Broker Readiness Check"
msgstr "Kafka Broker就绪检查(Readiness Check)"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1657
msgid "When using the `quarkus-kafka-client` extension, you can enable _readiness_ health check by setting the `quarkus.kafka.health.enabled` property to `true` in your `application.properties`.  This check reports the status of the interaction with a _default_ Kafka broker (configured using `kafka.bootstrap.servers`).  It requires an _admin connection_ with the Kafka broker, and it is disabled by default.  If enabled, when you access the `/q/health/ready` endpoint of your application, you will have information about the connection validation status."
msgstr "当使用 `quarkus-kafka-client` 扩展时，您可以通过在您的 `application.properties` 配置文件中将 `quarkus.kafka.health.enabled` 属性设置为 `true` 来启用 _就绪_ 健康检查。该检查会报告与 _默认的_ Kafka Broker(使用 `kafka.bootstrap.servers` 配置)的交互状态。它需要一个与Kafka Broker的 _管理员连接_ ，并且默认是禁用的。如果启用，当您访问您应用程序的 `/q/health/ready` 节点时，您将获得关于连接验证状态的信息。"

#. type: Title ===
#: upstream/_versions/main/guides/kafka.adoc:1658
#, no-wrap
msgid "Kafka Reactive Messaging Health Checks"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1660
msgid "When using Reactive Messaging and the Kafka connector, each configured channel (incoming or outgoing) provides _startup_, _liveness_ and _readiness_ checks."
msgstr "当使用响应式消息传递和Kafka 连接器时，每个配置的 channel (传入或传出)都会提供 _启动_ 、 _活跃度(liveness)_ 和 _就绪_ 检查。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1662
msgid "The _startup_ check verifies that the communication with Kafka cluster is established."
msgstr "_启动_ 检查确保与Kafka集群的通信是否建立。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1663
msgid "The _liveness_ check captures any unrecoverable failure happening during the communication with Kafka."
msgstr "_活跃性_ 检查可以捕获与Kafka通信过程中发生的任何不可恢复的故障。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1664
msgid "The _readiness_ check verifies that the Kafka connector is ready to consume/produce messages to the configured Kafka topics."
msgstr "_就绪_ 检查确保Kafka 连接器是否准备好针对配置的Kafka topic消费或生产消息。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1666
msgid "For each channel, you can disable the checks using:"
msgstr "对于每个 channel ，您都可以禁用检查，通过："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1670
#, no-wrap
msgid "# Disable both liveness and readiness checks with `health-enabled=false`:\n"
msgstr "# 通过 `health-enabled=false` 来同时禁用活跃性检查和就绪检查:\n"

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1675
#, no-wrap
msgid ""
"# Incoming channel (receiving records form Kafka)\n"
"mp.messaging.incoming.your-channel.health-enabled=false\n"
"# Outgoing channel (writing records to Kafka)\n"
"mp.messaging.outgoing.your-channel.health-enabled=false\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1677
#, no-wrap
msgid "# Disable only the readiness check with `health-readiness-enabled=false`:\n"
msgstr "# 通过 `health-readiness-enabled=false` 来单独禁用就绪检查:\n"

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1680
#, no-wrap
msgid ""
"mp.messaging.incoming.your-channel.health-readiness-enabled=false\n"
"mp.messaging.outgoing.your-channel.health-readiness-enabled=false\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1684
msgid "You can configure the `bootstrap.servers` for each channel using `mp.messaging.incoming|outgoing.$channel.bootstrap.servers` property.  Default is `kafka.bootstrap.servers`."
msgstr "您可以使用 `mp.messaging.incoming|outgoing.$channel.bootstrap.servers` 属性为每个 channel 配置 `bootstrap.servers` 。默认是 `kafka.bootstrap.servers` 。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1688
msgid "Reactive Messaging _startup_ and _readiness_ checks offer two strategies.  The default strategy verifies that an active connection is established with the broker.  This approach is not intrusive as it's based on built-in Kafka client metrics."
msgstr "响应式消息传递的 _启动_ 和 _就绪_ 检查提供了两种策略。默认策略是确认是否与broker建立了活动连接。这种方法不具有侵入性，因为它基于内置的Kafka客户端指标。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1692
msgid "Using the `health-topic-verification-enabled=true` attribute, _startup_ probe uses an _admin client_ to check for the list of topics.  Whereas the _readiness_ probe for an incoming channel checks that at least one partition is assigned for consumption, and for an outgoing channel checks that the topic used by the producer exist in the broker."
msgstr "使用 `health-topic-verification-enabled=true` 属性， _启动_ 探针使用一个 _管理客户端_ 来检查topic列表。而传入 channel 的 _就绪_ 探针将检查是否至少有一个分区被分配用于消费，而传出 channel 则检查生产者使用的topic是否存在于broker中。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1695
msgid "Note that to achieve this, an _admin connection_ is required.  You can adjust the timeout for topic verification calls to the broker using the `health-topic-verification-timeout` configuration."
msgstr "注意，要实现这一点， 一个_管理员连接_是必须存在的 。您可以使用 `health-topic-verification-timeout` 来调整对broker的topic验证调用的超时时间。"

#. type: Title ==
#: upstream/_versions/main/guides/kafka.adoc:1696
#, no-wrap
msgid "Kafka Streams"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1699
msgid "This is described in a dedicated guide: xref:kafka-streams.adoc[Using Apache Kafka Streams]."
msgstr "这部分在专门的指南中有所描述：link:kafka-streams.html[使用Apache Kafka流] 。"

#. type: Title ==
#: upstream/_versions/main/guides/kafka.adoc:1700
#, no-wrap
msgid "Using Snappy for message compression"
msgstr "使用Snappy进行消息压缩"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1703
msgid "On _outgoing_ channels, you can enable Snappy compression by setting the `compression.type` attribute to `snappy`:"
msgstr "在 _出站_  channels 上，您可以通过将 `compression.type` 设置为 `snappy` 来启用Snappy压缩："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1707
#, no-wrap
msgid "mp.messaging.outgoing.fruit-out.compression.type=snappy\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1711
msgid "In JVM mode, it will work out of the box.  However, to compile your application to a native executable, you need to:"
msgstr "在JVM模式下，它开箱即用。然而，如果要把您的应用程序编译成一个原生的可执行文件，您需要："

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1713
msgid "Uses GraalVM 21.+"
msgstr "使用GraalVM 21.+"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1714
msgid "Add `quarkus.kafka.snappy.enabled=true` to your `application.properties`"
msgstr "将 `quarkus.kafka.snappy.enabled=true` 添加到您的 `application.properties` 中"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1716
msgid "In native mode, Snappy is disabled by default as the use of Snappy requires embedding a native library and unpacking it when the application starts."
msgstr "在原生模式下，Snappy默认是禁用的，因为使用Snappy需要嵌入一个原生库，并在应用程序启动时对其进行解包。"

#. type: Title ==
#: upstream/_versions/main/guides/kafka.adoc:1717
#, no-wrap
msgid "Authentication with OAuth"
msgstr "用OAuth进行认证"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1721
msgid "If your Kafka broker uses OAuth as authentication mechanism, you need to configure the Kafka consumer to enable this authentication process.  First, add the following dependency to your application:"
msgstr "如果您的Kafka broker使用OAuth作为认证机制，您需要配置Kafka消费者来启用这个认证过程。首先，在您的应用程序中添加以下依赖："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1729
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.strimzi</groupId>\n"
"    <artifactId>kafka-oauth-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1735
#, no-wrap
msgid "implementation(\"io.strimzi:kafka-oauth-client\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1739
msgid "This dependency provides the callback handler required to handle the OAuth workflow.  Then, in the `application.properties`, add:"
msgstr "这个依赖提供了处理OAuth工作流所需的回调处理器。然后，在 `application.properties` ，添加："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1749
#, no-wrap
msgid ""
"mp.messaging.connector.smallrye-kafka.security.protocol=SASL_PLAINTEXT\n"
"mp.messaging.connector.smallrye-kafka.sasl.mechanism=OAUTHBEARER\n"
"mp.messaging.connector.smallrye-kafka.sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n"
"  oauth.client.id=\"team-a-client\" \\\n"
"  oauth.client.secret=\"team-a-client-secret\" \\\n"
"  oauth.token.endpoint.uri=\"http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token\" ;\n"
"mp.messaging.connector.smallrye-kafka.sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1751
#, no-wrap
msgid "quarkus.ssl.native=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1754
msgid "Update the `oauth.client.id`, `oauth.client.secret` and `oauth.token.endpoint.uri` values."
msgstr "更改 `oauth.client.id` ， `oauth.client.secret` 和 `oauth.token.endpoint.uri` 值。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1756
msgid "OAuth authentication works for both JVM and native modes. Since SSL in not enabled by default in native mode, `quarkus.ssl.native=true` must be added to support JaasClientOauthLoginCallbackHandler, which uses SSL. (See the xref:native-and-ssl.adoc[Using SSL with Native Executables] guide for more details.)"
msgstr "OAuth认证在JVM和原生模式下都有效。由于SSL在原生模式下默认不启用，所以必须添加 `quarkus.ssl.native=true` ，以支持JaasClientOauthLoginCallbackHandler。它使用了SSL。(更多细节请参见《 link:native-and-ssl.html[在原生可执行文件中使用SSL] 》指南)。"

#. type: Title ==
#: upstream/_versions/main/guides/kafka.adoc:1757
#, no-wrap
msgid "Testing a Kafka application"
msgstr "测试一个Kafka应用程序"

#. type: Title ===
#: upstream/_versions/main/guides/kafka.adoc:1759
#, no-wrap
msgid "Testing without a broker"
msgstr "无broker的测试"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1763
msgid "It can be useful to test the application without having to start a Kafka broker.  To achieve this, you can _switch_ the channels managed by the Kafka connector to _in-memory_."
msgstr "在不启动Kafka broker的情况下测试应用程序会很有用。为了实现这一点，您可以把Kafka连接器管理的 channels  _切换_ 到_内存 _中 。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1765
msgid "This approach only works for JVM tests. It cannot be used for native tests (because they do not support injection)."
msgstr "这种方法只适用于JVM测试。它不能用于原生测试(因为原生模式不支持注入)。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1767
msgid "Let's say we want to test the following processor application:"
msgstr "假设我们想测试以下的处理器应用："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1772
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class BeverageProcessor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1784
#, no-wrap
msgid ""
"    @Incoming(\"orders\")\n"
"    @Outgoing(\"beverages\")\n"
"    Beverage process(Order order) {\n"
"        System.out.println(\"Order received \" + order.getProduct());\n"
"        Beverage beverage = new Beverage();\n"
"        beverage.setBeverage(order.getProduct());\n"
"        beverage.setCustomer(order.getCustomer());\n"
"        beverage.setOrderId(order.getOrderId());\n"
"        beverage.setPreparationState(\"RECEIVED\");\n"
"        return beverage;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1789
msgid "First, add the following test dependency to your application:"
msgstr "首先，在您的应用程序中添加以下测试依赖："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1798
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.smallrye.reactive</groupId>\n"
"    <artifactId>smallrye-reactive-messaging-in-memory</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1804
#, no-wrap
msgid "testImplementation(\"io.smallrye.reactive:smallrye-reactive-messaging-in-memory\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1807
msgid "Then, create a Quarkus Test Resource as follows:"
msgstr "然后，按以下方法创建Quarkus测试资源："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1811
#, no-wrap
msgid "public class KafkaTestResourceLifecycleManager implements QuarkusTestResourceLifecycleManager {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1821
#, no-wrap
msgid ""
"    @Override\n"
"    public Map<String, String> start() {\n"
"        Map<String, String> env = new HashMap<>();\n"
"        Map<String, String> props1 = InMemoryConnector.switchIncomingChannelsToInMemory(\"orders\");     // <1>\n"
"        Map<String, String> props2 = InMemoryConnector.switchOutgoingChannelsToInMemory(\"beverages\");  // <2>\n"
"        env.putAll(props1);\n"
"        env.putAll(props2);\n"
"        return env;  // <3>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1827
#, no-wrap
msgid ""
"    @Override\n"
"    public void stop() {\n"
"        InMemoryConnector.clear();  // <4>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1829
msgid "Switch the incoming channel `orders` (expecting messages from Kafka) to in-memory."
msgstr "将传入 channel  `orders` (等待来自Kafka的消息)切换到内存中。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1830
msgid "Switch the outgoing channel `beverages` (writing messages to Kafka) to in-memory."
msgstr "将出站 channel `beverages`(向Kafka写消息)切换到内存中。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1831
msgid "Builds and returns a `Map` containing all the properties required to configure the application to use in-memory channels."
msgstr "构建并返回一个 `Map` ，包含配置应用程序使用内存 channels 所需的所有属性。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1832
msgid "When the test stops, clear the `InMemoryConnector` (discard all the received and sent messages)"
msgstr "当测试停止时，清除 `InMemoryConnector` (丢弃所有接收和发送的信息)。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1834
msgid "Create a Quarkus Test using the test resource created above:"
msgstr "使用上面创建的测试资源创建一个Quarkus测试："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1840
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(KafkaTestResourceLifecycleManager.class)\n"
"class BaristaTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1843
#, no-wrap
msgid ""
"    @Inject\n"
"    InMemoryConnector connector; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1848
#, no-wrap
msgid ""
"    @Test\n"
"    void testProcessOrder() {\n"
"        InMemorySource<Order> ordersIn = connector.source(\"orders\");     // <2>\n"
"        InMemorySink<Beverage> beveragesOut = connector.sink(\"beverages\");  // <3>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1853
#, no-wrap
msgid ""
"        Order order = new Order();\n"
"        order.setProduct(\"coffee\");\n"
"        order.setName(\"Coffee lover\");\n"
"        order.setOrderId(\"1234\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1855
#, no-wrap
msgid "        ordersIn.send(order);  // <4>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1857
#, no-wrap
msgid "        await().<List<? extends Message<Beverage>>>until(beveragesOut::received, t -> t.size() == 1); // <5>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1864
#, no-wrap
msgid ""
"        Beverage queuedBeverage = beveragesOut.received().get(0).getPayload();\n"
"        Assertions.assertEquals(Beverage.State.READY, queuedBeverage.getPreparationState());\n"
"        Assertions.assertEquals(\"coffee\", queuedBeverage.getBeverage());\n"
"        Assertions.assertEquals(\"Coffee lover\", queuedBeverage.getCustomer());\n"
"        Assertions.assertEquals(\"1234\", queuedBeverage.getOrderId());\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1868
msgid "Inject the in-memory connector in your test class."
msgstr "在您的测试类中注入内存内连接器。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1869
msgid "Retrieve the incoming channel (`orders`) - the channel must have been switched to in-memory in the test resource."
msgstr "检索传入 channel ( `orders` ) - 该 channel 必须在测试资源中被切换到内存中。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1870
msgid "Retrieve the outgoing channel (`beverages`) - the channel must have been switched to in-memory in the test resource."
msgstr "检索传出 channel  ( `beverages` ) - 该 channel 必须在测试资源中被切换到内存中。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1872
msgid "Use the `send` method to send a message to the `orders` channel.  The application will process this message and send a message to `beverages` channel."
msgstr "使用 `send` 方法向 `orders`  channel 发送一个消息。应用程序将处理这个消息并向 `beverages`  channel 发送消息。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1873
msgid "Use the `received` method on `beverages` channel to check the messages produced by the application."
msgstr "在 `beverages`  channel 上使用 `received` 方法来检查应用程序产生的消息。"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:1878
msgid "With in-memory channels we were able to test application code processing messages without starting a Kafka broker.  Note that different in-memory channels are independent, and switching channel connector to in-memory does not simulate message delivery between channels configured to the same Kafka topic."
msgstr "有了内存 channels ，我们就可以测试应用程序代码的消息方法，而无需启动Kafka broker。请注意，不同的内存 channel 是独立的，将 channel 连接器切换到内存中并不能模拟配置到同一Kafka topic的 channel 之间的消息传递。"

#. type: Title ===
#: upstream/_versions/main/guides/kafka.adoc:1880
#, no-wrap
msgid "Testing using a Kafka broker"
msgstr "使用Kafka broker的测试"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1885
msgid "If you are using <<kafka-dev-services>>, a Kafka broker will be started and available throughout the tests, unless it is disabled in `%test` profile.  While it is possible to connect to this broker using Kafka Clients API, https://smallrye.io/smallrye-reactive-messaging/latest/kafka/test-companion/[Kafka Companion Library] proposes an easier way of interacting with a Kafka broker and, creating consumer, producer and admin actions inside tests."
msgstr "如果您使用 link:#kafka-dev-services[[kafka-dev-services]] ，Kafka broker将被启动并在整个测试中可用，除非它在 `%test` profile中被禁用。虽然可以使用Kafka客户端API连接到这个broker，但 link:https://smallrye.io/smallrye-reactive-messaging/latest/kafka/test-companion/[Kafka Companion Library] 提出了一种更简单的方式来与Kafka broker通信，并在测试中创建消费者、生产者和管理操作。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1887
msgid "For using `KafkaCompanion` API in tests, start by adding the following dependency:"
msgstr "为了在测试中使用 `KafkaCompanion` API，首先要添加以下依赖："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1895
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-kafka-companion</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1898
msgid "which provides `io.quarkus.test.kafka.KafkaCompanionResource` - an implementation of `io.quarkus.test.common.QuarkusTestResourceLifecycleManager`."
msgstr "它提供了 `io.quarkus.test.kafka.KafkaCompanionResource` -- `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` 的一种实现。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1900
msgid "Then use `@QuarkusTestResource` to configure the Kafka Companion in tests, for example:"
msgstr "然后使用 `@QuarkusTestResource` 在测试中配置Kafka Companion，比如："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1904
#, no-wrap
msgid "import static org.junit.jupiter.api.Assertions.assertEquals;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1906
#, no-wrap
msgid "import java.util.UUID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1909
#, no-wrap
msgid ""
"import org.apache.kafka.clients.producer.ProducerRecord;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1916
#, no-wrap
msgid ""
"import io.quarkus.test.common.QuarkusTestResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.kafka.InjectKafkaCompanion;\n"
"import io.quarkus.test.kafka.KafkaCompanionResource;\n"
"import io.smallrye.reactive.messaging.kafka.companion.ConsumerTask;\n"
"import io.smallrye.reactive.messaging.kafka.companion.KafkaCompanion;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1920
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(KafkaCompanionResource.class)\n"
"public class OrderProcessorTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1923
#, no-wrap
msgid ""
"    @InjectKafkaCompanion // <1>\n"
"    KafkaCompanion companion;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1927
#, no-wrap
msgid ""
"    @Test\n"
"    void testProcessor() {\n"
"        companion.produceStrings().usingGenerator(i -> new ProducerRecord<>(\"orders\", UUID.randomUUID().toString())); // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1929
#, no-wrap
msgid "        // Expect that the tested application processes orders from 'orders' topic and write to 'orders-processed' topic\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1935
#, no-wrap
msgid ""
"        ConsumerTask<String, String> orders = companion.consumeStrings().fromTopics(\"orders-processed\", 10); // <3>\n"
"        orders.awaitCompletion(); // <4>\n"
"        assertEquals(10, orders.count());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1938
msgid "`@InjectKafkaCompanion` injects the `KafkaCompanion` instance, configured to access the Kafka broker created for tests."
msgstr "`@InjectKafkaCompanion` 注入了 `KafkaCompanion` 实例，并被配置为可访问为测试目的而创建的Kafka broker。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1939
msgid "Use `KafkaCompanion` to create producer task which writes 10 records to 'orders' topic."
msgstr "使用 `KafkaCompanion` 来创建生产者任务，用于向 'orders' topic写入10条记录。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1940
msgid "Create consumer task which subscribes to 'orders-processed' topic and consumes 10 records."
msgstr "创建消费者任务，用来订阅'orders-processed'topic并消费10条记录。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1941
msgid "Await completion of the consumer task."
msgstr "等待消费者任务的完成。"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:1945
msgid "If the Kafka Dev Service is available during tests, `KafkaCompanionResource` uses the created Kafka broker, otherwise it creates a Kafka broker using https://github.com/strimzi/test-container[Strimzi Test Container]."
msgstr "如果Kafka Dev Service在测试期间是可用的， `KafkaCompanionResource` 则会使用创建的Kafka broker，否则就使用 link:https://github.com/strimzi/test-container[Strimzi测试容器]创建一个Kafka broker。"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:1947
msgid "The configuration of the created Kafka broker can be customized using `@ResourceArg`, for example:"
msgstr "创建Kafka broker的配置可以通过使用 `@ResourceArg` 来自定义，例如："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1958
#, no-wrap
msgid ""
"@QuarkusTestResource(value = KafkaCompanionResource.class, initArgs = {\n"
"        @ResourceArg(name = \"strimzi.kafka.image\", value = \"quay.io/strimzi/kafka:0.28.0-kafka-3.0.0\"), // Image name\n"
"        @ResourceArg(name = \"kafka.port\", value = \"9092\"), // Fixed port for kafka, by default it will be exposed on a random port\n"
"        @ResourceArg(name = \"kraft\", value = \"true\"), // Enable Kraft mode\n"
"        @ResourceArg(name = \"num.partitions\", value = \"3\"), // Other custom broker configurations\n"
"})\n"
"public class OrderProcessorTest {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/kafka.adoc:1961
#, no-wrap
msgid "Custom test resource"
msgstr "自定义测试资源"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:1965
msgid "Alternatively, you can start a Kafka broker in a test resource.  The following snippet shows a test resource starting a Kafka broker using https://www.testcontainers.org/modules/kafka/[Testcontainers]:"
msgstr "另外，您也可以在测试资源中启动一个Kafka broker。下面的片段展示了如何在一个测试资源使用 link:https://www.testcontainers.org/modules/kafka/[Testcontainers] 启动一个Kafka broker："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1969
#, no-wrap
msgid "public class KafkaResource implements QuarkusTestResourceLifecycleManager {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1971
#, no-wrap
msgid "    private final KafkaContainer kafka = new KafkaContainer();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1977
#, no-wrap
msgid ""
"    @Override\n"
"    public Map<String, String> start() {\n"
"        kafka.start();\n"
"        return Collections.singletonMap(\"kafka.bootstrap.servers\", kafka.getBootstrapServers());  // <1>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:1983
#, no-wrap
msgid ""
"    @Override\n"
"    public void stop() {\n"
"        kafka.close();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1985
msgid "Configure the Kafka bootstrap location, so the application connects to this broker."
msgstr "配置Kafka bootstrap位置，这样应用程序就会连接到这个broker。"

#. type: Title ==
#: upstream/_versions/main/guides/kafka.adoc:1989
#, no-wrap
msgid "Kubernetes Service Bindings"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1994
msgid "Quarkus Kafka extension supports xref:deploying-to-kubernetes.adoc[Service Binding Specification for Kubernetes].  You can enable this by adding the `quarkus-kubernetes-service-binding` extension to your application."
msgstr "Quarkus Kafka扩展支持 link:deploying-to-kubernetes.html[Kubernetes服务绑定规范] 。您可以通过添加 `quarkus-kubernetes-service-binding` 扩展来启用它。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:1996
msgid "When running in appropriately configured Kubernetes clusters, Kafka extension will pull its Kafka broker connection configuration from the service binding available inside the cluster, without the need for user configuration."
msgstr "当在正确配置的Kubernetes集群中运行时，Kafka扩展将从集群内部可用的服务绑定中获取Kafka broker连接配置，而不需要用户来配置。"

#. type: Title ==
#: upstream/_versions/main/guides/kafka.adoc:1997
#, no-wrap
msgid "Execution model"
msgstr "执行模型"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2002
msgid "Reactive Messaging invokes user's methods on an I/O thread.  Thus, by default, the methods must not block.  As described in <<blocking-processing>>, you need to add the `@Blocking` annotation on the method if this method will block the caller thread."
msgstr "响应式流会在I/O线程上调用用户的方法。因此在默认情况下，这些方法不能阻塞。正如 link:#blocking-processing[[阻塞处理]] 中所述，如果这个方法会阻塞调用者线程，那么您需要在方法上添加 `@Blocking` 注解。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2004
msgid "See the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture documentation] for further details on this topic."
msgstr "关于这个话题的更多细节，请看 link:quarkus-reactive-architecture.html[Quarkus响应式架构文档] 。"

#. type: Title ==
#: upstream/_versions/main/guides/kafka.adoc:2006
#, no-wrap
msgid "Configuration Reference"
msgstr "配置参考"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2009
msgid "More details about the SmallRye Reactive Messaging configuration can be found in the https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/3.1/kafka/kafka.html[SmallRye Reactive Messaging - Kafka Connector Documentation]."
msgstr "关于SmallRye Reactive Messaging配置的更多细节可以在 link:https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/3.1/kafka/kafka.html[SmallRye Reactive Messaging - Kafka Connector文档] 中找到。"

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:2013
msgid "Each channel can be disabled via configuration using:"
msgstr "每个 channel 都可以通过配置来禁用："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2017
#, no-wrap
msgid "mp.messaging.[incoming|outgoing].[channel].enabled=false\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/kafka.adoc:2021
msgid "The most important attributes are listed in the tables below:"
msgstr "以下表格中列出了最重要的属性："

#. type: Title ===
#: upstream/_versions/main/guides/kafka.adoc:2022
#, no-wrap
msgid "Incoming channel configuration (polling from Kafka)"
msgstr "入站 channel 配置(从Kafka轮询)"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2025
#: upstream/_versions/main/guides/kafka.adoc:2064
msgid "The following attributes are configured using:"
msgstr "以下属性通过该方式进行配置："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2029
#, no-wrap
msgid "mp.messaging.incoming.your-channel-name.attribute=value\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2032
#: upstream/_versions/main/guides/kafka.adoc:2071
msgid "Some properties have aliases which can be configured globally:"
msgstr "有些属性拥有可以进行全局配置的别名："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2036
#: upstream/_versions/main/guides/kafka.adoc:2075
#, no-wrap
msgid "kafka.bootstrap.servers=...\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2039
msgid "You can also pass any property supported by the underlying https://kafka.apache.org/documentation/#consumerconfigs[Kafka consumer]."
msgstr "您也可以传递底层 link:https://kafka.apache.org/documentation/#consumerconfigs[Kafka消费者] 支持的任何属性。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2041
msgid "For example, to configure the `max.poll.records` property, use:"
msgstr "例如，要配置 `max.poll.records` 属性，可以使用："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2045
#, no-wrap
msgid "mp.messaging.incoming.[channel].max.poll.records=1000\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2048
msgid "Some consumer client properties are configured to sensible default values:"
msgstr "一些消费者客户端属性被配置为相对合理的默认值："

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2050
#: upstream/_versions/main/guides/kafka.adoc:2089
msgid "If not set, `reconnect.backoff.max.ms` is set to `10000` to avoid high load on disconnection."
msgstr "如果没有设置， `reconnect.backoff.max.ms` 则会被配置为 `10000` ，以避免断开时导致的高负载。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2052
msgid "If not set, `key.deserializer` is set to `org.apache.kafka.common.serialization.StringDeserializer`."
msgstr "如果没有设置， `key.deserializer` 则会被设置为 `org.apache.kafka.common.serialization.StringDeserializer` 。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2054
msgid "The consumer `client.id` is configured according to the number of clients to create using `mp.messaging.incoming.[channel].partitions` property."
msgstr "消费者 `client.id` 会根据使用 `mp.messaging.incoming.[channel].partitions` 属性创建的客户端数量进行配置。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2056
msgid "If a `client.id` is provided, it is used as-is or suffixed with client index if `partitions` property is set."
msgstr "如果提供了一个 `client.id` ，它将直接被使用， 或者如果 `partitions` 属性被设置的话，则会被加上客户端索引的后缀。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2057
msgid "If a `client.id` is not provided, it is generated as `kafka-consumer-[channel][-index]`."
msgstr "如果没有提供 `client.id` ，则使用 `kafka-consumer-[channel][-index]` 来生成 。"

#. type: Title ===
#: upstream/_versions/main/guides/kafka.adoc:2061
#, no-wrap
msgid "Outgoing channel configuration (writing to Kafka)"
msgstr "出站 channel 配置(写入Kafka)。"

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2068
#, no-wrap
msgid "mp.messaging.outgoing.your-channel-name.attribute=value\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2078
msgid "You can also pass any property supported by the underlying https://kafka.apache.org/documentation/#producerconfigs[Kafka producer]."
msgstr "您也可以传递底层 link:https://kafka.apache.org/documentation/#producerconfigs[Kafka生产者] 支持的任何属性。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2080
msgid "For example, to configure the `max.block.ms` property, use:"
msgstr "例如，要配置 `max.block.ms` 属性，可以使用："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2084
#, no-wrap
msgid "mp.messaging.incoming.[channel].max.block.ms=10000\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2087
msgid "Some producer client properties are configured to sensible default values:"
msgstr "一些生产者客户端属性被配置为合理的默认值："

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2091
msgid "If not set, `key.serializer` is set to `org.apache.kafka.common.serialization.StringSerializer`."
msgstr "如果没有设置， `key.serializer` 则会被设置为 `org.apache.kafka.common.serialization.StringSerializer` 。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2093
msgid "If not set, producer `client.id` is generated as `kafka-producer-[channel]`."
msgstr "如果没有设置，生产者 `client.id` 则会按照 `kafka-producer-[channel]` 来生成。"

#. type: Title ===
#: upstream/_versions/main/guides/kafka.adoc:2097
#, no-wrap
msgid "Kafka Configuration Resolution"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2101
msgid "Quarkus exposes all Kafka related application properties, prefixed with `kafka.` or `KAFKA_` inside a configuration map with `default-kafka-broker` name.  This configuration is used to establish the connection with the Kafka broker."
msgstr "Quarkus公开了所有与Kafka相关的应用属性，这些属性使用 `default-kafka-broker` 名称加 `kafka.` 或 `KAFKA_` 的前缀 。这个配置被用来建立与Kafka broker的连接。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2103
msgid "In addition to this default configuration, you can configure the name of the `Map` producer using the `kafka-configuration` attribute:"
msgstr "除了这个默认配置外，您还可以使用 `kafka-configuration` 属性配置 `Map` 生产者的名称："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2108
#, no-wrap
msgid ""
"mp.messaging.incoming.my-channel.connector=smallrye-kafka\n"
"mp.messaging.incoming.my-channel.kafka-configuration=my-configuration\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2112
msgid "In this case, the connector looks for the `Map` associated with the `my-configuration` name.  If `kafka-configuration` is not set, an optional lookup for a `Map` exposed with the channel name (`my-channel` in the previous example) is done."
msgstr "在这种情况下，连接器会查询与 `my-configuration` 名称相关的 `Map` 。如果没有设置 `kafka-configuration` ，就会进行额外的查询来寻找与 channel 名称相关的 `Map` (在前面的例子中是 `my-channel` )。"

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2123
#, no-wrap
msgid ""
"@Produces\n"
"@ApplicationScoped\n"
"@Identifier(\"my-configuration\")\n"
"Map<String, Object> outgoing() {\n"
"    return Map.ofEntries(\n"
"            Map.entry(\"value.serializer\", ObjectMapperSerializer.class.getName())\n"
"    );\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2126
msgid "If `kafka-configuration` is set and no `Map` can be found, the deployment fails."
msgstr "如果设置了 `kafka-configuration` ，但没有找到 `Map` ，则部署会失败。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2128
msgid "Attribute values are resolved as follows:"
msgstr "属性值的解决方式如下："

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2130
msgid "the attribute is set directly on the channel configuration (`mp.messaging.incoming.my-channel.attribute=value`),"
msgstr "属性是直接在 channel 配置上设置的( `mp.messaging.incoming.my-channel.attribute=value` ),"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2131
msgid "if not set, the connector looks for a `Map` with the channel name or the configured `kafka-configuration` (if set) and the value is retrieved from that `Map`"
msgstr "如果没有设置，连接器会使用 channel 名称或 `kafka-configuration` (如果设置了)来查找查找一个 `Map` ，并从 `Map` 中取值"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2132
msgid "If the resolved `Map` does not contain the value the default `Map` is used (exposed with the `default-kafka-broker` name)"
msgstr "如果 `Map` 不包含该值，则使用默认的 `Map` (通过 `default-kafka-broker` 名称暴露)"

#. type: Title ==
#: upstream/_versions/main/guides/kafka.adoc:2133
#, no-wrap
msgid "Integrating with Kafka - Common patterns"
msgstr "与Kafka的整合--通用模式"

#. type: Title ===
#: upstream/_versions/main/guides/kafka.adoc:2135
#, no-wrap
msgid "Writing to Kafka from an HTTP endpoint"
msgstr "从HTTP节点写消息到Kafka"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2138
msgid "To send messages to Kafka from an HTTP endpoint, inject an `Emitter` (or a `MutinyEmitter`) in your endpoint:"
msgstr "要从HTTP节点向Kafka发送消息，可以在您的节点中注入一个 `Emitter` (或一个 `MutinyEmitter` )："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2142
#: upstream/_versions/main/guides/kafka.adoc:2190
#: upstream/_versions/main/guides/kafka.adoc:2231
#: upstream/_versions/main/guides/kafka.adoc:2249
#: upstream/_versions/main/guides/kafka.adoc:2279
#: upstream/_versions/main/guides/kafka.adoc:2311
#: upstream/_versions/main/guides/kafka.adoc:2330
#: upstream/_versions/main/guides/kafka.adoc:2365
#: upstream/_versions/main/guides/kafka.adoc:2408
#: upstream/_versions/main/guides/kafka.adoc:2449
#: upstream/_versions/main/guides/kafka.adoc:2556
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2144
#: upstream/_versions/main/guides/kafka.adoc:2192
#: upstream/_versions/main/guides/kafka.adoc:2410
#, no-wrap
msgid "import java.util.concurrent.CompletionStage;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2149
#: upstream/_versions/main/guides/kafka.adoc:2197
#, no-wrap
msgid ""
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2155
#: upstream/_versions/main/guides/kafka.adoc:2205
#: upstream/_versions/main/guides/kafka.adoc:2420
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"public class ResourceSendingToKafka {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2157
#, no-wrap
msgid "    @Channel(\"kafka\") Emitter<String> emitter;          // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2164
#, no-wrap
msgid ""
"    @POST\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public CompletionStage<Void> send(String payload) { // <2>\n"
"        return emitter.send(payload);                   // <3>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2166
msgid "Inject an `Emitter<String>`"
msgstr "注入一个 `Emitter<String>`"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2167
msgid "The HTTP method receives the payload and returns a `CompletionStage` completed when the message is written to Kafka"
msgstr "HTTP方法接会接收payload，并在消息被写入Kafka时返回一个 `CompletionStage`"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2168
msgid "Send the message to Kafka, the `send` method returns a `CompletionStage`"
msgstr "将消息发送到Kafka后， `send` 方法会返回一个 `CompletionStage`"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2171
msgid "The endpoint sends the passed payload (from a `POST` HTTP request) to the emitter.  The emitter's channel is mapped to a Kafka topic in the `application.properties` file:"
msgstr "节点将已传递的payload(来自 `POST` HTTP请求)发送给emitter。emitter的 channel 被映射到 `application.properties` 文件中指定的一个Kafka topic："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2176
#, no-wrap
msgid ""
"mp.messaging.outgoing.kafka.connector=smallrye-kafka\n"
"mp.messaging.outgoing.kafka.topic=my-topic\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2182
msgid "The endpoint returns a `CompletionStage` indicating the asynchronous nature of the method.  The `emitter.send` method returns a `CompletionStage<Void>` .  The returned future is completed when the message has been written to Kafka.  If the writing fails, the returned `CompletionStage` is completed exceptionally."
msgstr "节点会返回一个 `CompletionStage` ，表明该方法是异步的。 `emitter.send` 方法返回一个 `CompletionStage<Void>` 。当消息被写入Kafka时，返回的Future就被认为i完成了。如果写入失败，返回的 `CompletionStage` 会抛出异常。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2184
msgid "If the endpoint does not return a `CompletionStage`, the HTTP response may be written before the message is sent to Kafka, and so failures won't be reported to the user."
msgstr "如果节点没有返回 `CompletionStage` ，HTTP响应可能会返回在消息被发送到Kafka之前，因此失败不会被报告给用户。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2186
msgid "If you need to send a Kafka record, use:"
msgstr "如果您需要发送一条Kafka记录，请使用："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2202
#, no-wrap
msgid "import io.smallrye.reactive.messaging.kafka.Record;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2207
#, no-wrap
msgid "    @Channel(\"kafka\") Emitter<Record<String,String>> emitter;  // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2215
#, no-wrap
msgid ""
"    @POST\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public CompletionStage<Void> send(String payload) {\n"
"        return emitter.send(Record.of(\"my-key\", payload));    // <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2217
msgid "Note the usage of an `Emitter<Record<K, V>>`"
msgstr "声明 `Emitter<Record<K, V>>` 的使用"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2218
msgid "Create the record using `Record.of(k, v)`"
msgstr "通过 `Record.of(k, v)` 来创建记录"

#. type: Title ===
#: upstream/_versions/main/guides/kafka.adoc:2219
#, no-wrap
msgid "Persisting Kafka messages with Hibernate with Panache"
msgstr "用Hibernate与Panache来持久化Kafka消息"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2222
msgid "To persist objects received from Kafka into a database, you can use Hibernate with Panache."
msgstr "为了将从Kafka接收到的对象持久化到数据库中，您可以结合使用Hibernate与Panache。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2224
msgid "If you use Hibernate Reactive, look at <<persisting-kafka-messages-with-hibernate-reactive>>."
msgstr "如果您使用Hibernate Reactive，请参看 link:#persisting-kafka-messages-with-hibernate-reactive[[使用Hibernate Reactive持久化Kafka消息]] 。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2227
#: upstream/_versions/main/guides/kafka.adoc:2307
msgid "Let's imagine you receive `Fruit` objects.  For simplicity purposes, our `Fruit` class is pretty simple:"
msgstr "让我们假设您收到了 `Fruit` 对象。为了简单起见，我们的 `Fruit` 类非常简单："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2233
#: upstream/_versions/main/guides/kafka.adoc:2313
#, no-wrap
msgid "import javax.persistence.Entity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2235
#, no-wrap
msgid "import io.quarkus.hibernate.orm.panache.PanacheEntity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2238
#: upstream/_versions/main/guides/kafka.adoc:2318
#, no-wrap
msgid ""
"@Entity\n"
"public class Fruit extends PanacheEntity {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2240
#: upstream/_versions/main/guides/kafka.adoc:2320
#, no-wrap
msgid "    public String name;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2245
#: upstream/_versions/main/guides/kafka.adoc:2326
msgid "To consume `Fruit` instances stored on a Kafka topic, and persist them into a database, you can use the following approach:"
msgstr "为了消费存储在Kafka topic上的 `Fruit` 实例，并将其持久化到数据库中，您可以使用以下方法："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2256
#, no-wrap
msgid "import io.smallrye.common.annotation.Blocking;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2259
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class FruitConsumer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2266
#, no-wrap
msgid ""
"    @Incoming(\"fruits\")                                     // <1>\n"
"    @Transactional                                          // <2>\n"
"    public void persistFruits(Fruit fruit) {                // <3>\n"
"        fruit.persist();                                    // <4>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2268
msgid "Configuring the incoming channel. This channel reads from Kafka."
msgstr "配置传入 channel 。该 channel 从Kafka读取消息。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2270
msgid "As we are writing in a database, we must be in a transaction. This annotation starts a new transaction and commits it when the method returns.  Quarkus automatically considers the method as _blocking_. Indeed, writing to a database using classic Hibernate is blocking. So, Quarkus calls the method on a worker thread you can block (and not an I/O thread)."
msgstr "由于我们是往数据库中写入数据，所以必须使用事务。这个注解启动了一个新的事务，并在方法返回时提交它。Quarkus会自动认为这个方法是 _阻塞的_ 。事实上，使用常规的Hibernate方法向数据库写入是阻塞操作。所以，Quarkus会在一个可阻塞的工作线程中调用这个方法(而不是在I/O线程中)。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2271
msgid "The method receives each Fruit. Note that you would need a deserializer to reconstruct the Fruit instances from the Kafka records."
msgstr "该方法接收每个Fruit对象。注意，您需要一个反序列化器来从Kafka记录中重建Fruit实例。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2272
msgid "Persist the received `fruit` object."
msgstr "持久化接收到的 `fruit` 对象。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2275
msgid "As mentioned in <4>, you need a deserializer that can create a `Fruit` from the record.  This can be done using a Jackson deserializer:"
msgstr "正如<4>中提到的，您需要一个能从记录中重建 `Fruit` 对象的反序列化器。可以使用Jackson的反序列化器来完成："

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2290
#: upstream/_versions/main/guides/kafka.adoc:2376
msgid "The associated configuration would be:"
msgstr "相关的配置如下："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2295
#: upstream/_versions/main/guides/kafka.adoc:2381
#, no-wrap
msgid ""
"mp.messaging.incoming.fruits.connector=smallrye-kafka\n"
"mp.messaging.incoming.fruits.value.deserializer=org.acme.FruitDeserializer\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2299
#: upstream/_versions/main/guides/kafka.adoc:2385
msgid "Check <<jackson-serialization>> for more detail about the usage of Jackson with Kafka.  You can also use Avro."
msgstr "请参看 link:#jackson-serialization[[jackson序列化]]，了解更多关于Jackson与Kafka的使用细节。您也可以使用Avro。"

#. type: Title ===
#: upstream/_versions/main/guides/kafka.adoc:2301
#, no-wrap
msgid "Persisting Kafka messages with Hibernate Reactive"
msgstr "使用Hibernate Reactive持久化Kafka消息"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2304
msgid "To persist objects received from Kafka into a database, you can use Hibernate Reactive with Panache."
msgstr "为了将从Kafka收到的对象持久化到数据库中，您可以结合使用Hibernate Reactive与Panache。"

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2315
#, no-wrap
msgid "import io.quarkus.hibernate.reactive.panache.PanacheEntity;  // <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2324
msgid "Make sure to use the reactive variant"
msgstr "请确保使用响应式变量"

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2337
#, no-wrap
msgid ""
"import io.quarkus.hibernate.reactive.panache.Panache;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2340
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class FruitStore {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2348
#, no-wrap
msgid ""
"    @Incoming(\"fruits\")\n"
"    public Uni<Void> persist(Fruit fruit) {\n"
"        return Panache.withTransaction(() ->  // <1>\n"
"            fruit.persist()                   // <2>\n"
"                .map(persisted -> null)       // <3>\n"
"        );\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2352
msgid "Instruct Panache to run the given (asynchronous) action in a transaction. The transaction completes when the action completes."
msgstr "该指令使Panache在一个事务中运行给定的(异步)操作。当该操作完成时，事务会结束。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2353
msgid "Persist the entity. It returns a `Uni<Fruit>`."
msgstr "持久化该实体对象。它会返回一个 `Uni<Fruit>` 。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2354
msgid "Switch back to a `Uni<Void>`."
msgstr "切换并返回 `Uni<Void>` 。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2358
msgid "Unlike with _classic_ Hibernate, you can't use `@Transactional`.  Instead, we use `Panache.withTransaction` and persist our entity.  The `map` is used to return a `Uni<Void>` and not a `Uni<Fruit>`."
msgstr "与 _常规的_ Hibernate不同，您无法使用 `@Transactional` 注解。相反，可以使用 `Panache.withTransaction` ，并持久化实体实例。`map` 用来返回一个 `Uni<Void>` 实例，而不是一个 `Uni<Fruit>` 实例。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2361
msgid "You need a deserializer that can create a `Fruit` from the record.  This can be done using a Jackson deserializer:"
msgstr "您需要一个能从记录中创建 `Fruit` 实例的反序列化器。可以使用Jackson的反序列化器来完成："

#. type: Title ===
#: upstream/_versions/main/guides/kafka.adoc:2386
#, no-wrap
msgid "Writing entities managed by Hibernate to Kafka"
msgstr "将Hibernate管理的实体写入Kafka中"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2389
msgid "Let's imagine the following process:"
msgstr "让我们假设以下过："

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2391
msgid "You receive an HTTP request with a payload,"
msgstr "您收到一个带有payload的HTTP请求,"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2392
msgid "You create an Hibernate entity instance from this payload,"
msgstr "您从这个payload中创建一个Hibernate实体对象,"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2393
msgid "You persist that entity into a database,"
msgstr "您将该实体持久化到数据库中,"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2394
msgid "You send the entity to a Kafka topic"
msgstr "您把实体发送到一个Kafka topic中"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2396
msgid "If you use Hibernate Reactive, look at <<writing-entities-managed-by-hibernate-reactive-to-kafka>>."
msgstr "如果您使用Hibernate Reactive，请参看link:#writing-entities-managed-by-hibernate-reactive-to-kafka[[将hibernate reactive管理的实体写入kafka]] 。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2402
msgid "Because we write to a database, we must run this method in a transaction.  Yet, sending the entity to Kafka happens asynchronously.  The operation returns a `CompletionStage` (or a `Uni` if you use a `MutinyEmitter`) reporting when the operation completes.  We must be sure that the transaction is still running until the object is written.  Otherwise, you may access the object outside the transaction, which is not allowed."
msgstr "因为我们要往数据库写入数据，所以我们必须在事务中运行该方法。然而，向Kafka发送消息是异步的。该操作完成后会返回一个 `CompletionStage` (如果您使用 `MutinyEmitter`，则返回 `Uni`)。我们必须确认在对象被写入之前事务仍然在运行。否则，您可能会在事务之外访问到该对象，而这是不允许的。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2404
msgid "To implement this process, you need the following approach:"
msgstr "为了实现这一过程，您需要采取以下方法："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2414
#, no-wrap
msgid ""
"import javax.transaction.Transactional;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2422
#, no-wrap
msgid "    @Channel(\"kafka\") Emitter<Fruit> emitter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2431
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/fruits\")\n"
"    @Transactional                                                      // <1>\n"
"    public CompletionStage<Void> storeAndSendToKafka(Fruit fruit) {     // <2>\n"
"        fruit.persist();\n"
"        return emitter.send(fruit);                                     // <3>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2433
msgid "As we are writing to the database, make sure we run inside a transaction"
msgstr "当我们向数据库中写入数据时，请确保运行在事务中"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2434
msgid "The method receives the fruit instance to persist. It returns a `CompletionStage` which is used for the transaction demarcation. The transaction is committed when the return `CompletionStage` completes. In our case, it's when the message is written to Kafka."
msgstr "该方法接收要持久化的fruit实例。它返回了一个 `CompletionStage` ，用于事务分界。当返回的 `CompletionStage` 完成时，事务即会提交。在我们的例子中，这种情况就是消息被写入Kafka的时候。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2435
msgid "Send the managed instance to Kafka. Make sure we wait for the message to complete before closing the transaction."
msgstr "将管理的实例发送到Kafka。确保我们在事务关闭之前等待消息的完成。"

#. type: Title ===
#: upstream/_versions/main/guides/kafka.adoc:2437
#, no-wrap
msgid "Writing entities managed by Hibernate Reactive to Kafka"
msgstr "将Hibernate Reactive管理的实体写入Kafka中"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2440
msgid "To send to Kafka entities managed by Hibernate Reactive, we recommend using:"
msgstr "为了将Hibernate Reactive管理的实体发送到Kafka，建议使用："

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2442
msgid "RESTEasy Reactive to serve HTTP requests"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2443
msgid "A `MutinyEmitter` to send message to a channel, so it can be easily integrated with the Mutiny API exposed by Hibernate Reactive or Hibernate Reactive with Panache."
msgstr "`MutinyEmitter` 会向 channel 发送消息，所以它可以很容易地与Hibernate Reactive或Hibernate Reactive with Panache所暴露的Mutiny API进行集成。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2445
msgid "The following example demonstrates how to receive a payload, store it in the database using Hibernate Reactive with Panache, and send the persisted entity to Kafka:"
msgstr "下面的例子演示了如何接收一个payload，使用Hibernate Reactive with Panache将其存储在数据库中，并将持久化的实体发送到Kafka："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2452
#, no-wrap
msgid ""
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2458
#, no-wrap
msgid ""
"import io.quarkus.hibernate.reactive.panache.Panache;\n"
"import io.smallrye.mutiny.Uni;\n"
"import io.smallrye.reactive.messaging.MutinyEmitter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2461
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"public class ReactiveGreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2463
#, no-wrap
msgid "    @Channel(\"kafka\") MutinyEmitter<Fruit> emitter;     // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2473
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/fruits\")\n"
"    public Uni<Void> sendToKafka(Fruit fruit) {         // <2>\n"
"        return Panache.withTransaction(() ->            // <3>\n"
"            fruit.<Fruit>persist()\n"
"        )\n"
"            .chain(f -> emitter.send(f));               // <4>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2475
msgid "Inject a `MutinyEmitter` which exposes a Mutiny API. It simplifies the integration with the Mutiny API exposed by Hibernate Reactive with Panache."
msgstr "注入一个暴露了Mutiny API的 `MutinyEmitter` 。它简化了与Hibernate Reactive with Panache所暴露的Mutiny API的整合。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2476
msgid "The HTTP method receiving the payload returns a `Uni<Void>`. The HTTP response is written when the operation completes (the entity is persisted and written to Kafka)."
msgstr "接收payload的HTTP方法返回一个 `Uni<Void>` 。当操作完成后，会返回HTTP响应(实体被持久化并被写入Kafka)。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2477
msgid "We need to write the entity into the database in a transaction."
msgstr "我们需要在一个事务中把实体写进数据库。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2478
msgid "Once the persist operation completes, we send the entity to Kafka. The `send` method returns a `Uni<Void>`."
msgstr "一旦持久化操作完成，我们就把实体发送到Kafka。 `send` 方法会返回一个 `Uni<Void>` 。"

#. type: Title ===
#: upstream/_versions/main/guides/kafka.adoc:2480
#, no-wrap
msgid "Streaming Kafka topics as server-sent events"
msgstr "将Kafka topic作为服务器发送的事件流化"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2483
msgid "Streaming a Kafka topic as server-sent events (SSE) is straightforward:"
msgstr "将Kafka topic作为服务器发送的事件(Server-sent events, SSE)进行流化非常直白:"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2485
msgid "You inject the channel representing the Kafka topic in your HTTP endpoint"
msgstr "您在您的HTTP节点中注入代表Kafka topic的 channel"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2486
msgid "You return that channel as a `Publisher` or a `Multi` from the HTTP method"
msgstr "您将该 channel 作为一个 `Publisher` 或 `Multi` 从HTTP方法中返回"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2488
msgid "The following code provides an example:"
msgstr "以下代码提供了一个例子："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2493
#: upstream/_versions/main/guides/kafka.adoc:2508
#, no-wrap
msgid ""
"@Channel(\"fruits\")\n"
"Multi<Fruit> fruits;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2499
#, no-wrap
msgid ""
"@GET\n"
"@Produces(MediaType.SERVER_SENT_EVENTS)\n"
"public Multi<Fruit> stream() {\n"
"    return fruits;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2503
msgid "Some environment cuts the SSE connection when there is not enough activity.  The workaround consists of sending _ping_ messages (or empty objects) periodically."
msgstr "当没有足够的活跃度时，一些环境会切断SSE的连接。替代方法则是定期发送 _ping_ 消息(或空对象)。"

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2511
#, no-wrap
msgid ""
"@Inject\n"
"ObjectMapper mapper;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2521
#, no-wrap
msgid ""
"@GET\n"
"@Produces(MediaType.SERVER_SENT_EVENTS)\n"
"public Multi<String> stream() {\n"
"    return Multi.createBy().merging()\n"
"            .streams(\n"
"                    fruits.map(this::toJson),\n"
"                    emitAPeriodicPing()\n"
"            );\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2526
#, no-wrap
msgid ""
"Multi<String> emitAPeriodicPing() {\n"
"    return Multi.createFrom().ticks().every(Duration.ofSeconds(10))\n"
"            .onItem().transform(x -> \"{}\");\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2534
#, no-wrap
msgid ""
"private String toJson(Fruit f) {\n"
"    try {\n"
"        return mapper.writeValueAsString(f);\n"
"    } catch (JsonProcessingException e) {\n"
"        throw new RuntimeException(e);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2538
msgid "The workaround is a bit more complex as besides sending the fruits coming from Kafka, we need to send pings periodically.  To achieve this we merge the stream coming from Kafka and a periodic stream emitting `{}` every 10 seconds."
msgstr "该替代方法有点复杂，因为除了发送来自Kafka的fruit实例，我们还需要定期发送ping。为了实现这一点，我们合并了来自Kafka的数据流和一个每10秒发送一个 `{}` 的数据流。"

#. type: Title ===
#: upstream/_versions/main/guides/kafka.adoc:2540
#, no-wrap
msgid "Chaining Kafka Transactions with Hibernate Reactive transactions"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2544
msgid "By chaining a Kafka transaction with a Hibernate Reactive transaction you can send records to a Kafka transaction, perform database updates and commit the Kafka transaction only if the database transaction is successful."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2546
msgid "The following example demonstrates:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2548
msgid "Receive a payload by serving HTTP requests using RESTEasy Reactive,"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2549
msgid "Limit concurrency of that HTTP endpoint using Smallrye Fault Tolerance,"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2550
msgid "Start a Kafka transaction and send the payload to Kafka record,"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2551
msgid "Store the payload in the database using Hibernate Reactive with Panache,"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2552
msgid "Commit the Kafka transaction only if the entity is persisted successfully."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2561
#, no-wrap
msgid ""
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2565
#: upstream/_versions/main/guides/kafka.adoc:2615
#, no-wrap
msgid ""
"import org.eclipse.microprofile.faulttolerance.Bulkhead;\n"
"import org.eclipse.microprofile.reactive.messaging.Channel;\n"
"import org.hibernate.reactive.mutiny.Mutiny;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2569
#, no-wrap
msgid ""
"import io.quarkus.hibernate.reactive.panache.Panache;\n"
"import io.smallrye.mutiny.Uni;\n"
"import io.smallrye.reactive.messaging.kafka.transactions.KafkaTransactions;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2572
#: upstream/_versions/main/guides/kafka.adoc:2623
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"public class FruitProducer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2574
#, no-wrap
msgid "    @Channel(\"kafka\") KafkaTransactions<Fruit> kafkaTx; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2588
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/fruits\")\n"
"    @Consumes(MediaType.APPLICATION_JSON)\n"
"    @Bulkhead(1) // <2>\n"
"    public Uni<Void> post(Fruit fruit) { // <3>\n"
"        return kafkaTx.withTransaction(emitter -> { // <4>\n"
"            emitter.send(fruit); // <5>\n"
"            return Panache.withTransaction(() -> { // <6>\n"
"                return fruit.<Fruit>persist(); // <7>\n"
"            });\n"
"        }).replaceWithVoid();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2591
msgid "Inject a `KafkaTransactions` which exposes a Mutiny API. It allows the integration with the Mutiny API exposed by Hibernate Reactive with Panache."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2592
msgid "Limit the concurrency of the HTTP endpoint to \"1\", preventing starting multiple transactions at a given time."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2593
msgid "The HTTP method receiving the payload returns a `Uni<Void>`. The HTTP response is written when the operation completes (the entity is persisted and Kafka transaction is committed)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2594
#: upstream/_versions/main/guides/kafka.adoc:2647
msgid "Begin a Kafka transaction."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2595
msgid "Send the payload to Kafka inside the Kafka transaction."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2596
msgid "Persist the entity into the database in a Hibernate Reactive transaction."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2598
msgid "Once the persist operation completes, and there is no errors, the Kafka transaction is committed.  The result is omitted and returned as the HTTP response."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2601
msgid "In the previous example the database transaction (inner) will commit followed by the Kafka transaction (outer).  If you wish to commit the Kafka transaction first and the database transaction second, you need to nest them in the reverse order."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2603
msgid "The next example demostrates that using the Hibernate Reactive API (without Panache):"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2611
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2620
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.smallrye.reactive.messaging.kafka.transactions.KafkaTransactions;\n"
"import io.vertx.mutiny.core.Context;\n"
"import io.vertx.mutiny.core.Vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2625
#, no-wrap
msgid "    @Channel(\"kafka\") KafkaTransactions<Fruit> kafkaTx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2627
#, no-wrap
msgid "    @Inject Mutiny.SessionFactory sf; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2641
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/fruits\")\n"
"    @Consumes(MediaType.APPLICATION_JSON)\n"
"    @Bulkhead(1)\n"
"    public Uni<Void> post(Fruit fruit) {\n"
"        Context context = Vertx.currentContext(); // <2>\n"
"        return sf.withTransaction(session -> // <3>\n"
"                kafkaTx.withTransaction(emitter -> // <4>\n"
"                        session.persist(fruit).invoke(() -> emitter.send(fruit)) // <5>\n"
"                ).emitOn(context::runOnContext) // <6>\n"
"        );\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2644
msgid "Inject the Hibernate Reactive `SessionFactory`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2645
msgid "Capture the caller Vert.x context."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2646
msgid "Begin a Hibernate Reactive transaction."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2648
msgid "Persist the payload and send the entity to Kafka."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2650
msgid "The Kafka transaction terminates on the Kafka producer sender thread.  We need to switch to the Vert.x context previously captured in order to terminate the Hibernate Reactive transaction on the same context we started it."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/kafka.adoc:2651
#, no-wrap
msgid "Logging"
msgstr "日志"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2654
msgid "To reduce the amount of log written by the Kafka client, Quarkus sets the level of the following log categories to `WARNING`:"
msgstr "为了减少Kafka客户端的日志量，Quarkus将以下日志类别的级别设置为 `WARNING`："

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2656
msgid "`org.apache.kafka.clients`"
msgstr "`org.apache.kafka.clients`"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2657
msgid "`org.apache.kafka.common.utils`"
msgstr "`org.apache.kafka.common.utils`"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2658
msgid "`org.apache.kafka.common.metrics`"
msgstr "`org.apache.kafka.common.metrics`"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2660
msgid "You can override the configuration by adding the following lines to the `application.properties`:"
msgstr "您可以通过在 `application.properties` 中添加以下属性来覆盖配配置："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2666
#, no-wrap
msgid ""
"quarkus.log.category.\"org.apache.kafka.clients\".level=INFO\n"
"quarkus.log.category.\"org.apache.kafka.common.utils\".level=INFO\n"
"quarkus.log.category.\"org.apache.kafka.common.metrics\".level=INFO\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/kafka.adoc:2668
#, no-wrap
msgid "Connecting to Managed Kafka clusters"
msgstr "连接到受管理的Kafka集群"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2671
msgid "This section explains how to connect to notorious Kafka Cloud Services."
msgstr "本节解释了如何连接到臭名昭著的Kafka云服务。"

#. type: Title ===
#: upstream/_versions/main/guides/kafka.adoc:2672
#, no-wrap
msgid "Azure Event Hub"
msgstr "Azure Event Hub"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2675
msgid "https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-for-kafka-ecosystem-overview[Azure Event Hub] provides an endpoint compatible with Apache Kafka."
msgstr "link:https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-for-kafka-ecosystem-overview[Azure Event Hub] 提供了一个与Apache Kafka兼容的节点。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2679
msgid "Azure Event Hubs for Kafka is not available in the _basic_ tier.  You need at least the _standard_ tier to use Kafka.  See https://azure.microsoft.com/en-us/pricing/details/event-hubs/[Azure Event Hubs Pricing] to see the other options."
msgstr "Azure Event Hubs for Kafka在 _基础(basic)_ 层中不可用。您至少需要 _标准(standard)_ 层才能使用Kafka。请参阅 link:https://azure.microsoft.com/en-us/pricing/details/event-hubs/[Azure Event Hubs定价] 查看其他选项。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2681
msgid "To connect to Azure Event Hub, using the Kafka protocol with TLS, you need the following configuration:"
msgstr "使用带有TLS的Kafka协议连接到Azure Event Hub的话，您需要以下配置："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2690
#, no-wrap
msgid ""
"kafka.bootstrap.servers=my-event-hub.servicebus.windows.net:9093 # <1>\n"
"kafka.security.protocol=SASL_SSL\n"
"kafka.sasl.mechanism=PLAIN\n"
"kafka.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required \\ # <2>\n"
"    username=\"$ConnectionString\" \\ # <3>\n"
"    password=\"<YOUR.EVENTHUBS.CONNECTION.STRING>\"; # <4>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2692
msgid "The port is `9093`."
msgstr "该端口为 `9093` 。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2693
msgid "You need to use the JAAS `PlainLoginModule`."
msgstr "您需要使用JAAS `PlainLoginModule` 。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2694
msgid "The username is the `$ConnectionString` string."
msgstr "用户名是 `$ConnectionString` 字符串。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2695
msgid "The Event Hub connection string given by Azure."
msgstr "由Azure提供的Event Hub连接字符串。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2699
msgid "Replace `<YOUR.EVENTHUBS.CONNECTION.STRING>` with the connection string for your Event Hubs namespace.  For instructions on getting the connection string, see https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-get-connection-string[Get an Event Hubs connection string].  The result would be something like:"
msgstr "用您的Event Hubs命名空间的连接字符串替换 `<YOUR.EVENTHUBS.CONNECTION.STRING>` 。有关获取连接字符串的说明，请参阅 link:https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-get-connection-string[获取Event Hubs连接字符串] 。结果会类似这样："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2705
#, no-wrap
msgid ""
"kafka.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required \\\n"
"    username=\"$ConnectionString\" \\\n"
"    password=\"Endpoint=sb://my-event-hub.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=XXXXXXXXXXXXXXXX\";\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2708
msgid "This configuration can be global (as above), or set in the channel configuration:"
msgstr "这个配置可以是全局的(如上)，也可以在 channel 配置中设置："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2717
#, no-wrap
msgid ""
"mp.messaging.incoming.$channel.bootstrap.servers=my-event-hub.servicebus.windows.net:9093\n"
"mp.messaging.incoming.$channel.security.protocol=SASL_SSL\n"
"mp.messaging.incoming.$channel.sasl.mechanism=PLAIN\n"
"mp.messaging.incoming.$channel.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required \\\n"
"    username=\"$ConnectionString\" \\\n"
"    password=\"Endpoint=sb://my-event-hub.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=...\";\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/kafka.adoc:2719
#, no-wrap
msgid "Red Hat OpenShift Streams for Apache Kafka"
msgstr "红帽OpenShift Streams for Apache Kafka"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2724
msgid "https://cloud.redhat.com/[Red Hat OpenShift Streams for Apache Kafka] provides managed Kafka brokers.  First, follow the instructions from https://access.redhat.com/documentation/en-us/red_hat_openshift_streams_for_apache_kafka/1/guide/88e1487a-2a14-4b35-85b9-a7a2d67a37f3[Getting started with the `rhoas` CLI for Red Hat OpenShift Streams for Apache Kafka] to create your Kafka broker instance.  Make sure you copied the client id and client secret associated with the _ServiceAccount_ you created."
msgstr "link:https://cloud.redhat.com/[红帽OpenShift Streams for Apache Kafka] 提供了受管理的Kafka brokers。首先，按照 link:https://access.redhat.com/documentation/en-us/red_hat_openshift_streams_for_apache_kafka/1/guide/88e1487a-2a14-4b35-85b9-a7a2d67a37f3[红帽OpenShift Streams for Apache Kafka的 `rhoas` 命令行入门] 的说明，创建您的Kafka broker实例。请确保您复制了与您创建的 _ServiceAccount_ 相关的客户ID和客户密码。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2726
msgid "Then, you can configure the Quarkus application to connect to the broker as follows:"
msgstr "然后，您可以配置Quarkus应用程序以连接到broker，如下所示："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2735
#, no-wrap
msgid ""
"kafka.bootstrap.servers=<connection url> # <1>\n"
"kafka.security.protocol=SASL_SSL\n"
"kafka.sasl.mechanism=PLAIN\n"
"kafka.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required \\\n"
"  username=\"${KAFKA_USERNAME}\" \\ # <2>\n"
"  password=\"${KAFKA_PASSWORD}\"; # <3>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2737
msgid "The connection string, given on the admin console, such as `demo-c--bjsv-ldd-cvavkc-a.bf2.kafka.rhcloud.com:443`"
msgstr "在管理控制台所给出的连接字符串，例如 `demo-c—​bjsv-ldd-cvavkc-a.bf2.kafka.rhcloud.com:443`"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2738
msgid "The kafka username (the client id from the service account)"
msgstr "Kafka的用户名(来自service account的客户端ID)"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2739
msgid "the kafka password (the client secret from the service account)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2741
msgid "In general, these properties are prefixed using `%prod` to enable them only when running in production mode."
msgstr "一般来说，这些属性的前缀使用 `%prod` ，以便只在生产模式下运行时启用。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2744
msgid "As explained in https://access.redhat.com/documentation/en-us/red_hat_openshift_streams_for_apache_kafka/1/guide/88e1487a-2a14-4b35-85b9-a7a2d67a37f3[Getting started with the rhoas CLI for Red Hat OpenShift Streams for Apache Kafka], to use Red Hat OpenShift Streams for Apache Kafka, you must create the topic beforehand, create a _Service Account_, and provide permissions to read and write to your topic from that service account.  The authentication data (client id and secret) relates to the service account, which means you can implement fine-grain permissions and restrict access to the topic."
msgstr "正如在《 link:https://access.redhat.com/documentation/en-us/red_hat_openshift_streams_for_apache_kafka/1/guide/88e1487a-2a14-4b35-85b9-a7a2d67a37f3[红帽OpenShift Streams for Apache Kafka的 `rhoas` 命令行入门] 》中所解释的那样，要使用红帽OpenShift Streams for Apache Kafka，您必须事先创建topic，创建一个 _Service Account_ ，并提供从该服务账户读取和写入topic的权限。认证数据(客户端ID和密码)与服务账户有关，这意味着您可以实现细粒度的权限，并限制对topic的访问。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2746
msgid "When using Kubernetes, it is recommended to set the client id and secret in a Kubernetes secret:"
msgstr "当使用Kubernetes时，建议在Kubernetes secret中设置客户端ID和secret："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2756
#, no-wrap
msgid ""
"apiVersion: v1\n"
"kind: Secret\n"
"metadata:\n"
"  name: kafka-credentials\n"
"stringData:\n"
"  KAFKA_USERNAME: \"...\"\n"
"  KAFKA_PASSWORD: \"...\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2759
msgid "To allow your Quarkus application to use that secret, add the following line to the `application.properties` file:"
msgstr "为了允许您的Quarkus应用程序使用该secret，请在 `application.properties` 文件中添加下面一行："

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2763
#, no-wrap
msgid "%prod.quarkus.openshift.env.secrets=kafka-credentials\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/kafka.adoc:2765
#, no-wrap
msgid "Red Hat OpenShift Service Registry"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2769
msgid "https://www.redhat.com/en/technologies/cloud-computing/openshift/openshift-service-registry[Red Hat OpenShift Service Registry] provides fully managed service registry for handling Kafka schemas."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2773
msgid "You can follow the instructions from https://access.redhat.com/documentation/en-us/red_hat_openshift_service_registry/1/guide/ab1894d1-cae0-4d11-b185-81d62b4aabc7#_60472331-fa00-48ec-a621-bbd039500c7d[Getting started with Red Hat OpenShift Service Registry], or use the `rhoas` CLI to create a new service registry instance:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2777
#, no-wrap
msgid "rhoas service-registry create --name my-schema-registry\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2782
msgid "Make sure to note the _Registry URL_ of the instance created.  For authentication, you can use the same _ServiceAccount_ you created previously.  You need to make sure that it has the necessary permissions to access the service registry."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2784
msgid "For example, using the `rhoas` CLI, you can grant the `MANAGER` role to the service account:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2788
#, no-wrap
msgid "rhoas service-registry role add --role manager --service-account [SERVICE_ACCOUNT_CLIENT_ID]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2791
msgid "Then, you can configure the Quarkus application to connect to the schema registry as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2798
#, no-wrap
msgid ""
"mp.messaging.connector.smallrye-kafka.apicurio.registry.url=${RHOAS_SERVICE_REGISTRY_URL} <1>\n"
"mp.messaging.connector.smallrye-kafka.apicurio.auth.service.token.endpoint=${RHOAS_OAUTH_TOKEN_ENDPOINT} <2>\n"
"mp.messaging.connector.smallrye-kafka.apicurio.auth.client.id=${RHOAS_CLIENT_ID} <3>\n"
"mp.messaging.connector.smallrye-kafka.apicurio.auth.client.secret=${RHOAS_CLIENT_ID} <4>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2800
msgid "The service registry URL, given on the admin console, such as `https://bu98.serviceregistry.rhcloud.com/t/0e95af2c-6e11-475e-82ee-f13bd782df24/apis/registry/v2`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2801
msgid "The OAuth token endpoint URL, such as `https://identity.api.openshift.com/auth/realms/rhoas/protocol/openid-connect/token`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2802
msgid "The client id (from the service account)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2803
msgid "The client secret (from the service account)"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/kafka.adoc:2804
#, no-wrap
msgid "Binding Red Hat OpenShift managed services to Quarkus application using the Service Binding Operator"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2808
msgid "If your Quarkus application is deployed on a Kubernetes or OpenShift cluster with link:https://github.com/redhat-developer/service-binding-operator[Service Binding Operator] and link:https://github.com/redhat-developer/app-services-operator/tree/main/docs[OpenShift Application Services] operators installed, configurations necessary to access Red Hat OpenShift Streams for Apache Kafka and Service Registry can be injected to the application using xref:deploying-to-kubernetes.adoc#service_binding[Kubernetes Service Binding]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2811
msgid "In order to setup the Service Binding, you need first to connect OpenShift managed services to your cluster.  For an OpenShift cluster you can follow the instructions from link:https://github.com/redhat-developer/app-services-guides/tree/main/docs/registry/service-binding-registry#connecting-a-kafka-and-service-registry-instance-to-your-openshift-cluster[Connecting a Kafka and Service Registry instance to your OpenShift cluster]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2813
msgid "Once you've connected your cluster with the RHOAS Kafka and Service Registry instances, make sure you've granted necessary permissions to the newly created service account."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2816
msgid "Then, using the xref:deploying-to-kubernetes.adoc#service_binding[Kubernetes Service Binding] extension, you can configure the Quarkus application to generate `ServiceBinding` resources for those services:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2820
#, no-wrap
msgid "quarkus.kubernetes-service-binding.detect-binding-resources=true\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2824
#, no-wrap
msgid ""
"quarkus.kubernetes-service-binding.services.kafka.api-version=rhoas.redhat.com/v1alpha1\n"
"quarkus.kubernetes-service-binding.services.kafka.kind=KafkaConnection\n"
"quarkus.kubernetes-service-binding.services.kafka.name=my-kafka\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2828
#, no-wrap
msgid ""
"quarkus.kubernetes-service-binding.services.serviceregistry.api-version=rhoas.redhat.com/v1alpha1\n"
"quarkus.kubernetes-service-binding.services.serviceregistry.kind=ServiceRegistryConnection\n"
"quarkus.kubernetes-service-binding.services.serviceregistry.name=my-schema-registry\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2831
msgid "For this example Quarkus build will generate the following `ServiceBinding` resources:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2851
#, no-wrap
msgid ""
"apiVersion: binding.operators.coreos.com/v1alpha1\n"
"kind: ServiceBinding\n"
"metadata:\n"
"  name: my-app-kafka\n"
"spec:\n"
"  application:\n"
"    group: apps.openshift.io\n"
"    name: my-app\n"
"    version: v1\n"
"    kind: DeploymentConfig\n"
"  services:\n"
"    - group: rhoas.redhat.com\n"
"      version: v1alpha1\n"
"      kind: KafkaConnection\n"
"      name: my-kafka\n"
"  detectBindingResources: true\n"
"  bindAsFiles: true\n"
"---\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kafka.adoc:2869
#, no-wrap
msgid ""
"apiVersion: binding.operators.coreos.com/v1alpha1\n"
"kind: ServiceBinding\n"
"metadata:\n"
"  name: my-app-serviceregistry\n"
"spec:\n"
"  application:\n"
"    group: apps.openshift.io\n"
"    name: my-app\n"
"    version: v1\n"
"    kind: DeploymentConfig\n"
"  services:\n"
"    - group: rhoas.redhat.com\n"
"      version: v1alpha1\n"
"      kind: ServiceRegistryConnection\n"
"      name: my-schema-registry\n"
"  detectBindingResources: true\n"
"  bindAsFiles: true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2873
msgid "You can follow xref:deploying-to-kubernetes.adoc#openshift[Deploying to OpenShift] to deploy your application, including generated `ServiceBinding` resources.  The configuration properties necessary to access the Kafka and Schema Registry instances will be injected to the application automatically at deployment."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/kafka.adoc:2874
#, no-wrap
msgid "Going further"
msgstr "进一步探索"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2878
msgid "This guide has shown how you can interact with Kafka using Quarkus.  It utilizes SmallRye Reactive Messaging to build data streaming applications."
msgstr "本指南已经展示了如何使用Quarkus与Kafka进行交互。它利用SmallRye Reactive Messaging来构建数据流应用。"

#. type: Plain text
#: upstream/_versions/main/guides/kafka.adoc:2879
msgid "If you want to go further, check the documentation of https://smallrye.io/smallrye-reactive-messaging[SmallRye Reactive Messaging], the implementation used in Quarkus."
msgstr "如果您想更进一步，请参看link:https://smallrye.io/smallrye-reactive-messaging[SmallRye Reactive Messaging]，在Quarkus中使用的实现。"
