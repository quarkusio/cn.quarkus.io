# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/security-jpa.adoc:6
#, no-wrap
msgid "Using Security with JPA"
msgstr "使用JPA的安全性"

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:12
msgid "This guide demonstrates how your Quarkus application can use a database to store your user identities with xref:hibernate-orm.adoc[Hibernate ORM] or xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-jpa.adoc:14
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: upstream/_versions/main/guides/security-jpa.adoc:18
#, no-wrap
msgid "Architecture"
msgstr "应用结构"

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:21
msgid "In this example, we build a very simple microservice which offers three endpoints:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:23
msgid "`/api/public`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:24
msgid "`/api/users/me`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:25
msgid "`/api/admin`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:29
msgid "The `/api/public` endpoint can be accessed anonymously.  The `/api/admin` endpoint is protected with RBAC (Role-Based Access Control) where only users granted with the `admin` role can access. At this endpoint, we use the `@RolesAllowed` annotation to declaratively enforce the access constraint.  The `/api/users/me` endpoint is also protected with RBAC (Role-Based Access Control) where only users granted with the `user` role can access. As a response, it returns a JSON document with details about the user."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-jpa.adoc:30
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:34
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:36
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:38
msgid "The solution is located in the `security-jpa-quickstart` {quickstarts-tree-url}/security-jpa-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-jpa.adoc:39
#, no-wrap
msgid "Creating the Maven Project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:42
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#. type: delimited block =
#: upstream/_versions/main/guides/security-jpa.adoc:50
msgid "Don't forget to add the database connector library of choice. Here we are using PostgreSQL as identity store."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:54
msgid "This command generates a Maven project, importing the `security-jpa` extension which allows you to map your security source to JPA entities."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:57
msgid "If you already have your Quarkus project configured, you can add the `security-jpa` extension to your project by running the following command in your project base directory:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:62
msgid "This will add the following to your build file:"
msgstr "这会将以下内容添加到你的构建文件中:"

#. type: Block title
#: upstream/_versions/main/guides/security-jpa.adoc:64
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:70
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-security-jpa</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-jpa.adoc:73
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:76
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-security-jpa\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-jpa.adoc:78
#, no-wrap
msgid "Writing the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:81
msgid "Let's start by implementing the `/api/public` endpoint. As you can see from the source code below, it is just a regular JAX-RS resource:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:85
#: upstream/_versions/main/guides/security-jpa.adoc:110
#: upstream/_versions/main/guides/security-jpa.adoc:135
#: upstream/_versions/main/guides/security-jpa.adoc:162
#: upstream/_versions/main/guides/security-jpa.adoc:229
#, no-wrap
msgid "package org.acme.security.jpa;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:91
#, no-wrap
msgid ""
"import javax.annotation.security.PermitAll;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:94
#, no-wrap
msgid ""
"@Path(\"/api/public\")\n"
"public class PublicResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:102
#, no-wrap
msgid ""
"    @GET\n"
"    @PermitAll\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String publicResource() {\n"
"        return \"public\";\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:105
msgid "The source code for the `/api/admin` endpoint is also very simple. The main difference here is that we are using a `@RolesAllowed` annotation to make sure that only users granted with the `admin` role can access the endpoint:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:116
#, no-wrap
msgid ""
"import javax.annotation.security.RolesAllowed;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:119
#, no-wrap
msgid ""
"@Path(\"/api/admin\")\n"
"public class AdminResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:127
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"admin\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String adminResource() {\n"
"         return \"admin\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:131
msgid "Finally, let's consider the `/api/users/me` endpoint. As you can see from the source code below, we are trusting only users with the `user` role.  We are using `SecurityContext` to get access to the current authenticated Principal and we return the user's name. This information is loaded from the database."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:142
#, no-wrap
msgid ""
"import javax.annotation.security.RolesAllowed;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.core.Context;\n"
"import javax.ws.rs.core.SecurityContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:145
#, no-wrap
msgid ""
"@Path(\"/api/users\")\n"
"public class UserResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:153
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"user\")\n"
"    @Path(\"/me\")\n"
"    public String me(@Context SecurityContext securityContext) {\n"
"        return securityContext.getUserPrincipal().getName();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-jpa.adoc:155
#, no-wrap
msgid "Defining our user entity"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:158
msgid "We can now describe how our security information is stored in our model by adding a few annotations to our `User` entity:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:165
#, no-wrap
msgid ""
"import javax.persistence.Entity;\n"
"import javax.persistence.Table;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:172
#, no-wrap
msgid ""
"import io.quarkus.hibernate.orm.panache.PanacheEntity;\n"
"import io.quarkus.elytron.security.common.BcryptUtil;\n"
"import io.quarkus.security.jpa.Password;\n"
"import io.quarkus.security.jpa.Roles;\n"
"import io.quarkus.security.jpa.UserDefinition;\n"
"import io.quarkus.security.jpa.Username;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:183
#, no-wrap
msgid ""
"@Entity\n"
"@Table(name = \"test_user\")\n"
"@UserDefinition <1>\n"
"public class User extends PanacheEntity {\n"
"    @Username <2>\n"
"    public String username;\n"
"    @Password <3>\n"
"    public String password;\n"
"    @Roles <4>\n"
"    public String role;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:198
#, no-wrap
msgid ""
"    /**\n"
"     * Adds a new user in the database\n"
"     * @param username the user name\n"
"     * @param password the unencrypted password (it will be encrypted with bcrypt)\n"
"     * @param role the comma-separated roles\n"
"     */\n"
"    public static void add(String username, String password, String role) { <5>\n"
"        User user = new User();\n"
"        user.username = username;\n"
"        user.password = BcryptUtil.bcryptHash(password);\n"
"        user.role = role;\n"
"        user.persist();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:202
msgid "The `security-jpa` extension is only initialized if there is a single entity annotated with `@UserDefinition`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:204
msgid "This annotation must be present on a single entity. It can be a regular Hibernate ORM entity or a Hibernate ORM with Panache entity as in this example."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:205
msgid "This indicates the field used for the user name."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:206
msgid "This indicates the field used for the password. This defaults to using bcrypt hashed passwords, but you can also configure it for clear text passwords or custom passwords."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:207
msgid "This indicates the comma-separated list of roles added to the target Principal representation attributes."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:208
msgid "This method allows us to add users while hashing the password with the proper bcrypt hash."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-jpa.adoc:209
#, no-wrap
msgid "Configuring the Application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:212
msgid "The `security-jpa` extension requires at least one datasource to access to your database."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:219
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.datasource.username=quarkus\n"
"quarkus.datasource.password=quarkus\n"
"quarkus.datasource.jdbc.url=jdbc:postgresql:security_jpa\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:221
#, no-wrap
msgid "quarkus.hibernate-orm.database.generation=drop-and-create\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:225
msgid "In our context, we are using PostgreSQL as identity store. The database schema is created by Hibernate ORM automatically on startup (change this in production) and we initialize the database with users and roles in the `Startup` class:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:233
#, no-wrap
msgid ""
"import javax.enterprise.event.Observes;\n"
"import javax.inject.Singleton;\n"
"import javax.transaction.Transactional;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:235
#, no-wrap
msgid "import io.quarkus.runtime.StartupEvent;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:247
#, no-wrap
msgid ""
"@Singleton\n"
"public class Startup {\n"
"    @Transactional\n"
"    public void loadUsers(@Observes StartupEvent evt) {\n"
"        // reset and load all test users\n"
"        User.deleteAll();\n"
"        User.add(\"admin\", \"admin\", \"admin\");\n"
"        User.add(\"user\", \"user\", \"user\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-jpa.adoc:253
msgid "It is probably useless but we kindly remind you that you must not store clear-text passwords in production environments ;-).  As a result, the `security-jpa` defaults to using bcrypt-hashed passwords."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-jpa.adoc:255
#, no-wrap
msgid "Testing the Application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:258
msgid "You can start the application in dev mode as follows:"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-jpa.adoc:264
msgid "In the following tests we use the basic authentication mechanism, you can enable it by setting `quarkus.http.auth.basic=true` in the `application.properties` file."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:268
msgid "The application is now protected and the identities are provided by our database.  The very first thing to check is to ensure the anonymous access works."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:275
#, no-wrap
msgid ""
"$ curl -i -X GET http://localhost:8080/api/public\n"
"HTTP/1.1 200 OK\n"
"Content-Length: 6\n"
"Content-Type: text/plain;charset=UTF-8\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:277
#, no-wrap
msgid "public%\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:280
msgid "Now, let's try a to hit a protected resource anonymously."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:287
#, no-wrap
msgid ""
"$ curl -i -X GET http://localhost:8080/api/admin\n"
"HTTP/1.1 401 Unauthorized\n"
"Content-Length: 14\n"
"Content-Type: text/html;charset=UTF-8\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:289
#, no-wrap
msgid "Not authorized%\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:292
msgid "So far so good, now let's try with an allowed user."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:299
#, no-wrap
msgid ""
"$ curl -i -X GET -u admin:admin http://localhost:8080/api/admin\n"
"HTTP/1.1 200 OK\n"
"Content-Length: 5\n"
"Content-Type: text/plain;charset=UTF-8\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:301
#, no-wrap
msgid "admin%\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:304
msgid "By providing the `admin:admin` credentials, the extension authenticated the user and loaded their roles.  The `admin` user is authorized to access to the protected resources."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:306
msgid "The user `admin` should be forbidden to access a resource protected with `@RolesAllowed(\"user\")` because it doesn't have this role."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:313
#, no-wrap
msgid ""
"$ curl -i -X GET -u admin:admin http://localhost:8080/api/users/me\n"
"HTTP/1.1 403 Forbidden\n"
"Content-Length: 34\n"
"Content-Type: text/html;charset=UTF-8\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:315
#, no-wrap
msgid "Forbidden%\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:318
msgid "Finally, using the user `user` works and the security context contains the principal details (username for instance)."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:325
#, no-wrap
msgid ""
"$ curl -i -X GET -u user:user http://localhost:8080/api/users/me\n"
"HTTP/1.1 200 OK\n"
"Content-Length: 4\n"
"Content-Type: text/plain;charset=UTF-8\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:327
#, no-wrap
msgid "user%\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-jpa.adoc:329
#, no-wrap
msgid "Supported model types"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:332
msgid "The `@UserDefinition` class must be a JPA entity (with Panache or not)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:333
msgid "The `@Username` and `@Password` field types must be of type `String`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:334
msgid "The `@Roles` field must either be of type `String` or `Collection<String>` or alternately a `Collection<X>` where `X` is an entity class with one `String` field annotated with the `@RolesValue` annotation."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:335
msgid "Each `String` role element type will be parsed as a comma-separated list of roles."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-jpa.adoc:336
#, no-wrap
msgid "Storing roles in another entity"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:339
msgid "You can also store roles in another entity:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:348
#, no-wrap
msgid ""
"@UserDefinition\n"
"@Table(name = \"test_user\")\n"
"@Entity\n"
"public class User extends PanacheEntity {\n"
"    @Username\n"
"    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:351
#, no-wrap
msgid ""
"    @Password\n"
"    public String pass;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:356
#, no-wrap
msgid ""
"    @ManyToMany\n"
"    @Roles\n"
"    public List<Role> roles = new ArrayList<>();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:359
#, no-wrap
msgid ""
"@Entity\n"
"public class Role extends PanacheEntity {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:362
#, no-wrap
msgid ""
"    @ManyToMany(mappedBy = \"roles\")\n"
"    public List<ExternalRolesUserEntity> users;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:366
#, no-wrap
msgid ""
"    @RolesValue\n"
"    public String role;\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-jpa.adoc:368
#, no-wrap
msgid "Password storage and hashing"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:372
msgid "By default, we consider passwords to be stored hashed with https://en.wikipedia.org/wiki/Bcrypt[bcrypt] under the https://en.wikipedia.org/wiki/Crypt_(C)[Modular Crypt Format] (MCF)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:376
msgid "When you need to create such a hashed password we provide the convenient `String BcryptUtil.bcryptHash(String password)` function, which defaults to creating a random salt and hashing in 10 iterations (though you can specify the iterations and salt too)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:379
msgid "with MCF you don't need dedicated columns to store the hashing algorithm, the iterations count or the salt because they're all stored in the hashed value."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:381
msgid "You also have the possibility to store password using different hashing algorithm `@Password(value = PasswordType.CUSTOM, provider = CustomPasswordProvider.class)`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:391
#, no-wrap
msgid ""
"@UserDefinition\n"
"@Table(name = \"test_user\")\n"
"@Entity\n"
"public class CustomPasswordUserEntity {\n"
"    @Id\n"
"    @GeneratedValue\n"
"    public Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:395
#, no-wrap
msgid ""
"    @Column(name = \"username\")\n"
"    @Username\n"
"    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:399
#, no-wrap
msgid ""
"    @Column(name = \"password\")\n"
"    @Password(value = PasswordType.CUSTOM, provider = CustomPasswordProvider.class)\n"
"    public String pass;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:403
#, no-wrap
msgid ""
"    @Roles\n"
"    public String role;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:411
#, no-wrap
msgid ""
"public class CustomPasswordProvider implements PasswordProvider {\n"
"    @Override\n"
"    public Password getPassword(String pass) {\n"
"        byte[] digest = DatatypeConverter.parseHexBinary(pass);\n"
"        return SimpleDigestPassword.createRaw(SimpleDigestPassword.ALGORITHM_SIMPLE_DIGEST_SHA_256, digest);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:415
msgid "WARN: you can also store passwords in clear text with `@Password(PasswordType.CLEAR)` but we strongly recommend against it in production."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-jpa.adoc:416
#, no-wrap
msgid "References"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:418
msgid "xref:security.adoc[Quarkus Security]"
msgstr ""
