# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-11-23 02:22+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/main/guides/hibernate-orm.adoc
#, fuzzy, no-wrap
msgid "Using Hibernate ORM and Jakarta Persistence"
msgstr "使用Hibernate ORM和JPA"

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"Hibernate ORM is the de facto standard Jakarta Persistence (formerly known as JPA) implementation and offers you the full breadth of an Object Relational Mapper.\n"
"It works beautifully in Quarkus."
msgstr ""

#. type: Title ==
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "The solution is located in the `hibernate-orm-quickstart` link:{quickstarts-tree-url}/hibernate-orm-quickstart[directory]."
msgstr ""

#. type: Title ==
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Setting up and configuring Hibernate ORM"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "When using Hibernate ORM in Quarkus, you don't need to have a `persistence.xml` resource to configure it."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"Using such a classic configuration file is an option, but unnecessary unless you have specific advanced needs;\n"
"so we'll see first how Hibernate ORM can be configured without a `persistence.xml` resource."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "In Quarkus, you only need to:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "add your configuration settings in `{config-file}`"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "annotate your entities with `@Entity` and any other mapping annotation as usual"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Other configuration needs have been automated: Quarkus will make some opinionated choices and educated guesses."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Add the following dependencies to your project:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "the Hibernate ORM extension: `io.quarkus:quarkus-hibernate-orm`"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "your JDBC driver extension; the following options are available:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "`quarkus-jdbc-db2` for link:https://www.ibm.com/products/db2-database[IBM DB2]"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "`quarkus-jdbc-derby` for link:https://db.apache.org/derby/[Apache Derby]"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "`quarkus-jdbc-h2` for link:https://www.h2database.com/html/main.html[H2]"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "`quarkus-jdbc-mariadb` for link:https://mariadb.com/[MariaDB]"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "`quarkus-jdbc-mssql` for link:https://www.microsoft.com/en-gb/sql-server/[Microsoft SQL Server]"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "`quarkus-jdbc-mysql` for link:https://www.mysql.com/[MySQL]"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "`quarkus-jdbc-oracle` for link:https://www.oracle.com/database/[Oracle Database]"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "`quarkus-jdbc-postgresql` for link:https://www.postgresql.org/[PostgreSQL]"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "For instance:"
msgstr "比如："

#. type: Block title
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"Annotate your persistent objects with `@Entity`,\n"
"then add the relevant configuration properties in `{config-file}`."
msgstr ""

#. type: Block title
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Example `{config-file}`"
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"Note that these configuration properties are not the same ones as in your typical Hibernate ORM configuration file.\n"
"They will often map to Hibernate ORM configuration properties but could have different names and don't necessarily map 1:1 to each other."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Also, Quarkus will set many Hibernate ORM configuration settings automatically, and will often use more modern defaults."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "For a list of the items that you can set in `{config-file}`, see xref:hibernate-configuration-properties[Hibernate ORM configuration properties]."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "An `EntityManagerFactory` will be created based on the Quarkus `datasource` configuration as long as the Hibernate ORM extension is listed among your project dependencies."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"The dialect will be selected and configured automatically based on your datasource;\n"
"you may want to xref:hibernate-dialect[configure it to more precisely match your database]."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "You can then happily inject your `EntityManager`:"
msgstr ""

#. type: Block title
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Example application bean using Hibernate"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Inject your entity manager and have fun"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Mark your CDI bean method as `@Transactional` and the `EntityManager` will enlist and flush at commit."
msgstr ""

#. type: Block title
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Example Entity"
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"To load SQL statements when Hibernate ORM starts, add an `import.sql` file to the root of your `resources` directory.\n"
"This script can contain any SQL DML statements.\n"
"Make sure to terminate each statement with a semicolon."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "This is useful to have a data set ready for your tests or demos."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"Make sure to wrap methods modifying your database (e.g. `entity.persist()`) within a transaction. Marking a\n"
"CDI bean method `@Transactional` will do that for you and make that method a transaction boundary. We recommend doing\n"
"so at your application entry point boundaries like your REST endpoint controllers."
msgstr "请确保修改数据库的方法（例如： `entity.persist()` ）处于同一个事务中。给一个CDI bean方法增加 `@Transactional` 注解，可以确保该方法即事务边界。我们建议在应用端点的边界这样做，比如REST端点的Controller。"

#. type: Title ===
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Dialect"
msgstr ""

#. type: Title ====
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Supported databases"
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"For xref:datasource.adoc#extensions-and-database-drivers-reference[supported databases],\n"
"the link:{hibernate-orm-docs-url}#database-dialect[Hibernate ORM dialect]\n"
"does not need to be set explicitly:\n"
"it is selected automatically based on the datasource."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "By default, the dialect is configured to target the minimum supported version of the database."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"In order for Hibernate ORM to generate more efficient SQL,\n"
"to avoid workarounds and to take advantage of more database features,\n"
"you can set the database version explicitly:"
msgstr ""

#. type: Block title
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "`{config-file}` with an explicit `db-version`"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Set the database version. The Hibernate ORM dialect will target that version."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"As a rule, the version set here should be as high as possible,\n"
"but must be lower than or equal to the version of any database your application will connect to."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"When a version is set explicitly,\n"
"Quarkus will try to check this version against the actual database version on startup,\n"
"leading to a startup failure when the actual version is lower."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"This is because Hibernate ORM may generate SQL that is invalid\n"
"for versions of the database older than what is configured,\n"
"which would lead to runtime exceptions."
msgstr ""

#. type: delimited block =
#: _versions/main/guides/hibernate-orm.adoc
msgid "If the database cannot be reached, a warning will be logged but startup will proceed."
msgstr ""

#. type: Title ====
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Other databases"
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"If xref:datasource.adoc#other-databases[your database does not have a corresponding Quarkus extension],\n"
"or if the defaults do not match your needs for some reason,\n"
"you will need to set the link:{hibernate-orm-docs-url}#database-dialect[Hibernate ORM dialect] explicitly:"
msgstr ""

#. type: Block title
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "`{config-file}` with an explicit `dialect`"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Set the Hibernate ORM dialect."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"In that case, keep in mind that the JDBC driver or Hibernate ORM dialect\n"
"may not work properly in GraalVM native executables."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"As with xref:hibernate-dialect-supported-databases[supported databases],\n"
"you can configure the DB version explicitly to get the most out of Hibernate ORM:"
msgstr ""

#. type: Block title
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "`{config-file}` with an explicit `dialect` and `db-version`"
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"Set the database version. The Hibernate ORM dialect will target that version.\n"
"Since we're targeting CockroachDB here, we're passing the CockroachDB version, not the PostgreSQL version."
msgstr ""

#. type: Title ===
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Hibernate ORM configuration properties"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "There are various optional properties useful to refine your `EntityManagerFactory` or guide guesses of Quarkus."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "There are no required properties, as long as a default datasource is configured."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"When no property is set, Quarkus can typically infer everything it needs to set up Hibernate ORM\n"
"and will have it use the default datasource."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "The configuration properties listed here allow you to override such defaults, and customize and tune various aspects."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"Do not mix xref:persistence-xml[`persistence.xml`] and `quarkus.hibernate-orm.*` properties in `{config-file}`.\n"
"Quarkus will raise an exception.\n"
"Make up your mind on which approach you want to use."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"If your classpath contains a `persistence.xml` that you want to ignore,\n"
"set the following configuration property:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Want to start a PostgreSQL server on the side with Docker?"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "This will start a non-durable empty database: ideal for a quick experiment!"
msgstr ""

#. type: Title ===
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Multiple persistence units"
msgstr ""

#. type: Title ====
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Setting up multiple persistence units"
msgstr ""

#. type: delimited block =
#: _versions/main/guides/hibernate-orm.adoc
msgid "It is possible to define multiple persistence units using the Quarkus configuration properties."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"The properties at the root of the `quarkus.hibernate-orm.` namespace define the default persistence unit.\n"
"For instance, the following snippet defines a default datasource and a default persistence unit:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Using a map based approach, it is possible to define named persistence units:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Define a datasource named `users`."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Define a datasource named `inventory`."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Define a persistence unit called `users`."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Define the datasource used by the persistence unit."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "This configuration property is important, but we will discuss it a bit later."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Define a persistence unit called `inventory` pointing to the `inventory` datasource."
msgstr ""

#. type: delimited block =
#: _versions/main/guides/hibernate-orm.adoc
msgid "You can mix the default datasource and named datasources or only have one or the other."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"The default persistence unit points to the default datasource by default.\n"
"For named persistence units, the `datasource` property is mandatory.\n"
"You can point your persistence unit to the default datasource by setting it to `<default>`\n"
"(which is the internal name of the default datasource)."
msgstr ""

#. type: delimited block =
#: _versions/main/guides/hibernate-orm.adoc
msgid "It is perfectly valid to have several persistence units pointing to the same datasource."
msgstr ""

#. type: Title ====
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Attaching model classes to persistence units"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "There are two ways to attach model classes to persistence units, and they should not be mixed:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Via the `packages` configuration property;"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Via the `@io.quarkus.hibernate.orm.PersistenceUnit` package-level annotation."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "If both are mixed, the annotations are ignored and only the `packages` configuration properties are taken into account."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Using the `packages` configuration property is simple:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "This configuration snippet will create two persistence units:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "The default one which will contain all the model classes under the `org.acme.model.defaultpu` package, subpackages included."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "A named `users` persistence unit which will contain all the model classes under the `org.acme.model.user` package, subpackages included."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "You can attach several packages to a persistence unit:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "All the model classes under the `org.acme.model.shared` and `org.acme.model.user` packages will be attached to the `users` persistence unit."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "It is also supported to attach a given model class to several persistence units."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"Model classes need to be consistently added to a given persistence unit.\n"
"That meant that all dependent model classes of a given entity (mapped super classes, embeddables...) are required to be attached to the persistence unit.\n"
"As we are dealing with the persistence unit at the package level, it should be simple enough."
msgstr ""

#. type: delimited block =
#: _versions/main/guides/hibernate-orm.adoc
msgid "Panache entities can be attached to only one persistence unit."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"For entities attached to several persistence units, you cannot use Panache.\n"
"You can mix the two approaches though and mix Panache entities and traditional entities where multiple persistence units are required."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"If you have a use case for that and clever ideas about how to implement it without cluttering the simplified Panache approach,\n"
"contact us on the link:{quarkus-mailing-list-index}[quarkus-dev mailing list]."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"The second approach to attach model classes to a persistence unit is to use package-level `@io.quarkus.hibernate.orm.PersistenceUnit` annotations.\n"
"Again, the two approaches cannot be mixed."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "To obtain a configuration similar to the one above with the `packages` configuration property, create a `package-info.java` file with the following content:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Be careful, use the `@io.quarkus.hibernate.orm.PersistenceUnit` annotation, not the Jakarta Persistence one."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"We only support defining the `@PersistenceUnit` for model classes at the package level,\n"
"using the `@PersistenceUnit` annotation at the class level is not supported in this case."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Note that, similarly to what we do with the configuration property, we take into account the annotated package but also all its subpackages."
msgstr ""

#. type: Title ====
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "CDI integration"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "If you are familiar with using Hibernate ORM in Quarkus, you probably already have injected the `EntityManager` using CDI:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "This will inject the `EntityManager` of the default persistence unit."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Injecting the `EntityManager` of a named persistence unit (`users` in our example) is as simple as:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Here again, we use the same `@io.quarkus.hibernate.orm.PersistenceUnit` annotation."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "You can inject the `EntityManagerFactory` of a named persistence unit using the exact same mechanism:"
msgstr ""

#. type: Title ==
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Setting up and configuring Hibernate ORM with a `persistence.xml`"
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"Alternatively, you can use a `META-INF/persistence.xml` to set up Hibernate ORM.\n"
"This is useful for:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "migrating existing code"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "when you have relatively complex settings requiring the full flexibility of the configuration"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "or if you like it the good old way"
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"If you use a `persistence.xml`, then you cannot use the `quarkus.hibernate-orm.*` properties\n"
"and only persistence units defined in `persistence.xml` will be taken into account."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"Your `pom.xml` dependencies as well as your Java code would be identical to the precedent example. The only\n"
"difference is that you would specify your Hibernate ORM configuration in `META-INF/persistence.xml`:"
msgstr ""

#. type: Block title
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Example persistence.xml resource"
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"When using the `persistence.xml` configuration you are configuring Hibernate ORM directly,\n"
"so in this case the appropriate reference is the link:{hibernate-orm-docs-url}#configurations[documentation on hibernate.org]."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"Please remember these are not the same property names as the ones used in the Quarkus `{config-file}`, nor will\n"
"the same defaults be applied."
msgstr ""

#. type: Title ==
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "XML mapping"
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"Hibernate ORM in Quarkus supports XML mapping.\n"
"You can add mapping files following\n"
"the https://jakarta.ee/specifications/persistence/3.0/jakarta-persistence-spec-3.0.html#a16944[`orm.xml` format (Jakarta Persistence)]\n"
"or the http://hibernate.org/dtd/hibernate-mapping-3.0.dtd[`hbm.xml` format (specific to Hibernate ORM, deprecated)]:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "in `application.properties` through the (build-time) link:#quarkus-hibernate-orm_quarkus.hibernate-orm.mapping-files[`quarkus.hibernate-orm.mapping-files`] property."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "in xref:persistence-xml[`persistence.xml`] through the `<mapping-file>` element."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "XML mapping files are parsed at build time."
msgstr ""

#. type: delimited block =
#: _versions/main/guides/hibernate-orm.adoc
msgid "The file `META-INF/orm.xml` will always be included by default, if it exists in the classpath."
msgstr ""

#. type: delimited block =
#: _versions/main/guides/hibernate-orm.adoc
msgid "If that is not what you want, use `quarkus.hibernate-orm.mapping-files = no-file` or `<mapping-file>no-file</mapping-file>`."
msgstr ""

#. type: Title ==
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Defining entities in external projects or jars"
msgstr "在外部项目或jar中定义实体"

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"Hibernate ORM in Quarkus relies on compile-time bytecode enhancements to your entities. If you define your entities in the\n"
"same project where you build your Quarkus application, everything will work fine."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"If the entities come from external projects\n"
"or jars, you can make sure that your jar is treated like a Quarkus application library by adding an empty `META-INF/beans.xml` file."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "This will allow Quarkus to index and enhance your entities as if they were inside the current project."
msgstr ""

#. type: Title ==
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Hibernate ORM in development mode"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Quarkus development mode is really useful for applications that mix front end or services and database access."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "There are a few common approaches to make the best of it."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "The first choice is to use `quarkus.hibernate-orm.database.generation=drop-and-create` in conjunction with `import.sql`."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"That way for every change to your app and in particular to your entities, the database schema will be properly recreated\n"
"and your data fixture (stored in `import.sql`) will be used to repopulate it from scratch.\n"
"This is best to perfectly control your environment and works magic with Quarkus live reload mode:\n"
"your entity changes or any change to your `import.sql` is immediately picked up and the schema updated without restarting the application!"
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"By default, in `dev` and `test` modes, Hibernate ORM, upon boot, will read and execute the SQL statements in the `/import.sql` file (if present).\n"
"You can change the file name by changing the property `quarkus.hibernate-orm.sql-load-script` in `application.properties`."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"The second approach is to use `quarkus.hibernate-orm.database.generation=update`.\n"
"This approach is best when you do many entity changes but\n"
"still need to work on a copy of the production data\n"
"or if you want to reproduce a bug that is based on specific database entries.\n"
"`update` is a best effort from Hibernate ORM and will fail in specific situations\n"
"including altering your database structure which could lead to data loss.\n"
"For example if you change structures which violate a foreign key constraint, Hibernate ORM might have to bail out.\n"
"But for development, these limitations are acceptable."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"The third approach is to use `quarkus.hibernate-orm.database.generation=none`.\n"
"This approach is best when you are working on a copy of the production data but want to fully control the schema evolution.\n"
"Or if you use a database schema migration tool like xref:flyway.adoc[Flyway] or xref:liquibase.adoc[Liquibase]."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"With this approach when making changes to an entity, make sure to adapt the database schema accordingly;\n"
"you could also use `validate` to have Hibernate verify the schema matches its expectations."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Do not use `quarkus.hibernate-orm.database.generation` `drop-and-create` and `update` in your production environment."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"These approaches become really powerful when combined with Quarkus configuration profiles.\n"
"You can define different xref:config-reference.adoc#profiles[configuration profiles]\n"
"to select different behaviors depending on your environment.\n"
"This is great because you can define different combinations of Hibernate ORM properties matching the development style you currently need."
msgstr ""

#. type: Block title
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "application.properties"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "You can start dev mode using a custom profile:"
msgstr ""

#. type: Title ==
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Hibernate ORM in production mode"
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"Quarkus comes with default profiles (`dev`, `test` and `prod`).\n"
"And you can add your own custom profiles to describe various environments (`staging`, `prod-us`, etc)."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "The Hibernate ORM Quarkus extension sets some default configurations differently in dev and test modes than in other environments."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "`quarkus.hibernate-orm.sql-load-script` is set to `no-file` for all profiles except the `dev` and `test` ones."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"You can override it in your `application.properties` explicitly\n"
"(e.g. `%prod.quarkus.hibernate-orm.sql-load-script = import.sql`)\n"
"but we wanted you to avoid overriding your database by accident in prod :)"
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"Speaking of, make sure to not drop your database schema in production!\n"
"Add the following in your properties file."
msgstr ""

#. type: Title ==
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Automatically transitioning to Flyway to Manage Schemas"
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"If you have the xref:flyway.adoc[Flyway extension] installed when running in development mode, Quarkus provides a simple way to turn\n"
"your Hibernate ORM auto generated schema into a Flyway migration file. This is intended to make is easy to move from\n"
"the early development phase, where Hibernate can be used to quickly set up the schema, to the production phase, where\n"
"Flyway is used to manage schema changes."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"To use this feature simply open the Dev UI when the `quarkus-flyway` extension is installed and click in the `Datasources`\n"
"link in the Flyway pane. Hit the `Create Initial Migration` button and the following will happen:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "A `db/migration/V1.0.0__\\{appname\\}.sql` file will be created, containing the SQL Hibernate is running to generate the schema"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "`quarkus.flyway.baseline-on-migrate` will be set, telling Flyway to automatically create its baseline tables"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "`quarkus.flyway.migrate-at-start` will be set, telling Flyway to automatically apply migrations on application startup"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "`%dev.quarkus.flyway.clean-at-start` and `%test.quarkus.flyway.clean-at-start` will be set, to clean the DB after reload in dev/test mode"
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"This button is simply a convenience to quickly get you started with Flyway, it is up to you to determine how you want to\n"
"manage your database schemas in production. In particular the `migrate-at-start` setting may not be right for all environments."
msgstr ""

#. type: Title ==
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Caching"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Applications that frequently read the same entities can see their performance improved when the Hibernate ORM second-level cache is enabled."
msgstr ""

#. type: Title ===
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Caching of entities"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "To enable second-level cache, mark the entities that you want cached with `@jakarta.persistence.Cacheable`:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "When an entity is annotated with `@Cacheable`, all its field values are cached except for collections and relations to other entities."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "This means the entity can be loaded without querying the database, but be careful as it implies the loaded entity might not reflect recent changes in the database."
msgstr ""

#. type: Title ===
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Caching of collections and relations"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Collections and relations need to be individually annotated to be cached; in this case the Hibernate specific `@org.hibernate.annotations.Cache` should be used, which requires also to specify the `CacheConcurrencyStrategy`:"
msgstr ""

#. type: Title ===
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Caching of queries"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Queries can also benefit from second-level caching. Cached query results can be returned immediately to the caller, avoiding to run the query on the database."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Be careful as this implies the results might not reflect recent changes."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "To cache a query, mark it as cacheable on the `Query` instance:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "If you have a `NamedQuery` then you can enable caching directly on its definition, which will usually be on an entity:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "That's all! Caching technology is already integrated and enabled by default in Quarkus, so it's enough to set which ones are safe to be cached."
msgstr ""

#. type: Title ===
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Tuning of Cache Regions"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Caches store the data in separate regions to isolate different portions of data; such regions are assigned a name, which is useful for configuring each region independently, or to monitor their statistics."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "By default, entities are cached in regions named after their fully qualified name, e.g. `org.acme.Country`."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Collections are cached in regions named after the fully qualified name of their owner entity and collection field name, separated by `#` character, e.g. `org.acme.Country#cities`."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "All cached queries are by default kept in a single region dedicated to them called `default-query-results-region`."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "All regions are bounded by size and time by default. The defaults are `10000` max entries, and `100` seconds as maximum idle time."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "The size of each region can be customized via the `quarkus.hibernate-orm.cache.\"<region_name>\".memory.object-count` property (Replace _<region_name>_ with the actual region name)."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "To set the maximum idle time, provide the duration (see note on duration's format below) via the `quarkus.hibernate-orm.cache.\"<region_name>\".expiration.max-idle` property (Replace _<region_name>_ with the actual region name)."
msgstr ""

#. type: delimited block =
#: _versions/main/guides/hibernate-orm.adoc
msgid "The double quotes are mandatory if your region name contains a dot. For instance:"
msgstr ""

#. type: Title ===
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Limitations of Caching"
msgstr ""

#. type: delimited block =
#: _versions/main/guides/hibernate-orm.adoc
msgid "The caching technology provided within Quarkus is currently quite rudimentary and limited."
msgstr ""

#. type: delimited block =
#: _versions/main/guides/hibernate-orm.adoc
msgid "The team thought it was better to have _some_ caching capability to start with, than having nothing; you can expect better caching solution to be integrated in future releases, and any help and feedback in this area is very welcome."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "These caches are kept locally, so they are not invalidated or updated when changes are made to the persistent store by other applications."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Also, when running multiple copies of the same application (in a cluster, for example on Kubernetes/OpenShift), caches in separate copies of the application aren't synchronized."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "For these reasons, enabling caching is only suitable when certain assumptions can be made: we strongly recommend that only entities, collections and queries which never change are cached. Or at most, that when indeed such an entity is mutated and allowed to be read out of date (stale) this has no impact on the expectations of the application."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Following this advice guarantees applications get the best performance out of the second-level cache and yet avoid unexpected behaviour."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"On top of immutable data, in certain contexts it might be acceptable to enable caching also on mutable data; this could be a necessary tradeoff on selected\n"
" entities which are read frequently and for which some degree of staleness is acceptable; this \" acceptable degree of staleness\" can be tuned by setting eviction properties.\n"
" This is however not recommended and should be done with extreme care, as it might\n"
" produce unexpected and unforeseen effects on the data."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Rather than enabling caching on mutable data, ideally a better solution would be to use a clustered cache; however at this time Quarkus doesn't provide any such implementation: feel free to get in touch and let this need known so that the team can take this into account."
msgstr ""

#. type: delimited block =
#: _versions/main/guides/hibernate-orm.adoc
msgid "Finally, the second-level cache can be disabled globally by setting `hibernate.cache.use_second_level_cache` to `false`; this is a setting that needs to be specified in the `persistence.xml` configuration file."
msgstr ""

#. type: delimited block =
#: _versions/main/guides/hibernate-orm.adoc
msgid "When second-level cache is disabled, all cache annotations are ignored and all queries are run ignoring caches; this is generally useful only to diagnose issues."
msgstr ""

#. type: Title ==
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Hibernate Envers"
msgstr ""

#. type: delimited block =
#: _versions/main/guides/hibernate-orm.adoc
msgid "The Envers extension to Hibernate ORM aims to provide an easy auditing / versioning solution for entity classes."
msgstr ""

#. type: delimited block =
#: _versions/main/guides/hibernate-orm.adoc
msgid "In Quarkus, Envers has a dedicated Quarkus Extension `io.quarkus:quarkus-hibernate-envers`; you just need to add this to your project to start using it."
msgstr ""

#. type: Block title
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Additional dependency to enable Hibernate Envers"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "At this point the extension does not expose additional configuration properties."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "For more information about Hibernate Envers, see link:https://hibernate.org/orm/envers/[hibernate.org/orm/envers/]."
msgstr ""

#. type: Title ==
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Metrics"
msgstr "指标"

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"Either xref:telemetry-micrometer.adoc[Micrometer] or xref:microprofile-metrics.adoc[SmallRye Metrics] are\n"
"capable of exposing metrics that Hibernate ORM collects at runtime. To enable exposure of Hibernate metrics\n"
"on the `/q/metrics` endpoint, make sure your project depends on a metrics extension and set the configuration property `quarkus.hibernate-orm.metrics.enabled` to `true`.\n"
"When using link:microprofile-metrics[SmallRye Metrics], metrics will be available under the `vendor` scope."
msgstr ""

#. type: Title ==
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Limitations and other things you should know"
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"Quarkus does not modify the libraries it uses; this rule applies to Hibernate ORM as well: when using\n"
"this extension you will mostly have the same experience as using the original library."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"But while they share the same code, Quarkus does configure some components automatically and injects custom implementations\n"
"for some extension points; this should be transparent and useful but if you're an expert of Hibernate you might want to\n"
"know what is being done."
msgstr ""

#. type: Title ===
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Automatic build time enhancement"
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"Hibernate ORM can use build time enhanced entities; normally this is not mandatory, but it's useful and will have your\n"
"applications perform better."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"Typically, you would need to adapt your build scripts to include the Hibernate Enhancement plugins; in Quarkus this is\n"
"not necessary as the enhancement step is integrated in the build and analysis of the Quarkus application."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"Due to the usage of enhancement, using the `clone()` method on entities is currently not supported\n"
"as it will also clone some enhancement-specific fields that are specific to the entity."
msgstr ""

#. type: delimited block =
#: _versions/main/guides/hibernate-orm.adoc
msgid "This limitation might be removed in the future."
msgstr ""

#. type: Title ===
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Automatic integration"
msgstr ""

#. type: Labeled list
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Transaction Manager integration"
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"You don't need to set this up, Quarkus automatically injects the reference to the Narayana Transaction Manager.\n"
"The dependency is included automatically as a transitive dependency of the Hibernate ORM extension.\n"
"All configuration is optional; for more details see xref:transaction.adoc[Using Transactions in Quarkus]."
msgstr ""

#. type: Labeled list
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Connection pool"
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"Don't need to choose one either. Quarkus automatically includes the Agroal connection pool;\n"
"configure your datasource as in the above examples and it will set up Hibernate ORM to use Agroal.\n"
"More details about this connection pool can be found in xref:datasource.adoc[Quarkus - Datasources]."
msgstr ""

#. type: Labeled list
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Second Level Cache"
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"As explained earlier in the xref:caching[Caching section], you don't need to pick an implementation.\n"
"A suitable implementation based on technologies from link:https://infinispan.org/[Infinispan] and link:https://github.com/ben-manes/caffeine[Caffeine] is included as a transitive dependency of the Hibernate ORM extension, and automatically integrated during the build."
msgstr ""

#. type: Title ===
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Limitations"
msgstr ""

#. type: Labeled list
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "XML mapping with duplicate files in the classpath"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "xref:xml-mapping[XML mapping] files are expected to have a unique path."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"In practice, it's only possible to have duplicate XML mapping files in the classpath in very specific scenarios.\n"
"For example, if two JARs include a `META-INF/orm.xml` file (with the exact same path but in different JARs),\n"
"then the mapping file path `META-INF/orm.xml` can only be referenced from a `persistence.xml`\n"
"**in the same JAR as the `META-INF/orm.xml` file**."
msgstr ""

#. type: Labeled list
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "JMX"
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"Management beans are not working in GraalVM native images;\n"
"therefore, Hibernate's capability to register statistics and management operations with the JMX bean is disabled when compiling into a native image.\n"
"This limitation is likely permanent, as it's not a goal for native images\n"
"to implement support for JMX. All such metrics can be accessed in other ways."
msgstr ""

#. type: Labeled list
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "JACC Integration"
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"Hibernate ORM's capability to integrate with JACC is disabled when building GraalVM native images,\n"
"as JACC is not available - nor useful - in native mode."
msgstr ""

#. type: Labeled list
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Binding the Session to ThreadLocal context"
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"It is impossible to use the `ThreadLocalSessionContext` helper of Hibernate ORM as support for it is not implemented.\n"
"Since Quarkus provides out-of-the-box CDI support, injection or programmatic CDI lookup is a better approach.\n"
"This feature also didn't integrate well with reactive components and more modern context propagation techniques, making us believe this legacy feature has no future.\n"
"If you badly need to bind it to a ThreadLocal, it should be trivial to implement in your own code."
msgstr ""

#. type: Labeled list
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "JNDI"
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"The JNDI technology is commonly used in other runtimes to integrate different components.\n"
"A common use case is Java Enterprise servers to bind the TransactionManager and the Datasource components to a name and then have Hibernate ORM configured to look these components up by name.\n"
"But in Quarkus, this use case doesn't apply as components are injected directly, making JNDI support an unnecessary legacy.\n"
"To avoid unexpected use of JNDI, full support for JNDI has been disabled in the Hibernate ORM extension for Quarkus.\n"
"This is both a security precaution and an optimization."
msgstr ""

#. type: Title ===
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Other notable differences"
msgstr ""

#. type: Labeled list
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Format of `import.sql`"
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"When importing a `import.sql` to set up your database, keep in mind that Quarkus reconfigures Hibernate ORM so to require a semicolon (`;`) to terminate each statement.\n"
"The default in Hibernate is to have a statement per line, without requiring a terminator other than newline: remember to convert your scripts to use the `;` terminator character if you're reusing existing scripts.\n"
"This is useful so to allow multi-line statements and human friendly formatting."
msgstr ""

#. type: Title ==
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Simplifying Hibernate ORM with Panache"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "The xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] extension facilitates the usage of Hibernate ORM by providing active record style entities (and repositories) and focuses on making your entities trivial and fun to write in Quarkus."
msgstr ""

#. type: Title ==
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Configure your datasource"
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"Datasource configuration is extremely simple, but is covered in a different guide as technically\n"
"it's implemented by the Agroal connection pool extension for Quarkus."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Jump over to xref:datasource.adoc[Quarkus - Datasources] for all details."
msgstr ""

#. type: Title ==
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Multitenancy"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "\"The term multitenancy, in general, is applied to software development to indicate an architecture in which a single running instance of an application simultaneously serves multiple clients (tenants). This is highly common in SaaS solutions. Isolating information (data, customizations, etc.) pertaining to the various tenants is a particular challenge in these systems. This includes the data owned by each tenant stored in the database\" (link:{hibernate-orm-docs-url}#multitenacy[Hibernate User Guide])."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Quarkus currently supports the link:{hibernate-orm-docs-url}#multitenacy-separate-database[separate database] approach, the link:{hibernate-orm-docs-url}#multitenacy-separate-schema[separate schema] approach and the link:{hibernate-orm-docs-url}#multitenacy-discriminator[discriminator] approach."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "To see multitenancy in action, you can check out the link:{quickstarts-tree-url}/hibernate-orm-multi-tenancy-quickstart[hibernate-orm-multi-tenancy-quickstart] quickstart."
msgstr ""

#. type: Title ===
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Writing the application"
msgstr "编写应用程序"

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Let's start by implementing the `/{tenant}` endpoint. As you can see from the source code below it is just a regular Jakarta REST resource:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "In order to resolve the tenant from incoming requests and map it to a specific tenant configuration, you need to create an implementation for the `io.quarkus.hibernate.orm.runtime.tenant.TenantResolver` interface."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"Annotate the TenantResolver implementation with the `@PersistenceUnitExtension` qualifier\n"
"to tell Quarkus it should be used in the default persistence unit."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "For xref:multiple-persistence-units[named persistence units], use `@PersistenceUnitExtension(\"nameOfYourPU\")`."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "The bean is made `@RequestScoped` as the tenant resolution depends on the incoming request."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "From the implementation above, tenants are resolved from the request path so that in case no tenant could be inferred, the default tenant identifier is returned."
msgstr ""

#. type: delimited block =
#: _versions/main/guides/hibernate-orm.adoc
msgid "If you also use xref:security-openid-connect-multitenancy.adoc[OIDC multitenancy] and both OIDC and Hibernate ORM tenant IDs are the same and must be extracted from the Vert.x `RoutingContext` then you can pass the tenant id from the OIDC Tenant Resolver to the Hibernate ORM Tenant Resolver as a `RoutingContext` attribute, for example:"
msgstr ""

#. type: Title ===
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Configuring the application"
msgstr "配置该应用程序"

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"In general, it is not possible to use the Hibernate ORM database generation feature in conjunction with a multitenancy setup.\n"
"Therefore, you have to disable it, and you need to make sure that the tables are created per schema.\n"
"The following setup will use the xref:flyway.adoc[Flyway] extension to achieve this goal."
msgstr ""

#. type: Title ====
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "SCHEMA approach"
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"The same data source will be used for all tenants and a schema has to be created for every tenant inside that data source.\n"
"CAUTION: Some databases like MariaDB/MySQL do not support database schemas. In these cases you have to use the DATABASE approach below."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Here is an example of the Flyway SQL (`V1.0.0__create_fruits.sql`) to be created in the configured folder `src/main/resources/schema`."
msgstr ""

#. type: Title ====
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "DATABASE approach"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "For every tenant you need to create a named data source with the same identifier that is returned by the `TenantResolver`."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Following are examples of the Flyway SQL files to be created in the configured folder `src/main/resources/database`."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Default schema (`src/main/resources/database/default/V1.0.0__create_fruits.sql`):"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Mycompany schema (`src/main/resources/database/mycompany/V1.0.0__create_fruits.sql`):"
msgstr ""

#. type: Title ====
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "DISCRIMINATOR approach"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "The default data source will be used for all tenants. All entities defining a field annotated with `@TenantId` will have that field populated automatically, and will get filtered automatically in queries."
msgstr ""

#. type: Title ===
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Programmatically Resolving Tenants Connections"
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"If you need a more dynamic configuration for the different tenants you want to support and don't want to end up with multiple entries in your configuration file,\n"
"you can use the `io.quarkus.hibernate.orm.runtime.tenant.TenantConnectionResolver` interface to implement your own logic for retrieving a connection.\n"
"Creating an application-scoped bean that implements this interface\n"
"and annotating it with `@PersistenceUnitExtension` (or `@PersistenceUnitExtension(\"nameOfYourPU\")` for a xref:multiple-persistence-units[named persistence unit])\n"
"will replace the current Quarkus default implementation `io.quarkus.hibernate.orm.runtime.tenant.DataSourceTenantConnectionResolver`.\n"
"Your custom connection resolver would allow for example to read tenant information from a database and create a connection per tenant at runtime based on it."
msgstr ""

#. type: Title ==
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Interceptors"
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"You can assign an link:{hibernate-orm-docs-url}#events-interceptors[`org.hibernate.Interceptor`]\n"
"to your `SessionFactory` by simply defining a CDI bean with the appropriate qualifier:"
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"Annotate the interceptor implementation with the `@PersistenceUnitExtension` qualifier\n"
"to tell Quarkus it should be used in the default persistence unit."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "For xref:multiple-persistence-units[named persistence units], use `@PersistenceUnitExtension(\"nameOfYourPU\")`"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Either extend `org.hibernate.EmptyInterceptor` or implement `org.hibernate.Interceptor` directly."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Implement methods as necessary."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"By default, interceptor beans annotated with `@PersistenceUnitExtension` are application-scoped,\n"
"which means only one interceptor instance will be created per application\n"
"and reused across all entity managers.\n"
"For this reason, the interceptor implementation must be thread-safe."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"In order to create one interceptor instance per entity manager instead,\n"
"annotate your bean with `@Dependent`.\n"
"In that case, the interceptor implementation doesn't need to be thread-safe."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"Due to a limitation in Hibernate ORM itself,\n"
"`@PreDestroy` methods on `@Dependent`-scoped interceptors will never get called."
msgstr ""

#. type: Title ==
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Statement Inspectors"
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "You can assign a `org.hibernate.engine.jdbc.spi.StatementInspector` to your `SessionFactory` by simply defining a CDI bean with the appropriate qualifier:"
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"Annotate the statement inspector implementation with the `@PersistenceUnitExtension` qualifier\n"
"to tell Quarkus it should be used in the default persistence unit."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Implement `org.hibernate.engine.jdbc.spi.StatementInspector`."
msgstr ""

#. type: Title ==
#: _versions/main/guides/hibernate-orm.adoc
#, no-wrap
msgid "Customizing JSON/XML serialization/deserialization"
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"By default, Quarkus will try to automatically configure format mappers depending on available extensions.\n"
"Globally configured `ObjectMapper` (or `Jsonb`) will be used for serialization/deserialization operations when Jackson (or JSON-B) is available.\n"
"Jackson will take precedence if both Jackson and JSON-B are available at the same time."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"JSON and XML serialization/deserialization in Hibernate ORM can be customized by implementing a `org.hibernate.type.format.FormatMapper`\n"
"and annotating the implementation with the appropriate qualifiers:"
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"Annotate the format mapper implementation with the `@JsonFormat` qualifier\n"
"to tell Quarkus that this mapper is specific to JSON serialization/deserialization."
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"Annotate the format mapper implementation with the `@PersistenceUnitExtension` qualifier\n"
"to tell Quarkus it should be used in the default persistence unit."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "Implement `org.hibernate.type.format.FormatMapper`."
msgstr ""

#. type: Plain text
#: _versions/main/guides/hibernate-orm.adoc
msgid "In case of a custom XML format mapper, a different CDI qualifier must be applied:"
msgstr ""

#: _versions/main/guides/hibernate-orm.adoc
msgid ""
"Annotate the format mapper implementation with the `@XmlFormat` qualifier\n"
"to tell Quarkus that this mapper is specific to XML serialization/deserialization."
msgstr ""

#. type: delimited block =
#: _versions/main/guides/hibernate-orm.adoc
msgid "Format mappers *must* have both `@PersistenceUnitExtension` and either `@JsonFormat` or `@XmlFormat` CDI qualifiers applied."
msgstr ""

#. type: delimited block =
#: _versions/main/guides/hibernate-orm.adoc
msgid "Having multiple JSON (or XML) format mappers registered for the same persistence unit will result in an exception, because of the ambiguity."
msgstr ""
