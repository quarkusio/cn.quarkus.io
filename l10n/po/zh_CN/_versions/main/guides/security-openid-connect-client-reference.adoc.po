# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-12-11 02:15+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "OpenID Connect (OIDC) and OAuth2 client and filters"
msgstr "OpenID连接（OIDC）和OAuth2客户端和过滤器参考指南"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "You can use Quarkus extensions to acquire and refresh access tokens from OIDC and OAuth 2.0 compliant servers and propagate access tokens."
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Here, you can learn how to use `quarkus-oidc-client`, `quarkus-oidc-client-reactive-filter` and `quarkus-oidc-client-filter` extensions to acquire and refresh access tokens from OpenID Connect and OAuth 2.0 compliant servers such as link:https://www.keycloak.org[Keycloak]."
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "You can also learn how to use `quarkus-oidc-token-propagation-reactive` and `quarkus-oidc-token-propagation` extensions to propagate the current `Bearer` or `Authorization Code Flow` access tokens"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The access tokens managed by these extensions can be used as HTTP Authorization Bearer tokens to access the remote services."
msgstr "由这些扩展管理的访问令牌可以作为HTTP授权承载令牌来访问远程服务。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Also see xref:security-openid-connect-client.adoc[OpenID Connect client and token propagation quickstart]."
msgstr ""

#. type: Title ==
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "OidcClient"
msgstr "OidcClient"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Add the following dependency:"
msgstr "添加以下依赖关系："

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "The `quarkus-oidc-client` extension provides a reactive `io.quarkus.oidc.client.OidcClient`, which can be used to acquire and refresh tokens using SmallRye Mutiny `Uni` and `Vert.x WebClient`."
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "`OidcClient` is initialized at build time with the IDP token endpoint URL, which can be auto-discovered or manually configured. `OidcClient` uses this endpoint to acquire access tokens by using token grants such as `client_credentials` or `password` and refresh the tokens by using a `refresh_token` grant."
msgstr ""

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Token endpoint configuration"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "By default, the token endpoint address is discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc-client.auth-server-url`."
msgstr "默认情况下，令牌端点地址是通过在配置的 `quarkus.oidc-client.auth-server-url` ，添加一个 `/.well-known/openid-configuration` 路径来发现。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "For example, given this Keycloak URL:"
msgstr "例如，鉴于这个Keycloak网址。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`OidcClient` will discover that the token endpoint URL is `http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens`."
msgstr " `OidcClient` 会发现令牌端点的URL是 `<a href=\"http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens\" class=\"bare\">http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens</a>` ."

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Alternatively, if the discovery endpoint is unavailable or you want to save on the discovery endpoint round-trip, you can disable the discovery and configure the token endpoint address with a relative path value. For example:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "A more compact way to configure the token endpoint URL without the discovery is to set `quarkus.oidc-client.token-path` to an absolute URL:"
msgstr "在没有发现的情况下，配置令牌端点URL的一个更紧凑的方法是将 `quarkus.oidc-client.token-path` 设置为一个绝对URL。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Setting `quarkus.oidc-client.auth-server-url` and `quarkus.oidc-client.discovery-enabled` is not required in this case."
msgstr "在这种情况下不需要设置'quarkus.oidc-client.auth-server-url'和'quarkus.oidc-client.discovery-enabled'。"

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Supported token grants"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "The main token grants that `OidcClient` can use to acquire the tokens are the `client_credentials` (default) and `password` grants."
msgstr ""

#. type: Title ====
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Client credentials grant"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Here is how `OidcClient` can be configured to use the `client_credentials` grant:"
msgstr "下面是如何配置 `OidcClient` ，以使用 `client_credentials` 授予。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "The `client_credentials` grant allows setting extra parameters for the token request by using `quarkus.oidc-client.grant-options.client.<param-name>=<value>`. Here is how to set the intended token recipient by using the `audience` parameter:"
msgstr ""

#. type: Title ====
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Password grant"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Here is how `OidcClient` can be configured to use the `password` grant:"
msgstr "下面是如何配置 `OidcClient` ，以使用 `password` 授予。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "It can be further customized by using a `quarkus.oidc-client.grant-options.password` configuration prefix, similar to how the client credentials grant can be customized."
msgstr ""

#. type: Title ====
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Other grants"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "`OidcClient` can also help acquire the tokens by using grants that require some extra input parameters that cannot be captured in the configuration. These grants are `refresh_token` (with the external refresh token), `authorization_code`, and two grants which can be used to exchange the current access token, namely, `urn:ietf:params:oauth:grant-type:token-exchange` and `urn:ietf:params:oauth:grant-type:jwt-bearer`."
msgstr ""

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid ""
"If you need to acquire an access token and have posted an existing refresh token to the current Quarkus endpoint, you must use the `refresh_token` grant. This grant employs an out-of-band refresh token to obtain a new token set.\n"
"In this case, configure `OidcClient` as follows:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Then you can use the `OidcClient.refreshTokens` method with a provided refresh token to get the access token."
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Using the `urn:ietf:params:oauth:grant-type:token-exchange` or `urn:ietf:params:oauth:grant-type:jwt-bearer` grants might be required if you are building a complex microservices application and want to avoid the same `Bearer` token be propagated to and used by more than one service. See xref:token-propagation-reactive[Token Propagation in MicroProfile RestClient Reactive filter] and xref:token-propagation[Token Propagation in MicroProfile RestClient filter] for more details."
msgstr "如果你正在构建一个复杂的微服务应用程序，并希望避免同一 `Bearer` 令牌被传播到多个服务并被其使用，则可能需要使用 `token exchange` grant。请参阅 link:#token-propagation[MicroProfile RestClient客户端过滤器中的令牌传播] 以了解更多细节。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Using `OidcClient` to support the `authorization code` grant might be required if, for some reason, you cannot use the xref:security-oidc-code-flow-authentication.adoc[Quarkus OIDC extension] to support Authorization Code Flow. If there is a very good reason for you to implement Authorization Code Flow, then you can configure `OidcClient` as follows:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Then, you can use the `OidcClient.accessTokens` method to accept a Map of extra properties and pass the current `code` and `redirect_uri` parameters to exchange the authorization code for the tokens."
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`OidcClient` also supports the `urn:openid:params:grant-type:ciba` grant:"
msgstr "`OidcClient` 还支持 拨款： `urn:openid:params:grant-type:ciba` "

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Then, you can use the `OidcClient.accessTokens` method to accept a Map of extra properties and pass the `auth_req_id` parameter to exchange the token authorization code."
msgstr ""

#. type: Title ====
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Grant scopes"
msgstr "资助范围"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid ""
"You might need to request that a specific set of scopes be associated with an issued access token.\n"
"Use a dedicated `quarkus.oidc-client.scopes` list property, for example: `quarkus.oidc-client.scopes=email,phone`"
msgstr ""

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Use OidcClient directly"
msgstr "直接使用OidcClient"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "One can use `OidcClient` directly as follows:"
msgstr "人们可以直接使用 `OidcClient` ，如下所示。"

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Inject tokens"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "You can inject `Tokens` that use `OidcClient` internally. `Tokens` can be used to acquire the access tokens and refresh them if necessary:"
msgstr ""

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Use OidcClients"
msgstr "使用OidcClients"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`io.quarkus.oidc.client.OidcClients` is a container of ``OidcClient``s - it includes a default `OidcClient` and named clients which can be configured like this:"
msgstr " `io.quarkus.oidc.client.OidcClients` 是一个 s的容器--它包括一个默认的 和命名的客户端，可以像这样进行配置。 `OidcClient` `OidcClient` "

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "In this case, the default client is disabled with a `client-enabled=false` property. The `jwt-secret` client can be accessed like this:"
msgstr ""

#. type: delimited block =
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "If you also use xref:security-openid-connect-multitenancy.adoc[OIDC multitenancy], and each OIDC tenant has its own associated `OidcClient`, you can use a Vert.x `RoutingContext` `tenantId` attribute. For example:"
msgstr ""

#. type: delimited block =
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "If you need, you can also create a new `OidcClient` programmatically like this:"
msgstr ""

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Inject named OidcClient and tokens"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "In case of multiple configured `OidcClient` objects, you can specify the `OidcClient` injection target by the extra qualifier `@NamedOidcClient` instead of working with `OidcClients`:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The same qualifier can be used to specify the `OidcClient` used for a `Tokens` injection:"
msgstr "同样的限定词可以用来指定用于 `Tokens` 注入的 `OidcClient` 。"

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Use OidcClient in RestClient Reactive ClientFilter"
msgstr "在RestClient的Reactive ClientFilter中使用OidcClient"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Add the following Maven Dependency:"
msgstr "添加以下Maven依赖。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Note it will also bring `io.quarkus:quarkus-oidc-client`."
msgstr "注意它也会带来 `io.quarkus:quarkus-oidc-client` 。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`quarkus-oidc-client-reactive-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestReactiveFilter`."
msgstr " `quarkus-oidc-client-reactive-filter` 扩展提供 。 `io.quarkus.oidc.client.filter.OidcClientRequestReactiveFilter` "

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "It works similarly to the way `OidcClientRequestFilter` does (see xref:oidc-client-filter[Use OidcClient in MicroProfile RestClient client filter]) - it uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value. The difference is that it works with xref:rest-client-reactive.adoc[Reactive RestClient] and implements a non-blocking client filter that does not block the current IO thread when acquiring or refreshing the tokens."
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`OidcClientRequestReactiveFilter` delays an initial token acquisition until it is executed to avoid blocking an IO thread."
msgstr " `OidcClientRequestReactiveFilter` 延迟初始令牌的获取，直到它被执行，以避免阻塞一个IO线程，目前它只能用 注释来注册。 `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` "

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can selectively register `OidcClientRequestReactiveFilter` by using either `io.quarkus.oidc.client.reactive.filter.OidcClientFilter` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotations:"
msgstr "你可以通过使用 `io.quarkus.oidc.client.filter.OidcClientFilter` 或 `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` 注释，有选择地注册 `OidcClientRequestFilter` 。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "or"
msgstr "或"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid ""
"`OidcClientRequestReactiveFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-reactive-filter.client-name` configuration property.\n"
"You can also select `OidcClient` by setting the `value` attribute of the `@OidcClientFilter` annotation. The client name set through annotation has higher priority than the `quarkus.oidc-client-reactive-filter.client-name` configuration property.\n"
"For example, given xref:use-oidc-clients[this] `jwt-secret` named OIDC client declaration, you can refer to this client like this:"
msgstr ""

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Use OidcClient in RestClient ClientFilter"
msgstr "在RestClient ClientFilter中使用OidcClient"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`quarkus-oidc-client-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestFilter` Jakarta REST ClientRequestFilter which uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value."
msgstr " `quarkus-oidc-client-filter` 扩展提供了 JAX-RS ClientRequestFilter，它使用 来获取访问令牌，如果需要的话，刷新它，并将它设置为HTTP  方案值。 `io.quarkus.oidc.client.filter.OidcClientRequestFilter` `OidcClient` `Authorization` `Bearer` "

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "By default, this filter will get `OidcClient` to acquire the first pair of access and refresh tokens at its initialization time. If the access tokens are short-lived and refresh tokens are unavailable, then the token acquisition should be delayed with `quarkus.oidc-client.early-tokens-acquisition=false`."
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can selectively register `OidcClientRequestFilter` by using either `io.quarkus.oidc.client.filter.OidcClientFilter` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotations:"
msgstr "你可以通过使用 `io.quarkus.oidc.client.filter.OidcClientFilter` 或 `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` 注释，有选择地注册 `OidcClientRequestFilter` 。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Alternatively, `OidcClientRequestFilter` can be registered automatically with all MP Rest or Jakarta REST clients if the `quarkus.oidc-client-filter.register-filter=true` property is set."
msgstr ""

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid ""
"`OidcClientRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-filter.client-name` configuration property.\n"
"You can also select `OidcClient` by setting the `value` attribute of the `@OidcClientFilter` annotation. The client name set through annotation has higher priority than the `quarkus.oidc-client-filter.client-name` configuration property.\n"
"For example, given xref:use-oidc-clients[this] `jwt-secret` named OIDC client declaration, you can refer to this client like this:"
msgstr ""

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Use a custom RestClient ClientFilter"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "If you prefer, you can use your own custom filter and inject `Tokens`:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The `Tokens` producer will acquire and refresh the tokens, and the custom filter will decide how and when to use the token."
msgstr " `Tokens` 生产者将获得并刷新令牌，而自定义过滤器将决定如何以及何时使用令牌。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can also inject named `Tokens`, see xref:named-oidc-clients[Inject named OidcClient and Tokens]"
msgstr "你也可以注入命名的 `Tokens` ，见 link:#named-oidc-clients[注入命名的OidcClient和令牌]"

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Refreshing access tokens"
msgstr ""

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid ""
"`OidcClientRequestReactiveFilter`, `OidcClientRequestFilter` and `Tokens` producers will refresh the current expired access token if the refresh token is available.\n"
"Additionally, the `quarkus.oidc-client.refresh-token-time-skew` property can be used for a preemptive access token refreshment to avoid sending nearly expired access tokens that might cause HTTP 401 errors. For example, if this property is set to `3S` and the access token will expire in less than 3 seconds, then this token will be auto-refreshed."
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "If the access token needs to be refreshed, but no refresh token is available, then an attempt is made to acquire a new token by using a configured grant, such as `client_credentials`."
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Some OpenID Connect Providers will not return a refresh token in a `client_credentials` grant response. For example, starting from Keycloak 12, a refresh token will not be returned by default for `client_credentials`. The providers might also restrict the number of times a refresh token can be used."
msgstr ""

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Revoking access tokens"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "If your OpenId Connect provider, such as Keycloak, supports a token revocation endpoint, then `OidcClient#revokeAccessToken` can be used to revoke the current access token. The revocation endpoint URL will be discovered alongside the token request URI or can be configured with `quarkus.oidc-client.revoke-path`."
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "You might want to have the access token revoked if using this token with a REST client fails with an HTTP `401` status code or if the access token has already been used for a long time and you would like to refresh it."
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "This can be achieved by requesting a token refresh by using a refresh token. However, if the refresh token is unavailable, you can refresh it by revoking it first and then requesting a new access token."
msgstr ""

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "OidcClient authentication"
msgstr ""

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"`OidcClient` has to authenticate to the OpenID Connect Provider for the `client_credentials` and other grant requests to succeed.\n"
"All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
msgstr "`OidcClient` 必须向 OpenID Connect Provider 进行身份验证，这样 和其他授予请求才能成功。支持所有 `client_credentials` link:https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC 客户端身份验证] 选项，例如"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`client_secret_basic`:"
msgstr " `client_secret_basic` :"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider]:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`client_secret_post`:"
msgstr " `client_secret_post` :"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`client_secret_jwt`, signature algorithm is `HS256`:"
msgstr " `client_secret_jwt` ，签名算法是 `HS256` 。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider], signature algorithm is `HS256`:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`private_key_jwt` with the PEM key file, signature algorithm is `RS256`:"
msgstr " `private_key_jwt` 与PEM密钥文件，签名算法是 。 `RS256` "

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`private_key_jwt` with the keystore file, signature algorithm is `RS256`:"
msgstr " `private_key_jwt` 与密钥存储文件，签名算法是 。 `RS256` "

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that no client secret goes over the wire."
msgstr "使用 `client_secret_jwt` 或 `private_key_jwt` 认证方法，可以确保没有客户的秘密在网上流传。"

#. type: Title ====
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Additional JWT authentication options"
msgstr "额外的JWT认证选项"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "If either `client_secret_jwt` or `private_key_jwt` authentication methods are used, then the JWT signature algorithm, key identifier, audience, subject, and issuer can be customized, for example:"
msgstr ""

#. type: Title ====
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Apple POST JWT"
msgstr "苹果POST JWT"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Apple OpenID Connect Provider uses a `client_secret_post` method where a secret is a JWT produced with a `private_key_jwt` authentication method but with Apple account-specific issuer and subject properties."
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "`quarkus-oidc-client` supports a non-standard `client_secret_post_jwt` authentication method, which can be configured as follows:"
msgstr ""

#. type: Title ====
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Mutual TLS"
msgstr "相互之间的TLS"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Some OpenID Connect Providers require that a client is authenticated as part of the mutual TLS (`mTLS`) authentication process."
msgstr "一些OpenID连接供应商可能要求客户端作为 `Mutual TLS` ( `mTLS` )认证过程的一部分进行认证。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`quarkus-oidc-client` can be configured as follows to support `mTLS`:"
msgstr " `quarkus-oidc-client` 可以按以下方式配置，以支持 。 `mTLS` "

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Testing"
msgstr "测试"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Start by adding the following dependencies to your test project:"
msgstr "首先在你的测试项目中添加以下依赖项："

#. type: Title ====
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Wiremock"
msgstr "Wiremock"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Add the following dependencies to your test project:"
msgstr "在你的测试项目中添加以下依赖项："

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Write a Wiremock-based `QuarkusTestResourceLifecycleManager`, for example:"
msgstr "编写基于Wiremock的 `QuarkusTestResourceLifecycleManager` ，例如。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Prepare the REST test endpoints. You can have the test front-end endpoint, which uses the injected MP REST client with a registered OidcClient filter, call the downstream endpoint. This endpoint echoes the token back. For example, see the `integration-tests/oidc-client-wiremock` in the `main` Quarkus repository."
msgstr "准备好REST测试端点，你可以让测试前端端点使用注入的MP REST客户端与注册的OidcClient过滤器在下游端点上调用，该端点将令牌回传，例如，见 `main` Quarkus资源库中的 `integration-tests/oidc-client-wiremock` 。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Set `application.properties`, for example:"
msgstr "设置 `application.properties` ，例如。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "And finally, write the test code. Given the Wiremock-based resource above, the first test invocation should return the `access_token_1` access token, which will expire in 4 seconds. Use `awaitility` to wait for about 5 seconds, and now the next test invocation should return the `access_token_2` access token, which confirms the expired `access_token_1` access token has been refreshed."
msgstr ""

#. type: Title ====
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Keycloak"
msgstr "Keycloak"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "If you work with Keycloak, you can use the same approach described in the xref:security-oidc-bearer-token-authentication.adoc#integration-testing-keycloak[OpenID Connect Bearer Token Integration testing] Keycloak section."
msgstr ""

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "How to check the errors in the logs"
msgstr "如何检查日志中的错误"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Enable `io.quarkus.oidc.client.runtime.OidcClientImpl` `TRACE` level logging to see more details about the token acquisition and refresh errors:"
msgstr "请启用 `io.quarkus.oidc.client.runtime.OidcClientImpl` `TRACE` 级日志，以查看有关令牌获取和刷新错误的更多细节。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Enable `io.quarkus.oidc.client.runtime.OidcClientRecorder` `TRACE` level logging to see more details about the OidcClient initialization errors:"
msgstr "请启用 `io.quarkus.oidc.client.runtime.OidcClientRecorder` `TRACE` 级日志，以查看更多关于OidcClient初始化错误的细节。"

#. type: Title ==
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "OIDC request filters"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "You can filter OIDC requests made by Quarkus to the OIDC provider by registering one or more `OidcRequestFiler` implementations, which can update or add new request headers. For example, a filter can analyze the request body and add its digest as a new header value:"
msgstr ""

#. type: Title ==
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Token Propagation Reactive"
msgstr "令牌传播 反应式的"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "The `quarkus-oidc-token-propagation-reactive` extension provides a RestEasy Reactive Client, `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter`, that simplifies the propagation of authentication information. This client propagates the xref:security-oidc-bearer-token-authentication.adoc[bearer token] present in the currently active request or the token acquired from the xref:security-oidc-code-flow-authentication.adoc[authorization code flow mechanism] as the HTTP `Authorization` header's `Bearer` scheme value."
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can selectively register `AccessTokenRequestReactiveFilter` by using either `io.quarkus.oidc.token.propagation.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotation, for example:"
msgstr "你可以通过使用 `io.quarkus.oidc.token.propagation.AccessToken` 或 `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` ，有选择地注册 `AccessTokenRequestFilter` ，例如。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Additionally, `AccessTokenRequestReactiveFilter` can support a complex application that needs to exchange the tokens before propagating them."
msgstr "此外， `AccessTokenRequestReactiveFilter` ，可以支持一个复杂的应用程序，需要在传播前交换代币。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "If you work with link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] or another OIDC provider that supports a link:https://tools.ietf.org/html/rfc8693[Token Exchange] token grant, then you can configure `AccessTokenRequestReactiveFilter` to exchange the token like this:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Note `AccessTokenRequestReactiveFilter` will use `OidcClient` to exchange the current token, and you can use `quarkus.oidc-client.grant-options.exchange` to set the additional exchange properties expected by your OpenID Connect Provider."
msgstr "注意 `AccessTokenRequestFilter` 将使用 `OidcClient` 来交换当前令牌，你可以使用 `quarkus.oidc-client.grant-options.exchange` 来设置你的 OpenID Connect 提供商所期望的额外交换属性。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you work with providers such as `Azure` that link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[require using] link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWT bearer token grant] to exchange the current token then you can configure `AccessTokenRequestReactiveFilter` to exchange the token like this:"
msgstr "如果你与供应商合作，如 `Azure` ， link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[需要使用] link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWT不记名令牌授予] 来交换当前令牌，那么你可以配置 `AccessTokenRequestReactiveFilter` ，像这样交换令牌。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`AccessTokenRequestReactiveFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-token-propagation-reactive.client-name` configuration property."
msgstr " `AccessTokenRequestFilter` 默认使用一个默认的 。一个命名的 ，可以通过 配置属性来选择。 `OidcClient` `OidcClient` `quarkus.oidc-token-propagation.client-name` "

#. type: Title ==
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Token Propagation"
msgstr "令牌传播"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid ""
"The `quarkus-oidc-token-propagation` extension provides two Jakarta REST `jakarta.ws.rs.client.ClientRequestFilter` class implementations that simplify the propagation of authentication information.\n"
"`io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` propagates the xref:security-oidc-bearer-token-authentication.adoc[Bearer token] present in the current active request or the token acquired from the xref:security-oidc-code-flow-authentication.adoc[Authorization code flow mechanism], as the HTTP `Authorization` header's `Bearer` scheme value.\n"
"The `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` provides the same functionality but, in addition, provides support for JWT tokens."
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "When you need to propagate the current Authorization Code Flow access token, then the immediate token propagation will work well - as the code flow access tokens (as opposed to ID tokens) are meant to be propagated for the current Quarkus endpoint to access the remote services on behalf of the currently authenticated user."
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "However, the direct end-to-end Bearer token propagation should be avoided. For example, `Client -> Service A -> Service B` where `Service B` receives a token sent by `Client` to `Service A`. In such cases, `Service B` cannot distinguish if the token came from `Service A` or from `Client` directly. For `Service B` to verify the token came from `Service A`, it should be able to assert a new issuer and audience claims."
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Additionally, a complex application might need to exchange or update the tokens before propagating them. For example, the access context might be different when `Service A` is accessing `Service B`. In this case, `Service A` might be granted a narrow or completely different set of scopes to access `Service B`."
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The following sections show how `AccessTokenRequestFilter` and `JsonWebTokenRequestFilter` can help."
msgstr "以下各节展示了 `AccessTokenRequestFilter` 和 `JsonWebTokenRequestFilter` 如何帮助。"

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "RestClient AccessTokenRequestFilter"
msgstr "RestClient AccessTokenRequestFilter"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "`AccessTokenRequestFilter` treats all tokens as Strings, and as such, it can work with both JWT and opaque tokens."
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can selectively register `AccessTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr "你可以通过使用 `io.quarkus.oidc.token.propagation.AccessToken` 或 `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` ，有选择地注册 `AccessTokenRequestFilter` ，例如。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Alternatively, `AccessTokenRequestFilter` can be registered automatically with all MP Rest or Jakarta REST clients if the `quarkus.oidc-token-propagation.register-filter` property is set to `true` and `quarkus.oidc-token-propagation.json-web-token` property is set to `false` (which is a default value)."
msgstr ""

#. type: Title ====
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Exchange token before propagation"
msgstr "令牌传播"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If the current access token needs to be exchanged before propagation and you work with link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] or other OpenID Connect Provider which supports a link:https://tools.ietf.org/html/rfc8693[Token Exchange] token grant then you can configure `AccessTokenRequestFilter` like this:"
msgstr "如果在传播之前需要交换当前的访问令牌，并且你与 link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] 或其他支持 link:https://tools.ietf.org/html/rfc8693[令牌交换] 的OpenID连接提供者合作，那么你可以像这样配置 `AccessTokenRequestFilter` 。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you work with providers such as `Azure` that link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[require using] link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWT bearer token grant] to exchange the current token then you can configure `AccessTokenRequestFilter` to exchange the token like this:"
msgstr "如果你与供应商合作，如 `Azure` ， link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[需要使用] link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWT不记名令牌授予] 来交换当前令牌，那么你可以配置 `AccessTokenRequestFilter` ，像这样交换令牌。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Note `AccessTokenRequestFilter` will use `OidcClient` to exchange the current token, and you can use `quarkus.oidc-client.grant-options.exchange` to set the additional exchange properties expected by your OpenID Connect Provider."
msgstr "注意 `AccessTokenRequestFilter` 将使用 `OidcClient` 来交换当前令牌，你可以使用 `quarkus.oidc-client.grant-options.exchange` 来设置你的 OpenID Connect 提供商所期望的额外交换属性。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`AccessTokenRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-token-propagation.client-name` configuration property."
msgstr " `AccessTokenRequestFilter` 默认使用一个默认的 。一个命名的 ，可以通过 配置属性来选择。 `OidcClient` `OidcClient` `quarkus.oidc-token-propagation.client-name` "

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "RestClient JsonWebTokenRequestFilter"
msgstr "RestClient JsonWebTokenRequestFilter"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Using `JsonWebTokenRequestFilter` is recommended if you work with Bearer JWT tokens where these tokens can have their claims, such as `issuer` and `audience` modified and the updated tokens secured (for example, re-signed) again. It expects an injected `org.eclipse.microprofile.jwt.JsonWebToken` and, therefore, will not work with the opaque tokens. Also, if your OpenID Connect Provider supports a Token Exchange protocol, then it is recommended to use `AccessTokenRequestFilter` instead - as both JWT and opaque bearer tokens can be securely exchanged with `AccessTokenRequestFilter`."
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "`JsonWebTokenRequestFilter` makes it easy for `Service A` implementations to update the injected `org.eclipse.microprofile.jwt.JsonWebToken` with the new `issuer` and `audience` claim values and secure the updated token again with a new signature. The only difficult step is ensuring that `Service A` has a signing key; it should be provisioned from a secure file system or remote secure storage such as Vault."
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can selectively register `JsonWebTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.JsonWebToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr "你可以通过使用 `io.quarkus.oidc.token.propagation.JsonWebToken` 或 `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` ，有选择地注册 `JsonWebTokenRequestFilter` ，例如。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Alternatively, `JsonWebTokenRequestFilter` can be registered automatically with all MicroProfile REST or Jakarta REST clients if both `quarkus.oidc-token-propagation.register-filter` and `quarkus.oidc-token-propagation.json-web-token` properties are set to `true`."
msgstr "另外，如果 `quarkus.oidc-token-propagation.register-filter` 和 `quarkus.oidc-token-propagation.json-web-token` 两个属性都设置为 `true` ，则 `JsonWebTokenRequestFilter` 可以自动注册到所有 MP Rest 或 JAX-RS 客户端。"

#. type: Title ====
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Update token before propagation"
msgstr "令牌传播"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "If the injected token needs to have its `iss` (issuer) or `aud` (audience) claims updated and secured again with a new signature, then you can configure `JsonWebTokenRequestFilter` like this:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "As noted above, use `AccessTokenRequestFilter` if you work with Keycloak or OpenID Connect Provider, which supports a Token Exchange protocol."
msgstr ""

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"You can generate the tokens as described in xref:security-oidc-bearer-token-authentication.adoc#integration-testing[OpenID Connect Bearer Token Integration testing] section.\n"
"Prepare the REST test endpoints. You can have the test front-end endpoint, which uses the injected MP REST client with a registered token propagation filter, call the downstream endpoint. For example, see the `integration-tests/oidc-token-propagation` in the `main` Quarkus repository."
msgstr "您可以按照 xref:security-oidc-bearer-token-authentication.adoc#integration-testing[OpenID Connect 承载令牌集成测试] 部分的描述生成令牌。准备 REST 测试端点。可以让测试前端端点调用下游端点，测试前端端点使用注入的 MP REST 客户端和已注册的令牌传播过滤器。例如，请参阅 `main` Quarkus 存储库中的 `integration-tests/oidc-token-propagation` 。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The `quarkus-oidc-token-propagation-reactive` extension provides `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` which can be used to propagate the current `Bearer` or `Authorization Code Flow` access tokens."
msgstr " `quarkus-oidc-token-propagation-reactive` 扩展提供了 `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` ，可用于传播当前的 `Bearer` 或 `Authorization Code Flow` 访问令牌。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid ""
"The `quarkus-oidc-token-propagation-reactive` extension (as opposed to the non-reactive `quarkus-oidc-token-propagation` extension) does not currently support the exchanging or resigning of the tokens before the propagation.\n"
"However, these features might be added in the future."
msgstr ""

#. type: Title ==
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "GraphQL client integration"
msgstr "GraphQL 客户端集成"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid ""
"The `quarkus-oidc-client-graphql` extension provides a way to integrate an OIDC client into xref:smallrye-graphql-client.adoc[GraphQL clients] paralleling the approach used with REST clients.\n"
"When this extension is active, any GraphQL client configured through properties (rather than programmatically by the builder) will use the OIDC client to acquire an access token, which it will then set as the `Authorization` header value.\n"
"The OIDC client will also refresh expired access tokens."
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "To configure which OIDC client should be used by the GraphQL client, select one of the configured OIDC clients with the `quarkus.oidc-client-graphql.client-name` property, for example:"
msgstr ""

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"quarkus.oidc-client-graphql.client-name=oidc-client-for-graphql\n"
"\n"
"# example declaration of the OIDC client itself\n"
"quarkus.oidc-client.oidc-client-for-graphql.auth-server-url=${keycloak.url}\n"
"quarkus.oidc-client.oidc-client-for-graphql.grant.type=password\n"
"quarkus.oidc-client.oidc-client-for-graphql.grant-options.password.username=${username}\n"
"quarkus.oidc-client.oidc-client-for-graphql.grant-options.password.password=${password}\n"
"quarkus.oidc-client.oidc-client-for-graphql.client-id=${quarkus.oidc.client-id}\n"
"quarkus.oidc-client.oidc-client-for-graphql.credentials.client-secret.value=${keycloak.credentials.secret}\n"
"quarkus.oidc-client.oidc-client-for-graphql.credentials.client-secret.method=POST"
msgstr "quarkus.oidc-client-graphql.client-name=oidc-client-for-graphql"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"If you don't specify the `quarkus.oidc-client-graphql.client-name` property,\n"
"GraphQL clients will use the default OIDC client (without an explicit name)."
msgstr "如果不指定 `quarkus.oidc-client-graphql.client-name` 属性，GraphQL 客户端将使用默认的 OIDC 客户端（没有明确的名称）。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"Specifically for type-safe GraphQL clients, you can override this on a\n"
"per-client basis by annotating the `GraphQLClientApi` interface with\n"
"`@io.quarkus.oidc.client.filter.OidcClientFilter`. For example:"
msgstr "对于类型安全的 GraphQL 客户端，您可以通过使用 `@io.quarkus.oidc.client.filter.OidcClientFilter` 对 `GraphQLClientApi` 接口进行注解，从而在每个客户端的基础上覆盖这一点。例如"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"To be able to use this with a programmatically created GraphQL client, both\n"
"builders (`VertxDynamicGraphQLClientBuilder` and\n"
"`VertxTypesafeGraphQLClientBuilder`) contain a method `dynamicHeader(String,\n"
"Uni<String>`) that allows you to plug in a header that might change for\n"
"every request. To plug an OIDC client into it, use"
msgstr "为了能与以编程方式创建的 GraphQL 客户端一起使用，两个构建器（ `VertxDynamicGraphQLClientBuilder` 和 `VertxTypesafeGraphQLClientBuilder` ）都包含一个方法 `dynamicHeader(String, Uni<String>` ），允许您插入一个可能在每个请求中都会改变的标头。要将 OIDC 客户端插入其中，请使用"

#. type: Title ==
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "References"
msgstr "参考文献"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "xref:security-openid-connect-client.adoc[OpenID Connect client and token propagation quickstart]."
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]"
msgstr "xref:security-oidc-bearer-token-authentication.adoc[OIDC 承载令牌验证]"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "xref:security-oidc-code-flow-authentication.adoc[OIDC code flow mechanism for protecting web applications]"
msgstr "xref:security-oidc-code-flow-authentication.adoc[保护网络应用程序的 OIDC 代码流机制]"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus 安全概述]"
