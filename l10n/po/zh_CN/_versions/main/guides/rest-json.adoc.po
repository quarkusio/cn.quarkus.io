# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-06-17 02:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/rest-json.adoc:6
#, no-wrap
msgid "Writing JSON REST Services"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:11
msgid "JSON is now the _lingua franca_ between microservices."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:13
msgid "In this guide, we see how you can get your REST services to consume and produce JSON payloads."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:15
msgid "there is another guide if you need a xref:rest-client-reactive.adoc[REST client] (including support for JSON)."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/rest-json.adoc:20
msgid "This is an introduction to writing JSON REST services with Quarkus.  A more detailed guide about RESTEasy Reactive is available xref:resteasy-reactive.adoc[here]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-json.adoc:22
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: upstream/_versions/main/guides/rest-json.adoc:26
#, no-wrap
msgid "Architecture"
msgstr "应用结构"

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:29
msgid "The application built in this guide is quite simple: the user can add elements in a list using a form and the list is updated."
msgstr "本指南中构建的应用程序非常简单：用户可以使用一个表单在列表中添加元素并更新列表。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:31
msgid "All the information between the browser and the server are formatted as JSON."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-json.adoc:32
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:36
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:38
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:40
msgid "The solution is located in the `rest-json-quickstart` {quickstarts-tree-url}/rest-json-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-json.adoc:41
#, no-wrap
msgid "Creating the Maven project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:44
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:51
msgid "This command generates a new project importing the RESTEasy Reactive/JAX-RS and https://github.com/FasterXML/jackson[Jackson] extensions, and in particular adds the following dependency:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/rest-json.adoc:53
#: upstream/_versions/main/guides/rest-json.adoc:82
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:59
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-reactive-jackson</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/rest-json.adoc:62
#: upstream/_versions/main/guides/rest-json.adoc:91
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:65
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-resteasy-reactive-jackson\")\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/rest-json.adoc:70
msgid "To improve user experience, Quarkus registers the three Jackson https://github.com/FasterXML/jackson-modules-java8[Java 8 modules] so you don't need to do it manually."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:73
msgid "Quarkus also supports https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] so, if you prefer JSON-B over Jackson, you can create a project relying on the RESTEasy Reactive JSON-B extension instead:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:80
msgid "This command generates a new project importing the RESTEasy Reactive/JAX-RS and https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] extensions, and in particular adds the following dependency:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:88
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-reactive-jsonb</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:94
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-resteasy-reactive-jsonb\")\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/rest-json.adoc:99
msgid "While named \"reactive\", RESTEasy Reactive supports equally well both traditional blocking patterns and reactive patterns."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/rest-json.adoc:101
msgid "For more information about RESTEasy Reactive, please refer to the xref:resteasy-reactive.adoc[dedicated guide]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-json.adoc:103
#, no-wrap
msgid "Creating your first JSON REST service"
msgstr "创建你的第一个JSON REST服务"

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:106
msgid "In this example, we will create an application to manage a list of fruits."
msgstr "在这个例子中，我们将创建一个应用程序来管理fruit列表。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:108
msgid "First, let's create the `Fruit` bean as follows:"
msgstr "首先，让我们创建 `Fruit` 实体类，如下所示："

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:112
#: upstream/_versions/main/guides/rest-json.adoc:135
#: upstream/_versions/main/guides/rest-json.adoc:395
#: upstream/_versions/main/guides/rest-json.adoc:418
#, no-wrap
msgid "package org.acme.rest.json;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:114
#, no-wrap
msgid "public class Fruit {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:117
#: upstream/_versions/main/guides/rest-json.adoc:400
#, no-wrap
msgid ""
"    public String name;\n"
"    public String description;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:120
#, no-wrap
msgid ""
"    public Fruit() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:126
#, no-wrap
msgid ""
"    public Fruit(String name, String description) {\n"
"        this.name = name;\n"
"        this.description = description;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:129
msgid "Nothing fancy. One important thing to note is that having a default constructor is required by the JSON serialization layer."
msgstr "这非常的简单。需要注意的一件事是， JSON 序列化层需要具有默认构造函数。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:131
msgid "Now, create the `org.acme.rest.json.FruitResource` class as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:139
#, no-wrap
msgid ""
"import java.util.Collections;\n"
"import java.util.LinkedHashMap;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:144
#, no-wrap
msgid ""
"import javax.ws.rs.DELETE;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:147
#, no-wrap
msgid ""
"@Path(\"/fruits\")\n"
"public class FruitResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:149
#, no-wrap
msgid "    private Set<Fruit> fruits = Collections.newSetFromMap(Collections.synchronizedMap(new LinkedHashMap<>()));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:154
#, no-wrap
msgid ""
"    public FruitResource() {\n"
"        fruits.add(new Fruit(\"Apple\", \"Winter fruit\"));\n"
"        fruits.add(new Fruit(\"Pineapple\", \"Tropical fruit\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:159
#, no-wrap
msgid ""
"    @GET\n"
"    public Set<Fruit> list() {\n"
"        return fruits;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:165
#, no-wrap
msgid ""
"    @POST\n"
"    public Set<Fruit> add(Fruit fruit) {\n"
"        fruits.add(fruit);\n"
"        return fruits;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:172
#, no-wrap
msgid ""
"    @DELETE\n"
"    public Set<Fruit> delete(Fruit fruit) {\n"
"        fruits.removeIf(existingFruit -> existingFruit.name.contentEquals(fruit.name));\n"
"        return fruits;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:175
msgid "The implementation is pretty straightforward, and you just need to define your endpoints using the JAX-RS annotations."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:178
msgid "The `Fruit` objects will be automatically serialized/deserialized by https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] or https://github.com/FasterXML/jackson[Jackson], depending on the extension you chose when initializing the project."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/rest-json.adoc:185
msgid "When a JSON extension is installed such as `quarkus-resteasy-reactive-jackson` or `quarkus-resteasy-reactive-jsonb`, Quarkus will use the `application/json` media type by default for most return values, unless the media type is explicitly set via `@Produces` or `@Consumes` annotations (there are some exceptions for well known types, such as `String` and `File`, which default to `text/plain` and `application/octet-stream` respectively)."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/rest-json.adoc:188
#, no-wrap
msgid "Configuring JSON support"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/rest-json.adoc:190
#, no-wrap
msgid "Jackson"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:194
msgid "In Quarkus, the default Jackson `ObjectMapper` obtained via CDI (and consumed by the Quarkus extensions) is configured to ignore unknown properties (by disabling the `DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES` feature)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:197
msgid "You can restore the default behavior of Jackson by setting `quarkus.jackson.fail-on-unknown-properties=true` in your `application.properties` or on a per-class basis via `@JsonIgnoreProperties(ignoreUnknown = false)`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:200
msgid "Furthermore, the `ObjectMapper` is configured to format dates and time in ISO-8601 (by disabling the `SerializationFeature.WRITE_DATES_AS_TIMESTAMPS` feature)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:204
msgid "The default behaviour of Jackson can be restored by setting `quarkus.jackson.write-dates-as-timestamps=true` in your `application.properties`. If you want to change the format for a single field, you can use the `@JsonFormat` annotation."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:208
msgid "Also, Quarkus makes it very easy to configure various Jackson settings via CDI beans.  The simplest (and suggested) approach is to define a CDI bean of type `io.quarkus.jackson.ObjectMapperCustomizer` inside of which any Jackson configuration can be applied."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:210
msgid "An example where a custom module needs to be registered would look like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:216
#, no-wrap
msgid ""
"import com.fasterxml.jackson.databind.ObjectMapper;\n"
"import io.quarkus.jackson.ObjectMapperCustomizer;\n"
"import javax.inject.Singleton;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:219
#, no-wrap
msgid ""
"@Singleton\n"
"public class RegisterCustomModuleCustomizer implements ObjectMapperCustomizer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:224
#, no-wrap
msgid ""
"    public void customize(ObjectMapper mapper) {\n"
"        mapper.registerModule(new CustomModule());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:229
msgid "Users can even provide their own `ObjectMapper` bean if they so choose.  If this is done, it is very important to manually inject and apply all `io.quarkus.jackson.ObjectMapperCustomizer` beans in the CDI producer that produces `ObjectMapper`.  Failure to do so will prevent Jackson specific customizations provided by various extensions from being applied."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:234
#, no-wrap
msgid ""
"import com.fasterxml.jackson.databind.ObjectMapper;\n"
"import io.quarkus.jackson.ObjectMapperCustomizer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:238
#, no-wrap
msgid ""
"import javax.enterprise.inject.Instance;\n"
"import javax.enterprise.inject.Produces;\n"
"import javax.inject.Singleton;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:240
#, no-wrap
msgid "public class CustomObjectMapper {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:246
#, no-wrap
msgid ""
"    // Replaces the CDI producer for ObjectMapper built into Quarkus\n"
"    @Singleton\n"
"    @Produces\n"
"    ObjectMapper objectMapper(Instance<ObjectMapperCustomizer> customizers) {\n"
"        ObjectMapper mapper = myObjectMapper(); // Custom `ObjectMapper`\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:251
#, no-wrap
msgid ""
"        // Apply all ObjectMapperCustomizer beans (incl. Quarkus)\n"
"        for (ObjectMapperCustomizer customizer : customizers) {\n"
"            customizer.customize(mapper);\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:255
#, no-wrap
msgid ""
"        return mapper;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title =====
#: upstream/_versions/main/guides/rest-json.adoc:257
#, no-wrap
msgid "Mixin support"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:262
msgid "Quarkus automates the registration of Jackson's Mixin support, via the `io.quarkus.jackson.JacksonMixin` annotation.  This annotation can be placed on classes that are meant to be used as Jackson mixins while the classes they are meant to customize are defined as the value of the annotation."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/rest-json.adoc:263
#, no-wrap
msgid "JSON-B"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:266
msgid "As stated above, Quarkus provides the option of using JSON-B instead of Jackson via the use of the `quarkus-resteasy-jsonb` extension."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:268
msgid "Following the same approach as described in the previous section, JSON-B can be configured using a `io.quarkus.jsonb.JsonbConfigCustomizer` bean."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:270
msgid "If for example a custom serializer named `FooSerializer` for type `com.example.Foo` needs to be registered with JSON-B, the addition of a bean like the following would suffice:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:277
#, no-wrap
msgid ""
"import io.quarkus.jsonb.JsonbConfigCustomizer;\n"
"import javax.inject.Singleton;\n"
"import javax.json.bind.JsonbConfig;\n"
"import javax.json.bind.serializer.JsonbSerializer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:280
#, no-wrap
msgid ""
"@Singleton\n"
"public class FooSerializerRegistrationCustomizer implements JsonbConfigCustomizer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:285
#, no-wrap
msgid ""
"    public void customize(JsonbConfig config) {\n"
"        config.withSerializers(new FooSerializer());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:290
msgid "A more advanced option would be to directly provide a bean of `javax.json.bind.JsonbConfig` (with a `Dependent` scope) or in the extreme case to provide a bean of type `javax.json.bind.Jsonb` (with a `Singleton` scope).  If the latter approach is leveraged it is very important to manually inject and apply all `io.quarkus.jsonb.JsonbConfigCustomizer` beans in the CDI producer that produces `javax.json.bind.Jsonb`.  Failure to do so will prevent JSON-B specific customizations provided by various extensions from being applied."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:294
#, no-wrap
msgid "import io.quarkus.jsonb.JsonbConfigCustomizer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:298
#, no-wrap
msgid ""
"import javax.enterprise.context.Dependent;\n"
"import javax.enterprise.inject.Instance;\n"
"import javax.json.bind.JsonbConfig;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:300
#, no-wrap
msgid "public class CustomJsonbConfig {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:305
#, no-wrap
msgid ""
"    // Replaces the CDI producer for JsonbConfig built into Quarkus\n"
"    @Dependent\n"
"    JsonbConfig jsonConfig(Instance<JsonbConfigCustomizer> customizers) {\n"
"        JsonbConfig config = myJsonbConfig(); // Custom `JsonbConfig`\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:310
#, no-wrap
msgid ""
"        // Apply all JsonbConfigCustomizer beans (incl. Quarkus)\n"
"        for (JsonbConfigCustomizer customizer : customizers) {\n"
"            customizer.customize(config);\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:314
#, no-wrap
msgid ""
"        return config;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-json.adoc:317
#, no-wrap
msgid "Creating a frontend"
msgstr "创建一个网页"

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:322
msgid "Now let's add a simple web page to interact with our `FruitResource`.  Quarkus automatically serves static resources located under the `META-INF/resources` directory.  In the `src/main/resources/META-INF/resources` directory, add a `fruits.html` file with the content from this {quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/fruits.html[fruits.html] file in it."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:324
msgid "You can now interact with your REST service:"
msgstr "现在你可以与你的REST服务进行交互："

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:328
msgid "start Quarkus with:"
msgstr "启动Quarkus："

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:331
msgid "open a browser to `http://localhost:8080/fruits.html`"
msgstr "打开浏览器访问 `<a href=\"http://localhost:8080/fruits.html\" class=\"bare\">http://localhost:8080/fruits.html</a>` "

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:332
msgid "add new fruits to the list via the form"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-json.adoc:335
#, no-wrap
msgid "Building a native executable"
msgstr "构建一个本地可执行文件"

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:338
msgid "You can build a native executable with the usual command:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:342
msgid "Running it is as simple as executing `./target/rest-json-quickstart-1.0.0-SNAPSHOT-runner`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:344
msgid "You can then point your browser to `http://localhost:8080/fruits.html` and use your application."
msgstr "然后你可以使用的浏览器访问 `<a href=\"http://localhost:8080/fruits.html\" class=\"bare\">http://localhost:8080/fruits.html</a>` 来使用你的应用程序。"

#. type: Title ==
#: upstream/_versions/main/guides/rest-json.adoc:345
#, no-wrap
msgid "About serialization"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:348
msgid "JSON serialization libraries use Java reflection to get the properties of an object and serialize them."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:352
msgid "When using native executables with GraalVM, all classes that will be used with reflection need to be registered.  The good news is that Quarkus does that work for you most of the time.  So far, we haven't registered any class, not even `Fruit`, for reflection usage and everything is working fine."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:355
msgid "Quarkus performs some magic when it is capable of inferring the serialized types from the REST methods.  When you have the following REST method, Quarkus determines that `Fruit` will be serialized:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:362
#, no-wrap
msgid ""
"@GET\n"
"public List<Fruit> list() {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:366
msgid "Quarkus does that for you automatically by analyzing the REST methods at build time and that's why we didn't need any reflection registration in the first part of this guide."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:369
msgid "Another common pattern in the JAX-RS world is to use the `Response` object.  `Response` comes with some nice perks:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:371
msgid "you can return different entity types depending on what happens in your method (a `Legume` or an `Error` for instance);"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:372
msgid "you can set the attributes of the `Response` (the status comes to mind in the case of an error)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:374
msgid "Your REST method then looks like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:381
#, no-wrap
msgid ""
"@GET\n"
"public Response list() {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:385
msgid "It is not possible for Quarkus to determine at build time the type included in the `Response` as the information is not available.  In this case, Quarkus won't be able to automatically register for reflection the required classes."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:387
msgid "This leads us to our next section."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-json.adoc:388
#, no-wrap
msgid "Using Response"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:391
msgid "Let's create the `Legume` class which will be serialized as JSON, following the same model as for our `Fruit` class:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:397
#, no-wrap
msgid "public class Legume {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:403
#, no-wrap
msgid ""
"    public Legume() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:409
#, no-wrap
msgid ""
"    public Legume(String name, String description) {\n"
"        this.name = name;\n"
"        this.description = description;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:412
msgid "Now let's create a `LegumeResource` REST service with only one method which returns the list of legumes."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:414
msgid "This method returns a `Response` and not a list of `Legume`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:422
#, no-wrap
msgid ""
"import java.util.Collections;\n"
"import java.util.LinkedHashSet;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:429
#, no-wrap
msgid ""
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import javax.ws.rs.core.Response;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:434
#, no-wrap
msgid ""
"@Path(\"/legumes\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public class LegumeResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:436
#, no-wrap
msgid "    private Set<Legume> legumes = Collections.synchronizedSet(new LinkedHashSet<>());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:441
#, no-wrap
msgid ""
"    public LegumeResource() {\n"
"        legumes.add(new Legume(\"Carrot\", \"Root vegetable, usually orange\"));\n"
"        legumes.add(new Legume(\"Zucchini\", \"Summer squash\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:447
#, no-wrap
msgid ""
"    @GET\n"
"    public Response list() {\n"
"        return Response.ok(legumes).build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:452
msgid "Now let's add a simple web page to display our list of legumes.  In the `src/main/resources/META-INF/resources` directory, add a `legumes.html` file with the content from this {quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/legumes.html[legumes.html] file in it."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:454
#, fuzzy
msgid "Open a browser to http://localhost:8080/legumes.html, and you will see our list of legumes."
msgstr "然后你可以使用的浏览器访问 `<a href=\"http://localhost:8080/fruits.html\" class=\"bare\">http://localhost:8080/fruits.html</a>` 来使用你的应用程序。"

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:456
msgid "The interesting part starts when running the application as a native executable:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:460
#: upstream/_versions/main/guides/rest-json.adoc:499
msgid "create the native executable with:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:463
#: upstream/_versions/main/guides/rest-json.adoc:502
msgid "execute it with `./target/rest-json-quickstart-1.0.0-SNAPSHOT-runner`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:464
#: upstream/_versions/main/guides/rest-json.adoc:503
msgid "open a browser and go to http://localhost:8080/legumes.html"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:468
msgid "No legumes there."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:471
msgid "As mentioned above, the issue is that Quarkus was not able to determine the `Legume` class will require some reflection by analyzing the REST endpoints.  The JSON serialization library tries to get the list of fields of `Legume` and gets an empty list, so it does not serialize the fields' data."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/rest-json.adoc:476
msgid "At the moment, when JSON-B or Jackson tries to get the list of fields of a class, if the class is not registered for reflection, no exception will be thrown.  GraalVM will simply return an empty list of fields."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/rest-json.adoc:478
msgid "Hopefully, this will change in the future and make the error more obvious."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:481
msgid "We can register `Legume` for reflection manually by adding the `@RegisterForReflection` annotation on our `Legume` class:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:484
#, no-wrap
msgid "import io.quarkus.runtime.annotations.RegisterForReflection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:489
#, no-wrap
msgid ""
"@RegisterForReflection\n"
"public class Legume {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:492
msgid "The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation. More details about the `@RegisterForReflection` annotation can be found on the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:494
msgid "Let's do that and follow the same steps as before:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:498
msgid "hit `Ctrl+C` to stop the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:507
msgid "This time, you can see our list of legumes."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-json.adoc:509
#, no-wrap
msgid "Being reactive"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:513
msgid "You can return _reactive types_ to handle asynchronous processing.  Quarkus recommends the usage of https://smallrye.io/smallrye-mutiny[Mutiny] to write reactive and asynchronous code."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:515
msgid "RESTEasy Reactive is naturally integrated with Mutiny."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:517
msgid "Your endpoints can return `Uni` or `Multi` instances:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:526
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/{name}\")\n"
"public Uni<Fruit> getOne(String name) {\n"
"    return findByName(name);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rest-json.adoc:531
#, no-wrap
msgid ""
"@GET\n"
"public Multi<Fruit> getAll() {\n"
"    return findAll();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:535
msgid "Use `Uni` when you have a single result.  Use `Multi` when you have multiple items that may be emitted asynchronously."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:537
msgid "You can use `Uni` and `Response` to return asynchronous HTTP responses: `Uni<Response>`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:539
msgid "More details about Mutiny can be found in xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rest-json.adoc:540
#, no-wrap
msgid "Conclusion"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:543
msgid "Creating JSON REST services with Quarkus is easy as it relies on proven and well known technologies."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:545
msgid "As usual, Quarkus further simplifies things under the hood when running your application as a native executable."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rest-json.adoc:546
msgid "There is only one thing to remember: if you use `Response` and Quarkus can't determine the beans that are serialized, you need to annotate them with `@RegisterForReflection`."
msgstr ""
