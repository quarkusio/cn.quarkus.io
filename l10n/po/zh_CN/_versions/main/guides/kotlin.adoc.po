# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-13 03:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/kotlin.adoc:6
#, no-wrap
msgid "Using Kotlin"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:12
msgid "https://kotlinlang.org/[Kotlin] is a very popular programming language that targets the JVM (amongst other environments). Kotlin has experienced a surge in popularity the last few years making it the most popular JVM language, except for Java of course."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:14
msgid "Quarkus provides first class support for using Kotlin as will be explained in this guide."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/kotlin.adoc:17
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/kotlin.adoc:25
msgid "If building with Mandrel, make sure to use version Mandrel 22.1 or above, for example `ubi-quarkus-mandrel:22.1-java17`.  With older versions, you might encounter errors when trying to deserialize JSON documents that have null or missing fields, similar to the errors mentioned in the <<kotlin-jackson>> section."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:28
msgid "NB: For Gradle project setup please see below, and for further reference consult the guide in the xref:gradle-tooling.adoc[Gradle setup page]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/kotlin.adoc:29
#, no-wrap
msgid "Creating the Maven project"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:32
msgid "First, we need a new Kotlin project. This can be done using the following command:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:41
msgid "When adding `kotlin` to the extensions list, the Maven plugin will generate a project that is properly configured to work with Kotlin. Furthermore the `org.acme.ReactiveGreetingResource` class is implemented as Kotlin source code (as is the case with the generated tests).  The addition of `resteasy-reactive-jackson` in the extension list results in importing the RESTEasy Reactive and Jackson extensions."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:43
msgid "`ReactiveGreetingResource.kt` looks like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:47
#, no-wrap
msgid "package org.acme\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:52
#: upstream/_versions/main/guides/kotlin.adoc:453
#: upstream/_versions/main/guides/kotlin.adoc:493
#, no-wrap
msgid ""
"import javax.ws.rs.GET\n"
"import javax.ws.rs.Path\n"
"import javax.ws.rs.Produces\n"
"import javax.ws.rs.core.MediaType\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:55
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"class ReactiveGreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:60
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    fun hello() = \"Hello from RESTEasy Reactive\"\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/kotlin.adoc:62
#, no-wrap
msgid "Update code"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:65
msgid "In order to show a more practical example of Kotlin usage we will add a simple link:https://kotlinlang.org/docs/reference/data-classes.html[data class] called `Greeting.kt` like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:69
#, no-wrap
msgid "package org.acme.rest\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:71
#, no-wrap
msgid "data class Greeting(val message: String = \"\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:74
msgid "We also update the `ReactiveGreetingResource.kt` like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:80
#, no-wrap
msgid ""
"import javax.ws.rs.GET\n"
"import javax.ws.rs.Path\n"
"import javax.ws.rs.core.MediaType\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:83
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"class GreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:87
#, no-wrap
msgid ""
"    @GET\n"
"    fun hello() = Greeting(\"hello\")\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:90
msgid "With these changes in place the `/hello` endpoint will reply with a JSON object instead of a simple String."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:92
msgid "To make the test pass, we also need to update `ReactiveGreetingResourceTest.kt` like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:96
#, no-wrap
msgid "import org.hamcrest.Matchers.equalTo\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:99
#, no-wrap
msgid ""
"@QuarkusTest\n"
"class ReactiveGreetingResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:108
#, no-wrap
msgid ""
"    @Test\n"
"    fun testHelloEndpoint() {\n"
"        given()\n"
"          .`when`().get(\"/hello\")\n"
"          .then()\n"
"             .statusCode(200)\n"
"             .body(\"message\", equalTo(\"hello\"))\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:110
#: upstream/_versions/main/guides/kotlin.adoc:464
#: upstream/_versions/main/guides/kotlin.adoc:480
#: upstream/_versions/main/guides/kotlin.adoc:514
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/kotlin.adoc:112
#, no-wrap
msgid "Important Maven configuration points"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:115
msgid "The generated `pom.xml` contains the following modifications compared to its counterpart when Kotlin is not selected:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:117
#: upstream/_versions/main/guides/kotlin.adoc:180
msgid "The `quarkus-kotlin` artifact is added to the dependencies. This artifact provides support for Kotlin in the live reload mode (more about this later on)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:118
#: upstream/_versions/main/guides/kotlin.adoc:181
msgid "The `kotlin-stdlib-jdk8` is also added as a dependency."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:119
msgid "Maven's `sourceDirectory` and `testSourceDirectory` build properties are configured to point to Kotlin sources (`src/main/kotlin` and `src/test/kotlin` respectively)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:120
msgid "The `kotlin-maven-plugin` is configured as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:145
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>kotlin-maven-plugin</artifactId>\n"
"    <groupId>org.jetbrains.kotlin</groupId>\n"
"    <version>${kotlin.version}</version>\n"
"    <executions>\n"
"        <execution>\n"
"            <id>compile</id>\n"
"            <goals>\n"
"                <goal>compile</goal>\n"
"            </goals>\n"
"        </execution>\n"
"        <execution>\n"
"            <id>test-compile</id>\n"
"            <goals>\n"
"                <goal>test-compile</goal>\n"
"            </goals>\n"
"        </execution>\n"
"    </executions>\n"
"    <configuration>\n"
"        <compilerPlugins>\n"
"            <plugin>all-open</plugin>\n"
"        </compilerPlugins>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:151
#, no-wrap
msgid ""
"        <pluginOptions>\n"
"            <!-- Each annotation is placed on its own line -->\n"
"            <option>all-open:annotation=javax.ws.rs.Path</option>\n"
"        </pluginOptions>\n"
"    </configuration>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:160
#, no-wrap
msgid ""
"    <dependencies>\n"
"        <dependency>\n"
"            <groupId>org.jetbrains.kotlin</groupId>\n"
"            <artifactId>kotlin-maven-allopen</artifactId>\n"
"            <version>${kotlin.version}</version>\n"
"        </dependency>\n"
"    </dependencies>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:164
msgid "The important thing to note is the use of the https://kotlinlang.org/docs/reference/compiler-plugins.html#all-open-compiler-plugin[all-open] Kotlin compiler plugin.  In order to understand why this plugin is needed, first we need to note that by default all the classes generated from the Kotlin compiler are marked as `final`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:166
msgid "Having `final` classes however does not work well with various frameworks that need to create https://docs.oracle.com/javase/8/docs/technotes/guides/reflection/proxy.html[Dynamic Proxies]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:169
msgid "Thus, the `all-open` Kotlin compiler plugin allows us to configure the compiler to *not* mark as `final` classes that have certain annotations. In the snippet above, we have specified that classes annotated with `javax.ws.rs.Path` should not be `final`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:172
msgid "If your application contains classes annotated with `javax.enterprise.context.ApplicationScoped` for example, then `<option>all-open:annotation=javax.enterprise.context.ApplicationScoped</option>` needs to be added as well. Same goes for any class that needs to have a dynamic proxy created at runtime."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:174
msgid "Future versions of Quarkus will configure the Kotlin compiler plugin in a way that will make it unnecessary to alter this configuration."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/kotlin.adoc:175
#, no-wrap
msgid "Important Gradle configuration points"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:178
msgid "Similar to the Maven configuration, when using Gradle, the following modifications are required when Kotlin is selected:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:182
msgid "The Kotlin plugin is activated, which implicitly adds `sourceDirectory` and `testSourceDirectory` build properties to point to Kotlin sources (`src/main/kotlin` and `src/test/kotlin` respectively)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:183
msgid "The all-open Kotlin plugin tells the compiler not to mark as final, those classes with the annotations highlighted (customize as required)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:184
msgid "When using native-image, the use of http (or https) protocol(s) must be declared"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:185
msgid "An example configuration follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:191
#, no-wrap
msgid ""
"plugins {\n"
"    id 'java'\n"
"    id 'io.quarkus' \n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:195
#, no-wrap
msgid ""
"    id \"org.jetbrains.kotlin.jvm\" version \"{kotlin-version}\" // <1>\n"
"    id \"org.jetbrains.kotlin.plugin.allopen\" version \"{kotlin-version}\" // <1>\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:200
#: upstream/_versions/main/guides/kotlin.adoc:255
#: upstream/_versions/main/guides/kotlin.adoc:268
#, no-wrap
msgid ""
"repositories {\n"
"    mavenLocal()\n"
"    mavenCentral()\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:203
#, no-wrap
msgid ""
"dependencies { \n"
"    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:{kotlin-version}'\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:205
#, no-wrap
msgid "   implementation enforcedPlatform(\"${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}\")\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:209
#, no-wrap
msgid ""
"    implementation 'io.quarkus:quarkus-resteasy-reactive'\n"
"    implementation 'io.quarkus:quarkus-resteasy-reactive-jackson'\n"
"    implementation 'io.quarkus:quarkus-kotlin'\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:213
#, no-wrap
msgid ""
"    testImplementation 'io.quarkus:quarkus-junit5'\n"
"    testImplementation 'io.rest-assured:rest-assured'\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:216
#, no-wrap
msgid ""
"group = '...' // set your group\n"
"version = '1.0.0-SNAPSHOT'\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:221
#: upstream/_versions/main/guides/kotlin.adoc:289
#, no-wrap
msgid ""
"java {\n"
"    sourceCompatibility = JavaVersion.VERSION_11\n"
"    targetCompatibility = JavaVersion.VERSION_11\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:227
#: upstream/_versions/main/guides/kotlin.adoc:295
#, no-wrap
msgid ""
"allOpen { // <2>\n"
"    annotation(\"javax.ws.rs.Path\")\n"
"    annotation(\"javax.enterprise.context.ApplicationScoped\")\n"
"    annotation(\"io.quarkus.test.junit.QuarkusTest\")\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:232
#, no-wrap
msgid ""
"compileKotlin {\n"
"    kotlinOptions.jvmTarget = JavaVersion.VERSION_11\n"
"    kotlinOptions.javaParameters = true\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:236
#, no-wrap
msgid ""
"compileTestKotlin {\n"
"    kotlinOptions.jvmTarget = JavaVersion.VERSION_11\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:239
#: upstream/_versions/main/guides/kotlin.adoc:304
msgid "The Kotlin plugin version needs to be specified."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:240
#: upstream/_versions/main/guides/kotlin.adoc:305
msgid "The all-open configuration required, as per Maven guide above"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:242
msgid "or, if you use the Gradle Kotlin DSL:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:250
#, no-wrap
msgid ""
"plugins {\n"
"    kotlin(\"jvm\") version \"{kotlin-version}\" // <1>\n"
"    kotlin(\"plugin.allopen\") version \"{kotlin-version}\"\n"
"    id(\"io.quarkus\")\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:259
#, no-wrap
msgid ""
"val quarkusPlatformGroupId: String by project\n"
"val quarkusPlatformArtifactId: String by project\n"
"val quarkusPlatformVersion: String by project\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:262
#, no-wrap
msgid ""
"group = \"...\"\n"
"version = \"1.0.0-SNAPSHOT\"\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:271
#, no-wrap
msgid ""
"dependencies {\n"
"    implementation(kotlin(\"stdlib-jdk8\"))\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:273
#, no-wrap
msgid "    implementation(enforcedPlatform(\"${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}\"))\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:277
#, no-wrap
msgid ""
"    implementation(\"io.quarkus:quarkus-kotlin\")\n"
"    implementation(\"io.quarkus:quarkus-resteasy-reactive\")\n"
"    implementation(\"io.quarkus:quarkus-resteasy-reactive-jackson\")\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:281
#, no-wrap
msgid ""
"    testImplementation(\"io.quarkus:quarkus-junit5\")\n"
"    testImplementation(\"io.rest-assured:rest-assured\")\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:284
#, no-wrap
msgid ""
"group = '...' // set your group\n"
"version = \"1.0.0-SNAPSHOT\"\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:300
#, no-wrap
msgid ""
"tasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile> {\n"
"    kotlinOptions.jvmTarget = JavaVersion.VERSION_11.toString()\n"
"    kotlinOptions.javaParameters = true\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/kotlin.adoc:308
#, no-wrap
msgid "Live reload"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:312
msgid "Quarkus provides support for live reloading changes made to source code. This support is also available to Kotlin, meaning that developers can update their Kotlin source code and immediately see their changes reflected."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:314
msgid "To see this feature in action, first execute:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:318
msgid "When executing an HTTP GET request against `http://localhost:8080/hello`, you see a JSON message with the value `hello` as its `message` field."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:320
msgid "Now using your favorite editor or IDE, update `ReactiveGreetingResource.kt` and change the `hello` method to the following:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:324
#, no-wrap
msgid "fun hello() = Greeting(\"hi\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:327
msgid "When you now execute an HTTP GET request against `http://localhost:8080/hello`, you should see a JSON message with the value `hi` as its `message` field."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:329
msgid "One thing to note is that the live reload feature is not available when making changes to both Java and Kotlin source that have dependencies on each other. We hope to alleviate this limitation in the future."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/kotlin.adoc:330
#, no-wrap
msgid "Packaging the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:333
msgid "As usual, the application can be packaged using:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:337
msgid "and executed with `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:339
msgid "You can also build the native executable using:"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/kotlin.adoc:343
#, no-wrap
msgid "Kotlin and Jackson"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:347
msgid "If the `com.fasterxml.jackson.module:jackson-module-kotlin` dependency and the `quarkus-jackson` extension (or one of the `quarkus-resteasy-jackson` or `quarkus-resteasy-reactive-jackson` extensions) have been added to the project, then Quarkus automatically registers the `KotlinModule` to the `ObjectMapper` bean (see xref:rest-json.adoc#jackson[this] guide for more details)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:349
msgid "When using Kotlin data classes with `native-image` you may experience serialization errors that do not occur with the `JVM` version, despite the Kotlin Jackson Module being registered. This is especially so if you have a more complex JSON hierarchy, where an issue on a lower node causes a serialization failure. The error message displayed is a catch-all and typically displays an issue with the root object, which may not necessarily be the case."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:353
#, no-wrap
msgid "com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot construct instance of `Address` (no Creators, like default construct, exist): cannot deserialize from Object value (no delegate- or property-based Creator)\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:356
msgid "To ensure full-compability with `native-image`, it is recommended to apply the Jackson `@field:JsonProperty(\"fieldName\")` annotation, and set a nullable default, as illustrated below. You can automate the generation of Kotlin data classes for your sample JSON using Intellij plugins (such as JSON to Kotlin Class), and easily enable the Jackson annotation and select nullable parameters as part of the auto-code generation."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:360
#, no-wrap
msgid "import com.fasterxml.jackson.annotation.JsonProperty\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:365
#, no-wrap
msgid ""
"data class Response(\n"
"\t@field:JsonProperty(\"chart\")\n"
"\tval chart: ChartData? = null\n"
")\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:369
#, no-wrap
msgid ""
"data class ChartData(\n"
"\t@field:JsonProperty(\"result\")\n"
"\tval result: List<ResultItem?>? = null,\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:373
#, no-wrap
msgid ""
"\t@field:JsonProperty(\"error\")\n"
"\tval error: Any? = null\n"
")\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:377
#, no-wrap
msgid ""
"data class ResultItem(\n"
"\t@field:JsonProperty(\"meta\")\n"
"\tval meta: Meta? = null,\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:380
#, no-wrap
msgid ""
"\t@field:JsonProperty(\"indicators\")\n"
"\tval indicators: IndicatorItems? = null,\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:384
#, no-wrap
msgid ""
"\t@field:JsonProperty(\"timestamp\")\n"
"\tval timestamp: List<Int?>? = null\n"
")\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:386
#: upstream/_versions/main/guides/kotlin.adoc:398
#, no-wrap
msgid "...\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/kotlin.adoc:388
#, no-wrap
msgid "Kotlin and the Kubernetes Client"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:391
msgid "When working with the `quarkus-kubernetes` extension and have Kotlin classes bound to CustomResource definitions (like you do for building operators), you need to be aware that the underlying Fabric8 Kubernetes Client uses its own static Jackson `ObjectMapper` s, which can be configured as follows with the `KotlinModule`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:396
#, no-wrap
msgid ""
"import io.fabric8.kubernetes.client.utils.Serialization\n"
"import com.fasterxml.jackson.module.kotlin.KotlinModule\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:401
#, no-wrap
msgid ""
"Serialization.jsonMapper().registerModule(KotlinModule())\n"
"Serialization.yamlMapper().registerModule(KotlinModule())\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:404
msgid "_Please test this carefully on compilation to native images and fallback to Java-compatible Jackson bindings if you experience problems._"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/kotlin.adoc:405
#, no-wrap
msgid "Coroutines support"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/kotlin.adoc:407
#, no-wrap
msgid "Extensions"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:410
msgid "The following extensions provide support for Kotlin Coroutines by allowing the use of Kotlin's `suspend` keyword on method signatures."
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/kotlin.adoc:412
#, no-wrap
msgid "Extension"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/kotlin.adoc:414
#, no-wrap
msgid "Comments"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/kotlin.adoc:415
#, no-wrap
msgid "`quarkus-resteasy-reactive`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/kotlin.adoc:417
#, no-wrap
msgid "Support is provided for JAX-RS Resource Methods"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/kotlin.adoc:418
#, no-wrap
msgid "`quarkus-rest-client-reactive`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/kotlin.adoc:420
#, no-wrap
msgid "Support is provided for REST Client interface methods"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/kotlin.adoc:421
#, no-wrap
msgid "`quarkus-smallrye-reactive-messaging`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/kotlin.adoc:423
#, no-wrap
msgid "Support is provided for Reactive messaging methods"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/kotlin.adoc:424
#, no-wrap
msgid "`quarkus-scheduler`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/kotlin.adoc:426
#, no-wrap
msgid "Support is provided for scheduler methods"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/kotlin.adoc:427
#, no-wrap
msgid "`quarkus-smallrye-fault-tolerance`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/kotlin.adoc:429
#, no-wrap
msgid "Support is provided for the declarative annotation-based API"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/kotlin.adoc:431
#, no-wrap
msgid "Kotlin coroutines and Mutiny"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:435
msgid "Kotlin coroutines provide an imperative programming model that actually gets executed in an asynchronous, reactive manner.  To simplify the interoperability between Mutiny and Kotlin there is the module `io.smallrye.reactive:mutiny-kotlin`, described link:https://smallrye.io/smallrye-mutiny/guides/kotlin[here]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/kotlin.adoc:436
#, no-wrap
msgid "CDI @Inject with Kotlin"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:440
msgid "Kotlin reflection annotation processing differs from Java.  You may experience an error when using CDI @Inject such as: \"kotlin.UninitializedPropertyAccessException: lateinit property xxx has not been initialized\""
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:442
msgid "In the example below, this can be easily solved by adapting the annotation, adding @field: Default, to handle the lack of a @Target on the Kotlin reflection annotation definition."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:448
#, no-wrap
msgid ""
"import javax.inject.Inject\n"
"import javax.enterprise.inject.Default\n"
"import javax.enterprise.context.ApplicationScoped\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:458
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class GreetingService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:462
#, no-wrap
msgid ""
"    fun greeting(name: String): String {\n"
"        return \"hello $name\"\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:467
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"class ReactiveGreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:471
#, no-wrap
msgid ""
"    @Inject\n"
"    @field: Default // <1> \n"
"    lateinit var service: GreetingService\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:478
#: upstream/_versions/main/guides/kotlin.adoc:512
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"/hello/{name}\")\n"
"    fun greeting(name: String): String {\n"
"        return service.greeting(name)\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:482
msgid "Kotlin requires a @field: xxx qualifier as it has no @Target on the annotation definition. Add @field: xxx in this example. @Default is used as the qualifier, explicitly specifying the use of the default bean."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/kotlin.adoc:484
msgid "Alternatively, prefer the use of constructor injection which works without modification of the Java examples, increases testability and complies best to a Kotlin programming style."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:488
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:500
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class GreetingService {\n"
"    fun greeting(name: String): String {\n"
"        return \"hello $name\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/kotlin.adoc:505
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"class ReactiveGreetingResource(\n"
"    private val service: GreetingService\n"
") {\n"
msgstr ""
