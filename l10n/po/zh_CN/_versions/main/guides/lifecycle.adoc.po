# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-12 02:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/main/guides/lifecycle.adoc
#, no-wrap
msgid "Application Initialization and Termination"
msgstr "应用程序的初始化和终止"

#: _versions/main/guides/lifecycle.adoc
msgid ""
"You often need to execute custom actions when the application starts and clean up everything when the application stops.\n"
"This guide explains how to:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/lifecycle.adoc
msgid "Write a Quarkus application with a main method"
msgstr ""

#. type: Plain text
#: _versions/main/guides/lifecycle.adoc
msgid "Write command mode applications that run a task and then terminate"
msgstr ""

#. type: Plain text
#: _versions/main/guides/lifecycle.adoc
msgid "Be notified when the application starts"
msgstr ""

#. type: Plain text
#: _versions/main/guides/lifecycle.adoc
msgid "Be notified when the application stops"
msgstr ""

#. type: Title ==
#: _versions/main/guides/lifecycle.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: _versions/main/guides/lifecycle.adoc
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#: _versions/main/guides/lifecycle.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#. type: Plain text
#: _versions/main/guides/lifecycle.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: _versions/main/guides/lifecycle.adoc
msgid "The solution is located in the `lifecycle-quickstart` link:{quickstarts-tree-url}/lifecycle-quickstart[directory]."
msgstr ""

#. type: Title ==
#: _versions/main/guides/lifecycle.adoc
#, no-wrap
msgid "Creating the Maven project"
msgstr "创建Maven项目"

#. type: Plain text
#: _versions/main/guides/lifecycle.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#. type: Plain text
#: _versions/main/guides/lifecycle.adoc
msgid "It generates:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/lifecycle.adoc
msgid "the Maven structure"
msgstr "Maven的结构"

#. type: Plain text
#: _versions/main/guides/lifecycle.adoc
msgid "example `Dockerfile` files for both `native` and `jvm` modes"
msgstr ""

#. type: Plain text
#: _versions/main/guides/lifecycle.adoc
msgid "the application configuration file"
msgstr ""

#. type: Title ==
#: _versions/main/guides/lifecycle.adoc
#, no-wrap
msgid "The main method"
msgstr ""

#: _versions/main/guides/lifecycle.adoc
msgid ""
"By default, Quarkus will automatically generate a main method, that will bootstrap Quarkus and then just wait for\n"
"shutdown to be initiated. Let's provide our own main method:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/lifecycle.adoc
msgid "This annotation tells Quarkus to use this as the main method, unless it is overridden in the config"
msgstr ""

#. type: Plain text
#: _versions/main/guides/lifecycle.adoc
msgid "This launches Quarkus"
msgstr ""

#: _versions/main/guides/lifecycle.adoc
msgid ""
"This main class will bootstrap Quarkus and run it until it stops. This is no different to the automatically\n"
"generated main class, but has the advantage that you can just launch it directly from the IDE without needing\n"
"to run a Maven or Gradle command."
msgstr ""

#: _versions/main/guides/lifecycle.adoc
msgid ""
"It is not recommenced to do any business logic in this main method, as Quarkus has not been set up yet,\n"
"and Quarkus may run in a different ClassLoader. If you want to perform logic on startup use an `io.quarkus.runtime.QuarkusApplication`\n"
"as described below."
msgstr ""

#: _versions/main/guides/lifecycle.adoc
msgid ""
"If we want to actually perform business logic on startup (or write applications that complete a task and then exit)\n"
"we need to supply a `io.quarkus.runtime.QuarkusApplication` class to the run method. After Quarkus has been started\n"
"the `run` method of the application will be invoked. When this method returns the Quarkus application will exit."
msgstr ""

#: _versions/main/guides/lifecycle.adoc
msgid ""
"If you want to perform logic on startup you should call `Quarkus.waitForExit()`, this method will wait until a shutdown\n"
"is requested (either from an external signal like when you press `Ctrl+C` or because a thread has called `Quarkus.asyncExit()`)."
msgstr ""

#. type: Plain text
#: _versions/main/guides/lifecycle.adoc
msgid "An example of what this looks like is below:"
msgstr ""

#. type: Title ===
#: _versions/main/guides/lifecycle.adoc
#, no-wrap
msgid "Injecting the command line arguments"
msgstr ""

#. type: Plain text
#: _versions/main/guides/lifecycle.adoc
msgid "It is possible to inject the arguments that were passed in on the command line:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/lifecycle.adoc
msgid "Command line arguments can be passed to the application through the `-D` flag with the property `quarkus.args`:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/lifecycle.adoc
msgid "For Quarkus dev mode:"
msgstr ""

#: _versions/main/guides/lifecycle.adoc
msgid "CLI"
msgstr ""

#: _versions/main/guides/lifecycle.adoc
msgid "Maven"
msgstr "Maven"

#: _versions/main/guides/lifecycle.adoc
msgid "Gradle"
msgstr "Gradle"

#. type: Plain text
#: _versions/main/guides/lifecycle.adoc
msgid "For a runner jar: `java -Dquarkus.args=<cmd-args> -jar target/quarkus-app/quarkus-run.jar`"
msgstr ""

#. type: Plain text
#: _versions/main/guides/lifecycle.adoc
msgid "For a native executable: `./target/lifecycle-quickstart-1.0-SNAPSHOT-runner -Dquarkus.args=<cmd-args>`"
msgstr ""

#. type: Title ==
#: _versions/main/guides/lifecycle.adoc
#, no-wrap
msgid "Listening for startup and shutdown events"
msgstr ""

#: _versions/main/guides/lifecycle.adoc
msgid ""
"Create a new class named `AppLifecycleBean` (or pick another name) in the `org.acme.lifecycle` package, and copy the\n"
"following content:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/lifecycle.adoc
msgid "Method called when the application is starting"
msgstr ""

#. type: Plain text
#: _versions/main/guides/lifecycle.adoc
msgid "Method called when the application is terminating"
msgstr ""

#. type: Plain text
#: _versions/main/guides/lifecycle.adoc
msgid "The events are also called in _dev mode_ between each redeployment."
msgstr ""

#. type: Plain text
#: _versions/main/guides/lifecycle.adoc
msgid "The methods can access injected beans. Check the link:{quickstarts-blob-url}/lifecycle-quickstart/src/main/java/org/acme/lifecycle/AppLifecycleBean.java[AppLifecycleBean.java] class for details."
msgstr ""

#. type: Title ===
#: _versions/main/guides/lifecycle.adoc
#, no-wrap
msgid "What is the difference from `@Initialized(ApplicationScoped.class)` and `@Destroyed(ApplicationScoped.class)`"
msgstr ""

#: _versions/main/guides/lifecycle.adoc
msgid ""
"In the JVM mode, there is no real difference, except that `StartupEvent` is always fired *after* `@Initialized(ApplicationScoped.class)` and `ShutdownEvent` is fired *before* `@Destroyed(ApplicationScoped.class)`.\n"
"For a native executable build, however, `@Initialized(ApplicationScoped.class)` is fired as *part of the native build process*, whereas `StartupEvent` is fired when the native image is executed.\n"
"See xref:writing-extensions.adoc#bootstrap-three-phases[Three Phases of Bootstrap and Quarkus Philosophy] for more details."
msgstr ""

#. type: Plain text
#: _versions/main/guides/lifecycle.adoc
msgid "In CDI applications, an event with qualifier `@Initialized(ApplicationScoped.class)` is fired when the application context is initialized. See https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#application_context[the spec, window=\"_blank\"] for more info."
msgstr ""

#. type: Title ===
#: _versions/main/guides/lifecycle.adoc
#, no-wrap
msgid "Using `@Startup` to initialize a CDI bean at application startup"
msgstr ""

#. type: Plain text
#: _versions/main/guides/lifecycle.adoc
msgid "A bean represented by a class, producer method or field annotated with `@Startup` is initialized at application startup:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/lifecycle.adoc
msgid "For each bean annotated with `@Startup` a synthetic observer of `StartupEvent` is generated. The default priority is used."
msgstr ""

#. type: Plain text
#: _versions/main/guides/lifecycle.adoc
msgid "The bean constructor is called when the application starts and the resulting contextual instance is stored in the application context."
msgstr ""

#. type: Plain text
#: _versions/main/guides/lifecycle.adoc
msgid "`@Dependent` beans are destroyed immediately afterwards to follow the behavior of observers declared on `@Dependent` beans."
msgstr ""

#. type: Plain text
#: _versions/main/guides/lifecycle.adoc
msgid "If a class is annotated with `@Startup` but with no scope annotation then `@ApplicationScoped` is added automatically."
msgstr ""

#. type: Plain text
#: _versions/main/guides/lifecycle.adoc
msgid "The `@Startup` annotation can be also declared on a non-static non-producer no-args method:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/lifecycle.adoc
msgid "The bean is created and the `init()` method is invoked upon the contextual instance when the application starts."
msgstr ""

#. type: Title ===
#: _versions/main/guides/lifecycle.adoc
#, no-wrap
msgid "Using `@Shutdown` to execute a business method of a CDI bean during application shutdown"
msgstr ""

#: _versions/main/guides/lifecycle.adoc
msgid ""
"The `@io.quarkus.runtime.Shutdown` annotation is used to mark a business method of a CDI bean that should be executed during application shutdown.\n"
"The annotated method must be non-private and non-static and declare no arguments.\n"
"The behavior is similar to a declaration of a `ShutdownEvent` observer.\n"
"The following examples are functionally equivalent."
msgstr ""

#. type: Title ==
#: _versions/main/guides/lifecycle.adoc
#, no-wrap
msgid "Package and run the application"
msgstr "打包并运行该应用程序"

#. type: Plain text
#: _versions/main/guides/lifecycle.adoc
msgid "Run the application with:"
msgstr "使用以下命令运行该应用程序:"

#: _versions/main/guides/lifecycle.adoc
msgid ""
"The logged message is printed.\n"
"When the application is stopped, the second log message is printed."
msgstr ""

#. type: Plain text
#: _versions/main/guides/lifecycle.adoc
msgid "As usual, the application can be packaged using:"
msgstr "像往常一样，该应用程序能够使用以下方式进行打包:"

#. type: Plain text
#: _versions/main/guides/lifecycle.adoc
msgid "and executed using `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr ""

#. type: Plain text
#: _versions/main/guides/lifecycle.adoc
msgid "You can also generate the native executable using:"
msgstr ""

#. type: Title ==
#: _versions/main/guides/lifecycle.adoc
#, no-wrap
msgid "Launch Modes"
msgstr ""

#: _versions/main/guides/lifecycle.adoc
msgid ""
"Quarkus has 3 different launch modes, `NORMAL` (i.e. production), `DEVELOPMENT` and `TEST`. If you are running `quarkus:dev`\n"
"then the mode will be `DEVELOPMENT`, if you are running a JUnit test it will be `TEST`, otherwise it will be `NORMAL`."
msgstr ""

#: _versions/main/guides/lifecycle.adoc
msgid ""
"Your application can get the launch mode by injecting the `io.quarkus.runtime.LaunchMode` enum into a CDI bean,\n"
"or by invoking the static method `io.quarkus.runtime.LaunchMode.current()`."
msgstr ""

#. type: Title ==
#: _versions/main/guides/lifecycle.adoc
#, no-wrap
msgid "Graceful Shutdown"
msgstr ""

#: _versions/main/guides/lifecycle.adoc
msgid ""
"Quarkus includes support for graceful shutdown, this allows Quarkus to wait for running requests to finish, up\n"
"till a set timeout. By default, this is disabled, however you can configure this by setting the `quarkus.shutdown.timeout`\n"
"config property. When this is set shutdown will not happen until all running requests have completed, or until\n"
"this timeout has elapsed. This config property is a duration, and can be set using the standard\n"
"`java.time.Duration` format, if only a number is specified it is interpreted as seconds."
msgstr ""

#: _versions/main/guides/lifecycle.adoc
msgid ""
"Extensions that accept requests need to add support for this on an individual basis. At the moment only the\n"
"HTTP extension supports this, so shutdown may still happen when messaging requests are active."
msgstr ""
