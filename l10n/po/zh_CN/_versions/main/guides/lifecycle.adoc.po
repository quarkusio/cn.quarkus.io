# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-06-17 02:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/lifecycle.adoc:6
#, no-wrap
msgid "Application Initialization and Termination"
msgstr "应用程序的初始化和终止"

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:12
msgid "You often need to execute custom actions when the application starts and clean up everything when the application stops.  This guide explains how to:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:14
msgid "Write a Quarkus application with a main method"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:15
msgid "Write command mode applications that run a task and then terminate"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:16
msgid "Be notified when the application starts"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:17
msgid "Be notified when the application stops"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/lifecycle.adoc:18
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: upstream/_versions/main/guides/lifecycle.adoc:22
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:26
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:28
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:30
msgid "The solution is located in the `lifecycle-quickstart` {quickstarts-tree-url}/lifecycle-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/lifecycle.adoc:31
#, no-wrap
msgid "Creating the Maven project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:34
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:39
msgid "It generates:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:41
msgid "the Maven structure"
msgstr "Maven的结构"

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:42
msgid "example `Dockerfile` files for both `native` and `jvm` modes"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:43
msgid "the application configuration file"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/lifecycle.adoc:44
#, no-wrap
msgid "The main method"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:48
msgid "By default, Quarkus will automatically generate a main method, that will bootstrap Quarkus and then just wait for shutdown to be initiated. Let's provide our own main method:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/lifecycle.adoc:51
#: upstream/_versions/main/guides/lifecycle.adoc:87
#, no-wrap
msgid "package com.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/lifecycle.adoc:54
#, no-wrap
msgid ""
"import io.quarkus.runtime.annotations.QuarkusMain;\n"
"import io.quarkus.runtime.Quarkus;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/lifecycle.adoc:57
#, no-wrap
msgid ""
"@QuarkusMain  <1>\n"
"public class Main {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/lifecycle.adoc:63
#, no-wrap
msgid ""
"    public static void main(String ... args) {\n"
"        System.out.println(\"Running main method\");\n"
"        Quarkus.run(args); <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:65
msgid "This annotation tells Quarkus to use this as the main method, unless it is overridden in the config"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:66
msgid "This launches Quarkus"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:70
msgid "This main class will bootstrap Quarkus and run it until it stops. This is no different to the automatically generated main class, but has the advantage that you can just launch it directly from the IDE without needing to run a Maven or Gradle command."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:74
msgid "It is not recommenced to do any business logic in this main method, as Quarkus has not been set up yet, and Quarkus may run in a different ClassLoader. If you want to perform logic on startup use an `io.quarkus.runtime.QuarkusApplication` as described below."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:78
msgid "If we want to actually perform business logic on startup (or write applications that complete a task and then exit)  we need to supply a `io.quarkus.runtime.QuarkusApplication` class to the run method. After Quarkus has been started the `run` method of the application will be invoked. When this method returns the Quarkus application will exit."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:81
msgid "If you want to perform logic on startup you should call `Quarkus.waitForExit()`, this method will wait until a shutdown is requested (either from an external signal like when you press `Ctrl+C` or because a thread has called `Quarkus.asyncExit()`)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:83
msgid "An example of what this looks like is below:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/lifecycle.adoc:91
#, no-wrap
msgid ""
"import io.quarkus.runtime.Quarkus;\n"
"import io.quarkus.runtime.QuarkusApplication;\n"
"import io.quarkus.runtime.annotations.QuarkusMain;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/lifecycle.adoc:97
#, no-wrap
msgid ""
"@QuarkusMain\n"
"public class Main {\n"
"    public static void main(String... args) {\n"
"        Quarkus.run(MyApp.class, args);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/lifecycle.adoc:99
#, no-wrap
msgid "    public static class MyApp implements QuarkusApplication {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/lifecycle.adoc:108
#, no-wrap
msgid ""
"        @Override\n"
"        public int run(String... args) throws Exception {\n"
"            System.out.println(\"Do startup logic here\");\n"
"            Quarkus.waitForExit();\n"
"            return 0;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/lifecycle.adoc:110
#, no-wrap
msgid "Injecting the command line arguments"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:113
msgid "It is possible to inject the arguments that were passed in on the command line:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/lifecycle.adoc:119
#, no-wrap
msgid ""
"@Inject\n"
"@CommandLineArguments\n"
"String[] args;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:122
msgid "Command line arguments can be passed to the application through the `-D` flag with the property `quarkus.args`:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:128
msgid "For Quarkus dev mode:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:132
msgid "For a runner jar: `java -Dquarkus.args=<cmd-args> -jar target/quarkus-app/quarkus-run.jar`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:133
msgid "For a native executable: `./target/lifecycle-quickstart-1.0-SNAPSHOT-runner -Dquarkus.args=<cmd-args>`"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/lifecycle.adoc:137
#, no-wrap
msgid "Listening for startup and shutdown events"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:141
msgid "Create a new class named `AppLifecycleBean` (or pick another name) in the `org.acme.lifecycle` package, and copy the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/lifecycle.adoc:145
#: upstream/_versions/main/guides/lifecycle.adoc:191
#, no-wrap
msgid "package org.acme.lifecycle;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/lifecycle.adoc:148
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.enterprise.event.Observes;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/lifecycle.adoc:152
#, no-wrap
msgid ""
"import io.quarkus.runtime.ShutdownEvent;\n"
"import io.quarkus.runtime.StartupEvent;\n"
"import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/lifecycle.adoc:155
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class AppLifecycleBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/lifecycle.adoc:157
#, no-wrap
msgid "    private static final Logger LOGGER = Logger.getLogger(\"ListenerBean\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/lifecycle.adoc:161
#, no-wrap
msgid ""
"    void onStart(@Observes StartupEvent ev) {               // <1>\n"
"        LOGGER.info(\"The application is starting...\");\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/lifecycle.adoc:165
#, no-wrap
msgid ""
"    void onStop(@Observes ShutdownEvent ev) {               // <2>\n"
"        LOGGER.info(\"The application is stopping...\");\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/lifecycle.adoc:167
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:169
msgid "Method called when the application is starting"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:170
msgid "Method called when the application is terminating"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:172
msgid "The events are also called in _dev mode_ between each redeployment."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:174
msgid "The methods can access injected beans. Check the {quickstarts-blob-url}/lifecycle-quickstart/src/main/java/org/acme/lifecycle/AppLifecycleBean.java[AppLifecycleBean.java] class for details."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/lifecycle.adoc:175
#, no-wrap
msgid "What is the difference from `@Initialized(ApplicationScoped.class)` and `@Destroyed(ApplicationScoped.class)`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:180
msgid "In the JVM mode, there is no real difference, except that `StartupEvent` is always fired *after* `@Initialized(ApplicationScoped.class)` and `ShutdownEvent` is fired *before* `@Destroyed(ApplicationScoped.class)`.  For a native executable build, however, `@Initialized(ApplicationScoped.class)` is fired as *part of the native build process*, whereas `StartupEvent` is fired when the native image is executed.  See xref:writing-extensions.adoc#bootstrap-three-phases[Three Phases of Bootstrap and Quarkus Philosophy] for more details."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:182
msgid "In CDI applications, an event with qualifier `@Initialized(ApplicationScoped.class)` is fired when the application context is initialized. See https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#application_context[the spec, window=\"_blank\"] for more info."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/lifecycle.adoc:184
#, no-wrap
msgid "Using `@Startup` to initialize a CDI bean at application startup"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:187
msgid "A bean represented by a class, producer method or field annotated with `@Startup` is initialized at application startup:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/lifecycle.adoc:193
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/lifecycle.adoc:197
#, no-wrap
msgid ""
"@Startup // <1> \n"
"@ApplicationScoped\n"
"public class EagerAppBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/lifecycle.adoc:199
#, no-wrap
msgid "   private final String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/lifecycle.adoc:204
#, no-wrap
msgid ""
"   EagerAppBean(NameGenerator generator) { // <2>\n"
"     this.name = generator.createName();\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:206
msgid "For each bean annotated with `@Startup` a synthetic observer of `StartupEvent` is generated. The default priority is used."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:207
msgid "The bean constructor is called when the application starts and the resulting contextual instance is stored in the application context."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:209
msgid "`@Dependent` beans are destroyed immediately afterwards to follow the behavior of observers declared on `@Dependent` beans."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:211
msgid "If a class is annotated with `@Startup` but with no scope annotation then `@ApplicationScoped` is added automatically."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/lifecycle.adoc:212
#, no-wrap
msgid "Package and run the application"
msgstr "打包并运行该应用程序"

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:215
msgid "Run the application with:"
msgstr "使用以下命令运行该应用程序:"

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:220
msgid "The logged message is printed.  When the application is stopped, the second log message is printed."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:222
msgid "As usual, the application can be packaged using:"
msgstr "像往常一样，该应用程序能够使用以下方式进行打包:"

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:226
msgid "and executed using `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:228
msgid "You can also generate the native executable using:"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/lifecycle.adoc:231
#, no-wrap
msgid "Launch Modes"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:235
msgid "Quarkus has 3 different launch modes, `NORMAL` (i.e. production), `DEVELOPMENT` and `TEST`. If you are running `quarkus:dev` then the mode will be `DEVELOPMENT`, if you are running a JUnit test it will be `TEST`, otherwise it will be `NORMAL`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:238
msgid "Your application can get the launch mode by injecting the `io.quarkus.runtime.LaunchMode` enum into a CDI bean, or by invoking the static method `io.quarkus.runtime.LaunchMode.current()`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/lifecycle.adoc:239
#, no-wrap
msgid "Graceful Shutdown"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:246
msgid "Quarkus includes support for graceful shutdown, this allows Quarkus to wait for running requests to finish, up till a set timeout. By default, this is disabled, however you can configure this by setting the `quarkus.shutdown.timeout` config property. When this is set shutdown will not happen until all running requests have completed, or until this timeout has elapsed. This config property is a duration, and can be set using the standard `java.time.Duration` format, if only a number is specified it is interpreted as seconds."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/lifecycle.adoc:248
msgid "Extensions that accept requests need to add support for this on an individual basis. At the moment only the HTTP extension supports this, so shutdown may still happen when messaging requests are active."
msgstr ""
