# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/scheduler-reference.adoc:6
#, no-wrap
msgid "Scheduler Reference Guide"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:20
msgid "Modern applications often need to run specific tasks periodically.  There are two scheduler extensions in Quarkus.  The `quarkus-scheduler` extension brings the API and a lightweight in-memory scheduler implementation.  The `quarkus-quartz` extension implements the API from the `quarkus-scheduler` extension and contains a scheduler implementation based on the Quartz library.  You will only need `quarkus-quartz` for more advanced scheduling use cases, such as persistent tasks, clustering and programmatic scheduling of jobs."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:22
msgid "If you add the `quarkus-quartz` dependency to your project the lightweight scheduler implementation from the `quarkus-scheduler` extension is automatically disabled."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/scheduler-reference.adoc:23
#, no-wrap
msgid "Scheduled Methods"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:29
msgid "A method annotated with `@io.quarkus.scheduler.Scheduled` is automatically scheduled for invocation.  A scheduled method must not be abstract or private.  It may be either static or non-static.  A scheduled method can be annotated with interceptor bindings, such as `@javax.transaction.Transactional` and `@org.eclipse.microprofile.metrics.annotation.Counted`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:31
msgid "If there is a bean class that has no scope and declares at least one non-static method annotated with `@Scheduled` then `@Singleton` is used."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:33
msgid "Furthermore, the annotated method must return `void` and either declare no parameters or one parameter of type `io.quarkus.scheduler.ScheduledExecution`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:35
msgid "The annotation is repeatable so a single method could be scheduled multiple times."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/scheduler-reference.adoc:39
msgid "Subclasses never inherit the metadata of a `@Scheduled` method declared on a superclass. In the following example, the `everySecond()` method is only invoked upon the instance of `Jobs`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/scheduler-reference.adoc:42
#: upstream/_versions/main/guides/scheduler-reference.adoc:237
#: upstream/_versions/main/guides/scheduler-reference.adoc:264
#: upstream/_versions/main/guides/scheduler-reference.adoc:290
#, no-wrap
msgid "class Jobs {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/scheduler-reference.adoc:48
#, no-wrap
msgid ""
"   @Scheduled(every = \"1s\")\n"
"   void everySecond() {\n"
"     // ..do something \n"
"   }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/scheduler-reference.adoc:52
#, no-wrap
msgid ""
"@Singleton\n"
"class MyJobs extends Jobs {\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/scheduler-reference.adoc:56
msgid "A CDI event of type `io.quarkus.scheduler.SuccessfulExecution` is fired synchronously and asynchronously when an execution of a scheduled method is successful. A CDI event of type `io.quarkus.scheduler.FailedExecution` is fired synchronously and asynchronously when an execution of a scheduled method throws an exception."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/scheduler-reference.adoc:57
#, no-wrap
msgid "Triggers"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/scheduler-reference.adoc:62
msgid "A trigger is defined either by the `@Scheduled#cron()` or by the `@Scheduled#every()` attribute.  If both are specified, the cron expression takes precedence.  If none is specified, the build fails with an `IllegalStateException`."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/scheduler-reference.adoc:63
#, no-wrap
msgid "CRON"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/scheduler-reference.adoc:67
msgid "A CRON trigger is defined by a cron-like expression.  For example `\"0 15 10 * * ?\"` fires at 10:15am every day."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/scheduler-reference.adoc:68
#, no-wrap
msgid "CRON Trigger Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/scheduler-reference.adoc:73
#, no-wrap
msgid ""
"@Scheduled(cron = \"0 15 10 * * ?\")\n"
"void fireAt10AmEveryDay() { }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:78
msgid "The syntax used in CRON expressions is controlled by the `quarkus.scheduler.cron-type` property.  The values can be `cron4j`, `quartz`, `unix` and `spring`.  `quartz` is used by default."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:81
msgid "The `cron` attribute supports <<config-reference#property-expressions,Property Expressions>> including default values and nested Property Expressions. (Note that \"{property.path}\" style expressions are still supported but don't offer the full functionality of Property Expressions.)"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/scheduler-reference.adoc:83
#, no-wrap
msgid "CRON Config Property Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/scheduler-reference.adoc:88
#, no-wrap
msgid ""
"@Scheduled(cron = \"${myMethod.cron.expr}\")\n"
"void myMethod() { }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:91
msgid "If you wish to disable a specific scheduled method, you can set its cron expression to `\"off\"` or `\"disabled\"`."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/scheduler-reference.adoc:92
#, no-wrap
msgid "application.properties"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/scheduler-reference.adoc:96
#, no-wrap
msgid "myMethod.cron.expr=disabled\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:99
msgid "Property Expressions allow you to define a default value that is used, if the property is not configured."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/scheduler-reference.adoc:100
#, no-wrap
msgid "CRON Config Property Example with default `0 0 15 ? * MON *`"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/scheduler-reference.adoc:105
#, no-wrap
msgid ""
"@Scheduled(cron = \"${myMethod.cron.expr:0 0 15 ? * MON *}\")\n"
"void myMethod() { }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:108
msgid "If the property `myMethod.cron.expr` is undefined or `null`, the default value (`0 0 15 ? * MON *`) will be used."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/scheduler-reference.adoc:109
#, no-wrap
msgid "Intervals"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:115
msgid "An interval trigger defines a period between invocations.  The period expression is based on the ISO-8601 duration format `PnDTnHnMn.nS` and the value of `@Scheduled#every()` is parsed with `java.time.Duration#parse(CharSequence)`.  However, if an expression starts with a digit then the `PT` prefix is added automatically.  So for example, `15m` can be used instead of `PT15M` and is parsed as \"15 minutes\"."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/scheduler-reference.adoc:116
#, no-wrap
msgid "Interval Trigger Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/scheduler-reference.adoc:121
#, no-wrap
msgid ""
"@Scheduled(every = \"15m\")\n"
"void every15Mins() { }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:125
msgid "The `every` attribute supports <<config-reference#property-expressions,Property Expressions>> including default values and nested Property Expressions. (Note that `\"{property.path}\"` style expressions are still supported but don't offer the full functionality of Property Expressions.)"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/scheduler-reference.adoc:126
#: upstream/_versions/main/guides/scheduler-reference.adoc:160
#, no-wrap
msgid "Interval Config Property Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/scheduler-reference.adoc:131
#, no-wrap
msgid ""
"@Scheduled(every = \"${myMethod.every.expr}\")\n"
"void myMethod() { }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:135
msgid "Intervals can be disabled by setting their value to `\"off\"` or `\"disabled\"`.  So for example a Property Expression with the default value `\"off\"` can be used to disable the trigger if its Config Property has not been set."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/scheduler-reference.adoc:136
#, no-wrap
msgid "Interval Config Property Example with a Default Value"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/scheduler-reference.adoc:141
#, no-wrap
msgid ""
"@Scheduled(every = \"${myMethod.every.expr:off}\")\n"
"void myMethod() { }\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/scheduler-reference.adoc:144
#, no-wrap
msgid "Identity"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:149
msgid "By default, a unique identifier is generated for each scheduled method.  This identifier is used in log messages, during debugging and as a parameter of some `io.quarkus.scheduler.Scheduler` methods.  Therefore, a possibility to specify an explicit identifier may come in handy."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/scheduler-reference.adoc:150
#, no-wrap
msgid "Identity Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/scheduler-reference.adoc:155
#, no-wrap
msgid ""
"@Scheduled(identity = \"myScheduledMethod\")\n"
"void myMethod() { }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:159
msgid "The `identity` attribute supports <<config-reference#property-expressions,Property Expressions>> including default values and nested Property Expressions. (Note that `\"{property.path}\"` style expressions are still supported but don't offer the full functionality of Property Expressions.)"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/scheduler-reference.adoc:165
#, no-wrap
msgid ""
"@Scheduled(identity = \"${myMethod.identity.expr}\")\n"
"void myMethod() { }\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/scheduler-reference.adoc:167
#, no-wrap
msgid "Delayed Execution"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:170
msgid "`@Scheduled` provides two ways to delay the time a trigger should start firing at."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:172
msgid "`@Scheduled#delay()` and `@Scheduled#delayUnit()` form the initial delay together."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/scheduler-reference.adoc:177
#, no-wrap
msgid ""
"@Scheduled(every = \"2s\", delay = 2, delayUnit = TimeUnit.HOUR) <1>\n"
"void everyTwoSeconds() { }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:179
msgid "The trigger fires for the first time two hours after the application start."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:181
msgid "The final value is always rounded to full second."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:186
msgid "`@Scheduled#delayed()` is a text alternative to the properties above.  The period expression is based on the ISO-8601 duration format `PnDTnHnMn.nS` and the value is parsed with `java.time.Duration#parse(CharSequence)`.  However, if an expression starts with a digit, the `PT` prefix is added automatically.  So for example, `15s` can be used instead of `PT15S` and is parsed as \"15 seconds\"."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/scheduler-reference.adoc:191
#, no-wrap
msgid ""
"@Scheduled(every = \"2s\", delayed = \"2h\")\n"
"void everyTwoSeconds() { }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:194
msgid "If `@Scheduled#delay()` is set to a value greater than zero the value of `@Scheduled#delayed()` is ignored."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:198
msgid "The main advantage over `@Scheduled#delay()` is that the value is configurable.  The `delay` attribute supports <<config-reference#property-expressions,Property Expressions>> including default values and nested Property Expressions. (Note that `\"{property.path}\"` style expressions are still supported but don't offer the full functionality of Property Expressions.)"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/scheduler-reference.adoc:204
#, no-wrap
msgid ""
"@Scheduled(every = \"2s\", delayed = \"${myMethod.delay.expr}\") <1>\n"
"void everyTwoSeconds() { }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:206
msgid "The config property `myMethod.delay.expr` is used to set the delay."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/scheduler-reference.adoc:208
#, no-wrap
msgid "Concurrent Execution"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:212
msgid "By default, a scheduled method can be executed concurrently.  Nevertheless, it is possible to specify the strategy to handle concurrent executions via `@Scheduled#concurrentExecution()`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/scheduler-reference.adoc:216
#, no-wrap
msgid "import static io.quarkus.scheduler.Scheduled.ConcurrentExecution.SKIP;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/scheduler-reference.adoc:221
#, no-wrap
msgid ""
"@Scheduled(every = \"1s\", concurrentExecution = SKIP) <1>\n"
"void nonConcurrent() {\n"
"  // we can be sure that this method is never executed concurrently\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:223
msgid "Concurrent executions are skipped."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:225
#: upstream/_versions/main/guides/scheduler-reference.adoc:280
msgid "A CDI event of type `io.quarkus.scheduler.SkippedExecution` is fired when an execution of a scheduled method is skipped."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:227
msgid "Note that only executions within the same application instance are considered. This feature is not intended to work across the cluster."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/scheduler-reference.adoc:229
#, no-wrap
msgid "Conditional Execution"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:233
msgid "You can define the logic to skip any execution of a scheduled method via `@Scheduled#skipExecutionIf()`.  The specified bean class must implement `io.quarkus.scheduler.Scheduled.SkipPredicate` and the execution is skipped if the result of the `test()` method is `true`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/scheduler-reference.adoc:243
#, no-wrap
msgid ""
"   @Scheduled(every = \"1s\", skipExecutionIf = MyPredicate.class) <1>\n"
"   void everySecond() {\n"
"     // do something every second...\n"
"   }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/scheduler-reference.adoc:246
#, no-wrap
msgid ""
"@Singleton <2>\n"
"class MyPredicate implements SkipPredicate {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/scheduler-reference.adoc:249
#: upstream/_versions/main/guides/scheduler-reference.adoc:267
#, no-wrap
msgid ""
"   @Inject\n"
"   MyService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/scheduler-reference.adoc:254
#, no-wrap
msgid ""
"   boolean test(ScheduledExecution execution) {\n"
"       return !service.isStarted(); <3>\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:256
msgid "A bean instance of `MyPredicate.class` is used to evaluate whether an execution should be skipped. There must be exactly one bean that has the specified class in its set of bean types, otherwise the build fails."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:257
msgid "The scope of the bean must be active during execution."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:258
msgid "`Jobs.everySecond()` is skipped until `MyService.isStarted()` returns `true`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:260
msgid "Note that this is an equivalent of the following code:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/scheduler-reference.adoc:275
#, no-wrap
msgid ""
"   @Scheduled(every = \"1s\")\n"
"   void everySecond() {\n"
"     if (service.isStarted()) {\n"
"        // do something every second...\n"
"     }\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:278
msgid "The main idea is to keep the the logic to skip the execution outside the scheduled business methods so that it can be reused and refactored easily."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/scheduler-reference.adoc:281
#, no-wrap
msgid "Non-blocking Methods"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:286
msgid "By default, a scheduled method is executed on the main executor for blocking tasks.  As a result, a technology that is designed to run on a Vert.x event loop (such as Hibernate Reactive) cannot be used inside the method body.  For this reason, a scheduled method that returns `java.util.concurrent.CompletionStage<Void>` or `io.smallrye.mutiny.Uni<Void>`, or is annotated with `@io.smallrye.common.annotation.NonBlocking` is executed on the Vert.x event loop instead."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/scheduler-reference.adoc:296
#, no-wrap
msgid ""
"   @Scheduled(every = \"1s\")\n"
"   Uni<Void> everySecond() { <1>\n"
"     // ...do something async\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:298
msgid "The return type `Uni<Void>` instructs the scheduler to execute the method on the Vert.x event loop."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/scheduler-reference.adoc:299
#, no-wrap
msgid "Scheduler"
msgstr "调度器"

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:302
msgid "Quarkus provides a built-in bean of type `io.quarkus.scheduler.Scheduler` that can be injected and used to pause/resume the scheduler and individual scheduled methods identified by a specific `Scheduled#identity()`."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/scheduler-reference.adoc:303
#, no-wrap
msgid "Scheduler Injection Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/scheduler-reference.adoc:307
#, no-wrap
msgid "import io.quarkus.scheduler.Scheduler;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/scheduler-reference.adoc:309
#, no-wrap
msgid "class MyService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/scheduler-reference.adoc:312
#, no-wrap
msgid ""
"   @Inject\n"
"   Scheduler scheduler;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/scheduler-reference.adoc:328
#, no-wrap
msgid ""
"   void ping() {\n"
"      scheduler.pause(); <1>\n"
"      scheduler.pause(\"myIdentity\"); <2>\n"
"      if (scheduler.isRunning()) {\n"
"         throw new IllegalStateException(\"This should never happen!\");\n"
"      }\n"
"      scheduler.resume(\"myIdentity\"); <3>\n"
"      scheduler.resume(); <4>\n"
"      scheduler.getScheduledJobs(); <5>\n"
"      Trigger jobTrigger = scheduler.getScheduledJob(\"myIdentity\"); <6>\n"
"      if (jobTrigger != null && jobTrigger.isOverdue()){ <7>\n"
"        // the job is late to the party.\n"
"      }\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:330
msgid "Pause all triggers."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:331
msgid "Pause a specific scheduled method by its identity"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:332
msgid "Resume a specific scheduled method by its identity"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:333
msgid "Resume the scheduler."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:334
msgid "List all jobs in the scheduler."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:335
msgid "Get Trigger metadata for a specific scheduled job by its identity."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:336
msgid "You can configure the grace period for isOverdue() with quarkus.scheduler.overdue-grace-period"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/scheduler-reference.adoc:337
#, no-wrap
msgid "Programmatic Scheduling"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:340
msgid "If you need to schedule a job programmatically you'll need to add the xref:quartz.adoc[Quartz extension] and use the Quartz API directly."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/scheduler-reference.adoc:341
#, no-wrap
msgid "Programmatic Scheduling with Quartz API"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/scheduler-reference.adoc:345
#, no-wrap
msgid "import org.quartz.Scheduler;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/scheduler-reference.adoc:347
#, no-wrap
msgid "class MyJobs {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/scheduler-reference.adoc:362
#, no-wrap
msgid ""
"    void onStart(@Observes StartupEvent event, Scheduler quartz) throws SchedulerException {\n"
"        JobDetail job = JobBuilder.newJob(SomeJob.class)\n"
"                .withIdentity(\"myJob\", \"myGroup\")\n"
"                .build();\n"
"        Trigger trigger = TriggerBuilder.newTrigger()\n"
"                .withIdentity(\"myTrigger\", \"myGroup\")\n"
"                .startNow()\n"
"                .withSchedule(SimpleScheduleBuilder.simpleSchedule()\n"
"                        .withIntervalInSeconds(1)\n"
"                        .repeatForever())\n"
"                .build();\n"
"        quartz.scheduleJob(job, trigger);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:365
msgid "By default, the scheduler is not started unless a `@Scheduled` business method is found. You may need to force the start of the scheduler for \"pure\" programmatic scheduling. See also <<quartz.adoc#quartz-configuration-reference,Quartz Configuration Reference>>."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/scheduler-reference.adoc:366
#, no-wrap
msgid "Scheduled Methods and Testing"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:372
msgid "It is often desirable to disable the scheduler when running the tests.  The scheduler can be disabled through the runtime config property `quarkus.scheduler.enabled`.  If set to `false` the scheduler is not started even though the application contains scheduled methods.  You can even disable the scheduler for particular <<getting-started-testing#testing_different_profiles,Test Profiles>>."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/scheduler-reference.adoc:373
#, no-wrap
msgid "Metrics"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:376
msgid "Some basic metrics are published out of the box if `quarkus.scheduler.metrics.enabled` is set to `true` and a metrics extension is present."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:378
msgid "If the xref:micrometer.adoc[Micrometer extension] is present, then a `@io.micrometer.core.annotation.Timed` interceptor binding is added to all `@Scheduled` methods automatically (unless it's already present) and a `io.micrometer.core.instrument.Timer` with name `scheduled.methods` and a `io.micrometer.core.instrument.LongTaskTimer` with name `scheduled.methods.running` are registered. The fully qualified name of the declaring class and the name of a `@Scheduled` method are used as tags."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/scheduler-reference.adoc:380
msgid "If the xref:smallrye-metrics.adoc[SmallRye Metrics extension] is present, then a `@org.eclipse.microprofile.metrics.annotation.Timed` interceptor binding is added to all `@Scheduled` methods automatically (unless it's already present) and a `org.eclipse.microprofile.metrics.Timer` is created for each `@Scheduled` method. The name consists of the fully qualified name of the declaring class and the name of a `@Scheduled` method. The timer has a tag `scheduled=true`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/scheduler-reference.adoc:381
#, no-wrap
msgid "Configuration Reference"
msgstr ""
