msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Testing components"
msgstr "测试组件"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid ""
"The component model of Quarkus is built on top xref:cdi-reference.adoc[CDI].\n"
"Therefore, Quarkus provides `QuarkusComponentTestExtension` - a JUnit extension that makes it easy to test the components/CDI beans and mock their dependencies.\n"
"Unlike `@QuarkusTest` this extension does not start a full Quarkus application but merely the CDI container and the configuration service.\n"
"You can find more details in the <<lifecycle>> section."
msgstr "Quarkus 的组件模型建立在 xref:cdi-reference.adoc[CDI] 的基础之上。因此，Quarkus 提供了 `QuarkusComponentTestExtension` - 一个 JUnit 扩展，可以轻松测试组件/CDI Bean 并模拟其依赖关系。与 `@QuarkusTest` 不同的是，该扩展并不启动整个 Quarkus 应用程序，而只是启动 CDI 容器和配置服务。更多详情，请参阅 <<lifecycle>> 部分。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "This extension is available in the `quarkus-junit5-component` dependency."
msgstr "该扩展可从 `quarkus-junit5-component` 依赖项中获得。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Basic example"
msgstr "基本示例"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Let's have a component `Foo` - a CDI bean with two injection points."
msgstr "让我们创建一个组件 `Foo` - 一个有两个注入点的 CDI Bean。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "`Foo` component"
msgstr "`Foo` 组成部分"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "`Foo` is an `@ApplicationScoped` CDI bean."
msgstr "`Foo` 是 CDI bean。 `@ApplicationScoped` "

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "`Foo` depends on `Charlie` which declares a method `ping()`."
msgstr "`Foo` 取决于 ，而 声明了一个方法 。 `Charlie` `ping()`"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "`Foo` depends on the config property `bar`. `@Inject` is not needed for this injection point because it also declares a CDI qualifier - this is a Quarkus-specific feature."
msgstr "`Foo` 取决于配置属性 。该注入点不需要 ，因为它也声明了一个 CDI 限定符--这是 Quarkus 特有的功能。 `bar` `@Inject` "

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Then a component test could look like:"
msgstr "那么组件测试可以是这样的"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Simple component test"
msgstr "简单组件测试"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "The `QuarkusComponentTest` annotation registers the JUnit extension."
msgstr "`QuarkusComponentTest` 注解注册了 JUnit 扩展。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Sets a configuration property for the test."
msgstr "设置测试的配置属性。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "The test injects the component under the test. The types of all fields annotated with `@Inject` are considered the component types under test. You can also specify additional component classes via `@QuarkusComponentTest#value()`. Furthermore, the static nested classes declared on the test class are components too."
msgstr "测试注入被测组件。所有注释为 `@Inject` 的字段类型都被视为测试中的组件类型。您还可以通过 `@QuarkusComponentTest#value()` 指定其他组件类。此外，在测试类上声明的静态嵌套类也是组件。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "The test also injects a mock for `Charlie`. `Charlie` is an _unsatisfied_ dependency for which a synthetic `@Singleton` bean is registered automatically. The injected reference is an \"unconfigured\" Mockito mock."
msgstr "该测试还为 `Charlie` 注入了一个 mock。 `Charlie` 是一个 _未满足的_ 依赖关系，为此自动注册了一个合成的 `@Singleton` Bean。注入的引用是一个 \"未配置 \"的 Mockito mock。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "We can leverage the Mockito API in a test method to configure the behavior."
msgstr "我们可以在测试方法中利用 Mockito API 来配置行为。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "`QuarkusComponentTestExtension` also resolves parameters of test methods and injects matching beans."
msgstr "`QuarkusComponentTestExtension` 还能解析测试方法的参数并注入匹配的 Bean。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "So the code snippet above can be rewritten as:"
msgstr "因此，上面的代码片段可以改写为"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Simple component test with test method parameters"
msgstr "带有测试方法参数的简单组件测试"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Parameters annotated with `@io.quarkus.test.component.SkipInject` are never resolved by this extension."
msgstr "使用 `@io.quarkus.test.component.SkipInject` 注释的参数永远不会被该扩展解决。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Furthermore, if you need the full control over the `QuarkusComponentTestExtension` configuration then you can use the `@RegisterExtension` annotation and configure the extension programmatically."
msgstr "此外，如果需要完全控制 `QuarkusComponentTestExtension` 的配置，则可以使用 `@RegisterExtension` 注释，以编程方式配置扩展。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "The original test could be rewritten like:"
msgstr "原来的测试可以改写成这样"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Simple component test with programmatic configuration"
msgstr "使用程序化配置的简单组件测试"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "The `QuarkusComponentTestExtension` is configured in a static field of the test class."
msgstr "`QuarkusComponentTestExtension` 在测试类的静态字段中配置。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Lifecycle"
msgstr "生命周期"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid ""
"So what exactly does the `QuarkusComponentTest` do?\n"
"It starts the CDI container and registers a dedicated xref:config-reference.adoc[configuration object]."
msgstr "那么 `QuarkusComponentTest` 到底要做什么呢？它启动 CDI 容器并注册一个专用 xref:config-reference.adoc[配置对象] 。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid ""
"If the test instance lifecycle is `Lifecycle#PER_METHOD` (default) then the container is started during the `before each` test phase and stopped during the `after each` test phase.\n"
"However, if  the test instance lifecycle is `Lifecycle#PER_CLASS` then the container is started during the `before all` test phase and stopped during the `after all` test phase."
msgstr "如果测试实例生命周期为 `Lifecycle#PER_METHOD` （默认），则容器在 `before each` 测试阶段启动，在 `after each` 测试阶段停止。但是，如果测试实例生命周期为 `Lifecycle#PER_CLASS` ，则容器在 `before all` 测试阶段启动，在 `after all` 测试阶段停止。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid ""
"The fields annotated with `@Inject` and `@InjectMock` are injected after a test instance is created.\n"
"The parameters of a test method for which a matching bean exists are resolved (unless annotated with `@io.quarkus.test.component.SkipInject` or `@org.mockito.Mock`) when a test method is executed.\n"
"Finally, the CDI request context is activated and terminated per each test method."
msgstr "注释为 `@Inject` 和 `@InjectMock` 的字段会在创建测试实例后注入。在执行测试方法时，会解析存在匹配 bean 的测试方法参数（除非注释为 `@io.quarkus.test.component.SkipInject` 或 `@org.mockito.Mock` ）。最后，根据每个测试方法激活和终止 CDI 请求上下文。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Injection"
msgstr "注射"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid ""
"Fields of the test class that are annotated with `@jakarta.inject.Inject` and `@io.quarkus.test.InjectMock` are injected after a test instance is created.\n"
"Furthermore, the parameters of a test method for which a matching bean exists are resolved unless annotated with `@io.quarkus.test.component.SkipInject` or `@org.mockito.Mock`.\n"
"There are also some JUnit built-in parameters, such as `RepetitionInfo` and `TestInfo`, which are skipped automatically."
msgstr "在创建测试实例后，会注入注释为 `@jakarta.inject.Inject` 和 `@io.quarkus.test.InjectMock` 的测试类字段。此外，除非注释为 `@io.quarkus.test.component.SkipInject` 或 `@org.mockito.Mock` ，否则会解析存在匹配 bean 的测试方法参数。还有一些 JUnit 内置参数，如 `RepetitionInfo` 和 `TestInfo` ，会被自动跳过。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid ""
"An `@Inject` injection point receives the contextual instance of a CDI bean - the real component under test.\n"
"An `@InjectMock` injection point receives an \"unconfigured\" Mockito mock that was created for an <<auto_mocking,unsatisfied dependency automatically>>."
msgstr "`@Inject` 注入点接收 CDI Bean 的上下文实例--即真正的被测组件。 `@InjectMock` 注入点接收 \"未配置 \"的 Mockito 模拟，该模拟是为 xref:auto_mocking[未满足的依赖关系自动] 创建的。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Dependent beans injected into the fields and test method arguments are correctly destroyed before a test instance is destroyed and after the test method completes, respectively."
msgstr "注入字段和测试方法参数的依赖豆分别在测试实例销毁前和测试方法完成后正确销毁。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Arguments of a `@ParameterizedTest` method that are provided by an `ArgumentsProvider`, for example with `@org.junit.jupiter.params.provider.ValueArgumentsProvider`, must be annotated with `@SkipInject`."
msgstr "`@ParameterizedTest` 方法的参数如果由 `ArgumentsProvider` 提供，例如由 `@org.junit.jupiter.params.provider.ValueArgumentsProvider` 提供，则必须用 `@SkipInject` 加以注释。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Tested components"
msgstr "经过测试的组件"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "The initial set of tested components is derived from the test class:"
msgstr "测试组件的初始集合源自测试类："

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "The types of all fields annotated with `@jakarta.inject.Inject` are considered the component types."
msgstr "所有注释为 `@jakarta.inject.Inject` 的字段类型都被视为组件类型。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "The types of test methods parameters that are not annotated with `@InjectMock`, `@SkipInject`, or `@org.mockito.Mock` are also considered the component types."
msgstr "未注明 `@InjectMock` 、 `@SkipInject` 或 `@org.mockito.Mock` 的测试方法参数类型也被视为组件类型。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "If `@QuarkusComponentTest#addNestedClassesAsComponents()` is set to `true` (default) then all static nested classes declared on the test class are components too."
msgstr "如果 `@QuarkusComponentTest#addNestedClassesAsComponents()` 设置为 `true` （默认），那么在测试类上声明的所有静态嵌套类也都是组件。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "`@Inject Instance<T>` and `@Inject @All List<T>` injection points are handled specifically. The actual type argument is registered as a component. However, if the type argument is an interface the implementations _are not registered_ automatically."
msgstr "`@Inject Instance<T>` 和 注入点进行了专门处理。实际类型参数被注册为组件。但是，如果类型参数是接口，则 `@Inject @All List<T>` _不会_ 自动 _注册_ 实现。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Additional component classes can be set using `@QuarkusComponentTest#value()` or `QuarkusComponentTestExtensionBuilder#addComponentClasses()`."
msgstr "可使用 `@QuarkusComponentTest#value()` 或 `QuarkusComponentTestExtensionBuilder#addComponentClasses()` 设置附加组件类。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Auto Mocking Unsatisfied Dependencies"
msgstr "自动模拟未满足的依赖关系"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid ""
"Unlike in regular CDI environments the test does not fail if a component injects an unsatisfied dependency.\n"
"Instead, a synthetic bean is registered automatically for each combination of required type and qualifiers of an injection point that resolves to an unsatisfied dependency.\n"
"The bean has the `@Singleton` scope so it's shared across all injection points with the same required type and qualifiers.\n"
"The injected reference is an _unconfigured_ Mockito mock.\n"
"You can inject the mock in your test using the `io.quarkus.test.InjectMock` annotation and leverage the Mockito API to configure the behavior."
msgstr "与常规 CDI 环境不同，如果组件注入了未满足的依赖关系，测试不会失败。相反，如果注入点的要求类型和限定条件的组合解析为未满足的依赖关系，则会自动注册一个合成 Bean。该 Bean 的作用域为 `@Singleton` ，因此它可在具有相同所需类型和限定符的所有注入点中共享。注入的引用是一个 _未配置_ 的 Mockito mock。您可以使用 `io.quarkus.test.InjectMock` 注解在测试中注入该 mock，并利用 Mockito API 配置行为。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid ""
"`@InjectMock` is not intended as a universal replacement for functionality provided by the Mockito JUnit extension.\n"
"It's meant to be used for configuration of unsatisfied dependencies of CDI beans.\n"
"You can use the `QuarkusComponentTest` and `MockitoExtension` side by side."
msgstr "`@InjectMock` 并不能完全替代 Mockito JUnit 扩展所提供的功能。它旨在用于配置 CDI Bean 的未满足依赖关系。您可以同时使用 和 。 `QuarkusComponentTest` `MockitoExtension` "

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Custom Mocks For Unsatisfied Dependencies"
msgstr "为未满足的依赖关系定制 Mock"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid ""
"Sometimes you need the full control over the bean attributes and maybe even configure the default mock behavior.\n"
"You can use the mock configurator API via the `QuarkusComponentTestExtensionBuilder#mock()` method."
msgstr "有时，您需要完全控制 bean 的属性，甚至需要配置默认的 mock 行为。您可以通过 `QuarkusComponentTestExtensionBuilder#mock()` 方法使用 mock 配置器 API。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Nested Tests"
msgstr "嵌套测试"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid ""
"JUnit 5 https://junit.org/junit5/docs/current/user-guide/#writing-tests-nested[@Nested tests] may help to structure more complex test scenarios.\n"
"However, only basic use cases are tested with `@QuarkusComponentTest`."
msgstr "JUnit 5 link:https://junit.org/junit5/docs/current/user-guide/#writing-tests-nested[@嵌套测试] 有助于构建更复杂的测试场景。不过， `@QuarkusComponentTest` ，只能测试基本用例。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Nested test"
msgstr "嵌套测试"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "The test injects the component under the test. `Foo` injects `Charlie`."
msgstr "`Foo` 注入 `Charlie` 。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "The test also injects a mock for `Charlie`. The injected reference is an \"unconfigured\" Mockito mock."
msgstr "测试还为 `Charlie` 注入了一个 mock。注入的引用是一个 \"未配置 \"的 Mockito 模拟。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Configuration"
msgstr "配置"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid ""
"You can set the configuration properties for a test with the `@io.quarkus.test.component.TestConfigProperty` annotation or with the `QuarkusComponentTestExtensionBuilder#configProperty(String, String)` method.\n"
"If you only need to use the default values for missing config properties, then the `@QuarkusComponentTest#useDefaultConfigProperties()` or `QuarkusComponentTestExtensionBuilder#useDefaultConfigProperties()` might come in useful."
msgstr "您可以使用 `@io.quarkus.test.component.TestConfigProperty` 注解或 `QuarkusComponentTestExtensionBuilder#configProperty(String, String)` 方法为测试设置配置属性。如果您只需要使用缺失配置属性的默认值，那么 `@QuarkusComponentTest#useDefaultConfigProperties()` 或 `QuarkusComponentTestExtensionBuilder#useDefaultConfigProperties()` 可能会有用。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid ""
"It is also possible to set configuration properties for a test method with the `@io.quarkus.test.component.TestConfigProperty` annotation.\n"
"However, if the test instance lifecycle is `Lifecycle#_PER_CLASS` this annotation can only be used on the test class and is ignored on test methods."
msgstr "还可以使用 `@io.quarkus.test.component.TestConfigProperty` 注解为测试方法设置配置属性。不过，如果测试实例生命周期为 `Lifecycle#_PER_CLASS` ，则该注解只能用于测试类，测试方法将被忽略。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "`@io.quarkus.test.component.TestConfigProperty` declared on a `@Nested` test class is always ignored."
msgstr "`@io.quarkus.test.component.TestConfigProperty` 在 测试类上声明的\"...... \"总是被忽略。 `@Nested` "

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "CDI beans are also automatically registered for all injected https://smallrye.io/smallrye-config/Main/config/mappings/[Config Mappings]. The mappings are populated with the test configuration properties."
msgstr "CDI Bean 也会为所有注入的 link:https://smallrye.io/smallrye-config/Main/config/mappings/[配置映] 射自动注册。映射中会填充测试配置属性。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Mocking CDI Interceptors"
msgstr "模拟 CDI 拦截器"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid ""
"If a tested component class declares an interceptor binding then you might need to mock the interception too.\n"
"There are two ways to accomplish this task.\n"
"First, you can define an interceptor class as a static nested class of the test class."
msgstr "如果测试的组件类声明了拦截器绑定，那么您可能也需要模拟拦截。完成这项任务有两种方法。首先，可以将拦截器类定义为测试类的静态嵌套类。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "`@SimpleBinding` is an interceptor binding."
msgstr "`@SimpleBinding` 是一种拦截器绑定。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "The interceptor class is automatically considered a tested component."
msgstr "拦截器类自动被视为已测试组件。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Static nested classes declared on a test class that is annotated with `@QuarkusComponentTest` are excluded from bean discovery when running a `@QuarkusTest` in order to prevent unintentional CDI conflicts."
msgstr "在运行 `@QuarkusTest` 时，在注释为 `@QuarkusComponentTest` 的测试类上声明的静态嵌套类将被排除在 Bean 发现之外，以防止意外的 CDI 冲突。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "The second option is to declare an interceptor method directly in the test class; the method is then invoked in the relevant interception phase."
msgstr "第二种方法是直接在测试类中声明拦截方法，然后在相关的拦截阶段调用该方法。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "The interceptor bindings of the resulting interceptor are specified by annotating the method with the interceptor binding types."
msgstr "通过用拦截器绑定类型对方法进行注解，可以指定所生成拦截器的拦截器绑定。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Defines the interception type."
msgstr "定义拦截类型。"
