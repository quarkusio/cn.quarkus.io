# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/transaction.adoc:6
#, no-wrap
msgid "Using Transactions in Quarkus"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:14
msgid "Quarkus comes with a Transaction Manager and uses it to coordinate and expose transactions to your applications.  Each extension dealing with persistence will integrate with it for you.  And you will explicitly interact with transactions via CDI.  This guide will walk you through all that."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/transaction.adoc:15
#, no-wrap
msgid "Setting it up"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:19
msgid "You don't need to worry about setting it up most of the time as extensions needing it will simply add it as a dependency.  Hibernate ORM for example will include the transaction manager and set it up properly."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:22
msgid "You might need to add it as a dependency explicitly if you are using transactions directly without Hibernate ORM for example.  Add the following to your build file:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/transaction.adoc:24
#, no-wrap
msgid "pom.xml"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/transaction.adoc:30
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-narayana-jta</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/transaction.adoc:33
#, no-wrap
msgid "build.gradle"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/transaction.adoc:36
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-narayana-jta\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/transaction.adoc:38
#, no-wrap
msgid "Starting and stopping transactions: defining your boundaries"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:42
msgid "You can define your transaction boundaries either declarativly with `@Transactional` or programmatically with `QuarkusTransaction`. You can also use the JTA `UserTransaction` API directly, however this is less user friendly than `QuarkusTransaction`."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/transaction.adoc:43
#, no-wrap
msgid "Declarative approach"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:46
msgid "The easiest way to define your transaction boundaries is to use the `@Transactional` annotation on your entry method (`javax.transaction.Transactional`)."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/transaction.adoc:51
#: upstream/_versions/main/guides/transaction.adoc:99
#: upstream/_versions/main/guides/transaction.adoc:253
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class SantaClausService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/transaction.adoc:54
#, no-wrap
msgid ""
"    @Inject ChildDAO childDAO;\n"
"    @Inject SantaClausDAO santaDAO;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/transaction.adoc:67
#, no-wrap
msgid ""
"    @Transactional // <1>\n"
"    public void getAGiftFromSanta(Child child, String giftDescription) {\n"
"        // some transaction work\n"
"        Gift gift = childDAO.addToGiftList(child, giftDescription);\n"
"        if (gift == null) {\n"
"            throw new OMGGiftNotRecognizedException(); // <2>\n"
"        }\n"
"        else {\n"
"            santaDAO.addToSantaTodoList(gift);\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:70
msgid "This annotation defines your transaction boundaries and will wrap this call within a transaction."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:71
msgid "A `RuntimeException` crossing the transaction boundaries will rollback the transaction."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:74
msgid "`@Transactional` can be used to control transaction boundaries on any CDI bean at the method level or at the class level to ensure every method is transactional.  That includes REST endpoints."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:76
msgid "You can control whether and how the transaction is started with parameters on `@Transactional`:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:78
msgid "`@Transactional(REQUIRED)` (default): starts a transaction if none was started, stays with the existing one otherwise."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:79
msgid "`@Transactional(REQUIRES_NEW)`: starts a transaction if none was started ; if an existing one was started, suspends it and starts a new one for the boundary of that method."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:80
msgid "`@Transactional(MANDATORY)`: fails if no transaction was started ; works within the existing transaction otherwise."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:81
msgid "`@Transactional(SUPPORTS)`: if a transaction was started, joins it ; otherwise works with no transaction."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:82
msgid "`@Transactional(NOT_SUPPORTED)`: if a transaction was started, suspends it and works with no transaction for the boundary of the method ; otherwise works with no transaction."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:83
msgid "`@Transactional(NEVER)`: if a transaction was started, raises an exception ; otherwise works with no transaction."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:87
msgid "`REQUIRED` or `NOT_SUPPORTED` are probably the most useful ones.  This is how you decide whether a method is to be running within or outside a transaction.  Make sure to check the JavaDoc for the precise semantic."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:91
msgid "The transaction context is propagated to all calls nested in the `@Transactional` method as you would expect (in this example `childDAO.addToGiftList()` and `santaDAO.addToSantaTodoList()`).  The transaction will commit unless a runtime exception crosses the method boundary.  You can override whether an exception forces the rollback or not by using `@Transactional(dontRollbackOn=SomeException.class)` (or `rollbackOn`)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:94
msgid "You can also programmatically ask for a transaction to be marked for rollback.  Inject a `TransactionManager` for this."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/transaction.adoc:103
#, no-wrap
msgid ""
"    @Inject TransactionManager tm; // <1>\n"
"    @Inject ChildDAO childDAO;\n"
"    @Inject SantaClausDAO santaDAO;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/transaction.adoc:116
#, no-wrap
msgid ""
"    @Transactional\n"
"    public void getAGiftFromSanta(Child child, String giftDescription) {\n"
"        // some transaction work\n"
"        Gift gift = childDAO.addToGiftList(child, giftDescription);\n"
"        if (gift == null) {\n"
"            tm.setRollbackOnly(); // <2>\n"
"        }\n"
"        else {\n"
"            santaDAO.addToSantaTodoList(gift);\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:119
msgid "Inject the `TransactionManager` to be able to activate `setRollbackOnly` semantic."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:120
msgid "Programmatically decide to set the transaction for rollback."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/transaction.adoc:122
#, no-wrap
msgid "Transaction Configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:125
msgid "Advanced configuration of the transaction is possible with the use of the `@TransactionConfiguration` annotation that is set in addition to the standard `@Transactional` annotation on your entry method or at the class level."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:127
msgid "The `@TransactionConfiguration` annotation allows to set a timeout property, in seconds, that applies to transactions created within the annotated method."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:130
msgid "This annotation may only be placed on the top level method delineating the transaction.  Annotated nested methods once a transaction has started will throw an exception."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:133
msgid "If defined on a class, it is equivalent to defining it on all the methods of the class marked with `@Transactional`.  The configuration defined on a method takes precedence over the configuration defined on a class."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/transaction.adoc:134
#, no-wrap
msgid "Reactive extensions"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:137
msgid "If your `@Transactional`-annotated method returns a reactive value, such as:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:139
msgid "`CompletionStage` (from the JDK)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:140
msgid "`Publisher` (from Reactive-Streams)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:141
msgid "Any type which can be converted to one of the two previous types using Reactive Type Converters"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:146
msgid "then the behaviour is a bit different, because the transaction will not be terminated until the returned reactive value is terminated. In effect, the returned reactive value will be listened to and if it terminates exceptionally the transaction will be marked for rollback, and will be committed or rolled-back only at termination of the reactive value."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:149
msgid "This allows your reactive methods to keep on working on the transaction asynchronously until their work is really done, and not just until the reactive method returns."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:152
msgid "If you need to propagate your transaction context across your reactive pipeline, please see the xref:context-propagation.adoc[Context Propagation guide]."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/transaction.adoc:153
#, no-wrap
msgid "Programmatic Approach"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:158
msgid "You can use static methods on `QuarkusTransaction` to define transaction boundaries. This provides two different options, a functional approach that allows you to run a lambda within the scope of a transaction, or by using explicit `begin`, `commit` and `rollback` methods."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/transaction.adoc:163
#, no-wrap
msgid ""
"import io.quarkus.narayana.jta.QuarkusTransaction;\n"
"import io.quarkus.narayana.jta.RunOptions;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/transaction.adoc:165
#, no-wrap
msgid "public class TransactionExample {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/transaction.adoc:170
#, no-wrap
msgid ""
"    public void beginExample() {\n"
"        QuarkusTransaction.begin();\n"
"        //do work\n"
"        QuarkusTransaction.commit();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/transaction.adoc:176
#, no-wrap
msgid ""
"        QuarkusTransaction.begin(QuarkusTransaction.beginOptions()\n"
"                .timeout(10));\n"
"        //do work\n"
"        QuarkusTransaction.rollback();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/transaction.adoc:181
#, no-wrap
msgid ""
"    public void lambdaExample() {\n"
"        QuarkusTransaction.run(() -> {\n"
"            //do work\n"
"        });\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/transaction.adoc:197
#, no-wrap
msgid ""
"        int result = QuarkusTransaction.call(QuarkusTransaction.runOptions()\n"
"                .timeout(10)\n"
"                .exceptionHandler((throwable) -> {\n"
"                    if (throwable instanceof SomeException) {\n"
"                        return RunOptions.ExceptionResult.COMMIT;\n"
"                    }\n"
"                    return RunOptions.ExceptionResult.ROLLBACK;\n"
"                })\n"
"                .semantic(RunOptions.Semantic.SUSPEND_EXISTING), () -> {\n"
"            //do work\n"
"            return 0;\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:204
msgid "The above example shows a few different ways the API can be used. The first method simply calls begin, does some work and commits it.  This created transaction is tied to the CDI request scope, so if it is still active when the request scope is destroyed then it will be automatically rolled back. This removes the need to explicitly catch exceptions and call `rollback`, and acts as a safety net against inadvertent transaction leaks, however it does mean that this can only be used when the request scope is active. The second example in the method calls begin with a timeout option, and then rolls back the transaction."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:208
msgid "The second example shows the use of lambda scoped transactions, the first just runs a `Runnable` within a transaction, the second, runs `Callable` with some specific options. In particular the `exceptionHandler` method can be used to control if the transaction is rolled back or not on exception, and the `semantic` method controls the behaviour if an existing transaction is already started."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:210
msgid "The following semantics are supported:"
msgstr ""

#. type: Labeled list
#: upstream/_versions/main/guides/transaction.adoc:212
#, no-wrap
msgid "DISALLOW_EXISTING"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:216
msgid "If a transaction is already associated with the current thread a `QuarkusTransactionException` will be thrown, otherwise a new transaction is started, and follows all the normal lifecycle rules."
msgstr ""

#. type: Labeled list
#: upstream/_versions/main/guides/transaction.adoc:217
#, no-wrap
msgid "JOIN_EXISTING"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:226
msgid "If no transaction is active then a new transaction will be started, and committed when the method ends.  If an exception is thrown the exception handler registered by `#exceptionHandler(Function)` will be called to decide if the TX should be committed or rolled back.  If an existing transaction is active then the method is run in the context of the existing transaction. If an exception is thrown the exception handler will be called, however a result of `ExceptionResult#ROLLBACK` will result in the TX marked as rollback only, while a result of `ExceptionResult#COMMIT` will result in no action being taken."
msgstr ""

#. type: Labeled list
#: upstream/_versions/main/guides/transaction.adoc:227
#, no-wrap
msgid "REQUIRE_NEW"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:234
msgid "This is the default semantic.  If an existing transaction is already associated with the current thread then the transaction is suspended, and resumed once the current transaction is complete.  A new transaction is started after the existing transaction is suspended, and follows all the normal lifecycle rules."
msgstr ""

#. type: Labeled list
#: upstream/_versions/main/guides/transaction.adoc:235
#, no-wrap
msgid "SUSPEND_EXISTING"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:242
msgid "If no transaction is active then this semantic is basically a no-op.  If a transaction is active then it is suspended, and resumed after the task is run.  The exception handler will never be consulted when this semantic is in use, specifying both an exception handler and this semantic is considered an error.  This semantic allows for code to easily be run outside the scope of a transaction."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/transaction.adoc:245
#, no-wrap
msgid "Legacy API approach"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:248
msgid "The less easy way is to inject a `UserTransaction` and use the various transaction demarcation methods."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/transaction.adoc:257
#, no-wrap
msgid ""
"    @Inject ChildDAO childDAO;\n"
"    @Inject SantaClausDAO santaDAO;\n"
"    @Inject UserTransaction transaction;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/transaction.adoc:272
#, no-wrap
msgid ""
"    public void getAGiftFromSanta(Child child, String giftDescription) {\n"
"        // some transaction work\n"
"        try {\n"
"            transaction.begin();\n"
"            Gift gift = childDAO.addToGiftList(child, giftDescription);\n"
"            santaDAO.addToSantaTodoList(gift);\n"
"            transaction.commit();\n"
"        }\n"
"        catch(SomeException e) {\n"
"            // do something on Tx failure\n"
"            transaction.rollback();\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/transaction.adoc:277
msgid "You cannot use `UserTransaction` in a method having a transaction started by a `@Transactional` call."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/transaction.adoc:279
#, no-wrap
msgid "Configuring the transaction timeout"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:281
msgid "You can configure the default transaction timeout, the timeout that applies to all transactions managed by the transaction manager, via the property `quarkus.transaction-manager.default-transaction-timeout`, specified as a duration."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:285
msgid "The default value is 60 seconds."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/transaction.adoc:286
#, no-wrap
msgid "Configuring transaction node name identifier"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:290
msgid "Narayana, as the underlying transaction manager, has a concept of a unique node identifier.  This is important if you consider using XA transactions that involve multiple resources."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:296
msgid "The node name identifier plays a crucial part in the identification of a transaction.  The node name identifier is forged into the transaction id when the transaction is created.  Based on the node name identifier, the transaction manager is capable of recognizing the XA transaction counterparts created in database or JMS broker. The identifier makes possible for the transaction manager to roll back the transaction counterparts during recovery."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:299
msgid "The node name identifier needs to be unique per transaction manager deployment.  And the node identifier needs to be stable over the transaction manager restarts."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:301
msgid "The node name identifier may be configured via the property `quarkus.transaction-manager.node-name`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/transaction.adoc:302
#, no-wrap
msgid "Why always having a transaction manager?"
msgstr ""

#. type: Labeled list
#: upstream/_versions/main/guides/transaction.adoc:304
#, no-wrap
msgid "Does it work everywhere I want to?"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:311
msgid "Yep, it works in your Quarkus application, in your IDE, in your tests, because all of these are Quarkus applications.  JTA has some bad press for some people.  I don't know why.  Let's just say that this is not your grandpa's JTA implementation.  What we have is perfectly embeddable and lean."
msgstr ""

#. type: Labeled list
#: upstream/_versions/main/guides/transaction.adoc:312
#, no-wrap
msgid "Does it do 2 Phase Commit and slow down my app?"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:316
msgid "No, this is an old folk tale.  Let's assume it essentially comes for free and let you scale to more complex cases involving several datasources as needed."
msgstr ""

#. type: Labeled list
#: upstream/_versions/main/guides/transaction.adoc:317
#, no-wrap
msgid "I don't need transaction when I do read only operations, it's faster."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:329
msgid "Wrong. + First off, just disable the transaction by marking your transaction boundary with `@Transactional(NOT_SUPPORTED)` (or `NEVER` or `SUPPORTS` depending on the semantic you want). + Second, it's again fairy tale that not using transaction is faster.  The answer is, it depends on your DB and how many SQL SELECTs you are making.  No transaction means the DB does have a single operation transaction context anyways. + Third, when you do several SELECTs, it's better to wrap them in a single transaction because they will all be consistent with one another.  Say your DB represents your car dashboard, you can see the number of kilometers remaining and the fuel gauge level.  By reading it in one transaction, they will be consistent.  If you read one and the other from two different transactions, then they can be inconsistent.  It can be more dramatic if you read data related to rights and access management for example."
msgstr ""

#. type: Labeled list
#: upstream/_versions/main/guides/transaction.adoc:330
#, no-wrap
msgid "Why do you prefer JTA vs Hibernate's transaction management API"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:334
msgid "Managing the transactions manually via `entityManager.getTransaction().begin()` and friends lead to a butt ugly code with tons of try catch finally that people get wrong.  Transactions are also about JMS and other database access, so one API makes more sense."
msgstr ""

#. type: Labeled list
#: upstream/_versions/main/guides/transaction.adoc:335
#, no-wrap
msgid "It's a mess because I don't know if my JPA persistence unit is using `JTA` or `Resource-level` Transaction"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/transaction.adoc:340
msgid "It's not a mess in Quarkus :)  Resource-level was introduced to support JPA in a non managed environment.  But Quarkus is both lean and a managed environment so we can safely always assume we are in JTA mode.  The end result is that the difficulties of running Hibernate ORM + CDI + a transaction manager in Java SE mode are solved by Quarkus."
msgstr ""
