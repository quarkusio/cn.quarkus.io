# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-15 02:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/main/guides/reactive-routes.adoc
#, no-wrap
msgid "Using Reactive Routes"
msgstr "使用响应式路由"

#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid ""
"Reactive routes propose an alternative approach to implement HTTP endpoints where you declare and chain _routes_.\n"
"This approach became very popular in the JavaScript world, with frameworks like Express.Js or Hapi.\n"
"Quarkus also offers the possibility to use reactive routes.\n"
"You can implement REST API with routes only or combine them with Jakarta REST resources and servlets."
msgstr "反应式路由（Reactive routes）是实现 HTTP 端点的另一种方法，在这种方法中，你可以声明并连锁 _路由_ 。这种方法在 JavaScript 领域非常流行，比如 Express.Js 或 Hapi 框架。Quarkus 也提供了使用反应式路由的可能性。你可以仅使用路由实现 REST API，也可以将其与 Jakarta REST 资源和 servlets 结合使用。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "The code presented in this guide is available in this {quickstarts-base-url}[GitHub repository] under the link:{quickstarts-tree-url}/reactive-routes-quickstart[`reactive-routes-quickstart` directory]"
msgstr "本指南中介绍的代码可在此{quickstarts-base-url}[GitHub仓库]下的{quickstarts-tree-url}/reactive-routes-quickstart[ `reactive-routes-quickstart` 目录] 中找到。"

#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid ""
"Reactive Routes were initially introduced to provide a reactive execution model for HTTP APIs on top of the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture].\n"
"With the introduction of xref:resteasy-reactive.adoc[RESTEasy Reactive], you can now implement reactive HTTP APIs and still use Jakarta REST annotations.\n"
"Reactive Routes are still supported, especially if you want a more _route-based_ approach, and something closer to the underlying reactive engine."
msgstr "最初引入 Reactive Routes 是为了在 xref:quarkus-reactive-architecture.adoc[Quarkus Reactive 架构] 之上为 HTTP API 提供反应式执行模型。随着 xref:resteasy-reactive.adoc[RESTEasy Reactive] 的引入，你现在可以实现反应式 HTTP API，并仍然使用 Jakarta REST 注释。反应式路由（Reactive Routes）仍受支持，特别是如果你想要一种更 _基于路由_ 的方法，以及更接近底层反应式引擎的方法。"

#. type: Title ==
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "Quarkus HTTP"
msgstr "Quarkus HTTP"

#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid ""
"Before going further, let's have a look at the HTTP layer of Quarkus.\n"
"Quarkus HTTP support is based on a non-blocking and reactive engine (Eclipse Vert.x and Netty).\n"
"All the HTTP requests your application receive are handled by _event loops_ (I/O Thread) and then are routed towards the code that manages the request.\n"
"Depending on the destination, it can invoke the code managing the request on a worker thread (Servlet, Jax-RS) or use the IO Thread (reactive route).\n"
"Note that because of this, a reactive route must be non-blocking or explicitly declare its blocking nature (which would result by being called on a worker thread)."
msgstr "在进一步了解之前，让我们先看看 Quarkus 的 HTTP 层。Quarkus HTTP 支持基于非阻塞和反应式引擎（Eclipse Vert.x 和 Netty）。应用程序接收到的所有 HTTP 请求都由 _事件循环_ （I/O 线程）处理，然后转发给管理请求的代码。根据目的地的不同，它可以在工作线程（Servlet、Jax-RS）上调用管理请求的代码，也可以使用 IO 线程（反应式路由）。需要注意的是，反应式路由必须是非阻塞路由，或者明确声明其阻塞性质（这将导致在工作线程上调用）。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "image:http-architecture.png[alt=Quarkus HTTP Architecture]"
msgstr "image:http-architecture.png[alt=\"Quarkus HTTP Architecture\"]"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
msgid "See the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture documentation] for further details on this topic."
msgstr "关于这个话题的更多细节，请看 link:quarkus-reactive-architecture.html[Quarkus响应式架构文档] 。"

#. type: Title ==
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "Declaring reactive routes"
msgstr "声明反应式路由"

#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid ""
"The first way to use reactive routes is to use the `@Route` annotation.\n"
"To have access to this annotation, you need to add the `quarkus-reactive-routes` extension by running this command:"
msgstr "使用反应式路由的第一种方法是使用 `@Route` 注释。要访问该注解，需要运行以下命令添加 `quarkus-reactive-routes` 扩展："

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
msgid "This will add the following to your build file:"
msgstr "这会将以下内容添加到你的构建文件中:"

#. type: Block title
#: _versions/main/guides/reactive-routes.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/main/guides/reactive-routes.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "Then in a _bean_, you can use the `@Route` annotation as follows:"
msgstr "然后在一个 _Bean_ 中，你可以使用 `@Route` 注解，如下所示。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "If there is a reactive route found on a class with no scope annotation then `@jakarta.inject.Singleton` is added automatically."
msgstr "如果在一个没有范围注解的类上发现了一个反应式路由，那么 `@javax.inject.Singleton` ，就会自动添加。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "The `@Route` annotation indicates that the method is a reactive route. Again, by default, the code contained in the method must not block."
msgstr " `@Route` 注解表明该方法是一个反应式途径。同样，在默认情况下，该方法中包含的代码必须不阻塞。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "The method gets a https://vertx.io/docs/apidocs/io/vertx/ext/web/RoutingContext.html[`RoutingContext`] as a parameter. From the `RoutingContext` you can retrieve the HTTP request (using `request()`) and write the response using `response().end(...)`."
msgstr "该方法得到一个 link:https://vertx.io/docs/apidocs/io/vertx/ext/web/RoutingContext.html[`RoutingContext`] 作为参数。从 `RoutingContext` ，你可以检索到HTTP请求（使用 `request()` ），并使用 `response().end(…​)` 写出响应。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "If the annotated method does not return `void` the arguments are optional."
msgstr "如果被注释的方法不返回 `void` ，则参数是可选的。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "`RoutingExchange` is a convenient wrapper of `RoutingContext` which provides some useful methods."
msgstr " `RoutingExchange` 是一个方便的 的包装器，提供了一些有用的方法。 `RoutingContext` "

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "The `RoutingExchange` is used to retrieve the request query parameter `name`."
msgstr "`RoutingExchange` 用于检索请求查询参数 `name` 。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "The path defines a parameter `name` which can be injected inside the method parameters using the annotation `@Param`."
msgstr "该路径定义了一个参数 `name` ，可使用注解 `@Param` 将其注入方法参数内部。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "More details about using the `RoutingContext` is available in the https://vertx.io/docs/vertx-web/java/[Vert.x Web documentation]."
msgstr "关于使用 `RoutingContext` 的更多细节，可以在 link:https://vertx.io/docs/vertx-web/java/[Vert.x Web文档] 中找到。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "The `@Route` annotation allows you to configure:"
msgstr " `@Route` 注释允许你进行配置。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "The `path` - for routing by path, using the https://vertx.io/docs/vertx-web/java/#_capturing_path_parameters[Vert.x Web format]"
msgstr " `path` - 用于按路径路由，使用 link:https://vertx.io/docs/vertx-web/java/#_capturing_path_parameters[Vert.x Web格式] 。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "The `regex` - for routing with regular expressions, see https://vertx.io/docs/vertx-web/java/#_routing_with_regular_expressions[for more details]"
msgstr " `regex` - 使用正则表达式进行路由， link:https://vertx.io/docs/vertx-web/java/#_routing_with_regular_expressions[更多细节] 见"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "The `methods` - the HTTP verbs triggering the route such as `GET`, `POST`..."
msgstr " `methods` - 触发路由的HTTP动词，如 `GET` , `POST` ..."

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "The `type` - it can be _normal_ (non-blocking), _blocking_ (method dispatched on a worker thread), or _failure_ to indicate that this route is called on failures"
msgstr " `type` - 它可以是 _正常的_ （非阻塞的）， _阻塞的_ （在工作线程上派发的方法），或者是 _失败的_ ，以表明此路由在失败时被调用。"

#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid ""
"The `order` - the order of the route when several routes are involved in handling the incoming request.\n"
"Must be positive for regular user routes."
msgstr "`order` - 当有多个路由参与处理传入请求时的路由顺序。普通用户路由必须为正数。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "The produced and consumed mime types using `produces`, and `consumes`"
msgstr "使用 `produces` ，生产和消费的mime类型，以及 `consumes` "

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "For instance, you can declare a blocking route as follows:"
msgstr "例如，你可以这样声明一个阻塞性路由。"

#. type: delimited block =
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "Alternatively, you can use `@io.smallrye.common.annotation.Blocking` and omit the `type = Route.HandlerType.BLOCKING`:"
msgstr "或者，你可以使用 `@io.smallrye.common.annotation.Blocking` ，省略 `type = Route.HandlerType.BLOCKING` 。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "When `@Blocking` is used, the `type` attribute of the `@Route` is ignored."
msgstr "当使用 `@Blocking` ，它忽略了 `@Route` 的属性 `type` 。"

#. type: delimited block =
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "The `@Route` annotation is repeatable and so you can declare several routes for a single method:"
msgstr " `@Route` 注解是可重复的，因此你可以为一个方法声明多个路由。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "Each route can use different paths, methods..."
msgstr "每条路线可以使用不同的路径、方法..."

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "If no content-type header is set, then we will try to use the most acceptable content type by matching the accept header with the value of the `Route` produces attribute as defined by `io.vertx.ext.web.RoutingContext.getAcceptableContentType()`."
msgstr "如果没有设置内容类型头，那么我们将尝试使用由 `io.vertx.ext.web.RoutingContext.getAcceptableContentType()` 定义的最可接受的内容类型。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "If the `accept` header matches `text/html`, we set the content type automatically to `text/html`."
msgstr "如果 `accept` header与 `text/html` ，我们就会自动设置内容类型。"

#. type: Title ===
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "Executing route on a virtual thread"
msgstr "在虚拟线程上执行路由"

#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid ""
"You can annotate a route method with `@io.smallrye.common.annotation.RunOnVirtualThread` in order to execute it on a virtual thread.\n"
"However, keep in mind that not everything can run safely on virtual threads.\n"
"You should read the xref:virtual-threads.adoc#run-code-on-virtual-threads-using-runonvirtualthread[Virtual thread support reference] carefully and get acquainted with all the details."
msgstr "你可以用 `@io.smallrye.common.annotation.RunOnVirtualThread` 来注解路由方法，以便在虚拟线程上执行。但请注意，并非所有程序都能在虚拟线程上安全运行。你应该仔细阅读 xref:virtual-threads.adoc#run-code-on-virtual-threads-using-runonvirtualthread[虚拟线程支持参考资料] ，了解所有细节。"

#. type: Title ===
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "Handling conflicting routes"
msgstr "处理冲突的路线"

#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid ""
"You may end up with multiple routes matching a given path.\n"
"In the following example, both route matches `/accounts/me`:"
msgstr "最终可能会有多个路由与给定路径匹配。在下面的示例中，两条路由都匹配 `/accounts/me` ："

#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid ""
"As a consequence, the result is not the expected one as the first route is called with the path parameter `id` set to `me`.\n"
"To avoid the conflict, use the `order` attribute:"
msgstr "因此，调用第一条路由时，路径参数 `id` 设置为 `me` ，结果与预期不符。为避免冲突，请使用 `order` 属性："

#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid ""
"By giving a lower order to the second route, it gets evaluated first.\n"
"If the request path matches, it is invoked, otherwise the other routes are evaluated."
msgstr "如果给第二条路由较低的排序，它就会先被评估。如果请求路径匹配，则调用该路径，否则评估其他路径。"

#. type: Title ===
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "`@RouteBase`"
msgstr " `@RouteBase` "

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "This annotation can be used to configure some defaults for reactive routes declared on a class."
msgstr "这个注解可以用来为在类上声明的反应式路由配置一些默认值。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "The `path` value is used as a prefix for any route method declared on the class where `Route#path()` is used."
msgstr " `path` 的值被用作在使用 `Route#path()` 的类上声明的任何路由方法的前缀。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "The value of `produces()` is used for content-based routing for all routes where `Route#produces()` is empty."
msgstr " `produces()` 的值用于基于内容的路由，用于所有 `Route#produces()` 为空的路由。"

#. type: Title ==
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "Reactive Route Methods"
msgstr "反应性路线方法"

#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid ""
"A route method must be a non-private non-static method of a CDI bean.\n"
"If the annotated method returns `void` then it has to accept at least one argument - see the supported types below.\n"
"If the annotated method does not return `void` then the arguments are optional."
msgstr "路由方法必须是 CDI Bean 的非私有非静态方法。如果注解方法返回 `void` ，那么它必须接受至少一个参数--请参阅下面的支持类型。如果注解方法不返回 `void` ，则参数是可选的。"

#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid ""
"Methods that return `void` must __end__ the response or the HTTP request to this route will never end.\n"
"Some methods of `RoutingExchange` do it for you, others not and you must call the `end()` method of the response by yourself, please refer to its JavaDoc for more information."
msgstr "返回 `void` 的方法必须 _结束_ 响应，否则该路由的 HTTP 请求将永远不会结束。 `RoutingExchange` 的某些方法会为您结束请求，而其他方法则不会，您必须自己调用响应的 `end()` 方法，详情请查阅 JavaDoc。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "A route method can accept arguments of the following types:"
msgstr "一个路由方法可以接受以下类型的参数。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "`io.vertx.ext.web.RoutingContext`"
msgstr " `io.vertx.ext.web.RoutingContext` "

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "`io.quarkus.vertx.web.RoutingExchange`"
msgstr " `io.quarkus.vertx.web.RoutingExchange` "

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "`io.vertx.core.http.HttpServerRequest`"
msgstr " `io.vertx.core.http.HttpServerRequest` "

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "`io.vertx.core.http.HttpServerResponse`"
msgstr " `io.vertx.core.http.HttpServerResponse` "

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "`io.vertx.mutiny.core.http.HttpServerRequest`"
msgstr " `io.vertx.mutiny.core.http.HttpServerRequest` "

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "`io.vertx.mutiny.core.http.HttpServerResponse`"
msgstr " `io.vertx.mutiny.core.http.HttpServerResponse` "

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "Furthermore, it is possible to inject the `HttpServerRequest` parameters into method parameters annotated with `@io.quarkus.vertx.web.Param` using the following types:"
msgstr "此外，还可以将 `HttpServerRequest` 参数注入到用 `@io.quarkus.vertx.web.Param` 注解的方法参数中。"

#. type: Table
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "Parameter Type"
msgstr "参数类型"

#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "Obtained via"
msgstr "获取途径"

#. type: Table
#: _versions/main/guides/reactive-routes.adoc
#, no-wrap
msgid "`java.lang.String`"
msgstr "`java.lang.String`"

#. type: Table
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "`routingContext.request().getParam()`"
msgstr " `routingContext.request().getParam()` "

#. type: Table
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "`java.util.Optional<String>`"
msgstr " `java.util.Optional<String>` "

#. type: Table
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "`java.util.List<String>`"
msgstr " `java.util.List<String>` "

#. type: Table
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "`routingContext.request().params().getAll()`"
msgstr " `routingContext.request().params().getAll()` "

#. type: Block title
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "Request Parameter Example"
msgstr "请求参数示例"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "The `HttpServerRequest` headers can be injected into method parameters annotated with `@io.quarkus.vertx.web.Header` using the following types:"
msgstr " `HttpServerRequest` headers可以被注入到一个用 `@io.quarkus.vertx.web.Header` 注释的方法参数中。"

#. type: Table
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "`routingContext.request().getHeader()`"
msgstr " `routingContext.request().getHeader()` "

#. type: Table
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "`routingContext.request().headers().getAll()`"
msgstr " `routingContext.request().headers().getAll()` "

#. type: Block title
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "Request Header Example"
msgstr "请求标头示例"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "The request body can be injected into a method parameter annotated with `@io.quarkus.vertx.web.Body` using the following types:"
msgstr "请求主体可以被注入一个用 `@io.quarkus.vertx.web.Body` 注释的方法参数中。"

#. type: Table
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "`routingContext.getBodyAsString()`"
msgstr " `routingContext.getBodyAsString()` "

#. type: Table
#: _versions/main/guides/reactive-routes.adoc
#, no-wrap
msgid "`io.vertx.core.buffer.Buffer`"
msgstr "`io.vertx.core.buffer.Buffer`"

#. type: Table
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "`routingContext.getBody()`"
msgstr " `routingContext.getBody()` "

#. type: Table
#: _versions/main/guides/reactive-routes.adoc
#, no-wrap
msgid "`io.vertx.core.json.JsonObject`"
msgstr "`io.vertx.core.json.JsonObject`"

#. type: Table
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "`routingContext.getBodyAsJson()`"
msgstr " `routingContext.getBodyAsJson()` "

#. type: Table
#: _versions/main/guides/reactive-routes.adoc
#, no-wrap
msgid "`io.vertx.core.json.JsonArray`"
msgstr "`io.vertx.core.json.JsonArray`"

#. type: Table
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "`routingContext.getBodyAsJsonArray()`"
msgstr " `routingContext.getBodyAsJsonArray()` "

#. type: Table
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "any other type"
msgstr "任何其他类型"

#. type: Table
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "`routingContext.getBodyAsJson().mapTo(MyPojo.class)`"
msgstr " `routingContext.getBodyAsJson().mapTo(MyPojo.class)` "

#. type: Block title
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "Request Body Example"
msgstr "请求正文示例"

#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid ""
"A failure handler can declare a single method parameter whose type extends `Throwable`.\n"
"The type of the parameter is used to match the result of `RoutingContext#failure()`."
msgstr "失败处理程序可以声明一个类型扩展为 `Throwable` 的方法参数。参数的类型用于匹配 `RoutingContext#failure()` 的结果。"

#. type: Block title
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "Failure Handler Example"
msgstr "失败处理程序实例"

#. type: Title ===
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "Returning Unis"
msgstr "返回的大学"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "In a reactive route, you can return a `Uni` directly:"
msgstr "在一个反应式路由中，你可以直接返回一个 `Uni` 。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "Returning `Unis` is convenient when using a reactive client:"
msgstr "在使用反应式客户端时，返回 `Unis` ，很方便。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "The item produced by the returned `Uni` can be:"
msgstr "由返回的 `Uni` 产生的项目可以是。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "A string - written into the HTTP response directly."
msgstr "一个字符串 - 直接写入HTTP响应中"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "A `io.vertx.core.buffer.Buffer` - written into the HTTP response directly."
msgstr "一个缓冲区--直接写入HTTP响应中"

#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid ""
"An object - written into the HTTP response after having been encoded into JSON.\n"
"The `content-type` header is set to `application/json` if not already set."
msgstr "对象--编码成 JSON 后写入 HTTP 响应。如果尚未设置 `content-type` 标头，则将其设置为 `application/json` 。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "If the returned `Uni` produces a failure (or is `null`), an HTTP 500 response is written."
msgstr "如果返回的 `Uni` 产生失败（或者是 `null` ），就会写一个HTTP 500响应。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "Returning a `Uni<Void>` produces a 204 response (no content)."
msgstr "返回 `Uni<Void>` ，产生204响应（无内容）。"

#. type: Title ===
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "Returning results"
msgstr "返回结果"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "You can also return a result directly:"
msgstr "你也可以直接返回一个结果。"

#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid ""
"Be aware, the processing must be **non-blocking** as reactive routes are invoked on the IO Thread.\n"
"Otherwise, set the `type` attribute of the `@Route` annotation to `Route.HandlerType.BLOCKING`, or use the `@io.smallrye.common.annotation.Blocking` annotation."
msgstr "请注意，处理必须 *是非阻塞* 的，因为反应式路由是在 IO 线程上调用的。否则，请将 `@Route` 注解的 `type` 属性设置为 `Route.HandlerType.BLOCKING` ，或使用 `@io.smallrye.common.annotation.Blocking` 注解。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "The method can return:"
msgstr "该方法可以返回。"

#. type: Title ===
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "Returning Multis"
msgstr "归来的多胞胎"

#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid ""
"A reactive route can return a `Multi`.\n"
"The items are written one by one, in the response.\n"
"The response `Transfer-Encoding` header is set to `chunked`."
msgstr "反应路由可返回 `Multi` 。项目将逐一写入响应。响应 `Transfer-Encoding` 标头设置为 `chunked` 。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "Produces `helloworld!`"
msgstr "生产 `helloworld!` "

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "A `Multi<String>` - the items are written one by one (one per _chunk_) in the response."
msgstr "a `Multi<String>` - 响应中的项目是一个接一个地写的（ _每块_ 一个）。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "A `Multi<Buffer>` - the buffers are written one by one (one per _chunk_) without any processing."
msgstr "a `Multi<Buffer>` - 缓冲区被一个一个地写入（ _每块_ 一个），不做任何处理。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "A `Multi<Object>` - the items are encoded to JSON written one by one in the response."
msgstr "a `Multi<Object>` - 项目被编码为JSON，逐一写入响应中。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "The previous snippet produces:"
msgstr "前面的片段产生了。"

#. type: Title ===
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "Streaming JSON Array items"
msgstr "流式JSON数组项目"

#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid ""
"You can return a `Multi` to produce a JSON Array, where every item is an item from this array.\n"
"The response is written item by item to the client.\n"
"To do that set the `produces` attribute to `\"application/json\"` (or `ReactiveRoutes.APPLICATION_JSON`)."
msgstr "您可以返回 `Multi` ，以生成一个 JSON 数组，其中每个项目都是该数组中的一个项目。响应将逐项写入客户端。为此，请将 `produces` 属性设置为 `\"application/json\"` （或 `ReactiveRoutes.APPLICATION_JSON` ）。"

#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid ""
"The `produces` attribute is an array.\n"
"When you pass a single value you can omit the \"{\" and \"}\".\n"
"Note that `\"application/json\"` must be the first value in the array."
msgstr "`produces` 属性是一个数组。当您传递单个值时，可以省略\"{\"和\"}\"。请注意， `\"application/json\"` 必须是数组中的第一个值。"

#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid ""
"Only `Multi<String>`, `Multi<Object>` and `Multi<Void>` can be written into the JSON Array.\n"
"Using a `Multi<Void>` produces an empty array.\n"
"You cannot use `Multi<Buffer>`.\n"
"If you need to use `Buffer`, transform the content into a JSON or String representation first."
msgstr "只有 `Multi<String>` 、 `Multi<Object>` 和 `Multi<Void>` 可以写入 JSON 数组。使用 `Multi<Void>` 会产生一个空数组。不能使用 `Multi<Buffer>` 。如果需要使用 `Buffer` ，请先将内容转换为 JSON 或字符串表示法。"

#. type: Block title
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "Deprecation of `asJsonArray`"
msgstr "废弃的 `asJsonArray` "

#. type: delimited block =
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "The `ReactiveRoutes.asJsonArray` has been deprecated as it is not compatible with the security layer of Quarkus."
msgstr " `ReactiveRoutes.asJsonArray` 已经被废弃，因为它与Quarkus的安全层不兼容。"

#. type: Title ===
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "Event Stream and Server-Sent Event support"
msgstr "支持事件流和服务器发送的事件"

#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid ""
"You can return a `Multi` to produce an event source (stream of server sent events).\n"
"To enable this feature, set the `produces` attribute to `\"text/event-stream\"` (or `ReactiveRoutes.EVENT_STREAM`), such as in:"
msgstr "您可以返回 `Multi` 以生成事件源（服务器发送的事件流）。要启用此功能，请将 `produces` 属性设置为 `\"text/event-stream\"` （或 `ReactiveRoutes.EVENT_STREAM` ），如以下所示："

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "This method would produce:"
msgstr "这种方法会产生。"

#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid ""
"The `produces` attribute is an array.\n"
"When you pass a single value you can omit the \"{\" and \"}\".\n"
"Note that `\"text/event-stream\"` must be the first value in the array."
msgstr "`produces` 属性是一个数组。当您传递单个值时，可以省略\"{\"和\"}\"。请注意， `\"text/event-stream\"` 必须是数组中的第一个值。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "You can also implement the `io.quarkus.vertx.web.ReactiveRoutes.ServerSentEvent` interface to customize the `event` and `id` section of the server sent event:"
msgstr "你也可以实现 `io.quarkus.vertx.web.ReactiveRoutes.ServerSentEvent` 接口来定制服务器发送事件的 `event` 和 `id` 部分。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "Using a `Multi<PersonEvent>` would produce:"
msgstr "使用 `Multi<PersonEvent>` ，会产生。"

#. type: Block title
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "Deprecation of `asEventStream`"
msgstr "废弃的 `asEventStream` "

#. type: delimited block =
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "The `ReactiveRoutes.asEventStream` has been deprecated as it is not compatible with the security layer of Quarkus."
msgstr " `ReactiveRoutes.asEventStream` 已经被废弃，因为它与Quarkus的安全层不兼容。"

#. type: Title ===
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "Json Stream in NDJSON format"
msgstr "NDJSON格式的Json流"

#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid ""
"You can return a `Multi` to produce a newline delimited stream of JSON values.\n"
"To enable this feature, set the `produces` attribute of the `@Route` annotation to `\"application/x-ndjson\"` (or `ReactiveRoutes.ND_JSON`):"
msgstr "您可以返回一个 `Multi` ，以生成一个换行分隔的 JSON 值流。要启用此功能，请将 `@Route` 注释的 `produces` 属性设置为 `\"application/x-ndjson\"` （或 `ReactiveRoutes.ND_JSON` ）："

#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid ""
"The `produces` attribute is an array. When you pass a single value you can omit the \"{\" and \"}\".\n"
"Note that `\"application/x-ndjson\"` must be the first value in the array."
msgstr "`produces` 属性是一个数组。当您传递单个值时，可以省略\"{\"和\"}\"。请注意， `\"application/x-ndjson\"` 必须是数组中的第一个值。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "You can also provide strings instead of objects, in that case the strings will be wrapped in quotes to become valid JSON values:"
msgstr "你也可以提供字符串而不是Objects，在这种情况下，字符串将被包裹在引号中，成为有效的JSON值。"

#. type: Block title
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "Deprecation of `asJsonStream`"
msgstr "废弃的 `asJsonStream` "

#. type: delimited block =
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "The `ReactiveRoutes.asJsonStream` has been deprecated as it is not compatible with the security layer of Quarkus."
msgstr " `ReactiveRoutes.asJsonStream` 已经被废弃，因为它与Quarkus的安全层不兼容。"

#. type: Title ===
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "Using Bean Validation"
msgstr "使用Bean Validation"

#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid ""
"You can combine reactive routes and Bean Validation.\n"
"First, don't forget to add the `quarkus-hibernate-validator` extension to your project.\n"
"Then, you can add constraints to your route parameter (annotated with `@Param` or `@Body`):"
msgstr "您可以将反应式路由和 Bean Validation 结合起来。首先，不要忘记在项目中添加 `quarkus-hibernate-validator` 扩展。然后，可以在路由参数中添加约束条件（用 `@Param` 或 `@Body` 注释）："

#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid ""
"If the parameters do not pass the tests, it returns an HTTP 400 response.\n"
"If the request accepts JSON payload, the response follows the https://opensource.zalando.com/problem/constraint-violation/[Problem] format."
msgstr "如果参数未通过测试，则会返回 HTTP 400 响应。如果请求接受 JSON 有效载荷，则响应将遵循 link:https://opensource.zalando.com/problem/constraint-violation/[问题] 格式。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "When returning an object or a `Uni`, you can also use the `@Valid` annotation:"
msgstr "当返回一个对象或一个 `Uni` ，你也可以使用 `@Valid` 注解。"

#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid ""
"If the item produced by the route does not pass the validation, it returns an HTTP 500 response.\n"
"If the request accepts JSON payload, the response follows the https://opensource.zalando.com/problem/constraint-violation/[Problem] format."
msgstr "如果路由生成的项目未通过验证，则会返回 HTTP 500 响应。如果请求接受 JSON 有效载荷，则响应将遵循 link:https://opensource.zalando.com/problem/constraint-violation/[问题] 格式。"

#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid ""
"Note that only `@Valid` is supported on the return type.\n"
"The returned class can use any constraint.\n"
"In the case of `Uni`, it checks the item produced asynchronously."
msgstr "请注意，返回类型只支持 `@Valid` 。返回类可以使用任何约束。在 `Uni` 的情况下，它会异步检查生成的项目。"

#. type: Title ==
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "Using the Vert.x Web Router"
msgstr "使用Vert.x网络路由器"

#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid ""
"You can also register your route directly on the _HTTP routing layer_ by registering routes directly on the `Router` object.\n"
"To retrieve the `Router` instance at startup:"
msgstr "您也可以直接在 `Router` 对象上注册 _路由_ ，从而直接在 _HTTP 路由层上注册路由_ 。要在启动时检索 `Router` 实例："

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "Check the https://vertx.io/docs/vertx-web/java/#_basic_vert_x_web_concepts[Vert.x Web documentation] to know more about the route registration, options, and available handlers."
msgstr "查看 link:https://vertx.io/docs/vertx-web/java/#_basic_vert_x_web_concepts[Vert.x Web文档] ，了解更多关于路由注册、选项和可用处理程序的信息。"

#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid ""
"`Router` access is provided by the `quarkus-vertx-http` extension.\n"
"If you use `quarkus-resteasy-reactive` or `quarkus-reactive-routes`, the extension will be added automatically."
msgstr "`Router` 访问由 扩展提供。如果使用 或 ，则会自动添加扩展名。 `quarkus-vertx-http` `quarkus-resteasy-reactive` `quarkus-reactive-routes`"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "You can also receive the Mutiny variant of the Router (`io.vertx.mutiny.ext.web.Router`):"
msgstr "你也可以收到路由器的突变体( `io.vertx.mutiny.ext.web.Router` )。"

#. type: Title ==
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "Intercepting HTTP requests"
msgstr "拦截HTTP请求"

#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid ""
"You can also register filters that would intercept incoming HTTP requests.\n"
"Note that these filters are also applied for servlets, Jakarta REST resources, and reactive routes."
msgstr "您还可以注册拦截传入 HTTP 请求的过滤器。请注意，这些过滤器也适用于 servlet、Jakarta REST 资源和反应路由。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "For example, the following code snippet registers a filter adding an HTTP header:"
msgstr "例如，下面的代码片段注册了一个添加HTTP头的过滤器。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "The `RouteFilter#value()` defines the priority used to sort the filters - filters with higher priority are called first."
msgstr " `RouteFilter#value()` 定义了用于对过滤器进行排序的优先级--优先级较高的过滤器被首先调用。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "The filter is likely required to call the `next()` method to continue the chain."
msgstr "过滤器很可能需要调用 `next()` 方法来继续链。"

#. type: Title ==
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "HTTP Compression"
msgstr "HTTP压缩"

#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid ""
"The body of an HTTP response is not compressed by default.\n"
"You can enable the HTTP compression support by means of `quarkus.http.enable-compression=true`."
msgstr "HTTP 响应的正文默认不压缩。您可以通过 `quarkus.http.enable-compression=true` 启用 HTTP 压缩支持。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "If compression support is enabled then the response body is compressed if:"
msgstr "如果启用了压缩支持，那么响应体将被压缩，如果。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "the route method is annotated with `@io.quarkus.vertx.http.Compressed`, or"
msgstr "途径方法被注释为 `@io.quarkus.vertx.http.Compressed` ，或者"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "the `Content-Type` header is set and the value is a compressed media type as configured via `quarkus.http.compress-media-types`."
msgstr " `Content-Type` 头被设置，其值是通过 `quarkus.http.compress-media-types` 配置的压缩媒体类型。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "The response body is never compressed if:"
msgstr "响应主体永远不会被压缩，如果。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "the route method is annotated with `@io.quarkus.vertx.http.Uncompressed`, or"
msgstr "途径方法被注释为 `@io.quarkus.vertx.http.Uncompressed` ，或者"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "the `Content-Type` header is not set."
msgstr " `Content-Type` header未被设置。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "By default, the following list of media types is compressed: `text/html`, `text/plain`, `text/xml`, `text/css`, `text/javascript` and `application/javascript`."
msgstr "默认情况下，以下媒体类型的列表被压缩。 `text/html` , `text/plain` , `text/xml` , `text/css` , `text/javascript` 和 `application/javascript` 。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "If the client does not support HTTP compression then the response body is not compressed."
msgstr "如果客户端不支持HTTP压缩，那么响应体就不会被压缩。"

#. type: Title ==
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "Adding OpenAPI and Swagger UI"
msgstr "添加OpenAPI和Swagger用户界面"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "You can add support for link:https://www.openapis.org/[OpenAPI] and link:https://swagger.io/tools/swagger-ui/[Swagger UI] by using the `quarkus-smallrye-openapi` extension."
msgstr "你可以通过使用 `quarkus-smallrye-openapi` 扩展添加对 link:https://www.openapis.org/[OpenAPI] 和 link:https://swagger.io/tools/swagger-ui/[Swagger UI] 的支持。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "Add the extension by running this command:"
msgstr "通过运行此命令添加扩展程序。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "This is enough to generate a basic OpenAPI schema document from your Vert.x Routes:"
msgstr "这足以从你的Vert.x Routes生成一个基本的OpenAPI模式文档。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "You will see the generated OpenAPI schema document:"
msgstr "你会看到生成的OpenAPI模式文档。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "Also see xref:openapi-swaggerui.adoc[the OpenAPI Guide]."
msgstr "也请参见 link:openapi-swaggerui.html[《OpenAPI指南》] 。"

#. type: Title ===
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "Adding MicroProfile OpenAPI Annotations"
msgstr "添加MicroProfile的OpenAPI注释"

#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid ""
"You can use link:https://github.com/eclipse/microprofile-open-api[MicroProfile OpenAPI] to better document your schema,\n"
"for instance, adding header info, or specifying the return type on `void` methods might be useful:"
msgstr "您可以使用 link:https://github.com/eclipse/microprofile-open-api[MicroProfile OpenAPI] 更好地记录您的模式，例如，添加头信息或指定 `void` 方法的返回类型可能会很有用："

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "Header information about your API."
msgstr "关于你的API的标题信息。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "Defining the response."
msgstr "界定应对措施"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "This will generate this OpenAPI schema:"
msgstr "这将生成这个OpenAPI模式。"

#. type: Title ===
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy, no-wrap
msgid "Using Swagger UI"
msgstr "使用Swagger UI"

#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid ""
"Swagger UI is included by default when running in `dev` or `test` mode, and can optionally be added to `prod` mode.\n"
"For more information, see the xref:openapi-swaggerui.adoc#dev-mode[Swagger UI] guide."
msgstr "在 `dev` 或 `test` 模式下运行时，默认包含 Swagger UI，也可选择将其添加到 `prod` 模式。更多信息，请参阅 xref:openapi-swaggerui.adoc#dev-mode[Swagger UI] 指南。"

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "Navigate to link:http://localhost:8080/q/swagger-ui/[localhost:8080/q/swagger-ui/] and observe the Swagger UI screen:"
msgstr "导航至 link:http://localhost:8080/q/swagger-ui/[localhost:8080/q/swagger-ui/] 并观察 Swagger UI 屏幕："

#. type: Plain text
#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid "image:reactive-routes-guide-screenshot01.png[alt=Swagger UI]"
msgstr "image:reactive-routes-guide-screenshot01.png[alt=\"Swagger UI\"]"

#. type: Title ==
#: _versions/main/guides/reactive-routes.adoc
#, no-wrap
msgid "Conclusion"
msgstr "解决方案"

#: _versions/main/guides/reactive-routes.adoc
#, fuzzy
msgid ""
"This guide has introduced how you can use reactive routes to define an HTTP endpoint.\n"
"It also describes the structure of the Quarkus HTTP layer and how to write filters."
msgstr "本指南介绍了如何使用反应路由来定义 HTTP 端点。它还介绍了 Quarkus HTTP 层的结构以及如何编写过滤器。"
