# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-06-17 02:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:6
#, no-wrap
msgid "Simplified Hibernate Reactive with Panache"
msgstr "简化的Hibernate 响应式与Panache"

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:15
msgid "link:http://hibernate.org/reactive/[Hibernate Reactive] is the only reactive JPA implementation and offers you the full breadth of an Object Relational Mapper allowing you to access your database over reactive drivers.  It makes complex mappings possible, but it does not make simple and common mappings trivial.  Hibernate Reactive with Panache focuses on making your entities trivial and fun to write in Quarkus."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:16
#, no-wrap
msgid "First: an example"
msgstr "第一：一个例子"

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:19
msgid "What we're doing in Panache allows you to write your Hibernate Reactive entities like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:27
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:144
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:226
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:31
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:230
#, no-wrap
msgid ""
"    public static Uni<Person> findByName(String name){\n"
"        return find(\"name\", name).firstResult();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:35
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:234
#, no-wrap
msgid ""
"    public static Uni<List<Person>> findAlive(){\n"
"        return list(\"status\", Status.Alive);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:40
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:239
#, no-wrap
msgid ""
"    public static Uni<Long> deleteStefs(){\n"
"        return delete(\"name\", \"Stef\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:44
msgid "You have noticed how much more compact and readable the code is? Does this look interesting? Read on!"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:46
msgid "the `list()` method might be surprising at first. It takes fragments of HQL (JP-QL) queries and contextualizes the rest. That makes for very concise but yet readable code."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:49
msgid "what was described above is essentially the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[active record pattern], sometimes just called the entity pattern.  Hibernate with Panache also allows for the use of the more classical link:https://martinfowler.com/eaaCatalog/repository.html[repository pattern] via `PanacheRepository`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:50
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:54
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:56
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:58
msgid "The solution is located in the `hibernate-reactive-panache-quickstart` {quickstarts-tree-url}/hibernate-reactive-panache-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:60
#, no-wrap
msgid "Setting up and configuring Hibernate Reactive with Panache"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:63
msgid "To get started:"
msgstr "起步："

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:65
msgid "add your settings in `{config-file}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:66
msgid "annotate your entities with `@Entity`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:67
msgid "make your entities extend `PanacheEntity` (optional if you are using the repository pattern)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:69
msgid "Follow the xref:hibernate-orm.adoc#setting-up-and-configuring-hibernate-orm[Hibernate set-up guide for all configuration]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:71
msgid "In your `pom.xml`, add the following dependencies:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:73
msgid "the Hibernate Reactive with Panache extension"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:74
msgid "your reactive driver extension (`quarkus-reactive-pg-client`, `quarkus-reactive-mysql-client`, `quarkus-reactive-db2-client`, ...)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:76
msgid "For instance:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:78
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:782
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:898
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:85
#, no-wrap
msgid ""
"<!-- Hibernate Reactive dependency -->\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-hibernate-reactive-panache</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:91
#, no-wrap
msgid ""
"<!-- Reactive SQL client for PostgreSQL -->\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-reactive-pg-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:94
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:792
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:908
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:98
#, no-wrap
msgid ""
"// Hibernate Reactive dependency\n"
"implementation(\"io.quarkus:quarkus-hibernate-reactive-panache\")\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:101
#, no-wrap
msgid ""
"Reactive SQL client for PostgreSQL\n"
"implementation(\"io.quarkus:quarkus-reactive-pg-client\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:104
msgid "Then add the relevant configuration properties in `{config-file}`."
msgstr "然后在 `{config-file}` 中添加相关的配置属性。"

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:112
#, no-wrap
msgid ""
"# configure your datasource\n"
"quarkus.datasource.db-kind = postgresql\n"
"quarkus.datasource.username = sarah\n"
"quarkus.datasource.password = connor\n"
"quarkus.datasource.reactive.url = vertx-reactive:postgresql://localhost:5432/mydatabase\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:115
#, no-wrap
msgid ""
"# drop and create the database at startup (use `update` to only update the schema)\n"
"quarkus.hibernate-orm.database.generation = drop-and-create\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:117
#, no-wrap
msgid "Solution 1: using the active record pattern"
msgstr "解决方案1：使用active record（活动记录）模式"

#. type: Title ===
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:119
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:244
#, no-wrap
msgid "Defining your entity"
msgstr "定义你的实体"

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:123
msgid "To define a Panache entity, simply extend `PanacheEntity`, annotate it with `@Entity` and add your columns as public fields:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:132
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:136
msgid "You can put all your JPA column annotations on the public fields. If you need a field to not be persisted, use the `@Transient` annotation on it. If you need to write accessors, you can:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:149
#, no-wrap
msgid ""
"    // return name as uppercase in the model\n"
"    public String getName(){\n"
"        return name.toUpperCase();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:155
#, no-wrap
msgid ""
"    // store all names in lowercase in the DB\n"
"    public void setName(String name){\n"
"        this.name = name.toLowerCase();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:160
msgid "And thanks to our field access rewrite, when your users read `person.name` they will actually call your `getName()` accessor, and similarly for field writes and the setter.  This allows for proper encapsulation at runtime as all fields calls will be replaced by the corresponding getter/setter calls."
msgstr "而且由于我们的字段访问重写，当你的用户读取 `person.name` ，他们实际上会调用你的 `getName()` 方法，类似的还有字段写入和设置器。这允许在运行时进行适当的封装，因为所有字段的调用都将被相应的getter/setter调用所取代。"

#. type: Title ===
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:161
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:327
#, no-wrap
msgid "Most useful operations"
msgstr "最有用的操作"

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:164
msgid "Once you have written your entity, here are the most common operations you will be able to perform:"
msgstr "编写实体后，可以执行以下最常见的操作："

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:172
#, no-wrap
msgid ""
"// creating a person\n"
"Person person = new Person();\n"
"person.name = \"Stef\";\n"
"person.birth = LocalDate.of(1910, Month.FEBRUARY, 1);\n"
"person.status = Status.Alive;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:175
#, no-wrap
msgid ""
"// persist it\n"
"Uni<Void> persistOperation = person.persist();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:178
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:344
#, no-wrap
msgid ""
"// note that once persisted, you don't need to explicitly save your entity: all\n"
"// modifications are automatically persisted on transaction commit.\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:184
#, no-wrap
msgid ""
"// check if it's persistent\n"
"if(person.isPersistent()){\n"
"    // delete it\n"
"    Uni<Void> deleteOperation = person.delete();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:187
#, no-wrap
msgid ""
"// getting a list of all Person entities\n"
"Uni<List<Person>> allPersons = Person.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:190
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"Uni<Person> personById = Person.findById(23L);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:193
#, no-wrap
msgid ""
"// finding all living persons\n"
"Uni<List<Person>> livingPersons = Person.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:196
#, no-wrap
msgid ""
"// counting all persons\n"
"Uni<Long> countAll = Person.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:199
#, no-wrap
msgid ""
"// counting all living persons\n"
"Uni<Long> countAlive = Person.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:202
#, no-wrap
msgid ""
"// delete all living persons\n"
"Uni<Long> deleteAliveOperation = Person.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:205
#, no-wrap
msgid ""
"// delete all persons\n"
"Uni<Long> deleteAllOperation = Person.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:208
#, no-wrap
msgid ""
"// delete by id\n"
"Uni<Boolean> deleteByIdOperation = Person.deleteById(23L);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:211
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"Uni<Integer> updateOperation = Person.update(\"name = 'Mortal' where status = ?1\", Status.Alive);\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:213
#, no-wrap
msgid "Adding entity methods"
msgstr "添加实体方法"

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:218
msgid "Add custom queries on your entities inside the entities themselves.  That way, you and your co-workers can find them easily, and queries are co-located with the object they operate on.  Adding them as static methods in your entity class is the Panache Active Record way."
msgstr "在实体本身内部的实体上添加自定义查询。这样，您和您的同事可以轻松找到它们，并且查询与他们操作的对象位于同一位置。将它们作为静态方法添加到实体类中是 Panache Active Record 方式。"

#. type: Title ==
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:241
#, no-wrap
msgid "Solution 2: using the repository pattern"
msgstr "解决方案2：使用资源库模式"

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:247
msgid "When using the repository pattern, you can define your entities as regular JPA entities."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:256
#, no-wrap
msgid ""
"@Entity\n"
"public class Person {\n"
"    @Id @GeneratedValue private Long id;\n"
"    private String name;\n"
"    private LocalDate birth;\n"
"    private Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:282
#, no-wrap
msgid ""
"    public Long getId(){\n"
"        return id;\n"
"    }\n"
"    public void setId(Long id){\n"
"        this.id = id;\n"
"    }\n"
"    public String getName() {\n"
"        return name;\n"
"    }\n"
"    public void setName(String name) {\n"
"        this.name = name;\n"
"    }\n"
"    public LocalDate getBirth() {\n"
"        return birth;\n"
"    }\n"
"    public void setBirth(LocalDate birth) {\n"
"        this.birth = birth;\n"
"    }\n"
"    public Status getStatus() {\n"
"        return status;\n"
"    }\n"
"    public void setStatus(Status status) {\n"
"        this.status = status;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:286
msgid "If you don't want to bother defining getters/setters for your entities, you can make them extend `PanacheEntityBase` and Quarkus will generate them for you. You can even extend `PanacheEntity` and take advantage of the default ID it provides."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:287
#, no-wrap
msgid "Defining your repository"
msgstr "定义你的存储库"

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:291
msgid "When using Repositories, you get the exact same convenient methods as with the active record pattern, injected in your Repository, by making them implements `PanacheRepository`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:296
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheRepository<Person> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:298
#, no-wrap
msgid "   // put your custom logic here as instance methods\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:302
#, no-wrap
msgid ""
"   public Uni<Person> findByName(String name){\n"
"       return find(\"name\", name).firstResult();\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:306
#, no-wrap
msgid ""
"   public Uni<List<Person>> findAlive(){\n"
"       return list(\"status\", Status.Alive);\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:311
#, no-wrap
msgid ""
"   public Uni<Long> deleteStefs(){\n"
"       return delete(\"name\", \"Stef\");\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:315
msgid "All the operations that are defined on `PanacheEntityBase` are available on your repository, so using it is exactly the same as using the active record pattern, except you need to inject it:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:320
#, no-wrap
msgid ""
"@Inject\n"
"PersonRepository personRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:325
#, no-wrap
msgid ""
"@GET\n"
"public Uni<Long> count(){\n"
"    return personRepository.count();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:330
msgid "Once you have written your repository, here are the most common operations you will be able to perform:"
msgstr "编写存储库后，您可以执行以下最常见的操作："

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:338
#, no-wrap
msgid ""
"// creating a person\n"
"Person person = new Person();\n"
"person.setName(\"Stef\");\n"
"person.setBirth(LocalDate.of(1910, Month.FEBRUARY, 1));\n"
"person.setStatus(Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:341
#, no-wrap
msgid ""
"// persist it\n"
"Uni<Void> persistOperation = personRepository.persist(person);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:350
#, no-wrap
msgid ""
"// check if it's persistent\n"
"if(personRepository.isPersistent(person)){\n"
"    // delete it\n"
"    Uni<Void> deleteOperation = personRepository.delete(person);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:353
#, no-wrap
msgid ""
"// getting a list of all Person entities\n"
"Uni<List<Person>> allPersons = personRepository.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:356
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"Uni<Person> personById = personRepository.findById(23L);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:359
#, no-wrap
msgid ""
"// finding all living persons\n"
"Uni<List<Person>> livingPersons = personRepository.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:362
#, no-wrap
msgid ""
"// counting all persons\n"
"Uni<Long> countAll = personRepository.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:365
#, no-wrap
msgid ""
"// counting all living persons\n"
"Uni<Long> countAlive = personRepository.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:368
#, no-wrap
msgid ""
"// delete all living persons\n"
"Uni<Long> deleteLivingOperation = personRepository.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:371
#, no-wrap
msgid ""
"// delete all persons\n"
"Uni<Long> deleteAllOperation = personRepository.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:374
#, no-wrap
msgid ""
"// delete by id\n"
"Uni<Boolean> deleteByIdOperation = personRepository.deleteById(23L);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:377
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"Uni<Integer> updateOperation = personRepository.update(\"name = 'Mortal' where status = ?1\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:382
msgid "The rest of the documentation show usages based on the active record pattern only, but keep in mind that they can be performed with the repository pattern as well.  The repository pattern examples have been omitted for brevity."
msgstr "其余的文档只展示了基于活动记录模式的用法，但请记住，这些用法也可以用资源库模式来执行。为了简洁起见，已省略存储库模式示例。"

#. type: Title ==
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:383
#, no-wrap
msgid "Advanced Query"
msgstr "高级查询"

#. type: Title ===
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:385
#, no-wrap
msgid "Paging"
msgstr "分页"

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:389
msgid "You should only use the `list` methods if your table contains small enough data sets. For larger data sets you can use the `find` method equivalents, which return a `PanacheQuery` on which you can do paging:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:394
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:430
#, no-wrap
msgid ""
"// create a query for all living persons\n"
"PanacheQuery<Person> livingPersons = Person.find(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:397
#, no-wrap
msgid ""
"// make it use pages of 25 entries at a time\n"
"livingPersons.page(Page.ofSize(25));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:400
#, no-wrap
msgid ""
"// get the first page\n"
"Uni<List<Person>> firstPage = livingPersons.list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:403
#, no-wrap
msgid ""
"// get the second page\n"
"Uni<List<Person>> secondPage = livingPersons.nextPage().list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:406
#, no-wrap
msgid ""
"// get page 7\n"
"Uni<List<Person>> page7 = livingPersons.page(Page.of(7, 25)).list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:409
#, no-wrap
msgid ""
"// get the number of pages\n"
"Uni<Integer> numberOfPages = livingPersons.pageCount();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:412
#, no-wrap
msgid ""
"// get the total number of entities returned by this query without paging\n"
"Uni<Long> count = livingPersons.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:418
#, no-wrap
msgid ""
"// and you can chain methods of course\n"
"Uni<List<Person>> persons = Person.find(\"status\", Status.Alive)\n"
"        .page(Page.ofSize(25))\n"
"        .nextPage()\n"
"        .list();\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:421
msgid "The `PanacheQuery` type has many other methods to deal with paging and returning streams."
msgstr "`PanacheQuery` 类型有许多其他方法来处理分页和返回流。"

#. type: Title ===
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:422
#, no-wrap
msgid "Using a range instead of pages"
msgstr "使用range而不是pages"

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:425
msgid "`PanacheQuery` also allows range-based queries."
msgstr "`PanacheQuery` 也允许基于范围的查询。"

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:433
#, no-wrap
msgid ""
"// make it use a range: start at index 0 until index 24 (inclusive).\n"
"livingPersons.range(0, 24);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:436
#, no-wrap
msgid ""
"// get the range\n"
"Uni<List<Person>> firstRange = livingPersons.list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:439
#, no-wrap
msgid ""
"// to get the next range, you need to call range again\n"
"Uni<List<Person>> secondRange = livingPersons.range(25, 49).list();\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:445
msgid "You cannot mix ranges and pages: if you use a range, all methods that depend on having a current page will throw an `UnsupportedOperationException`; you can switch back to paging using `page(Page)` or `page(int, int)`."
msgstr "你不能混合使用ranges和pages：如果你使用range，所有依赖于拥有当前页面的方法将抛出一个 `UnsupportedOperationException` ；你可以使用 `page(Page)` 或 `page(int, int)` 切换回分页。"

#. type: Title ===
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:447
#, no-wrap
msgid "Sorting"
msgstr "排序"

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:450
msgid "All methods accepting a query string also accept the following simplified query form:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:454
#, no-wrap
msgid "Uni<List<Person>> persons = Person.list(\"order by name,birth\");\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:457
msgid "But these methods also accept an optional `Sort` parameter, which allows you to abstract your sorting:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:461
#, no-wrap
msgid "Uni<List<Person>> persons = Person.list(Sort.by(\"name\").and(\"birth\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:464
#, no-wrap
msgid ""
"// and with more restrictions\n"
"Uni<List<Person>> persons = Person.list(\"status\", Sort.by(\"name\").and(\"birth\"), Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:467
msgid "The `Sort` class has plenty of methods for adding columns and specifying sort direction."
msgstr "`Sort` 类有很多方法用于添加列和指定排序方向。"

#. type: Title ===
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:468
#, no-wrap
msgid "Simplified queries"
msgstr "简化查询"

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:472
msgid "Normally, HQL queries are of this form: `from EntityName [where ...] [order by ...]`, with optional elements at the end."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:474
msgid "If your select query does not start with `from`, we support the following additional forms:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:476
msgid "`order by ...` which will expand to `from EntityName order by ...`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:477
msgid "`<singleColumnName>` (and single parameter) which will expand to `from EntityName where <singleColumnName> = ?`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:478
msgid "`<query>` will expand to `from EntityName where <query>`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:480
msgid "If your update query does not start with `update`, we support the following additional forms:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:482
msgid "`from EntityName ...` which will expand to `update from EntityName ...`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:483
msgid "`set? <singleColumnName>` (and single parameter) which will expand to `update from EntityName set <singleColumnName> = ?`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:484
msgid "`set? <update-query>` will expand to `update from EntityName set <update-query>`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:486
msgid "If your delete query does not start with `delete`, we support the following additional forms:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:488
msgid "`from EntityName ...` which will expand to `delete from EntityName ...`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:489
msgid "`<singleColumnName>` (and single parameter) which will expand to `delete from EntityName where <singleColumnName> = ?`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:490
msgid "`<query>` will expand to `delete from EntityName where <query>`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:493
msgid "You can also write your queries in plain link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#hql[HQL]:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:498
#, no-wrap
msgid ""
"Order.find(\"select distinct o from Order o left join fetch o.lineItems\");\n"
"Order.update(\"update from Person set name = 'Mortal' where status = ?\", Status.Alive);\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:500
#, no-wrap
msgid "Named queries"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:503
msgid "You can reference a named query instead of a (simplified) HQL query by prefixing its name with the '#' character. You can also use named queries for count, update and delete queries."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:517
#, no-wrap
msgid ""
"@Entity\n"
"@NamedQueries({\n"
"    @NamedQuery(name = \"Person.getByName\", query = \"from Person where name = ?1\"),\n"
"    @NamedQuery(name = \"Person.countByStatus\", query = \"select count(*) from Person p where p.status = :status\"),\n"
"    @NamedQuery(name = \"Person.updateStatusById\", query = \"update Person p set p.status = :status where p.id = :id\"),\n"
"    @NamedQuery(name = \"Person.deleteById\", query = \"delete from Person p where p.id = ?1\")\n"
"})\n"
"public class Person extends PanacheEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:521
#, no-wrap
msgid ""
"    public static Uni<Person> findByName(String name){\n"
"        return find(\"#Person.getByName\", name).firstResult();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:525
#, no-wrap
msgid ""
"    public static Uni<Long> countByStatus(Status status) {\n"
"        return count(\"#Person.countByStatus\", Parameters.with(\"status\", status).map());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:529
#, no-wrap
msgid ""
"    public static Uni<Long> updateStatusById(Status status, Long id) {\n"
"        return update(\"#Person.updateStatusById\", Parameters.with(\"status\", status).and(\"id\", id));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:534
#, no-wrap
msgid ""
"    public static Uni<Long> deleteById(Long id) {\n"
"        return delete(\"#Person.deleteById\", id);\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:540
msgid "Named queries can only be defined inside your JPA entity classes (being the Panache entity class, or the repository parameterized type), or on one of its super classes."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:542
#, no-wrap
msgid "Query parameters"
msgstr "查询参数"

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:545
msgid "You can pass query parameters by index (1-based) as shown below:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:549
#, no-wrap
msgid "Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:552
msgid "Or by name using a `Map`:"
msgstr "或者使用 `Map` ，按名字来命名："

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:559
#, no-wrap
msgid ""
"Map<String, Object> params = new HashMap<>();\n"
"params.put(\"name\", \"stef\");\n"
"params.put(\"status\", Status.Alive);\n"
"Person.find(\"name = :name and status = :status\", params);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:562
msgid "Or using the convenience class `Parameters` either as is or to build a `Map`:"
msgstr "或者使用方便的类 `Parameters` ，既可以是原样，也可以是建立一个 `Map` 。"

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:568
#, no-wrap
msgid ""
"// generate a Map\n"
"Person.find(\"name = :name and status = :status\",\n"
"         Parameters.with(\"name\", \"stef\").and(\"status\", Status.Alive).map());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:572
#, no-wrap
msgid ""
"// use it as-is\n"
"Person.find(\"name = :name and status = :status\",\n"
"         Parameters.with(\"name\", \"stef\").and(\"status\", Status.Alive));\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:575
msgid "Every query operation accepts passing parameters by index (`Object...`), or by name (`Map<String,Object>` or `Parameters`)."
msgstr "每个查询操作都接受按索引（ `Object...` ）或按名称（ `Map<String,Object>` 或 `Parameters` ）传递参数。"

#. type: Title ===
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:576
#, no-wrap
msgid "Query projection"
msgstr "查询映射"

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:579
msgid "Query projection can be done with the `project(Class)` method on the `PanacheQuery` object that is returned by the `find()` methods."
msgstr "查询映射可以使用 `find()` 方法返回的 `PanacheQuery` 对象上的 `project(Class)` 方法来完成。"

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:581
msgid "You can use it to restrict which fields will be returned by the database."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:585
msgid "Hibernate will use **DTO projection** and generate a SELECT clause with the attributes from the projection class.  This is also called **dynamic instantiation** or **constructor expression**, more info can be found on the Hibernate guide: link:https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#hql-select-clause[hql select clause]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:588
msgid "The projection class needs to be a valid Java Bean and have a constructor that contains all its attributes, this constructor will be used to instantiate the projection DTO instead of using the entity class. This must be the only constructor of the class."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:592
#, no-wrap
msgid "import io.quarkus.runtime.annotations.RegisterForReflection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:596
#, no-wrap
msgid ""
"@RegisterForReflection // <1>\n"
"public class PersonName {\n"
"    public final String name; // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:601
#, no-wrap
msgid ""
"    public PersonName(String name){ // <3>\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:604
#, no-wrap
msgid ""
"// only 'name' will be loaded from the database\n"
"PanacheQuery<PersonName> query = Person.find(\"status\", Status.Alive).project(PersonName.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:606
msgid "The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation. More details about the `@RegisterForReflection` annotation can be found on the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:607
msgid "We use public fields here, but you can use private fields and getters/setters if you prefer."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:608
msgid "This constructor will be used by Hibernate, and it must have a matching constructor with all the class attributes as parameters."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:615
msgid "The implementation of the `project(Class)` method uses the constructor's parameter names to build the select clause of the query, so the compiler must be configured to store parameter names inside the compiled class.  This is enabled by default if you are using the Quarkus Maven archetype. If you are not using it, add the property `<maven.compiler.parameters>true</maven.compiler.parameters>` to your pom.xml."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:618
msgid "If in the DTO projection object you have a field from a referenced entity, you can use the `@ProjectedFieldName` annotation to provide the path for the SELECT statement."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:628
#, no-wrap
msgid ""
"@Entity\n"
"public class Dog extends PanacheEntity {\n"
"    public String name;\n"
"    public String race;\n"
"    @ManyToOne\n"
"    public Person owner;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:633
#, no-wrap
msgid ""
"@RegisterForReflection\n"
"public class DogDto {\n"
"    public String name;\n"
"    public String ownerName;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:639
#, no-wrap
msgid ""
"    public DogDto(String name, @ProjectedFieldName(\"owner.name\") String ownerName) {  // <1>\n"
"        this.name = name;\n"
"        this.ownerName = ownerName;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:641
#, no-wrap
msgid "PanacheQuery<DogDto> query = Dog.findAll().project(DogDto.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:643
msgid "The `ownerName` DTO constructor's parameter will be loaded from the `owner.name` HQL property."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:644
#, no-wrap
msgid "Multiple Persistence Units"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:647
msgid "Hibernate Reactive in Quarkus currently does not support multiple persistence units."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:648
#, no-wrap
msgid "Transactions"
msgstr "事务"

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:654
msgid "Make sure to wrap methods modifying your database (e.g. `entity.persist()`) within a transaction. Marking a CDI bean method `@ReactiveTransactional` will do that for you and make that method a transaction boundary. Alternatively, you can use `Panache.withTransaction()` for the same effect. We recommend doing so at your application entry point boundaries like your REST endpoint controllers."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:658
msgid "You cannot use `@Transactional` with Hibernate Reactive for your transactions: you must use `@ReactiveTransactional`, and your annotated method must return a `Uni` to be non-blocking. Otherwise, it needs be called from a non-`VertxThread` thread and will become blocking."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:664
msgid "JPA batches changes you make to your entities and sends changes (it's called flush) at the end of the transaction or before a query.  This is usually a good thing as it's more efficient.  But if you want to check optimistic locking failures, do object validation right away or generally want to get immediate feedback, you can force the flush operation by calling `entity.flush()` or even use `entity.persistAndFlush()` to make it a single method call. This will allow you to catch any `PersistenceException` that could occur when JPA send those changes to the database.  Remember, this is less efficient so don't abuse it.  And your transaction still has to be committed."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:666
msgid "Here is an example of the usage of the flush method to allow making a specific action in case of `PersistenceException`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:680
#, no-wrap
msgid ""
"@ReactiveTransactional\n"
"public Uni<Void> create(Person person){\n"
"    //Here I use the persistAndFlush() shorthand method on a Panache repository to persist to database then flush the changes.\n"
"    return person.persistAndFlush()\n"
"            .onFailure(PersistenceException.class)\n"
"            .recoverWithItem(() -> {\n"
"                LOG.error(\"Unable to create the parameter\", pe);\n"
"                //in case of error, I save it to disk\n"
"                diskPersister.save(person);\n"
"                return null;\n"
"            });\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:688
msgid "The `@ReactiveTransactional` annotation will also work for testing.  This means that changes done during the test will be propagated to the database.  If you want any changes made to be rolled back at the end of the test you can use the `io.quarkus.test.TestReactiveTransaction` annotation.  This will run the test method in a transaction, but roll it back once the test method is complete to revert any database changes."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:689
#, no-wrap
msgid "Lock management"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:692
msgid "Panache provides direct support for database locking with your entity/repository, using `findById(Object, LockModeType)` or `find().withLock(LockModeType)`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:694
msgid "The following examples are for the active record pattern, but the same can be used with repositories."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:695
#, no-wrap
msgid "First: Locking using findById()."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:700
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:718
#, no-wrap
msgid "public class PersonEndpoint {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:711
#, no-wrap
msgid ""
"    @GET\n"
"    public Uni<Person> findByIdForUpdate(Long id){\n"
"        return Panache.withTransaction(() -> {\n"
"            return Person.<Person>findById(id, LockModeType.PESSIMISTIC_WRITE)\n"
"                    .invoke(person -> {\n"
"                        //do something useful, the lock will be released when the transaction ends.\n"
"                    });\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:713
#, no-wrap
msgid "Second: Locking in a find()."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:728
#, no-wrap
msgid ""
"    @GET\n"
"    public Uni<Person> findByNameForUpdate(String name){\n"
"        return Panache.withTransaction(() -> {\n"
"            return Person.<Person>find(\"name\", name).withLock(LockModeType.PESSIMISTIC_WRITE).firstResult()\n"
"                    .invoke(person -> {\n"
"                        //do something useful, the lock will be released when the transaction ends.\n"
"                    });\n"
"        });\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:730
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:733
msgid "Be careful that locks are released when the transaction ends, so the method that invokes the lock query must be called within a transaction."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:734
#, no-wrap
msgid "Custom IDs"
msgstr "自定义ID"

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:738
msgid "IDs are often a touchy subject, and not everyone's up for letting them handled by the framework, once again we have you covered."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:741
msgid "You can specify your own ID strategy by extending `PanacheEntityBase` instead of `PanacheEntity`. Then you just declare whatever ID you want as a public field:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:746
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntityBase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:755
#, no-wrap
msgid ""
"    @Id\n"
"    @SequenceGenerator(\n"
"            name = \"personSequence\",\n"
"            sequenceName = \"person_id_seq\",\n"
"            allocationSize = 1,\n"
"            initialValue = 4)\n"
"    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"personSequence\")\n"
"    public Integer id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:758
#, no-wrap
msgid ""
"    //...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:762
msgid "If you're using repositories, then you will want to extend `PanacheRepositoryBase` instead of `PanacheRepository` and specify your ID type as an extra type parameter:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:769
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheRepositoryBase<Person,Integer> {\n"
"    //...\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:771
#, no-wrap
msgid "Mocking"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:773
#, no-wrap
msgid "Using the active record pattern"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:778
msgid "If you are using the active record pattern you cannot use Mockito directly as it does not support mocking static methods, but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static methods, including your own."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:780
msgid "Add this dependency to your build file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:789
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-panache-mock</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:795
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-panache-mock\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:798
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:914
msgid "Given this simple entity:"
msgstr "提供这个简单的实体："

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:803
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntity {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:805
#, no-wrap
msgid "    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:810
#, no-wrap
msgid ""
"    public static Uni<List<Person>> findOrdered() {\n"
"        return find(\"ORDER BY name\").list();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:813
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:941
msgid "You can write your mocking test like this:"
msgstr "你可以像这样写你的模拟测试。"

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:818
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheFunctionalityTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:822
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheMocking() {\n"
"        PanacheMock.mock(Person.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:825
#, no-wrap
msgid ""
"        // Mocked classes always return a default value\n"
"        Assertions.assertEquals(0, Person.count().await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:829
#, no-wrap
msgid ""
"        // Now let's specify the return value\n"
"        Mockito.when(Person.count()).thenReturn(Uni.createFrom().item(23l));\n"
"        Assertions.assertEquals(23, Person.count().await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:833
#, no-wrap
msgid ""
"        // Now let's change the return value\n"
"        Mockito.when(Person.count()).thenReturn(Uni.createFrom().item(42l));\n"
"        Assertions.assertEquals(42, Person.count().await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:837
#, no-wrap
msgid ""
"        // Now let's call the original method\n"
"        Mockito.when(Person.count()).thenCallRealMethod();\n"
"        Assertions.assertEquals(0, Person.count().await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:840
#, no-wrap
msgid ""
"        // Check that we called it 4 times\n"
"        PanacheMock.verify(Person.class, Mockito.times(4)).count();// <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:846
#, no-wrap
msgid ""
"        // Mock only with specific parameters\n"
"        Person p = new Person();\n"
"        Mockito.when(Person.findById(12l)).thenReturn(Uni.createFrom().item(p));\n"
"        Assertions.assertSame(p, Person.findById(12l).await().indefinitely());\n"
"        Assertions.assertNull(Person.findById(42l).await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:854
#, no-wrap
msgid ""
"        // Mock throwing\n"
"        Mockito.when(Person.findById(12l)).thenThrow(new WebApplicationException());\n"
"        try {\n"
"            Person.findById(12l);\n"
"            Assertions.fail();\n"
"        } catch (WebApplicationException x) {\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:858
#, no-wrap
msgid ""
"        // We can even mock your custom methods\n"
"        Mockito.when(Person.findOrdered()).thenReturn(Uni.createFrom().item(Collections.emptyList()));\n"
"        Assertions.assertTrue(Person.findOrdered().await().indefinitely().isEmpty());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:864
#, no-wrap
msgid ""
"        PanacheMock.verify(Person.class).findOrdered();\n"
"        PanacheMock.verify(Person.class, Mockito.atLeastOnce()).findById(Mockito.any());\n"
"        PanacheMock.verifyNoMoreInteractions(Person.class);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:867
msgid "Be sure to call your `verify` and `do*` methods on `PanacheMock` rather than `Mockito`, otherwise you won't know what mock object to pass."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:868
#, no-wrap
msgid "Mocking `Mutiny.Session` and entity instance methods"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:871
msgid "If you need to mock entity instance methods, such as `persist()` you can do it by mocking the Hibernate Reactive `Mutiny.Session` object:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:876
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheMockingTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:879
#, no-wrap
msgid ""
"    @InjectMock\n"
"    Mutiny.Session session;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:886
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheSessionMocking() {\n"
"        Person p = new Person();\n"
"        // mocked via Mutiny.Session mocking\n"
"        p.persist().await().indefinitely();\n"
"        Assertions.assertNull(p.id);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:890
#, no-wrap
msgid ""
"        Mockito.verify(session, Mockito.times(1)).persist(Mockito.any());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:892
#, no-wrap
msgid "Using the repository pattern"
msgstr "使用资源库模式"

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:896
msgid "If you are using the repository pattern you can use Mockito directly, using the `quarkus-junit5-mockito` module, which makes mocking beans much easier:"
msgstr "如果你使用存储库模式，你可以直接使用Mockito，使用 `quarkus-junit5-mockito` 模块，这使得模拟Bean变得更加容易："

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:905
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5-mockito</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:911
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-junit5-mockito\")\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:919
#, no-wrap
msgid ""
"@Entity\n"
"public class Person {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:923
#, no-wrap
msgid ""
"    @Id\n"
"    @GeneratedValue\n"
"    public Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:926
#, no-wrap
msgid ""
"    public String name;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:929
msgid "And this repository:"
msgstr "还有这个储存库："

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:938
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheRepository<Person> {\n"
"    public Uni<List<Person>> findOrdered() {\n"
"        return find(\"ORDER BY name\").list();\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:948
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheFunctionalityTest {\n"
"    @InjectMock\n"
"    PersonRepository personRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:953
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheRepositoryMocking() throws Throwable {\n"
"        // Mocked classes always return a default value\n"
"        Assertions.assertEquals(0, mockablePersonRepository.count().await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:957
#, no-wrap
msgid ""
"        // Now let's specify the return value\n"
"        Mockito.when(mockablePersonRepository.count()).thenReturn(Uni.createFrom().item(23l));\n"
"        Assertions.assertEquals(23, mockablePersonRepository.count().await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:961
#, no-wrap
msgid ""
"        // Now let's change the return value\n"
"        Mockito.when(mockablePersonRepository.count()).thenReturn(Uni.createFrom().item(42l));\n"
"        Assertions.assertEquals(42, mockablePersonRepository.count().await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:965
#, no-wrap
msgid ""
"        // Now let's call the original method\n"
"        Mockito.when(mockablePersonRepository.count()).thenCallRealMethod();\n"
"        Assertions.assertEquals(0, mockablePersonRepository.count().await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:968
#, no-wrap
msgid ""
"        // Check that we called it 4 times\n"
"        Mockito.verify(mockablePersonRepository, Mockito.times(4)).count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:974
#, no-wrap
msgid ""
"        // Mock only with specific parameters\n"
"        Person p = new Person();\n"
"        Mockito.when(mockablePersonRepository.findById(12l)).thenReturn(Uni.createFrom().item(p));\n"
"        Assertions.assertSame(p, mockablePersonRepository.findById(12l).await().indefinitely());\n"
"        Assertions.assertNull(mockablePersonRepository.findById(42l).await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:982
#, no-wrap
msgid ""
"        // Mock throwing\n"
"        Mockito.when(mockablePersonRepository.findById(12l)).thenThrow(new WebApplicationException());\n"
"        try {\n"
"            mockablePersonRepository.findById(12l);\n"
"            Assertions.fail();\n"
"        } catch (WebApplicationException x) {\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:986
#, no-wrap
msgid ""
"        // We can even mock your custom methods\n"
"        Mockito.when(mockablePersonRepository.findOrdered()).thenReturn(Uni.createFrom().item(Collections.emptyList()));\n"
"        Assertions.assertTrue(mockablePersonRepository.findOrdered().await().indefinitely().isEmpty());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:993
#, no-wrap
msgid ""
"        Mockito.verify(mockablePersonRepository).findOrdered();\n"
"        Mockito.verify(mockablePersonRepository, Mockito.atLeastOnce()).findById(Mockito.any());\n"
"        Mockito.verify(mockablePersonRepository).persist(Mockito.<Person> any());\n"
"        Mockito.verifyNoMoreInteractions(mockablePersonRepository);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:995
#, no-wrap
msgid "How and why we simplify Hibernate Reactive mappings"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:999
msgid "When it comes to writing Hibernate Reactive entities, there are a number of annoying things that users have grown used to reluctantly deal with, such as:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:1002
msgid "Duplicating ID logic: most entities need an ID, most people don't care how it's set, because it's not really relevant to your model."
msgstr "重复ID逻辑：大多数实体需要一个ID，大多数人并不关心它是如何设置的，因为它与你的模型并不真正相关。"

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:1005
msgid "Dumb getters and setters: since Java lacks support for properties in the language, we have to create fields, then generate getters and setters for those fields, even if they don't actually do anything more than read/write the fields."
msgstr "繁琐的 getters 和 setters：由于Java语言中缺乏对属性的支持，我们必须创建字段，然后为这些字段getters 和 setters，即使它们除了read/write字段外实际上没有做任何事情。"

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:1011
#, fuzzy
msgid "Traditional EE patterns advise to split entity definition (the model) from the operations you can do on them (DAOs, Repositories), but really that requires an unnatural split between the state and its operations even though we would never do something like that for regular objects in the Object-Oriented architecture, where state and methods are in the same class. Moreover, this requires two classes per entity, and requires injection of the DAO or Repository where you need to do entity operations, which breaks your edit flow and requires you to get out of the code you're writing to set up an injection point before coming back to use it."
msgstr "传统的EE模式建议将实体定义（模型）与你可以对其进行的操作（DAO、Repositories）分开，但实际上这需要在状态和其操作之间进行不自然的分割，尽管在面向对象的架构中，我们永远不会对普通对象做这样的事情，因为状态和方法是在同一个类中。此外，这需要每个实体有两个类，并且需要在你需要进行实体操作的地方注入DAO或Repository，这就破坏了你的编辑流程，需要你从正在编写的代码中跳出来，建立一个注入点，然后再回来使用它。"

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:1013
msgid "Hibernate queries are super powerful, but overly verbose for common operations, requiring you to write queries even when you don't need all the parts."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:1015
msgid "Hibernate is very general-purpose, but does not make it trivial to do trivial operations that make up 90% of our model usage."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:1017
msgid "With Panache, we took an opinionated approach to tackle all these problems:"
msgstr "通过Panache，我们采取了一种有主见的方法来解决所有这些问题："

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:1020
msgid "Make your entities extend `PanacheEntity`: it has an ID field that is auto-generated. If you require a custom ID strategy, you can extend `PanacheEntityBase` instead and handle the ID yourself."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:1023
msgid "Use public fields. Get rid of dumb getter and setters. Under the hood, we will generate all getters and setters that are missing, and rewrite every access to these fields to use the accessor methods. This way you can still write _useful_ accessors when you need them, which will be used even though your entity users still use field accesses."
msgstr "使用公共字段。摆脱繁琐的getter和setters。在后台，我们将生成所有缺失的getter和setter，并重写对这些字段的每个访问，以使用访问器方法。这样，当你需要时，你仍然可以写出 _有用的_ 访问器，即使你的实体用户仍然使用字段访问，也会被使用。"

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:1026
msgid "With the active record pattern: put all your entity logic in static methods in your entity class and don't create DAOs.  Your entity superclass comes with lots of super useful static methods, and you can add your own in your entity class.  Users can just start using your entity `Person` by typing `Person.` and getting completion for all the operations in a single place."
msgstr "使用活动记录模式：把你所有的实体逻辑放在实体类的静态方法中，不要创建DAO。你的实体超类带有很多超级有用的静态方法，你也可以在你的实体类中添加你自己的静态方法。用户可以通过输入 `Person.` ，开始使用你的实体 `Person` ，并在一个地方获得所有操作的完成。"

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:1029
msgid "Don't write parts of the query that you don't need: write `Person.find(\"order by name\")` or `Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive)` or even better `Person.find(\"name\", \"stef\")`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:1031
msgid "That's all there is to it: with Panache, Hibernate Reactive has never looked so trim and neat."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:1032
#, no-wrap
msgid "Defining entities in external projects or jars"
msgstr "在外部项目或jar中定义实体"

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:1035
msgid "Hibernate Reactive with Panache relies on compile-time bytecode enhancements to your entities."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:1041
msgid "It attempts to identify archives with Panache entities (and consumers of Panache entities)  by the presence of the marker file `META-INF/panache-archive.marker`. Panache includes an annotation processor that will automatically create this file in archives that depend on Panache (even indirectly). If you have disabled annotation processors you may need to create this file manually in some cases."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:1045
msgid "If you include the jpa-modelgen annotation processor this will exclude the Panache annotation processor by default. If you do this you should either create the marker file yourself, or add the `quarkus-panache-common` as well, as shown below:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-reactive-panache.adoc:1066
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-compiler-plugin</artifactId>\n"
"    <version>${compiler-plugin.version}</version>\n"
"    <configuration>\n"
"      <annotationProcessorPaths>\n"
"        <annotationProcessorPath>\n"
"          <groupId>org.hibernate</groupId>\n"
"          <artifactId>hibernate-jpamodelgen</artifactId>\n"
"          <version>${hibernate.version}</version>\n"
"        </annotationProcessorPath>\n"
"        <annotationProcessorPath>\n"
"          <groupId>io.quarkus</groupId>\n"
"          <artifactId>quarkus-panache-common</artifactId>\n"
"          <version>${quarkus.platform.version}</version>\n"
"        </annotationProcessorPath>\n"
"      </annotationProcessorPaths>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""
