# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/funqy-http.adoc:6
#, no-wrap
msgid "Funqy HTTP Binding (Standalone)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:13
msgid "The guide walks through quickstart code to show you how you can deploy Funqy as a standalone service and invoke on Funqy functions using HTTP."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:20
msgid "The Funqy HTTP binding is not a replacement for REST over HTTP.  Because Funqy needs to be portable across a lot of different protocols and function providers its HTTP binding is very minimalistic and you will lose REST features like linking and the ability to leverage HTTP features like cache-control and conditional GETs.  You may want to consider using Quarkus's JAX-RS, Spring MVC, or Vert.x Web Reactive Routes support instead, although Funqy will have less overhead than these alternatives (except Vert.x which is still super fast)."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/funqy-http.adoc:21
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:26
msgid "Read about xref:funqy.adoc[Funqy Basics].  This is a short read!"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/funqy-http.adoc:27
#, no-wrap
msgid "The Quickstart"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:30
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:32
msgid "The solution is located in the `funqy-http-quickstart` {quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/funqy-http.adoc:33
#, no-wrap
msgid "The Code"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:37
msgid "If you look at the Java code, you'll see that there is no HTTP specific API.  Its just simple Java methods annotated with `@Funq`.  Simple, easy, straightforward."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/funqy-http.adoc:38
#, no-wrap
msgid "Maven Dependencies"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:41
msgid "To write Funqy HTTP functions, simply include the `quarkus-funqy-http` dependency into your Quarkus `pom.xml` file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:48
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-funqy-http</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/funqy-http.adoc:50
#, no-wrap
msgid "Build Project"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:55
#, no-wrap
msgid "mvn clean quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:58
msgid "This starts your functions in Quarkus dev mode."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/funqy-http.adoc:59
#, no-wrap
msgid "Execute Funqy HTTP functions"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:63
msgid "The URL path to execute a function is the function name.  For example if your function name is `foo` then the URL path to execute the function would be `/foo`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:67
msgid "The HTTP POST or GET methods can be used to invoke on a function.  The return value of the function is marshalled to JSON using the Jackson JSON library.  Jackson annotations can be used.  If your function has an input parameter, a POST invocation must use JSON as the input type.  Jackson is also used here for unmarshalling."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:70
msgid "You can invoke the `hello` function defined in {quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/PrimitiveFunctions.java[PrimitiveFunctions.java] by pointing your browser to http://localhost:8080/hello"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:74
msgid "Invoking the other functions in the quickstart requires an HTTP POST.  To execute the `greet` function defined in {quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/GreetingFunction.java[GreetingFunction.java] invoke this curl script."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:81
#, no-wrap
msgid ""
"curl \"http://localhost:8080/greet\" \\\n"
"-X POST \\\n"
"-H \"Content-Type: application/json\" \\\n"
"-d '{\"name\":\"Bill\"}'\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:86
msgid "Primitive types can also be passed as input using the standard JSON mapping for them.  To execute the `toLowerCase` function defined in {quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/PrimitiveFunctions.java[PrimitiveFunctions.java] invoke this curl script:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:93
#, no-wrap
msgid ""
"curl \"http://localhost:8080/toLowerCase\" \\\n"
"-X POST \\\n"
"-H \"Content-Type: application/json\" \\\n"
"-d '\"HELLO WORLD\"'\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:97
msgid "To execute the `double` function defined in {quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/PrimitiveFunctions.java[PrimitiveFunctions.java] invoke this curl script:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:104
#, no-wrap
msgid ""
"curl \"http://localhost:8080/double\" \\\n"
"-X POST \\\n"
"-H \"Content-Type: application/json\" \\\n"
"-d '2'\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/funqy-http.adoc:106
#, no-wrap
msgid "GET Query Parameter Mapping"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:112
msgid "For GET requests, the Funqy HTTP Binding also has a query parameter mapping for function input parameters.  Only bean style classes and `java.util.Map` can be used for your input parameter.  For bean style classes, query parameter names are mapped to properties on the bean class.  Here's an example of a simple `Map`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:119
#, no-wrap
msgid ""
"@Funq\n"
"public String hello(Map<String, Integer> map) {\n"
"...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:123
msgid "Key values must be a primitive type (except char) or `String`.  Values can be primitives (except char), `String`, `OffsetDateTime` or a complex bean style class.  For the above example, here's the corresponding curl request:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:127
#, no-wrap
msgid "curl \"http://localhost:8080/a=1&b=2\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:130
msgid "The `map` input parameter of the `hello` function would have the key value pairs: `a`->1, `b`->2."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:132
msgid "Bean style classes can also be use as the input parameter type.  Here's an example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:138
#, no-wrap
msgid ""
"public class Person {\n"
"    String first;\n"
"    String last;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:144
#, no-wrap
msgid ""
"    public String getFirst() { return first; }\n"
"    public void setFirst(String first) { this.first = first; }\n"
"    public String getLast() { return last; }\n"
"    public void setLast(String last) { this.last = last; }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:151
#, no-wrap
msgid ""
"public class MyFunctions {\n"
"    @Funq\n"
"    public String greet(Person p) {\n"
"       return \"Hello \" + p.getFirst() + \" \" + p.getLast();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:155
msgid "Property values can be any primitive type except `char`. It can also be `String`, and `OffsetDateTime`.  `OffsetDateTime` query param values must be in ISO-8601 format."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:157
msgid "You can invoke on this using an HTTP GET and query parameters:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:161
#, no-wrap
msgid "curl \"http://localhost:8080/greet?first=Bill&last=Burke\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:164
msgid "In the above request, the query parameter names are mapped to corresponding properties in the input class."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:166
msgid "The input class can also have nested bean classes.  Expanding on the previous example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:172
#, no-wrap
msgid ""
"public class Family {\n"
"    private Person dad;\n"
"    private Person mom;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:178
#, no-wrap
msgid ""
"    public Person getDad() { return dad; }\n"
"    public void setDad(Person dad) { this.dad = dad; }\n"
"    public Person getMom() { return mom; }\n"
"    public void setMom(Person mom) { this.mom = mom; }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:185
#: upstream/_versions/main/guides/funqy-http.adoc:211
#: upstream/_versions/main/guides/funqy-http.adoc:238
#: upstream/_versions/main/guides/funqy-http.adoc:270
#: upstream/_versions/main/guides/funqy-http.adoc:295
#, no-wrap
msgid ""
"public class MyFunctions {\n"
"    @Funq\n"
"    public String greet(Family family) {\n"
"       ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:189
msgid "In this case, query parameters for nested values use the `.` notation.  For example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:193
#, no-wrap
msgid "curl \"http://localhost:8080/greet?dad.first=John&dad.last=Smith&mom.first=Martha&mom.last=Smith\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:196
msgid "`java.util.List` and `Set` are also supported as property values.  For example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:201
#: upstream/_versions/main/guides/funqy-http.adoc:228
#: upstream/_versions/main/guides/funqy-http.adoc:260
#: upstream/_versions/main/guides/funqy-http.adoc:285
#, no-wrap
msgid ""
"public class Family {\n"
"    ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:204
#, no-wrap
msgid ""
"    List<String> pets;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:215
msgid "To invoke a GET request, just list the `pets` query parameter multiple times."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:219
#, no-wrap
msgid "curl \"http://localhost:8080/greet?pets=itchy&pets=scratchy\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:223
msgid "For more complex types, `List` and `Set` members must have an identifier in the query parameter.  For example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:231
#, no-wrap
msgid ""
"    List<Person> kids;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:244
msgid "Each `kids` query parameter must identify the kid they are referencing so that the runtime can figure out which property values go to which members in the list.  Here's the curl request:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:248
#, no-wrap
msgid "curl \"http://localhost:8080/greet?kids.1.first=Buffy&kids.2.first=Charlie\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:252
msgid "The above URL uses the value `1` and `2` to identity the target member of the list, but any unique string can be used."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:255
msgid "A property can also be a `java.util.Map`.  The key of the map can be any primitive type and `String`.  For example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:263
#, no-wrap
msgid ""
"    Map<String, String> address;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:273
msgid "The corresponding call would look like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:277
#, no-wrap
msgid "curl \"http://localhost:8080/greet?address.state=MA&address.city=Boston\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/funqy-http.adoc:280
msgid "If your `Map` value is a complex type, then just continue the notation by adding the property to set at the end."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:288
#, no-wrap
msgid ""
"    Map<String, Address> addresses;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/funqy-http.adoc:300
#, no-wrap
msgid "curl \"http://localhost:8080/greet?addresses.home.state=MA&addresses.home.city=Boston\"\n"
msgstr ""
