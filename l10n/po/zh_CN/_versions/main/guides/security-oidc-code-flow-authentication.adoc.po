# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-12-15 02:17+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "OpenID Connect authorization code flow mechanism for protecting web applications"
msgstr "用于保护网络应用的OpenID Connect授权代码流机制"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "To protect your web applications, you can use the industry-standard OpenID Connect (OIDC) Authorization Code Flow mechanism provided by the Quarkus OIDC extension."
msgstr "为了保护你的网络应用，你可以使用Quarkus OpenID Connect（OIDC）扩展提供的授权代码流机制。"

#. type: Title ==
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Overview of the OIDC authorization code flow mechanism"
msgstr "OIDC授权代码流机制概述"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The Quarkus OpenID Connect (OIDC) extension can protect application HTTP endpoints by using the OIDC Authorization Code Flow mechanism supported by OIDC-compliant authorization servers, such as link:https://www.keycloak.org[Keycloak]."
msgstr "Quarkus OpenID Connect（OIDC）扩展可以通过使用符合OIDC的授权服务器（如 link:https://www.keycloak.org[Keycloak）] 支持的OIDC授权代码流机制来保护应用程序的HTTP端点。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The Authorization Code Flow mechanism authenticates users of your web application by redirecting them to an OIDC provider, such as Keycloak, to log in.\n"
"After authentication, the OIDC provider redirects the user back to the application with an authorization code that confirms that authentication was successful.\n"
"Then, the application exchanges this code with the OIDC provider for an ID token (which represents the authenticated user), an access token, and a refresh token to authorize the user's access to the application."
msgstr "授权码流机制通过将网络应用程序的用户重定向到 OIDC 提供商（如 Keycloak）进行登录来验证用户身份。身份验证后，OIDC 提供商会将用户重定向回应用程序，并提供一个授权代码，确认身份验证成功。然后，应用程序将该代码与 OIDC 提供商交换 ID 令牌（代表已通过身份验证的用户）、访问令牌和刷新令牌，以授权用户访问应用程序。"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The following diagram outlines the Authorization Code Flow mechanism in Quarkus."
msgstr "下图概述了Quarkus中的授权代码流机制。"

#. type: Block title
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Authorization code flow mechanism in Quarkus"
msgstr "Quarkus中的授权代码流机制"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The Quarkus user requests access to a Quarkus `web-app` application."
msgstr "Quarkus 用户请求访问 Quarkus `web-app` 应用程序。"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The Quarkus web-app redirects the user to the authorization endpoint, that is, the OIDC provider for authentication."
msgstr "Quarkus网络应用程序将用户重定向到授权端点，也就是OIDC提供商进行认证。"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The OIDC provider redirects the user to a login and authentication prompt."
msgstr "OIDC供应商将用户重定向到一个登录和认证提示。"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "At the prompt, the user enters their user credentials."
msgstr "在提示下，用户输入他们的用户凭证。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The OIDC provider authenticates the user credentials entered and, if successful, issues an authorization code and redirects the user back to the Quarkus web-app with the code included as a query parameter."
msgstr "OIDC 提供商会对输入的用户凭据进行验证，如果验证成功，则会发出一个授权代码，并将用户重定向回 Quarkus 网络应用程序，同时将代码作为一个查询参数。"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The Quarkus web-app exchanges this authorization code with the OIDC provider for ID, access, and refresh tokens."
msgstr "Quarkus网络应用程序与OIDC提供者交换这个授权代码，以获得ID、访问和刷新令牌。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The authorization code flow is completed and the Quarkus web-app uses the tokens issued to access information about the user and grants the relevant role-based authorization to that user.\n"
"The following tokens are issued:"
msgstr "授权代码流程完成后，Quarkus 网络应用程序将使用所签发的令牌访问用户信息，并向该用户授予相关的基于角色的授权。发布的令牌如下"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "ID token: The Quarkus `web-app` application uses the user information in the ID token to enable the authenticated user to log in securely and to provide role-based access to the web application."
msgstr "ID令牌：Quarkus `web-app` 应用程序使用ID令牌中的用户信息，使认证的用户能够安全地登录，并提供基于角色的网络应用程序访问。"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Access token: The Quarkus web-app might use the access token to access the UserInfo API to get additional information about the authenticated user or to propagate it to another endpoint."
msgstr "访问令牌：Quarkus网络应用程序可能会使用访问令牌来访问UserInfo API，以获得关于认证用户的额外信息或将其传播到另一个端点。"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Refresh token: (Optional) If the ID and access tokens expire, the Quarkus web-app can use the refresh token to get new ID and access tokens."
msgstr "刷新令牌：（可选）如果ID和访问令牌过期，Quarkus网络应用程序可以使用刷新令牌来获得新的ID和访问令牌。"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "See also the xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties] reference guide."
msgstr "另请参见 link:security-oidc-configuration-properties-reference.html[OIDC配置属性] 参考指南。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "To learn about how you can protect web applications by using the OIDC Authorization Code Flow mechanism, see xref:security-oidc-code-flow-authentication-tutorial.adoc[Protect a web application by using OIDC authorization code flow]."
msgstr "要了解如何使用 OIDC 授权代码流机制保护网络应用程序，请参阅 xref:security-oidc-code-flow-authentication-tutorial.adoc[使用 OIDC 授权代码流保护网络应用] 程序。"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "If you want to protect service applications by using OIDC Bearer token authentication, see xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]."
msgstr "如果你想通过使用OIDC承载器令牌认证来保护服务应用程序，请参阅 link:security-oidc-bearer-token-authentication.html[OIDC承载器令牌认证] 。"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "For information about how to support multiple tenants, see xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy]."
msgstr "关于如何支持多个租户的信息，请参见 link:security-openid-connect-multitenancy.html[使用OpenID Connect多租户] 。"

#. type: Title ==
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Using the authorization code flow mechanism"
msgstr "使用授权代码流机制"

#. type: Title ===
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Configuring access to the OIDC provider endpoint"
msgstr "配置对OIDC提供者端点的访问"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The OIDC `web-app` application requires URLs of the OIDC provider's authorization, token, `JsonWebKey` (JWK) set, and possibly the `UserInfo`, introspection and end-session (RP-initiated logout) endpoints."
msgstr "OIDC `web-app` 应用程序需要 OIDC 提供商的授权、令牌、 `JsonWebKey` (JWK) 集的 URL，可能还需要 `UserInfo` 、反省和会话结束（RP 启动的注销）端点的 URL。"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "By convention, they are discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc.auth-server-url`."
msgstr "按照惯例，它们是通过在配置的 `quarkus.oidc.auth-server-url` ，增加一个 `/.well-known/openid-configuration` 路径来发现的。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Alternatively, if the discovery endpoint is not available, or you prefer to reduce the discovery endpoint round-trip, you can disable endpoint discovery and configure relative path values.\n"
"For example:"
msgstr "另外，如果发现端点不可用，或希望减少发现端点的往返次数，可以禁用端点发现并配置相对路径值。例如"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Some OIDC providers support metadata discovery but do not return all the endpoint URL values required for the authorization code flow to complete or to support application functions, for example, user logout.\n"
"To work around this limitation, you can configure the missing endpoint URL values locally, as outlined in the following example:"
msgstr "某些 OIDC 提供商支持元数据发现，但不会返回完成授权代码流或支持应用程序功能（如用户注销）所需的所有端点 URL 值。要绕过这一限制，可以在本地配置缺失的端点 URL 值，如下例所示："

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"You can use this same configuration to override a discovered endpoint URL if that URL does not work for the local Quarkus endpoint and a more specific value is required.\n"
"For example, a provider that supports both global and application-specific end-session endpoints returns a global end-session URL such as `http://localhost:8180/oidcprovider/account/global-logout`.\n"
"This URL will log the user out of all the applications into which the user is currently logged in.\n"
"However, if the requirement is for the current application to log the user out of a specific application only, you can override the global end-session URL, by setting the `quarkus.oidc.end-session-path=logout` parameter."
msgstr "如果发现的端点 URL 不适用于本地 Quarkus 端点，而需要更具体的值，则可以使用相同的配置来覆盖该 URL。例如，同时支持全局和应用程序特定端会话端点的提供程序会返回一个全局端会话 URL，如 `http://localhost:8180/oidcprovider/account/global-logout` .该 URL 将把用户从其当前登录的所有应用程序中注销。但是，如果要求当前应用程序只将用户注销某个特定应用程序，则可以通过设置 `quarkus.oidc.end-session-path=logout` 参数来覆盖全局结束会话 URL。"

#. type: Title ====
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "OIDC provider client authentication"
msgstr "OIDC供应商客户认证"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"OIDC providers typically require applications to be identified and authenticated when they interact with the OIDC endpoints.\n"
"Quarkus OIDC, specifically the `quarkus.oidc.runtime.OidcProviderClient` class, authenticates to the OIDC provider when the authorization code must be exchanged for the ID, access, and refresh tokens, or when the ID and access tokens must be refreshed or introspected."
msgstr "当应用程序与 OIDC 端点交互时，OIDC 提供商通常要求对应用程序进行识别和验证。Quarkus OIDC，特别是 `quarkus.oidc.runtime.OidcProviderClient` 类，在必须交换 ID、访问和刷新令牌的授权代码时，或者在必须刷新或反省 ID 和访问令牌时，会对 OIDC 提供商进行身份验证。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Typically, client id and client secrets are defined for a given application when it enlists to the OIDC provider.\n"
"All https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC client authentication] options are supported.\n"
"For example:"
msgstr "通常情况下，客户 ID 和客户机密是在特定应用程序加入 OIDC 提供商时为其定义的。支持所有 link:https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC 客户端身份验证] 选项。例如"

#. type: Block title
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Example of  `client_secret_basic`:"
msgstr " `client_secret_basic` 的例子："

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Or:"
msgstr "或者："

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The following example shows the secret retrieved from a xref:credentials-provider.adoc[credentials provider]:"
msgstr "下面的例子显示了从 link:credentials-provider.html[凭证提供者] 那里检索的秘密："

#. type: Block title
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Example of `client_secret_post`"
msgstr "例子 `client_secret_post` "

#. type: Block title
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Example of `client_secret_jwt`, where the signature algorithm is HS256:"
msgstr " `client_secret_jwt` 的例子，其中签名算法是HS256："

#. type: Block title
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Example of `client_secret_jwt`, where the secret is retrieved from a xref:credentials-provider.adoc[credentials provider]:"
msgstr " `client_secret_jwt` 的例子，其中秘密是从 link:credentials-provider.html[证书提供者] 那里获取的："

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Example of `private_key_jwt` with the PEM key inlined in application.properties, and where the signature algorithm is `RS256`:"
msgstr "`private_key_jwt` 示例，其中 PEM 密钥在 application.properties 中内嵌，签名算法为 `RS256` ："

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Example of `private_key_jwt` with the PEM key file, and where the signature algorithm is RS256:"
msgstr " `private_key_jwt` ，使用PEM密钥文件，且签名算法为RS256的例子："

#. type: Block title
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Example of `private_key_jwt` with the keystore file, where the signature algorithm is RS256:"
msgstr " `private_key_jwt` ，其中签名算法是RS256，用keystore文件的例子："

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that a client secret does not get sent to the OIDC provider, therefore avoiding the risk of a secret being intercepted by a  'man-in-the-middle' attack."
msgstr "使用 `client_secret_jwt` 或 `private_key_jwt` 身份验证方法可确保客户端秘密不会发送给 OIDC 提供商，从而避免秘密被 \"中间人 \"攻击截获的风险。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid "Example how JWT Bearer token can be used to authenticate client"
msgstr ""

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid "Use JWT bearer token to authenticate OIDC provider client, see the link:https://www.rfc-editor.org/rfc/rfc7523#section-2.2[Using JWTs for Client Authentication] section for more information."
msgstr ""

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid "Path to a JWT bearer token. Quarkus loads a new token from a filesystem and reloads it when the token has expired."
msgstr ""

#. type: Title =====
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Additional JWT authentication options"
msgstr "额外的JWT认证选项"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"If `client_secret_jwt`, `private_key_jwt`, or an Apple `post_jwt` authentication methods are used, then you can customize the JWT signature algorithm, key identifier, audience, subject and issuer.\n"
"For example:"
msgstr "如果使用 `client_secret_jwt` 、 `private_key_jwt` 或 Apple `post_jwt` 身份验证方法，则可以自定义 JWT 签名算法、密钥标识符、受众、主题和签发人。例如"

#. type: Title =====
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Apple POST JWT"
msgstr "苹果POST JWT"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The Apple OIDC provider uses a `client_secret_post` method whereby a secret is a JWT produced with a `private_key_jwt` authentication method, but with the Apple account-specific issuer and subject claims."
msgstr "Apple OIDC 提供商使用 `client_secret_post` 方法，其中的秘密是使用 `private_key_jwt` 身份验证方法生成的 JWT，但带有特定于 Apple 帐户的签发人和主体声明。"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "In Quarkus Security, `quarkus-oidc` supports a non-standard `client_secret_post_jwt` authentication method, which you can configure as follows:"
msgstr "在Quarkus Security中， `quarkus-oidc` 支持一种非标准的 `client_secret_post_jwt` 认证方法，你可以按以下方式进行配置："

#. type: Title =====
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "mutual TLS (mTLS)"
msgstr "相互TLS (mTLS)"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Some OIDC providers might require that a client is authenticated as part of the mutual TLS  authentication process."
msgstr "有些 OIDC 提供商可能会要求将客户端身份验证作为 TLS 相互身份验证过程的一部分。"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The following example shows how you can configure `quarkus-oidc` to support `mTLS`:"
msgstr "下面的例子显示了如何配置 `quarkus-oidc` ，以支持 `mTLS` ："

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "POST query"
msgstr "POST 查询"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid "Some providers, such as the xref:security-openid-connect-providers.adoc#strava[Strava OAuth2 provider], require client credentials be posted as HTTP POST query parameters:"
msgstr ""

#. type: Title ====
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Introspection endpoint authentication"
msgstr "自省端点认证"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Some OIDC providers require authentication to its introspection endpoint by using Basic authentication and with credentials that are different from the `client_id` and `client_secret`.\n"
"If you have previously configured security authentication to support either the `client_secret_basic` or `client_secret_post` client authentication methods as described in the <<oidc-provider-client-authentication,OIDC provider client authentication>> section, you might need to apply the additional configuration as follows."
msgstr "某些 OIDC 提供商要求通过使用基本身份验证和不同于 `client_id` 和 `client_secret` 的凭据对其自省端点进行身份验证。 如果您之前已配置了安全身份验证以支持 `client_secret_basic` 或 `client_secret_post` xref:oidc-provider-client-authentication[客户端身份] 验证方法（如 xref:oidc-provider-client-authentication[OIDC 提供商客户端身份] 验证部分所述），则可能需要按如下步骤应用附加配置。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "If the tokens have to be introspected and the introspection endpoint-specific authentication mechanism is required, you can configure `quarkus-oidc` as follows:"
msgstr "如果必须对令牌进行反省，并且需要特定于反省端点的身份验证机制，则可按如下方式配置 `quarkus-oidc` ："

#. type: Title ====
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "OIDC request filters"
msgstr "OIDC 申请过滤器"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can filter OIDC requests made by Quarkus to the OIDC provider by registering one or more `OidcRequestFilter` implementations, which can update or add new request headers and can also log requests."
msgstr "您可以通过注册一个或多个 `OidcRequestFilter` 实现来过滤 Quarkus 向 OIDC 提供商发出的 OIDC 请求，这些实现可以更新或添加新的请求标头，还可以记录请求。"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid "For example:"
msgstr "例如："

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Get `OidcConfigurationMetadata`, which contains all supported OIDC endpoint addresses."
msgstr "获取 `OidcConfigurationMetadata` ，其中包含所有支持的 OIDC 端点地址。"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Use `OidcConfigurationMetadata` to filter requests to the OIDC token endpoint only."
msgstr "如果端点是公开的，则默认租户的 `OidcConfigurationMetadata` 会被注入。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Alternatively, you can use an `@OidcEndpoint` annotation to apply this filter to responses from the OIDC discovery endpoint only:"
msgstr "或者，您也可以使用 `@OidcEndpoint` 注释将此过滤器仅应用于来自 OIDC 发现端点的响应："

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Restrict this filter to requests targeting the OIDC discovery endpoint only."
msgstr "此过滤器仅限于针对 OIDC 发现端点的请求。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"`OidcRequestContextProperties` can be used to access request properties.\n"
"Currently, you can use a `tenand_id` key to access the OIDC tenant id and a `grant_type` key to access the grant type which the OIDC provider uses to acquire tokens.\n"
"The `grant_type` can only be set to either `authorization_code` or `refresh_token` grant type, when requests are made to the token endpoint. It is `null` in all other cases."
msgstr "`OidcRequestContextProperties` 可用于访问请求属性。目前，可以使用 密钥访问 OIDC 租户 ID，使用 密钥访问 OIDC 提供商用于获取令牌的授予类型。 只能在向令牌端点发出请求时设置为 或 授予类型。在所有其他情况下， 。 `tenand_id` `grant_type` `grant_type` `authorization_code` `refresh_token` `null` "

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "OIDC response filters"
msgstr "OIDC 响应滤波器"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can filter responses from the OIDC providers by registering one or more `OidcResponseFilter` implementations, which can check the response status, headers and body in order to log them or perform other actions."
msgstr "您可以通过注册一个或多个 `OidcResponseFilter` 实现来过滤来自 OIDC 提供商的响应，这些实现可以检查响应状态、标头和正文，以便记录它们或执行其他操作。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can have a single filter intercepting all the OIDC responses, or use an `@OidcEndpoint` annotation to apply this filter to the specific endpoint responses only. For example:"
msgstr "您可以使用单个过滤器拦截所有 OIDC 响应，也可以使用 `@OidcEndpoint` 注释将此过滤器仅应用于特定的端点响应。例如"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Restrict this filter to requests targeting the OIDC token endpoint only."
msgstr "此过滤器仅限于针对 OIDC 令牌端点的请求。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Check the response `Content-Type` header."
msgstr "检查响应 `Content-Type` 标头。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Use `OidcRequestContextProperties` request properties to check only an `authorization_code` token grant response for the `code-flow-user-info-cached-in-idtoken` tenant."
msgstr "使用 `OidcRequestContextProperties` 请求属性，只检查 `code-flow-user-info-cached-in-idtoken` 租户的 `authorization_code` 令牌授予响应。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Confirm the response JSON contains an `id_token` property."
msgstr "确认响应 JSON 包含 `id_token` 属性。"

#. type: Title ====
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Redirecting to and from the OIDC provider"
msgstr "重定向进出OIDC供应商"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"When a user is redirected to the OIDC provider to authenticate, the redirect URL includes a `redirect_uri` query parameter, which indicates to the provider where the user has to be redirected to when the authentication is complete.\n"
"In our case, this is the Quarkus application."
msgstr "当用户被重定向到 OIDC 提供商处进行身份验证时，重定向 URL 会包含一个 `redirect_uri` 查询参数，向提供商指明身份验证完成后用户必须被重定向到的位置。在我们的例子中，这就是 Quarkus 应用程序。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Quarkus sets this parameter to the current application request URL by default.\n"
"For example, if a user is trying to access a Quarkus service endpoint at `http://localhost:8080/service/1`, then the `redirect_uri` parameter is set to `http://localhost:8080/service/1`.\n"
"Similarly, if the request URL is `http://localhost:8080/service/2`, then the `redirect_uri` parameter is set to `http://localhost:8080/service/2`."
msgstr "Quarkus 默认将此参数设置为当前应用程序请求 URL。例如，如果用户试图访问位于 `http://localhost:8080/service/1` ，则 `redirect_uri` 参数设置为 `http://localhost:8080/service/1` .同样，如果请求 URL 为 `http://localhost:8080/service/2` ，则 `redirect_uri` 参数设置为 `http://localhost:8080/service/2` ."

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Some OIDC providers require the `redirect_uri` to have the same value for a given application, for example, `http://localhost:8080/service/callback`, for all the redirect URLs.\n"
"In such cases, a `quarkus.oidc.authentication.redirect-path` property has to be set.\n"
"For example, `quarkus.oidc.authentication.redirect-path=/service/callback`, and Quarkus will set the `redirect_uri` parameter to an absolute URL such as `http://localhost:8080/service/callback`, which will be the same regardless of the current request URL."
msgstr "有些 OIDC 提供商要求 `redirect_uri` 对特定应用程序具有相同的值，例如、 `http://localhost:8080/service/callback` ，所有重定向 URL 都必须具有相同的值。在这种情况下，必须设置 `quarkus.oidc.authentication.redirect-path` 属性。例如， `quarkus.oidc.authentication.redirect-path=/service/callback` ，Quarkus 会将 `redirect_uri` 参数设置为绝对 URL，如 `http://localhost:8080/service/callback` ，无论当前请求的 URL 如何，该 URL 都是相同的。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"If `quarkus.oidc.authentication.redirect-path` is set, but you need the original request URL to be restored after the user is redirected back to a unique callback URL, for example,  `http://localhost:8080/service/callback`, set `quarkus.oidc.authentication.restore-path-after-redirect` property to `true`.\n"
"This will restore the request URL such as `http://localhost:8080/service/1`."
msgstr "如果设置了 `quarkus.oidc.authentication.redirect-path` ，但需要在用户被重定向到唯一的回调 URL（例如）后恢复原来的请求 URL，则应将 属性设置为 、 `http://localhost:8080/service/callback` 则应将 `quarkus.oidc.authentication.restore-path-after-redirect` 属性设置为 `true` 。这将恢复请求 URL，如 `http://localhost:8080/service/1` ."

#. type: Title ====
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Customizing authentication requests"
msgstr "定制认证请求"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "By default, only the `response_type` (set to `code`), `scope` (set to `openid`), `client_id`, `redirect_uri`, and `state` properties are passed as HTTP query parameters to the OIDC provider's authorization endpoint when the user is redirected to it to authenticate."
msgstr "默认情况下，当用户被重定向到 OIDC 提供商的授权端点进行身份验证时，只有 `response_type` （设置为 `code` ）、 `scope` （设置为 `openid` ）、 `client_id` 、 `redirect_uri` 和 `state` 属性会作为 HTTP 查询参数传递给 OIDC 提供商的授权端点。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"You can add more properties to it with `quarkus.oidc.authentication.extra-params`.\n"
"For example, some OIDC providers might choose to return the authorization code as part of the redirect URI's fragment, which would break the authentication process.\n"
"The following example shows how you can work around this issue:"
msgstr "您可以通过 `quarkus.oidc.authentication.extra-params` 添加更多属性。例如，某些 OIDC 提供商可能会选择将授权代码作为重定向 URI 片段的一部分返回，这样就会破坏身份验证过程。下面的示例展示了如何解决这个问题："

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "See also the <<oidc-redirect-filters>> section explaining how a custom `OidcRedirectFilter` can be used to customize OIDC redirects, including those to the OIDC authorization endpoint."
msgstr "另请参阅 <<oidc-redirect-filters>> 部分，了解如何使用自定义 `OidcRedirectFilter` 来自定义 OIDC 重定向，包括重定向到 OIDC 授权端点。"

#. type: Title ====
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Customizing the authentication error response"
msgstr "定制认证错误响应"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"When the user is redirected to the OIDC authorization endpoint to authenticate and, if necessary, authorize the Quarkus application, this redirect request might fail, for example, when an invalid scope is included in the redirect URI.\n"
"In such cases, the provider redirects the user back to Quarkus with `error` and `error_description` parameters instead of the expected `code` parameter."
msgstr "当用户被重定向到 OIDC 授权端点以验证并在必要时授权 Quarkus 应用程序时，该重定向请求可能会失败，例如，当重定向 URI 中包含无效范围时。在这种情况下，提供程序会使用 `error` 和 `error_description` 参数而不是预期的 `code` 参数将用户重定向回 Quarkus。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "For example, this can happen when an invalid scope or other invalid parameters are included in the redirect to the provider."
msgstr "例如，当重定向到提供程序时包含了无效范围或其他无效参数，就可能发生这种情况。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"In such cases, an HTTP `401` error is returned by default.\n"
"However, you can request that a custom public error endpoint be called to return a more user-friendly HTML error page.\n"
"To do this, set the `quarkus.oidc.authentication.error-path` property, as shown in the following example:"
msgstr "在这种情况下，默认情况下会返回 HTTP `401` 错误。不过，你可以要求调用一个自定义的公共错误端点，以返回一个对用户更友好的 HTML 错误页面。为此，请设置 `quarkus.oidc.authentication.error-path` 属性，如下例所示："

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Ensure that the property starts with a forward slash (/) character and the path is relative to the base URI of the current endpoint.\n"
"For example, if it is set to '/error' and the current request URI is `https://localhost:8080/callback?error=invalid_scope`, then a final redirect is made to `https://localhost:8080/error?error=invalid_scope`."
msgstr "确保该属性以斜线 (/) 字符开头，且路径相对于当前端点的基本 URI。例如，如果属性设置为\"/error\"，而当前请求 URI 为 `https://localhost:8080/callback?error=invalid_scope` ，则最终重定向到 `https://localhost:8080/error?error=invalid_scope` ."

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "To prevent the user from being redirected to this page to be re-authenticated, ensure that this error endpoint is a public resource."
msgstr "为防止用户被重定向到此页面重新进行身份验证，请确保此错误端点是公共资源。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "OIDC redirect filters"
msgstr "OIDC 重定向过滤器"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can register one or more `io.quarkus.oidc.OidcRedirectFilter` implementations to filter OIDC redirects to OIDC authorization and logout endpoints but also local redirects to custom error and session expired pages. Custom `OidcRedirectFilter` can add additional query parameters, response headers and set new cookies."
msgstr "您可以注册一个或多个 `io.quarkus.oidc.OidcRedirectFilter` 实现，以过滤指向 OIDC 授权和注销端点的 OIDC 重定向，以及指向自定义错误和会话过期页面的本地重定向。自定义 `OidcRedirectFilter` 可添加额外的查询参数、响应标头和设置新的 cookies。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "For example, the following simple custom `OidcRedirectFilter` adds an additional query parameter and a custom response header for all redirect requests that can be done by Quarkus OIDC:"
msgstr "例如，下面这个简单的自定义 `OidcRedirectFilter` 为所有重定向请求添加了一个额外的查询参数和一个自定义响应头，Quarkus OIDC 可以完成这些操作："

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Add an additional query parameter. Note the queury names and values are URL-encoded by Quarkus OIDC, a `redirect-filtered=true%20C` query parameter is added to the redirect URI in this case."
msgstr "添加额外的查询参数。请注意，queury 名称和值由 Quarkus OIDC 进行 URL 编码，在这种情况下，重定向 URI 中会添加 `redirect-filtered=true%20C` 查询参数。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Add a custom HTTP response header."
msgstr "添加自定义 HTTP 响应标头"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "See also the <<customize-authentication-requests>> section how to configure additional query parameters for OIDC authorization point."
msgstr "另请参阅 <<customize-authentication-requests>> 部分，了解如何为 OIDC 授权点配置其他查询参数。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Custom `OidcRedirectFilter` for local error and session expired pages can also create secure cookies to help with generating such pages."
msgstr "用于本地错误和会话过期页面的自定义 `OidcRedirectFilter` 也可创建安全 cookie，以帮助生成此类页面。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "For example, let's assume you need to redirect the current user whose session has expired to a custom session expired page available at `http://localhost:8080/session-expired-page`. The following custom `OidcRedirectFilter` encrypts the user name in a custom `session_expired` cookie using an OIDC tenant client secret:"
msgstr "例如，假设您需要将会话过期的当前用户重定向到一个自定义的会话过期页面，该页面位于 `http://localhost:8080/session-expired-page` .下面的自定义 `OidcRedirectFilter` 使用 OIDC 租户客户端秘密对自定义 `session_expired` cookie 中的用户名进行了加密："

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Make sure this redirect filter is only called during a redirect to the session expired page."
msgstr "确保只有在重定向到会话过期页面时才调用此重定向过滤器。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Access `AuthorizationCodeTokens` tokens associated with the now expired session as a `RoutingContext`  attribute."
msgstr "访问 `AuthorizationCodeTokens` 与现已过期的会话相关联的令牌，作为 `RoutingContext` 属性。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Decode ID token claims and get a user name."
msgstr "解码 ID 令牌请求并获取用户名。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Save the user name in a JWT token encrypted with the current OIDC tenant's client secret."
msgstr "将用户名保存在用当前 OIDC 租户的客户端秘密加密的 JWT 令牌中。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Create a custom `session_expired` cookie valid for 5 seconds which joins the encrypted token and a tenant id using a \"|\" separator. Recording a tenant id in a custom cookie can help to generate correct session expired pages in a multi-tenant OIDC setup."
msgstr "创建一个有效期为 5 秒的自定义 `session_expired` cookie，使用\"|\"分隔符连接加密令牌和租户 ID。在自定义 cookie 中记录租户 ID 有助于在多租户 OIDC 设置中生成正确的会话过期页面。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Next, a public JAX-RS resource which generates session expired pages can use this cookie to create a page tailored for this user and the corresponding OIDC tenant, for example:"
msgstr "接下来，生成会话过期页面的公共 JAX-RS 资源就可以使用此 cookie 来创建专为该用户和相应 OIDC 租户（例如）定制的页面："

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Inject `TenantConfigBean` which can be used to access all the current OIDC tenant configurations."
msgstr "注入 `TenantConfigBean` ，可用于访问所有当前 OIDC 租户配置。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Split the custom cookie value into 2 parts, first part is the encrypted token, last part is the tenant id."
msgstr "将自定义 cookie 值分成两部分，第一部分是加密令牌，最后一部分是租户 ID。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Get the OIDC tenant configuration."
msgstr "获取 OIDC 租户配置。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Decrypt the cookie value using the OIDC tenant's client secret."
msgstr "使用 OIDC 租户的客户端秘密解密 cookie 值。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Remove the custom cookie."
msgstr "移除自定义 cookie。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Use the username in the decrypted token and the tenant id to generate the service expired page response."
msgstr "使用解密令牌中的用户名和租户 ID 生成服务过期页面响应。"

#. type: Title ===
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Accessing authorization data"
msgstr "访问授权数据"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can access information about authorization in different ways."
msgstr "您可以通过不同方式获取授权信息。"

#. type: Title ====
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Accessing ID and access tokens"
msgstr "访问ID和访问令牌"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The OIDC code authentication mechanism acquires three tokens during the authorization code flow: https://openid.net/specs/openid-connect-core-1_0.html#IDToken[ID token], access token, and refresh token."
msgstr "OIDC 代码验证机制在授权代码流程中获取三个令牌： link:https://openid.net/specs/openid-connect-core-1_0.html#IDToken[ID 令] 牌、访问令牌和刷新令牌。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The ID token is always a JWT token and represents a user authentication with the JWT claims.\n"
"You can use this to get the issuing OIDC endpoint, the username, and other information called _claims_.\n"
"You can access ID token claims by injecting `JsonWebToken` with an `IdToken` qualifier:"
msgstr "ID 令牌始终是一个 JWT 令牌，代表使用 JWT 索赔进行的用户身份验证。您可以用它来获取签发的 OIDC 端点、用户名和其他称为 _权利要求的_ 信息。您可以通过注入带有 `IdToken` 限定符的 `JsonWebToken` 来访问 ID 令牌声明："

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The OIDC `web-app` application usually uses the access token to access other endpoints on behalf of the currently logged-in user.\n"
"You can access the raw access token as follows:"
msgstr "OIDC `web-app` 应用程序通常使用访问令牌代表当前登录用户访问其他端点。访问原始访问令牌的方法如下："

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "When an authorization code flow access token is injected as `JsonWebToken`, its verification is automatically enabled, in addition to the mandatory ID token verification. If really needed, you can disable this code flow access token verification with `quarkus.oidc.authentication.verify-access-token=false`."
msgstr "当注入授权代码流访问令牌（ `JsonWebToken` ）时，除了必须的 ID 令牌验证外，还会自动启用其验证。如果确实需要，可通过 `quarkus.oidc.authentication.verify-access-token=false` 关闭代码流访问令牌验证。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "`AccessTokenCredential` is used if the access token issued to the Quarkus `web-app` application is opaque (binary) and cannot be parsed to a `JsonWebToken` or if the inner content is necessary for the application."
msgstr "`AccessTokenCredential` 如果发给 Quarkus 应用程序的访问令牌是不透明的（二进制），无法解析为 ，或者应用程序需要内部内容，则会使用该访问令牌。 `web-app` `JsonWebToken` "

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Injection of the `JsonWebToken` and `AccessTokenCredential` is supported in both `@RequestScoped` and `@ApplicationScoped` contexts."
msgstr "在 `@RequestScoped` 和 `@ApplicationScoped` 上下文中都支持注入 `JsonWebToken` 和 `AccessTokenCredential` 。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Quarkus OIDC uses the refresh token to refresh the current ID and access tokens as part of its <<session-management,session management>> process."
msgstr "作为 xref:session-management[会话管理] 流程的一部分，Quarkus OIDC 使用刷新令牌刷新当前 ID 和访问令牌。"

#. type: Title ====
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "User info"
msgstr "用户信息"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"If the ID token does not provide enough information about the currently authenticated user, you can get more information from the `UserInfo` endpoint.\n"
"Set the `quarkus.oidc.authentication.user-info-required=true` property to request a link:https://openid.net/specs/openid-connect-core-1_0.html#UserInfo[UserInfo] JSON object from the OIDC `UserInfo` endpoint."
msgstr "如果 ID 标记无法提供有关当前已验证用户的足够信息，可以从 `UserInfo` 端点获取更多信息。设置 `quarkus.oidc.authentication.user-info-required=true` 属性可从 OIDC `UserInfo` 端点请求一个 link:https://openid.net/specs/openid-connect-core-1_0.html#UserInfo[UserInfo] JSON 对象。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"A request is sent to the OIDC provider `UserInfo` endpoint by using the access token returned with the authorization code grant response, and an `io.quarkus.oidc.UserInfo` (a simple `jakarta.json.JsonObject` wrapper) object is created.\n"
"`io.quarkus.oidc.UserInfo` can be injected or accessed as a SecurityIdentity `userinfo` attribute."
msgstr "通过使用授权码授予响应返回的访问令牌，向 OIDC 提供商 `UserInfo` 端点发送请求，并创建 `io.quarkus.oidc.UserInfo` （一个简单的 `jakarta.json.JsonObject` 封装器）对象。 `io.quarkus.oidc.UserInfo` 可作为 SecurityIdentity `userinfo` 属性注入或访问。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "`quarkus.oidc.authentication.user-info-required` is automatically enabled if one of these conditions is met:"
msgstr "`quarkus.oidc.authentication.user-info-required` 如果满足其中一个条件，就会自动启用："

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "if `quarkus.oidc.roles.source` is set to `userinfo` or `quarkus.oidc.token.verify-access-token-with-user-info` is set to `true` or `quarkus.oidc.authentication.id-token-required` is set to `false`, the current OIDC tenant must support a UserInfo endpoint in these cases."
msgstr "如果 `quarkus.oidc.roles.source` 被设为 `userinfo` 或 `quarkus.oidc.token.verify-access-token-with-user-info` 被设为 `true` 或 `quarkus.oidc.authentication.id-token-required` 被设为 `false` ，在这些情况下，当前 OIDC 租户必须支持 UserInfo 端点。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "if `io.quarkus.oidc.UserInfo` injection point is detected but only if the current OIDC tenant supports a UserInfo endpoint."
msgstr "如果检测到 `io.quarkus.oidc.UserInfo` 注入点，但前提是当前 OIDC 租户支持 UserInfo 端点。"

#. type: Title ====
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Accessing the OIDC configuration information"
msgstr "访问OIDC配置信息"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The current tenant's discovered link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect configuration metadata] is represented by `io.quarkus.oidc.OidcConfigurationMetadata` and can be injected or accessed as a `SecurityIdentity` `configuration-metadata` attribute."
msgstr "当前租户发现的 link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect 配置元数据] 由 `io.quarkus.oidc.OidcConfigurationMetadata` 表示，可作为 `SecurityIdentity` `configuration-metadata` 属性注入或访问。"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid "The default tenant's `OidcConfigurationMetadata` is injected if the endpoint is public."
msgstr "如果端点是公开的，则默认租户的 `OidcConfigurationMetadata` 会被注入。"

#. type: Title ====
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Mapping token claims and `SecurityIdentity` roles"
msgstr "映射令牌要求和 `SecurityIdentity` 角色"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The way the roles are mapped to the SecurityIdentity roles from the verified tokens is identical to how it is done for the xref:security-oidc-bearer-token-authentication.adoc[Bearer tokens].\n"
"The only difference is that https://openid.net/specs/openid-connect-core-1_0.html#IDToken[ID token] is used as a source of the roles by default."
msgstr "从已验证的令牌将角色映射到 SecurityIdentity 角色的方法与不 xref:security-oidc-bearer-token-authentication.adoc[记名令牌] 的方法相同。唯一不同的是， link:https://openid.net/specs/openid-connect-core-1_0.html#IDToken[ID 令牌] 默认用作角色的来源。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"If you use Keycloak, set a `microprofile-jwt` client scope for the ID token to contain a `groups` claim.\n"
"For more information, see the link:https://www.keycloak.org/docs/latest/server_admin/#protocol[Keycloak server administration guide]."
msgstr "如果使用 Keycloak，请为 ID 令牌设置 `microprofile-jwt` 客户端范围，以包含 `groups` 声明。更多信息，请参阅 link:https://www.keycloak.org/docs/latest/server_admin/#protocol[Keycloak 服务器管理指南] 。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "However, depending on your OIDC provider, roles might be stored in the access token or the user info."
msgstr "不过，根据 OIDC 提供商的不同，角色可能会存储在访问令牌或用户信息中。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "If the access token contains the roles and this access token is not meant to be propagated to the downstream endpoints, then set `quarkus.oidc.roles.source=accesstoken`."
msgstr "如果访问令牌包含角色，且该访问令牌不打算传播给下游端点，则设置 `quarkus.oidc.roles.source=accesstoken` 。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "If UserInfo is the source of the roles, then set `quarkus.oidc.roles.source=userinfo`, and if needed, `quarkus.oidc.roles.role-claim-path`."
msgstr "如果 UserInfo 是角色的来源，则设置 `quarkus.oidc.roles.source=userinfo` ，如果需要，则设置 `quarkus.oidc.roles.role-claim-path` 。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Additionally, you can also use a custom `SecurityIdentityAugmentor` to add the roles.\n"
"For more information, see xref:security-customization.adoc#security-identity-customization[SecurityIdentity customization].\n"
"You can also map `SecurityIdentity` roles created from token claims to deployment-specific roles with the xref:security-authorize-web-endpoints-reference.adoc#map-security-identity-roles[HTTP Security policy]."
msgstr "此外，还可以使用自定义 `SecurityIdentityAugmentor` 添加角色。有关更多信息，请参阅 xref:security-customization.adoc#security-identity-customization[SecurityIdentity 自定义] 。您还可以使用 xref:security-authorize-web-endpoints-reference.adoc#map-security-identity-roles[HTTP 安全策略] 将从令牌声明创建的 `SecurityIdentity` 角色映射到特定于部署的角色。"

#. type: Title ===
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Ensuring validity of tokens and authentication data"
msgstr "确保令牌和认证数据的有效性"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"A core part of the authentication process is ensuring the chain of trust and validity of the information.\n"
"This is done by ensuring tokens can be trusted."
msgstr "身份验证流程的核心部分是确保信息的信任链和有效性。要做到这一点，就必须确保令牌是可信的。"

#. type: Title ====
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Token verification and introspection"
msgstr "代币验证和反省"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The verification process of OIDC authorization code flow tokens follows the Bearer token authentication token verification and introspection logic.\n"
"For more information, see the xref:security-oidc-bearer-token-authentication.adoc#bearer-token-token-verification-introspection[Token verification and introspection] section of the \"Quarkus OpenID Connect (OIDC) Bearer token authentication\" guide."
msgstr "OIDC 授权代码流令牌的验证过程遵循不记名令牌身份验证令牌验证和反省逻辑。更多信息，请参阅 \"Quarkus OpenID Connect (OIDC) 不记名 xref:security-oidc-bearer-token-authentication.adoc#bearer-token-token-verification-introspection[令牌] 身份验证 \"指南中的 xref:security-oidc-bearer-token-authentication.adoc#bearer-token-token-verification-introspection[令牌验证和反省] 部分。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"With Quarkus `web-app` applications, only the `IdToken` is verified by default because the access token is not used to access the current Quarkus web-app endpoint and is intended to be propagated to the services expecting this access token.\n"
"If you expect the access token to contain the roles required to access the current Quarkus endpoint (`quarkus.oidc.roles.source=accesstoken`), then it will also be verified."
msgstr "对于 Quarkus `web-app` 应用程序，默认情况下只验证 `IdToken` ，因为访问令牌不是用来访问当前 Quarkus 网络应用程序端点的，而是要传播给期待此访问令牌的服务。如果您希望访问令牌包含访问当前 Quarkus 端点 ( `quarkus.oidc.roles.source=accesstoken` ) 所需的角色，那么它也将被验证。"

#. type: Title ====
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Token introspection and UserInfo cache"
msgstr "令牌自省和UserInfo缓存"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Code flow access tokens are not introspected unless they are expected to be the source of roles.\n"
"However, they will be used to get `UserInfo`.\n"
"There will be one or two remote calls with the code flow access token if the token introspection, `UserInfo`, or both are required."
msgstr "代码流访问令牌不会被反省，除非它们被认为是角色的来源。不过，它们将用于获取 `UserInfo` 。如果需要对代码流访问令牌进行反省、 `UserInfo` 或同时进行反省，则会使用代码流访问令牌进行一到两次远程调用。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "For more information about using the default token cache or registering a custom cache implementation, see xref:security-oidc-bearer-token-authentication.adoc#bearer-token-token-introspection-userinfo-cache[Token introspection and UserInfo cache]."
msgstr "有关使用默认令牌缓存或注册自定义缓存实现的更多信息，请参阅 xref:security-oidc-bearer-token-authentication.adoc#bearer-token-token-introspection-userinfo-cache[令牌自省和 UserInfo 缓存] 。"

#. type: Title ====
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "JSON web token claim verification"
msgstr "JSON网络令牌索赔验证"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"For information about the claim verification, including the `iss` (issuer) claim, see the xref:security-oidc-bearer-token-authentication.adoc#bearer-token-jwt-claim-verification[JSON Web Token claim verification] section.\n"
"It applies to ID tokens and also to access tokens in a JWT format, if the `web-app` application has requested the access token verification."
msgstr "有关声明验证的信息，包括 `iss` （发行方）声明，请参阅 xref:security-oidc-bearer-token-authentication.adoc#bearer-token-jwt-claim-verification[JSON 网络令牌声明验证] 部分。它适用于 ID 令牌，也适用于 JWT 格式的访问令牌（如果 `web-app` 应用程序要求进行访问令牌验证）。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Jose4j Validator"
msgstr "Jose4j 验证器"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can register a custom [Jose4j Validator] to customize the JWT claim verification process. See xref:security-oidc-bearer-token-authentication.adoc#jose4j-validator[Jose4j] section for more information."
msgstr "您可以注册自定义的 [Jose4j Validator] 来定制 JWT 申请验证流程。更多信息，请参阅 xref:security-oidc-bearer-token-authentication.adoc#jose4j-validator[Jose4j] 部分。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Proof Key for Code Exchange (PKCE)"
msgstr "代码交换证明密钥 (PKCE)"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "link:https://datatracker.ietf.org/doc/html/rfc7636[Proof Key for Code Exchange] (PKCE) minimizes the risk of authorization code interception."
msgstr "link:https://datatracker.ietf.org/doc/html/rfc7636[代码交换的证明密钥] （PKCE）将授权代码截获的风险降至最低。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"While PKCE is of primary importance to public OIDC clients, such as SPA scripts running in a browser, it can also provide extra protection to Quarkus OIDC `web-app` applications.\n"
"With PKCE, Quarkus OIDC `web-app` applications act as confidential OIDC clients that can securely store the client secret and use it to exchange the code for the tokens."
msgstr "虽然 PKCE 对公共 OIDC 客户端（如在浏览器中运行的 SPA 脚本）至关重要，但它也能为 Quarkus OIDC `web-app` 应用程序提供额外保护。有了 PKCE，Quarkus OIDC `web-app` 应用程序就可以充当保密的 OIDC 客户端，安全地存储客户端秘密，并用它来交换令牌代码。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can enable PKCE for your OIDC web-app endpoint with a `quarkus.oidc.authentication.pkce-required` property and a 32-character secret that is required to encrypt the PKCE code verifier in the state cookie, as shown in the following example:"
msgstr "您可以使用 `quarkus.oidc.authentication.pkce-required` 属性和 32 个字符的密文为 OIDC 网络应用程序端点启用 PKCE，密文必须用于加密状态 cookie 中的 PKCE 代码验证器，如下例所示："

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"If you already have a 32-character client secret, you do not need to set the  `quarkus.oidc.authentication.pkce-secret` property unless you prefer to use a different secret key.\n"
"This secret will be auto-generated if it is not configured and if the fallback to the client secret is not possible in cases where the client secret is less than 16 characters long."
msgstr "如果您已经有一个 32 个字符的客户机密钥，则无需设置 `quarkus.oidc.authentication.pkce-secret` 属性，除非您希望使用不同的密钥。如果未配置该密钥，并且在客户端密钥长度少于 16 个字符时无法回退到客户端密钥，则会自动生成该密钥。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The secret key is required to encrypt a randomly generated PKCE `code_verifier` while the user is redirected with the `code_challenge` query parameter to an OIDC provider to authenticate.\n"
"The `code_verifier` is decrypted when the user is redirected back to Quarkus and sent to the token endpoint alongside the `code`, client secret, and other parameters to complete the code exchange.\n"
"The provider will fail the code exchange if a `SHA256` digest of the `code_verifier` does not match the `code_challenge` that was provided during the authentication request."
msgstr "当用户使用 `code_challenge` 查询参数被重定向到 OIDC 提供商进行身份验证时，秘钥需要对随机生成的 PKCE `code_verifier` 进行加密。当用户被重定向回 Quarkus 时， `code_verifier` 将被解密，并与 `code` 、客户端秘密和其他参数一起发送到令牌端点，以完成代码交换。如果 `code_verifier` 的 `SHA256` 摘要与认证请求中提供的 `code_challenge` 不匹配，提供程序将导致代码交换失败。"

#. type: Title ===
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Handling and controlling the lifetime of authentication"
msgstr "处理和控制认证的寿命"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Another important requirement for authentication is to ensure that the data the session is based on is up-to-date without requiring the user to authenticate for every single request.\n"
"There are also situations where a logout event is explicitly requested.\n"
"Use the following key points to find the right balance for securing your Quarkus applications:"
msgstr "身份验证的另一个重要要求是确保会话所基于的数据是最新的，而不要求用户对每个请求都进行身份验证。在某些情况下，还需要明确请求注销事件。利用以下要点，找到确保 Quarkus 应用程序安全的正确平衡点："

#. type: Title ====
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Cookies"
msgstr "饼干"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The OIDC adapter uses cookies to keep the session, code flow, and post-logout state.\n"
"This state is a key element controlling the lifetime of authentication data."
msgstr "OIDC 适配器使用 cookies 保存会话、代码流和注销后状态。这种状态是控制身份验证数据寿命的关键因素。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Use the `quarkus.oidc.authentication.cookie-path` property to ensure that the same cookie is visible when you access protected resources with overlapping or different roots.\n"
"For example:"
msgstr "使用 `quarkus.oidc.authentication.cookie-path` 属性可确保在访问具有重叠或不同根的受保护资源时，同一 cookie 是可见的。例如"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "`/index.html` and `/web-app/service`"
msgstr " `/index.html` 和 `/web-app/service` "

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "`/web-app/service1` and `/web-app/service2`"
msgstr " `/web-app/service1` 和 `/web-app/service2` "

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "`/web-app1/service` and `/web-app2/service`"
msgstr " `/web-app1/service` 和 `/web-app2/service` "

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "By default, `quarkus.oidc.authentication.cookie-path` is set to `/` but you can change this to a more specific path if required, for example, `/web-app`."
msgstr "默认情况下， `quarkus.oidc.authentication.cookie-path` 被设置为 `/` ，但如果需要，你可以将其改为更具体的路径，例如， `/web-app` 。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"To set the cookie path dynamically, configure the `quarkus.oidc.authentication.cookie-path-header` property.\n"
"For example, to set the cookie path dynamically by using the value of the `X-Forwarded-Prefix` HTTP header, configure the property to `quarkus.oidc.authentication.cookie-path-header=X-Forwarded-Prefix`."
msgstr "要动态设置 cookie 路径，请配置 `quarkus.oidc.authentication.cookie-path-header` 属性。例如，要使用 `X-Forwarded-Prefix` HTTP 标头的值动态设置 cookie 路径，可将该属性配置为 `quarkus.oidc.authentication.cookie-path-header=X-Forwarded-Prefix` 。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "If `quarkus.oidc.authentication.cookie-path-header` is set but no configured HTTP header is available in the current request, then the `quarkus.oidc.authentication.cookie-path` will be checked."
msgstr "如果 `quarkus.oidc.authentication.cookie-path-header` 已设置，但当前请求中没有配置的 HTTP 头信息，则将检查 `quarkus.oidc.authentication.cookie-path` 。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"If your application is deployed across multiple domains, set the `quarkus.oidc.authentication.cookie-domain` property so that the session cookie is visible to all protected Quarkus services.\n"
"For example, if you have Quarkus services deployed on the following two domains, then you must set the `quarkus.oidc.authentication.cookie-domain` property to `company.net`:"
msgstr "如果您的应用程序部署在多个域上，请设置 `quarkus.oidc.authentication.cookie-domain` 属性，以便所有受保护的 Quarkus 服务都能看到会话 cookie。例如，如果在以下两个域上部署了 Quarkus 服务，则必须将 `quarkus.oidc.authentication.cookie-domain` 属性设置为 `company.net` ："

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "\\https://whatever.wherever.company.net/"
msgstr "https://whatever.wherever.company.net/"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "\\https://another.address.company.net/"
msgstr "https://another.address.company.net/"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "State cookies"
msgstr "国家饼干"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"State cookies are used to support authorization code flow completion.\n"
"When an authorization code flow is started, Quarkus creates a state cookie and a matching `state` query parameter, before redirecting the user to the OIDC provider.\n"
"When the user is redirected back to Quarkus to complete the authorization code flow, Quarkus expects that the request URI must contain the `state` query parameter and it must match the current state cookie value."
msgstr "状态 cookie 用于支持授权代码流的完成。当授权代码流开始时，Quarkus 会创建一个状态 cookie 和一个匹配的 `state` 查询参数，然后将用户重定向到 OIDC 提供商。当用户被重定向回 Quarkus 以完成授权代码流时，Quarkus 预计请求 URI 必须包含 `state` 查询参数，并且必须与当前的状态 cookie 值相匹配。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The default state cookie age is 5 mins and you can change it with a `quarkus.oidc.authentication.state-cookie-age` Duration property."
msgstr "默认的状态 cookie 年龄为 5 分钟，您可以通过 `quarkus.oidc.authentication.state-cookie-age` Duration 属性进行更改。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Quarkus creates a unique state cookie name every time a new authorization code flow is started to support multi-tab authentication. Many concurrent authentication requests on behalf of the same user may cause a lot of state cookies be created.\n"
"If you do not want to allow your users use multiple browser tabs to authenticate then it is recommended to disable it with `quarkus.oidc.authentication.allow-multiple-code-flows=false`. It also ensures that the same state cookie name is created for every new user authentication."
msgstr "每次启动新的授权代码流时，Quarkus 都会创建一个唯一的状态 cookie 名称，以支持多标签身份验证。代表同一用户的许多并发认证请求可能会导致创建大量的状态 cookie。如果不想让用户使用多个浏览器标签进行身份验证，建议使用 `quarkus.oidc.authentication.allow-multiple-code-flows=false` 将其禁用。它还能确保为每个新用户身份验证创建相同的状态 cookie 名称。"

#. type: Title ====
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Session cookie and default TokenStateManager"
msgstr "用TokenStateManager定制cookie"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "OIDC `CodeAuthenticationMechanism` uses the default `io.quarkus.oidc.TokenStateManager` interface implementation to keep the ID, access, and refresh tokens returned in the authorization code or refresh grant responses in an encrypted session cookie."
msgstr "OIDC `CodeAuthenticationMechanism` 使用默认的 `io.quarkus.oidc.TokenStateManager` 接口实现，以保持授权代码中返回的ID、访问和刷新令牌，或在会话cookie中刷新授予响应。这使得Quarkus OIDC端点完全无状态。"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "It makes Quarkus OIDC endpoints completely stateless and it is recommended to follow this strategy to achieve the best scalability results."
msgstr "它使 Quarkus OIDC 端点完全无状态，建议采用这种策略，以获得最佳的可扩展性效果。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Refer to the <<db-token-state-manager>> section of this guide for information on storing tokens in the database or other server-side storage solutions. This approach is suitable if you prefer and have compelling reasons to store the token state on the server."
msgstr "有关在数据库或其他服务器端存储解决方案中存储令牌的信息，请参阅本指南的 <<db-token-state-manager>> 部分。如果你希望并有充分的理由在服务器上存储令牌状态，那么这种方法是合适的。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "See the <<custom-token-state-manager>> section for alternative methods of token storage. This is ideal for those seeking customized solutions for token state management, especially when standard server-side storage does not meet your specific requirements."
msgstr "有关令牌存储的其他方法，请参阅 <<custom-token-state-manager>> 部分。这非常适合为令牌状态管理寻求定制解决方案的用户，尤其是当标准服务器端存储无法满足您的特定要求时。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can configure the default `TokenStateManager` to avoid saving an access token in the session cookie and to only keep ID and refresh tokens or a single ID token only."
msgstr "您可以对默认 `TokenStateManager` 进行配置，以避免在会话 cookie 中保存访问令牌，并只保存 ID 和刷新令牌或只保存单个 ID 令牌。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "An access token is only required if the endpoint needs to do the following actions:"
msgstr "只有当端点需要执行以下操作时，才需要访问令牌："

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Retrieve `UserInfo`"
msgstr "检索 `UserInfo` "

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Access the downstream service with this access token"
msgstr "用这个访问令牌访问下游服务"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Use the roles associated with the access token, which are checked by default"
msgstr "使用与访问令牌相关的角色，这些角色在默认情况下是被选中的"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "In such cases, use the `quarkus.oidc.token-state-manager.strategy` property to configure the token state strategy as follows:"
msgstr "在这种情况下，使用 `quarkus.oidc.token-state-manager.strategy` 属性来配置令牌状态策略，如下所示："

#. type: Table
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "To..."
msgstr "为了..."

#. type: Table
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Set the property to ..."
msgstr "将属性设置为..."

#. type: Table
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Keep the ID and refresh tokens only"
msgstr "只保留ID和刷新令牌"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "`quarkus.oidc.token-state-manager.strategy=id-refresh-tokens`"
msgstr "`quarkus.oidc.token-state-manager.strategy=id-refresh-tokens`"

#. type: Table
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Keep the ID token only"
msgstr "只保留ID令牌"

#. type: Table
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "`quarkus.oidc.token-state-manager.strategy=id-token`"
msgstr " `quarkus.oidc.token-state-manager.strategy=id-token` "

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"If your chosen session cookie strategy combines tokens and generates a large session cookie value that is greater than 4KB, some browsers might not be able to handle such cookie sizes.\n"
"This can occur when the ID, access, and refresh tokens are JWT tokens and the selected strategy is `keep-all-tokens` or with ID and refresh tokens when the strategy is `id-refresh-token`.\n"
"To work around this issue, you can set `quarkus.oidc.token-state-manager.split-tokens=true` to create a unique session token for each token.\n"
"An alternative solution is to have the tokens saved in the database.\n"
"For more information, see <<db-token-state-manager>>."
msgstr "如果您选择的会话 cookie 策略结合了令牌并生成了大于 4KB 的大型会话 cookie 值，某些浏览器可能无法处理此类 cookie 大小。如果 ID、访问和刷新令牌是 JWT 令牌，且所选策略是 `keep-all-tokens` ，或者 ID 和刷新令牌的策略是 `id-refresh-token` ，就会出现这种情况。要解决这个问题，可以设置 `quarkus.oidc.token-state-manager.split-tokens=true` ，为每个令牌创建唯一的会话令牌。另一种解决方案是将令牌保存在数据库中。更多信息，请参阅 <<db-token-state-manager>> 。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The default `TokenStateManager` encrypts the tokens before storing them in the session cookie.\n"
"The following example shows how you configure it to split the tokens and encrypt them:"
msgstr "默认情况下， `TokenStateManager` 会先加密令牌，然后再将其存储到会话 cookie 中。下面的示例显示了如何配置以分割令牌并对其加密："

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The token encryption secret must be at least 32 characters long.\n"
"If this key is not configured, then either `quarkus.oidc.credentials.secret` or `quarkus.oidc.credentials.jwt.secret` will be hashed to create an encryption key."
msgstr "令牌加密密钥的长度必须至少为 32 个字符。如果未配置此密钥，则 `quarkus.oidc.credentials.secret` 或 `quarkus.oidc.credentials.jwt.secret` 将被散列以创建加密密钥。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Configure the `quarkus.oidc.token-state-manager.encryption-secret` property if Quarkus authenticates to the OIDC provider by using one of the following authentication methods:"
msgstr "如果 Quarkus 使用以下一种身份验证方法对 OIDC 提供商进行身份验证，请配置 `quarkus.oidc.token-state-manager.encryption-secret` 属性："

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "mTLS"
msgstr "ǞǞǞ"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "`private_key_jwt`, where a private RSA or EC key is used to sign a JWT token"
msgstr " `private_key_jwt` ，其中一个私人RSA或EC密钥被用来签署JWT令牌"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Otherwise, a random key is generated, which can be problematic if the Quarkus application is running in the cloud with multiple pods managing the requests."
msgstr "否则，就会产生一个随机的密钥，如果Quarkus应用程序在云中运行，有多个pod管理请求，这可能会有问题。"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can disable token encryption in the session cookie by setting `quarkus.oidc.token-state-manager.encryption-required=false`."
msgstr "你可以通过设置 `quarkus.oidc.token-state-manager.encryption-required=false` ，禁用会话cookie中的令牌加密功能。"

#. type: Title ====
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Session cookie and custom TokenStateManager"
msgstr "用TokenStateManager定制cookie"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "If you want to customize the way the tokens are associated with the session cookie, register a custom `io.quarkus.oidc.TokenStateManager` implementation as an `@ApplicationScoped` CDI bean."
msgstr "如果您想自定义令牌与会话 cookie 关联的方式，请将自定义 `io.quarkus.oidc.TokenStateManager` 实现注册为 `@ApplicationScoped` CDI Bean。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"For example, you might want to keep the tokens in a cache cluster and have only a key stored in a session cookie.\n"
"Note that this approach might introduce some challenges if you need to make the tokens available across multiple microservices nodes."
msgstr "例如，您可能希望将令牌保存在缓存集群中，只在会话 cookie 中存储密钥。请注意，如果需要在多个微服务节点上使用令牌，这种方法可能会带来一些挑战。"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Here is a simple example:"
msgstr "下面是一个简单的例子："

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "For information about the default `TokenStateManager` storing tokens in an encrypted session cookie, see <<token-state-manager>>."
msgstr "有关默认 `TokenStateManager` 在加密会话 cookie 中存储令牌的信息，请参阅 <<token-state-manager>> 。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "For information about the custom Quarkus `TokenStateManager` implementation storing tokens in a database, see <<db-token-state-manager>>."
msgstr "有关在数据库中存储令牌的自定义 Quarkus `TokenStateManager` 实现的信息，请参阅 <<db-token-state-manager>> 。"

#. type: Title ====
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Database TokenStateManager"
msgstr "数据库令牌状态管理器"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "If you prefer to follow a stateful token storage strategy, you can use a custom `TokenStateManager` provided by Quarkus to have your application store tokens in a database, instead of storing them in an encrypted session cookie,  which is done by default as described in the <<token-state-manager>> section."
msgstr "如果你更喜欢使用有状态令牌存储策略，可以使用 Quarkus 提供的自定义 `TokenStateManager` ，让应用程序将令牌存储在数据库中，而不是存储在加密的会话 cookie 中（如 <<token-state-manager>> 部分所述，默认情况下是这样做的）。"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "To use this feature, add the following extension to your project:"
msgstr "首先在你的测试项目中添加以下依赖项："

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "This extension will replace the default `io.quarkus.oidc.TokenStateManager` with a database-based one."
msgstr "该扩展将用基于数据库的 `io.quarkus.oidc.TokenStateManager` 替换默认的 。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "OIDC Database Token State Manager uses a Reactive SQL client under the hood to avoid blocking because the authentication is likely to happen on an IO thread."
msgstr "OIDC 数据库令牌状态管理器在引擎盖下使用反应式 SQL 客户端，以避免阻塞，因为身份验证很可能发生在 IO 线程上。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Depending on your database, include and configure exactly one xref:reactive-sql-clients.adoc[Reactive SQL client].\n"
"The following Reactive SQL clients are supported:"
msgstr "根据数据库情况，包含并配置一个 xref:reactive-sql-clients.adoc[Reactive SQL 客户端] 。支持以下 Reactive SQL 客户端："

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Reactive Microsoft SQL client"
msgstr "反应式 Microsoft SQL 客户端"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Reactive MySQL client"
msgstr "反应式 MySQL 客户端"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Reactive PostgreSQL client"
msgstr "反应式 PostgreSQL 客户端"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Reactive Oracle client"
msgstr "反应式 Oracle 客户端"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Reactive DB2 client"
msgstr "反应式 DB2 客户端"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Your application is not required to switch to using the Reactive SQL client if it already uses Hibernate ORM with one of the JDBC driver extensions."
msgstr "如果您的应用程序已经使用了带有 JDBC 驱动程序扩展之一的 Hibernate ORM，则无需转而使用 Reactive SQL 客户端。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "For example, you already have an application that uses the Hibernate ORM extension together with a PostgreSQL JDBC Driver and your datasource is configured like this:"
msgstr "例如，你已经有了一个使用 Hibernate ORM 扩展和 PostgreSQL JDBC 驱动程序的应用程序，你的数据源是这样配置的："

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Now, if you decided to use OIDC Database Token State Manager, you must add the following dependencies and set a reactive driver URL:"
msgstr "现在，如果你决定使用 OIDC 数据库令牌状态管理器，你必须添加以下依赖项并设置反应驱动程序 URL："

#. type: Block title
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Now, the tokens are ready to be stored in the database."
msgstr "现在，令牌已经可以存储到数据库中了。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"By default, a database table used for storing tokens is created for you, however, you can disable this option with the `quarkus.oidc.db-token-state-manager.create-database-table-if-not-exists` configuration property.\n"
"Should you want the Hibernate ORM extension to create this table instead, you must just include an Entity, such as the following:"
msgstr "默认情况下，会为你创建一个用于存储令牌的数据库表，但你可以通过 `quarkus.oidc.db-token-state-manager.create-database-table-if-not-exists` 配置属性禁用该选项。如果你想让 Hibernate ORM 扩展来创建这个表，你只需包含一个实体，如下面这样："

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The Hibernate ORM extension will only create this table for you when the database schema is generated.\n"
"For more information, refer to the xref:hibernate-orm.adoc[Hibernate ORM] guide."
msgstr "只有在生成数据库模式时，Hibernate ORM 扩展才会为你创建这个表。更多信息，请参阅 xref:hibernate-orm.adoc[Hibernate ORM] 指南。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can choose a column length depending on the length of your tokens."
msgstr "您可以根据代币的长度选择列的长度。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid "Redis TokenStateManager"
msgstr ""

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Another approach for a stateful token storage strategy is a custom `TokenStateManager` provided by Quarkus to have your application store tokens in a Redis cache.\n"
"If you decided to use the OIDC Redis Token State Manager, you must add the following dependency:"
msgstr ""

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Quarkus stores tokens in the default Redis client.\n"
"If you prefer to use different Redis client, you can configure it like in the example below:"
msgstr ""

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid "The `my-redis-client` name must correspond to the Redis client config key specified with `quarkus.redis.my-redis-client.*` configuration properties."
msgstr ""

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid "Please refer to the xref:redis-reference.adoc[Quarkus Redis Client reference] for information how to configure the Redis client."
msgstr ""

#. type: Title ====
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Logout and expiration"
msgstr "注销和过期"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "There are two main ways for the authentication information to expire: the tokens expired and were not renewed or an explicit logout operation was triggered."
msgstr "认证信息过期主要有两种情况：令牌过期没有更新或触发了显式注销操作。"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Let's start with explicit logout operations."
msgstr "让我们从明确的注销操作开始。"

#. type: Title =====
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "User-initiated logout"
msgstr "用户发起的注销"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Users can request a logout by sending a request to the Quarkus endpoint logout path set with a `quarkus.oidc.logout.path` property.\n"
"For example, if the endpoint address is `https://application.com/webapp` and the `quarkus.oidc.logout.path` is set to `/logout`, then the logout request must be sent to `https://application.com/webapp/logout`."
msgstr "用户可以通过向使用 `quarkus.oidc.logout.path` 属性设置的 Quarkus 端点注销路径发送请求来请求注销。例如，如果端点地址为 `https://application.com/webapp` 且 `quarkus.oidc.logout.path` 设置为 `/logout` ，那么注销请求必须发送到 `https://application.com/webapp/logout` ."

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"This logout request starts an https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-initiated logout].\n"
"The user will be redirected to the OIDC provider to log out, where they can be asked to confirm the logout is indeed intended."
msgstr "此注销请求将启动 link:https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP] 启动的 link:https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[注销] 。用户将被重定向到 OIDC 提供商处注销，并被要求确认注销是否属实。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The user will be returned to the endpoint post-logout page once the logout has been completed and if the `quarkus.oidc.logout.post-logout-path` property is set.\n"
"For example, if the endpoint address is `https://application.com/webapp` and the `quarkus.oidc.logout.post-logout-path` is set to `/signin`, then the user will be returned to `https://application.com/webapp/signin`.\n"
"Note, this URI must be registered as a valid `post_logout_redirect_uri` in the OIDC provider."
msgstr "注销完成后，如果设置了 `quarkus.oidc.logout.post-logout-path` 属性，用户将返回到端点注销后页面。例如，如果端点地址为 `https://application.com/webapp` 且 `quarkus.oidc.logout.post-logout-path` 设置为 `/signin` ，那么用户将返回到 `https://application.com/webapp/signin` .注意，该 URI 必须在 OIDC 提供商中注册为有效的 `post_logout_redirect_uri` 。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"If the `quarkus.oidc.logout.post-logout-path` is set, then a `q_post_logout` cookie will be created and a matching `state` query parameter will be added to the logout redirect URI and the OIDC provider will return this `state` once the logout has been completed.\n"
"It is recommended for the Quarkus `web-app` applications to check that a `state` query parameter matches the value of the `q_post_logout` cookie, which can be done, for example, in a Jakarta REST filter."
msgstr "如果设置了 `quarkus.oidc.logout.post-logout-path` ，则将创建 `q_post_logout` cookie，并在注销重定向 URI 中添加匹配的 `state` 查询参数，注销完成后，OIDC 提供商将返回 `state` 。建议 Quarkus `web-app` 应用程序检查 `state` 查询参数是否与 `q_post_logout` cookie 的值相匹配，例如，可以在 Jakarta REST 过滤器中进行检查。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Note that a cookie name varies when using xref:security-openid-connect-multitenancy.adoc[OpenID Connect Multi-Tenancy].\n"
"For example, it will be named `q_post_logout_tenant_1` for a tenant with a `tenant_1` ID, and so on."
msgstr "请注意，在使用 xref:security-openid-connect-multitenancy.adoc[OpenID Connect 多租户] 时，cookie 名称会有所不同。例如，对于 `tenant_1` ID 的租户，cookie 名称为 `q_post_logout_tenant_1` ，以此类推。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Here is an example of how to configure a Quarkus application to initiate a logout flow:"
msgstr "下面举例说明如何配置 Quarkus 应用程序以启动注销流程："

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"You might also want to set `quarkus.oidc.authentication.cookie-path` to a path value common to all the application resources, which is `/` in this example.\n"
"For more information, see the <<oidc-cookies,Cookies>> section."
msgstr "您可能还希望将 `quarkus.oidc.authentication.cookie-path` 设置为所有应用程序资源通用的路径值，本例中的路径值为 `/` 。有关更多信息，请参阅 xref:oidc-cookies[Cookie] 部分。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Some OIDC providers do not support a link:https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-initiated logout] specification and do not return an OpenID Connect well-known `end_session_endpoint` metadata property.\n"
"However, this is not a problem for Quarkus because the specific logout mechanisms of such OIDC providers only differ in how the logout URL query parameters are named."
msgstr "有些 OIDC 提供商不支持 link:https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[由 RP 发起] 的注销规范，也不返回 OpenID Connect 众所周知的 `end_session_endpoint` 元数据属性。不过，这对 Quarkus 来说不是问题，因为这些 OIDC 提供商的特定注销机制只是在注销 URL 查询参数的命名方式上有所不同。"

#. type: delimited block =
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "According to the https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-initiated logout] specification, the `quarkus.oidc.logout.post-logout-path` property is represented as a `post_logout_redirect_uri` query parameter, which is not recognized by the providers that do not support this specification."
msgstr "根据 link:https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP发起的注销] 规范， `quarkus.oidc.logout.post-logout-path` 属性被表示为 `post_logout_redirect_uri` 查询参数，不支持该规范的提供者无法识别。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"You can use `quarkus.oidc.logout.post-logout-url-param` to work around this issue.\n"
"You can also request more logout query parameters added with `quarkus.oidc.logout.extra-params`.\n"
"For example, here is how you can support a logout with `Auth0`:"
msgstr "您可以使用 `quarkus.oidc.logout.post-logout-url-param` 解决这个问题。您还可以通过 `quarkus.oidc.logout.extra-params` 申请添加更多注销查询参数。例如，以下是使用 `Auth0` 支持注销的方法："

#. type: Title =====
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Back-channel logout"
msgstr "后面的通道注销"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The OIDC provider can force the logout of all applications by using the authentication data.\n"
"This is known as back-channel logout.\n"
"In this case, the OIDC will call a specific URL from each application to trigger that logout."
msgstr "OIDC 提供商可以使用身份验证数据强制注销所有应用程序。这就是所谓的后信道注销。在这种情况下，OIDC 将调用每个应用程序的特定 URL 来触发注销。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "OIDC providers use link:https://openid.net/specs/openid-connect-backchannel-1_0.html[Back-channel logout] to log out the current user from all the applications into which this user is currently logged in, bypassing the user agent."
msgstr "OIDC 提供商使用 link:https://openid.net/specs/openid-connect-backchannel-1_0.html[Back-channel] 注销功能，绕过用户代理，从当前用户登录的所有应用程序中注销当前用户。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can configure Quarkus to support Back-channel logout as follows:"
msgstr "您可以对 Quarkus 进行如下配置，以支持 \"后频道注销\"："

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The absolute `back-channel logout` URL is calculated by adding `quarkus.oidc.back-channel-logout.path` to the current endpoint URL, for example, `http://localhost:8080/back-channel-logout`.\n"
"You will need to configure this URL in the admin console of your OIDC provider."
msgstr "绝对 `back-channel logout` URL 的计算方法是将 `quarkus.oidc.back-channel-logout.path` 加入当前端点 URL，例如 `http://localhost:8080/back-channel-logout` .您需要在 OIDC 提供商的管理控制台中配置此 URL。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"You will also need to configure a token age property for the logout token verification to succeed if your OIDC provider does not set an expiry claim in the current logout token.\n"
"For example, set `quarkus.oidc.token.age=10S` to ensure that no more than 10 seconds elapse since the logout token's `iat` (issued at) time."
msgstr "如果 OIDC 提供商未在当前注销令牌中设置过期声明，您还需要配置令牌年龄属性，以便注销令牌验证成功。例如，设置 `quarkus.oidc.token.age=10S` 以确保注销令牌的 `iat` （签发时间）不超过 10 秒。"

#. type: Title =====
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Front-channel logout"
msgstr "前面的通道注销"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"You can use link:https://openid.net/specs/openid-connect-frontchannel-1_0.html[Front-channel logout] to log out the current user directly from the user agent, for example, its browser.\n"
"It is similar to <<back-channel-logout,Back-channel logout>> but the logout steps are executed by the user agent, such as the browser, and not in the background by the OIDC provider.\n"
"This option is rarely used."
msgstr "您可以使用 link:https://openid.net/specs/openid-connect-frontchannel-1_0.html[前台] 注销直接从用户代理（如浏览器）注销当前用户。它与 xref:back-channel-logout[后] 信道注销类似，但注销步骤由浏览器等用户代理执行，而不是由 OIDC 提供商在后台执行。该选项很少使用。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can configure Quarkus to support Front-channel logout as follows:"
msgstr "您可以对 Quarkus 进行如下配置，使其支持前台注销："

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "This path will be compared to the current request's path, and the user will be logged out if these paths match."
msgstr "该路径将与当前请求的路径进行比较，如果路径匹配，用户将被注销。"

#. type: Title =====
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Local logout"
msgstr "本地注销"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"<<user-initiated-logout,User-initiated logout>> will log the user out of the OIDC provider.\n"
"If it is used as single sign-on, it might not be what you require.\n"
"If, for example, your OIDC provider is Google, you will be logged out from Google and its services.\n"
"Instead, the user might just want to log out of that specific application.\n"
"Another use case might be when the OIDC provider does not have a logout endpoint."
msgstr "xref:user-initiated-logout[用户主动注销] 将使用户退出 OIDC 提供商。如果将其用作单点登录，则可能无法满足您的要求。例如，如果你的 OIDC 提供商是 Google，那么你就会注销 Google 及其服务。相反，用户可能只想注销该特定应用程序。另一种情况可能是 OIDC 提供商没有注销端点。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "By using <<oidc-session,OidcSession>>, you can support a local logout, which means that only the local session cookie is cleared, as shown in the following example:"
msgstr "通过使用 xref:oidc-session[OidcSession] ，可以支持本地注销，即只清除本地会话 cookie，如下例所示："

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Using `OidcSession` for local logout"
msgstr "使用 `OidcSession` 进行本地注销"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"`io.quarkus.oidc.OidcSession` is a wrapper around the current `IdToken`, which can help to perform a <<local-logout,Local logout>>, retrieve the current session's tenant identifier, and check when the session will expire.\n"
"More useful methods will be added to it over time."
msgstr "`io.quarkus.oidc.OidcSession` 是当前 的包装器，可以帮助执行 `IdToken` xref:local-logout[本地注销] 、检索当前会话的租户标识符以及检查会话何时过期。随着时间的推移，还将添加更多有用的方法。"

#. type: Title ====
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Session management"
msgstr "会议管理"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"By default, logout is based on the expiration time of the ID token issued by the OIDC provider.\n"
"When the ID token expires, the current user session at the Quarkus endpoint is invalidated, and the user is redirected to the OIDC provider again to authenticate.\n"
"If the session at the OIDC provider is still active, users are automatically re-authenticated without needing to provide their credentials again."
msgstr "默认情况下，注销基于 OIDC 提供商签发的 ID 令牌的过期时间。当 ID 标记过期时，Quarkus 端点上的当前用户会话将失效，用户将被重定向到 OIDC 提供商处再次进行身份验证。如果 OIDC 提供商的会话仍处于活动状态，用户将自动重新进行身份验证，而无需再次提供凭据。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The current user session can be automatically extended by enabling the `quarkus.oidc.token.refresh-expired` property.\n"
"If set to `true`, when the current ID token expires, a refresh token grant will be used to refresh the ID token as well as access and refresh tokens."
msgstr "当前用户会话可通过启用 `quarkus.oidc.token.refresh-expired` 属性自动延长。如果设置为 `true` ，当当前 ID 令牌过期时，将使用刷新令牌授权来刷新 ID 令牌以及访问和刷新令牌。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "If you have a xref:security-oidc-bearer-token-authentication.adoc#single-page-applications[single page application for service applications] where your OIDC provider script such as `keycloak.js` is managing an authorization code flow, then that script will also control the SPA authentication session lifespan."
msgstr "如果您有一个 xref:security-oidc-bearer-token-authentication.adoc#single-page-applications[用于服务应用程序的单页面应用程序] ，其中您的 OIDC 提供程序脚本（如 `keycloak.js` ）正在管理授权代码流，那么该脚本也将控制 SPA 身份验证会话的生命周期。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "If you work with a Quarkus OIDC `web-app` application, then the Quarkus OIDC code authentication mechanism manages the user session lifespan."
msgstr "如果您使用的是 Quarkus OIDC `web-app` 应用程序，那么 Quarkus OIDC 代码验证机制会管理用户会话的生命周期。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"To use the refresh token, you should carefully configure the session cookie age.\n"
"The session age should be longer than the ID token lifespan and close to or equal to the refresh token lifespan."
msgstr "要使用刷新令牌，应仔细配置会话 cookie 的年龄。会话年龄应长于 ID 令牌寿命，接近或等于刷新令牌寿命。"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You calculate the session age by adding the lifespan value of the current ID token and the values of the `quarkus.oidc.authentication.session-age-extension` and `quarkus.oidc.token.lifespan-grace` properties."
msgstr "你通过添加当前ID令牌的寿命值和 `quarkus.oidc.authentication.session-age-extension` 和 `quarkus.oidc.token.lifespan-grace` 属性的值来计算会话年龄。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"You use only the `quarkus.oidc.authentication.session-age-extension` property to significantly extend the session lifespan, if required.\n"
"You use the `quarkus.oidc.token.lifespan-grace` property only to consider some small clock skews."
msgstr "如果需要，只需使用 `quarkus.oidc.authentication.session-age-extension` 属性来大幅延长会话寿命。使用 `quarkus.oidc.token.lifespan-grace` 属性只是为了考虑一些小的时钟偏差。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"When the current authenticated user returns to the protected Quarkus endpoint and the ID token associated with the session cookie has expired, then, by default, the user is automatically redirected to the OIDC Authorization endpoint to re-authenticate.\n"
"The OIDC provider might challenge the user again if the session between the user and this OIDC provider is still active, which might happen if the session is configured to last longer than the ID token."
msgstr "当当前已通过身份验证的用户返回到受保护的 Quarkus 端点时，如果与会话 cookie 关联的 ID 标记已过期，那么默认情况下，用户会被自动重定向到 OIDC 授权端点重新进行身份验证。如果用户与该 OIDC 提供商之间的会话仍处于活动状态，OIDC 提供商可能会再次向用户提出挑战，如果会话配置为比 ID 令牌持续时间更长，则可能会发生这种情况。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"If the `quarkus.oidc.token.refresh-expired` is set to `true`, then the expired ID token (and the access token) is refreshed by using the refresh token returned with the initial authorization code grant response.\n"
"This refresh token might also be recycled (refreshed) itself as part of this process.\n"
"As a result, the new session cookie is created, and the session is extended."
msgstr "如果 `quarkus.oidc.token.refresh-expired` 设置为 `true` ，则过期的 ID 令牌（和访问令牌）将通过使用随初始授权码授予响应一起返回的刷新令牌来刷新。在此过程中，刷新令牌本身也可能被回收（刷新）。这样，就会创建新的会话 cookie，并扩展会话。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"In instances where the user is not very active, you can use the `quarkus.oidc.authentication.session-age-extension` property to help handle expired ID tokens.\n"
"If the ID token expires, the session cookie might not be returned to the Quarkus endpoint during the next user request as the cookie lifespan would have elapsed.\n"
"Quarkus assumes that this request is the first authentication request.\n"
"Set `quarkus.oidc.authentication.session-age-extension` to be _reasonably_ long for your barely-active users and in accordance with your security policies."
msgstr "在用户不是很活跃的情况下，可以使用 `quarkus.oidc.authentication.session-age-extension` 属性来帮助处理过期的 ID 标记。如果 ID 令牌过期，在下一次用户请求时，会话 Cookie 可能不会返回到 Quarkus 端点，因为 Cookie 的有效期已过。Quarkus 假定此请求是第一次身份验证请求。请根据您的安全策略，为几乎不活动的用户设置 _合理的_ `quarkus.oidc.authentication.session-age-extension` 。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"You can go one step further and proactively refresh ID tokens or access tokens that are about to expire.\n"
"Set `quarkus.oidc.token.refresh-token-time-skew` to the value you want to anticipate the refresh.\n"
"If, during the current user request, it is calculated that the current ID token will expire within this `quarkus.oidc.token.refresh-token-time-skew`, then it is refreshed, and the new session cookie is created.\n"
"This property should be set to a value that is less than the ID token lifespan; the closer it is to this lifespan value, the more often the ID token is refreshed."
msgstr "您可以更进一步，主动刷新即将过期的 ID 令牌或访问令牌。将 `quarkus.oidc.token.refresh-token-time-skew` 设置为预计刷新的值。如果在当前用户请求期间，计算出当前 ID 令牌将在此 `quarkus.oidc.token.refresh-token-time-skew` 内过期，那么就会刷新它，并创建新的会话 cookie。该属性应设置为小于 ID 令牌有效期的值；该值越接近有效期值，ID 令牌刷新的频率就越高。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can further optimize this process by having a simple JavaScript function ping your Quarkus endpoint periodically to emulate the user activity, which minimizes the time frame during which the user might have to be re-authenticated."
msgstr "您可以让一个简单的 JavaScript 函数定期 ping 您的 Quarkus 端点，以模拟用户活动，从而进一步优化这一过程，最大限度地缩短用户可能需要重新认证的时间。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "When the session can not be refreshed, the currently authenticated user is redirected to the OIDC provider to re-authenticate. However, the user experience may not be ideal in such cases, if the user, after an earlier successful authentication, is suddently seeing an OIDC authentication challenge screen when trying to access an application page."
msgstr "当会话无法刷新时，当前已通过身份验证的用户会被重定向到 OIDC 提供商处重新进行身份验证。不过，在这种情况下，如果用户在之前成功通过身份验证后，在尝试访问应用程序页面时突然看到 OIDC 身份验证挑战屏幕，用户体验可能会不理想。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Instead, you can request that the user is redirected to a public, application specific session expired page first. This page informs the user that the session has now expired and advise to re-authenticate by following a link to a secured application welcome page. The user clicks on the link and Quarkus OIDC enforces a redirect to the OIDC provider to re-authenticate. Use `quarkus.oidc.authentication.session-expired-page` relative path property, if you'd like to do it."
msgstr "相反，你可以要求先将用户重定向到一个公共的、特定于应用程序的会话过期页面。该页面会告知用户会话已过期，并建议用户通过安全应用程序欢迎页面的链接重新进行身份验证。用户点击链接后，Quarkus OIDC 就会强制重定向到 OIDC 提供商以重新进行身份验证。如果你想这样做，请使用 `quarkus.oidc.authentication.session-expired-page` 相对路径属性。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "For example, setting `quarkus.oidc.authentication.session-expired-page=/session-expired-page` will ensure that the user whose session has expired is redirected to  `http://localhost:8080/session-expired-page`, assuming the application is available at `http://localhost:8080`."
msgstr "例如，设置 `quarkus.oidc.authentication.session-expired-page=/session-expired-page` 将确保会话过期的用户重定向到 `http://localhost:8080/session-expired-page` 假设应用程序在 `http://localhost:8080` ."

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "See also the <<oidc-redirect-filters>> section explaining how a custom `OidcRedirectFilter` can be used to customize OIDC redirects, including those to the session expired pages."
msgstr "另请参阅 <<oidc-redirect-filters>> 部分，了解如何使用自定义 `OidcRedirectFilter` 来自定义 OIDC 重定向，包括指向会话过期页面的重定向。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"You cannot extend the user session indefinitely.\n"
"The returning user with the expired ID token will have to re-authenticate at the OIDC provider endpoint once the refresh token has expired."
msgstr "不能无限期延长用户会话。一旦刷新令牌过期，使用过期 ID 令牌的返回用户必须在 OIDC 提供商端点重新进行身份验证。"

#. type: Title ===
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Integration with GitHub and non-OIDC OAuth2 providers"
msgstr "与GitHub和非OIDC的OAuth2提供商集成"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Some well-known providers such as GitHub or LinkedIn are not OpenID Connect providers, but OAuth2 providers that support the `authorization code flow`.\n"
"For example, link:https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps[GitHub OAuth2] and link:https://docs.microsoft.com/en-us/linkedin/shared/authentication/authorization-code-flow[LinkedIn OAuth2].\n"
"Remember, OIDC is built on top of OAuth2."
msgstr "GitHub 或 LinkedIn 等一些知名提供商并非 OpenID Connect 提供商，而是支持 `authorization code flow` 的 OAuth2 提供商。例如， link:https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps[GitHub OAuth2] 和 link:https://docs.microsoft.com/en-us/linkedin/shared/authentication/authorization-code-flow[LinkedIn OAuth2] 。请记住，OIDC 是建立在 OAuth2 之上的。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The main difference between OIDC and OAuth2 providers is that OIDC providers return an `ID Token` that represents a user authentication, in addition to the standard authorization code flow `access` and `refresh` tokens returned by `OAuth2` providers."
msgstr "OIDC 和 OAuth2 提供商的主要区别在于，除了 `OAuth2` 提供商返回的标准授权码流 `access` 和 `refresh` 标记外，OIDC 提供商还会返回一个代表用户身份验证的 `ID Token` 。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"OAuth2 providers such as GitHub do not return `IdToken`, and the user authentication is implicit and indirectly represented by the `access` token.\n"
"This `access` token represents an authenticated user authorizing the current Quarkus `web-app` application to access some data on behalf of the authenticated user."
msgstr "OAuth2 提供商（如 GitHub）不返回 `IdToken` ，用户身份验证是隐式的，由 `access` 令牌间接代表。这个 `access` 令牌代表认证用户授权当前 Quarkus `web-app` 应用程序代表认证用户访问某些数据。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"For OIDC, you validate the ID token as proof of authentication validity whereas in the case of OAuth2, you validate the access token.\n"
"This is done by subsequently calling an endpoint that requires the access token and that typically returns user information.\n"
"This approach is similar to the OIDC <<code-flow-user-info,UserInfo>> approach, with `UserInfo` fetched by Quarkus OIDC on your behalf."
msgstr "对于 OIDC，用户需要验证 ID 令牌作为验证有效性的证明，而对于 OAuth2，用户需要验证访问令牌。验证的方法是随后调用一个需要访问令牌的端点，该端点通常会返回用户信息。这种方法类似于 OIDC xref:code-flow-user-info[UserInfo] 方法，由 Quarkus OIDC 代表你获取 `UserInfo` 。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "For example, when working with GitHub, the Quarkus endpoint can acquire an `access` token, which allows the Quarkus endpoint to request a GitHub profile for the current user."
msgstr "例如，在与 GitHub 合作时，Quarkus 端点可以获取 `access` 令牌，从而允许 Quarkus 端点请求当前用户的 GitHub 配置文件。"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "To support the integration with such OAuth2 servers, `quarkus-oidc` needs to be configured a bit differently to allow the authorization code flow responses without `IdToken`: `quarkus.oidc.authentication.id-token-required=false`."
msgstr "为了支持与此类OAuth2服务器的整合， `quarkus-oidc` ，需要进行一些不同的配置，以允许授权代码流响应，而不需要 `IdToken` ： `quarkus.oidc.authentication.id-token-required=false` 。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Even though you configure the extension to support the authorization code flows without `IdToken`, an internal `IdToken` is generated to standardize the way `quarkus-oidc` operates.\n"
"You use an internal `IdToken` to support the authentication session and to avoid redirecting the user to the provider,  such as GitHub, on every request.\n"
"In this case, the `IdToken` age is set to the value of a standard `expires_in` property in the authorization code flow response.\n"
"You can use a `quarkus.oidc.authentication.internal-id-token-lifespan` property to customize the ID token age.\n"
"The default ID token age is 5 minutes, which you can extend further as described in the <<session-management,session management>> section."
msgstr "即使您配置扩展以支持无需 `IdToken` 的授权代码流，也会生成一个内部 `IdToken` ，以规范 `quarkus-oidc` 的操作方式。使用内部 `IdToken` 可以支持身份验证会话，避免每次请求都将用户重定向到提供商（如 GitHub）。在这种情况下， `IdToken` 年龄被设置为授权代码流响应中标准 `expires_in` 属性的值。你可以使用 `quarkus.oidc.authentication.internal-id-token-lifespan` 属性来自定义 ID 令牌年龄。默认的 ID 令牌有效期为 5 分钟，你可以根据 xref:session-management[会话管理] 部分的描述进一步延长有效期。"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "This simplifies how you handle an application that supports multiple OIDC providers."
msgstr "这简化了你如何处理支持多个OIDC提供者的应用程序。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The next step is to ensure that the returned access token can be useful and is valid to the current Quarkus endpoint.\n"
"The first way is to call the OAuth2 provider introspection endpoint by configuring `quarkus.oidc.introspection-path`, if the provider offers such an endpoint.\n"
"In this case, you can use the access token as a source of roles using `quarkus.oidc.roles.source=accesstoken`.\n"
"If no introspection endpoint is present, you can attempt instead to request <<code-flow-user-info,UserInfo>> from the provider as it will at least validate the access token.\n"
"To do so, specify `quarkus.oidc.token.verify-access-token-with-user-info=true`.\n"
"You also need to set the `quarkus.oidc.user-info-path` property to a URL endpoint that fetches the user info (or to an endpoint protected by the access token).\n"
"For GitHub, since it does not have an introspection endpoint, requesting the UserInfo is required."
msgstr "下一步是确保返回的访问令牌对当前的 Quarkus 端点有用且有效。第一种方法是通过配置 `quarkus.oidc.introspection-path` 来调用 OAuth2 提供商自省端点（如果提供商提供此类端点的话）。在这种情况下，你可以使用 `quarkus.oidc.roles.source=accesstoken` 将访问令牌用作角色来源。如果没有自省端点，可以尝试从提供程序请求 xref:code-flow-user-info[用户信息] ，因为它至少会验证访问令牌。为此，请指定 `quarkus.oidc.token.verify-access-token-with-user-info=true` 。还需要将 `quarkus.oidc.user-info-path` 属性设置为获取用户信息的 URL 端点（或受访问令牌保护的端点）。对于 GitHub 而言，由于它没有自省端点，因此需要请求 UserInfo。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Requiring <<code-flow-user-info,UserInfo>> involves making a remote call on every request."
msgstr "要求提供 xref:code-flow-user-info[UserInfo] 意味着每次请求都要进行远程调用。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Therefore, `UserInfo` is embedded in the internal generated `IdToken` and saved in the encrypted session cookie. It can be disabled with `quarkus.oidc.cache-user-info-in-idtoken=false`."
msgstr "因此， `UserInfo` 嵌入到内部生成的 `IdToken` 中，并保存在加密的会话 cookie 中。可通过 `quarkus.oidc.cache-user-info-in-idtoken=false` 将其禁用。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Alternatively, you might want to consider caching `UserInfo` using a default or custom UserInfo cache provider.\n"
"For more information, see the xref:security-oidc-bearer-token-authentication.adoc#bearer-token-token-introspection-userinfo-cache[Token Introspection and UserInfo cache] section of the \"OpenID Connect (OIDC) Bearer token authentication\" guide."
msgstr "另外，你也可以考虑使用默认或自定义的 UserInfo 缓存提供者缓存 `UserInfo` 。更多信息，请参阅 \"OpenID Connect (OIDC) Bearer xref:security-oidc-bearer-token-authentication.adoc#bearer-token-token-introspection-userinfo-cache[令牌] 身份验证 \"指南中的 xref:security-oidc-bearer-token-authentication.adoc#bearer-token-token-introspection-userinfo-cache[令牌自省和 UserInfo 缓] 存部分。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Most well-known social OAuth2 providers enforce rate-limiting so there is a high chance you will prefer to have UserInfo cached."
msgstr "大多数知名的社交 OAuth2 提供商都会强制执行速率限制，因此您很有可能更倾向于缓存 UserInfo。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"OAuth2 servers might not support a well-known configuration endpoint.\n"
"In this case, you must disable the discovery and configure the authorization, token, and introspection and `UserInfo` endpoint paths manually."
msgstr "OAuth2 服务器可能不支持众所周知的配置端点。在这种情况下，必须禁用发现功能，并手动配置授权、令牌、自省和 `UserInfo` 端点路径。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"For well-known OIDC or OAuth2 providers, such as Apple, Facebook, GitHub, Google, Microsoft, Spotify, and X (formerly Twitter), Quarkus can help significantly simplify your application's configuration with the `quarkus.oidc.provider` property.\n"
"Here is how you can integrate `quarkus-oidc` with GitHub after you have link:https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app[created a GitHub OAuth application].\n"
"Configure your Quarkus endpoint like this:"
msgstr "对于知名的 OIDC 或 OAuth2 提供商，如 Apple、Facebook、GitHub、Google、Microsoft、Spotify 和 X（前 Twitter），Quarkus 可通过 `quarkus.oidc.provider` 属性帮助大大简化应用程序的配置。以下是 link:https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app[创建 GitHub OAuth 应用程序] 后，如何将 `quarkus-oidc` 与 link:https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app[GitHub] 集成的方法。像这样配置你的 Quarkus 端点："

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "For more information about configuring other well-known providers, see xref:security-openid-connect-providers.adoc[OpenID Connect providers]."
msgstr "有关配置其他知名提供程序的更多信息，请参阅 xref:security-openid-connect-providers.adoc[OpenID Connect 提供] 程序。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "This is all that is needed for an endpoint like this one to return the currently-authenticated user's profile with `GET http://localhost:8080/github/userinfo` and access it as the individual `UserInfo` properties:"
msgstr "像这样的端点只需这样就能返回当前已通过身份验证的用户的配置文件，并以 `GET http://localhost:8080/github/userinfo` 来返回当前已认证用户的配置文件，并以 `UserInfo` 的单个属性来访问它："

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"If you support more than one social provider with the help of xref:security-openid-connect-multitenancy.adoc[OpenID Connect Multi-Tenancy], for example, Google, which is an OIDC provider that returns `IdToken`, and GitHub, which is an OAuth2 provider that does not return `IdToken` and only allows access to `UserInfo`, then you can have your endpoint working with only the injected `SecurityIdentity` for both Google and GitHub flows.\n"
"A simple augmentation of `SecurityIdentity` will be required where a principal created with the internally-generated `IdToken` will be replaced with the `UserInfo`-based principal when the GitHub flow is active:"
msgstr "如果您在 xref:security-openid-connect-multitenancy.adoc[OpenID Connect Multi-Tenancy] 的帮助下支持一个以上的社交提供商，例如，Google 是一个 OIDC 提供商，会返回 `IdToken` ，而 GitHub 是一个 OAuth2 提供商，不会返回 `IdToken` ，只允许访问 `UserInfo` ，那么您就可以让您的端点在 Google 和 GitHub 流程中都只使用注入的 `SecurityIdentity` 。需要对 `SecurityIdentity` 进行简单的增强，即当 GitHub 流处于活动状态时，使用内部生成的 `IdToken` 创建的 principal 将被替换为基于 `UserInfo` 的 principal："

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Now, the following code will work when the user signs into your application by using Google or GitHub:"
msgstr "现在，当用户通过使用谷歌或GitHub登录你的应用程序时，下面的代码将发挥作用："

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Possibly a simpler alternative is to inject both `@IdToken JsonWebToken` and `UserInfo` and use `JsonWebToken` when handling the providers that return `IdToken` and use `UserInfo` with the providers that do not return `IdToken`."
msgstr "一个更简单的替代方法可能是同时注入 `@IdToken JsonWebToken` 和 `UserInfo` ，在处理返回 `IdToken` 的提供程序时使用 `JsonWebToken` ，在处理不返回 `IdToken` 的提供程序时使用 `UserInfo` 。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"You must ensure that the callback path you enter in the GitHub OAuth application configuration matches the endpoint path where you want the user to be redirected after a successful GitHub authentication and application authorization.\n"
"In this case, it has to be set to `http://localhost:8080/github/userinfo`."
msgstr "必须确保在 GitHub OAuth 应用程序配置中输入的回调路径与 GitHub 身份验证和应用程序授权成功后用户重定向的端点路径相匹配。在这种情况下，必须将其设置为 `http://localhost:8080/github/userinfo` ."

#. type: Title ===
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Listening to important authentication events"
msgstr "听取重要的认证事件"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"You can register the `@ApplicationScoped` bean which will observe important OIDC authentication events.\n"
"When a user logs in for the first time, re-authenticates, or refreshes the session, the listener is updated.\n"
"In the future, more events might be reported.\n"
"For example:"
msgstr "您可以注册 `@ApplicationScoped` Bean，它将观察重要的 OIDC 身份验证事件。当用户首次登录、重新认证或刷新会话时，监听器就会更新。将来，可能会报告更多事件。例如"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can listen to other security events as described in the xref:security-customization.adoc#observe-security-events[Observe security events] section of the Security Tips and Tricks guide."
msgstr "您可以按照 \"安全提示和技巧 \"指南中 \" xref:security-customization.adoc#observe-security-events[观察安全事件] \"部分的描述，监听其他安全事件。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid "Token revocation"
msgstr ""

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Sometimes, you may want to revoke the current authorization code flow access and/or refresh tokens.\n"
"You can revoke tokens with `quarkus.oidc.OidcProviderClient` which provides access to the OIDC provider's UserInfo, token introspection and revocation endpoints."
msgstr ""

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid "For example, when a local logout with <<oidc-session,OidcSession>> is performed, you can use an injected `OidcProviderClient` to revoke access and refresh tokens associated with the current session:"
msgstr ""

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid "Do the local logout by clearing the session cookie."
msgstr ""

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid "Revoke the authorization code flow access token."
msgstr ""

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid "Revoke the authorization code flow refresh token."
msgstr ""

#. type: Title ===
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Propagating tokens to downstream services"
msgstr "将代币传播给下游服务"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "For information about Authorization Code Flow access token propagation to downstream services, see the xref:security-openid-connect-client-reference.adoc#token-propagation-rest[Token Propagation] section."
msgstr "有关授权代码流访问令牌向下游服务传播的信息，请参阅 xref:security-openid-connect-client-reference.adoc#token-propagation-rest[令牌传播] 部分。"

#. type: Title ==
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Integration considerations"
msgstr "整合考虑"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Your application secured by OIDC integrates in an environment where it can be called from single-page applications.\n"
"It must work with well-known OIDC providers, run behind HTTP Reverse Proxy, require external and internal access, and so on."
msgstr "由 OIDC 保护的应用程序集成在一个可以从单页应用程序调用的环境中。它必须与知名的 OIDC 提供商合作，在 HTTP 反向代理后面运行，需要外部和内部访问，等等。"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "This section discusses these considerations."
msgstr "本节讨论了这些考虑。"

#. type: Title ===
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Single-page applications"
msgstr "单页应用程序"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can check if implementing single-page applications (SPAs) the way it is suggested in the xref:security-oidc-bearer-token-authentication.adoc#single-page-applications[Single-page applications] section of the \"OpenID Connect (OIDC) Bearer token authentication\" guide meets your requirements."
msgstr "你可以检查按照 \"OpenID Connect (OIDC)承载令牌认证 \"指南中的 link:security-oidc-bearer-token-authentication.html#single-page-applications[单页应用] 部分建议的方式实现单页应用（SPA）是否符合你的要求。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"If you prefer to use SPAs and JavaScript APIs such as `Fetch` or `XMLHttpRequest`(XHR) with Quarkus web applications, be aware that OIDC providers might not support cross-origin resource sharing (CORS) for authorization endpoints where the users are authenticated after a redirect from Quarkus.\n"
"This will lead to authentication failures if the Quarkus application and the OIDC provider are hosted on different HTTP domains, ports, or both."
msgstr "如果您喜欢使用 SPAs 和 JavaScript API（如 `Fetch` 或 `XMLHttpRequest` (XHR)）与 Quarkus Web 应用程序，请注意 OIDC 提供商可能不支持授权端点的跨源资源共享 (CORS)，在这些端点中，用户是在从 Quarkus 重定向后进行身份验证的。如果 Quarkus 应用程序和 OIDC 提供商托管在不同的 HTTP 域、端口或两者上，这将导致验证失败。"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "In such cases, set the `quarkus.oidc.authentication.java-script-auto-redirect` property to `false`, which will instruct Quarkus to return a `499` status code and a `WWW-Authenticate` header with the `OIDC` value."
msgstr "在这种情况下，将 `quarkus.oidc.authentication.java-script-auto-redirect` 属性设置为 `false` ，这将指示 Quarkus 返回一个 `499` 状态代码和一个带有 `OIDC` 值的 `WWW-Authenticate` 头。你还必须更新浏览器脚本，将 `X-Requested-With` 头部设置为 `JavaScript` 值，并在出现 `499` 状态代码的情况下重新加载最后请求的页面。比如说："

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The browser script must set a header to identify the current request as a JavaScript request for a `499` status code to be returned when the `quarkus.oidc.authentication.java-script-auto-redirect` property is set to `false`."
msgstr "浏览器脚本必须设置一个标头，将当前请求标识为 JavaScript 请求，以便在 `quarkus.oidc.authentication.java-script-auto-redirect` 属性设置为 `false` 时返回 `499` 状态代码。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "If the script engine sets an engine-specific request header itself, then you can register a custom `quarkus.oidc.JavaScriptRequestChecker` bean, which will inform Quarkus if the current request is a JavaScript request. For example, if the JavaScript engine sets a header such as `HX-Request: true`, then you can have it checked like this:"
msgstr "如果脚本引擎自己设置了特定于引擎的请求头，那么你可以注册一个自定义的 `quarkus.oidc.JavaScriptRequestChecker` Bean，它会告知 Quarkus 当前请求是否为 JavaScript 请求。例如，如果 JavaScript 引擎设置了一个头文件，如 `HX-Request: true` ，那么你可以像这样检查它："

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "and reload the last requested page in case of a `499` status code."
msgstr "并在出现 `499` 状态代码时重新加载上次请求的页面。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Otherwise, you must also update the browser script to set the `X-Requested-With` header with the `JavaScript` value and reload the last requested page in case of a `499` status code."
msgstr "否则，您还必须更新浏览器脚本，将 `X-Requested-With` 头设置为 `JavaScript` 值，并在出现 `499` 状态代码时重新加载上次请求的页面。"

#. type: Title ===
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Cross-origin resource sharing"
msgstr "Cross-Origin 资源共享"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"If you plan to consume this application from a single-page application running on a different domain, you need to configure cross-origin resource sharing (CORS).\n"
"For more information, see the xref:security-cors.adoc#cors-filter[CORS filter] section of the \"Cross-origin resource sharing\" guide."
msgstr "如果计划从运行在不同域上的单页面应用程序中使用此应用程序，则需要配置跨源资源共享 (CORS)。更多信息，请参阅 \"跨源资源共享 \"指南中的 xref:security-cors.adoc#cors-filter[CORS 过滤器] 部分。"

#. type: Title ===
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Calling Cloud provider services"
msgstr "呼叫云供应商服务"

#. type: Title ====
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Google Cloud"
msgstr "谷歌云"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can have Quarkus OIDC `web-app` applications access **Google Cloud services** such as **BigQuery** on behalf of the currently authenticated users who have enabled OIDC authorization code flow permissions to such services in their Google developer consoles."
msgstr "您可以让 Quarkus OIDC `web-app` 应用程序代表当前已通过身份验证的用户访问 *BigQuery* 等 *Google 云* 服务，这些用户已在其 Google 开发人员控制台中启用了 OIDC 授权代码流权限。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"You can do so by using https://github.com/quarkiverse[Quarkiverse] https://github.com/quarkiverse/quarkiverse-google-cloud-services[Google Cloud Services].\n"
"You need only to add\n"
"the https://github.com/quarkiverse/quarkiverse-google-cloud-services/releases/latest[latest tag] service dependency as shown in the following example:"
msgstr "您可以通过使用 link:https://github.com/quarkiverse[Quarkiverse] link:https://github.com/quarkiverse/quarkiverse-google-cloud-services[谷歌云服务] 来实现这一点。您只需添加 link:https://github.com/quarkiverse/quarkiverse-google-cloud-services/releases/latest[最新的标签] 服务依赖关系，如下例所示："

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Then, configure Google OIDC properties:"
msgstr "然后，配置 Google OIDC 属性："

#. type: Title ===
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Running Quarkus application behind a reverse proxy"
msgstr "在反向代理后面运行Quarkus应用程序"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The OIDC authentication mechanism can be affected if your Quarkus application is running behind a reverse proxy, gateway, or firewall when HTTP `Host` header might be reset to the internal IP address and HTTPS connection might be terminated, and so on.\n"
"For example, an authorization code flow `redirect_uri` parameter might be set to the internal host instead of the expected external one."
msgstr "如果您的 Quarkus 应用程序运行在反向代理、网关或防火墙后面，HTTP `Host` 标头可能会被重置为内部 IP 地址，HTTPS 连接可能会被终止等，那么 OIDC 身份验证机制就会受到影响。例如，授权码流 `redirect_uri` 参数可能被设置为内部主机，而不是预期的外部主机。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"In such cases, configuring Quarkus to recognize the original headers forwarded by the proxy will be required.\n"
"For more information, see the xref:http-reference.adoc#reverse-proxy[Running behind a reverse proxy] Vert.x documentation section."
msgstr "在这种情况下，需要配置 Quarkus 以识别代理转发的原始标头。更多信息，请参阅 xref:http-reference.adoc#reverse-proxy[反向代理] Vert.x 文档部分。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"For example, if your Quarkus endpoint runs in a cluster behind Kubernetes Ingress, then a redirect from the OIDC provider back to this endpoint might not work because the calculated `redirect_uri` parameter might point to the internal endpoint address.\n"
"You can resolve this problem by using the following configuration, where `X-ORIGINAL-HOST` is set by Kubernetes Ingress to represent the external endpoint address.:"
msgstr "例如，如果你的 Quarkus 端点运行在 Kubernetes Ingress 后面的集群中，那么从 OIDC 提供商重定向回该端点可能会不起作用，因为计算出的 `redirect_uri` 参数可能指向内部端点地址。您可以使用以下配置来解决这个问题，其中 `X-ORIGINAL-HOST` 由 Kubernetes Ingress 设置为外部端点地址："

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "`quarkus.oidc.authentication.force-redirect-https-scheme` property can also be used when the Quarkus application is running behind an SSL terminating reverse proxy."
msgstr "`quarkus.oidc.authentication.force-redirect-https-scheme` 当 Quarkus 应用程序在 SSL 终止反向代理后运行时，也可以使用该属性。"

#. type: Title ===
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "External and internal access to the OIDC provider"
msgstr "外部和内部访问OIDC提供者"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The OIDC provider externally-accessible authorization, logout, and other endpoints can have different HTTP(S) URLs compared to the URLs auto-discovered or configured relative to the `quarkus.oidc.auth-server-url` internal URL.\n"
"In such cases, the endpoint might report an issuer verification failure and redirects to the externally-accessible OIDC provider endpoints might fail."
msgstr "与自动发现的 URL 或相对于 `quarkus.oidc.auth-server-url` 内部 URL 配置的 URL 相比，外部可访问的 OIDC 提供商授权、注销和其他端点可能具有不同的 HTTP(S) URL。在这种情况下，端点可能会报告签发者验证失败，重定向到外部可访问的 OIDC 提供商端点可能会失败。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"If you work with Keycloak, then start it with a `KEYCLOAK_FRONTEND_URL` system property set to the externally-accessible base URL.\n"
"If you work with other OIDC providers, check the documentation of your provider."
msgstr "如果使用 Keycloak，则在启动时将 `KEYCLOAK_FRONTEND_URL` 系统属性设置为外部可访问的基本 URL。如果使用其他 OIDC 提供商，请查看提供商的文档。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid "OIDC HTTP client redirects"
msgstr ""

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"OIDC providers behind a firewall may redirect Quarkus OIDC HTTP client's GET requests to some of its endpoints such as a well-known configuration endpoint.\n"
"By default, Quarkus OIDC HTTP client follows HTTP redirects automatically, excluding cookies which may have been set during the redirect request for security reasons."
msgstr ""

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid "If you would like, you can disable it with `quarkus.oidc.follow-redirects=false`."
msgstr ""

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid "When following redirects automatically is disabled, and Quarkus OIDC HTTP client receives a redirect request, it will attempt to recover only once by following the redirect URI, but only if it is exactly the same as the original request URI, and as long as one or more cookies were set during the redirect request."
msgstr ""

#. type: Title ==
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "OIDC SAML identity broker"
msgstr "OIDC SAML 身份代理"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "If your identity provider does not implement OpenID Connect but only the legacy XML-based SAML2.0 SSO protocol, then Quarkus cannot be used as a SAML 2.0 adapter, similarly to how `quarkus-oidc` is used as an OIDC adapter."
msgstr "如果你的身份提供商没有实施 OpenID Connect，而只是实施了传统的基于 XML 的 SAML2.0 SSO 协议，那么 Quarkus 就不能用作 SAML 2.0 适配器，就像 `quarkus-oidc` 不能用作 OIDC 适配器一样。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"However, many OIDC providers such as Keycloak, Okta, Auth0, and Microsoft ADFS offer OIDC to SAML 2.0 bridges.\n"
"You can create an identity broker connection to a SAML 2.0 provider in your OIDC provider and use `quarkus-oidc` to authenticate your users to this SAML 2.0 provider, with the OIDC provider coordinating OIDC and SAML 2.0 communications.\n"
"As far as Quarkus endpoints are concerned, they can continue using the same Quarkus Security, OIDC API, annotations such as `@Authenticated`, `SecurityIdentity`, and so on."
msgstr "不过，许多 OIDC 提供商（如 Keycloak、Okta、Auth0 和 Microsoft ADFS）都提供 OIDC 到 SAML 2.0 的桥接。你可以在 OIDC 提供商中创建一个与 SAML 2.0 提供商的身份代理连接，并使用 `quarkus-oidc` 将用户认证到该 SAML 2.0 提供商，由 OIDC 提供商协调 OIDC 和 SAML 2.0 通信。至于 Quarkus 端点，它们可以继续使用相同的 Quarkus 安全性、OIDC API、注释（如 `@Authenticated` 、 `SecurityIdentity` 等）。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"For example, assume `Okta` is your SAML 2.0 provider and `Keycloak` is your OIDC provider.\n"
"Here is a typical sequence explaining how to configure `Keycloak` to broker with the `Okta` SAML 2.0 provider."
msgstr "例如，假设 `Okta` 是 SAML 2.0 提供程序，而 `Keycloak` 是 OIDC 提供程序。以下是解释如何配置 `Keycloak` 以与 `Okta` SAML 2.0 提供商进行代理的典型顺序。"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "First, create a new `SAML2` integration in your `Okta` `Dashboard/Applications`:"
msgstr "首先，在您的 `Okta` `Dashboard/Applications` 中创建一个新的 `SAML2` 集成："

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "For example, name it as `OktaSaml`:"
msgstr "例如，将其命名为 `OktaSaml` ："

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Next, configure it to point to a Keycloak SAML broker endpoint.\n"
"At this point, you need to know the name of the Keycloak realm, for example, `quarkus`, and, assuming that the Keycloak SAML broker alias is `saml`, enter the endpoint address as `http://localhost:8081/realms/quarkus/broker/saml/endpoint`.\n"
"Enter the service provider (SP) entity ID as `http://localhost:8081/realms/quarkus`, where `http://localhost:8081` is a Keycloak base address and `saml` is a broker alias:"
msgstr "接下来，配置它指向 Keycloak SAML 代理端点。此时，你需要知道 Keycloak 领域的名称，例如 `quarkus` ，假设 Keycloak SAML 代理的别名是 `saml` ，则输入端点地址为 `http://localhost:8081/realms/quarkus/broker/saml/endpoint` .输入服务提供商 (SP) 实体 ID 为 `http://localhost:8081/realms/quarkus` ，其中 `http://localhost:8081` 是 Keycloak 基本地址， `saml` 是代理别名："

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Next, save this SAML integration and note its Metadata URL:"
msgstr "接下来，保存此 SAML 集成并记下其元数据 URL："

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Next, add a SAML provider to Keycloak:"
msgstr "接下来，向 Keycloak 添加 SAML 提供程序："

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"First, as usual, create a new realm or import the existing realm to `Keycloak`.\n"
"In this case, the realm name has to be `quarkus`."
msgstr "首先，像往常一样，创建一个新领域或将现有领域导入 `Keycloak` 。在这种情况下，领域名称必须是 `quarkus` 。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Now, in the `quarkus` realm properties, navigate to `Identity Providers` and add a new SAML provider:"
msgstr "现在，在 `quarkus` realm 属性中，导航至 `Identity Providers` 并添加新的 SAML 提供程序："

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Note the alias is set to `saml`, `Redirect URI` is `http://localhost:8081/realms/quarkus/broker/saml/endpoint` and `Service provider entity ID` is `http://localhost:8081/realms/quarkus` - these are the same values you entered when creating the Okta SAML integration in the previous step."
msgstr "注意别名设置为 `saml` ， `Redirect URI` 为 `http://localhost:8081/realms/quarkus/broker/saml/endpoint` 和 `Service provider entity ID` 是 `http://localhost:8081/realms/quarkus` - 这些值与您在上一步创建 Okta SAML 集成时输入的值相同。"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Finally, set `Service entity descriptor` to point to the Okta SAML Integration Metadata URL you noted at the end of the previous step."
msgstr "最后，设置 `Service entity descriptor` ，指向上一步末尾提到的 Okta SAML Integration Metadata URL。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Next, if you want, you can register this Keycloak SAML provider as a default provider by navigating to `Authentication/browser/Identity Provider Redirector config` and setting both the `Alias` and `Default Identity Provider` properties to `saml`.\n"
"If you do not configure it as a default provider then, at authentication time, Keycloak offers 2 options:"
msgstr "接下来，如果你愿意，可以将 Keycloak SAML 提供程序注册为默认提供程序，方法是导航到 `Authentication/browser/Identity Provider Redirector config` ，并将 `Alias` 和 `Default Identity Provider` 属性都设置为 `saml` 。如果你不将其配置为默认提供程序，那么在身份验证时，Keycloak 会提供 2 个选项："

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Authenticate with the SAML provider"
msgstr "使用 SAML 提供商进行身份验证"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Authenticate directly to Keycloak with the name and password"
msgstr "使用名称和密码直接验证 Keycloak"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Now, configure the Quarkus OIDC `web-app` application to point to the Keycloak `quarkus` realm, `quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus`.\n"
"Then, you are ready to start authenticating your Quarkus users to the Okta SAML 2.0 provider by using an OIDC to SAML bridge that is provided by Keycloak OIDC and Okta SAML 2.0 providers."
msgstr "现在，配置 Quarkus OIDC `web-app` 应用程序，使其指向 Keycloak `quarkus` 领域 `quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus` 。然后，您就可以使用 Keycloak OIDC 和 Okta SAML 2.0 提供商提供的 OIDC 到 SAML 桥接，开始将 Quarkus 用户验证到 Okta SAML 2.0 提供商。"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can configure other OIDC providers to provide a SAML bridge similarly to how it can be done for Keycloak."
msgstr "您可以配置其他 OIDC 提供商提供 SAML 桥接，与 Keycloak 的配置方式类似。"

#. type: Title ==
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Testing"
msgstr "测试"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Testing is often tricky when it comes to authentication to a separate OIDC-like server.\n"
"Quarkus offers several options from mocking to a local run of an OIDC provider."
msgstr "当需要对独立的类 OIDC 服务器进行身份验证时，测试往往会很棘手。Quarkus 提供了多种选择，从模拟到本地运行 OIDC 提供商。"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid "Start by adding the following dependencies to your test project:"
msgstr "首先在你的测试项目中添加以下依赖项："

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid "Dev Services for Keycloak"
msgstr "为Keycloak提供的开发服务"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"For integration testing against Keycloak, use xref:security-openid-connect-dev-services.adoc[Dev services for Keycloak].\n"
"This service initializes a test container, creates a `quarkus` realm, and configures a `quarkus-app` client with the secret `secret`.\n"
"It also sets up two users: `alice` with `admin` and `user` roles, and `bob` with the `user` role."
msgstr ""

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid "First, prepare the `application.properties` file."
msgstr ""

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid "If starting from an empty `application.properties` file, `Dev Services for Keycloak` automatically registers the following properties:"
msgstr ""

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid "`quarkus.oidc.auth-server-url`, which points to the running test container."
msgstr ""

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid "`quarkus.oidc.client-id=quarkus-app`."
msgstr ""

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid "`quarkus.oidc.credentials.secret=secret`."
msgstr ""

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If you already have the required `quarkus-oidc` properties configured, associate `quarkus.oidc.auth-server-url` with the `prod` profile.\n"
"This ensures that `Dev Services for Keycloak` starts the container as expected.\n"
"For example:"
msgstr ""

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid "To import a custom realm file into Keycloak before running the tests, configure `Dev services for Keycloak` as shown:"
msgstr ""

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Finally, write the test code as described in the <<code-flow-integration-testing-wiremock,Wiremock>> section.\n"
"The only difference is that `@QuarkusTestResource` is no longer required:"
msgstr ""

#. type: Title ===
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Wiremock"
msgstr "Wiremock"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid "Add the following dependency:"
msgstr "添加以下依赖关系："

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Prepare the REST test endpoints and set `application.properties`.\n"
"For example:"
msgstr "准备 REST 测试端点并设置 `application.properties` 。例如"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Finally, write the test code, for example:"
msgstr "最后，编写测试代码，例如"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"`OidcWiremockTestResource` recognizes `alice` and `admin` users.\n"
"The user `alice` has the `user` role only by default - it can be customized with a `quarkus.test.oidc.token.user-roles` system property.\n"
"The user `admin` has the `user` and `admin` roles by default - it can be customized with a `quarkus.test.oidc.token.admin-roles` system property."
msgstr "`OidcWiremockTestResource` 承认 和 用户。用户 默认只具有 角色--可通过 系统属性进行自定义。用户 默认具有 和 角色，可通过 系统属性进行自定义。 `alice` `admin` `alice` `user` `quarkus.test.oidc.token.user-roles` `admin` `user` `admin` `quarkus.test.oidc.token.admin-roles` "

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Additionally, `OidcWiremockTestResource` sets the token issuer and audience to `https://service.example.com`,  which can be customized with `quarkus.test.oidc.token.issuer` and `quarkus.test.oidc.token.audience` system properties."
msgstr "此外， `OidcWiremockTestResource` 还将令牌发行人和受众设置为 `https://service.example.com` ，可通过 `quarkus.test.oidc.token.issuer` 和 `quarkus.test.oidc.token.audience` 系统属性进行自定义。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "`OidcWiremockTestResource` can be used to emulate all OIDC providers."
msgstr "`OidcWiremockTestResource` 可用于模拟所有 OIDC 提供商。"

#. type: Title ===
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Using KeycloakTestResourceLifecycleManager"
msgstr "使用KeycloakTestResourceLifecycleManager"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Use `KeycloakTestResourceLifecycleManager` for your tests only if there is a good reason not to use `Dev Services for Keycloak`.\n"
"If you need to do the integration testing against Keycloak then you are encouraged to do it with <<code-flow-integration-testing-keycloak-devservices,Dev Services for Keycloak>>."
msgstr "只有在有充分理由不使用 `Dev Services for Keycloak` 的情况下，才使用 `KeycloakTestResourceLifecycleManager` 进行测试。如果您需要针对 Keycloak 进行集成测试，我们建议您使用 xref:code-flow-integration-testing-keycloak-devservices[Keycloak 的 Dev Services] 进行测试。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "First, add the following dependency:"
msgstr "首先，添加以下依赖项："

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "This provides `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` - an implementation of `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which starts a Keycloak container."
msgstr "它提供 `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` - `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` 的实现，可启动 Keycloak 容器。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Then, configure the Maven Surefire plugin as follows (and similarly the Maven Failsafe plugin when testing in native image):"
msgstr "然后，按如下步骤配置 Maven Surefire 插件（在本地镜像中测试时，同样配置 Maven Failsafe 插件）："

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Now, set the configuration and write the test code the same way as it is described in the <<code-flow-integration-testing-wiremock,Wiremock>> section.\n"
"The only difference is the name of `QuarkusTestResource`:"
msgstr "现在，设置配置并编写测试代码，方法与 xref:code-flow-integration-testing-wiremock[Wiremock] 部分所述相同。唯一不同的是 `QuarkusTestResource` 的名称："

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"`KeycloakTestResourceLifecycleManager` registers `alice` and `admin` users.\n"
"The user `alice` has the `user` role only by default - it can be customized with a `keycloak.token.user-roles` system property.\n"
"The user `admin` has the `user` and `admin` roles by default - it can be customized with a `keycloak.token.admin-roles` system property."
msgstr "`KeycloakTestResourceLifecycleManager` 注册 `alice` 和 `admin` 用户。默认情况下，用户 `alice` 仅具有 `user` 角色 - 可以使用 `keycloak.token.user-roles` 系统属性对其进行自定义。默认情况下，用户 `admin` 具有 `用户` 和 `admin` 角色 - 可以使用 `keycloak.token.admin-roles` 系统属性对其进行自定义。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"By default, `KeycloakTestResourceLifecycleManager` uses HTTPS to initialize a Keycloak instance that can be disabled by specifying `keycloak.use.https=false`.\n"
"The default realm name is `quarkus` and client id is `quarkus-web-app` - set `keycloak.realm` and `keycloak.web-app.client` system properties to customize the values if needed."
msgstr "默认情况下， `KeycloakTestResourceLifecycleManager` 使用 HTTPS 初始化 Keycloak 实例，可通过指定 `keycloak.use.https=false` 禁用该实例。默认情况下，域名称为 `quarkus` ，客户端 id 为 `quarkus-web-app` - 如有需要，可设置 `keycloak.realm` 和 `keycloak.web-app.client` 系统属性以自定义值。"

#. type: Title ===
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "TestSecurity annotation"
msgstr "TestSecurity注解"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can use `@TestSecurity` and `@OidcSecurity` annotations to test the `web-app` application endpoint code, which depends on either one of the following injections, or all four:"
msgstr "您可以使用 `@TestSecurity` 和 `@OidcSecurity` 注释来测试 `web-app` 应用程序端点代码，该代码依赖于以下注入之一或全部四个注入："

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "ID `JsonWebToken`"
msgstr "身份证 `JsonWebToken`"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Access `JsonWebToken`"
msgstr "访问 `JsonWebToken`"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "`UserInfo`"
msgstr "`UserInfo`"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "`OidcConfigurationMetadata`"
msgstr "`OidcConfigurationMetadata`"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "For more information, see xref:security-oidc-bearer-token-authentication.adoc#bearer-token-integration-testing-security-annotation[Use TestingSecurity with injected JsonWebToken]."
msgstr "如需了解更多信息，请参阅在 xref:security-oidc-bearer-token-authentication.adoc#bearer-token-integration-testing-security-annotation[注入 JsonWebToken 时使用 TestingSecurity] 。"

#. type: Title ===
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy, no-wrap
msgid "Checking errors in the logs"
msgstr "检查日志中的错误"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "To see details about the token verification errors, you must enable `io.quarkus.oidc.runtime.OidcProvider` `TRACE` level logging:"
msgstr "要看到关于令牌验证错误的细节，你必须启用 `io.quarkus.oidc.runtime.OidcProvider` `TRACE` 级日志："

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "To see details about the OidcProvider client initialization errors, enable `io.quarkus.oidc.runtime.OidcRecorder` `TRACE` level logging:"
msgstr "要看到关于OidcProvider客户端初始化错误的细节，请启用 `io.quarkus.oidc.runtime.OidcRecorder` `TRACE` 级日志："

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "From the `quarkus dev` console, type `j` to change the application global log level."
msgstr "从 `quarkus dev` 控制台键入 `j` 更改应用程序全局日志级别。"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid "Programmatic OIDC start-up"
msgstr ""

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid "OIDC tenants can be created programmatically like in the example below:"
msgstr ""

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid "The code above is a programmatic equivalent to the following configuration in the `application.properties` file:"
msgstr ""

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid "Should you need to configure more OIDC tenant properties, use the `OidcTenantConfig` builder like in the example below:"
msgstr ""

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"For more complex setup involving multiple tenants please see the xref:security-openid-connect-multitenancy.adoc#programmatic-startup[Programmatic OIDC start-up for multitenant application]\n"
"section of the OpenID Connect Multi-Tenancy guide."
msgstr ""

#. type: Title ==
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "References"
msgstr "参考文献"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties]"
msgstr "xref:security-oidc-configuration-properties-reference.adoc[OIDC 配置属性]"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "xref:security-openid-connect-providers.adoc[Configuring well-known OpenID Connect providers]"
msgstr "xref:security-openid-connect-providers.adoc[配置众所周知的 OpenID Connect 提供商]"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "xref:security-openid-connect-client-reference.adoc[OpenID Connect and OAuth2 client and filters reference guide]"
msgstr "xref:security-openid-connect-client-reference.adoc[OpenID Connect 和 OAuth2 客户端及过滤器参考指南]"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]"
msgstr "xref:security-openid-connect-dev-services.adoc[Keycloak 的开发服务]"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "xref:security-authentication-mechanisms.adoc#oidc-jwt-oauth2-comparison[Choosing between OpenID Connect, SmallRye JWT, and OAuth2 authentication mechanisms]"
msgstr "xref:security-authentication-mechanisms.adoc#oidc-jwt-oauth2-comparison[在 OpenID Connect、SmallRye JWT 和 OAuth2 身份验证机制之间做出选择]"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "xref:security-authentication-mechanisms.adoc#combining-authentication-mechanisms[Combining authentication mechanisms]"
msgstr "xref:security-authentication-mechanisms.adoc#combining-authentication-mechanisms[组合认证机制]"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus 安全概述]"

#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "https://www.keycloak.org/documentation.html[Keycloak documentation]"
msgstr "link:https://www.keycloak.org/documentation.html[Keycloak 文档]"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr "link:https://openid.net/connect/[OpenID Connect]"

#. type: Plain text
#: _versions/main/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "link:https://tools.ietf.org/html/rfc7519[JSON 网络令牌]"
