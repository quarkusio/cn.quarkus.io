# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/vertx-reference.adoc:6
#, no-wrap
msgid "Vert.x Reference Guide"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:12
msgid "https://vertx.io[Vert.x] is a toolkit for building reactive applications.  As described in the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture], Quarkus uses Vert.x underneath."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:15
msgid "This guide is the companion to the xref:vertx.adoc[Using Eclipse Vert.x API from a Quarkus Application] guide.  It provides more advanced details about the usage and the configuration of the Vert.x instance used by Quarkus."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/vertx-reference.adoc:18
#, no-wrap
msgid "Accessing the Vert.x instance"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:22
msgid "To access the managed Vert.x instance, add the `quarkus-vertx` extension to your project.  Note that this dependency may already be installed (as a transitive dependency)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:24
msgid "With this extension, you can retrieve the managed instance of Vert.x using either field or constructor injection:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:31
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyBean {\n"
"// Field injection\n"
"@Inject Vertx vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:36
#, no-wrap
msgid ""
"// Constructor injection\n"
"MyBean(Vertx vertx) {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:38
#: upstream/_versions/main/guides/vertx-reference.adoc:211
#: upstream/_versions/main/guides/vertx-reference.adoc:810
#: upstream/_versions/main/guides/vertx-reference.adoc:871
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:41
msgid "You can inject either the:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:43
msgid "`io.vertx.core.Vertx` instance exposing the _bare_ Vert.x API"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:44
msgid "`io.vertx.mutiny.core.Vertx` instance exposing the _Mutiny_ API"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:46
msgid "We recommend using the Mutiny variant as it integrates with the other reactive APIs provided by Quarkus."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/vertx-reference.adoc:48
#: upstream/_versions/main/guides/vertx-reference.adoc:551
#, no-wrap
msgid "Mutiny"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/vertx-reference.adoc:51
msgid "If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:54
msgid "Documentation about the Vert.x Mutiny variant is available on https://smallrye.io/smallrye-mutiny-vertx-bindings."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/vertx-reference.adoc:56
#, no-wrap
msgid "Configuring the Vert.x instance"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:60
msgid "You can configure the Vert.x instance from the `application.properties` file.  The following table lists the supported properties:"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/vertx-reference.adoc:65
#, no-wrap
msgid "Using Vert.x clients"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:69
msgid "In addition to Vert.x core, you can use most Vert.x ecosystem libraries.  Some Quarkus extension already wraps Vert.x libraries."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:70
#, no-wrap
msgid "Available APIs"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:75
msgid "The following table lists the most used libraries from the Vert.x ecosystem.  To access these APIs, add the indicated extension or dependency to your project.  Refer to the associated documentation to learn how to use them."
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:79
#, no-wrap
msgid "API"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:80
#, no-wrap
msgid "Extension or Dependency"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:82
#, no-wrap
msgid "Documentation"
msgstr "文档"

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:83
#, no-wrap
msgid "AMQP Client"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:84
#, no-wrap
msgid "`io.quarkus:quarkus-smallrye-reactive-messaging-amqp` (extension)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:86
#, no-wrap
msgid "https://quarkus.io/guides/amqp"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:87
#, no-wrap
msgid "Circuit Breaker"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:88
#, no-wrap
msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-circuit-breaker` (external dependency)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:90
#, no-wrap
msgid "https://vertx.io/docs/vertx-circuit-breaker/java/"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:91
#, no-wrap
msgid "Consul Client"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:92
#, no-wrap
msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-consul-client` (external dependency)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:94
#, no-wrap
msgid "https://vertx.io/docs/vertx-consul-client/java/"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:95
#, no-wrap
msgid "DB2 Client"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:96
#, no-wrap
msgid "`io.quarkus:quarkus-reactive-db2-client` (extension)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:98
#: upstream/_versions/main/guides/vertx-reference.adoc:114
#: upstream/_versions/main/guides/vertx-reference.adoc:118
#: upstream/_versions/main/guides/vertx-reference.adoc:122
#: upstream/_versions/main/guides/vertx-reference.adoc:126
#, no-wrap
msgid "https://quarkus.io/guides/reactive-sql-clients"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:99
#, no-wrap
msgid "Kafka Client"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:100
#, no-wrap
msgid "`io.quarkus:quarkus-smallrye-reactive-messaging-kafka` (extension)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:102
#, no-wrap
msgid "https://quarkus.io/guides/kafka"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:103
#, no-wrap
msgid "Mail Client"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:104
#, no-wrap
msgid "`io.quarkus:quarkus-mailer` (extension)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:106
#, no-wrap
msgid "https://quarkus.io/guides/mailer"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:107
#, no-wrap
msgid "MQTT Client"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:108
#, no-wrap
msgid "`io.quarkus:quarkus-smallrye-reactive-messaging-mqtt` (extension)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:110
#, no-wrap
msgid "https://quarkus.io/guides/mqtt"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:111
#, no-wrap
msgid "MS SQL Client"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:112
#, no-wrap
msgid "`io.quarkus:quarkus-reactive-mssql-client` (extension)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:115
#, no-wrap
msgid "MySQL Client"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:116
#, no-wrap
msgid "`io.quarkus:quarkus-reactive-mysql-client` (extension)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:119
#, no-wrap
msgid "Oracle Client"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:120
#, no-wrap
msgid "`io.quarkus:quarkus-reactive-oracle-client` (extension)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:123
#, no-wrap
msgid "PostgreSQL Client"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:124
#, no-wrap
msgid "`io.quarkus:quarkus-reactive-pg-client` (extension)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:127
#, no-wrap
msgid "RabbitMQ Client"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:128
#, no-wrap
msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-rabbitmq-client` (external dependency)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:130
#, no-wrap
msgid "https://vertx.io/docs/vertx-rabbitmq-client/java"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:131
#, no-wrap
msgid "Redis Client"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:132
#, no-wrap
msgid "`io.quarkus:quarkus-redis-client` (extension)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:134
#, no-wrap
msgid "https://quarkus.io/guides/redis"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:135
#, no-wrap
msgid "Web Client"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:136
#, no-wrap
msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-web-client` (external dependency)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/vertx-reference.adoc:138
#, no-wrap
msgid "https://vertx.io/docs/vertx-web-client/java/"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:141
msgid "To learn more about the usage of the Vert.x Mutiny API, refer to https://smallrye.io/smallrye-mutiny-vertx-bindings."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:142
#, no-wrap
msgid "Example of usage"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:146
msgid "This section gives an example using the Vert.x `WebClient` in the context of a RESTEasy Reactive application.  As indicated in the table above, add the following dependency to your project:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/vertx-reference.adoc:148
#: upstream/_versions/main/guides/vertx-reference.adoc:922
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:154
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.smallrye.reactive</groupId>\n"
"    <artifactId>smallrye-mutiny-vertx-web-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/vertx-reference.adoc:157
#: upstream/_versions/main/guides/vertx-reference.adoc:938
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:160
#, no-wrap
msgid "implementation(\"io.smallrye.reactive:smallrye-mutiny-vertx-web-client\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:163
msgid "Now, in your code, you can create an instance of `WebClient`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:167
#: upstream/_versions/main/guides/vertx-reference.adoc:261
#: upstream/_versions/main/guides/vertx-reference.adoc:487
#: upstream/_versions/main/guides/vertx-reference.adoc:525
#: upstream/_versions/main/guides/vertx-reference.adoc:656
#: upstream/_versions/main/guides/vertx-reference.adoc:757
#: upstream/_versions/main/guides/vertx-reference.adoc:796
#: upstream/_versions/main/guides/vertx-reference.adoc:845
#, no-wrap
msgid "package org.acme.vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:175
#, no-wrap
msgid ""
"import javax.annotation.PostConstruct;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:177
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:182
#, no-wrap
msgid ""
"import io.vertx.mutiny.core.Vertx;\n"
"import io.vertx.mutiny.ext.web.client.WebClient;\n"
"import io.vertx.core.json.JsonObject;\n"
"import io.vertx.ext.web.client.WebClientOptions;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:185
#, no-wrap
msgid ""
"@Path(\"/fruit-data\")\n"
"public class ResourceUsingWebClient {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:187
#, no-wrap
msgid "    private final WebClient client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:192
#, no-wrap
msgid ""
"    @Inject\n"
"    VertxResource(Vertx vertx) {\n"
"        this.client = WebClient.create(vertx);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:209
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.APPLICATION_JSON)\n"
"    @Path(\"/{name}\")\n"
"    public Uni<JsonObject> getFruitData(String name) {\n"
"        return client.getAbs(\"https://.../api/fruit/\" + name)\n"
"                .send()\n"
"                .onItem().transform(resp -> {\n"
"                    if (resp.statusCode() == 200) {\n"
"                        return resp.bodyAsJsonObject();\n"
"                    } else {\n"
"                        return new JsonObject()\n"
"                                .put(\"code\", resp.statusCode())\n"
"                                .put(\"message\", resp.bodyAsString());\n"
"                    }\n"
"                });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:217
msgid "This resource creates a `WebClient` and, upon request, uses this client to invoke a remote HTTP API.  Depending on the result, the response is forwarded as received, or it creates a JSON object wrapping the error.  The `WebClient` is asynchronous (and non-blocking), to the endpoint returns a `Uni`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:221
msgid "The application can also run as a native executable.  But, first, we need to instruct Quarkus to enable _ssl_ (if the remote API uses HTTPS).  Open the `src/main/resources/application.properties` and add:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:225
#, no-wrap
msgid "quarkus.ssl.native=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:228
msgid "Then, create the native executable with:"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/vertx-reference.adoc:232
#, no-wrap
msgid "Using Vert.x JSON"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:236
msgid "Vert.x APIs often rely on JSON.  Vert.x provides two convenient classes to manipulate JSON document: `io.vertx.core.json.JsonObject` and `io.vertx.core.json.JsonArray`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:238
msgid "`JsonObject` can be used to map an object into its JSON representation and build an object from a JSON document:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:244
#, no-wrap
msgid ""
"// Map an object into JSON\n"
"Person person = ...;\n"
"JsonObject json = JsonObject.mapFrom(person);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:248
#, no-wrap
msgid ""
"// Build an object from JSON\n"
"json = new JsonObject();\n"
"person = json.mapTo(Person.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:252
msgid "Note that these features use the mapper managed by the `quarkus-jackson` extension.  Refer to xref:rest-json.adoc#json[Jackson configuration] to customize the mapping."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:256
msgid "JSON Object and JSON Array are both supported as Quarkus HTTP endpoint requests and response bodies (using classic RESTEasy and RESTEasy Reactive).  Consider these endpoints:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:264
#, no-wrap
msgid ""
"import io.vertx.core.json.JsonObject;\n"
"import io.vertx.core.json.JsonArray;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:269
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:273
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"public class VertxJsonResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:279
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"{name}/object\")\n"
"    public JsonObject jsonObject(String name) {\n"
"        return new JsonObject().put(\"Hello\", name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:286
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"{name}/array\")\n"
"    public JsonArray jsonArray(String name) {\n"
"        return new JsonArray().add(\"Hello\").add(name);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:289
msgid "http://localhost:8080/hello/Quarkus/object returns:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:293
#, no-wrap
msgid "{\"Hello\":\"Quarkus\"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:296
msgid "http://localhost:8080/hello/Quarkus/array returns:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:300
#, no-wrap
msgid "[\"Hello\",\"Quarkus\"]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:303
msgid "This works equally well when the JSON content is a request body or is wrapped in a `Uni`, `Multi`, `CompletionStage` or `Publisher`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/vertx-reference.adoc:304
#, no-wrap
msgid "Using verticles"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:309
msgid "link:https://vertx.io/docs/vertx-core/java/#_verticles[Verticles] is \"a simple, scalable, actor-like deployment and concurrency model\" provided by _Vert.x_.  This model does not claim to be a strict actor-model implementation, but it shares similarities, especially concerning concurrency, scaling, and deployment.  To use this model, you write and _deploy_ verticles, communicating by sending messages on the event bus."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:312
msgid "You can deploy _verticles_ in Quarkus.  It supports:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:314
msgid "_bare_ verticle - Java classes extending `io.vertx.core.AbstractVerticle`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:315
msgid "_Mutiny_ verticle - Java classes extending `io.smallrye.mutiny.vertx.core.AbstractVerticle`"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:316
#, no-wrap
msgid "Deploying verticles"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:319
msgid "To deploy verticles, use the `deployVerticle` method:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:323
#, no-wrap
msgid "@Inject Vertx vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:327
#, no-wrap
msgid ""
"// ...\n"
"vertx.deployVerticle(MyVerticle.class.getName(), ar -> { });\n"
"vertx.deployVerticle(new MyVerticle(), ar -> { });\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:330
msgid "If you use the Mutiny-variant of Vert.x, be aware that the `deployVerticle` method returns a `Uni`, and you would need to trigger a subscription to make the actual deployment."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:332
msgid "An example explaining how to deploy verticles during the initialization of the application will follow."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:333
#, no-wrap
msgid "Using @ApplicationScoped Beans as Verticle"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:339
msgid "In general, Vert.x verticles are not CDI beans.  And so cannot use injection.  However, in Quarkus, you can deploy verticles as beans.  Note that in this case, CDI (Arc in Quarkus) is responsible for creating the instance."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:341
msgid "The following snippet provides an example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:345
#: upstream/_versions/main/guides/vertx-reference.adoc:373
#, no-wrap
msgid "package io.quarkus.vertx.verticles;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:349
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.smallrye.mutiny.vertx.core.AbstractVerticle;\n"
"import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:351
#: upstream/_versions/main/guides/vertx-reference.adoc:491
#: upstream/_versions/main/guides/vertx-reference.adoc:800
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:354
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyBeanVerticle extends AbstractVerticle {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:356
#, no-wrap
msgid "    @ConfigProperty(name = \"address\") String address;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:364
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<Void> asyncStart() {\n"
"        return vertx.eventBus().consumer(address)\n"
"                .handler(m -> m.replyAndForget(\"hello\"))\n"
"                .completionHandler();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:367
msgid "You don't have to inject the `vertx` instance; instead, leverage the protected field from `AbstractVerticle`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:369
msgid "Then, deploy the verticle instances with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:376
#, no-wrap
msgid ""
"import io.quarkus.runtime.StartupEvent;\n"
"import io.vertx.mutiny.core.Vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:379
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.enterprise.event.Observes;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:382
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class VerticleDeployer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:387
#, no-wrap
msgid ""
"    public void init(@Observes StartupEvent e, Vertx vertx, MyBeanVerticle verticle) {\n"
"         vertx.deployVerticle(verticle).await().indefinitely();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:390
msgid "If you want to deploy every exposed `AbstractVerticle`, you can use:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:398
#, no-wrap
msgid ""
"public void init(@Observes StartupEvent e, Vertx vertx, Instance<AbstractVerticle> verticles) {\n"
"    for (AbstractVerticle verticle : verticles) {\n"
"        vertx.deployVerticle(verticle).await().indefinitely();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:400
#, no-wrap
msgid "Using multiple verticles instances"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:405
msgid "When using `@ApplicationScoped`, you will get a single instance for your verticle.  Having multiple instances of verticles can be helpful to share the load among them.  Each of them will be associated with a different I/O thread (Vert.x event loop)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:407
msgid "To deploy multiple instances of your verticle, use the `@Dependent` scope instead of `@ApplicationScoped`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:411
#: upstream/_versions/main/guides/vertx-reference.adoc:435
#, no-wrap
msgid "package org.acme.verticle;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:414
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.smallrye.mutiny.vertx.core.AbstractVerticle;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:417
#, no-wrap
msgid ""
"import javax.enterprise.context.Dependent;\n"
"import javax.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:420
#, no-wrap
msgid ""
"@Dependent\n"
"public class MyVerticle extends AbstractVerticle {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:428
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<Void> asyncStart() {\n"
"        return vertx.eventBus().consumer(\"address\")\n"
"                .handler(m -> m.reply(\"Hello from \" + this))\n"
"                .completionHandler();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:431
msgid "Then, deploy your verticle as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:439
#, no-wrap
msgid ""
"import io.quarkus.runtime.StartupEvent;\n"
"import io.vertx.core.DeploymentOptions;\n"
"import io.vertx.mutiny.core.Vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:444
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.enterprise.event.Observes;\n"
"import javax.enterprise.inject.Instance;\n"
"import javax.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:447
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyApp {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:454
#, no-wrap
msgid ""
"    void init(@Observes StartupEvent ev, Vertx vertx, Instance<MyVerticle> verticles) {\n"
"        vertx\n"
"                .deployVerticle(verticles::get, new DeploymentOptions().setInstances(2))\n"
"                .await().indefinitely();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:463
msgid "The `init` method receives an `Instance<MyVerticle>`.  Then, you pass a supplier to the `deployVerticle` method.  The supplier is just calling the `get()` method.  Thanks to the `@Dependent` scope, it returns a new instance on every call.  Finally, you pass the desired number of instances to the `DeploymentOptions`, such as two in the previous example.  It will call the supplier twice, which will create two instances of your verticle."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/vertx-reference.adoc:465
#, no-wrap
msgid "Using the event bus"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:469
msgid "Vert.x comes with a built-in https://vertx.io/docs/vertx-core/java/#event_bus[event bus] that you can use from your Quarkus application.  So, your application components (CDI beans, resources...) can interact using asynchronous events, thus promoting loose-coupling."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:472
msgid "With the event bus, you send _messages_ to _virtual addresses_.  The event bus offers three types of delivery mechanisms:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:474
msgid "point-to-point - send the message, one consumer receives it. If several consumers listen to the address, a round-robin is applied;"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:475
msgid "publish/subscribe - publish a message; all the consumers listening to the address are receiving the message;"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:476
msgid "request/reply - send the message and expect a response. The receiver can respond to the message in an asynchronous fashion."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:478
msgid "All these delivery mechanisms are non-blocking and are providing one of the fundamental bricks to build reactive applications."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:479
#, no-wrap
msgid "Consuming events"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:483
msgid "While you can use the Vert.x API to register consumers, Quarkus comes with declarative support.  To consume events, use the `io.quarkus.vertx.ConsumeEvent` annotation:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:489
#: upstream/_versions/main/guides/vertx-reference.adoc:527
#: upstream/_versions/main/guides/vertx-reference.adoc:798
#, no-wrap
msgid "import io.quarkus.vertx.ConsumeEvent;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:494
#: upstream/_versions/main/guides/vertx-reference.adoc:535
#: upstream/_versions/main/guides/vertx-reference.adoc:803
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class GreetingService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:500
#, no-wrap
msgid ""
"    @ConsumeEvent                           // <1>\n"
"    public String consume(String name) {    // <2>\n"
"        return name.toUpperCase();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:502
msgid "If not set, the address is the fully qualified name of the bean; for instance, in this snippet, it's `org.acme.vertx.GreetingService`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:503
msgid "The method parameter is the message body. If the method returns _something_, it's the message response."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:504
#, no-wrap
msgid "Configuring the address"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:507
msgid "The `@ConsumeEvent` annotation can be configured to set the address:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:514
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")               // <1>\n"
"public String consume(String name) {\n"
"    return name.toUpperCase();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:516
msgid "Receive the messages sent to the `greeting` address"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:517
#, no-wrap
msgid "Asynchronous processing"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:521
msgid "The previous examples use synchronous processing.  Asynchronous processing is also possible by returning either an `io.smallrye.mutiny.Uni` or a `java.util.concurrent.CompletionStage`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:532
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import java.util.concurrent.CompletableFuture;\n"
"import java.util.concurrent.CompletionStage;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:541
#, no-wrap
msgid ""
"    @ConsumeEvent\n"
"    public CompletionStage<String> consume(String name) {\n"
"        // return a CompletionStage completed when the processing is finished.\n"
"        // You can also fail the CompletionStage explicitly\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:548
#, no-wrap
msgid ""
"    @ConsumeEvent\n"
"    public Uni<String> process(String name) {\n"
"        // return an Uni completed when the processing is finished.\n"
"        // You can also fail the Uni explicitly\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/vertx-reference.adoc:555
msgid "The previous example uses Mutiny reactive types.  If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:557
#, no-wrap
msgid "Blocking processing"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:561
msgid "By default, the code consuming the event must be _non-blocking_, as it's called on an I/O thread.  If your processing is blocking, use the `@io.smallrye.common.annotation.Blocking` annotation:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:569
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"blocking-consumer\")\n"
"@Blocking\n"
"void consumeBlocking(String message) {\n"
"    // Something blocking\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:572
msgid "Alternatively, you can use the `blocking` attribute from the `@ConsumeEvent` annotation:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:579
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"blocking-consumer\", blocking = true)\n"
"void consumeBlocking(String message) {\n"
"    // Something blocking\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:582
msgid "When using `@Blocking`, it ignores the value of the `blocking` attribute of `@ConsumeEvent`."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:583
#, no-wrap
msgid "Replying to messages"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:587
msgid "The _return_ value of a method annotated with `@ConsumeEvent` is used to respond to the incoming message.  For instance, in the following snippet, the returned `String` is the response."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:594
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public String consume(String name) {\n"
"    return name.toUpperCase();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:597
msgid "You can also return a `Uni<T>` or a `CompletionStage<T>` to handle asynchronous reply:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:604
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public Uni<String> consume2(String name) {\n"
"    return Uni.createFrom().item(() -> name.toUpperCase()).emitOn(executor);\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/vertx-reference.adoc:609
msgid "You can inject an `executor` if you use the Context Propagation extension:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:612
#, no-wrap
msgid "@Inject Executor executor;\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:615
#, no-wrap
msgid "Implementing fire and forget interactions"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/vertx-reference.adoc:620
msgid "You don't have to reply to received messages.  Typically, for a _fire and forget_ interaction, the messages are consumed, and the sender does not need to know about it.  To implement this pattern, your consumer method returns `void`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:627
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public void consume(String event) {\n"
"    // Do something with the event\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:629
#, no-wrap
msgid "Dealing with messages"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:632
msgid "Unlike the previous example using the _payloads_ directly, you can also use `Message` directly:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:640
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public void consume(Message<String> msg) {\n"
"    System.out.println(msg.address());\n"
"    System.out.println(msg.body());\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:642
#, no-wrap
msgid "Handling Failures"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:645
msgid "If a method annotated with `@ConsumeEvent` throws an exception, then:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:647
msgid "if a reply handler is set, then the failure is propagated back to the sender via an `io.vertx.core.eventbus.ReplyException` with code `ConsumeEvent#FAILURE_CODE` and the exception message,"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:648
msgid "if no reply handler is set, then the exception is rethrown (and wrapped in a `RuntimeException` if necessary) and can be handled by the default exception handler, i.e. `io.vertx.core.Vertx#exceptionHandler()`."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:649
#, no-wrap
msgid "Sending messages"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:652
msgid "Sending and publishing messages use the Vert.x event bus:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:660
#: upstream/_versions/main/guides/vertx-reference.adoc:761
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.mutiny.core.eventbus.EventBus;\n"
"import io.vertx.mutiny.core.eventbus.Message;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:666
#: upstream/_versions/main/guides/vertx-reference.adoc:767
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:669
#, no-wrap
msgid ""
"@Path(\"/async\")\n"
"public class EventResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:672
#, no-wrap
msgid ""
"    @Inject\n"
"    EventBus bus;                                            // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:681
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"{name}\")\n"
"    public Uni<String> greeting(String name) {\n"
"        return bus.<String>request(\"greeting\", name)        // <2>\n"
"                .onItem().transform(Message::body);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:683
msgid "Inject the Event bus"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:684
msgid "Send a message to the address `greeting`. Message payload is `name`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:686
msgid "The `EventBus` object provides methods to:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:688
msgid "`send` a message to a specific address - one single consumer receives the message."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:689
msgid "`publish` a message to a specific address - all consumers receive the messages."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:690
msgid "`request` a message and expect a reply"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:700
#, no-wrap
msgid ""
"// Case 1\n"
"bus.sendAndForget(\"greeting\", name)\n"
"// Case 2\n"
"bus.publish(\"greeting\", name)\n"
"// Case 3\n"
"Uni<String> response = bus.<String>request(\"address\", \"hello, how are you?\")\n"
"        .onItem().transform(Message::body);\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:702
#, no-wrap
msgid "Using codecs"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:707
msgid "The https://vertx.io/docs/vertx-core/java/#event_bus[Vert.x Event Bus] uses codecs to _serialize_ and _deserialize_ objects.  Quarkus provides a default codec for local delivery.  So you can exchange objects as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:717
#, no-wrap
msgid ""
"@GET\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"@Path(\"{name}\")\n"
"public Uni<String> greeting(String name) {\n"
"    return bus.<String>request(\"greeting\", new MyName(name))\n"
"        .onItem().transform(Message::body);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:722
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"greeting\")\n"
"Uni<String> greeting(MyName name) {\n"
"    return Uni.createFrom().item(() -> \"Hello \" + name.getName());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:725
msgid "If you want to use a specific codec, you need to set it on both ends explicitly:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:736
#, no-wrap
msgid ""
"@GET\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"@Path(\"{name}\")\n"
"public Uni<String> greeting(String name) {\n"
"    return bus.<String>request(\"greeting\", name,\n"
"        new DeliveryOptions().setCodecName(MyNameCodec.class.getName())) // <1>\n"
"        .onItem().transform(Message::body);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:741
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"greeting\", codec = MyNameCodec.class)            // <2>\n"
"Uni<String> greeting(MyName name) {\n"
"    return Uni.createFrom().item(() -> \"Hello \"+name.getName());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:743
msgid "Set the name of the codec to use to send the message"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:744
msgid "Set the codec to use to receive the message"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:745
#, no-wrap
msgid "Combining HTTP and the event bus"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:751
msgid "Let's revisit a greeting HTTP endpoint and use asynchronous message passing to delegate the call to a separated bean.  It uses the request/reply dispatching mechanism.  Instead of implementing the business logic inside the JAX-RS endpoint, we are sending a message.  Another bean consumes this message, and the response is sent using the _reply_ mechanism."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:753
msgid "In your HTTP endpoint class, inject the event bus and uses the `request` method to send a message to the event bus and expect a response:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:770
#, no-wrap
msgid ""
"@Path(\"/bus\")\n"
"public class EventResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:773
#, no-wrap
msgid ""
"    @Inject\n"
"    EventBus bus;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:782
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"{name}\")\n"
"    public Uni<String> greeting(String name) {\n"
"        return bus.<String>request(\"greeting\", name)            // <1>\n"
"                .onItem().transform(Message::body);            // <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:784
msgid "send the `name` to the `greeting` address and request a response"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:785
msgid "when we get the response, extract the body and send it to the user"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:789
msgid "the HTTP method returns a `Uni`.  If you are using RESTEasy Reactive, `Uni` support is built-in.  If you are using _classic_ RESTEasy, you need to add the `quarkus resteasy-mutiny` extension to your project."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:792
msgid "We need a consumer listening on the `greeting` address.  This consumer can be in the same class or another bean such as:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:808
#, no-wrap
msgid ""
"    @ConsumeEvent(\"greeting\")\n"
"    public String greeting(String name) {\n"
"        return \"Hello \" + name;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:813
msgid "This bean receives the name and returns the greeting message."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:815
msgid "With this in place, every HTTP request on `/bus/quarkus` sends a message to the event bus, waits for a reply, and when this one arrives, writes the HTTP response:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:819
#, no-wrap
msgid "Hello Quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:822
msgid "To better understand, let's detail how the HTTP request/response has been handled:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:824
msgid "The request is received by the `greeting` method"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:825
msgid "a message containing the _name_ is sent to the event bus"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:826
msgid "Another bean receives this message and computes the response"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:827
msgid "This response is sent back using the reply mechanism"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:828
msgid "Once the reply is received by the sender, the content is written to the HTTP response"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:830
#, no-wrap
msgid "Bi-directional communication with browsers using SockJS"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:836
msgid "The SockJS bridge provided by Vert.x allows browser applications and Quarkus applications to communicate using the event bus.  It connects both sides.  So, both sides can send messages received on the other side.  It supports the three delivery mechanisms."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:839
msgid "SockJS negotiates the communication channel between the Quarkus application and the browser.  If WebSockets are supported, it uses them; otherwise, it degrades to SSE, long polling, etc."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:841
msgid "So use SockJS, you need to configure the bridge, especially the addresses that will be used to communicate:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:851
#, no-wrap
msgid ""
"import io.vertx.core.Vertx;\n"
"import io.vertx.ext.bridge.PermittedOptions;\n"
"import io.vertx.ext.web.Router;\n"
"import io.vertx.ext.web.handler.sockjs.SockJSBridgeOptions;\n"
"import io.vertx.ext.web.handler.sockjs.SockJSHandler;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:856
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.enterprise.event.Observes;\n"
"import javax.inject.Inject;\n"
"import java.util.concurrent.atomic.AtomicInteger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:859
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class SockJsExample {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:862
#, no-wrap
msgid ""
"    @Inject\n"
"    Vertx vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:869
#, no-wrap
msgid ""
"    public void init(@Observes Router router) {\n"
"        SockJSHandler sockJSHandler = SockJSHandler.create(vertx);\n"
"        sockJSHandler.bridge(new SockJSBridgeOptions()\n"
"                .addOutboundPermitted(new PermittedOptions().setAddress(\"ticks\")));\n"
"        router.route(\"/eventbus/*\").handler(sockJSHandler);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:875
msgid "This code configures the SockJS bridge to send all the messages targeting the `ticks` address to the connected browsers.  More detailled explanations about the configuration can be found on https://vertx.io/docs/vertx-web/java/#_sockjs_event_bus_bridge[the Vert.x SockJS Bridge documentation]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:877
msgid "The browser must use the `vertx-eventbus` JavaScript library to consume the message:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:891
#, no-wrap
msgid ""
"<!doctype html>\n"
"<html>\n"
"<head>\n"
"    <meta charset=\"utf-8\"/>\n"
"    <title>SockJS example - Quarkus</title>\n"
"    <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"\n"
"            integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"></script>\n"
"    <script type=\"application/javascript\" src=\"https://cdn.jsdelivr.net/sockjs/0.3.4/sockjs.min.js\"></script>\n"
"    <script src=\"https://cdn.jsdelivr.net/npm/vertx3-eventbus-client@3.8.5/vertx-eventbus.min.js\"></script>\n"
"</head>\n"
"<body>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:893
#, no-wrap
msgid "<h1>SockJS Examples</h1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:895
#, no-wrap
msgid "<p><strong>Last Tick:</strong> <span id=\"tick\"></span></p>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:899
#, no-wrap
msgid ""
"</body>\n"
"<script>\n"
"    var eb = new EventBus('/eventbus');\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:901
#, no-wrap
msgid "    eb.onopen = function () {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:906
#, no-wrap
msgid ""
"        eb.registerHandler('ticks', function (error, message) {\n"
"            $(\"#tick\").html(message.body);\n"
"        });\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:909
#, no-wrap
msgid ""
"</script>\n"
"</html>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/vertx-reference.adoc:912
#, no-wrap
msgid "Native Transport"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:915
msgid "Native transports are not supported in GraalVM produced binaries."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:920
msgid "Vert.x is capable of using https://netty.io/wiki/native-transports.html[Netty's native transports], which offers performance improvements on specific platforms.To enable them, you must include the appropriate dependency for your platform. It's usually a good idea to have both to keep your application platform agnostic. Netty is smart enough to use the correct one, that includes none at all on unsupported platforms:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:929
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.netty</groupId>\n"
"  <artifactId>netty-transport-native-epoll</artifactId>\n"
"  <classifier>linux-x86_64</classifier>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:935
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.netty</groupId>\n"
"  <artifactId>netty-transport-native-kqueue</artifactId>\n"
"  <classifier>osx-x86_64</classifier>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:941
#, no-wrap
msgid "implementation(\"io.netty:netty-transport-native-epoll::linux-x86_64\")\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:943
#, no-wrap
msgid "implementation(\"io.netty:netty-transport-native-kqueue::osx-x86_64\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:947
msgid "You will also have to explicitly configure Vert.x to use the native transport.  In `application.properties` add:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:951
#, no-wrap
msgid "quarkus.vertx.prefer-native-transport=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:954
msgid "Or in `application.yml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:960
#, no-wrap
msgid ""
"quarkus:\n"
"  vertx:\n"
"    prefer-native-transport: true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:963
msgid "If all is well quarkus will log:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:966
#, no-wrap
msgid "[io.qua.ver.cor.run.VertxCoreRecorder] (main) Vertx has Native Transport Enabled: true\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:968
#, no-wrap
msgid "Native Linux Transport"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:971
msgid "On Linux you can enable the following socket options:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:973
#: upstream/_versions/main/guides/vertx-reference.adoc:994
msgid "SO_REUSEPORT"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:975
#: upstream/_versions/main/guides/vertx-reference.adoc:996
#, no-wrap
msgid "quarkus.http.so-reuse-port=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:977
msgid "TCP_QUICKACK"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:979
#, no-wrap
msgid "quarkus.http.tcp-quick-ack=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:981
msgid "TCP_CORK"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:983
#, no-wrap
msgid "quarkus.http.tcp-cork=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:985
msgid "TCP_FASTOPEN"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:987
#, no-wrap
msgid "quarkus.http.tcp-fast-open=true\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/vertx-reference.adoc:989
#, no-wrap
msgid "Native MacOS Transport"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:992
msgid "On MacOS Sierra and above you can enable the following socket options:"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/vertx-reference.adoc:999
#, no-wrap
msgid "Listening to a Unix Domain Socket"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1005
msgid "Listening on a Unix domain socket allows us to dispense with the overhead of TCP if the connection to the quarkus service is established from the same host. This can happen if access to the service goes through a proxy which is often the case if you're setting up a service mesh with a proxy like Envoy."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1007
msgid "This will only work on platforms that support <<native-transport>>."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1010
msgid "Enable the appropriate <<native-transport>> and set the following environment property:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:1014
#, no-wrap
msgid ""
"quarkus.http.domain-socket=/var/run/io.quarkus.app.socket\n"
"quarkus.http.domain-socket-enabled=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1018
msgid "By itself this will not disable the tcp socket which by default will open on `0.0.0.0:8080`. It can be explicitly disabled:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:1021
#, no-wrap
msgid "quarkus.http.host-enabled=false\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1025
msgid "These properties can be set through Java's `-D` command line parameter or on `application.properties`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/vertx-reference.adoc:1026
#, no-wrap
msgid "Read only deployment environments"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1029
msgid "In environments with read only file systems you may receive errors of the form:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/vertx-reference.adoc:1033
#, no-wrap
msgid "java.lang.IllegalStateException: Failed to create cache dir\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/vertx-reference.adoc:1035
msgid "Assuming `/tmp/` is writable this can be fixed by setting the `vertx.cacheDirBase` property to point to a directory in `/tmp/` for instance in OpenShift by creating an environment variable `JAVA_OPTS` with the value `-Dvertx.cacheDirBase=/tmp/vertx`."
msgstr ""
