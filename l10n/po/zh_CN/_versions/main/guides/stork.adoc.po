# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/stork.adoc:6
#, no-wrap
msgid "Getting Started with SmallRye Stork"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:17
msgid "The essence of distributed systems resides in the interaction between services.  In modern architecture, you often have multiple instances of your service to share the load or improve the resilience by redundancy.  But how do you select the best instance of your service? That's where https://smallrye.io/smallrye-stork[SmallRye Stork] helps.  Stork is going to choose the most appropriate instance.  It offers:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:19
msgid "Extensible service discovery mechanisms"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:20
msgid "Built-in support for Consul and Kubernetes"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:21
msgid "Customizable client load-balancing strategies"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/stork.adoc:24
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: upstream/_versions/main/guides/stork.adoc:29
#, no-wrap
msgid "Architecture"
msgstr "应用结构"

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:32
msgid "In this guide, we will build an application composed of:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:34
msgid "A simple blue service exposed on port 9000"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:35
msgid "A simple red service exposed on port 9001"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:36
msgid "A REST Client calling the blue or red service (the selection is delegated to Stork)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:37
msgid "A REST endpoint using the REST client and calling the services"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:38
msgid "The blue and red services are registered in https://www.consul.io/[Consul]."
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_versions/main/guides/stork.adoc:39
#, no-wrap
msgid "Architecture of the application"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/main/guides/stork.adoc:39
#, no-wrap
msgid "stork-getting-started-architecture.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:43
msgid "For the sake of simplicity, everything (except Consul) will be running in the same Quarkus application.  Of course, each component will run in its own process in the real world."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/stork.adoc:44
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:48
msgid "We recommend that you follow the instructions in the next sections and create the applications step by step.  However, you can go right to the completed example."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:50
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:52
msgid "The solution is located in the `stork-quickstart` {quickstarts-tree-url}/stork-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/stork.adoc:53
#, no-wrap
msgid "Discovery and selection"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:56
msgid "Before going further, we need to discuss discovery vs. selection."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:59
msgid "Service discovery is the process of locating service instances.  It produces a list of service instances that is potentially empty (if no service matches the request) or contains multiple service instances."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:62
msgid "Service selection, also called load-balancing, chooses the best instance from the list returned by the discovery process.  The result is a single service instance or an exception when no suitable instance can be found."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:66
msgid "Stork handles both discovery and selection.  However, it does not handle the communication with the service but only provides a service instance.  The various integrations in Quarkus extract the location of the service from that service instance."
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_versions/main/guides/stork.adoc:67
#, no-wrap
msgid "Discovery and Selection of services"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/main/guides/stork.adoc:67
#, no-wrap
msgid "stork-process.png"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/stork.adoc:69
#, no-wrap
msgid "Bootstrapping the project"
msgstr "创建项目"

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:72
msgid "Create a Quarkus project importing the quarkus-rest-client-reactive and quarkus-resteasy-reactive extensions using your favorite approach:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:78
msgid "In the generated project, also add the following dependencies:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/stork.adoc:80
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/stork.adoc:90
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.smallrye.stork</groupId>\n"
"  <artifactId>stork-service-discovery-consul</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"  <groupId>io.smallrye.reactive</groupId>\n"
"  <artifactId>smallrye-mutiny-vertx-consul-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/stork.adoc:93
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/stork.adoc:97
#, no-wrap
msgid ""
"implementation(\"io.smallrye.stork:stork-service-discovery-consul\")\n"
"implementation(\"io.smallrye.reactive:smallrye-mutiny-vertx-consul-client\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:101
msgid "`stork-service-discovery-consul` provides an implementation of service discovery for Consul.  `smallrye-mutiny-vertx-consul-client` is a Consul client which we will use to register our services in Consul."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/stork.adoc:102
#, no-wrap
msgid "The Blue and Red services"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:105
msgid "Let's start with the very beginning: the service we will discover, select and call."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:107
msgid "Create the `src/main/java/org/acme/services/BlueService.java` with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork.adoc:111
#: upstream/_versions/main/guides/stork.adoc:146
#: upstream/_versions/main/guides/stork.adoc:185
#, no-wrap
msgid "package org.acme.services;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork.adoc:115
#: upstream/_versions/main/guides/stork.adoc:150
#, no-wrap
msgid ""
"import io.quarkus.runtime.StartupEvent;\n"
"import io.vertx.mutiny.core.Vertx;\n"
"import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork.adoc:118
#: upstream/_versions/main/guides/stork.adoc:153
#: upstream/_versions/main/guides/stork.adoc:195
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.enterprise.event.Observes;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork.adoc:121
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class BlueService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork.adoc:123
#, no-wrap
msgid "    @ConfigProperty(name = \"blue-service-port\", defaultValue = \"9000\") int port;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork.adoc:135
#, no-wrap
msgid ""
"    /**\n"
"     * Start an HTTP server for the blue service.\n"
"     *\n"
"     * Note: this method is called on a worker thread, and so it is allowed to block.\n"
"     */\n"
"    public void init(@Observes StartupEvent ev, Vertx vertx) {\n"
"        vertx.createHttpServer()\n"
"                .requestHandler(req -> req.response().endAndForget(\"Hello from Blue!\"))\n"
"                .listenAndAwait(port);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:139
msgid "It creates a new HTTP server (using Vert.x) and implements our simple service when the application starts.  For each HTTP request, it sends a response with \"Hello from Blue!\" as the body."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:141
msgid "Following the same logic, create the `src/main/java/org/acme/services/RedService.java` with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork.adoc:157
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class RedService {\n"
"    @ConfigProperty(name = \"red-service-port\", defaultValue = \"9001\") int port;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork.adoc:168
#, no-wrap
msgid ""
"    /**\n"
"     * Start an HTTP server for the red service.\n"
"     *\n"
"     * Note: this method is called on a worker thread, and so it is allowed to block.\n"
"     */\n"
"    public void init(@Observes StartupEvent ev, Vertx vertx) {\n"
"        vertx.createHttpServer()\n"
"                .requestHandler(req -> req.response().endAndForget(\"Hello from Red!\"))\n"
"                .listenAndAwait(port);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork.adoc:170
#: upstream/_versions/main/guides/stork.adoc:293
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:173
msgid "This time, it writes \"Hello from Red!\"."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/stork.adoc:174
#, no-wrap
msgid "Service registration in Consul"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:177
msgid "Now that we have implemented our services, we need to register them into Consul."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:179
msgid "Stork is not limited to Consul and integrates with other service discovery mechanisms."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:181
msgid "Create the `src/main/java/org/acme/services/Registration.java` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork.adoc:192
#, no-wrap
msgid ""
"import io.quarkus.runtime.StartupEvent;\n"
"import io.vertx.ext.consul.ServiceOptions;\n"
"import io.vertx.mutiny.ext.consul.ConsulClient;\n"
"import io.vertx.ext.consul.ConsulClientOptions;\n"
"import io.vertx.mutiny.core.Vertx;\n"
"import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork.adoc:198
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class Registration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork.adoc:201
#, no-wrap
msgid ""
"    @ConfigProperty(name = \"consul.host\") String host;\n"
"    @ConfigProperty(name = \"consul.port\") int port;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork.adoc:204
#, no-wrap
msgid ""
"    @ConfigProperty(name = \"blue-service-port\", defaultValue = \"9000\") int red;\n"
"    @ConfigProperty(name = \"red-service-port\", defaultValue = \"9001\") int blue;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork.adoc:212
#, no-wrap
msgid ""
"    /**\n"
"     * Register our two services in Consul.\n"
"     *\n"
"     * Note: this method is called on a worker thread, and so it is allowed to block.\n"
"     */\n"
"    public void init(@Observes StartupEvent ev, Vertx vertx) {\n"
"        ConsulClient client = ConsulClient.create(vertx, new ConsulClientOptions().setHost(host).setPort(port));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork.adoc:217
#, no-wrap
msgid ""
"        client.registerServiceAndAwait(\n"
"                new ServiceOptions().setPort(blue).setAddress(\"localhost\").setName(\"my-service\").setId(\"blue\"));\n"
"        client.registerServiceAndAwait(\n"
"                new ServiceOptions().setPort(red).setAddress(\"localhost\").setName(\"my-service\").setId(\"red\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork.adoc:220
#, no-wrap
msgid ""
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:224
msgid "When the application starts, it connects to Consul using the Vert.x Consul Client and registers our two instances.  Both registration uses the same name (`my-service`), but different ids to indicate that it's two instances of the same _service_."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/stork.adoc:225
#, no-wrap
msgid "The REST Client interface and the front end API"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:228
msgid "So far, we didn't use Stork; we just scaffolded the services we will be discovering, selecting, and calling."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:231
msgid "We will call the services using the Reactive REST Client.  Create the `src/main/java/org/acme/MyService.java` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork.adoc:235
#: upstream/_versions/main/guides/stork.adoc:270
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork.adoc:237
#, no-wrap
msgid "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork.adoc:241
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork.adoc:251
#, no-wrap
msgid ""
"/**\n"
" * The REST Client interface.\n"
" *\n"
" * Notice the `baseUri`. It uses `stork://` as URL scheme indicating that the called service uses Stork to locate and\n"
" * select the service instance. The `my-service` part is the service name. This is used to configure Stork discovery\n"
" * and selection in the `application.properties` file.\n"
" */\n"
"@RegisterRestClient(baseUri = \"stork://my-service\")\n"
"public interface MyService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork.adoc:256
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    String get();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:263
msgid "It's a straightforward REST client interface containing a single method. However, note the `baseUri` attribute.  It starts with `stork://`.  It instructs the REST client to delegate the discovery and selection of the service instances to Stork.  Notice the `my-service` part in the URL.  It is the service name we will be using in the application configuration."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:266
msgid "It does not change how the REST client is used.  Create the `src/main/java/org/acme/FrontendApi.java` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork.adoc:272
#, no-wrap
msgid "import org.eclipse.microprofile.rest.client.inject.RestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork.adoc:277
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork.adoc:283
#, no-wrap
msgid ""
"/**\n"
" * A frontend API using our REST Client (which uses Stork to locate and select the service instance on each call).\n"
" */\n"
"@Path(\"/api\")\n"
"public class FrontendApi {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork.adoc:285
#, no-wrap
msgid "    @RestClient MyService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork.adoc:291
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String invoke() {\n"
"        return service.get();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:296
msgid "It injects and uses the REST client as usual."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/stork.adoc:297
#, no-wrap
msgid "Stork configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:300
msgid "The system is almost complete. We only need to configure Stork and the `Registration` bean."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:302
msgid "In the `src/main/resources/application.properties`, add:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork.adoc:307
#, no-wrap
msgid ""
"consul.host=localhost\n"
"consul.port=8500\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork.adoc:312
#, no-wrap
msgid ""
"quarkus.stork.my-service.service-discovery.type=consul\n"
"quarkus.stork.my-service.service-discovery.consul-host=localhost\n"
"quarkus.stork.my-service.service-discovery.consul-port=8500\n"
"quarkus.stork.my-service.load-balancer.type=round-robin\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:315
msgid "The first two lines provide the Consul location used by the `Registration` bean."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:322
msgid "The other properties are related to Stork.  `stork.my-service.service-discovery` indicates which type of service discovery we will be using to locate the `my-service` service.  In our case, it's `consul`.  `quarkus.stork.my-service.service-discovery.consul-host` and `quarkus.stork.my-service.service-discovery.consul-port` configures the access to Consul.  Finally, `quarkus.stork.my-service.load-balancer.type` configures the service selection.  In our case, we use a `round-robin`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/stork.adoc:323
#, no-wrap
msgid "Running the application"
msgstr "运行应用程序"

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:327
msgid "We're done! So, let's see if it works."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:329
msgid "First, start Consul:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork.adoc:333
#, no-wrap
msgid "docker run --rm --name consul -p 8500:8500 -p 8501:8501 consul:1.7 agent -dev -ui -client=0.0.0.0 -bind=0.0.0.0 --https-port=8501\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:336
msgid "If you start Consul differently, do not forget to edit the application configuration."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:338
msgid "Then, package the application:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:342
msgid "And run it:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork.adoc:346
#, no-wrap
msgid "> java -jar target/quarkus-app/quarkus-run.jar\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:349
msgid "In another terminal, run:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork.adoc:358
#, no-wrap
msgid ""
"> curl http://localhost:8080/api\n"
"...\n"
"> curl http://localhost:8080/api\n"
"...\n"
"> curl http://localhost:8080/api\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:361
msgid "The responses alternate between `Hello from Red!` and `Hello from Blue!`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:363
msgid "You can compile this application into a native executable:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:367
msgid "And start it with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork.adoc:371
#, no-wrap
msgid "> ./target/stork-getting-started-1.0.0-SNAPSHOT-runner\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/stork.adoc:373
#, no-wrap
msgid "Going further"
msgstr "进一步探索"

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:377
msgid "This guide has shown how to use SmallRye Stork to discover and select your services.  You can find more about Stork in:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:379
msgid "the xref:stork-reference.adoc[Stork reference guide],"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork.adoc:379
msgid "the https://smallrye.io/smallrye-stork[SmallRye Stork website]."
msgstr ""
