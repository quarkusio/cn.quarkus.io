# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:6
#, no-wrap
msgid "Using OpenID Connect (OIDC) Multi-Tenancy"
msgstr "使用OpenID Connect（OIDC）多租户"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:12
msgid "This guide demonstrates how your OpenID Connect (OIDC) application can support multi-tenancy so that you can serve multiple tenants from a single application. Tenants can be distinct realms or security domains within the same OpenID Provider or even distinct OpenID Providers."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:14
msgid "When serving multiple customers from the same application (e.g.: SaaS), each customer is a tenant. By enabling multi-tenancy support to your applications you are allowed to also support distinct authentication policies for each tenant even though if that means authenticating against different OpenID Providers, such as Keycloak and Google."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:16
msgid "Please read the xref:security-openid-connect.adoc[Using OpenID Connect to Protect Service Applications] guide if you need to authorize a tenant using Bearer Token Authorization."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:18
msgid "Please read the xref:security-openid-connect-web-authentication.adoc[Using OpenID Connect to Protect Web Applications] guide if you need to authenticate and authorize a tenant using OpenID Connect Authorization Code Flow."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:19
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:24
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:25
#, no-wrap
msgid "Architecture"
msgstr "应用结构"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:28
msgid "In this example, we build a very simple application which offers a single land page:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:30
msgid "`/{tenant}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:32
msgid "The land page is served by a JAX-RS Resource and shows information obtained from the OpenID Provider about the authenticated user and the current tenant."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:33
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:37
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:39
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:41
msgid "The solution is located in the `security-openid-connect-multi-tenancy-quickstart` {quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:42
#, no-wrap
msgid "Creating the Maven Project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:45
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:52
msgid "If you already have your Quarkus project configured, you can add the `oidc` extension to your project by running the following command in your project base directory:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:57
msgid "This will add the following to your build file:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:59
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:65
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:68
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:71
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-oidc\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:73
#, no-wrap
msgid "Writing the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:76
msgid "Let's start by implementing the `/{tenant}` endpoint. As you can see from the source code below it is just a regular JAX-RS resource:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:80
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:125
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:159
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:474
#, no-wrap
msgid "package org.acme.quickstart.oidc;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:85
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:87
#, no-wrap
msgid "import org.eclipse.microprofile.jwt.JsonWebToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:89
#, no-wrap
msgid "import io.quarkus.oidc.IdToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:92
#, no-wrap
msgid ""
"@Path(\"/{tenant}\")\n"
"public class HomeResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:99
#, no-wrap
msgid ""
"    /**\n"
"     * Injection point for the ID Token issued by the OpenID Connect Provider \n"
"     */\n"
"    @Inject\n"
"    @IdToken\n"
"    JsonWebToken idToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:110
#, no-wrap
msgid ""
"    /**\n"
"     * Returns the tokens available to the application. This endpoint exists only for demonstration purposes, you should not\n"
"     * expose these tokens in a real application.\n"
"     * \n"
"     * @return the landing page HTML\n"
"     */\n"
"    @GET\n"
"    @Produces(\"text/html\")\n"
"    public String getHome() {\n"
"        StringBuilder response = new StringBuilder().append(\"<html>\").append(\"<body>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:113
#, no-wrap
msgid ""
"        response.append(\"<h2>Welcome, \").append(this.idToken.getClaim(\"email\").toString()).append(\"</h2>\\n\");\n"
"        response.append(\"<h3>You are accessing the application within tenant <b>\").append(idToken.getIssuer()).append(\" boundaries</b></h3>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:117
#, no-wrap
msgid ""
"        return response.append(\"</body>\").append(\"</html>\").toString();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:121
msgid "In order to resolve the tenant from incoming requests and map it to a specific `quarkus-oidc` tenant configuration in application.properties, you need to create an implementation for the `io.quarkus.oidc.TenantResolver` interface."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:127
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:161
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:478
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:130
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:164
#, no-wrap
msgid ""
"import io.quarkus.oidc.TenantResolver;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:133
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:167
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:485
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomTenantResolver implements TenantResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:138
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve(RoutingContext context) {\n"
"        String path = context.request().path();\n"
"        String[] parts = path.split(\"/\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:143
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:421
#, no-wrap
msgid ""
"        if (parts.length == 0) {\n"
"            // resolve to default tenant configuration\n"
"            return null;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:147
#, no-wrap
msgid ""
"        return parts[1];\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:150
msgid "From the implementation above, tenants are resolved from the request path so that in case no tenant could be inferred, `null` is returned to indicate that the default tenant configuration should be used."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:152
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:188
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:191
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:206
#, no-wrap
msgid "===\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:155
msgid "When a current tenant represents an OIDC `web-app` application, the current `io.vertx.ext.web.RoutingContext` will contain a `tenant-id` attribute by the time the custom tenant resolver has been called for all the requests completing the code authentication flow and the already authenticated requests, when either a tenant specific state or session cookie already exists.  Therefore, when working with mulltiple OpenID Connect Providers, you only need a path specific check to resolve a tenant id if the `RoutingContext` does not have the `tenant-id` attribute set, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:177
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve(RoutingContext context) {\n"
"        String tenantId = context.get(\"tenant-id\");\n"
"        if (tenantId != null) {\n"
"            return tenantId;\n"
"        } else {\n"
"            // Initial login request\n"
"            String path = context.request().path();\n"
"            String[] parts = path.split(\"/\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:186
#, no-wrap
msgid ""
"            if (parts.length == 0) {\n"
"                // resolve to default tenant configuration\n"
"                return null;\n"
"            }\n"
"            return parts[1];\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:193
msgid "If you also use xref:hibernate-orm.adoc#multitenancy[Hibernate ORM multitenancy] and both OIDC and Hibernate ORM tenant IDs are the same and must be extracted from the Vert.x `RoutingContext` then you can pass the tenant id from the OIDC Tenant Resolver to the Hibernate ORM Tenant Resolver as a `RoutingContext` attribute, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:197
#, no-wrap
msgid "public class CustomTenantResolver implements TenantResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:205
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve(RoutingContext context) {\n"
"        String tenantId = extractTenantId(context);\n"
"        context.put(\"tenantId\", tenantId);\n"
"        return tenantId;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:208
#, no-wrap
msgid "Configuring the application"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:216
#, no-wrap
msgid ""
"# Default Tenant Configuration\n"
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.client-id=multi-tenant-client\n"
"quarkus.oidc.application-type=web-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:221
#, no-wrap
msgid ""
"# Tenant A Configuration\n"
"quarkus.oidc.tenant-a.auth-server-url=http://localhost:8180/realms/tenant-a\n"
"quarkus.oidc.tenant-a.client-id=multi-tenant-client\n"
"quarkus.oidc.tenant-a.application-type=web-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:225
#, no-wrap
msgid ""
"# HTTP Security Configuration\n"
"quarkus.http.auth.permission.authenticated.paths=/*\n"
"quarkus.http.auth.permission.authenticated.policy=authenticated\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:228
msgid "The first configuration is the default tenant configuration that should be used when the tenant can not be inferred from the request. This configuration is using a Keycloak instance to authenticate users."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:230
msgid "The second configuration is the configuration that will be used when an incoming request is mapped to the tenant `tenant-a`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:232
msgid "Note that both configurations map to the same Keycloak server instance while using distinct `realms`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:234
msgid "You can define multiple tenants in your configuration file, just make sure they have a unique alias so that you can map them properly when resolving a tenant from your `TenantResolver` implementation."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:235
#, no-wrap
msgid "Google OpenID Provider Configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:238
msgid "In order to set-up the `tenant-a` configuration to use Google OpenID Provider, you need to create a project as described https://developers.google.com/identity/protocols/OpenIDConnect[here]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:240
msgid "Once you create the project and have your project's `client_id` and `client_secret`, you can try to configure a tenant as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:250
#, no-wrap
msgid ""
"# Tenant configuration using Google OpenID Provider\n"
"quarkus.oidc.tenant-b.auth-server-url=https://accounts.google.com\n"
"quarkus.oidc.tenant-b.application-type=web-app\n"
"quarkus.oidc.tenant-b.client-id={GOOGLE_CLIENT_ID}\n"
"quarkus.oidc.tenant-b.credentials.secret={GOOGLE_CLIENT_SECRET}\n"
"quarkus.oidc.tenant-b.token.issuer=https://accounts.google.com\n"
"quarkus.oidc.tenant-b.authentication.scopes=email,profile,openid\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:252
#, no-wrap
msgid "Starting and Configuring the Keycloak Server"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:255
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:259
#, no-wrap
msgid "docker run --name keycloak -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin -p 8180:8080 quay.io/keycloak/keycloak:{keycloak.version} start-dev\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:262
msgid "where `keycloak.version` should be set to `17.0.0` or higher."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:264
msgid "You should be able to access your Keycloak Server at http://localhost:8180[localhost:8180]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:266
msgid "Log in as the `admin` user to access the Keycloak Administration Console. Username should be `admin` and password `admin`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:268
msgid "Now, follow the steps below to import the realms for the two tenants:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:270
msgid "Import the {quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/default-tenant-realm.json[default-tenant-realm.json] to create the default realm"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:271
msgid "Import the {quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/tenant-a-realm.json[tenant-a-realm.json] to create the realm for the tenant `tenant-a`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:273
msgid "For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:274
#, no-wrap
msgid "Running and Using the Application"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:276
#, no-wrap
msgid "Running in Developer Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:279
msgid "To run the microservice in dev mode, use:"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:282
#, no-wrap
msgid "Running in JVM Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:285
msgid "When you're done playing with dev mode, you can run it as a standard Java application."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:287
msgid "First compile it:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:291
msgid "Then run it:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:295
#, no-wrap
msgid "java -jar target/quarkus-app/quarkus-run.jar\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:297
#, no-wrap
msgid "Running in Native Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:300
msgid "This same demo can be compiled into native code: no modifications required."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:304
msgid "This implies that you no longer need to install a JVM on your production environment, as the runtime technology is included in the produced binary, and optimized to run with minimal resource overhead."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:307
msgid "Compilation will take a bit longer, so this step is disabled by default; let's build again by enabling the native build:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:311
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:315
#, no-wrap
msgid "./target/security-openid-connect-multi-tenancy-quickstart-runner\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:317
#, no-wrap
msgid "Testing the Application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:320
msgid "To test the application, you should open your browser and access the following URL:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:322
msgid "http://localhost:8080/default[http://localhost:8080/default]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:325
msgid "If everything is working as expected, you should be redirected to the Keycloak server to authenticate. Note that the requested path defines a `default` tenant which we don't have mapped in the configuration file. In this case, the default configuration will be used."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:327
msgid "In order to authenticate to the application you should type the following credentials when at the Keycloak login page:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:329
msgid "Username: *alice*"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:330
msgid "Password: *alice*"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:332
msgid "After clicking the `Login` button you should be redirected back to the application."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:334
msgid "If you try now to access the application at the following URL:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:336
msgid "http://localhost:8080/tenant-a[http://localhost:8080/tenant-a]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:338
msgid "You should be redirected again to the login page at Keycloak. However, now you are going to authenticate using a different `realm`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:341
msgid "In both cases, if the user is successfully authenticated, the landing page will show the user's name and e-mail. Even though user `alice` exists in both tenants, for the application they are distinct users belonging to different realms/tenants."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:342
#, no-wrap
msgid "Resolving Tenant Identifiers with Annotations"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:347
msgid "You can use the annotations and CDI interceptors for resolving the tenant identifiers as an alternative to using `quarkus.oidc.TenantResolver`. This can be done by setting the value for the key `OidcUtils.TENANT_ID_ATTRIBUTE` on the current `RoutingContext`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:350
msgid "Assuming your application supports two OIDC tenants (`hr`, and default) first you need to define one annotation per tenant ID other than default:"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:355
msgid "Proactive HTTP authentication needs to be disabled (`quarkus.http.auth.proactive=false`) for this to work. See xref:security-built-in-authentication.adoc#proactive-authentication[Proactive Authentication] section for further details."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:365
#, no-wrap
msgid ""
"@Inherited\n"
"@InterceptorBinding\n"
"@Retention(RetentionPolicy.RUNTIME)\n"
"@Target({ElementType.METHOD, ElementType.TYPE})\n"
"public @interface HrTenant {\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:368
msgid "Next, you'll need one interceptor for each of those annotations:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:376
#, no-wrap
msgid ""
"@Interceptor\n"
"@HrTenant\n"
"public class HrTenantInterceptor {\n"
"    @Inject\n"
"    RoutingContext routingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:383
#, no-wrap
msgid ""
"    @AroundInvoke\n"
"    Object setTenant(InvocationContext context) throws Exception {\n"
"        routingContext.put(OidcUtils.TENANT_ID_ATTRIBUTE, \"hr\");\n"
"        return context.proceed();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:388
msgid "Now all methods and classes carrying `@HrTenant` will be authenticated using the OIDC provider configured by `quarkus.oidc.hr.auth-server-url`, while all other classes and methods will still be authenticated using the default OIDC provider."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:390
#, no-wrap
msgid "Programmatically Resolving Tenants Configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:394
msgid "If you need a more dynamic configuration for the different tenants you want to support and don't want to end up with multiple entries in your configuration file, you can use the `io.quarkus.oidc.TenantConfigResolver`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:396
msgid "This interface allows you to dynamically create tenant configurations at runtime:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:400
#, no-wrap
msgid "package io.quarkus.it.keycloak;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:403
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import java.util.function.Supplier;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:408
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.quarkus.oidc.OidcTenantConfig;\n"
"import io.quarkus.oidc.TenantConfigResolver;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:411
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomTenantConfigResolver implements TenantConfigResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:416
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<OidcTenantConfig> resolve(RoutingContext context, TenantConfigResolver.TenantConfigRequestContext requestContext) {\n"
"        String path = context.request().path();\n"
"        String[] parts = path.split(\"/\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:427
#, no-wrap
msgid ""
"        if (\"tenant-c\".equals(parts[1])) {\n"
"            // Do 'return requestContext.runBlocking(createTenantConfig());'\n"
"            // if a blocking call is required to create a tenant config\n"
"            return Uni.createFromItem(createTenantConfig());\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:431
#, no-wrap
msgid ""
"        // resolve to default tenant configuration\n"
"        return null;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:434
#, no-wrap
msgid ""
"    private Supplier<OidcTenantConfig> createTenantConfig() {\n"
"        final OidcTenantConfig config = new OidcTenantConfig();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:439
#, no-wrap
msgid ""
"        config.setTenantId(\"tenant-c\");\n"
"        config.setAuthServerUrl(\"http://localhost:8180/realms/tenant-c\");\n"
"        config.setClientId(\"multi-tenant-client\");\n"
"        OidcTenantConfig.Credentials credentials = new OidcTenantConfig.Credentials();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:441
#, no-wrap
msgid "        credentials.setSecret(\"my-secret\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:443
#, no-wrap
msgid "        config.setCredentials(credentials);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:445
#, no-wrap
msgid "        // any other setting support by the quarkus-oidc extension\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:449
#, no-wrap
msgid ""
"        return () -> config;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:452
msgid "The `OidcTenantConfig` returned from this method is the same used to parse the `oidc` namespace configuration from the `application.properties`. You can populate it using any of the settings supported by the `quarkus-oidc` extension."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:453
#, no-wrap
msgid "Tenant Resolution for OIDC 'web-app' applications"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:456
msgid "Several options are available for selecting the tenant configuration which should be used to secure the current HTTP request for both `service` and `web-app` OIDC applications, such as:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:458
msgid "Check URL paths, for example, a `tenant-service` configuration has to be used for the \"/service\" paths, while a `tenant-manage` configuration - for the \"/management\" paths"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:459
msgid "Check HTTP headers, for example, with a URL path always being '/service', a header such as \"Realm: service\" or \"Realm: management\" can help selecting between the `tenant-service` and `tenant-manage` configurations"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:460
msgid "Check URL query parameters - it can work similarly to the way the headers are used to select the tenant configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:462
msgid "All these options can be easily implemented with the custom `TenantResolver` and `TenantConfigResolver` implementations for the OIDC `service` applications."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:464
msgid "However, due to an HTTP redirect required to complete the code authentication flow for the OIDC `web-app` applications, a custom HTTP cookie may be needed to select the same tenant configuration before and after this redirect request because:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:466
msgid "URL path may not be the same after the redirect request if a single redirect URL has been registered in the OIDC Provider - the original request path can be restored but after the the tenant configuration is resolved"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:467
msgid "HTTP headers used during the original request are not available after the redirect"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:468
msgid "Custom URL query parameters are restored after the redirect but after the tenant configuration is resolved"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:470
msgid "One option to ensure the information for resolving the tenant configurations for `web-app` applications is available before and after the redirect is to use a cookie, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:476
#, no-wrap
msgid "import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:482
#, no-wrap
msgid ""
"import io.quarkus.oidc.TenantResolver;\n"
"import io.vertx.core.http.Cookie;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:496
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve(RoutingContext context) {\n"
"        List<String> tenantIdQuery = context.queryParam(\"tenantId\");\n"
"        if (!tenantIdQuery.isEmpty()) {\n"
"            String tenantId = tenantIdQuery.get(0);\n"
"            context.addCookie(Cookie.cookie(\"tenant\", tenantId));\n"
"            return tenantId;\n"
"        } else if (context.cookieMap().containsKey(\"tenant\")) {\n"
"            return context.getCookie(\"tenant\").getValue();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:500
#, no-wrap
msgid ""
"        return null;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:503
#, no-wrap
msgid "Disabling Tenant Configurations"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:506
msgid "Custom `TenantResolver` and `TenantConfigResolver` implementations may return `null` if no tenant can be inferred from the current request and a fallback to the default tenant configuration is required."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:508
msgid "If it is expected that the custom resolvers will always infer a tenant then the default tenant configuration is not needed. One can disable it with the `quarkus.oidc.tenant-enabled=false` setting."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:510
msgid "Note that tenant specific configurations can also be disabled, for example: `quarkus.oidc.tenant-a.tenant-enabled=false`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:511
#, no-wrap
msgid "Configuration Reference"
msgstr "配置参考"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:515
#, no-wrap
msgid "References"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:518
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:519
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:520
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:521
msgid "https://developers.google.com/identity/protocols/OpenIDConnect[Google OpenID Connect]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:521
msgid "xref:security.adoc[Quarkus Security]"
msgstr ""
