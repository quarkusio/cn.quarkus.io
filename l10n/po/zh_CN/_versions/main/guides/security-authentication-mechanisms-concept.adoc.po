# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-06-23 02:41+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:2
#, no-wrap
msgid "Authentication mechanisms in Quarkus"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:9
msgid "The Quarkus Security framework supports multiple authentication mechanisms, which you can use to secure your applications.  You can also combine authentication mechanisms."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:13
msgid "Before you choose an authentication mechanism for securing your Quarkus applications, review the information provided."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:15
#, fuzzy, no-wrap
msgid "Overview of supported authentication mechanisms"
msgstr "组合认证机制"

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:19
msgid "Some supported authentication mechanisms are built into Quarkus, while others require you to add an extension.  All of these mechanisms are detailed in the following sections:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:21
#, fuzzy
msgid "xref:built-in-authentication-mechanisms[Built-in authentication mechanisms]"
msgstr "组合认证机制"

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:22
#, fuzzy
msgid "xref:other-supported-authentication-mechanisms[Other supported authentication mechanisms]"
msgstr "特定路径认证机制"

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:24
msgid "The following table maps specific authentication requirements to a supported mechanism that you can use in Quarkus:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:25
#, fuzzy, no-wrap
msgid "Authentication requirements and mechanisms"
msgstr "组合认证机制"

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:28
#, no-wrap
msgid "Authentication requirement"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:30
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:306
#, fuzzy, no-wrap
msgid "Authentication mechanism"
msgstr "组合认证机制"

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:30
#, no-wrap
msgid "Username and password"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:32
#, fuzzy, no-wrap
msgid "xref:security-basic-authentication-concept.adoc[Basic], xref:form-auth[Form-based authentication]"
msgstr "link:security-openid-connect-multitenancy.html[使用OpenID连接（OIDC）多租户]"

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:32
#, no-wrap
msgid "Bearer access token"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:34
#, fuzzy, no-wrap
msgid "xref:security-oidc-bearer-token-authentication-concept.adoc[OIDC Bearer token authentication], xref:security-jwt.adoc[JWT], xref:security-oauth2.adoc[OAuth2]"
msgstr "link:security-openid-connect-multitenancy.html[使用OpenID连接（OIDC）多租户]"

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:34
#, no-wrap
msgid "Single sign-on (SSO)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:36
#, fuzzy, no-wrap
msgid "xref:security-oidc-code-flow-authentication-concept.adoc[OIDC Code Flow], xref:form-auth[Form-based authentication]"
msgstr "link:security-openid-connect-multitenancy.html[使用OpenID连接（OIDC）多租户]"

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:36
#, no-wrap
msgid "Client certificate"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:38
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:53
#, fuzzy, no-wrap
msgid "xref:mutual-tls[Mutual TLS authentication]"
msgstr "SmallRye JWT authentication"

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:38
#, no-wrap
msgid "WebAuthn"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:40
#, no-wrap
msgid "xref:security-webauthn-concept.adoc[WebAuthn]"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:40
#, no-wrap
msgid "Kerberos ticket"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:41
#, no-wrap
msgid "link:https://quarkiverse.github.io/quarkiverse-docs/quarkus-kerberos/dev/index.html[Kerberos]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:44
msgid "For more information, see the following xref:table[Token authentication mechanism comparison] table."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:46
#, fuzzy, no-wrap
msgid "Built-in authentication mechanisms"
msgstr "组合认证机制"

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:49
msgid "Quarkus Security provides the following built-in authentication support:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:51
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:60
msgid "xref:security-basic-authentication-concept.adoc[Basic authentication]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:52
#, fuzzy
msgid "xref:form-auth[Form-based authentication]"
msgstr "主动认证"

#. type: Title ===
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:54
#, no-wrap
msgid "Basic authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:58
msgid "You can secure your Quarkus application endpoints with the built-in HTTP Basic authentication mechanism.  For more information, see the following documentation:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:61
msgid "xref:security-basic-authentication-howto.adoc[Enable Basic authentication]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:62
msgid "xref:security-jpa-concept.adoc[Quarkus Security with Jakarta Persistence]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:63
msgid "xref:security-basic-authentication-tutorial.adoc[Secure a Quarkus application with Basic authentication and Jakarta Persistence]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:64
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:368
msgid "xref:security-identity-providers-concept.adoc[Identity providers]"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:66
#, no-wrap
msgid "Form-based authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:71
msgid "Quarkus provides form-based authentication that works similarly to traditional Servlet form-based auth.  Unlike traditional form authentication, the authenticated user is not stored in an HTTP session because Quarkus does not support clustered HTTP sessions.  Instead, the authentication information is stored in an encrypted cookie, which can be read by all cluster members who share the same encryption key."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:77
msgid "To apply encryption, add the `quarkus.http.auth.session.encryption-key` property, and ensure the value you set is at least 16 characters long.  The encryption key is hashed by using SHA-256.  The resulting digest is used as a key for AES-256 encryption of the cookie value.  The cookie contains an expiry time as part of the encrypted value, so all nodes in the cluster must have their clocks synchronized.  At one-minute intervals, a new cookie gets generated with an updated expiry time if the session is in use."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:79
msgid "With single-page applications (SPA), you typically want to avoid redirects by removing default page paths, as shown in the following example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:84
#, no-wrap
msgid ""
"# do not redirect, respond with HTTP 200 OK\n"
"quarkus.http.auth.form.landing-page=\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:88
#, no-wrap
msgid ""
"# do not redirect, respond with HTTP 401 Unauthorized\n"
"quarkus.http.auth.form.login-page=\n"
"quarkus.http.auth.form.error-page=\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:91
msgid "The following properties can be used to configure form-based authentication:"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:95
#, no-wrap
msgid "Mutual TLS authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:98
msgid "Quarkus provides mutual TLS (mTLS) authentication so that you can authenticate users based on their X.509 certificates."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:101
msgid "To use this authentication method, you must first enable SSL/TLS for your application.  For more information, see the xref:http-reference.adoc#ssl[Supporting secure connections with SSL] section of the Quarkus \"HTTP reference\" guide."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:103
msgid "After your application accepts secure connections, the next step is to configure the `quarkus.http.ssl.certificate.trust-store-file` property with the name of that file that holds all the certificates your application trusts. The specified file also includes information about how your application asks for certificates when a client, such as a browser or other service, tries to access one of its protected resources."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:113
#, no-wrap
msgid ""
"quarkus.http.ssl.certificate.key-store-file=server-keystore.jks            <1>\n"
"quarkus.http.ssl.certificate.key-store-password=the_key_store_secret\n"
"quarkus.http.ssl.certificate.trust-store-file=server-truststore.jks        <2>\n"
"quarkus.http.ssl.certificate.trust-store-password=the_trust_store_secret\n"
"quarkus.http.ssl.client-auth=required                                      <3>\n"
"quarkus.http.auth.permission.default.paths=/*                              <4>\n"
"quarkus.http.auth.permission.default.policy=authenticated\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:115
msgid "The keystore where the server's private key is located."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:116
msgid "The truststore from which the trusted certificates are loaded."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:119
msgid "With this value set to `required`, the server requires certificates from clients.  To relax this requirement so that the server accepts requests without a certificate, set the value to `REQUEST`.  This option is useful when you are also supporting authentication methods other than mTLS."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:120
msgid "Defines a policy where only authenticated users should have access to resources from your application."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:122
msgid "When the incoming request matches a valid certificate in the truststore, your application can obtain the subject by injecting a `SecurityIdentity` as follows:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:124
#, no-wrap
msgid "Obtaining the subject"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:129
#, no-wrap
msgid ""
"@Inject\n"
"SecurityIdentity identity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:135
#, no-wrap
msgid ""
"@GET\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"public String hello() {\n"
"    return String.format(\"Hello, %s\", identity.getPrincipal().getName());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:138
msgid "You can also get the certificate by using the code outlined in the following example:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:139
#, no-wrap
msgid "Obtaining the certificate"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:144
#, no-wrap
msgid ""
"import java.security.cert.X509Certificate;\n"
"import io.quarkus.security.credential.CertificateCredential;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:147
#, no-wrap
msgid ""
"CertificateCredential credential = identity.getCredential(CertificateCredential.class);\n"
"X509Certificate certificate = credential.getCertificate();\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:149
#, no-wrap
msgid "Authorization"
msgstr "授权"

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:154
msgid "The information from the client certificate can be used to enhance Quarkus `SecurityIdentity`.  For example, you can add new roles after checking a client certificate subject name, and so on.  For more information about customizing `SecurityIdentity`, see the link:{url-quarkusio-guides}security-customization#security-identity-customization[Security identity customization] section in the Quarkus \"Security tips and tricks\" guide."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:156
#, no-wrap
msgid "Other supported authentication mechanisms"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:159
msgid "Quarkus Security also supports the following authentication mechanisms through extensions:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:161
#, fuzzy
msgid "xref:webauthn-authentication[WebAuthn authentication]"
msgstr "WebAuthn认证机制"

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:162
#, fuzzy
msgid "xref:openid-connect-authentication[OpenID Connect authentication]"
msgstr "link:security-openid-connect-multitenancy.html[使用OpenID连接（OIDC）多租户]"

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:163
#, fuzzy
msgid "xref:smallrye-jwt-authentication[SmallRye JWT authentication]"
msgstr "SmallRye JWT authentication"

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:164
#, fuzzy
msgid "xref:oauth2-authentication[OAuth2 authentication]"
msgstr "OAuth2 认证机制"

#. type: Title ===
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:166
#, no-wrap
msgid "WebAuthn authentication"
msgstr "WebAuthn认证机制"

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:171
#, fuzzy
msgid "https://webauthn.guide/[WebAuthn] is an authentication mechanism that replaces passwords.  When you write a service for registering new users, or logging them in, instead of asking for a password, you can use WebAuthn, which replaces the password.  For more information, see the xref:security-webauthn-concept.adoc[Secure a Quarkus application by using the WebAuthn authentication mechanism] guide."
msgstr "link:https://webauthn.guide/[WebAuthn] 是一种旨在取代密码的认证机制。简而言之，每当您写一个注册新用户或提供登录的服务，您就可以使用WebAuthn来代替使用密码的方式。更多信息，请参阅 link:security-webauthn.html[使用WebAuthn 认证机制保护 Quarkus 应用程序]."

#. type: Title ===
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:173
#, no-wrap
msgid "OpenID Connect authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:177
#, fuzzy
msgid "OpenID Connect (OIDC) is an identity layer that works on top of the OAuth 2.0 protocol.  OIDC enables client applications to verify the identity of a user based on the authentication performed by the OIDC provider and retrieve basic information about that user."
msgstr "OpenID Connect（OIDC）是一个身份层，它工作在OAuth 2.0协议之上。OIDC使客户端应用程序能够根据OIDC提供者进行的认证来验证用户的身份，并获取用户的基本信息。"

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:182
#, fuzzy
msgid "The Quarkus `quarkus-oidc` extension provides a reactive, interoperable, multitenant-enabled OIDC adapter that supports Bearer token and Authorization Code Flow authentication mechanisms.  The Bearer token authentication mechanism extracts the token from the HTTP Authorization header.  The Authorization Code Flow mechanism redirects the user to an OIDC provider to authenticate the user's identity.  After the user is redirected back to Quarkus, the mechanism completes the authentication process by exchanging the provided code that was granted for the ID, access, and refresh tokens."
msgstr "`quarkus-oidc` 扩展提供了一个响应式的、可互操作的、支持多租户的OIDC适配器，以支持 `Bearer Token` 和 `Authorization Code Flow` 认证机制。`Bearer Token` 机制从HTTP header中提取token。 `Authorization Code Flow` 机制将用户重定向到OIDC提供者来认证用户身份，并在用户被重定向回Quarkus后，通过将提供的代码授权与ID、访问和刷新token进行交换来完成认证过程。"

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:185
#, fuzzy
msgid "You can verify ID and access JSON Web Token (JWT) tokens by using the refreshable JSON Web Key (JWK) set or introspect them remotely.  However, opaque, also known as binary tokens, can only be introspected remotely."
msgstr "您可以使用可刷新的 `JWK` 密钥集验证ID和访问 `JWT` token。但JWT和不透明（二进制）token都可以被远程自省(introspect)。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:189
#, fuzzy
msgid "Using the Quarkus OIDC extension, both the Bearer token and Authorization Code Flow authentication mechanisms use xref:smallrye-jwt-authentication[SmallRye JWT authentication] to represent JWT tokens as MicroProfile JWT `org.eclipse.microprofile.jwt.JsonWebToken`."
msgstr "通过 `Quarkus OIDC` 扩展， `Bearer` 和 `Authorization Code Flow` 认证机制都使用 link:#smallrye-jwt[SmallRye JWT] 来将Microprofile JWT `org.eclipse.microprofile.jwt.JsonWebToken` 表示为JWTtoken。"

#. type: Title ====
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:191
#, no-wrap
msgid "Additional Quarkus resources for OIDC authentication"
msgstr "用于OIDC认证的其他Quarkus资源"

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:194
#, fuzzy
msgid "For more information about OIDC authentication and authorization methods that you can use to secure your Quarkus applications, see the following resources:"
msgstr "关于可以应用于保护Quarkus程序的OIDC认证和授权的更多方式，请看以下更详细的资源："

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:197
#, no-wrap
msgid "OIDC topic"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:198
#, no-wrap
msgid "Quarkus information resource"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:198
#, fuzzy, no-wrap
msgid "Bearer token authentication mechanis"
msgstr "组合认证机制"

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:199
#, fuzzy, no-wrap
msgid "xref:security-oidc-bearer-token-authentication-concept.adoc[OIDC Bearer token authentication]"
msgstr "link:security-openid-connect-multitenancy.html[使用OpenID连接（OIDC）多租户]"

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:199
#, fuzzy, no-wrap
msgid "Authorization Code Flow authentication mechanis"
msgstr "组合认证机制"

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:200
#, fuzzy, no-wrap
msgid "xref:security-oidc-code-flow-authentication-concept.adoc[OpenID Connect (OIDC) Authorization Code Flow mechanism]"
msgstr "link:security-openid-connect-multitenancy.html[使用OpenID连接（OIDC）多租户]"

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:200
#, fuzzy, no-wrap
msgid "Multiple tenants that can support the Bearer token authentication or Authorization Code Flow mechanism"
msgstr "可支持 Bearer Token or Authorization Code Flow 机制的多租户模式"

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:201
#, no-wrap
msgid "xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect (OIDC) multi-tenancy]"
msgstr "link:security-openid-connect-multitenancy.html[使用OpenID连接（OIDC）多租户]"

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:201
#, no-wrap
msgid "Securing Quarkus with commonly-used OpenID Connect provider"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:202
#, fuzzy, no-wrap
msgid "xref:security-openid-connect-providers.adoc[Configuring well-known OpenID Connect providers]"
msgstr "link:security-openid-connect-multitenancy.html[使用OpenID连接（OIDC）多租户]"

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:202
#, no-wrap
msgid "Using Keycloak to centralize authorization"
msgstr "使用Keycloak进行集中授权"

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:203
#, no-wrap
msgid "xref:security-keycloak-authorization.adoc[Using OpenID Connect (OIDC) and Keycloak to centralize authorization]"
msgstr "link:security-keycloak-authorization.html[使用OpenID连接（OIDC）和Keycloak来集中授权]"

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:203
#, no-wrap
msgid "Configuring Keycloak programmatically"
msgstr "以编程方式配置Keycloak"

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:204
#, no-wrap
msgid "xref:security-keycloak-admin-client.adoc[Using the Keycloak admin client]"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:210
msgid "To enable the Quarkus OIDC extension at runtime, set `quarkus.oidc.tenant-enabled=false` at build time.  Then re-enable it at runtime by using a system property."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:212
#, fuzzy
msgid "For more information about managing the individual tenant configurations in multitenant OIDC deployments, see the link:{url-quarkusio-guides}security-openid-connect-multitenancy#disable-tenant[Disabling tenant configurations] section in the \"Using OpenID Connect (OIDC) multi-tenancy\" guide."
msgstr "如果您想在运行时启用Quarkus OIDC扩展，那么在构建时设置 `quarkus.oidc.tenant-enabled=false` ，并在运行时使用系统属性重新启用它。更多关于管理多租户OIDC部署中各个租户配置的信息，请参见 link:security-openid-connect-multitenancy.html#disable-tenant[禁用租户配置] 。"

#. type: Title ====
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:214
#, no-wrap
msgid "OpenID Connect client and filters"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:217
msgid "The `quarkus-oidc-client` extension provides `OidcClient` for acquiring and refreshing access tokens from OpenID Connect and OAuth2 providers that support the following token grants:"
msgstr "`quarkus-oidc-client` 扩展提供 `OidcClient` ，用于从支持以下token授权的OpenID Connect和OAuth2提供者那里获取和刷新访问token："

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:219
msgid "`client-credentials`"
msgstr "`client-credentials`"

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:220
msgid "`password`"
msgstr "`password`"

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:221
msgid "`refresh_token`"
msgstr "`refresh_token`"

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:226
#, fuzzy
msgid "The `quarkus-oidc-client-filter` extension requires the `quarkus-oidc-client` extension.  It provides JAX-RS RESTful Web Services `OidcClientRequestFilter`, which sets the access token acquired by `OidcClient` as the `Bearer` scheme value of the HTTP `Authorization` header.  This filter can be registered with MicroProfile REST client implementations injected into the current Quarkus endpoint, but it is not related to the authentication requirements of this service endpoint.  For example, it can be a public endpoint or be protected with mTLS."
msgstr "`quarkus-oidc-client-filter` 扩展依赖于 `quarkus-oidc-client` 扩展，并提供 JAX-RS `OidcClientRequestFilter` ，它将由 `OidcClient` 获得的访问token设置为 HTTP `Authorization` 头的 `Bearer` scheme值。这个过滤器可以与注入当前 Quarkus 节点的 MP RestClient 实现一起被注册，但它与这个服务节点的认证要求无关。例如，它可以是一个公共节点，也可以用mTLS保护。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:230
msgid "In this scenario, you do not need to protect your Quarkus endpoint by using the Quarkus OpenID Connect adapter."
msgstr "在这种情况下，您不需要通过使用Quarkus OpenID Connect适配器来保护您的Quarkus节点。"

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:236
#, fuzzy
msgid "The `quarkus-oidc-token-propagation` extension requires the `quarkus-oidc` extension.  It provides Jakarta REST `TokenCredentialRequestFilter`, which sets the OpenID Connect Bearer token or Authorization Code Flow access token as the `Bearer` scheme value of the HTTP `Authorization` header.  This filter can be registered with MicroProfile REST client implementations injected into the current Quarkus endpoint, which must be protected by using the Quarkus OIDC adapter.  This filter can propagate the access token to the downstream services."
msgstr "`quarkus-oidc-token-propagation` 扩展依赖于 `quarkus-oidc` 扩展，并提供 JAX-RS  `TokenCredentialRequestFilter` ，它将 OpenID Connect Bearer 或 Authorization Code Flow 访问token设置为 HTTP `Authorization` 头的 `Bearer` scheme值。这个过滤器可以与注入当前 Quarkus 节点的 MP RestClient 实现一起被注册，并且Quarkus节点本身必须用Quarkus OpenID Connect适配器来保护。这个过滤器可以用来将访问token传播到下游服务中。"

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:238
msgid "For more information, see the xref:security-openid-connect-client.adoc[OpenID Connect client and token propagation quickstart] and xref:security-openid-connect-client-reference.adoc[OpenID Connect (OIDC) and OAuth2 client and filters reference] guides."
msgstr "更多信息请参见《 link:security-openid-connect-client.html[使用OpenID Connect客户端和token传递quickstart] 》和 《 link:security-openid-connect-client-reference.htmlOpenID Connect (OIDC) 和 OAuth2 客户端以及过滤器参考] 》指南。"

#. type: Title ===
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:240
#, no-wrap
msgid "SmallRye JWT authentication"
msgstr "SmallRye JWT authentication"

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:244
#, fuzzy
msgid "The `quarkus-smallrye-jwt` extension provides a MicroProfile JSON Web Token (JWT) 2.1 implementation and multiple options to verify signed and encrypted `JWT` tokens.  It represents them as `org.eclipse.microprofile.jwt.JsonWebToken`."
msgstr "`quarkus-smallrye-jwt` 提供Microprofile JWT 1.2.1的实现和更多的选项来验证签名和加密的 `JWT` token，并将其表示为 `org.eclipse.microprofile.jwt.JsonWebToken`。"

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:247
#, fuzzy
msgid "`quarkus-smallrye-jwt` is an alternative to the `quarkus-oidc` Bearer authentication mechanism and verifies only `JWT` tokens by using either Privacy Enhanced Mail (PEM) keys or the refreshable `JWK` key set.  `quarkus-smallrye-jwt` also provides the JWT generation API, which you can use to easily create `signed`, `inner-signed`, and `encrypted` `JWT` tokens."
msgstr "`quarkus-smallrye-jwt` 提供了一个替代 `quarkus-oidc` Bearer Token认证机制的方法，并且目前只能验证使用PEM密钥或可刷新的 `JWK` 密钥集的 `JWT` token。此外，`quarkus-smallrye-jwt` 还提供了 JWT generation API`，以便轻松创建 `signed` 、 `inner-signed` 和 `encrypted` `JWT` token。"

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:249
#, fuzzy
msgid "For more information, see the xref:security-jwt.adoc[Using JWT RBAC] guide."
msgstr "更多信息请参见《 link:security-jwt.html[使用SmallRye JWT RBAC] 》指南。"

#. type: Title ===
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:251
#, no-wrap
msgid "OAuth2 authentication"
msgstr "OAuth2 认证机制"

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:256
#, fuzzy
msgid "`quarkus-elytron-security-oauth2` provides an alternative to the Quarkus `quarkus-oidc` Bearer authentication mechanism extension.  `quarkus-elytron-security-oauth2` is based on `Elytron` and is primarily intended for introspecting opaque tokens remotely.  For more information, see the Quarkus xref:security-oauth2.adoc[Using OAuth2] guide."
msgstr "`quarkus-elytron-security-oauth2` 提供了一个替代 `quarkus-oidc` Bearer Token认证机制的方法。它基于 `Elytron` 并且主要是为了对不透明的token进行远程自我检查。更多信息请参见 link:security-oauth2.html[使用OAuth2] 指南。"

#. type: Title ==
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:258
#, no-wrap
msgid "Choosing between OpenID Connect, SmallRye JWT, and OAuth2 authentication mechanisms"
msgstr "在OpenID Connect、SmallRye JWT和OAuth2扩展之间做出选择"

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:261
#, fuzzy
msgid "Use the following information to select the appropriate token authentication mechanism to secure your Quarkus applications."
msgstr "使用以下信息来帮助您决定使用哪种认证机制来保护您的Quarkus应用程序："

#. type: Block title
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:262
#, fuzzy, no-wrap
msgid "List of authentication mechanism use-cases"
msgstr "组合认证机制"

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:266
#, fuzzy
msgid "`quarkus-oidc` requires an OpenID Connect provider such as Keycloak, which can verify the bearer tokens or authenticate the end users with the Authorization Code flow.  In both cases, `quarkus-oidc` requires a connection to the specified OpenID Connect provider."
msgstr "`quarkus-oidc` 扩展需要一个OpenID Connect提供者，如Keycloak，用以验证Bearer tokens或用Authorization Code flow验证终端用户。在这两种情况下 `quarkus-oidc` 需要连接到这个OpenID Connect提供者。"

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:269
#, fuzzy
msgid "If the user authentication requires Authorization Code flow, or you need to support multiple tenants, use `quarkus-oidc`.  `quarkus-oidc` can also request user information by using both Authorization Code Flow and Bearer access tokens."
msgstr "如果用户认证需要是使用Authorization Code flow或者您需要支持多租户，请使用 `quarkus-oidc` 。 `quarkus-oidc` 也可以通过Authorization Code Flow 和 Bearer access tokens来请求用户信息。"

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:271
#, fuzzy
msgid "If your bearer tokens must be verified, use `quarkus-oidc`, `quarkus-smallrye-jwt`, or `quarkus-elytron-security-oauth2`."
msgstr "当需要验证Bearer tokens时，您可以使用 `quarkus-oidc` , `quarkus-smallrye-jwt` 和 `quarkus-elytron-security-oauth2` 。"

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:275
#, fuzzy
msgid "If your bearer tokens are in a JSON web token (JWT) format, you can use any extensions in the preceding list.  Both `quarkus-oidc` and `quarkus-smallrye-jwt` support refreshing the `JsonWebKey` (JWK) set when the OpenID Connect provider rotates the keys.  Therefore, if remote token introspection must be avoided or is unsupported by the providers, use `quarkus-oidc` or `quarkus-smallrye-jwt` for verifying JWT tokens."
msgstr "如果您有JWT格式的 Bearer tokens，那么这三个扩展都可以使用。 `quarkus-oidc` 和 `quarkus-smallrye-jwt` 都支持在OpenID Connect提供者旋转密钥时刷新JsonWebKey（JWK）集，因此，如果必须避免远程token自查或提供者不支持，则应使用 `quarkus-oidc` 或 `quarkus-smallrye-jwt` 来验证JWTtoken。"

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:278
#, fuzzy
msgid "To introspect the JWT tokens remotely, you can use either `quarkus-oidc` or `quarkus-elytron-security-oauth2` because they support verifying the opaque or binary tokens by using remote introspection.  `quarkus-smallrye-jwt` does not support the remote introspection of both opaque or JWT tokens but instead relies on the locally available keys that are usually retrieved from the OpenID Connect provider."
msgstr "如果您需要进行JWT tokens远程自查，您可以使用 `quarkus-oidc` 或 `quarkus-elytron-security-oauth2` ，因为它们支持通过使用远程自查来验证不透明或二进制token。 `quarkus-smallrye-jwt` 不支持对不透明或JWT token进行远程自查，而是依赖于通常从OpenID Connect提供者那里检索的本地可用密钥。"

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:282
#, fuzzy
msgid "`quarkus-oidc` and `quarkus-smallrye-jwt` support the JWT and opaque token injection into the endpoint code.  Injected JWT tokens provide more information about the user.  All extensions can have the tokens injected as `Principal`."
msgstr "`quarkus-oidc` 和 `quarkus-smallrye-jwt` 支持将JWT和不透明的token都注入到节点代码中。注入的JWT token可以提供更丰富的用户信息。所有的扩展都可以将 token 以 `Principal` 的形式注入。"

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:285
#, fuzzy
msgid "`quarkus-smallrye-jwt` supports more key formats than `quarkus-oidc`.  `quarkus-oidc` uses only the JWK-formatted keys that are part of a JWK set, whereas `quarkus-smallrye-jwt` supports PEM keys."
msgstr "`quarkus-smallrye-jwt` 比 `quarkus-oidc` 支持更多的密钥格式。后者只使用属于JWK集的JWK格式的密钥，反之前者还支持PEM密钥。"

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:288
#, fuzzy
msgid "`quarkus-smallrye-jwt` handles locally signed, inner-signed-and-encrypted, and encrypted tokens.  In contrast, although `quarkus-oidc` and `quarkus-elytron-security-oauth2` can also verify such tokens, they treat them as opaque tokens and verify them through remote introspection."
msgstr "`quarkus-smallrye-jwt` 不仅可以在本地处理有签名的 token ，而且还可以处理内部签名并加密(inner-signed-and-encrypted)和单纯加密的 token 。事实上， `quarkus-oidc` 和 `quarkus-elytron-security-oauth2` 也可以验证这样的 token ，但只能把它们当作不透明的 token ，并通过远程自查来验证。"

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:290
msgid "If you need a lightweight library for the remote introspection of opaque or JWT tokens, use `quarkus-elytron-security-oauth2`."
msgstr "如果您需要一个轻量级的库来进行不透明或JWT token 的远程自查，请使用 `quarkus-elytron-security-oauth2` 。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:296
msgid "Architectural considerations drive your decision to use opaque or JSON web token (JWT) token format.  Opaque tokens tend to be much shorter than JWT tokens but need most of the token-associated state to be maintained in the provider database.  Opaque tokens are effectively database pointers."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:299
msgid "JWT tokens are significantly longer than opaque tokens.  Nonetheless, the providers effectively delegate most of the token-associated state to the client by storing it as the token claims and either signing or encrypting them."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:302
#, fuzzy, no-wrap
msgid "Token authentication mechanism comparison"
msgstr "组合认证机制"

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:304
#, no-wrap
msgid "Feature required"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:306
#, no-wrap
msgid "`quarkus-oidc`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:306
#, no-wrap
msgid "`quarkus-smallrye-jwt`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:308
#, no-wrap
msgid "`quarkus-elytron-security-oauth2`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:308
#, fuzzy, no-wrap
msgid "Bearer JWT verification"
msgstr "需要进行Bearer JWT验证"

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:308
#, no-wrap
msgid "Local verification or introspection"
msgstr "本地验证或自查"

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:308
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:321
#, no-wrap
msgid "Local verification"
msgstr "本地验证"

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:310
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:311
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:321
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:322
#, no-wrap
msgid "Introspection"
msgstr "自查"

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:310
#, fuzzy, no-wrap
msgid "Bearer opaque token verification"
msgstr "需要进行不透明Bearer token验证"

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:310
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:312
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:315
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:316
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:317
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:318
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:320
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:321
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:322
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:323
#, no-wrap
msgid "No"
msgstr "不"

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:311
#, no-wrap
msgid "Refreshing `JsonWebKey` set for verifying JWT tokens"
msgstr "刷新 `JsonWebKey` 集以验证JWT tokens"

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:311
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:312
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:313
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:315
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:316
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:317
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:318
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:323
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:324
#, no-wrap
msgid "Yes"
msgstr "是"

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:312
#, no-wrap
msgid "Represent token as `Principal`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:313
#, fuzzy, no-wrap
msgid "Inject JWT as MP JWT"
msgstr "将JWT注入为MP Json Web Token（JWT）"

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:315
#, fuzzy, no-wrap
msgid "Authorization code flow"
msgstr "授权"

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:316
#, no-wrap
msgid "Multi-tenancy"
msgstr "多租户"

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:317
#, fuzzy, no-wrap
msgid "User information support"
msgstr "支持UserInfo"

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:318
#, no-wrap
msgid "PEM key format support"
msgstr "支持Pem密钥格式"

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:320
#, no-wrap
msgid "SecretKey support"
msgstr "支持SecretKey"

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:320
#, no-wrap
msgid "In JSON Web Key (JWK) format"
msgstr "以JsonWebKey (JWK) 格式"

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:321
#, no-wrap
msgid "Inner-signed and encrypted or encrypted tokens"
msgstr "Inner-Signed/Encrypted 或 Encrypted tokens"

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:322
#, no-wrap
msgid "Custom token verification"
msgstr "自定义token验证"

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:322
#, no-wrap
msgid "With injected JWT parser"
msgstr "使用注入的JWT Parser"

#. type: Table
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:323
#, fuzzy, no-wrap
msgid "JWT as a cookie support"
msgstr "接受JWT作为cookie"

#. type: Title ==
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:327
#, no-wrap
msgid "Combining authentication mechanisms"
msgstr "组合认证机制"

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:331
#, fuzzy
msgid "If different sources provide the user credentials, you can combine authentication mechanisms.  For example, you can combine the built-in Basic and the Quarkus `quarkus-oidc` Bearer token authentication mechanisms."
msgstr "如果用户证书是由不同的来源提供的，您可以使用组合认证机制。例如，您可以结合内置的 `Basic` 和 `quarkus-oidc` `Bearer` 认证机制。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:335
#, fuzzy
msgid "You cannot combine the Quarkus `quarkus-oidc` Bearer token and `smallrye-jwt` authentication mechanisms because both mechanisms attempt to verify the token extracted from the HTTP Bearer token authentication scheme."
msgstr "但结合 `quarkus-oidc` `Bearer` 和 `smallrye-jwt` 认证机制是不允许的，因为两者都试图验证从HTTP `Authorization Bearer` scheme中提取的token。"

#. type: Title ===
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:337
#, no-wrap
msgid "Path-specific authentication mechanisms"
msgstr "特定路径认证机制"

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:340
msgid "The following configuration example demonstrates how you can enforce a single selectable authentication mechanism for a given request path:"
msgstr "以下配置示例演示了如何强制要求对一个给定的请求路径选择一个认证机制："

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:345
#, no-wrap
msgid ""
"quarkus.http.auth.permission.basic-or-bearer.paths=/service\n"
"quarkus.http.auth.permission.basic-or-bearer.policy=authenticated\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:349
#, no-wrap
msgid ""
"quarkus.http.auth.permission.basic.paths=/basic-only\n"
"quarkus.http.auth.permission.basic.policy=authenticated\n"
"quarkus.http.auth.permission.basic.auth-mechanism=basic\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:353
#, no-wrap
msgid ""
"quarkus.http.auth.permission.bearer.paths=/bearer-only\n"
"quarkus.http.auth.permission.bearer.policy=authenticated\n"
"quarkus.http.auth.permission.bearer.auth-mechanism=bearer\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:356
msgid "Ensure that the value of the `auth-mechanism` property matches the authentication scheme supported by `HttpAuthenticationMechanism`, for example, `basic`, `bearer`, or `form`."
msgstr "`auth-mechanism` 属性值必须与 HttpAuthenticationMechanism 支持的认证方案相匹配，如 `basic` 或 `bearer` 或 `form` 等等。"

#. type: Title ==
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:357
#, no-wrap
msgid "Proactive authentication"
msgstr "主动认证"

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:362
msgid "Proactive authentication is enabled in Quarkus by default.  This means that if an incoming request has a credential, the request will always be authenticated, even if the target page does not require authentication.  For more information, see the Quarkus xref:security-proactive-authentication-concept.adoc[Proactive authentication] guide."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:363
#, no-wrap
msgid "References"
msgstr "参考文献"

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:366
msgid "xref:security-overview-concept.adoc[Quarkus Security overview]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:367
msgid "xref:security-architecture-concept.adoc[Quarkus Security architecture]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-authentication-mechanisms-concept.adoc:368
msgid "xref:security-authorize-web-endpoints-reference.adoc[Authorization of web endpoints]"
msgstr ""

#, fuzzy
#~ msgid "<<Built-in authentication mechanisms>>"
#~ msgstr "组合认证机制"

#~ msgid "Your decision to choose whether to use opaque or JWT token format will be driven by architectural considerations.  Opaque tokens tend to be much shorter than JWT tokens but need most of the token-associated state to be maintained in the provider database.  Opaque tokens are effectively database pointers.  JWT tokens are significantly longer than the opaque tokens but the providers are effectively delegating storing most of the token-associated state to the client by storing it as the token claims and either signing or encrypting them."
#~ msgstr "请注意，选择使用不透明 token 还是JWT token 格式通常是由架构考虑驱动的。不透明 token 通常比JWT token 短得多，但它们需要在提供者的数据库中维护大部分的 token 相关状态。不透明 token 实际上就是数据库指针。JWT token 比不透明 token 要长得多，但提供者通过将大部分 token 相关状态存储为 token 声明并对其进行签名或加密从而有效地将其委托给客户端。"

#~ msgid "The following table provides a summary of the options for each authentication mechanism:"
#~ msgstr "下表提供了每种认证机制的选项摘要："
