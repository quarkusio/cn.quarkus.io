# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-03-23 02:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:7
#, no-wrap
msgid "OpenID Connect (OIDC) Bearer authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:12
msgid "Secure HTTP access to Jakarta REST (formerly known as JAX-RS) endpoints in your application with Bearer authentication by using the Quarkus OpenID Connect (OIDC) extension."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:13
#, no-wrap
msgid "Overview of the Bearer authentication mechanism in Quarkus"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:16
msgid "Quarkus supports the Bearer authentication mechanism through the Quarkus OpenID Connect (OIDC) extension."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:18
msgid "The bearer tokens are issued by OIDC and OAuth 2.0 compliant authorization servers, such as link:https://www.keycloak.org[Keycloak]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:21
msgid "Bearer authentication is the process of authorizing HTTP requests based on the existence and validity of a bearer token.  The bearer token provides information about the subject of the call, which is used to determine whether or not an HTTP resource can be accessed."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:23
msgid "The following diagrams outline the Bearer authentication mechanism in Quarkus:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:24
#, no-wrap
msgid "Bearer authentication mechanism in Quarkus with Single-page application"
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:25
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:35
#, no-wrap
msgid "Bearer"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:25
#, no-wrap
msgid "security-bearer-token-authorization-mechanism-1.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:28
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:38
msgid "The Quarkus service retrieves verification keys from the OpenID Connect provider. The verification keys are used to verify the bearer access token signatures."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:29
msgid "The Quarkus user accesses the Single-page application."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:30
msgid "The Single-page application uses Authorization Code Flow to authenticate the user and retrieve tokens from the OpenID Connect provider."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:31
msgid "The Single-page application uses the access token to retrieve the service data from the Quarkus service."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:32
msgid "The Quarkus service verifies the bearer access token signature using the verification keys, checks the token expiry date and other claims, allows the request to proceed if the token is valid, and returns the service response to the Single-page application."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:33
msgid "The Single-page application returns the same data to the Quarkus user."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:34
#, no-wrap
msgid "Bearer authentication mechanism in Quarkus with Java or command line client"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:35
#, no-wrap
msgid "security-bearer-token-authorization-mechanism-2.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:39
msgid "The Client uses `client_credentials` that requires client ID and secret or password grant, which also requires client ID, secret, user name, and password to retrieve the access token from the OpenID Connect provider."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:40
msgid "The Client uses the access token to retrieve the service data from the Quarkus service."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:41
msgid "The Quarkus service verifies the bearer access token signature using the verification keys, checks the token expiry date and other claims, allows the request to proceed if the token is valid, and returns the service response to the Client."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:44
msgid "If you need to authenticate and authorize the users using OpenID Connect Authorization Code Flow, see xref:security-oidc-code-flow-authentication-concept.adoc[OIDC code flow mechanism for protecting web applications].  Also, if you use Keycloak and bearer tokens, see xref:security-keycloak-authorization.adoc[Using Keycloak to Centralize Authorization]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:46
msgid "For information about how to support multiple tenants, see xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy]."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:48
#, no-wrap
msgid "Accessing JWT claims"
msgstr "访问JWT声明"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:51
msgid "If you need to access JWT token claims then you can inject `JsonWebToken`:"
msgstr "如果你需要访问JWT令牌声明，那么你要注入 `JsonWebToken` ："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:55
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:517
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:551
#, no-wrap
msgid "package org.acme.security.openid.connect;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:63
#, no-wrap
msgid ""
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import jakarta.inject.Inject;\n"
"import jakarta.annotation.security.RolesAllowed;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:66
#, no-wrap
msgid ""
"@Path(\"/api/admin\")\n"
"public class AdminResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:69
#, no-wrap
msgid ""
"    @Inject\n"
"    JsonWebToken jwt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:77
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"admin\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String admin() {\n"
"        return \"Access for subject \" + jwt.getSubject() + \" is granted\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:80
msgid "Injection of `JsonWebToken` is supported in `@ApplicationScoped`, `@Singleton` and `@RequestScoped` scopes however the use of `@RequestScoped` is required if the individual claims are injected as simple types, please see xref:security-jwt.adoc#supported-injection-scopes[Support Injection Scopes for JsonWebToken and Claims] for more details."
msgstr "在 `@ApplicationScoped` , `@Singleton` 和 `@RequestScoped` 范围上下文中支持注入 `JsonWebToken` ，但是如果单个声明被注入为简单类型，则需要使用 `@RequestScoped` ，更多细节请参见 link:security-jwt.html#supported-injection-scopes[JsonWebToken和声明所支持注入范围(Injection Scopes)] 。"

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:82
#, no-wrap
msgid "User Info"
msgstr "用户信息"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:87
#, fuzzy
msgid "Set `quarkus.oidc.authentication.user-info-required=true` if a UserInfo JSON object from the OIDC userinfo endpoint has to be requested.  A request will be sent to the OpenID Provider UserInfo endpoint and an `io.quarkus.oidc.UserInfo` (a simple `jakarta.json.JsonObject` wrapper) object will be created.  `io.quarkus.oidc.UserInfo` can be either injected or accessed as a SecurityIdentity `userinfo` attribute."
msgstr "如果要从OIDC userinfo端点请求UserInfo JSON对象，那么要设置 `quarkus.oidc.authentication.user-info-required=true` 。一个请求将被发送到OpenID Provider UserInfo端点，并将创建一个 `io.quarkus.oidc.UserInfo` （一个简单的 `javax.json.JsonObject` 包装器）对象。 `io.quarkus.oidc.UserInfo` 可以被注入或作为SecurityIdentity `userinfo` 属性访问。"

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:89
#, no-wrap
msgid "Configuration Metadata"
msgstr "配置元数据"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:92
msgid "The current tenant's discovered link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect Configuration Metadata] is represented by `io.quarkus.oidc.OidcConfigurationMetadata` and can be either injected or accessed as a `SecurityIdentity` `configuration-metadata` attribute."
msgstr "当前租户发现的 link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect配置元数据] 由 `io.quarkus.oidc.OidcConfigurationMetadata` 表示，可以作为 `SecurityIdentity` `configuration-metadata` 属性注入或访问。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:94
msgid "The default tenant's `OidcConfigurationMetadata` is injected if the endpoint is public."
msgstr "如果端点是公开的，则默认租户的 `OidcConfigurationMetadata` 会被注入。"

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:95
#, no-wrap
msgid "Token Claims And SecurityIdentity Roles"
msgstr "令牌声明(Token Claims)和安全身份角色(SecurityIdentity Roles)"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:98
msgid "SecurityIdentity roles can be mapped from the verified JWT access tokens as follows:"
msgstr "安全身份(SecurityIdentity)角色可以从经过验证的JWT访问令牌中映射出来，具体如下:"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:101
msgid "If `quarkus.oidc.roles.role-claim-path` property is set and matching array or string claims are found then the roles are extracted from these claims.  For example, `customroles`, `customroles/array`, `scope`, `\"http://namespace-qualified-custom-claim\"/roles`, `\"http://namespace-qualified-roles\"`, etc."
msgstr "如果 `quarkus.oidc.roles.role-claim-path` 属性被设置，并且找到匹配的数组或字符串声明，那么角色将从这些声明中提取。例如， `customroles` , `customroles/array` , `scope` , `\"http://namespace-qualified-custom-claim\"/roles` , `\"http://namespace-qualified-roles\"` , 等等。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:102
msgid "If `groups` claim is available then its value is used"
msgstr "如果存在 `groups` 声明，则这个声明的值会被使用"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:104
msgid "If `realm_access/roles` or `resource_access/client_id/roles` (where `client_id` is the value of the `quarkus.oidc.client-id` property) claim is available then its value is used.  This check supports the tokens issued by Keycloak"
msgstr "如果 `realm_access/roles` 或 `resource_access/client_id/roles` （其中 `client_id` 是 `quarkus.oidc.client-id` 属性的值）声明是存在的，那么它的值会被使用。该检查支持由Keycloak发行的令牌"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:106
msgid "If the token is opaque (binary) then a `scope` property from the remote token introspection response will be used."
msgstr "如果令牌是不透明的（二进制），那么将使用来自远程令牌自省(token introspection)响应的 `scope` 属性。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:108
msgid "If UserInfo is the source of the roles then set `quarkus.oidc.authentication.user-info-required=true` and `quarkus.oidc.roles.source=userinfo`, and if needed, `quarkus.oidc.roles.role-claim-path`."
msgstr "如果使用UserInfo为角色的来源，那么要设置 `quarkus.oidc.authentication.user-info-required=true` 和 `quarkus.oidc.roles.source=userinfo` ，如果需要的话，设置 `quarkus.oidc.roles.role-claim-path` 。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:110
msgid "Additionally, a custom `SecurityIdentityAugmentor` can also be used to add the roles as documented in xref:security-customization.adoc#security-identity-customization[Security Identity Customization]."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:112
#, no-wrap
msgid "Token Verification And Introspection"
msgstr "代币验证(Token Verification)和自省(Introspection)"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:117
msgid "If the token is a JWT token then, by default, it will be verified with a `JsonWebKey` (JWK) key from a local `JsonWebKeySet` retrieved from the OpenID Connect Provider's JWK endpoint. The token's key identifier `kid` header value will be used to find the matching JWK key.  If no matching `JWK` is available locally then `JsonWebKeySet` will be refreshed by fetching the current key set from the JWK endpoint. The `JsonWebKeySet` refresh can be repeated only after the `quarkus.oidc.token.forced-jwk-refresh-interval` (default is 10 minutes) expires.  If no matching `JWK` is available after the refresh then the JWT token will be sent to the OpenID Connect Provider's token introspection endpoint."
msgstr "如果令牌是 JWT 令牌，则默认情况下，将使用从 OpenID Connect 提供程序的 JWK 端点检索到的本地 `JsonWebKeySet` 中的 `JsonWebKey`（JWK） 密钥对其进行验证。令牌的密钥标识符 `kid` 标头值( header value)将用于查找匹配的 JWK 密钥。 如果本地没有匹配的 `JWK` 可用，则 `JsonWebKeySet` 将通过从JWK端点获取当前密钥集来刷新。`JsonWebKeySet` 刷新只能在 `quarkus.oidc.token.forced-jwk-refresh-interval`（默认值为10分钟）过期后重复。 如果在刷新后没有匹配的“JWK”可用，则 JWT 令牌将发送到 OpenID Connect 提供程序的令牌自检终结点。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:119
msgid "If the token is opaque (it can be a binary token or an encrypted JWT token) then it will always be sent to the OpenID Connect Provider's token introspection endpoint."
msgstr "如果令牌是不透明的（可以是二进制令牌或加密的JWT令牌），那么它将总是被发送到OpenID Connect提供者的令牌自省端点。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:121
msgid "If you work with JWT tokens only and expect that a matching `JsonWebKey` will always be available (possibly after a key set refresh) then you should disable the token introspection:"
msgstr "如果你只使用JWT令牌，并且期望一个匹配的 `JsonWebKey` ，那么你应该禁用令牌自省："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:126
#, no-wrap
msgid ""
"quarkus.oidc.token.allow-jwt-introspection=false\n"
"quarkus.oidc.token.allow-opaque-token-introspection=false\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:129
msgid "However, there could be cases where JWT tokens must be verified via the introspection only. It can be forced by configuring an introspection endpoint address only, for example, in case of Keycloak you can do it like this:"
msgstr "然而，在某些情况下，JWT令牌必须只通过自省来验证。它可以通过配置一个自省端点地址来强制进行，例如，在Keycloak的情况下，你可以这样做："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:136
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.discovery-enabled=false\n"
"# Token Introspection endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/tokens/introspect\n"
"quarkus.oidc.introspection-path=/protocol/openid-connect/tokens/introspect\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:139
msgid "An advantage of this indirect enforcement of JWT tokens being only introspected remotely is that two remote call are avoided: a remote OIDC metadata discovery call followed by another remote call fetching the verification keys which will not be used, while its disavantage is that the users need to know the introspection endpoint address and configure it manually."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:141
msgid "The alternative approach is to allow discovering the OIDC metadata (which is a default option) but require that only the remote JWT introspection is performed:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:146
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.token.require-jwt-introspection-only=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:149
msgid "An advantage of this approach is that the configuration is simple and easy to understand, while its disavantage is that a remote OIDC metadata discovery call is required to discover an introspection endpoint address (though the verification keys will also not be fetched)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:151
#, fuzzy
msgid "Note that `io.quarkus.oidc.TokenIntrospection` (a simple `jakarta.json.JsonObject` wrapper) object will be created and can be either injected or accessed as a SecurityIdentity `introspection` attribute if either JWT or opaque token has been successfully introspected."
msgstr "请注意， `io.quarkus.oidc.TokenIntrospection` （一个简单的 `javax.json.JsonObject` 包装器）对象将被创建，如果JWT或不透明令牌已被成功自省，可以被注入或作为SecurityIdentity `introspection` 属性访问。"

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:153
#, no-wrap
msgid "Token Introspection and UserInfo Cache"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:156
msgid "All opaque and sometimes JWT Bearer access tokens have to be remotely introspected. If `UserInfo` is also required then the same access token will be used to do a remote call to OpenID Connect Provider again. So, if `UserInfo` is required and the current access token is opaque then for every such token there will be 2 remote calls done - one to introspect it and one to get UserInfo with it, and if the token is JWT then usually only a single remote call will be needed - to get UserInfo with it."
msgstr "所有不透明的、有时是JWT不记名的访问令牌都必须进行远程自省。如果还需要 `UserInfo` ，那么相同的访问令牌将被用来再次远程调用OpenID Connect Provider。因此，如果需要 `UserInfo` ，并且当前的访问令牌是不透明的，那么对于每一个这样的令牌，将进行两次远程调用--一次是反省，一次是用它来获取UserInfo，如果令牌是JWT，那么通常只需要一次远程调用--用它来获取UserInfo。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:158
msgid "The cost of making up to 2 remote calls per every incoming bearer or code flow access token can sometimes be problematic."
msgstr "每一个传入的不记名流(bearer flow)或授权码流(code flow)访问令牌要进行多达2次的远程呼叫，其开销有时会是个问题。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:160
msgid "If it is the case in your production then it can be recommended that the token introspection and `UserInfo` data are cached for a short period of time, for example, for 3 or 5 minutes."
msgstr "如果在你的生产中有这种情况，那么可以建议将令牌自省和 `UserInfo` 数据缓存一小段时间，例如，3或5分钟。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:162
msgid "`quarkus-oidc` provides `quarkus.oidc.TokenIntrospectionCache` and `quarkus.oidc.UserInfoCache` interfaces which can be used to implement `@ApplicationScoped` cache implementation which can be used to store and retrieve `quarkus.oidc.TokenIntrospection` and/or `quarkus.oidc.UserInfo` objects, for example:"
msgstr "`quarkus-oidc` 提供 `quarkus.oidc.TokenIntrospectionCache` 和 `quarkus.oidc.UserInfoCache` 接口，可用于实现 `@ApplicationScoped` 缓存实现，可用于存储和检索 `quarkus.oidc.TokenIntrospection` 和/或 `quarkus.oidc.UserInfo` 对象，例如："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:171
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@Alternative\n"
"@Priority(1)\n"
"public class CustomIntrospectionUserInfoCache implements TokenIntrospectionCache, UserInfoCache {\n"
"...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:174
msgid "Each OIDC tenant can either permit or deny storing its `quarkus.oidc.TokenIntrospection` and/or `quarkus.oidc.UserInfo` data with boolean `quarkus.oidc.\"tenant\".allow-token-introspection-cache` and `quarkus.oidc.\"tenant\".allow-user-info-cache` properties."
msgstr "每个OIDC租户可以允许或拒绝存储其 `quarkus.oidc.TokenIntrospection` 和/或 `quarkus.oidc.UserInfo` 数据，其属性为布尔值 `quarkus.oidc.\"tenant\".allow-token-introspection-cache` 和 `quarkus.oidc.\"tenant\".allow-user-info-cache` 。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:176
msgid "Additionally, `quarkus-oidc` provides a simple default memory based token cache which implements both `quarkus.oidc.TokenIntrospectionCache` and `quarkus.oidc.UserInfoCache` interfaces."
msgstr "此外， `quarkus-oidc` 提供了一个简单的基于内存的默认令牌缓存，该缓存同时实现了 `quarkus.oidc.TokenIntrospectionCache` 和 `quarkus.oidc.UserInfoCache` 接口。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:178
msgid "It can be activated and configured as follows:"
msgstr "它可以按以下方式激活和配置:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:187
#, no-wrap
msgid ""
"# 'max-size' is 0 by default so the cache can be activated by setting 'max-size' to a positive value.\n"
"quarkus.oidc.token-cache.max-size=1000\n"
"# 'time-to-live' specifies how long a cache entry can be valid for and will be used by a cleanup timer.\n"
"quarkus.oidc.token-cache.time-to-live=3M\n"
"# 'clean-up-timer-interval' is not set by default so the cleanup timer can be activated by setting 'clean-up-timer-interval'.\n"
"quarkus.oidc.token-cache.clean-up-timer-interval=1M\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:190
msgid "The default cache uses a token as a key and each entry can have `TokenIntrospection` and/or `UserInfo`. It will only keep up to a `max-size` number of entries. If the cache is full when a new entry is to be added then an attempt will be made to find a space for it by removing a single expired entry. Additionally, the cleanup timer, if activated, will periodically check for the expired entries and remove them."
msgstr "默认的缓存使用一个令牌作为密钥，每个条目可以有 `TokenIntrospection` 和/或 `UserInfo` 。它只保留最多数量的条目 `max-size` 。如果要添加一个新的条目时，缓存已经满了，那么将试图通过删除一个过期的条目来为它找到一个空间。此外，清理计时器，如果被激活，将定期检查过期的条目并将其删除。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:192
msgid "Please experiment with the default cache implementation or register a custom one."
msgstr "请尝试使用默认的缓存实现或注册一个自定义的缓存。"

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:194
#, no-wrap
msgid "JSON Web Token Claim Verification"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:197
msgid "Once the bearer JWT token's signature has been verified and its `expires at` (`exp`) claim has been checked, the `iss` (`issuer`) claim value is verified next."
msgstr "一旦无记名JWT令牌的签名被验证，其 `expires at` ( `exp` )声明会被检查，接下来也会验证 `iss` ( `issuer` )声明的值。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:200
msgid "By default, the `iss` claim value is compared to the `issuer` property which may have been discovered in the well-known provider configuration.  But if `quarkus.oidc.token.issuer` property is set then the `iss` claim value is compared to it instead."
msgstr "默认情况下， `iss` 声明的值会与 `issuer` 属性进行比较，该属性有可能会在众所周知的提供者配置中找到。但是，如果 `quarkus.oidc.token.issuer` 属性被设置，那么 `iss` 声明的值将与它进行比较。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:202
msgid "In some cases, this `iss` claim verification may not work. For example, if the discovered `issuer` property contains an internal HTTP/IP address while the token `iss` claim value contains an external HTTP/IP address. Or when a discovered `issuer` property contains the template tenant variable but the token `iss` claim value has the complete tenant-specific issuer value."
msgstr "在某些情况下，这种 `iss` 声明验证可能不起作用。例如，如果发现的 `issuer` 属性包含一个内部 HTTP/IP地址，而令牌 `iss` 声明值包含一个外部 HTTP/IP地址。或者当发现的 `issuer` 属性包含模板租户变量，但令牌 `iss` 声明值有完整的租户特定发行人(tenant-specific issuer )的值。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:204
msgid "In such cases you may want to consider skipping the issuer verification by setting `quarkus.oidc.token.issuer=any`. Please note that it is not recommended and should be avoided unless no other options are available:"
msgstr "在这种情况下，你可能要考虑通过设置 `quarkus.oidc.token.issuer=any` ，来跳过发行人验证。请注意，不建议这样做，除非没有其他选择，否则应避免这样做："

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:206
msgid "If you work with Keycloak and observe the issuer verification errors due to the different host addresses then configure Keycloak with a `KEYCLOAK_FRONTEND_URL` property to ensure the same host address is used."
msgstr "如果你使用Keycloak，并观察到由于不同的主机地址导致发行人验证错误，那么用 `KEYCLOAK_FRONTEND_URL` 属性配置Keycloak，以确保使用相同的主机地址。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:207
#, fuzzy
msgid "If the `iss` property is tenant specific in a multi-tenant deployment then you can use the `SecurityIdentity` `tenant-id` attribute to check the issuer is correct in the endpoint itself or the custom Jakarta REST filter, for example:"
msgstr "如果在多租户部署中， `iss` 属性是租户特定的，那么你可以使用 `SecurityIdentity` `tenant-id` 属性来检查端点本身或自定义 JAX-RS 过滤器中的签发者是否正确，例如："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:214
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.container.ContainerRequestContext;\n"
"import jakarta.ws.rs.container.ContainerRequestFilter;\n"
"import jakarta.ws.rs.ext.Provider;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:218
#, no-wrap
msgid ""
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import io.quarkus.oidc.OidcConfigurationMetadata;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:223
#, no-wrap
msgid ""
"@Provider\n"
"public class IssuerValidator implements ContainerRequestFilter {\n"
"    @Inject\n"
"    OidcConfigurationMetadata configMetadata;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:226
#, no-wrap
msgid ""
"    @Inject JsonWebToken jwt;\n"
"    @Inject SecurityIdentity identity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:234
#, no-wrap
msgid ""
"    public void filter(ContainerRequestContext requestContext) {\n"
"        String issuer = configMetadata.getIssuer().replace(\"{tenant-id}\", identity.getAttribute(\"tenant-id\"));\n"
"        if (!issuer.equals(jwt.getIssuer())) {\n"
"            requestContext.abortWith(Response.status(401).build());\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:237
msgid "Note it is also recommended to use `quarkus.oidc.token.audience` property to verify the token `aud` (`audience`) claim value."
msgstr "注意，建议使用 `quarkus.oidc.token.audience` 属性来验证令牌 `aud` ( `audience` )声明的值。"

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:239
#, no-wrap
msgid "Single Page Applications"
msgstr "单页应用程序"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:243
msgid "Single Page Application (SPA) typically uses `XMLHttpRequest`(XHR) and the JavaScript utility code provided by the OpenID Connect provider to acquire a bearer token and use it to access Quarkus `service` applications."
msgstr "单页应用程序（SPA）通常使用 `XMLHttpRequest` （XHR）和OpenID Connect提供商提供的Java Script实用程序代码来获取不记名令牌，并使用它来访问Quarkus `service` 应用程序。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:245
msgid "For example, here is how you can use `keycloak.js` to authenticate the users and refresh the expired tokens from the SPA:"
msgstr "例如，以下是你如何使用 `keycloak.js` 来验证用户并从SPA中刷新过期的令牌："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:284
#, no-wrap
msgid ""
"<html>\n"
"<head>\n"
"    <title>keycloak-spa</title>\n"
"    <script src=\"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\"></script>\n"
"    <script src=\"http://localhost:8180/js/keycloak.js\"></script>\n"
"    <script>\n"
"        var keycloak = new Keycloak();\n"
"        keycloak.init({onLoad: 'login-required'}).success(function () {\n"
"            console.log('User is now authenticated.');\n"
"        }).error(function () {\n"
"            window.location.reload();\n"
"        });\n"
"        function makeAjaxRequest() {\n"
"            axios.get(\"/api/hello\", {\n"
"                headers: {\n"
"                    'Authorization': 'Bearer ' + keycloak.token\n"
"                }\n"
"            })\n"
"            .then( function (response) {\n"
"                console.log(\"Response: \", response.status);\n"
"            }).catch(function (error) {\n"
"                console.log('refreshing');\n"
"                keycloak.updateToken(5).then(function () {\n"
"                    console.log('Token refreshed');\n"
"                }).catch(function () {\n"
"                    console.log('Failed to refresh token');\n"
"                    window.location.reload();\n"
"                });\n"
"            });\n"
"    }\n"
"    </script>\n"
"</head>\n"
"<body>\n"
"    <button onclick=\"makeAjaxRequest()\">Request</button>\n"
"</body>\n"
"</html>\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:286
#, no-wrap
msgid "Cross Origin Resource Sharing"
msgstr "跨域资源共享(CORS)"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:289
msgid "If you plan to consume your OpenID Connect `service` application from a Single Page Application running on a different domain, you will need to configure CORS (Cross-Origin Resource Sharing). Please read the xref:http-reference.adoc#cors-filter[HTTP CORS documentation] for more details."
msgstr "如果你打算从运行在不同域的单页应用中使用你的OpenID Connect `service` 应用程序，你将需要配置CORS（跨源资源共享）。请阅读 link:http-reference.html#cors-filter[HTTP CORS文档] 以了解更多细节。"

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:290
#, no-wrap
msgid "Provider Endpoint configuration"
msgstr "提供者端点配置"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:293
msgid "OIDC `service` application needs to know OpenID Connect provider's token, `JsonWebKey` (JWK) set and possibly `UserInfo` and introspection endpoint addresses."
msgstr "OIDC `service` 应用程序需要知道OpenID Connect提供者的令牌、 `JsonWebKey` (JWK)集以及可能的 `UserInfo` 和自省端点地址。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:295
msgid "By default, they are discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc.auth-server-url`."
msgstr "默认情况下，它们是通过在配置的 `quarkus.oidc.auth-server-url` 中，添加一个 `/.well-known/openid-configuration` 路径来发现的。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:297
msgid "Alternatively, if the discovery endpoint is not available, or if you would like to save on the discovery endpoint round-trip, you can disable the discovery and configure them with relative path values, for example:"
msgstr "另外，如果发现端点不可用，或者你想节省发现端点的往返开销，你可以禁用发现，用相对路径值配置它们，比如说："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:310
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.discovery-enabled=false\n"
"# Token endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/token\n"
"quarkus.oidc.token-path=/protocol/openid-connect/token\n"
"# JWK set endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/certs\n"
"quarkus.oidc.jwks-path=/protocol/openid-connect/certs\n"
"# UserInfo endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/userinfo\n"
"quarkus.oidc.user-info-path=/protocol/openid-connect/userinfo\n"
"# Token Introspection endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/tokens/introspect\n"
"quarkus.oidc.introspection-path=/protocol/openid-connect/tokens/introspect\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:312
#, no-wrap
msgid "Token Propagation"
msgstr "令牌传播"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:315
msgid "Please see xref:security-openid-connect-client-reference.adoc#token-propagation[Token Propagation] section about the Bearer access token propagation to the downstream services."
msgstr "关于承载访问令牌向下游服务的传播，请参见 link:security-openid-connect-client.html#token-propagation[令牌] 传播部分。"

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:317
#, no-wrap
msgid "Oidc Provider Client Authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:320
#, fuzzy
msgid "`quarkus.oidc.runtime.OidcProviderClient` is used when a remote request to an OpenID Connect Provider has to be done. If the bearer token has to be introspected then `OidcProviderClient` has to authenticate to the OpenID Connect Provider. Please see xref:security-oidc-code-flow-authentication-concept.adoc#oidc-provider-client-authentication[OidcProviderClient Authentication] for more information about all the supported authentication options."
msgstr "属性 `quarkus.oidc.runtime.OidcProviderClient` 是在需要对OpenID连接提供者进行远程请求时使用的。如果必须对不记名令牌进行检查，那么 ，必须对OpenID Connect Provider进行认证。请参阅 `OidcProviderClient` link:security-openid-connect-web-authentication.html#oidc-provider-client-authentication[OidcProviderClient 认证] 以了解更多关于所支持认证选项的信息。"

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:322
#, no-wrap
msgid "Testing"
msgstr "测试"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:325
msgid "Start by adding the following dependencies to your test project:"
msgstr "首先在你的测试项目中添加以下依赖项："

#. type: Block title
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:327
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:354
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:478
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:570
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:681
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:339
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.rest-assured</groupId>\n"
"    <artifactId>rest-assured</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:342
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:364
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:488
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:580
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:691
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:346
#, no-wrap
msgid ""
"testImplementation(\"io.rest-assured:rest-assured\")\n"
"testImplementation(\"io.quarkus:quarkus-junit5\")\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:349
#, no-wrap
msgid "Wiremock"
msgstr "Wiremock"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:352
msgid "Add the following dependencies to your test project:"
msgstr "在你的测试项目中添加以下依赖项："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:361
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-oidc-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:367
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-test-oidc-server\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:370
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:609
msgid "Prepare the REST test endpoint, set `application.properties`, for example:"
msgstr "准备好REST测试端点，设置 `application.properties` ，例如："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:377
#, no-wrap
msgid ""
"# keycloak.url is set by OidcWiremockTestResource\n"
"quarkus.oidc.auth-server-url=${keycloak.url}/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-service-app\n"
"quarkus.oidc.application-type=service\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:380
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:620
msgid "and finally write the test code, for example:"
msgstr "并最终写出测试代码，例如："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:384
#, no-wrap
msgid "import static org.hamcrest.Matchers.equalTo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:386
#, no-wrap
msgid "import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:388
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:440
#, no-wrap
msgid "import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:394
#, no-wrap
msgid ""
"import io.quarkus.test.common.QuarkusTestResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.oidc.server.OidcWiremockTestResource;\n"
"import io.restassured.RestAssured;\n"
"import io.smallrye.jwt.build.Jwt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:398
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(OidcWiremockTestResource.class)\n"
"public class BearerTokenAuthorizationTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:408
#, no-wrap
msgid ""
"    @Test\n"
"    public void testBearerToken() {\n"
"        RestAssured.given().auth().oauth2(getAccessToken(\"alice\", Set.of(\"user\")))\n"
"            .when().get(\"/api/users/me\")\n"
"            .then()\n"
"            .statusCode(200)\n"
"            // the test endpoint returns the name extracted from the injected SecurityIdentity Principal\n"
"            .body(\"userName\", equalTo(\"alice\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:417
#, no-wrap
msgid ""
"    private String getAccessToken(String userName, Set<String> groups) {\n"
"        return Jwt.preferredUserName(userName)\n"
"                .groups(groups)\n"
"                .issuer(\"https://server.example.com\")\n"
"                .audience(\"https://service.example.com\")\n"
"                .sign();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:420
msgid "Note that the `quarkus-test-oidc-server` extension includes a signing RSA private key file in a `JSON Web Key` (`JWK`) format and points to it with a `smallrye.jwt.sign.key.location` configuration property. It allows to use a no argument `sign()` operation to sign the token."
msgstr "请注意， `quarkus-test-oidc-server` 扩展包括一个 `JSON Web Key` ( `JWK` ) 格式的签名 RSA 私钥文件，并通过 `smallrye.jwt.sign.key.location` 配置属性指向它。它允许使用一个无参数的 `sign()` 操作来签署令牌。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:423
msgid "Testing your `quarkus-oidc` `service` application with `OidcWiremockTestResource` provides the best coverage as even the communication channel is tested against the Wiremock HTTP stubs.  `OidcWiremockTestResource` will be enhanced going forward to support more complex bearer token test scenarios."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:426
msgid "If there is an immediate need for a test to define Wiremock stubs not currently supported by `OidcWiremockTestResource` one can do so via a `WireMockServer` instance injected into the test class, for example:"
msgstr "如果一个测试需要立即定义Wiremock存根(stubs)，而目前 `OidcWiremockTestResource` 不支持，可以通过注入测试类的 `WireMockServer` 实例来实现，例如:"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:430
msgid "`OidcWiremockTestResource` does not work with `@QuarkusIntegrationTest` against Docker containers, because the Wiremock server is running in the JVM running the test, which cannot be accessed from the Docker container running the Quarkus application."
msgstr "`OidcWiremockTestResource` 不适用于针对Docker容器的 `@QuarkusIntegrationTest` ，因为Wiremock服务器在运行测试的JVM中运行，无法被在Docker容器中运行的Quarkus应用程序访问。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:435
#, no-wrap
msgid "package io.quarkus.it.keycloak;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:438
#, no-wrap
msgid ""
"import static com.github.tomakehurst.wiremock.client.WireMock.matching;\n"
"import static org.hamcrest.Matchers.equalTo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:443
#, no-wrap
msgid ""
"import com.github.tomakehurst.wiremock.WireMockServer;\n"
"import com.github.tomakehurst.wiremock.client.WireMock;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:447
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.oidc.server.OidcWireMock;\n"
"import io.restassured.RestAssured;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:450
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class CustomOidcWireMockStubTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:453
#, no-wrap
msgid ""
"    @OidcWireMock\n"
"    WireMockServer wireMockServer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:459
#, no-wrap
msgid ""
"    @Test\n"
"    public void testInvalidBearerToken() {\n"
"        wireMockServer.stubFor(WireMock.post(\"/auth/realms/quarkus/protocol/openid-connect/token/introspect\")\n"
"                .withRequestBody(matching(\".*token=invalid_token.*\"))\n"
"                .willReturn(WireMock.aResponse().withStatus(400)));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:467
#, no-wrap
msgid ""
"        RestAssured.given().auth().oauth2(\"invalid_token\").when()\n"
"                .get(\"/api/users/me/bearer\")\n"
"                .then()\n"
"                .statusCode(401)\n"
"                .header(\"WWW-Authenticate\", equalTo(\"Bearer\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:470
#, no-wrap
msgid "Dev Services for Keycloak"
msgstr "为Keycloak提供的开发服务"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:474
msgid "Using xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] is recommended for the integration testing against Keycloak.  `Dev Services for Keycloak` will launch and initialize a test container: it will create a `quarkus` realm, a `quarkus-app` client (`secret` secret) and add `alice` (`admin` and `user` roles) and `bob` (`user` role) users, where all of these properties can be customized."
msgstr "建议使用 link:security-openid-connect-dev-services.html[Keycloak开发服务] 进行针对Keycloak的集成测试。 `Keycloak开发服务` 将启动和初始化一个测试容器：它将创建一个 `quarkus` 领域，一个 `quarkus-app` 客户端（ `secret` 秘密）并添加 `alice` （ `admin` 和 `user` 角色）和 `bob` （ `user` 角色）用户，其中所有这些属性都可以被定制。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:476
msgid "First you need to add the following dependency:"
msgstr "首先，你需要添加以下依赖关系："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:485
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:577
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-keycloak-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:491
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:583
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-test-keycloak-server\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:494
msgid "which provides a utility class `io.quarkus.test.keycloak.client.KeycloakTestClient` you can use in tests for acquiring the access tokens."
msgstr "其中提供了一个实用类 `io.quarkus.test.keycloak.client.KeycloakTestClient` ，你可以在测试中使用它来获取访问令牌。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:496
msgid "Next prepare your `application.properties`. You can start with a completely empty `application.properties` as `Dev Services for Keycloak` will register `quarkus.oidc.auth-server-url` pointing to the running test container as well as `quarkus.oidc.client-id=quarkus-app` and `quarkus.oidc.credentials.secret=secret`."
msgstr "接下来准备你的 `application.properties` 。你可以从一个完全空的 `application.properties` 开始，因为 `Keycloak开发服务` 将注册指向运行中的测试容器的 `quarkus.oidc.auth-server-url` ，以及 `quarkus.oidc.client-id=quarkus-app` 和 `quarkus.oidc.credentials.secret=secret` 。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:498
msgid "But if you already have all the required `quarkus-oidc` properties configured then you only need to associate `quarkus.oidc.auth-server-url` with the `prod` profile for `Dev Services for Keycloak`to start a container, for example:"
msgstr "但是如果你已经配置了所需的 `quarkus-oidc` 属性，那么你只需要将 `quarkus.oidc.auth-server-url` 与 `Keycloak开发服务` 的 `prod` 配置文件联系起来，以启动一个容器，例如："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:502
#, no-wrap
msgid "%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:505
msgid "If a custom realm file has to be imported into Keycloak before running the tests then you can configure `Dev Services for Keycloak` as follows:"
msgstr "如果在运行测试前必须将自定义领域文件导入Keycloak，那么你可以按以下方式配置 `Keycloak开发服务` ："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:510
#, no-wrap
msgid ""
"%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.keycloak.devservices.realm-path=quarkus-realm.json\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:513
msgid "Finally, write your test which will be executed in JVM mode:"
msgstr "最后编写你的测试，它将在JVM模式下执行："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:522
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.keycloak.client.KeycloakTestClient;\n"
"import io.restassured.RestAssured;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:525
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class BearerTokenAuthenticationTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:527
#, no-wrap
msgid "    KeycloakTestClient keycloakClient = new KeycloakTestClient();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:539
#, no-wrap
msgid ""
"    @Test\n"
"    public void testAdminAccess() {\n"
"        RestAssured.given().auth().oauth2(getAccessToken(\"alice\"))\n"
"                .when().get(\"/api/admin\")\n"
"                .then()\n"
"                .statusCode(200);\n"
"        RestAssured.given().auth().oauth2(getAccessToken(\"bob\"))\n"
"                .when().get(\"/api/admin\")\n"
"                .then()\n"
"                .statusCode(403);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:544
#, no-wrap
msgid ""
"    protected String getAccessToken(String userName) {\n"
"        return keycloakClient.getAccessToken(userName);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:547
msgid "and in native mode:"
msgstr "在原生模式(native mode)下："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:553
#, no-wrap
msgid "import io.quarkus.test.junit.QuarkusIntegrationTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:557
#, no-wrap
msgid ""
"@QuarkusIntegrationTest\n"
"public class NativeBearerTokenAuthenticationIT extends BearerTokenAuthenticationTest {\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:560
msgid "Please see xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] for more information about the way it is initialized and configured."
msgstr "请参阅 link:security-openid-connect-dev-services.html[Keycloak开发服务] ，来了解更多关于它的初始化和配置方式的信息。"

#. type: Title ====
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:562
#, no-wrap
msgid "KeycloakTestResourceLifecycleManager"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:566
#, fuzzy
msgid "If you need to do some integration testing against Keycloak then you are encouraged to do it with xref:integration-testing-keycloak-devservices[Dev Services For Keycloak].  Use `KeycloakTestResourceLifecycleManager` for your tests only if there is a good reason not to use `Dev Services for Keycloak`."
msgstr "如果你需要对Keycloak做一些集成测试，那么我们鼓励你使用 link:#integration-testing-keycloak-devservices[Keycloak开发服务] 来做。只有在有充分理由不使用 `Keycloak开发服务` 的情况下，才使用 `KeycloakTestResourceLifecycleManager` 进行测试。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:568
msgid "Start with adding the following dependency:"
msgstr "首先要添加以下依赖关系："

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:586
msgid "which provides `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` - an implementation of `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which starts a Keycloak container."
msgstr "它提供了 `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` - 一个 `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` 的实现，用来启动一个Keycloak容器。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:588
msgid "And configure the Maven Surefire plugin as follows:"
msgstr "并按以下方式配置Maven Surefire插件："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:604
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-surefire-plugin</artifactId>\n"
"    <configuration>\n"
"        <systemPropertyVariables>\n"
"            <!-- or, alternatively, configure 'keycloak.version' -->\n"
"            <keycloak.docker.image>${keycloak.docker.image}</keycloak.docker.image>\n"
"            <!--\n"
"              Disable HTTPS if required:\n"
"              <keycloak.use.https>false</keycloak.use.https>\n"
"            -->\n"
"        </systemPropertyVariables>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:607
msgid "(and similarly `maven.failsafe.plugin` when testing in native image)."
msgstr "(在原生image中测试时也是如此 `maven.failsafe.plugin` )。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:617
#, no-wrap
msgid ""
"# keycloak.url is set by KeycloakTestResourceLifecycleManager\n"
"quarkus.oidc.auth-server-url=${keycloak.url}/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-service-app\n"
"quarkus.oidc.credentials=secret\n"
"quarkus.oidc.application-type=service\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:625
#, no-wrap
msgid ""
"import static io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager.getAccessToken;\n"
"import static org.hamcrest.Matchers.equalTo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:628
#, no-wrap
msgid ""
"import org.hamcrest.Matchers;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:633
#, no-wrap
msgid ""
"import io.quarkus.test.common.QuarkusTestResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager;\n"
"import io.restassured.RestAssured;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:637
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(KeycloakTestResourceLifecycleManager.class)\n"
"public class BearerTokenAuthorizationTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:647
#, no-wrap
msgid ""
"    @Test\n"
"    public void testBearerToken() {\n"
"        RestAssured.given().auth().oauth2(getAccessToken(\"alice\"))))\n"
"            .when().get(\"/api/users/preferredUserName\")\n"
"            .then()\n"
"            .statusCode(200)\n"
"            // the test endpoint returns the name extracted from the injected SecurityIdentity Principal\n"
"            .body(\"userName\", equalTo(\"alice\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:649
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:738
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:810
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:652
msgid "`KeycloakTestResourceLifecycleManager` registers `alice` and `admin` users. The user `alice` has the `user` role only by default - it can be customized with a `keycloak.token.user-roles` system property. The user `admin` has the `user` and `admin` roles by default - it can be customized with a `keycloak.token.admin-roles` system property."
msgstr "`KeycloakTestResourceLifecycleManager` 注册 `alice` 和 `admin` 用户。默认情况下，用户 `alice` 仅具有 `user` 角色 - 可以使用 `keycloak.token.user-roles` 系统属性对其进行自定义。默认情况下，用户 `admin` 具有 `用户` 和 `admin` 角色 - 可以使用 `keycloak.token.admin-roles` 系统属性对其进行自定义。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:655
msgid "By default, `KeycloakTestResourceLifecycleManager` uses HTTPS to initialize a Keycloak instance which can be disabled with `keycloak.use.https=false`.  Default realm name is `quarkus` and client id - `quarkus-service-app` - set `keycloak.realm` and `keycloak.service.client` system properties to customize the values if needed."
msgstr "默认情况下， `KeycloakTestResourceLifecycleManager` 使用HTTPS来初始化Keycloak实例，可以用 `keycloak.use.https=false` 来禁用。默认的领域(realm)名称是 `quarkus` ，客户端ID - `quarkus-service-app` - 如果需要，可以设置 `keycloak.realm` 和 `keycloak.service.client` 系统属性来定制数值。"

#. type: Title ====
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:657
#, no-wrap
msgid "Local Public Key"
msgstr "本地公钥"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:660
msgid "You can also use a local inlined public key for testing your `quarkus-oidc` `service` applications:"
msgstr "你也可以使用一个本地内嵌的公钥来测试你的 `quarkus-oidc` `service` 应用程序:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:665
#, no-wrap
msgid ""
"quarkus.oidc.client-id=test\n"
"quarkus.oidc.public-key=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlivFI8qB4D0y2jy0CfEqFyy46R0o7S8TKpsx5xbHKoU1VWg6QkQm+ntyIv1p4kE1sPEQO73+HY8+Bzs75XwRTYL1BmR1w8J5hmjVWjc6R2BTBGAYRPFRhor3kpM6ni2SPmNNhurEAHw7TaqszP5eUF/F9+KEBWkwVta+PZ37bwqSE4sCb1soZFrVz/UT/LF4tYpuVYt3YbqToZ3pZOZ9AX2o1GCG3xwOjkc4x0W7ezbQZdC9iftPxVHR8irOijJRRjcPDtA6vPKpzLl6CyYnsIYPd99ltwxTHjr3npfv/3Lw50bAkbT4HeLFxTx4flEoZLKO/g0bAoV2uqBhkA9xnQIDAQAB\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:667
#, no-wrap
msgid "smallrye.jwt.sign.key.location=/privateKey.pem\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:670
msgid "copy `privateKey.pem` from the `integration-tests/oidc-tenancy` in the `main` Quarkus repository and use a test code similar to the one in the `Wiremock` section above to generate JWT tokens. You can use your own test keys if preferred."
msgstr "从 `main` Quarkus资源库中的 `integration-tests/oidc-tenancy` 中复制 `privateKey.pem` ，并使用类似于上面 `Wiremock` 部分的测试代码来生成JWT令牌。如果愿意，你可以使用你自己的测试密钥。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:672
msgid "This approach provides a more limited coverage compared to the Wiremock approach - for example, the remote communication code is not covered."
msgstr "与Wiremock方法相比，这种方法提供了更有限的覆盖范围--例如，远程通信代码没有被覆盖。"

#. type: Title ====
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:674
#, no-wrap
msgid "TestSecurity annotation"
msgstr "TestSecurity 注解"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:677
msgid "You can use `@TestSecurity` and `@OidcSecurity` annotations for testing the `service` application endpoint code which depends on the injected `JsonWebToken` as well as `UserInfo` and `OidcConfigurationMetadata`."
msgstr "你可以使用 `@TestSecurity` 和 `@OidcSecurity` 注解来测试 `service` 应用程序端点代码，该代码依赖于注入的 `JsonWebToken` 以及 `UserInfo` 和 `OidcConfigurationMetadata` 。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:679
msgid "Add the following dependency:"
msgstr "添加以下依赖关系："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:688
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-security-oidc</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:694
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-test-security-oidc\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:697
msgid "and write a test code like this one:"
msgstr "写一个测试代码如同下面这样的："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:711
#, no-wrap
msgid ""
"import static org.hamcrest.Matchers.is;\n"
"import org.junit.jupiter.api.Test;\n"
"import io.quarkus.test.common.http.TestHTTPEndpoint;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.security.TestSecurity;\n"
"import io.quarkus.test.security.oidc.Claim;\n"
"import io.quarkus.test.security.oidc.ConfigMetadata;\n"
"import io.quarkus.test.security.oidc.OidcSecurity;\n"
"import io.quarkus.test.security.oidc.OidcConfigurationMetadata;\n"
"import io.quarkus.test.security.oidc.UserInfo;\n"
"import io.restassured.RestAssured;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:715
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:796
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@TestHTTPEndpoint(ProtectedResource.class)\n"
"public class TestSecurityAuthTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:722
#, no-wrap
msgid ""
"    @Test\n"
"    @TestSecurity(user = \"userOidc\", roles = \"viewer\")\n"
"    public void testOidc() {\n"
"        RestAssured.when().get(\"test-security-oidc\").then()\n"
"                .body(is(\"userOidc:viewer\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:736
#, no-wrap
msgid ""
"    @Test\n"
"    @TestSecurity(user = \"userOidc\", roles = \"viewer\")\n"
"    @OidcSecurity(claims = {\n"
"            @Claim(key = \"email\", value = \"user@gmail.com\")\n"
"    }, userinfo = {\n"
"            @UserInfo(key = \"sub\", value = \"subject\")\n"
"    }, config = {\n"
"            @ConfigMetadata(key = \"issuer\", value = \"issuer\")\n"
"    })\n"
"    public void testOidcWithClaimsUserInfoAndMetadata() {\n"
"        RestAssured.when().get(\"test-security-oidc-claims-userinfo-metadata\").then()\n"
"                .body(is(\"userOidc:viewer:user@gmail.com:subject:issuer\"));\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:741
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:813
msgid "where `ProtectedResource` class may look like this:"
msgstr "其中 `ProtectedResource` 类可能看起来像这样："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:747
#, no-wrap
msgid ""
"import io.quarkus.oidc.OidcConfigurationMetadata;\n"
"import io.quarkus.oidc.UserInfo;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:751
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:822
#, no-wrap
msgid ""
"@Path(\"/service\")\n"
"@Authenticated\n"
"public class ProtectedResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:758
#, no-wrap
msgid ""
"    @Inject\n"
"    JsonWebToken accessToken;\n"
"    @Inject\n"
"    UserInfo userInfo;\n"
"    @Inject\n"
"    OidcConfigurationMetadata configMetadata;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:764
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"test-security-oidc\")\n"
"    public String testSecurityOidc() {\n"
"        return accessToken.getName() + \":\" + accessToken.getGroups().iterator().next();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:774
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"test-security-oidc-claims-userinfo-metadata\")\n"
"    public String testSecurityOidcWithClaimsUserInfoMetadata() {\n"
"        return accessToken.getName() + \":\" + accessToken.getGroups().iterator().next()\n"
"                + \":\" + accessToken.getClaim(\"email\")\n"
"                + \":\" + userInfo.getString(\"sub\")\n"
"                + \":\" + configMetadata.get(\"issuer\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:779
msgid "Note that `@TestSecurity` annotation must always be used and its `user` property is returned as `JsonWebToken.getName()` and `roles` property - as `JsonWebToken.getGroups()`.  `@OidcSecurity` annotation is optional and can be used to set the additional token claims, as well as `UserInfo` and `OidcConfigurationMetadata` properties.  Additionally, if `quarkus.oidc.token.issuer` property is configured then it will be used as an `OidcConfigurationMetadata` `issuer` property value."
msgstr "请注意，必须始终使用 `@TestSecurity` 注解，其 `user` 属性将作为 `JsonWebToken.getName()` 和 `roles` 属性-作为 `JsonWebToken.getGroups()` 。 `@OidcSecurity` 注解是可选的，可用于设置额外的标记要求，以及 `UserInfo` 和 `OidcConfigurationMetadata` 属性。此外，如果配置了 `quarkus.oidc.token.issuer` 属性，那么它将被用作 `OidcConfigurationMetadata` `issuer` 属性的值。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:781
msgid "If you work with the opaque tokens then you can test them as follows:"
msgstr "如果你用不透明的令牌，那么你可以按以下方式测试它们："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:792
#, no-wrap
msgid ""
"import static org.hamcrest.Matchers.is;\n"
"import org.junit.jupiter.api.Test;\n"
"import io.quarkus.test.common.http.TestHTTPEndpoint;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.security.TestSecurity;\n"
"import io.quarkus.test.security.oidc.OidcSecurity;\n"
"import io.quarkus.test.security.oidc.TokenIntrospection;\n"
"import io.restassured.RestAssured;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:808
#, no-wrap
msgid ""
"    @Test\n"
"    @TestSecurity(user = \"userOidc\", roles = \"viewer\")\n"
"    @OidcSecurity(introspectionRequired = true,\n"
"        introspection = {\n"
"            @TokenIntrospection(key = \"email\", value = \"user@gmail.com\")\n"
"        }\n"
"    )\n"
"    public void testOidcWithClaimsUserInfoAndMetadata() {\n"
"        RestAssured.when().get(\"test-security-oidc-claims-userinfo-metadata\").then()\n"
"                .body(is(\"userOidc:viewer:userOidc:viewer\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:818
#, no-wrap
msgid ""
"import io.quarkus.oidc.TokenIntrospection;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:827
#, no-wrap
msgid ""
"    @Inject\n"
"    SecurityIdentity securityIdentity;\n"
"    @Inject\n"
"    TokenIntrospection introspection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:837
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"test-security-oidc-opaque-token\")\n"
"    public String testSecurityOidcOpaqueToken() {\n"
"        return securityIdentity.getPrincipal().getName() + \":\" + securityIdentity.getRoles().iterator().next()\n"
"            + \":\" + introspection.getString(\"username\")\n"
"            + \":\" + introspection.getString(\"scope\")\n"
"            + \":\" + introspection.getString(\"email\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:840
msgid "Note that `@TestSecurity` `user` and `roles` attributes are available as `TokenIntrospection` `username` and `scope` properties and you can use `io.quarkus.test.security.oidc.TokenIntrospection` to add the additional introspection response properties such as an `email`, etc."
msgstr "请注意， `@TestSecurity` `user` 和 `roles` 属性可作为 `TokenIntrospection` `username` 和 `scope` 属性，你可以使用 `io.quarkus.test.security.oidc.TokenIntrospection` 来添加额外的自省响应属性，如 `email` ，等等。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:844
msgid "`@TestSecurity` and `@OidcSecurity` can be combined in a meta-annotation, for example like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:856
#, no-wrap
msgid ""
"    @Retention(RetentionPolicy.RUNTIME)\n"
"    @Target({ ElementType.METHOD })\n"
"    @TestSecurity(user = \"userOidc\", roles = \"viewer\")\n"
"    @OidcSecurity(introspectionRequired = true,\n"
"        introspection = {\n"
"            @TokenIntrospection(key = \"email\", value = \"user@gmail.com\")\n"
"        }\n"
"    )\n"
"    public @interface TestSecurityMetaAnnotation {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:858
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:861
msgid "This is particularly useful if the same set of security settings needs to be used in multiple test methods."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:863
#, no-wrap
msgid "How to check the errors in the logs"
msgstr "如何检查日志中的错误"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:866
msgid "Please enable `io.quarkus.oidc.runtime.OidcProvider` `TRACE` level logging to see more details about the token verification errors:"
msgstr "请启用 `io.quarkus.oidc.runtime.OidcProvider` `TRACE` 级日志，以查看有关令牌验证错误的更多细节："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:871
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcProvider\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcProvider\".min-level=TRACE\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:874
msgid "Please enable `io.quarkus.oidc.runtime.OidcRecorder` `TRACE` level logging to see more details about the OidcProvider client initialization errors:"
msgstr "请启用 `io.quarkus.oidc.runtime.OidcRecorder` `TRACE` 级日志，以查看关于OidcProvider客户端初始化错误的更多细节："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:879
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcRecorder\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcRecorder\".min-level=TRACE\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:881
#, no-wrap
msgid "External and Internal Access to OpenID Connect Provider"
msgstr "外部和内部访问OpenID Connect的提供者"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:884
msgid "Note that the OpenID Connect Provider externally accessible token and other endpoints may have different HTTP(S) URLs compared to the URLs auto-discovered or configured relative to `quarkus.oidc.auth-server-url` internal URL. For example, if your SPA acquires a token from an external token endpoint address and sends it to Quarkus as a bearer token then an issuer verification failure may be reported by the endpoint."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:887
msgid "In such cases, if you work with Keycloak then please start it with a `KEYCLOAK_FRONTEND_URL` system property set to the externally accessible base URL.  If you work with other Openid Connect providers then please check your provider's documentation."
msgstr "在这种情况下，如果你使用Keycloak，那么请用 `KEYCLOAK_FRONTEND_URL` 系统属性设置为外部可访问的基本URL来启动它。如果你使用其他Openid Connect提供商，那么请查看你的提供商的文档。"

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:888
#, no-wrap
msgid "How to use 'client-id' property"
msgstr "如何使用 `client-id` 属性"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:891
msgid "`quarkus.oidc.client-id` property identifies an OpenID Connect Client which requested the current bearer token. It can be an SPA application running in a browser or a Quarkus `web-app` confidential client application propagating the access token to the Quarkus `service` application."
msgstr "`quarkus.oidc.client-id` 属性标识请求当前持有者令牌的 OpenID Connect Client。它可以是在浏览器中运行的SPA应用程序，也可以是Quarkus `web-app` 机密客户端应用程序，将访问令牌传播到Quarkus `service` 的应用程序。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:894
msgid "This property is required if the `service` application is expected to introspect the tokens remotely - which is always the case for the opaque tokens.  This property is optional if the local Json Web Key token verification only is used."
msgstr "如果 `service` 应用程序被期望是远程自省令牌--对于不透明的令牌来说总是这样，那么这个属性是必需的。如果只使用本地Json Web Key令牌验证，那么该属性是可选的。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:896
msgid "Nonetheless, setting this property is encouraged even if the endpoint does not require access to the remote introspection endpoint. The reasons behind it that `client-id`, if set, can be used to verify the token audience and will also be included in the logs when the token verification fails for the better traceability of the tokens issued to specific clients to be analyzed over a longer period of time."
msgstr "尽管如此，即使端点不需要访问远程自省端点，也鼓励设置该属性。其背后的原因是： `client-id` ，如果设置了这个属性，就可以用来验证令牌受众，当令牌验证失败时，也会包含在日志中，以便更好地追踪发放给特定客户的令牌，并在较长的时间内进行分析。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:898
msgid "For example, if your OpenID Connect provider sets a token audience then the following configuration pattern is recommended:"
msgstr "例如，如果你的OpenID Connect提供商设置了一个令牌受众，那么建议采用以下配置模式："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:905
#, no-wrap
msgid ""
"# Set client-id\n"
"quarkus.oidc.client-id=quarkus-app\n"
"# Token audience claim must contain 'quarkus-app'\n"
"quarkus.oidc.token.audience=${quarkus.oidc.client-id}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:908
msgid "If you set `quarkus.oidc.client-id` but your endpoint does not require remote access to one of OpenID Connect Provider endpoints (introspection, token acquisition, etc.) then do not set a client secret with the `quarkus.oidc.credentials` or similar properties as it will not be used."
msgstr "如果你设置了 `quarkus.oidc.client-id` ，但你的端点不需要远程访问OpenID Connect提供者的一个端点（自省、令牌获取等），那么就不要设置带有 `quarkus.oidc.credentials` 或类似属性的客户秘钥，因为它不会被使用。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:910
msgid "Note Quarkus `web-app` applications always require `quarkus.oidc.client-id` property."
msgstr "注意Quarkus `web-app` 应用程序总是需要 `quarkus.oidc.client-id` 属性。"

#. type: Title ==
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:911
#, no-wrap
msgid "References"
msgstr "参考文献"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:914
msgid "xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:915
msgid "xref:security-oidc-bearer-token-authentication-tutorial.adoc[Protect a service application by using OIDC Bearer authentication]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:916
msgid "xref:security-protect-service-applications-by-using-oidc-bearer-authentication-how-to.adoc[Protect service applications by using OIDC Bearer authentication]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:917
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:918
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:919
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:920
msgid "xref:security-openid-connect-client-reference.adoc[OpenID Connect and OAuth2 Client and Filters Reference Guide]"
msgstr "link:security-openid-connect-client.html[Quarkus - 使用OpenID Connect，OAuth2客户端和过滤器的参考指南]"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:921
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:922
msgid "xref:security-jwt-build.adoc[Sign and encrypt JWT tokens with SmallRye JWT Build]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:923
msgid "xref:security-authentication-mechanisms-concept.adoc#oidc-jwt-oauth2-comparison[Choosing between OpenID Connect, SmallRye JWT, and OAuth2 authentication mechanisms]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:924
msgid "xref:security-authentication-mechanisms-concept.adoc#combining-authentication-mechanisms[Combining authentication mechanisms]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:925
msgid "xref:security-overview-concept.adoc[Quarkus Security overview]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-bearer-authentication-concept.adoc:925
msgid "xref:security-keycloak-admin-client.adoc[Quarkus Keycloak Admin Client]"
msgstr ""
