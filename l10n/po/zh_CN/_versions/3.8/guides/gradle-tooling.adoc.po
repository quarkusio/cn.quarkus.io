msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Quarkus and Gradle"
msgstr "Quarkus 和 Gradle"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Use Gradle to create a new project, add or remove extensions, launch development mode, debug your application, and build your application into a jar, native executable, or container-friendly executable. Import your project into your favorite IDE using Gradle project metadata."
msgstr "使用 Gradle 创建新项目、添加或删除扩展、启动开发模式、调试程序，并将应用程序构建为 jar、本地可执行文件或容器友好型可执行文件。使用 Gradle 项目元数据将项目导入到你最喜欢的集成开发环境中。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Creating a new project"
msgstr "创建新项目"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "To scaffold a Gradle project you can either use the xref:cli-tooling.adoc[Quarkus CLI] or the Quarkus Maven plugin:"
msgstr "要为 Gradle 项目搭建脚手架，可以使用 xref:cli-tooling.adoc[Quarkus CLI] 或 Quarkus Maven 插件："

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "CLI"
msgstr "CLI"

#: _versions/3.8/guides/gradle-tooling.adoc
msgid "_For more information about how to install the Quarkus CLI and use it, please refer to xref:cli-tooling.adoc[the Quarkus CLI guide]._"
msgstr "_关于如何安装并使用Quarkus CLI的更多信息，请参考xref:cli-tooling.adoc[Quarkus CLI指南]。_"

#: _versions/3.8/guides/gradle-tooling.adoc
msgid "Maven"
msgstr "Maven"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"If you just launch `mvn {quarkus-platform-groupid}:quarkus-maven-plugin:{quarkus-version}:create` the Maven plugin asks\n"
"for user inputs. You can disable this interactive mode (and use default values) by passing `-B` to the Maven command."
msgstr "如果只启动 `mvn {quarkus-platform-groupid}:quarkus-maven-plugin:{quarkus-version}:create` ，Maven 插件会要求用户输入信息。您可以通过向 Maven 命令传递 `-B` 来禁用这种交互模式（并使用默认值）。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "If you prefer using the Kotlin DSL, use `gradle-kotlin-dsl` instead of `gradle`."
msgstr "如果您更喜欢使用 Kotlin DSL，请使用 `gradle-kotlin-dsl` 而不是 `gradle` 。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Quarkus project scaffolding automatically installs the Gradle wrapper (`./gradlew`) in your project."
msgstr "Quarkus 项目脚手架会自动在项目中安装 Gradle 封装程序（ `./gradlew` ）。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "If you prefer to use a standalone Gradle installation, please use Gradle {gradle-version}."
msgstr "如果希望使用独立的 Gradle 安装，请使用 Gradle {gradle-version}。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "The project is generated in a directory named after the passed artifactId."
msgstr "项目会在一个以传递的 artifactId 命名的目录中生成。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"A pair of Dockerfiles for native and JVM modes are also generated in `src/main/docker`.\n"
"Instructions to build the image and run the container are written in those Dockerfiles."
msgstr "`src/main/docker` 中还生成了一对用于本地模式和 JVM 模式的 Dockerfile。构建镜像和运行容器的说明就写在这些 Dockerfile 中。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Custom test configuration profile in JVM mode"
msgstr "JVM 模式下的自定义测试配置文件"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"By default, Quarkus tests in JVM mode are run using the `test` configuration profile. If you are not familiar with Quarkus\n"
"configuration profiles, everything you need to know is explained in the\n"
"xref:config-reference.adoc#profiles[Configuration Profiles Documentation]."
msgstr "默认情况下，JVM 模式下的 Quarkus 测试使用 `test` 配置文件运行。如果你对 Quarkus 配置文件不熟悉， xref:config-reference.adoc#profiles[配置文件文档] 中会对你需要了解的一切进行解释。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"It is however possible to use a custom configuration profile for your tests with the Gradle build configuration shown below.\n"
"This can be useful if you need for example to run some tests using a specific database which is not your default testing\n"
"database."
msgstr "不过，您也可以通过下图所示的 Gradle 构建配置，为测试使用自定义配置文件。举例来说，如果你需要使用一个特定的数据库来运行某些测试，而这个数据库又不是默认的测试数据库，那么这个配置文件就非常有用了。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Groovy DSL"
msgstr "Groovy DSL"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "The `foo` configuration profile will be used to run the tests."
msgstr "`foo` 配置文件将用于运行测试。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Kotlin DSL"
msgstr "Kotlin DSL"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"It is not possible to use a custom test configuration profile in native mode for now. Native tests are always run using the\n"
"`prod` profile."
msgstr "目前还不能在本地模式下使用自定义测试配置文件。本地测试始终使用 `prod` 配置文件运行。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Dealing with extensions"
msgstr "处理延期"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "From inside a Quarkus project, you can obtain a list of the available extensions with:"
msgstr "在 Quarkus 项目中，您可以通过以下方式获取可用扩展的列表："

#: _versions/3.8/guides/gradle-tooling.adoc
msgid "Gradle"
msgstr "Gradle"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "You can enable an extension using:"
msgstr "您可以使用"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Extensions are passed using a comma-separated list."
msgstr "扩展名用逗号分隔的列表传递。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"The extension name is the GAV name of the extension: e.g. `io.quarkus:quarkus-agroal`.\n"
"But you can pass a partial name and Quarkus will do its best to find the right extension.\n"
"For example, `agroal`, `Agroal` or `agro`  will expand to `io.quarkus:quarkus-agroal`.\n"
"If no extension is found or if more than one extensions match, you will see a red check mark  ❌ in the command result."
msgstr "扩展名是扩展名的 GAV 名称：例如 `io.quarkus:quarkus-agroal` 。但你也可以输入部分名称，Quarkus 会尽力找到正确的扩展名。例如， `agroal` 、 `Agroal` 或 `agro` 将扩展为 `io.quarkus:quarkus-agroal` 。如果未找到扩展名或有多个扩展名匹配，则会在命令结果中看到一个红色的复选标记❌。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "You can install all extensions which match a globbing pattern:"
msgstr "您可以安装与套选模式匹配的所有扩展："

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Development mode"
msgstr "开发模式"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"Quarkus comes with a built-in development mode.\n"
"You can start it with:"
msgstr "Quarkus 自带开发模式。你可以用以下命令启动它"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"Note that if you run it this way the continuous testing experience will not be as nice, as gradle runs as a daemon\n"
"Quarkus can't draw the 'pretty' test output so falls back to just logging the output."
msgstr "需要注意的是，如果以这种方式运行，持续测试的体验将不会那么好，因为 gradle 是作为守护进程运行的，Quarkus 无法绘制 \"漂亮 \"的测试输出，因此只能记录输出。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"You can then update the application sources, resources and configurations.\n"
"The changes are automatically reflected in your running application.\n"
"This is great to do development spanning UI and database as you see changes reflected immediately."
msgstr "然后，您就可以更新应用程序源、资源和配置。这些更改会自动反映到正在运行的应用程序中。这对于跨用户界面和数据库的开发来说非常有用，因为您可以立即看到变化的反映。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"`quarkusDev` enables hot deployment with background compilation, which means that when you modify\n"
"your Java files or your resource files and refresh your browser these changes will automatically take effect.\n"
"This works too for resource files like the configuration property file.\n"
"The act of refreshing the browser triggers a scan of the workspace, and if any changes are detected the\n"
"Java files are compiled, and the application is redeployed, then your request is serviced by the\n"
"redeployed application. If there are any issues with compilation or deployment an error page will let you know."
msgstr "`quarkusDev` 可通过后台编译实现热部署，这意味着当您修改 Java 文件或资源文件并刷新浏览器时，这些更改将自动生效。这也适用于配置属性文件等资源文件。刷新浏览器会触发对工作区的扫描，如果检测到任何更改，就会对 Java 文件进行编译，并重新部署应用程序，然后由重新部署的应用程序为您的请求提供服务。如果编译或部署过程中出现任何问题，错误页面会通知您。"

#: _versions/3.8/guides/gradle-tooling.adoc
msgid "Hit `CTRL+C` to stop the application."
msgstr "使用 `CTRL+C` 来停止应用程序。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "You can change the working directory the development environment runs on:"
msgstr "您可以更改开发环境运行的工作目录："

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "By default, the `quarkusDev` task uses `compileJava` compiler options. These can be overridden by setting the `compilerArgs` property in the task."
msgstr "默认情况下， `quarkusDev` 任务使用 `compileJava` 编译器选项。可以通过在任务中设置 `compilerArgs` 属性来覆盖这些选项。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "By default, `quarkusDev` sets the debug host to `localhost` (for security reasons). If you need to change this, for example to enable debugging on all hosts, you can use the `-DdebugHost` option like so:"
msgstr "默认情况下， `quarkusDev` 将调试主机设置为 `localhost` （出于安全考虑）。如果需要更改，例如在所有主机上启用调试，可以使用 `-DdebugHost` 选项，如下所示："

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "You also can add environment variables to the development environment:"
msgstr "您还可以在开发环境中添加环境变量："

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"The plugin also exposes a `quarkusDev` configuration. Using this configuration to declare a dependency will restrict the usage of that dependency to development mode.\n"
"The `quarkusDev` configuration can be used as following:"
msgstr "该插件还提供 `quarkusDev` 配置。使用该配置声明依赖关系将限制该依赖关系在开发模式下的使用。 `quarkusDev` 配置的使用方法如下："

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Remote Development Mode"
msgstr "远程开发模式"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"It is possible to use development mode remotely, so that you can run Quarkus in a container environment (such as OpenShift)\n"
"and have changes made to your local files become immediately visible."
msgstr "您可以远程使用开发模式，这样就可以在容器环境（如 OpenShift）中运行 Quarkus，并立即看到对本地文件所做的更改。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "This allows you to develop in the same environment you will actually run your app in, and with access to the same services."
msgstr "这样，您就可以在与实际运行应用程序相同的环境中进行开发，并访问相同的服务。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Do not use this in production. This should only be used in a development environment. You should not run production applications in dev mode."
msgstr "请勿在生产环境中使用。只能在开发环境中使用。不应在开发模式下运行生产应用程序。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "To do this you must build a mutable application, using the `mutable-jar` format. Set the following properties in `application.properties`:"
msgstr "为此，您必须使用 `mutable-jar` 格式创建一个可变应用程序。在 `application.properties` 中设置以下属性"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"This tells Quarkus to use the mutable-jar format. Mutable applications also include the deployment time parts of Quarkus,\n"
"so they take up a bit more disk space. If run normally they start just as fast and use the same memory as an immutable application,\n"
"however they can also be started in dev mode."
msgstr "这样，Quarkus 就会使用可变 jar 格式。可变应用程序还包括 Quarkus 的部署时间部分，因此会占用更多磁盘空间。如果正常运行，它们的启动速度和内存使用量与不可变应用程序相同，但它们也可以在开发模式下启动。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "The password that is used to secure communication between the remote side and the local side."
msgstr "用于确保远程端和本地端之间通信安全的密码。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"The URL that your app is going to be running in dev mode at. This is only needed on the local side, so you\n"
"may want to leave it out of the properties file and specify it as a system property on the command line."
msgstr "应用程序将在开发模式下运行的 URL。只有本地端需要使用该 URL，因此您可以不在属性文件中指定该 URL，而是在命令行中将其指定为系统属性。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "The `mutable-jar` is then built in the same way that a regular Quarkus jar is built, i.e. by issuing:"
msgstr "`mutable-jar` 的构建方式与普通 Quarkus jar 的构建方式相同，即发布："

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"Before you start Quarkus on the remote host set the environment variable `QUARKUS_LAUNCH_DEVMODE=true`. If you are\n"
"on bare metal you can set it via the `export QUARKUS_LAUNCH_DEVMODE=true` command and then run the application with the proper `java -jar ...` command to run the application."
msgstr "在远程主机上启动 Quarkus 之前，请设置环境变量 `QUARKUS_LAUNCH_DEVMODE=true` 。如果是裸机，可以通过 `export QUARKUS_LAUNCH_DEVMODE=true` 命令进行设置，然后使用适当的 `java -jar …​` 命令运行应用程序。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"If you plan on running the application via Docker, then you'll need to add `-e QUARKUS_LAUNCH_DEVMODE=true` to the `docker run` command.\n"
"When the application starts you should now see the following line in the logs: `Profile dev activated. Live Coding activated`."
msgstr "如果计划通过 Docker 运行应用程序，则需要在 `docker run` 命令中添加 `-e QUARKUS_LAUNCH_DEVMODE=true` 。应用程序启动后，您应该会在日志中看到以下一行： `Profile dev activated. Live Coding activated` ."

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"The remote side does not need to include Maven or any other development tools. The normal `fast-jar` Dockerfile\n"
"that is generated with a new Quarkus application is all you need. If you are using bare metal launch the Quarkus runner\n"
"jar, do not attempt to run normal dev mode."
msgstr "远程端不需要包含 Maven 或任何其他开发工具。你只需使用新 Quarkus 应用程序生成的普通 `fast-jar` Dockerfile 即可。如果使用裸机启动 Quarkus 运行器 jar，请不要尝试运行正常的开发模式。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Now you need to connect your local agent to the remote host, using the `remote-dev` command:"
msgstr "现在，您需要使用 `remote-dev` 命令将本地代理连接到远程主机："

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"Now every time you refresh the browser you should see any changes you have made locally immediately visible in the remote\n"
"app."
msgstr "现在，每次刷新浏览器时，都能看到本地所做的任何更改在远程应用程序中立即可见。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "All the config options are shown below:"
msgstr "所有配置选项如下所示："

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Debugging"
msgstr "调试"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "In development mode, Quarkus starts by default with debug mode enabled, listening to port `5005` without suspending the JVM."
msgstr "在开发模式下，Quarkus 启动时默认启用调试模式，监听端口 `5005` ，而不会暂停 JVM。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "This behavior can be changed by giving the `debug` system property one of the following values:"
msgstr "可以通过赋予 `debug` 系统属性下列值之一来改变这种行为："

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "`false` - the JVM will start with debug mode disabled"
msgstr "`false` - JVM 启动时将禁用调试模式"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "`true` - The JVM is started in debug mode and will be listening on port `5005`"
msgstr "`true` - JVM 会以调试模式启动，并在端口 `5005`"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "`client` - the JVM will start in client mode and attempt to connect to `localhost:5005`"
msgstr "`client` - JVM 将以客户端模式启动，并尝试连接到 `localhost:5005`"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "`{port}` - The JVM is started in debug mode and will be listening on `{port}`"
msgstr "`{port}` - JVM 会以调试模式启动，并监听 `{port}`"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "An additional system property `suspend` can be used to suspend the JVM, when launched in debug mode. `suspend` supports the following values:"
msgstr "`suspend` `suspend` 支持以下值："

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "`y` or `true` - The debug mode JVM launch is suspended"
msgstr "`y` 或 - 调试模式下的 JVM 启动暂停 `true` "

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "`n` or `false` - The debug mode JVM is started without suspending"
msgstr "`n` 或 - 启动调试模式 JVM 时不暂停 `false` "

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "You can also run a Quarkus application in debug mode with a suspended JVM using:"
msgstr "您还可以在调试模式下使用暂停的 JVM 运行 Quarkus 应用程序："

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Then, attach your debugger to `localhost:5005`."
msgstr "然后，将调试器连接到 `localhost:5005` 。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Import in your IDE"
msgstr "在集成开发环境中导入"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"Once you have a <<project-creation,project generated>>, you can import it in your favorite IDE.\n"
"The only requirement is the ability to import a Gradle project."
msgstr "xref:project-creation[生成项目] 后，就可以将其导入到自己喜欢的集成开发环境中。唯一的要求是能导入 Gradle 项目。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "**Eclipse**"
msgstr "*日蚀*"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"In Eclipse, click on: `File -> Import`.\n"
"In the wizard, select: `Gradle -> Existing Gradle Project`.\n"
"On the next screen, select the root location of the project.\n"
"The next screen list the found modules; select the generated project and click on `Finish`. Done!"
msgstr "在 Eclipse 中，单击： `File → Import` 。在向导中，选择： `Gradle → Existing Gradle Project` 。在下一个屏幕中，选择项目的根位置。下一个屏幕将列出找到的模块；选择生成的项目并点击 `Finish` 。完成！"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "In a separated terminal, run:"
msgstr "在分隔的终端中，运行"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "and enjoy a highly productive environment."
msgstr "并享受高效的工作环境。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "**IntelliJ IDEA**"
msgstr "*IntelliJ IDEA*"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "In IntelliJ IDEA:"
msgstr "在 IntelliJ IDEA 中："

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "From inside IntelliJ IDEA select `File -> New -> Project From Existing Sources...` or, if you are on the welcome dialog, select `Import project`."
msgstr "从 IntelliJ IDEA 内部选择 `File → New → Project From Existing Sources…​` ，或者，如果您在欢迎对话框中，选择 `Import project` 。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Select the project root"
msgstr "选择项目根目录"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Select `Import project from external model` and `Gradle`"
msgstr "选择 `Import project from external model` 和 `Gradle`"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Next a few times (review the different options if needed)"
msgstr "下几步（必要时查看不同的选项）"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "On the last screen click on Finish"
msgstr "在最后一个屏幕点击完成"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "In a separated terminal or in the embedded terminal, run:"
msgstr "在分隔终端或嵌入式终端中，运行"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Enjoy!"
msgstr "请慢用"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "**Apache NetBeans**"
msgstr "*Apache NetBeans*"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "In NetBeans:"
msgstr "在 NetBeans："

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Select `File -> Open Project`"
msgstr "选择 `File → Open Project`"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Click on `Open Project`"
msgstr "点击 `Open Project`"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "In a separated terminal or the embedded terminal, go to the project root and run:"
msgstr "在独立终端或嵌入式终端中，进入项目根目录并运行："

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "**Visual Studio Code**"
msgstr "*Visual Studio 代码*"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Open the project directory in VS Code. If you have installed the Java Extension Pack (grouping a set of Java extensions), the project is loaded as a Gradle project."
msgstr "在 VS Code 中打开项目目录。如果安装了 Java 扩展包（一组 Java 扩展），项目将作为 Gradle 项目加载。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Downloading dependencies for offline development and testing"
msgstr "下载依赖项以进行离线开发和测试"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"Quarkus extension dependencies are divided into the runtime extension dependencies that end up on the application runtime\n"
"classpath and the deployment (or build time) extension dependencies that are resolved by Quarkus only at application build time to create\n"
"the build classpath. Application developers are expected to express dependencies only on the runtime artifacts of Quarkus extensions."
msgstr "Quarkus 扩展依赖关系分为运行时扩展依赖关系和部署（或构建时）扩展依赖关系，前者最终会出现在应用程序的运行时类路径上，而后者仅在应用程序构建时由 Quarkus 解决，以创建构建类路径。应用程序开发人员应仅表达对 Quarkus 扩展运行时工件的依赖。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "To enable the use-case of building and testing a Quarkus application offline, the plugin includes the `quarkusGoOffline` task that could be called from the command line like this:"
msgstr "为了实现离线构建和测试 Quarkus 应用程序，该插件包含 `quarkusGoOffline` 任务，可以像这样从命令行调用："

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"This task will resolve all the runtime, build time, test and dev mode dependencies of the application to the Gradle cache.\n"
"Once executed, you will be able to safely run quarkus task with `--offline` flag."
msgstr "该任务会将应用程序的所有运行时、构建时、测试和开发模式依赖项解析到 Gradle 缓存中。执行后，您就可以使用 `--offline` 标志安全地运行 quarkus 任务了。"

#: _versions/3.8/guides/gradle-tooling.adoc
msgid "Building a native executable"
msgstr "构建一个本地可执行文件"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Native executables make Quarkus applications ideal for containers and serverless workloads."
msgstr "本地可执行文件使 Quarkus 应用程序成为容器和无服务器工作负载的理想选择。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Make sure to have `GRAALVM_HOME` configured and pointing to the latest release of GraalVM {graalvm-version}."
msgstr "确保 `GRAALVM_HOME` 已配置并指向最新发布的 GraalVM {graalvm-版本}。"

#: _versions/3.8/guides/gradle-tooling.adoc
msgid "Create a native executable using:"
msgstr "使用以下方法创建一个原生可执行文件："

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "A native executable will be present in `build/`."
msgstr "本地可执行文件将出现在 `build/` ."

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"Native related properties can either be added in `application.properties` file, as command line arguments or in the `quarkusBuild` task.\n"
"Configuring the `quarkusBuild` task can be done as following:"
msgstr "与本地相关的属性可作为命令行参数添加到 `application.properties` 文件或 `quarkusBuild` 任务中。配置 `quarkusBuild` 任务的方法如下："

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Set `quarkus.native.container-build` property to `true`"
msgstr "将 `quarkus.native.container-build` 属性设置为 `true`"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Set `quarkus.native.builder-image` property to `quay.io/quarkus/ubi-quarkus-mandrel-builder-image:{mandrel-flavor}`"
msgstr "将 `quarkus.native.builder-image` 属性设置为 `quay.io/quarkus/ubi-quarkus-mandrel-builder-image:{mandrel-flavor}`"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"When using the Gradle Groovy DSL, property keys must follow lower camel case notation.\n"
"e.g. `container-build` is not valid, and should be replaced by `containerBuild`.\n"
"This limitation does not apply to the Gradle Kotlin DSL."
msgstr "使用 Gradle Groovy DSL 时，属性键必须使用小写驼峰符号。例如， `container-build` 无效，应替换为 `containerBuild` 。这一限制不适用于 Gradle Kotlin DSL。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Build a container friendly executable"
msgstr "构建容器友好型可执行文件"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"The native executable will be specific to your operating system.\n"
"To create an executable that will run in a container, use the following:"
msgstr "本地可执行文件将与操作系统相关。要创建可在容器中运行的可执行文件，请使用以下命令："

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"The produced executable will be a 64-bit Linux executable, so depending on your operating system it may no longer be runnable.\n"
"However, it's not an issue as we are going to copy it to a Docker container.\n"
"Note that in this case the build itself runs in a Docker container too, so you don't need to have GraalVM installed locally."
msgstr "生成的可执行文件将是一个 64 位 Linux 可执行文件，因此根据操作系统的不同，可能无法继续运行。不过，这不是问题，因为我们将把它复制到 Docker 容器中。请注意，在这种情况下，构建本身也会在 Docker 容器中运行，因此您无需在本地安装 GraalVM。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "By default, the native executable will be generated using the `quay.io/quarkus/ubi-quarkus-mandrel-builder-image:{mandrel-flavor}` Docker image."
msgstr "默认情况下，本地可执行文件将使用 `quay.io/quarkus/ubi-quarkus-mandrel-builder-image:{mandrel-flavor}` Docker 镜像生成。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"If you want to build a native executable with a different Docker image (for instance to use a different GraalVM version),\n"
"use the `-Dquarkus.native.builder-image=<image name>` build argument."
msgstr "如果要使用不同的 Docker 映像构建本地可执行文件（例如使用不同的 GraalVM 版本），请使用 `-Dquarkus.native.builder-image=<image name>` build 参数。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"The list of the available Docker images can be found on https://quay.io/repository/quarkus/ubi-quarkus-mandrel-builder-image?tab=tags[quay.io].\n"
"Be aware that a given Quarkus version might not be compatible with all the images available."
msgstr "可用的 Docker 映像列表可在 link:https://quay.io/repository/quarkus/ubi-quarkus-mandrel-builder-image?tab=tags[quay.io] 上找到。请注意，特定的 Quarkus 版本可能无法兼容所有可用的映像。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Running native tests"
msgstr "运行本地测试"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Run the native tests using:"
msgstr "使用"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "This task depends on `quarkusBuild`, so it will generate the native image before running the tests."
msgstr "该任务依赖于 `quarkusBuild` ，因此会在运行测试前生成本地图像。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "By default, the `native-test` source set is based on `main` and `test` source sets. It is possible to add an extra source set. For example, if your integration tests are located in an `integrationTest` source set, you can specify it as:"
msgstr "默认情况下， `native-test` 源集基于 `main` 和 `test` 源集。您可以添加额外的源代码集。例如，如果集成测试位于 `integrationTest` 源集中，则可将其指定为："

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Running integration tests"
msgstr "运行集成测试"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"Quarkus integration tests (annotated with `@QuarkusIntegrationTest`) will run on the artifact produced by Quarkus.\n"
"Those tests can be placed in a `src/integrationTest/java` directory and executed using:"
msgstr "Quarkus 集成测试（注释为 `@QuarkusIntegrationTest` ）将在 Quarkus 生成的工件上运行。这些测试可以放置在 `src/integrationTest/java` 目录中，并通过以下方式执行："

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "This task depends on both `test` and `quarkusBuild` tasks. The final artifact will be produced before running tests."
msgstr "这项任务依赖于 `test` 和 `quarkusBuild` 两项任务。最终成果将在运行测试前生成。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Using fast-jar"
msgstr "使用快速密封罐"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "`fast-jar` is now the default quarkus package type. The result of `./gradlew build` command is a new directory under `build` named `quarkus-app`."
msgstr "`fast-jar` 现在是默认的 quarkus 软件包类型。 命令的结果是在 下新建一个名为 的目录。 `./gradlew build` `build` `quarkus-app`"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "You can run the application using: `java -jar build/quarkus-app/quarkus-run.jar`."
msgstr "您可以使用以下方式运行应用程序： `java -jar build/quarkus-app/quarkus-run.jar` 。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"In order to successfully run the produced jar, you need to have the entire contents of the `quarkus-app` directory. If any of the files are missing, the application will not start or\n"
"might not function correctly."
msgstr "为了成功运行生成的 jar，您需要拥有 `quarkus-app` 目录中的全部内容。如果缺少任何文件，应用程序将无法启动或无法正常运行。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"The `fast-jar` packaging results in creating an artifact that starts a little faster and consumes slightly less memory than a legacy Quarkus jar\n"
"because it has indexed information about which dependency jar contains classes and resources. It can thus avoid the lookup into potentially every jar\n"
"on the classpath that the legacy jar necessitates, when loading a class or resource."
msgstr "`fast-jar` 打包的结果是，与传统的 Quarkus jar 相比，它的启动速度更快一些，消耗的内存也更少一些，因为它拥有关于哪个依赖 jar 包含类和资源的索引信息。因此，在加载类或资源时，它可以避免传统 jar 在类路径上可能需要查找的所有 jar。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Building Uber-Jars"
msgstr "建造 Uber-Jars"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Quarkus Gradle plugin supports the generation of Uber-Jars by specifying a `quarkus.package.type` argument as follows:"
msgstr "Quarkus Gradle 插件支持 Uber-Jar 的生成，具体方法如下：指定 `quarkus.package.type` 参数："

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "When building an Uber-Jar you can specify entries that you want to exclude from the generated jar by using the `--ignored-entry` argument:"
msgstr "在创建 Uber-Jar 时，您可以使用 `--ignored-entry` 参数指定要从生成的 jar 中排除的条目："

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "The entries are relative to the root of the generated Uber-Jar. You can specify multiple entries by adding extra `--ignored-entry` arguments."
msgstr "条目相对于生成的 Uber-Jar 根目录。您可以通过添加额外的 `--ignored-entry` 参数来指定多个条目。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Working with multi-module projects"
msgstr "使用多模块项目"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "By default, Quarkus will not discover CDI beans inside another module."
msgstr "默认情况下，Quarkus 不会发现其他模块内的 CDI Bean。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"The best way to enable CDI bean discovery for a module in a multi-module project would be to include a `META-INF/beans.xml` file,\n"
"unless it is the main application module already configured with the quarkus-maven-plugin, in which case it will be indexed automatically."
msgstr "为多模块项目中的模块启用 CDI Bean 发现功能的最佳方法是包含一个 `META-INF/beans.xml` 文件，除非它是已经用 quarkus-maven-plugin 配置好的主应用模块，在这种情况下，它将被自动索引。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Alternatively, there is some unofficial link:https://plugins.gradle.org/search?term=jandex[Gradle Jandex plugins] that can be used instead of the `META-INF/beans.xml` file."
msgstr "另外，也可以使用一些非官方的 link:https://plugins.gradle.org/search?term=jandex[Gradle Jandex 插件] 来代替 `META-INF/beans.xml` 文件。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "More information on this topic can be found on the xref:cdi-reference.adoc#bean_discovery[Bean Discovery] section of the CDI guide."
msgstr "有关此主题的更多信息，请参阅 CDI 指南中的 \" xref:cdi-reference.adoc#bean_discovery[豆子发现] \"部分。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Publishing your application"
msgstr "发布您的申请"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"In order to make sure the right dependency versions are being used by Gradle, the BOM is declared as an `enforcedPlatform` in your build file.\n"
"By default, the `maven-publish` plugin will prevent you from publishing your application due to this `enforcedPlatform`.\n"
"This validation can be skipped by adding the following configuration in your build file:"
msgstr "为了确保 Gradle 使用正确的依赖版本，BOM 会在构建文件中声明为 `enforcedPlatform` 。默认情况下， `maven-publish` 插件会阻止你发布应用程序，因为 `enforcedPlatform` 。通过在构建文件中添加以下配置，可以跳过此验证："

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Configuring Quarkus builds"
msgstr "配置 Quarkus 构建"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"There are multiple configuration sources that influence Quarkus builds, mentioned in the order of their priority.\n"
"The Quarkus build uses the `prod` configuration profile:"
msgstr "有多个配置源会影响 Quarkus 的构建，按优先级顺序排列。夸克构建使用 `prod` 配置文件："

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "System properties (for example `./gradlew -Dquarkus.package.type=fast-jar ...`)"
msgstr "系统属性（例如 `./gradlew -Dquarkus.package.type=fast-jar …​` )"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "System environment (for example `QUARKUS_PACKAGE_TYPE=fast-jar ./gradlew ...`)"
msgstr "系统环境（例如 `QUARKUS_PACKAGE_TYPE=fast-jar ./gradlew …​` )"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Configuration via the `quarkus` extensions's `quarkusBuildProperties` For example:"
msgstr "通过 `quarkus` extensions 的 `quarkusBuildProperties` 进行配置："

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"quarkus {\n"
"    quarkusBuildProperties {\n"
"        set(\"package.type\", \"uber-jar\")\n"
"    }\n"
"}"
msgstr "quarkus { quarkusBuildProperties { set(\"package.type\", \"uber-jar\") }}"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Configuration via Gradle project properties (for example `./gradlew -Pquarkus.package.type=fast-jar`)"
msgstr "通过 Gradle 项目属性进行配置（例如 `./gradlew -Pquarkus.package.type=fast-jar` )"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"Configuration from a project's `application.properties`, `application.yaml` and `application.yml` files, as well\n"
"as a project's `application-prod.properties`, `application-prod.yaml` and `application-prod.yml` files"
msgstr "来自项目 `application.properties` 、 `application.yaml` 和 `application.yml` 文件的配置，以及来自项目 `application-prod.properties` 、 `application-prod.yaml` 和 `application-prod.yml` 文件的配置"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"The above priorities have changed in Quarkus plugin starting with 3.0. Older versions of the Quarkus Gradle plugin\n"
"preferred `application.properties` over settings in the Gradle build."
msgstr "Quarkus 插件从 3.0 开始改变了上述优先级。旧版本的 Quarkus Gradle 插件首选 `application.properties` ，而不是 Gradle 构建中的设置。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"The Quarkus Gradle plugin uses the \"standard\" Quarkus mechanisms to load and parse configurations. Support for\n"
"`application.(yaml|yml)` has been added in Quarkus 3.0 in addition to `application.properties`. Also new in 3.0\n"
"is that all mechanisms available via SmallRye Config, are implicitly also now available for the Quarkus Gradle\n"
"plugin."
msgstr "Quarkus Gradle 插件使用 \"标准 \"Quarkus 机制来加载和解析配置。除了 `application.properties` 之外，Quarkus 3.0 还添加了对 `application.(yaml|yml)` 的支持。3.0 中的新功能还包括：所有通过 SmallRye Config 提供的机制，现在也隐含地适用于 Quarkus Gradle 插件。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"Use the `quarkusShowEffectiveConfig` task to show the effective configuration options used for a Quarkus build. If you\n"
"specify the `--save-config-properties` command line option, the configuration properties are also store in the file\n"
"`build/<final-name>.quarkus-build.properties`."
msgstr "使用 `quarkusShowEffectiveConfig` 任务可显示用于 Quarkus 构建的有效配置选项。如果指定 `--save-config-properties` 命令行选项，配置属性也会存储在文件 `build/<final-name>.quarkus-build.properties` 中。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Gradle caching / task inputs"
msgstr "Gradle 缓存/任务输入"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"By default, system properties starting with `quarkus.` and environment variables, including those from `~/.env`,\n"
"starting  with `QUARKUS_`, are considered as inputs for the Gradle tasks. This means that only changes to those system\n"
"properties or environment variables will cause Gradle's up-to-date to trigger a rebuild. Changes to other system\n"
"properties or environment variables do not change Quarkus' Gradle task inputs and do not trigger an unnecessary rebuild."
msgstr "默认情况下，以 `quarkus.` 开头的系统属性和以 `QUARKUS_` 开头的环境变量（包括来自 `~/.env` 的环境变量）都被视为 Gradle 任务的输入。这意味着，只有这些系统属性或环境变量的改变才会导致 Gradle 的更新触发重建。其他系统属性或环境变量的更改不会改变 Quarkus 的 Gradle 任务输入，也不会触发不必要的重建。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"Configuration properties specified via `quarkus.quarkusBuildProperties` or via the Quarkus `application.*`\n"
"configuration files are all considered as Gradle task inputs, in other words: every change in these files causes\n"
"a rebuild."
msgstr "通过 `quarkus.quarkusBuildProperties` 或 Quarkus `application.*` 配置文件指定的配置属性都被视为 Gradle 任务输入，换句话说：这些文件中的每一个变化都会导致重建。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"If your Quarkus build references system properties that do not start with `quarkus.` (or environment variables that\n"
"do not start with `QUARKUS_`), you must reference those via the Quarkus build extension. For example, if your\n"
"`application.properties` file references an environment variable like this:"
msgstr "如果你的夸克构建文件引用了不是以 `quarkus.` 开头的系统属性（或不是以 `QUARKUS_` 开头的环境变量），你必须通过夸克构建扩展引用这些属性。例如，如果你的 `application.properties` 文件引用了这样的环境变量："

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "greeting.message=${FOO_MESSAGE:Hello!}"
msgstr "greeting.message=${FOO_MESSAGE:Hello!}"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "it must be explicitly declared as \"caching relevant\":"
msgstr "必须明确声明为 \"缓存相关\"："

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"quarkus {\n"
"   cachingRelevantProperties.add(\"FOO_MESSAGE\")\n"
"   // Note: `cachingRelevantProperties` accepts regular expressions\n"
"}"
msgstr "quarkus { cachingRelevantProperties.add(\"FOO_MESSAGE\") // 注意： `cachingRelevantProperties` 接受正则表达式 }"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Build workers"
msgstr "建设工人"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"Quarkus application builds are ran in isolated processes using Gradle's worker API. This includes the Quarkus\n"
"application build and Quarkus code generation. This is necessary to properly pass the configuration from the\n"
"`quarkus` extension and Gradle project properties to Quarkus' code generator / application builder."
msgstr "Quarkus 应用程序的构建使用 Gradle 的 Worker API 在独立进程中运行。这包括 Quarkus 应用程序构建和 Quarkus 代码生成。这对于将 `quarkus` 扩展和 Gradle 项目属性中的配置正确传递给 Quarkus 代码生成器/应用程序生成器是非常必要的。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"The JVM settings of the processes performing the code generation and/or Quarkus build can be configured as follows.\n"
"See link:https://docs.gradle.org/current/javadoc/org/gradle/process/JavaForkOptions.html[JavaForkOptions]\n"
"for details."
msgstr "执行代码生成和/或 Quarkus 构建的进程的 JVM 设置可按如下方式配置。详情请参阅 link:https://docs.gradle.org/current/javadoc/org/gradle/process/JavaForkOptions.html[JavaForkOptions] 。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Cached build artifacts"
msgstr "缓存构建工件"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"link:https://docs.gradle.org/current/userguide/build_cache.html[Gradle's build cache] is a very efficient mechanism to\n"
"improve the overall build runtime, by reusing previously generated outputs (see\n"
"link:https://docs.gradle.org/current/userguide/incremental_build.html[Incremental build] for technical details)."
msgstr "link:https://docs.gradle.org/current/userguide/build_cache.html[Gradle 的构建缓存] 是一种非常有效的机制，可以通过重复使用之前生成的输出结果来改善整个构建运行时间（技术细节请参阅 link:https://docs.gradle.org/current/userguide/incremental_build.html[增量构建] ）。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"The Quarkus plugin leverages the Gradle mechanisms of up-to-date checks and the build cache. The build cache can be\n"
"local or local _plus_ a remote cache server or, if configured in CI environments, remote in the sense of retrieving\n"
"and storing the whole cache as an artifact, for example using\n"
"link:https://github.com/gradle/gradle-build-action[Gradle's GitHub action] or directly/manually GitHub's\n"
"link:https://github.com/actions/cache[GitHub's cache action]."
msgstr "Quarkus 插件利用了 Gradle 的最新检查机制和构建缓存。构建缓存可以是本地缓存，也可以是本地缓存 _加_ 远程缓存服务器，或者，如果配置在 CI 环境中，也可以是远程缓存，即检索并将整个缓存存储为一个工件，例如使用 link:https://github.com/gradle/gradle-build-action[Gradle 的] link:https://github.com/actions/cache[GitHub] 操作或直接/手动 link:https://github.com/actions/cache[GitHub 的 GitHub 缓存操作] 。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"The Quarkus Gradle plugin cares about _what_ is cached _in which environment_ (CI or local development). Big artifacts\n"
"like uber-jars and native binaries are not cached in CI, but are cached in local development environments."
msgstr "Quarkus Gradle 插件会关注缓存 _在哪个环境_ （CI 或本地开发）中。像 uber-jar 和本地二进制文件这样的大型工件不会缓存在 CI 中，而是缓存在本地开发环境中。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "The Quarkus Gradle plugin detects a _CI environment_, if the `CI` environment variable is present."
msgstr "如果 `CI` 环境变量存在，Quarkus Gradle 插件会检测 _CI_ 环境。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"How the various Quarkus package types are cached in non-CI and CI environments is described in the following table.\n"
"Note that even if a task's output is not _cached_, the _up-to-date_ checks still apply."
msgstr "下表介绍了各种 Quarkus 软件包类型在非 CI 和 CI 环境中的缓存方式。请注意，即使任务的输出未被 _缓存_ ， _最新_ 检查仍然适用。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"The Quarkus application build is split across three tasks. The `quarkusBuild` task is responsible to _provide_\n"
"a built Quarkus application. The tasks `quarkusDependenciesBuild` and `quarkusAppPartsBuild` are considered internal\n"
"tasks (may change at any time w/o prior notice). See below for details."
msgstr "Quarkus 应用程序的构建分为三个任务。 `quarkusBuild` 任务负责 _提供_ 已构建的 Quarkus 应用程序。 `quarkusDependenciesBuild` 和 `quarkusAppPartsBuild` 任务被视为内部任务（可随时更改，无需事先通知）。详见下文。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Quarkus package type"
msgstr "Quarkus 软件包类型"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Notes"
msgstr "说明"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Caching (non-CI)"
msgstr "缓存（非 CI）"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Caching in CI"
msgstr "CI 中的缓存"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "`fast-jar`, `jar`"
msgstr "`fast-jar` , `jar`"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"Dependency jars are stored unmodified as individual files in the `quarkus-app/lib/` directory.\n"
"All other files in the `quarkus-app/` directory are generated.\n"
"\n"
"The `quarkusAppPartsBuild` task builds `fast-jar` package-type applications and allows caching of the _generated_\n"
"pieces, which is everything except the dependencies in the `quarkus-app/lib/` directory. The\n"
"`quarkusDependenciesBuild` task is used to collect the dependencies via Gradle mechanisms. The `quarkusBuild` task\n"
"then assembles the outputs of the `quarkusAppPartsBuild` and `quarkusDependenciesBuild` tasks.\n"
"\n"
"Note: `fast-jar` (or `-jar`) is the default if no package type has been explicitly configured."
msgstr "依赖关系 jar 将以未修改的单独文件形式存储在 `quarkus-app/lib/` 目录中。 `quarkus-app/` 目录中的所有其他文件都是生成的。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "✅"
msgstr "✅"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "`mutable-jar`, `uber-jar`, `native`, `native-sources`"
msgstr "`mutable-jar` , `uber-jar` , `native` 、 `native-sources`"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"The `quarkusBuild` task is responsible for building the Quarkus application.\n"
"\n"
"The `quarkusAppPartsBuild` and `quarkusDependenciesBuild` tasks do nothing for `uber-jar`s."
msgstr "`quarkusBuild` 任务负责构建 Quarkus 应用程序。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "❌"
msgstr "❌"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "`legacy-jar`, `legacy`"
msgstr "`legacy-jar` , `legacy`"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"`legacy-jar` builds work similar to `fast-jar` builds, except that the directory structure is different and the\n"
"`modified-*.jar` files are considered as generated."
msgstr "`legacy-jar` 编译的工作原理与 编译类似，只是目录结构不同，而且 文件被视为已生成的文件。 `fast-jar` `modified-*.jar` "

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"In a local development environment, the cost (think: time) of storing (and retrieving) even bigger cache artifacts is\n"
"lower than the cost of re-building a Quarkus application. This means, that The Quarkus Gradle plugin allows caching\n"
"even potentially big artifacts like uber-jars or native binaries in non-CI environments. In CI environments, which run\n"
"builds against varying states of a code base (think: running CI against every commit on a main branch), adding each\n"
"built (and big) artifact to the build cache would let the build cache become unnecessarily big, which becomes a\n"
"problem for example in GitHub, where the total amount of cached artifacts is limited to 10 GB."
msgstr "在本地开发环境中，存储（和检索）更大缓存工件的成本（时间）低于重新构建 Quarkus 应用程序的成本。这就意味着，Quarkus Gradle 插件甚至可以在非 CI 环境中缓存潜在的大型工件，如超大 JAR 或本地二进制文件。在针对代码库的不同状态运行构建的 CI 环境中（想想：针对主分支上的每个提交运行 CI），将每个已构建（且较大）的工件添加到构建缓存中会让构建缓存变得不必要的大，这就成了一个问题，例如在 GitHub 中，缓存工件的总量限制为 10 GB。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Background information: There are two related mechanisms in Gradle at play to improve build performance:"
msgstr "背景信息：Gradle 中有两种相关机制可以提高构建性能："

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"Up-to-date checks allow a task's execution to be skipped, if the _inputs_ and _outputs_ of the tasks did not change.\n"
"For example, consider a Java compile tasks: if the library dependencies and the source files (the _inputs_) did not\n"
"change and the compiled class files (the _outputs_) are still available, compilation can be skipped."
msgstr "如果任务的 _输入_ 和 _输出_ 没有变化，最新检查允许跳过任务的执行。例如，考虑 Java 编译任务：如果库依赖关系和源文件（ _输入_ ）没有变化，且编译后的类文件（ _输出_ ）仍然可用，则可以跳过编译。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"The build cache can store the outputs of (cacheable) tasks in the local build cache. The _output_ of a task can be\n"
"restored from the cache."
msgstr "构建缓存可以将（可缓存）任务的输出存储在本地构建缓存中。任务的 _输出_ 可以从缓存中恢复。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"The benefits of up-to-date checks and the interaction of the build cache come with the cost of modeling the _inputs_\n"
"and _outputs_. Inputs are not only files or directories, but also the Java version used during the build, the operating\n"
"system, the working directory, configuration options, and so on. So everything that influences the output of a task\n"
"action must be declared as an input of the task."
msgstr "最新检查和构建缓存交互的好处是以 _输入_ 和 _输出_ 建模为代价的。输入不仅包括文件或目录，还包括构建过程中使用的 Java 版本、操作系统、工作目录、配置选项等。因此，影响任务操作输出的所有内容都必须声明为任务的输入。"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid "Gradle configuration cache"
msgstr "Gradle 配置缓存"

#: _versions/3.8/guides/gradle-tooling.adoc
#, fuzzy
msgid ""
"The Quarkus Gradle plugin works with builds that have the\n"
"link:https://docs.gradle.org/current/userguide/configuration_cache.html[Gradle's configuration cache] enabled, but\n"
"the configuration cache is disabled for the Quarkus tasks. This means, that the Quarkus plugin does not break such\n"
"Gradle builds."
msgstr "Quarkus Gradle 插件适用于已启用 link:https://docs.gradle.org/current/userguide/configuration_cache.html[Gradle 配置缓存] 的构建，但 Quarkus 任务的 link:https://docs.gradle.org/current/userguide/configuration_cache.html[配置] 缓存是禁用的。这意味着，Quarkus 插件不会破坏此类 Gradle 构建。"
