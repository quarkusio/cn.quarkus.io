msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Using OpenID Connect (OIDC) multitenancy"
msgstr "使用 OpenID Connect (OIDC) 多租户功能"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"This guide demonstrates how your OpenID Connect (OIDC) application can support multitenancy to serve multiple tenants from a single application.\n"
"These tenants can be distinct realms or security domains within the same OIDC provider or even distinct OIDC providers."
msgstr "本指南演示了 OpenID Connect (OIDC) 应用程序如何支持多租户，以便从单个应用程序为多个租户提供服务。这些租户可以是同一 OIDC 提供商内的不同领域或安全域，甚至是不同的 OIDC 提供商。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"Each customer functions as a distinct tenant when serving multiple customers from the same application, such as in a SaaS environment.\n"
"By enabling multitenancy support to your applications, you can support distinct authentication policies for each tenant, even authenticating against different OIDC providers, such as Keycloak and Google."
msgstr "在 SaaS 环境等同一应用程序为多个客户提供服务时，每个客户都是一个不同的租户。通过为应用程序启用多租户支持，您可以为每个租户支持不同的身份验证策略，甚至可以针对不同的 OIDC 提供商（如 Keycloak 和 Google）进行身份验证。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "To authorize a tenant by using Bearer Token Authorization, see the xref:security-oidc-bearer-token-authentication.adoc[OpenID Connect (OIDC) Bearer token authentication] guide."
msgstr "要使用承载令牌授权对租户进行授权，请参阅 xref:security-oidc-bearer-token-authentication.adoc[OpenID Connect (OIDC) 承载令牌身份验证] 指南。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "To authenticate and authorize a tenant by using the OIDC authorization code flow, read the xref:security-oidc-code-flow-authentication.adoc[OpenID Connect authorization code flow mechanism for protecting web applications] guide."
msgstr "要使用 OIDC 授权代码流对租户进行验证和授权，请阅读 xref:security-oidc-code-flow-authentication.adoc[OpenID Connect 授权代码流机制保护网络应用程序] 指南。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Also, see the xref:security-oidc-configuration-properties-reference.adoc[OpenID Connect (OIDC) configuration properties] reference guide."
msgstr "此外，请参阅 xref:security-oidc-configuration-properties-reference.adoc[OpenID Connect (OIDC) 配置属性] 参考指南。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Prerequisites"
msgstr "先决条件"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr "link:https://stedolan.github.io/jq/[jq工具]"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Architecture"
msgstr "应用结构"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "In this example, we build a very simple application that supports two resource methods:"
msgstr "在本例中，我们构建了一个非常简单的应用程序，支持两种资源方法："

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "`/{tenant}`"
msgstr "`/{tenant}`"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "This resource returns information obtained from the ID token issued by the OIDC provider about the authenticated user and the current tenant."
msgstr "该资源返回从 OIDC 提供商签发的 ID 令牌中获取的有关已验证用户和当前租户的信息。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "`/{tenant}/bearer`"
msgstr "`/{tenant}/bearer`"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "This resource returns information obtained from the Access Token issued by the OIDC provider about the authenticated user and the current tenant."
msgstr "该资源返回从 OIDC 提供商签发的访问令牌中获取的有关已验证用户和当前租户的信息。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Solution"
msgstr "解决方案"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "For a thorough understanding, we recommend you build the application by following the upcoming step-by-step instructions."
msgstr "为了全面了解，我们建议您按照接下来的步骤说明来构建应用程序。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Alternatively, if you prefer to start with the completed example, clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "或者，如果您想从已完成的示例开始，请克隆 Git 仓库： `git clone {quickstarts-clone-url}` 或下载 {quickstarts-archive-url}[归档]。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "The solution is located in the `security-openid-connect-multi-tenancy-quickstart` link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart[directory]."
msgstr "解决方案位于 `security-openid-connect-multi-tenancy-quickstart` link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart[目录] 中。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Creating the Maven project"
msgstr "创建Maven项目"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"First, we need a new project.\n"
"Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新项目:"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "If you already have your Quarkus project configured, add the `oidc` extension to your project by running the following command in your project base directory:"
msgstr "如果已经配置了 Quarkus 项目，请在项目基本目录下运行以下命令，将 `oidc` 扩展添加到项目中："

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "This adds the following to your build file:"
msgstr "这会在构建文件中添加以下内容"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Writing the application"
msgstr "编写应用程序"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"Start by implementing the `/{tenant}` endpoint.\n"
"As you can see from the source code below, it is just a regular Jakarta REST resource:"
msgstr "首先实施 `/{tenant}` 端点。从下面的源代码中可以看到，这只是一个普通的 Jakarta REST 资源："

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "To resolve the tenant from incoming requests and map it to a specific `quarkus-oidc` tenant configuration in `application.properties`, create an implementation for the `io.quarkus.oidc.TenantConfigResolver` interface, which can dynamically resolve tenant configurations:"
msgstr "要从传入请求中解析租户并将其映射到 `application.properties` 中的特定 `quarkus-oidc` 租户配置，请为 `io.quarkus.oidc.TenantConfigResolver` 接口创建一个实现，它可以动态解析租户配置："

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"In the preceding implementation, tenants are resolved from the request path.\n"
"If no tenant can be inferred, `null` is returned to indicate that the default tenant configuration should be used."
msgstr "在前面的实现中，租户是从请求路径中解析出来的。如果无法推断出租户，则返回 `null` ，表示应使用默认租户配置。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"The `tenant-a` application type is `hybrid`; it can accept HTTP bearer tokens if provided.\n"
"Otherwise, it initiates an authorization code flow when authentication is required."
msgstr "`tenant-a` 应用程序类型为 `hybrid` ；如果提供 HTTP 承载令牌，它可以接受 HTTP 承载令牌。否则，在需要进行身份验证时，它会启动授权代码流。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Configuring the application"
msgstr "配置该应用程序"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"The first configuration is the default tenant configuration that should be used when the tenant cannot be inferred from the request.\n"
"Be aware that a `%prod` profile prefix is used with `quarkus.oidc.auth-server-url` to support testing a multitenant application with Dev Services For Keycloak.\n"
"This configuration uses a Keycloak instance to authenticate users."
msgstr "第一个配置是默认租户配置，当无法从请求中推断出租户时应使用该配置。请注意， `%prod` 配置文件前缀与 `quarkus.oidc.auth-server-url` 一起使用，以支持使用 Dev Services For Keycloak 测试多租户应用程序。此配置使用 Keycloak 实例对用户进行身份验证。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "The second configuration, provided by `TenantConfigResolver`, is used when an incoming request is mapped to the `tenant-a` tenant."
msgstr "第二个配置由 `TenantConfigResolver` 提供，当传入请求映射到 `tenant-a` 租户时使用。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Both configurations map to the same Keycloak server instance while using distinct `realms`."
msgstr "这两种配置映射到同一个 Keycloak 服务器实例，但使用不同的 `realms` 。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Alternatively, you can configure the tenant `tenant-a` directly in `application.properties`:"
msgstr "或者，也可以直接在 `application.properties` 中配置租户 `tenant-a` ："

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "In that case, also use a custom `TenantConfigResolver` to resolve it:"
msgstr "在这种情况下，也可以使用自定义 `TenantConfigResolver` 来解决："

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"You can define multiple tenants in your configuration file.\n"
"To map them correctly when resolving a tenant from your `TenantResolver` implementation, ensure each has a unique alias."
msgstr "您可以在配置文件中定义多个租户。要在 `TenantResolver` 实现中解析租户时正确映射它们，请确保每个租户都有唯一的别名。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "However, using a static tenant resolution, which involves configuring tenants in `application.properties` and resolving them with `TenantResolver`, does not work for testing endpoints with Dev Services for Keycloak because it does not know how the requests are be mapped to individual tenants, and cannot dynamically provide tenant-specific `quarkus.oidc.<tenant-id>.auth-server-url` values. Therefore, using `%prod` prefixes with tenant-specific URLs within `application.properties` does not work in both test and development modes."
msgstr "不过，使用静态租户解析（即在 `application.properties` 中配置租户并用 `TenantResolver` 解析）并不适用于使用 Dev Services for Keycloak 测试端点，因为它不知道如何将请求映射到各个租户，也无法动态提供特定于租户的 `quarkus.oidc.<tenant-id>.auth-server-url` 值。因此，在 `application.properties` 中使用 `%prod` 前缀和特定于租户的 URL 在测试和开发模式下都不起作用。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"When a current tenant represents an OIDC `web-app` application, the current `io.vertx.ext.web.RoutingContext` contains a `tenant-id` attribute by the time the custom tenant resolver has been called for all the requests completing the code authentication flow and the already authenticated requests, when either a tenant-specific state or session cookie already exists.\n"
"Therefore, when working with multiple OIDC providers, you only need a path-specific check to resolve a tenant id if the `RoutingContext` does not have the `tenant-id` attribute set, for example:"
msgstr "当当前租户代表一个 OIDC `web-app` 应用程序时，自定义租户解析器在调用完成代码验证流程的所有请求和已验证请求时，当前 `io.vertx.ext.web.RoutingContext` 包含 `tenant-id` 属性，此时租户特定状态或会话 cookie 已经存在。因此，在使用多个 OIDC 提供商时，如果 `RoutingContext` 没有设置 `tenant-id` 属性，则只需进行特定路径检查即可解析租户 ID："

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "This is how Quarkus OIDC resolves static custom tenants if no custom `TenantResolver` is registered."
msgstr "如果未注册自定义 `TenantResolver` ，Quarkus OIDC 将以此方式解析静态自定义租户。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "A similar technique can be used with `TenantConfigResolver`, where a `tenant-id` provided in the context can return `OidcTenantConfig` already prepared with the previous request."
msgstr "`TenantConfigResolver` 也可以使用类似的技术，在上下文中提供的 `tenant-id` 可以返回上一个请求已经准备好的 `OidcTenantConfig` 。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"If you also use xref:hibernate-orm.adoc#multitenancy[Hibernate ORM multitenancy] or xref:mongodb-panache.adoc#multitenancy[MongoDB with Panache multitenancy] and both tenant ids are the same\n"
"and must be extracted from the Vert.x `RoutingContext`, you can pass the tenant id from the OIDC Tenant Resolver to the Hibernate ORM Tenant Resolver or MongoDB with Panache Mongo Database Resolver\n"
"as a `RoutingContext` attribute, for example:"
msgstr "如果您也使用 xref:hibernate-orm.adoc#multitenancy[Hibernate ORM 多] 租户或使用 xref:mongodb-panache.adoc#multitenancy[Panache 多租户的 MongoDB] ，且两个租户 id 相同，且必须从 Vert.x `RoutingContext` 中提取，则可以将租户 id 作为 `RoutingContext` 属性从 OIDC 租户解析器传递给 Hibernate ORM 租户解析器或使用 Panache MongoDB 的 Mongo 数据库解析器："

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Starting and configuring the Keycloak server"
msgstr "启动和配置 Keycloak 服务器"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "To start a Keycloak server, you can use Docker and run the following command:"
msgstr "要启动 Keycloak 服务器，可以使用 Docker 并运行以下命令："

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "where `keycloak.version` is set to `24.0.0` or higher."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Access your Keycloak server at http://localhost:8180[localhost:8180]."
msgstr "通过 link:http://localhost:8180[localhost:8180] 访问 Keycloak 服务器。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"Log in as the `admin` user to access the Keycloak administration console.\n"
"The username and password are both `admin`."
msgstr "以 `admin` 用户身份登录，访问 Keycloak 管理控制台。用户名和密码都是 `admin` 。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Now, import the realms for the two tenants:"
msgstr "现在，为两个租户导入域："

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Import the link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/default-tenant-realm.json[default-tenant-realm.json] to create the default realm."
msgstr "导入 link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/default-tenant-realm.json[default-tenant-realm.json] 以创建默认域。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Import the link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/tenant-a-realm.json[tenant-a-realm.json] to create the realm for the tenant `tenant-a`."
msgstr "导入租户 link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/tenant-a-realm.json[-a-realm.json] ，为租户创建领域 `tenant-a` 。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "For more information, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr "更多信息，请参阅 Keycloak 文档，了解如何 link:https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[创建新领域] 。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Running and using the application"
msgstr "运行和使用应用程序"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Running in developer mode"
msgstr "以开发者模式运行"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "To run the microservice in dev mode, use:"
msgstr "要在开发模式下运行微服务，请使用"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Running in JVM mode"
msgstr "以 JVM 模式运行"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "After exploring the application in dev mode, you can run it as a standard Java application."
msgstr "在开发模式下探索应用程序后，您可以将其作为标准 Java 应用程序运行。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "First, compile it:"
msgstr "首先，编译它："

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Then run it:"
msgstr "然后运行："

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Running in native mode"
msgstr "以本地模式运行"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "This same demo can be compiled into native code; no modifications are required."
msgstr "同样的演示可以编译成本地代码，无需任何修改。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"This implies that you no longer need to install a JVM on your\n"
"production environment, as the runtime technology is included in\n"
"the produced binary, and optimized to run with minimal resources."
msgstr "这意味着您不再需要在生产环境中安装 JVM，因为运行时技术已包含在生成的二进制文件中，并经过优化，只需最少的资源即可运行。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"Compilation takes a bit longer, so this step is turned off by default;\n"
"let's build again by enabling the native build:"
msgstr "编译需要较长的时间，因此默认情况下这一步是关闭的；让我们再次启用本地编译进行编译："

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "After a little while, you can run this binary directly:"
msgstr "过一会儿，您就可以直接运行该二进制文件了："

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Test the application"
msgstr "测试应用程序"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Use Dev Services for Keycloak"
msgstr "为 Keycloak 使用开发服务"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] is recommended for the integration testing against Keycloak.\n"
"Dev Services for Keycloak launches and initializes a test container: it imports configured realms and sets a base Keycloak URL for the `CustomTenantResolver` to calculate a realm-specific URL."
msgstr "建议使用针对 Keyc xref:security-openid-connect-dev-services.adoc[loak 的 Dev Services] 进行集成测试。Keycloak 的 Dev Services 会启动并初始化测试容器：它会导入已配置的领域，并为 `CustomTenantResolver` 设置 Keycloak 基本 URL，以计算特定领域的 URL。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "First, add the following dependencies:"
msgstr "首先，添加以下依赖项："

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"`quarkus-test-keycloak-server` provides a utility class `io.quarkus.test.keycloak.client.KeycloakTestClient` for acquiring the realm specific access tokens and which you can use with `RestAssured` for testing the `/{tenant}/bearer` endpoint expecting bearer access tokens.\n"
"`HtmlUnit` tests the `/{tenant}` endpoint and the authorization code flow."
msgstr "`quarkus-test-keycloak-server` `io.quarkus.test.keycloak.client.KeycloakTestClient` `RestAssured` `/{tenant}/bearer` `HtmlUnit` 测试 端点和授权代码流。 `/{tenant}` "

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Next, configure the required realms:"
msgstr "然后，配置所需的域："

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Finally, write your test, which runs in JVM mode:"
msgstr "最后，编写在 JVM 模式下运行的测试："

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "In native mode:"
msgstr "在本地模式下："

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "For more information about how it is initialized and configured, see xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]."
msgstr "有关如何初始化和配置的详细信息，请参阅 xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] 。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Use the browser"
msgstr "使用浏览器"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "To test the application, open your browser and access the following URL:"
msgstr "要测试应用程序，请打开浏览器并访问以下 URL："

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "http://localhost:8080/default[http://localhost:8080/default]"
msgstr "http://localhost:8080/default"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"If everything works as expected, you are redirected to the Keycloak server to authenticate.\n"
"Be aware that the requested path defines a `default` tenant, which we don't have mapped in the configuration file.\n"
"In this case, the default configuration is used."
msgstr "如果一切正常，您将被重定向到 Keycloak 服务器进行身份验证。请注意，请求的路径定义了 `default` 租户，而我们的配置文件中没有映射该租户。在这种情况下，将使用默认配置。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "To authenticate to the application, enter the following credentials in the Keycloak login page:"
msgstr "要验证应用程序，请在 Keycloak 登录页面输入以下凭据："

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Username: `alice`"
msgstr "用户名 `alice`"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Password: `alice`"
msgstr "密码 `alice`"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "After clicking the *Login* button, you are redirected back to the application."
msgstr "单击 \" *登录* \"按钮后，您将重新回到应用程序。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "If you try now to access the application at the following URL:"
msgstr "如果您现在尝试访问以下 URL 中的应用程序："

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "http://localhost:8080/tenant-a[http://localhost:8080/tenant-a]"
msgstr "http://localhost:8080/tenant-a"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"You are redirected again to the Keycloak login page.\n"
"However, this time, you are going to authenticate by using a different realm."
msgstr "您将再次被重定向到 Keycloak 登录页面。不过，这次你要使用不同的域来进行身份验证。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"In both cases, the landing page shows the user's name and email if the user is successfully authenticated.\n"
"Although `alice` exists in both tenants, the application treats them as distinct users in separate realms."
msgstr "在这两种情况下，如果用户身份验证成功，登陆页面都会显示用户的姓名和电子邮件。虽然 `alice` 同时存在于两个租户中，但应用程序将它们视为不同领域中的不同用户。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Static tenant configuration resolution"
msgstr "静态租户配置解析"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"When you set multiple tenant configurations in the `application.properties` file, you only need to specify how the tenant identifier gets resolved.\n"
"To configure the resolution of the tenant identifier, use one of the following options:"
msgstr "在 `application.properties` 文件中设置多个租户配置时，只需指定租户标识符的解析方式。要配置租户标识符的解析，请使用以下选项之一："

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "<<tenant-resolver>>"
msgstr "<<tenant-resolver>>"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "<<default-tenant-resolver>>"
msgstr "<<default-tenant-resolver>>"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "<<annotations-tenant-resolver>>"
msgstr "<<annotations-tenant-resolver>>"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"These tenant resolution options are tried in the order they are listed until the tenant id gets resolved.\n"
"If the tenant id remains unresolved (`null`), the default (unnamed) tenant configuration is selected."
msgstr "在租户 ID 得到解决之前，会按顺序尝试这些租户解决选项。如果租户 ID 仍未解决（ `null` ），则会选择默认（未命名）租户配置。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Resolve with `TenantResolver`"
msgstr "用以下方式解决 `TenantResolver`"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "The following `application.properties` example shows how you can resolve the tenant identifier of two tenants named `a` and `b` by using the `TenantResolver` method:"
msgstr "下面的 `application.properties` 示例说明了如何使用 `TenantResolver` 方法解析名为 `a` 和 `b` 的两个租户的租户标识符："

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "You can return the tenant id of either `a` or `b` from `quarkus.oidc.TenantResolver`:"
msgstr "您可以从 `quarkus.oidc.TenantResolver` 返回 `a` 或 `b` 的租户 ID："

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "In this example, the value of the last request path segment is a tenant id, but if required, you can implement a more complex tenant identifier resolution logic."
msgstr "在本例中，最后一个请求路径段的值是租户 ID，但如果需要，可以实施更复杂的租户标识符解析逻辑。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Default resolution"
msgstr "默认分辨率"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "The default resolution for a tenant identifier is convention based, whereby the authentication request must include the tenant identifier in the last segment of the request path."
msgstr "租户标识符的默认解析是基于惯例的，即身份验证请求必须在请求路径的最后一段包含租户标识符。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "The following `application.properties` example shows how you can configure two tenants named `google` and `github`:"
msgstr "下面的 `application.properties` 示例显示了如何配置名为 `google` 和 `github` 的两个租户："

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"In the provided example, both tenants configure OIDC `web-app` applications to use an authorization code flow to authenticate users and require session cookies to be generated after authentication.\n"
"After Google or GitHub authenticates the current user, the user gets returned to the `/signed-in` area for authenticated users, such as a secured resource path on the JAX-RS endpoint."
msgstr "在提供的示例中，两个租户都将 OIDC `web-app` 应用程序配置为使用授权代码流对用户进行身份验证，并要求在身份验证后生成会话 Cookie。在 Google 或 GitHub 对当前用户进行身份验证后，用户会被返回到 `/signed-in` 区域，供已通过身份验证的用户使用，例如 JAX-RS 端点上的安全资源路径。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Finally, to complete the default tenant resolution, set the following configuration property:"
msgstr "最后，要完成默认租户解析，请设置以下配置属性："

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"If the endpoint is running on `http://localhost:8080`, you can also provide UI options for users to log in to either `http://localhost:8080/google` or `http://localhost:8080/github`, without having to add specific `/google` or `/github` JAX-RS resource paths.\n"
"Tenant identifiers are also recorded in the session cookie names after the authentication is completed.\n"
"Therefore, authenticated users can access the secured application area without requiring either the `google` or `github` path values to be included in the secured URL."
msgstr "如果端点运行在 `http://localhost:8080` 的用户界面选项，用户可以登录到 `http://localhost:8080/google` 或 `http://localhost:8080/github` ，而无需添加特定的 `/google` 或 `/github` JAX-RS 资源路径。身份验证完成后，租户标识符也会记录在会话 cookie 名称中。因此，已通过身份验证的用户无需在安全 URL 中包含 `google` 或 `github` 路径值，即可访问安全应用区域。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"Default resolution can also work for Bearer token authentication.\n"
"Still, it might be less practical because a tenant identifier must always be set as the last path segment value."
msgstr "默认解析也可用于承载令牌身份验证。不过，这可能不太实用，因为租户标识符必须始终设置为最后一个路径段值。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Resolve with annotations"
msgstr "使用注释解决"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "You can use the `io.quarkus.oidc.Tenant` annotation for resolving the tenant identifiers as an alternative to using `io.quarkus.oidc.TenantResolver`."
msgstr "您可以使用 `io.quarkus.oidc.Tenant` 注释来解析租户标识符，而不是使用 `io.quarkus.oidc.TenantResolver` 。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"Proactive HTTP authentication must be disabled (`quarkus.http.auth.proactive=false`) for this to work.\n"
"For more information, see the xref:security-proactive-authentication.adoc[Proactive authentication] guide."
msgstr "必须禁用主动 HTTP 身份验证 ( `quarkus.http.auth.proactive=false` ) 才能正常工作。有关详细信息，请参阅 xref:security-proactive-authentication.adoc[主动身份验证] 指南。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"Assuming your application supports two OIDC tenants, the `hr` and default tenants, all resource methods and classes carrying `@Tenant(\"hr\")` are authenticated by using the OIDC provider configured by `quarkus.oidc.hr.auth-server-url`.\n"
"In contrast, all other classes and methods are still authenticated by using the default OIDC provider."
msgstr "假设您的应用程序支持两个 OIDC 租户（ `hr` 和默认租户），则所有携带 `@Tenant(\"hr\")` 的资源方法和类都将使用 `quarkus.oidc.hr.auth-server-url` 配置的 OIDC 提供程序进行身份验证。相反，所有其他类和方法仍使用默认 OIDC 提供程序进行验证。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "The `io.quarkus.oidc.Tenant` annotation must be placed on either the resource class or resource method."
msgstr "`io.quarkus.oidc.Tenant` 注解必须放在资源类或资源方法上。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Dynamic tenant configuration resolution"
msgstr "动态租户配置解析"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"If you need a more dynamic configuration for the different tenants you want to support and don't want to end up with multiple\n"
"entries in your configuration file, you can use the `io.quarkus.oidc.TenantConfigResolver`."
msgstr "如果需要为不同租户提供更动态的配置，又不想在配置文件中出现多个条目，可以使用 `io.quarkus.oidc.TenantConfigResolver` ."

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "This interface allows you to dynamically create tenant configurations at runtime:"
msgstr "该界面允许您在运行时动态创建租户配置："

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"The `OidcTenantConfig` returned by this method is the same one used to parse the `oidc` namespace configuration from the `application.properties`.\n"
"You can populate it by using any settings supported by the `quarkus-oidc` extension."
msgstr "该方法返回的 `OidcTenantConfig` 与用于从 `application.properties` 解析 `oidc` 命名空间配置的 相同。您可以使用 `quarkus-oidc` 扩展支持的任何设置来填充它。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "If the dynamic tenant resolver returns `null`, a <<static-tenant-resolution>> is attempted next."
msgstr "如果动态租户解析器返回 `null` ，则接下来尝试 <<static-tenant-resolution>> 。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Tenant resolution for OIDC web-app applications"
msgstr "为 OIDC 网络应用程序解决租户问题"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "The simplest option for resolving the OIDC `web-app` application configuration is to follow the steps described in the <<default-tenant-resolver>> section."
msgstr "解决 OIDC `web-app` 应用程序配置问题的最简单方法是按照 <<default-tenant-resolver>> 部分所述步骤进行操作。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Try one of the options below if the default resolution strategy does not work for your application setup."
msgstr "如果默认分辨率策略不适合您的应用程序设置，请尝试以下选项之一。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Several options are available for selecting the tenant configuration that should be used to secure the current HTTP request for both `service` and `web-app` OIDC applications, such as:"
msgstr "`service` 和 `web-app` OIDC 应用程序的当前 HTTP 请求安全所应使用的租户配置，有多个选项可供选择，如"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"Check the URL paths.\n"
"For example, a `tenant-service` configuration must be used for the `/service` paths, while a `tenant-manage` configuration must be used for the `/management` paths."
msgstr "检查 URL 路径。例如， `/service` 路径必须使用 `tenant-service` 配置，而 `/management` 路径必须使用 `tenant-manage` 配置。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"Check the HTTP headers.\n"
"For example, with a URL path always being `/service`, a header such as `Realm: service` or `Realm: management` can help to select between the `tenant-service` and `tenant-manage` configurations."
msgstr "检查 HTTP 头信息。例如，如果 URL 路径总是 `/service` ，那么 `Realm: service` 或 `Realm: management` 这样的标头就可以帮助在 `tenant-service` 和 `tenant-manage` 配置之间做出选择。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"Check the URL query parameters.\n"
"It can work similarly to the way the headers are used to select the tenant configuration."
msgstr "检查 URL 查询参数。其工作方式与使用标头选择租户配置的方式类似。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "All these options can be easily implemented with the custom `TenantResolver` and `TenantConfigResolver` implementations for the OIDC `service` applications."
msgstr "所有这些选项都可以通过 OIDC `service` 应用程序的定制 `TenantResolver` 和 `TenantConfigResolver` 实现轻松实现。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "However, due to an HTTP redirect required to complete the code authentication flow for the OIDC `web-app` applications, a custom HTTP cookie might be needed to select the same tenant configuration before and after this redirect request because:"
msgstr "不过，由于完成 OIDC `web-app` 应用程序的代码验证流程需要进行 HTTP 重定向，因此可能需要自定义 HTTP cookie，以便在重定向请求前后选择相同的租户配置："

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"The URL path might not be the same after the redirect request if a single redirect URL has been registered in the OIDC provider.\n"
"The original request path can be restored after the tenant configuration has been resolved."
msgstr "如果在 OIDC 提供商中注册了单个重定向 URL，则重定向请求后的 URL 路径可能不一样。租户配置解决后，可以恢复原来的请求路径。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "The HTTP headers used during the original request are unavailable after the redirect."
msgstr "重定向后，原始请求中使用的 HTTP 标头将不可用。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "The custom URL query parameters are restored after the redirect but only after the tenant configuration is resolved."
msgstr "重定向后会恢复自定义 URL 查询参数，但只有在租户配置得到解决后才会恢复。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "One option to ensure the information for resolving the tenant configurations for `web-app` applications is available before and after the redirect is to use a cookie, for example:"
msgstr "要确保 `web-app` 应用程序的租户配置解析信息在重定向前后都可用，一种方法是使用 cookie 等："

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Disabling tenant configurations"
msgstr "禁用租户配置"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Custom `TenantResolver` and `TenantConfigResolver` implementations might return `null` if no tenant can be inferred from the current request and a fallback to the default tenant configuration is required."
msgstr "如果无法从当前请求中推断出租户，并且需要回退到默认租户配置，则自定义 `TenantResolver` 和 `TenantConfigResolver` 实现可能会返回 `null` 。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "If you expect the custom resolvers always to resolve a tenant, you do not need to configure the default tenant resolution."
msgstr "如果希望自定义解析器始终解析租户，则无需配置默认租户解析。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "To turn off the default tenant configuration, set  `quarkus.oidc.tenant-enabled=false`."
msgstr "要关闭默认租户配置，请设置 `quarkus.oidc.tenant-enabled=false` 。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "The default tenant configuration is automatically disabled when `quarkus.oidc.auth-server-url` is not configured, but either custom tenant configurations are available or `TenantConfigResolver` is registered."
msgstr "`quarkus.oidc.auth-server-url` 时，默认租户配置会自动禁用，但可以使用自定义租户配置或注册 `TenantConfigResolver` 。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Be aware that tenant-specific configurations can also be disabled, for example: `quarkus.oidc.tenant-a.tenant-enabled=false`."
msgstr "请注意，特定租户的配置也可以被禁用，例如： `quarkus.oidc.tenant-a.tenant-enabled=false` 。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "References"
msgstr "参考文献"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties]"
msgstr "xref:security-oidc-configuration-properties-reference.adoc[OIDC 配置属性]"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr "link:https://www.keycloak.org/documentation.html[Keycloak 文档]"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr "link:https://openid.net/connect/[OpenID Connect]"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "link:https://tools.ietf.org/html/rfc7519[JSON 网络令牌]"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "https://developers.google.com/identity/protocols/OpenIDConnect[Google OpenID Connect]"
msgstr "link:https://developers.google.com/identity/protocols/OpenIDConnect[谷歌 OpenID 连接]"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus 安全概述]"
