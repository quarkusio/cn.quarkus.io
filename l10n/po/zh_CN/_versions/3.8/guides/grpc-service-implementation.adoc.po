msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Implementing a gRPC Service"
msgstr "实施 gRPC 服务"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "gRPC service implementations exposed as CDI beans are automatically registered and served by quarkus-grpc."
msgstr "作为 CDI Bean 公开的 gRPC 服务实现会由 quarkus-grpc 自动注册和提供服务。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid ""
"Implementing a gRPC service requires the gRPC classes to be generated.\n"
"Place your `proto` files in `src/main/proto` and run `mvn compile`."
msgstr "实施 gRPC 服务需要生成 gRPC 类。将 `proto` 文件放入 `src/main/proto` ，然后运行 `mvn compile` 。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Generated Code"
msgstr "生成代码"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Quarkus generates a few implementation classes for services declared in the `proto` file:"
msgstr "Quarkus 会为 `proto` 文件中声明的服务生成一些实现类："

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "A _service interface_ using the Mutiny API"
msgstr "使用 Mutiny API 的 _服务接口_"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "the class name is `${JAVA_PACKAGE}.${NAME_OF_THE_SERVICE}`"
msgstr "类名称为 `${JAVA_PACKAGE}.${NAME_OF_THE_SERVICE}`"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "An _implementation base_ class using the gRPC API"
msgstr "使用 gRPC API 的 _实现基类_"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "the class name is structured as follows: `${JAVA_PACKAGE}.${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase`"
msgstr "类名的结构如下 `${JAVA_PACKAGE}.${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase`"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "For example, if you use the following `proto` file snippet:"
msgstr "例如，如果您使用以下 `proto` 文件片段："

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "`hello` is the java package for the generated classes."
msgstr "`hello` 是生成类的 java 软件包。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "`Greeter` is the service name."
msgstr "`Greeter` 是服务名称。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Then the service interface is `hello.Greeter` and the implementation base is the abstract static nested class: `hello.GreeterGrpc.GreeterImplBase`."
msgstr "那么，服务接口就是 `hello.Greeter` ，实现基础就是抽象静态嵌套类： `hello.GreeterGrpc.GreeterImplBase` 。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "You'll need to implement the _service interface_ or extend the _base class_ with your service implementation bean as described in the following sections."
msgstr "您需要实现 _服务接口_ 或用您的服务实现 Bean 扩展 _基类_ ，具体做法将在以下章节中介绍。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Implementing a Service with the Mutiny API"
msgstr "使用 Mutiny API 实现服务"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid ""
"To implement a gRPC service using the Mutiny API, create a class that implements the service interface.\n"
"Then, implement the methods defined in the service interface.\n"
"If you don't want to implement a service method just throw an `java.lang.UnsupportedOperationException` from the method body (the exception will be automatically converted to the appropriate gRPC exception).\n"
"Finally, implement the service and add the `@GrpcService` annotation:"
msgstr "要使用 Mutiny API 实现 gRPC 服务，需要创建一个实现服务接口的类。然后，实现服务接口中定义的方法。如果不想实现服务方法，只需从方法体中抛出 `java.lang.UnsupportedOperationException` （异常会自动转换为相应的 gRPC 异常）。最后，实现服务并添加 `@GrpcService` 注解："

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "A gRPC service implementation bean must be annotated with the `@GrpcService` annotation and should not declare any other CDI qualifier. All gRPC services have the `jakarta.inject.Singleton` scope. Additionally, the request context is always active during a service call."
msgstr "gRPC 服务实现 bean 必须使用 `@GrpcService` 注释，且不得声明任何其他 CDI 限定符。所有 gRPC 服务的作用域都是 `jakarta.inject.Singleton` 。此外，请求上下文在服务调用期间始终处于活动状态。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "`hello.Greeter` is the generated service interface."
msgstr "`hello.Greeter` 是生成的服务接口。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "The service implementation bean can also extend the Mutiny implementation base, where the class name is structured as follows: `Mutiny${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase`."
msgstr "服务实现 bean 也可以扩展 Mutiny 实现基础，其中类名的结构如下： `Mutiny${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase` ."

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Implementing a Service with the default gRPC API"
msgstr "使用默认 gRPC API 实施服务"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid ""
"To implement a gRPC service using the default gRPC API, create a class that extends the default implementation base.\n"
"Then, override the methods defined in the service interface.\n"
"Finally, implement the service and add the `@GrpcService` annotation:"
msgstr "要使用默认的 gRPC API 实现 gRPC 服务，请创建一个扩展了默认实现基础的类。然后，覆盖服务接口中定义的方法。最后，实现服务并添加 `@GrpcService` 注解："

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Blocking Service Implementation"
msgstr "拦截服务的实施"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid ""
"By default, all the methods from a gRPC service run on the event loop.\n"
"As a consequence, you must **not** block.\n"
"If your service logic must block, annotate the method with `io.smallrye.common.annotation.Blocking`:"
msgstr "默认情况下，gRPC 服务的所有方法都在事件循环中运行。因此，必须 *避免* 阻塞。如果您的服务逻辑必须阻塞，请使用 `io.smallrye.common.annotation.Blocking` 对方法进行注释："

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Handling Streams"
msgstr "处理数据流"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "gRPC allows receiving and returning streams:"
msgstr "gRPC 允许接收和返回数据流："

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Using Mutiny, you can implement these as follows:"
msgstr "使用 Mutiny 可以实现以下功能："

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Health Check"
msgstr "健康检查"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "For the implemented services, Quarkus gRPC exposes health information in the following format:"
msgstr "对于已实施的服务，Quarkus gRPC 以下列格式公开健康信息："

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid ""
"Clients can specify the fully qualified service name to get the health status of a specific service\n"
"or skip specifying the service name to get the general status of the gRPC server."
msgstr "客户端可以指定完全限定的服务名来获取特定服务的健康状态，或者跳过服务名来获取 gRPC 服务器的一般状态。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid ""
"For more details, check out the\n"
"https://github.com/grpc/grpc/blob/v1.28.1/doc/health-checking.md[gRPC documentation]"
msgstr "有关详细信息，请查看 link:https://github.com/grpc/grpc/blob/v1.28.1/doc/health-checking.md[gRPC 文档]"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid ""
"Additionally, if Quarkus SmallRye Health is added to the application, a readiness check for\n"
"the state of the gRPC services will be added to the MicroProfile Health endpoint response, that is `/q/health`."
msgstr "此外，如果在应用程序中添加了 Quarkus SmallRye Health，则会在 MicroProfile Health 端点响应中添加对 gRPC 服务状态的就绪检查，即 `/q/health` 。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Reflection Service"
msgstr "反思服务"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid ""
"Quarkus gRPC Server implements the https://github.com/grpc/grpc/blob/master/doc/server-reflection.md[reflection service].\n"
"This service allows tools like https://github.com/fullstorydev/grpcurl[grpcurl] or https://github.com/gusaul/grpcox[grpcox] to interact with your services."
msgstr "Quarkus gRPC 服务器实现了 link:https://github.com/grpc/grpc/blob/master/doc/server-reflection.md[反射服务] 。这项服务允许 link:https://github.com/fullstorydev/grpcurl[grpcurl] 或 link:https://github.com/gusaul/grpcox[grpcox] 等工具与你的服务进行交互。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid ""
"The reflection service is enabled by default in _dev_ mode.\n"
"In test or production mode, you need to enable it explicitly by setting `quarkus.grpc.server.enable-reflection-service` to `true`."
msgstr "在 _开发_ 模式下，反射服务默认已启用。在测试或生产模式下，需要通过将 `quarkus.grpc.server.enable-reflection-service` 设置为 `true` 来显式启用反射服务。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Quarkus exposes both the reflection service `v1` and `v1alpha`."
msgstr "Quarkus 公开了反射服务 `v1` 和 `v1alpha` 。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Scaling"
msgstr "缩放"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "By default, quarkus-grpc starts a single gRPC server running on a single event loop."
msgstr "默认情况下，quarkus-grpc 会启动一个运行在单个事件循环上的 gRPC 服务器。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "If you wish to scale your server, you can set the number of server instances by setting `quarkus.grpc.server.instances`."
msgstr "如果希望扩展服务器，可以通过设置 `quarkus.grpc.server.instances` 来设置服务器实例的数量。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Server Configuration"
msgstr "服务器配置"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid ""
"When you disable `quarkus.grpc.server.use-separate-server`, you are then using the new Vert.x gRPC server implementation\n"
"which uses the existing HTTP server. Which means that the server port is now `8080` (or the port configured with `quarkus.http.port`).\n"
"Also, most of the other configuration properties are no longer applied, since it's the HTTP server that should already be properly configured."
msgstr "禁用 `quarkus.grpc.server.use-separate-server` 后，您将使用新的 Vert.x gRPC 服务器实现，它使用现有的 HTTP 服务器。这意味着服务器端口现在是 `8080` （或使用 `quarkus.http.port` 配置的端口）。此外，大多数其他配置属性也不再适用，因为 HTTP 服务器已经配置妥当。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "When you enable `quarkus.grpc.server.xds.enabled`, it's the xDS that should handle most of the configuration above."
msgstr "启用 `quarkus.grpc.server.xds.enabled` 后，xDS 将处理上述大部分配置。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Example of Configuration"
msgstr "配置示例"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Enabling TLS"
msgstr "启用 TLS"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "To enable TLS, use the following configuration."
msgstr "要启用 TLS，请使用以下配置。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid ""
"Note that all paths in the configuration may either specify a resource on the classpath\n"
"(typically from `src/main/resources` or its subfolder) or an external file."
msgstr "请注意，配置中的所有路径既可以指定类路径上的资源（通常来自 `src/main/resources` 或其子文件夹），也可以指定外部文件。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "When SSL/TLS is configured, `plain-text` is automatically disabled."
msgstr "配置 SSL/TLS 时， `plain-text` 会自动禁用。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "TLS with Mutual Auth"
msgstr "带相互认证的 TLS"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "To use TLS with mutual authentication, use the following configuration:"
msgstr "要使用带有相互验证功能的 TLS，请使用以下配置："

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Server Interceptors"
msgstr "服务器拦截器"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "gRPC server interceptors let you perform logic, such as authentication, before your service is invoked."
msgstr "gRPC 服务器拦截器可让你在调用服务前执行逻辑，如身份验证。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "You can implement a gRPC server interceptor by creating an `@ApplicationScoped` bean implementing `io.grpc.ServerInterceptor`:"
msgstr "您可以通过创建一个实现 `io.grpc.ServerInterceptor` 的 `@ApplicationScoped` Bean 来实现 gRPC 服务器拦截器："

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "It's also possible to annotate a producer method as a global interceptor:"
msgstr "也可以将生产者方法注释为全局拦截器："

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Check the https://grpc.github.io/grpc-java/javadoc/io/grpc/ServerInterceptor.html[ServerInterceptor JavaDoc] to properly implement your interceptor."
msgstr "查看 link:https://grpc.github.io/grpc-java/javadoc/io/grpc/ServerInterceptor.html[ServerInterceptor JavaDoc] 以正确实现拦截器。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid ""
"To apply an interceptor to all exposed services, annotate it with `@io.quarkus.grpc.GlobalInterceptor`.\n"
"To apply an interceptor to a single service, register it on the service with `@io.quarkus.grpc.RegisterInterceptor`:"
msgstr "要将拦截器应用于所有暴露的服务，请使用 `@io.quarkus.grpc.GlobalInterceptor` 进行注释。要将拦截器应用于单个服务，请使用 `@io.quarkus.grpc.RegisterInterceptor` 在服务上注册："

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid ""
"When you have multiple server interceptors, you can order them by implementing the `jakarta.enterprise.inject.spi.Prioritized` interface. Please note that all the global interceptors are invoked before the service-specific\n"
"interceptors."
msgstr "当您有多个服务器拦截器时，可以通过实现 `jakarta.enterprise.inject.spi.Prioritized` 接口对它们进行排序。请注意，所有全局拦截器都会在特定服务拦截器之前被调用。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid ""
"Interceptors with the highest priority are called first.\n"
"The default priority, used if the interceptor does not implement the `Prioritized` interface, is `0`."
msgstr "优先级最高的拦截器会被优先调用。如果拦截器没有实现 `Prioritized` 接口，默认的优先级是 `0` 。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Testing your services"
msgstr "测试您的服务"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid ""
"The easiest way to test a gRPC service is to use a gRPC client as described\n"
"in xref:grpc-service-consumption.adoc[Consuming a gRPC Service]."
msgstr "测试 gRPC 服务的最简单方法是使用 gRPC 客户端，如《 xref:grpc-service-consumption.adoc[使用 gRPC 服务] 》中所述。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid ""
"Please note that in the case of using a client to test an exposed service that does not use TLS,\n"
"there is no need to provide any configuration. E.g. to test the `HelloService`\n"
"defined above, one could create the following test:"
msgstr "请注意，在使用客户端测试不使用 TLS 的暴露服务时，无需提供任何配置。例如，要测试上文定义的 `HelloService` ，可以创建以下测试："

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Trying out your services manually"
msgstr "手动试用您的服务"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid ""
"In the dev mode, you can try out your gRPC services in the Quarkus Dev UI.\n"
"Just go to http://localhost:8080/q/dev-ui and click on _Services_ under the gRPC tile."
msgstr "在开发模式下，你可以在 Quarkus Dev UI 中试用你的 gRPC 服务。只需进入 http://localhost:8080/q/dev-ui ，然后点击 gRPC 磁贴下的 _服务_ 。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Please note that your application needs to expose the \"normal\" HTTP port for the Dev UI to be accessible. If your application does not expose any HTTP endpoints, you can create a dedicated profile with a dependency on `quarkus-vertx-http`:"
msgstr "请注意，要访问 Dev UI，您的应用程序必须暴露 \"正常 \"HTTP 端口。如果您的应用程序不暴露任何 HTTP 端点，您可以创建一个依赖于 `quarkus-vertx-http` 的专用配置文件："

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Having it, you can run the dev mode with: `mvn quarkus:dev -Pdevelopment`."
msgstr "有了它，你就可以用： `mvn quarkus:dev -Pdevelopment` ."

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "If you use Gradle, you can simply add a dependency for the `quarkusDev` task:"
msgstr "如果使用 Gradle，只需为 `quarkusDev` 任务添加一个依赖关系即可："

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "gRPC Server metrics"
msgstr "gRPC 服务器指标"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Enabling metrics collection"
msgstr "启用指标收集"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid ""
"gRPC server metrics are automatically enabled when the application also uses the xref:telemetry-micrometer.adoc[`quarkus-micrometer`] extension.\n"
"Micrometer collects the metrics of all the gRPC services implemented by the application."
msgstr "扩展时，gRPC 服务器指标会自动启用。 xref:telemetry-micrometer.adoc[quarkus-micrometer] 扩展。Micrometer 会收集应用程序实施的所有 gRPC 服务的指标。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "As an example, if you export the metrics to Prometheus, you will get:"
msgstr "例如，如果将指标导出到 Prometheus，就会得到以下结果："

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "The service name, method and type can be found in the _tags_."
msgstr "服务名称、方法和类型可在 _标签_ 中找到。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Disabling metrics collection"
msgstr "禁用指标收集"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "To disable the gRPC server metrics when `quarkus-micrometer` is used, add the following property to the application configuration:"
msgstr "要在使用 `quarkus-micrometer` 时禁用 gRPC 服务器指标，请在应用程序配置中添加以下属性："

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Use virtual threads"
msgstr "使用虚拟线程"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "To use virtual threads in your gRPC service implementation, check the dedicated xref:./grpc-virtual-threads.adoc[guide]."
msgstr "要在 gRPC 服务实现中使用虚拟线程，请查看专用 xref:./grpc-virtual-threads.adoc[指南] 。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "gRPC Server authorization"
msgstr "gRPC 服务器授权"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Quarkus includes built-in security to allow xref:security-authorize-web-endpoints-reference.adoc#standard-security-annotations[authorization using annotations] when the Vert.x gRPC support, which uses existing Vert.x HTTP server, is enabled."
msgstr "Quarkus 包含内置安全功能，允许在启用 Vert.x gRPC 支持（使用现有的 Vert.x HTTP 服务器）时 xref:security-authorize-web-endpoints-reference.adoc#standard-security-annotations[使用注释进行授权] 。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Add the Quarkus Security extension"
msgstr "添加夸克安全扩展"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Security capabilities are provided by the Quarkus Security extension, therefore make sure your `pom.xml` file contains following dependency:"
msgstr "安全功能由 Quarkus 安全扩展提供，因此请确保您的 `pom.xml` 文件包含以下依赖项："

#: _versions/3.8/guides/grpc-service-implementation.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "To add the Quarkus Security extension to an existing Maven project, run the following command from your project base directory:"
msgstr "要在现有的 Maven 项目中添加 Quarkus 安全扩展，请在项目基本目录下运行以下命令："

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Overview of supported authentication mechanisms"
msgstr "支持的身份验证机制概览"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid ""
"Some supported authentication mechanisms are built into Quarkus, while others require you to add an extension.\n"
"The following table maps specific authentication requirements to a supported mechanism that you can use in Quarkus:"
msgstr "Quarkus 内置了一些受支持的身份验证机制，而其他机制则需要添加扩展。下表将特定的身份验证要求与 Quarkus 支持的机制进行了映射："

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Authentication requirements and mechanisms"
msgstr "认证要求和机制"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Authentication requirement"
msgstr "认证要求"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Authentication mechanism"
msgstr "认证机制"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Username and password"
msgstr "用户名和密码"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "<<basic-auth-mechanism>>"
msgstr "<<basic-auth-mechanism>>"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Client certificate"
msgstr "客户证书"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "<<mutual-tls-auth-mechanism>>"
msgstr "<<mutual-tls-auth-mechanism>>"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Custom requirements"
msgstr "定制要求"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "<<custom-auth-mechanism>>"
msgstr "<<custom-auth-mechanism>>"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Bearer access token"
msgstr "承载访问令牌"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication], xref:security-jwt.adoc[JWT], xref:security-oauth2.adoc[OAuth2]"
msgstr "xref:security-oidc-bearer-token-authentication.adoc[OIDC 承载符令牌验证] 、 xref:security-jwt.adoc[JWT] 、 xref:security-oauth2.adoc[OAuth2]"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid ""
"Do not forget to install at least one extension that provides an `IdentityProvider` based on selected authentication requirements.\n"
"Please refer to the xref:security-basic-authentication-howto.adoc[Basic authentication guide] for example how to provide the `IdentityProvider` based on username and password."
msgstr "不要忘记安装至少一个扩展，根据选定的身份验证要求提供 `IdentityProvider` 。请参阅 xref:security-basic-authentication-howto.adoc[基本身份验证指南] ，了解如何根据用户名和密码提供 `IdentityProvider` 。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid ""
"If you use separate HTTP server to serve gRPC requests, <<custom-auth-mechanism>> is your only option.\n"
"Set the `quarkus.grpc.server.use-separate-server` configuration property to `false` so that you can use other mechanisms."
msgstr "如果使用单独的 HTTP 服务器发送 gRPC 请求， <<custom-auth-mechanism>> 是唯一的选择。将 `quarkus.grpc.server.use-separate-server` 配置属性设为 `false` ，以便使用其他机制。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Secure gRPC service"
msgstr "安全 gRPC 服务"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "The gRPC services can be secured with the xref:security-authorize-web-endpoints-reference.adoc#standard-security-annotations[standard security annotations] like in the example below:"
msgstr "gRPC 服务可以使用 xref:security-authorize-web-endpoints-reference.adoc#standard-security-annotations[标准安全注解] 来保护，如下例所示："

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid ""
"Most of the examples of the supported mechanisms sends authentication headers, please refer to the xref:grpc-service-consumption.adoc[gRPC Headers]\n"
"section of the Consuming a gRPC Service guide for more information about the gRPC headers."
msgstr "大部分受支持机制的示例都会发送身份验证标头，有关 gRPC 标头的更多信息，请参阅《使用 gRPC 服务》指南中的 xref:grpc-service-consumption.adoc[gRPC] 标头部分。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Basic authentication"
msgstr "基本认证"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Quarkus Security provides built-in authentication support for the xref:security-basic-authentication.adoc[Basic authentication]."
msgstr "Quarkus Security 为 xref:security-basic-authentication.adoc[基本认证] 提供内置认证支持。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Enable the Basic authentication."
msgstr "启用基本身份验证。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Mutual TLS authentication"
msgstr "相互 TLS 验证"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid ""
"Quarkus provides mutual TLS (mTLS) authentication so that you can authenticate users based on their X.509 certificates.\n"
"The simplest way to enforce authentication for all your gRPC services is described in the <<tls-with-mutual-auth>> section of this guide.\n"
"However, the Quarkus Security supports role mapping that you can use to perform even more fine-grained access control."
msgstr "Quarkus 提供了相互 TLS（mTLS）身份验证，因此你可以根据用户的 X.509 证书对其进行身份验证。本指南的 <<tls-with-mutual-auth>> 部分介绍了为所有 gRPC 服务执行身份验证的最简单方法。不过，Quarkus Security 支持角色映射，你可以用它来执行更精细的访问控制。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Adds certificate role mapping."
msgstr "添加证书角色映射。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Example of the role mapping file"
msgstr "角色映射文件示例"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Map the `testclient` certificate CN (Common Name) to the `SecurityIdentity` role `admin`."
msgstr "将 `testclient` 证书 CN（通用名）映射到 `SecurityIdentity` 角色 `admin` 。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Custom authentication"
msgstr "自定义验证"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "You can always implement one or more `GrpcSecurityMechanism` bean if above-mentioned mechanisms provided by Quarkus do no meet your needs."
msgstr "如果 Quarkus 提供的上述机制无法满足您的需求，您可以随时实施一个或多个 `GrpcSecurityMechanism` bean。"

#: _versions/3.8/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Example of custom `GrpcSecurityMechanism`"
msgstr "自定义示例 `GrpcSecurityMechanism`"
