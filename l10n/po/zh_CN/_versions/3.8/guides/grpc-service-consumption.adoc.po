msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "Consuming a gRPC Service"
msgstr "使用 gRPC 服务"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "gRPC clients can be injected in your application code."
msgstr "gRPC 客户端可以注入到应用程序代码中。"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid ""
"Consuming gRPC services requires the gRPC classes to be generated.\n"
"Place your `proto` files in `src/main/proto` and run `mvn compile`."
msgstr "使用 gRPC 服务需要生成 gRPC 类。将 `proto` 文件放入 `src/main/proto` ，然后运行 `mvn compile` 。"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "Stubs and Injection"
msgstr "存根和注入"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid ""
"gRPC generation provides several stubs, providing different ways to consume a gRPC service.\n"
"You can inject:"
msgstr "gRPC 生成提供了多个存根，提供了消费 gRPC 服务的不同方式。您可以注入"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "a service interface using the Mutiny API,"
msgstr "使用 Mutiny API 的服务接口、"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "a blocking stub using the gRPC API,"
msgstr "使用 gRPC API 的阻塞存根、"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "a reactive stub based on Mutiny,"
msgstr "一个基于 Mutiny 的反应式存根、"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "the gRPC `io.grpc.Channel`, that lets you create other types of stubs."
msgstr "gRPC `io.grpc.Channel` ，可以创建其他类型的存根。"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "A gRPC client injection point must be annotated with the `@GrpcClient` qualifier. This qualifier can be used to specify the name that is used to configure the underlying gRPC client. For example, if you set it to `hello-service`, configuring the host of the service is done using the `quarkus.grpc.clients.**hello-service**.host`."
msgstr "gRPC 客户端注入点必须使用 `@GrpcClient` 限定符注释。该限定符可用于指定用于配置底层 gRPC 客户端的名称。例如，如果将其设置为 `hello-service` ，则配置服务主机的工作将使用 `quarkus.grpc.clients. *hello-service* .host` ."

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "If the name is not specified via the `GrpcClient#value()` then the field name is used instead, e.g. `helloService` in this particular case."
msgstr "如果未通过 `GrpcClient#value()` 指定名称，则使用字段名称代替，例如 `helloService` 。"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid ""
"The stub class names are derived from the service name used in your `proto` file.\n"
"For example, if you use `Greeter` as a service name as in:"
msgstr "存根类名称源自 `proto` 文件中使用的服务名称。例如，如果您使用 `Greeter` 作为服务名，如以下所示："

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "Then the service interface name is: `hello.Greeter`, the Mutiny stub name is: `hello.MutinyGreeterGrpc.MutinyGreeterStub` and the blocking stub name is: `hello.GreeterGrpc.GreeterBlockingStub`."
msgstr "服务接口名称为 `hello.Greeter` ，Mutiny 存根名称为： `hello.MutinyGreeterGrpc.MutinyGreeterStub` ，阻塞存根名称为： `hello.GreeterGrpc.GreeterBlockingStub` 。"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "Examples"
msgstr "实例"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "Service Interface"
msgstr "服务界面"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "The service name is derived from the injection point - the field name is used. The `quarkus.grpc.clients.hello.host` property must be set."
msgstr "服务名称来自注入点 - 使用字段名称。必须设置 `quarkus.grpc.clients.hello.host` 属性。"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "Blocking Stub"
msgstr "封存存根"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "The `quarkus.grpc.clients.hello.host` property must be set."
msgstr "必须设置 `quarkus.grpc.clients.hello.host` 属性。"

#: _versions/3.8/guides/grpc-service-consumption.adoc
msgid "Handling streams"
msgstr "处理流"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "gRPC allows sending and receiving streams:"
msgstr "gRPC 允许发送和接收数据流："

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "Using the Mutiny stub, you can interact with these as follows:"
msgstr "使用 \"叛变 \"存根，您可以与它们进行如下交互："

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "Client configuration"
msgstr "客户端配置"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "For each gRPC service you inject in your application, you can configure the following attributes:"
msgstr "对于注入应用程序的每个 gRPC 服务，您都可以配置以下属性："

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "The `client-name` is the name set in the `@GrpcClient` or derived from the injection point if not explicitly defined."
msgstr "`client-name` 是 `@GrpcClient` 中设置的名称，如果没有明确定义，则是从注入点导出的名称。"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid ""
"The following examples uses _hello_ as the client name.\n"
"Don't forget to replace it with the name you used in the `@GrpcClient` annotation."
msgstr "以下示例使用 _hello_ 作为客户端名称。不要忘记将其替换为您在 `@GrpcClient` 注释中使用的名称。"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "When you enable `quarkus.grpc.clients.\"client-name\".use-quarkus-grpc-client`, you are then using the new Vert.x gRPC channel implementation, so not all configuration properties can still be applied. And currently there is no Stork support yet."
msgstr "启用 `quarkus.grpc.clients.\"client-name\".use-quarkus-grpc-client` 后，您将使用新的 Vert.x gRPC 通道实现，因此并非所有配置属性都能继续应用。而且目前还不支持 Stork。"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "When you enable `quarkus.grpc.clients.\"client-name\".xds.enabled`, it's the xDS that should handle most of the configuration above."
msgstr "启用 `quarkus.grpc.clients.\"client-name\".xds.enabled` 后，xDS 将处理上述大部分配置。"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "Enabling TLS"
msgstr "启用 TLS"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid ""
"To enable TLS, use the following configuration.\n"
"Note that all paths in the configuration may either specify a resource on the classpath\n"
"(typically from `src/main/resources` or its subfolder) or an external file."
msgstr "要启用 TLS，请使用以下配置。请注意，配置中的所有路径都可以指定 classpath 上的资源（通常来自 `src/main/resources` 或其子文件夹）或外部文件。"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "When SSL/TLS is configured, `plain-text` is automatically disabled."
msgstr "配置 SSL/TLS 时， `plain-text` 会自动禁用。"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "TLS with Mutual Auth"
msgstr "带相互认证的 TLS"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "To use TLS with mutual authentication, use the following configuration:"
msgstr "要使用带有相互验证功能的 TLS，请使用以下配置："

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "Client Stub Deadlines"
msgstr "客户存根截止日期"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid ""
"If you need to configure a deadline for a gRPC stub, i.e. to specify a duration of time after which the stub will always return the status error `DEADLINE_EXCEEDED`.\n"
"You can specify the deadline via the `quarkus.grpc.clients.\"service-name\".deadline` configuration property, e.g.:"
msgstr "如果需要为 gRPC 存根配置一个截止日期，即指定一个持续时间，在该时间之后，存根将始终返回状态错误 `DEADLINE_EXCEEDED` 。您可以通过 `quarkus.grpc.clients.\"service-name\".deadline` 配置属性指定截止时间，例如"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "Set the  deadline for all injected stubs."
msgstr "设置所有注入存根的截止时间。"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid ""
"Do not use this feature to implement an RPC timeout.\n"
"To implement an RPC timeout, either use Mutiny `call.ifNoItem().after(...)` or Fault Tolerance `@Timeout`."
msgstr "请勿使用此功能实现 RPC 超时。要实施 RPC 超时，请使用 Mutiny `call.ifNoItem().after(…​)` 或容错 `@Timeout` 。"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "gRPC Headers"
msgstr "gRPC 标头"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid ""
"Similarly to HTTP, alongside the message, gRPC calls can carry headers.\n"
"Headers can be useful e.g. for authentication."
msgstr "与 HTTP 类似，gRPC 调用除了信息外，还可以携带头信息。头信息对身份验证等很有用。"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "To set headers for a gRPC call, create a client with headers attached and then perform the call on this client:"
msgstr "要为 gRPC 调用设置标头，需要创建一个附加标头的客户端，然后在该客户端上执行调用："

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "Alter the client to make calls with the `extraHeaders` attached"
msgstr "更改客户端，以便在 `extraHeaders` 上拨打电话"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "Perform the call with the altered client. The original client remains unmodified"
msgstr "使用更改后的客户端执行呼叫。原始客户端保持不变"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "`GrpcClientUtils` work with all flavors of clients."
msgstr "`GrpcClientUtils` 与各种客户打交道"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "Client Interceptors"
msgstr "客户端拦截器"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid ""
"A gRPC client interceptor can be implemented by a CDI bean that also implements the `io.grpc.ClientInterceptor` interface.\n"
"You can annotate an injected client with `@io.quarkus.grpc.RegisterClientInterceptor` to register the specified interceptor for the particular client instance.\n"
"The `@RegisterClientInterceptor` annotation is repeatable.\n"
"Alternatively, if you want to apply the interceptor to any injected client then annotate the interceptor bean with `@io.quarkus.grpc.GlobalInterceptor`."
msgstr "gRPC 客户端拦截器可由同时实现 `io.grpc.ClientInterceptor` 接口的 CDI Bean 实现。您可以用 `@io.quarkus.grpc.RegisterClientInterceptor` 对注入的客户端进行注解，以便为特定客户端实例注册指定的拦截器。 `@RegisterClientInterceptor` 注解是可重复的。或者，如果您想将拦截器应用于任何注入的客户端，则可使用 `@io.quarkus.grpc.GlobalInterceptor` 对拦截器 Bean 进行注解。"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "Global Client Interceptor Example"
msgstr "全局客户端拦截器示例"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "This interceptor is applied to all injected gRPC clients."
msgstr "该拦截器适用于所有注入的 gRPC 客户端。"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "It's also possible to annotate a producer method as a global interceptor:"
msgstr "也可以将生产者方法注释为全局拦截器："

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "Check the https://grpc.github.io/grpc-java/javadoc/io/grpc/ClientInterceptor.html[ClientInterceptor JavaDoc] to properly implement your interceptor."
msgstr "查看 link:https://grpc.github.io/grpc-java/javadoc/io/grpc/ClientInterceptor.html[ClientInterceptor JavaDoc] 以正确实现拦截器。"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "`@RegisterClientInterceptor` Example"
msgstr "`@RegisterClientInterceptor` 示例"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "Registers the `MySpecialInterceptor` for this particular client."
msgstr "为该特定客户端注册 `MySpecialInterceptor` 。"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "When you have multiple client interceptors, you can order them by implementing the `jakarta.enterprise.inject.spi.Prioritized` interface:"
msgstr "当您有多个客户端拦截器时，可以通过实现 `jakarta.enterprise.inject.spi.Prioritized` 接口对它们进行排序："

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid ""
"Interceptors with the highest priority are called first.\n"
"The default priority, used if the interceptor does not implement the `Prioritized` interface, is `0`."
msgstr "优先级最高的拦截器会被优先调用。如果拦截器没有实现 `Prioritized` 接口，默认的优先级是 `0` 。"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "gRPC Client metrics"
msgstr "gRPC 客户端指标"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "Enabling metrics collection"
msgstr "启用指标收集"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid ""
"gRPC client metrics are automatically enabled when the application also uses the xref:telemetry-micrometer.adoc[`quarkus-micrometer`] extension.\n"
"Micrometer collects the metrics of all the gRPC clients used by the application."
msgstr "扩展时，gRPC 客户端指标会自动启用。 xref:telemetry-micrometer.adoc[quarkus-micrometer] 扩展。Micrometer 会收集应用程序使用的所有 gRPC 客户端的指标。"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "As an example, if you export the metrics to Prometheus, you will get:"
msgstr "例如，如果将指标导出到 Prometheus，就会得到以下结果："

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "The service name, method and type can be found in the _tags_."
msgstr "服务名称、方法和类型可在 _标签_ 中找到。"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "Disabling metrics collection"
msgstr "禁用指标收集"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "To disable the gRPC client metrics when `quarkus-micrometer` is used, add the following property to the application configuration:"
msgstr "要在使用 `quarkus-micrometer` 时禁用 gRPC 客户端指标，请在应用程序配置中添加以下属性："

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "Custom exception handling"
msgstr "自定义异常处理"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid ""
"If any of the gRPC services or server interceptors throw an (custom) exception, you can add your own https://github.com/quarkusio/quarkus/extensions/grpc/api/src/main/java/io/quarkus/grpc/ExceptionHandlerProvider.java[ExceptionHandlerProvider]\n"
"as a CDI bean in your application, to provide a custom handling of those exceptions."
msgstr "如果有任何 gRPC 服务或服务器拦截器抛出（自定义）异常，您可以在应用程序中添加自己的 link:https://github.com/quarkusio/quarkus/extensions/grpc/api/src/main/java/io/quarkus/grpc/ExceptionHandlerProvider.java[ExceptionHandlerProvider] 作为 CDI Bean，以便对这些异常进行自定义处理。"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "e.g."
msgstr "例如"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "Dev Mode"
msgstr "开发模式"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid ""
"By default, when starting the application in dev mode, a gRPC server is started, even if no services are configured.\n"
"You can configure the gRPC extension's dev mode behavior using the following properties."
msgstr "默认情况下，以开发模式启动应用程序时，即使未配置任何服务，也会启动 gRPC 服务器。你可以使用以下属性配置 gRPC 扩展的开发模式行为。"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "Inject mock clients"
msgstr "注入模拟客户端"

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "In your `@QuarkusTest`, you can use `@InjectMock` to inject the Mutiny client of a gRPC service:"
msgstr "在 `@QuarkusTest` 中，可以使用 `@InjectMock` 注入 gRPC 服务的 Mutiny 客户端："

#: _versions/3.8/guides/grpc-service-consumption.adoc
#, fuzzy
msgid "Only the Mutiny client can be _mocked_, channels, and other stubs cannot be mocked."
msgstr "只有 Mutiny 客户端可以被 _模拟_ ，通道和其他存根不能被模拟。"
