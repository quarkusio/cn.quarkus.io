msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
msgid "Using Apache Kafka with Schema Registry and Avro"
msgstr "使用Apache Kafka与模式仓库和Avro"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"This guide shows how your Quarkus application can use Apache Kafka, https://avro.apache.org/docs/current/[Avro] serialized\n"
"records, and connect to a schema registry (such as the https://docs.confluent.io/platform/current/schema-registry/index.html[Confluent Schema Registry] or https://www.apicur.io/registry/[Apicurio Registry])."
msgstr "本指南展示了 Quarkus 应用程序如何使用 Apache Kafka、 link:https://avro.apache.org/docs/current/[Avro] 序列化记录并连接到模式注册中心（如 link:https://docs.confluent.io/platform/current/schema-registry/index.html[Confluent 模式注册] 中心或 link:https://www.apicur.io/registry/[Apicurio] 注册中心）。"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"If you are not familiar with Kafka and Kafka in Quarkus in particular, consider\n"
"first going through the xref:kafka.adoc[Using Apache Kafka with Reactive Messaging] guide."
msgstr "如果你不熟悉 Kafka，尤其是 Quarkus 中的 Kafka，可以考虑先阅读《 xref:kafka.adoc[使用 Apache Kafka 与 Reactive Messaging] 》指南。"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
msgid "Prerequisites"
msgstr "先决条件"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
msgid "Architecture"
msgstr "应用结构"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"In this guide we are going to implement a REST resource, namely `MovieResource`, that\n"
"will consume movie DTOs and put them in a Kafka topic."
msgstr "在本指南中，我们将实现一个 REST 资源，即 `MovieResource` ，它将消耗电影 DTO 并将其放入 Kafka 主题中。"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"Then, we will implement a consumer that will consume and collect messages from the same topic.\n"
"The collected messages will be then exposed by another resource, `ConsumedMovieResource`, via\n"
"https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events[Server-Sent Events]."
msgstr "然后，我们将实现一个消费者，它将消费和收集来自同一主题的消息。收集到的消息将由另一个资源 `ConsumedMovieResource` 通过 link:https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events[服务器发送的事件] 公开。"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"The _Movies_ will be serialized and deserialized using Avro.\n"
"The schema, describing the _Movie_, is stored in Apicurio Registry.\n"
"The same concept applies if you are using the Confluent Avro _serde_ and Confluent Schema Registry."
msgstr "_电影_ 将使用 Avro 进行序列化和反序列化。描述 _电影_ 的模式存储在 Apicurio Registry 中。如果使用的是 Confluent Avro _serde_ 和 Confluent 模式注册表，概念也是一样的。"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
msgid "Solution"
msgstr "解决方案"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库可使用命令： `git clone {quickstarts-clone-url}` ，或者下载 {quickstarts-archive-url}[压缩包] 。"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid "The solution is located in the `kafka-avro-schema-quickstart` link:{quickstarts-tree-url}/kafka-avro-schema-quickstart[directory]."
msgstr "解决方案位于 `kafka-avro-schema-quickstart` link:{quickstarts-tree-url}/kafka-avro-schema-quickstart[目录] 中。"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
msgid "Creating the Maven Project"
msgstr "创建Maven项目"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新项目:"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"If you use Confluent Schema Registry, you don't need the `quarkus-apicurio-registry-avro` extension.\n"
"Instead, you need the `quarkus-confluent-registry-avro` extension and a few more dependencies.\n"
"See <<confluent>> for details."
msgstr "如果使用 Confluent Schema Registry，则不需要 `quarkus-apicurio-registry-avro` 扩展。相反，您需要 `quarkus-confluent-registry-avro` 扩展和其他一些依赖项。详情请参见 <<confluent>> 。"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid "Avro schema"
msgstr "Avro 模式"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"Apache Avro is a data serialization system. Data structures are described using schemas.\n"
"The first thing we need to do is to create a schema describing the `Movie` structure.\n"
"Create a file called `src/main/avro/movie.avsc` with the schema for our record (Kafka message):"
msgstr "Apache Avro 是一种数据序列化系统。数据结构使用模式来描述。我们需要做的第一件事就是创建一个描述 `Movie` 结构的模式。创建一个名为 `src/main/avro/movie.avsc` 的文件，其中包含我们的记录（Kafka 消息）的模式："

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid "If you build the project with:"
msgstr "如果使用"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"the `movies.avsc` will get compiled to a `Movie.java` file\n"
"placed in the `target/generated-sources/avsc` directory."
msgstr "`movies.avsc` 将被编译成 `Movie.java` 文件，放置在 `target/generated-sources/avsc` 目录中。"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"Take a look at the https://avro.apache.org/docs/current/spec.html#schemas[Avro specification] to learn more about\n"
"the Avro syntax and supported types."
msgstr "查看 link:https://avro.apache.org/docs/current/spec.html#schemas[Avro 规范] ，了解有关 Avro 语法和支持类型的更多信息。"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid "With Quarkus, there's no need to use a specific Maven plugin to process the Avro schema, this is all done for you by the `quarkus-avro` extension!"
msgstr "使用 Quarkus 时，无需使用特定的 Maven 插件来处理 Avro 模式，所有这些都由 `quarkus-avro` 扩展为您完成！"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid "If you run the project with:"
msgstr "如果运行项目时使用"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"the changes you do to the schema file will be\n"
"automatically applied to the generated Java files."
msgstr "您对模式文件所做的更改将自动应用于生成的 Java 文件。"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid "The `Movie` producer"
msgstr "`Movie` 制作人"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid "Having defined the schema, we can now jump to implementing the `MovieResource`."
msgstr "在定义了模式之后，我们就可以开始实施 `MovieResource` 。"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"Let's open the `MovieResource`, inject an https://quarkus.io/blog/reactive-messaging-emitter/[`Emitter`] of `Movie` DTO and implement a `@POST` method\n"
"that consumes `Movie` and sends it through the `Emitter`:"
msgstr "让我们打开 `MovieResource` ，注入一个 link:https://quarkus.io/blog/reactive-messaging-emitter/[Emitter] 的 `Movie` DTO，并实现一个 `@POST` 方法，该方法消耗 `Movie` 并通过 `Emitter` 发送："

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"Now, we need to _map_ the `movies` channel (the `Emitter` emits to this channel) to a Kafka topic.\n"
"To achieve this, edit the `application.properties` file, and add the following content:"
msgstr "现在，我们需要将 `movies` 频道（ `Emitter` 发送到该频道） _映射_ 到 Kafka 主题。为此，请编辑 `application.properties` 文件，并添加以下内容："

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"You might have noticed that we didn't define the `value.serializer`.\n"
"That's because Quarkus can xref:kafka.adoc#serialization-autodetection[autodetect] that `io.apicurio.registry.serde.avro.AvroKafkaSerializer` is appropriate here, based on the `@Channel` declaration, structure of the `Movie` type, and presence of the Apicurio Registry libraries.\n"
"We still have to define the `apicurio.registry.auto-register` property."
msgstr "你可能已经注意到，我们没有定义 `value.serializer` 。这是因为 Quarkus 可以根据 `@Channel` 声明、 `Movie` 类型的结构以及 Apicurio 注册库的存在， xref:kafka.adoc#serialization-autodetection[自动检测出] `io.apicurio.registry.serde.avro.AvroKafkaSerializer` 在这里是合适的。我们仍然需要定义 `apicurio.registry.auto-register` 属性。"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"If you use Confluent Schema Registry, you don't have to configure `value.serializer` either.\n"
"It is also detected automatically.\n"
"The Confluent Schema Registry analogue of `apicurio.registry.auto-register` is called `auto.register.schemas`.\n"
"It defaults to `true`, so it doesn't have to be configured in this example.\n"
"It can be explicitly set to `false` if you want to disable automatic schema registration."
msgstr "如果使用 Confluent 模式注册表，也无需配置 `value.serializer` 。它也会自动检测到。与 `apicurio.registry.auto-register` 类似的 Confluent Schema Registry 称为 `auto.register.schemas` 。默认设置为 `true` ，因此本例中无需配置。如果要禁用自动模式注册，可将其明确设置为 `false` 。"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid "The `Movie` consumer"
msgstr "`Movie` 消费者"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"So, we can write records into Kafka containing our `Movie` data.\n"
"That data is serialized using Avro.\n"
"Now, it's time to implement a consumer for them."
msgstr "因此，我们可以将包含 `Movie` 数据的记录写入 Kafka。这些数据将使用 Avro 进行序列化。现在，是时候为它们实现一个消费者了。"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"Let's create `ConsumedMovieResource` that will consume `Movie` messages\n"
"from the `movies-from-kafka` channel and will expose it via Server-Sent Events:"
msgstr "让我们创建 `ConsumedMovieResource` ，它将从 `movies-from-kafka` 频道获取 `Movie` 消息，并通过服务器发送的事件将其公开："

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"The last bit of the application's code is the configuration of the `movies-from-kafka` channel in\n"
"`application.properties`:"
msgstr "应用程序代码的最后一部分是 `application.properties` 中 `movies-from-kafka` 频道的配置："

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"You might have noticed that we didn't define the `value.deserializer`.\n"
"That's because Quarkus can xref:kafka.adoc#serialization-autodetection[autodetect] that `io.apicurio.registry.serde.avro.AvroKafkaDeserializer` is appropriate here, based on the `@Channel` declaration, structure of the `Movie` type, and presence of the Apicurio Registry libraries.\n"
"We don't have to define the `apicurio.registry.use-specific-avro-reader` property either, that is also configured automatically."
msgstr "你可能已经注意到，我们没有定义 `value.deserializer` 。这是因为 Quarkus 可以根据 `@Channel` 声明、 `Movie` 类型的结构以及 Apicurio 注册库的存在， xref:kafka.adoc#serialization-autodetection[自动检测出] `io.apicurio.registry.serde.avro.AvroKafkaDeserializer` 在这里是合适的。我们也不必定义 `apicurio.registry.use-specific-avro-reader` 属性，它也是自动配置的。"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"If you use Confluent Schema Registry, you don't have to configure `value.deserializer` or `specific.avro.reader` either.\n"
"They are both detected automatically."
msgstr "如果使用 Confluent 模式注册表，则无需配置 `value.deserializer` 或 `specific.avro.reader` 。它们都会被自动检测到。"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
msgid "Running the application"
msgstr "运行应用程序"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid "Start the application in dev mode:"
msgstr "以开发模式启动应用程序："

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"Kafka broker and Apicurio Registry instance are started automatically thanks to Dev Services.\n"
"See xref:kafka-dev-services.adoc[Dev Services for Kafka] and xref:apicurio-registry-dev-services.adoc[Dev Services for Apicurio Registry] for more details."
msgstr "通过 Dev Services，Kafka 代理和 Apicurio Registry 实例会自动启动。详情请参阅 xref:kafka-dev-services.adoc[Dev Services for Kafka] 和 xref:apicurio-registry-dev-services.adoc[Dev Services for Apicurio Registry] 。"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"You might have noticed that we didn't configure the schema registry URL anywhere.\n"
"This is because Dev Services for Apicurio Registry configures all Kafka channels in SmallRye Reactive Messaging to use the automatically started registry instance."
msgstr "你可能已经注意到，我们没有在任何地方配置模式注册表 URL。这是因为 Apicurio Registry Dev Services 会将 SmallRye Reactive Messaging 中的所有 Kafka 通道配置为使用自动启动的注册表实例。"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"Apicurio Registry, in addition to its native API, also exposes an endpoint that is API-compatible with Confluent Schema Registry.\n"
"Therefore, this automatic configuration works both for Apicurio Registry serde and Confluent Schema Registry serde."
msgstr "Apicurio Registry 除本地 API 外，还提供与 Confluent Schema Registry API 兼容的端点。因此，该自动配置对 Apicurio Registry serde 和 Confluent Schema Registry serde 都有效。"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"However, note that there's no Dev Services support for running Confluent Schema Registry itself.\n"
"If you want to use a running instance of Confluent Schema Registry, configure its URL, together with the URL of a Kafka broker:"
msgstr "不过，请注意 Dev Services 不支持运行 Confluent Schema Registry 本身。如果要使用 Confluent Schema Registry 的运行实例，请配置其 URL 和 Kafka 代理的 URL："

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid "In the second terminal, query the `ConsumedMovieResource` resource with `curl`:"
msgstr "在第二个终端，使用 `curl` 查询 `ConsumedMovieResource` 资源："

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid "In the third one, post a few movies:"
msgstr "第三，发布几部电影："

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid "Observe what is printed in the second terminal. You should see something along the lines of:"
msgstr "观察第二个终端中打印的内容。你应该看到如下内容"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
msgid "Running in JVM or Native mode"
msgstr "在JVM或本地模式下运行"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"When not running in dev or test mode, you will need to start your own Kafka broker and Apicurio Registry.\n"
"The easiest way to get them running is to use `docker-compose` to start the appropriate containers."
msgstr "不在开发或测试模式下运行时，需要启动自己的 Kafka 代理和 Apicurio 注册表。让它们运行的最简单方法是使用 `docker-compose` 启动相应的容器。"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"If you use Confluent Schema Registry, you already have a Kafka broker and Confluent Schema Registry instance running and configured.\n"
"You can ignore the `docker-compose` instructions here, as well as the Apicurio Registry configuration."
msgstr "如果使用 Confluent Schema Registry，您已经运行并配置了 Kafka 代理和 Confluent Schema Registry 实例。您可以忽略此处的 `docker-compose` 说明以及 Apicurio Registry 配置。"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid "Create a `docker-compose.yaml` file at the root of the project with the following content:"
msgstr "在项目根目录下创建 `docker-compose.yaml` 文件，内容如下："

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid "Before starting the application, let's first start the Kafka broker and Apicurio Registry:"
msgstr "在启动应用程序之前，让我们先启动 Kafka 代理和 Apicurio 注册表："

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"To stop the containers, use `docker-compose down`. You can also clean up\n"
"the containers with `docker-compose rm`"
msgstr "要停止容器运行，请使用 `docker-compose down` 。您还可以使用 `docker-compose rm`"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid "You can build the application with:"
msgstr "您可以通过以下方式构建应用程序"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid "And run it in JVM mode with:"
msgstr "并在 JVM 模式下运行它："

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"By default, the application tries to connect to a Kafka broker listening at `localhost:9092`.\n"
"You can configure the bootstrap server using: `java -Dkafka.bootstrap.servers=\\... -jar target/quarkus-app/quarkus-run.jar`"
msgstr "默认情况下，应用程序会尝试连接到监听地址为 `localhost:9092` 的 Kafka 代理。您可以使用以下命令配置引导服务器： `java -Dkafka.bootstrap.servers=... -jar target/quarkus-app/quarkus-run.jar`"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid "Specifying the registry URL on the command line is not very convenient, so you can add a configuration property only for the `prod` profile:"
msgstr "在命令行中指定注册表 URL 不太方便，因此只能为 `prod` 配置文件添加配置属性："

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid "You can build a native executable with:"
msgstr "您可以使用"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid "and run it with:"
msgstr "并用"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid "Testing the application"
msgstr "测试应用程序"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"As mentioned above, Dev Services for Kafka and Apicurio Registry automatically start and configure a Kafka broker and Apicurio Registry instance in dev mode and for tests.\n"
"Hence, we don't have to set up Kafka and Apicurio Registry ourselves.\n"
"We can just focus on writing the test."
msgstr "如上所述，Kafka 和 Apicurio Registry 的开发服务（Dev Services for Kafka and Apicurio Registry）会在开发模式和测试中自动启动和配置 Kafka 代理和 Apicurio Registry 实例。因此，我们不必自己设置 Kafka 和 Apicurio Registry。我们只需专注于编写测试。"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid "First, let's add test dependencies on REST Client and Awaitility to the build file:"
msgstr "首先，让我们在构建文件中添加 REST 客户端和 Awaitility 的测试依赖项："

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"In the test, we will send movies in a loop and check if the `ConsumedMovieResource` returns\n"
"what we send."
msgstr "在测试中，我们将循环发送影片，并检查 `ConsumedMovieResource` 是否返回我们发送的内容。"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"We modified the `MovieResourceTest` that was generated together with the project. This test class has a\n"
"subclass, `NativeMovieResourceIT`, that runs the same test against the native executable.\n"
"To run it, execute:"
msgstr "我们修改了与项目一起生成的 `MovieResourceTest` 。该测试类有一个子类 `NativeMovieResourceIT` ，可针对本地可执行文件运行相同的测试。要运行它，请执行"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid "Manual setup"
msgstr "手动设置"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid "If we couldn't use Dev Services and wanted to start a Kafka broker and Apicurio Registry instance manually, we would define a xref:getting-started-testing.adoc#quarkus-test-resource[QuarkusTestResourceLifecycleManager]."
msgstr "如果我们不能使用 Dev Services，而是想手动启动 Kafka 代理和 Apicurio Registry 实例，我们就需要定义一个 xref:getting-started-testing.adoc#quarkus-test-resource[QuarkusTestResourceLifecycleManager] 。"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid "Using compatible versions of the Apicurio Registry"
msgstr "使用兼容版本的 Apicurio 注册表"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"The `quarkus-apicurio-registry-avro` extension depends on recent versions of Apicurio Registry client,\n"
"and most versions of Apicurio Registry server and client are backwards compatible.\n"
"For some you need to make sure that the client used by Serdes is compatible with the server."
msgstr "`quarkus-apicurio-registry-avro` 扩展依赖于 Apicurio Registry 客户端的最新版本，而 Apicurio Registry 服务器和客户端的大多数版本都向后兼容。对于某些版本，你需要确保 Serdes 使用的客户端与服务器兼容。"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid "For example, with Apicurio dev service if you set the image name to use version `2.1.5.Final`:"
msgstr "例如，在使用 Apicurio dev service 时，如果将图像名称设置为使用版本 `2.1.5.Final` ："

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"You need to make sure that `apicurio-registry-serdes-avro-serde` dependency\n"
"and the REST client `apicurio-common-rest-client-vertx` dependency are set to compatible versions:"
msgstr "您需要确保 `apicurio-registry-serdes-avro-serde` 依赖项和 REST 客户端 `apicurio-common-rest-client-vertx` 依赖项设置为兼容版本："

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid "Known previous compatible versions for `apicurio-registry-client` and `apicurio-common-rest-client-vertx` are the following"
msgstr "`apicurio-registry-client` 和 `apicurio-common-rest-client-vertx` 的已知先前兼容版本如下"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid "`apicurio-registry-client` 2.1.5.Final with `apicurio-common-rest-client-vertx` 0.1.5.Final"
msgstr "`apicurio-registry-client` 2.1.5.Final 与 0.1.5.Final `apicurio-common-rest-client-vertx` "

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid "`apicurio-registry-client` 2.3.1.Final with `apicurio-common-rest-client-vertx` 0.1.13.Final"
msgstr "`apicurio-registry-client` 2.3.1.Final 与 0.1.13.Final `apicurio-common-rest-client-vertx` "

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid "Using the Confluent Schema Registry"
msgstr "使用 Confluent 模式注册表"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"If you want to use the Confluent Schema Registry, you need the `quarkus-confluent-registry-avro` extension, instead of the `quarkus-apicurio-registry-avro` extension.\n"
"Also, you need to add a few dependencies and a custom Maven repository to your `pom.xml` / `build.gradle` file:"
msgstr "如果要使用 Confluent 模式注册表，则需要 `quarkus-confluent-registry-avro` 扩展名，而不是 `quarkus-apicurio-registry-avro` 扩展名。此外，您还需要在 `pom.xml` / `build.gradle` 文件中添加一些依赖项和自定义 Maven 资源库："

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"In JVM mode, any version of `io.confluent:kafka-avro-serializer` can be used.\n"
"In native mode, Quarkus supports the following versions: `6.2.x`, `7.0.x`, `7.1.x`, `7.2.x`, `7.3.x`."
msgstr "在 JVM 模式下，可以使用 `io.confluent:kafka-avro-serializer` 的任何版本。在本地模式下，Quarkus 支持以下版本： `6.2.x` , `7.0.x` , `7.1.x` , `7.2.x` , `7.3.x` 。"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid "For version `7.4.x` and `7.5.x`, due to an issue with the Confluent Schema Serializer, you need to add another dependency:"
msgstr "对于 `7.4.x` 和 `7.5.x` 版，由于 Confluent Schema Serializer 存在问题，因此需要添加另一个依赖项："

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid "For any other versions, the native configuration may need to be adjusted."
msgstr "对于其他版本，可能需要调整本地配置。"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid "Avro code generation details"
msgstr "Avro 代码生成细节"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"In this guide we used the Quarkus code generation mechanism to generate Java files\n"
"from Avro schema."
msgstr "在本指南中，我们使用 Quarkus 代码生成机制从 Avro 模式生成 Java 文件。"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid "Under the hood, the mechanism uses `org.apache.avro:avro-compiler`."
msgstr "在引擎盖下，该机制使用 `org.apache.avro:avro-compiler` ."

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid "You can use the following configuration properties to alter how it works:"
msgstr "您可以使用以下配置属性来改变它的工作方式："

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"`avro.codegen.[avsc|avdl|avpr].imports` - a list of files or directories that should be compiled first thus making them\n"
"importable by subsequently compiled schemas. Note that imported files should not reference each other. All paths should be relative\n"
"to the `src/[main|test]/avro` directory, or `avro` sub-directory in any source directory configured by the build system. Passed as a comma-separated list."
msgstr "`avro.codegen.[avsc|avdl|avpr].imports` - 的文件或目录列表，这些文件或目录应首先编译，以便随后编译的模式可以导入。请注意，导入的文件不应相互引用。所有路径都应相对于 目录，或构建系统配置的任何源代码目录中的 子目录。以逗号分隔的列表形式传递。 `src/[main|test]/avro` `avro` "

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"`avro.codegen.stringType` - the Java type to use for Avro strings. May be one of `CharSequence`, `String` or\n"
"`Utf8`. Defaults to `String`"
msgstr "`avro.codegen.stringType` - 用于 Avro 字符串的 Java 类型。可以是 、 或 之一。默认为 `CharSequence` `String` `Utf8` `String`"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"`avro.codegen.createOptionalGetters` - enables generating the `getOptional...`\n"
"methods that return an Optional of the requested type. Defaults to `false`"
msgstr "`avro.codegen.createOptionalGetters` - 生成 方法，返回所请求类型的可选项。默认为 `getOptional…​` `false`"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid "`avro.codegen.enableDecimalLogicalType` - determines whether to use Java classes for decimal types, defaults to `false`"
msgstr "`avro.codegen.enableDecimalLogicalType` - 决定是否为十进制类型使用 Java 类，默认为 `false`"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"`avro.codegen.createSetters` - determines whether to create setters for the fields of the record.\n"
"Defaults to `false`"
msgstr "`avro.codegen.createSetters` - 决定是否为记录的字段创建设置器。默认为 `false`"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"`avro.codegen.gettersReturnOptional` - enables generating `get...` methods that\n"
"return an Optional of the requested type. Defaults to `false`"
msgstr "`avro.codegen.gettersReturnOptional` - 生成 方法，返回所请求类型的可选项。默认为 `get…​` `false`"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"`avro.codegen.optionalGettersForNullableFieldsOnly`, works in conjunction with `gettersReturnOptional` option.\n"
"If it is set, `Optional` getters will be generated only for fields that are nullable. If the field is mandatory,\n"
"regular getter will be generated. Defaults to `false`"
msgstr "`avro.codegen.optionalGettersForNullableFieldsOnly` 与 `gettersReturnOptional` 选项一起使用。如果设置了该选项，将只为可归零的字段生成 `Optional` 获取器。如果字段为必填字段，则将生成常规获取器。默认值为 `false`"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid "Further reading"
msgstr "更多阅读"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid "link:https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/3.4/kafka/kafka.html[SmallRye Reactive Messaging Kafka] documentation"
msgstr "link:https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/3.4/kafka/kafka.html[SmallRye Reactive Messaging Kafka] 文档"

#: _versions/3.8/guides/kafka-schema-registry-avro.adoc
#, fuzzy
msgid ""
"link:https://quarkus.io/blog/kafka-avro/[How to Use Kafka, Schema Registry and Avro with Quarkus] - a blog post on which\n"
"the guide is based. It gives a good introduction to Avro and the concept of schema registry"
msgstr "link:https://quarkus.io/blog/kafka-avro/[如何在 Quarkus 中使用 Kafka、模式注册表和 Avro] --本指南就是基于这篇博文编写的。它很好地介绍了 Avro 和模式注册表的概念"
