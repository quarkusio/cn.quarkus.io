msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "SmallRye GraphQL"
msgstr "SmallRye GraphQL"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"This guide demonstrates how your Quarkus application can use https://github.com/smallrye/smallrye-graphql/[SmallRye GraphQL],\n"
"an implementation of the https://github.com/eclipse/microprofile-graphql/[MicroProfile GraphQL] specification."
msgstr "本指南演示了 Quarkus 应用程序如何使用 link:https://github.com/eclipse/microprofile-graphql/[MicroProfile] link:https://github.com/smallrye/smallrye-graphql/[GraphQL] 规范的实现-- link:https://github.com/smallrye/smallrye-graphql/[SmallRye] GraphQL。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "As the https://www.graphql.org/[GraphQL] specification website states:"
msgstr "正如 link:https://www.graphql.org/[GraphQL] 规范网站所述："

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data.\n"
"GraphQL provides a complete and understandable description of the data in your API,\n"
"gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time,\n"
"and enables powerful developer tools."
msgstr "GraphQL 是应用程序接口的查询语言，也是利用现有数据实现这些查询的运行时。GraphQL 对 API 中的数据进行了完整、易懂的描述，使客户能够准确地询问他们所需的信息，使 API 更容易随时间推移而发展，并提供了功能强大的开发人员工具。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"**GraphQL** was originally developed by **Facebook** in 2012 and has been\n"
"an open standard since 2015."
msgstr "*GraphQL* 最初由 *Facebook* 于 2012 年开发，自 2015 年起成为开放标准。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"GraphQL is not a replacement for REST API specification but merely an\n"
"alternative. Unlike REST, GraphQL API's have the ability to benefit the client by:"
msgstr "GraphQL 并非 REST API 规范的替代品，而只是一种选择。与 REST 不同，GraphQL API 能够通过以下方式让客户受益："

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Preventing Over-fetching and Under-fetching"
msgstr "防止过度获取和获取不足"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"REST APIs are server-driven fixed data responses that cannot be determined by\n"
"the client. Although the client does not require all the fields the client\n"
"must retrieve all the data hence `Over-fetching`. A client may also require\n"
"multiple REST API calls according to the first call (HATEOAS) to retrieve\n"
"all the data that is required thereby `Under-fetching`."
msgstr "REST API 是服务器驱动的固定数据响应，客户端无法确定。虽然客户端不需要所有字段，但客户端必须检索所有数据，因此 `Over-fetching` 。客户端也可能需要根据第一次调用（HATEOAS）多次调用 REST API 才能检索到所需的全部数据，因此 `Under-fetching` 。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "API Evolution"
msgstr "应用程序接口的演变"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"Since GraphQL API's returns data that are requested by the client adding additional\n"
"fields and capabilities to existing API will not create breaking changes to existing\n"
"clients."
msgstr "由于 GraphQL API 返回的数据是客户端请求的，因此在现有 API 中添加额外字段和功能不会对现有客户端造成破坏性更改。"

#: _versions/3.8/guides/smallrye-graphql.adoc
msgid "Prerequisites"
msgstr "先决条件"

#: _versions/3.8/guides/smallrye-graphql.adoc
msgid "Architecture"
msgstr "应用结构"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"In this guide, we build a simple GraphQL application that exposes a GraphQL API\n"
"at `/graphql`."
msgstr "在本指南中，我们将构建一个简单的 GraphQL 应用程序，在 `/graphql` 上公开 GraphQL API。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "This example was inspired by a popular GraphQL API."
msgstr "这个示例的灵感来自于一个流行的 GraphQL API。"

#: _versions/3.8/guides/smallrye-graphql.adoc
msgid "Solution"
msgstr "解决方案"

#: _versions/3.8/guides/smallrye-graphql.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#: _versions/3.8/guides/smallrye-graphql.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库可使用命令： `git clone {quickstarts-clone-url}` ，或者下载 {quickstarts-archive-url}[压缩包] 。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "The solution is located in the `microprofile-graphql-quickstart` link:{quickstarts-tree-url}/microprofile-graphql-quickstart[directory]."
msgstr "解决方案位于 `microprofile-graphql-quickstart` link:{quickstarts-tree-url}/microprofile-graphql-quickstart[目录] 中。"

#: _versions/3.8/guides/smallrye-graphql.adoc
msgid "Creating the Maven Project"
msgstr "创建Maven项目"

#: _versions/3.8/guides/smallrye-graphql.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新项目:"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "This command generates a project, importing the `smallrye-graphql` extension."
msgstr "该命令生成一个项目，导入 `smallrye-graphql` 扩展名。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"If you already have your Quarkus project configured, you can add the `smallrye-graphql` extension\n"
"to your project by running the following command in your project base directory:"
msgstr "如果已经配置了 Quarkus 项目，可以在项目基本目录下运行以下命令，将 `smallrye-graphql` 扩展添加到项目中："

#: _versions/3.8/guides/smallrye-graphql.adoc
msgid "This will add the following to your build file:"
msgstr "这会在你的构建文件中添加以下内容:"

#: _versions/3.8/guides/smallrye-graphql.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.8/guides/smallrye-graphql.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Preparing an Application: GraphQL API"
msgstr "准备应用程序：GraphQL API"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "In this section we will start creating the GraphQL API."
msgstr "在本节中，我们将开始创建 GraphQL API。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "First, create the following entities representing a film from a galaxy far, far away:"
msgstr "首先，创建以下实体，代表一部来自遥远星系的电影："

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "For readability we use classes with public fields, but classes with private fields with public getters and setters will also work."
msgstr "为了便于阅读，我们使用带有公共字段的类，但带有公共获取器和设置器的私有字段的类也可以使用。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"The classes we have just created describe the GraphQL schema which is a\n"
"set of possible data (objects, fields, relationships) that a client can access."
msgstr "我们刚刚创建的类描述了 GraphQL 模式，这是一组客户端可以访问的可能数据（对象、字段、关系）。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Let's continue with an example CDI bean, that would work as a repository:"
msgstr "让我们继续举例说明 CDI Bean，它可以用作存储库："

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Now, let's create our first GraphQL API."
msgstr "现在，让我们创建第一个 GraphQL API。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Edit the `org.acme.microprofile.graphql.FilmResource` class as following:"
msgstr "编辑 `org.acme.microprofile.graphql.FilmResource` 类如下："

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "`@GraphQLApi` annotation indicates that the CDI bean will be a GraphQL endpoint"
msgstr "`@GraphQLApi` 注释表明 CDI Bean 将是一个 GraphQL 端点"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "`@Query` annotation defines that this method will be queryable with the name `allFilms`"
msgstr "`@Query` 注释定义了该方法可通过名为 `allFilms`"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Documentation of the queryable method"
msgstr "可查询方法的文件"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"The value of the `@Query` annotation is optional and would implicitly\n"
"be defaulted to the method name if absent."
msgstr "`@Query` 注解的值是可选的，如果没有，则默认为方法名称。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "This way we have created our first queryable API which we will later expand."
msgstr "这样，我们就创建了第一个可查询的应用程序接口，稍后我们将对其进行扩展。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Launch"
msgstr "启动"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Launch the quarkus application in dev mode:"
msgstr "在开发模式下启动 quarkus 应用程序："

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Introspect"
msgstr "自省"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "The full schema of the GraphQL API can be retrieved by calling the following:"
msgstr "可以通过调用以下命令获取 GraphQL API 的完整模式："

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "The server will return the complete schema of the GraphQL API."
msgstr "服务器将返回 GraphQL API 的完整模式。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "GraphQL UI"
msgstr "GraphQL UI"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Experimental - not included in the MicroProfile specification"
msgstr "试验性 - 未包含在微配置文件规范中"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "GraphQL UI is a great tool permitting easy interaction with your GraphQL APIs."
msgstr "GraphQL UI 是一款出色的工具，可轻松与 GraphQL API 进行交互。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"The Quarkus `smallrye-graphql` extension ships with https://github.com/graphql/graphiql/blob/main/packages/graphiql/README.md[GraphiQL] and enables it by default in `dev` and `test` modes,\n"
"but it can also be explicitly configured for `production` mode as well, by setting the `quarkus.smallrye-graphql.ui.always-include` configuration property to `true`."
msgstr "Quarkus `smallrye-graphql` 扩展程序随 link:https://github.com/graphql/graphiql/blob/main/packages/graphiql/README.md[GraphiQL] 一起提供，默认在 `dev` 和 `test` 模式下启用，但也可以通过将 `quarkus.smallrye-graphql.ui.always-include` 配置属性设置为 `true` ，显式配置为 `production` 模式。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "The GraphQL UI can be accessed from http://localhost:8080/q/graphql-ui/ ."
msgstr "可从 http://localhost:8080/q/graphql-ui/ 访问 GraphQL 用户界面。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "image:graphql-ui-screenshot01.png[alt=GraphQL UI]"
msgstr "image:graphql-ui-screenshot01.png[alt=\"GraphQL UI\"]"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Have a look at the link:security-authorize-web-endpoints-reference[Authorization of Web Endpoints] Guide on how to add/remove security for the GraphQL UI."
msgstr "请参阅《 link:security-authorize-web-endpoints-reference[Web 端点授权] 指南》，了解如何为 GraphQL UI 添加/删除安全性。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Query the GraphQL API"
msgstr "查询 GraphQL API"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Now visit the GraphQL UI page that has been deployed in `dev` mode."
msgstr "现在访问以 `dev` 模式部署的 GraphQL UI 页面。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Enter the following query to the GraphQL UI and press the `play` button:"
msgstr "在 GraphQL UI 中输入以下查询，然后按 `play` 按钮："

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"Since our query contains all the fields in the `Film` class\n"
"we will retrieve all the fields in our response. Since GraphQL API\n"
"responses are client determined, the client can choose which fields\n"
"it will require."
msgstr "由于我们的查询包含 `Film` 类中的所有字段，因此我们将在响应中检索所有字段。由于 GraphQL API 的响应由客户端决定，因此客户端可以选择需要哪些字段。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"Let's assume that our client only requires `title` and `releaseDate`\n"
"making the previous call to the API `Over-fetching` of unnecessary\n"
"data."
msgstr "假设我们的客户只需要 `title` 和 `releaseDate` ，那么之前调用 API `Over-fetching` 时就会产生不必要的数据。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Enter the following query into the GraphQL UI and hit the `play` button:"
msgstr "在 GraphQL UI 中输入以下查询，然后点击 `play` 按钮："

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"Notice in the response we have only retrieved the required fields.\n"
"Therefore, we have prevented `Over-fetching`."
msgstr "请注意，我们只检索了响应中的必填字段。因此，我们防止了 `Over-fetching` 。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"Let's continue to expand our GraphQL API by adding the following to the\n"
"`FilmResource` class."
msgstr "让我们在 `FilmResource` 类中添加以下内容，继续扩展我们的 GraphQL API。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"Notice how we have excluded the value in the `@Query` annotation.\n"
"Therefore, the name of the query is implicitly set as the method name\n"
"excluding the `get`."
msgstr "请注意我们是如何排除 `@Query` 注释中的值的。因此，查询的名称被隐式设置为方法名称，不包括 `get` 。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"This query will allow the client to retrieve the film by id, and the `@Name` annotation on the parameter\n"
"changes the parameter name to `filmId` rather than the default `id` that it would be if you omit the `@Name` annotation."
msgstr "该查询允许客户端按 ID 检索影片，参数上的 `@Name` 注释会将参数名称改为 `filmId` ，而不是省略 `@Name` 注释后的默认名称 `id` 。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Enter the following into the `GraphQL UI` and make a request."
msgstr "在 `GraphQL UI` 中输入以下内容并提出申请。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"The `film` query method requested fields can be determined\n"
"as such in our previous example. This way we can retrieve individual\n"
"film information."
msgstr "`film` 查询方法所要求的字段可以按照我们前面的例子来确定。这样，我们就可以检索到个别影片的信息。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"However, say our client requires both films with filmId `0` and `1`.\n"
"In a REST API the client would have to make two calls to the API.\n"
"Therefore, the client would be `Under-fetching`."
msgstr "但是，如果我们的客户需要两部影片，影片 ID 分别为 `0` 和 `1` 。在 REST API 中，客户必须对 API 进行两次调用。因此，客户端将 `Under-fetching` 。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "In GraphQL, it is possible to make multiple queries at once."
msgstr "在 GraphQL 中，可以同时进行多个查询。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Enter the following into the `GraphQL UI` to retrieve two films:"
msgstr "在 `GraphQL UI` 中输入以下内容，即可检索到两部电影："

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "This enabled the client to fetch the required data in a single request."
msgstr "这样，客户端就能在一次请求中获取所需的数据。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Expanding the API"
msgstr "扩展应用程序接口"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"Until now, we have created a GraphQL API to retrieve film data.\n"
"We now want to enable the clients to retrieve the `Hero` data of the `Film`."
msgstr "到目前为止，我们已经创建了一个 GraphQL API 来检索电影数据。现在，我们希望让客户端能够检索 `Film` 的 `Hero` 数据。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Add the following to our `FilmResource` class:"
msgstr "在我们的 `FilmResource` 类中添加以下内容："

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Enable `List<Hero>` data to be added to queries that respond with `Film`"
msgstr "使 `List<Hero>` 数据能够添加到以下列方式响应的查询中 `Film`"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"By adding this method we have effectively changed the schema of the GraphQL API.\n"
"Although the schema has changed the previous queries will still work.\n"
"Since we only expanded the API to be able to retrieve the `Hero` data of the `Film`."
msgstr "通过添加此方法，我们实际上改变了 GraphQL API 的模式。虽然模式发生了变化，但之前的查询仍然有效。因为我们只是扩展了 API，以便能够检索 `Film` 的 `Hero` 数据。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Enter the following into the `GraphQL UI` to retrieve the film and hero data."
msgstr "在 `GraphQL UI` 中输入以下内容，以获取影片和英雄的数据。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "The response now includes the heroes of the film."
msgstr "现在的反应包括影片中的英雄们。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Batching"
msgstr "配料"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"When you are exposing a `Collection` return like our `getAllFilms`, you might want to use the batch form of the above, to more efficiently fetch\n"
"the heroes:"
msgstr "如果您要公开 `Collection` 返回值（如我们的 `getAllFilms` ），您可能需要使用上述的批处理形式，以便更有效地获取英雄："

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Here receive the films as a batch, allowing you to fetch the corresponding heroes."
msgstr "在这里，您可以批量接收影片，并获取相应的英雄人物。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Non blocking"
msgstr "非阻塞性"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Queries can be made reactive by using `Uni` as a return type, or adding `@NonBlocking` to the method:"
msgstr "通过使用 `Uni` 作为返回类型，或在方法中添加 `@NonBlocking` ，可以使查询具有反应性："

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Or you can use `@NonBlocking`:"
msgstr "或者您也可以使用 `@NonBlocking` ："

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Using `Uni` or `@NonBlocking` means that the request will be executed on Event-loop threads rather than Worker threads."
msgstr "使用 `Uni` 或 `@NonBlocking` 意味着请求将在事件循环线程而非 Worker 线程上执行。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "You can mix Blocking and Non-blocking in one request,"
msgstr "您可以在一个请求中混合使用阻塞和非阻塞功能、"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Above will fetch the film on the event-loop threads, but switch to the worker thread to fetch the heroes."
msgstr "以上将在事件循环线程上获取影片，但会切换到工作线程来获取英雄。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Abstract Types"
msgstr "抽象类型"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"The current schema is simple with only two concrete types, `Hero` and `Film`.\n"
"Now we want to expand our API with additional types and add some abstractions\n"
"that make interacting with them easy for clients."
msgstr "当前的模式很简单，只有两个具体类型： `Hero` 和 `Film` 。现在，我们希望使用更多类型来扩展我们的应用程序接口，并添加一些抽象概念，使客户可以轻松地与它们交互。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Interfaces"
msgstr "接口"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Let's give our heroes some allies."
msgstr "让我们给英雄们一些盟友吧。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "First, create a new entity to represent our `Ally`."
msgstr "首先，创建一个新实体来表示我们的 `Ally` 。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Update the `GalaxyService` to have some allies."
msgstr "更新 `GalaxyService` ，以便拥有一些盟友。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Let's also update `FilmResource` to allow clients to query for all allies:"
msgstr "让我们同时更新 `FilmResource` ，允许客户查询所有盟友："

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"Notice that `Ally` has a some of the same fields as a `Hero`.\n"
"To better make queries easier for clients, let's create an abstraction for any character."
msgstr "请注意， `Ally` 与 `Hero` 有一些相同的字段。为了让客户端更容易查询，我们为任何字符创建一个抽象概念。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Create a new Java interface that defines our common character traits."
msgstr "创建一个新的 Java 界面，定义我们共同的性格特征。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Getters defined in an interface will define the GraphQL fields that it contains"
msgstr "在接口中定义的获取器将定义其包含的 GraphQL 字段"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Now, update our `Hero` and `Ally` entities to implement this interface."
msgstr "现在，更新我们的 `Hero` 和 `Ally` 实体以实现该接口。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Because interfaces can't define fields, we have to implement the getters"
msgstr "因为接口不能定义字段，所以我们必须实现获取器"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"By adding an interface and updating existing entities to implement it, we have effectively changed the schema.\n"
"The updated schema will now include the new `Ally` type and `Character` interface."
msgstr "通过添加接口和更新现有实体以实现该接口，我们实际上改变了模式。更新后的模式将包括新的 `Ally` 类型和 `Character` 接口。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "The `Character` interface was defined with the getters as fields"
msgstr "`Character` 界面的获取器定义为字段"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "The `Ally` type was added and it implements `Character`"
msgstr "添加了 `Ally` 类型，它实现了 `Character`"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "The `Hero` type was updated to implement `Character`"
msgstr "更新了 `Hero` 类型，以实现 `Character`"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Update our `GalaxyService` to provide all characters."
msgstr "更新我们的 `GalaxyService` ，以提供所有字符。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Now we can allow clients to query for all characters, not just heroes."
msgstr "现在，我们可以允许客户查询所有角色，而不仅仅是英雄。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Unions"
msgstr "工会"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"So far, our API has only allowed us to query directly for an entity or list of entities.\n"
"Now we want to allow clients to search all of our entities.\n"
"While `Hero` and `Ally` have a shared abstract type of `Character`, there is no abstraction that also includes `Film`."
msgstr "到目前为止，我们的应用程序接口只允许我们直接查询实体或实体列表。现在，我们希望允许客户搜索所有实体。虽然 `Hero` 和 `Ally` 有一个共享的抽象类型 `Character` ，但没有一个抽象类型也包括 `Film` 。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "First, create this new abstract type representing the possible return types for a search result."
msgstr "首先，创建这个新的抽象类型，代表搜索结果的可能返回类型。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "`@Union` is required to indicate this Java interface represents a GraphQL union, not a GraphQL interface"
msgstr "`@Union` 需要指明该 Java 接口代表 GraphQL 联合，而不是 GraphQL 接口"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"The Java interface representing the GraphQL union does not have to be empty,\n"
"but any getters defined will not explicitly change the GraphQL schema."
msgstr "表示 GraphQL 联合的 Java 接口不必为空，但定义的任何获取器都不会显式更改 GraphQL 模式。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Update our entities to implement `SearchResult`:"
msgstr "更新我们的实体，以实施 `SearchResult` ："

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"We can also leverage inheritance and have `interface Character extends SearchResult`.\n"
"This will result in all implementations of `Character` being added as members of the `SearchResult` union in the schema."
msgstr "我们还可以利用继承性，让 `interface Character extends SearchResult` 。这将导致 `Character` 的所有实现都被添加为模式中 `SearchResult` 联盟的成员。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Update `GalaxyService` to provide search:"
msgstr "更新 `GalaxyService` 以提供搜索："

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "We are able to use the `Character` interface because the `SearchResult` union contains members that implement it."
msgstr "我们之所以能使用 `Character` 接口，是因为 `SearchResult` 联盟包含了实现该接口的成员。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Mutations"
msgstr "突变"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Mutations are used when data is created, updated or deleted."
msgstr "在创建、更新或删除数据时会使用突变。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Let's now add the ability to add and delete heroes to our GraphQL API."
msgstr "现在，让我们为 GraphQL API 添加添加和删除英雄的功能。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Enter the following into the `GraphQL UI` to insert a `Hero`:"
msgstr "在 `GraphQL UI` 中输入以下内容，以插入 `Hero` ："

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "By using this mutation we have created a `Hero` entity in our service."
msgstr "通过这种突变，我们在服务中创建了一个 `Hero` 实体。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"Notice how in the response we have retrieved the `name` and `surname`\n"
"of the created Hero. This is because we selected to retrieve\n"
"these fields in the response within the `{ }` in the mutation query.\n"
"This can easily be a server side generated field that the client may require."
msgstr "请注意我们是如何在响应中检索到已创建 Hero 的 `name` 和 `surname` 的。这是因为我们在突变查询的 `{ }` 中选择了在响应中检索这些字段。这很容易成为客户端可能需要的服务器端生成字段。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Let's now try deleting an entry:"
msgstr "现在让我们试着删除一个条目："

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"Similar to the `createHero` mutation method we also retrieve the `name` and\n"
"`surname` of the hero we have deleted which is defined in `{ }`."
msgstr "与 `createHero` 突变方法类似，我们也会检索我们删除的英雄的 `name` 和 `surname` ，它们定义在 `{ }` 中。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Subscriptions"
msgstr "订阅"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"Subscriptions allow you to subscribe to a query. It allows you to receive events and is using web sockets.\n"
"See the https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md[GraphQL over WebSocket Protocol] spec for more details."
msgstr "订阅允许您订阅查询。它允许您使用 Web 套接字接收事件。更多详情，请参阅 link:https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md[GraphQL over WebSocket Protocol] 规范。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Example: We want to know when new Heroes are being created:"
msgstr "举例说明：我们想知道何时创建新英雄："

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "The `Multi` processor that will broadcast any new ``Hero``es"
msgstr "`Multi` 处理器将广播任何新的 `Hero` es"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "When adding a new `Hero`, also broadcast it"
msgstr "在添加新的 `Hero` 时，也要进行广播"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Make the stream available in the schema and as a WebSocket during runtime"
msgstr "在模式中提供流，并在运行时作为 WebSocket 提供"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Any client that now connect to the `/graphql` WebSocket connection will receive events on new Heroes being created:"
msgstr "现在连接到 `/graphql` WebSocket 连接的任何客户端都会收到创建新英雄的事件："

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Creating Queries by fields"
msgstr "按字段创建查询"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"Queries can also be done on individual fields. For example, let's\n"
"create a method to query heroes by their last name."
msgstr "也可以对单个字段进行查询。例如，让我们创建一个按姓氏查询英雄的方法。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"By using the `@DefaultValue` annotation we have determined that the surname value\n"
"will be `Skywalker` when the parameter is not provided."
msgstr "通过使用 `@DefaultValue` 注释，我们确定当没有提供参数时，姓氏值将是 `Skywalker` 。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Test the following queries with the `GraphQL UI`:"
msgstr "使用 `GraphQL UI` 测试以下查询："

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Context"
msgstr "背景"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "You can get information about the GraphQL request anywhere in your code, using this experimental, SmallRye specific feature:"
msgstr "使用 SmallRye 特有的这一试验性功能，您可以在代码的任何地方获取有关 GraphQL 请求的信息："

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "or as a parameter in your method if you are in the `GraphQLApi` class, for instance:"
msgstr "或作为方法中的参数（如果您在 `GraphQLApi` 类中）："

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "The context object allows you to get:"
msgstr "通过上下文对象可以获取"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "the original request (Query/Mutation)"
msgstr "原始请求（查询/突变）"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "the arguments"
msgstr "论点"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "the path"
msgstr "径"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "the selected fields"
msgstr "所选字段"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "any variables"
msgstr "任何变量"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "This allows you to optimize the downstream queries to the datastore."
msgstr "这样就可以优化对数据存储的下游查询。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "See the https://javadoc.io/doc/io.smallrye/smallrye-graphql-api/latest/io/smallrye/graphql/api/Context.html[JavaDoc] for more details."
msgstr "更多详情，请参阅 link:https://javadoc.io/doc/io.smallrye/smallrye-graphql-api/latest/io/smallrye/graphql/api/Context.html[JavaDoc] 。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "GraphQL-Java"
msgstr "GraphQL-Java"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "This context object also allows you to fall down to the underlying https://www.graphql-java.com/[graphql-java] features by using the leaky abstraction:"
msgstr "通过该上下文对象，您还可以使用泄漏抽象来实现 link:https://www.graphql-java.com/[graphql-java] 的底层功能："

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "You can also get access to the underlying `graphql-java` during schema generation, to add your own features directly:"
msgstr "您还可以在模式生成过程中访问底层 `graphql-java` ，直接添加自己的功能："

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "By using the `@Observer` you can add anything to the Schema builder."
msgstr "通过使用 `@Observer` ，您可以在模式生成器中添加任何内容。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "For the Observer to work, you need to enable events. In `application.properties`, add the following: `quarkus.smallrye-graphql.events.enabled=true`."
msgstr "要使观察者正常工作，您需要启用事件。在 `application.properties` 中，添加以下内容： `quarkus.smallrye-graphql.events.enabled=true` ."

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Adapting"
msgstr "适应"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Adapt to Scalar"
msgstr "适应标量"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"Another SmallRye specific experimental feature, allows you to map an existing scalar (that is mapped by the implementation to a certain Java type) to another type,\n"
"or to map complex object, that would typically create a `Type` or `Input` in GraphQL, to an existing scalar."
msgstr "SmallRye 的另一项特定实验功能允许您将现有标量（由实现映射到特定 Java 类型）映射到另一种类型，或将复杂对象（通常会在 GraphQL 中创建 `Type` 或 `Input` ）映射到现有标量。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Adapting an existing Scalar to another type:"
msgstr "将现有的标量调整为另一种类型："

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Above will adapt the `Long` java type to an `Int` Scalar type, rather than the https://download.eclipse.org/microprofile/microprofile-graphql-1.0/microprofile-graphql.html#scalars[default] `BigInteger`."
msgstr "以上将把 `Long` java 类型调整为 `Int` Scalar 类型，而不是 link:https://download.eclipse.org/microprofile/microprofile-graphql-1.0/microprofile-graphql.html#scalars[默认的] `BigInteger` 。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Adapting a complex object to a Scalar type:"
msgstr "将复杂对象调整为标量类型："

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "This will, rather than creating a `Type` or `Input` in GraphQL, map to a String scalar."
msgstr "这将取代在 GraphQL 中创建 `Type` 或 `Input` ，而是映射到一个字符串标量。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"To be able to do the above, the `Phone` object needs to have a constructor that takes a String (or `Int` / `Date` / etc.),\n"
"or have a setter method for the String  (or `Int` / `Date` / etc.),\n"
"or have a `fromString` (or `fromInt` / `fromDate` - depending on the Scalar type) static method."
msgstr "要实现上述功能， `Phone` 对象需要有一个接收字符串（或 `Int` / `Date` / 等）的构造函数，或有一个字符串（或 `Int` / `Date` / 等）的设置方法，或有一个 `fromString` （或 `fromInt` / `fromDate` - 取决于标量类型）静态方法。"

#: _versions/3.8/guides/smallrye-graphql.adoc
msgid "For example:"
msgstr "例如："

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "See more about the `@AdaptToScalar` feature in the https://javadoc.io/static/io.smallrye/smallrye-graphql-api/1.5.0/io/smallrye/graphql/api/AdaptToScalar.html[JavaDoc]."
msgstr "有关 `@AdaptToScalar` 功能的更多信息，请参阅 link:https://javadoc.io/static/io.smallrye/smallrye-graphql-api/1.5.0/io/smallrye/graphql/api/AdaptToScalar.html[JavaDoc] 。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Adapt with"
msgstr "适应"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Another option for more complex cases is to provide an Adapter. You can then do the mapping yourself in the adapter."
msgstr "对于更复杂的情况，另一种方法是提供适配器。然后，您就可以在适配器中自行完成映射。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "See more about the `AdaptWith` feature in the https://javadoc.io/static/io.smallrye/smallrye-graphql-api/1.5.0/io/smallrye/graphql/api/AdaptWith.html[JavaDoc]."
msgstr "有关 `AdaptWith` 功能的更多信息，请参阅 link:https://javadoc.io/static/io.smallrye/smallrye-graphql-api/1.5.0/io/smallrye/graphql/api/AdaptWith.html[JavaDoc] 。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "`@JsonbTypeAdapter` is also supported."
msgstr "`@JsonbTypeAdapter` 还支持"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Built-in support for Maps"
msgstr "内置地图支持"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"By default, due to the fact that maps are hard to model in a schema (as the keys and values can be dynamic at runtime) GraphQL does not support maps by default.\n"
"Using the above adaption, `Map` support is added for Quarkus and are mapped to an `Entry<Key,Value>` with an optional key parameter.\n"
"This allows you to return a map, and optionally query it by key."
msgstr "默认情况下，由于地图很难在模式中建模（因为键和值在运行时可能是动态的），GraphQL 默认不支持地图。通过上述调整，Quarkus 添加了对 `Map` 的支持，并将其映射到带有可选 key 参数的 `Entry<Key,Value>` 。这样就可以返回一个映射，并可选择按键进行查询。"

#: _versions/3.8/guides/smallrye-graphql.adoc
msgid "Example:"
msgstr "例如："

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "The key and value object can be any of Enum, Scalar or Complex object"
msgstr "键和值对象可以是枚举、标量或复数对象中的任意一种"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "You can now query the whole map with all the fields:"
msgstr "现在您可以查询整个地图的所有字段："

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "This will return a result like this for example:"
msgstr "例如，这将返回这样的结果："

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "You can also query by key"
msgstr "您还可以按键查询"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "That will return only that value in the map:"
msgstr "这将只返回地图中的那个值："

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "The default map adapter can to overridden with our own implementation."
msgstr "默认的地图适配器可以用我们自己的实现来覆盖。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Error code"
msgstr "错误代码"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "You can add an error code on the error output in the GraphQL response by using the (SmallRye specific) `@ErrorCode`:"
msgstr "您可以使用（SmallRye 专用） `@ErrorCode` ，在 GraphQL 响应的错误输出中添加错误代码："

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "When `SomeBusinessException` occurs, the error output will contain the Error code:"
msgstr "`SomeBusinessException` 时，错误输出将包含错误代码："

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "The error code"
msgstr "错误代码"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Additional Notes"
msgstr "附加说明"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"If you are using the `smallrye-graphql` extension and the `micrometer` metrics extension is present and metrics are\n"
"enabled, you may encounter a `java.lang.NoClassDefFoundError` as some versions of the `smallrye-graphql` extension\n"
"have runtime requirements on the Microprofile Metrics API.  Add the following MicroProfile Metrics API dependency\n"
"to resolve the issue:"
msgstr "如果正在使用 `smallrye-graphql` 扩展，并且存在 `micrometer` 度量扩展且已启用度量功能，则可能会遇到 `java.lang.NoClassDefFoundError` ，因为 `smallrye-graphql` 扩展的某些版本对微配置文件度量 API 有运行时要求。添加以下 MicroProfile Metrics API 依赖关系可解决该问题："

#: _versions/3.8/guides/smallrye-graphql.adoc
msgid "Conclusion"
msgstr "解决方案"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"SmallRye GraphQL enables clients to retrieve the exact data that is\n"
"required preventing `Over-fetching` and `Under-fetching`."
msgstr "SmallRye GraphQL 使客户能够检索所需的准确数据，防止 `Over-fetching` 和 `Under-fetching` 。"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid ""
"The GraphQL API can be expanded without breaking previous queries enabling easy\n"
"API `evolution`."
msgstr "GraphQL API 可以在不破坏先前查询的情况下进行扩展，从而轻松实现 API `evolution` 。"

#: _versions/3.8/guides/smallrye-graphql.adoc
msgid "Configuration Reference"
msgstr "配置参考"

#: _versions/3.8/guides/smallrye-graphql.adoc
#, fuzzy
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr "<span class=\"icicon\"><i class=\"fa fa-lock\" title=\"在构建时固定\"></i></span>在构建时固定的配置属性 - 所有其他配置属性都可在运行时重写 <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
