msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "OpenID Connect client and token propagation quickstart"
msgstr "OpenID Connect 客户端和令牌传播快速入门"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Learn how to use OpenID Connect (OIDC) and OAuth2 clients with filters to get, refresh, and propagate access tokens in your applications."
msgstr "了解如何使用带有过滤器的 OpenID Connect (OIDC) 和 OAuth2 客户端在应用程序中获取、刷新和传播访问令牌。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "This approach uses an OIDC token propagation Reactive filter to propagate the incoming bearer access tokens."
msgstr "这种方法使用 OIDC 令牌传播反应式过滤器来传播传入的承载访问令牌。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "For more information about `OIDC Client` and `Token Propagation` support in Quarkus, see the xref:security-openid-connect-client-reference.adoc[OpenID Connect (OIDC) and OAuth2 client and filters reference guide]."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "To protect your applications by using Bearer Token Authorization, see the xref:security-oidc-bearer-token-authentication.adoc[OpenID Connect (OIDC) Bearer token authentication] guide."
msgstr "要使用承载令牌授权保护应用程序，请参阅 xref:security-oidc-bearer-token-authentication.adoc[OpenID Connect (OIDC) 承载令牌身份验证] 指南。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "Prerequisites"
msgstr "先决条件"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr "link:https://stedolan.github.io/jq/[jq工具]"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "Architecture"
msgstr "应用结构"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"In this example, an application is built with two Jakarta REST resources, `FrontendResource` and `ProtectedResource`.\n"
"Here, `FrontendResource` uses one of two methods to propagate access tokens to `ProtectedResource`:"
msgstr "在本例中，应用程序通过两个 Jakarta REST 资源 `FrontendResource` 和 `ProtectedResource` 构建。在此， `FrontendResource` 使用两种方法之一将访问令牌传播到 `ProtectedResource` ："

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "It can get a token by using an OIDC token propagation Reactive filter before propagating it."
msgstr "在传播令牌之前，它可以通过使用 OIDC 令牌传播反应式过滤器来获取令牌。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "It can use an OIDC token propagation Reactive filter to propagate the incoming access token."
msgstr "它可以使用 OIDC 令牌传播反应式过滤器来传播传入的访问令牌。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`FrontendResource` has four endpoints:"
msgstr "`FrontendResource` 有四个端点："

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`/frontend/user-name-with-oidc-client-token`"
msgstr "`/frontend/user-name-with-oidc-client-token`"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`/frontend/admin-name-with-oidc-client-token`"
msgstr "`/frontend/admin-name-with-oidc-client-token`"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`/frontend/user-name-with-propagated-token`"
msgstr "`/frontend/user-name-with-propagated-token`"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`/frontend/admin-name-with-propagated-token`"
msgstr "`/frontend/admin-name-with-propagated-token`"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"`FrontendResource` uses a REST Client with an OIDC token propagation Reactive filter to get and propagate an access token to `ProtectedResource` when either `/frontend/user-name-with-oidc-client-token` or `/frontend/admin-name-with-oidc-client-token` is called.\n"
"Also, `FrontendResource` uses a REST Client with `OpenID Connect Token Propagation Reactive Filter` to propagate the current incoming access token to `ProtectedResource` when either `/frontend/user-name-with-propagated-token` or `/frontend/admin-name-with-propagated-token` is called."
msgstr "`FrontendResource` 使用带有 OIDC 令牌传播 Reactive 过滤器的 REST 客户端，在调用 或 时获取并向 传播访问令牌。此外，当 或 被调用时， 会使用带有 的 REST 客户端将当前传入的访问令牌传播到 。 `/frontend/user-name-with-oidc-client-token` `/frontend/admin-name-with-oidc-client-token` `ProtectedResource` `/frontend/user-name-with-propagated-token` `/frontend/admin-name-with-propagated-token` `FrontendResource` `OpenID Connect Token Propagation Reactive Filter` `ProtectedResource` "

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`ProtectedResource` has two endpoints:"
msgstr "`ProtectedResource` 有两个端点："

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`/protected/user-name`"
msgstr "`/protected/user-name`"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`/protected/admin-name`"
msgstr "`/protected/admin-name`"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"Both endpoints return the username extracted from the incoming access token, which was propagated to `ProtectedResource` from `FrontendResource`.\n"
"The only difference between these endpoints is that calling `/protected/user-name` is only allowed if the current access token has a `user` role, and calling `/protected/admin-name` is only allowed if the current access token has an `admin` role."
msgstr "这两个端点都返回从传入的访问令牌中提取的用户名，访问令牌是从 `FrontendResource` 传播到 `ProtectedResource` 的。这两个端点的唯一区别是，只有当前访问令牌具有 `user` 角色时，才允许调用 `/protected/user-name` ，只有当前访问令牌具有 `admin` 角色时，才允许调用 `/protected/admin-name` 。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "Solution"
msgstr "解决方案"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库可使用命令： `git clone {quickstarts-clone-url}` ，或者下载 {quickstarts-archive-url}[压缩包] 。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "The solution is in the `security-openid-connect-client-quickstart` link:{quickstarts-tree-url}/security-openid-connect-client-quickstart[directory]."
msgstr "解决方案位于 `security-openid-connect-client-quickstart` link:{quickstarts-tree-url}/security-openid-connect-client-quickstart[目录] 中。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "Creating the Maven project"
msgstr "创建Maven项目"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"First, you need a new project.\n"
"Create a new project with the following command:"
msgstr "首先，你需要一个新项目。使用以下命令创建一个新项目："

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "This command generates a Maven project, importing the `oidc`, `oidc-client-reactive-filter`, `oidc-token-propagation-reactive-filter`, and `resteasy-reactive` extensions."
msgstr "该命令生成一个 Maven 项目，导入 `oidc` , `oidc-client-reactive-filter` , `oidc-token-propagation-reactive-filter` 和 `resteasy-reactive` 扩展。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "If you already have your Quarkus project configured, you can add these extensions to your project by running the following command in your project base directory:"
msgstr "如果您已经配置了 Quarkus 项目，可以在项目基本目录下运行以下命令，将这些扩展添加到项目中："

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "This command adds the following extensions to your build file:"
msgstr "此命令将在构建文件中添加以下扩展名："

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "Writing the application"
msgstr "编写应用程序"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Start by implementing `ProtectedResource`:"
msgstr "从实施 `ProtectedResource` 开始："

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"`ProtectedResource` returns a name from both `userName()` and `adminName()` methods.\n"
"The name is extracted from the current `JsonWebToken`."
msgstr "`ProtectedResource` `userName()` 和 方法返回一个名称。名称是从当前 中提取的。 `adminName()` `JsonWebToken`"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Next, add two REST clients, `OidcClientRequestReactiveFilter` and `AccessTokenRequestReactiveFilter`, which `FrontendResource` uses to call `ProtectedResource`."
msgstr "接下来，添加两个 REST 客户端 `OidcClientRequestReactiveFilter` 和 `AccessTokenRequestReactiveFilter` ， `FrontendResource` 使用这两个客户端调用 `ProtectedResource` 。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Add the `OidcClientRequestReactiveFilter` REST Client:"
msgstr "添加 `OidcClientRequestReactiveFilter` REST 客户端："

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "The `RestClientWithOidcClientFilter` interface depends on `OidcClientRequestReactiveFilter` to get and propagate the tokens."
msgstr "`RestClientWithOidcClientFilter` 接口依赖 `OidcClientRequestReactiveFilter` 获取和传播令牌。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Add the `AccessTokenRequestReactiveFilter` REST Client:"
msgstr "添加 `AccessTokenRequestReactiveFilter` REST 客户端："

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "The `RestClientWithTokenPropagationFilter` interface depends on `AccessTokenRequestReactiveFilter` to propagate the incoming already-existing tokens."
msgstr "`RestClientWithTokenPropagationFilter` 接口依赖 `AccessTokenRequestReactiveFilter` 来传播传入的已有标记。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"Note that both `RestClientWithOidcClientFilter` and `RestClientWithTokenPropagationFilter` interfaces are the same.\n"
"This is because combining `OidcClientRequestReactiveFilter` and `AccessTokenRequestReactiveFilter` on the same REST Client causes side effects because both filters can interfere with each other.\n"
"For example, `OidcClientRequestReactiveFilter` can override the token propagated by `AccessTokenRequestReactiveFilter`, or `AccessTokenRequestReactiveFilter` can fail if it is called when no token is available to propagate and `OidcClientRequestReactiveFilter` is expected to get a new token instead."
msgstr "请注意， `RestClientWithOidcClientFilter` 和 `RestClientWithTokenPropagationFilter` 接口是相同的。这是因为在同一个 REST 客户端上结合使用 `OidcClientRequestReactiveFilter` 和 `AccessTokenRequestReactiveFilter` 会产生副作用，因为这两个过滤器会相互干扰。例如， `OidcClientRequestReactiveFilter` 可以覆盖 `AccessTokenRequestReactiveFilter` 传播的令牌，或者 `AccessTokenRequestReactiveFilter` 在没有令牌可传播时被调用，而 `OidcClientRequestReactiveFilter` 期望获得一个新令牌，也会导致 失败。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Now, finish creating the application by adding `FrontendResource`:"
msgstr "现在，通过添加 `FrontendResource` 完成应用程序的创建："

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"`FrontendResource` uses REST Client with an OIDC token propagation Reactive filter to get and propagate an access token to `ProtectedResource` when either `/frontend/user-name-with-oidc-client-token` or `/frontend/admin-name-with-oidc-client-token` is called.\n"
"Also, `FrontendResource` uses REST Client with `OpenID Connect Token Propagation Reactive Filter` to propagate the current incoming access token to `ProtectedResource` when either `/frontend/user-name-with-propagated-token` or `/frontend/admin-name-with-propagated-token` is called."
msgstr "`FrontendResource` 使用带有 OIDC 令牌传播 Reactive 过滤器的 REST 客户端，在调用 或 时获取并向 传播访问令牌。此外，当 或 被调用时， 会使用带有 的 REST 客户端将当前传入的访问令牌传播到 。 `/frontend/user-name-with-oidc-client-token` `/frontend/admin-name-with-oidc-client-token` `ProtectedResource` `/frontend/user-name-with-propagated-token` `/frontend/admin-name-with-propagated-token` `FrontendResource` `OpenID Connect Token Propagation Reactive Filter` `ProtectedResource` "

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Finally, add a Jakarta REST `ExceptionMapper`:"
msgstr "最后，添加一个 Jakarta REST `ExceptionMapper` ："

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"This exception mapper is only added to verify during the tests that `ProtectedResource` returns `403` when the token has no expected role.\n"
"Without this mapper, `RESTEasy Reactive` would correctly convert the exceptions that escape from REST Client calls to `500` to avoid leaking the information from the downstream resources such as `ProtectedResource`.\n"
"However, in the tests, it would not be possible to assert that `500` is caused by an authorization exception instead of some internal error."
msgstr "添加该异常映射器只是为了在测试中验证 `ProtectedResource` 在令牌没有预期作用时是否会返回 `403` 。如果没有这个映射器， `RESTEasy Reactive` 会正确地将 REST 客户端调用产生的异常转换为 `500` ，以避免从下游资源（如 `ProtectedResource` ）泄漏信息。不过，在测试中，将无法断言 `500` 是由授权异常而非某些内部错误引起的。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "Configuring the application"
msgstr "配置该应用程序"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Having prepared the code, you configure the application:"
msgstr "准备好代码后，就可以配置应用程序了："

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"This configuration references Keycloak, which is used by `ProtectedResource` to verify the incoming access tokens and by `OidcClient` to get the tokens for a user `alice` by using a `password` grant.\n"
"Both REST clients point to `ProtectedResource`'s HTTP address."
msgstr "该配置引用了 Keycloak， `ProtectedResource` 使用 Keycloak 验证传入的访问令牌， `OidcClient` 使用 `password` 授予获取用户 `alice` 的令牌。两个 REST 客户端都指向 \"ProtectedResource \"的 HTTP 地址。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid ""
"Adding a `%prod.` profile prefix to `quarkus.oidc.auth-server-url` ensures that `Dev Services for Keycloak` launches a container for you when the application is run in dev or test modes.\n"
"For more information, see the <<oidc-client-keycloak-dev-mode,Running the application in dev mode>> section."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Starting and configuring the Keycloak server"
msgstr "启动和配置 Keycloak 服务器"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid ""
"Do not start the Keycloak server when you run the application in dev or test modes; `Dev Services for Keycloak` launches a container.\n"
"For more information, see the <<oidc-client-keycloak-dev-mode,Running the application in dev mode>> section.\n"
"Ensure you put the link:{quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[realm configuration file] on the classpath, in the `target/classes` directory.\n"
"This placement ensures that the file is automatically imported in dev mode.\n"
"However, if you have already built a link:{quickstarts-tree-url}/security-openid-connect-quickstart[complete solution], you do not need to add the realm file to the classpath because the build process has already done so."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "To start a Keycloak Server, you can use Docker and just run the following command:"
msgstr "要启动 Keycloak 服务器，可以使用 Docker，只需运行以下命令即可："

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "Set `{keycloak.version}` to `24.0.0` or later."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "You can access your Keycloak Server at http://localhost:8180[localhost:8180]."
msgstr "您可以通过 link:http://localhost:8180[localhost:8180] 访问 Keycloak 服务器。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"Log in as the `admin` user to access the Keycloak Administration Console.\n"
"The password is `admin`."
msgstr "以 `admin` 用户身份登录，访问 Keycloak 管理控制台。密码是 `admin` 。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"Import the link:{quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[realm configuration file] to create a new realm.\n"
"For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr "导入 link:{quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[领域配置文件] 以创建新领域。更多详情，请参阅 Keycloak 有关如何 link:https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[创建新领域] 的文档。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"This `quarkus` realm file adds a `frontend` client, and `alice` and `admin` users.\n"
"`alice` has a `user` role.\n"
"`admin` has both `user` and `admin` roles."
msgstr "这个 `quarkus` realm 文件添加了一个 `frontend` 客户端以及 `alice` 和 `admin` 用户。 `alice` 具有 `user` 角色。 `admin` 具有 `user` 和 `admin` 角色。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Running the application in dev mode"
msgstr "在开发模式下运行应用程序"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "To run the application in a dev mode, use:"
msgstr "要在开发模式下运行应用程序，请使用："

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] launches a Keycloak container and imports `quarkus-realm.json`."
msgstr "xref:security-openid-connect-dev-services.adoc[Keycloak 开发服务] 启动 Keycloak 容器并导入 `quarkus-realm.json` 。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Open a xref:dev-ui.adoc[Dev UI] available at http://localhost:8080/q/dev-ui[/q/dev-ui] and click a `Provider: Keycloak` link in the *OpenID Connect Dev UI* card."
msgstr "打开 link:http://localhost:8080/q/dev-ui[/q/dev-ui] 上的 xref:dev-ui.adoc[Dev UI] ，点击 *OpenID Connect Dev UI* 卡上的 `Provider: Keycloak` 链接。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "When asked, log in to a `Single Page Application` provided by the OpenID Connect Dev UI:"
msgstr "根据要求，登录 OpenID Connect Dev UI 提供的 `Single Page Application` ："

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"Log in as `alice`, with the password, `alice`.\n"
"This user has a `user` role."
msgstr "以 `alice` 登录，密码为 `alice` 。该用户的角色为 `user` 。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Access `/frontend/user-name-with-propagated-token`, which returns `200`."
msgstr "访问 `/frontend/user-name-with-propagated-token` ，返回 `200` 。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Access `/frontend/admin-name-with-propagated-token`, which returns `403`."
msgstr "访问 `/frontend/admin-name-with-propagated-token` ，返回 `403` 。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"Log out and back in as `admin` with the password, `admin`.\n"
"This user has both `admin` and `user` roles."
msgstr "注销后以 `admin` 登录，密码为 `admin` 。该用户同时拥有 `admin` 和 `user` 两个角色。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Access `/frontend/admin-name-with-propagated-token`, which returns `200`."
msgstr "访问 `/frontend/admin-name-with-propagated-token` ，返回 `200` 。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "In this case, you are testing that `FrontendResource` can propagate the access tokens from the OpenID Connect Dev UI."
msgstr "在这种情况下，您需要测试 `FrontendResource` 能否从 OpenID Connect Dev UI 传播访问令牌。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Running the application in JVM mode"
msgstr "以 JVM 模式运行应用程序"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "After exploring the application in dev mode, you can run it as a standard Java application."
msgstr "在开发模式下探索应用程序后，您可以将其作为标准 Java 应用程序运行。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "First, compile it:"
msgstr "首先，编译它："

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Then, run it:"
msgstr "然后，运行它："

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Running the application in native mode"
msgstr "以本地模式运行应用程序"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "You can compile this demo into native code; no modifications are required."
msgstr "您可以将此演示编译成本地代码，无需进行任何修改。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"This implies that you no longer need to install a JVM on your\n"
"production environment, as the runtime technology is included in\n"
"the produced binary and optimized to run with minimal resources."
msgstr "这意味着您不再需要在生产环境中安装 JVM，因为运行时技术已包含在生成的二进制文件中，并经过优化，只需最少的资源即可运行。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"Compilation takes longer, so this step is turned off by default.\n"
"To build again, enable the `native` profile:"
msgstr "编译需要较长的时间，因此默认关闭了这一步骤。要重新编译，请启用 `native` 配置文件："

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "After a little while, when the build finishes, you can run the native binary directly:"
msgstr "过一会儿，构建完成后，就可以直接运行本地二进制文件了："

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Testing the application"
msgstr "测试应用程序"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "For more information about testing your application in dev mode, see the preceding <<oidc-client-keycloak-dev-mode,Running the application in dev mode>> section."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "You can test the application launched in JVM or Native modes with `curl`."
msgstr "您可以用 `curl` 测试在JVM或Native模式下启动的应用程序。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Obtain an access token for `alice`:"
msgstr "获取 `alice` 的访问令牌："

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Now, use this token to call `/frontend/user-name-with-propagated-token` and `/frontend/admin-name-with-propagated-token`:"
msgstr "现在，使用此令牌调用 `/frontend/user-name-with-propagated-token` 和 `/frontend/admin-name-with-propagated-token` ："

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "This command returns the `200` status code and the name `alice`."
msgstr "该命令将返回 `200` 状态代码和 `alice` 名称。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"In contrast, this command returns `403`.\n"
"Recall that `alice` only has a `user` role."
msgstr "相比之下，该命令返回 `403` 。请注意， `alice` 只具有 `user` 的作用。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Next, obtain an access token for `admin`:"
msgstr "接下来，获取 `admin` 的访问令牌："

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Use this token to call `/frontend/user-name-with-propagated-token`:"
msgstr "使用此标记调用 `/frontend/user-name-with-propagated-token` ："

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "This command returns a `200` status code and the name `admin`."
msgstr "该命令返回 `200` 状态代码和 `admin` 名称。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Now, use this token to call `/frontend/admin-name-with-propagated-token`:"
msgstr "现在，使用此标记调用 `/frontend/admin-name-with-propagated-token` ："

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "This command also returns the `200` status code and the name `admin` because `admin` has both `user` and `admin` roles."
msgstr "该命令还会返回 `200` 状态代码和 `admin` 名称，因为 `admin` 同时具有 `user` 和 `admin` 两个角色。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"Now, check the `FrontendResource` methods, which do not propagate the existing tokens but use `OidcClient` to get and propagate the tokens.\n"
"As already shown, `OidcClient` is configured to get the tokens for the `alice` user, so:"
msgstr "现在，检查 `FrontendResource` 方法，这些方法不会传播现有的令牌，而是使用 `OidcClient` 获取和传播令牌。如前所述， `OidcClient` 被配置为获取 `alice` 用户的令牌，因此："

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "In contrast with the preceding command, this command returns a `403` status code."
msgstr "与前一条命令不同，该命令返回 `403` 状态代码。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "References"
msgstr "参考文献"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "xref:security-openid-connect-client-reference.adoc[OpenID Connect Client and Token Propagation Reference Guide]"
msgstr "xref:security-openid-connect-client-reference.adoc[OpenID Connect 客户端和令牌传播参考指南]"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]"
msgstr "xref:security-oidc-bearer-token-authentication.adoc[OIDC 承载令牌验证]"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus 安全概述]"
