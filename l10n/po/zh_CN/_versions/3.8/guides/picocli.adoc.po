msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.8/guides/picocli.adoc
#, fuzzy
msgid "Command Mode with Picocli"
msgstr "使用 Picocli 的命令模式"

#: _versions/3.8/guides/picocli.adoc
#, fuzzy
msgid "https://picocli.info/[Picocli] is an open source tool for creating rich command line applications."
msgstr "link:https://picocli.info/[Picocli] 是一款用于创建丰富命令行应用程序的开源工具。"

#: _versions/3.8/guides/picocli.adoc
#, fuzzy
msgid "Quarkus provides support for using Picocli. This guide contains examples of `picocli` extension usage."
msgstr "Quarkus 支持使用 Picocli。本指南包含 `picocli` 扩展使用示例。"

#: _versions/3.8/guides/picocli.adoc
#, fuzzy
msgid "If you are not familiar with the Quarkus Command Mode, consider reading the xref:command-mode-reference.adoc[Command Mode reference guide] first."
msgstr "如果不熟悉 Quarkus 命令模式，请先阅读命令 xref:command-mode-reference.adoc[模式参考指南] 。"

#: _versions/3.8/guides/picocli.adoc
msgid "Extension"
msgstr "扩展"

#: _versions/3.8/guides/picocli.adoc
#, fuzzy
msgid ""
"Once you have your Quarkus project configured you can add the `picocli` extension\n"
"to your project by running the following command in your project base directory."
msgstr "配置好 Quarkus 项目后，就可以在项目基本目录下运行以下命令，将 `picocli` 扩展添加到项目中。"

#: _versions/3.8/guides/picocli.adoc
msgid "This will add the following to your build file:"
msgstr "这会在你的构建文件中添加以下内容:"

#: _versions/3.8/guides/picocli.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.8/guides/picocli.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.8/guides/picocli.adoc
#, fuzzy
msgid "Simple command line application"
msgstr "简单的命令行应用程序"

#: _versions/3.8/guides/picocli.adoc
#, fuzzy
msgid "Simple PicocliApplication with only one `Command` can be created as follows:"
msgstr "只有一个 `Command` 的简单 PicocliApplication 可按如下方式创建："

#: _versions/3.8/guides/picocli.adoc
#, fuzzy
msgid "If there is only one class annotated with `picocli.CommandLine.Command` it will be used as entry point to Picocli CommandLine."
msgstr "如果只有一个类注释了 `picocli.CommandLine.Command` ，它将被用作 Picocli CommandLine 的入口。"

#: _versions/3.8/guides/picocli.adoc
#, fuzzy
msgid "All classes annotated with `picocli.CommandLine.Command` are registered as CDI beans."
msgstr "所有注释为 `picocli.CommandLine.Command` 的类都注册为 CDI Bean。"

#: _versions/3.8/guides/picocli.adoc
#, fuzzy
msgid ""
"Beans with `@CommandLine.Command` should not use proxied scopes (e.g. do not use `@ApplicationScope`)\n"
"because Picocli will not be able to set field values in such beans. This extension will register classes with `@CommandLine.Command` annotation\n"
"using `@Depended` scope. If you need to use proxied scope, then annotate setter and not field, for example:"
msgstr "带有 `@CommandLine.Command` 的 Bean 不应使用代理作用域（例如，不要使用 `@ApplicationScope` ），因为 Picocli 将无法在此类 Bean 中设置字段值。该扩展将使用 `@Depended` 作用域注册带有 `@CommandLine.Command` 注解的类。如果需要使用代理作用域，请注解 setter 而不是 field："

#: _versions/3.8/guides/picocli.adoc
#, fuzzy
msgid "Command line application with multiple Commands"
msgstr "具有多种命令的命令行应用程序"

#: _versions/3.8/guides/picocli.adoc
#, fuzzy
msgid ""
"When multiple classes have the `picocli.CommandLine.Command` annotation, then one of them needs to be also annotated with `io.quarkus.picocli.runtime.annotations.TopCommand`.\n"
"This can be overwritten with the `quarkus.picocli.top-command` property."
msgstr "当多个类都有 `picocli.CommandLine.Command` 注释时，其中一个类也需要注释为 `io.quarkus.picocli.runtime.annotations.TopCommand` 。这可以用 `quarkus.picocli.top-command` 属性覆盖。"

#: _versions/3.8/guides/picocli.adoc
#, fuzzy
msgid "Customizing Picocli CommandLine instance"
msgstr "自定义 Picocli 命令行实例"

#: _versions/3.8/guides/picocli.adoc
#, fuzzy
msgid "You can customize CommandLine classes used by the `picocli` extension by producing your own bean instance:"
msgstr "您可以通过创建自己的 Bean 实例来定制 `picocli` 扩展使用的 CommandLine 类："

#: _versions/3.8/guides/picocli.adoc
#, fuzzy
msgid "`PicocliCommandLineFactory` will create an instance of CommandLine with `TopCommand` and `CommandLine.IFactory` injected."
msgstr "`PicocliCommandLineFactory` 将创建一个已注入 和 的 CommandLine 实例。 `TopCommand` `CommandLine.IFactory` "

#: _versions/3.8/guides/picocli.adoc
#, fuzzy
msgid "Different entry command for each profile"
msgstr "每个配置文件有不同的输入命令"

#: _versions/3.8/guides/picocli.adoc
#, fuzzy
msgid "It is possible to create different entry command for each profile, using `@IfBuildProfile`:"
msgstr "可以使用 `@IfBuildProfile` 为每个配置文件创建不同的输入命令："

#: _versions/3.8/guides/picocli.adoc
#, fuzzy
msgid "You can return instance of `java.lang.Class` here. In such case `CommandLine` will try to instantiate this class using `CommandLine.IFactory`."
msgstr "您可以在此处返回 `java.lang.Class` 的实例。在这种情况下， `CommandLine` 将尝试使用 `CommandLine.IFactory` 来实例化这个类。"

#: _versions/3.8/guides/picocli.adoc
#, fuzzy
msgid "Configure CDI Beans with parsed arguments"
msgstr "使用解析参数配置 CDI Bean"

#: _versions/3.8/guides/picocli.adoc
#, fuzzy
msgid ""
"You can use `Event<CommandLine.ParseResult>` or just `CommandLine.ParseResult` to configure CDI beans based on arguments parsed by Picocli.\n"
"This event will be generated in `QuarkusApplication` class created by this extension. If you are providing your own `@QuarkusMain` this event will not be raised.\n"
"`CommandLine.ParseResult` is created from default `CommandLine` bean."
msgstr "您可以使用 `Event<CommandLine.ParseResult>` 或 `CommandLine.ParseResult` 根据 Picocli 解析的参数配置 CDI Bean。此事件将在此扩展创建的 `QuarkusApplication` 类中生成。如果您提供自己的 `@QuarkusMain` ，则不会引发该事件。 `CommandLine.ParseResult` 是根据默认的 `CommandLine` Bean 创建的。"

#: _versions/3.8/guides/picocli.adoc
#, fuzzy
msgid "`@ApplicationScoped` used for lazy initialization"
msgstr "`@ApplicationScoped` 用于懒惰初始化"

#: _versions/3.8/guides/picocli.adoc
#, fuzzy
msgid "Providing own QuarkusMain"
msgstr "提供自己的 QuarkusMain"

#: _versions/3.8/guides/picocli.adoc
#, fuzzy
msgid "You can also provide your own application entry point annotated with `QuarkusMain` (as described in xref:command-mode-reference.adoc[Command Mode reference guide])."
msgstr "您也可以提供自己的应用程序入口点，并注释为 `QuarkusMain` （如 xref:command-mode-reference.adoc[命令模式参考指南] 所述）。"

#: _versions/3.8/guides/picocli.adoc
#, fuzzy
msgid "Quarkus-compatible `CommandLine.IFactory` bean created by `picocli` extension."
msgstr "由 `picocli` 扩展创建的与 Quarkus 兼容的 `CommandLine.IFactory` Bean。"

#: _versions/3.8/guides/picocli.adoc
#, fuzzy
msgid "Native mode support"
msgstr "支持本地模式"

#: _versions/3.8/guides/picocli.adoc
#, fuzzy
msgid "This extension uses the Quarkus standard build steps mechanism to support GraalVM Native images. In the exceptional case that incompatible changes in a future picocli release cause any issue, the following configuration can be used to fall back to the annotation processor from the picocli project as a temporary workaround:"
msgstr "该扩展使用 Quarkus 标准构建步骤机制来支持 GraalVM 原生镜像。如果未来的 picocli 版本中出现了不兼容的更改，从而导致出现任何问题，那么可以使用以下配置来退回到 picocli 项目中的注释处理器，作为临时解决办法："

#: _versions/3.8/guides/picocli.adoc
#, fuzzy
msgid "For Gradle, you need to add the following in `dependencies` section of the `build.gradle` file:"
msgstr "对于 Gradle，需要在 `build.gradle` 文件的 `dependencies` 部分添加以下内容："

#: _versions/3.8/guides/picocli.adoc
msgid "Development Mode"
msgstr "开发模式"

#: _versions/3.8/guides/picocli.adoc
#, fuzzy
msgid "In the development mode, i.e. when running `mvn quarkus:dev`, the application is executed and restarted every time the `Space bar` key is pressed. You can also pass arguments to your command line app via the `quarkus.args` system property, e.g. `mvn quarkus:dev -Dquarkus.args='--help'` and `mvn quarkus:dev -Dquarkus.args='-c -w --val 1'`."
msgstr "在开发模式下，即运行 `mvn quarkus:dev` 时，每次按 `Space bar` 键都会执行并重新启动应用程序。您还可以通过 `quarkus.args` 系统属性向命令行应用程序传递参数，如 `mvn quarkus:dev -Dquarkus.args='--help'` 和 `mvn quarkus:dev -Dquarkus.args='-c -w --val 1'` 。"

#: _versions/3.8/guides/picocli.adoc
#, fuzzy
msgid "Kubernetes support"
msgstr "支持 Kubernetes"

#: _versions/3.8/guides/picocli.adoc
#, fuzzy
msgid "Once you have your command line application, you can also generate the resources necessary to install and use this application in Kubernetes by adding the `kubernetes` extension. To install the `kubernetes` extension, run the following command in your project base directory."
msgstr "有了命令行应用程序后，还可以通过添加 `kubernetes` 扩展，生成在 Kubernetes 中安装和使用该应用程序所需的资源。要安装 `kubernetes` 扩展，请在项目基本目录中运行以下命令。"

#: _versions/3.8/guides/picocli.adoc
msgid "This will add the following to your `pom.xml`:"
msgstr "这将在你的 `pom.xml` 中添加以下内容："

#: _versions/3.8/guides/picocli.adoc
#, fuzzy
msgid "And, next, build the application with:"
msgstr "接下来，用"

#: _versions/3.8/guides/picocli.adoc
#, fuzzy
msgid "The Kubernetes extension will detect the presence of the Picocli extension and hence generate a https://kubernetes.io/docs/concepts/workloads/controllers/job/[Job] resource instead of a https://kubernetes.io/docs/concepts/workloads/controllers/deployment/[Deployment] resource in the `target/kubernetes/` directory."
msgstr "Kubernetes 扩展会检测到 Picocli 扩展的存在，从而在 `target/kubernetes/` 目录中生成 link:https://kubernetes.io/docs/concepts/workloads/controllers/job/[作业] 资源，而不是 link:https://kubernetes.io/docs/concepts/workloads/controllers/deployment/[部署] 资源。"

#: _versions/3.8/guides/picocli.adoc
#, fuzzy
msgid "If you don't want to generate a Job resource, you can specify the resource you want to generate using the property `quarkus.kubernetes.deployment-kind`. For example, if you want to generate a Deployment resource, use `quarkus.kubernetes.deployment-kind=Deployment`."
msgstr "如果不想生成作业资源，可以使用属性 `quarkus.kubernetes.deployment-kind` 指定要生成的资源。例如，如果要生成部署资源，请使用 `quarkus.kubernetes.deployment-kind=Deployment` 。"

#: _versions/3.8/guides/picocli.adoc
#, fuzzy
msgid "Moreover, you can provide the arguments that will be used by the Kubernetes job via the property `quarkus.kubernetes.arguments`. For example, after adding the property `quarkus.kubernetes.arguments=A,B` and building your project, the following Job resource will be generated:"
msgstr "此外，你还可以通过属性 `quarkus.kubernetes.arguments` 提供 Kubernetes 作业将使用的参数。例如，添加 `quarkus.kubernetes.arguments=A,B` 属性并构建项目后，将生成以下作业资源："

#: _versions/3.8/guides/picocli.adoc
#, fuzzy
msgid "Finally, the Kubernetes job will be launched every time it is installed in Kubernetes. You can know more about how to run Kubernetes jobs in this https://kubernetes.io/docs/concepts/workloads/controllers/job/#running-an-example-job[document]."
msgstr "最后，Kubernetes 作业将在每次安装到 Kubernetes 时启动。有关如何运行 Kubernetes 作业的更多信息，请参阅本 link:https://kubernetes.io/docs/concepts/workloads/controllers/job/#running-an-example-job[文档] 。"

#: _versions/3.8/guides/picocli.adoc
msgid "Configuration Reference"
msgstr "配置参考"

#: _versions/3.8/guides/picocli.adoc
#, fuzzy
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr "<span class=\"icicon\"><i class=\"fa fa-lock\" title=\"在构建时固定\"></i></span>在构建时固定的配置属性 - 所有其他配置属性都可在运行时重写 <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
