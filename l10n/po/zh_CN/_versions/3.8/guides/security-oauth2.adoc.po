msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.8/guides/security-oauth2.adoc
msgid "Using OAuth2 RBAC"
msgstr "使用OAuth2 RBAC"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "This guide explains how your Quarkus application can utilize OAuth2 tokens to provide secured access to the Jakarta REST (formerly known as JAX-RS) endpoints."
msgstr "本指南介绍了 Quarkus 应用程序如何利用 OAuth2 令牌来提供对 Jakarta REST（以前称为 JAX-RS）端点的安全访问。"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid ""
"OAuth2 is an authorization framework that enables applications to obtain access to an HTTP resource on behalf of a user.\n"
"It can be used to implement an application authentication mechanism based on tokens by delegating to an external server (the authentication server) the user authentication and providing a token for the authentication context."
msgstr "OAuth2 是一个授权框架，可让应用程序代表用户访问 HTTP 资源。通过将用户身份验证委托给外部服务器（身份验证服务器）并为身份验证上下文提供令牌，它可用于实施基于令牌的应用程序身份验证机制。"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "This extension provides a light-weight support for using the opaque Bearer Tokens and validating them by calling an introspection endpoint."
msgstr "该扩展为使用不透明的承载令牌和通过调用自省端点对其进行验证提供了轻量级支持。"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid ""
"If the OAuth2 Authentication server provides JWT Bearer Tokens, consider using either xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication] or xref:security-jwt.adoc[SmallRye JWT] extensions instead.\n"
"OpenID Connect extension has to be used if the Quarkus application needs to authenticate the users using OIDC Authorization Code Flow. For more information, see the xref:security-oidc-code-flow-authentication.adoc[OIDC code flow mechanism for protecting web applications] guide."
msgstr "如果 OAuth2 身份验证服务器提供 JWT Bearer 标记，请考虑使用 xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer 标记身份验证] 或 xref:security-jwt.adoc[SmallRye JWT] 扩展。如果 Quarkus 应用程序需要使用 OIDC 授权代码流对用户进行身份验证，则必须使用 OpenID Connect 扩展。欲了解更多信息，请参阅《 xref:security-oidc-code-flow-authentication.adoc[保护网络应用程序的 OIDC 代码流机制] 指南》。"

#: _versions/3.8/guides/security-oauth2.adoc
msgid "Solution"
msgstr "解决方案"

#: _versions/3.8/guides/security-oauth2.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "Clone the Git repository: git clone https://github.com/quarkusio/quarkus-quickstarts.git, or download an archive."
msgstr "克隆 Git 仓库：git clone link:https://github.com/quarkusio/quarkus-quickstarts.git[https://github.com/quarkusio/quarkus-quickstarts.git，] 或下载存档。"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid ""
"The solution is located in the `security-oauth2-quickstart` link:{quickstarts-tree-url}/security-oauth2-quickstart[directory].\n"
"It contains a very simple UI to use the Jakarta REST resources created here, too."
msgstr "该解决方案位于 `security-oauth2-quickstart` link:{quickstarts-tree-url}/security-oauth2-quickstart[目录] 中。它还包含一个非常简单的用户界面，用于使用在此创建的 Jakarta REST 资源。"

#: _versions/3.8/guides/security-oauth2.adoc
msgid "Creating the Maven project"
msgstr "创建Maven项目"

#: _versions/3.8/guides/security-oauth2.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新项目:"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "This command generates a project and imports the `elytron-security-oauth2` extension, which includes the OAuth2 opaque token support."
msgstr "该命令生成一个项目并导入 `elytron-security-oauth2` 扩展，其中包括 OAuth2 不透明令牌支持。"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "If you don't want to use the Maven plugin, you can just include the dependency in your build file:"
msgstr "如果不想使用 Maven 插件，只需在构建文件中加入依赖项即可："

#: _versions/3.8/guides/security-oauth2.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.8/guides/security-oauth2.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "Examine the Jakarta REST resource"
msgstr "检查 Jakarta REST 资源"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "Create the `src/main/java/org/acme/security/oauth2/TokenSecuredResource.java` file with the following content:"
msgstr "创建 `src/main/java/org/acme/security/oauth2/TokenSecuredResource.java` 文件，内容如下："

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "This is a basic REST endpoint that does not have any of the {extension-name} specific features, so let's add some."
msgstr "这是一个基本的 REST 端点，不具备任何{扩展名}的特定功能，所以我们来添加一些功能。"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "We will use the JSR 250 common security annotations, they are described in the xref:security-overview.adoc[Using Security] guide."
msgstr "我们将使用 JSR 250 通用安全注释，它们在《 xref:security-overview.adoc[使用安全] 》指南中有所描述。"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "`@PermitAll` indicates that the given endpoint is accessible by any caller, authenticated or not."
msgstr "`@PermitAll` 表示任何调用者（无论是否通过身份验证）都可以访问给定的端点。"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "Here we inject the Jakarta REST `SecurityContext` to inspect the security state of the call."
msgstr "在这里，我们注入 Jakarta REST `SecurityContext` 来检查调用的安全状态。"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "Here we obtain the current request user/caller `Principal`. For an unsecured call this will be null, so we build the username by checking `caller` against null."
msgstr "在此，我们获取当前请求的用户/呼叫方 `Principal` 。对于不安全的呼叫，该值将为空，因此我们通过检查 `caller` 与空值的比较来建立用户名。"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "The reply we build up makes use of the caller name, the `isSecure()` and `getAuthenticationScheme()` states of the request `SecurityContext`."
msgstr "我们建立的回复利用了调用者名称、请求的 `isSecure()` 和 `getAuthenticationScheme()` 状态 `SecurityContext` 。"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "Setting up application.properties"
msgstr "设置应用程序属性"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "You need to configure your application with the following minimal properties:"
msgstr "您需要为应用程序配置以下最基本的属性："

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid ""
"You need to specify the introspection URL of your authentication server and the `client-id` / `client-secret` that your application will use to authenticate itself to the authentication server. +\n"
"The extension will then use this information to validate the token and recover the information associated with it."
msgstr ""
"您需要指定身份验证服务器的反省 URL 以及您的应用程序将用于向身份验证服务器进行身份验证的 `client-id` / `client-secret` 。\n"
"\n"
" 然后，扩展将使用这些信息验证令牌并恢复与之相关的信息。"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "For all configuration properties, see the <<config-reference>> section at the end of this guide."
msgstr "有关所有配置属性，请参阅本指南末尾的 <<config-reference>> 部分。"

#: _versions/3.8/guides/security-oauth2.adoc
msgid "Run the application"
msgstr "运行应用程序"

#: _versions/3.8/guides/security-oauth2.adoc
msgid "Now we are ready to run our application. Use:"
msgstr "现在我们准备运行我们的应用程序。使用："

#: _versions/3.8/guides/security-oauth2.adoc
msgid "Now that the REST endpoint is running, we can access it using a command line tool like curl:"
msgstr "现在，REST端点正在运行，我们可以使用curl这样的命令行工具来访问它："

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "We have not provided any token in our request, so we would not expect that there is any security state seen by the endpoint, and the response is consistent with that:"
msgstr "我们在请求中没有提供任何令牌，因此我们不希望端点看到任何安全状态，响应也与此相符："

#: _versions/3.8/guides/security-oauth2.adoc
msgid "username is anonymous"
msgstr "用户名称是匿名的"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "`isSecure` is false as https is not used"
msgstr "`isSecure` 为假，因为不使用 https"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "`authScheme` is null"
msgstr "`authScheme` 为空"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "Securing the endpoint"
msgstr "确保终端安全"

#: _versions/3.8/guides/security-oauth2.adoc
msgid "So now let's actually secure something. Take a look at the new endpoint method `helloRolesAllowed` in the following:"
msgstr "所以，现在让我们真正让一些东西变得安全。看看下面的新端点方法 `helloRolesAllowed` ："

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "This new endpoint will be located at `/secured/roles-allowed`"
msgstr "这个新端点将位于 `/secured/roles-allowed`"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "`@RolesAllowed` indicates that the given endpoint is accessible by a caller if they have either an \"Echoer\" or a \"Subscriber\" role assigned."
msgstr "`@RolesAllowed` 表示呼叫者可以访问给定的端点，前提是呼叫者已分配了 \"Echoer（回声）\"或 \"Subscriber（订阅者）\"角色。"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "After you make this addition to your `TokenSecuredResource`, try `curl -v http://127.0.0.1:8080/secured/roles-allowed; echo` to attempt to access the new endpoint. Your output should be:"
msgstr "将此添加到 `TokenSecuredResource` 后，尝试 `curl -v http://127.0.0.1:8080/secured/roles-allowed ; echo` 尝试访问新端点。输出结果应该是"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "Excellent, we have not provided any OAuth2 token in the request, so we should not be able to access the endpoint, and we were not. Instead, we received an HTTP 401 Unauthorized error. We need to obtain and pass in a valid OAuth2 token to access that endpoint. There are two steps to this, 1) configuring our {extension-name} extension with information on how to validate the token, and 2) generating a matching token with the appropriate claims."
msgstr "很好，我们没有在请求中提供任何 OAuth2 令牌，所以我们应该无法访问该端点，但事实并非如此。相反，我们收到了 HTTP 401 未授权错误。我们需要获取并传递一个有效的 OAuth2 令牌才能访问该端点。这有两个步骤：1）配置我们的 {extension-name} 扩展，其中包含如何验证令牌的信息；2）生成一个具有相应声明的匹配令牌。"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "Generating a token"
msgstr "生成令牌"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "You need to obtain the token from a standard OAuth2 authentication server (https://www.keycloak.org/[Keycloak] for example) using the token endpoint."
msgstr "您需要使用令牌端点从标准 OAuth2 身份验证服务器（例如 link:https://www.keycloak.org/[Keycloak] ）获取令牌。"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "You can find below a curl example of such call for a `client_credential` flow:"
msgstr "下面是 `client_credential` 流量的此类调用的 curl 示例："

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "It should respond something like that..."
msgstr "应该会有类似的反应......"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "Finally, make a secured request to /secured/roles-allowed"
msgstr "最后，向 /secured/roles-allowed 提出安全请求"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "Now let's use this to make a secured request to the `/secured/roles-allowed` endpoint"
msgstr "现在，让我们用它向 `/secured/roles-allowed` 端点发出安全请求"

#: _versions/3.8/guides/security-oauth2.adoc
msgid "Success! We now have:"
msgstr "成功了!我们现在有："

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "a non-anonymous caller name of client_id"
msgstr "客户 ID 的非匿名调用者名称"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "an authentication scheme of OAuth2"
msgstr "一种 OAuth2 身份验证方案"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "Roles mapping"
msgstr "角色映射"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "Roles are mapped from one of the claims of the introspection endpoint response. By default, it's the `scope` claim. Roles are obtained by splitting the claim with a space separator. If the claim is an array, no splitting is done, the roles are obtained from the array."
msgstr "角色是根据内省端点响应的其中一个请求映射的。默认情况下，它是 `scope` 索赔。角色是通过用空格分隔符分割权利要求获得的。如果权利要求是一个数组，则不进行分割，而是从数组中获取角色。"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "You can customize the name of the claim to use for the roles with the `quarkus.oauth2.role-claim` property."
msgstr "您可以使用 `quarkus.oauth2.role-claim` 属性自定义角色使用的索赔名称。"

#: _versions/3.8/guides/security-oauth2.adoc
msgid "Package and run the application"
msgstr "打包并运行该应用程序"

#: _versions/3.8/guides/security-oauth2.adoc
msgid "As usual, the application can be packaged using:"
msgstr "像往常一样，该应用程序可以用以下方式打包："

#: _versions/3.8/guides/security-oauth2.adoc
msgid "And executed using `java -jar target/quarkus-app/quarkus-run.jar`:"
msgstr "执行程序使用 `java -jar target/quarkus-app/quarkus-run.jar` ："

#: _versions/3.8/guides/security-oauth2.adoc
msgid "You can also generate the native executable with:"
msgstr "你也可以通过以下命令生成本地可执行文件:"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "Integration testing"
msgstr "集成测试"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid ""
"If you don't want to use a real OAuth2 authorization server for your integration tests, you can use the\n"
"xref:security-properties.adoc[Properties based security] extension for your test, or mock an authorization server using Wiremock."
msgstr "如果不想在集成测试中使用真正的 OAuth2 授权服务器，可以在测试中使用 xref:security-properties.adoc[基于属性的安全] 扩展，或使用 Wiremock 模拟授权服务器。"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "First, Wiremock needs to be added as a test dependency. For a Maven project that would happen like so:"
msgstr "首先，需要将 Wiremock 添加为测试依赖项。对于 Maven 项目，可以这样做"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "Use a proper Wiremock version. All available versions can be found link:https://search.maven.org/artifact/org.wiremock/wiremock[here]."
msgstr "使用合适的 Wiremock 版本。所有可用版本均可在 link:https://search.maven.org/artifact/org.wiremock/wiremock[此处] 找到。"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid ""
"In Quarkus tests when some service needs to be started before the Quarkus tests are ran, we utilize the `@io.quarkus.test.common.QuarkusTestResource`\n"
"annotation to specify a `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which can start the service and supply configuration\n"
"values that Quarkus will use."
msgstr "在 Quarkus 测试中，如果需要在 Quarkus 测试运行前启动某些服务，我们可以利用 `@io.quarkus.test.common.QuarkusTestResource` 注解来指定一个 `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` ，它可以启动服务并提供 Quarkus 将使用的配置值。"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "For more details about `@QuarkusTestResource` refer to xref:getting-started-testing.adoc#quarkus-test-resource[this part of the documentation]."
msgstr "有关 `@QuarkusTestResource` 的更多详情，请参阅 xref:getting-started-testing.adoc#quarkus-test-resource[这部分文档] 。"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "Let's create an implementation of `QuarkusTestResourceLifecycleManager` called `MockAuthorizationServerTestResource` like so:"
msgstr "让我们创建一个名为 `MockAuthorizationServerTestResource` 的 `QuarkusTestResourceLifecycleManager` 实现："

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "The `start` method is invoked by Quarkus before any test is run and returns a `Map` of configuration properties that apply during the test execution."
msgstr "在任何测试运行之前，Quarkus 都会调用 `start` 方法，并返回在测试执行期间适用的配置属性 `Map` 。"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "Launch Wiremock."
msgstr "启动 Wiremock。"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "Configure Wiremock to stub the calls to `/introspect` by returning an OAuth2 introspect response. You need to customize this line to return what's needed for your application (at least the scope property as roles are derived from the scope)."
msgstr "配置 Wiremock，通过返回 OAuth2 introspect 响应来存根调用 `/introspect` 。您需要自定义这一行，以返回应用程序所需的内容（至少是作用域属性，因为角色是从作用域派生的）。"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "As the `start` method returns configuration that applies for tests, we set the `quarkus.oauth2.introspection-url` property that controls the URL of the introspect endpoint used by the OAuth2 extension."
msgstr "由于 `start` 方法返回的配置适用于测试，因此我们设置了 `quarkus.oauth2.introspection-url` 属性，该属性控制 OAuth2 扩展使用的 introspect 端点的 URL。"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "When all tests have finished, shutdown Wiremock."
msgstr "完成所有测试后，关闭 Wiremock。"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "Your test class needs to be annotated like with `@QuarkusTestResource(MockAuthorizationServerTestResource.class)` to use this `QuarkusTestResourceLifecycleManager`."
msgstr "要使用 `QuarkusTestResourceLifecycleManager` ，您的测试类需要使用 `@QuarkusTestResource(MockAuthorizationServerTestResource.class)` 这样的注释。"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "Below is an example of a test that uses the `MockAuthorizationServerTestResource`."
msgstr "下面是一个使用 `MockAuthorizationServerTestResource` ."

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "Use the previously created `MockAuthorizationServerTestResource` as a Quarkus test resource."
msgstr "将先前创建的 `MockAuthorizationServerTestResource` 用作 Quarkus 测试资源。"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "Define whatever token you want, it will not be validated by the OAuth2 mock authorization server."
msgstr "无论你想定义什么令牌，OAuth2 模拟授权服务器都不会对其进行验证。"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "Use this token inside the `Authorization` header to trigger OAuth2 authentication."
msgstr "在 `Authorization` 标头中使用此令牌可触发 OAuth2 身份验证。"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "`@QuarkusTestResource` applies to all tests, not just `TokenSecuredResourceTest`."
msgstr "`@QuarkusTestResource` 适用于所有测试，而不仅仅是 。 `TokenSecuredResourceTest`"

#: _versions/3.8/guides/security-oauth2.adoc
msgid "References"
msgstr "参考文献"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "https://tools.ietf.org/html/rfc6749[OAuth2]"
msgstr "link:https://tools.ietf.org/html/rfc6749[OAuth2]"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus 安全概述]"

#: _versions/3.8/guides/security-oauth2.adoc
msgid "Configuration Reference"
msgstr "配置参考"

#: _versions/3.8/guides/security-oauth2.adoc
#, fuzzy
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr "<span class=\"icicon\"><i class=\"fa fa-lock\" title=\"在构建时固定\"></i></span>在构建时固定的配置属性 - 所有其他配置属性都可在运行时重写 <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
