msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "Centralized log management (Graylog, Logstash, Fluentd)"
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid ""
"This guide explains how you can send your logs to a centralized log management system like Graylog, Logstash (inside the Elastic Stack or ELK - Elasticsearch, Logstash, Kibana) or\n"
"Fluentd (inside EFK - Elasticsearch, Fluentd, Kibana)."
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid ""
"There are a lot of different ways to centralize your logs (if you are using Kubernetes, the simplest way is to log to the console and ask you cluster administrator to integrate a central log manager inside your cluster).\n"
"In this guide, we will expose how to send them to an external tool using the `quarkus-logging-gelf` extension that can use TCP or UDP to send logs in the Graylog Extended Log Format (GELF)."
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid ""
"The `quarkus-logging-gelf` extension will add a GELF log handler to the underlying logging backend that Quarkus uses (jboss-logmanager).\n"
"By default, it is disabled, if you enable it but still use another handler (by default the console handler is enabled), your logs will be sent to both handlers."
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "Prerequisites"
msgstr "先决条件"

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "Example application"
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "The following examples will all be based on the same example application that you can create with the following steps."
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "Create an application with the `quarkus-logging-gelf` extension. You can use the following command to create it:"
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `logging-gelf` extension\n"
"to your project by running the following command in your project base directory:"
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "This will add the following dependency to your build file:"
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "For demonstration purposes, we create an endpoint that does nothing but log a sentence. You don't need to do this inside your application."
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "Configure the GELF log handler to send logs to an external UDP endpoint on the port 12201:"
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "Send logs to Graylog"
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "To send logs to Graylog, you first need to launch the components that compose the Graylog stack:"
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "MongoDB"
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "Elasticsearch"
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "Graylog"
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "You can do this via the following `docker-compose.yml` file that you can launch via `docker-compose up -d`:"
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid ""
"Then, you need to create a UDP input in Graylog.\n"
"You can do it from the Graylog web console (System -> Input -> Select GELF UDP) available at http://localhost:9000 or via the API."
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "This curl example will create a new Input of type GELF UDP, it uses the default login from Graylog (admin/admin)."
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "Launch your application, you should see your logs arriving inside Graylog."
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "Send logs to Logstash / the Elastic Stack (ELK)"
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "Logstash comes by default with an Input plugin that can understand the GELF format, we will first create a pipeline that enables this plugin."
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "Create the following file  in `$HOME/pipelines/gelf.conf`:"
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "Finally, launch the components that compose the Elastic Stack:"
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "Logstash"
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "Kibana"
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "Launch your application, you should see your logs arriving inside the Elastic Stack; you can use Kibana available at http://localhost:5601/ to access them."
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "Send logs to Fluentd (EFK)"
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid ""
"First, you need to create a Fluentd image with the needed plugins: elasticsearch and input-gelf.\n"
"You can use the following Dockerfile that should be created inside a `fluentd` directory."
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "You can build the image or let docker-compose build it for you."
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "Then you need to create a fluentd configuration file inside `$HOME/fluentd/fluent.conf`"
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "Finally, launch the components that compose the EFK Stack:"
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "Fluentd"
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "Launch your application, you should see your logs arriving inside EFK: you can use Kibana available at http://localhost:5601/ to access them."
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "GELF alternative: use Syslog"
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid ""
"You can also send your logs to Fluentd using a Syslog input.\n"
"As opposed to the GELF input, the Syslog input will not render multiline logs in one event, that's why we advise to use the GELF input that we implement in Quarkus."
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid ""
"First, you need to create a Fluentd image with the elasticsearch plugin.\n"
"You can use the following Dockerfile that should be created inside a `fluentd` directory."
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "Then, you need to create a fluentd configuration file inside `$HOME/fluentd/fluent.conf`"
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "Then, launch the components that compose the EFK Stack:"
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "Finally, configure your application to send logs to EFK using Syslog:"
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "Elasticsearch indexing consideration"
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid ""
"Be careful that, by default, Elasticsearch will automatically map unknown fields (if not disabled in the index settings) by detecting their type.\n"
"This can become tricky if you use log parameters (which are included by default), or if you enable MDC inclusion (disabled by default),\n"
"as the first log will define the type of the message parameter (or MDC parameter) field inside the index."
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "Imagine the following case:"
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid ""
"With log message parameters enabled, the first log message sent to Elasticsearch will have a `MessageParam0` parameter with an `int` type;\n"
"this will configure the index with a field of type `integer`.\n"
"When the second message will arrive to Elasticsearch, it will have a `MessageParam0` parameter with the boolean value `true`, and this will generate an indexing error."
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid ""
"To work around this limitation, you can disable sending log message parameters via `logging-gelf` by configuring `quarkus.log.handler.gelf.include-log-message-parameters=false`,\n"
"or you can configure your Elasticsearch index to store those fields as text or keyword, Elasticsearch will then automatically make the translation from int/boolean to a String."
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "See the following documentation for Graylog (but the same issue exists for the other central logging stacks): link:https://docs.graylog.org/en/3.2/pages/configuration/elasticsearch.html#custom-index-mappings[Custom Index Mappings]."
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "Configuration Reference"
msgstr "配置参考"

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "Configuration is done through the usual `application.properties` file."
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""

#: _versions/3.15/guides/centralized-log-management.adoc
msgid ""
"This extension uses the `logstash-gelf` library that allow more configuration options via system properties,\n"
"you can access its documentation here: https://logging.paluch.biz/ ."
msgstr ""
