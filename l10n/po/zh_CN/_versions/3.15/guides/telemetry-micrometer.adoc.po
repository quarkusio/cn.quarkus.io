msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Micrometer Metrics"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid ""
"Micrometer provides an abstraction layer for metrics collection.\n"
"It defines an API for basic meter types, like counters, gauges, timers, and distribution summaries, along with a `MeterRegistry` API that generalizes metrics collection and propagation for different backend monitoring systems."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Micrometer is the recommended approach to metrics for Quarkus."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid ""
"By default, the metrics are exposed on the main HTTP server.\n"
"If you would like to surface metrics from a separate management port, see the <<management-interface,Managed interface>> section."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Micrometer and monitoring system extensions"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid ""
"Quarkus Micrometer extensions are structured in the same way as the Micrometer project.\n"
"The `quarkus-micrometer` extension provides core Micrometer support and runtime integration.\n"
"Other Quarkus and Quarkiverse extensions use the Quarkus Micrometer extension to provide support for other monitoring systems."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Quarkus extensions:"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "micrometer"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "micrometer-registry-prometheus"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "link:https://github.com/quarkiverse/quarkus-micrometer-registry[Quarkiverse extensions] (may be incomplete):"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "micrometer-registry-azure-monitor"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "micrometer-registry-datadog"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "micrometer-registry-graphite"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "micrometer-registry-influx"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "micrometer-registry-jmx"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "micrometer-registry-newrelic-telemetry"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "micrometer-registry-otlp"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "micrometer-registry-signalfx"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "micrometer-registry-stackdriver"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "micrometer-registry-statsd"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid ""
"To add support for Prometheus metrics to your application, for example, use the `micrometer-registry-prometheus` extension.\n"
"It will bring in the Quarkus Micrometer extension and Micrometer core libraries as dependencies."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Add the extension to your project using following command (from your project directory):"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "This will add the following to your build file:"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "And you're all set!"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid ""
"A similar process applies for other meter registry extensions.\n"
"To use the Micrometer StackDriver MeterRegistry, for example, you would use the\n"
"`quarkus-micrometer-registry-stackdriver` extension from the Quarkiverse:"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Other registry implementations"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid ""
"If the Micrometer registry you would like to use does not yet have an associated extension,\n"
"use the `quarkus-micrometer` extension and bring in the Micrometer meter registry dependency directly:"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid ""
"You will then need to specify your own provider to configure and initialize the\n"
"MeterRegistry, as discussed in the next section."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Create a customized MeterRegistry"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Use a custom `@Produces` method to create and configure a your own `MeterRegistry` if you need to."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "The following example customizes the line format used for StatsD:"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "The method returns a `@Singleton`."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "The method returns the specific type of `MeterRegistry`"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "This example corresponds to the following instructions in the Micrometer documentation: link:https://micrometer.io/docs/registry/statsD#_customizing_the_metrics_sink[Micrometer StatsD: Customizing the Metrics Sink]"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid ""
"Use MicroProfile Config to inject any configuration attributes you need to configure the registry.\n"
"Most Micrometer registry extensions, like `quarkus-micrometer-registry-statsd`, provide registry-specific configuration objects that are integrated with the Quarkus configuration model.\n"
"The link:https://github.com/quarkiverse/quarkus-micrometer-registry[Quarkiverse GitHub Repository] can be a useful implementation reference."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Create your own metrics"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid ""
"Metrics data is used in the aggregate to observe how data changes over time.\n"
"This data is used for trend analysis, anomaly detection, and alerting.\n"
"Data is stored by backend monitoring systems in time series databases, with new values appended to the end of the series."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Metrics are constructed lazily. You may not see any data for the metric you're looking for until you've performed an action that will create it, like visiting an endpoint."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Naming conventions"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid ""
"Meter names should use dots to separate segments, `a.name.like.this`.\n"
"Micrometer applies naming conventions to convert registered meter names to match the expectations of backend monitoring systems."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Given the following declaration of a timer: `registry.timer(\"http.server.requests\")`, applied naming conventions will emit the following metrics for different monitoring systems:"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Prometheus: `http_server_requests_duration_seconds`"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Atlas: `httpServerRequests`"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Graphite: `http.server.requests`"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "InfluxDB: `http_server_requests`"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Define dimensions for aggregation"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid ""
"Metrics, single numerical measurements, often have additional data captured with them. This ancillary data is used to group or aggregate metrics for analysis.\n"
"The Micrometer API refers to this dimensional data as tags, but you may see it referred to as \"labels\" or \"attributes\" in other documentation sources."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid ""
"Micrometer is built primariliy for backend monitoring systems that support dimensional data (metric names that are enchriched with key/value pairs).\n"
"For heirarchical systems that only support a flat metric name, Micrometer will flatten the set of key/value pairs (sorted by key) and add them to the name."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Tags can be specified when a meter is registered with a `MeterRegistry` or using a <<meter-filter,Meter Filter>>."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "See the Micrometer documentation for additional advice on link:{concepts}#_tag_naming[tag naming]."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid ""
"Each unique combination of metric name and dimension produces a unique time series.\n"
"Using an unbounded set of dimensional data can lead to a \"cardinality explosion\", an exponential increase in the creation of new time series."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Obtain a reference to a MeterRegistry"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "To register meters, you need a reference to a `MeterRegistry`, which is configured and maintained by the Micrometer extension."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Use one of the following methods to obtain a reference to a `MeterRegistry`:"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Use CDI Constructor injection:"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Use a `MeterRegistry` member variable and use `@Inject`:"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Use the global `MeterRegistry`:"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Gauges"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid ""
"Gauges measure a value that can increase or decrease over time, like the speedometer on a car.\n"
"Gauges can be useful when monitoring the statistics for a cache or collection."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid ""
"Gauge values are sampled rather than set;\n"
"there is no record of how the value associated with a gauge may have changed between measurements."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Micrometer provides a few mechanisms for creating gauges:"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Wrap construction of a collection to monitor its size:"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Create a new gauge, `list.size`, using the dot-separated convention."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid ""
"Associate <<define-tags,tags>> with the gauge.\n"
"Gauge tag values are constant, and must be assigned at construction time."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Construct the array list whose size should be observed."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Use a builder to create a Gauge that will call a function:"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Create a new gauge called `jvm.threads.peak` that will call `getPeakThreadCount` on `threadBean`, an instance of `ThreadMXBean`"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Define the base unit, see link:{base-units}[BaseUnits.java] for predefined values."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Provide a description of the Gauge"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Associate <<define-tags,tags>> with the gauge"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Register the Gauge with the MeterRegistry"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid ""
"See link:{concepts}#_gauges[Gauges] in the Micrometer documentation for more information and examples.\n"
"Of note are two special cases: `TimeGauge` for measuring time, and a `MultiGauge` for reporting several criteria together."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid ""
"Micrometer does not create strong references to the objects it observes by default.\n"
"Depending on the registry, Micrometer either omits gauges that observe\n"
"objects that have been garbage-collected entirely or uses `NaN` (not a number) as the observed value."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid ""
"When should you use a gauge?\n"
"Only use a gauge when you can't use something else.\n"
"Gauges can be less straight-forward to use than other meters.\n"
"If what you are measuring can be counted (because the value always increments), use a counter instead."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Counters"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid ""
"Counters measure values that only increase.\n"
"Use one of the methods below to create a counter."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Use a convenience method on the `MeterRegistry`:"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "`example.prime.number` is the counter name."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "`type` is a dimensional tag with value `prime`."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Use `Counter.builder` to provide a description and units:"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Create a new counter called `count.me`"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Define a custom base unit. See link:{base-units}[BaseUnits.java] for predefined values."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Provide a description for the counter"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Associate <<define-tags,tags>> with the counter"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "<<annotations,Annotate>> a method"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "A CDI interceptor will create and register a counter called `counted.method`"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "The interceptor-created counter will have the \"extra\" dimension tag with value \"annotated\""
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "See link:{concepts}#_counters[Counters] in the Micrometer documentation for more information and examples, including the less common `FunctionCounter` that can be used to measure the result returned by an always increasing function."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid ""
"When should you use a counter?\n"
"Use a counter if you are doing something that can not be either timed or summarized.\n"
"If you want to understand more about how a value is changing,\n"
"a timer (when the base unit of measurement is time) or a distribution summary might be\n"
"more appropriate."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Summaries and Timers"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Timers and distribution summaries in Micrometer are very similar. Both meters record data, and can capture additional histogram or percentile data. While distribution summaries can be use for arbitrary types of data, timers are optimized for measuring time and durations."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Timers and distribution summaries store at least three values internally:"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "the aggregation of all recorded values as a sum"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "the number of values that have been recorded (a counter)"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "the highest value seen within a decaying time window (a gauge)."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Create a distribution summary"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid ""
"Use a distribution summary to record a value, not time.\n"
"Use one of the following methods to create a distribution summary."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "`bytes.written` is the summary name"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "`protocol` is a dimensional tag with value `http`."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Use `DistributionSummary.builder` to provide a description and units:"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Create a new distribution summary called `response.size`"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Use `bytes` as a base unit. See link:{base-units}[BaseUnits.java] for predefined values."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Provide a description for the distribution summary"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Associate <<define-tags,tags>> with the distribution summary"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Create a timer"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Timers measure short-duration latencies and how often they occur. Negative values are not supported, and longer durations could cause an overflow of the total time (Long.MAX_VALUE nanoseconds (292.3 years))."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Use one of the following methods to construct a timer."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "`fabric.selection` is the summary name"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "`primary` is a dimensional tag with value `blue`."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Use `Timer.builder` to provide a description and units:"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Create a new timer called `my.timer`"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Timers measure time, and will convert it into the units required by the monitoring backend"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Associate <<define-tags,tags>> with the timer"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "A CDI interceptor will create and register a timer called `call`"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "The interceptor-created timer will have the \"region\" dimension tag with value \"test\""
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Measure durations with Timers"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Micrometer provides the following convenience mechanisms for recording durations."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Wrap the invocation of a `Runnable`:"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Wrap the invocation of a `Callable`:"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Create a wrapped `Runnable` for repeated invocation:"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Create a wrapped `Callable` for repeated invocation:"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Use a `Sample` for more complex code paths:"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "We create a sample, which records the start of the timer."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "The sample can be passed along as context"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "We can choose the timer when the sample is stopped. This example uses a response status as a tag identifying the timer, which won't be known until processing is complete."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Histograms and percentiles"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid ""
"Both timers and distribution summaries can be configured to emit additional statistics, like histogram data, precomputed percentiles, or service level objective (SLO) boundaries.\n"
"See link:{concepts}#_timers[Timers] and link:{concepts}#_distribution_summaries[Distribution Summaries] in the Micrometer documentation for more information and examples, including memory footprint estimation for both types."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "The count, sum, and histogram data associated with timers and distribution summaries can be re-aggregated across dimensions (or across a series of instances)."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Precomputed percentile values can not. Percentiles are unique to each dataset (the 90th percentile of this collection of measurements)."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Automatically generated metrics"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid ""
"The Micrometer extension automatically times HTTP server requests. Following Prometheus naming conventions for\n"
"timers, look for `http_server_requests_seconds_count`, `http_server_requests_seconds_sum`, and\n"
"`http_server_requests_seconds_max`. Dimensional labels have been added for the requested uri, the HTTP method\n"
"(GET, POST, etc.), the status code (200, 302, 404, etc.), and a more general outcome field."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Ignoring endpoints"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid ""
"You can disable measurement of HTTP endpoints using the `quarkus.micrometer.binder.http-server.ignore-patterns`\n"
"property.\n"
"This property accepts a comma-separated list of simple regex match patterns identifying URI paths that should\n"
"be ignored.\n"
"For example, setting `quarkus.micrometer.binder.http-server.ignore-patterns=/example/prime/[0-9]+` will\n"
"ignore a request to `http://localhost:8080/example/prime/7919`.\n"
"A request to `http://localhost:8080/example/gauge/7919`\n"
"would still be measured."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "URI templates"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid ""
"The micrometer extension will make a best effort at representing URIs containing path parameters in templated form.\n"
"Using examples from above, a request to `http://localhost:8080/example/prime/7919` should appear as an attribute of\n"
"`http_server_requests_seconds_*` metrics with a value of `uri=/example/prime/{number}`."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid ""
"Use the `quarkus.micrometer.binder.http-server.match-patterns` property if the correct URL can not be determined.\n"
"This property accepts a comma-separated list defining an association between a simple regex match pattern and a replacement\n"
"string.\n"
"For example, setting\n"
"`quarkus.micrometer.binder.http-server.match-patterns=/example/prime/[0-9]+=/example/{jellybeans}` would use the value\n"
"`/example/{jellybeans}` for the uri attribute any time the requested uri matches `/example/prime/[0-9]+`."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Exported metrics format"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid ""
"By default, the  metrics are exported using the Prometheus format `application/openmetrics-text`,\n"
"you can revert to the former format by specifying the `Accept` request header to `text/plain` (`curl -H \"Accept: text/plain\" localhost:8080/q/metrics/`)."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Customizing Micrometer"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Quarkus provides a variety of way to customize Micrometer."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Use `MeterFilter` to customize emitted tags and metrics"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid ""
"Micrometer uses `MeterFilter` instances to customize the metrics emitted by `MeterRegistry` instances.\n"
"The Micrometer extension will detect `MeterFilter` CDI beans and use them when initializing `MeterRegistry`\n"
"instances."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid ""
"In this example, a singleton CDI bean will produce two different `MeterFilter` beans.\n"
"One will be applied only to\n"
"Prometheus `MeterRegistry` instances (using the `@MeterFilterConstraint` qualifier), and another will be applied\n"
"to all `MeterRegistry` instances.\n"
"An application configuration property is also injected and used as a tag value.\n"
"Additional examples of MeterFilters can be found in the\n"
"link:https://micrometer.io/docs/concepts[official documentation]."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Use `HttpServerMetricsTagsContributor` for server HTTP requests"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "By providing CDI beans that implement `io.quarkus.micrometer.runtime.HttpServerMetricsTagsContributor`, user code can contribute arbitrary tags based on the details of HTTP request"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Use `MeterRegistryCustomizer` for arbitrary customizations to meter registries"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid ""
"By providing CDI beans that implement `io.quarkus.micrometer.runtime.MeterRegistryCustomizer` user code has the change to change the configuration of any `MeterRegistry` that has been activated.\n"
"Unless an implementation is annotated with `@io.quarkus.micrometer.runtime.MeterRegistryCustomizerConstraint`, the customization applies to all `MeterRegistry` instances."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Does Micrometer support annotations?"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid ""
"Micrometer does define two annotations, `@Counted` and `@Timed`, that can be added to methods.\n"
"The `@Timed` annotation will wrap the execution of a method and will emit the following tags\n"
"in addition to any tags defined on the annotation itself:\n"
"class, method, and exception (either \"none\" or the simple class name of a detected exception)."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Parameters to `@Counted` and `@Timed` can be annotated with `@MeterTag` to dynamically assign meaningful tag values."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid ""
"`MeterTag.resolver` can be used to extract a tag from a method parameter, by creating a bean\n"
"implementing `io.micrometer.common.annotation.ValueResolver` and referring to this class: `@MeterTag(resolver=CustomResolver.class)`"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid ""
"`MeterTag.expression` is also supported, but you have to implement the evaluation of the expression\n"
"by creating a bean implementing `io.micrometer.common.annotation.ValueExpressionResolver` that can evaluate expressions."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid ""
"Provided tag values MUST BE of LOW-CARDINALITY.\n"
"High-cardinality values can lead to performance and storage issues in your metrics backend (a \"cardinality explosion\").\n"
"Tag values should not use end-user data, since those could be high-cardinality."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Many methods, like REST endpoint methods or Vert.x Routes, are counted and timed by the micrometer extension out of the box."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Support for the MicroProfile Metrics API"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid ""
"If you use the MicroProfile Metrics API in your application,\n"
"the Micrometer extension will create an adaptive layer to map those metrics into the Micrometer registry.\n"
"Note that naming conventions between the two systems is different, so the metrics that are emitted when using MP Metrics with Micrometer will change."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Use a `MeterFilter` to remap names or tags according to your conventions."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Ensure the following dependency is present if you require the MicroProfile Metrics API:"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "The MP Metrics API compatibility layer may be moved to a different extension in the future."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Management interface"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "By default, the metrics are exposed on the main HTTP server."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid ""
"You can expose them on a separate network interface and port by setting `quarkus.management.enabled=true` in your application configuration.\n"
"Note that this property is a build-time property.\n"
"The value cannot be overridden at runtime."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "If you enable the management interface without customizing the management network interface and port, the metrics are exposed under: `http://0.0.0.0:9000/q/metrics`."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "You can configure the path of each exposed format using:"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid ""
"With such a configuration, the json metrics will be available from `http://0.0.0.0:9000/q/metrics/json`.\n"
"The prometheus metrics will be available from `http://0.0.0.0:9000/q/metrics/prometheus`."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Refer to the xref:./management-interface-reference.adoc[management interface reference] for more information."
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Quarkus core extensions instrumented with Micrometer"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "https://quarkus.io/extensions/io.quarkus/quarkus-agroal[`quarkus-agroal`]"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "https://quarkus.io/guides/cache[`quarkus-cache`]"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "https://quarkus.io/extensions/io.quarkus/quarkus-caffeine[`quarkus-caffeine`]"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "https://quarkus.io/guides/smallrye-fault-tolerance[`quarkus-smallrye-fault-tolerance`]"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "https://quarkus.io/guides/grpc-getting-started[`quarkus-grpc`]"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "https://quarkus.io/guides/hibernate-orm[`quarkus-hibernate-orm`]"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "https://quarkus.io/extensions/io.quarkus/quarkus-jaxrs-client-reactive[`quarkus-jaxrs-client-reactive`]"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "https://quarkus.io/guides/deploying-to-kubernetes[`quarkus-kubernetes`]"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "https://quarkus.io/guides/logging[`jboss-logging`] (logging API in Quarkus)"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "https://quarkus.io/guides/mongodb[`quarkus-mongodb-client`]"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "https://quarkus.io/extensions/io.quarkus/quarkus-netty[`quarkus-netty`]"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "https://quarkus.io/guides/redis[`quarkus-redis-client`]"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "https://quarkus.io/guides/rest[`quarkus-rest`]"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "https://quarkus.io/guides/resteasy[`quarkus-resteasy-jackson`]"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "https://quarkus.io/guides/resteasy-client[`quarkus-resteasy-client`]"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "https://quarkus.io/guides/scheduler[`quarkus-scheduler`]"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "https://quarkus.io/guides/smallrye-graphql[`quarkus-smallrye-graphql`]"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "https://quarkus.io/extensions/io.quarkus/quarkus-messaging[`quarkus-messaging`]"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "AMQP 1.0"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "RabbitMQ"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Kafka"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Pulsar"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "JMS"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "MQTT"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Camel Messaging"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "https://quarkus.io/guides/stork-reference[`quarkus-smallrye-stork`]"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "https://quarkus.io/guides/vertx[`quarkus-vertx`] (http requests)"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "Configuration Reference"
msgstr ""

#: _versions/3.15/guides/telemetry-micrometer.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""
