msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "Using the event bus"
msgstr "使用事件总线"

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid ""
"Quarkus allows different beans to interact using asynchronous events, thus promoting loose-coupling.\n"
"The messages are sent to _virtual addresses_.\n"
"It offers 3 types of delivery mechanism:"
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "point-to-point - send the message, one consumer receives it. If several consumers listen to the address, a round-robin is applied;"
msgstr "point-to-point - 发送消息，一个消费者接收。如果有几个消费者监听该地址，则采用轮流的方式；"

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "publish/subscribe - publish a message, all the consumers listening to the address are receiving the message;"
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "request/reply - send the message and expect a response. The receiver can respond to the message in an asynchronous-fashion"
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "All these delivery mechanisms are non-blocking, and are providing one of the fundamental brick to build reactive applications."
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid ""
"The asynchronous message passing feature allows replying to messages which is not supported by Reactive Messaging.\n"
"However, it is limited to single-event behavior (no stream) and to local messages."
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "Installing"
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid ""
"This mechanism uses the Vert.x EventBus, so you need to enable the `vertx` extension to use this feature.\n"
"If you are creating a new project, set the `extensions` parameter as follows:"
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid ""
"If you have an already created project, the `vertx` extension can be added to an existing Quarkus project with\n"
"the `add-extension` command:"
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "Otherwise, you can manually add this to the dependencies section of your build file:"
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "Consuming events"
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "To consume events, use the `io.quarkus.vertx.ConsumeEvent` annotation:"
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "If not set, the address is the fully qualified name of the bean, for instance, in this snippet it's `org.acme.vertx.GreetingService`."
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "The method parameter is the message body. If the method returns _something_ it's the message response."
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid ""
"By default, the code consuming the event must be _non-blocking_, as it's called on the Vert.x event loop.\n"
"If your processing is blocking, use the `blocking` attribute:"
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "Alternatively, you can annotate your method with `@io.smallrye.common.annotation.Blocking`:"
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid ""
"When using `@Blocking`, it ignores the value of the `blocking` attribute of `@ConsumeEvent`.\n"
"See the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture documentation] for further details on this topic."
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "Asynchronous processing is also possible by returning either an `io.smallrye.mutiny.Uni` or a `java.util.concurrent.CompletionStage`:"
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "Mutiny"
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid ""
"The previous example uses Mutiny reactive types.\n"
"If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "前面的例子使用了Mutiny响应式类型。如果你不熟悉Mutiny，请查看 link:mutiny-primer.html[Mutiny - 一个直观的响应式编程库] 。"

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "Configuring the address"
msgstr "配置地址"

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "The `@ConsumeEvent` annotation can be configured to set the address:"
msgstr "可以配置 `@ConsumeEvent` 注解设置地址："

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "Receive the messages sent to the `greeting` address"
msgstr "接收发送到 `greeting` 地址的信息"

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "Replying"
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid ""
"The _return_ value of a method annotated with `@ConsumeEvent` is used as response to the incoming message.\n"
"For instance, in the following snippet, the returned `String` is the response."
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "You can also return a `Uni<T>` or a `CompletionStage<T>` to handle asynchronous reply:"
msgstr "你也可以返回一个 `Uni<T>` 或一个 `CompletionStage<T>` 来处理异步回复："

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "You can inject an `executor` if you use the Context Propagation extension:"
msgstr "如果你使用Context Propagation扩展，你可以注入一个 `executor` ："

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "Alternatively, you can use the default Quarkus worker pool using:"
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "Implementing fire and forget interactions"
msgstr "实现即发即弃（fire and forget）交互"

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid ""
"You don't have to reply to received messages.\n"
"Typically, for a _fire and forget_ interaction, the messages are consumed and the sender does not need to know about it.\n"
"To implement this, your consumer method just returns `void`"
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "Dealing with messages"
msgstr "处理信息"

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "As said above, this mechanism is based on the Vert.x event bus. So, you can also use `Message` directly:"
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "Handling Failures"
msgstr "处理故障"

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "If a method annotated with `@ConsumeEvent` throws an exception then:"
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "if a reply handler is set then the failure is propagated back to the sender via an `io.vertx.core.eventbus.ReplyException` with code `ConsumeEvent#FAILURE_CODE` and the exception message,"
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "if no reply handler is set then the exception is rethrown (and wrapped in a `RuntimeException` if necessary) and can be handled by the default exception handler, i.e. `io.vertx.core.Vertx#exceptionHandler()`."
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "Sending messages"
msgstr "发送信息"

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid ""
"Ok, we have seen how to receive messages, let's now switch to the _other side_: the sender.\n"
"Sending and publishing messages use the Vert.x event bus:"
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "Inject the Event bus"
msgstr "注入事件总线"

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "Send a message to the address `greeting`. Message payload is `name`"
msgstr "发送消息到地址 `greeting` 。消息的有效载荷是 `name` "

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "The `EventBus` object provides methods to:"
msgstr "`EventBus` 对象提供了以下方法："

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "`send` a message to a specific address - one single consumer receives the message."
msgstr "`send` 一个消息到一个特定的地址 - 单个消费者收到该消息。"

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "`publish` a message to a specific address - all consumers receive the messages."
msgstr "`publish` 向一个特定的地址发送消息--所有的消费者都会收到这些消息。"

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "`send` a message and expect reply asynchronously"
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "`send` a message and expect reply in a blocking manner"
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "Putting things together - bridging HTTP and messages"
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid ""
"Let's revisit a greeting HTTP endpoint and use asynchronous message passing to delegate the call to a separated bean.\n"
"It uses the request/reply dispatching mechanism.\n"
"Instead of implementing the business logic inside the Jakarta REST endpoint, we are sending a message.\n"
"This message is consumed by another bean and the response is sent using the _reply_ mechanism."
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "First create a new project using:"
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "You can already start the application in _dev mode_ using:"
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "Then, creates a new Jakarta REST resource with the following content:"
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "src/main/java/org/acme/vertx/EventResource.java"
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "send the `name` to the `greeting` address and request a response"
msgstr "将 `name` 发送到 `greeting` 地址，并要求作出回应"

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "when we get the response, extract the body and send it to the user"
msgstr "当我们得到响应时，提取正文并将其发送给用户"

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid ""
"If you call this endpoint, you will wait and get a timeout. Indeed, no one is listening.\n"
"So, we need a consumer listening on the `greeting` address. Create a `GreetingService` bean with the following content:"
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "src/main/java/org/acme/vertx/GreetingService.java"
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "This bean receives the name, and returns the greeting message."
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "Now, open your browser to http://localhost:8080/async/Quarkus, and you should see:"
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "To better understand, let's detail how the HTTP request/response has been handled:"
msgstr "为了更好地理解，让我们详细介绍一下HTTP request/response 是如何被处理的："

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "The request is received by the `hello` method"
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "a message containing the _name_ is sent to the event bus"
msgstr "含有该 _name_ 的消息被发送到事件总线"

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "Another bean receives this message and computes the response"
msgstr "另一个Bean收到这个消息，并计算出响应"

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "This response is sent back using the reply mechanism"
msgstr "使用回复机制发回此响应"

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "Once the reply is received by the sender, the content is written to the HTTP response"
msgstr "一旦发送方收到回复，会将内容写入 HTTP 响应"

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "This application can be packaged using:"
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "You can also compile it as a native executable with:"
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "Using codecs"
msgstr "使用编解码器"

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid ""
"The https://vertx.io/docs/vertx-core/java/#event_bus[Vert.x Event Bus] uses codecs to _serialize_ and _deserialize_ objects.\n"
"Quarkus provides a default codec for local delivery.\n"
"So you can exchange objects as follows:"
msgstr "link:https://vertx.io/docs/vertx-core/java/#event_bus[Vert.x事件总线] 使用编解码器来 _序列化_ 和 _反序列化_ 对象。Quarkus为本地交付提供了一个默认的编解码器。所以你可以按以下方式交换对象："

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "If you want to use a specific codec, you need to explicitly set it on both ends:"
msgstr ""

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "Set the name of the codec to use to send the message"
msgstr "设置用于发送消息的编解码器的名称"

#: _versions/3.15/guides/reactive-event-bus.adoc
msgid "Set the codec to use to receive the message"
msgstr "设置用于接收信息的编解码器"
