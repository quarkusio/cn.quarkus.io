msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Build, Sign and Encrypt JSON Web Tokens"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "According to link:https://datatracker.ietf.org/doc/html/rfc7519[RFC7519], JSON Web Token (JWT) is a compact, URL-safe means of representing claims which are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code(MAC) and/or encrypted."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Signing the claims is used most often to secure the claims. What is known today as a JWT token is typically produced by signing the claims in a JSON format using the steps described in the link:https://tools.ietf.org/html/rfc7515[JSON Web Signature] specification."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "However, when the claims are sensitive, their confidentiality can be guaranteed by following the steps described in the link:https://tools.ietf.org/html/rfc7516[JSON Web Encryption] specification to produce a JWT token with the encrypted claims."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Finally, both the confidentiality and integrity of the claims can be further enforced by signing them first and then encrypting the nested JWT token."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "SmallRye JWT Build provides an API for securing JWT claims using all of these options. link:https://bitbucket.org/b_c/jose4j/wiki/Home[Jose4J] is used internally to support this API."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Dependency"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid ""
"Note you can use Smallrye JWT Build API without having to create MicroProfile JWT endpoints supported by `quarkus-smallrye-jwt`.\n"
"It can also be excluded from `quarkus-smallrye-jwt` if MP JWT endpoints do not need to generate JWT tokens."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Create JwtClaimsBuilder and set the claims"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "The first step is to initialize a `JwtClaimsBuilder` using one of the options below and add some claims to it:"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "The API is fluent so the builder initialization can be done as part of the fluent API sequence."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "The builder will also set `iat` (issued at) to the current time, `exp` (expires at) to 5 minutes away from the current time (it can be customized with the `smallrye.jwt.new-token.lifespan` property) and `jti` (unique token identifier) claims if they have not already been set."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "One can also configure `smallrye.jwt.new-token.issuer` and `smallrye.jwt.new-token.audience` properties and skip setting the issuer and audience directly with the builder API."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "The next step is to decide how to secure the claims."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Sign the claims"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "The claims can be signed immediately or after the `JSON Web Signature` headers have been set:"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Note the `alg` (algorithm) header is set to `RS256` by default. Signing key identifier (`kid` header) does not have to be set if a single JSON Web Key (JWK) containing a `kid` property is used."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid ""
"RSA and Elliptic Curve (EC) private keys as well as symmetric secret keys can be used to sign the claims.\n"
"`ES256` and `HS256` are the default algorithms for EC private and symmetric key algorithms respectively."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "You can customize the signature algorithm, for example:"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Alternatively you can use a `smallrye.jwt.new-token.signature-algorithm` property:"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "and write a simpler API sequence:"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Note the `sign` step can be combined with the <<encrypt-claims,encrypt>> step to produce `inner-signed and encrypted` tokens, see <<innersign-encrypt-claims,Sign the claims and encrypt the nested JWT token>> section."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Encrypt the claims"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid ""
"The claims can be encrypted immediately or after the `JSON Web Encryption` headers have been set the same way as they can be signed.\n"
"The only minor difference is that encrypting the claims always requires a `jwe()` `JwtEncryptionBuilder` transition given that the API has been optimized to support signing and inner-signing of the claims."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Note the `alg` (key management algorithm) header is set to `RSA-OAEP` and the `enc` (content encryption header) is set to `A256GCM` by default."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid ""
"RSA and Elliptic Curve (EC) public keys as well as symmetric secret keys can be used to encrypt the claims.\n"
"`ECDH-ES` and `A256KW` are the default algorithms for EC public and symmetric key encryption algorithms respectively."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Note two encryption operations are done when creating an encrypted token:"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid ""
"1) the generated content encryption key is encrypted by the key supplied with the API using the key encryption algorithm such as `RSA-OAEP`\n"
"2) the claims are encrypted by the generated content encryption key using the content encryption algorithm such as `A256GCM`."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "You can customize the key and content encryption algorithms, for example:"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Alternatively you can use `smallrye.jwt.new-token.key-encryption-algorithm` and `smallrye.jwt.new-token.content-encryption-algorithm` properties to customize the key and content encryption algorithms:"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid ""
"Note that when the token is directly encrypted by the public RSA or EC key it is not possible to verify which party sent the token.\n"
"Therefore, the secret keys should be preferred for directly encrypting the tokens, for example, when using JWT as cookies where a secret key is managed by the Quarkus endpoint with only this endpoint being both a producer and a consumer of the encrypted token."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "If you would like to use RSA or EC public keys to encrypt the token then it is recommended to sign the token first if the signing key is available, see the next <<innersign-encrypt-claims,Sign the claims and encrypt the nested JWT token>> section."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Sign the claims and encrypt the nested JWT token"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "The claims can be signed and then the nested JWT token encrypted by combining the sign and encrypt steps."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Fast JWT Generation"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "If `smallrye.jwt.sign.key.location` or/and `smallrye.jwt.encrypt.key.location` properties are set then one can secure the existing claims (resources, maps, JsonObjects) with a single call:"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "As mentioned above, `iat` (issued at), `exp` (expires at), `jti` (token identifier), `iss` (issuer) and `aud` (audience) claims will be added if needed."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Dealing with the keys"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.sign.key.location` and `smallrye.jwt.encrypt.key.location` properties can be used to point to signing and encryption key locations. The keys can be located on the local file system, classpath, or fetched from the remote endpoints and can be in `PEM` or `JSON Web Key` (`JWK`) formats. For example:"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "You can also use MicroProfile `ConfigSource` to fetch the keys from the external services such as link:{vault-guide}[HashiCorp Vault] or other secret managers and use `smallrye.jwt.sign.key` and `smallrye.jwt.encrypt.key` properties instead:"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid ""
"where both `private.key.from.vault` and `public.key.from.vault` are the `PEM` or `JWK` formatted key values provided by the custom `ConfigSource`.\n"
"`smallrye.jwt.sign.key` and `smallrye.jwt.encrypt.key` can also contain only the Base64-encoded private or public keys values."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "However, please note, directly inlining the private keys in the configuration is not recommended. Use the `smallrye.jwt.sign.key` property only if you need to fetch a signing key value from the remote secret manager."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "The keys can also be loaded by the code which builds the token and supplied to JWT Build API."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "If you need to sign and/or encrypt the token using the symmetric secret key then consider using `io.smallrye.jwt.util.KeyUtils` to generate a SecretKey of the required length."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "For example, one needs to have a 64 byte key to sign using the `HS512` algorithm (`512/8`) and a 32 byte key to encrypt the content encryption key with the `A256KW` algorithm (`256/8`):"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "You can also consider using a `JSON Web Key` (JWK) or `JSON Web Key Set` (JWK Set) format to store a secret key on a secure file system and refer to it using either `smallrye.jwt.sign.key.location` or `smallrye.jwt.encrypt.key.location` properties, for example:"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "or"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "`io.smallrye.jwt.util.KeyUtils` can also be used to generate a pair of asymmetric RSA or EC keys. These keys can be stored using a `JWK`, `JWK Set` or `PEM` format."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "SmallRye JWT Builder configuration"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "SmallRye JWT supports the following properties which can be used to customize the way claims are signed and/or encrypted:"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Property Name"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Default"
msgstr "默认"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Description"
msgstr "描述"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.sign.key.location"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "`none`"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Location of a private key which will be used to sign the claims when either a no-argument `sign()` or `innerSign()` method is called."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.sign.key"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "none"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Key value which will be used to sign the claims when either a no-argument `sign()` or `innerSign()` method is called."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.sign.key.id"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Signing key identifier which is checked only when JWK keys are used."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.encrypt.key.location"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Location of a public key which will be used to encrypt the claims or inner JWT when a no-argument `encrypt()` method is called."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.sign.relax-key-validation"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "false"
msgstr "false"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Relax the validation of the signing keys."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.encrypt.key"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Key value which will be used to encrypt the claims or inner JWT when a no-argument encrypt() method is called."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.encrypt.key.id"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Encryption key identifier which is checked only when JWK keys are used."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.encrypt.relax-key-validation"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Relax the validation of the encryption keys."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.new-token.signature-algorithm"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "RS256"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Signature algorithm. This property will be checked if the JWT signature builder has not already set the signature algorithm."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.new-token.key-encryption-algorithm"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "RSA-OAEP"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Key encryption algorithm. This property will be checked if the JWT encryption builder has not already set the key encryption algorithm."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.new-token.content-encryption-algorithm"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "A256GCM"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Content encryption algorithm. This property will be checked if the JWT encryption builder has not already set the content encryption algorithm."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.new-token.lifespan"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "300"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Token lifespan in seconds which will be used to calculate an `exp` (expiry) claim value if this claim has not already been set."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.new-token.issuer"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Token issuer which can be used to set an `iss` (issuer) claim value if this claim has not already been set."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.new-token.audience"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Token audience which can be used to set an `aud` (audience) claim value if this claim has not already been set."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.new-token.override-matching-claims"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Set this property to `true` for `smallrye.jwt.new-token.issuer` and `smallrye.jwt.new-token.audience` values to override the already initialized `iss` (issuer) and `aud` (audience) claims."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.keystore.type"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "`JKS`"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "This property can be used to customize a keystore type if either `smallrye.jwt.sign.key.location` or `smallrye.jwt.encrypt.key.location` or both of these properties point to a `KeyStore` file. If it is not set then the file name will be checked to determine the keystore type before defaulting to `JKS`."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.keystore.provider"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "This property can be used to customize a `KeyStore` provider if `smallrye.jwt.sign.key.location` or `smallrye.jwt.encrypt.key.location` point to a `KeyStore` file."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.keystore.password"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Keystore password. If `smallrye.jwt.sign.key.location` or `smallrye.jwt.encrypt.key.location` point to a `KeyStore` file then this property has be set."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.keystore.encrypt.key.alias"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "This property has to be set to identify a public encryption key which will be extracted from `KeyStore` from a matching certificate if `smallrye.jwt.encrypt.key.location` points to a `KeyStore` file."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.keystore.sign.key.alias"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "This property has to be set to identify a private signing key if `smallrye.jwt.sign.key.location` points to a `KeyStore` file."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.keystore.sign.key.password"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "This property may be set if a private signing key's password in `KeyStore` is different to `smallrye.jwt.keystore.password` when `smallrye.jwt.sign.key.location` points to a `KeyStore` file."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "References"
msgstr "参考文献"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "link:https://github.com/smallrye/smallrye-jwt[SmallRye JWT]"
msgstr "link:https://github.com/smallrye/smallrye-jwt[SmallRye JWT]"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "link:https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "link:https://tools.ietf.org/html/rfc7519[JSON网络令牌]"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "link:https://tools.ietf.org/html/rfc7515[JSON Web Signature]"
msgstr "link:https://tools.ietf.org/html/rfc7515[JSON网络签名]"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "link:https://tools.ietf.org/html/rfc7516[JSON Web Encryption]"
msgstr "link:https://tools.ietf.org/html/rfc7516[JSON网络加密]"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "link:https://tools.ietf.org/html/rfc7518[JSON Web Algorithms]"
msgstr "link:https://tools.ietf.org/html/rfc7518[JSON网络算法]"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "link:https://bitbucket.org/b_c/jose4j/wiki/Home[Jose4J]"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "xref:security-jwt.adoc[Using Smallrye JWT to Protect Service Applications]"
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr ""
