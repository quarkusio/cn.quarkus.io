msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "OpenID Connect (OIDC) Bearer token authentication"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Secure HTTP access to Jakarta REST (formerly known as JAX-RS) endpoints in your application with Bearer token authentication by using the Quarkus OpenID Connect (OIDC) extension."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Overview of the Bearer token authentication mechanism in Quarkus"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Quarkus supports the Bearer token authentication mechanism through the Quarkus OpenID Connect (OIDC) extension."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "The bearer tokens are issued by OIDC and OAuth 2.0 compliant authorization servers, such as link:https://www.keycloak.org[Keycloak]."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"Bearer token authentication is the process of authorizing HTTP requests based on the existence and validity of a bearer token.\n"
"The bearer token provides information about the subject of the call, which is used to determine whether or not an HTTP resource can be accessed."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "The following diagrams outline the Bearer token authentication mechanism in Quarkus:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Bearer token authentication mechanism in Quarkus with single-page application"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"The Quarkus service retrieves verification keys from the OIDC provider.\n"
"The verification keys are used to verify the bearer access token signatures."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "The Quarkus user accesses the single-page application (SPA)."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "The single-page application uses Authorization Code Flow to authenticate the user and retrieve tokens from the OIDC provider."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "The single-page application uses the access token to retrieve the service data from the Quarkus service."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "The Quarkus service verifies the bearer access token signature by using the verification keys, checks the token expiry date and other claims, allows the request to proceed if the token is valid, and returns the service response to the single-page application."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "The single-page application returns the same data to the Quarkus user."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Bearer token authentication mechanism in Quarkus with Java or command line client"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "The client uses `client_credentials` that requires client id and secret or password grant, which requires client id, secret, username, and password to retrieve the access token from the OIDC provider."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "The client uses the access token to retrieve the service data from the Quarkus service."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "The Quarkus service verifies the bearer access token signature by using the verification keys, checks the token expiry date and other claims, allows the request to proceed if the token is valid, and returns the service response to the client."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"If you need to authenticate and authorize users by using OIDC authorization code flow, see the Quarkus xref:security-oidc-code-flow-authentication.adoc[OpenID Connect authorization code flow mechanism for protecting web applications] guide.\n"
"Also, if you use Keycloak and bearer tokens, see the Quarkus xref:security-keycloak-authorization.adoc[Using Keycloak to centralize authorization] guide."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "To learn about how you can protect service applications by using OIDC Bearer token authentication, see the following tutorial:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "xref:security-oidc-bearer-token-authentication-tutorial.adoc[Protect a web application by using OpenID Connect (OIDC) authorization code flow]."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "For information about how to support multiple tenants, see the Quarkus xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy] guide."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Accessing JWT claims"
msgstr "访问JWT声明"

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "If you need to access JWT token claims, you can inject `JsonWebToken`:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"Injection of `JsonWebToken` is supported in `@ApplicationScoped`, `@Singleton`, and `@RequestScoped` scopes.\n"
"However, the use of `@RequestScoped` is required if the individual claims are injected as simple types.\n"
"For more information, see the xref:security-jwt.adoc#supported-injection-scopes[Supported injection scopes] section of the Quarkus \"Using JWT RBAC\" guide."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "`UserInfo`"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"If you must request a UserInfo JSON object from the OIDC `UserInfo` endpoint, set `quarkus.oidc.authentication.user-info-required=true`.\n"
"A request is sent to the OIDC provider `UserInfo` endpoint, and an `io.quarkus.oidc.UserInfo` (a simple `javax.json.JsonObject` wrapper) object is created.\n"
"`io.quarkus.oidc.UserInfo` can be injected or accessed as a `SecurityIdentity` `userinfo` attribute."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "`quarkus.oidc.authentication.user-info-required` is automatically enabled if one of these conditions is met:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "if `quarkus.oidc.roles.source` is set to `userinfo` or `quarkus.oidc.token.verify-access-token-with-user-info` is set to `true` or `quarkus.oidc.authentication.id-token-required` is set to `false`, the current OIDC tenant must support a UserInfo endpoint in these cases."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "if `io.quarkus.oidc.UserInfo` injection point is detected but only if the current OIDC tenant supports a UserInfo endpoint."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Configuration metadata"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "The current tenant's discovered link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect Configuration Metadata] is represented by `io.quarkus.oidc.OidcConfigurationMetadata` and can be injected or accessed as a `SecurityIdentity` `configuration-metadata` attribute."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "The default tenant's `OidcConfigurationMetadata` is injected if the endpoint is public."
msgstr "如果端点是公开的，则默认租户的 `OidcConfigurationMetadata` 会被注入。"

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Token claims and SecurityIdentity roles"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "You can map `SecurityIdentity` roles from the verified JWT access tokens as follows:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"If the `quarkus.oidc.roles.role-claim-path` property is set, and matching array or string claims are found, then the roles are extracted from these claims.\n"
"For example, `customroles`, `customroles/array`, `scope`, `\"http://namespace-qualified-custom-claim\"/roles`, `\"http://namespace-qualified-roles\"`."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "If a `groups` claim is available, then its value is used."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"If a `realm_access/roles` or `resource_access/client_id/roles` (where `client_id` is the value of the `quarkus.oidc.client-id` property) claim is available, then its value is used.\n"
"This check supports the tokens issued by Keycloak."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "For example, the following JWT token has a complex `groups` claim that contains a `roles` array that includes roles:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "You must map the `microprofile_jwt_user` role to `SecurityIdentity` roles, and you can do so with this configuration: `quarkus.oidc.roles.role-claim-path=groups/roles`."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "If the token is opaque (binary), then a `scope` property from the remote token introspection response is used."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "If `UserInfo` is the source of the roles, then set `quarkus.oidc.authentication.user-info-required=true` and `quarkus.oidc.roles.source=userinfo`, and if needed, set `quarkus.oidc.roles.role-claim-path`."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"Additionally, a custom `SecurityIdentityAugmentor` can also be used to add the roles.\n"
"For more information, see the xref:security-customization.adoc#security-identity-customization[Security identity customization] section of the Quarkus \"Security tips and tricks\" guide."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "You can also map `SecurityIdentity` roles created from token claims to deployment-specific roles by using the xref:security-authorize-web-endpoints-reference.adoc#map-security-identity-roles[HTTP Security policy]."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Token scopes and SecurityIdentity permissions"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "`SecurityIdentity` permissions are mapped in the form of `io.quarkus.security.StringPermission` from the scope parameter of the <<token-claims-and-security-identity-roles,source of the roles>> and using the same claim separator."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Only requests with OpenID Connect scope `email` will be granted access."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "The read access is limited to the client requests with the `orders_read` scope."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "For more information about the `io.quarkus.security.PermissionsAllowed` annotation, see the xref:security-authorize-web-endpoints-reference.adoc#permission-annotation[Permission annotation] section of the \"Authorization of web endpoints\" guide."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Token verification and introspection"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"If the token is a JWT token, then, by default, it is verified with a `JsonWebKey` (JWK) key from a local `JsonWebKeySet`, retrieved from the OIDC provider's JWK endpoint.\n"
"The token's key identifier (`kid`) header value is used to find the matching JWK key.\n"
"If no matching `JWK` is available locally, then `JsonWebKeySet` is refreshed by fetching the current key set from the JWK endpoint.\n"
"The `JsonWebKeySet` refresh can be repeated only after the `quarkus.oidc.token.forced-jwk-refresh-interval` expires.\n"
"The default expiry time is 10 minutes.\n"
"If no matching `JWK` is available after the refresh, the JWT token is sent to the OIDC provider's token introspection endpoint."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "If the token is opaque, which means it can be a binary token or an encrypted JWT token, then it is always sent to the OIDC provider's token introspection endpoint."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "If you work only with JWT tokens and expect a matching `JsonWebKey` to always be available, for example, after refreshing a key set, you must disable token introspection, as shown in the following example:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"There might be cases where JWT tokens must be verified through introspection only, which can be forced by configuring an introspection endpoint address only.\n"
"The following properties configuration shows you an example of how you can achieve this with Keycloak:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"There are advantages and disadvantages to indirectly enforcing the introspection of JWT tokens remotely.\n"
"An advantage is that you eliminate the need for two remote calls: a remote OIDC metadata discovery call followed by another remote call to fetch the verification keys that will not be used.\n"
"A disadvantage is that you need to know the introspection endpoint address and configure it manually."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "The alternative approach is to allow the default option of OIDC metadata discovery but also require that only the remote JWT introspection is performed, as shown in the following example:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"An advantage of this approach is that the configuration is simpler and easier to understand.\n"
"A disadvantage is that a remote OIDC metadata discovery call is required to discover an introspection endpoint address, even though the verification keys will not be fetched."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"The `io.quarkus.oidc.TokenIntrospection`, a simple `jakarta.json.JsonObject` wrapper object, will be created.\n"
"It can be injected or accessed as a `SecurityIdentity` `introspection` attribute, providing either the JWT or opaque token has been successfully introspected."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Token introspection and `UserInfo` cache"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"All opaque access tokens must be remotely introspected.\n"
"Sometimes, JWT access tokens might also have to be introspected.\n"
"If `UserInfo` is also required, the same access token is used in a subsequent remote call to the OIDC provider.\n"
"So, if `UserInfo` is required, and the current access token is opaque, two remote calls are made for every such token; one remote call to introspect the token and another to get `UserInfo`.\n"
"If the token is JWT, only a single remote call to get `UserInfo` is needed, unless it also has to be introspected."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "The cost of making up to two remote calls for every incoming bearer or code flow access token can sometimes be problematic."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "If this is the case in production, consider caching the token introspection and `UserInfo` data for a short period, for example, 3 or 5 minutes."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"`quarkus-oidc` provides `quarkus.oidc.TokenIntrospectionCache` and `quarkus.oidc.UserInfoCache` interfaces, usable for `@ApplicationScoped` cache implementation.\n"
"Use `@ApplicationScoped` cache implementation to store and retrieve `quarkus.oidc.TokenIntrospection` and/or `quarkus.oidc.UserInfo` objects, as outlined in the following example:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Each OIDC tenant can either permit or deny the storing of its `quarkus.oidc.TokenIntrospection` data, `quarkus.oidc.UserInfo` data, or both with boolean `quarkus.oidc.\"tenant\".allow-token-introspection-cache` and `quarkus.oidc.\"tenant\".allow-user-info-cache` properties."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Additionally, `quarkus-oidc` provides a simple default memory-based token cache, which implements both `quarkus.oidc.TokenIntrospectionCache` and `quarkus.oidc.UserInfoCache` interfaces."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "You can configure and activate the default OIDC token cache as follows:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"The default cache uses a token as a key, and each entry can have `TokenIntrospection`, `UserInfo`, or both.\n"
"It will only keep up to a `max-size` number of entries.\n"
"If the cache is already full when a new entry is to be added, an attempt is made to find a space by removing a single expired entry.\n"
"Additionally, the cleanup timer, if activated, periodically checks for expired entries and removes them."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "You can experiment with the default cache implementation or register a custom one."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "JSON Web Token claim verification"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "After the bearer JWT token's signature has been verified and its `expires at` (`exp`) claim has been checked, the `iss` (`issuer`) claim value is verified next."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"By default, the `iss` claim value is compared to the `issuer` property, which might have been discovered in the well-known provider configuration.\n"
"However, if the `quarkus.oidc.token.issuer` property is set, then the `iss` claim value is compared to it instead."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"In some cases, this `iss` claim verification might not work.\n"
"For example, if the discovered `issuer` property contains an internal HTTP/IP address while the token `iss` claim value contains an external HTTP/IP address.\n"
"Or when a discovered `issuer` property contains the template tenant variable, but the token `iss` claim value has the complete tenant-specific issuer value."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"In such cases, consider skipping the issuer verification by setting `quarkus.oidc.token.issuer=any`.\n"
"Only skip the issuer verification if no other options are available:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "If you are using Keycloak and observe the issuer verification errors caused by the different host addresses, configure Keycloak with a `KEYCLOAK_FRONTEND_URL` property to ensure the same host address is used."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"If the `iss` property is tenant-specific in a multitenant deployment, use the `SecurityIdentity` `tenant-id` attribute to check that the issuer is correct in the endpoint or the custom Jakarta filter.\n"
"For example:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Consider using the `quarkus.oidc.token.audience` property to verify the token `aud` (`audience`) claim value."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Jose4j Validator"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"You can register a custom https://www.javadoc.io/doc/org.bitbucket.b_c/jose4j/latest/org/jose4j/jwt/consumer/class-use/Validator.html[Jose4j Validator] to customize the JWT claim verification process, before `org.eclipse.microprofile.jwt.JsonWebToken` is initialized.\n"
"For example:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Register Jose4j Validator to verify JWT tokens for all OIDC tenants."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Return the claim verification error description."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Return `null` to confirm that this Validator has successfully verified the token."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Use a `@quarkus.oidc.TenantFeature` annotation to bind a custom Validator to a specific OIDC tenant only."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Single-page applications"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "A single-page application (SPA) typically uses `XMLHttpRequest`(XHR) and the JavaScript utility code provided by the OIDC provider to acquire a bearer token to access Quarkus `service` applications."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "For example, if you work with Keycloak, you can use `keycloak.js` to authenticate users and refresh the expired tokens from the SPA:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Cross-origin resource sharing"
msgstr "Cross-Origin 资源共享"

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"If you plan to use your OIDC `service` application from a single-page application running on a different domain, you must configure cross-origin resource sharing (CORS).\n"
"For more information, see the xref:security-cors.adoc#cors-filter[CORS filter] section of the \"Cross-origin resource sharing\" guide."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Provider endpoint configuration"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "An OIDC `service` application needs to know the OIDC provider's token, `JsonWebKey` (JWK) set, and possibly `UserInfo` and introspection endpoint addresses."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "By default, they are discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc.auth-server-url`."
msgstr "默认情况下，它们是通过在配置的 `quarkus.oidc.auth-server-url` 中，添加一个 `/.well-known/openid-configuration` 路径来发现的。"

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"Alternatively, if the discovery endpoint is not available, or if you want to save on the discovery endpoint round-trip, you can disable the discovery and configure them with relative path values.\n"
"For example:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Token propagation"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "For information about bearer access token propagation to the downstream services, see the xref:security-openid-connect-client-reference.adoc#token-propagation-rest[Token propagation] section of the Quarkus \"OpenID Connect (OIDC) and OAuth2 client and filters reference\" guide."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "JWT token certificate chain"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"In some cases, JWT bearer tokens have an `x5c` header which represents an X509 certificate chain whose leaf certificate contains a public key that must be used to verify this token's signature.\n"
"Before this public key can be accepted to verify the signature, the certificate chain must be validated first.\n"
"The certificate chain validation involves several steps:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Confirm that every certificate but the root one is signed by the parent certificate."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Confirm the chain's root certificate is also imported in the truststore."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Validate the chain's leaf certificate. If a common name of the leaf certificate is configured then a common name of the chain's leaf certificate must match it. Otherwise the chain's leaf certificate must also be avaiable in the truststore, unless one or more custom `TokenCertificateValidator` implementations are registered."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "`quarkus.oidc.TokenCertificateValidator` can be used to add a custom certificate chain validation step. It can be used by all tenants expecting tokens with the certificate chain or bound to specific OIDC tenants with the `@quarkus.oidc.TenantFeature` annotation."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "For example, here is how you can configure Quarkus OIDC to verify the token's certificate chain, without using `quarkus.oidc.TokenCertificateValidator`:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "The truststore must contain the certificate chain's root certificate."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "The certificate chain's leaf certificate must have a common name equal to `www.quarkusio.com`. If this property is not configured then the truststore must contain the certificate chain's leaf certificate unless one or more custom `TokenCertificateValidator` implementations are registered."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "You can add a custom certificate chain validation step by registering a custom `quarkus.oidc.TokenCertificateValidator`, for example:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Confirm that the certificate chain's root certificate is bound to the custom JWT token's claim."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "OIDC provider client authentication"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"`quarkus.oidc.runtime.OidcProviderClient` is used when a remote request to an OIDC provider is required.\n"
"If introspection of the Bearer token is necessary, then `OidcProviderClient` must authenticate to the OIDC provider.\n"
"For more information about supported authentication options, see the  xref:security-oidc-code-flow-authentication.adoc#oidc-provider-client-authentication[OIDC provider client authentication] section in the Quarkus \"OpenID Connect authorization code flow mechanism for protecting web applications\" guide."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Testing"
msgstr "测试"

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "If you have to test Quarkus OIDC service endpoints that require xref:security-keycloak-authorization.adoc[Keycloak authorization], follow the xref:security-keycloak-authorization.adoc#testing[Test Keycloak authorization] section."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "You can begin testing by adding the following dependencies to your test project:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "WireMock"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Add the following dependencies to your test project:"
msgstr "在你的测试项目中添加以下依赖项："

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"Prepare the REST test endpoint and set `application.properties`.\n"
"For example:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"Finally, write the test code.\n"
"For example:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"The `quarkus-test-oidc-server` extension includes a signing RSA private key file in a `JSON Web Key` (`JWK`) format and points to it with a `smallrye.jwt.sign.key.location` configuration property.\n"
"It allows you to sign the token by using a no-argument `sign()` operation."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"Testing your `quarkus-oidc` `service` application with `OidcWiremockTestResource` provides the best coverage because even the communication channel is tested against the WireMock HTTP stubs.\n"
"If you need to run a test with WireMock stubs that are not yet supported by `OidcWiremockTestResource`, you can inject a `WireMockServer` instance into the test class, as shown in the following example:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "`OidcWiremockTestResource` does not work with `@QuarkusIntegrationTest` against Docker containers because the WireMock server runs in the JVM that runs the test, which is inaccessible from the Docker container that runs the Quarkus application."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "`OidcTestClient`"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "If you use SaaS OIDC providers, such as `Auth0`, and want to run tests against the test (development) domain or to run tests against a remote Keycloak test realm, if you already have `quarkus.oidc.auth-server-url` configured, you can use `OidcTestClient`."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "For example, you have the following configuration:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "To start, add the same dependency, `quarkus-test-oidc-server`, as described in the <<bearer-token-integration-testing-wiremock>> section."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Next, write the test code as follows:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"This test code acquires a token by using a `password` grant from the test `Auth0` domain, which has registered an application with the client id `test-auth0-client`, and created the user `alice` with password `alice`.\n"
"For a test like this to work, the test `Auth0` application must have the `password` grant enabled.\n"
"This example code also shows how to pass additional parameters.\n"
"For `Auth0`, these are the `audience` and `scope` parameters."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Dev Services for Keycloak"
msgstr "为Keycloak提供的开发服务"

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"The preferred approach for integration testing against Keycloak is xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak].\n"
"`Dev Services for Keycloak` will start and initialize a test container.\n"
"Then, it will create a `quarkus` realm and a `quarkus-app` client (`secret` secret) and add `alice` (`admin` and `user` roles) and `bob` (`user` role) users, where all of these properties can be customized."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "First, add the following dependency, which provides a utility class `io.quarkus.test.keycloak.client.KeycloakTestClient` that you can use in tests for acquiring the access tokens:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"Next, prepare your `application.properties` configuration file.\n"
"You can start with an empty `application.properties` file because `Dev Services for Keycloak` registers `quarkus.oidc.auth-server-url` and points it to the running test container, `quarkus.oidc.client-id=quarkus-app`, and `quarkus.oidc.credentials.secret=secret`."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "However, if you have already configured the required `quarkus-oidc` properties, then you only need to associate `quarkus.oidc.auth-server-url` with the `prod` profile for `Dev Services for Keycloak`to start a container, as shown in the following example:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "If a custom realm file has to be imported into Keycloak before running the tests, configure `Dev Services for Keycloak` as follows:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Finally, write your test, which will be executed in JVM mode, as shown in the following examples:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Example of a test executed in JVM mode:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Example of a test executed in native mode:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "For more information about initializing and configuring Dev Services for Keycloak, see the xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] guide."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "`KeycloakTestResourceLifecycleManager`"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "You can also use `KeycloakTestResourceLifecycleManager` for integration testing with Keycloak."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Use <<bearer-token-integration-testing-keycloak-devservices,Dev Services for Keycloak>> instead of `KeycloakTestResourceLifecycleManager` for integration testing with Keycloak, unless you have specific requirements for using `KeycloakTestResourceLifecycleManager`."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "First, add the following dependency:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "It provides `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager`, which is an implementation of `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` that starts a Keycloak container."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Configure the Maven Surefire plugin as follows, or similarly with `maven.failsafe.plugin` for native image testing:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Prepare the REST test endpoint and set `application.properties` as outlined in the following example:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Summary"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"In the provided example, `KeycloakTestResourceLifecycleManager` registers two users: `alice` and `admin`.\n"
"By default:\n"
"* The user `alice` has the `user` role, which you can customize by using a `keycloak.token.user-roles` system property.\n"
"* The user `admin` has both the `user` and `admin` roles, which you can customize by using the `keycloak.token.admin-roles` system property."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"By default, `KeycloakTestResourceLifecycleManager` uses HTTPS to initialize a Keycloak instance, and this can be disabled by using `keycloak.use.https=false`.\n"
"The default realm name is `quarkus`, and the client id is `quarkus-service-app`.\n"
"If you want to customize these values, set the `keycloak.realm` and `keycloak.service.client` system properties."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Local public key"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "You can use a local inlined public key for testing your `quarkus-oidc` `service` applications, as shown in the following example:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"To generate JWT tokens, copy `privateKey.pem` from the `integration-tests/oidc-tenancy` in the `main` Quarkus repository and use a test code similar to the one in the preceding <<bearer-token-integration-testing-wiremock>> section.\n"
"You can use your own test keys, if preferred."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"This approach provides limited coverage compared to the WireMock approach.\n"
"For example, the remote communication code is not covered."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "TestSecurity annotation"
msgstr "TestSecurity注解"

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "You can use `@TestSecurity` and `@OidcSecurity` annotations to test the `service` application endpoint code, which depends on either one, or all three, of the following injections:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "`JsonWebToken`"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "`OidcConfigurationMetadata`"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Write a test code as outlined in the following example:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "The `ProtectedResource` class, which is used in this code example, might look like this:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"You must always use the `@TestSecurity` annotation.\n"
"Its `user` property is returned as `JsonWebToken.getName()` and its `roles` property is returned as `JsonWebToken.getGroups()`.\n"
"The `@OidcSecurity` annotation is optional and you can use it to set the additional token claims and the `UserInfo` and `OidcConfigurationMetadata` properties.\n"
"Additionally, if the `quarkus.oidc.token.issuer` property is configured, it is used as an `OidcConfigurationMetadata` `issuer` property value."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "If you work with opaque tokens, you can test them as shown in the following code example:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "The  `ProtectedResource` class, which is used in this code example, might look like this:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"The `@TestSecurity`, `user`, and `roles` attributes are available as `TokenIntrospection`, `username`, and `scope` properties.\n"
"Use `io.quarkus.test.security.oidc.TokenIntrospection` to add the additional introspection response properties, such as an `email`, and so on."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "`@TestSecurity` and `@OidcSecurity` can be combined in a meta-annotation, as outlined in the following example:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "This is particularly useful if multiple test methods must use the same set of security settings."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Check errors in the logs"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "To see more details about token verification errors, enable `io.quarkus.oidc.runtime.OidcProvider` and `TRACE` level logging:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "To see more details about `OidcProvider` client initialization errors, enable `io.quarkus.oidc.runtime.OidcRecorder` and `TRACE` level logging as follows:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "External and internal access to OIDC providers"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"The externally-accessible token of the OIDC provider and other endpoints might have different HTTP(S) URLs compared to the URLs that are auto-discovered or configured relative to the `quarkus.oidc.auth-server-url` internal URL.\n"
"For example, suppose your SPA acquires a token from an external token endpoint address and sends it to Quarkus as a bearer token.\n"
"In that case, the endpoint might report an issuer verification failure."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"In such cases, if you work with Keycloak, start it with the `KEYCLOAK_FRONTEND_URL` system property set to the externally accessible base URL.\n"
"If you work with other OIDC providers, refer to your provider's documentation."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Using the `client-id` property"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"The `quarkus.oidc.client-id` property identifies the OIDC client that requested the current bearer token.\n"
"The OIDC client can be an SPA application running in a browser or a Quarkus `web-app` confidential client application propagating the access token to the Quarkus `service` application."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"This property is required if the `service` application is expected to introspect the tokens remotely, which is always the case for the opaque tokens.\n"
"This property is optional for local JSON Web Token (JWT) verification only."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"Setting the `quarkus.oidc.client-id` property is encouraged even if the endpoint does not require access to the remote introspection endpoint.\n"
"This is because when `client-id` is set, it can be used to verify the token audience.\n"
"It will also be included in logs when the token verification fails, enabling better traceability of tokens issued to specific clients and analysis over a longer period."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "For example, if your OIDC provider sets a token audience, consider the following configuration pattern:"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "If you set `quarkus.oidc.client-id`, but your endpoint does not require remote access to one of the OIDC provider endpoints (introspection, token acquisition, and so on), do not set a client secret with `quarkus.oidc.credentials` or similar properties because it will not be used."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Quarkus `web-app` applications always require the `quarkus.oidc.client-id` property."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Authentication after an HTTP request has completed"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"Sometimes, `SecurityIdentity` for a given token must be created when there is no active HTTP request context.\n"
"The `quarkus-oidc` extension provides `io.quarkus.oidc.TenantIdentityProvider` to convert a token to a `SecurityIdentity` instance.\n"
"For example, one situation when you must verify the token after the HTTP request has completed is when you are processing messages with xref:vertx.adoc#event-bus[Vert.x event bus].\n"
"The example below uses the 'product-order' message within different CDI request contexts.\n"
"Therefore, an injected `SecurityIdentity` would not correctly represent the verified identity and be anonymous."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "At this point, the token is not verified when proactive authentication is disabled."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "For the default tenant, the `Tenant` qualifier is optional."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "Executes token verification and converts the token to a `SecurityIdentity`."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"When the provider is used during an HTTP request, the tenant configuration can be resolved as described in\n"
"the xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy] guide.\n"
"However, when there is no active HTTP request, you must select the tenant explicitly with the `io.quarkus.oidc.Tenant` qualifier."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"xref:security-openid-connect-multitenancy.adoc#tenant-config-resolver[Dynamic tenant configuration resolution] is currently not supported.\n"
"Authentication that requires a dynamic tenant will fail."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "OIDC request filters"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"You can filter OIDC requests made by Quarkus to the OIDC provider by registering one or more `OidcRequestFilter` implementations, which can update or add new request headers, and log requests.\n"
"For more information, see xref:security-oidc-code-flow-authentication#code-flow-oidc-request-filters[OIDC request filters]."
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "References"
msgstr "参考文献"

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties]"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "xref:security-oidc-bearer-token-authentication-tutorial.adoc[Protect a service application by using OIDC Bearer token authentication]"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "link:https://www.keycloak.org/documentation.html[Keycloak documentation]"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "link:https://openid.net/connect/[OpenID Connect]"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "link:https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "link:https://tools.ietf.org/html/rfc7519[JSON网络令牌]"

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "xref:security-openid-connect-client-reference.adoc[OpenID Connect and OAuth2 client and filters reference guide]"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "xref:security-jwt-build.adoc[Sign and encrypt JWT tokens with SmallRye JWT Build]"
msgstr "xref:security-jwt-build.adoc[使用 SmallRye JWT Build 对 JWT 令牌进行签名和加密]"

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "xref:security-authentication-mechanisms.adoc#oidc-jwt-oauth2-comparison[Choosing between OpenID Connect, SmallRye JWT, and OAuth2 authentication mechanisms]"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "xref:security-authentication-mechanisms.adoc#combining-authentication-mechanisms[Combining authentication mechanisms]"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "xref:security-keycloak-admin-client.adoc[Quarkus Keycloak Admin Client]"
msgstr ""

#: _versions/3.15/guides/security-oidc-bearer-token-authentication.adoc
msgid "xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy]"
msgstr ""
