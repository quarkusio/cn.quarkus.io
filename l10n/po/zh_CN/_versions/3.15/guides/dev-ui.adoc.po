msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.15/guides/dev-ui.adoc
msgid "Dev UI for extension developers"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Dev UI v2"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "This guide covers the Dev UI v2, which is the default from Quarkus 3 onwards."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "This guide covers the Quarkus Dev UI for xref:building-my-first-extension.adoc[extension authors]."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid ""
"Quarkus ships with a Developer UI, which is available in dev mode (when you start\n"
"quarkus with `mvn quarkus:dev`) at http://localhost:8080/q/dev-ui[/q/dev-ui] by default. It will show you something like\n"
"this:"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "It allows you to:"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "quickly visualize all the extensions currently loaded"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "view extension statuses and go directly to extension documentation"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "view and change `Configuration`"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "manage and visualize `Continuous Testing`"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "view `Dev Services` information"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "view the Build information"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "view and stream various logs"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Each extension used in the application will be listed. There, you can find the guides, additional information, and the applicable configuration for each extension:"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Make my extension extend the Dev UI"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "To make your extension listed in the Dev UI, you don't need to do anything!"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "So you can always start with that :)"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Extensions can:"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "<<add-links-to-an-extension-card,Add links to an extension card>>"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "<<add-full-pages,Add full custom pages>>"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "<<add-a-log-file,Add a log stream>>"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "<<add-a-section-menu,Add a section menu>>"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "<<custom-cards,Create a custom card>>"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Add links to an extension card"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "External links"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "These are links that reference other (external from Dev UI) data. This data can be HTML pages, text, or other data."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "A good example of this is the SmallRye OpenAPI extension that contains links to the generated OpenAPI schema in both JSON and YAML format, and a link to Swagger UI:"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "The links to these external references are known at build time. So to get links like this on your card, you add the following Build Step in your extension:"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Always make sure that this build step is only run when in dev mode"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "To add anything on the card, you must return/produce a `CardPageBuildItem`."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "To add a link, you can use the `addPage` method, as all links go to a \"page\". `Page` has some builders to assist with building a page. For `external` links, use the `externalPageBuilder`."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Adding the url of the external link (in this case, we use `NonApplicationRootPathBuildItem` to create this link, as this link is under the configurable non-application path, default `/q`). Always use `NonApplicationRootPathBuildItem` if your link is available under `/q`."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "You can (optionally) hint the content type of the content you are navigating to. If there is no hint, a header call will be made to determine the `MediaType`;"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "You can add an icon. All free font-awesome icons are available."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Note about icons"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "If you find your icon at https://fontawesome.com/search?o=r&m=free[Font awesome], you can map as follow: Example `<i class=\"fa-solid fa-house\"></i>` will map to `font-awesome-solid:house`, so `fa` becomes `font-awesome` and for the icon name, remove the `fa-`."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Embedding external content"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "By default, even external links will render inside (embedded) in Dev UI. In the case of HTML, the page will be rendered, and any other content will be shown using https://codemirror.net/[code-mirror] to markup the media type. For example, the OpenAPI schema document in YAML format:"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "If you do not want to embed the content, you can use the `.doNotEmbed()` on the Page Builder, this will then open the link in a new tab."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Runtime external links"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "The example above assumes you know the link to use at build time. There might be cases where you only know this at runtime. In that case, you can use a <<JsonRPC>> Method that returns the link to add, and use that when creating the link. Rather than using the `.url` method on the page builder, use the `.dynamicUrlJsonRPCMethodName(\"yourJsonRPCMethodName\")`."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Adding labels"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "You can add an option label to the link in the card using one of the builder methods on the page builder. These labels can be"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "static (known at build time) `.staticLabel(\"staticLabelValue\")`"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "dynamic (loaded at runtime) `.dynamicLabelJsonRPCMethodName(\"yourJsonRPCMethodName\")`"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "streaming (continuously streaming updated values at runtime) `.streamingLabelJsonRPCMethodName(\"yourJsonRPCMethodName\")`"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "For dynamic and streaming labels, see the <<JsonRPC>> Section."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Add full pages"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "You can also link to an \"internal\" page (as opposed to the above \"external\" page). This means that you can build the page and add data and actions for rendering in Dev UI."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Build time data"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "To make build time data available on your full page, you can add any data to your `CardPageBuildItem` with a key and a value:"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "You can add multiple of these key-value pairs for all the data you know at build time that you need on the page."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "There are a few options to add full page content in Dev UI. Starting from the most basic (good start) to a full blown web-component (preferred)."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Display some build time data on a screen (without having to do frontend coding):"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "If you have some data that is known at build time that you want to display, you can use one of the following builders in `Page`:"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "<<raw-data,Raw data>>"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "<<table-data,Table data>>"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "<<qute-data,Qute data>>"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "<<web-component-page,Web Component page>>"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Raw data"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "This will display your data in its raw (serialised) JSON value:"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Use the `rawDataPageBuilder`."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Link back to the key used when you added the build time data in `addBuildTimeData` on the Page BuildItem."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "That will create a link to a page that renders the raw data in JSON:"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Table data"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "You can also display your Build time data in a table if the structure allows it:"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Use the `tableDataPageBuilder`."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Optionally only show certain fields."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "That will create a link to a page that renders the data in a table:"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Qute data"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "You can also display your build time data using a qute template. All build time data keys are available to use in the template:"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Use the `quteDataPageBuilder`."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Link to the Qute template in `/deployment/src/main/resources/dev-ui/`."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Use any Qute template to display the data, for example, `qute-jokes-template.html`:"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "`jokes` added as a build time data key on the Page Build Item."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Web component page"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "To build an interactive page with actions and runtime (or build time) data, you must use the web component page:"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Use the `webComponentPageBuilder`."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Link to the Web Component in `/deployment/src/main/resources/dev-ui/`. The title can also be defined (using `.title(\"My title\")` in the builder), but if not, the title will be assumed from the componentLink, which should always have the format `qwc` (stands for Quarkus Web Component) dash `extensionName` (example, `arc` in this case ) dash `page title` (\"Beans\" in this case)"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Dev UI uses https://lit.dev/[Lit] to make building these web components easier. You can read more about Web Components and Lit:"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "https://www.webcomponents.org/introduction[Web components Getting started]"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "https://lit.dev/docs/[Lit documentation]"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Basic structure of a Web component page"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "A Web component page is just a JavaScript Class that creates a new HTML Element:"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid ""
"You can import Classes and/or functions from other libraries.\n"
"In this case, we use the `LitElement` class and `html` & `css` functions from `Lit`"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Build time data as defined in the Build step and can be imported using the key and always from `build-time-data`. All keys added in your Build step will be available."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "The component should be named in the following format: Qwc (stands for Quarkus Web Component), then Extension Name, then Page Title, all concatenated with Camel Case. This will also match the file name format as described earlier. The component should also extend `LitComponent`."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "CSS styles can be added using the `css` function, and these styles only apply to your component."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Styles can reference globally defined CSS variables to make sure your page renders correctly, especially when switching between light and dark mode. You can find all CSS variables in the Vaadin documentation (https://vaadin.com/docs/latest/styling/lumo/lumo-style-properties/color[Color], https://vaadin.com/docs/latest/styling/lumo/lumo-style-properties/size-space[Sizing and Spacing], etc.)"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Properties can be added. Use `_` in front of a property if that property is private. Properties are usually injected in the HTML template, and can be defined as having state, meaning that if that property changes, the component should re-render. In this case, the beans are Build time data and only change on hot-reload, which will be covered later."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Constructors (optional) should always call `super` first and then set the default values for the properties."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "The render method (from `LitElement`) will be called to render the page. In this method, you return the markup of the page you want. You can use the `html` function from `Lit`, which gives you a template language to output the HTML you want. Once the template is created, you must only set or change the properties to re-render the page content. Read more about https://lit.dev/docs/components/rendering/[Lit html]"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "You can use the built-in template functions to do conditional, list, etc. Read more about https://lit.dev/docs/templates/overview/[Lit Templates]"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "You must always register your Web component as a custom element, with a unique tag. Here, the tag will follow the same format as the filename (`qwc` dash `extension name` dash `page title` );"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Using Vaadin UI components for rendering"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Dev UI makes extensive usage of https://vaadin.com/docs/latest/components[Vaadin web components] as UI Building blocks."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "As an example, the Arc Beans are rendered using a https://vaadin.com/docs/latest/components/grid[Vaadin Grid]:"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Import the Vaadin component you want to use"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "You can also import other functions if needed"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "You can also use any component in the Qomponent library, described below"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Qomponent"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "We also include all components from the [Qomponent](https://github.com/qomponent) library"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "[Card](https://www.npmjs.com/package/@qomponent/qui-card)"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "[Badge](https://www.npmjs.com/package/@qomponent/qui-badge)"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "[Alert](https://www.npmjs.com/package/@qomponent/qui-alert)"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "[Code block](https://www.npmjs.com/package/@qomponent/qui-code-block)"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Card"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Card component to display contents in a card"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Badge"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Badge UI Component based on the https://vaadin.com/docs/latest/components/badge[vaadin themed] badge"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "You can use any combination of small, primary, pill, with icon and clickable with any level of `default`, `success`, `warning`, `error`, `contrast`, or set your own colors."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Alert"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Alerts are modeled around the Bootstrap alerts. Click https://getbootstrap.com/docs/4.0/components/alerts[here] for more info."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Also, see the Notification controller below as an alternative."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Code block"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Display a code block. This component is aware of the theme and will use the correct codemirror theme to match the light/dark mode."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Or fetching the contents from a URL:"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "To make sure that the code block adopt the correct code-mirror theme (based on the current one in Dev UI), you can do the following:"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Then change the `extends` to observe state:"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Now you can get the current theme, so add the `theme` property to your code block, example:"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid ""
"Modes:\n"
" - properties\n"
" - js\n"
" - java\n"
" - xml\n"
" - json\n"
" - yaml\n"
" - sql\n"
" - html\n"
" - css\n"
" - sass\n"
" - markdown"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Internal components"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "IDE link"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Creates a link to a resource (like a Java source file) that can be opened in the user's IDE (if we could detect the IDE)."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "https://github.com/quarkusio/quarkus/blob/582f1f78806d2268885faea7aa8f5a4d2b3f5b98/extensions/vertx-http/dev-ui-resources/src/main/resources/dev-ui/qwc/qwc-server-log.js#L315[Example code]"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Using internal controllers"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Some https://github.com/quarkusio/quarkus/tree/main/extensions/vertx-http/dev-ui-resources/src/main/resources/dev-ui/controller[internal controllers] are available to make certain things easier:"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Notifier"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Storage"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Log"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Router"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "<<JsonRPC>>"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "This is an easy way to show a toast message. The toast can be placed on the screen (default left bottom) and can have a level (Info, Success, Warning, Error). Any of the levels can also be primary, which will create a more prominent toast message."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "See the source of this controller https://github.com/quarkusio/quarkus/blob/main/extensions/vertx-http/dev-ui-resources/src/main/resources/dev-ui/controller/notifier.js[here]."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Example usage:"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "You can find all the valid positions https://vaadin.com/docs/latest/components/notification/#position[here]."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "https://github.com/phillip-kruger/quarkus-jokes/blob/f572ed6f949de0c0b8cbfa99d7389ab5168fea65/deployment/src/main/resources/dev-ui/qwc-jokes-vaadin.js#L374[Example code]"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "An easy way to access the local storage in a safe way. This will store values in the local storage, which is scoped for your extension. This way, you do not have to worry that you might clash with another extension."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Local storage is useful to remember user preferences or state. For example, the footer remembers the state (open/close) and the size when open of the bottom drawer."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "https://github.com/quarkusio/quarkus/blob/main/extensions/vertx-http/dev-ui-resources/src/main/resources/dev-ui/qwc/qwc-footer.js[Example code]"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid ""
"The log controller is used to add control buttons to a (footer) log.\n"
"See <<Add a log file>>."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "https://github.com/quarkusio/quarkus/blob/main/extensions/vertx-http/dev-ui-resources/src/main/resources/dev-ui/qwc/qwc-server-log.js[Example code]"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "The router is mostly used internally. This uses https://github.com/vaadin/router[Vaadin Router] under the covers to route URLs to the correct page/section within the SPA. It will update the navigation and allow history (back button). This also creates the sub-menu available on extensions that have multiple pages."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "See the https://github.com/quarkusio/quarkus/blob/main/extensions/vertx-http/dev-ui-resources/src/main/resources/dev-ui/controller/router-controller.js[controller] for some methods that might be useful."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Communicating to the backend"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "JsonRPC against the Runtime classpath"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "You can fetch or stream runtime data (rather than <<Build time data>> discussed earlier) or execute methods against the runtime classpath (as opposed to deployment classpath). There are two parts to getting data during runtime. The Java side in the runtime module, and then the usage in the web component."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "*Java part*"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "This code is responsible for making data available to display on the UI."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "You must register the `JsonPRCService` in your processor in the deployment module:"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Always only do this in Dev Mode"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Produce or return a `JsonRPCProvidersBuildItem`"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Define the class in your runtime module that will contain methods that make data available in the UI"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "https://github.com/quarkusio/quarkus/blob/main/extensions/cache/deployment/src/main/java/io/quarkus/cache/deployment/devui/CacheDevUiProcessor.java[Example code]"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Now, in your Runtime module, create the JsonRPC Service. This class will default to an application-scoped bean, except if you explicitly scope the bean. All public methods that return something will be made available to call from the Web component Javascript."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "The return object in these methods can be:"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "primitives or `String`,"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "`io.vertx.core.json.JsonArray`"
msgstr "`io.vertx.core.json.JsonArray`"

#: _versions/3.15/guides/dev-ui.adoc
msgid "`io.vertx.core.json.JsonObject`"
msgstr "`io.vertx.core.json.JsonObject`"

#: _versions/3.15/guides/dev-ui.adoc
msgid "any other POJO that can be serializable to JSON"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "All of the above can be blocking (POJO) or nonblocking (`@NonBlocking` or `Uni`). Alternatively, data can be streamed using `Multi`."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "This example runs nonblocking. We could also return `Uni<JsonArray>`"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "The method name `getAll` will be available in the Javascript"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "https://github.com/quarkusio/quarkus/blob/main/extensions/cache/runtime/src/main/java/io/quarkus/cache/runtime/devconsole/CacheJsonRPCService.java[Example code]"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "*Webcomponent (Javascript) part*"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Now you can use the JsonRPC controller to access the `getAll` method (and any other methods in your JsonRPC Service)"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Note the method `getAll` corresponds to the method in your Java Service. This method returns a https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise[Promise] with the JsonRPC result."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "In this case, the result is an array, so we can loop over it."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "JsonArray (or any Java collection), either blocking or nonblocking, will return an array; otherwise, a JsonObject will be returned."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "https://github.com/quarkusio/quarkus/blob/main/extensions/cache/deployment/src/main/resources/dev-ui/qwc-cache-caches.js[Example code]"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid ""
"You can also pass in parameters in the method being called, for example:\n"
"(In the Runtime Java code)"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "The clear method takes one parameter called `name`"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "In the Webcomponent (Javascript):"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "The `name` parameter is passed in."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Streaming data"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "You can keep a UI screen updated with the latest data by continuously streaming data to the screen. This can be done with `Multi` (Java side) and `Observer` (Javascript side)"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Java side of streaming data:"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Return the Multi that will stream jokes"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "https://github.com/phillip-kruger/quarkus-jokes/blob/f572ed6f949de0c0b8cbfa99d7389ab5168fea65/runtime/src/main/java/io/quarkus/jokes/runtime/JokesJsonRPCService.java#L37[Example code]"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Javascript side of streaming data:"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "You can call the method (optionally passing in parameters) and then provide the code that will be called on the next event."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Make sure to keep an instance of the observer to cancel later if needed."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "https://github.com/phillip-kruger/quarkus-jokes/blob/main/deployment/src/main/resources/dev-ui/qwc-jokes-web-components.js[Example code]"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "JsonRpc against the deployment classpath"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid ""
"In certain cases you might need to execute methods and/or get data against the deployment classpath. This also happens over JsonRPC communication, but in this case you do not create a JsonRPC Service in the runtime module,\n"
"you can just supply the code to be run in a supplier in the deployment module. To do this you will produce a `BuildTimeActionBuildItem`, example:"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Return or use a BuildProducer to create a `BuildTimeActionBuildItem`"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "`BuildTimeActionBuildItem` is automatically scoped with your extension namespace"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Here we add an action, that is the same as a request-response method. The method name (that can be called from js in the same way as any json-rpc service) is `generateManifests`."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "You can also return a `CompletableFuture`/`CompletionStage` as an action, and if you want to stream data you need to use `addSubscription` (rather than `addAction`) and return a `Flow.Publisher`."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Dev UI Log"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "When running a local application using the `999-SNAPSHOT` version, the Dev UI will show a `Dev UI` Log in the footer. This is useful for debugging all JSON RPC messages flowing between the browser and the Quarkus app."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Hot reload"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "You can update a screen automatically when a hot reload happens. To do this, replace the `LitElement` that your Webcomponent extends with `QwcHotReloadElement`."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "`QwcHotReloadElement` extends `LitElement`, so your component is still a Lit Element."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "When extending a `QwcHotReloadElement`, you have to use the `hotReload` method. (You must also still provide the `render` method from Lit)"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Custom cards"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "You can customize the card that is being displayed on the extension page if you do not want to use the default built-in card."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "To do this, you must provide a Webcomponent that will be loaded in the place of the provided card and register this in the Java Processor:"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "On the Javascript side, you have access to all the pages (in case you want to create links)"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "And the following properties will be passed in:"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "extensionName"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "description"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "guide"
msgstr "guide"

#: _versions/3.15/guides/dev-ui.adoc
msgid "namespace"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "State (advance)"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "State allows properties to contain state and can be reused globally. An example of state properties is the theme, the connection state (if we are connected to the backend), etc."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "See the https://github.com/quarkusio/quarkus/tree/main/extensions/vertx-http/dev-ui-resources/src/main/resources/dev-ui/state[current built-in] state objects."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "The state in Dev UI uses https://github.com/gitaarik/lit-state[LitState]. You can read more about it in their https://gitaarik.github.io/lit-state/build/[documentation]."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Add a log file"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Apart from adding a card and a page, extensions can add a log to the footer. This is useful for logging things that are happening continuously. A page will lose connection to the backend when navigating away from that page, and a log in the footer will be permanently connected."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Adding something to the footer works exactly like adding a Card, except you use a `FooterPageBuildItem` rather than a `CardPageBuildItem`."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "https://github.com/phillip-kruger/quarkus-jokes/blob/f572ed6f949de0c0b8cbfa99d7389ab5168fea65/deployment/src/main/java/io/quarkus/jokes/deployment/devui/JokesDevUIProcessor.java#L87[Example code]"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "In your Webcomponent, you can then stream the log to the UI:"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "https://github.com/phillip-kruger/quarkus-jokes/blob/main/deployment/src/main/resources/dev-ui/qwc-jokes-log.js[Example code]"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Add a section menu"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "This allows an extension to link a page directly in the section Menu."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Adding something to the section menu works exactly like adding a Card, except you use a `MenuPageBuildItem` rather than a `CardPageBuildItem`."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "https://github.com/phillip-kruger/quarkus-jokes/blob/f572ed6f949de0c0b8cbfa99d7389ab5168fea65/deployment/src/main/java/io/quarkus/jokes/deployment/devui/JokesDevUIProcessor.java#LL71C16-L71C16[Example code]"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Your page can be any Page similar to Cards."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Testing"
msgstr "测试"

#: _versions/3.15/guides/dev-ui.adoc
msgid "You can add tests to your extension that test:"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Runtime data via JsonRPC"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "You must add this to your pom:"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "This will give you access to two base classes for creating these tests."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Testing Build time data"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "If you added Build time data, for example:"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "To test that your build time data is generated correctly, you can add a test that extends `DevUIBuildTimeDataTest`."
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "Testing Runtime data"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "If you added a JsonRPC Service with runtime data responses, for example:"
msgstr ""

#: _versions/3.15/guides/dev-ui.adoc
msgid "To test that `updateProperties` executes correctly via JsonRPC, you can add a test that extends `DevUIJsonRPCTest`."
msgstr ""
