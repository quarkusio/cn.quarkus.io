# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-08-28 16:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "Vert.x Reference Guide"
msgstr "Vert.x参考指南"

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"https://vertx.io[Vert.x] is a toolkit for building reactive applications.\n"
"As described in the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture], Quarkus uses Vert.x underneath."
msgstr "link:https://vertx.io[Vert.x] 是一个用于构建响应式应用程序的工具集。正如 link:quarkus-reactive-architecture.html[Quarkus响应式架构] 中所描述的，下面，Quarkus将使用Vert.x。"

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"This guide is the companion to the xref:vertx.adoc[Using Eclipse Vert.x API from a Quarkus Application] guide.\n"
"It provides more advanced details about the usage and the configuration of the Vert.x instance used by Quarkus."
msgstr "本指南是《 link:vertx.html[从Quarkus应用程序中使用Eclipse Vert.x API] 》指南的补充。它提供了关于Quarkus使用的Vert.x实例的使用和配置的更多高级细节。"

#. type: Title ==
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "Access the Vert.x instance"
msgstr "访问Vert.x实例"

#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid ""
"To access the managed Vert.x instance, add the `quarkus-vertx` extension to your project.\n"
"This dependency might already be available in your project (as a transitive dependency)."
msgstr "要访问托管的 Vert.x 实例，请在项目中添加 `quarkus-vertx` 扩展。该依赖关系可能已经存在于您的项目中（作为传递依赖关系）。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "With this extension, you can retrieve the managed instance of Vert.x using either field or constructor injection:"
msgstr "通过这个扩展，你可以使用字段或构造函数注入检索Vert.x的托管实例："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "You can inject either the:"
msgstr "你也可以这样注入："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid "`io.vertx.core.Vertx` instance exposing the _bare_ Vert.x API"
msgstr "`io.vertx.core.Vertx` 实例暴露 _裸_ Vert.x API"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid "`io.vertx.mutiny.core.Vertx` instance exposing the _Mutiny_ API"
msgstr "`io.vertx.mutiny.core.Vertx` 实例暴露了 _Mutiny_ API"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "We recommend using the Mutiny variant as it integrates with the other reactive APIs provided by Quarkus."
msgstr "我们推荐使用Mutiny变体，因为它可以与Quarkus提供的其他响应式API集成。"

#. type: Block title
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "Mutiny"
msgstr "叛变"

#. type: delimited block =
#: _versions/3.2/guides/vertx-reference.adoc
msgid "If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "如果你不熟悉Mutiny，请查看 link:mutiny-primer.html[Mutiny - 一个直观的响应式编程库] 。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Documentation about the Vert.x Mutiny variant is available on https://smallrye.io/smallrye-mutiny-vertx-bindings."
msgstr "关于Vert.x Mutiny变体的文档可在 https://smallrye.io/smallrye-mutiny-vertx-bindings "

#. type: Title ==
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "Configure the Vert.x instance"
msgstr "配置Vert.x实例"

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"You can configure the Vert.x instance from the `application.properties` file.\n"
"The following table lists the supported properties:"
msgstr "你可以从 `application.properties` 文件中配置Vert.x实例。下表列出了支持的属性："

#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr "<span class=\"icicon\"><i class=\"fa fa-lock\" title=\"在构建时固定\"></i></span>在构建时固定的配置属性 - 所有其他配置属性都可在运行时重写 <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid "See xref:customizing-the-vert-x-configuration[Customize the Vert.x configuration] to configure the Vert.x instance using a programmatic approach."
msgstr "参见 link:#customizing-the-vert-x-configuration[自定义Vert.x配置] ，使用编程方法配置Vert.x实例。"

#. type: Title ==
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "Use Vert.x clients"
msgstr "使用 Vert.x 客户端"

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"In addition to Vert.x core, you can use most Vert.x ecosystem libraries.\n"
"Some Quarkus extension already wraps Vert.x libraries."
msgstr "除了Vert.x核心，你可以使用大多数Vert.x生态系统库。一些Quarkus扩展已经包装了Vert.x库。"

#. type: Title ===
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Available APIs"
msgstr "可用的API"

#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid ""
"The following table lists the **most** used libraries from the Vert.x ecosystem.\n"
"To access these APIs, add the indicated extension or dependency to your project.\n"
"Check the associated documentation to learn how to use them."
msgstr "下表列出了 Vert.x 生态系统中 *最* 常用的库。要访问这些应用程序接口，请将指定的扩展或依赖关系添加到您的项目中。查看相关文档，了解如何使用它们。"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "API"
msgstr "API"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Extension or Dependency"
msgstr "扩展或依赖性"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Documentation"
msgstr "文档"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "AMQP Client"
msgstr "AMQP 客户端"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "`io.quarkus:quarkus-smallrye-reactive-messaging-amqp` (extension)"
msgstr "`io.quarkus:quarkus-smallrye-reactive-messaging-amqp` (延长)"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "xref:amqp.adoc"
msgstr "xref:amqp.adoc"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Circuit Breaker"
msgstr "熔断器"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-circuit-breaker` (external dependency)"
msgstr "`io.smallrye.reactive:smallrye-mutiny-vertx-circuit-breaker` （外部依赖性）"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "https://vertx.io/docs/vertx-circuit-breaker/java/"
msgstr " https://vertx.io/docs/vertx-circuit-breaker/java/ "

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "Consul Client"
msgstr "领事客户"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-consul-client` (external dependency)"
msgstr "`io.smallrye.reactive:smallrye-mutiny-vertx-consul-client` （外部依赖性）"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "https://vertx.io/docs/vertx-consul-client/java/"
msgstr " https://vertx.io/docs/vertx-consul-client/java/ "

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "DB2 Client"
msgstr "DB2 客户端"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "`io.quarkus:quarkus-reactive-db2-client` (extension)"
msgstr "`io.quarkus:quarkus-reactive-db2-client` (延长)"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "xref:reactive-sql-clients.adoc"
msgstr "xref:reactive-sql-clients.adoc"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "Kafka Client"
msgstr "卡夫卡客户端"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "`io.quarkus:quarkus-smallrye-reactive-messaging-kafka` (extension)"
msgstr "`io.quarkus:quarkus-smallrye-reactive-messaging-kafka` (延长)"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "xref:kafka.adoc"
msgstr "xref:kafka.adoc"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Mail Client"
msgstr "邮件客户端"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "`io.quarkus:quarkus-mailer` (extension)"
msgstr "`io.quarkus:quarkus-mailer` (延长)"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "xref:mailer.adoc"
msgstr "xref:mailer.adoc"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "MQTT Client"
msgstr "MQTT 客户端"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "`io.quarkus:quarkus-smallrye-reactive-messaging-mqtt` (extension)"
msgstr "`io.quarkus:quarkus-smallrye-reactive-messaging-mqtt` (延长)"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "No guide yet"
msgstr "尚无指南"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "MS SQL Client"
msgstr "MS SQL 客户端"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "`io.quarkus:quarkus-reactive-mssql-client` (extension)"
msgstr "`io.quarkus:quarkus-reactive-mssql-client` (延长)"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "MySQL Client"
msgstr "MySQL 客户端"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "`io.quarkus:quarkus-reactive-mysql-client` (extension)"
msgstr "`io.quarkus:quarkus-reactive-mysql-client` (延长)"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "Oracle Client"
msgstr "甲骨文客户端"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "`io.quarkus:quarkus-reactive-oracle-client` (extension)"
msgstr "`io.quarkus:quarkus-reactive-oracle-client` (延长)"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "PostgreSQL Client"
msgstr "PostgreSQL 客户端"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "`io.quarkus:quarkus-reactive-pg-client` (extension)"
msgstr "`io.quarkus:quarkus-reactive-pg-client` (延长)"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "RabbitMQ Client"
msgstr "RabbitMQ 客户端"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-rabbitmq-client` (external dependency)"
msgstr "`io.smallrye.reactive:smallrye-mutiny-vertx-rabbitmq-client` （外部依赖性）"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "https://vertx.io/docs/vertx-rabbitmq-client/java"
msgstr " https://vertx.io/docs/vertx-rabbitmq-client/java "

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "Redis Client"
msgstr "Redis客户端"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "`io.quarkus:quarkus-redis-client` (extension)"
msgstr "`io.quarkus:quarkus-redis-client` (延长)"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "xref:redis.adoc"
msgstr "xref:redis.adoc"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "Web Client"
msgstr "网络客户端"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-web-client` (external dependency)"
msgstr "`io.smallrye.reactive:smallrye-mutiny-vertx-web-client` （外部依赖性）"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "https://vertx.io/docs/vertx-web-client/java/"
msgstr " https://vertx.io/docs/vertx-web-client/java/ "

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "To learn more about the usage of the Vert.x Mutiny API, refer to https://smallrye.io/smallrye-mutiny-vertx-bindings."
msgstr "要了解更多关于Vert.x Mutiny API的用法，请参考 https://smallrye.io/smallrye-mutiny-vertx-bindings"

#. type: Title ===
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "Use the Vert.x Web Client"
msgstr "使用 Vert.x 客户端"

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"This section gives an example using the Vert.x `WebClient` in the context of a RESTEasy Reactive application.\n"
"As indicated in the table above, add the following dependency to your project:"
msgstr "本节给出一个在RESTEasy Reactive应用程序中使用Vert.x `WebClient` 的例子。如上表所示，在你的项目中添加以下依赖："

#. type: Block title
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Now, in your code, you can create an instance of `WebClient`:"
msgstr "现在，在你的代码中，你可以创建一个 `WebClient` 的实例："

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"This resource creates a `WebClient` and, upon request, uses this client to invoke a remote HTTP API.\n"
"Depending on the result, the response is forwarded as received, or it creates a JSON object wrapping the error.\n"
"The `WebClient` is asynchronous (and non-blocking), to the endpoint returns a `Uni`."
msgstr "该资源创建了一个 `WebClient` ，并在请求时使用该客户端来调用远程HTTP API。根据结果，响应被转发，或者创建一个包含错误的 JSON 对象。 `WebClient` 是异步的（和非阻塞的），端点返回一个 `Uni` 。"

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"The application can also run as a native executable.\n"
"But, first, we need to instruct Quarkus to enable _ssl_ (if the remote API uses HTTPS).\n"
"Open the `src/main/resources/application.properties` and add:"
msgstr "该应用程序也可以作为一个本地可执行文件运行。但是，首先，我们需要指示Quarkus启用 _ssl_ （如果远程API使用HTTPS）。打开 `src/main/resources/application.properties` ，并添加："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Then, create the native executable with:"
msgstr "然后，用以下方法创建本地可执行文件："

#. type: Title ==
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "Use Vert.x JSON"
msgstr "使用Vert.x JSON"

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"Vert.x APIs often rely on JSON.\n"
"Vert.x provides two convenient classes to manipulate JSON document: `io.vertx.core.json.JsonObject` and `io.vertx.core.json.JsonArray`."
msgstr "Vert.x的API经常依赖JSON。Vert.x提供了两个方便的类来操作JSON文档： `io.vertx.core.json.JsonObject` 和 `io.vertx.core.json.JsonArray` 。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "`JsonObject` can be used to map an object into its JSON representation and build an object from a JSON document:"
msgstr "`JsonObject` 可用于将一个对象映射到其JSON表示中，并从JSON文档中建立一个对象。"

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"Note that these features use the mapper managed by the `quarkus-jackson` extension.\n"
"Refer to xref:rest-json.adoc#json[Jackson configuration] to customize the mapping."
msgstr "注意，这些功能使用由 `quarkus-jackson` 扩展管理的映射器。请参考 link:rest-json.html#json[Jackson的配置] 来自定义映射。"

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"JSON Object and JSON Array are both supported as Quarkus HTTP endpoint requests and response bodies (using classic RESTEasy and RESTEasy Reactive).\n"
"Consider these endpoints:"
msgstr "JSON Object和JSON Array都支持作为Quarkus HTTP端点的请求和响应体（使用经典的RESTEasy和RESTEasy Reactive）。考虑一下这些端点："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "http://localhost:8080/hello/Quarkus/object returns:"
msgstr " http://localhost:8080/hello/Quarkus/object 返回："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "http://localhost:8080/hello/Quarkus/array returns:"
msgstr " http://localhost:8080/hello/Quarkus/array 返回："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "This works equally well when the JSON content is a request body or is wrapped in a `Uni`, `Multi`, `CompletionStage` or `Publisher`."
msgstr "当JSON内容是一个请求体或被包裹在一个 `Uni` , `Multi` , `CompletionStage` 或 `Publisher` 中时，这同样适用。"

#. type: Title ==
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "Use Verticles"
msgstr "使用verticles"

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"link:https://vertx.io/docs/vertx-core/java/#_verticles[Verticles] is \"a simple, scalable, actor-like deployment and concurrency model\" provided by _Vert.x_.\n"
"This model does not claim to be a strict actor-model implementation, but it shares similarities, especially concerning concurrency, scaling, and deployment.\n"
"To use this model, you write and _deploy_ verticles, communicating by sending messages on the event bus."
msgstr "link:https://vertx.io/docs/vertx-core/java/#<em>verticles[Verticles] 是_Vert.x提供的 \"一个简单的、可扩展的、类似于演员的部署和并发模型\"。这个模型并不声称是一个严格的actor-model实现，但它有相似之处，特别是关于并发、扩展和部署。为了使用这个模型，你编写和 _部署_ 顶点，通过在事件总线上发送消息进行通信。"

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"You can deploy _verticles_ in Quarkus.\n"
"It supports:"
msgstr "你可以在Quarkus中部署 _verticles_ 。它支持："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "_bare_ verticle - Java classes extending `io.vertx.core.AbstractVerticle`"
msgstr "_bare_ verticle - 延伸的Java类 `io.vertx.core.AbstractVerticle` "

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "_Mutiny_ verticle - Java classes extending `io.smallrye.mutiny.vertx.core.AbstractVerticle`"
msgstr " _Mutiny_ verticle - 扩展的Java类 `io.smallrye.mutiny.vertx.core.AbstractVerticle` "

#. type: Title ===
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "Deploy Verticles"
msgstr "部署verticles"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "To deploy verticles, use the `deployVerticle` method:"
msgstr "要部署verticles，使用 `deployVerticle` 方法。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "If you use the Mutiny-variant of Vert.x, be aware that the `deployVerticle` method returns a `Uni`, and you would need to trigger a subscription to make the actual deployment."
msgstr "如果你使用Vert.x的Mutiny-variant，请注意 `deployVerticle` 方法返回一个 `Uni` ，你需要触发一个订阅来进行实际部署。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "An example explaining how to deploy verticles during the initialization of the application will follow."
msgstr "接下来会有一个例子解释如何在应用程序的初始化过程中部署verticles："

#. type: Title ===
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "Use @ApplicationScoped beans as Verticle"
msgstr "使用@ApplicationScoped Beans作为Verticle"

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"In general, Vert.x verticles are not CDI beans.\n"
"And so cannot use injection.\n"
"However, in Quarkus, you can deploy verticles as beans.\n"
"Note that in this case, CDI (Arc in Quarkus) is responsible for creating the instance."
msgstr "一般来说，Vert.x的verticles不是CDI beans。所以不能使用注入。然而，在Quarkus中，你可以把verticle部署为Bean。注意，在这种情况下，CDI（Quarkus中的Arc）负责创建实例。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "The following snippet provides an example:"
msgstr "以下代码段提供了一个示例："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "You don't have to inject the `vertx` instance; instead, leverage the protected field from `AbstractVerticle`."
msgstr "你不需要注入 `vertx` 实例；相反，你可以利用 `AbstractVerticle` 的受保护字段。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Then, deploy the verticle instances with:"
msgstr "然后，用以下方法部署verticle实例。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "If you want to deploy every exposed `AbstractVerticle`, you can use:"
msgstr "如果你想部署每个暴露的 `AbstractVerticle` ，你可以使用："

#. type: Title ===
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "Create multiple verticles instances"
msgstr "使用多个verticles的实例"

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"When using `@ApplicationScoped`, you will get a single instance for your verticle.\n"
"Having multiple instances of verticles can be helpful to share the load among them.\n"
"Each of them will be associated with a different I/O thread (Vert.x event loop)."
msgstr "当使用 `@ApplicationScoped` ，你将为你的verticle获得一个实例。拥有多个verticles的实例可以帮助他们分担负载。它们中的每一个都将与不同的I/O线程相关联（Vert.x事件循环）。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "To deploy multiple instances of your verticle, use the `@Dependent` scope instead of `@ApplicationScoped`:"
msgstr "要部署 Verticle 的多个实例，请使用 `@Dependent` 范围而不是 `@ApplicationScoped` ："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Then, deploy your verticle as follows:"
msgstr "然后，按以下方式部署你的verticle："

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"The `init` method receives an `Instance<MyVerticle>`.\n"
"Then, you pass a supplier to the `deployVerticle` method.\n"
"The supplier is just calling the `get()` method.\n"
"Thanks to the `@Dependent` scope, it returns a new instance on every call.\n"
"Finally, you pass the desired number of instances to the `DeploymentOptions`, such as two in the previous example.\n"
"It will call the supplier twice, which will create two instances of your verticle."
msgstr "`init` 方法接收一个 `Instance<MyVerticle>` 。然后，你将提供者传递给 `deployVerticle` 方法。该提供者只是在调用 `get()` 方法。由于 `@Dependent` 范围，它每次调用都会返回一个新的实例。最后，你向 `DeploymentOptions` 传递所需的实例数量，比如在前面的例子中是两个。它将调用提供者两次，这将为你的verticle创建两个实例。"

#. type: Title ==
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "Use the Event Bus"
msgstr "使用事件总线"

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"Vert.x comes with a built-in https://vertx.io/docs/vertx-core/java/#event_bus[event bus] that you can use from your Quarkus application.\n"
"So, your application components (CDI beans, resources...) can interact using asynchronous events, thus promoting loose-coupling."
msgstr "Vert.x有一个内置的 link:https://vertx.io/docs/vertx-core/java/#event_bus[事件总线] ，你可以从你的Quarkus应用程序中使用。因此，你的应用程序组件（CDI Bean、resources......）可以使用异步事件进行交互，从而促进松散耦合。"

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"With the event bus, you send _messages_ to _virtual addresses_.\n"
"The event bus offers three types of delivery mechanisms:"
msgstr "通过事件总线，你可以向 _virtual addresses_ 发送 _messages_。事件总线提供三种类型的传递机制："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "point-to-point - send the message, one consumer receives it. If several consumers listen to the address, a round-robin is applied;"
msgstr "point-to-point - 发送消息，一个消费者接收。如果有几个消费者监听该地址，则采用轮流的方式；"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "publish/subscribe - publish a message; all the consumers listening to the address are receiving the message;"
msgstr "publish/subscribe - 发布一个消息；所有监听该地址的消费者都在接收该消息。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "request/reply - send the message and expect a response. The receiver can respond to the message in an asynchronous fashion."
msgstr "request/reply - 发送消息并期望得到响应。接收者可以以异步的方式对消息作出回应。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "All these delivery mechanisms are non-blocking and are providing one of the fundamental bricks to build reactive applications."
msgstr "所有这些交付机制都是无阻塞的，并提供了构建响应式应用的基本砖块之一。"

#. type: Title ===
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "Consume events"
msgstr "Consuming事件"

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"While you can use the Vert.x API to register consumers, Quarkus comes with declarative support.\n"
"To consume events, use the `io.quarkus.vertx.ConsumeEvent` annotation:"
msgstr "虽然你可以使用Vert.x的API来注册消费者，但Quarkus带有声明性支持。要消费事件，请使用 `io.quarkus.vertx.ConsumeEvent` 注解。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "If not set, the address is the fully qualified name of the bean; for instance, in this snippet, it's `org.acme.vertx.GreetingService`."
msgstr "如果没有设置，地址是Bean的完全限定名称；例如，在这个片段中，它是 `org.acme.vertx.GreetingService` 。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "The method parameter is the message body. If the method returns _something_, it's the message response."
msgstr "方法参数是消息主体。如果该方法返回 _something_ ，那就是消息的响应。"

#. type: Title ===
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "Configure the address"
msgstr "配置地址"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "The `@ConsumeEvent` annotation can be configured to set the address:"
msgstr "可以配置 `@ConsumeEvent` 注解设置地址："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Receive the messages sent to the `greeting` address"
msgstr "接收发送到 `greeting` 地址的信息"

#. type: Title ===
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "Process events asynchronously"
msgstr "异步地处理事件"

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"The previous examples use synchronous processing.\n"
"Asynchronous processing is also possible by returning either an `io.smallrye.mutiny.Uni` or a `java.util.concurrent.CompletionStage`:"
msgstr "前面的例子使用了同步处理。异步处理也可以通过返回一个 `io.smallrye.mutiny.Uni` 或一个 `java.util.concurrent.CompletionStage` 。"

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"The previous example uses Mutiny reactive types.\n"
"If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "前面的例子使用了Mutiny响应式类型。如果你不熟悉Mutiny，请查看 link:mutiny-primer.html[Mutiny - 一个直观的响应式编程库] 。"

#. type: Title ===
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "Blocking processing of events"
msgstr "阻塞处理"

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"By default, the code consuming the event must be _non-blocking_, as it's called on an I/O thread.\n"
"If your processing is blocking, use the `@io.smallrye.common.annotation.Blocking` annotation:"
msgstr "默认情况下，消费该事件的代码必须是 _非阻塞的_ ，因为它是在一个I/O线程上调用的。如果你的处理是阻塞的，请使用 `@io.smallrye.common.annotation.Blocking` 注解。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Alternatively, you can use the `blocking` attribute from the `@ConsumeEvent` annotation:"
msgstr "或者，你可以使用 `@ConsumeEvent` 注解中的 `blocking` 属性。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "When using `@Blocking`, it ignores the value of the `blocking` attribute of `@ConsumeEvent`."
msgstr "当使用 `@Blocking` ，它忽略了 `blocking` 属性的值 `@ConsumeEvent` 。"

#. type: Title ===
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "Reply to events"
msgstr "回复信息"

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"The _return_ value of a method annotated with `@ConsumeEvent` is used to respond to the incoming message.\n"
"For instance, in the following snippet, the returned `String` is the response."
msgstr "用 `@ConsumeEvent` 注解的方法的 _返回值_ 被用来响应传入的消息。例如，在下面的代码片段中，返回的 是 `String` 类型。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "You can also return a `Uni<T>` or a `CompletionStage<T>` to handle asynchronous reply:"
msgstr "你也可以返回一个 `Uni<T>` 或一个 `CompletionStage<T>` 来处理异步回复："

#. type: delimited block =
#: _versions/3.2/guides/vertx-reference.adoc
msgid "You can inject an `executor` if you use the Context Propagation extension:"
msgstr "如果你使用Context Propagation扩展，你可以注入一个 `executor` ："

#. type: Title ===
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "Implement fire-and-forget interactions"
msgstr "实现即发即弃（fire and forget）交互"

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"You don't have to reply to received messages.\n"
"Typically, for a _fire and forget_ interaction, the messages are consumed, and the sender does not need to know about it.\n"
"To implement this pattern, your consumer method returns `void`."
msgstr "你不需要回复收到的消息。通常情况下，对于 _fire 和 forget_ 交互来说，消息被消耗掉了，发送者不需要知道这件事。为了实现这种模式，你的消费者方法返回 `void` 类型 。"

#. type: Title ===
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "Consume messages (instead of events)"
msgstr "消耗消息（而不是事件）"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Unlike the previous example using the _payloads_ directly, you can also use `Message` directly:"
msgstr "与之前直接使用 _有效载荷_ 的例子不同，你也可以直接使用 `Message` 。"

#. type: Title ===
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "Handle failures"
msgstr "处理故障"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "If a method annotated with `@ConsumeEvent` throws an exception, then:"
msgstr "如果一个用 `@ConsumeEvent` 注解的方法抛出一个异常，那么："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "if a reply handler is set, then the failure is propagated back to the sender via an `io.vertx.core.eventbus.ReplyException` with code `ConsumeEvent#FAILURE_CODE` and the exception message,"
msgstr "如果设置了一个回复处理程序，那么失败就会通过一个带有代码 `ConsumeEvent#FAILURE_CODE` 和异常消息的 `io.vertx.core.eventbus.ReplyException` 传播回发送者，"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid "if no reply handler is set, then the exception is rethrown (and wrapped in a `RuntimeException` if necessary) and can be handled by the default exception handler, _i.e._ `io.vertx.core.Vertx#exceptionHandler()`."
msgstr "如果没有设置回复处理程序，那么异常会被重新抛出（如果需要的话，会被包裹在一个 `RuntimeException` ），并且可以由默认的异常处理程序来处理，即 `io.vertx.core.Vertx#exceptionHandler()` 。"

#. type: Title ===
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "Send messages"
msgstr "发送信息"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Sending and publishing messages use the Vert.x event bus:"
msgstr "发送和发布消息使用Vert.x事件总线。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Inject the Event bus"
msgstr "注入事件总线"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Send a message to the address `greeting`. Message payload is `name`"
msgstr "发送消息到地址 `greeting` 。消息的有效载荷是 `name` "

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "The `EventBus` object provides methods to:"
msgstr "`EventBus` 对象提供了以下方法："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "`send` a message to a specific address - one single consumer receives the message."
msgstr "`send` 一个消息到一个特定的地址 - 单个消费者收到该消息。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "`publish` a message to a specific address - all consumers receive the messages."
msgstr "`publish` 向一个特定的地址发送消息--所有的消费者都会收到这些消息。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid "`request` a message and expect a reply"
msgstr "`request` 留言盼回复"

#. type: Title ===
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "Use codecs"
msgstr "使用编解码器"

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"The https://vertx.io/docs/vertx-core/java/#event_bus[Vert.x Event Bus] uses codecs to _serialize_ and _deserialize_ objects.\n"
"Quarkus provides a default codec for local delivery.\n"
"So you can exchange objects as follows:"
msgstr "link:https://vertx.io/docs/vertx-core/java/#event_bus[Vert.x事件总线] 使用编解码器来 _序列化_ 和 _反序列化_ 对象。Quarkus为本地交付提供了一个默认的编解码器。所以你可以按以下方式交换对象："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "If you want to use a specific codec, you need to set it on both ends explicitly:"
msgstr "如果你想使用一个特定的编解码器，你需要在两端明确地设置它："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Set the name of the codec to use to send the message"
msgstr "设置用于发送消息的编解码器的名称"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Set the codec to use to receive the message"
msgstr "设置用于接收信息的编解码器"

#. type: Title ===
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "Combine HTTP and the Event Bus"
msgstr "结合HTTP和事件总线"

#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid ""
"Let's revisit a greeting HTTP endpoint and use asynchronous message passing to delegate the call to a separated bean.\n"
"It uses the request/reply dispatching mechanism.\n"
"Instead of implementing the business logic inside the Jakarta REST endpoint, we are sending a message.\n"
"Another bean consumes this message, and the response is sent using the _reply_ mechanism."
msgstr "让我们重温一下问候 HTTP 端点，并使用异步消息传递将调用委托给分离的 Bean。它使用了请求/回复分派机制。我们发送的是一条消息，而不是在 Jakarta REST 端点内部实现业务逻辑。另一个 Bean 会消费该消息，并使用 _回复_ 机制发送回复。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "In your HTTP endpoint class, inject the event bus and uses the `request` method to send a message to the event bus and expect a response:"
msgstr "在你的HTTP端点类中，注入事件总线，并使用 `request` 方法向事件总线发送一个消息，并期待一个响应："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid "send the `name` to the `greeting` address and request a response"
msgstr "将 `name` 发送到 `greeting` 地址，并要求作出回应。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid "when we get the response, extract the body and send it to the user"
msgstr "当我们得到响应时，提取正文并将其发送给用户"

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"the HTTP method returns a `Uni`.\n"
"If you are using RESTEasy Reactive, `Uni` support is built-in.\n"
"If you are using _classic_ RESTEasy, you need to add the `quarkus resteasy-mutiny` extension to your project."
msgstr "HTTP方法返回一个 `Uni` 。如果你使用的是RESTEasy Reactive， `Uni` 支持是内置的。如果你使用的是 _经典的_ RESTEasy，你需要在你的项目中添加 `quarkus resteasy-mutiny` 扩展。"

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"We need a consumer listening on the `greeting` address.\n"
"This consumer can be in the same class or another bean such as:"
msgstr "我们需要一个消费者监听 `greeting` 地址。这个消费者可以在同一个类中，也可以是另一个Bean，比如："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "This bean receives the name and returns the greeting message."
msgstr "这个Bean接收名字并返回响应信息。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "With this in place, every HTTP request on `/bus/quarkus` sends a message to the event bus, waits for a reply, and when this one arrives, writes the HTTP response:"
msgstr "有了这个， `/bus/quarkus` 上的每个HTTP请求都会向事件总线发送一个消息，等待回复，当这个回复到来时，就会写入HTTP响应："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "To better understand, let's detail how the HTTP request/response has been handled:"
msgstr "为了更好地理解，让我们详细介绍一下HTTP request/response 是如何被处理的："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "The request is received by the `greeting` method"
msgstr "该请求由 `greeting` 方法接收"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid "a message containing the _name_ is sent to the event bus"
msgstr "含有该 _名称_ 的消息被发送到事件总线。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Another bean receives this message and computes the response"
msgstr "另一个Bean收到这个消息，并计算出响应"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "This response is sent back using the reply mechanism"
msgstr "使用回复机制发回此响应"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Once the reply is received by the sender, the content is written to the HTTP response"
msgstr "一旦发送方收到回复，会将内容写入 HTTP 响应"

#. type: Title ===
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "Bidirectional communication with browsers by using SockJS"
msgstr "使用SockJS与浏览器进行双向通信"

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"The SockJS bridge provided by Vert.x allows browser applications and Quarkus applications to communicate using the event bus.\n"
"It connects both sides.\n"
"So, both sides can send messages received on the other side.\n"
"It supports the three delivery mechanisms."
msgstr "Vert.x提供的SockJS桥允许浏览器应用程序和Quarkus应用程序使用事件总线进行通信。它连接了双方。所以，双方都可以发送在另一方收到的消息。它支持三种传递机制。"

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"SockJS negotiates the communication channel between the Quarkus application and the browser.\n"
"If WebSockets are supported, it uses them; otherwise, it degrades to SSE, long polling, etc."
msgstr "SockJS负责协商Quarkus应用程序和浏览器之间的通信渠道。如果支持WebSockets，它就使用它们；否则，它就退化为SSE、long polling等。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "So use SockJS, you need to configure the bridge, especially the addresses that will be used to communicate:"
msgstr "因此，使用SockJS，你需要配置桥梁，特别是将用于通信的地址："

#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid ""
"This code configures the SockJS bridge to send all the messages targeting the `ticks` address to the connected browsers.\n"
"More detailed explanations about the configuration can be found on https://vertx.io/docs/vertx-web/java/#_sockjs_event_bus_bridge[the Vert.x SockJS Bridge documentation]."
msgstr "这段代码将配置 SockJS 网桥，以便向连接的浏览器发送所有以 `ticks` 地址为目标的信息。有关配置的更多详细说明，请参阅 link:https://vertx.io/docs/vertx-web/java/#_sockjs_event_bus_bridge[Vert.x SockJS Bridge 文档] 。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "The browser must use the `vertx-eventbus` JavaScript library to consume the message:"
msgstr "浏览器必须使用 `vertx-eventbus` JavaScript库来消费该信："

#. type: Title ==
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "Use native transports"
msgstr "本地运输"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid "Native transports are not supported in native executables."
msgstr "GraalVM生产的二进制文件中不支持本地传输。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid "To use `io_uring`, refer to the xref:use-io_uring[Use io_uring] section."
msgstr "要使用 `io_uring` ，请参考 link:#use-io_uring[使用io_uring] 部分。"

#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid ""
"Vert.x is capable of using https://netty.io/wiki/native-transports.html[Netty's native transports], which offers performance improvements on specific platforms.\n"
"To enable them, you must include the appropriate dependency for your platform.\n"
"It's usually a good idea to have both to keep your application platform-agnostic.\n"
"Netty is smart enough to use the correct one, that includes none at all on unsupported platforms:"
msgstr "Vert.x 可以使用 link:https://netty.io/wiki/native-transports.html[Netty 的本地传输] ，从而在特定平台上提高性能。要启用这些功能，您必须为您的平台添加相应的依赖关系。通常情况下，最好同时使用两种依赖关系，以保证应用程序与平台无关。Netty 会很聪明地使用正确的依赖关系，包括在不支持的平台上不使用任何依赖关系："

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"You will also have to explicitly configure Vert.x to use the native transport.\n"
"In `application.properties` add:"
msgstr "你还必须明确地配置Vert.x来使用本地传输。在 `application.properties` 中添加："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Or in `application.yml`:"
msgstr "或者在 `application.yml` ："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "If all is well quarkus will log:"
msgstr "如果一切顺利的话，quarkus 会输出以下日志："

#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid "[io.qua.ver.cor.run.VertxCoreRecorder] (main) Vertx has Native Transport Enabled: true"
msgstr "[io.qua.ver.cor.run.VertxCoreRecorder] (main) Vertx 已启用本地传输：true"

#. type: Title ===
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "Native Linux transport"
msgstr "本地Linux传输"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "On Linux you can enable the following socket options:"
msgstr "在Linux上，你可以启用以下socket选项："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid "SO_REUSEPORT"
msgstr "SO_REUSEPORT"

#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid "quarkus.http.so-reuse-port=true"
msgstr "quarkus.http.so-reuse-port=true"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid "TCP_QUICKACK"
msgstr "TCP_QUICKACK"

#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid "quarkus.http.tcp-quick-ack=true"
msgstr "quarkus.http.tcp-quick-ack=true"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid "TCP_CORK"
msgstr "TCP_CORK"

#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid "quarkus.http.tcp-cork=true"
msgstr "quarkus.http.tcp-cork=true"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid "TCP_FASTOPEN"
msgstr "TCP_FASTOPEN"

#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid "quarkus.http.tcp-fast-open=true"
msgstr "quarkus.http.tcp-fast-open=true"

#. type: Title ===
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "Native macOS transport"
msgstr "本地MacOS传输"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid "On macOS Sierra and above you can enable the following socket options:"
msgstr "在MacOS Sierra及以上版本，你可以启用以下socket选项："

#. type: Title ==
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "Use a Unix domain socket"
msgstr "监听Unix Domain Socket"

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"Listening on a Unix domain socket allows us to dispense with the overhead of TCP\n"
"if the connection to the quarkus service is established from the same host.\n"
"This can happen if access to the service goes through a proxy which is often the case\n"
"if you're setting up a service mesh with a proxy like Envoy."
msgstr "如果与 quarkus 服务的连接是从同一主机建立的，那么侦听 Unix 域套接字允许我们免除 TCP 的开销。如果通过代理访问服务可能会发生这种情况，如果您使用 Envoy 等代理设置服务网格，通常会出现这种情况。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid "This will only work on platforms that support xref:native-transport[Use native transports]."
msgstr "这仅适用于支持 link:#native-transport[[native-transport]] 的平台。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid "Enable the appropriate xref:native-transport[Use native transports] and set the following environment property:"
msgstr "启用适当的 link:#native-transport[[native-transport]] 并设置以下环境属性："

#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid ""
"quarkus.http.domain-socket=/var/run/io.quarkus.app.socket\n"
"quarkus.http.domain-socket-enabled=true\n"
"\n"
"quarkus.vertx.prefer-native-transport=true"
msgstr "quarkus.http.domain-socket=/var/run/io.quarkus.app.socket quarkus.http.domain-socket-enabled=true"

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"By itself this will not disable the tcp socket which by default will open on\n"
"`0.0.0.0:8080`. It can be explicitly disabled:"
msgstr "就其本身而言，这不会禁用默认情况下将在 0.0.0.0:8080 上打开的 tcp socket（套接字）。可以明确禁用它："

#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid "quarkus.http.host-enabled=false"
msgstr "quarkus.http.host-enabled=false"

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"These properties can be set through Java's `-D` command line parameter or\n"
"on `application.properties`."
msgstr "这些属性可以通过 Java 的 `-D` 命令行参数或在 `application.properties` 上设置。"

#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid ""
"Do not forget to add the native transport dependency.\n"
"See xref:native-transport[Use native transports] for details."
msgstr "不要忘记添加本地传输依赖关系。详情请参阅 xref:native-transport[使用本地] 传输。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid "Make sure your application has the right permissions to write to the socket."
msgstr "确保你的应用程序有正确的权限来写入套接字。"

#. type: Title ==
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "Use io_uring"
msgstr "使用 io_uring"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid "`io_uring` is not supported in native executables."
msgstr " `io_uring` 在本地可执行文件中不被支持。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid "`io_uring` support is experimental"
msgstr " `io_uring` 支持是试验性的"

#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid ""
"`io_uring` is a Linux kernel interface that allows you to send and receive data asynchronously.\n"
"It provides unified semantics for both file and network I/O.\n"
"It was originally designed to target block devices and files but has since gained the ability to work with things like network sockets.\n"
"It has the potential to provide modest performance benefits to network I/O on its own and greater benefits for mixed file and network I/O application workloads."
msgstr "`io_uring` 是一个 Linux 内核接口，允许异步发送和接收数据。它为文件和网络 I/O 提供了统一的语义。它最初是为块设备和文件而设计的，但后来也具备了与网络套接字等设备协同工作的能力。它有可能单独为网络 I/O 提供适度的性能优势，并为混合文件和网络 I/O 应用程序工作负载提供更大的优势。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid "To learn more about `io_uring`, we recommend the following links:"
msgstr "要了解更多关于 `io_uring` ，我们推荐以下链接："

#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid ""
"https://developers.redhat.com/articles/2023/04/12/why-you-should-use-iouring-network-io[Why you should use io_uring for network I/O]: The main benefit of io_uring for network I/O is a modern asynchronous API that is straightforward to use and provides unified semantics for file and network I/O.\n"
"A potential performance benefit of io_uring for network I/O is reducing the number of syscalls.\n"
"This could provide the biggest benefit for high volumes of small operations where the overhead of system calls can be significant."
msgstr "link:https://developers.redhat.com/articles/2023/04/12/why-you-should-use-iouring-network-io[为什么要将 io_uring 用于网络 I/O] ？将 io_uring 用于网络 I/O 的主要好处是，它是一个现代的异步 API，使用简单，并为文件和网络 I/O 提供了统一的语义。用于网络 I/O 的 io_uring 的一个潜在性能优势是减少了系统调用的次数。对于系统调用开销巨大的大量小操作来说，这可能是最大的优势。"

#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid ""
"https://dzone.com/articles/the-backend-revolution-or-why-io-uring-is-so-impor[The Backend Revolution and Why io_uring Is So Important]: The io_uring API uses two ring buffers for communication between application and kernel (hence the API name) and designed in a way that enables natural batching of requests and responses.\n"
"Besides, it provides a way to submit multiple requests in one system call, which can reduce overhead."
msgstr "link:https://dzone.com/articles/the-backend-revolution-or-why-io-uring-is-so-impor[后端革命以及 io_uring 为何如此重要] ：io_uring 应用程序接口使用两个环形缓冲区，用于应用程序与内核之间的通信（这也是该应用程序接口名称的由来）。此外，它还提供了一种在一次系统调用中提交多个请求的方法，这可以减少开销。"

#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid ""
"https://stackoverflow.com/questions/61767702/what-exactly-is-io-uring[What exactly is io_uring?]: io_uring is a Linux kernel interface to efficiently allow you to send and receive data asynchronously.\n"
"It was originally designed to target block devices and files but has since gained the ability to work with things like network sockets."
msgstr "link:https://stackoverflow.com/questions/61767702/what-exactly-is-io-uring[io_uring] 是一个 Linux 内核接口，可让你有效地异步发送和接收数据。它最初是为块设备和文件而设计的，但现在已经具备了与网络套接字（network sockets）协同工作的能力。"

#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid ""
"To use `io_uring`, you need to add two dependencies to your project and enable native transport.\n"
"First add the following dependencies to your project:"
msgstr "要使用 `io_uring` ，需要在项目中添加两个依赖项并启用本地传输。首先在项目中添加以下依赖项："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid "Then, in the `application.properties`, add:"
msgstr "然后，在 `application.properties` ，添加："

#. type: Block title
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "Can I use io_uring on my Linux machine?"
msgstr "我可以在我的Linux机器上使用io_uring吗？"

#. type: delimited block =
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid "To check if you can use `io_uring` on your Linux machine, execute the following command:"
msgstr "要检查你是否能在你的Linux机器上使用 `io_uring` ，执行以下命令："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid "If it prints something like above, you can use `io_uring`."
msgstr "如果它打印的内容与上面一样，你可以使用 `io_uring` 。"

#. type: Block title
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "Troubleshooting"
msgstr "故障排除"

#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid ""
"`io_uring` support is still experimental.\n"
"Check the https://github.com/netty/netty-incubator-transport-io_uring#faq[Netty io_uring FAQ] if you see some odd behavior.\n"
"Also, the https://github.com/netty/netty-incubator-transport-io_uring/issues/152[netty io_uring was slower than epoll] issue describes a few configuration mistakes."
msgstr "`io_uring` 支持仍处于试验阶段。如果发现一些奇怪的行为，请查看 link:https://github.com/netty/netty-incubator-transport-io_uring#faq[Netty io_uring 常见问题] 。此外， link:https://github.com/netty/netty-incubator-transport-io_uring/issues/152[netty io_uring 比 epoll 慢] 的问题说明了一些配置错误。"

#. type: delimited block =
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid "Domain sockets are not yet supported with io_uring."
msgstr "io_uring 尚不支持域套接字。"

#. type: delimited block =
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid "The Vert.x asynchronous file system API does not use io_uring yet."
msgstr "Vert.x 异步文件系统 API 尚未使用 io_uring。"

#. type: Title ==
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "Deploy on read-only environments"
msgstr "只读部署环境"

#. type: delimited block =
#: _versions/3.2/guides/vertx-reference.adoc
msgid "In environments with read only file systems you may receive errors of the form:"
msgstr "在具有只读文件系统的环境中，您可能会收到以下形式的错误："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Assuming `/tmp/` is writable this can be fixed by setting the `vertx.cacheDirBase` property to point to a directory in `/tmp/` for instance in OpenShift by creating an environment variable `JAVA_OPTS` with the value `-Dvertx.cacheDirBase=/tmp/vertx`."
msgstr "假设 `/tmp/` 是可写的，可以通过将 `vertx.cacheDirBase` 属性设置为指向 `/tmp/` 中的目录来修复此问题，例如在OpenShift中，通过创建一个值为 `-Dvertx.cacheDirBase=/tmp/vertx` ,名为 `JAVA_OPTS` 的环境变量。"

#. type: Title ==
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy, no-wrap
msgid "Customize the Vert.x configuration"
msgstr "配置Vert.x实例"

#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid ""
"The configuration of the managed Vert.x instance can be provided using the `application.properties` file, but also using _special beans_.\n"
"CDI beans exposing the `io.quarkus.vertx.VertxOptionsCustomizer` interface can be used to customize the Vert.x configuration.\n"
"For example, the following customizer change the `tmp` base directory:"
msgstr "受管 Vert.x 实例的配置可以通过 `application.properties` 文件提供，也可以通过 _特殊的 Bean_ 提供。使用 `io.quarkus.vertx.VertxOptionsCustomizer` 接口的 CDI Bean 可用于定制 Vert.x 配置。例如，下面的定制器可更改 `tmp` 基本目录："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
#, fuzzy
msgid "The _customizer_ beans received the `VertxOptions` (coming from the application configuration), and can modify them."
msgstr "_自定义_ 豆接收到 `VertxOptions` （来自应用程序配置），并可对其进行修改。"
