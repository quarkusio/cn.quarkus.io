# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-08-28 16:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Vert.x Reference Guide"
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"https://vertx.io[Vert.x] is a toolkit for building reactive applications.\n"
"As described in the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture], Quarkus uses Vert.x underneath."
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"This guide is the companion to the xref:vertx.adoc[Using Eclipse Vert.x API from a Quarkus Application] guide.\n"
"It provides more advanced details about the usage and the configuration of the Vert.x instance used by Quarkus."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Access the Vert.x instance"
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"To access the managed Vert.x instance, add the `quarkus-vertx` extension to your project.\n"
"This dependency might already be available in your project (as a transitive dependency)."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "With this extension, you can retrieve the managed instance of Vert.x using either field or constructor injection:"
msgstr "通过这个扩展，你可以使用字段或构造函数注入检索Vert.x的托管实例："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "You can inject either the:"
msgstr "你也可以这样注入："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "`io.vertx.core.Vertx` instance exposing the _bare_ Vert.x API"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "`io.vertx.mutiny.core.Vertx` instance exposing the _Mutiny_ API"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "We recommend using the Mutiny variant as it integrates with the other reactive APIs provided by Quarkus."
msgstr "我们推荐使用Mutiny变体，因为它可以与Quarkus提供的其他响应式API集成。"

#. type: Block title
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Mutiny"
msgstr ""

#. type: delimited block =
#: _versions/3.2/guides/vertx-reference.adoc
msgid "If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "如果你不熟悉Mutiny，请查看 link:mutiny-primer.html[Mutiny - 一个直观的响应式编程库] 。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Documentation about the Vert.x Mutiny variant is available on https://smallrye.io/smallrye-mutiny-vertx-bindings."
msgstr "关于Vert.x Mutiny变体的文档可在 https://smallrye.io/smallrye-mutiny-vertx-bindings "

#. type: Title ==
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Configure the Vert.x instance"
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"You can configure the Vert.x instance from the `application.properties` file.\n"
"The following table lists the supported properties:"
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "See xref:customizing-the-vert-x-configuration[Customize the Vert.x configuration] to configure the Vert.x instance using a programmatic approach."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Use Vert.x clients"
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"In addition to Vert.x core, you can use most Vert.x ecosystem libraries.\n"
"Some Quarkus extension already wraps Vert.x libraries."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Available APIs"
msgstr "可用的API"

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"The following table lists the **most** used libraries from the Vert.x ecosystem.\n"
"To access these APIs, add the indicated extension or dependency to your project.\n"
"Check the associated documentation to learn how to use them."
msgstr ""

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "API"
msgstr ""

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Extension or Dependency"
msgstr "扩展或依赖性"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Documentation"
msgstr "文档"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "AMQP Client"
msgstr ""

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "`io.quarkus:quarkus-smallrye-reactive-messaging-amqp` (extension)"
msgstr ""

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "xref:amqp.adoc"
msgstr ""

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Circuit Breaker"
msgstr "熔断器"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-circuit-breaker` (external dependency)"
msgstr ""

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "https://vertx.io/docs/vertx-circuit-breaker/java/"
msgstr " https://vertx.io/docs/vertx-circuit-breaker/java/ "

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Consul Client"
msgstr ""

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-consul-client` (external dependency)"
msgstr ""

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "https://vertx.io/docs/vertx-consul-client/java/"
msgstr " https://vertx.io/docs/vertx-consul-client/java/ "

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "DB2 Client"
msgstr ""

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "`io.quarkus:quarkus-reactive-db2-client` (extension)"
msgstr ""

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "xref:reactive-sql-clients.adoc"
msgstr ""

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Kafka Client"
msgstr ""

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "`io.quarkus:quarkus-smallrye-reactive-messaging-kafka` (extension)"
msgstr ""

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "xref:kafka.adoc"
msgstr ""

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Mail Client"
msgstr "邮件客户端"

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "`io.quarkus:quarkus-mailer` (extension)"
msgstr ""

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "xref:mailer.adoc"
msgstr ""

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "MQTT Client"
msgstr ""

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "`io.quarkus:quarkus-smallrye-reactive-messaging-mqtt` (extension)"
msgstr ""

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "No guide yet"
msgstr ""

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "MS SQL Client"
msgstr ""

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "`io.quarkus:quarkus-reactive-mssql-client` (extension)"
msgstr ""

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "MySQL Client"
msgstr ""

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "`io.quarkus:quarkus-reactive-mysql-client` (extension)"
msgstr ""

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Oracle Client"
msgstr ""

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "`io.quarkus:quarkus-reactive-oracle-client` (extension)"
msgstr ""

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "PostgreSQL Client"
msgstr ""

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "`io.quarkus:quarkus-reactive-pg-client` (extension)"
msgstr ""

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "RabbitMQ Client"
msgstr ""

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-rabbitmq-client` (external dependency)"
msgstr ""

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "https://vertx.io/docs/vertx-rabbitmq-client/java"
msgstr " https://vertx.io/docs/vertx-rabbitmq-client/java "

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Redis Client"
msgstr ""

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "`io.quarkus:quarkus-redis-client` (extension)"
msgstr ""

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "xref:redis.adoc"
msgstr ""

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Web Client"
msgstr ""

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-web-client` (external dependency)"
msgstr ""

#. type: Table
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "https://vertx.io/docs/vertx-web-client/java/"
msgstr " https://vertx.io/docs/vertx-web-client/java/ "

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "To learn more about the usage of the Vert.x Mutiny API, refer to https://smallrye.io/smallrye-mutiny-vertx-bindings."
msgstr "要了解更多关于Vert.x Mutiny API的用法，请参考 https://smallrye.io/smallrye-mutiny-vertx-bindings"

#. type: Title ===
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Use the Vert.x Web Client"
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"This section gives an example using the Vert.x `WebClient` in the context of a RESTEasy Reactive application.\n"
"As indicated in the table above, add the following dependency to your project:"
msgstr ""

#. type: Block title
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Now, in your code, you can create an instance of `WebClient`:"
msgstr "现在，在你的代码中，你可以创建一个 `WebClient` 的实例："

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"This resource creates a `WebClient` and, upon request, uses this client to invoke a remote HTTP API.\n"
"Depending on the result, the response is forwarded as received, or it creates a JSON object wrapping the error.\n"
"The `WebClient` is asynchronous (and non-blocking), to the endpoint returns a `Uni`."
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"The application can also run as a native executable.\n"
"But, first, we need to instruct Quarkus to enable _ssl_ (if the remote API uses HTTPS).\n"
"Open the `src/main/resources/application.properties` and add:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Then, create the native executable with:"
msgstr "然后，用以下方法创建本地可执行文件："

#. type: Title ==
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Use Vert.x JSON"
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"Vert.x APIs often rely on JSON.\n"
"Vert.x provides two convenient classes to manipulate JSON document: `io.vertx.core.json.JsonObject` and `io.vertx.core.json.JsonArray`."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "`JsonObject` can be used to map an object into its JSON representation and build an object from a JSON document:"
msgstr "`JsonObject` 可用于将一个对象映射到其JSON表示中，并从JSON文档中建立一个对象。"

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"Note that these features use the mapper managed by the `quarkus-jackson` extension.\n"
"Refer to xref:rest-json.adoc#json[Jackson configuration] to customize the mapping."
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"JSON Object and JSON Array are both supported as Quarkus HTTP endpoint requests and response bodies (using classic RESTEasy and RESTEasy Reactive).\n"
"Consider these endpoints:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "http://localhost:8080/hello/Quarkus/object returns:"
msgstr " http://localhost:8080/hello/Quarkus/object 返回："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "http://localhost:8080/hello/Quarkus/array returns:"
msgstr " http://localhost:8080/hello/Quarkus/array 返回："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "This works equally well when the JSON content is a request body or is wrapped in a `Uni`, `Multi`, `CompletionStage` or `Publisher`."
msgstr "当JSON内容是一个请求体或被包裹在一个 `Uni` , `Multi` , `CompletionStage` 或 `Publisher` 中时，这同样适用。"

#. type: Title ==
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Use Verticles"
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"link:https://vertx.io/docs/vertx-core/java/#_verticles[Verticles] is \"a simple, scalable, actor-like deployment and concurrency model\" provided by _Vert.x_.\n"
"This model does not claim to be a strict actor-model implementation, but it shares similarities, especially concerning concurrency, scaling, and deployment.\n"
"To use this model, you write and _deploy_ verticles, communicating by sending messages on the event bus."
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"You can deploy _verticles_ in Quarkus.\n"
"It supports:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "_bare_ verticle - Java classes extending `io.vertx.core.AbstractVerticle`"
msgstr "_bare_ verticle - 延伸的Java类 `io.vertx.core.AbstractVerticle` "

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "_Mutiny_ verticle - Java classes extending `io.smallrye.mutiny.vertx.core.AbstractVerticle`"
msgstr " _Mutiny_ verticle - 扩展的Java类 `io.smallrye.mutiny.vertx.core.AbstractVerticle` "

#. type: Title ===
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Deploy Verticles"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "To deploy verticles, use the `deployVerticle` method:"
msgstr "要部署verticles，使用 `deployVerticle` 方法。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "If you use the Mutiny-variant of Vert.x, be aware that the `deployVerticle` method returns a `Uni`, and you would need to trigger a subscription to make the actual deployment."
msgstr "如果你使用Vert.x的Mutiny-variant，请注意 `deployVerticle` 方法返回一个 `Uni` ，你需要触发一个订阅来进行实际部署。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "An example explaining how to deploy verticles during the initialization of the application will follow."
msgstr "接下来会有一个例子解释如何在应用程序的初始化过程中部署verticles："

#. type: Title ===
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Use @ApplicationScoped beans as Verticle"
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"In general, Vert.x verticles are not CDI beans.\n"
"And so cannot use injection.\n"
"However, in Quarkus, you can deploy verticles as beans.\n"
"Note that in this case, CDI (Arc in Quarkus) is responsible for creating the instance."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "The following snippet provides an example:"
msgstr "以下代码段提供了一个示例："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "You don't have to inject the `vertx` instance; instead, leverage the protected field from `AbstractVerticle`."
msgstr "你不需要注入 `vertx` 实例；相反，你可以利用 `AbstractVerticle` 的受保护字段。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Then, deploy the verticle instances with:"
msgstr "然后，用以下方法部署verticle实例。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "If you want to deploy every exposed `AbstractVerticle`, you can use:"
msgstr "如果你想部署每个暴露的 `AbstractVerticle` ，你可以使用："

#. type: Title ===
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Create multiple verticles instances"
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"When using `@ApplicationScoped`, you will get a single instance for your verticle.\n"
"Having multiple instances of verticles can be helpful to share the load among them.\n"
"Each of them will be associated with a different I/O thread (Vert.x event loop)."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "To deploy multiple instances of your verticle, use the `@Dependent` scope instead of `@ApplicationScoped`:"
msgstr "要部署 Verticle 的多个实例，请使用 `@Dependent` 范围而不是 `@ApplicationScoped` ："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Then, deploy your verticle as follows:"
msgstr "然后，按以下方式部署你的verticle："

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"The `init` method receives an `Instance<MyVerticle>`.\n"
"Then, you pass a supplier to the `deployVerticle` method.\n"
"The supplier is just calling the `get()` method.\n"
"Thanks to the `@Dependent` scope, it returns a new instance on every call.\n"
"Finally, you pass the desired number of instances to the `DeploymentOptions`, such as two in the previous example.\n"
"It will call the supplier twice, which will create two instances of your verticle."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Use the Event Bus"
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"Vert.x comes with a built-in https://vertx.io/docs/vertx-core/java/#event_bus[event bus] that you can use from your Quarkus application.\n"
"So, your application components (CDI beans, resources...) can interact using asynchronous events, thus promoting loose-coupling."
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"With the event bus, you send _messages_ to _virtual addresses_.\n"
"The event bus offers three types of delivery mechanisms:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "point-to-point - send the message, one consumer receives it. If several consumers listen to the address, a round-robin is applied;"
msgstr "point-to-point - 发送消息，一个消费者接收。如果有几个消费者监听该地址，则采用轮流的方式；"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "publish/subscribe - publish a message; all the consumers listening to the address are receiving the message;"
msgstr "publish/subscribe - 发布一个消息；所有监听该地址的消费者都在接收该消息。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "request/reply - send the message and expect a response. The receiver can respond to the message in an asynchronous fashion."
msgstr "request/reply - 发送消息并期望得到响应。接收者可以以异步的方式对消息作出回应。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "All these delivery mechanisms are non-blocking and are providing one of the fundamental bricks to build reactive applications."
msgstr "所有这些交付机制都是无阻塞的，并提供了构建响应式应用的基本砖块之一。"

#. type: Title ===
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Consume events"
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"While you can use the Vert.x API to register consumers, Quarkus comes with declarative support.\n"
"To consume events, use the `io.quarkus.vertx.ConsumeEvent` annotation:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "If not set, the address is the fully qualified name of the bean; for instance, in this snippet, it's `org.acme.vertx.GreetingService`."
msgstr "如果没有设置，地址是Bean的完全限定名称；例如，在这个片段中，它是 `org.acme.vertx.GreetingService` 。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "The method parameter is the message body. If the method returns _something_, it's the message response."
msgstr "方法参数是消息主体。如果该方法返回 _something_ ，那就是消息的响应。"

#. type: Title ===
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Configure the address"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "The `@ConsumeEvent` annotation can be configured to set the address:"
msgstr "可以配置 `@ConsumeEvent` 注解设置地址："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Receive the messages sent to the `greeting` address"
msgstr "接收发送到 `greeting` 地址的信息"

#. type: Title ===
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Process events asynchronously"
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"The previous examples use synchronous processing.\n"
"Asynchronous processing is also possible by returning either an `io.smallrye.mutiny.Uni` or a `java.util.concurrent.CompletionStage`:"
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"The previous example uses Mutiny reactive types.\n"
"If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Blocking processing of events"
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"By default, the code consuming the event must be _non-blocking_, as it's called on an I/O thread.\n"
"If your processing is blocking, use the `@io.smallrye.common.annotation.Blocking` annotation:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Alternatively, you can use the `blocking` attribute from the `@ConsumeEvent` annotation:"
msgstr "或者，你可以使用 `@ConsumeEvent` 注解中的 `blocking` 属性。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "When using `@Blocking`, it ignores the value of the `blocking` attribute of `@ConsumeEvent`."
msgstr "当使用 `@Blocking` ，它忽略了 `blocking` 属性的值 `@ConsumeEvent` 。"

#. type: Title ===
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Reply to events"
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"The _return_ value of a method annotated with `@ConsumeEvent` is used to respond to the incoming message.\n"
"For instance, in the following snippet, the returned `String` is the response."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "You can also return a `Uni<T>` or a `CompletionStage<T>` to handle asynchronous reply:"
msgstr "你也可以返回一个 `Uni<T>` 或一个 `CompletionStage<T>` 来处理异步回复："

#. type: delimited block =
#: _versions/3.2/guides/vertx-reference.adoc
msgid "You can inject an `executor` if you use the Context Propagation extension:"
msgstr "如果你使用Context Propagation扩展，你可以注入一个 `executor` ："

#. type: Title ===
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Implement fire-and-forget interactions"
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"You don't have to reply to received messages.\n"
"Typically, for a _fire and forget_ interaction, the messages are consumed, and the sender does not need to know about it.\n"
"To implement this pattern, your consumer method returns `void`."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Consume messages (instead of events)"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Unlike the previous example using the _payloads_ directly, you can also use `Message` directly:"
msgstr "与之前直接使用 _有效载荷_ 的例子不同，你也可以直接使用 `Message` 。"

#. type: Title ===
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Handle failures"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "If a method annotated with `@ConsumeEvent` throws an exception, then:"
msgstr "如果一个用 `@ConsumeEvent` 注解的方法抛出一个异常，那么："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "if a reply handler is set, then the failure is propagated back to the sender via an `io.vertx.core.eventbus.ReplyException` with code `ConsumeEvent#FAILURE_CODE` and the exception message,"
msgstr "如果设置了一个回复处理程序，那么失败就会通过一个带有代码 `ConsumeEvent#FAILURE_CODE` 和异常消息的 `io.vertx.core.eventbus.ReplyException` 传播回发送者，"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "if no reply handler is set, then the exception is rethrown (and wrapped in a `RuntimeException` if necessary) and can be handled by the default exception handler, _i.e._ `io.vertx.core.Vertx#exceptionHandler()`."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Send messages"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Sending and publishing messages use the Vert.x event bus:"
msgstr "发送和发布消息使用Vert.x事件总线。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Inject the Event bus"
msgstr "注入事件总线"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Send a message to the address `greeting`. Message payload is `name`"
msgstr "发送消息到地址 `greeting` 。消息的有效载荷是 `name` "

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "The `EventBus` object provides methods to:"
msgstr "`EventBus` 对象提供了以下方法："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "`send` a message to a specific address - one single consumer receives the message."
msgstr "`send` 一个消息到一个特定的地址 - 单个消费者收到该消息。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "`publish` a message to a specific address - all consumers receive the messages."
msgstr "`publish` 向一个特定的地址发送消息--所有的消费者都会收到这些消息。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "`request` a message and expect a reply"
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Use codecs"
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"The https://vertx.io/docs/vertx-core/java/#event_bus[Vert.x Event Bus] uses codecs to _serialize_ and _deserialize_ objects.\n"
"Quarkus provides a default codec for local delivery.\n"
"So you can exchange objects as follows:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "If you want to use a specific codec, you need to set it on both ends explicitly:"
msgstr "如果你想使用一个特定的编解码器，你需要在两端明确地设置它："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Set the name of the codec to use to send the message"
msgstr "设置用于发送消息的编解码器的名称"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Set the codec to use to receive the message"
msgstr "设置用于接收信息的编解码器"

#. type: Title ===
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Combine HTTP and the Event Bus"
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"Let's revisit a greeting HTTP endpoint and use asynchronous message passing to delegate the call to a separated bean.\n"
"It uses the request/reply dispatching mechanism.\n"
"Instead of implementing the business logic inside the Jakarta REST endpoint, we are sending a message.\n"
"Another bean consumes this message, and the response is sent using the _reply_ mechanism."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "In your HTTP endpoint class, inject the event bus and uses the `request` method to send a message to the event bus and expect a response:"
msgstr "在你的HTTP端点类中，注入事件总线，并使用 `request` 方法向事件总线发送一个消息，并期待一个响应："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "send the `name` to the `greeting` address and request a response"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "when we get the response, extract the body and send it to the user"
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"the HTTP method returns a `Uni`.\n"
"If you are using RESTEasy Reactive, `Uni` support is built-in.\n"
"If you are using _classic_ RESTEasy, you need to add the `quarkus resteasy-mutiny` extension to your project."
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"We need a consumer listening on the `greeting` address.\n"
"This consumer can be in the same class or another bean such as:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "This bean receives the name and returns the greeting message."
msgstr "这个Bean接收名字并返回响应信息。"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "With this in place, every HTTP request on `/bus/quarkus` sends a message to the event bus, waits for a reply, and when this one arrives, writes the HTTP response:"
msgstr "有了这个， `/bus/quarkus` 上的每个HTTP请求都会向事件总线发送一个消息，等待回复，当这个回复到来时，就会写入HTTP响应："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "To better understand, let's detail how the HTTP request/response has been handled:"
msgstr "为了更好地理解，让我们详细介绍一下HTTP request/response 是如何被处理的："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "The request is received by the `greeting` method"
msgstr "该请求由 `greeting` 方法接收"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "a message containing the _name_ is sent to the event bus"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Another bean receives this message and computes the response"
msgstr "另一个Bean收到这个消息，并计算出响应"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "This response is sent back using the reply mechanism"
msgstr "使用回复机制发回此响应"

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Once the reply is received by the sender, the content is written to the HTTP response"
msgstr "一旦发送方收到回复，会将内容写入 HTTP 响应"

#. type: Title ===
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Bidirectional communication with browsers by using SockJS"
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"The SockJS bridge provided by Vert.x allows browser applications and Quarkus applications to communicate using the event bus.\n"
"It connects both sides.\n"
"So, both sides can send messages received on the other side.\n"
"It supports the three delivery mechanisms."
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"SockJS negotiates the communication channel between the Quarkus application and the browser.\n"
"If WebSockets are supported, it uses them; otherwise, it degrades to SSE, long polling, etc."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "So use SockJS, you need to configure the bridge, especially the addresses that will be used to communicate:"
msgstr "因此，使用SockJS，你需要配置桥梁，特别是将用于通信的地址："

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"This code configures the SockJS bridge to send all the messages targeting the `ticks` address to the connected browsers.\n"
"More detailed explanations about the configuration can be found on https://vertx.io/docs/vertx-web/java/#_sockjs_event_bus_bridge[the Vert.x SockJS Bridge documentation]."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "The browser must use the `vertx-eventbus` JavaScript library to consume the message:"
msgstr "浏览器必须使用 `vertx-eventbus` JavaScript库来消费该信："

#. type: Title ==
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Use native transports"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Native transports are not supported in native executables."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "To use `io_uring`, refer to the xref:use-io_uring[Use io_uring] section."
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"Vert.x is capable of using https://netty.io/wiki/native-transports.html[Netty's native transports], which offers performance improvements on specific platforms.\n"
"To enable them, you must include the appropriate dependency for your platform.\n"
"It's usually a good idea to have both to keep your application platform-agnostic.\n"
"Netty is smart enough to use the correct one, that includes none at all on unsupported platforms:"
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"You will also have to explicitly configure Vert.x to use the native transport.\n"
"In `application.properties` add:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Or in `application.yml`:"
msgstr "或者在 `application.yml` ："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "If all is well quarkus will log:"
msgstr "如果一切顺利的话，quarkus 会输出以下日志："

#: _versions/3.2/guides/vertx-reference.adoc
msgid "[io.qua.ver.cor.run.VertxCoreRecorder] (main) Vertx has Native Transport Enabled: true"
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Native Linux transport"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "On Linux you can enable the following socket options:"
msgstr "在Linux上，你可以启用以下socket选项："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "SO_REUSEPORT"
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid "quarkus.http.so-reuse-port=true"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "TCP_QUICKACK"
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid "quarkus.http.tcp-quick-ack=true"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "TCP_CORK"
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid "quarkus.http.tcp-cork=true"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "TCP_FASTOPEN"
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid "quarkus.http.tcp-fast-open=true"
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Native macOS transport"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "On macOS Sierra and above you can enable the following socket options:"
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Use a Unix domain socket"
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"Listening on a Unix domain socket allows us to dispense with the overhead of TCP\n"
"if the connection to the quarkus service is established from the same host.\n"
"This can happen if access to the service goes through a proxy which is often the case\n"
"if you're setting up a service mesh with a proxy like Envoy."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "This will only work on platforms that support xref:native-transport[Use native transports]."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Enable the appropriate xref:native-transport[Use native transports] and set the following environment property:"
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"quarkus.http.domain-socket=/var/run/io.quarkus.app.socket\n"
"quarkus.http.domain-socket-enabled=true\n"
"\n"
"quarkus.vertx.prefer-native-transport=true"
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"By itself this will not disable the tcp socket which by default will open on\n"
"`0.0.0.0:8080`. It can be explicitly disabled:"
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid "quarkus.http.host-enabled=false"
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"These properties can be set through Java's `-D` command line parameter or\n"
"on `application.properties`."
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"Do not forget to add the native transport dependency.\n"
"See xref:native-transport[Use native transports] for details."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Make sure your application has the right permissions to write to the socket."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Use io_uring"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "`io_uring` is not supported in native executables."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "`io_uring` support is experimental"
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"`io_uring` is a Linux kernel interface that allows you to send and receive data asynchronously.\n"
"It provides unified semantics for both file and network I/O.\n"
"It was originally designed to target block devices and files but has since gained the ability to work with things like network sockets.\n"
"It has the potential to provide modest performance benefits to network I/O on its own and greater benefits for mixed file and network I/O application workloads."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "To learn more about `io_uring`, we recommend the following links:"
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"https://developers.redhat.com/articles/2023/04/12/why-you-should-use-iouring-network-io[Why you should use io_uring for network I/O]: The main benefit of io_uring for network I/O is a modern asynchronous API that is straightforward to use and provides unified semantics for file and network I/O.\n"
"A potential performance benefit of io_uring for network I/O is reducing the number of syscalls.\n"
"This could provide the biggest benefit for high volumes of small operations where the overhead of system calls can be significant."
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"https://dzone.com/articles/the-backend-revolution-or-why-io-uring-is-so-impor[The Backend Revolution and Why io_uring Is So Important]: The io_uring API uses two ring buffers for communication between application and kernel (hence the API name) and designed in a way that enables natural batching of requests and responses.\n"
"Besides, it provides a way to submit multiple requests in one system call, which can reduce overhead."
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"https://stackoverflow.com/questions/61767702/what-exactly-is-io-uring[What exactly is io_uring?]: io_uring is a Linux kernel interface to efficiently allow you to send and receive data asynchronously.\n"
"It was originally designed to target block devices and files but has since gained the ability to work with things like network sockets."
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"To use `io_uring`, you need to add two dependencies to your project and enable native transport.\n"
"First add the following dependencies to your project:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Then, in the `application.properties`, add:"
msgstr ""

#. type: Block title
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Can I use io_uring on my Linux machine?"
msgstr ""

#. type: delimited block =
#: _versions/3.2/guides/vertx-reference.adoc
msgid "To check if you can use `io_uring` on your Linux machine, execute the following command:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "If it prints something like above, you can use `io_uring`."
msgstr ""

#. type: Block title
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Troubleshooting"
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"`io_uring` support is still experimental.\n"
"Check the https://github.com/netty/netty-incubator-transport-io_uring#faq[Netty io_uring FAQ] if you see some odd behavior.\n"
"Also, the https://github.com/netty/netty-incubator-transport-io_uring/issues/152[netty io_uring was slower than epoll] issue describes a few configuration mistakes."
msgstr ""

#. type: delimited block =
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Domain sockets are not yet supported with io_uring."
msgstr ""

#. type: delimited block =
#: _versions/3.2/guides/vertx-reference.adoc
msgid "The Vert.x asynchronous file system API does not use io_uring yet."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Deploy on read-only environments"
msgstr ""

#. type: delimited block =
#: _versions/3.2/guides/vertx-reference.adoc
msgid "In environments with read only file systems you may receive errors of the form:"
msgstr "在具有只读文件系统的环境中，您可能会收到以下形式的错误："

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "Assuming `/tmp/` is writable this can be fixed by setting the `vertx.cacheDirBase` property to point to a directory in `/tmp/` for instance in OpenShift by creating an environment variable `JAVA_OPTS` with the value `-Dvertx.cacheDirBase=/tmp/vertx`."
msgstr "假设 `/tmp/` 是可写的，可以通过将 `vertx.cacheDirBase` 属性设置为指向 `/tmp/` 中的目录来修复此问题，例如在OpenShift中，通过创建一个值为 `-Dvertx.cacheDirBase=/tmp/vertx` ,名为 `JAVA_OPTS` 的环境变量。"

#. type: Title ==
#: _versions/3.2/guides/vertx-reference.adoc
#, no-wrap
msgid "Customize the Vert.x configuration"
msgstr ""

#: _versions/3.2/guides/vertx-reference.adoc
msgid ""
"The configuration of the managed Vert.x instance can be provided using the `application.properties` file, but also using _special beans_.\n"
"CDI beans exposing the `io.quarkus.vertx.VertxOptionsCustomizer` interface can be used to customize the Vert.x configuration.\n"
"For example, the following customizer change the `tmp` base directory:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/vertx-reference.adoc
msgid "The _customizer_ beans received the `VertxOptions` (coming from the application configuration), and can modify them."
msgstr ""
