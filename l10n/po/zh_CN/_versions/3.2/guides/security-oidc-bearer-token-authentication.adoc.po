# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-08-28 16:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy, no-wrap
msgid "OpenID Connect (OIDC) Bearer token authentication"
msgstr "OpenID连接（OIDC）承载认证"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "Secure HTTP access to Jakarta REST (formerly known as JAX-RS) endpoints in your application with Bearer token authentication by using the Quarkus OpenID Connect (OIDC) extension."
msgstr "通过使用Quarkus OpenID Connect (OIDC)扩展，在你的应用程序中使用Bearer认证来确保对Jakarta REST（以前称为JAX-RS）端点的HTTP访问。"

#. type: Title ==
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy, no-wrap
msgid "Overview of the Bearer token authentication mechanism in Quarkus"
msgstr "Quarkus中的承载令牌认证机制概述"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "Quarkus supports the Bearer token authentication mechanism through the Quarkus OpenID Connect (OIDC) extension."
msgstr "Quarkus通过Quarkus OpenID Connect (OIDC)扩展支持Bearer token认证机制。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "The bearer tokens are issued by OIDC and OAuth 2.0 compliant authorization servers, such as link:https://www.keycloak.org[Keycloak]."
msgstr "不记名令牌是由OIDC和OAuth 2.0兼容的授权服务器（如 link:https://www.keycloak.org[Keycloak] ）签发。"

#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"Bearer token authentication is the process of authorizing HTTP requests based on the existence and validity of a bearer token.\n"
"The bearer token provides information about the subject of the call, which is used to determine whether or not an HTTP resource can be accessed."
msgstr "承载令牌验证是根据承载令牌的存在和有效性对 HTTP 请求进行授权的过程。承载令牌提供有关调用主体的信息，用于确定是否可以访问 HTTP 资源。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "The following diagrams outline the Bearer token authentication mechanism in Quarkus:"
msgstr "下面的图表概述了Quarkus中的承载令牌认证机制："

#. type: Block title
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy, no-wrap
msgid "Bearer token authentication mechanism in Quarkus with Single-page application"
msgstr "Quarkus中带有单页应用的承载令牌认证机制"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "The Quarkus service retrieves verification keys from the OpenID Connect provider. The verification keys are used to verify the bearer access token signatures."
msgstr "Quarkus服务从OpenID Connect提供商那里获取验证密钥。验证密钥用于验证承载访问令牌的签名。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "The Quarkus user accesses the Single-page application."
msgstr "Quarkus用户访问单页应用程序。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "The Single-page application uses Authorization Code Flow to authenticate the user and retrieve tokens from the OpenID Connect provider."
msgstr "单页应用程序使用授权代码流来验证用户，并从OpenID Connect提供商那里获取令牌。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "The Single-page application uses the access token to retrieve the service data from the Quarkus service."
msgstr "单页应用程序使用访问令牌从Quarkus服务中获取服务数据。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "The Quarkus service verifies the bearer access token signature using the verification keys, checks the token expiry date and other claims, allows the request to proceed if the token is valid, and returns the service response to the Single-page application."
msgstr "Quarkus服务使用验证密钥验证不记名访问令牌的签名，检查令牌的有效期和其他要求，如果令牌有效则允许请求继续进行，并将服务响应返回给单页应用程序。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "The Single-page application returns the same data to the Quarkus user."
msgstr "单页应用程序向Quarkus用户返回相同的数据。"

#. type: Block title
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy, no-wrap
msgid "Bearer token authentication mechanism in Quarkus with Java or command line client"
msgstr "Quarkus中使用Java或命令行客户端的承载令牌认证机制"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "The Client uses `client_credentials` that requires client ID and secret or password grant, which also requires client ID, secret, user name, and password to retrieve the access token from the OpenID Connect provider."
msgstr "客户端使用 `client_credentials` ，需要客户端ID和秘密或密码授予，这也需要客户端ID、秘密、用户名和密码，以便从OpenID Connect提供者那里检索访问令牌。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "The Client uses the access token to retrieve the service data from the Quarkus service."
msgstr "客户端使用访问令牌从Quarkus服务中获取服务数据。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "The Quarkus service verifies the bearer access token signature using the verification keys, checks the token expiry date and other claims, allows the request to proceed if the token is valid, and returns the service response to the Client."
msgstr "Quarkus服务使用验证密钥验证不记名访问令牌的签名，检查令牌的有效期和其他要求，如果令牌有效则允许请求继续进行，并将服务响应返回给客户。"

#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"If you need to authenticate and authorize the users using OpenID Connect Authorization Code Flow, see xref:security-oidc-code-flow-authentication.adoc[OIDC code flow mechanism for protecting web applications].\n"
"Also, if you use Keycloak and bearer tokens, see xref:security-keycloak-authorization.adoc[Using Keycloak to Centralize Authorization]."
msgstr "如果需要使用 OpenID Connect 授权代码流对用户进行身份验证和授权，请参阅 xref:security-oidc-code-flow-authentication.adoc[用于保护网络应用程序的 OIDC 代码流机制] 。此外，如果使用 Keycloak 和承载令牌，请参阅 xref:security-keycloak-authorization.adoc[使用 Keycloak 集中授权] 。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "To learn about how you can protect service applications by using OIDC Bearer token authentication, see xref:security-oidc-bearer-token-authentication-tutorial.adoc[OIDC Bearer token authentication tutorial]."
msgstr "要了解如何通过使用OIDC承载器令牌认证来保护服务应用程序，请参阅 link:security-oidc-bearer-token-authentication-tutorial.html[OIDC承载器令牌认证教程] 。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "If you want to protect web applications by using OIDC authorization code flow authentication, see xref:security-oidc-code-flow-authentication-concept.adoc[OIDC authorization code flow authentication]."
msgstr "如果你想通过使用OIDC授权代码流认证来保护Web应用程序，请参见 link:security-oidc-code-flow-authentication-concept.html[OIDC授权代码流认证] 。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "For information about how to support multiple tenants, see xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy]."
msgstr "关于如何支持多个租户的信息，请参见 link:security-openid-connect-multitenancy.html[使用OpenID Connect多租户] 。"

#. type: Title ===
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, no-wrap
msgid "Accessing JWT claims"
msgstr "访问JWT声明"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "If you need to access JWT token claims then you can inject `JsonWebToken`:"
msgstr "如果你需要访问JWT令牌声明，那么你要注入 `JsonWebToken` ："

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "Injection of `JsonWebToken` is supported in `@ApplicationScoped`, `@Singleton` and `@RequestScoped` scopes however the use of `@RequestScoped` is required if the individual claims are injected as simple types, please see xref:security-jwt.adoc#supported-injection-scopes[Support Injection Scopes for JsonWebToken and Claims] for more details."
msgstr "在 `@ApplicationScoped` , `@Singleton` 和 `@RequestScoped` 范围上下文中支持注入 `JsonWebToken` ，但是如果单个声明被注入为简单类型，则需要使用 `@RequestScoped` ，更多细节请参见 link:security-jwt.html#supported-injection-scopes[JsonWebToken和声明所支持注入范围(Injection Scopes)] 。"

#. type: Title ===
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, no-wrap
msgid "User Info"
msgstr "用户信息"

#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"Set `quarkus.oidc.authentication.user-info-required=true` if a UserInfo JSON object from the OIDC userinfo endpoint has to be requested.\n"
"A request will be sent to the OpenID Provider UserInfo endpoint and  an `io.quarkus.oidc.UserInfo` (a simple `jakarta.json.JsonObject` wrapper) object will be created.\n"
"`io.quarkus.oidc.UserInfo` can be either injected or accessed as a SecurityIdentity `userinfo` attribute."
msgstr "如果需要从 OIDC userinfo 端点请求一个 UserInfo JSON 对象，则设置 `quarkus.oidc.authentication.user-info-required=true` 。将向 OpenID Provider UserInfo 端点发送请求，并创建 `io.quarkus.oidc.UserInfo` （一个简单的 `jakarta.json.JsonObject` 封装器）对象。 `io.quarkus.oidc.UserInfo` 可作为 SecurityIdentity `userinfo` 属性注入或访问。"

#. type: Title ===
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, no-wrap
msgid "Configuration Metadata"
msgstr "配置元数据"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "The current tenant's discovered link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect Configuration Metadata] is represented by `io.quarkus.oidc.OidcConfigurationMetadata` and can be either injected or accessed as a `SecurityIdentity` `configuration-metadata` attribute."
msgstr "当前租户发现的 link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect配置元数据] 由 `io.quarkus.oidc.OidcConfigurationMetadata` 表示，可以作为 `SecurityIdentity` `configuration-metadata` 属性注入或访问。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "The default tenant's `OidcConfigurationMetadata` is injected if the endpoint is public."
msgstr "如果端点是公开的，则默认租户的 `OidcConfigurationMetadata` 会被注入。"

#. type: Title ===
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, no-wrap
msgid "Token Claims And SecurityIdentity Roles"
msgstr "令牌声明(Token Claims)和安全身份角色(SecurityIdentity Roles)"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "SecurityIdentity roles can be mapped from the verified JWT access tokens as follows:"
msgstr "安全身份(SecurityIdentity)角色可以从经过验证的JWT访问令牌中映射出来，具体如下:"

#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"If `quarkus.oidc.roles.role-claim-path` property is set and matching array or string claims are found then the roles are extracted from these claims.\n"
"For example, `customroles`, `customroles/array`, `scope`, `\"http://namespace-qualified-custom-claim\"/roles`, `\"http://namespace-qualified-roles\"`, etc."
msgstr "如果 `quarkus.oidc.roles.role-claim-path` 属性被设置，并且找到匹配的数组或字符串声明，那么角色将从这些声明中提取。例如， `customroles` , `customroles/array` , `scope` , `\"http://namespace-qualified-custom-claim\"/roles` , `\"http://namespace-qualified-roles\"` , 等等。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "If `groups` claim is available then its value is used"
msgstr "如果存在 `groups` 声明，则这个声明的值会被使用"

#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"If `realm_access/roles` or `resource_access/client_id/roles` (where `client_id` is the value of the `quarkus.oidc.client-id` property) claim is available then its value is used.\n"
"This check supports the tokens issued by Keycloak"
msgstr "如果 `realm_access/roles` 或 `resource_access/client_id/roles` （其中 `client_id` 是 `quarkus.oidc.client-id` 属性的值）声明是存在的，那么它的值会被使用。该检查支持由Keycloak发行的令牌"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "If the token is opaque (binary) then a `scope` property from the remote token introspection response will be used."
msgstr "如果令牌是不透明的（二进制），那么将使用来自远程令牌自省(token introspection)响应的 `scope` 属性。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "If UserInfo is the source of the roles then set `quarkus.oidc.authentication.user-info-required=true` and `quarkus.oidc.roles.source=userinfo`, and if needed, `quarkus.oidc.roles.role-claim-path`."
msgstr "如果使用UserInfo为角色的来源，那么要设置 `quarkus.oidc.authentication.user-info-required=true` 和 `quarkus.oidc.roles.source=userinfo` ，如果需要的话，设置 `quarkus.oidc.roles.role-claim-path` 。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "Additionally, a custom `SecurityIdentityAugmentor` can also be used to add the roles as documented in xref:security-customization.adoc#security-identity-customization[Security Identity Customization]."
msgstr "此外，也可以使用自定义的 `SecurityIdentityAugmentor` 来添加角色，如 link:security-customization.html#security-identity-customization[安全身份定制] 中所记载的。"

#. type: Title ===
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, no-wrap
msgid "Token Verification And Introspection"
msgstr "代币验证(Token Verification)和自省(Introspection)"

#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"If the token is a JWT token then, by default, it will be verified with a `JsonWebKey` (JWK) key from a local `JsonWebKeySet` retrieved from the OpenID Connect Provider's JWK endpoint. The token's key identifier `kid` header value will be used to find the matching JWK key.\n"
"If no matching `JWK` is available locally then `JsonWebKeySet` will be refreshed by fetching the current key set from the JWK endpoint. The `JsonWebKeySet` refresh can be repeated only after the `quarkus.oidc.token.forced-jwk-refresh-interval` (default is 10 minutes) expires.\n"
"If no matching `JWK` is available after the refresh then the JWT token will be sent to the OpenID Connect Provider's token introspection endpoint."
msgstr "如果令牌是 JWT 令牌，则默认情况下，将使用从 OpenID Connect 提供程序的 JWK 端点检索到的本地 `JsonWebKeySet` 中的 `JsonWebKey`（JWK） 密钥对其进行验证。令牌的密钥标识符 `kid` 标头值( header value)将用于查找匹配的 JWK 密钥。 如果本地没有匹配的 `JWK` 可用，则 `JsonWebKeySet` 将通过从JWK端点获取当前密钥集来刷新。`JsonWebKeySet` 刷新只能在 `quarkus.oidc.token.forced-jwk-refresh-interval`（默认值为10分钟）过期后重复。 如果在刷新后没有匹配的“JWK”可用，则 JWT 令牌将发送到 OpenID Connect 提供程序的令牌自检终结点。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "If the token is opaque (it can be a binary token or an encrypted JWT token) then it will always be sent to the OpenID Connect Provider's token introspection endpoint."
msgstr "如果令牌是不透明的（可以是二进制令牌或加密的JWT令牌），那么它将总是被发送到OpenID Connect提供者的令牌自省端点。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "If you work with JWT tokens only and expect that a matching `JsonWebKey` will always be available (possibly after a key set refresh) then you should disable the token introspection:"
msgstr "如果你只使用JWT令牌，并且期望一个匹配的 `JsonWebKey` ，那么你应该禁用令牌自省："

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "However, there could be cases where JWT tokens must be verified via the introspection only. It can be forced by configuring an introspection endpoint address only, for example, in case of Keycloak you can do it like this:"
msgstr "然而，在某些情况下，JWT令牌必须只通过自省来验证。它可以通过配置一个自省端点地址来强制进行，例如，在Keycloak的情况下，你可以这样做："

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "An advantage of this indirect enforcement of JWT tokens being only introspected remotely is that two remote call are avoided: a remote OIDC metadata discovery call followed by another remote call fetching the verification keys which will not be used, while its disavantage is that the users need to know the introspection endpoint address and configure it manually."
msgstr "这种间接执行JWT令牌只进行远程反省的优点是避免了两个远程调用：一个远程OIDC元数据发现调用，然后是另一个远程调用，以获取不会被使用的验证密钥，而其缺点是用户需要知道反省端点地址并手动配置它。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "The alternative approach is to allow discovering the OIDC metadata (which is a default option) but require that only the remote JWT introspection is performed:"
msgstr "另一种方法是允许发现OIDC元数据（这是一个默认选项），但要求只进行远程JWT反省："

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "An advantage of this approach is that the configuration is simple and easy to understand, while its disavantage is that a remote OIDC metadata discovery call is required to discover an introspection endpoint address (though the verification keys will also not be fetched)."
msgstr "这种方法的优点是配置简单易懂，而其缺点是需要远程OIDC元数据发现调用来发现自省端点地址（尽管验证密钥也不会被取走）。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "Note that `io.quarkus.oidc.TokenIntrospection` (a simple `jakarta.json.JsonObject` wrapper) object will be created and can be either injected or accessed as a SecurityIdentity `introspection` attribute if either JWT or opaque token has been successfully introspected."
msgstr "请注意， `io.quarkus.oidc.TokenIntrospection` （一个简单的 `jakarta.json.JsonObject` 包装器）对象将被创建，如果JWT或不透明令牌已被成功反省，可以被注入或作为SecurityIdentity `introspection` 属性访问。"

#. type: Title ===
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy, no-wrap
msgid "Token Introspection and UserInfo Cache"
msgstr "Token自省和UserInfo缓存"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "All opaque and sometimes JWT Bearer access tokens have to be remotely introspected. If `UserInfo` is also required then the same access token will be used to do a remote call to OpenID Connect Provider again. So, if `UserInfo` is required and the current access token is opaque then for every such token there will be 2 remote calls done - one to introspect it and one to get UserInfo with it, and if the token is JWT then usually only a single remote call will be needed - to get UserInfo with it."
msgstr "所有不透明的、有时是JWT不记名的访问令牌都必须进行远程自省。如果还需要 `UserInfo` ，那么相同的访问令牌将被用来再次远程调用OpenID Connect Provider。因此，如果需要 `UserInfo` ，并且当前的访问令牌是不透明的，那么对于每一个这样的令牌，将进行两次远程调用--一次是反省，一次是用它来获取UserInfo，如果令牌是JWT，那么通常只需要一次远程调用--用它来获取UserInfo。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "The cost of making up to 2 remote calls per every incoming bearer or code flow access token can sometimes be problematic."
msgstr "每一个传入的不记名流(bearer flow)或授权码流(code flow)访问令牌要进行多达2次的远程呼叫，其开销有时会是个问题。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "If it is the case in your production then it can be recommended that the token introspection and `UserInfo` data are cached for a short period of time, for example, for 3 or 5 minutes."
msgstr "如果在你的生产中有这种情况，那么可以建议将令牌自省和 `UserInfo` 数据缓存一小段时间，例如，3或5分钟。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "`quarkus-oidc` provides `quarkus.oidc.TokenIntrospectionCache` and `quarkus.oidc.UserInfoCache` interfaces which can be used to implement `@ApplicationScoped` cache implementation which can be used to store and retrieve `quarkus.oidc.TokenIntrospection` and/or `quarkus.oidc.UserInfo` objects, for example:"
msgstr "`quarkus-oidc` 提供 `quarkus.oidc.TokenIntrospectionCache` 和 `quarkus.oidc.UserInfoCache` 接口，可用于实现 `@ApplicationScoped` 缓存实现，可用于存储和检索 `quarkus.oidc.TokenIntrospection` 和/或 `quarkus.oidc.UserInfo` 对象，例如："

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "Each OIDC tenant can either permit or deny storing its `quarkus.oidc.TokenIntrospection` and/or `quarkus.oidc.UserInfo` data with boolean `quarkus.oidc.\"tenant\".allow-token-introspection-cache` and `quarkus.oidc.\"tenant\".allow-user-info-cache` properties."
msgstr "每个OIDC租户可以允许或拒绝存储其 `quarkus.oidc.TokenIntrospection` 和/或 `quarkus.oidc.UserInfo` 数据，其属性为布尔值 `quarkus.oidc.\"tenant\".allow-token-introspection-cache` 和 `quarkus.oidc.\"tenant\".allow-user-info-cache` 。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "Additionally, `quarkus-oidc` provides a simple default memory based token cache which implements both `quarkus.oidc.TokenIntrospectionCache` and `quarkus.oidc.UserInfoCache` interfaces."
msgstr "此外， `quarkus-oidc` 提供了一个简单的基于内存的默认令牌缓存，该缓存同时实现了 `quarkus.oidc.TokenIntrospectionCache` 和 `quarkus.oidc.UserInfoCache` 接口。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "It can be activated and configured as follows:"
msgstr "它可以按以下方式激活和配置:"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "The default cache uses a token as a key and each entry can have `TokenIntrospection` and/or `UserInfo`. It will only keep up to a `max-size` number of entries. If the cache is full when a new entry is to be added then an attempt will be made to find a space for it by removing a single expired entry. Additionally, the cleanup timer, if activated, will periodically check for the expired entries and remove them."
msgstr "默认的缓存使用一个令牌作为密钥，每个条目可以有 `TokenIntrospection` 和/或 `UserInfo` 。它只保留最多数量的条目 `max-size` 。如果要添加一个新的条目时，缓存已经满了，那么将试图通过删除一个过期的条目来为它找到一个空间。此外，清理计时器，如果被激活，将定期检查过期的条目并将其删除。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "Please experiment with the default cache implementation or register a custom one."
msgstr "请尝试使用默认的缓存实现或注册一个自定义的缓存。"

#. type: Title ===
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy, no-wrap
msgid "JSON Web Token Claim Verification"
msgstr "JSON网络令牌索赔验证"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "Once the bearer JWT token's signature has been verified and its `expires at` (`exp`) claim has been checked, the `iss` (`issuer`) claim value is verified next."
msgstr "一旦无记名JWT令牌的签名被验证，其 `expires at` ( `exp` )声明会被检查，接下来也会验证 `iss` ( `issuer` )声明的值。"

#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"By default, the `iss` claim value is compared to the `issuer` property which may have been discovered in the well-known provider configuration.\n"
"But if `quarkus.oidc.token.issuer` property is set then the `iss` claim value is compared to it instead."
msgstr "默认情况下， `iss` 声明的值会与 `issuer` 属性进行比较，该属性有可能会在众所周知的提供者配置中找到。但是，如果 `quarkus.oidc.token.issuer` 属性被设置，那么 `iss` 声明的值将与它进行比较。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "In some cases, this `iss` claim verification may not work. For example, if the discovered `issuer` property contains an internal HTTP/IP address while the token `iss` claim value contains an external HTTP/IP address. Or when a discovered `issuer` property contains the template tenant variable but the token `iss` claim value has the complete tenant-specific issuer value."
msgstr "在某些情况下，这种 `iss` 声明验证可能不起作用。例如，如果发现的 `issuer` 属性包含一个内部 HTTP/IP地址，而令牌 `iss` 声明值包含一个外部 HTTP/IP地址。或者当发现的 `issuer` 属性包含模板租户变量，但令牌 `iss` 声明值有完整的租户特定发行人(tenant-specific issuer )的值。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "In such cases you may want to consider skipping the issuer verification by setting `quarkus.oidc.token.issuer=any`. Please note that it is not recommended and should be avoided unless no other options are available:"
msgstr "在这种情况下，你可能要考虑通过设置 `quarkus.oidc.token.issuer=any` ，来跳过发行人验证。请注意，不建议这样做，除非没有其他选择，否则应避免这样做："

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "If you work with Keycloak and observe the issuer verification errors due to the different host addresses then configure Keycloak with a `KEYCLOAK_FRONTEND_URL` property to ensure the same host address is used."
msgstr "如果你使用Keycloak，并观察到由于不同的主机地址导致发行人验证错误，那么用 `KEYCLOAK_FRONTEND_URL` 属性配置Keycloak，以确保使用相同的主机地址。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "If the `iss` property is tenant specific in a multi-tenant deployment then you can use the `SecurityIdentity` `tenant-id` attribute to check the issuer is correct in the endpoint itself or the custom Jakarta REST filter, for example:"
msgstr "如果在多租户部署中， `iss` 属性是租户特定的，那么你可以使用 `SecurityIdentity` `tenant-id` 属性来检查端点本身或自定义Jakarta REST过滤器中的发行者是否正确，例如："

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "Note it is also recommended to use `quarkus.oidc.token.audience` property to verify the token `aud` (`audience`) claim value."
msgstr "注意，建议使用 `quarkus.oidc.token.audience` 属性来验证令牌 `aud` ( `audience` )声明的值。"

#. type: Title ===
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, no-wrap
msgid "Single Page Applications"
msgstr "单页应用程序"

#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"Single Page Application (SPA) typically uses `XMLHttpRequest`(XHR) and the JavaScript utility code provided by the OpenID Connect provider to acquire a bearer token and use it\n"
"to access Quarkus `service` applications."
msgstr "单页应用程序（SPA）通常使用 `XMLHttpRequest` （XHR）和OpenID Connect提供商提供的Java Script实用程序代码来获取不记名令牌，并使用它来访问Quarkus `service` 应用程序。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "For example, here is how you can use `keycloak.js` to authenticate the users and refresh the expired tokens from the SPA:"
msgstr "例如，以下是你如何使用 `keycloak.js` 来验证用户并从SPA中刷新过期的令牌："

#. type: Title ===
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, no-wrap
msgid "Cross Origin Resource Sharing"
msgstr "跨域资源共享(CORS)"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "If you plan to consume your OpenID Connect `service` application from a Single Page Application running on a different domain, you will need to configure CORS (Cross-Origin Resource Sharing). Please read the xref:http-reference.adoc#cors-filter[HTTP CORS documentation] for more details."
msgstr "如果你打算从运行在不同域的单页应用中使用你的OpenID Connect `service` 应用程序，你将需要配置CORS（跨源资源共享）。请阅读 link:http-reference.html#cors-filter[HTTP CORS文档] 以了解更多细节。"

#. type: Title ===
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, no-wrap
msgid "Provider Endpoint configuration"
msgstr "提供者端点配置"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "OIDC `service` application needs to know OpenID Connect provider's token, `JsonWebKey` (JWK) set and possibly `UserInfo` and introspection endpoint addresses."
msgstr "OIDC `service` 应用程序需要知道OpenID Connect提供者的令牌、 `JsonWebKey` (JWK)集以及可能的 `UserInfo` 和自省端点地址。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "By default, they are discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc.auth-server-url`."
msgstr "默认情况下，它们是通过在配置的 `quarkus.oidc.auth-server-url` 中，添加一个 `/.well-known/openid-configuration` 路径来发现的。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "Alternatively, if the discovery endpoint is not available, or if you would like to save on the discovery endpoint round-trip, you can disable the discovery and configure them with relative path values, for example:"
msgstr "另外，如果发现端点不可用，或者你想节省发现端点的往返开销，你可以禁用发现，用相对路径值配置它们，比如说："

#. type: Title ===
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, no-wrap
msgid "Token Propagation"
msgstr "令牌传播"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "Please see xref:security-openid-connect-client-reference.adoc#token-propagation[Token Propagation] section about the Bearer access token propagation to the downstream services."
msgstr "关于承载访问令牌向下游服务的传播，请参见 link:security-openid-connect-client.html#token-propagation[令牌] 传播部分。"

#. type: Title ===
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy, no-wrap
msgid "Oidc Provider Client Authentication"
msgstr "OIDC供应商客户认证"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "`quarkus.oidc.runtime.OidcProviderClient` is used when a remote request to an OpenID Connect Provider has to be done. If the bearer token has to be introspected then `OidcProviderClient` has to authenticate to the OpenID Connect Provider. Please see xref:security-oidc-code-flow-authentication.adoc#oidc-provider-client-authentication[OidcProviderClient Authentication] for more information about all the supported authentication options."
msgstr " `quarkus.oidc.runtime.OidcProviderClient` 是在需要向OpenID连接提供者进行远程请求时使用的。如果必须对承载令牌进行检查，那么 ，必须对OpenID Connect Provider进行认证。请参阅 `OidcProviderClient` link:security-oidc-code-flow-authentication.html#oidc-provider-client-authentication[OidcProviderClient Authentication] 以了解更多关于所有支持的认证选项的信息。"

#. type: Title ===
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, no-wrap
msgid "Testing"
msgstr "测试"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "Start by adding the following dependencies to your test project:"
msgstr "首先在你的测试项目中添加以下依赖项："

#. type: Block title
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ====
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, no-wrap
msgid "Wiremock"
msgstr "Wiremock"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "Add the following dependencies to your test project:"
msgstr "在你的测试项目中添加以下依赖项："

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "Prepare the REST test endpoint, set `application.properties`, for example:"
msgstr "准备好REST测试端点，设置 `application.properties` ，例如："

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "and finally write the test code, for example:"
msgstr "并最终写出测试代码，例如："

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "Note that the `quarkus-test-oidc-server` extension includes a signing RSA private key file in a `JSON Web Key` (`JWK`) format and points to it with a `smallrye.jwt.sign.key.location` configuration property. It allows to use a no argument `sign()` operation to sign the token."
msgstr "请注意， `quarkus-test-oidc-server` 扩展包括一个 `JSON Web Key` ( `JWK` ) 格式的签名 RSA 私钥文件，并通过 `smallrye.jwt.sign.key.location` 配置属性指向它。它允许使用一个无参数的 `sign()` 操作来签署令牌。"

#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"Testing your `quarkus-oidc` `service` application with `OidcWiremockTestResource` provides the best coverage as even the communication channel is tested against the Wiremock HTTP stubs.\n"
"`OidcWiremockTestResource` will be enhanced going forward to support more complex bearer token test scenarios."
msgstr "使用 `OidcWiremockTestResource` 测试 `quarkus-oidc` `service` 应用程序可提供最佳覆盖率，因为甚至通信通道也是通过 Wiremock HTTP 存根进行测试的。 `OidcWiremockTestResource` 将继续得到增强，以支持更复杂的承载令牌测试场景。"

#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"If there is an immediate need for a test to define Wiremock stubs not currently supported by `OidcWiremockTestResource`\n"
"one can do so via a `WireMockServer` instance injected into the test class, for example:"
msgstr "如果一个测试需要立即定义Wiremock存根(stubs)，而目前 `OidcWiremockTestResource` 不支持，可以通过注入测试类的 `WireMockServer` 实例来实现，例如:"

#. type: delimited block =
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "`OidcWiremockTestResource` does not work with `@QuarkusIntegrationTest` against Docker containers, because the Wiremock server is running in the JVM running the test, which cannot be accessed from the Docker container running the Quarkus application."
msgstr "`OidcWiremockTestResource` 不适用于针对Docker容器的 `@QuarkusIntegrationTest` ，因为Wiremock服务器在运行测试的JVM中运行，无法被在Docker容器中运行的Quarkus应用程序访问。"

#. type: Title ====
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, no-wrap
msgid "Dev Services for Keycloak"
msgstr "为Keycloak提供的开发服务"

#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"Using xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] is recommended for the integration testing against Keycloak.\n"
"`Dev Services for Keycloak` will launch and initialize a test container: it will create a `quarkus` realm, a `quarkus-app` client (`secret` secret) and add `alice` (`admin` and `user` roles) and `bob` (`user` role) users, where all of these properties can be customized."
msgstr "建议使用 link:security-openid-connect-dev-services.html[Keycloak开发服务] 进行针对Keycloak的集成测试。 `Keycloak开发服务` 将启动和初始化一个测试容器：它将创建一个 `quarkus` 领域，一个 `quarkus-app` 客户端（ `secret` 秘密）并添加 `alice` （ `admin` 和 `user` 角色）和 `bob` （ `user` 角色）用户，其中所有这些属性都可以被定制。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "First you need to add the following dependency:"
msgstr "首先，你需要添加以下依赖关系："

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "which provides a utility class `io.quarkus.test.keycloak.client.KeycloakTestClient` you can use in tests for acquiring the access tokens."
msgstr "其中提供了一个实用类 `io.quarkus.test.keycloak.client.KeycloakTestClient` ，你可以在测试中使用它来获取访问令牌。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "Next prepare your `application.properties`. You can start with a completely empty `application.properties` as `Dev Services for Keycloak` will register `quarkus.oidc.auth-server-url` pointing to the running test container as well as `quarkus.oidc.client-id=quarkus-app` and `quarkus.oidc.credentials.secret=secret`."
msgstr "接下来准备你的 `application.properties` 。你可以从一个完全空的 `application.properties` 开始，因为 `Keycloak开发服务` 将注册指向运行中的测试容器的 `quarkus.oidc.auth-server-url` ，以及 `quarkus.oidc.client-id=quarkus-app` 和 `quarkus.oidc.credentials.secret=secret` 。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "But if you already have all the required `quarkus-oidc` properties configured then you only need to associate `quarkus.oidc.auth-server-url` with the `prod` profile for `Dev Services for Keycloak`to start a container, for example:"
msgstr "但是如果你已经配置了所需的 `quarkus-oidc` 属性，那么你只需要将 `quarkus.oidc.auth-server-url` 与 `Keycloak开发服务` 的 `prod` 配置文件联系起来，以启动一个容器，例如："

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "If a custom realm file has to be imported into Keycloak before running the tests then you can configure `Dev Services for Keycloak` as follows:"
msgstr "如果在运行测试前必须将自定义领域文件导入Keycloak，那么你可以按以下方式配置 `Keycloak开发服务` ："

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "Finally, write your test which will be executed in JVM mode:"
msgstr "最后编写你的测试，它将在JVM模式下执行："

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "and in native mode:"
msgstr "在原生模式(native mode)下："

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "Please see xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] for more information about the way it is initialized and configured."
msgstr "请参阅 link:security-openid-connect-dev-services.html[Keycloak开发服务] ，来了解更多关于它的初始化和配置方式的信息。"

#. type: Title ====
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy, no-wrap
msgid "KeycloakTestResourceLifecycleManager"
msgstr "KeycloakTestResourceLifecycleManager"

#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"If you need to do some integration testing against Keycloak then you are encouraged to do it with xref:integration-testing-keycloak-devservices[Dev Services For Keycloak].\n"
"Use `KeycloakTestResourceLifecycleManager` for your tests only if there is a good reason not to use `Dev Services for Keycloak`."
msgstr "如果您需要对 Keycloak 进行集成测试，我们建议您使用 xref:integration-testing-keycloak-devservices[Keycloak 开发服务] 进行测试。只有在有充分理由不使用 `Dev Services for Keycloak` 的情况下，才使用 `KeycloakTestResourceLifecycleManager` 进行测试。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "Start with adding the following dependency:"
msgstr "首先要添加以下依赖关系："

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "which provides `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` - an implementation of `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which starts a Keycloak container."
msgstr "它提供了 `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` - 一个 `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` 的实现，用来启动一个Keycloak容器。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "And configure the Maven Surefire plugin as follows:"
msgstr "并按以下方式配置Maven Surefire插件："

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "(and similarly `maven.failsafe.plugin` when testing in native image)."
msgstr "(在原生image中测试时也是如此 `maven.failsafe.plugin` )。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "`KeycloakTestResourceLifecycleManager` registers `alice` and `admin` users. The user `alice` has the `user` role only by default - it can be customized with a `keycloak.token.user-roles` system property. The user `admin` has the `user` and `admin` roles by default - it can be customized with a `keycloak.token.admin-roles` system property."
msgstr "`KeycloakTestResourceLifecycleManager` 注册 `alice` 和 `admin` 用户。默认情况下，用户 `alice` 仅具有 `user` 角色 - 可以使用 `keycloak.token.user-roles` 系统属性对其进行自定义。默认情况下，用户 `admin` 具有 `用户` 和 `admin` 角色 - 可以使用 `keycloak.token.admin-roles` 系统属性对其进行自定义。"

#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"By default, `KeycloakTestResourceLifecycleManager` uses HTTPS to initialize a Keycloak instance which can be disabled with `keycloak.use.https=false`.\n"
"Default realm name is `quarkus` and client id - `quarkus-service-app` - set `keycloak.realm` and `keycloak.service.client` system properties to customize the values if needed."
msgstr "默认情况下， `KeycloakTestResourceLifecycleManager` 使用HTTPS来初始化Keycloak实例，可以用 `keycloak.use.https=false` 来禁用。默认的领域(realm)名称是 `quarkus` ，客户端ID - `quarkus-service-app` - 如果需要，可以设置 `keycloak.realm` 和 `keycloak.service.client` 系统属性来定制数值。"

#. type: Title ====
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, no-wrap
msgid "Local Public Key"
msgstr "本地公钥"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "You can also use a local inlined public key for testing your `quarkus-oidc` `service` applications:"
msgstr "你也可以使用一个本地内嵌的公钥来测试你的 `quarkus-oidc` `service` 应用程序:"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "copy `privateKey.pem` from the `integration-tests/oidc-tenancy` in the `main` Quarkus repository and use a test code similar to the one in the `Wiremock` section above to generate JWT tokens. You can use your own test keys if preferred."
msgstr "从 `main` Quarkus资源库中的 `integration-tests/oidc-tenancy` 中复制 `privateKey.pem` ，并使用类似于上面 `Wiremock` 部分的测试代码来生成JWT令牌。如果愿意，你可以使用你自己的测试密钥。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "This approach provides a more limited coverage compared to the Wiremock approach - for example, the remote communication code is not covered."
msgstr "与Wiremock方法相比，这种方法提供了更有限的覆盖范围--例如，远程通信代码没有被覆盖。"

#. type: Title ====
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, no-wrap
msgid "TestSecurity annotation"
msgstr "TestSecurity注解"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "You can use `@TestSecurity` and `@OidcSecurity` annotations for testing the `service` application endpoint code which depends on the injected `JsonWebToken` as well as `UserInfo` and `OidcConfigurationMetadata`."
msgstr "你可以使用 `@TestSecurity` 和 `@OidcSecurity` 注解来测试 `service` 应用程序端点代码，该代码依赖于注入的 `JsonWebToken` 以及 `UserInfo` 和 `OidcConfigurationMetadata` 。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "Add the following dependency:"
msgstr "添加以下依赖关系："

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "and write a test code like this one:"
msgstr "并写一个像这样的测试代码："

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "where `ProtectedResource` class may look like this:"
msgstr "其中 `ProtectedResource` 类可能看起来像这样："

#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"Note that `@TestSecurity` annotation must always be used and its `user` property is returned as `JsonWebToken.getName()` and `roles` property - as `JsonWebToken.getGroups()`.\n"
"`@OidcSecurity` annotation is optional and can be used to set the additional token claims, as well as `UserInfo` and `OidcConfigurationMetadata` properties.\n"
"Additionally, if `quarkus.oidc.token.issuer` property is configured then it will be used as an `OidcConfigurationMetadata` `issuer` property value."
msgstr "请注意，必须始终使用 `@TestSecurity` 注解，其 `user` 属性将作为 `JsonWebToken.getName()` 和 `roles` 属性-作为 `JsonWebToken.getGroups()` 。 `@OidcSecurity` 注解是可选的，可用于设置额外的标记要求，以及 `UserInfo` 和 `OidcConfigurationMetadata` 属性。此外，如果配置了 `quarkus.oidc.token.issuer` 属性，那么它将被用作 `OidcConfigurationMetadata` `issuer` 属性的值。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "If you work with the opaque tokens then you can test them as follows:"
msgstr "如果你用不透明的令牌，那么你可以按以下方式测试它们："

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "Note that `@TestSecurity` `user` and `roles` attributes are available as `TokenIntrospection` `username` and `scope` properties and you can use `io.quarkus.test.security.oidc.TokenIntrospection` to add the additional introspection response properties such as an `email`, etc."
msgstr "请注意， `@TestSecurity` `user` 和 `roles` 属性可作为 `TokenIntrospection` `username` 和 `scope` 属性，你可以使用 `io.quarkus.test.security.oidc.TokenIntrospection` 来添加额外的自省响应属性，如 `email` ，等等。"

#. type: delimited block =
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "`@TestSecurity` and `@OidcSecurity` can be combined in a meta-annotation, for example like so:"
msgstr " `@TestSecurity` 和 ，可以在一个元注释中结合起来，例如，像这样： `@OidcSecurity` "

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "This is particularly useful if the same set of security settings needs to be used in multiple test methods."
msgstr "如果需要在多个测试方法中使用同一套安全设置，这一点特别有用。"

#. type: Title ===
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, no-wrap
msgid "How to check the errors in the logs"
msgstr "如何检查日志中的错误"

#. type: delimited block =
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "Please enable `io.quarkus.oidc.runtime.OidcProvider` `TRACE` level logging to see more details about the token verification errors:"
msgstr "请启用 `io.quarkus.oidc.runtime.OidcProvider` `TRACE` 级日志，以查看有关令牌验证错误的更多细节："

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "Please enable `io.quarkus.oidc.runtime.OidcRecorder` `TRACE` level logging to see more details about the OidcProvider client initialization errors:"
msgstr "请启用 `io.quarkus.oidc.runtime.OidcRecorder` `TRACE` 级日志，以查看关于OidcProvider客户端初始化错误的更多细节："

#. type: Title ===
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, no-wrap
msgid "External and Internal Access to OpenID Connect Provider"
msgstr "外部和内部访问OpenID Connect的提供者"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "Note that the OpenID Connect Provider externally accessible token and other endpoints may have different HTTP(S) URLs compared to the URLs auto-discovered or configured relative to `quarkus.oidc.auth-server-url` internal URL. For example, if your SPA acquires a token from an external token endpoint address and sends it to Quarkus as a bearer token then an issuer verification failure may be reported by the endpoint."
msgstr "请注意，与自动发现的或相对于 `quarkus.oidc.auth-server-url` 内部 URL 配置的 URL 相比，OpenID Connect Provider 外部可访问的令牌和其他端点可能具有不同的 HTTP(S) URL。例如，如果你的SPA从外部令牌端点地址获取令牌，并将其作为不记名令牌发送到Quarkus，那么端点可能会报告发行人验证失败。"

#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"In such cases, if you work with Keycloak then please start it with a `KEYCLOAK_FRONTEND_URL` system property set to the externally accessible base URL.\n"
"If you work with other Openid Connect providers then please check your provider's documentation."
msgstr "在这种情况下，如果你使用Keycloak，那么请用 `KEYCLOAK_FRONTEND_URL` 系统属性设置为外部可访问的基本URL来启动它。如果你使用其他Openid Connect提供商，那么请查看你的提供商的文档。"

#. type: Title ===
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, no-wrap
msgid "How to use 'client-id' property"
msgstr "如何使用 `client-id` 属性"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "`quarkus.oidc.client-id` property identifies an OpenID Connect Client which requested the current bearer token. It can be an SPA application running in a browser or a Quarkus `web-app` confidential client application propagating the access token to the Quarkus `service` application."
msgstr "`quarkus.oidc.client-id` 属性标识请求当前持有者令牌的 OpenID Connect Client。它可以是在浏览器中运行的SPA应用程序，也可以是Quarkus `web-app` 机密客户端应用程序，将访问令牌传播到Quarkus `service` 的应用程序。"

#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"This property is required if the `service` application is expected to introspect the tokens remotely - which is always the case for the opaque tokens.\n"
"This property is optional if the local Json Web Key token verification only is used."
msgstr "如果 `service` 应用程序被期望是远程自省令牌--对于不透明的令牌来说总是这样，那么这个属性是必需的。如果只使用本地Json Web Key令牌验证，那么该属性是可选的。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "Nonetheless, setting this property is encouraged even if the endpoint does not require access to the remote introspection endpoint. The reasons behind it that `client-id`, if set, can be used to verify the token audience and will also be included in the logs when the token verification fails for the better traceability of the tokens issued to specific clients to be analyzed over a longer period of time."
msgstr "尽管如此，即使端点不需要访问远程自省端点，也鼓励设置该属性。其背后的原因是： `client-id` ，如果设置了这个属性，就可以用来验证令牌受众，当令牌验证失败时，也会包含在日志中，以便更好地追踪发放给特定客户的令牌，并在较长的时间内进行分析。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "For example, if your OpenID Connect provider sets a token audience then the following configuration pattern is recommended:"
msgstr "例如，如果你的OpenID Connect提供商设置了一个令牌受众，那么建议采用以下配置模式："

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "If you set `quarkus.oidc.client-id` but your endpoint does not require remote access to one of OpenID Connect Provider endpoints (introspection, token acquisition, etc.) then do not set a client secret with the `quarkus.oidc.credentials` or similar properties as it will not be used."
msgstr "如果你设置了 `quarkus.oidc.client-id` ，但你的端点不需要远程访问OpenID Connect提供者的一个端点（自省、令牌获取等），那么就不要设置带有 `quarkus.oidc.credentials` 或类似属性的客户秘钥，因为它不会被使用。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "Note Quarkus `web-app` applications always require `quarkus.oidc.client-id` property."
msgstr "注意Quarkus `web-app` 应用程序总是需要 `quarkus.oidc.client-id` 属性。"

#. type: Title ==
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, no-wrap
msgid "References"
msgstr "参考文献"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties]"
msgstr "xref:security-oidc-configuration-properties-reference.adoc[OIDC 配置属性]"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "xref:security-oidc-bearer-token-authentication-tutorial.adoc[Protect a service application by using OIDC Bearer token authentication]"
msgstr "xref:security-oidc-bearer-token-authentication-tutorial.adoc[使用 OIDC Bearer 令牌身份验证保护服务应用程序]"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "xref:security-protect-service-applications-by-using-oidc-bearer-authentication-how-to.adoc[Protect service applications by using OIDC Bearer token authentication]"
msgstr "link:security-protect-service-applications-by-using-oidc-bearer-authentication-how-to.html[通过使用OIDC承载令牌认证来保护服务应用]"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr "link:https://www.keycloak.org/documentation.html[Keycloak 文档]"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr "link:https://openid.net/connect/[OpenID Connect]"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "link:https://tools.ietf.org/html/rfc7519[JSON 网络令牌]"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "xref:security-openid-connect-client-reference.adoc[OpenID Connect and OAuth2 Client and Filters Reference Guide]"
msgstr "link:security-openid-connect-client.html[Quarkus - 使用OpenID Connect，OAuth2客户端和过滤器的参考指南]"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]"
msgstr "xref:security-openid-connect-dev-services.adoc[Keycloak 的开发服务]"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
msgid "xref:security-jwt-build.adoc[Sign and encrypt JWT tokens with SmallRye JWT Build]"
msgstr "xref:security-jwt-build.adoc[使用 SmallRye JWT Build 对 JWT 令牌进行签名和加密]"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "xref:security-authentication-mechanisms.adoc#oidc-jwt-oauth2-comparison[Choosing between OpenID Connect, SmallRye JWT, and OAuth2 authentication mechanisms]"
msgstr "xref:security-authentication-mechanisms.adoc#oidc-jwt-oauth2-comparison[在 OpenID Connect、SmallRye JWT 和 OAuth2 身份验证机制之间做出选择]"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "xref:security-authentication-mechanisms.adoc#combining-authentication-mechanisms[Combining authentication mechanisms]"
msgstr "xref:security-authentication-mechanisms.adoc#combining-authentication-mechanisms[组合认证机制]"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus 安全概述]"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "xref:security-keycloak-admin-client.adoc[Quarkus Keycloak Admin Client]"
msgstr "xref:security-keycloak-admin-client.adoc[Quarkus Keycloak 管理客户端]"
