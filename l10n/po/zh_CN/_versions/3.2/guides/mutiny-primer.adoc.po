# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-08-28 16:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "Mutiny - Async for bare mortal"
msgstr ""

#: _versions/3.2/guides/mutiny-primer.adoc
msgid ""
"https://smallrye.io/smallrye-mutiny[Mutiny] is an intuitive, reactive programming library.\n"
"It is the primary model to write reactive applications with Quarkus."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "An event-driven reactive programming API"
msgstr ""

#: _versions/3.2/guides/mutiny-primer.adoc
msgid ""
"Mutiny is very different from the other reactive programming libraries.\n"
"It takes a different approach to design your program.\n"
"With Mutiny everything is event-driven: you receive events, and you react to them.\n"
"This event-driven aspect embraces the asynchronous nature of distributed systems and provides an elegant and precise way to express continuation."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/mutiny-primer.adoc
msgid "Mutiny offers two types that are both event-driven and lazy:"
msgstr ""

#: _versions/3.2/guides/mutiny-primer.adoc
msgid ""
"A `Uni` emits a single event (an item or a failure).\n"
"Unis are convenient to represent asynchronous actions that return 0 or 1 result.\n"
"A good example is the result of sending a message to a message broker queue."
msgstr ""

#: _versions/3.2/guides/mutiny-primer.adoc
msgid ""
"A `Multi` emits multiple events (n items, 1 failure or 1 completion).\n"
"Multis can represent streams of items, potentially unbounded.\n"
"A good example is receiving messages from a message broker queue."
msgstr ""

#: _versions/3.2/guides/mutiny-primer.adoc
msgid ""
"These two types allow representing any type of interactions.\n"
"They are event sources.\n"
"You observe them (_subscription_) and you get notified when they emit an item, a failure, or, in the case of a bounded Multi, a completion event.\n"
"When you (the subscriber) receive the event, you can process it (e.g., transform it, filter it).\n"
"With Mutiny, you are going to write code like _onX().action()_, which reads as “on item X do action”."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/mutiny-primer.adoc
msgid "If you want to know more about Mutiny, and the concepts behind it, check https://smallrye.io/smallrye-mutiny/latest/reference/why-is-asynchronous-important[the Mutiny Reference documentation]."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "Mutiny in Quarkus"
msgstr ""

#: _versions/3.2/guides/mutiny-primer.adoc
msgid ""
"Mutiny is the primary API when dealing with the reactive features from Quarkus.\n"
"It means that most extensions support Mutiny either by exposing an API returning Unis and Multis (such as reactive data sources or rest clients) or understanding when your methods return a Uni or a Multi (such as RESTEasy Reactive or Reactive Messaging)."
msgstr ""

#: _versions/3.2/guides/mutiny-primer.adoc
msgid ""
"These integrations make Mutiny a prominent and cohesive model for every reactive application developed with Quarkus.\n"
"In addition, Mutiny architecture allows fine-grain dead-code elimination which improves the memory usage when compiled to native (such as with Quarkus native mode or GraalVM native image compiler)."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "Why another reactive programming API?"
msgstr ""

#: _versions/3.2/guides/mutiny-primer.adoc
msgid ""
"Seasoned reactive developers may wonder why Quarkus introduced yet another reactive programming APIs while there are existing ones.\n"
"Mutiny is taking a very different angle:"
msgstr ""

#: _versions/3.2/guides/mutiny-primer.adoc
msgid ""
"**Event-Driven** -\n"
"Mutiny places events at the core of its design.\n"
"With Mutiny, you observe events, react to them, and create elegant and readable processing pipelines.\n"
"A Ph.D. in functional programming is not required."
msgstr ""

#: _versions/3.2/guides/mutiny-primer.adoc
msgid ""
"**Navigable** - Even with intelligent code completion, classes with hundreds of methods are confusing.\n"
"Mutiny provides a navigable and explicit API driving you towards the operator you need."
msgstr ""

#: _versions/3.2/guides/mutiny-primer.adoc
msgid ""
"**Non-Blocking I/O** - Mutiny is the perfect companion to tame the asynchronous nature of applications with non-blocking I/O (which powers xref:quarkus-reactive-architecture.adoc[Quarkus]).\n"
"Declaratively compose operations, transform data, enforce progress, recover from failures, and more."
msgstr ""

#: _versions/3.2/guides/mutiny-primer.adoc
msgid "**Made for an asynchronous world** - Mutiny can be used in any asynchronous application such as event-driven microservices, message-based applications, network utilities, data stream processing, and of course... reactive applications!"
msgstr ""

#: _versions/3.2/guides/mutiny-primer.adoc
msgid ""
"**Reactive Streams and Converters Built-In** - Mutiny is based on the https://www.reactive-streams.org/[Reactive Streams] specification, and so it can be integrated with any other reactive programming library.\n"
"In addition, it proposes converters to interact with other popular libraries."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "Mutiny and the I/O Threads"
msgstr ""

#: _versions/3.2/guides/mutiny-primer.adoc
msgid ""
"Quarkus is powered by a xref:quarkus-reactive-architecture.adoc#engine[reactive engine], and when developing a reactive application, your code is executed on one of the few I/O threads.\n"
"Remember, you must never block these threads, and the model would collapse if you do.\n"
"So, you can't use blocking I/O.\n"
"Instead, you need to schedule the I/O operation and pass a continuation."
msgstr ""

#: _versions/3.2/guides/mutiny-primer.adoc
msgid ""
"The Mutiny event-driven paradigm is tailored for this.\n"
"When the I/O operation completes successfully, the Uni that represents it emits an item event.\n"
"When it fails, it emits a failure event.\n"
"The continuation is simply and naturally expressed using the event-driven API."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "Mutiny through Examples"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/mutiny-primer.adoc
msgid "Many Quarkus extensions expose Mutiny APIs. In this section, we use the MongoDB extension to illustrate how to use Mutiny."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/mutiny-primer.adoc
msgid "Let's imagine a simple structure representing an element from the https://en.wikipedia.org/wiki/Periodic_table[periodic table]:"
msgstr ""

#: _versions/3.2/guides/mutiny-primer.adoc
msgid ""
"This structure contains the name, symbol, and position of the element.\n"
"To retrieve and store elements into a Mongo collection, you can use the following code:"
msgstr ""

#: _versions/3.2/guides/mutiny-primer.adoc
msgid ""
"First, the Mongo client is injected.\n"
"Note that it uses the reactive variant (`io.quarkus.mongodb.reactive.ReactiveMongoClient`).\n"
"In the initialize method, we retrieve and store the collection in which elements will be inserted."
msgstr ""

#: _versions/3.2/guides/mutiny-primer.adoc
msgid ""
"The `add` method inserts an element in the collection.\n"
"It receives the element as a parameter and uses the reactive API of the collection.\n"
"Interacting with the database involves I/Os.\n"
"The reactive principles forbid blocking while waiting for the interaction to complete.\n"
"Instead, we schedule the operation and pass a continuation.\n"
"The `insertOne` method returns a Uni, i.e., an asynchronous operation.\n"
"That's the scheduled I/O. We now need to express the continuation, which is done using the `.onItem()` method.\n"
"`.onItem()` allows configuring what needs to happen when the observed Uni emits an item, in our case when the scheduled I/Os completes.\n"
"In this example, we extract the inserted document id.\n"
"The final step is the subscription.\n"
"Without it, nothing would ever happen. Subscribing triggers the operation.\n"
"The subscription method can also define handlers:  the `id` value on success, or a failure when the insertion fails."
msgstr ""

#: _versions/3.2/guides/mutiny-primer.adoc
msgid ""
"Let's now look at the second method.\n"
"It retrieves all the stored elements.\n"
"In this case, it returns multiple items (one per stored element), so we are using a `Multi`.\n"
"As for the insertion, getting the stored elements involves I/Os.\n"
"The `find` is our operation.\n"
"As for Uni, you need to subscribe to trigger the operation.\n"
"The subscriber receives item events, a failure event, or a completion event when all the elements have been received."
msgstr ""

#: _versions/3.2/guides/mutiny-primer.adoc
msgid ""
"Subscribing to a Uni or a Multi is essential, as without it, the operation is never executed.\n"
"In Quarkus some extensions deal with the subscription for you.\n"
"For example, in RESTEasy Reactive your HTTP methods can return a Uni or a Multi, and RESTEasy Reactive handles the subscription."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "Mutiny Patterns"
msgstr ""

#: _versions/3.2/guides/mutiny-primer.adoc
msgid ""
"The example from the last section was simplistic on purpose.\n"
"Let's have a look at a few common patterns."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "Observing events"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/mutiny-primer.adoc
msgid "You can observe the various kind of events using:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/mutiny-primer.adoc
msgid "`on{event}().invoke(ev -> System.out.println(ev));`"
msgstr ""

#: _versions/3.2/guides/mutiny-primer.adoc
msgid ""
"For example, for items use:\n"
"`onItem().invoke(item -> ...);`"
msgstr ""

#: _versions/3.2/guides/mutiny-primer.adoc
msgid ""
"For failure, use:\n"
"`onFailure().invoke(failure -> ...)`"
msgstr ""

#: _versions/3.2/guides/mutiny-primer.adoc
msgid ""
"The `invoke` method is synchronous.\n"
"Sometimes you need to execute an asynchronous action.\n"
"In this case use `call`, as in: `onItem().call(item -> someAsyncAction(item))`.\n"
"Note that `call` does not change the item, it just calls an asynchronous action, and when this one completes, it emits the original item downstream."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "Transforming item"
msgstr ""

#: _versions/3.2/guides/mutiny-primer.adoc
msgid ""
"The first instrumental pattern consists of transforming the item events you receive.\n"
"As we have seen in the previous section, it could indicate the successful insertion, or the elements stored in the database."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/mutiny-primer.adoc
msgid "Transforming an item is done using: `onItem().transform(item -> ....)`."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/mutiny-primer.adoc
msgid "More details about transformation can be found in the https://smallrye.io/smallrye-mutiny/latest/tutorials/transforming-items/[Mutiny documentation]."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "Sequential composition"
msgstr ""

#: _versions/3.2/guides/mutiny-primer.adoc
msgid ""
"Sequential composition allows chaining dependent asynchronous operations. This is achieved using `onItem().transformToUni(item -> ...)`.\n"
"Unlike `transform`, the function passed to `transformToUni` returns a Uni."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/mutiny-primer.adoc
msgid "More details about asynchronous transformation can be found in the https://smallrye.io/smallrye-mutiny/latest/tutorials/transforming-items-asynchronously/[Mutiny documentation]."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "Failure handling"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/mutiny-primer.adoc
msgid "So far we only handle the item events, but handling failure is essential. You can handle failures using `onFailure()`."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/mutiny-primer.adoc
msgid "For example, you can recover with a fallback item using `onFailure().recoverWithItem(fallback)`:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/mutiny-primer.adoc
msgid "You can also retry the operation such as in:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/mutiny-primer.adoc
msgid "More info about failure recovery can be found on https://smallrye.io/smallrye-mutiny/latest/tutorials/handling-failures/[the handling failure documentation] and https://smallrye.io/smallrye-mutiny/latest/tutorials/retrying/[the retrying on failures documentation]."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "Events and Actions"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/mutiny-primer.adoc
msgid "The following tables list the events that you can receive for Uni and Multi. Each of them is associated with its own group (onX). The second table lists the classic action you can do upon an event. Note that some groups offer more possibilities."
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "Events from the upstream"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "Events from the downstream"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "Uni"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "Subscription (1), Item (0..1), failure (0..1)"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "Cancellation"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "Multi"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "Subscription (1), Item (0..n), failure (0..1), completion (0..1)"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "Cancellation, Request"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/mutiny-primer.adoc
msgid "Check the full list of events on https://smallrye.io/smallrye-mutiny/latest/tutorials/observing-events/[the event documentation]."
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "Action"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "API"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "Comment"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "transform"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "`onItem().transform(Function<I, O> function);`"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid ""
"Transform the event into another event using a synchronous function.\n"
"The downstream receives the result of the function (or a failure if the transformation failed)."
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "transformToUni"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "`onItem().transformToUni(Function<I, Uni<O>> function);`"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "Transform the event into another event using an asynchronous function. The downstream receives the item emitted by the produced Uni (or a failure if the transformation failed). If the produced Uni emits a failure, that failure is passed to the downstream."
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "invoke"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "`onItem().invoke(Consumer<I> consumer)`"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "Invokes the synchronous consumer. This is particularly convenient to execute side effects actions. The downstream receives the original event, or a failure if the consumer throws an exception"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "call"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "`onItem().call(Function<I, Uni<?>>)`"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "Invokes the asynchronous function. This is particularly convenient to execute asynchronous side effect actions.The downstream receives the original event, or a failure if the consumer throws an exception or if the produced Uni emits a failure."
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "fail"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "`onItem().failWith(Function<I, Throwable>)`"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "Emits a failure when it receives the event."
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "complete (Multi only)"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "`onItem().complete()`"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "Emits the completion event when it receives the event."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "Other patterns"
msgstr ""

#: _versions/3.2/guides/mutiny-primer.adoc
msgid ""
"Mutiny provides lots of other features.\n"
"Head over to the https://smallrye.io/smallrye-mutiny[Mutiny documentation] to see many more examples, including the whole list of events and how to handle them."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/mutiny-primer.adoc
msgid "Some frequently asked guides are the following:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/mutiny-primer.adoc
msgid "merge vs. concatenation - https://smallrye.io/smallrye-mutiny/latest/guides/merging-and-concatenating-streams/"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/mutiny-primer.adoc
msgid "controlling the emission thread - https://smallrye.io/smallrye-mutiny/latest/guides/emit-on-vs-run-subscription-on/"
msgstr ""

#: _versions/3.2/guides/mutiny-primer.adoc
msgid "explicit blocking  - https://smallrye.io/smallrye-mutiny/latest/guides/imperative-to-reactive/"
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "Shortcuts"
msgstr ""

#: _versions/3.2/guides/mutiny-primer.adoc
msgid ""
"When using Uni, having to write `onItem()` can be cumbersome.\n"
"Fortunately, Mutiny provides a set of shortcut to make your code more concise:"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "Shortcut"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "Equivalent"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "`uni.map(x -> y)`"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "`uni.onItem().transform(x -> y)`"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "`uni.flatMap(x -> uni2)`"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "`uni.onItem().transformToUni(x -> uni2)`"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "`uni.chain(x -> uni2)`"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "`uni.invoke(x -> System.out.println(x))`"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "`uni.onItem().invoke(x -> System.out.println(x))`"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "`uni.call(x -> uni2)`"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "`uni.onItem().call(x -> uni2)`"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "`uni.eventually\\(() -> System.out.println(\"eventually\"))`"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "`uni.onItemOrFailure().invoke\\((ignoredItem, ignoredException) -> System.out.println(\"eventually\"))`"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "`uni.eventually(() -> uni2)`"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "`uni.onItemOrFailure().call((ignoredItem, ignoredException) -> uni2)`"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "`uni.replaceWith(x)`"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "`uni.onItem().transform(ignored -> x)`"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "`uni.replaceWith(uni2)`"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "`uni.onItem().transformToUni(ignored -> uni2)`"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "`uni.replaceIfNullWith(x)`"
msgstr ""

#. type: Table
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "`uni.onItem().ifNull().continueWith(x)`"
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "Reactive Streams"
msgstr ""

#: _versions/3.2/guides/mutiny-primer.adoc
msgid ""
"Mutiny uses https://www.reactive-streams.org/[Reactive Streams].\n"
"`Multi` implements `Publisher` and enforces the back-pressure protocol.\n"
"Emissions are constrained by the request emitted from the downstream subscribers.\n"
"Thus, it does not overload the subscribers.\n"
"Note that in some cases, you can’t follow this protocol (because the Multi emits events that can’t be controlled, such as time, or measures sensors).\n"
"In this case, Mutiny provides a way to control the overflow using `onOverflow()`."
msgstr ""

#: _versions/3.2/guides/mutiny-primer.adoc
msgid ""
"`Uni` does not implement Reactive Streams `Publisher`.\n"
"A `Uni` can only emit one event, so subscribing to the `Uni` is enough to express your intent to use the result and does not need the request protocol ceremony."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "Mutiny and Vert.x"
msgstr ""

#: _versions/3.2/guides/mutiny-primer.adoc
msgid ""
"Vert.x is a toolkit to build reactive applications and systems.\n"
"It provides a huge ecosystem of libraries following the reactive principles (i.e., non-blocking and asynchronous).\n"
"Vert.x is an essential part of Quarkus, as it provides its reactive capabilities."
msgstr ""

#: _versions/3.2/guides/mutiny-primer.adoc
msgid ""
"In addition, the whole Vert.x API can be used with Quarkus.\n"
"To provide a cohesive experience, the Vert.x API is also available using a Mutiny variant, i.e., returns Uni and Multi."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/mutiny-primer.adoc
msgid "More details about this API can be found on: https://quarkus.io/blog/mutiny-vertx/."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/mutiny-primer.adoc
#, no-wrap
msgid "Mutiny Integration in Quarkus"
msgstr ""

#: _versions/3.2/guides/mutiny-primer.adoc
msgid ""
"The integration of Mutiny in Quarkus goes beyond just the library.\n"
"Mutiny exposes hooks that allow Quarkus and Mutiny to be closely integrated:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/mutiny-primer.adoc
msgid "Calling `await` or `toIterable` would fail if you are running on an I/O thread, preventing blocking the I/O thread;"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/mutiny-primer.adoc
msgid "The `log()` operator use the Quarkus logger;"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/mutiny-primer.adoc
msgid "The default Mutiny thread pool is the Quarkus worker thread pool;"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/mutiny-primer.adoc
msgid "Context Propagation is enabled by default when using Mutiny Uni and Multi"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/mutiny-primer.adoc
msgid "More details about the infrastructure integration can be found on https://smallrye.io/smallrye-mutiny/latest/guides/framework-integration/."
msgstr ""
