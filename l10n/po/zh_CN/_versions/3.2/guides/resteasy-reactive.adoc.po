# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-11-17 20:12+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Writing REST Services with RESTEasy Reactive"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "This guide explains how to write REST Services with RESTEasy Reactive in Quarkus."
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"This is the reference guide for RESTEasy Reactive.\n"
"For a more lightweight introduction, please refer to the xref:rest-json.adoc[Writing JSON REST services guides]."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "What is RESTEasy Reactive?"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"RESTEasy Reactive is a new link:{jaxrsspec}[Jakarta REST (formerly known as JAX-RS)]\n"
"implementation written from the ground up to work on our\n"
"common https://vertx.io/[Vert.x] layer and is thus fully reactive, while also being very tightly integrated with\n"
"Quarkus and consequently moving a lot of work to build time."
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"You should be able to use it in place of any Jakarta REST implementation, but on top of that it has\n"
"great performance for both blocking and non-blocking endpoints, and a lot of new features on top\n"
"of what Jakarta REST provides."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Writing endpoints"
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Getting started"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Add the following import to your build file:"
msgstr ""

#. type: Block title
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "You can now write your first endpoint in the `org.acme.rest.Endpoint` class:"
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Terminology"
msgstr ""

#. type: Labeled list
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "REST"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "https://en.wikipedia.org/wiki/Representational_state_transfer[REpresentational State Transfer]"
msgstr ""

#. type: Labeled list
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Endpoint"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Java method which is called to serve a REST call"
msgstr ""

#. type: Labeled list
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "URL / URI (Uniform Resource Locator / Identifier)"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Used to identify the location of REST resources (https://tools.ietf.org/html/rfc7230#section-2.7[specification])"
msgstr ""

#. type: Labeled list
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Resource"
msgstr "资源"

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Represents your domain object. This is what your API serves and modifies. Also called an `entity` in Jakarta REST."
msgstr ""

#. type: Labeled list
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Representation"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "How your resource is represented on the wire, can vary depending on content types"
msgstr ""

#. type: Labeled list
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Content type"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Designates a particular representation (also called a media type), for example `text/plain` or `application/json`"
msgstr ""

#. type: Labeled list
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "HTTP"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Underlying wire protocol for routing REST calls (see https://tools.ietf.org/html/rfc7230[HTTP specifications])"
msgstr ""

#. type: Labeled list
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "HTTP request"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "the request part of the HTTP call, consisting of an HTTP method, a target URI, headers and an optional message body"
msgstr ""

#. type: Labeled list
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "HTTP response"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "the response part of the HTTP call, consisting of an HTTP response status, headers and an optional message body"
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Declaring endpoints: URI mapping"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"Any class annotated with a link:{jaxrsapi}/jakarta/ws/rs/Path.html[`@Path`] annotation can have its methods exposed as REST endpoints,\n"
"provided they have an HTTP method annotation (see below)."
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"That link:{jaxrsapi}/jakarta/ws/rs/Path.html[`@Path`] annotation defines the URI prefix under which those methods will be exposed. It can\n"
"be empty, or contain a prefix such as `rest` or `rest/V1`."
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"Each exposed endpoint method can in turn have another link:{jaxrsapi}/jakarta/ws/rs/Path.html[`@Path`] annotation which adds to its containing\n"
"class annotation. For example, this defines a `rest/hello` endpoint:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "See xref:uri-parameters[URI parameters] for more information about URI mapping."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "You can set the root path for all rest endpoints using the `@ApplicationPath` annotation, as shown below."
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"This will cause all rest endpoints to be resolve relative to `/api`, so the endpoint above with `@Path(\"rest\")` would\n"
"be accessible at `/api/rest/`. You can also set the `quarkus.resteasy-reactive.path` build time property to set the root path if you\n"
"don't want to use an annotation."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Declaring endpoints: HTTP methods"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"Each endpoint method must be annotated with one of the following annotations, which defines which HTTP\n"
"method will be mapped to the method:"
msgstr ""

#. type: Block title
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "HTTP method annotations"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Annotation"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Usage"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{jaxrsapi}/jakarta/ws/rs/GET.html[`@GET`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Obtain a resource representation, should not modify state, link:{httpspec}#section-4.2.2[idempotent] (link:{httpspec}#section-4.3.1[HTTP docs])"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{jaxrsapi}/jakarta/ws/rs/HEAD.html[`@HEAD`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Obtain metadata about a resource, similar to `GET` with no body (link:{httpspec}#section-4.3.2[HTTP docs])"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{jaxrsapi}/jakarta/ws/rs/POST.html[`@POST`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Create a resource and obtain a link to it (link:{httpspec}#section-4.3.3[HTTP docs])"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{jaxrsapi}/jakarta/ws/rs/PUT.html[`@PUT`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Replace a resource or create one, should be link:{httpspec}#section-4.2.2[idempotent] (link:{httpspec}#section-4.3.4[HTTP docs])"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{jaxrsapi}/jakarta/ws/rs/DELETE.html[`@DELETE`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Delete an existing resource, link:{httpspec}#section-4.2.2[idempotent]  (link:{httpspec}#section-4.3.5[HTTP docs])"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{jaxrsapi}/jakarta/ws/rs/OPTIONS.html[`@OPTIONS`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Obtain information about a resource, link:{httpspec}#section-4.2.2[idempotent] (link:{httpspec}#section-4.3.7[HTTP docs])"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{jaxrsapi}/jakarta/ws/rs/PATCH.html[`@PATCH`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Update a resource, or create one, not link:{httpspec}#section-4.2.2[idempotent] (https://tools.ietf.org/html/rfc5789#section-2[HTTP docs])"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"You can also declare other HTTP methods by declaring them as an annotation with the\n"
"link:{jaxrsapi}/jakarta/ws/rs/HttpMethod.html[`@HttpMethod`] annotation:"
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Declaring endpoints: representation / content types"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"Each endpoint method may consume or produce specific resource representations, which are indicated by\n"
"the HTTP link:{httpspec}#section-3.1.1.5[`Content-Type`] header, which in turn contains\n"
"link:{httpspec}#section-3.1.1.1[MIME (Media Type)] values, such as the following:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "`text/plain` which is the default for any endpoint returning a `String`."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "`text/html` for HTML (such as with xref:qute.adoc[Qute templating])"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "`application/json` for a xref:json[JSON REST endpoint]"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "`text/*` which is a sub-type wildcard for any text media type"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "`\\*/*` which is a wildcard for any media type"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"You may annotate your endpoint class with the link:{jaxrsapi}/jakarta/ws/rs/Produces.html[`@Produces`]\n"
"or link:{jaxrsapi}/jakarta/ws/rs/Consumes.html[`@Consumes`] annotations, which\n"
"allow you to specify one or more media types that your endpoint may accept as HTTP request body\n"
"or produce as HTTP response body. Those class annotations apply to each method."
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"Any method may also be annotated with the link:{jaxrsapi}/jakarta/ws/rs/Produces.html[`@Produces`]\n"
"or link:{jaxrsapi}/jakarta/ws/rs/Consumes.html[`@Consumes`] annotations, in which\n"
"case they override any eventual class annotation."
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"The link:{jaxrsapi}/jakarta/ws/rs/core/MediaType.html[`MediaType`] class has many constants you\n"
"can use to point to specific pre-defined media types."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "See the xref:negotiation[Negotiation] section for more information."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Accessing request parameters"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"don't forget to configure your compiler to generate parameter name information with `-parameters` (javac)\n"
"or `<parameters>` or `<maven.compiler.parameters>` (https://maven.apache.org/plugins/maven-compiler-plugin/compile-mojo.html#parameters[Maven])."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "The following HTTP request elements may be obtained by your endpoint method:"
msgstr ""

#. type: Block title
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "HTTP request parameter annotations"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "HTTP element"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "[[path-parameter]]Path parameter"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestPath.html[`@RestPath`] (or nothing)"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid ""
"URI template parameter (simplified version of the https://tools.ietf.org/html/rfc6570[URI Template specification]),\n"
"see xref:uri-parameters[URI parameters] for more information."
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Query parameter"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestQuery.html[`@RestQuery`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "The value of a https://tools.ietf.org/html/rfc3986#section-3.4[URI query parameter]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Header"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestHeader.html[`@RestHeader`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "The value of an https://tools.ietf.org/html/rfc7230#section-3.2[HTTP header]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Cookie"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestCookie.html[`@RestCookie`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "The value of an https://tools.ietf.org/html/rfc6265#section-4.2[HTTP cookie]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Form parameter"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestForm.html[`@RestForm`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "The value of an https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST[HTTP URL-encoded FORM]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Matrix parameter"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestMatrix.html[`@RestMatrix`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "The value of an https://tools.ietf.org/html/rfc3986#section-3.3[URI path segment parameter]"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"For each of those annotations, you may specify the name of the element they refer to,\n"
"otherwise, they will use the name of the annotated method parameter."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "If a client made the following HTTP call:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Then you could obtain all the various parameters with this endpoint method:"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"The link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestPath.html[`@RestPath`]\n"
"annotation is optional: any parameter whose name matches an existing URI\n"
"template variable will be automatically assumed to have link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestPath.html[`@RestPath`]."
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"You can also use any of the Jakarta REST annotations link:{jaxrsapi}/jakarta/ws/rs/PathParam.html[`@PathParam`],\n"
"link:{jaxrsapi}/jakarta/ws/rs/QueryParam.html[`@QueryParam`],\n"
"link:{jaxrsapi}/jakarta/ws/rs/HeaderParam.html[`@HeaderParam`],\n"
"link:{jaxrsapi}/jakarta/ws/rs/CookieParam.html[`@CookieParam`],\n"
"link:{jaxrsapi}/jakarta/ws/rs/FormParam.html[`@FormParam`] or\n"
"link:{jaxrsapi}/jakarta/ws/rs/MatrixParam.html[`@MatrixParam`] for this,\n"
"but they require you to specify the parameter name."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "See xref:parameter-mapping[Parameter mapping] for more advanced use-cases."
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"When an exception occurs in RESTEasy Reactive request parameter handling code, the exception is not printed by default to the log (for security reasons).\n"
"This can sometimes make it hard to understand why certain HTTP status codes are returned (as the Jakarta REST mandates the use of non-intuitive error codes in various cases).\n"
"In such cases, users are encouraged to set the logging level for the `org.jboss.resteasy.reactive.server.handlers.ParameterHandler` category to `DEBUG` like so:"
msgstr ""

#. type: Title ====
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Grouping parameters in a custom class"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"You can group your request parameters in a container class instead of declaring them as method parameters to you endpoint,\n"
"so we can rewrite the previous example like this:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "`BeanParam` is required to comply with the Jakarta REST specification so that libraries like OpenAPI can introspect the parameters."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Declaring URI parameters"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"You can declare URI parameters and use regular expressions in your path, so for instance\n"
"the following endpoint will serve requests for `/hello/stef/23` and `/hello` but not\n"
"`/hello/stef/0x23`:"
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Accessing the request body"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"Any method parameter with no annotation will receive the method body.footnote:[Unless it is a\n"
"xref:path-parameter[URI template parameter] or a xref:context-objects[context object].], after it has been mapped from\n"
"its HTTP representation to the Java type of the parameter."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "The following parameter types will be supported out of the box:"
msgstr ""

#. type: Block title
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Request body parameter types"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Type"
msgstr "类型"

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{jdkapi}/java/io/File.html[`File`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "The entire request body in a temporary file"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "`byte[]`"
msgstr "`byte[]` "

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "The entire request body, not decoded"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "`char[]`"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "The entire request body, decoded"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{jdkapi}/java/lang/String.html[`String`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{jdkapi}/java/io/InputStream.html[`InputStream`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "The request body in a blocking stream"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{jdkapi}/java/io/Reader.html[`Reader`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "All Java primitives and their wrapper classes"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Java primitive types"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{jdkapi}/java/math/BigDecimal.html[`BigDecimal`], link:{jdkapi}/java/math/BigInteger.html[`BigInteger`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Large integers and decimals."
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid ""
"link:{jsonpapi}/jakarta/json/JsonArray.html[`JsonArray`], link:{jsonpapi}/jakarta/json/JsonObject.html[`JsonObject`],\n"
"link:{jsonpapi}/jakarta/json/JsonStructure.html[`JsonStructure`], link:{jsonpapi}/jakarta/json/JsonValue.html[`JsonValue`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "JSON value types"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{vertxapi}io/vertx/core/buffer/Buffer.html[`Buffer`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Vert.x Buffer"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "any other type"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Will be xref:json[mapped from JSON to that type]"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "You can add support for more xref:readers-writers[body parameter types]."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Handling Multipart Form data"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"To handle HTTP requests that have `multipart/form-data` as their content type, you can use the regular\n"
"link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestForm.html[`@RestForm`] annotation, but we have special types\n"
"that allow you to access the parts as files or as entities.\n"
"Let us look at an example of its use."
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"Assuming an HTTP request containing a file upload, a JSON entity and a form value containing a string description, we could write\n"
"the following endpoint:"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"The `description` parameter will contain the data contained in the part of HTTP request called `description` (because\n"
"link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestForm.html[`@RestForm`] does not define a value, the field name is used),\n"
"while the `file` parameter will contain data about the uploaded file in the `image` part of HTTP request, and\n"
"the `person` parameter will read the `Person` entity using the `JSON` xref:json[body reader]."
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"The size of every part in a multipart request must conform to the value of `quarkus.http.limits.max-form-attribute-size`, for which the default is 2048 bytes.\n"
"Any request with a part of a size exceeding this configuration will result in HTTP status code 413."
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/multipart/FileUpload.html[`FileUpload`]\n"
"provides access to various metadata of the uploaded file. If however all you need is a handle to the uploaded file, `java.nio.file.Path` or `java.io.File` could be used."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "If you need access to all uploaded files for all parts regardless of their names, you can do it with `@RestForm(FileUpload.ALL) List<FileUpload>`."
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/PartType.html[`@PartType`] is used to aid\n"
"in deserialization of the corresponding part of the request into the desired Java type. It is only required if\n"
"you need to use a xref:readers-writers[special body parameter type] for that particular parameter."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Just like for any other request parameter type, you can also group them into a xref:parameter-grouping[container class]."
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"When handling file uploads, it is very important to move the file to permanent storage (like a database, a dedicated file system or a cloud storage) in your code that handles the POJO.\n"
"Otherwise, the file will no longer be accessible when the request terminates.\n"
"Moreover, if `quarkus.http.body.delete-uploaded-files-on-end` is set to true, Quarkus will delete the uploaded file when the HTTP response is sent. If the setting is disabled,\n"
"the file will reside on the file system of the server (in the directory defined by the `quarkus.http.body.uploads-directory` configuration option), but as the uploaded files are saved\n"
"with a UUID file name and no additional metadata is saved, these files are essentially a random dump of files."
msgstr ""

#. type: delimited block =
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "When a Resource method needs to handle various types of multipart requests, then the `org.jboss.resteasy.reactive.server.multipart.MultipartFormDataInput` method type can be used as provides access to all the parts of the request."
msgstr ""

#. type: delimited block =
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "The following code shows a simple example where we iterate over the parts and return a list of aggregated data:"
msgstr ""

#. type: Title ====
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Handling malformed input"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"As part of reading the multipart body, RESTEasy Reactive invokes the proper MessageBodyReaderlink:{jaxrsapi}/jakarta/ws/rs/ext/MessageBodyReader.html[`MessageBodyReader`] for each part of the request.\n"
"If an `IOException` occurs for one of these parts (for example if Jackson was unable to deserialize a JSON part), then a `org.jboss.resteasy.reactive.server.multipart.MultipartPartReadingException` is thrown.\n"
"If this exception is not handled by the application as mentioned in xref:exception-mapping[Exception mapping], an HTTP 400 response is returned by default."
msgstr ""

#. type: Title ====
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Multipart output"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"Similarly, RESTEasy Reactive can produce Multipart Form data to allow users download files from the server. For example, we could write a POJO\n"
"that will hold the information we want to expose as:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "And then expose this POJO via a Resource like so:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Additionally, you can also manually append the parts of the form using the class `MultipartFormDataOutput` as:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "This last approach allows you adding extra headers to the output part."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "For the time being, returning Multipart data is limited to be blocking endpoints."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Returning a response body"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"In order to return an HTTP response, simply return the resource you want from your method. The method\n"
"return type and its optional content type will be used to decide how to serialise it to the HTTP\n"
"response (see the xref:negotiation[Negotiation] section for more advanced information)."
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"You can return any of the pre-defined types that you can read from the xref:resource-types[HTTP response],\n"
"and any other type will be mapped xref:json[from that type to JSON]."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "In addition, the following return types are also supported:"
msgstr ""

#. type: Block title
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Additional response body parameter types"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{jdkapi}/java/nio/file/Path.html[`Path`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "The contents of the file specified by the given path"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/PathPart.html[`PathPart`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "The partial contents of the file specified by the given path"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/FilePart.html[`FilePart`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "The partial contents of a file"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{vertxapi}/io/vertx/core/file/AsyncFile.html[`AsyncFile`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Vert.x AsyncFile, which can be in full, or partial"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"Alternately, you can also return a xref:reactive[reactive type] such as link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni`],\n"
"link:{mutinyapi}/io/smallrye/mutiny/Multi.html[`Multi`] or\n"
"link:{jdkapi}/java/util/concurrent/CompletionStage.html[`CompletionStage`]\n"
"that resolve to one of the mentioned return types."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Setting other response properties"
msgstr ""

#. type: Title ====
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Manually setting the response"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"If you need to set more properties on the HTTP response than just the body, such as the status code\n"
"or headers, you can make your method return `org.jboss.resteasy.reactive.RestResponse` from a resource method.\n"
"An example of this could look like:"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"You can also use the Jakarta REST type link:{jaxrsapi}/jakarta/ws/rs/core/Response.html[`Response`] but it is\n"
"not strongly typed to your entity."
msgstr ""

#. type: Title ====
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Using annotations"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"Alternatively, if you only need to set the status code and / or HTTP headers with static values, you can use `@org.jboss.resteasy.reactive.ResponseStatus` and /or `ResponseHeader` respectively.\n"
"An example of this could look like:"
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Redirect support"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"When handling a `@POST`, `@PUT` or `@DELETE` endpoint, it is common practice to redirect to a `@GET` endpoint after the action has been performed to allow the user to reload the page without triggering the action a second time.\n"
"There are multiple ways to achieve this."
msgstr ""

#. type: Title ====
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Using RestResponse"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Using `RestResponse` as the return type while making sure the proper redirection URI is created can be done as in the following example:"
msgstr ""

#. type: Title ====
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Using RedirectException"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Users can also throw `jakarta.ws.rs.RedirectionException` from a method body to get RESTEasy Reactive to perform the desired redirect."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Async/reactive support"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"If your endpoint method needs to accomplish an asynchronous or reactive task before\n"
"being able to answer, you can declare your method to return the\n"
"link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni`] type (from https://smallrye.io/smallrye-mutiny/[Mutiny]), in which\n"
"case the current HTTP request will be automatically suspended after your method, until\n"
"the returned link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni`] instance resolves to a value,\n"
"which will be mapped to a response exactly according to the previously described rules:"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"This allows you to not block the event-loop thread while the book is being fetched from the\n"
"database, and allows Quarkus to serve more requests until your book is ready to\n"
"be sent to the client and terminate this request.\n"
"See xref:execution-model[Execution Model documentation] for more information."
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"The link:{jdkapi}/java/util/concurrent/CompletionStage.html[`CompletionStage`] return\n"
"type is also supported."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Streaming support"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"If you want to stream your response element by element, you can make your endpoint method return a\n"
"link:{mutinyapi}/io/smallrye/mutiny/Multi.html[`Multi`] type (from https://smallrye.io/smallrye-mutiny/[Mutiny]).\n"
"This is especially useful for streaming text or binary data."
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"This example, using https://github.com/quarkiverse/quarkus-reactive-messaging-http[Reactive Messaging HTTP] shows how to stream\n"
"text data:"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"Response filters are **not** invoked on streamed responses, because they would give a false\n"
"impression that you can set headers or HTTP status codes, which is not true after the initial\n"
"response.\n"
"Exception mappers are also not invoked because part of the response may already have been written."
msgstr ""

#. type: Title ====
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Customizing headers and status"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "If you need to set custom HTTP headers and / or the HTTP response, then you can return `org.jboss.resteasy.reactive.RestMulti` instead, like this:"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"In more advanced cases where the headers and / or status can only be obtained from the results of an async call, the `RestMulti.fromUniResponse` needs to be used.\n"
"Here is an example of such a use case:"
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Server-Sent Event (SSE) support"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"If you want to stream JSON objects in your response, you can use\n"
"https://html.spec.whatwg.org/multipage/server-sent-events.html[Server-Sent Events]\n"
"by just annotating your endpoint method with\n"
"link:{jaxrsapi}/jakarta/ws/rs/Produces.html[`@Produces(MediaType.SERVER_SENT_EVENTS)`]\n"
"and specifying that each element should be xref:json[serialised to JSON] with\n"
"`@RestStreamElementType(MediaType.APPLICATION_JSON)`."
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"Sometimes it's useful to create a customized SSE message, for example if you need to specify the `event` field of a SSE message to distinguish various event types.\n"
"A resource method may return `Multi<jakarta.ws.rs.sse.OutboundSseEvent>` and an injected `jakarta.ws.rs.sse.Sse` can be used to create `OutboundSseEvent` instances."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Inject the server-side entry point for creating ``OutboundSseEvent``s."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Create a new outbound event builder."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Set the event name, i.e. the value of the `event` field of a SSE message."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Set the data, i.e. the value of the `data` field of a SSE message."
msgstr ""

#. type: delimited block =
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Manipulation of the returned HTTP headers and status code is not possible via `RestMulti.fromUniResponse` because when returning SSE responses the headers and status code cannot be delayed until the response becomes available."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Controlling HTTP Caching features"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"RESTEasy Reactive provides the link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/Cache.html[`@Cache`]\n"
"and link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/NoCache.html[`@NoCache`] annotations to facilitate\n"
"handling HTTP caching semantics, i.e. setting the 'Cache-Control' HTTP header."
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"These annotations can be placed either on a Resource Method or a Resource Class (in which case it applies to all Resource Methods of the class that do *not* contain the same annotation) and allow users\n"
"to return domain objects and not have to deal with building up the `Cache-Control` HTTP header explicitly."
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"While link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/Cache.html[`@Cache`]\n"
"builds a complex `Cache-Control` header, link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/NoCache.html[`@NoCache`]\n"
"is a simplified notation to say that you don't want anything cached; i.e. `Cache-Control: nocache`."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "More information on the `Cache-Control` header and be found in link:https://datatracker.ietf.org/doc/html/rfc7234[RFC 7234]"
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Accessing context objects"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"There are a number of contextual objects that the framework will give you, if your endpoint\n"
"method takes parameters of the following type:"
msgstr ""

#. type: Block title
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Contextual objects"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{jaxrsapi}/jakarta/ws/rs/core/HttpHeaders.html[`HttpHeaders`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "All the request headers"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{jaxrsapi}/jakarta/ws/rs/container/ResourceInfo.html[`ResourceInfo`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Information about the current endpoint method and class (requires reflection)"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{jaxrsapi}/jakarta/ws/rs/core/SecurityContext.html[`SecurityContext`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Access to the current user and roles"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{resteasy-reactive-api}/org/jboss/resteasy/reactive/server/SimpleResourceInfo.html[`SimpleResourceInfo`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Information about the current endpoint method and class (no reflection required)"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{jaxrsapi}/jakarta/ws/rs/core/UriInfo.html[`UriInfo`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Provides information about the current endpoint and application URI"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{jaxrsapi}/jakarta/ws/rs/core/Application.html[`Application`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Advanced: Current Jakarta REST application class"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{jaxrsapi}/jakarta/ws/rs/core/Configuration.html[`Configuration`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Advanced: Configuration about the deployed Jakarta REST application"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{jaxrsapi}/jakarta/ws/rs/ext/Providers.html[`Providers`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Advanced: Runtime access to Jakarta REST providers"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{jaxrsapi}/jakarta/ws/rs/core/Request.html[`Request`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Advanced: Access to the current HTTP method and xref:preconditions[Preconditions]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{jaxrsapi}/jakarta/ws/rs/core/ResourceContext.html[`ResourceContext`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Advanced: access to instances of endpoints"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{resteasy-reactive-api}/org/jboss/resteasy/reactive/server/spi/ServerRequestContext.html[`ServerRequestContext`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Advanced: RESTEasy Reactive access to the current request/response"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{jaxrsapi}/jakarta/ws/rs/sse/Sse.html[`Sse`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Advanced: Complex SSE use-cases"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{vertxapi}/io/vertx/core/http/HttpServerRequest.html[`HttpServerRequest`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Advanced: Vert.x HTTP Request"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{vertxapi}/io/vertx/core/http/HttpServerResponse.html[`HttpServerResponse`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Advanced: Vert.x HTTP Response"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "For example, here is how you can return the name of the currently logged-in user:"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"You can also inject those context objects using\n"
"{injectapi}/jakarta/inject/Inject.html[`@Inject`] on fields of the same\n"
"type:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Or even on your endpoint constructor:"
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "JSON serialisation"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Instead of importing `io.quarkus:quarkus-resteasy-reactive`, you can import either of the following modules to get support for JSON:"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "GAV"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "`io.quarkus:quarkus-resteasy-reactive-jackson`"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "https://github.com/FasterXML/jackson[Jackson support]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "`io.quarkus:quarkus-resteasy-reactive-jsonb`"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "https://eclipse-ee4j.github.io/jsonb-api/[JSON-B support]"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"In both cases, importing those modules will allow HTTP message bodies to be read from JSON\n"
"and serialised to JSON, for xref:resource-types[all the types not already registered with a more specific\n"
"serialisation]."
msgstr ""

#. type: Title ====
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Advanced Jackson-specific features"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "When using the `quarkus-resteasy-reactive-jackson` extension there are some advanced features that RESTEasy Reactive supports."
msgstr ""

#. type: Title =====
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Secure serialization"
msgstr "安全序列化"

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"When used with Jackson to perform JSON serialization, RESTEasy Reactive provides the ability to limit the set of fields that are serialized based on the roles of the current user.\n"
"This is achieved by simply annotating the fields (or getters) of the POJO being returned with `@io.quarkus.resteasy.reactive.jackson.SecureField`."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "A simple example could be the following:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Assume we have a POJO named `Person` which looks like so:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "A very simple Jakarta REST Resource that uses `Person` could be:"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"Assuming security has been set up for the application (see our xref:security-overview.adoc[guide] for more details), when a user with the `admin` role\n"
"performs an HTTP GET on `/person/1` they will receive:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "as the response."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Any user however that does not have the `admin` role will receive:"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"No additional configuration needs to be applied for this secure serialization to take place. However, users can use the `@io.quarkus.resteasy.reactive.jackson.EnableSecureSerialization` and `@io.quarkus.resteasy.reactive.jackson.DisableSecureSerialization`\n"
"annotation to opt in or out for specific Jakarta REST Resource classes or methods."
msgstr ""

#. type: Title =====
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "@JsonView support"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"Jakarta REST methods can be annotated with https://fasterxml.github.io/jackson-annotations/javadoc/2.10/com/fasterxml/jackson/annotation/JsonView.html[@JsonView]\n"
"in order to customize the serialization of the returned POJO, on a per method-basis. This is best explained with an example."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "A typical use of `@JsonView` is to hide certain fields on certain methods. In that vein, let's define two views:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Let's assume we have the `User` POJO on which we want to hide some field during serialization. A simple example of this is:"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"Depending on the Jakarta REST method that returns this user, we might want to exclude the `id` field from serialization.\n"
"For example, you might want an insecure method to not expose this field.\n"
"The way we can achieve that in RESTEasy Reactive is shown in the following example:"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"When the result the `userPublic` method is serialized, the `id` field will not be contained in the response as the `Public` view does not include it.\n"
"The result of `userPrivate` however will include the `id` as expected when serialized."
msgstr ""

#. type: Title =====
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Completely customized per method serialization"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"There are times when you need to completely customize the serialization of a POJO on a per Jakarta REST method basis. For such use cases, the `@io.quarkus.resteasy.reactive.jackson.CustomSerialization` annotation\n"
"is a great tool, as it allows you to configure a per-method `com.fasterxml.jackson.databind.ObjectWriter` which can be configured at will."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Here is an example use case:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "where `UnquotedFields` is a `BiFunction` defined as so:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Essentially what this class does is force Jackson to not include quotes in the field names."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "It is important to note that this customization is only performed for the serialization of the Jakarta REST methods that use `@CustomSerialization(UnquotedFields.class)`."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "XML serialisation"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "To enable XML support, add the `quarkus-resteasy-reactive-jaxb` extension to your project."
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "`io.quarkus:quarkus-resteasy-reactive-jaxb`"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "https://javaee.github.io/jaxb-v2/[XML support]"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"Importing this module will allow HTTP message bodies to be read from XML\n"
"and serialised to XML, for xref:resource-types[all the types not already registered with a more specific\n"
"serialisation]."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "The JAXB Resteasy Reactive extension will automatically detect the classes that are used in the resources and require JAXB serialization. Then, it will register these classes into the default `JAXBContext` which is internally used by the JAXB message reader and writer."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "However, in some situations, these classes cause the `JAXBContext` to fail: for example, when you're using the same class name in different java packages. In these cases, the application will fail at build time and print the JAXB exception that caused the issue, so you can properly fix it. Alternatively, you can also exclude the classes that cause the issue by using the property `quarkus.jaxb.exclude-classes`. When excluding classes that are required by any resource, the JAXB resteasy reactive extension will create and cache a custom `JAXBContext` that will include the excluded class, causing a minimal performance degradance."
msgstr ""

#. type: delimited block =
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "The property `quarkus.jaxb.exclude-classes` accepts a comma separated list of fully qualified class names, for example: `quarkus.jaxb.exclude-classes=org.acme.one.Model,org.acme.two.Model`."
msgstr ""

#. type: Title ====
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Advanced JAXB-specific features"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "When using the `quarkus-resteasy-reactive-jaxb` extension there are some advanced features that RESTEasy Reactive supports."
msgstr ""

#. type: Title =====
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Inject JAXB components"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "The JAXB resteasy reactive extension will serialize and unserialize requests and responses transparently for users. However, if you need finer grain control over JAXB components, you can inject either the JAXBContext, Marshaller, or Unmarshaller components into your beans:"
msgstr ""

#. type: delimited block =
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Quarkus will automatically find all the classes annotated with `@XmlRootElement` and then bound them to the JAXB context."
msgstr ""

#. type: Title =====
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Customize the JAXB configuration"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "To customize the JAXB configuration for either the JAXB context, and/or the Marshaller/Unmarshaller components, the suggested approach is to define a CDI bean of type `io.quarkus.jaxb.runtime.JaxbContextCustomizer`."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "An example where a custom module needs to be registered would look like so:"
msgstr "需要注册自定义模块的示例如下所示："

#. type: delimited block =
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "It's not necessary to implement all three methods, but only the want you need."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Alternatively, you can provide your own `JAXBContext` bean by doing:"
msgstr ""

#. type: delimited block =
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Note that if you provide your custom JAXB context instance, you will need to register the classes you want to use for the XML serialization. This means that Quarkus will not update your custom JAXB context instance with the auto-discovered classes."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Web Links support"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "To enable Web Links support, add the `quarkus-resteasy-reactive-links` extension to your project."
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "`io.quarkus:quarkus-resteasy-reactive-links`"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "https://www.w3.org/wiki/LinkHeader[Web Links support]"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Importing this module will allow injecting web links into the response HTTP headers by just annotating your endpoint resources with the `@InjectRestLinks` annotation. To declare the web links that will be returned, you need to use the `@RestLink` annotation in the linked methods. An example of this could look like:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "When calling the endpoint `/records` which is defined by the method `getAll` within the above resource using curl, you would get the web links header:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "As this resource does not return a single instance of type `Record`, the links for the methods `get`, `update`, and `delete` are not injected. Now, when calling the endpoint `/records/1`, you would get the following web links:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "The `get`, `update`, and `delete` methods use the path param \"id\" and as the field \"id\" exists in the entity type \"Record\", the web link properly populates the value \"1\" in the returned links. In addition to this, we can also generate web links with path params that do not match with any field of the entity type. For example, the following method is using a path param \"text\" and the entity Record does not have any field named \"text\":"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "The generated web link for this resource is `Link: <http://localhost:8080/search/{text}>; rel=\"search records by free text\"`."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Finally, when calling the `delete` resource, you should not see any web links as the method `delete` is not annotated with the `@InjectRestLinks` annotation."
msgstr ""

#. type: Title ====
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Programmatically access to the web links registry"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "You can programmatically have access to the web links registry just by injecting the `RestLinksProvider` bean:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Using this injected bean of type `RestLinksProvider`, you can get the links by type using the method `RestLinksProvider.getTypeLinks` or get the links by a concrete instance using the method `RestLinksProvider.getInstanceLinks`."
msgstr ""

#. type: Title ====
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "JSON Hypertext Application Language (HAL) support"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "The https://tools.ietf.org/id/draft-kelly-json-hal-01.html[HAL] standard is a simple format to represent web links."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "To enable the HAL support, add the `quarkus-hal` extension to your project. Also, as HAL needs JSON support, you need to add either the `quarkus-resteasy-reactive-jsonb` or the `quarkus-resteasy-reactive-jackson` extension."
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "`io.quarkus:quarkus-hal`"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "https://tools.ietf.org/id/draft-kelly-json-hal-01.html[HAL]"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "After adding the extensions, we can now annotate the REST resources to produce the media type `application/hal+json` (or use RestMediaType.APPLICATION_HAL_JSON). For example:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Now, the endpoints `/records` and `/records/{id}` will accept the media type both `json` and `hal+json` to print the records in Hal format."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "For example, if we invoke the `/records` endpoint using curl to return a list of records, the HAL format will look like as follows:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "When we call a resource `/records/1` that returns only one instance, then the output is:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Finally, you can also provide additional HAL links programmatically in your resource just by returning either `HalCollectionWrapper` (to return a list of entities) or `HalEntityWrapper` (to return a single object) as described in the following example:"
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "CORS filter"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"link:https://en.wikipedia.org/wiki/Cross-origin_resource_sharing[Cross-origin resource sharing] (CORS) is a mechanism that\n"
"allows restricted resources on a web page to be requested from another domain outside the domain from which the first resource\n"
"was served."
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"Quarkus comes with a CORS filter at the HTTP layer level.\n"
"Read the xref:http-reference.adoc#cors-filter[HTTP Reference Documentation] to learn\n"
"how to use it."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "More advanced usage"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"Here are some more advanced topics that you may not need to know about initially, but\n"
"could prove useful for more complex use cases."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Execution model, blocking, non-blocking"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "RESTEasy Reactive is implemented using two main thread types:"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"Event-loop threads: which are responsible, among other things, for reading bytes from the HTTP request and\n"
"writing bytes back to the HTTP response"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Worker threads: they are pooled and can be used to offload long-running operations"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"The event-loop threads (also called IO threads) are responsible for actually performing all the IO\n"
"operations in an asynchronous way, and to trigger any listener interested in the completion of those\n"
"IO operations."
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"By default, the thread RESTEasy Reactive will run endpoint methods on depends on the signature of the method.\n"
"If a method returns one of the following types then it is considered non-blocking, and will be run on the IO thread\n"
"by default:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "`io.smallrye.mutiny.Uni`"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "`io.smallrye.mutiny.Multi`"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "`java.util.concurrent.CompletionStage`"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "`org.reactivestreams.Publisher`"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Kotlin `suspended` methods"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"This 'best guess' approach means most operations will run on the correct thread by default.\n"
"If you are writing reactive code, your method will generally return one of these types and will be executed on the IO thread.\n"
"If you are writing blocking code, your methods will usually return the result directly, and these will be run on a worker thread."
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"You can override this behaviour using the\n"
"https://javadoc.io/doc/io.smallrye.common/smallrye-common-annotation/1.5.0/io/smallrye/common/annotation/Blocking.html[`@Blocking`]\n"
"and\n"
"https://javadoc.io/doc/io.smallrye.common/smallrye-common-annotation/1.5.0/io/smallrye/common/annotation/NonBlocking.html[`@NonBlocking`]\n"
"annotations. This can be applied at the method, class or `jakarta.ws.rs.core.Application` level."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "The example below will override the default behaviour and always run on a worker thread, even though it returns a `Uni`."
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"Most of the time, there are ways to achieve the same blocking operations in an asynchronous/reactive\n"
"way, using https://smallrye.io/smallrye-mutiny/[Mutiny], https://hibernate.org/reactive/[Hibernate Reactive]\n"
"or any of the xref:quarkus-reactive-architecture.adoc#quarkus-extensions-enabling-reactive[Quarkus Reactive extensions] for example:"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"If a method or class is annotated with `jakarta.transaction.Transactional` then it will also be treated as a blocking\n"
"method. This is because JTA is a blocking technology, and is generally used with other blocking technology such as\n"
"Hibernate and JDBC. An explicit `@Blocking` or `@NonBlocking` on the class will override this behaviour."
msgstr ""

#. type: Title ====
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Overriding the default behaviour"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"If you want to override the default behavior, you can annotate a `jakarta.ws.rs.core.Application` subclass in your application with `@Blocking` or `@NonBlocking`,\n"
"and this will set the default for every method that does not have an explicit annotation."
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"Behavior can still be overridden on a class or method level by annotating them directly, however,\n"
"all endpoints without an annotation will now follow the default, no matter their method signature."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Exception mapping"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"If your application needs to return non-nominal HTTP codes in error cases, the best is\n"
"to throw exceptions that will result in the proper HTTP response being sent by the\n"
"framework using link:{jaxrsapi}/jakarta/ws/rs/WebApplicationException.html[`WebApplicationException`] or any of its subtypes:"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"If your endpoint method is delegating calls to another service layer which\n"
"does not know of Jakarta REST, you need a way to turn service exceptions to an\n"
"HTTP response, and you can do that using the\n"
"link:{resteasy-reactive-api}/org/jboss/resteasy/reactive/server/ServerExceptionMapper.html[`@ServerExceptionMapper`]\n"
"annotation on a method, with one parameter of the exception type you want to handle, and turning\n"
"that exception into a link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestResponse.html[`RestResponse`] (or a\n"
"link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni<RestResponse<?>>`]):"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"exception mappers defined in REST endpoint classes will only be called if the\n"
"exception is thrown in the same class. If you want to define global exception mappers,\n"
"simply define them outside a REST endpoint class:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "You can also declare link:{jaxrsspec}#exceptionmapper[exception mappers in the Jakarta REST way]."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Your exception mapper may declare any of the following parameter types:"
msgstr ""

#. type: Block title
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Exception mapper parameters"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "An exception type"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Defines the exception type you want to handle"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Any of the xref:context-objects[Context objects]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{jaxrsapi}/jakarta/ws/rs/container/ContainerRequestContext.html[`ContainerRequestContext`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "A context object to access the current request"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "It may declare any of the following return types:"
msgstr ""

#. type: Block title
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Exception mapper return types"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestResponse.html[`RestResponse`] or link:{jaxrsapi}/jakarta/ws/rs/core/Response.html[`Response`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "The response to send to the client when the exception occurs"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni<RestResponse>`] or link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni<Response>`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "An asynchronous response to send to the client when the exception occurs"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"When an exception occurs, RESTEasy Reactive does not log it by default (for security reasons).\n"
"This can sometimes make it hard to understand why certain exception handling code was invoked (or not invoked).\n"
"To make RESTEasy Reactive log the actual exception before an exception mapping code is run the `org.jboss.resteasy.reactive.common.core.AbstractResteasyReactiveContext` log category can be set to `DEBUG` like so:"
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Request or response filters"
msgstr ""

#. type: Title ====
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Via annotations"
msgstr ""

#. type: delimited block =
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "You can declare functions which are invoked in the following phases of the request processing:"
msgstr ""

#. type: delimited block =
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Before the endpoint method is identified: pre-routing request filter"
msgstr ""

#. type: delimited block =
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "After routing, but before the endpoint method is called: normal request filter"
msgstr ""

#. type: delimited block =
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "After the endpoint method is called: response filter"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"These filters allow you to do various things such as examine the request URI,\n"
"HTTP method, influence routing, look or change request headers, abort the request,\n"
"or modify the response."
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"Request filters can be declared with the\n"
"link:{resteasy-reactive-api}/org/jboss/resteasy/reactive/server/ServerRequestFilter.html[`@ServerRequestFilter`]\n"
"annotation:"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"Request filters are usually executed on the same thread that the method that handles the request will be executed.\n"
"That means that if the method servicing the request is annotated with `@Blocking`, then the filters will also be run\n"
"on the worker thread.\n"
"If the method is annotated with `@NonBlocking` (or is not annotated at all), then the filters will also be run\n"
"on the same event-loop thread."
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"If however a filter needs to be run on the event-loop despite the fact that the method servicing the request will be\n"
"run on a worker thread, then `@ServerRequestFilter(nonBlocking=true)` can be used.\n"
"Note however, that these filters need to be run before **any** filter that does not use that setting and would run on a worker thread."
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"Similarly, response filters can be declared with the\n"
"link:{resteasy-reactive-api}/org/jboss/resteasy/reactive/server/ServerResponseFilter.html[`@ServerResponseFilter`]\n"
"annotation:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Such a response filter will also be called for xref:exception-mapping[handled] exceptions."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Your filters may declare any of the following parameter types:"
msgstr ""

#. type: Block title
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Filter parameters"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{jaxrsapi}/jakarta/ws/rs/container/ContainerResponseContext.html[`ContainerResponseContext`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "A context object to access the current response"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{jdkapi}/java/lang/Throwable.html[`Throwable`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Any thrown and xref:exception-mapping[handled] exception, or `null` (only for response filters)."
msgstr ""

#. type: Block title
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Filter return types"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestResponse.html[`RestResponse<?>`] or link:{jaxrsapi}/jakarta/ws/rs/core/Response.html[`Response`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "The response to send to the client instead of continuing the filter chain, or `null` if the filter chain should proceed"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{jdkapi}/java/util/Optional.html[`Optional<RestResponse<?>>`] or link:{jdkapi}/java/util/Optional.html[`Optional<Response>`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "An optional response to send to the client instead of continuing the filter chain, or an empty value if the filter chain should proceed"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni<RestResponse<?>>`] or link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni<Response>`]"
msgstr ""

#. type: Table
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "An asynchronous response to send to the client instead of continuing the filter chain, or `null` if the filter chain should proceed"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "You can restrict the Resource methods for which a filter runs, by using link:{jaxrsapi}/jakarta/ws/rs/NameBinding.html[`@NameBinding`] meta-annotations."
msgstr ""

#. type: Title ====
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "The Jakarta REST way"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "You can also link:{jaxrsspec}#filters[declare request and response filters in the Jakarta REST way]."
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"Both HTTP request and response can be intercepted by providing `ContainerRequestFilter` or `ContainerResponseFilter`\n"
"implementations respectively. These filters are suitable for processing the metadata associated with a message: HTTP\n"
"headers, query parameters, media type, and other metadata. They also have the capability to abort the request\n"
"processing, for instance when the user does not have the permissions to access the endpoint."
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"Let's use `ContainerRequestFilter` to add logging capability to our service. We can do that by implementing\n"
"`ContainerRequestFilter` and annotating it with the `@Provider` annotation:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Now, whenever a REST method is invoked, the request will be logged into the console:"
msgstr ""

#. type: delimited block =
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "A `ContainerResponseFilter` will also be called for xref:exception-mapping[handled] exceptions."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Readers and Writers: mapping entities and HTTP bodies"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"Whenever your endpoint methods return an object (of when they return a\n"
"link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestResponse.html[`RestResponse<?>`]\n"
"or link:{jaxrsapi}/jakarta/ws/rs/core/Response.html[`Response`] with\n"
"an entity), RESTEasy Reactive will look for a way to map that into an HTTP response body."
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"Similarly, whenever your endpoint method takes an object as parameter, we will look for\n"
"a way to map the HTTP request body into that object."
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"This is done via a pluggable system of link:{jaxrsapi}/jakarta/ws/rs/ext/MessageBodyReader.html[`MessageBodyReader`]\n"
"and link:{jaxrsapi}/jakarta/ws/rs/ext/MessageBodyWriter.html[`MessageBodyWriter`] interfaces,\n"
"which are responsible for defining which Java type they map from/to, for which media types,\n"
"and how they turn HTTP bodies to/from Java instances of that type."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "For example, if we have our own `Cheese` type on our endpoint:"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"Then we can define how to read and write it with our body reader/writers, annotated\n"
"with link:{jaxrsapi}/jakarta/ws/rs/ext/Provider.html[`@Provider`]:"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"If you want to get the most performance our of your writer, you can extend the\n"
"link:{resteasy-reactive-api}/org/jboss/resteasy/reactive/server/spi/ServerMessageBodyWriter.html[`ServerMessageBodyWriter`]\n"
"instead of link:{jaxrsapi}/jakarta/ws/rs/ext/MessageBodyWriter.html[`MessageBodyWriter`]\n"
"where you will be able to use less reflection and bypass the blocking IO layer:"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"You can restrict which content-types your reader/writer apply to by adding\n"
"link:{jaxrsapi}/jakarta/ws/rs/Consumes.html[`Consumes`]/link:{jaxrsapi}/jakarta/ws/rs/Produces.html[`Produces`] annotations\n"
"on your provider class."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Reader and Writer interceptors"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"Just as you can intercept requests and responses, you can also intercept readers and writers, by\n"
"extending the link:{jaxrsapi}/jakarta/ws/rs/ext/ReaderInterceptor.html[`ReaderInterceptor`] or\n"
"link:{jaxrsapi}/jakarta/ws/rs/ext/WriterInterceptor.html[`WriterInterceptor`] on a class annotated with\n"
"link:{jaxrsapi}/jakarta/ws/rs/ext/Provider.html[`@Provider`]."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "If we look at this endpoint:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "We can add reader and writer interceptors like this:"
msgstr ""

#. type: Title ====
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "RESTEasy Reactive and REST Client Reactive interactions"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"In Quarkus, the RESTEasy Reactive extension and xref:rest-client-reactive.adoc[the REST Client Reactive extension] share the same infrastructure.\n"
"One important consequence of this consideration is that they share the same list of providers (in the Jakarta REST meaning of the word)."
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"For instance, if you declare a `WriterInterceptor`, it will by default intercept both the servers calls and the client calls,\n"
"which might not be the desired behavior."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "However, you can change this default behavior and constrain a provider to:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "only consider *server* calls by adding the `@ConstrainedTo(RuntimeType.SERVER)` annotation to your provider;"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "only consider *client* calls by adding the `@ConstrainedTo(RuntimeType.CLIENT)` annotation to your provider."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Parameter mapping"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"All xref:request-parameters[Request Parameters] can be declared as link:{jdkapi}/java/lang/String.html[`String`],\n"
"but also any of the following types:"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"Types for which a link:{jaxrsapi}/jakarta/ws/rs/ext/ParamConverter.html[`ParamConverter`] is available via a registered\n"
"link:{jaxrsapi}/jakarta/ws/rs/ext/ParamConverterProvider.html[`ParamConverterProvider`]."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Primitive types."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Types that have a constructor that accepts a single link:{jdkapi}/java/lang/String.html[`String`] argument."
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"Types that have a static method named `valueOf` or `fromString` with a single link:{jdkapi}/java/lang/String.html[`String`] argument\n"
"that return an instance of the type. If both methods are present then `valueOf` will be used unless\n"
"the type is an `enum` in which case `fromString` will be used."
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"link:{jdkapi}/java/util/List.html[`List<T>`], link:{jdkapi}/java/util/Set.html[`Set<T>`], or\n"
"link:{jdkapi}/java/util/SortedSet.html[`SortedSet<T>`], where `T` satisfies any above criterion."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "The following example illustrates all those possibilities:"
msgstr ""

#. type: Title ====
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Handling dates"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"RESTEasy Reactive supports the use of the implementations of `java.time.Temporal` (like `java.time.LocalDateTime`) as query, path, or form params.\n"
"Furthermore, it provides the `@org.jboss.resteasy.reactive.DateFormat` annotation, which can be used to set a custom expected pattern.\n"
"Otherwise, the JDK's default format for each type is used implicitly."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Preconditions"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"https://tools.ietf.org/html/rfc7232[HTTP allows requests to be conditional], based on a number of\n"
"conditions, such as:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Date of last resource modification"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "A resource tag, similar to a hash code of the resource to designate its state or version"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"Let's see how you can do conditional request validation using the\n"
"link:{jaxrsapi}/jakarta/ws/rs/core/Request.html[`Request`] context object:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "When we call `GET /conditional` the first time, we will get this response:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "So now if we want to check if we need to fetch a new version, we can make the following request:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "And we would get the following response:"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"Because the resource has not been modified since that date, this saves on sending the resource but can also help your users detect the concurrent modification.\n"
"For example, one client wants to update the resource, but another user has modified it since.\n"
"You can follow the previous `GET` request with this update:"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"And if some other user has modified the resource between your `GET` and your `PUT` you would\n"
"get this answer back:"
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Negotiation"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"One of the main ideas of REST (https://tools.ietf.org/html/rfc7231#section-3.4[and HTTP]) is that\n"
"your resource is independent of its representation, and\n"
"that both the client and server are free to represent their resources in as many media types as\n"
"they want. This allows the server to declare support for multiple representations and let the\n"
"client declare which ones it supports and get served something appropriate."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "The following endpoint supports serving cheese in plain text or JSON:"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"The user will be able to select which representation it gets with the\n"
"link:{httpspec}#section-5.3.2[`Accept`] header, in the case of JSON:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "And for text:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Similarly, you can `PUT` two different representations. JSON:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Or plain text:"
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "HTTP Compression"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"The body of an HTTP response is not compressed by default.\n"
"You can enable the HTTP compression support by means of `quarkus.http.enable-compression=true`."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "If compression support is enabled then the response body is compressed if:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "the resource method is annotated with `@io.quarkus.vertx.http.Compressed`, or"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "the `Content-Type` header is set and the value is a compressed media type as configured via `quarkus.http.compress-media-types`."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "The response body is never compressed if:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "the resource method is annotated with `@io.quarkus.vertx.http.Uncompressed`, or"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "the `Content-Type` header is not set."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "By default, the following list of media types is compressed: `text/html`, `text/plain`, `text/xml`, `text/css`, `text/javascript` and `application/javascript`."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "If the client does not support HTTP compression then the response body is not compressed."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Include/Exclude Jakarta REST classes"
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Using Build time conditions"
msgstr ""

#: _versions/3.2/guides/resteasy-reactive.adoc
msgid ""
"Quarkus enables the inclusion or exclusion of Jakarta REST Resources, Providers and Features directly thanks to build time conditions in the same that it does for CDI beans.\n"
"Thus, the various Jakarta REST classes can be annotated with profile conditions (`@io.quarkus.arc.profile.IfBuildProfile` or `@io.quarkus.arc.profile.UnlessBuildProfile`) and/or with property conditions (`io.quarkus.arc.properties.IfBuildProperty` or `io.quarkus.arc.properties.UnlessBuildProperty`) to indicate to Quarkus at build time under which conditions these Jakarta REST classes should be included."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "In the following example, Quarkus includes the `ResourceForApp1Only` Resource class if and only if the build profile `app1` has been enabled."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Please note that if a Jakarta REST Application has been detected and the method `getClasses()` and/or `getSingletons()` has/have been overridden, Quarkus will ignore the build time conditions and consider only what has been defined in the Jakarta REST Application."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "Using a runtime property"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Quarkus can also conditionally disable Jakarta REST Resources based on the value of runtime properties using the `@io.quarkus.resteasy.reactive.server.EndpointDisabled` annotation."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "In the following example, Quarkus will exclude `RuntimeResource` at runtime if the application has `some.property` configured to `\"disable\"`."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/resteasy-reactive.adoc
#, no-wrap
msgid "RESTEasy Reactive client"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "In addition to the Server side, RESTEasy Reactive comes with a new MicroProfile REST Client implementation that is non-blocking at its core."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "Please note that the `quarkus-rest-client` extension may not be used with RESTEasy Reactive, use `quarkus-rest-client-reactive` instead."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/resteasy-reactive.adoc
msgid "See the xref:rest-client-reactive.adoc[REST Client Reactive Guide] for more information about the reactive REST client."
msgstr ""
