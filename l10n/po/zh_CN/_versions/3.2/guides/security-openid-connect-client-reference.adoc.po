# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-11-17 20:12+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "OpenID Connect (OIDC) and OAuth2 Client and Filters Reference Guide"
msgstr "OpenID连接（OIDC）和OAuth2客户端和过滤器参考指南"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "This reference guide explains how to use:"
msgstr "本参考指南解释了如何使用："

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`quarkus-oidc-client`, `quarkus-oidc-client-reactive-filter` and `quarkus-oidc-client-filter` extensions to acquire and refresh access tokens from OpenID Connect and OAuth 2.0 compliant Authorization Servers such as link:https://www.keycloak.org[Keycloak]"
msgstr " `quarkus-oidc-client` , `quarkus-oidc-client-reactive-filter` 和 `quarkus-oidc-client-filter` 扩展，从OpenID Connect和OAuth 2.0兼容的授权服务器（如 link:https://www.keycloak.org[Keycloak] ）获取和刷新访问令牌"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`quarkus-oidc-token-propagation-reactive` and `quarkus-oidc-token-propagation` extensions to propagate the current `Bearer` or `Authorization Code Flow` access tokens"
msgstr " `quarkus-oidc-token-propagation` 和 扩展来传播当前的 或 访问标记。 `quarkus-oidc-token-propagation-reactive` `Bearer` `Authorization Code Flow` "

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The access tokens managed by these extensions can be used as HTTP Authorization Bearer tokens to access the remote services."
msgstr "由这些扩展管理的访问令牌可以作为HTTP授权承载令牌来访问远程服务。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Also see xref:security-openid-connect-client.adoc[OpenID Connect Client and Token Propagation Quickstart]."
msgstr "也请看 link:security-openid-connect-client.html[OpenID Connect客户端和令牌传播快速入门] 。"

#. type: Title ==
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "OidcClient"
msgstr "OidcClient"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "Add the following dependency:"
msgstr "添加以下依赖关系："

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`quarkus-oidc-client` extension provides a reactive `io.quarkus.oidc.client.OidcClient` which can be used to acquire and refresh tokens using SmallRye Mutiny `Uni` and `Vert.x WebClient`."
msgstr " `quarkus-oidc-client` 扩展提供了一个反应式 ，可以使用SmallRye Mutiny 和 来获取和刷新代币。 `io.quarkus.oidc.client.OidcClient` `Uni` `Vert.x WebClient` "

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`OidcClient` is initialized at the build time with the IDP token endpoint URL which can be auto-discovered or manually configured and uses this endpoint to acquire access tokens using the token grants such as `client_credentials` or `password` and refresh the tokens using a `refresh_token` grant."
msgstr " `OidcClient` 在构建时用IDP令牌端点URL初始化，可以自动发现或手动配置，并使用该端点使用令牌授予（如 或 ）获取访问令牌，并使用 授予刷新令牌。 `client_credentials` `password` `refresh_token` "

#. type: Title ===
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Token Endpoint Configuration"
msgstr "令牌端点配置"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "By default, the token endpoint address is discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc-client.auth-server-url`."
msgstr "默认情况下，令牌端点地址是通过在配置的 `quarkus.oidc-client.auth-server-url` ，添加一个 `/.well-known/openid-configuration` 路径来发现。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "For example, given this Keycloak URL:"
msgstr "例如，鉴于这个Keycloak网址。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`OidcClient` will discover that the token endpoint URL is `http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens`."
msgstr " `OidcClient` 会发现令牌端点的URL是 `<a href=\"http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens\" class=\"bare\">http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens</a>` ."

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Alternatively, if the discovery endpoint is not available or you want to save on the discovery endpoint round-trip, you can disable the discovery and configure the token endpoint address with a relative path value, for example:"
msgstr "另外，如果发现端点不可用，或者你想节省发现端点的往返费用，你可以禁用发现，用相对路径值配置令牌端点地址，比如说。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "A more compact way to configure the token endpoint URL without the discovery is to set `quarkus.oidc-client.token-path` to an absolute URL:"
msgstr "在没有发现的情况下，配置令牌端点URL的一个更紧凑的方法是将 `quarkus.oidc-client.token-path` 设置为一个绝对URL。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Setting `quarkus.oidc-client.auth-server-url` and `quarkus.oidc-client.discovery-enabled` is not required in this case."
msgstr "在这种情况下不需要设置'quarkus.oidc-client.auth-server-url'和'quarkus.oidc-client.discovery-enabled'。"

#. type: Title ===
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Supported Token Grants"
msgstr "支持代币赠款"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The main token grants which `OidcClient` can use to acquire the tokens are the `client_credentials` (default) and `password` grants."
msgstr " `OidcClient` 可以用来获取代币的主要代币授予是 `client_credentials` （默认）和 `password` 授予。"

#. type: Title ====
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Client Credentials Grant"
msgstr "客户凭证授予"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Here is how `OidcClient` can be configured to use the `client_credentials` grant:"
msgstr "下面是如何配置 `OidcClient` ，以使用 `client_credentials` 授予。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The `client_credentials` grant allows to set extra parameters to the token request via `quarkus.oidc-client.grant-options.client.<param-name>=<value>`. Here is how to set the intended token recipient via the `audience` parameter:"
msgstr " `client_credentials` 授予允许通过 `quarkus.oidc-client.grant-options.client.<param-name>=<value>` 为令牌请求设置额外参数。下面是如何通过 `audience` 参数来设置预定的令牌接收者。"

#. type: Title ====
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Password Grant"
msgstr "密码授予"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Here is how `OidcClient` can be configured to use the `password` grant:"
msgstr "下面是如何配置 `OidcClient` ，以使用 `password` 授予。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "It can be further customized using a `quarkus.oidc-client.grant-options.password` configuration prefix, similarly to how the client credentials grant can be customized."
msgstr "它可以使用 `quarkus.oidc-client.grant-options.password` 配置前缀进一步定制，类似于客户凭证授予的定制方式。"

#. type: Title ====
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Other Grants"
msgstr "其他赠款"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`OidcClient` can also help with acquiring the tokens using the grants which require some extra input parameters which cannot be captured in the configuration. These grants are `refresh_token` (with the external refresh token), `authorization_code`, as well as two grants which can be used to exchange the current access token, `urn:ietf:params:oauth:grant-type:token-exchange` and `urn:ietf:params:oauth:grant-type:jwt-bearer`."
msgstr " `OidcClient` 也可以帮助获得使用授权的令牌，这些授权需要一些额外的输入参数，不能在配置中捕获。这些授予是： （有外部刷新令牌）、 和 。 `refresh token` `token exchange` `authorization code` "

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Using the `refresh_token` grant which uses an out-of-band refresh token to acquire a new set of tokens will be required if the existing refresh token has been posted to the current Quarkus endpoint for it to acquire the access token. In this case `OidcClient` needs to be configured as follows:"
msgstr "如果现有的刷新令牌已经发布到当前的Quarkus端点，那么使用使用带外刷新令牌的 `refresh_token` 授予来获取一组新的令牌将是必要的，以便它获取访问令牌。在这种情况下， `OidcClient` 需要进行如下配置。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "and then you can use `OidcClient.refreshTokens` method with a provided refresh token to get the access token."
msgstr "然后你可以使用 `OidcClient.refreshTokens` 方法与提供的刷新令牌来获得访问令牌。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Using the `urn:ietf:params:oauth:grant-type:token-exchange` or `urn:ietf:params:oauth:grant-type:jwt-bearer` grants might be required if you are building a complex microservices application and want to avoid the same `Bearer` token be propagated to and used by more than one service. See xref:token-propagation-reactive[Token Propagation in MicroProfile RestClient Reactive filter] and xref:token-propagation[Token Propagation in MicroProfile RestClient filter] for more details."
msgstr "如果你正在构建一个复杂的微服务应用程序，并希望避免同一 `Bearer` 令牌被传播到多个服务并被其使用，则可能需要使用 `token exchange` grant。请参阅 link:#token-propagation[MicroProfile RestClient客户端过滤器中的令牌传播] 以了解更多细节。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Using `OidcClient` to support the `authorization code` grant might be required if for some reason you cannot use the xref:security-oidc-code-flow-authentication.adoc[Quarkus OIDC extension] to support Authorization Code Flow. If there is a very good reason for you to implement Authorization Code Flow then you can configure `OidcClient` as follows:"
msgstr "如果由于某些原因，你不能使用 link:security-openid-connect-web-authentication.html[Quarkus OpenID Connect扩展] 来支持授权代码流，那么使用 `OidcClient` 来支持 `authorization code` 授予可能是必要的。如果有一个非常好的理由让你实现授权代码流，那么你可以按以下方式配置 `OidcClient` 。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "and then you can use `OidcClient.accessTokens` method accepting a Map of extra properties and pass the current `code` and `redirect_uri` parameters to exchange the authorization code for the tokens."
msgstr "然后你可以使用 `OidcClient.accessTokens` 方法，接受一个额外属性的地图，并传递当前的 `code` 和 `redirect_uri` 参数，以交换授权码的代币。"

#. type: Title ====
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Grant scopes"
msgstr "资助范围"

#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"You might need to request that a specific set of scopes is associated with an issued access token.\n"
"Use a dedicated `quarkus.oidc-client.scopes` list property, for example: `quarkus.oidc-client.scopes=email,phone`"
msgstr "您可能需要请求将一组特定的作用域与已签发的访问令牌关联起来。例如，使用专用的 `quarkus.oidc-client.scopes` 列表属性： `quarkus.oidc-client.scopes=email,phone`"

#. type: Title ===
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Use OidcClient directly"
msgstr "直接使用OidcClient"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "One can use `OidcClient` directly as follows:"
msgstr "人们可以直接使用 `OidcClient` ，如下所示。"

#. type: Title ===
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Inject Tokens"
msgstr "注入令牌"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can inject `Tokens` which uses `OidcClient` internally. `Tokens` can be used to acquire the access tokens and refresh them if necessary:"
msgstr "你可以注入 `Tokens` ，它在内部使用 `OidcClient` 。 `Tokens` ，可以用来获取访问令牌并在必要时刷新它们。"

#. type: Title ===
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Use OidcClients"
msgstr "使用OidcClients"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`io.quarkus.oidc.client.OidcClients` is a container of ``OidcClient``s - it includes a default `OidcClient` and named clients which can be configured like this:"
msgstr " `io.quarkus.oidc.client.OidcClients` 是一个 s的容器--它包括一个默认的 和命名的客户端，可以像这样进行配置。 `OidcClient` `OidcClient` "

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Note in this case the default client is disabled with a `client-enabled=false` property. The `jwt-secret` client can be accessed like this:"
msgstr "注意在这种情况下，默认的客户端是用 `client-enabled=false` 属性禁用的。 `jwt-secret` 客户端可以像这样访问。"

#. type: delimited block =
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you also use xref:security-openid-connect-multitenancy.adoc[OIDC multitenancy] and each OIDC tenant has its own associated `OidcClient` then you can use a Vert.x `RoutingContext` `tenantId` attribute, for example:"
msgstr "如果你也使用 link:security-openid-connect-multitenancy.html[OIDC多租户] ，并且每个OIDC租户都有自己相关的 `OidcClient` ，那么你可以使用Vert.x `RoutingContext` `tenantId` 属性，比如说。"

#. type: delimited block =
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you need you can also create new `OidcClient` programmatically like this:"
msgstr "如果你需要，你也可以像这样以编程方式创建新的 `OidcClient` 。"

#. type: Title ===
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Inject named OidcClient and Tokens"
msgstr "注入命名的OidcClient和令牌"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "In case of multiple configured ``OidcClient``s you can specify the `OidcClient` injection target by the extra qualifier `@NamedOidcClient` instead of working with `OidcClients`:"
msgstr "如果有多个配置的 `OidcClient` ，你可以通过额外的限定词 `@NamedOidcClient` 来指定 `OidcClient` 注入目标，而不是用 `OidcClients` 。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The same qualifier can be used to specify the `OidcClient` used for a `Tokens` injection:"
msgstr "同样的限定词可以用来指定用于 `Tokens` 注入的 `OidcClient` 。"

#. type: Title ===
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Use OidcClient in RestClient Reactive ClientFilter"
msgstr "在RestClient的Reactive ClientFilter中使用OidcClient"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Add the following Maven Dependency:"
msgstr "添加以下Maven依赖。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Note it will also bring `io.quarkus:quarkus-oidc-client`."
msgstr "注意它也会带来 `io.quarkus:quarkus-oidc-client` 。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`quarkus-oidc-client-reactive-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestReactiveFilter`."
msgstr " `quarkus-oidc-client-reactive-filter` 扩展提供 。 `io.quarkus.oidc.client.filter.OidcClientRequestReactiveFilter` "

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "It works similarly to the way `OidcClientRequestFilter` does (see xref:oidc-client-filter[Use OidcClient in MicroProfile RestClient client filter]) - it uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value. The difference is that it works with xref:rest-client-reactive.adoc[Reactive RestClient] and implements a non-blocking client filter which does not block the current IO thread when acquiring or refreshing the tokens."
msgstr "它的工作方式类似于 `OidcClientRequestFilter` （参见 link:#oidc-client-filter[在MicroProfile RestClient客户端过滤器中使用OidcClient] ）--它使用 `OidcClient` 来获取访问令牌，在需要时刷新它，并将其设置为HTTP `Authorization` `Bearer` 方案值。不同的是，它与 link:rest-client-reactive.html[Reactive RestClient] 一起工作，实现了一个非阻塞的客户端过滤器，在获取或刷新令牌时不会阻塞当前的IO线程。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`OidcClientRequestReactiveFilter` delays an initial token acquisition until it is executed to avoid blocking an IO thread."
msgstr " `OidcClientRequestReactiveFilter` 延迟初始令牌的获取，直到它被执行，以避免阻塞一个IO线程，目前它只能用 注释来注册。 `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` "

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can selectively register `OidcClientRequestReactiveFilter` by using either `io.quarkus.oidc.client.reactive.filter.OidcClientFilter` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotations:"
msgstr "你可以通过使用 `io.quarkus.oidc.client.filter.OidcClientFilter` 或 `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` 注释，有选择地注册 `OidcClientRequestFilter` 。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "or"
msgstr "或"

#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"`OidcClientRequestReactiveFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-reactive-filter.client-name` configuration property.\n"
"You can also select `OidcClient` by setting `value` attribute of the `@OidcClientFilter` annotation. The client name set through annotation has higher priority than the `quarkus.oidc-client-reactive-filter.client-name` configuration property.\n"
"For example, given xref:use-oidc-clients[this] `jwt-secret` named OIDC client declaration, you can refer to this client like this:"
msgstr "`OidcClientRequestReactiveFilter` 默认情况下使用默认的 。可以通过 配置属性选择一个已命名的 。也可以通过设置 注释的 属性来选择 。通过注解设置的客户端名称比 配置属性具有更高的优先级。例如，在 命名的 OIDC 客户端声明中，可以这样引用 `OidcClient` `quarkus.oidc-client-reactive-filter.client-name` `OidcClient` `@OidcClientFilter` `value` `OidcClient` `quarkus.oidc-client-reactive-filter.client-name` `jwt-secret` xref:use-oidc-clients[该] 客户端："

#. type: Title ===
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Use OidcClient in RestClient ClientFilter"
msgstr "在RestClient ClientFilter中使用OidcClient"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`quarkus-oidc-client-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestFilter` Jakarta REST ClientRequestFilter which uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value."
msgstr " `quarkus-oidc-client-filter` 扩展提供了 JAX-RS ClientRequestFilter，它使用 来获取访问令牌，如果需要的话，刷新它，并将它设置为HTTP  方案值。 `io.quarkus.oidc.client.filter.OidcClientRequestFilter` `OidcClient` `Authorization` `Bearer` "

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "By default, this filter will get `OidcClient` to acquire the first pair of access and refresh tokens at its initialization time. If the access tokens are short-lived and refresh tokens are not available then the token acquisition should be delayed with `quarkus.oidc-client.early-tokens-acquisition=false`."
msgstr "默认情况下，该过滤器将在其初始化时获得 `OidcClient` ，以获取第一对访问和刷新令牌。如果访问令牌是短命的，而刷新令牌是不可用的，那么应该用 `quarkus.oidc-client.early-tokens-acquisition=false` ，延迟获取令牌。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can selectively register `OidcClientRequestFilter` by using either `io.quarkus.oidc.client.filter.OidcClientFilter` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotations:"
msgstr "你可以通过使用 `io.quarkus.oidc.client.filter.OidcClientFilter` 或 `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` 注释，有选择地注册 `OidcClientRequestFilter` 。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Alternatively, `OidcClientRequestFilter` can be registered automatically with all MP Rest or Jakarta REST clients if `quarkus.oidc-client-filter.register-filter=true` property is set."
msgstr "另外，如果 `quarkus.oidc-client-filter.register-filter=true` 属性被设置， `OidcClientRequestFilter` 可以被自动注册到所有MP Rest或JAX-RS客户端。"

#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"`OidcClientRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-filter.client-name` configuration property.\n"
"You can also select `OidcClient` by setting `value` attribute of the `@OidcClientFilter` annotation. The client name set through annotation has higher priority than the `quarkus.oidc-client-filter.client-name` configuration property.\n"
"For example, given xref:use-oidc-clients[this] `jwt-secret` named OIDC client declaration, you can refer to this client like this:"
msgstr "`OidcClientRequestFilter` 默认情况下使用默认的 。可以通过 配置属性选择一个已命名的 。也可以通过设置 注释的 属性来选择 。通过注解设置的客户端名称比 配置属性具有更高的优先级。例如，在 命名的 OIDC 客户端声明中，可以这样引用 `OidcClient` `quarkus.oidc-client-filter.client-name` `OidcClient` `@OidcClientFilter` `value` `OidcClient` `quarkus.oidc-client-filter.client-name` `jwt-secret` xref:use-oidc-clients[该] 客户端："

#. type: Title ===
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Use Custom RestClient ClientFilter"
msgstr "使用自定义RestClient客户端过滤器"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you prefer you can use your own custom filter and inject `Tokens`:"
msgstr "如果你愿意，你可以使用你自己的自定义过滤器和注入 `Tokens` 。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The `Tokens` producer will acquire and refresh the tokens, and the custom filter will decide how and when to use the token."
msgstr " `Tokens` 生产者将获得并刷新令牌，而自定义过滤器将决定如何以及何时使用令牌。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can also inject named `Tokens`, see xref:named-oidc-clients[Inject named OidcClient and Tokens]"
msgstr "你也可以注入命名的 `Tokens` ，见 link:#named-oidc-clients[注入命名的OidcClient和令牌]"

#. type: Title ===
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Refreshing Access Tokens"
msgstr "刷新访问令牌"

#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"`OidcClientRequestReactiveFilter`, `OidcClientRequestFilter` and `Tokens` producers will refresh the current expired access token if the refresh token is available.\n"
"Additionally, `quarkus.oidc-client.refresh-token-time-skew` property can be used for a preemptive access token refreshment to avoid sending nearly expired access tokens that might cause HTTP 401 errors. For example if this property is set to `3S` and the access token will expire in less than 3 seconds then this token will be auto-refreshed."
msgstr "`OidcClientRequestReactiveFilter` 如果有刷新令牌， `OidcClientRequestFilter` 和 `Tokens` 生产者将刷新当前已过期的访问令牌。此外， `quarkus.oidc-client.refresh-token-time-skew` 属性可用于抢先刷新访问令牌，以避免发送可能导致 HTTP 401 错误的快过期访问令牌。例如，如果该属性设置为 `3S` ，且访问令牌将在 3 秒内过期，那么该令牌将被自动刷新。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If the access token needs to be refreshed but no refresh token is available then an attempt will be made to acquire a new token using the configured grant such as `client_credentials`."
msgstr "如果访问令牌需要刷新，但没有刷新令牌，那么将尝试使用配置的授权（如 `client_credentials` ）来获取新的令牌。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Note that some OpenID Connect Providers will not return a refresh token in a `client_credentials` grant response. For example, starting from Keycloak 12 a refresh token will not be returned by default for `client_credentials`. The providers might also restrict the number of times a refresh token can be used."
msgstr "请注意，一些OpenID连接供应商不会在 `client_credentials` grant响应中返回刷新令牌。例如，从Keycloak 12开始， `client_credentials` ，默认不会返回刷新令牌。供应商也可能限制刷新令牌的使用次数。"

#. type: Title ===
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Revoking Access Tokens"
msgstr "刷新访问令牌"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If your OpenId Connect provider such as Keycloak supports a token revocation endpoint then `OidcClient#revokeAccessToken` can be used to revoke the current access token. The revocation endpoint URL will be discovered alongside the token request URI or can be configured with `quarkus.oidc-client.revoke-path`."
msgstr "如果你的OpenId连接提供商（如Keycloak）支持一个令牌撤销端点，那么 `OidcClient#revokeAccessToken` ，可以用来撤销当前的访问令牌。撤销端点的URL将与令牌请求URI一起被发现，或者可以用 `quarkus.oidc-client.revoke-path` 进行配置。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You might want to have the access token revoked if using this token with a REST client fails with HTTP `401` or the access token has already been used for a long time and you'd like to refresh it."
msgstr "如果用REST客户端使用这个令牌时，HTTP `401` 失败，或者访问令牌已经使用了很长时间，你可能想让访问令牌被撤销。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "This can be achieved by requesting a token refresh using a refresh token. However, if the refresh token is not available then you can refresh it by revoking it first and then request a new access token."
msgstr "这可以通过使用刷新令牌请求刷新令牌来实现。然而，如果刷新令牌不可用，那么你可以通过先撤销它，然后请求一个新的访问令牌来刷新它。"

#. type: Title ===
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "OidcClient Authentication"
msgstr "OidcClient认证"

#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"`OidcClient` has to authenticate to the OpenID Connect Provider for the `client_credentials` and other grant requests to succeed.\n"
"All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
msgstr "`OidcClient` 必须向 OpenID Connect Provider 进行身份验证，这样 和其他授予请求才能成功。支持所有 `client_credentials` link:https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC 客户端身份验证] 选项，例如"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`client_secret_basic`:"
msgstr " `client_secret_basic` :"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider]:"
msgstr "或者用从 link:credentials-provider.html[CredentialsProvider] 中获取的秘密。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`client_secret_post`:"
msgstr " `client_secret_post` :"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`client_secret_jwt`, signature algorithm is `HS256`:"
msgstr " `client_secret_jwt` ，签名算法是 `HS256` 。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider], signature algorithm is `HS256`:"
msgstr "或者用从 link:credentials-provider.html[CredentialsProvider] 中获取的秘密，签名算法是 `HS256` 。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`private_key_jwt` with the PEM key file, signature algorithm is `RS256`:"
msgstr " `private_key_jwt` 与PEM密钥文件，签名算法是 。 `RS256` "

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`private_key_jwt` with the keystore file, signature algorithm is `RS256`:"
msgstr " `private_key_jwt` 与密钥存储文件，签名算法是 。 `RS256` "

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that no client secret goes over the wire."
msgstr "使用 `client_secret_jwt` 或 `private_key_jwt` 认证方法，可以确保没有客户的秘密在网上流传。"

#. type: Title ====
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Additional JWT Authentication options"
msgstr "额外的JWT认证选项"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If either `client_secret_jwt` or `private_key_jwt` authentication methods are used then the JWT signature algorithm, key identifier, audience, subject and issuer can be customized, for example:"
msgstr "如果使用 `client_secret_jwt` 或 `private_key_jwt` 认证方法，那么JWT签名算法、密钥标识符、受众、主体和发行者都可以自定义，例如。"

#. type: Title ====
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Apple POST JWT"
msgstr "苹果POST JWT"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Apple OpenID Connect Provider uses a `client_secret_post` method where a secret is a JWT produced with a `private_key_jwt` authentication method but with Apple account specific issuer and subject properties."
msgstr "苹果OpenID连接提供商使用 `client_secret_post` 方法，其中秘密是用 `private_key_jwt` 认证方法产生的JWT，但有苹果账户特定的发行者和主体属性。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`quarkus-oidc-client` supports a non-standard `client_secret_post_jwt` authentication method which can be configured as follows:"
msgstr " `quarkus-oidc-client` 支持一种非标准的 认证方法，可按以下方式配置。 `client_secret_post_jwt` "

#. type: Title ====
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Mutual TLS"
msgstr "相互之间的TLS"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Some OpenID Connect Providers require that a client is authenticated as part of the mutual TLS (`mTLS`) authentication process."
msgstr "一些OpenID连接供应商可能要求客户端作为 `Mutual TLS` ( `mTLS` )认证过程的一部分进行认证。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`quarkus-oidc-client` can be configured as follows to support `mTLS`:"
msgstr " `quarkus-oidc-client` 可以按以下方式配置，以支持 。 `mTLS` "

#. type: Title ===
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Testing"
msgstr "测试"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "Start by adding the following dependencies to your test project:"
msgstr "首先在你的测试项目中添加以下依赖项："

#. type: Title ====
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Wiremock"
msgstr "Wiremock"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "Add the following dependencies to your test project:"
msgstr "在你的测试项目中添加以下依赖项："

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Write a Wiremock-based `QuarkusTestResourceLifecycleManager`, for example:"
msgstr "编写基于Wiremock的 `QuarkusTestResourceLifecycleManager` ，例如。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Prepare the REST test endpoints. You can have the test front-end endpoint, which uses the injected MP REST client with a registered OidcClient filter, call the downstream endpoint. This endpoint echoes the token back. For example, see the `integration-tests/oidc-client-wiremock` in the `main` Quarkus repository."
msgstr "准备好REST测试端点，你可以让测试前端端点使用注入的MP REST客户端与注册的OidcClient过滤器在下游端点上调用，该端点将令牌回传，例如，见 `main` Quarkus资源库中的 `integration-tests/oidc-client-wiremock` 。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Set `application.properties`, for example:"
msgstr "设置 `application.properties` ，例如。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "and finally write the test code. Given the Wiremock-based resource above, the first test invocation should return `access_token_1` access token which will expire in 4 seconds. Use `awaitility` to wait for about 5 seconds, and now the next test invocation should return `access_token_2` access token which confirms the expired `access_token_1` access token has been refreshed."
msgstr "并最后写下测试代码。鉴于上述基于Wiremock的资源，第一个测试调用应该返回 `access_token_1` ，该访问令牌将在4秒后过期。使用 `awaitility` 等待大约5秒，现在下一个测试调用应该返回 `access_token_2` 访问令牌，确认过期的 `access_token_1` 访问令牌已经被刷新了。"

#. type: Title ====
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Keycloak"
msgstr "Keycloak"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you work with Keycloak then you can use the same approach as described in the xref:security-oidc-bearer-token-authentication.adoc#integration-testing-keycloak[OpenID Connect Bearer Token Integration testing] Keycloak section."
msgstr "如果你与Keycloak合作，那么你可以使用与 link:security-openid-connect.html#integration-testing-keycloak.adoc[OpenID Connect Bearer Token集成测试] Keycloak部分所述相同的方法。"

#. type: Title ===
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "How to check the errors in the logs"
msgstr "如何检查日志中的错误"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Enable `io.quarkus.oidc.client.runtime.OidcClientImpl` `TRACE` level logging to see more details about the token acquisition and refresh errors:"
msgstr "请启用 `io.quarkus.oidc.client.runtime.OidcClientImpl` `TRACE` 级日志，以查看有关令牌获取和刷新错误的更多细节。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Enable `io.quarkus.oidc.client.runtime.OidcClientRecorder` `TRACE` level logging to see more details about the OidcClient initialization errors:"
msgstr "请启用 `io.quarkus.oidc.client.runtime.OidcClientRecorder` `TRACE` 级日志，以查看更多关于OidcClient初始化错误的细节。"

#. type: Title ==
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Token Propagation Reactive"
msgstr "令牌传播 反应式的"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The `quarkus-oidc-token-propagation-reactive` extension provides RestEasy Reactive Client `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` that simplifies the propagation of authentication information by propagating the xref:security-oidc-bearer-token-authentication.adoc[Bearer token] present in the current active request or the token acquired from the xref:security-oidc-code-flow-authentication.adoc[Authorization code flow mechanism], as the HTTP `Authorization` header's `Bearer` scheme value."
msgstr " `quarkus-oidc-token-propagation` 扩展提供了两个 JAX-RS `javax.ws.rs.client.ClientRequestFilter` 类的实现，简化了认证信息的传播。 `io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` 传播当前活动请求中存在的 link:security-openid-connect.html[承载器] 令牌或从 link:security-openid-connect-web-authentication.html[授权码流] 中获得的令牌，作为 HTTP `Authorization` 头的 `Bearer` 方案值。 `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` 提供同样的功能，但另外提供对JWT令牌的支持。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can selectively register `AccessTokenRequestReactiveFilter` by using either `io.quarkus.oidc.token.propagation.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotation, for example:"
msgstr "你可以通过使用 `io.quarkus.oidc.token.propagation.AccessToken` 或 `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` ，有选择地注册 `AccessTokenRequestFilter` ，例如。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Additionally, `AccessTokenRequestReactiveFilter` can support a complex application that needs to exchange the tokens before propagating them."
msgstr "此外， `AccessTokenRequestReactiveFilter` ，可以支持一个复杂的应用程序，需要在传播前交换代币。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you work with link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] or other OpenID Connect Providers which support a link:https://tools.ietf.org/html/rfc8693[Token Exchange] token grant then you can configure `AccessTokenRequestReactiveFilter` to exchange the token like this:"
msgstr "如果在传播之前需要交换当前的访问令牌，并且你与 link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] 或其他支持 link:https://tools.ietf.org/html/rfc8693[令牌交换] 的OpenID连接提供者合作，那么你可以像这样配置 `AccessTokenRequestFilter` 。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Note `AccessTokenRequestReactiveFilter` will use `OidcClient` to exchange the current token, and you can use `quarkus.oidc-client.grant-options.exchange` to set the additional exchange properties expected by your OpenID Connect Provider."
msgstr "注意 `AccessTokenRequestFilter` 将使用 `OidcClient` 来交换当前令牌，你可以使用 `quarkus.oidc-client.grant-options.exchange` 来设置你的 OpenID Connect 提供商所期望的额外交换属性。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you work with providers such as `Azure` that link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[require using] link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWT bearer token grant] to exchange the current token then you can configure `AccessTokenRequestReactiveFilter` to exchange the token like this:"
msgstr "如果你与供应商合作，如 `Azure` ， link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[需要使用] link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWT不记名令牌授予] 来交换当前令牌，那么你可以配置 `AccessTokenRequestReactiveFilter` ，像这样交换令牌。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`AccessTokenRequestReactiveFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-token-propagation-reactive.client-name` configuration property."
msgstr " `AccessTokenRequestFilter` 默认使用一个默认的 。一个命名的 ，可以通过 配置属性来选择。 `OidcClient` `OidcClient` `quarkus.oidc-token-propagation.client-name` "

#. type: Title ==
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Token Propagation"
msgstr "令牌传播"

#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"The `quarkus-oidc-token-propagation` extension provides two Jakarta REST `jakarta.ws.rs.client.ClientRequestFilter` class implementations that simplify the propagation of authentication information.\n"
"`io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` propagates the xref:security-oidc-bearer-token-authentication.adoc[Bearer token] present in the current active request or the token acquired from the xref:security-oidc-code-flow-authentication.adoc[Authorization code flow mechanism], as the HTTP `Authorization` header's `Bearer` scheme value.\n"
"The `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` provides the same functionality, but in addition provides support for JWT tokens."
msgstr "`quarkus-oidc-token-propagation` 扩展提供了两个简化身份验证信息传播的 Jakarta REST `jakarta.ws.rs.client.ClientRequestFilter` 类实现。 `io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` 传播当前活动请求中的 xref:security-oidc-bearer-token-authentication.adoc[承载器令牌] 或从 xref:security-oidc-code-flow-authentication.adoc[授权代码流机制] 中获取的令牌，作为 HTTP `Authorization` 标头的 `Bearer` 方案值。 `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` 提供了相同的功能，但此外还支持 JWT 令牌。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "When you need to propagate the current Authorization Code Flow access token then the immediate token propagation will work well - as the code flow access tokens (as opposed to ID tokens) are meant to be propagated for the current Quarkus endpoint to access the remote services on behalf of the currently authenticated user."
msgstr "当你需要传播当前的授权代码流访问令牌时，那么即时令牌传播就能很好地工作--因为代码流访问令牌（相对于ID令牌而言）是为了传播当前的Quarkus终端，代表当前认证的用户访问远程服务。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "However, the direct end to end Bearer token propagation should be avoided if possible. For example, `Client -> Service A -> Service B` where `Service B` receives a token sent by `Client` to `Service A`. In such cases `Service B` will not be able to distinguish if the token came from `Service A` or from `Client` directly. For `Service B` to verify the token came from `Service A` it should be able to assert a new issuer and audience claims."
msgstr "然而，如果可能的话，应该避免直接的端到端承载令牌传播。例如， `Client → Service A → Service B` ，其中 `Service B` 收到由 `Client` 发送给 `Service A` 的令牌。在这种情况下， `Service B` 将无法区分该令牌是来自 `Service A` 还是直接来自 `Client` 。对于 `Service B` ，以验证令牌来自于 `Service A` ，它应该能够断言一个新的发行者和听众的主张。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Additionally, a complex application might need to exchange or update the tokens before propagating them. For example, the access context might be different when `Service A` is accessing `Service B`. In this case, `Service A` might be granted a narrow or a completely different set of scopes to access `Service B`."
msgstr "此外，一个复杂的应用程序可能需要在传播令牌之前交换或更新令牌。例如，当 `Service A` 访问 `Service B` 时，访问环境可能是不同的。在这种情况下， `Service A` 可能被授予一个狭窄的或完全不同的作用域来访问 `Service B` 。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The following sections show how `AccessTokenRequestFilter` and `JsonWebTokenRequestFilter` can help."
msgstr "以下各节展示了 `AccessTokenRequestFilter` 和 `JsonWebTokenRequestFilter` 如何帮助。"

#. type: Title ===
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "RestClient AccessTokenRequestFilter"
msgstr "RestClient AccessTokenRequestFilter"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`AccessTokenRequestFilter` treats all tokens as Strings and as such it can work with both JWT and opaque tokens."
msgstr " `AccessTokenRequestFilter` 将所有令牌视为字符串，因此它可以与JWT和不透明的令牌一起工作。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can selectively register `AccessTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr "你可以通过使用 `io.quarkus.oidc.token.propagation.AccessToken` 或 `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` ，有选择地注册 `AccessTokenRequestFilter` ，例如。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Alternatively, `AccessTokenRequestFilter` can be registered automatically with all MP Rest or Jakarta REST clients if `quarkus.oidc-token-propagation.register-filter` property is set to `true` and `quarkus.oidc-token-propagation.json-web-token` property is set to `false` (which is a default value)."
msgstr "另外，如果 `quarkus.oidc-token-propagation.register-filter` 属性被设置为 `true` ， `quarkus.oidc-token-propagation.json-web-token` 属性被设置为 `false` （这是一个默认值），那么 `AccessTokenRequestFilter` 可以被自动注册到所有MP Rest或JAX-RS客户端。"

#. type: Title ====
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Exchange Token Before Propagation"
msgstr "传播前交换代币"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If the current access token needs to be exchanged before propagation and you work with link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] or other OpenID Connect Provider which supports a link:https://tools.ietf.org/html/rfc8693[Token Exchange] token grant then you can configure `AccessTokenRequestFilter` like this:"
msgstr "如果在传播之前需要交换当前的访问令牌，并且你与 link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] 或其他支持 link:https://tools.ietf.org/html/rfc8693[令牌交换] 的OpenID连接提供者合作，那么你可以像这样配置 `AccessTokenRequestFilter` 。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you work with providers such as `Azure` that link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[require using] link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWT bearer token grant] to exchange the current token then you can configure `AccessTokenRequestFilter` to exchange the token like this:"
msgstr "如果你与供应商合作，如 `Azure` ， link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[需要使用] link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWT不记名令牌授予] 来交换当前令牌，那么你可以配置 `AccessTokenRequestFilter` ，像这样交换令牌。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Note `AccessTokenRequestFilter` will use `OidcClient` to exchange the current token, and you can use `quarkus.oidc-client.grant-options.exchange` to set the additional exchange properties expected by your OpenID Connect Provider."
msgstr "注意 `AccessTokenRequestFilter` 将使用 `OidcClient` 来交换当前令牌，你可以使用 `quarkus.oidc-client.grant-options.exchange` 来设置你的 OpenID Connect 提供商所期望的额外交换属性。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`AccessTokenRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-token-propagation.client-name` configuration property."
msgstr " `AccessTokenRequestFilter` 默认使用一个默认的 。一个命名的 ，可以通过 配置属性来选择。 `OidcClient` `OidcClient` `quarkus.oidc-token-propagation.client-name` "

#. type: Title ===
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "RestClient JsonWebTokenRequestFilter"
msgstr "RestClient JsonWebTokenRequestFilter"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Using `JsonWebTokenRequestFilter` is recommended if you work with Bearer JWT tokens where these tokens can have their claims such as `issuer` and `audience` modified and the updated tokens secured (for example, re-signed) again. It expects an injected `org.eclipse.microprofile.jwt.JsonWebToken` and therefore will not work with the opaque tokens. Also, if your OpenID Connect Provider supports a Token Exchange protocol then it is recommended to use `AccessTokenRequestFilter` instead - as both JWT and opaque bearer tokens can be securely exchanged with `AccessTokenRequestFilter`."
msgstr "如果你与无记名JWT令牌一起工作，这些令牌可以修改它们的主张，如 `issuer` 和 `audience` ，并再次确保更新的令牌安全（例如，重新签名），那么建议使用 `JsonWebTokenRequestFilter` 。它期望一个注入的 `org.eclipse.microprofile.jwt.JsonWebToken` ，因此不会与不透明的令牌一起工作。另外，如果你的OpenID连接提供商支持令牌交换协议，那么建议使用 `AccessTokenRequestFilter` ，因为JWT和不透明的承载令牌都可以通过 `AccessTokenRequestFilter` 进行安全交换。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`JsonWebTokenRequestFilter` makes it easy for `Service A` implementations to update the injected `org.eclipse.microprofile.jwt.JsonWebToken` with the new `issuer` and `audience` claim values and secure the updated token again with a new signature. The only difficult step is to ensure `Service A` has a signing key - it should be provisioned from a secure file system or from the remote secure storage such as Vault."
msgstr " `JsonWebTokenRequestFilter` 使得 实现很容易用新的 和 索赔值更新注入的 ，并用新的签名再次保证更新的令牌。唯一困难的步骤是确保 有一个签名密钥 - 它应该从安全文件系统或远程安全存储（如Vault）中提供。 `Service A` `issuer` `audience` `org.eclipse.microprofile.jwt.JsonWebToken` `Service A` "

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can selectively register `JsonWebTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.JsonWebToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr "你可以通过使用 `io.quarkus.oidc.token.propagation.JsonWebToken` 或 `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` ，有选择地注册 `JsonWebTokenRequestFilter` ，例如。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Alternatively, `JsonWebTokenRequestFilter` can be registered automatically with all MicroProfile REST or Jakarta REST clients if both `quarkus.oidc-token-propagation.register-filter` and `quarkus.oidc-token-propagation.json-web-token` properties are set to `true`."
msgstr "另外，如果 `quarkus.oidc-token-propagation.register-filter` 和 `quarkus.oidc-token-propagation.json-web-token` 两个属性都设置为 `true` ，则 `JsonWebTokenRequestFilter` 可以自动注册到所有 MP Rest 或 JAX-RS 客户端。"

#. type: Title ====
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Update Token Before Propagation"
msgstr "传播前更新令牌"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If the injected token needs to have its `iss` (issuer) and/or `aud` (audience) claims updated and secured again with a new signature then you can configure `JsonWebTokenRequestFilter` like this:"
msgstr "如果注入的令牌需要更新其 `iss` （发行者）和/或 `aud` （受众）声明，并以新的签名再次保证其安全性，那么你可以像这样配置 `JsonWebTokenRequestFilter` 。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "As already noted above, use `AccessTokenRequestFilter` if you work with Keycloak or OpenID Connect Provider which supports a Token Exchange protocol."
msgstr "如上所述，如果你使用支持令牌交换协议的Keycloak或OpenID连接提供者，请使用 `AccessTokenRequestFilter` 。"

#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"You can generate the tokens as described in xref:security-oidc-bearer-token-authentication.adoc#integration-testing[OpenID Connect Bearer Token Integration testing] section.\n"
"Prepare the REST test endpoints. You can have the test front-end endpoint, which uses the injected MP REST client with a registered token propagation filter, call the downstream endpoint. For example, see the `integration-tests/oidc-token-propagation` in the `main` Quarkus repository."
msgstr "您可以按照 xref:security-oidc-bearer-token-authentication.adoc#integration-testing[OpenID Connect 承载令牌集成测试] 部分的描述生成令牌。准备 REST 测试端点。可以让测试前端端点调用下游端点，测试前端端点使用注入的 MP REST 客户端和已注册的令牌传播过滤器。例如，请参阅 `main` Quarkus 存储库中的 `integration-tests/oidc-token-propagation` 。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The `quarkus-oidc-token-propagation-reactive` extension provides `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` which can be used to propagate the current `Bearer` or `Authorization Code Flow` access tokens."
msgstr " `quarkus-oidc-token-propagation-reactive` 扩展提供了 `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` ，可用于传播当前的 `Bearer` 或 `Authorization Code Flow` 访问令牌。"

#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"The `quarkus-oidc-token-propagation-reactive` extension (as opposed to the non-reactive `quarkus-oidc-token-propagation` extension) does not currently support the exchanging or resigning the tokens before the propagation.\n"
"However, these features might be added in the future."
msgstr "`quarkus-oidc-token-propagation-reactive` 扩展（与非反应式 `quarkus-oidc-token-propagation` 扩展相反）目前不支持在传播前交换或放弃令牌。不过，将来可能会添加这些功能。"

#. type: Title ==
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "References"
msgstr "参考文献"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "xref:security-openid-connect-client.adoc[OpenID Connect Client and Token Propagation Quickstart]"
msgstr "xref:security-openid-connect-client.adoc[OpenID Connect 客户端和令牌传播快速入门]"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]"
msgstr "xref:security-oidc-bearer-token-authentication.adoc[OIDC 承载令牌验证]"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "xref:security-oidc-code-flow-authentication.adoc[OIDC code flow mechanism for protecting web applications]"
msgstr "xref:security-oidc-code-flow-authentication.adoc[保护网络应用程序的 OIDC 代码流机制]"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus 安全概述]"
