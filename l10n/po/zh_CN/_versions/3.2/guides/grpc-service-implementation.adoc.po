# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-11-08 17:17+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/3.2/guides/grpc-service-implementation.adoc
#, no-wrap
msgid "Implementing a gRPC Service"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid "gRPC service implementations exposed as CDI beans are automatically registered and served by quarkus-grpc."
msgstr ""

#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid ""
"Implementing a gRPC service requires the gRPC classes to be generated.\n"
"Place your `proto` files in `src/main/proto` and run `mvn compile`."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/grpc-service-implementation.adoc
#, no-wrap
msgid "Generated Code"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid "Quarkus generates a few implementation classes for services declared in the `proto` file:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid "A _service interface_ using the Mutiny API"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid "the class name is `${JAVA_PACKAGE}.${NAME_OF_THE_SERVICE}`"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid "An _implementation base_ class using the gRPC API"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid "the class name is structured as follows: `${JAVA_PACKAGE}.${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase`"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid "For example, if you use the following `proto` file snippet:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid "`hello` is the java package for the generated classes."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid "`Greeter` is the service name."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid "Then the service interface is `hello.Greeter` and the implementation base is the abstract static nested class: `hello.GreeterGrpc.GreeterImplBase`."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid "You'll need to implement the _service interface_ or extend the _base class_ with your service implementation bean as described in the following sections."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/grpc-service-implementation.adoc
#, no-wrap
msgid "Implementing a Service with the Mutiny API"
msgstr ""

#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid ""
"To implement a gRPC service using the Mutiny API, create a class that implements the service interface.\n"
"Then, implement the methods defined in the service interface.\n"
"If you don't want to implement a service method just throw an `java.lang.UnsupportedOperationException` from the method body (the exception will be automatically converted to the appropriate gRPC exception).\n"
"Finally, implement the service and add the `@GrpcService` annotation:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid "A gRPC service implementation bean must be annotated with the `@GrpcService` annotation and should not declare any other CDI qualifier. All gRPC services have the `jakarta.inject.Singleton` scope. Additionally, the request context is always active during a service call."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid "`hello.Greeter` is the generated service interface."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid "The service implementation bean can also extend the Mutiny implementation base, where the class name is structured as follows: `Mutiny${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase`."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/grpc-service-implementation.adoc
#, no-wrap
msgid "Implementing a Service with the default gRPC API"
msgstr ""

#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid ""
"To implement a gRPC service using the default gRPC API, create a class that extends the default implementation base.\n"
"Then, override the methods defined in the service interface.\n"
"Finally, implement the service and add the `@GrpcService` annotation:"
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/grpc-service-implementation.adoc
#, no-wrap
msgid "Blocking Service Implementation"
msgstr ""

#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid ""
"By default, all the methods from a gRPC service run on the event loop.\n"
"As a consequence, you must **not** block.\n"
"If your service logic must block, annotate the method with `io.smallrye.common.annotation.Blocking`:"
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/grpc-service-implementation.adoc
#, no-wrap
msgid "Handling Streams"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid "gRPC allows receiving and returning streams:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid "Using Mutiny, you can implement these as follows:"
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/grpc-service-implementation.adoc
#, no-wrap
msgid "Health Check"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid "For the implemented services, Quarkus gRPC exposes health information in the following format:"
msgstr ""

#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid ""
"Clients can specify the fully qualified service name to get the health status of a specific service\n"
"or skip specifying the service name to get the general status of the gRPC server."
msgstr ""

#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid ""
"For more details, check out the\n"
"https://github.com/grpc/grpc/blob/v1.28.1/doc/health-checking.md[gRPC documentation]"
msgstr ""

#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid ""
"Additionally, if Quarkus SmallRye Health is added to the application, a readiness check for\n"
"the state of the gRPC services will be added to the MicroProfile Health endpoint response, that is `/q/health`."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/grpc-service-implementation.adoc
#, no-wrap
msgid "Reflection Service"
msgstr ""

#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid ""
"Quarkus gRPC Server implements the https://github.com/grpc/grpc/blob/master/doc/server-reflection.md[reflection service].\n"
"This service allows tools like https://github.com/fullstorydev/grpcurl[grpcurl] or https://github.com/gusaul/grpcox[grpcox] to interact with your services."
msgstr ""

#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid ""
"The reflection service is enabled by default in _dev_ mode.\n"
"In test or production mode, you need to enable it explicitly by setting `quarkus.grpc.server.enable-reflection-service` to `true`."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid "Quarkus exposes both the reflection service `v1` and `v1alpha`."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/grpc-service-implementation.adoc
#, no-wrap
msgid "Scaling"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid "By default, quarkus-grpc starts a single gRPC server running on a single event loop."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid "If you wish to scale your server, you can set the number of server instances by setting `quarkus.grpc.server.instances`."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/grpc-service-implementation.adoc
#, no-wrap
msgid "Server Configuration"
msgstr ""

#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid ""
"When you disable `quarkus.grpc.server.use-separate-server`, you are then using the new Vert.x gRPC server implementation\n"
"which uses the existing HTTP server. Which means that the server port is now `8080` (or the port configured with `quarkus.http.port`).\n"
"Also, most of the other configuration properties are no longer applied, since it's the HTTP server that should already be properly configured."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid "When you enable `quarkus.grpc.server.xds.enabled`, it's the xDS that should handle most of the configuration above."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/grpc-service-implementation.adoc
#, no-wrap
msgid "Example of Configuration"
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/grpc-service-implementation.adoc
#, no-wrap
msgid "Enabling TLS"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid "To enable TLS, use the following configuration."
msgstr ""

#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid ""
"Note that all paths in the configuration may either specify a resource on the classpath\n"
"(typically from `src/main/resources` or its subfolder) or an external file."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid "When SSL/TLS is configured, `plain-text` is automatically disabled."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/grpc-service-implementation.adoc
#, no-wrap
msgid "TLS with Mutual Auth"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid "To use TLS with mutual authentication, use the following configuration:"
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/grpc-service-implementation.adoc
#, no-wrap
msgid "Server Interceptors"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid "gRPC server interceptors let you perform logic, such as authentication, before your service is invoked."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid "You can implement a gRPC server interceptor by creating an `@ApplicationScoped` bean implementing `io.grpc.ServerInterceptor`:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid "It's also possible to annotate a producer method as a global interceptor:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid "Check the https://grpc.github.io/grpc-java/javadoc/io/grpc/ServerInterceptor.html[ServerInterceptor JavaDoc] to properly implement your interceptor."
msgstr ""

#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid ""
"To apply an interceptor to all exposed services, annotate it with `@io.quarkus.grpc.GlobalInterceptor`.\n"
"To apply an interceptor to a single service, register it on the service with `@io.quarkus.grpc.RegisterInterceptor`:"
msgstr ""

#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid ""
"When you have multiple server interceptors, you can order them by implementing the `jakarta.enterprise.inject.spi.Prioritized` interface. Please note that all the global interceptors are invoked before the service-specific\n"
"interceptors."
msgstr ""

#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid ""
"Interceptors with the highest priority are called first.\n"
"The default priority, used if the interceptor does not implement the `Prioritized` interface, is `0`."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/grpc-service-implementation.adoc
#, no-wrap
msgid "Testing your services"
msgstr ""

#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid ""
"The easiest way to test a gRPC service is to use a gRPC client as described\n"
"in xref:grpc-service-consumption.adoc[Consuming a gRPC Service]."
msgstr ""

#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid ""
"Please note that in the case of using a client to test an exposed service that does not use TLS,\n"
"there is no need to provide any configuration. E.g. to test the `HelloService`\n"
"defined above, one could create the following test:"
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/grpc-service-implementation.adoc
#, no-wrap
msgid "Trying out your services manually"
msgstr ""

#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid ""
"In the dev mode, you can try out your gRPC services in the Quarkus Dev UI.\n"
"Just go to http://localhost:8080/q/dev-v1 and click on _Services_ under the gRPC tile."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid "Please note that your application needs to expose the \"normal\" HTTP port for the Dev UI to be accessible. If your application does not expose any HTTP endpoints, you can create a dedicated profile with a dependency on `quarkus-vertx-http`:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid "Having it, you can run the dev mode with: `mvn quarkus:dev -Pdevelopment`."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid "If you use Gradle, you can simply add a dependency for the `quarkusDev` task:"
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/grpc-service-implementation.adoc
#, no-wrap
msgid "gRPC Server metrics"
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/grpc-service-implementation.adoc
#, no-wrap
msgid "Enabling metrics collection"
msgstr ""

#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid ""
"gRPC server metrics are automatically enabled when the application also uses the xref:telemetry-micrometer.adoc[`quarkus-micrometer`] extension.\n"
"Micrometer collects the metrics of all the gRPC services implemented by the application."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid "As an example, if you export the metrics to Prometheus, you will get:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid "The service name, method and type can be found in the _tags_."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/grpc-service-implementation.adoc
#, no-wrap
msgid "Disabling metrics collection"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/grpc-service-implementation.adoc
msgid "To disable the gRPC server metrics when `quarkus-micrometer` is used, add the following property to the application configuration:"
msgstr ""
