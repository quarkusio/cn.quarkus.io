# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-08-28 16:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "Introduction to Contexts and Dependency Injection (CDI)"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "In this guide we're going to describe the basic principles of the Quarkus programming model that is based on the https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html[Jakarta Contexts and Dependency Injection 4.0, window=\"_blank\"] specification."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "OK. Let's start simple. What is a bean?"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "Well, a bean is a _container-managed_ object that supports a set of basic services, such as injection of dependencies, lifecycle callbacks and interceptors."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "Wait a minute. What does \"container-managed\" mean?"
msgstr ""

#: _versions/3.2/guides/cdi.adoc
msgid ""
"Simply put, you don't control the lifecycle of the object instance directly.\n"
"Instead, you can affect the lifecycle through declarative means, such as annotations, configuration, etc.\n"
"The container is the _environment_ where your application runs.\n"
"It creates and destroys the instances of beans, associates the instances with a designated context, and injects them into other beans."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "What is it good for?"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "An application developer can focus on the business logic rather than finding out \"where and how\" to obtain a fully initialized component with all of its dependencies."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "You've probably heard of the _inversion of control_ (IoC) programming principle. Dependency injection is one of the implementation techniques of IoC."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "What does a bean look like?"
msgstr ""

#: _versions/3.2/guides/cdi.adoc
msgid ""
"There are several kinds of beans.\n"
"The most common ones are class-based beans:"
msgstr ""

#. type: Block title
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "Simple Bean Example"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "This is a scope annotation. It tells the container which context to associate the bean instance with. In this particular case, a *single bean instance* is created for the application and used by all other beans that inject `Translator`."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "This is a field injection point. It tells the container that `Translator` depends on the `Dictionary` bean. If there is no matching bean the build fails."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "This is an interceptor binding annotation. In this case, the annotation comes from the MicroProfile Metrics. The relevant interceptor intercepts the invocation and updates the relevant metrics. We will talk about xref:interceptors[interceptors] later."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "Nice. How does the dependency resolution work? I see no names or identifiers."
msgstr ""

#: _versions/3.2/guides/cdi.adoc
msgid ""
"That's a good question.\n"
"In CDI the process of matching a bean to an injection point is *type-safe*.\n"
"Each bean declares a set of bean types.\n"
"In our example above, the `Translator` bean has two bean types: `Translator` and `java.lang.Object`.\n"
"Subsequently, a bean is assignable to an injection point if the bean has a bean type that matches the _required type_ and has all the _required qualifiers_.\n"
"We'll talk about qualifiers later.\n"
"For now, it's enough to know that the bean above is assignable to an injection point of type `Translator` and `java.lang.Object`."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "Hm, wait a minute. What happens if multiple beans declare the same type?"
msgstr ""

#: _versions/3.2/guides/cdi.adoc
msgid ""
"There is a simple rule: *exactly one bean must be assignable to an injection point, otherwise the build fails*.\n"
"If none is assignable the build fails with `UnsatisfiedResolutionException`.\n"
"If multiple are assignable the build fails with `AmbiguousResolutionException`.\n"
"This is very useful because your application fails fast whenever the container is not able to find an unambiguous dependency for any injection point."
msgstr ""

#: _versions/3.2/guides/cdi.adoc
msgid "Your can use programmatic lookup via  `jakarta.enterprise.inject.Instance` to resolve ambiguities at runtime and even iterate over all beans implementing a given type:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "This injection point will not result in an ambiguous dependency even if there are multiple beans that implement the `Dictionary` type."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "`jakarta.enterprise.inject.Instance` extends `Iterable`."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "Can I use setter and constructor injection?"
msgstr ""

#: _versions/3.2/guides/cdi.adoc
msgid ""
"Yes, you can.\n"
"In fact, in CDI the \"setter injection\" is superseded by more powerful https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#initializer_methods[initializer methods, window=\"_blank\"].\n"
"Initializers may accept multiple parameters and don't have to follow the JavaBean naming conventions."
msgstr ""

#. type: Block title
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "Initialized and Constructor Injection Example"
msgstr ""

#: _versions/3.2/guides/cdi.adoc
msgid ""
"This is a constructor injection.\n"
"In fact, this code would not work in regular CDI implementations where a bean with a normal scope must always declare a no-args constructor and the bean constructor must be annotated with `@Inject`.\n"
"However, in Quarkus we detect the absence of no-args constructor and \"add\" it directly in the bytecode.\n"
"It's also not necessary to add `@Inject` if there is only one constructor present."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "An initializer method must be annotated with `@Inject`."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "An initializer may accept multiple parameters - each one is an injection point."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "You talked about some qualifiers?"
msgstr ""

#: _versions/3.2/guides/cdi.adoc
msgid ""
"https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#qualifiers[Qualifiers, window=\"_blank\"] are annotations that help the container to distinguish beans that implement the same type.\n"
"As we already said a bean is assignable to an injection point if it has all the required qualifiers.\n"
"If you declare no qualifier at an injection point the `@Default` qualifier is assumed."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "A qualifier type is a Java annotation defined as `@Retention(RUNTIME)` and annotated with the `@jakarta.inject.Qualifier` meta-annotation:"
msgstr ""

#. type: Block title
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "Qualifier Example"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "The qualifiers of a bean are declared by annotating the bean class or producer method or field with the qualifier types:"
msgstr ""

#. type: Block title
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "Bean With Custom Qualifier Example"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "`@Superior` is a https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#defining_qualifier_types[qualifier annotation, window=\"_blank\"]."
msgstr ""

#: _versions/3.2/guides/cdi.adoc
msgid ""
"This bean would be assignable to `@Inject @Superior Translator` and `@Inject @Superior SuperiorTranslator` but not to `@Inject Translator`.\n"
"The reason is that `@Inject Translator` is automatically transformed to `@Inject @Default Translator` during typesafe resolution.\n"
"And since our `SuperiorTranslator` does not declare `@Default` only the original `Translator` bean is assignable."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "Looks good. What is the bean scope?"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "The scope of a bean determines the lifecycle of its instances, i.e. when and where an instance should be created and destroyed."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "Every bean has exactly one scope."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "What scopes can I actually use in my Quarkus application?"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "You can use all the built-in scopes mentioned by the specification except for `jakarta.enterprise.context.ConversationScoped`."
msgstr ""

#. type: Table
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "Annotation"
msgstr ""

#: _versions/3.2/guides/cdi.adoc
msgid "Description"
msgstr ""

#. type: Table
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "`@jakarta.enterprise.context.ApplicationScoped`"
msgstr ""

#. type: Table
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "A single bean instance is used for the application and shared among all injection points. The instance is created lazily, i.e. once a method is invoked upon the xref:client_proxies[client proxy]."
msgstr ""

#. type: Table
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "`@jakarta.inject.Singleton`"
msgstr ""

#. type: Table
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "Just like `@ApplicationScoped` except that no client proxy is used. The instance is created when an injection point that resolves to a @Singleton bean is being injected."
msgstr ""

#. type: Table
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "`@jakarta.enterprise.context.RequestScoped`"
msgstr ""

#. type: Table
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "The bean instance is associated with the current _request_ (usually an HTTP request)."
msgstr ""

#. type: Table
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "`@jakarta.enterprise.context.Dependent`"
msgstr ""

#. type: Table
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "This is a pseudo-scope. The instances are not shared and every injection point spawns a new instance of the dependent bean. The lifecycle of dependent bean is bound to the bean injecting it - it will be created and destroyed along with the bean injecting it."
msgstr ""

#. type: Table
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "`@jakarta.enterprise.context.SessionScoped`"
msgstr ""

#. type: Table
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "This scope is backed by a `jakarta.servlet.http.HttpSession` object. It's only available if the `quarkus-undertow` extension is used."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "There can be other custom scopes provided by Quarkus extensions. For example, xref:transaction.adoc[`quarkus-narayana-jta`] provides xref:transaction.adoc#transaction-scope[`jakarta.transaction.TransactionScoped`]."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "`@ApplicationScoped` and `@Singleton` look very similar. Which one should I choose for my Quarkus application?"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "It depends ;-)."
msgstr ""

#: _versions/3.2/guides/cdi.adoc
msgid ""
"A `@Singleton` bean has no xref:client_proxies[client proxy] and hence an instance is _created eagerly_ when the bean is injected. By contrast, an instance of an `@ApplicationScoped` bean is _created lazily_, i.e.\n"
"when a method is invoked upon an injected instance for the first time."
msgstr ""

#: _versions/3.2/guides/cdi.adoc
msgid ""
"Furthermore, client proxies only delegate method invocations and thus you should never read/write fields of an injected `@ApplicationScoped` bean directly.\n"
"You can read/write fields of an injected `@Singleton` safely."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "`@Singleton` should have a slightly better performance because the is no indirection (no proxy that delegates to the current instance from the context)."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "On the other hand, you cannot mock `@Singleton` beans using xref:getting-started-testing.adoc#quarkus_mock[QuarkusMock]."
msgstr ""

#: _versions/3.2/guides/cdi.adoc
msgid ""
"`@ApplicationScoped` beans can be also destroyed and recreated at runtime.\n"
"Existing injection points just work because the injected proxy delegates to the current instance."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "Therefore, we recommend to stick with `@ApplicationScoped` by default unless there's a good reason to use `@Singleton`."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "I don't understand the concept of client proxies."
msgstr ""

#: _versions/3.2/guides/cdi.adoc
msgid ""
"Indeed, the https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#client_proxies[client proxies, window=\"_blank\"] could be hard to grasp, but they provide some useful functionality.\n"
"A client proxy is basically an object that delegates all method invocations to a target bean instance.\n"
"It's a container construct that implements `io.quarkus.arc.ClientProxy` and extends the bean class."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "Client proxies only delegate method invocations. So never read or write a field of a normal scoped bean, otherwise you will work with non-contextual or stale data."
msgstr ""

#. type: Block title
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "Generated Client Proxy Example"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "The `Translator_ClientProxy` instance is always injected instead of a direct reference to a https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#contextual_instance[contextual instance, window=\"_blank\"] of the `Translator` bean."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "Client proxies allow for:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "Lazy instantiation - the instance is created once a method is invoked upon the proxy."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "Ability to inject a bean with \"narrower\" scope to a bean with \"wider\" scope; i.e. you can inject a `@RequestScoped` bean into an `@ApplicationScoped` bean."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "Circular dependencies in the dependency graph. Having circular dependencies is often an indication that a redesign should be considered, but sometimes it's inevitable."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "In rare cases it's practical to destroy the beans manually. A direct injected reference would lead to a stale bean instance."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "OK. You said that there are several kinds of beans?"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "Yes. In general, we distinguish:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "Class beans"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "Producer methods"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "Producer fields"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "Synthetic beans"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "Synthetic beans are usually provided by extensions. Therefore, we are not going to cover them in this guide."
msgstr ""

#: _versions/3.2/guides/cdi.adoc
msgid ""
"Producer methods and fields are useful if you need additional control over instantiation of a bean.\n"
"They are also useful when integrating third-party libraries where you don't control the class source and may not add additional annotations etc."
msgstr ""

#. type: Block title
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "Producers Example"
msgstr ""

#: _versions/3.2/guides/cdi.adoc
msgid ""
"The container analyses the field annotations to build a bean metadata.\n"
"The _type_ is used to build the set of bean types.\n"
"In this case, it will be `double` and `java.lang.Object`.\n"
"No scope annotation is declared and so it's defaulted to `@Dependent`."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "The container will read this field when creating the bean instance."
msgstr ""

#: _versions/3.2/guides/cdi.adoc
msgid ""
"The container analyses the method annotations to build a bean metadata.\n"
"The _return type_ is used to build the set of bean types.\n"
"In this case, it will be `List<String>`, `Collection<String>`, `Iterable<String>` and `java.lang.Object`.\n"
"No scope annotation is declared and so it's defaulted to `@Dependent`."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "The container will call this method when creating the bean instance."
msgstr ""

#: _versions/3.2/guides/cdi.adoc
msgid ""
"There's more about producers.\n"
"You can declare qualifiers, inject dependencies into the producer methods parameters, etc.\n"
"You can read more about producers for example in the https://docs.jboss.org/weld/reference/latest/en-US/html/producermethods.html[Weld docs, window=\"_blank\"]."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "OK, injection looks cool. What other services are provided?"
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "Lifecycle Callbacks"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "A bean class may declare lifecycle `@PostConstruct` and `@PreDestroy` callbacks:"
msgstr ""

#. type: Block title
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "Lifecycle Callbacks Example"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "This callback is invoked before the bean instance is put into service. It is safe to perform some initialization here."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "This callback is invoked before the bean instance is destroyed. It is safe to perform some cleanup tasks here."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "It's a good practice to keep the logic in the callbacks \"without side effects\", i.e. you should avoid calling other beans inside the callbacks."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "Interceptors"
msgstr ""

#: _versions/3.2/guides/cdi.adoc
msgid ""
"Interceptors are used to separate cross-cutting concerns from business logic.\n"
"There is a separate specification - Java Interceptors - that defines the basic programming model and semantics."
msgstr ""

#. type: Block title
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "Simple Interceptor Binding Example"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "This is an interceptor binding annotation. See the following examples for how it's used."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "An interceptor binding annotation is always put on the interceptor type, and may be put on target types or methods."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "Interceptor bindings are often `@Inherited`, but don't have to be."
msgstr ""

#. type: Block title
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "Simple Interceptor Example"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "The interceptor binding annotation is used to bind our interceptor to a bean. Simply annotate a bean class with `@Logged`, as in the following example."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "`Priority` enables the interceptor and affects the interceptor ordering. Interceptors with smaller priority values are called first."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "Marks an interceptor component."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "An interceptor may inject dependencies."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "`AroundInvoke` denotes a method that interposes on business methods."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "Proceed to the next interceptor in the interceptor chain or invoke the intercepted business method."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "Instances of interceptors are dependent objects of the bean instance they intercept, i.e. a new interceptor instance is created for each intercepted bean."
msgstr ""

#. type: Block title
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "Simple Example of Interceptor Usage"
msgstr ""

#: _versions/3.2/guides/cdi.adoc
msgid ""
"The interceptor binding annotation is put on a bean class so that all business methods are intercepted.\n"
"The annotation can also be put on individual methods, in which case, only the annotated methods are intercepted."
msgstr ""

#: _versions/3.2/guides/cdi.adoc
msgid ""
"Remember that the `@Logged` annotation is `@Inherited`.\n"
"If there's a bean class that inherits from `MyService`, the `LoggingInterceptor` will also apply to it."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "Decorators"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "Decorators are similar to interceptors, but because they implement interfaces with business semantics, they are able to implement business logic."
msgstr ""

#. type: Block title
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "Simple Decorator Example"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "`@Priority` enables the decorator. Decorators with smaller priority values are called first."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "`@Decorator` marks a decorator component."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "The set of decorated types includes all bean types which are Java interfaces, except for `java.io.Serializable`."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "Each decorator must declare exactly one _delegate injection point_. The decorator applies to beans that are assignable to this delegate injection point."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "Decorators can inject other beans."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "The decorator may invoke any method of the delegate object. And the container invokes either the next decorator in the chain or the business method of the intercepted instance."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "Instances of decorators are dependent objects of the bean instance they intercept, i.e. a new decorator instance is created for each intercepted bean."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "Events and Observers"
msgstr ""

#: _versions/3.2/guides/cdi.adoc
msgid ""
"Beans may also produce and consume events to interact in a completely decoupled fashion.\n"
"Any Java object can serve as an event payload.\n"
"The optional qualifiers act as topic selectors."
msgstr ""

#. type: Block title
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "Simple Event Example"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "`jakarta.enterprise.event.Event` is used to fire events."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "Fire the event synchronously."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "This method is notified when a `TaskCompleted` event is fired."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/cdi.adoc
msgid "For more info about events/observers visit https://docs.jboss.org/weld/reference/latest/en-US/html/events.html[Weld docs, window=\"_blank\"]."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/cdi.adoc
#, no-wrap
msgid "Conclusion"
msgstr "解决方案"

#: _versions/3.2/guides/cdi.adoc
msgid ""
"In this guide, we've covered some basic topics of the Quarkus programming model that is based on the https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html[Jakarta Contexts and Dependency Injection 4.0, window=\"_blank\"] specification.\n"
"Quarkus implements the CDI Lite specification, but not CDI Full.\n"
"See also xref:cdi-reference.adoc#supported_features[the list of supported features] and xref:cdi-reference.adoc#limitations[the list of limitations].\n"
"There are also quite a few xref:cdi-reference.adoc#nonstandard_features[non-standard features] and xref:cdi-reference.adoc#build_time_apis[Quarkus-specific APIs]."
msgstr ""

#: _versions/3.2/guides/cdi.adoc
msgid ""
"If you wish to learn more about Quarkus-specific features and limitations there is a Quarkus xref:cdi-reference.adoc[CDI Reference Guide].\n"
"We also recommend you to read the https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html[CDI specification] and the https://docs.jboss.org/weld/reference/latest/en-US/html/[Weld documentation] (Weld is a CDI Reference Implementation) to get acquainted with more complex topics."
msgstr ""
