# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-08-28 16:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/3.2/guides/funqy.adoc
#, fuzzy, no-wrap
msgid "Funqy"
msgstr "趣多多"

#: _versions/3.2/guides/funqy.adoc
#, fuzzy
msgid ""
"Quarkus Funqy is part of Quarkus's serverless strategy and aims to provide a portable Java API to write functions\n"
"deployable to various FaaS environments like AWS Lambda, Azure Functions, Google Cloud Functions, Knative, and Knative Events (Cloud Events).\n"
"It is also usable as a standalone service."
msgstr "Quarkus Funqy 是 Quarkus 无服务器战略的一部分，旨在提供一个可移植的 Java API，用于编写可部署到各种 FaaS 环境（如 AWS Lambda、Azure Functions、Google Cloud Functions、Knative 和 Knative Events (Cloud Events)）的函数。它也可作为独立服务使用。"

#: _versions/3.2/guides/funqy.adoc
#, fuzzy
msgid ""
"Because Funqy is an abstraction that spans multiple different cloud/function providers\n"
"and protocols it has to be a very simple API and thus, might not have all the features you are used\n"
"to in other remoting abstractions.  A nice side effect though is that Funqy is as optimized and\n"
"as small as possible.  This means that because Funqy sacrifices a little on flexibility, you'll\n"
"get a framework that has little to no overhead."
msgstr "由于 Funqy 是一个跨越多个不同云/功能提供商和协议的抽象，它必须是一个非常简单的应用程序接口，因此可能不具备您在其他远程抽象中习惯使用的所有功能。不过，一个很好的副作用是，Funqy 经过了优化，而且尽可能小巧。这意味着，虽然 Funqy 在灵活性方面做出了一些牺牲，但您将获得一个几乎没有开销的框架。"

#. type: Title ==
#: _versions/3.2/guides/funqy.adoc
#, fuzzy, no-wrap
msgid "Funqy Basics"
msgstr "基础知识"

#: _versions/3.2/guides/funqy.adoc
#, fuzzy
msgid ""
"The Funqy API is simple.  Annotate a method with `@Funq`.  This method may only have one optional input parameter\n"
"and may or may not return a response."
msgstr "Funqy API 非常简单。用 `@Funq` 注释一个方法。该方法可能只有一个可选输入参数，可能返回也可能不返回响应。"

#: _versions/3.2/guides/funqy.adoc
#, fuzzy
msgid ""
"Java classes can also be used as input and output and must follow the Java bean convention and have\n"
"a default constructor.  The Java type that is declared as the parameter or return type is the type that will be\n"
"expected by the Funqy runtime.  Funqy does type introspection at build time to speed up boot time, so any derived types\n"
"will not be noticed by the Funqy marshalling layer at runtime."
msgstr "Java 类也可用作输入和输出，且必须遵循 Java Bean 惯例并具有默认构造函数。声明为参数或返回类型的 Java 类型是 Funqy 运行时所期望的类型。Funqy 会在构建时进行类型自省，以加快启动速度，因此任何派生类型在运行时都不会被 Funqy marshalling 层注意到。"

#. type: Plain text
#: _versions/3.2/guides/funqy.adoc
#, fuzzy
msgid "Here's an example of using a POJO as input and output types."
msgstr "下面是一个使用POJO作为输入和输出类型的例子。"

#. type: Title ==
#: _versions/3.2/guides/funqy.adoc
#, fuzzy, no-wrap
msgid "Async Reactive Types"
msgstr "异步反应式类型"

#: _versions/3.2/guides/funqy.adoc
#, fuzzy
msgid ""
"Funqy supports the https://smallrye.io/smallrye-mutiny[Smallrye Mutiny] `Uni` reactive type as a return type.  The only requirement is that\n"
"the `Uni` must fill out the generic type."
msgstr "Funqy 支持将 link:https://smallrye.io/smallrye-mutiny[Smallrye Mutiny] `Uni` 反应类型作为返回类型。唯一的要求是 `Uni` 必须填写通用类型。"

#. type: Title ==
#: _versions/3.2/guides/funqy.adoc
#, fuzzy, no-wrap
msgid "Function Names"
msgstr "功能名称"

#: _versions/3.2/guides/funqy.adoc
#, fuzzy
msgid ""
"The function name defaults to the method name and is case-sensitive.  If you want your function referenced by a different name,\n"
"parameterize the `@Funq` annotation as follows:"
msgstr "函数名默认为方法名，且区分大小写。如果希望使用不同的名称引用函数，请按如下方式参数化 `@Funq` 注解："

#. type: Title ==
#: _versions/3.2/guides/funqy.adoc
#, fuzzy, no-wrap
msgid "Funqy DI"
msgstr "Funqy DI"

#: _versions/3.2/guides/funqy.adoc
#, fuzzy
msgid ""
"Each Funqy Java class is a Quarkus Arc component and supports dependency injection through\n"
"CDI or Spring DI.  Spring DI requires including the `quarkus-spring-di` dependency in your build."
msgstr "每个 Funqy Java 类都是 Quarkus Arc 组件，支持通过 CDI 或 Spring DI 进行依赖注入。Spring DI 要求在构建时包含 `quarkus-spring-di` 依赖关系。"

#. type: Plain text
#: _versions/3.2/guides/funqy.adoc
#, fuzzy
msgid "The default object lifecycle for a Funqy class is `@Dependent`."
msgstr "Funqy类的默认对象生命周期是 `@Dependent` 。"

#. type: Title ==
#: _versions/3.2/guides/funqy.adoc
#, fuzzy, no-wrap
msgid "Context injection"
msgstr "语境注入"

#: _versions/3.2/guides/funqy.adoc
#, fuzzy
msgid ""
"The Funqy API will usually not allow you to inject or use abstractions that\n"
"are specific to a protocol (i.e. HTTP) or function API (i.e. AWS Lambda).  There are\n"
"exceptions to the rule though, and you may be able to inject\n"
"contextual information that is specific to the environment you are deploying in."
msgstr "Funqy API 通常不允许您注入或使用特定于协议（如 HTTP）或函数 API（如 AWS Lambda）的抽象。但也有例外情况，您可以注入特定于部署环境的上下文信息。"

#. type: Plain text
#: _versions/3.2/guides/funqy.adoc
#, fuzzy
msgid "We do not recommend injecting contextual information specific to a runtime.  Keep your functions portable."
msgstr "我们不建议注入特定于运行时的上下文信息。保持你的函数的可移植性。"

#: _versions/3.2/guides/funqy.adoc
#, fuzzy
msgid ""
"Contextual information is injected via the `@Context` annotation which can be used on a function parameter\n"
"or a class field.  A good example is the `io.quarkus.funqy.knative.events.CloudEvent` interface that comes with our Funqy\n"
"Knative Cloud Events integration:"
msgstr "上下文信息可通过 `@Context` 注释注入，该注解可用于函数参数或类字段。我们的 Funqy Knative Cloud Events 集成所配备的 `io.quarkus.funqy.knative.events.CloudEvent` 接口就是一个很好的例子："

#. type: Title ==
#: _versions/3.2/guides/funqy.adoc
#, fuzzy, no-wrap
msgid "Should I Use Funqy?"
msgstr "我应该使用Funqy吗？"

#: _versions/3.2/guides/funqy.adoc
#, fuzzy
msgid ""
"REST over HTTP has become a very common way to write services over the past decade.  While Funqy\n"
"has an HTTP binding it is not a replacement for REST.  Because Funqy has to work across a variety\n"
"of protocols and function cloud platforms, it is very minimalistic and constrained.  For example, if you\n"
"use Funqy you lose the ability to link (think URIs) to the data your functions spit out.  You also\n"
"lose the ability to leverage cool HTTP features like `cache-control` and conditional GETs.  Many\n"
"developers will be ok with that as many won't be using these REST/HTTP features or styles. You'll\n"
"have to make the decision on what camp you are in.  Quarkus does support REST integration (through Jakarta REST,\n"
" Spring MVC, Vert.x Web, and Servlet) with\n"
"various cloud/function providers, but there are some disadvantages of using that approach as well.  For example,\n"
"if you want to do xref:amazon-lambda-http.adoc[HTTP with AWS Lambda], this requires you to use the AWS API Gateway which may\n"
"slow down deployment and cold start time or even cost you more."
msgstr "在过去十年中，HTTP REST 已成为编写服务的常用方法。虽然 Funqy 具有 HTTP 绑定功能，但它并不能取代 REST。由于 Funqy 必须在各种协议和功能云平台之间工作，因此它非常简约和受限。例如，如果使用 Funqy，就会失去链接（URI）到函数吐出的数据的能力。此外，您还将失去利用酷 HTTP 功能（如 `cache-control` 和条件 GET）的能力。许多开发人员对此并不在意，因为他们中的许多人都不会使用这些 REST/HTTP 功能或样式。你必须决定自己属于哪个阵营。Quarkus 确实支持与各种云/功能提供商进行 REST 集成（通过 Jakarta REST、Spring MVC、Vert.x Web 和 Servlet），但使用这种方法也有一些缺点。例如，如果你想使用 xref:amazon-lambda-http.adoc[AWS Lambda] 进行 xref:amazon-lambda-http.adoc[HTTP] 操作，就需要使用 AWS API Gateway，这可能会减慢部署速度和冷启动时间，甚至增加成本。"

#: _versions/3.2/guides/funqy.adoc
#, fuzzy
msgid ""
"The purpose of Funqy is to allow you to write cross-provider functions so that you can move\n"
"off of your current function provider if, for instance, they start charging you a lot more for their\n"
"service.  Another reason you might not want to use Funqy is if you need access specific APIs of the\n"
"target function environment.  For example, developers often want access to the AWS Context on\n"
"Lambda.  In this case, we tell them they may be better off using the xref:amazon-lambda.adoc[Quarkus Amazon Lambda] integration instead."
msgstr "Funqy 的目的是让您可以编写跨提供商的函数，以便在当前的函数提供商开始向您收取更高的服务费时，您可以离开他们。不想使用 Funqy 的另一个原因是，你需要访问目标函数环境的特定 API。例如，开发人员经常希望访问 Lambda 上的 AWS Context。在这种情况下，我们会告诉他们最好使用 xref:amazon-lambda.adoc[Quarkus Amazon Lambda] 集成。"
