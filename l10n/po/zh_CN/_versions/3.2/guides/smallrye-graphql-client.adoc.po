# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-08-28 16:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy, no-wrap
msgid "SmallRye GraphQL Client"
msgstr "SmallRye GraphQL客户端"

#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"This guide demonstrates how your Quarkus application can use the GraphQL client library.\n"
"The client is implemented by the https://github.com/smallrye/smallrye-graphql/[SmallRye GraphQL] project.\n"
"This guide is specifically geared towards the client side, so if you need an introduction to GraphQL in\n"
"general, first refer to the xref:smallrye-graphql.adoc[SmallRye GraphQL guide], which provides an introduction\n"
"to the GraphQL query language, general concepts and server-side development."
msgstr "本指南演示了 Quarkus 应用程序如何使用 GraphQL 客户端库。客户端由 link:https://github.com/smallrye/smallrye-graphql/[SmallRye Graph] QL 项目实现。本指南专门针对客户端，因此如果你需要一般的 GraphQL 介绍，请先参考 xref:smallrye-graphql.adoc[SmallRye GraphQL 指南] ，其中介绍了 GraphQL 查询语言、一般概念和服务器端开发。"

#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"The guide will walk you through developing and running a simple application that uses both supported\n"
"types of GraphQL clients to retrieve data from a remote resource, that being a database related to Star Wars.\n"
"It's available at https://graphql.org/swapi-graphql[this webpage] if you want to experiment with it manually.\n"
"The web UI allows you to write and execute GraphQL queries against it."
msgstr "本指南将指导您开发并运行一个简单的应用程序，该应用程序使用两种受支持的 GraphQL 客户端类型从远程资源（即与星球大战相关的数据库）检索数据。如果您想进行手动实验，可以访问该 link:https://graphql.org/swapi-graphql[网页] 。通过网页用户界面，您可以编写并执行 GraphQL 查询。"

#. type: Title ==
#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy, no-wrap
msgid "GraphQL client types introduction"
msgstr "GraphQL客户端类型介绍"

#. type: Plain text
#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid "Two types of GraphQL clients are supported."
msgstr "支持两种类型的GraphQL客户端。"

#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"The *typesafe* client works very much like the MicroProfile REST Client adjusted for calling GraphQL endpoints.\n"
"A client instance is basically a proxy that you can call like a regular Java object, but under the hood,\n"
"the call will be translated to a GraphQL operation. It works with domain classes directly.\n"
"Any input and output objects for the operation will be translated to/from their representations\n"
"in the GraphQL query language."
msgstr "*typesafe* 客户端的工作原理与 MicroProfile REST 客户端非常相似，都是为调用 GraphQL 端点而调整的。客户端实例基本上是一个代理，您可以像调用普通 Java 对象一样调用它，但在引擎盖下，调用将被转换为 GraphQL 操作。它可直接与域类一起工作。操作的任何输入和输出对象都将转换为 GraphQL 查询语言中的表示形式。"

#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"The *dynamic* client, on the other hand, works rather like an equivalent of the Jakarta REST client\n"
"from the `jakarta.ws.rs.client` package. It does not require the domain classes to work, it works with\n"
"abstract representations of GraphQL documents instead. Documents are built using a domain-specific language (DSL).\n"
"The exchanged objects are treated as an abstract `JsonObject`, but, when necessary,\n"
"it is possible to convert them to concrete model objects (if suitable model classes are available)."
msgstr "另一方面， *动态* 客户端的工作原理与 `jakarta.ws.rs.client` 软件包中的 Jakarta REST 客户端相当。它不需要使用领域类，而是使用 GraphQL 文档的抽象表示。文档使用特定领域语言（DSL）构建。交换的对象被视为抽象的 `JsonObject` ，但在必要时，可以将它们转换为具体的模型对象（如果有合适的模型类）。"

#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"The typesafe client can be viewed as a rather high-level and more declarative approach designed for ease of use,\n"
"whereas the dynamic client is lower-level, more imperative, somewhat more verbose to use, but allows finer grained\n"
"control over operations and responses."
msgstr "类型安全客户端可以被看作是一种相当高级的、声明性更强的方法，目的是为了方便使用；而动态客户端的级别较低、命令性更强，使用起来略显繁琐，但允许对操作和响应进行更精细的控制。"

#. type: Title ==
#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#: _versions/3.2/guides/smallrye-graphql-client.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#. type: Plain text
#: _versions/3.2/guides/smallrye-graphql-client.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库： `git clone {quickstarts-clone-url}` ，或者下载 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid "The solution is located in the `microprofile-graphql-client-quickstart` link:{quickstarts-tree-url}/microprofile-graphql-client-quickstart[directory]."
msgstr "该解决方案位于 `microprofile-graphql-client-quickstart` {quickstarts-tree-url}/microprofile-graphql-client-quickstart[目录]中。"

#. type: Title ==
#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, no-wrap
msgid "Creating the Maven Project"
msgstr "创建Maven项目"

#. type: Plain text
#: _versions/3.2/guides/smallrye-graphql-client.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"This command generates a project, importing the `smallrye-graphql-client` extension, and also the `resteasy-reactive`\n"
"extension, because we will use that too - a REST endpoint will be the entrypoint to allow you to manually trigger\n"
"the GraphQL client to do its work."
msgstr "该命令将生成一个项目，导入 `smallrye-graphql-client` 扩展和 `resteasy-reactive` 扩展，因为我们也将使用该扩展--REST 端点将作为入口点，以便手动触发 GraphQL 客户端执行工作。"

#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"If you already have your Quarkus project configured, you can add the `smallrye-graphql-client` extension\n"
"to your project by running the following command in your project base directory:"
msgstr "如果已经配置了 Quarkus 项目，可以在项目基本目录下运行以下命令，将 `smallrye-graphql-client` 扩展添加到项目中："

#. type: Plain text
#: _versions/3.2/guides/smallrye-graphql-client.adoc
msgid "This will add the following to your build file:"
msgstr "这会将以下内容添加到你的构建文件中:"

#. type: Block title
#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy, no-wrap
msgid "The application"
msgstr "申请"

#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"The application we will build makes use of both types of GraphQL clients. In both cases,\n"
"they will connect to the Star Wars service at https://graphql.org/swapi-graphql[SWAPI] and\n"
"query it for a list of Star Wars films, and, for each film, the names of the planets which\n"
"appear in that film."
msgstr "我们要构建的应用程序将使用这两种类型的 GraphQL 客户端。在这两种情况下，它们都将连接到 link:https://graphql.org/swapi-graphql[SWAPI] 的星球大战服务，并查询星球大战电影列表，以及每部电影中出现的星球名称。"

#. type: Plain text
#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid "The corresponding GraphQL query looks like this:"
msgstr "相应的GraphQL查询看起来像这样。"

#. type: Plain text
#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid "You may go to https://graphql.org/swapi-graphql[the webpage] to execute this query manually."
msgstr "你可以到 link:https://graphql.org/swapi-graphql[网页] 上手动执行这个查询。"

#. type: Title ==
#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy, no-wrap
msgid "Using the Typesafe client"
msgstr "使用Typesafe客户端"

#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"To use the typesafe client, we need the corresponding model classes that are compatible with\n"
"the schema. There are two ways to obtain them. First is to  use the client generator offered by SmallRye GraphQL,\n"
"which generates classes from the schema document and a list of queries. This generator is considered highly\n"
"experimental for now, and is not covered in this example. If interested, refer to the\n"
"https://github.com/smallrye/smallrye-graphql/tree/main/client/generator[Client Generator] and its documentation."
msgstr "要使用类型安全客户端，我们需要与模式兼容的相应模型类。有两种方法可以获得它们。第一种是使用 SmallRye GraphQL 提供的客户端生成器，它可以从模式文档和查询列表中生成类。该生成器目前还处于高度试验阶段，本示例中不涉及。如有兴趣，请参阅 link:https://github.com/smallrye/smallrye-graphql/tree/main/client/generator[客户端生成器] 及其文档。"

#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"In this example, we will create a slimmed down version of the model classes manually, with only the fields\n"
"that we need, and ignore all the stuff that we don't need. We will need the classes for `Film` and `Planet`.\n"
"But, the service is also using specific wrappers named `FilmConnection` and `PlanetConnection`, which,\n"
"for our purpose, will serve just to contain the actual list of `Film` and `Planet` instances, respectively."
msgstr "在本例中，我们将手动创建一个精简版的模型类，只包含我们需要的字段，而忽略所有我们不需要的内容。我们需要 `Film` 和 `Planet` 的类。但是，该服务还使用了名为 `FilmConnection` 和 `PlanetConnection` 的特定封装器，对于我们的目的来说，这两个封装器将分别用于包含 `Film` 和 `Planet` 实例的实际列表。"

#. type: Plain text
#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid "Let's create all the model classes and put them into the `org.acme.microprofile.graphql.client.model` package:"
msgstr "让我们创建所有的模型类，并把它们放到 `org.acme.microprofile.graphql.client.model` 包中。"

#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"Now that we have the model classes, we can create the interface that represents the actual set\n"
"of operations we want to call on the remote GraphQL service."
msgstr "有了模型类之后，我们就可以创建一个接口，用来表示我们要在远程 GraphQL 服务上调用的实际操作集。"

#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"@GraphQLClientApi(configKey = \"star-wars-typesafe\")\n"
"public interface StarWarsClientApi {\n"
"\n"
"    FilmConnection allFilms();\n"
"\n"
"}"
msgstr "@GraphQLClientApi(configKey = \"star-wars-typesafe\") 公共接口 StarWarsClientApi {"

#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"For simplicity, we're only calling the query named `allFilms`. We named our corresponding method\n"
"`allFilms` too. If we named the method differently, we would need to annotate it with\n"
"`@Query(value=\"allFilms\")` to specify the name of the query that should be executed when this\n"
"method is called."
msgstr "为简单起见，我们只调用名为 `allFilms` 的查询。我们也将相应的方法命名为 `allFilms` 。如果我们以不同的方式命名该方法，就需要用 `@Query(value=\"allFilms\")` 进行注释，以指定调用该方法时应执行的查询的名称。"

#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"The client also needs some configuration, namely at least the URL of the remote service. We can either\n"
"specify that within the `@GraphQLClientApi` annotation (by setting the `endpoint` parameter),\n"
"or move this over to the configuration file, `application.properties`:"
msgstr "客户端还需要一些配置，即至少需要远程服务的 URL。我们可以在 `@GraphQLClientApi` 注释中指定（通过设置 `endpoint` 参数），或将其移至配置文件 `application.properties` ："

#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid "quarkus.smallrye-graphql-client.star-wars-typesafe.url=https://swapi-graphql.netlify.app/.netlify/functions/index"
msgstr "quarkus.smallrye-graphql-client.star-wars-typesafe.url=https://swapi-graphql.netlify.app/.netlify/functions/index"

#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"During *tests only*, the URL is an optional property, and if it's not specified, Quarkus will assume\n"
"that the target of the client is the application that is being tested (typically, `http://localhost:8081/graphql`).\n"
"This is useful if your application contains a GraphQL server-side API as well as a GraphQL client that is used for\n"
"testing the API."
msgstr "*仅在测试* 期间，URL 是一个可选属性，如果未指定，Quarkus 将假定客户端的目标是正在测试的应用程序（通常是......）、 `http://localhost:8081/graphql` ).如果你的应用程序包含一个 GraphQL 服务器端 API 以及一个用于测试 API 的 GraphQL 客户端，这将非常有用。"

#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"`star-wars-typesafe` is the name of the configured client instance, and corresponds to the `configKey`\n"
"in the `@GraphQLClientApi` annotation. If you don't want to specify a custom name, you can leave\n"
"out the `configKey`, and then refer to it by using the fully qualified name of the interface."
msgstr "`star-wars-typesafe` 是已配置客户端实例的名称，与 注释中的 相对应。如果不想指定自定义名称，可以省略 ，然后使用接口的完全限定名称来引用。 `@GraphQLClientApi` `configKey` `configKey`"

#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"Now that we have the client instance properly configured, we need a way to have it\n"
"perform something when we start the application. For that, we will use a REST endpoint that,\n"
"when called by a user, obtains the client instance and lets it execute the query."
msgstr "现在我们已经正确配置了客户端实例，我们需要一种方法让它在启动应用程序时执行一些操作。为此，我们将使用一个 REST 端点，当用户调用时，它会获取客户端实例并让它执行查询。"

#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"With this REST endpoint included in your application, you can simply send a GET request to `/typesafe`,\n"
"and the application will use an injected typesafe client instance to call the remote service, obtain\n"
"the films and planets, and return the JSON representation of the resulting list."
msgstr "在应用程序中加入 REST 端点后，只需向 `/typesafe` 发送 GET 请求，应用程序就会使用注入的 typesafe 客户端实例调用远程服务，获取电影和行星，并返回结果列表的 JSON 表示形式。"

#. type: Title ==
#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy, no-wrap
msgid "Using the Dynamic client"
msgstr "使用动态客户端"

#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"For the dynamic client, the model classes are optional, because we can work with abstract\n"
"representations of the GraphQL types and documents. The client API interface is not needed at all."
msgstr "对于动态客户端来说，模型类是可选的，因为我们可以使用 GraphQL 类型和文档的抽象表示。根本不需要客户端 API 接口。"

#. type: Plain text
#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid "We still need to configure the URL for the client, so let's put this into `application.properties`:"
msgstr "我们仍然需要为客户端配置URL，所以让我们把这个放到 `application.properties` 。"

#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid "quarkus.smallrye-graphql-client.star-wars-dynamic.url=https://swapi-graphql.netlify.app/.netlify/functions/index"
msgstr "quarkus.smallrye-graphql-client.star-wars-dynamic.url=https://swapi-graphql.netlify.app/.netlify/functions/index"

#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"We decided to name the client `star-wars-dynamic`. We will use this name when injecting a dynamic client\n"
"to properly qualify the injection point."
msgstr "我们决定将客户端命名为 `star-wars-dynamic` 。在注入动态客户端时，我们将使用这个名称来正确限定注入点。"

#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"If you need to add an authorization header, or any other custom HTTP header (in our case\n"
"it's not required), this can be done by:"
msgstr "如果您需要添加授权标头或任何其他自定义 HTTP 标头（在我们的案例中并非必需），可以通过以下方式完成："

#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid "quarkus.smallrye-graphql-client.star-wars-dynamic.header.HEADER-KEY=HEADER-VALUE\""
msgstr "quarkus.smallrye-graphql-client.star-wars-dynamic.header.HEADER-KEY=HEADER-VALUE\""

#. type: Plain text
#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid "Add this to the `StarWarsResource` created earlier:"
msgstr "将此添加到之前创建的 `StarWarsResource` 。"

#. type: Plain text
#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid "Qualifies the injection point so that we know which named client needs to be injected here."
msgstr "对注入点进行限定，以便我们知道哪个命名的客户需要在此注入。"

#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"Here we build a document representing the GraphQL query, using the provided DSL language.\n"
"We use static imports to make the code easier to read. The DSL is designed in a way that\n"
"it looks quite similar to writing a GraphQL query as a string."
msgstr "在这里，我们使用所提供的 DSL 语言创建一个表示 GraphQL 查询的文档。我们使用静态导入使代码更易于阅读。DSL 的设计方式与以字符串形式编写 GraphQL 查询非常相似。"

#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"Execute the query and block while waiting for the response. There is also an asynchronous\n"
"variant that returns a `Uni<Response>`."
msgstr "执行查询并阻塞，等待响应。还有一个异步变体，返回 `Uni<Response>` 。"

#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"Here we did the optional step of converting the response to instances of our model classes,\n"
"because we have the classes available. If you don't have the classes available or don't want to\n"
"use them, simply calling `response.getData()` would get you a `JsonObject` representing\n"
"all the returned data."
msgstr "在这里，我们做了一个可选的步骤，即把响应转换成模型类的实例，因为我们有可用的类。如果没有可用的类或不想使用这些类，只需调用 `response.getData()` 就能得到一个代表所有返回数据的 `JsonObject` 。"

#. type: Title ==
#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, no-wrap
msgid "Running the application"
msgstr "运行应用程序"

#. type: Plain text
#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid "Launch the application in dev mode using:"
msgstr "使用"

#. type: Plain text
#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid "To execute the queries, you need to send GET requests to our REST endpoint:"
msgstr "要执行查询，您需要向我们的 REST 端点发送 GET 请求："

#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"Whether you use dynamic or typesafe, the result should be the same.\n"
"If the JSON document is hard to read, you might want to run it through a tool that\n"
"formats it for better readability by humans, for example by piping the output through `jq`."
msgstr "无论使用动态还是类型安全，结果都是一样的。如果 JSON 文档难以阅读，你可能需要通过一个工具来运行它，使其格式化以提高人类的可读性，例如通过 `jq` 输出。"

#. type: Title ==
#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, no-wrap
msgid "Conclusion"
msgstr "解决方案"

#: _versions/3.2/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"This example showed how to use both the dynamic and typesafe GraphQL clients to call an external\n"
"GraphQL service and explained the difference between the client types."
msgstr "该示例展示了如何使用动态和类型安全 GraphQL 客户端调用外部 GraphQL 服务，并解释了客户端类型之间的区别。"
