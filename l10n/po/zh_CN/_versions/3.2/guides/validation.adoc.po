# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-08-28 16:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/3.2/guides/validation.adoc
#, no-wrap
msgid "Validation with Hibernate Validator"
msgstr "用Hibernate验证器进行验证"

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "This guide covers how to use Hibernate Validator/Bean Validation for:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "validating the input/output of your REST services;"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "validating the parameters and return values of the methods of your business services."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/validation.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: _versions/3.2/guides/validation.adoc
#, no-wrap
msgid "Architecture"
msgstr "架构"

#: _versions/3.2/guides/validation.adoc
msgid ""
"The application built in this guide is quite simple. The user fills a form on a web page.\n"
"The web page sends the form content to the `BookResource` as JSON (using Ajax). The `BookResource` validates the user input and returns the\n"
"_result_ as JSON."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "image:validation-guide-architecture.png[alt=Architecture]"
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/validation.adoc
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#: _versions/3.2/guides/validation.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库： `git clone {quickstarts-clone-url}` ，或者下载 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "The solution is located in the `validation-quickstart` link:{quickstarts-tree-url}/validation-quickstart[directory]."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/validation.adoc
#, no-wrap
msgid "Creating the Maven project"
msgstr "创建Maven项目"

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "This command generates a Maven structure importing the RESTEasy Reactive/Jakarta REST, Jackson and Hibernate Validator/Bean Validation extensions."
msgstr ""

#: _versions/3.2/guides/validation.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `hibernate-validator` extension\n"
"to your project by running the following command in your project base directory:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "The result of this command is dependent on your build tool:"
msgstr ""

#. type: Block title
#: _versions/3.2/guides/validation.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/3.2/guides/validation.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: _versions/3.2/guides/validation.adoc
#, no-wrap
msgid "Constraints"
msgstr ""

#: _versions/3.2/guides/validation.adoc
msgid ""
"In this application, we are going to test an elementary object, but we support complicated constraints and can validate graphs of objects.\n"
"Create the `org.acme.validation.Book` class with the following content:"
msgstr ""

#: _versions/3.2/guides/validation.adoc
msgid ""
"Constraints are added on fields, and when an object is validated, the values are checked.\n"
"The getter and setter methods are also used for JSON mapping."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/validation.adoc
#, no-wrap
msgid "JSON mapping and validation"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "Create the following REST resource as `org.acme.validation.BookResource`:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "The `Validator` instance is injected via CDI."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "Yes it does not compile, `Result` is missing, but we will add it very soon."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "The method parameter (`book`) is created from the JSON payload automatically."
msgstr ""

#: _versions/3.2/guides/validation.adoc
msgid ""
"The method uses the `Validator` instance to check the payload.\n"
"It returns a set of violations.\n"
"If this set is empty, it means the object is valid.\n"
"In case of failures, the messages are concatenated and sent back to the browser."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "Let's now create the `Result` class as an inner class:"
msgstr ""

#: _versions/3.2/guides/validation.adoc
msgid ""
"The class is very simple and only contains 2 fields and the associated getters and setters.\n"
"Because we indicate that we produce JSON, the mapping to JSON is made automatically."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/validation.adoc
#, no-wrap
msgid "REST end point validation"
msgstr ""

#: _versions/3.2/guides/validation.adoc
msgid ""
"While using the `Validator` manually might be useful for some advanced usage,\n"
"if you simply want to validate the parameters or the return value or your REST end point,\n"
"you can annotate it directly, either with constraints (`@NotNull`, `@Digits`...)\n"
"or with `@Valid` (which will cascade the validation to the bean)."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "Let's create an end point validating the `Book` provided in the request:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "As you can see, we don't have to manually validate the provided `Book` anymore as it is automatically validated."
msgstr ""

#: _versions/3.2/guides/validation.adoc
msgid ""
"If a validation error is triggered, a violation report is generated and serialized as JSON as our end point produces a JSON output.\n"
"It can be extracted and manipulated to display a proper error message."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/validation.adoc
#, no-wrap
msgid "Service method validation"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "It might not always be handy to have the validation rules declared at the end point level as it could duplicate some business validation."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "The best option is then to annotate a method of your business service with your constraints (or in our particular case with `@Valid`):"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "Calling the service in your rest end point triggers the `Book` validation automatically:"
msgstr ""

#: _versions/3.2/guides/validation.adoc
msgid ""
"Note that, if you want to push the validation errors to the frontend, you have to catch the exception and push the information yourselves\n"
"as they will not be automatically pushed to the JSON output."
msgstr ""

#: _versions/3.2/guides/validation.adoc
msgid ""
"Keep in mind that you usually don't want to expose to the public the internals of your services\n"
"- and especially not the validated value contained in the violation object."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/validation.adoc
#, no-wrap
msgid "A frontend"
msgstr ""

#: _versions/3.2/guides/validation.adoc
msgid ""
"Now let's add the simple web page to interact with our `BookResource`.\n"
"Quarkus automatically serves static resources contained in the `META-INF/resources` directory.\n"
"In the `src/main/resources/META-INF/resources` directory, replace the `index.html` file with the content from this link:{quickstarts-blob-url}/validation-quickstart/src/main/resources/META-INF/resources/index.html[index.html] file in it."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/validation.adoc
#, no-wrap
msgid "Run the application"
msgstr "运行应用程序"

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "Now, let's see our application in action. Run it with:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "Then, open your browser to http://localhost:8080/:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "Enter the book details (valid or invalid)"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "Click on the _Try me..._ buttons to check if your data is valid using one of the methods we presented above."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "image:validation-guide-screenshot.png[alt=Application]"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "The application can be packaged using:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "and executed using `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "You can also build the native executable using:"
msgstr "您也可以用以下方法构建原生(native)可执行文件："

#. type: Title ==
#: _versions/3.2/guides/validation.adoc
#, no-wrap
msgid "Going further"
msgstr "进一步探索"

#. type: Title ===
#: _versions/3.2/guides/validation.adoc
#, no-wrap
msgid "Hibernate Validator extension and CDI"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "The Hibernate Validator extension is tightly integrated with CDI."
msgstr ""

#. type: Title ====
#: _versions/3.2/guides/validation.adoc
#, no-wrap
msgid "Configuring the ValidatorFactory"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "Sometimes, you might need to configure the behavior of the `ValidatorFactory`, for instance to use a specific `ParameterNameProvider`."
msgstr ""

#: _versions/3.2/guides/validation.adoc
msgid ""
"While the `ValidatorFactory` is instantiated by Quarkus itself,\n"
"you can very easily tweak it by declaring replacement beans that will be injected in the configuration."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "If you create a bean of the following types in your application, it will automatically be injected into the `ValidatorFactory` configuration:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "`jakarta.validation.ClockProvider`"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "`jakarta.validation.ConstraintValidator`"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "`jakarta.validation.ConstraintValidatorFactory`"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "`jakarta.validation.MessageInterpolator`"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "`jakarta.validation.ParameterNameProvider`"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "`jakarta.validation.TraversableResolver`"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "`org.hibernate.validator.spi.properties.GetterPropertySelectionStrategy`"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "`org.hibernate.validator.spi.nodenameprovider.PropertyNodeNameProvider`"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "`org.hibernate.validator.spi.scripting.ScriptEvaluatorFactory`"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "You don't have to wire anything."
msgstr ""

#. type: delimited block =
#: _versions/3.2/guides/validation.adoc
msgid "Obviously, for each listed type, you can declare only one bean."
msgstr ""

#. type: delimited block =
#: _versions/3.2/guides/validation.adoc
msgid "Most of the time, these beans should be declared as `@ApplicationScoped`."
msgstr ""

#: _versions/3.2/guides/validation.adoc
msgid ""
"However, in the case of ``ConstraintValidator``s that are dependent of attributes of the constraint annotation\n"
"(typically when implementing the `initialize(A constraintAnnotation)` method),\n"
"use the `@Dependent` scope to make sure each annotation context has a separate instance of the `ConstraintValidator` bean."
msgstr ""

#: _versions/3.2/guides/validation.adoc
msgid ""
"If customizing the `ValidatorFactory` through the available configuration properties and the CDI beans above doesn't cover your requirements,\n"
"you can customize it further by registering `ValidatorFactoryCustomizer` beans."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "For instance, you could override the built-in validator enforcing the `@Email` constraint and use `MyEmailValidator` instead with the following class:"
msgstr ""

#: _versions/3.2/guides/validation.adoc
msgid ""
"All beans implementing `ValidatorFactoryCustomizer` are applied, meaning you can have several of them.\n"
"If you need to enforce some ordering, you can use the usual `@jakarta.annotation.Priority` annotation - beans with higher priority are applied first."
msgstr ""

#. type: Title ====
#: _versions/3.2/guides/validation.adoc
#, no-wrap
msgid "Constraint validators as beans"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "You can declare your constraint validators as CDI beans:"
msgstr ""

#: _versions/3.2/guides/validation.adoc
msgid ""
"When initializing a constraint validator of a given type,\n"
"Quarkus will check if a bean of this type is available and, if so, it will use it instead of instantiating a `ConstraintValidator`."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "Thus, as demonstrated in our example, you can fully use injection in your constraint validator beans."
msgstr ""

#. type: delimited block =
#: _versions/3.2/guides/validation.adoc
msgid "The scope you choose for your `ConstraintValidator` bean is important:"
msgstr ""

#. type: delimited block =
#: _versions/3.2/guides/validation.adoc
msgid "If the same instance of the `ConstraintValidator` bean can be used across the whole application, use the `@ApplicationScoped` scope."
msgstr ""

#. type: delimited block =
#: _versions/3.2/guides/validation.adoc
msgid "If the `ConstraintValidator` bean implements the `initialize(A constraintAnnotation)` method and depends on the state of the constraint annotation, use the `@Dependent` scope to make sure each annotation context has a separate and properly configured instance of the `ConstraintValidator` bean."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/validation.adoc
#, no-wrap
msgid "Validation and localization"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "By default, constraint violation messages will be returned in the build system locale."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "You can configure this behavior by adding the following configuration in your `application.properties`:"
msgstr ""

#: _versions/3.2/guides/validation.adoc
msgid ""
"If you are using RESTEasy Reactive or RESTEasy Classic, in the context of a Jakarta REST endpoint,\n"
"Hibernate Validator will automatically resolve the optimal locale to use from the `Accept-Language` HTTP header,\n"
"provided the supported locales have been properly specified in the `application.properties`:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "A similar mechanism exists for GraphQL services based on the `quarkus-smallrye-graphql` extension."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "If this default mechanism is not sufficient and you need a custom locale resolution, you can add additional ``org.hibernate.validator.spi.messageinterpolation.LocaleResolver``s:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "Any CDI bean implementing `org.hibernate.validator.spi.messageinterpolation.LocaleResolver` will be taken into account."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "The ``LocaleResolver``s are consulted in the order of `@Priority` (higher priority goes first)."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "A `LocaleResolver` may return null if it cannot resolve the locale, it will then be ignored."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "The first non-null locale returned by a `LocaleResolver` is the one resolved."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/validation.adoc
#, no-wrap
msgid "Validation groups for REST endpoint or service method validation"
msgstr ""

#: _versions/3.2/guides/validation.adoc
msgid ""
"It's sometimes necessary to enable different validation constraints\n"
"for the same class when it's passed to a different method."
msgstr ""

#: _versions/3.2/guides/validation.adoc
msgid ""
"For example, a `Book` may need to have a `null` identifier when passed to the `post` method\n"
"(because the identifier will be generated),\n"
"but a non-`null` identifier when passed to the `put` method\n"
"(because the method needs the identifier to know what to update)."
msgstr ""

#: _versions/3.2/guides/validation.adoc
msgid ""
"To address this, you can take advantage of validation groups.\n"
"Validation groups are markers that you put on your constraints in order to enable or disable them at will."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "First, define the `Post` and `Put` groups, which are just Java interfaces."
msgstr ""

#: _versions/3.2/guides/validation.adoc
msgid ""
"Make the custom groups extend the `Default` group.\n"
"This means that whenever these groups are enabled, the `Default` group is also enabled.\n"
"This is useful if you have constraints that you want validated in both the `Post` and `Put` method:\n"
"you can simply use the default group on those constraints, like on the `title` property below."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "Then add the relevant constraints to `Book`, assigning the right group to each constraint:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "Finally, add a `@ConvertGroup` annotation next to your `@Valid` annotation in your validated method."
msgstr ""

#: _versions/3.2/guides/validation.adoc
msgid ""
"Enable the `Post` group, meaning only constraints assigned to the `Post` (and `Default`) groups\n"
"will be validated for the `book` parameter of the `post` method.\n"
"In this case, it means `Book.id` must be `null` and `Book.title` must not be blank."
msgstr ""

#: _versions/3.2/guides/validation.adoc
msgid ""
"Enable the `Put` group, meaning only constraints assigned to the `Put` (and `Default`) groups\n"
"will be validated for the `book` parameter of the `put` method.\n"
"In this case, it means `Book.id` must not be `null` and `Book.title` must not be blank."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/validation.adoc
#, no-wrap
msgid "Limitations"
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/validation.adoc
#, no-wrap
msgid "META-INF/validation.xml"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "Configuring the `ValidatorFactory` using a `META-INF/validation.xml` file is *NOT* supported in Quarkus."
msgstr ""

#: _versions/3.2/guides/validation.adoc
msgid ""
"At the moment, Hibernate Validator does not expose an API to extract the information from this file\n"
"so that we could register the appropriate classes for reflection."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "To configure the `ValidatorFactory`, use the exposed configuration properties and the CDI integration."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/validation.adoc
msgid "Consequently, the only way to define constraints in Quarkus is by annotating your classes."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/validation.adoc
#, no-wrap
msgid "ValidatorFactory and native executables"
msgstr ""

#: _versions/3.2/guides/validation.adoc
msgid ""
"Quarkus provides a default `ValidatorFactory` that you can customize using configuration properties.\n"
"This `ValidatorFactory` is carefully initialized to support native executables\n"
"using a bootstrap that is Quarkus-specific."
msgstr ""

#: _versions/3.2/guides/validation.adoc
msgid ""
"Creating a `ValidatorFactory` by yourself it not supported in native executables\n"
"and if you try to do so,\n"
"you will get an  error similar to `jakarta.validation.NoProviderFoundException: Unable to create a Configuration, because no\n"
"Jakarta Bean Validation provider could be found. Add a provider like Hibernate Validator (RI) to your\n"
"classpath.` when running your native executable."
msgstr ""

#: _versions/3.2/guides/validation.adoc
msgid ""
"Thus why you should always use the Quarkus-managed `ValidatorFactory` by injecting an instance of\n"
"`ValidatorFactory` or directly an instance of `Validator` using CDI injection."
msgstr ""

#: _versions/3.2/guides/validation.adoc
msgid ""
"To support some external libraries that are creating a `ValidatorFactory` using the default bootstrap,\n"
"Quarkus returns the `ValidatorFactory` managed by Quarkus when `Validation.buildDefaultValidatorFactory()`\n"
"is called."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/validation.adoc
#, no-wrap
msgid "Hibernate Validator Configuration Reference"
msgstr ""

#: _versions/3.2/guides/validation.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""
