# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-08-28 16:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy, no-wrap
msgid "Kubernetes Client"
msgstr "Kubernetes客户端"

#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid ""
"Quarkus includes the `kubernetes-client` extension which enables the use of the https://github.com/fabric8io/kubernetes-client[Fabric8 Kubernetes Client]\n"
"in native mode while also making it easier to work with."
msgstr "Quarkus 包含 `kubernetes-client` 扩展，可在原生模式下使用 link:https://github.com/fabric8io/kubernetes-client[Fabric8 Kubernetes Client] ，同时使其更易于使用。"

#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid ""
"Having a Kubernetes Client extension in Quarkus is very useful in order to unlock the power of Kubernetes Operators.\n"
"Kubernetes Operators are quickly emerging as a new class of Cloud Native applications.\n"
"These applications essentially watch the Kubernetes API and react to changes on various resources and can be used to manage the lifecycle of all kinds of complex systems like databases, messaging systems and much more.\n"
"Being able to write such operators in Java with the very low footprint that native images provide is a great match."
msgstr "Quarkus 中的 Kubernetes Client 扩展对于释放 Kubernetes Operators 的强大功能非常有用。Kubernetes 操作员正在迅速崛起，成为一类新的云原生应用。这些应用程序主要是监视 Kubernetes API，并对各种资源上的变化做出反应，可用于管理数据库、消息系统等各种复杂系统的生命周期。能够用 Java 编写此类操作符，而原生映像提供的占用空间又非常小，这是一个绝佳的搭配。"

#. type: Title ==
#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy, no-wrap
msgid "Configuration"
msgstr "配置"

#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid ""
"Once you have your Quarkus project configured you can add the `kubernetes-client` extension\n"
"to your project by running the following command in your project base directory."
msgstr "配置好 Quarkus 项目后，就可以在项目基本目录下运行以下命令，将 `kubernetes-client` 扩展添加到项目中。"

#. type: Plain text
#: _versions/3.2/guides/kubernetes-client.adoc
msgid "This will add the following to your build file:"
msgstr "这会将以下内容添加到你的构建文件中:"

#. type: Block title
#: _versions/3.2/guides/kubernetes-client.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/3.2/guides/kubernetes-client.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy, no-wrap
msgid "Usage"
msgstr "使用方法"

#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid ""
"Quarkus configures a Bean of type `KubernetesClient` which can be injected into application code using the well known CDI methods.\n"
"This client can be configured using various properties as can be seen in the following example:"
msgstr "Quarkus 配置了一个 `KubernetesClient` 类型的 Bean，可以使用众所周知的 CDI 方法将其注入到应用代码中。从下面的示例中可以看出，该客户端可以使用各种属性进行配置："

#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid "Note that the full list of properties is available in the xref:quarkus-kubernetes-client_quarkus-kubernetes-client-devservices-dev-services[Dev Services section of the configuration reference]."
msgstr "请注意，完整的属性列表可在 xref:quarkus-kubernetes-client_quarkus-kubernetes-client-devservices-dev-services[配置参考] 的 \" xref:quarkus-kubernetes-client_quarkus-kubernetes-client-devservices-dev-services[开发服务 \"部分] 找到。"

#. type: Plain text
#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid "In dev mode and when running tests, xref:kubernetes-dev-services.adoc[Dev Services for Kubernetes] automatically starts a Kubernetes API server."
msgstr "在开发模式和运行测试时， link:kubernetes-dev-services.html[Kubernetes的开发服务] 会自动启动Kubernetes API服务器。"

#. type: Title ===
#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy, no-wrap
msgid "Customizing and overriding"
msgstr "定制和重写"

#. type: Plain text
#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid "Quarkus provides multiple integration points for influencing the Kubernetes Client provided as a CDI bean."
msgstr "Quarkus提供了多个集成点来影响作为CDI bean提供的Kubernetes客户端。"

#. type: Title ====
#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy, no-wrap
msgid "Kubernetes Client Config customization"
msgstr "Kubernetes客户端"

#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid ""
"The first integration point is the use of the `io.quarkus.kubernetes.client.KubernetesConfigCustomizer` interface. When such a bean exists,\n"
"it allows for arbitrary customizations of the `io.fabric8.kubernetes.client.Config` created by Quarkus (which takes into account the `quarkus.kubernetes-client.*` properties)."
msgstr "第一个集成点是使用 `io.quarkus.kubernetes.client.KubernetesConfigCustomizer` 接口。如果存在这样一个 bean，就可以对 Quarkus 创建的 `io.fabric8.kubernetes.client.Config` 进行任意定制（它会考虑到 `quarkus.kubernetes-client.*` 的属性）。"

#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid ""
"Alternatively, application code can override the  `io.fabric8.kubernetes.client.Config` or even the `io.fabric8.kubernetes.client.KubernetesClient` bean (which are\n"
"normally provided by the extension) by simply declaring custom versions of those beans."
msgstr "另外，应用程序代码也可以覆盖 `io.fabric8.kubernetes.client.Config` 或 `io.fabric8.kubernetes.client.KubernetesClient` Bean（通常由扩展提供），只需声明这些 Bean 的自定义版本即可。"

#. type: Plain text
#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid "An example of this can be seen in the following snippet:"
msgstr "这方面的一个例子可以在下面的片段中看到。"

#. type: Title ====
#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy, no-wrap
msgid "Kubernetes Client ObjectMapper customization"
msgstr "Kubernetes客户端ObjectMapper定制"

#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid ""
"The Fabric8 Kubernetes Client uses its own `ObjectMapper` instance for serialization and deserialization of Kubernetes resources.\n"
"This mapper is provided to the client through a `KubernetesSerialization` instance that's injected into\n"
"the `KubernetesClient` bean."
msgstr "Fabric8 Kubernetes 客户端使用自己的 `ObjectMapper` 实例对 Kubernetes 资源进行序列化和反序列化。该映射器通过注入 `KubernetesClient` bean 的 `KubernetesSerialization` 实例提供给客户端。"

#. type: Plain text
#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid "If for some reason you must customize the default `ObjectMapper` bean provided by this extension and used by the Kubernetes Client, you can do so by declaring a bean that implements the `KubernetesClientObjectMapperCustomizer` interface."
msgstr "如果由于某些原因，你必须定制这个扩展提供的、由Kubernetes客户端使用的默认 `ObjectMapper` Bean，你可以通过声明一个实现 `KubernetesClientObjectMapperCustomizer` 接口的bean来实现。"

#. type: Plain text
#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid "The following code snippet contains an example of a `KubernetesClientObjectMapperCustomizer` to set the `ObjectMapper` locale:"
msgstr "下面的代码片断包含了一个设置 `KubernetesClientObjectMapperCustomizer` 的例子， `ObjectMapper` ："

#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid ""
"Furthermore, if you must replace the default `ObjectMapper` bean used by the Kubernetes Client that the extension creates automatically, you can do so by declaring a bean of type `@KubernetesClientObjectMapper`.\n"
"The following code snippet shows how you can declare this bean:"
msgstr "此外，如果必须替换扩展自动创建的 Kubernetes 客户端使用的默认 `ObjectMapper` Bean，可以通过声明 `@KubernetesClientObjectMapper` 类型的 Bean 来实现。以下代码片段展示了如何声明该 Bean："

#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid ""
"The static `io.fabric8.kubernetes.client.utils.Serialization` utils class is deprecated and should not be used.\n"
"Access to `Serialization.jsonMapper()` should be replaced by the usage of @KubernetesClientObjectMapperCustomizer` declared beans."
msgstr "静态 `io.fabric8.kubernetes.client.utils.Serialization` utils 类已被弃用，不应再使用。访问 `Serialization.jsonMapper()` 时应使用 @KubernetesClientObjectMapperCustomizer` 声明的 Bean。"

#. type: Title ==
#: _versions/3.2/guides/kubernetes-client.adoc
#, no-wrap
msgid "Testing"
msgstr "测试"

#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid ""
"To make testing against a mock Kubernetes API extremely simple, Quarkus provides the `WithKubernetesTestServer` annotation which automatically launches\n"
"a mock of the Kubernetes API server and sets the proper environment variables needed so that the Kubernetes Client configures itself to use said mock.\n"
"Tests can inject the mock server and set it up in any way necessary for the particular testing using the `@KubernetesTestServer` annotation."
msgstr "为了让针对模拟 Kubernetes API 的测试变得极其简单，Quarkus 提供了 `WithKubernetesTestServer` 注解，它可以自动启动一个模拟的 Kubernetes API 服务器，并设置所需的适当环境变量，以便 Kubernetes 客户端配置自己来使用上述模拟。测试可以注入模拟服务器，并使用 `@KubernetesTestServer` 注解以特定测试所需的任何方式对其进行设置。"

#. type: Plain text
#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid "Let's assume we have a REST endpoint defined like so:"
msgstr "让我们假设我们有一个REST端点，像这样定义。"

#. type: Plain text
#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid "We could write a test for this endpoint very easily like so:"
msgstr "我们可以非常容易地为这个端点写一个测试，就像这样。"

#. type: Plain text
#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid "Note that to take advantage of these features, the `quarkus-test-kubernetes-client` dependency needs to be added, for example like so:"
msgstr "请注意，为了利用这些功能，需要添加 `quarkus-test-kubernetes-client` 依赖关系，例如像这样。"

#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid ""
"By default, the mock server will be in CRUD mode, so you have to use the client to build your state before your application can retrieve it,\n"
"but you can also set it up in non-CRUD mode and mock all HTTP requests made to Kubernetes:"
msgstr "默认情况下，模拟服务器将处于 CRUD 模式，因此您必须在应用程序检索状态之前使用客户端构建状态，但您也可以将其设置为非 CRUD 模式，并模拟向 Kubernetes 发出的所有 HTTP 请求："

#. type: Plain text
#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid "You can also use the `setup` attribute on the `@WithKubernetesTestServer` annotation to provide a class that will configure the `KubernetesServer` instance:"
msgstr "你也可以使用 `@WithKubernetesTestServer` 注解上的 `setup` 属性来提供一个将配置 `KubernetesServer` 实例的类。"

#. type: Plain text
#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid "Alternately, you can create an extension of the `KubernetesServerTestResource` class to ensure all your `@QuarkusTest` enabled test classes share the same mock server setup via the `QuarkusTestResource` annotation:"
msgstr "另外，你可以创建一个 `KubernetesServerTestResource` 类的扩展，以确保你所有启用 `@QuarkusTest` 的测试类通过 `QuarkusTestResource` 注解共享相同的模拟服务器设置。"

#. type: Plain text
#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid "and use this in your other test classes as follows:"
msgstr "并在你的其他测试类中使用这个，如下所示。"

#. type: Title ==
#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy, no-wrap
msgid "Note on implementing or extending generic types"
msgstr "关于实现或扩展通用类型的说明"

#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid ""
"Due to the restrictions imposed by GraalVM, extra care needs to be taken when implementing or extending generic types provided by the client if the application is intended to work in native mode.\n"
"Essentially every implementation or extension of generic classes such as `Watcher`, `ResourceHandler` or `CustomResource` needs to specify their associated Kubernetes model class (or, in the case of `CustomResource`, regular Java types) at class definition time.\n"
"To better understand this, suppose we want to watch for changes to Kubernetes `Pod` resources.\n"
"There are a couple ways to write such a `Watcher` that are guaranteed to work in native:"
msgstr "由于 GraalVM 施加的限制，如果应用程序要在本地模式下运行，那么在实现或扩展客户端提供的泛型类型时需要格外小心。基本上，通用类（如 `Watcher` 、 `ResourceHandler` 或 `CustomResource` ）的每个实现或扩展都需要在类定义时指定其相关的 Kubernetes 模型类（或者，在 `CustomResource` 的情况下，指定常规 Java 类型）。为了更好地理解这一点，假设我们想观察 Kubernetes `Pod` 资源的变化。有几种方法可以编写这样的 `Watcher` ，并保证能在本地运行："

#. type: Plain text
#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid "or"
msgstr "或"

#. type: Plain text
#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid "Note that defining the generic type via a class hierarchy similar to the following example will also work correctly:"
msgstr "请注意，通过类似于下面这个例子的类的层次结构来定义泛型，也能正常工作。"

#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid ""
"The following example will **not** work in native mode because the generic type of watcher cannot be determined by looking at the class and method definitions\n"
"thus making Quarkus unable to properly determine the Kubernetes model class for which reflection registration is needed:"
msgstr "下面的示例在本地模式下 *无法* 运行，因为通过查看类和方法定义无法确定观察者的通用类型，因此 Quarkus 无法正确确定需要进行反射注册的 Kubernetes 模型类："

#. type: Title ==
#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy, no-wrap
msgid "Note on using Elliptic Curve keys"
msgstr "关于使用椭圆曲线钥匙的说明"

#. type: Plain text
#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid "Please note that if you would like to use Elliptic Curve keys with Kubernetes Client then adding a BouncyCastle PKIX dependency is required:"
msgstr "请注意，如果你想在Kubernetes客户端使用椭圆曲线密钥，则需要添加BouncyCastle PKIX的依赖关系。"

#. type: Plain text
#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid "Note that internally an `org.bouncycastle.jce.provider.BouncyCastleProvider` provider will be registered if it has not already been registered."
msgstr "请注意，在内部，如果一个 `org.bouncycastle.jce.provider.BouncyCastleProvider` 提供者还没有被注册，它将被注册。"

#. type: Plain text
#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid "You can have this provider registered as described in the xref:security-customization.adoc#bouncy-castle[BouncyCastle] or xref:security-customization.adoc#bouncy-castle-fips[BouncyCastle FIPS] sections."
msgstr "您可以按照 link:security-customization.html#bouncy-castle[BouncyCastle] 或 link:security-customization.html#bouncy-castle-fips[BouncyCastle FIPS] 部分所述，让该提供商注册。"

#. type: Title ==
#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy, no-wrap
msgid "Access to the Kubernetes API"
msgstr "访问Kubernetes API"

#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid ""
"In many cases in order to access the Kubernetes API server a `ServiceAccount`, `Role` and `RoleBinding` will be necessary.\n"
"An example that allows listing all pods could look something like this:"
msgstr "在许多情况下，访问 Kubernetes API 服务器需要 `ServiceAccount` 、 `Role` 和 `RoleBinding` 。可以列出所有 pod 的示例如下："

#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid ""
"Replace `<applicationName>` and `<namespace>` with your values.\n"
"Have a look at https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/[Configure Service Accounts for Pods] to get further information."
msgstr "将 `<applicationName>` 和 `<namespace>` 替换为您的值。请参阅 \" link:https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/[为 Pod 配置服务账户] \"获取更多信息。"

#. type: Title ==
#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy, no-wrap
msgid "OpenShift Client"
msgstr "OpenShift客户端"

#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid ""
"If the targeted Kubernetes cluster is an OpenShift cluster, it is possible to access it through\n"
"the `openshift-client` extension, in a similar way. This leverages the dedicated fabric8\n"
"openshift client, and provides access to `OpenShift` proprietary objects (e.g. `Route`, `ProjectRequest`, `BuildConfig` ...)"
msgstr "如果目标 Kubernetes 集群是 OpenShift 集群，则可以通过 `openshift-client` 扩展以类似方式访问它。这将利用专用的 fabric8 openshift 客户端，并提供对 `OpenShift` 专有对象（如 `Route` , `ProjectRequest` , `BuildConfig` ...）的访问。"

#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid ""
"Note that the configuration properties are shared with the `kubernetes-client` extension. In\n"
"particular, they have the same `quarkus.kubernetes-client` prefix."
msgstr "请注意，配置属性与 `kubernetes-client` 扩展共享。特别是，它们具有相同的 `quarkus.kubernetes-client` 前缀。"

#. type: Plain text
#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid "Add the extension with:"
msgstr "用以下方式添加扩展。"

#. type: Plain text
#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid "Note that `openshift-client` extension has a dependency on the `kubernetes-client` extension."
msgstr "请注意， `openshift-client` 扩展对 `kubernetes-client` 扩展有依赖性。"

#. type: Plain text
#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid "To use the client, inject an `OpenShiftClient` instead of the `KubernetesClient`:"
msgstr "要使用客户端，请注入一个 `OpenShiftClient` ，而不是 `KubernetesClient` 。"

#. type: Plain text
#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid "If you need to override the default `OpenShiftClient`, provide a producer such as:"
msgstr "如果你需要覆盖默认的 `OpenShiftClient` ，提供一个生产者，如。"

#. type: Plain text
#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid "Mock support is also provided in a similar fashion:"
msgstr "模拟支持也以类似方式提供。"

#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid ""
"Or by using the `@WithOpenShiftTestServer` similar to the `@WithKubernetesTestServer` explained in the\n"
"previous section:"
msgstr "或者使用 `@WithOpenShiftTestServer` ，类似于上一节介绍的 `@WithKubernetesTestServer` ："

#. type: Plain text
#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid "To use this feature, you have to add a dependency on `quarkus-test-openshift-client`:"
msgstr "要使用该功能，必须添加 `quarkus-test-openshift-client` 的依赖关系："

#. type: Title ==
#: _versions/3.2/guides/kubernetes-client.adoc
#, no-wrap
msgid "Configuration Reference"
msgstr "配置参考"

#: _versions/3.2/guides/kubernetes-client.adoc
#, fuzzy
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr "<span class=\"icicon\"><i class=\"fa fa-lock\" title=\"在构建时固定\"></i></span>在构建时固定的配置属性 - 所有其他配置属性都可在运行时重写 <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
