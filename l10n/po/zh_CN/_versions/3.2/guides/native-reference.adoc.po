# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-08-28 16:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Native Reference Guide"
msgstr "本地参考指南"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"This guide is a companion to the\n"
"xref:building-native-image.adoc[Building a Native Executable],\n"
"xref:native-and-ssl.adoc[Using SSL With Native Images],\n"
"and xref:writing-native-applications-tips.adoc[Writing Native Applications],\n"
"guides.\n"
"It explores advanced topics that help users diagnose issues,\n"
"increase the reliability and improve the runtime performance of native executables.\n"
"These are the high level sections to be found in this guide:"
msgstr "本指南是《 xref:building-native-image.adoc[构建本地可执行文件] 》、《 xref:native-and-ssl.adoc[使用本地映像的 SSL] 》和《 xref:writing-native-applications-tips.adoc[编写本地应用程序] 》指南的配套指南。它探讨的高级主题可帮助用户诊断问题、提高可靠性并改善本地可执行文件的运行时性能。这些是本指南中的高级章节："

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "xref:native-memory-management[Native Memory Management]"
msgstr "link:#native-memory-management[本地内存管理]"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "xref:inspecting-and-debugging[Inspecting and Debugging Native Executables]"
msgstr "link:#inspecting-and-debugging[检查和调试本地可执行文件]"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "xref:native-faq[Frequently Asked Questions]"
msgstr "常见问题"

#. type: Title ==
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Native Memory Management"
msgstr "本地内存管理"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Memory management for Quarkus native executables is enabled by GraalVM’s SubstrateVM runtime system."
msgstr "GraalVM 的 SubstrateVM 运行时系统可对 Quarkus 本地可执行文件进行内存管理。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "For detailed explanations about the memory management component in GraalVM, see the link:https://www.graalvm.org/latest/reference-manual/native-image/optimizations-and-performance/MemoryManagement[GraalVM Memory Management] guide."
msgstr "有关 GraalVM 中内存管理组件的详细说明，请参阅 link:https://www.graalvm.org/latest/reference-manual/native-image/optimizations-and-performance/MemoryManagement[GraalVM 内存管理] 指南。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "This guide complements the information available in the GraalVM website with further observations particularly relevant to Quarkus applications."
msgstr "本指南补充了 GraalVM 网站上的信息，并提供了与 Quarkus 应用程序特别相关的更多意见。"

#. type: Title ===
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Garbage Collectors"
msgstr "垃圾收集器"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "The garbage collectors available for Quarkus users are currently Serial GC and Epsilon GC."
msgstr "目前Quarkus用户可用的垃圾收集器是Serial GC和Epsilon GC。"

#. type: Title ====
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Serial GC"
msgstr "串行GC"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Serial GC, the default option in GraalVM and Quarkus, is a single-threaded non-concurrent GC, just like HotSpot’s Serial GC.\n"
"The implementation in GraalVM however is different from the HotSpot one,\n"
"and there can be significant differences in the runtime behavior."
msgstr "串行 GC 是 GraalVM 和 Quarkus 的默认选项，它是一种单线程非并发 GC，就像 HotSpot 的串行 GC 一样。不过，GraalVM 中的实现与 HotSpot 中的不同，运行时的行为也会有显著差异。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"One of the key differences between HotSpot’s Serial GC and GraalVM’s Serial GC is the way they perform full GC cycles.\n"
"In HotSpot the algorithm used is mark-sweep-compact whereas in GraalVM it is mark-copy.\n"
"Both need to traverse all live objects,\n"
"but in mark-copy this traversal is also used to copy live objects to a secondary space or semi-space.\n"
"As objects are copied from one semi-space to another they’re also compacted.\n"
"In mark-sweep-compact, the compacting requires a second pass on the live objects.\n"
"This makes full GCs in mark-copy more time efficient (in terms of time spent in each GC cycle) than mark-sweep-compact.\n"
"The tradeoff mark-copy makes in order to make individual full GC cycles shorter is space.\n"
"The use of semi-spaces means that for an application to maintain the same GC performance that mark-sweep achieves (in terms of allocated MB per second),\n"
"it requires double the amount of memory."
msgstr "HotSpot 的串行 GC 与 GraalVM 的串行 GC 的主要区别之一在于它们执行完整 GC 循环的方式。HotSpot 使用的算法是标记-扫描-压缩，而 GraalVM 使用的是标记-复制。两者都需要遍历所有实时对象，但在标记-复制中，这种遍历还用于将实时对象复制到二级空间或半空间。当对象从一个半空间复制到另一个半空间时，它们也会被压缩。在 mark-sweep-compact 中，压缩需要对实时对象进行第二次遍历。这使得标记-拷贝的完全 GC 比标记-扫描-压缩更省时（就每个 GC 循环所花费的时间而言）。为了缩短单个完整 GC 循环的时间，mark-copy 所做的权衡是空间。半空间的使用意味着，应用程序要保持与 mark-sweep 相同的 GC 性能（以每秒分配的 MB 数计算），需要双倍的内存。"

#. type: Title =====
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "GC Collection Policy"
msgstr "采集政策"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "GraalVM's Serial GC implementation offers a choice between two different collection policies, the default is called \"adaptive\" and the alternative is called \"space/time\"."
msgstr "GraalVM的串行GC实现提供了两种不同的收集策略的选择，默认的是 \"自适应\"，另一种是 \"空间/时间\"。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"The “adaptive” collection policy is based on HotSpot's ParallelGC adaptive size policy.\n"
"The main difference with HotSpot is GraalVM's focus on memory footprint.\n"
"This means that GraalVM’s adaptive GC policy tries to aggressively trigger GCs in order to keep memory consumption down."
msgstr "自适应 \"收集策略基于 HotSpot 的 ParallelGC 自适应大小策略。与 HotSpot 的主要区别在于 GraalVM 注重内存占用。这意味着 GraalVM 的自适应 GC 策略会尝试主动触发 GC，以降低内存消耗。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Up to version 2.13, Quarkus used the “space/time” GC collection policy by default,\n"
"but starting with version 2.14, it switched to using the “adaptive” policy instead.\n"
"The reason why Quarkus initially chose to use \"space/time\" is because at that time it had considerable performance improvements over \"adaptive\".\n"
"Recent performance experiments, however, indicate that the \"space/time\" policy can result in worse out-of-the-box experience compared to the \"adaptive\" policy,\n"
"while at the same time the benefits it used to offer have diminished considerably after improvements made to the \"adaptive\" policy.\n"
"As a result, the \"adaptive\" policy appears to be the best option for most, if not all, Quarkus applications.\n"
"Full details on this switch can be read in link:https://github.com/quarkusio/quarkus/issues/28267[this issue]."
msgstr "在 2.13 版之前，Quarkus 默认使用 \"空间/时间 \"GC 收集策略，但从 2.14 版开始，它转而使用 \"自适应 \"策略。Quarkus 最初选择使用 \"空间/时间 \"的原因是，当时它的性能比 \"自适应 \"有相当大的提升。然而，最近的性能实验表明，与 \"自适应 \"策略相比，\"空间/时间 \"策略可能会带来更差的开箱即用体验，而与此同时，在 \"自适应 \"策略得到改进之后，\"空间/时间 \"策略曾经带来的好处也大大减少了。因此，\"自适应 \"策略似乎是大多数（如果不是全部）Quarkus 应用程序的最佳选择。有关这一转换的详细信息，请参阅 link:https://github.com/quarkusio/quarkus/issues/28267[本期] 内容。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"It is still possible to change the GC collection policy using GraalVM’s `-H:InitialCollectionPolicy` flag.\n"
"Switching to the \"space/time\" policy can be done by passing the following via command line:"
msgstr "仍然可以使用 GraalVM 的 `-H:InitialCollectionPolicy` 标志来更改 GC 收集策略。切换到 \"空间/时间 \"策略可以通过命令行传递以下信息来完成："

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Or adding this to the `application.properties` file:"
msgstr "或将此添加到 `application.properties` 文件中。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Escaping the `$` character is required to configure the \"space/time\" GC collection policy if passing via command line in Bash.\n"
"Other command line environments might have similar requirements."
msgstr "如果通过 Bash 命令行传输，则需要转义 `$` 字符来配置 \"空间/时间 \"GC 收集策略。其他命令行环境可能也有类似要求。"

#. type: Title ====
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Epsilon GC"
msgstr "怡思乐GC"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Epsilon GC is a no-op garbage collector which does not do any memory reclamation.\n"
"From a Quarkus perspective, some of the most relevant use cases for this garbage collector are extremely short-lived jobs, e.g. serverless functions.\n"
"To build Quarkus native with epsilon GC, pass the following argument at build time:"
msgstr "Epsilon GC 是一种无操作的垃圾回收器，不进行任何内存回收。从 Quarkus 的角度来看，这种垃圾回收器的一些最相关用例是寿命极短的作业，例如无服务器函数。要使用 epsilon GC 构建原生 Quarkus，请在构建时传递以下参数："

#. type: Title ===
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Memory Management Options"
msgstr "内存管理选项"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"For information about options to control maximum heap size, young space, and other typical use cases found in the JVM, see the link:https://www.graalvm.org/latest/reference-manual/native-image/optimizations-and-performance/MemoryManagement[GraalVM Memory Management] guide.\n"
"Setting the maximum heap size, either as a percentage or an explicit value, is generally recommended."
msgstr "有关控制最大堆大小、年轻空间和 JVM 中其他典型用例的选项信息，请参阅 link:https://www.graalvm.org/latest/reference-manual/native-image/optimizations-and-performance/MemoryManagement[GraalVM 内存管理] 指南。一般建议将最大堆大小设置为百分比或显式值。"

#. type: Title ===
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "GC Logging"
msgstr "GC记录"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Multiple options exist to print information about garbage collection cycles, depending on the level of detail required.\n"
"The minimum detail is provided `-XX:+PrintGC`, which prints a message for each GC cycle that occurs:"
msgstr "根据所需的详细程度，有多种打印垃圾回收周期信息的选项。 `-XX:+PrintGC` 提供了最基本的详细信息，它会为每个 GC 循环打印一条信息："

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"When you combine this option with `-XX:+VerboseGC` you still get a message per GC cycle,\n"
"but it contains extra information.\n"
"Also, adding this option shows the sizing decisions made by the GC algorithm at startup:"
msgstr "将该选项与 `-XX:+VerboseGC` 结合使用时，每个 GC 周期仍会收到一条信息，但其中包含额外的信息。此外，添加该选项还能显示 GC 算法在启动时做出的大小决定："

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Beyond these two options, `-XX:+PrintHeapShape` and `-XX:+TraceHeapChunks` provide even lower level details about memory chunks on top of which the different memory regions are constructed."
msgstr "在这两个选项之外， `-XX:+PrintHeapShape` 和 `-XX:+TraceHeapChunks` 提供了关于内存块的更低层次的细节，不同的内存区域在此基础上被构建。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "The most up-to-date information on GC logging flags can be obtained by printing the list of flags that can be passed to native executables:"
msgstr "关于GC日志标志的最新信息，可以通过打印可传递给本地可执行文件的标志列表来获得。"

#. type: Title ===
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Resident Set Size (RSS)"
msgstr "驻地集尺寸（RSS）"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"As described in the\n"
"xref:performance-measure.adoc[Measuring Performance guide],\n"
"the footprint of Quarkus applications is measured using the resident set size (RSS).\n"
"This is also applicable to native applications,\n"
"but the runtime engine that manages the footprint in this case is built in the native executable itself rather than the JVM."
msgstr "如 xref:performance-measure.adoc[性能测量指南] 所述，Quarkus 应用程序的占用空间是通过驻留集大小（RSS）来测量的。这也适用于本地应用程序，但在这种情况下，管理占用空间的运行时引擎是内置在本地可执行文件本身，而不是 JVM 中。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"The reporting techniques specified in the\n"
"xref:performance-measure.adoc[Measuring Performance guide]\n"
"are applicable to native applications too,\n"
"but what causes the RSS to be higher or lower is specific to how the generated native executables work."
msgstr "xref:performance-measure.adoc[衡量性能指南》] 中规定的报告技术也适用于本地应用程序，但导致 RSS 高或低的原因与生成的本地可执行文件的工作方式有关。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"When the RSS is higher in one native version of the application versus another,\n"
"the following checks should be carried out first:"
msgstr "当某一本地应用程序版本的 RSS 高于另一版本时，应首先进行以下检查："

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Check the xref:native-reports[native build time reports]\n"
"and see if there are big discrepancies in the number of used packages, used classes or used methods.\n"
"A bigger universe will result in bigger memory footprint."
msgstr "检查 xref:native-reports[本地构建时间报告] ，看看所用包、所用类或所用方法的数量是否有很大差异。宇宙越大，内存占用就越大。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Check the size of the binary for differences.\n"
"Using `readelf` you can observe the size of different sections and compare them.\n"
"The `.text` section where code lives,\n"
"and the `.svm_heap` section where heap produced at build time lives,\n"
"are particularly interesting."
msgstr "检查二进制的大小差异。使用 `readelf` 可以观察不同部分的大小并进行比较。代码所在的 `.text` 部分和构建时产生堆的 `.svm_heap` 部分尤其有趣。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Generate xref:heap-dumps[heap dumps] and inspect them with tools such as VisualVM or Eclipse MAT."
msgstr "生成 link:#heap-dumps[堆转储] 并使用VisualVM或Eclipse MAT等工具进行检查。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Often profiling, instrumenting or tracing applications is the best way to figure out how things work.\n"
"In the case of RSS and native applications,\n"
"the techniques that Brendan Gregg explains in the\n"
"https://www.brendangregg.com/FlameGraphs/memoryflamegraphs.html[\"Memory Leak (and Growth) Flame Graphs\"] guide are particularly useful.\n"
"This section will apply the information in that article to show how to use `perf` and\n"
"https://github.com/iovisor/bcc[bcc/eBPF]\n"
"to understand what causes Quarkus native executables to consume memory on startup."
msgstr "通常，对应用程序进行剖析、检测或跟踪是弄清其工作原理的最佳方法。对于 RSS 和本地应用程序，Brendan Gregg 在 link:https://www.brendangregg.com/FlameGraphs/memoryflamegraphs.html[\"内存泄漏（和增长）火焰图 \"] 指南中介绍的技术尤其有用。本节将应用该文章中的信息，说明如何使用 `perf` 和 link:https://github.com/iovisor/bcc[bcc/eBPF] 来了解 Quarkus 本机可执行文件在启动时消耗内存的原因。"

#. type: Title ====
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Perf"
msgstr "灌胶"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"`perf` works in older Linux systems, whereas eBPF requires a newer Linux kernel.\n"
"The overhead of `perf` is higher than eBPF,\n"
"but it can understand stack traces generated with DWARF debug symbols, which eBPF can't."
msgstr "`perf` 可在较老的 Linux 系统中运行，而 eBPF 则需要较新的 Linux 内核。 的开销比 eBPF 高，但它能理解用 DWARF 调试符号生成的堆栈跟踪，而 eBPF 却不能。 `perf`"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"In the context of GraalVM,\n"
"DWARF stack traces contain more detail and are easier to understand than those generated with frame pointers.\n"
"As first step, build a Quarkus native executable with debug info enabled and a couple of extra flags.\n"
"One flag to disable optimizations,\n"
"and another to avoid inlined methods being omitted from the stack traces.\n"
"These two flags have been added to obtain stack traces that contain as much information as possible."
msgstr "在 GraalVM 中，DWARF 堆栈跟踪包含更多细节，比使用帧指针生成的堆栈跟踪更容易理解。第一步，创建一个启用了调试信息和一些额外标志的 Quarkus 本地可执行文件。一个标志用于禁用优化，另一个标志用于避免堆栈跟踪中省略内联方法。添加这两个标志是为了获得包含尽可能多信息的堆栈跟踪。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Disabling optimizations makes it easier to learn how to use `perf`\n"
"and get as detailed stack traces as possible,\n"
"because it shows more info about what gets called where.\n"
"However, doing so might lead to more allocations happening which would not happen if optimizations would have been applied.\n"
"In other words, passing in `-O0` will change the allocation pattens for many applications,\n"
"because it disables optimizations such as escape analysis or dead code elimination.\n"
"To properly assess the allocations made by an application deployed in production,\n"
"run with default optimizations (`-O2`).\n"
"With default optimizations the stack traces obtained with `perf` maybe be harder to decipher."
msgstr "禁用优化会让学习如何使用 `perf` 和获取尽可能详细的堆栈跟踪变得更容易，因为它会显示更多关于在哪里调用什么的信息。不过，这样做可能会导致更多的分配，而如果使用了优化，就不会出现这种情况。换句话说，传入 `-O0` 会改变许多应用程序的分配模式，因为它会禁用逃逸分析或消除死代码等优化措施。要正确评估部署在生产环境中的应用程序的分配情况，请使用默认优化 ( `-O2` ) 运行。在默认优化下，通过 `perf` 获取的堆栈跟踪可能更难解读。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Let's measure how much RSS a Quarkus native executable takes on startup on this particular environment:"
msgstr "让我们测量一下Quarkus本地可执行文件在这个特定环境下启动时需要多少RSS："

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"How come this Quarkus native executable consumes ~35MB RSS on startup?\n"
"To get an understanding of this number, this section will use `perf` to trace calls to `syscalls:sys_enter_mmap`.\n"
"Assuming the default link:https://www.graalvm.org/latest/reference-manual/native-image/optimizations-and-performance/MemoryManagement/#serial-garbage-collector[GraalVM Serial Garbage Collector] is in use, this system call is particularly interesting for native executables generated by GraalVM's `native-image` because of how it allocates heap.\n"
"In native executables generated by GraalVM's `native-image`, the heap is allocated using either aligned or unaligned heap chunks.\n"
"All non-array objects get allocated in thread local aligned chunks.\n"
"Each of these are 1MB in size by default.\n"
"For arrays, if they are bigger than 1/8 of the aligned chunk size,\n"
"they will be allocated in unaligned heap chunks which have a size dependant on the object itself.\n"
"The very first time a thread allocates an object or small array,\n"
"it will request an aligned heap chunk that it will use exclusively until it has run out of space in that chunk,\n"
"in which case it will request another aligned heap chunk.\n"
"So by tracing these system calls,\n"
"the code paths that end up requesting new aligned or unaligned heap chunks will be recorded.\n"
"Next, run the Quarkus native executable through `perf record` tracing the `mmap` system call:"
msgstr "为什么 Quarkus 本机可执行文件在启动时会消耗 ~35MB RSS？为了了解这个数字，本节将使用 `perf` 来跟踪对 `syscalls:sys_enter_mmap` 的调用。假设使用的是 link:https://www.graalvm.org/latest/reference-manual/native-image/optimizations-and-performance/MemoryManagement/#serial-garbage-collector[GraalVM] 默认的 link:https://www.graalvm.org/latest/reference-manual/native-image/optimizations-and-performance/MemoryManagement/#serial-garbage-collector[串行垃圾回收器] ，那么对于由 GraalVM 的 `native-image` 生成的本地可执行文件来说，这个系统调用尤其有趣，因为它是如何分配堆的。在由 GraalVM 的 `native-image` 生成的本地可执行文件中，堆是使用对齐或未对齐堆块分配的。所有非数组对象都以线程本地对齐块的形式分配。默认情况下，每个堆块的大小为 1MB。对于数组，如果其大小超过对齐块大小的 1/8，则会以未对齐堆块的形式分配，其大小取决于对象本身。线程首次分配对象或小型数组时，会请求一个已对齐的堆分块，并将其专用，直到该分块的空间用完为止，在这种情况下，它将请求另一个已对齐的堆分块。因此，通过跟踪这些系统调用，最终请求新的对齐或未对齐堆块的代码路径将被记录下来。接下来，通过 `perf record` 运行 Quarkus 本地可执行文件，跟踪 `mmap` 系统调用："

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"The size of the aligned heap chunks can be changed during native build time.\n"
"A custom value (in number of bytes) can be passed via the `-H:AlignedHeapChunkSize` flag.\n"
"One caveat is that this value needs to be multiple of 4096 (4KB)."
msgstr "对齐堆块的大小可在本地构建时更改。可以通过 `-H:AlignedHeapChunkSize` 标志传递一个自定义值（字节数）。需要注意的是，该值必须是 4096（4KB）的倍数。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Once the startup completes, stop the process and generate the stacks:"
msgstr "一旦启动完成，停止进程并生成堆栈："

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"As a final step, generate a\n"
"https://github.com/brendangregg/FlameGraph[flamegraph]\n"
"with the generated stacks:"
msgstr "最后，用生成的堆栈生成 link:https://github.com/brendangregg/FlameGraph[火焰图] ："

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "The flamegraph should look similar to this:"
msgstr "火焰图应该与此相似："

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "There are several things of interest to notice there:"
msgstr "那里有几件值得注意的事情："

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"First, the stack traces that contain method calls to `com.oracle.svm.core.genscavenge.ThreadLocalAllocation` are related to aligned or unaligned heap chunk allocations explained above.\n"
"As noted earlier,\n"
"for the majority of allocations these chunks will be 1MB by default,\n"
"so they're interesting because each allocated chunk has a considerable effect on the RSS consumption."
msgstr "首先，包含调用 `com.oracle.svm.core.genscavenge.ThreadLocalAllocation` 方法的堆栈跟踪与上文解释的对齐或未对齐堆块分配有关。如前所述，在大多数分配中，这些块默认为 1MB，因此它们非常有趣，因为每个分配的块都会对 RSS 消耗产生相当大的影响。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Second, of the thread allocation stacks,\n"
"the ones under `start_thread` are particularly revealing.\n"
"In this environment, taking into account the `-Xmx` value passed in,\n"
"Quarkus creates 12 event loop threads.\n"
"Aside from those, there are 6 extra threads.\n"
"The names of all those 18 threads exceed 16 characters.\n"
"This can be observed via the `ps` command:"
msgstr "其次，在线程分配堆栈中， `start_thread` 下的堆栈尤其能说明问题。在这种环境下，考虑到传入的 `-Xmx` 值，Quarkus 创建了 12 个事件循环线程。除此之外，还有 6 个额外的线程。所有这 18 个线程的名称都超过了 16 个字符。这可以通过 `ps` 命令观察到："

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"The very first allocation that all these threads do is taking the thread name and trimming it so that it can fall within the character limit enforced by kernels.\n"
"For each of those allocations,\n"
"there are 2 `mmap` calls,\n"
"one to reserve the memory and the other to commit it.\n"
"When recording `syscalls:sys_enter_mmap` system call,\n"
"the `perf` implementation tracks calls to `__GI___mmap64`.\n"
"But this glibc `__GI___mmap64` implementation makes another call into `__GI___mmap64`:"
msgstr "所有这些线程进行的第一次分配都是使用线程名称并对其进行修剪，使其不超出内核规定的字符数限制。每次分配时，都会有两个 `mmap` 调用，一个用于保留内存，另一个用于提交内存。在记录 `syscalls:sys_enter_mmap` 系统调用时， `perf` 实现会跟踪调用 `_GI_ _mmap64` .但 glibc `_GI_ _mmap64` 实现还会调用 `_GI_ _mmap64` :"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Setting `set scheduler-locking step` when the Quarkus native executable is running through `gdb` makes it easier to debug multi-threaded applications.\n"
"It optimizes for single-stepping by stopping other threads from \"seizing the prompt\" by preempting the current thread is being stepped through."
msgstr "当 Quarkus 本地可执行文件通过 `gdb` 运行时，设置 `set scheduler-locking step` 可使调试多线程应用程序变得更容易。它可以通过抢占当前线程，阻止其他线程 \"抢占提示\"，从而优化单步操作。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"This is how the above flamegraph shows a total of 72 calls to `__GI___mmap64` for the thread name abbreviation stack trace,\n"
"given that Quarkus native executable runs 18 threads."
msgstr "这就是上面的火焰图如何显示线程名缩写堆栈跟踪中总共有 72 次调用 `_GI_ _mmap64` 的总共 72 次调用。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"A third, and final observation,\n"
"is that if you capture the `syscalls:sys_enter_munmmap` event,\n"
"you might observe that some allocations also result in calls to `munmap`.\n"
"When calculating the size to reserve,\n"
"the requested size to allocate can be rounded up to the page size.\n"
"The maintain alignment,\n"
"1MB in case of aligned chunks or 1 byte for unaligned chunks,\n"
"some of the reserved memory might be unreserved.\n"
"That is where these `munmap` calls would come from."
msgstr "第三点，也是最后一点，如果捕获 `syscalls:sys_enter_munmmap` 事件，可能会发现某些分配也会导致调用 `munmap` 。在计算预留内存大小时，请求分配的内存大小可以四舍五入为页面大小。在保持对齐的情况下，对齐的块为 1MB，未对齐的块为 1 字节，因此部分预留内存可能是未预留的。这就是 `munmap` 调用的来源。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Just by looking at the flamegraph and counting the number of `mmap` calls that originate in thread local allocations,\n"
"an approximate estimation can be made on the RSS a Quarkus native executable uses on startup.\n"
"This estimation can't be fully precise because for unaligned heap chunks, the stack trace doesn't record the size of the chunk.\n"
"Also, if the additional build args are removed,\n"
"inlining optimizations might obscure the type of array allocation chunk requested,\n"
"so it might not be possible to decipher if the allocation is for an aligned or unaligned chunk."
msgstr "只需查看火焰图并计算源自线程本地分配的 `mmap` 调用次数，就能大致估算出 Quarkus 本地可执行文件在启动时使用的 RSS。这种估算不可能完全精确，因为对于未对齐的堆块，堆栈跟踪不会记录堆块的大小。此外，如果移除额外的构建参数，内联优化可能会掩盖所请求的数组分配块类型，因此可能无法分辨分配的是对齐块还是未对齐块。"

#. type: Title ====
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "bcc/eBPF"
msgstr "bcc/eBPF"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"A version of\n"
"https://github.com/iovisor/bcc[bcc]/\n"
"https://ebpf.io/[eBPF]\n"
"that can do stack traces is only available from Linux kernel 4.8 onwards.\n"
"It can do in-kernel summaries,\n"
"which makes it more efficient and has lower overhead.\n"
"Unfortunately it doesn't understand DWARF debug symbols,\n"
"so the information obtained might be harder to read and contain less detail."
msgstr "只有从 Linux 内核 4.8 开始， link:https://github.com/iovisor/bcc[bcc/] link:https://ebpf.io/[eBPF] 版本才能进行堆栈跟踪。它可以进行内核总结，因此效率更高、开销更低。遗憾的是，它不能理解 DWARF 调试符号，因此获得的信息可能更难读，包含的细节也更少。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"bcc/eBPF is very extensible so it's easier to tailor make scripts to track specific metrics.\n"
"The `bcc` project contains a `stackcount` program that can be used to count stack traces in similar way to what `perf` did in the previous section.\n"
"But in some cases, it might be more useful to have other metrics other than number of calls to a system call.\n"
"`malloc` is one such example.\n"
"The number of `malloc` calls is not so important,\n"
"but rather the size of the allocations.\n"
"So rather than having a flamegraph showing sample counts,\n"
"a flamegraph can be generated that shows bytes allocated."
msgstr "bcc/eBPF 具有很强的可扩展性，因此更容易定制脚本来跟踪特定指标。 `bcc` 项目包含一个 `stackcount` 程序，它可以用来计算堆栈跟踪，与上一节中 `perf` 所做的类似。但在某些情况下，除了系统调用的调用次数外，其他指标可能更有用。 `malloc` 就是这样一个例子。 `malloc` 调用的次数并不重要，重要的是分配的大小。因此，与其让火焰图显示样本数，不如生成一个火焰图来显示分配的字节数。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Aside from `mmap`,\n"
"`malloc` system calls are also present in native executables generated by GraalVM.\n"
"Let's put bcc/eBPF in action to generate a flamegraph of bytes allocated using `malloc`."
msgstr "除了 `mmap` 之外， `malloc` 系统调用也出现在 GraalVM 生成的本地可执行文件中。让我们使用 bcc/eBPF 生成使用 `malloc` 分配的字节的火焰图。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"To do this,\n"
"first re-generate a Quarkus native executable removing debug info,\n"
"which bcc/eBPF does not understand,\n"
"and instead use frame pointer with local symbols to get the stack traces:"
msgstr "要做到这一点，首先要重新生成一个 Quarkus 本地可执行文件，删除 bcc/eBPF 无法理解的调试信息，转而使用带有本地符号的帧指针来获取堆栈跟踪："

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"The link:mallocstacks.py[mallocstacks.py]\n"
"bcc/eBPF script will be used to capture the `malloc` stacktraces with their allocated size.\n"
"This script, and other typical bcc/eBPF scripts (e.g. `stackcount`), need to be given a process ID (PID).\n"
"This makes a bit tricky when you want to trace startup,\n"
"but you can use `gdb`\n"
"(even if you haven't enabled debug info)\n"
"to get around this obstacle because it allows you to stop the application at the first instruction.\n"
"Let's start by running the native executable via `gdb`:"
msgstr "mallocstacks.py bcc/eBPF 脚本将用于捕获 `malloc` 堆栈跟踪及其分配的大小。该脚本和其他典型的 bcc/eBPF 脚本（如 `stackcount` ）都需要给定一个进程 ID (PID)。这给跟踪启动带来了一些麻烦，但可以使用 `gdb` （即使未启用调试信息）绕过这一障碍，因为它允许你在第一条指令时停止应用程序。我们先通过 `gdb` 运行本地可执行文件："

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "`starti` is a `gdb` command that sets a temporary breakpoint at the very first instruction of the program's execution."
msgstr " `starti` 是一条 ，在程序执行的第一条指令上设置一个临时断点。 `gdb` "

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Next invoke the bcc/eBPF script giving it the PID of the Quarkus process,\n"
"so that it can track the `malloc` calls,\n"
"capture stack traces and dump them to a file for post-processing:"
msgstr "然后调用 bcc/eBPF 脚本，向它提供 Quarkus 进程的 PID，以便它能跟踪 `malloc` 调用、捕获堆栈跟踪并将其转储到文件中进行后处理："

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Then go back to the `gdb` shell and instruct it to continue the startup procedure after hitting the first instruction:"
msgstr "然后回到 `gdb` shell，指示它在点击第一个指令后继续启动程序："

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Once the startup has complete,\n"
"press `Ctrl-C` on the `stackcount` shell."
msgstr "启动完成后，在 `stackcount` shell 上按 `Ctrl-C` 。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Then process the stacks file as a flamegraph.\n"
"Note that the stacks generated by this script are already collapsed,\n"
"so the flamegraph can be generated just like this:"
msgstr "然后将堆栈文件处理为火焰图。请注意，该脚本生成的堆栈已经折叠，因此可以像这样生成火焰图："

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "The flamegraph produced should look something like this:"
msgstr "产生的火焰图应该看起来像这样："

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"This shows that most of the memory requested using `malloc` comes from epoll in Java NIO,\n"
"but the overall amount allocated via `malloc` is barely 268KB.\n"
"This amount of 274,269 bytes can be observed by hovering on top of `all` at the bottom of flamegraph\n"
"(you might need to ask the browser to open the flamegraph in a different tab or window to observe this).\n"
"This is very small compared with the amount allocated for the heap with `mmap`."
msgstr "这表明，使用 `malloc` 请求的大部分内存来自 Java NIO 中的 epoll，但通过 `malloc` 分配的内存总量仅为 268KB。将鼠标悬停在 flamegraph 底部的 `all` 上部，可以观察到 274,269 字节的内存量（可能需要让浏览器在不同的标签页或窗口中打开 flamegraph 才能观察到）。与 `mmap` 中为堆分配的容量相比，这个数字非常小。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Finally, just a brief mention about other bcc/eBPF commands,\n"
"and how to transform them into flamegraphs."
msgstr "最后，简要介绍一下其他 bcc/eBPF 命令，以及如何将它们转换成火焰图。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Stacks produced by `stackcount` need to be collapsed before they can be transformed into flamegraphs.\n"
"For example:"
msgstr "`stackcount` 生成的堆栈需要折叠后才能转换成火焰图。例如"

#. type: Title ==
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Inspecting and Debugging Native Executables"
msgstr "检查本地可执行文件"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "This debugging guide provides further details on debugging issues in Quarkus native executables that might arise during development or production."
msgstr "本调试指南提供了关于调试Quarkus本地可执行文件中可能在开发或生产中出现的问题的进一步细节。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"It takes as input the application developed in the xref:getting-started.adoc[Getting Started Guide].\n"
"You can find instructions on how to quickly set up this application in this guide."
msgstr "它以 xref:getting-started.adoc[入门指南] 中开发的应用程序为输入。您可以在本指南中找到如何快速设置该应用程序的说明。"

#. type: Title ===
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Requirements and Assumptions"
msgstr "要求和假设"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "This debugging guide has the following requirements:"
msgstr "本指南有以下要求。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "JDK 11 installed with `JAVA_HOME` configured appropriately"
msgstr "安装了JDK 11，并适当配置了 `JAVA_HOME` "

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
msgid "A working container runtime (Docker, podman)"
msgstr "一个工作的容器运行时（Docker 或 podman）"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"This guide builds and executes Quarkus native executables within a Linux environment.\n"
"To offer a homogeneous experience across all environments,\n"
"the guide relies on a container runtime environment to build and run the native executables.\n"
"The instructions below use Docker as example, but very similar commands should work on alternative container runtimes, e.g. podman."
msgstr "本指南在 Linux 环境中构建和执行 Quarkus 本机可执行文件。为了在所有环境中提供相同的体验，本指南依赖容器运行环境来构建和运行本地可执行文件。下面的说明以 Docker 为例，但类似的命令也适用于其他容器运行环境，如 podman。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Building native executables is an expensive process,\n"
"so make sure the container runtime has enough CPU and memory to do this.\n"
"A minimum of 4 CPUs and 4GB of memory is required."
msgstr "构建本地可执行文件是一个昂贵的过程，因此要确保容器运行时有足够的 CPU 和内存来完成这项工作。至少需要 4 个 CPU 和 4GB 内存。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Finally, this guide assumes the use of the link:https://github.com/graalvm/mandrel[Mandrel distribution] of GraalVM for building native executables,\n"
"and these are built within a container so there is no need for installing Mandrel on the host."
msgstr "最后，本指南假定使用 GraalVM 的 link:https://github.com/graalvm/mandrel[Mandrel 发行版] 来构建本地可执行文件，这些可执行文件是在容器中构建的，因此无需在主机上安装 Mandrel。"

#. type: Title ===
#: _versions/3.2/guides/native-reference.adoc
#, no-wrap
msgid "Bootstrapping the project"
msgstr "创建项目"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Start by creating a new Quarkus project.\n"
"Open a terminal and run the following command:"
msgstr "首先创建一个新的 Quarkus 项目。打开终端并运行以下命令："

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
msgid "For Linux & MacOS users"
msgstr "针对Linux和MacOS用户"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
msgid "For Windows users"
msgstr "对于Windows用户"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
msgid "If using cmd , (don't use backward slash `\\` and put everything on the same line)"
msgstr "如果使用cmd ，（不要使用反斜线 `\\` ，并将所有内容放在同一行）"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "If using Powershell , wrap `-D` parameters in double quotes e.g. `\"-DprojectArtifactId=debugging-native\"`"
msgstr "如果使用Powershell，用双引号包住 `-D` 参数，例如： `\"-DprojectArtifactId=debugging-native\"` "

#. type: Title ===
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Configure Quarkus properties"
msgstr "配置Quarkus属性"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Some Quarkus configuration options will be used constantly throughout this debugging guide,\n"
"so to help declutter command line invocations,\n"
"it's recommended to add these options to the `application.properties` file.\n"
"So, go ahead and add the following options to that file:"
msgstr "在本调试指南中，有些 Quarkus 配置选项会经常用到，因此为了帮助简化命令行调用，建议将这些选项添加到 `application.properties` 文件中。因此，请将以下选项添加到该文件中："

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Starting with 22.3, Mandrel does not provide a `-java11` version anymore.\n"
"Note, however,  that this doesn't mean that you may no longer produce native executables with Mandrel for Java 11 projects.\n"
"You can still compile your Java 11 projects using OpenJDK 11 and produce native executables from the resulting Java 11 bytecode using the `-java17` Mandrel builder images."
msgstr "从 22.3 开始，Mandrel 不再提供 `-java11` 版本。但请注意，这并不意味着您不能再使用 Mandrel 为 Java 11 项目生成本地可执行文件。您仍然可以使用 OpenJDK 11 编译 Java 11 项目，并使用 `-java17` Mandrel 生成器映像从生成的 Java 11 字节码中生成本地可执行文件。"

#. type: Title ===
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "First Debugging Steps"
msgstr "第一个调试步骤"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "As a first step, change to the project directory and build the native executable for the application:"
msgstr "作为第一步，改变到项目目录，建立应用程序的本地可执行文件。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Run the application to verify it works as expected. In one terminal:"
msgstr "运行该应用程序，以验证它是否按预期工作。在一个终端中"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "In another:"
msgstr "在另一个。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"The rest of this section explores ways to build the native executable with extra information,\n"
"but first, stop the running application.\n"
"We can obtain this information while building the native executable by adding additional native-image build options using `-Dquarkus.native.additional-build-args`, e.g."
msgstr "本节其余部分将探讨如何利用额外信息构建本地可执行文件，但首先要停止正在运行的应用程序。我们可以通过使用 `-Dquarkus.native.additional-build-args` 添加额外的本地镜像编译选项，在编译本地可执行文件时获取这些信息，例如"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Executing that will produce additional output lines like this:"
msgstr "执行这句话将产生额外的输出行，像这样。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Note that `/project` is a folder within the container that is building the native executable.\n"
"So, this is not a folder that you will find in the host environment.\n"
"`/project` folder is mapped to `target/debugging-native-1.0.0-SNAPSHOT-native-image-source-jar`,\n"
"so you will find the files under the `reports` folder in that directory."
msgstr "请注意， `/project` 是正在构建本地可执行文件的容器中的一个文件夹。 `/project` 文件夹被映射到 `target/debugging-native-1.0.0-SNAPSHOT-native-image-source-jar` ，因此您可以在该目录中找到 `reports` 文件夹下的文件。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"The target info file contains information such as the target platform,\n"
"the toolchain used to compile the executable,\n"
"and the C library in use:"
msgstr "目标信息文件包含目标平台、用于编译可执行文件的工具链和使用的 C 库等信息："

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "The native library info file contains information on the static libraries added to the binary and the other libraries dynamically linked to the executable:"
msgstr "本地库信息文件包含添加到二进制文件的静态库和动态链接到可执行文件的其他库的信息。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Even more detail can be obtained by passing in `--verbose` as an additional native-image build argument.\n"
"This option can be very useful in detecting whether the options that you pass at a high level via Quarkus are being passed down to the native executable production,\n"
"or whether some third party jar has some native-image configuration embedded in it that is reaching the native-image invocation:"
msgstr "通过 `--verbose` 作为附加的本地镜像编译参数，可以获得更多细节。这个选项非常有用，它可以检测你通过 Quarkus 传递的高级选项是否被传递到了本地可执行文件，或者某个第三方 jar 中是否嵌入了一些本地镜像配置，而这些配置正在被本地镜像调用："

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Running with `--verbose` demonstrates how the native-image building process is two sequential java processes:"
msgstr "用 `--verbose` ，展示了本地图像构建过程是两个连续的java过程。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"The first is a very short Java process that does some basic validation and builds the arguments for the second process\n"
"(in a stock GraalVM distribution, this is executed as native code)."
msgstr "第一个进程是一个非常短的 Java 进程，负责进行一些基本验证并为第二个进程创建参数（在 GraalVM 发行版中，该进程以本地代码形式执行）。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"The second Java process is where the main part of the native executable production happens.\n"
"The `--verbose` option shows the actual Java process executed.\n"
"You could take the output and run it yourself."
msgstr "第二个 Java 进程是本地可执行文件制作的主要部分。 `--verbose` 选项显示实际执行的 Java 进程。您可以获取输出结果并自行运行。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "One may also combine multiple native build options by separating with a comma, e.g.:"
msgstr "我们也可以通过用逗号分隔来组合多个本地构建选项，例如：。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Remember that if an argument for `-Dquarkus.native.additional-build-args` includes the `,` symbol,\n"
"it needs to be escaped to be processed correctly, e.g. `\\\\,`."
msgstr "请记住，如果 `-Dquarkus.native.additional-build-args` 的参数包含 `,` 符号，则需要转义才能正确处理，例如 `\\\\,` 。"

#. type: Title ===
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Inspecting Native Executables"
msgstr "检查本地可执行文件"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Given a native executable, various Linux tools can be used to inspect it.\n"
"To allow supporting a variety of environments,\n"
"inspections will be done from within a Linux container.\n"
"Let's create a Linux container image with all the tools required for this guide:"
msgstr "对于本地可执行文件，可以使用各种 Linux 工具对其进行检查。为了支持各种环境，检查将在 Linux 容器中进行。让我们创建一个包含本指南所需全部工具的 Linux 容器映像："

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Using docker in the non-Linux environment, you can create an image using this Dockerfile via:"
msgstr "在非Linux环境中使用docker，你可以通过这个Dockerfile创建一个镜像。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Then, go to the root of the project and run the Docker container we have just created as:"
msgstr "然后，进入项目的根目录，运行我们刚刚创建的Docker容器。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "`ldd` shows the shared library dependencies of an executable:"
msgstr " `ldd` 显示一个可执行文件的共享库依赖性。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "`strings` can be used to look for text messages inside the binary:"
msgstr " `strings` 可以用来寻找二进制文件中的文本信息。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Using `strings` you can also get Mandrel information given the binary:"
msgstr "使用 `strings` ，你也可以得到二进制的心轴信息。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Finally, using `readelf` we can inspect different sections of the binary.\n"
"For example, we can see how the heap and text sections take most of the binary:"
msgstr "最后，使用 `readelf` ，我们可以检查二进制文件的不同部分。例如，我们可以看到堆和文本部分占二进制文件的大部分："

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Runtime containers produced by Quarkus to run native executables will not include the tools mentioned above.\n"
"To explore a native executable within a runtime container,\n"
"it's best to run the container itself and then `docker cp` the executable locally, e.g.:"
msgstr "Quarkus 为运行本地可执行文件而制作的运行时容器不包含上述工具。要在运行时容器中探索本地可执行文件，最好先运行容器本身，然后在本地 `docker cp` 可执行文件，例如："

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "From there, you can either inspect the executable directly or use a tools container like above."
msgstr "从那里，你可以直接检查可执行文件，或者像上面那样使用一个工具容器。"

#. type: Title ===
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Native Reports"
msgstr "本地报告"

#. type: delimited block =
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Optionally, the native build process can generate reports that show what goes into the binary:"
msgstr "作为选择，本地构建过程可以生成报告，显示二进制文件中的内容。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"The reports will be created under `target/debugging-native-1.0.0-SNAPSHOT-native-image-source-jar/reports/`.\n"
"These reports are some of the most useful resources when encountering issues with missing methods/classes, or encountering forbidden methods by Mandrel."
msgstr "报告将在 `target/debugging-native-1.0.0-SNAPSHOT-native-image-source-jar/reports/` 下创建。当遇到方法/类缺失的问题，或遇到 Mandrel 禁止使用的方法时，这些报告是最有用的资源。"

#. type: Title ====
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Call Tree Reports"
msgstr "呼叫树报告"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"`call_tree` csv file reports are some of the default reports generated when the `-Dquarkus.native.enable-reports` option is passed in.\n"
"These csv files can be imported into a graph database, such as Neo4j,\n"
"to inspect them more easily and run queries against the call tree.\n"
"This is useful for getting an approximation on why a method/class is included in the binary."
msgstr "`call_tree` csv 文件报告是传入 选项时生成的一些默认报告。这些 csv 文件可以导入图数据库（如 Neo4j），以便更轻松地检查它们，并对调用树运行查询。这有助于大致了解二进制文件中包含方法/类的原因。 `-Dquarkus.native.enable-reports`"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Let’s see this in action."
msgstr "让我们看看这个行动。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "First, start a Neo4j instance:"
msgstr "首先，启动一个Neo4j实例。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Once the container is running,\n"
"you can access the link:http://localhost:7474[Neo4j browser].\n"
"Use `neo4j` as the username and the value of `NEO_PASS` as the password to log in."
msgstr "容器运行后，就可以访问 link:http://localhost:7474[Neo4j 浏览器] 了。使用 `neo4j` 作为用户名，使用 `NEO_PASS` 的值作为密码登录。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"To import the CSV files,\n"
"we need the following cypher script which will import the data within the CSV files and create graph database nodes and edges:"
msgstr "为了导入CSV文件，我们需要以下Cypher脚本，它将导入CSV文件内的数据，并创建图数据库的节点和边。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Copy and paste the contents of the script into a file called `import.cypher`."
msgstr "复制并粘贴脚本的内容到一个名为 `import.cypher` 的文件中。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Mandrel 22.0.0 contains a bug where the symbolic links used by the import cypher file are not correctly set when generating reports within a container\n"
"(for more details see link:https://github.com/oracle/graal/issues/4355[here]).\n"
"This can be worked around by copying the following script into a file and executing it:"
msgstr "Mandrel 22.0.0 包含一个错误，即在容器内生成报告时，导入 cypher 文件使用的符号链接未正确设置（更多详情，请参阅 link:https://github.com/oracle/graal/issues/4355[此处] ）。将以下脚本复制到文件中并执行即可解决这一问题："

#. type: delimited block =
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Next, copy the import cypher script and CSV files into Neo4j's import folder:"
msgstr "接下来，将导入的cypher脚本和CSV文件复制到Neo4j的导入文件夹。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "After copying all the files, invoke the import script:"
msgstr "拷贝完所有文件后，调用导入脚本。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Once the import completes (shouldn't take more than a couple of minutes), go to the link:http://localhost:7474[Neo4j browser],\n"
"and you'll be able to observe a small summary of the data in the graph:"
msgstr "导入完成后（应该不会超过几分钟），访问 link:http://localhost:7474[Neo4j 浏览器] ，就能在图表中看到数据的小结："

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"The data above shows that there are ~60000 methods, and just over ~200000 edges between them.\n"
"The Quarkus application demonstrated here is very basic, so there’s not a lot we can explore, but here are some example queries you can run to explore the graph in more detail.\n"
"Typically, you’d start by looking for a given method:"
msgstr "上面的数据显示有 ~60000 个方法，它们之间的边超过 ~200000 条。这里演示的 Quarkus 应用程序非常基本，所以我们可以探索的东西不多，但这里有一些示例查询，你可以运行它们来更详细地探索这个图。通常情况下，你可以从查找给定的方法开始："

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "From there, you can narrow down to a given method on a specific type:"
msgstr "从那里，你可以缩小到特定类型上的特定方法。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Once you’ve located the node for the specific method you’re after, a typical question you’d want to get an answer for is:\n"
"why does this method get included in the call tree?\n"
"To do that, start from the method and look for incoming connections at a given depth,\n"
"starting from the end method.\n"
"For example, methods that directly call a method can be located via:"
msgstr "找到特定方法的节点后，你想知道的一个典型问题是：为什么调用树中会包含这个方法？要做到这一点，可以从该方法开始，以给定的深度寻找传入连接，从结束方法开始。例如，可以通过以下方式找到直接调用方法的方法："

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Then you can look for direct calls at depth of 2,\n"
"so you’d search for methods that call methods that call into the target method:"
msgstr "然后，您可以在深度为 2 时查找直接调用，因此您可以查找调用目标方法的方法："

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"You can continue going up layers,\n"
"but unfortunately if you reach a depth with too many nodes,\n"
"the Neo4j browser will be unable to visualize them all.\n"
"When that happens, you can alternatively run the queries directly against the cypher shell:"
msgstr "你可以继续逐层向上，但不幸的是，如果你到达的深度有太多节点，Neo4j 浏览器将无法将它们全部可视化。如果出现这种情况，你也可以直接在 cypher shell 中运行查询："

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"For further information, check out this\n"
"link:https://quarkus.io/blog/quarkus-native-neo4j-call-tree[blog post]\n"
"that explores the Quarkus Hibernate ORM quickstart using the techniques explained above."
msgstr "如需了解更多信息，请查看这篇 link:https://quarkus.io/blog/quarkus-native-neo4j-call-tree[博文] ，其中使用上述技术探讨了 Quarkus Hibernate ORM 快速入门。"

#. type: Title ====
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Used Packages/Classes/Methods Reports"
msgstr "使用的包/类/方法报告"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"`used_packages`, `used_classes` and `used_methods` text file reports come in handy when comparing different versions of the application,\n"
"e.g. why does the image take longer to build? Or why is the image bigger now?"
msgstr "`used_packages` , `used_classes` 和 `used_methods` 文本文件报告在比较不同版本的应用程序时非常有用，例如，为什么图像的构建时间更长？或者为什么图像变大了？"

#. type: Title ====
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Further Reports"
msgstr "进一步的报告"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Mandrel can produce further reports beyond the ones that are enabled with the `-Dquarkus.native.enable-reports` option.\n"
"These are called expert options and you can learn more about them by running:"
msgstr "Mandrel 可以生成 `-Dquarkus.native.enable-reports` 选项所启用报告之外的其他报告。这些选项被称为专家选项，你可以通过运行"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"These expert options are not considered part of the GraalVM native image API,\n"
"so they might change anytime."
msgstr "这些专家选项不属于 GraalVM 本机镜像 API 的一部分，因此可能随时更改。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "To use these expert options, add them comma separated to the `-Dquarkus.native.additional-build-args` parameter."
msgstr "要使用这些专家选项，请将它们以逗号分隔添加到 `-Dquarkus.native.additional-build-args` 参数中。"

#. type: Title ===
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Build-time vs Run-time Initialization"
msgstr "构建时与运行时的初始化"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Quarkus instructs Mandrel to initialize as much as possible at build time,\n"
"so that runtime startup can be as fast as possible.\n"
"This is important in containerized environments where the startup speed has a big impact on how quickly an application is ready to do work.\n"
"Build time initialization also minimizes the risk of runtime failures due to unsupported features becoming reachable through runtime initialization,\n"
"thus making Quarkus more reliable."
msgstr "Quarkus 会指示 Mandrel 在构建时尽可能多地初始化，以便在运行时尽可能快地启动。这在容器化环境中非常重要，因为启动速度对应用程序准备工作的速度有很大影响。构建时初始化还能最大限度地降低由于运行时初始化可访问不支持的功能而导致运行时故障的风险，从而使 Quarkus 更加可靠。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"The most common examples of build-time initialized code are static variables and blocks.\n"
"Although Mandrel executes those at run-time by default,\n"
"Quarkus instructs Mandrel to run them at build-time for the reasons given."
msgstr "编译时初始化代码最常见的例子是静态变量和代码块。虽然 Mandrel 默认在运行时执行这些代码，但出于上述原因，Quarkus 会指示 Mandrel 在编译时运行它们。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"This means that any static variables initialized inline, or initialized in a static block,\n"
"will keep the same value even if the application is restarted.\n"
"This is a different behaviour compared to what would happen if executed as Java."
msgstr "这意味着，即使重新启动应用程序，任何内联初始化或在静态块中初始化的静态变量都将保持相同的值。这与以 Java 方式执行时的行为不同。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"To see this in action with a very basic example,\n"
"add a new `TimestampResource` to the application that looks like this:"
msgstr "要通过一个非常基本的示例了解该功能的实际操作，请在应用程序中添加一个新的 `TimestampResource` ，如下所示："

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Rebuild the binary using:"
msgstr "用以下方法重建二进制文件。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Run the application in one terminal\n"
"(make sure you stop any other native executable container runs before executing this):"
msgstr "在一个终端中运行应用程序（确保在执行此操作前停止其他本地可执行文件容器的运行）："

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Send a `GET` request multiple times from another terminal:"
msgstr "从另一个终端多次发送一个 `GET` 的请求。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"to see how the current time has been baked into the binary.\n"
"This time was calculated when the binary was being built,\n"
"hence application restarts have no effect."
msgstr "来查看二进制文件中的当前时间。该时间是在生成二进制文件时计算的，因此重新启动应用程序不会产生任何影响。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"In some situations, built time initializations can lead to errors when building native executables.\n"
"One example is when a value gets computed at build time which is forbidden to reside in the heap of the JVM that gets baked into the binary.\n"
"To see this in action, add this REST resource:"
msgstr "在某些情况下，构建时初始化可能会导致构建本地可执行文件时出现错误。其中一个例子是，在构建时计算出的值被禁止驻留在 JVM 的堆中，而该堆被打包到二进制文件中。要查看实际效果，请添加此 REST 资源："

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "When trying to rebuild the application, you’ll encounter an error:"
msgstr "当试图重建该应用程序时，你会遇到一个错误。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"So, what the message above is telling us is that our application caches a value that is supposed to be random as a constant.\n"
"This is not desirable because something that's supposed to be random is no longer so,\n"
"because the seed is baked in the image.\n"
"The message above makes it quite clear what is causing this,\n"
"but in other situations the cause might be more obfuscated.\n"
"As a next step, we'll add some extra flags to the native executable generation to get more information."
msgstr "因此，上面的信息告诉我们，我们的应用程序将一个本应是随机的值缓存为常数。这是不可取的，因为本应是随机的东西已经不再是随机的了，因为种子已经嵌入到图像中了。上面的信息很清楚地说明了造成这种情况的原因，但在其他情况下，原因可能更加模糊。下一步，我们将在本地可执行文件生成过程中添加一些额外标记，以获取更多信息。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "As suggested by the message, let's start by adding an option to track object instantiation:"
msgstr "正如消息中所建议的，让我们首先添加一个选项来跟踪对象的实例化。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"The error messages point to the code in the example,\n"
"but it can be surprising that a reference to `DnsClient` appears.\n"
"Why is that?\n"
"The key is in what happens inside `KeyPairGenerator.initialize()` method call.\n"
"It uses `JCAUtil.getSecureRandom()` which is why this is problematic,\n"
"but sometimes the tracing options can show some stack traces that do not represent what happens in reality.\n"
"The best option is to dig through the source code and use tracing output for guidance but not as full truth."
msgstr "错误信息指向示例中的代码，但令人惊讶的是，竟然出现了对 `DnsClient` 的引用。这是为什么呢？关键在于 `KeyPairGenerator.initialize()` 方法调用内部发生了什么。它使用 `JCAUtil.getSecureRandom()` ，这就是为什么会出现问题，但有时跟踪选项会显示一些堆栈跟踪，而这些堆栈跟踪并不代表实际发生的情况。最好的办法是挖掘源代码，使用跟踪输出作为指导，但不能作为全部真相。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Moving the `KEY_PAIR_GEN.initialize(1024);` call to the run-time executed method `encryptDecrypt` is enough to solve this particular issue.\n"
"Rebuild the application and verify that encrypt/decrypt endpoint works as expected by sending any message and check if the reply is the same as the incoming message:"
msgstr "将 `KEY_PAIR_GEN.initialize(1024);` 调用移至运行时执行的方法 `encryptDecrypt` 就足以解决这个特殊问题。重建应用程序，并通过发送任何信息来验证加密/解密端点是否按预期运行，并检查回复是否与收到的信息相同："

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Additional information on which classes are initialized and why can be obtained by passing in the `-H:+PrintClassInitialization` flag via `-Dquarkus.native.additional-build-args`."
msgstr "关于哪些类被初始化以及为什么被初始化的其他信息，可以通过 `-Dquarkus.native.additional-build-args` ，传入 `-H:+PrintClassInitialization` 标志获得。"

#. type: Title ===
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Profile Runtime Behaviour"
msgstr "配置文件运行时的行为"

#. type: Title ====
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Single Thread"
msgstr "单线程"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"In this exercise, we profile the runtime behaviour of some Quarkus application that was compiled to a native executable to determine where the bottleneck is.\n"
"Assume that you’re in a scenario where profiling the pure Java version is not possible, maybe because the issue only occurs with the native version of the application."
msgstr "在本练习中，我们将对编译为本地可执行文件的 Quarkus 应用程序的运行时行为进行剖析，以确定瓶颈所在。假设您无法对纯 Java 版本进行剖析，这可能是因为问题只出现在本地版本的应用程序中。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Add a REST resource with the following code\n"
"(example courtesy of link:https://github.com/apangin/java-profiling-presentation/blob/master/src/demo1/StringBuilderTest.java[Andrei Pangin's Java Profiling presentation]):"
msgstr "使用以下代码添加 REST 资源（示例来自 link:https://github.com/apangin/java-profiling-presentation/blob/master/src/demo1/StringBuilderTest.java[Andrei Pangin 的 Java Profiling 演示] ）："

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Recompile the application, rebuild the binary and run it. Attempting a simple curl will never complete, as expected:"
msgstr "重新编译应用程序，重建二进制文件并运行它。试图进行简单的curl操作将永远无法完成，正如预期的那样。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"However, the question we’re trying to answer here is:\n"
"what would be the bottleneck of such code?\n"
"Is it appending the characters? Is it deleting it? Is it checking whether the thread is alive?"
msgstr "然而，我们在这里要回答的问题是：这种代码的瓶颈是什么？是添加字符？是删除字符吗？是检查线程是否存活？"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Since we're dealing with a linux native executable,\n"
"we can use tools like `perf` directly.\n"
"To use `perf`,\n"
"go to the root of the project and start the tools container created earlier as a privileged user:"
msgstr "由于我们处理的是 Linux 本地可执行文件，因此可以直接使用 `perf` 等工具。要使用 `perf` ，请进入项目根目录，以特权用户身份启动之前创建的工具容器："

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Note that in order to use `perf` to profile the native executables in the guide,\n"
"the container needs to run as privileged, or with `--cap-add sys_admin`.\n"
"Please note that privileged containers are **NOT** recommended in production, so use this flag with caution!"
msgstr "请注意，要使用 `perf` 来配置指南中的本地可执行文件，容器需要以特权身份运行，或使用 `--cap-add sys_admin` 。请注意，生产中 *不* 建议使用特权容器，因此请谨慎使用此标记！"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Once the container is running, you need to ensure that the kernel is ready for the profiling exercises:"
msgstr "一旦容器运行，你需要确保内核为剖析练习做好准备。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"The kernel modifications above also apply to Linux virtual machines.\n"
"If running on a bare metal Linux machine,\n"
"tweaking only `perf_event_paranoid` is enough."
msgstr "上述内核修改也适用于 Linux 虚拟机。如果在裸机 Linux 机器上运行，只需调整 `perf_event_paranoid` 即可。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Then, from inside the tools container we execute:"
msgstr "然后，我们从工具容器内执行。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"The `perf record` command above takes `1009` samples per second.\n"
"Increasing this value means more samples are gathered,\n"
"which can end up affecting the runtime performance.\n"
"This also increases the amount of data generated.\n"
"The more data generated, the longer it takes to process it,\n"
"but the more precision you get on what the application is doing.\n"
"So, finding the right value is a balancing act."
msgstr "上述 `perf record` 命令每秒采集 `1009` 个样本。增加该值意味着要采集更多样本，最终会影响运行性能。这也会增加生成的数据量。生成的数据越多，处理数据的时间就越长，但应用程序运行的精度也就越高。因此，寻找合适的值是一个平衡的过程。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "While `perf record` is running, open another window and access the endpoint:"
msgstr "当 `perf record` 正在运行时，打开另一个窗口并访问端点。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"After a few seconds, halt the `perf record` process.\n"
"This will generate a `perf.data` file.\n"
"We could use `perf report` to inspect the perf data,\n"
"but you can often get a better picture showing that data as a flame graph.\n"
"To generate flame graphs, we will use\n"
"https://github.com/brendangregg/FlameGraph[FlameGraph GitHub repository],\n"
"which has already been installed inside the tools container."
msgstr "几秒钟后，停止 `perf record` 进程。这将生成一个 `perf.data` 文件。我们可以使用 `perf report` 来检查 perf 数据，但将这些数据显示为火焰图通常能获得更好的效果。要生成火焰图，我们将使用 link:https://github.com/brendangregg/FlameGraph[FlameGraph GitHub 代码库] ，它已安装在工具容器中。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Next, generate a flame graph using the data captured via `perf record`:"
msgstr "接下来，使用通过 `perf record` 捕获的数据生成一个火焰图。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"The flame graph is a svg file that a web browser, such as Firefox, can easily display.\n"
"After the above two commands complete one can open `flamegraph.svg` in their browser:"
msgstr "火焰图是一个 svg 文件，网络浏览器（如 Firefox）可以轻松显示。完成上述两个命令后，就可以在浏览器中打开 `flamegraph.svg` ："

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"We see a big majority of time spent in what is supposed to be our main,\n"
"but we see no trace of the `StringBuilderResource` class,\n"
"nor the `StringBuilder` class we're calling.\n"
"We should look at the symbol table of the binary:\n"
"can we find symbols for our class and `StringBuilder`?\n"
"We need those in order to get meaningful data.\n"
"From within the tools container, query the symbol table:"
msgstr "我们看到大部分时间都花在了应该是我们的主程序上，但我们看不到 `StringBuilderResource` 类的痕迹，也看不到我们正在调用的 `StringBuilder` 类。我们应该看看二进制文件的符号表：能找到我们的类和 `StringBuilder` 的符号吗？我们需要这些符号才能获得有意义的数据。在工具容器中查询符号表："

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"No output appears when querying the symbol table.\n"
"This is why we don't see any call graphs in the flame graphs.\n"
"This is a deliberate decision that native-image makes.\n"
"By default, it removes symbols from the binary."
msgstr "查询符号表时没有输出。这就是我们在火焰图中看不到任何调用图的原因。这是 native-image 故意做出的决定。默认情况下，它会删除二进制文件中的符号。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"To regain the symbols, we need to rebuild the binary instructing GraalVM not to delete the symbols.\n"
"On top of that, enable DWARF debug info so that the stack traces can be populated with that information.\n"
"From outside the tools container, execute:"
msgstr "要重新获得符号，我们需要重建二进制文件，指示 GraalVM 不要删除符号。此外，还要启用 DWARF 调试信息，这样堆栈跟踪就可以使用这些信息。在工具容器外执行"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Next, re-enter the tools container if you exited,\n"
"and inspect the native executable with `objdump`,\n"
"and see how the symbols are now present:"
msgstr "接下来，如果已退出，请重新进入工具容器，并使用 `objdump` 检查本地可执行文件，看看符号是如何出现的："

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "You should see a long list of symbols that match that pattern."
msgstr "你应该看到一长串符合该模式的符号。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Then, run the executable through perf,\n"
"*indicating that the call graph is dwarf*:"
msgstr "然后，通过 perf 运行可执行文件， *显示调用图为 dwarf* ："

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Run the curl command once again, stop the binary, generate the flamegraphs and open it:"
msgstr "再次运行curl命令，停止二进制，生成flamegraphs并打开它。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"The flamegraph now shows where the bottleneck is.\n"
"It's when `StringBuilder.delete()` is called which calls `System.arraycopy()`.\n"
"The issue is that 1 million characters need to be shifted in very small increments:"
msgstr "火焰图现在显示了瓶颈所在。在调用 `StringBuilder.delete()` 时，会调用 `System.arraycopy()` 。问题在于需要以很小的增量移动 100 万个字符："

#. type: Title ====
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Multi-Thread"
msgstr "多线程"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Multithreaded programs might require special attention when trying to understand their runtime behaviour.\n"
"To demonstrate this, add this `MulticastResource` code to your project\n"
"(example courtesy of link:https://github.com/apangin/java-profiling-presentation/blob/master/src/demo6/DatagramTest.java[Andrei Pangin's Java Profiling presentation]):"
msgstr "多线程程序在尝试了解其运行时行为时可能需要特别注意。为了演示这一点，请在您的项目中添加以下 `MulticastResource` 代码（示例由 link:https://github.com/apangin/java-profiling-presentation/blob/master/src/demo6/DatagramTest.java[Andrei Pangin 的 Java Profiling 演示] 提供）："

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Build the native executable with debug info:"
msgstr "构建带有调试信息的本地可执行文件。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "From inside the tools container (as privileged user) run the native executable through `perf`:"
msgstr "在工具容器内（作为特权用户）通过 `perf` ，运行本地可执行文件。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Invoke the endpoint to send the multicast packets:"
msgstr "调用端点来发送组播数据包。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Make and open a flamegraph:"
msgstr "制作并打开一个火焰图。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"The flamegraph produced looks odd. Each thread is treated independently even though they all do the same work.\n"
"This makes it difficult to have a clear picture of the bottlenecks in the program."
msgstr "生成的火焰图看起来很奇怪。每个线程都被独立处理，尽管它们都做着同样的工作。这样就很难清楚地了解程序中的瓶颈。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"This is happening because from a `perf` perspective, each thread is a different command.\n"
"We can see that if we inspect `perf report`:"
msgstr "出现这种情况是因为从 `perf` 的角度来看，每个线程都是不同的命令。如果我们检查 `perf report` ："

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"This can be worked around by applying some modifications to the perf output,\n"
"in order to make all threads have the same name. E.g."
msgstr "要解决这个问题，可以对 perf 输出进行一些修改，使所有线程的名称相同。例如"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"When you open the flamegraph, you will see all threads' work collapsed into a single area.\n"
"Then, you can clearly see that there's some locking that could affect performance."
msgstr "打开火焰图后，你会看到所有线程的工作都被折叠到一个区域中。然后，你就可以清楚地看到，有一些锁定可能会影响性能。"

#. type: Title ===
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Debugging Native Crashes"
msgstr "调试本地崩溃"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"One of the drawbacks of using native executables is that they cannot be debugged using the standard Java debuggers,\n"
"instead we need to debug them using `gdb`, the GNU Project debugger.\n"
"To demonstrate how to do this,\n"
"we are going to generate a native Quarkus application that crashes due to a Segmentation Fault when accessing http://localhost:8080/crash.\n"
"To achieve this, add the following REST resource to the project:"
msgstr "使用本地可执行文件的缺点之一是无法使用标准 Java 调试器进行调试，我们需要使用 `gdb` （GNU 项目调试器）进行调试。为了演示如何调试，我们将生成一个本地 Quarkus 应用程序，该程序在访问 http://localhost:8080/crash 时会因分段故障而崩溃。为此，请在项目中添加以下 REST 资源："

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"This code will try to copy 256 bytes from address `0x0` to `0x80` resulting in a Segmentation Fault.\n"
"To verify this, compile and run the example application:"
msgstr "这段代码将尝试从地址 `0x0` 复制 256 字节到 `0x80` ，结果导致分段故障。要验证这一点，请编译并运行示例应用程序："

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "This will result in the following output:"
msgstr "这将导致以下输出。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"The omitted output above contains clues to what caused the issue,\n"
"but in this exercise we are going to assume that no information was provided.\n"
"Let’s try to debug the segmentation fault using `gdb`.\n"
"To do that, go to the root of the project and enter the tools container:"
msgstr "上面省略的输出包含导致问题的线索，但在本练习中，我们假设没有提供任何信息。让我们尝试使用 `gdb` 调试分段故障。为此，请转到项目根目录并进入工具容器："

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Then start the application in `gdb` and execute `run`."
msgstr "然后在 `gdb` 中启动应用程序并执行 `run` 。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Next, try to access http://localhost:8080/crash:"
msgstr "接下来，尝试访问 http://localhost:8080/crash "

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "This will result in the following message in `gdb`:"
msgstr "这将导致 `gdb` 中出现以下信息。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "If we try to get more info about the backtrace that led to this crash we will see that there is not enough information available."
msgstr "如果我们试图获得更多关于导致这次崩溃的回溯信息，我们会发现没有足够的信息可用。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"This is because we didn’t compile the Quarkus application with `-Dquarkus.native.debug.enabled`,\n"
"so `gdb` cannot find debugging symbols for our native executable,\n"
"as indicated by the \"_No debugging symbols found in ./target/debugging-native-1.0.0-SNAPSHOT-runner_\" message in the beginning of `gdb`."
msgstr "这是因为我们没有使用 `-Dquarkus.native.debug.enabled` 编译 Quarkus 应用程序，所以 `gdb` 无法找到本地可执行文件的调试符号，正如 `gdb` 开头的 _\"No debugging symbols found in ./target/debugging-native-1.0.0-SNAPSHOT-runner_ \" 信息所示。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Recompiling the Quarkus application with `-Dquarkus.native.debug.enabled` and rerunning it through `gdb` we are now able to get a backtrace making clear what caused the crash.\n"
"On top of that, add `-H:-OmitInlinedMethodDebugLineInfo` option to avoid inlined methods being omitted from the backtrace:"
msgstr "使用 `-Dquarkus.native.debug.enabled` 重新编译 Quarkus 应用程序并通过 `gdb` 重新运行，我们现在可以获得一个回溯跟踪，清楚地说明了导致崩溃的原因。在此基础上，添加 `-H:-OmitInlinedMethodDebugLineInfo` 选项，以避免从回溯中省略内联方法："

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"We already see that `gdb` is able to tell us which method caused the crash and where it’s located in the source code.\n"
"We can also get a backtrace of the call graph that led us to this state:"
msgstr "我们已经看到 `gdb` 能够告诉我们是哪个方法导致了崩溃以及它在源代码中的位置。我们还可以获得导致崩溃的调用图的回溯："

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Similarly, we can get a backtrace of the call graph of other threads."
msgstr "同样地，我们可以得到其他线程的调用图的回溯。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "First, we can list the available threads with:"
msgstr "首先，我们可以用以下方法列出可用的线程。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "select the thread we want to inspect, e.g. thread 1:"
msgstr "选择我们要检查的线程，例如线程1。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "and, finally, print the stack trace:"
msgstr "最后，打印堆栈跟踪。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Alternatively, we can list the backtraces of all threads with a single command:"
msgstr "另外，我们也可以用一条命令列出所有线程的回溯记录。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Note, however, that despite being able to get a backtrace we can still not list the source code at point with the `list` command."
msgstr "然而，请注意，尽管能够得到一个回溯，我们仍然不能用 `list` 命令列出点的源代码。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"This is because `gdb` is not aware of the location of the source files.\n"
"We are running the executable outside the target directory.\n"
"To fix this we can either rerun `gdb` from the target directory or,\n"
"run `directory target/debugging-native-1.0.0-SNAPSHOT-native-image-source-jar/sources` e.g.:"
msgstr "这是因为 `gdb` 不知道源文件的位置。我们正在目标目录之外运行可执行文件。要解决这个问题，我们可以从目标目录重新运行 `gdb` ，或者运行 `directory target/debugging-native-1.0.0-SNAPSHOT-native-image-source-jar/sources` ，例如"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"We can now examine line `169` and get a first hint of what might be wrong\n"
"(in this case we see that it fails at the first read from src which contains the address `0x0000`),\n"
"or walk up the stack using `gdb`’s `up` command to see what part of our code led to this situation.\n"
"For more information about using `gdb` to debug native executables, see the\n"
"link:https://www.graalvm.org/latest/reference-manual/native-image/debugging-and-diagnostics/DebugInfo/[GraalVM Debug Info Feature] guide."
msgstr "现在，我们可以检查 `169` 行，初步了解可能出错的地方（在本例中，我们可以看到它在第一次读取包含 `0x0000` 地址的 src 时失败了），或者使用 `gdb` 的 `up` 命令沿着堆栈往上走，看看是哪部分代码导致了这种情况。有关使用 `gdb` 调试本地可执行文件的更多信息，请参阅 link:https://www.graalvm.org/latest/reference-manual/native-image/debugging-and-diagnostics/DebugInfo/[GraalVM 调试信息功能] 指南。"

#. type: Title ==
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Frequently Asked Questions"
msgstr "常见问题"

#. type: Title ===
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Why is the process of generating a native executable slow?"
msgstr "为什么生成本地可执行文件的过程很慢？"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Native executable generation is a multi-step process.\n"
"The analysis and compile steps are the most expensive of all and hence the ones that dominate the time spent generating the native executable."
msgstr "本地可执行文件的生成是一个多步骤的过程。其中，分析和编译步骤的成本最高，因此在生成本地可执行文件的时间中占主导地位。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"In the analysis phase, a static points-to analysis starts from the main method of the program to find out what is reachable.\n"
"As new classes are discovered, some of them will be initialized during this process depending on the configuration.\n"
"In the next step, the heap is snapshotted and checks are made to see which types need to be available at runtime.\n"
"The initialization and heap snapshotting can cause new types to be discovered, in which case the process is repeated.\n"
"The process stops when a fixed point is reached, that is when the reachable program grows no more."
msgstr "在分析阶段，静态点到点分析从程序的主方法开始，以找出可达到的目标。由于发现了新的类，在此过程中会根据配置初始化其中一些类。下一步，将对堆进行快照，并检查哪些类型需要在运行时可用。初始化和堆快照可能会导致发现新的类型，在这种情况下，该过程将重复进行。当达到一个固定点，即可达到的程序不再增长时，该过程就会停止。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "The compilation step is pretty straightforward, it simply compiles all the reachable code."
msgstr "编译步骤非常直接，它只是简单地编译所有可到达的代码。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"The time spent in analysis and compilation phases depends on how big the application is.\n"
"The bigger the application, the longer it takes to compile it.\n"
"However, there are certain features that can have an exponential effect.\n"
"For example, when registering types and methods for reflection access,\n"
"the analysis can’t easily see what’s behind those types or methods,\n"
"so it has to do more work to complete the analysis step."
msgstr "分析和编译阶段所花费的时间取决于应用程序的规模。应用程序越大，编译所需的时间就越长。不过，某些特性会产生指数效应。例如，在为反射访问注册类型和方法时，分析程序无法轻易看到这些类型或方法背后的内容，因此需要做更多的工作才能完成分析步骤。"

#. type: Title ===
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "I get a `AnalysisError\\$ParsingError` when building a native executable due to an `UnresolvedElementException`, what can I do?"
msgstr "我在构建本地可执行文件时得到一个 `OutOfMemoryError` (OOME)，我可以做什么？"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"When building a native executable Quarkus requires all classes being referenced by the code, no matter if they are build-time or run-time initialized, to be present in the classpath.\n"
"This way it ensures that there will be no crashes at runtime due to potential `NoClassDefFoundError` exceptions.\n"
"To achieve this it makes use of GraalVM's `--link-at-build-time` parameter:"
msgstr "在构建本地可执行文件时，Quarkus 要求代码引用的所有类（不管是构建时初始化的还是运行时初始化的）都必须存在于 classpath 中。这样，它就能确保运行时不会因为潜在的 `NoClassDefFoundError` 异常而崩溃。为此，它使用了 GraalVM 的 `--link-at-build-time` 参数："

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"This, however, may result in an `AnalysisError\\$ParsingError` due to an `UnresolvedElementException` at build time.\n"
"This is often caused because the application references a class from an https://maven.apache.org/guides/introduction/introduction-to-optional-and-excludes-dependencies.html#optional-dependencies[optional dependency]."
msgstr "但是，这可能会在构建时由于 `UnresolvedElementException` 而导致 `AnalysisError\\$ParsingError` 。造成这种情况的原因通常是应用程序引用了 link:https://maven.apache.org/guides/introduction/introduction-to-optional-and-excludes-dependencies.html#optional-dependencies[可选依赖项中] 的一个类。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "If you have access to the source code responsible for the reference to the missing dependency and can alter it, you should consider one of the following:"
msgstr "如果你可以访问负责引用缺失依赖关系的源代码，并且可以改变它，你应该考虑以下方法之一："

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Remove the reference if it's not actually necessary."
msgstr "如果实际上没有必要，就把参考文献删除。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Move the affected code in a sub-module and make the dependency non-optional (as is the best practice)."
msgstr "将受影响的代码移到一个子模块中，并使依赖性成为非选择性的（这也是最佳做法）。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Make the dependency non-optional."
msgstr "使依赖性成为非选择性的。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "In the unfortunate case where the reference causing the issue is made by a 3rd party library, that you cannot modify, you should consider one of the following:"
msgstr "在不幸的情况下，如果导致该问题的引用是由第三方库提供的，而你又无法修改，你应该考虑以下情况："

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Use a class/method substitution to remove the said reference."
msgstr "使用类/方法替换来删除上述引用。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Add the optional dependency as a non-optional dependency of your project."
msgstr "将可选的依赖关系作为你的项目的非可选依赖关系。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Note that although option (1) is the best choice performance wise, as it minimizes the applications footprint,it might not be trivial to implement.\n"
"To make matters worse, it's also not easy to maintain as it is tightly coupled to the 3rd party library implementation.\n"
"Option (2) is a straight forward alternative to work around the issue, but comes at the cost of including possibly never invoked code in the resulting native executable."
msgstr "需要注意的是，虽然方案（1）是性能方面的最佳选择，因为它能最大限度地减少应用程序的占用空间，但实现起来可能并不容易。更糟糕的是，由于它与第三方库的实现紧密相连，因此也不容易维护。方案(2)是解决这一问题的直接替代方案，但代价是在生成的本地可执行文件中包含可能从未调用过的代码。"

#. type: Title ===
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "I get an `OutOfMemoryError` (OOME) building native executables, what can I do?"
msgstr "我在构建本地可执行文件时得到一个 `OutOfMemoryError` (OOME)，我可以做什么？"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Building native executables is not only time consuming, but it also takes a fair amount of memory.\n"
"For example, building a sample native Quarkus Jakarta Persistence application such as the Hibernate ORM quickstart,\n"
"may use 6GB to 8GB resident set size in memory.\n"
"A big chunk of this memory is Java heap,\n"
"but extra memory is required for other aspects of the JVM that runs the native building process.\n"
"It is still possible to build such applications in environments that have total memory close to the limits,\n"
"but to do that it is necessary to shrink the maximum heap size of the GraalVM native image process.\n"
"To do that, set a maximum heap size using the `quarkus.native.native-image-xmx` property.\n"
"For example, we can instruct GraalVM to use 5GB of maximum heap size by passing in\n"
"`-Dquarkus.native.native-image-xmx=5g` in the command line."
msgstr "构建本地可执行文件不仅耗时，还会占用大量内存。例如，构建一个本地 Quarkus Jakarta Persistence 应用程序示例（如 Hibernate ORM quickstart）可能会占用 6GB 至 8GB 的内存常驻集。其中很大一部分内存是 Java 堆，但运行本地构建过程的 JVM 的其他方面也需要额外的内存。在总内存接近限制的环境中仍有可能构建此类应用程序，但为此必须缩小 GraalVM 本地映像进程的最大堆大小。为此，请使用 `quarkus.native.native-image-xmx` 属性设置最大堆大小。例如，我们可以在命令行中输入 `-Dquarkus.native.native-image-xmx=5g` ，指示 GraalVM 使用 5GB 的最大堆大小。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Building native executables this way might have the side effect of requiring more time to complete.\n"
"This is due to garbage collection having to work harder for native image generation to have free space to do its job."
msgstr "以这种方式生成本地可执行文件可能会产生副作用，即需要更多时间才能完成。这是由于垃圾回收必须更加努力地生成本地映像，以便有可用空间来完成工作。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Note that typical applications are likely bigger than quickstarts,\n"
"so the memory requirements will also likely be higher."
msgstr "请注意，典型的应用程序可能比快速启动程序更大，因此内存需求也可能更高。"

#. type: Title ===
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Why is runtime performance of a native executable inferior compared to JVM mode?"
msgstr "为什么本地可执行文件的运行时性能比JVM模式要差？"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"As with most things in life there are some trade-offs involved when choosing native compilation over JVM mode.\n"
"So depending on the application the runtime performance of a native application might be slower compared to JVM mode,\n"
"though that’s not always the case."
msgstr "与生活中的大多数事情一样，在选择本地编译而非 JVM 模式时也会有一些权衡。因此，根据不同的应用程序，本地应用程序的运行性能可能会比 JVM 模式慢，但也并非总是如此。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"JVM execution of an application includes runtime optimization of the code that profits from profile information built up during execution.\n"
"That includes the opportunities to inline a lot more of the code,\n"
"locate hot code on direct paths (i.e. ensure better instruction cache locality)\n"
"and cut out a lot of the code on cold paths (on the JVM a lot of code does not get compiled until something tries to execute it -- it is replaced with a trap that causes deoptimization and recompilation).\n"
"Removal of cold paths provides many more optimization opportunities than are available for ahead of time compilation because it significantly reduces the branch complexity and combinatorial logic of the smaller amount of hot code that is compiled."
msgstr "应用程序的 JVM 执行包括代码的运行时优化，这可以从执行过程中建立的配置文件信息中获益。这包括内联更多代码、在直接路径上定位热代码（即确保更好的指令缓存本地性）以及删除冷路径上的大量代码（在 JVM 上，大量代码在被执行之前不会被编译，而是被陷阱取代，导致去优化和重新编译）。与提前编译相比，去除冷路径能提供更多的优化机会，因为它大大降低了编译的少量热代码的分支复杂性和组合逻辑。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"By contrast, native executable compilation has to cater for all possible execution paths when it compiles code offline since it does not know which are the hot or cold paths and cannot use the trick of planting a trap and recompiling if it is hit. For the same reason it cannot load the dice to ensure that code cache conflicts are minimized by co-locating hot paths adjacent.\n"
"Native executable generation is able to remove some code because of the closed world hypothesis but that is often not enough to make up for all the benefits that profiling and runtime deopt & recompile provides to the JVM JIT compiler."
msgstr "相比之下，本地可执行文件编译在离线编译代码时必须照顾到所有可能的执行路径，因为它不知道哪些是热路径，哪些是冷路径，也无法使用设置陷阱并在中招后重新编译的技巧。出于同样的原因，它也无法加载骰子，以确保通过将热路径放在相邻位置来尽量减少代码缓存冲突。由于封闭世界假设的存在，本地可执行文件生成能够删除一些代码，但这往往不足以弥补剖析和运行时去选项与重新编译为 JVM JIT 编译器带来的所有好处。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Note, however, that there is a price you pay for that potentially higher JVM speed, and that price is in increased resource usage (both CPU and memory) and startup time because:"
msgstr "然而，请注意，你要为这种潜在的更高的JVM速度付出代价，这种代价就是增加资源的使用（包括CPU和内存）和启动时间，因为。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "it takes some time before the JIT kicks in and fully optimizes the code."
msgstr "在JIT启动并完全优化代码之前，需要一些时间。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "the JIT compiler consumes resources that could be utilized by the application."
msgstr "JIT编译器消耗了本可由应用程序使用的资源。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "the JVM has to retain a lot more metadata and compiler/profiler data to support the better optimizations that it can offer."
msgstr "JVM必须保留更多的元数据和编译器/profiler数据，以支持它所能提供的更好的优化。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "The reason for 1) is that code needs to be run interpreted for some time and, possibly, to be compiled several times before all potential optimizations are realized to ensure that:"
msgstr "1）的原因是，代码需要被解释运行一段时间，而且可能在所有潜在的优化实现之前，需要被编译几次，以确保。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "it’s worth compiling that code path, i.e. it’s being executed enough times, and that"
msgstr "值得对该代码路径进行编译，即它被执行了足够多的次数，并且"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "we have enough profiling data to perform meaningful optimizations."
msgstr "我们有足够的分析数据来进行有意义的优化。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"An implication of 1) is that for small, short-lived applications a native executable may well be a better bet.\n"
"Although the compiled code is not as well optimized it is available straight away."
msgstr "1）的含义是，对于小型、短期的应用程序来说，本地可执行文件可能是更好的选择。虽然编译后的代码没有得到很好的优化，但可以直接使用。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"The reason for 2) is that the JVM is essentially running the compiler at runtime in parallel with the application itself.\n"
"In the case of native executables the compiler is run ahead of time removing the need to run the compiler in parallel with the application."
msgstr "2）的原因是，JVM 基本上是在运行时与应用程序本身并行运行编译器。而在本地可执行文件中，编译器是提前运行的，无需与应用程序并行运行编译器。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"There are several reasons for 3). The JVM does not have a closed world assumption.\n"
"So, it has to be able to recompile code if loading of new classes implies that it needs to revise optimistic assumptions made at compile time.\n"
"For example, if an interface has only one implementation it can make a call jump directly to that code.\n"
"However, in the case where a second implementation class is loaded the call site needs to be patched to test the type of the receiver instance and jump to the code that belongs to its class.\n"
"Supporting optimizations like this one requires keeping track of a lot more details of the class base than a native executable,\n"
"including recording the full class and interface hierarchy,\n"
"details of which methods override other methods, all method bytecode etc.\n"
"In a native executable most of the details of class structure and bytecode can be ignored at run time."
msgstr "3）有几个原因。JVM 没有封闭世界的假设。因此，如果加载新类意味着需要修改编译时的乐观假设，JVM 必须能够重新编译代码。例如，如果一个接口只有一个实现，它可以直接调用跳转到该代码。但是，如果加载了第二个实现类，则需要对调用站点进行修补，以测试接收器实例的类型，并跳转到属于其类的代码。与本地可执行文件相比，支持类似的优化需要跟踪类库的更多细节，包括记录完整的类和接口层次结构、哪些方法覆盖其他方法的细节、所有方法的字节码等。在本地可执行文件中，类结构和字节码的大部分细节都可以在运行时忽略。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"The JVM also has to cope with changes to the class base or execution profiles that result in a thread going down a previously cold path.\n"
"At that point the JVM has to jump out of the compiled code into the interpreter and recompile the code to cater for a new execution profile that includes the previously cold path.\n"
"That requires keeping runtime info that allow a compiled stack frame to be replaced with one or more interpreter frames.\n"
"It also requires runtime extensible profile counters to be allocated and updated to track what has or has not been executed."
msgstr "JVM 还必须应对类库或执行配置文件的更改，这些更改会导致线程进入以前的冷路径。此时，JVM 必须从编译代码跳转到解释器，并重新编译代码，以适应新的执行配置文件，其中包括以前的冷路径。这就需要保留运行时信息，允许用一个或多个解释器框架替换编译堆栈框架。这还需要分配和更新运行时可扩展配置文件计数器，以跟踪已执行或未执行的配置文件。"

#. type: Title ===
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Why are native executables “big”?"
msgstr "为什么本地可执行文件是 \"大 \"的？"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "This can be attributed to a number of different reasons:"
msgstr "这可以归因于一些不同的原因。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Native executables include not only the application code but also, library code, and JDK code.\n"
"As a result a more fair comparison would be to compare the native executable’s size with the size of the application,\n"
"plus the size of the libraries it uses, plus the size of the JDK.\n"
"Especially the JDK part is not negligible even in simple applications like HelloWorld.\n"
"To get a glance on what is being pulled in the image one can use `-H:+PrintUniverse` when building the native executable."
msgstr "本地可执行文件不仅包括应用程序代码，还包括库代码和 JDK 代码。因此，比较本地可执行文件的大小与应用程序的大小、使用的库的大小以及 JDK 的大小更为公平。尤其是 JDK 部分，即使在 HelloWorld 这样简单的应用程序中也不容忽视。在构建本地可执行文件时，可以使用 `-H:+PrintUniverse` 来查看图像中的内容。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Some features are always included in a native executable even though they might never be actually used at run time.\n"
"An example of such a feature is garbage collection.\n"
"At compile time we can’t be sure whether an application will need to run garbage collection at run time,\n"
"so garbage collection is always included in native executables increasing their size even if not necessary.\n"
"Native executable generation relies on static code analysis to identify which code paths are reachable,\n"
"and static code analysis can be imprecise leading to more code getting into the image than what’s actually needed."
msgstr "有些功能总是包含在本地可执行文件中，即使它们在运行时可能从未被实际使用过。垃圾回收就是这样一个例子。在编译时，我们无法确定应用程序在运行时是否需要运行垃圾回收功能，因此垃圾回收功能总是被包含在本地可执行文件中，即使没有必要，也会增加可执行文件的大小。本地可执行文件的生成依赖于静态代码分析，以确定哪些代码路径是可到达的，而静态代码分析可能并不精确，导致进入映像的代码多于实际需要。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"There is a https://github.com/oracle/graal/issues/287[GraalVM upstream issue]\n"
"with some interesting discussions about that topic."
msgstr "在 link:https://github.com/oracle/graal/issues/287[GraalVM 上游问题] 中，有一些关于该主题的有趣讨论。"

#. type: Title ===
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "What version of Mandrel was used to generate a binary?"
msgstr "使用哪个版本的Mandrel来生成二进制文件？"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "One can see which Mandrel version was used to generate a binary by inspecting the binary as follows:"
msgstr "人们可以通过检查二进制文件来了解哪个Mandrel版本被用来生成二进制文件，如下所示。"

#. type: Title ===
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "How do I enable GC logging in native executables?"
msgstr "如何在本地可执行文件中启用GC日志？"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "See xref:gc-logging[Native Memory Management GC Logging section] for details."
msgstr "详见 link:#gc-logging[Native Memory Management GC Logging部分] 。"

#. type: Title ===
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Can I get a heap dump of a native executable? e.g. if it runs out of memory"
msgstr "我可以得到一个本地可执行程序的堆转储吗？ 例如，如果它的内存用完了"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Starting with GraalVM 22.2.0 it is possible to create heap dumps upon request,\n"
"e.g. `kill -SIGUSR1 <pid>`.\n"
"Support for dumping the heap dump upon an out of memory error will follow up."
msgstr "从 GraalVM 22.2.0 开始，可以根据请求创建堆转储，例如 `kill -SIGUSR1 <pid>` 。后续将支持在发生内存不足错误时转储堆转储。"

#. type: Title ===
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Can I build and run this examples outside a container in Linux?"
msgstr "我可以在Linux的容器外构建和运行这个例子吗？"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Yes you can.\n"
"In fact, debugging native executables on a Linux bare metal box offers the best possible experience.\n"
"In this kind of environments, root access is not needed except to install packages required to run some debug steps,\n"
"or to enable `perf` to gather events at the kernel."
msgstr "可以。事实上，在 Linux 裸机上调试本地可执行文件能带来最佳体验。在这种环境下，除了安装运行某些调试步骤所需的软件包或启用 `perf` 以收集内核事件外，不需要 root 访问权限。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "These are the packages you'll need on your Linux environment to run through the different debugging sections:"
msgstr "这些是你在Linux环境下运行不同调试部分所需的软件包。"

#. type: Title ===
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Generating flame graphs is slow, or produces errors, what can I do?"
msgstr "生成火焰图的速度很慢，或者产生错误，我可以做什么？"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"There are multiple ways in which a native executable produced by Mandrel can be profiled.\n"
"All the methods require you to pass in the `-H:-DeleteLocalSymbols` option."
msgstr "有多种方法可以对 Mandrel 生成的本地可执行文件进行剖析。所有方法都需要输入 `-H:-DeleteLocalSymbols` 选项。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"The method shown in this reference guide generates a binary with DWARF debug information,\n"
"runs it via `perf record` and then uses `perf script` and flame graph tooling to generate the flamegraphs.\n"
"However, the `perf script` post-processing step done on this binary can appear to be slow or can show some DWARF errors."
msgstr "本参考指南中展示的方法生成带有 DWARF 调试信息的二进制文件，通过 `perf record` 运行，然后使用 `perf script` 和火焰图形工具生成火焰图形。不过，在该二进制文件上进行的 `perf script` 后处理步骤可能会显得缓慢，或显示一些 DWARF 错误。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"An alternative method to generate flame graphs is to pass in `-H:+PreserveFramePointer` when generating the native executable instead of generating the DWARF debug information.\n"
"It instructs the binary to use an extra register for the frame pointer.\n"
"This enables `perf` to do stack walking to profile the runtime behaviour.\n"
"To generate the native executable using these flags, do the following:"
msgstr "生成火焰图的另一种方法是在生成本地可执行文件时输入 `-H:+PreserveFramePointer` ，而不是生成 DWARF 调试信息。它指示二进制文件为帧指针使用一个额外的寄存器。这样， `perf` 就能进行堆栈走查，对运行时的行为进行剖析。要使用这些标志生成本地可执行文件，请执行以下操作："

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "To get runtime profiling information out of the native executable, simply do:"
msgstr "要从本地可执行文件中获得运行时剖析信息，只需做以下工作。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"The recommended method for generating runtime profiling information is using the debug information rather than generating a binary that preserves the frame pointer.\n"
"This is because adding debug information to the native executable build process has no negative runtime performance whereas preserving the frame pointer does."
msgstr "生成运行时剖析信息的推荐方法是使用调试信息，而不是生成保留帧指针的二进制文件。这是因为在本地可执行文件编译过程中添加调试信息不会对运行时性能产生负面影响，而保留帧指针则会。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"DWARF debug info is generated in a separate file and can even be omitted in the default deployment and only be transferred and used on demand,\n"
"for profiling or debugging purposes.\n"
"Furthermore, the presence of debug info enables `perf` to show us the relevant source code lines as well,\n"
"hence it does not bloat the native executable itself.\n"
"To do that, simply call `perf report` with an extra parameter to show source code lines:"
msgstr "DWARF 调试信息生成在一个单独的文件中，甚至可以在默认部署中省略，只在需要时传输和使用，用于剖析或调试目的。此外，由于调试信息的存在， `perf` 还能显示相关的源代码行，因此不会使本地可执行文件本身变得臃肿。要做到这一点，只需在调用 `perf report` 时多加一个参数，即可显示源代码行："

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"The performance penalty of preserving the frame pointer is due to using the extra register for stack walking,\n"
"particularly in `x86_64` compared to `aarch64` where there are fewer registers available.\n"
"Using this extra register reduces the number of registers that are available for other work,\n"
"which can lead to performance penalties."
msgstr "保留帧指针的性能损失是由于使用了额外的寄存器进行堆栈行走，特别是在 `x86_64` 中，与 `aarch64` 相比，可用的寄存器更少。使用额外的寄存器会减少可用于其他工作的寄存器数量，从而导致性能下降。"

#. type: Title ===
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "I think I’ve found a bug in native-image, how can I debug it with the IDE?"
msgstr "我想我在native-image中发现了一个bug，我怎样才能用IDE来调试它？"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Although it is possible to remote debug processes within containers,\n"
"it might be easier to step-by-step debug native-image by installing Mandrel locally and adding it to the path of the shell process."
msgstr "虽然可以远程调试容器中的进程，但通过在本地安装 Mandrel 并将其添加到 shell 进程的路径中，逐步调试本地镜像可能会更容易。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Native executable generation is the result of two Java processes that are executed sequentially.\n"
"The first process is very short and its main job is to set things up for the second process.\n"
"The second process is the one that takes care of most of the work.\n"
"The steps to debug one process or the other vary slightly."
msgstr "本地可执行文件的生成是两个顺序执行的 Java 进程的结果。第一个进程非常短，主要任务是为第二个进程做准备。第二个进程负责大部分工作。调试一个进程或另一个进程的步骤略有不同。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Let’s discuss first how to debug the second process,\n"
"which is the one you most likely to want to debug.\n"
"The starting point for the second process is the `com.oracle.svm.hosted.NativeImageGeneratorRunner` class.\n"
"To debug this process, simply add `--debug-attach=*:8000` as an additional build time argument:"
msgstr "让我们先讨论一下如何调试第二个进程，这也是您最有可能要调试的进程。第二个进程的起点是 `com.oracle.svm.hosted.NativeImageGeneratorRunner` 类。要调试该进程，只需在构建时添加 `--debug-attach=*:8000` 作为附加参数即可："

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"The starting point for the first process is the `com.oracle.svm.driver.NativeImages` class.\n"
"In GraalVM CE distributions, this first process is a binary, so debugging it in the traditional way with a Java IDE is not possible.\n"
"However, Mandrel distributions (or locally built GraalVM CE instances) keep this as a normal Java process,\n"
"so you can remote debug this process by adding the `--vm.agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:8000` as an additional build argument, e.g."
msgstr "第一个进程的起点是 `com.oracle.svm.driver.NativeImages` 类。在 GraalVM CE 发行版中，第一个进程是一个二进制进程，因此无法使用传统的 Java IDE 进行调试。不过，Mandrel 发行版（或本地构建的 GraalVM CE 实例）会将其保留为普通 Java 进程，因此您可以通过添加 `--vm.agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:8000` 作为额外的构建参数来远程调试该进程，例如"

#. type: Title ===
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Can I use JFR/JMC to debug or profile native binaries?"
msgstr "我可以使用JFR/JMC来调试或剖析本地二进制文件吗？"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"https://docs.oracle.com/javacomponents/jmc-5-4/jfr-runtime-guide/about.htm#JFRUH170[Java Flight Recorder (JFR)] and\n"
"https://www.oracle.com/java/technologies/jdk-mission-control.html[JDK Mission Control (JMC)]\n"
"can be used to profile native binaries since GraalVM CE 21.2.0.\n"
"However, JFR in GraalVM is currently limited in capabilities compared to HotSpot.\n"
"The custom event API is fully supported, but some VM level features are unavailable.\n"
"More events and JFR features will continue to be added in later releases.\n"
"The following table outlines Native Image JFR support and limitations by version."
msgstr "自 GraalVM CE 21.2.0 起， link:https://docs.oracle.com/javacomponents/jmc-5-4/jfr-runtime-guide/about.htm#JFRUH170[Java Flight Recorder (JFR)] 和 link:https://www.oracle.com/java/technologies/jdk-mission-control.html[JDK Mission Control (JMC)] 可用于剖析本地二进制文件。 不过，与 HotSpot 相比，GraalVM 中的 JFR 目前功能有限。自定义事件 API 已完全支持，但某些 VM 级功能不可用。在以后的版本中将继续添加更多事件和 JFR 功能。下表概述了各版本对本地映像 JFR 的支持和限制。"

#. type: Table
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "GraalVM Version"
msgstr "GraalVM版本"

#. type: Table
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Supports"
msgstr "支持"

#. type: Table
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Limitations"
msgstr "限制条件"

#. type: Table
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "GraalVM CE 21.3 and Mandrel 21.3"
msgstr "GraalVM CE 21.3和Mandrel 21.3"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"* Minimal VM Level events\n"
"* Custom events API\n"
"* Start recordings upon executabe run or JFR Recording API"
msgstr ""
"\n"
" 最低虚拟机级别事件\n"
"\n"
" 自定义事件 API\n"
"\n"
" 运行执行程序或 JFR 录制 API 时开始录制"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"* No old object sampling\n"
"* No stacktrace tracing\n"
"* No event streaming"
msgstr ""
"\n"
" 无旧对象采样\n"
"\n"
" 无堆栈跟踪\n"
"\n"
" 无事件流"

#. type: Table
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "GraalVM CE 22.3 and Mandrel 22.3"
msgstr "GraalVM CE 22.3和Mandrel 22.3"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"* Everything from GraalVM CE 21.3\n"
"* Additional monitor and thread events"
msgstr ""
"\n"
" GraalVM CE 21.3 中的所有内容\n"
"\n"
" 额外的监控器和线程事件"

#. type: Table
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "GraalVM CE for JDK 17/20 and Mandrel 23.0"
msgstr "用于JDK 17/20和Mandrel 23.0的GraalVM CE"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"* Everything from GraalVM CE 22.3\n"
"* Additional monitor, thread, container, and allocation events\n"
"* Stacktraces\n"
"* Sampling based method profiling\n"
"* Event streaming"
msgstr ""
"\n"
" GraalVM CE 22.3 中的所有内容\n"
"\n"
" 额外的监控器、线程、容器和分配事件\n"
"\n"
" 堆栈跟踪\n"
"\n"
" 基于采样的方法剖析\n"
"\n"
" 事件流"

#. type: Table
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "* No old object sampling"
msgstr "没有旧对象取样"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"To add JFR support to your Quarkus executable, add the application property: `-Dquarkus.native.monitoring=jfr`.\n"
"E.g."
msgstr "要在 Quarkus 可执行文件中添加 JFR 支持，请添加应用程序属性： `-Dquarkus.native.monitoring=jfr` 。例如"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "Once the image is compiled, enable and start JFR via runtime flags: `-XX:+FlightRecorder` and `-XX:StartFlightRecording`. For example:"
msgstr "一旦图像被编译，通过运行时标志启用和启动JFR： `-XX:+FlightRecorder` 和 `-XX:StartFlightRecording` 。比如说。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "For more information about using JFR, see the link:https://www.graalvm.org/latest/reference-manual/native-image/debugging-and-diagnostics/JFR/[GraalVM JDK Flight Recorder (JFR) with Native Image] guide."
msgstr "有关使用 JFR 的更多信息，请参阅 link:https://www.graalvm.org/latest/reference-manual/native-image/debugging-and-diagnostics/JFR/[GraalVM JDK Flight Recorder (JFR) with Native Image] 指南。"

#. type: Title ===
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "How can we troubleshoot performance problems only reproducible in production?"
msgstr "我们怎样才能排除只有在生产中才能重现的性能问题？"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"In this situation, switching to JVM mode would be the best thing to try first.\n"
"If the performance issues continue after switching to JVM mode,\n"
"you can use more established and mature tooling to figure out the root cause.\n"
"If the performance issue is limited to native mode only,\n"
"you might not be able to use `perf`,\n"
"so JFR is the only way to gather any information in this situation.\n"
"As JFR support for native expands,\n"
"the ability to detect root causes of performance issues directly in production will improve."
msgstr "在这种情况下，最好先尝试切换到 JVM 模式。如果切换到 JVM 模式后性能问题仍然存在，您可以使用更成熟的工具来找出根本原因。如果性能问题仅限于本地模式，您可能无法使用 `perf` ，因此在这种情况下，JFR 是收集任何信息的唯一方法。随着 JFR 对本地模式支持的扩大，在生产中直接检测性能问题根本原因的能力也将提高。"

#. type: Title ===
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "What information helps most debug issues that happen either at build-time or run-time?"
msgstr "哪些信息最有助于调试在构建时或运行时发生的问题？"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"To fix classpath, class initialization or forbidden API errors at build time it's best to use xref:native-reports[build time reports] to understand the closed world universe.\n"
"A complete picture of the universe, along with the relationships between the different classes and methods will help uncover and fix most of the issues."
msgstr "要在构建时修复类路径、类初始化或禁止的 API 错误，最好使用 xref:native-reports[构建时报告] 来了解封闭世界。完整的宇宙图以及不同类和方法之间的关系将有助于发现并修复大部分问题。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"To fix runtime native specific errors,\n"
"it's best to have xref:debug-info[debug info builds] of the native executables around,\n"
"so that `gdb` can be hooked up quickly to debug the issue.\n"
"If you also add local symbols to the debug info builds,\n"
"you will obtain precise xref:profiling[profiling information] as well."
msgstr "要修复运行时的本地特定错误，最好能有本地可执行文件的 xref:debug-info[调试信息构建] ，这样就可以快速连接 `gdb` 来调试问题。如果在调试信息构建中添加本地符号，还能获得精确的 xref:profiling[剖析信息] 。"

#. type: Title ===
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Build stalled for minutes, barely using any CPU"
msgstr "建设停滞了几分钟，几乎没有使用任何CPU"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "It might so happen that the build gets stalled and even ends up with:"
msgstr "可能会发生这样的情况，即建设被停滞，甚至以失败告终："

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "One of the possible explanations could be a lack of entropy, e.g. on an entropy constrained VM, if such a source is needed as it is the case with Bouncycastle at build time."
msgstr "可能的解释之一是缺乏熵，例如在熵受限的虚拟机上，如果需要这样的源，就像Bouncycastle在构建时的情况。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "One can check the available entropy on a Linux system with:"
msgstr "人们可以用以下方法检查Linux系统上的可用熵值："

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "If the amount is not in hundreds, it could be a problem. A possible workaround is to compromise, acceptable for testing, and set:"
msgstr "如果金额不是以百为单位，可能是个问题。一个可能的变通办法是妥协，可接受的测试，并设置："

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "The proper solution is to increase the entropy available for the system. That is specific for each OS vendor and virtualization solution though."
msgstr "正确的解决方案是增加系统可用的熵。但这是针对每个操作系统供应商和虚拟化解决方案的。"

#. type: Title ===
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Work around missing CPU features"
msgstr "围绕缺失的CPU功能开展工作"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "When building on recent machines and running your native executable on older machines, you may see the following failure when starting the application:"
msgstr "当在最近的机器上构建并在旧机器上运行你的本地可执行文件时，你可能会在启动应用程序时看到以下故障："

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"This error message means that the native compilation used more advanced instruction sets, not supported by the CPU running the application.\n"
"To work around that issue, add the following line to the `application.properties`:"
msgstr "该错误信息意味着本地编译使用了更高级的指令集，而运行应用程序的 CPU 不支持这些指令集。要解决这个问题，请在 `application.properties` ："

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"Then, rebuild your native executable.\n"
"This setting forces the native compilation to use an older instruction set, increasing the chance of compatibility."
msgstr "然后，重建本地可执行文件。此设置可强制本地编译使用较早的指令集，从而提高兼容性。"

#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid ""
"To explicitly define the target architecture run `native-image -march=list` to get the supported configurations and then set `-march` to one of them, e.g., `quarkus.native.additional-build-args=-march=x86-64-v4`.\n"
"If you are targeting an AMD64 host, `-march=x86-64-v2` would work in most cases."
msgstr "要明确定义目标架构，可运行 `native-image -march=list` 获取支持的配置，然后将 `-march` 设置为其中之一，如 `quarkus.native.additional-build-args=-march=x86-64-v4` 。如果您的目标主机是 AMD64， `-march=x86-64-v2` 在大多数情况下都适用。"

#. type: Plain text
#: _versions/3.2/guides/native-reference.adoc
#, fuzzy
msgid "The `march` parameter is only available on GraalVM 23+."
msgstr "`march` 参数仅适用于 GraalVM 23+。"
