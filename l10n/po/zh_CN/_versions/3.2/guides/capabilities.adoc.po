# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-08-28 16:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy, no-wrap
msgid "Extension Capabilities"
msgstr "扩展能力"

#. type: Plain text
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy
msgid "Quarkus extensions may provide certain capabilities and require certain capabilities to be provided by other extensions in an application to function properly."
msgstr "Quarkus扩展可能会提供某些功能，并要求应用程序中的其他扩展提供某些功能才能正常运行。"

#. type: Plain text
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy
msgid "A capability represents a technical aspect, for example, it could be an implementation of some functionality, a contract or a specification. Each capability has a name which should follow the Java package naming convention, e.g. `io.quarkus.rest`."
msgstr "一个能力代表一个技术方面，例如，它可以是一些功能的实现、合同或规范。每个能力都有一个名称，应该遵循Java包的命名惯例，例如： `io.quarkus.rest` 。"

#. type: Plain text
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy
msgid "Capability promises and requirements are described in Quarkus extension descriptors - `META-INF/quarkus-extension.properties` entries of the runtime extension JAR artifacts."
msgstr "能力承诺和要求在Quarkus扩展描述符中描述-- `META-INF/quarkus-extension.properties` 运行时扩展JAR工件的条目。"

#. type: Plain text
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy
msgid "Only a single provider of any given capability is allowed in an application. If more than one provider of a capability is detected, the application build will fail with the corresponding error message."
msgstr "在一个应用程序中，只允许任何特定能力的单一提供者。如果检测到一个能力的提供者超过一个，应用程序的构建将失败，并出现相应的错误信息。"

#. type: Plain text
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy
msgid "If one extension requires a certain capability, there must be another one among the application dependencies that provides that capability, otherwise the build will fail with the corresponding error message."
msgstr "如果一个扩展需要某种能力，那么在应用程序的依赖关系中必须有另一个提供这种能力，否则，构建将失败，并出现相应的错误信息。"

#. type: Plain text
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy
msgid "At build time all the capabilities found in the application will be aggregated in an instance of the `io.quarkus.deployment.Capabilities` build item that extension build steps can inject to check whether a given capability is available or not."
msgstr "在构建时，在应用程序中发现的所有能力将被汇总到 `io.quarkus.deployment.Capabilities` 构建项目的实例中，扩展构建步骤可以注入该实例以检查特定能力是否可用。"

#. type: Title ==
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy, no-wrap
msgid "Declaring capabilities"
msgstr "宣告能力"

#. type: Plain text
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy
msgid "The `quarkus-extension-maven-plugin:extension-descriptor` Maven goal and the `extensionDescriptor` Gradle task, that generate extension descriptors, allow configuring provided and required capabilities in the following way:"
msgstr " `quarkus-bootstrap-maven-plugin:extension-descriptor` Maven目标和 `extensionDescriptor` Gradle任务，可生成扩展描述符，允许以下列方式配置所提供和所需的能力。"

#. type: Block title
#: _versions/3.2/guides/capabilities.adoc
#, no-wrap
msgid "Maven"
msgstr "Maven"

#. type: Plain text
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy
msgid "the extension provides the `io.quarkus.hibernate.orm` capability (multiple `provides` elements are allowed)"
msgstr "该扩展提供了 `io.quarkus.hibernate.orm` 能力（允许多个 `provides` 元素）。"

#. type: Plain text
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy
msgid "the extension requires the `io.quarkus.agroal` capability to be provided to function properly (multiple `requires` elements are allowed)"
msgstr "该扩展需要提供 `io.quarkus.agroal` 能力才能正常运行（允许多个 `requires` 元素）。"

#. type: Block title
#: _versions/3.2/guides/capabilities.adoc
#, no-wrap
msgid "Gradle (Groovy DSL)"
msgstr "Gradle (Groovy DSL)"

#. type: Plain text
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy
msgid "The Gradle extension plugin is still experimental and may change in the future."
msgstr "Gradle扩展插件仍然是实验性的，将来可能会改变。"

#. type: Block title
#: _versions/3.2/guides/capabilities.adoc
#, no-wrap
msgid "Gradle (Kotlin DSL)"
msgstr "或者，如果您使用Gradle Kotlin DSL。"

#. type: Title ===
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy, no-wrap
msgid "Conditional capability promises and requirements"
msgstr "有条件的能力承诺和要求"

#. type: delimited block *
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy
msgid "A capability may be provided or required only if a certain condition is satisfied, for example, if a certain configuration option is enabled or based on some other condition. Here is how a conditional capability promise can be configured:"
msgstr "一种能力只有在满足某种条件的情况下才会被提供或要求，例如，如果某种配置选项被启用或基于某种其他条件。下面是如何配置一个有条件的能力承诺。"

#. type: Plain text
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy
msgid "declaration of a conditional capability"
msgstr "宣布有条件的能力"

#. type: Plain text
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy
msgid "condition that must be resolved to `true` by a class implementing `java.util.function.BooleanSupplier`"
msgstr "的条件，必须由实现该条件的类解决到 `true` 。 `java.util.function.BooleanSupplier` "

#. type: Plain text
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy
msgid "provided capability name"
msgstr "提供的能力名称"

#. type: Plain text
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy
msgid "`providesIf` allows listing multiple `<positive>` as well as `<negative>` elements."
msgstr " `providesIf` 允许列出多个 ，以及 元素。 `<positive>` `<negative>` "

#. type: Plain text
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy
msgid "The corresponding `requiresIf` element is also supported."
msgstr "也支持相应的 `requiresIf` 元素。"

#. type: Plain text
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy
msgid "It is possible to specify `onlyIfNot` conditions as well. Conditions can also be set for required capabilities."
msgstr "也可以指定 `onlyIfNot` 条件。还可以为所需的能力设置条件。"

#. type: Plain text
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy
msgid "It is possible to specify `onlyIfNot` conditions as well. . Conditions can also be set for required capabilities."
msgstr "也可以指定 `onlyIfNot` 条件。.也可以为所需的能力设置条件。"

#. type: delimited block *
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy
msgid "In this case, `io.quarkus.container.image.openshift.deployment.OpenshiftBuild` should be included in one of the extension deployment dependencies and implement `java.util.function.BooleanSupplier`. At build time, the Quarkus bootstrap will create an instance of it and register `io.quarkus.container.image.openshift` capability only if its `getAsBoolean()` method returns true."
msgstr "在这种情况下， `io.quarkus.container.image.openshift.deployment.OpenshiftBuild` 应该被包含在一个扩展部署依赖中，并实现 `java.util.function.BooleanSupplier` 。在构建时，Quarkus bootstrap将创建一个它的实例，并仅在其 `getAsBoolean()` 方法返回true时注册 `io.quarkus.container.image.openshift` 能力。"

#. type: delimited block *
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy
msgid "An implementation of the `OpenshiftBuild` could look like this:"
msgstr " `OpenshiftBuild` 的实现可以是这样的。"

#. type: Title ==
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy, no-wrap
msgid "CapabilityBuildItem"
msgstr "能力建设项目"

#. type: Plain text
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy
msgid "Each provided capability will be represented with an instance of `io.quarkus.deployment.builditem.CapabilityBuildItem` at build time. Theoretically, `CapabilityBuildItem`'s could be produced by extension build steps directly, bypassing the corresponding declaration in the extension descriptors. However, this way of providing capabilities should be avoided, unless there is a very good reason not to declare a capability in the descriptor."
msgstr "在构建时，每个提供的能力将用一个 `io.quarkus.deployment.builditem.CapabilityBuildItem` 的实例来表示。理论上，\"CapabilityBuildItem \"可以由扩展构建步骤直接产生，绕过扩展描述符中的相应声明。然而，应该避免这种提供能力的方式，除非有非常好的理由不在描述符中声明一个能力。"

#. type: Plain text
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy
msgid "Capabilities produced from extension build steps aren't available for the Quarkus dev tools. As a consequences, such capabilities can not be taken into account when analyzing extension compatibility during project creation or when adding new extensions to a project."
msgstr "Quarkus开发工具无法使用从扩展构建步骤中产生的能力。因此，在项目创建过程中分析扩展的兼容性或向项目添加新的扩展时，不能考虑这些能力。"

#. type: Title ==
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy, no-wrap
msgid "Querying capabilities"
msgstr "查询能力"

#. type: Plain text
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy
msgid "All the capabilities found in an application will be aggregated during the build in an instance of `io.quarkus.deployment.Capabilities` build item, which can be injected by extension build steps to check whether a certain capability is present or not. E.g."
msgstr "在应用程序中发现的所有能力将在构建过程中汇总到 `io.quarkus.deployment.Capabilities` 构建项的实例中，它可以被扩展构建步骤注入，以检查某种能力是否存在。例如。"

#. type: Title ===
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy, no-wrap
msgid "Capability prefixes"
msgstr "能力的前缀"

#. type: Plain text
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy
msgid "Like a capability name, a capability prefix is a dot-separated string that is composed of either the first capability name element or a dot-separated sequence of the capability name elements starting from the first one. E.g. for capability `io.quarkus.resteasy.json.jackson` the following prefixes will be registered:"
msgstr "和能力名称一样，能力前缀是一个点分隔的字符串，由第一个能力名称元素或从第一个元素开始的点分隔的能力名称元素序列组成。例如，对于能力 `io.quarkus.resteasy.json.jackson` ，以下前缀将被注册。"

#. type: Plain text
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy
msgid "`io`"
msgstr " `io` "

#. type: Plain text
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy
msgid "`io.quarkus`"
msgstr " `io.quarkus` "

#. type: Plain text
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy
msgid "`io.quarkus.resteasy`"
msgstr " `io.quarkus.resteasy` "

#. type: Plain text
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy
msgid "`io.quarkus.resteasy.json`"
msgstr " `io.quarkus.resteasy.json` "

#. type: Plain text
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy
msgid "`Capabilities.isCapabilityWithPrefixPresent(prefix)` could be used to check whether a capability with a given prefix is present."
msgstr " `Capabilities.isCapabilityWithPrefixPresent(prefix)` 可以用来检查是否存在一个具有给定前缀的能力。"

#. type: Plain text
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy
msgid "Given that only a single provider of a given capability is allowed in an application, capability prefixes allow expressing a certain common aspect among different but somewhat related capabilities. E.g. there could be extensions providing the following capabilities:"
msgstr "鉴于在一个应用程序中只能有一个给定能力的提供者，能力前缀允许在不同但有一定关联的能力之间表达某种共同的方面。例如，可以有提供以下功能的扩展："

#. type: Plain text
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy
msgid "`io.quarkus.resteasy.json.jackson`"
msgstr "`io.quarkus.resteasy.json.jackson`"

#. type: Plain text
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy
msgid "`io.quarkus.resteasy.json.jackson.client`"
msgstr "`io.quarkus.resteasy.json.jackson.client`"

#. type: Plain text
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy
msgid "`io.quarkus.resteasy.json.jsonb`"
msgstr "`io.quarkus.resteasy.json.jsonb`"

#. type: Plain text
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy
msgid "`io.quarkus.resteasy.json.jsonb.client`"
msgstr "`io.quarkus.resteasy.json.jsonb.client`"

#. type: Plain text
#: _versions/3.2/guides/capabilities.adoc
#, fuzzy
msgid "Including any one of those extensions in an application will enable the RESTEasy JSON serializer. In case a build step needs to check whether the RESTEasy JSON serializer is already enabled in an application, instead of checking whether any of those capabilities is present, it could simply check whether an extension with prefix `io.quarkus.resteasy.json` is present."
msgstr "在应用程序中包含其中任何一个扩展，都将启用 RESTEasy JSON 序列器。如果构建步骤需要检查应用程序中是否已启用 RESTEasy JSON 序列化器，可以不检查是否存在这些功能，而只检查是否存在前缀为 `io.quarkus.resteasy.json` 的扩展。"
