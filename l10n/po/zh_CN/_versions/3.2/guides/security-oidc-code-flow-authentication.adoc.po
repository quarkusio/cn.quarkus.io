# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-08-28 16:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "OpenID Connect authorization code flow mechanism for protecting web applications"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "To protect your web applications, you can use the industry-standard OpenID Connect (OIDC) Authorization Code Flow mechanism provided by the Quarkus OIDC extension."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Overview of the OIDC authorization code flow mechanism"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "The Quarkus OpenID Connect (OIDC) extension can protect application HTTP endpoints by using the OIDC Authorization Code Flow mechanism supported by OIDC-compliant authorization servers, such as link:https://www.keycloak.org[Keycloak]."
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The Authorization Code Flow mechanism authenticates users of your web application by redirecting them to an OIDC provider, such as Keycloak, to log in.\n"
"After authentication, the OIDC provider redirects the user back to the application with an authorization code that confirms that authentication was successful.\n"
"Then, the application exchanges this code with the OIDC provider for an ID token (which represents the authenticated user), an access token, and a refresh token to authorize the user's access to the application."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "The following diagram outlines the Authorization Code Flow mechanism in Quarkus."
msgstr ""

#. type: Block title
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Authorization code flow mechanism in Quarkus"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "The Quarkus user requests access to a Quarkus web-app application."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "The Quarkus web-app redirects the user to the authorization endpoint, that is, the OIDC provider for authentication."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "The OIDC provider redirects the user to a login and authentication prompt."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "At the prompt, the user enters their user credentials."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "The OIDC provider authenticates the user credentials entered and, if successful, issues an authorization code then redirects the user back to the Quarkus web-app with the code included as a query parameter."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "The Quarkus web-app exchanges this authorization code with the OIDC provider for ID, access, and refresh tokens."
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The authorization code flow is completed and the Quarkus web-app uses the tokens issued to access information about the user and grants the relevant role-based authorization to that user.\n"
"The following tokens are issued:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "ID token: The Quarkus `web-app` application uses the user information in the ID token to enable the authenticated user to log in securely and to provide role-based access to the web application."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "Access token: The Quarkus web-app might use the access token to access the UserInfo API to get additional information about the authenticated user or to propagate it to another endpoint."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "Refresh token: (Optional) If the ID and access tokens expire, the Quarkus web-app can use the refresh token to get new ID and access tokens."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "See also the xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties] reference guide."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "To learn about how you can protect web applications by using the OIDC authorization code flow mechanism, see xref:security-oidc-code-flow-authentication-tutorial.adoc[Protect a web application by using OIDC authorization code flow]"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "If you want to protect service applications by using OIDC Bearer token authentication, see xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "For information about how to support multiple tenants, see xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy]."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Using the authorization code flow mechanism"
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Configuring access to the OIDC provider endpoint"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "The OIDC `web-app` application requires URLs of the OIDC provider's authorization, token, `JsonWebKey` (JWK) set, and possibly the `UserInfo`, introspection, and end session (RP-initiated logout) endpoints."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "By convention, they are discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc.auth-server-url`."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "Alternatively, if the discovery endpoint is not available, or you prefer to reduce the discovery endpoint round-trip, you can disable endpoint discovery and configure relative path values, for example:"
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Some OIDC providers support metadata discovery but do not return all the endpoint URL values required for the authorization code flow to complete or to support application functions, for example, user logout.\n"
"To work around this limitation, you can configure the missing endpoint URL values locally, as outlined in the following example:"
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You can use this same configuration to override a discovered endpoint URL if that URL does not work for the local Quarkus endpoint and a more specific value is required.\n"
"For example, a provider that supports both global and application-specific end-session endpoints returns a global end-session URL such as `http://localhost:8180/oidcprovider/account/global-logout`.\n"
"This URL will log the user out of all of the applications that the user is currently logged into.\n"
"However, if the requirement is for the current application to log the user out of only the specific application, you can override the global end-session URL, by setting the `quarkus.oidc.end-session-path=logout` parameter."
msgstr ""

#. type: Title ====
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "OIDC provider client authentication"
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"OIDC providers typically require applications to be identified and authenticated when they interact with the OIDC endpoints.\n"
"Quarkus OIDC, specifically the `quarkus.oidc.runtime.OidcProviderClient` class,  authenticates to the OIDC provider when the authorization code must be exchanged for the ID, access, and refresh tokens, or when the ID and access tokens need to be refreshed or introspected."
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Typically, client id and client secrets are defined for a given application when it enlists to the OIDC provider.\n"
"All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
msgstr ""

#. type: Block title
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Example of  `client_secret_basic`:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "Or:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "The following example shows the secret retrieved from a xref:credentials-provider.adoc[credentials provider]:"
msgstr ""

#. type: Block title
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Example of `client_secret_post`"
msgstr ""

#. type: Block title
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Example of `client_secret_jwt`, where the signature algorithm is HS256:"
msgstr ""

#. type: Block title
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Example of `client_secret_jwt`, where the secret is retrieved from a xref:credentials-provider.adoc[credentials provider]:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "Example of `private_key_jwt` with the PEM key file, and where the signature algorithm is RS256:"
msgstr ""

#. type: Block title
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Example of `private_key_jwt` with the keystore file, where the signature algorithm is RS256:"
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that a client secret does not get sent to the OIDC provider, therefore avoiding the risk of a secret being intercepted by a  'man-in-the-middle' attack."
msgstr ""

#. type: Title =====
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Additional JWT authentication options"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "If `client_secret_jwt`, `private_key_jwt` authentication methods are used or an Apple `post_jwt` method is used, then the JWT signature algorithm, key identifier, audience, subject and issuer can be customized, for example:"
msgstr ""

#. type: Title =====
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Apple POST JWT"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "The Apple OIDC provider uses a `client_secret_post` method whereby a secret is a JWT produced with a `private_key_jwt` authentication method but with the Apple account-specific issuer and subject claims."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "In Quarkus Security, `quarkus-oidc` supports a non-standard `client_secret_post_jwt` authentication method, which you can configure as follows:"
msgstr ""

#. type: Title =====
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "mutual TLS (mTLS)"
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "Some OpenID Connect providers might require that a client is authenticated as part of the mutual TLS  authentication process."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "The following example shows how you can configure `quarkus-oidc` to support `mTLS`:"
msgstr ""

#. type: Title ====
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Introspection endpoint authentication"
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Some OIDC providers require authenticating to its introspection endpoint by using Basic authentication and with credentials that are different to the `client_id` and `client_secret`.\n"
"If you have previously configured security authentication to support either the`client_secret_basic` or `client_secret_post` client authentication methods as described in the xref:oidc-provider-client-authentication[OIDC provider client authentication]  section, you might need to apply the additional configuration, as follows."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "If the tokens have to be introspected and the introspection endpoint-specific authentication mechanism is required, then you can configure `quarkus-oidc`, as follows:"
msgstr ""

#. type: Title ====
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Redirecting to and from the OIDC provider"
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"When a user is redirected to the OpenID Connect provider to authenticate, the redirect URL includes a `redirect_uri` query parameter, which indicates to the provider where the user has to be redirected to when the authentication is complete.\n"
"In our case, this is the Quarkus application."
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Quarkus sets this parameter to the current application request URL by default.\n"
"For example, if a user is trying to access a Quarkus service endpoint at `http://localhost:8080/service/1` then the `redirect_uri` parameter is set to `http://localhost:8080/service/1`.\n"
"Similarly, if the request URL is `http://localhost:8080/service/2` then the `redirect_uri` parameter is set to `http://localhost:8080/service/2`."
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Some OIDC providers require the `redirect_uri` to have the same value for a given application, for example, `http://localhost:8080/service/callback`, for all the redirect URLs.\n"
"In such cases, a `quarkus.oidc.authentication.redirect-path` property has to be set, for example, `quarkus.oidc.authentication.redirect-path=/service/callback`, and Quarkus will set the `redirect_uri` parameter to an absolute URL such as `http://localhost:8080/service/callback`, which will be the same regardless of the current request URL."
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If `quarkus.oidc.authentication.redirect-path` is set but you need the original request URL to be restored after the user has been redirected back to a unique callback URL, for example,  `http://localhost:8080/service/callback`, set `quarkus.oidc.authentication.restore-path-after-redirect` property to `true`.\n"
"This will restore the request URL such as `http://localhost:8080/service/1`."
msgstr ""

#. type: Title ====
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Customizing authentication requests"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "By default, only the `response_type` (set to `code`), `scope` (set to 'openid'), `client_id`, `redirect_uri` and `state` properties are passed as HTTP query parameters to the OpenID Connect provider's authorization endpoint when the user is redirected to it to authenticate."
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You can add more properties to it with `quarkus.oidc.authentication.extra-params`.\n"
"For example, some OIDC providers might choose to return the authorization code as part of the redirect URI's fragment, which would break the authentication process.\n"
"The following example shows how you can work around this issue:"
msgstr ""

#. type: Title ====
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Customizing the authentication error response"
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If the user authentication fails at the OIDC authorization endpoint, then the provider will redirect the user back to Quarkus with `error` and `error_description` parameters instead of `code`.\n"
"For example, this can happen when an invalid scope or other invalid parameters are included in the redirect to the provider."
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"In such cases, an HTTP `401`error will be returned by default.\n"
"However, you can instead request that a custom public error endpoint is called to return a more user-friendly HTML error page.\n"
"To do this, set the `quarkus.oidc.authentication.error-path` property, as shown in the following example:"
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Ensure that the property starts with a forward slash (/) character and the path is relative to the base URI of the current endpoint.\n"
"For example, if it is set as '/error' and the current request URI is `https://localhost:8080/callback?error=invalid_scope` then a final redirect will be made to `https://localhost:8080/error?error=invalid_scope`."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "It is important to ensure that this error endpoint is a public resource to prevent the user from being redirected to this page to be authenticated again."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Accessing authorization data"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "Let's first discuss how to access information around authorization."
msgstr ""

#. type: Title ====
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Accessing ID and access tokens"
msgstr ""

#. SJ: new concept topic to describe the different token types and usage proposed in next iteration
#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "The OIDC code authentication mechanism acquires three tokens during the authorization code flow: https://openid.net/specs/openid-connect-core-1_0.html#IDToken[IDToken], Access Token, and Refresh Token."
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"ID Token is always a JWT token and is used to represent a user authentication with the JWT claims.\n"
"You can use this to get the issuing OIDC endpoint, the username, and other information called _claims_.\n"
"One can access ID Token claims by injecting `JsonWebToken` with an `IdToken` qualifier:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "Access Token is usually used by the OIDC `web-app` application to access other endpoints on behalf of the currently logged-in user. The raw access token can be accessed as follows:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "Note that `AccessTokenCredential` is used if the access token issued to the Quarkus `web-app` application is opaque (binary) and can not be parsed to a `JsonWebToken` or if the inner content is necessary for the application."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "Injection of the `JsonWebToken` and `AccessTokenCredential` is supported in both `@RequestScoped` and `@ApplicationScoped` contexts."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "RefreshToken is used by Quarkusn OIDC to refresh the current ID and access tokens as part of its xref:session-management[session management] process."
msgstr ""

#. type: Title ====
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "User info"
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If the ID token does not provide enough information about the currently-authenticated user, you can get more information from the `UserInfo` endpoint.\n"
"Set the `quarkus.oidc.authentication.user-info-required=true` property for a link:https://openid.net/specs/openid-connect-core-1_0.html#UserInfo[UserInfo] JSON object from the OIDC `UserInfo` endpoint to be requested."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "A request will be sent to the OpenID Provider UserInfo endpoint using the access token returned with the authorization code grant response and an `io.quarkus.oidc.UserInfo` (a simple `jakarta.json.JsonObject` wrapper) object will be created. `io.quarkus.oidc.UserInfo` can be either injected or accessed as a SecurityIdentity `userinfo` attribute."
msgstr ""

#. type: Title ====
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Accessing the OIDC configuration information"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "The current tenant's discovered link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect Configuration Metadata] is represented by `io.quarkus.oidc.OidcConfigurationMetadata` and can be either injected or accessed as a `SecurityIdentity` `configuration-metadata` attribute."
msgstr "当前租户发现的 link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect配置元数据] 由 `io.quarkus.oidc.OidcConfigurationMetadata` 表示，可以作为 `SecurityIdentity` `configuration-metadata` 属性注入或访问。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "The default tenant's `OidcConfigurationMetadata` is injected if the endpoint is public."
msgstr "如果端点是公开的，则默认租户的 `OidcConfigurationMetadata` 会被注入。"

#. type: Title ====
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Mapping token claims and `SecurityIdentity` roles"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "The way the roles are mapped to the SecurityIdentity roles from the verified tokens is identical to how it is done for the xref:security-oidc-bearer-token-authentication.adoc[Bearer tokens] with the only difference being that https://openid.net/specs/openid-connect-core-1_0.html#IDToken[ID Token] is used as a source of the roles by default."
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If you use Keycloak, set a `microprofile_jwt` client scope for ID token to contain a `groups` claim.\n"
"For more information, see the link:https://www.keycloak.org/docs/latest/server_admin/#protocol[Keycloak Server Administration Guide]."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "But depending on your OIDC provider, roles might be stored in the access token or the user info."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "If the access token contains the roles and this access token is not meant to be propagated to the downstream endpoints then set `quarkus.oidc.roles.source=accesstoken`."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "If UserInfo is the source of the roles then set `quarkus.oidc.roles.source=userinfo`, and if needed, `quarkus.oidc.roles.role-claim-path`."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "Additionally, a custom `SecurityIdentityAugmentor` can also be used to add the roles. For more information, see xref:security-customization.adoc#security-identity-customization[SecurityIdentity customization]."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Ensuring validity of tokens and authentication data"
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"A core part of the authentication process is ensuring the chain of trust and validity of the information.\n"
"This is done by ensuring tokens are trustable."
msgstr ""

#. type: Title ====
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Token verification and introspection"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "The verification process of OIDC authorization code flow tokens follows the Bearer token authentication token verification and introspection logic. For more information, see the xref:security-oidc-bearer-token-authentication.adoc#token-verification-introspection[Token Verification And Introspection] section of the \"Quarkus OpenID Connect (OIDC) Bearer token authentication\" guide."
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"With Quarkus `web-app` applications, only the `IdToken` is verified by default because the access token is not used to access the current Quarkus `web-app` endpoint and is intended to be propagated to the services expecting this access token.\n"
"If you expect the access token to contain the roles required to access the current Quarkus endpoint (`quarkus.oidc.roles.source=accesstoken`) then it will also be verified."
msgstr ""

#. type: Title ====
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Token introspection and UserInfo cache"
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Code flow access tokens are not introspected unless they are expected to be the source of roles.\n"
"They will however be used to get `UserInfo`.\n"
"There will be one or two remote calls with the code flow access token, if the token introspection and/or `UserInfo` are required."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "Please see xref:security-oidc-bearer-token-authentication.adoc#token-introspection-userinfo-cache[Token Introspection and UserInfo cache] for more information about using a default token cache or registering a custom cache implementation."
msgstr ""

#. type: Title ====
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "JSON web token claim verification"
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Please see xref:security-oidc-bearer-token-authentication.adoc#jwt-claim-verification[JSON Web Token Claim verification] section about the claim verification, including the `iss` (issuer) claim.\n"
"It applies to ID tokens but also to access tokens in a JWT format if the `web-app` application has requested the access token verification."
msgstr ""

#. type: Title ====
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Further security with Proof Key for Code Exchange (PKCE)"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "link:https://datatracker.ietf.org/doc/html/rfc7636[Proof Key for Code Exchange] (PKCE) minimizes the risk of authorization code interception."
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"While PKCE is of primary importance to public OpenID Connect clients, such as SPA scripts running in a browser, it can also provide an extra level of protection to Quarkus OIDC `web-app` applications.\n"
"With PKCE, Quarkus OIDC `web-app` applications are confidential OpenID Connect clients capable of securely storing the client secret and using it to exchange the code for the tokens."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "You can enable `PKCE` for your OIDC `web-app` endpoint with a `quarkus.oidc.authentication.pkce-required` property and a 32-character secret, as shown in the following example:"
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "If you already have a 32-characters client secret then you do not need to set the  `quarkus.oidc.authentication.pkce-secret` property unless you prefer to use a different secret key."
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The secret key is required for encrypting a randomly generated `PKCE` `code_verifier` while the user is being redirected with the `code_challenge` query parameter to an OIDC provider to authenticate.\n"
"The `code_verifier` is decrypted when the user is redirected back to Quarkus and sent to the token endpoint alongside the `code`, client secret, and other parameters to complete the code exchange.\n"
"The provider will fail the code exchange if a `SHA256` digest of the `code_verifier` does not match the `code_challenge` that was provided during the authentication request."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Handling and controlling the lifetime of authentication"
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Another important requirement for authentication is to ensure that the data the session is based on is up-to-date without requiring the user to authenticate for every single request.\n"
"There are also situations where a logout event is explicitly requested.\n"
"Use the following key points to find the right balance for securing your Quarkus applications:"
msgstr ""

#. type: Title ====
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Cookies"
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The OIDC adapter uses cookies to keep the session, code flow, and post-logout state.\n"
"This state is a key element controlling the lifetime of authentication data."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "Use the `quarkus.oidc.authentication.cookie-path` property to ensure that the same cookie is visible when you access protected resources with overlapping or different roots, for example:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "`/index.html` and `/web-app/service`"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "`/web-app/service1` and `/web-app/service2`"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "`/web-app1/service` and `/web-app2/service`"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "By default, `quarkus.oidc.authentication.cookie-path` is set to `/` but you can change this to a more specific path if required, for example, `/web-app`."
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"To set the cookie path dynamically, configure the `quarkus.oidc.authentication.cookie-path-header` property.\n"
"Set the `quarkus.oidc.authentication.cookie-path-header` property.\n"
"For example, to set the cookie path dynamically by using the value of the`X-Forwarded-Prefix` HTTP header, configure the property to `quarkus.oidc.authentication.cookie-path-header=X-Forwarded-Prefix`."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "If `quarkus.oidc.authentication.cookie-path-header` is set but no configured HTTP header is available in the current request then the `quarkus.oidc.authentication.cookie-path` will be checked."
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If your application is deployed across multiple domains, set the `quarkus.oidc.authentication.cookie-domain` property so that the session cookie is visible to all protected Quarkus services.\n"
"For example, if you have Quarkus services deployed on the following two domains, then you must set the `quarkus.oidc.authentication.cookie-domain` property to `company.net`."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "\\https://whatever.wherever.company.net/"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "\\https://another.address.company.net/"
msgstr ""

#. type: Title =====
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Customizing the cookie with TokenStateManager"
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"OIDC `CodeAuthenticationMechanism` uses the default `io.quarkus.oidc.TokenStateManager` interface implementation to keep the ID, access, and refresh tokens returned in the authorization code or to refresh grant responses in a session cookie.\n"
"This makes Quarkus OIDC endpoints completely stateless."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "An access token is only required if the endpoint needs to:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "Retrieve `UserInfo`"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "Access the downstream service with this access token"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "Use the roles associated with the access token, which are checked by default"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "In such cases, use the `quarkus.oidc.token-state-manager.strategy` property to configure the token state strategy as follows:"
msgstr ""

#. type: Table
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "To..."
msgstr ""

#. type: Table
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Set the property to ..."
msgstr ""

#. type: Table
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Keep the ID and refresh tokens only"
msgstr ""

#. type: Table
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "`quarkus.oidc.token-state-manager.strategy=id-refresh-token`"
msgstr ""

#. type: Table
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Keep the ID token only"
msgstr ""

#. type: Table
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "`quarkus.oidc.token-state-manager.strategy=id-token`"
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If your chosen cookie strategy combines tokens and generates a large session cookie value that is greater than 4KB, some browsers might not be able to handle such cookie sizes.\n"
"This can occur when the ID, access, and refresh tokens are JWT tokens and the selected strategy is `keep-all-tokens` or with ID and refresh tokens when the strategy is `id-refresh-token`.\n"
"To workaround this issue,  you can set `quarkus.oidc.token-state-manager.split-tokens=true` to create a unique session token for each token."
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"`TokenStateManager` encrypts the tokens before storing them in the session cookie.\n"
"The following example shows how you configure `TokenStateManager` to split the tokens and encrypt them:"
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The token encryption secret must be at least 32 characters long.\n"
"If this key is not configured then either `quarkus.oidc.credentials.secret` or `quarkus.oidc.credentials.jwt.secret` will be hashed to create an encryption key."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "Configure the `quarkus.oidc.token-state-manager.encryption-secret` property if Quarkus authenticates to the OpenId Connect Provider by using one of the following authentication methods:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "mTLS"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "`private_key_jwt`, where a private RSA or EC key is used to sign a JWT token"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "Otherwise, a random key is generated, which can be problematic if the Quarkus application is running in the cloud with multiple pods managing the requests."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "You can disable token encryption in the session cookie by setting `quarkus.oidc.token-state-manager.encryption-required=false`."
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Register your own `io.quarkus.oidc.TokenStateManager' implementation as an `@ApplicationScoped` CDI bean if you need to customize the way the tokens are associated with the session cookie.\n"
"For example, you may want to keep the tokens in a database and have only a database pointer stored in a session cookie.\n"
"Note that this approach might introduce some challenges if you need to make the tokens available across multiple microservices nodes."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "Here is a simple example:"
msgstr ""

#. SJ: In next iteration, propose to recompose Logout information into a new concept topic
#. type: Title ====
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Logout and expiration"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "There are two main ways for the authentication information to expire: the tokens expired and were not renewed or an explicit logout operation was triggered."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "Let's start with explicit logout operations."
msgstr ""

#. type: Title =====
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "User-initiated logout"
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Users can request a logout by sending a request to the Quarkus endpoint logout path set with a `quarkus.oidc.logout.path` property.\n"
"For example, if the endpoint address is `https://application.com/webapp` and the `quarkus.oidc.logout.path` is set to \"/logout\" then the logout request has to be sent to `https://application.com/webapp/logout`."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "This logout request will start an https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout] and the user will be redirected to the OpenID Connect Provider to logout where a user may be asked to confirm the logout is indeed intended."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "The user will be returned to the endpoint post logout page once the logout has been completed if the `quarkus.oidc.logout.post-logout-path` property is set. For example, if the endpoint address is `https://application.com/webapp` and the `quarkus.oidc.logout.post-logout-path` is set to \"/signin\" then the user will be returned to `https://application.com/webapp/signin` (note this URI must be registered as a valid `post_logout_redirect_uri` in the OpenID Connect Provider)."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "If the `quarkus.oidc.logout.post-logout-path` is set then a `q_post_logout` cookie will be created and a matching `state` query parameter will be added to the logout redirect URI and the OpenID Connect Provider will return this `state` once the logout has been completed. It is recommended for the Quarkus `web-app` applications to check that a `state` query parameter matches the value of the `q_post_logout` cookie which can be done for example in a Jakarta REST filter."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "Note that a cookie name varies when using xref:security-openid-connect-multitenancy.adoc[OpenID Connect Multi-Tenancy]. For example, it will be named `q_post_logout_tenant_1` for a tenant with a `tenant_1` ID, and so on."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "Here is an example of how to configure a Quarkus app initiated logout flow:"
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You may also need to set `quarkus.oidc.authentication.cookie-path` to a path value common to all the application resources which is `/` in this example.\n"
"For more information, see the xref:oidc-cookies[Cookies] section."
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Some OIDC providers do not support link:https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-initiated logout] specification and do not return an OpenID Connect well-known `end_session_endpoint` metadata property.\n"
"However, this is not a problem for Quarkus because the specific logout mechanisms of such OIDC providers only differ in how the logout URL query parameters are named."
msgstr ""

#. type: delimited block =
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "According to the https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-initiated logout] specification, the `quarkus.oidc.logout.post-logout-path` property is represented as a `post_logout_redirect_uri` query parameter, which is not recognized by the providers that do not support this specification."
msgstr ""

#. type: delimited block =
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "You can use `quarkus.oidc.logout.post-logout-url-param` to work around this issue. You can also request more logout query parameters added with `quarkus.oidc.logout.extra-params`. For example, here is how you can support a logout with `Auth0`:"
msgstr ""

#. type: Title =====
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Back-channel logout"
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The OIDC provider can force the logout of all applications using the authentification data: this is called back-channel logout.\n"
"In this case the OIDC will call a specific URL from each application to trigger that logout."
msgstr ""

#. type: delimited block =
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "link:https://openid.net/specs/openid-connect-backchannel-1_0.html[Back-Channel Logout] is used by OpenID Connect providers to log out the current user from all the applications this user is currently logged in, bypassing the user agent."
msgstr ""

#. type: delimited block =
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "You can configure Quarkus to support `Back-Channel Logout` as follows:"
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The absolute `back-channel logout` URL is calculated by adding `quarkus.oidc.back-channel-logout.path` to the current endpoint URL, for example, `http://localhost:8080/back-channel-logout`.\n"
"You will need to configure this URL in the admin console of your OIDC provider."
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You will also need to configure a token age property for the logout token verification to succeed if your OpenID Connect Provider does not set an expiry claim in the current logout token.\n"
"For example, set `quarkus.oidc.token.age=10S` to ensure that no more than 10 seconds elapse since the logout token's `iat` (issued at) time."
msgstr ""

#. type: Title =====
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Front-channel logout"
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"link:https://openid.net/specs/openid-connect-frontchannel-1_0.html[Front-Channel Logout] can be used to logout the current user directly from the user agent (e.g. its browser).\n"
"It is like xref:back-channel-logout[Back-channel logout] but the logout steps are executed by the user agent like the browser and not in the background by the OIDP provider.\n"
"This option is rarely used."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "You can configure Quarkus to support `Front-Channel Logout` as follows:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "This path will be compared against the current request's path and the user will be logged out if these paths match."
msgstr ""

#. type: Title =====
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Local logout"
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"xref:user-initiated-logout[User-initiated logout] will log the user out of the OIDC provider, if it is used as single sign-on, it might not be what you require.\n"
"If, for example, your OIDC provider is Google, you will be logged out from Google and its services.\n"
"Instead the user might just want to log out of that specific application.\n"
"Another use case might be when the OIDC provider does not have a logout endpoint."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "By using xref:oidc-session[OidcSession], you can support a local logout, which means that only the local session cookie is cleared, as shown in the following example:"
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "Using `OidcSession` for local logout"
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"`io.quarkus.oidc.OidcSession` is a wrapper around the current `IdToken`, which can help to perform a xref:local-logout[Local logout], retrieve the current session's tenant identifier, and check when the session will expire.\n"
"More useful methods will be added to it over time."
msgstr ""

#. type: Title ====
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Session management"
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"By default, logout is based on the expiration time of the ID token issued by the OIDC provider. When the ID token expires, the current user session at the Quarkus endpoint is invalidated and the user is redirected to the OIDC provider again to authenticate.\n"
"If the session at the OIDC provider is still active, users are automatically re-authenticated without needing to provide their credentials again."
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The current user session can be automatically extended by enabling the `quarkus.oidc.token.refresh-expired` property.\n"
"If set to `true`, when the current ID token expires, a refresh token grant will be used to refresh the ID token as well as access and refresh tokens."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "If you have a xref:security-oidc-bearer-token-authentication.adoc#single-page-applications[single page application for service applications] where your OIDC provider script such as `keycloak.js` is managing an authorization code flow then that script will also control the SPA authentication session lifespan."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "If you work with a Quarkus OIDC `web-app` application, then it is the Quarkus OIDC code authentication mechanism that is managing the user session lifespan."
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"To use the refresh token, you should carefully configure the session cookie age.\n"
"The session age should be longer than the ID token lifespan and close to or equal to the refresh token lifespan."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "You calculate the session age by adding the lifespan value of the current ID token and the values of the `quarkus.oidc.authentication.session-age-extension` and `quarkus.oidc.token.lifespan-grace` properties."
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You use only the `quarkus.oidc.authentication.session-age-extension` property to significantly extend the session lifespan, if required.\n"
"You use the `quarkus.oidc.token.lifespan-grace` property only for taking some small clock skews into consideration."
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"When the current authenticated user returns to the protected Quarkus endpoint and the ID token associated with the session cookie has expired, then, by default, the user is automatically redirected to the OIDC Authorization endpoint to re-authenticate.\n"
"The OIDC provider might challenge the user again if the session between the user and this OIDC provider is still active, which might happen if the session is configured to last longer than the ID token."
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If the `quarkus.oidc.token.refresh-expired` is set to `true`, then the expired ID token (as well as the access token) is refreshed by using the refresh token returned with the initial authorization code grant response.\n"
"This refresh token might also be recycled (refreshed) itself as part of this process.\n"
"As a result, the new session cookie is created and the session is extended."
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"In instances where the user is not very active, you can use the `quarkus.oidc.authentication.session-age-extension` property to help handle expired ID tokens.\n"
"If the ID token expires, the session cookie might not be returned to the Quarkus endpoint during the next user request as the cookie lifespan would have elapsed.\n"
"Quarkus assumes that this request is the first authentication request.\n"
"Set `quarkus.oidc.authentication.session-age-extension` to be _reasonably_ long for your barely-active users and in accordance with your security policies."
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You can go one step further and proactively refresh ID tokens or access tokens that are about to expire.\n"
"Set `quarkus.oidc.token.refresh-token-time-skew` to the value you want to anticipate the refresh. If, during the current user request, it is calculated that the current ID token will expire within this `quarkus.oidc.token.refresh-token-time-skew` then it will be refreshed and the new session cookie will be created. This property should be set to a value which is less than the ID token lifespan; the closer it is to this lifespan value the more often the ID token will be refreshed."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "You can further optimize this process by having a simple JavaScript function ping your Quarkus endpoint to periodically emulate the user activity, which minimizes the time frame during which the user might have to be re-authenticated."
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You cannot extend the user session indefinitely.\n"
"The returning user with the expired ID token will have to re-authenticate at the OIDC provider endpoint once the refresh token has expired."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Integration with GitHub and non-OIDC OAuth2 providers"
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Some well known providers such as GitHub or LinkedIn are not OpenID Connect but OAuth2 providers which support the `authorization code flow`, for example, link:https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps[GitHub OAuth2] and link:https://docs.microsoft.com/en-us/linkedin/shared/authentication/authorization-code-flow[LinkedIn OAuth2].\n"
"Remember, OIDC is built on top of OAuth2."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "The main difference between OpenID Connect and OAuth2 providers is that OpenID Connect providers return an `ID Token` that represents a user authentication, in addition to the standard authorization code flow `access` and `refresh` tokens returned by `OAuth2` providers."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "OAuth2 providers such as GitHub do not return `IdToken`, the fact of the user authentication is implicit and is indirectly represented by the `access` token which represents an authenticated user authorizing the current Quarkus `web-app` application to access some data on behalf of the authenticated user."
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"For OIDC, you validate the ID token as proof of authentication validity whereas in the case of OAuth2, you validate the access token.\n"
"This is done by subsequently calling an endpoint that requires the access token and that typically returns user information.\n"
"This approach is similar to the OIDC xref:user-info[UserInfo] approach, with `UserInfo` fetched by Quarkus OIDC on your behalf."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "For example, when working with GitHub, the Quarkus endpoint can acquire an `access` token which allows the Quarkus endpoint to request a GitHub profile for the current user."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "To support the integration with such OAuth2 servers, `quarkus-oidc` needs to be configured a bit differently to allow the authorization code flow responses without `IdToken`: `quarkus.oidc.authentication.id-token-required=false`."
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Even though you configure the extension to support the authorization code flows without `IdToken`, an internal `IdToken` is generated to standardize the way `quarkus-oidc` operates.\n"
"You use an `IdToken` to support the authentication session and to avoid redirecting the user to the provider,  such as GitHub, on every request.\n"
"In this case, the session lifespan is set to 5 minutes, which you can can extend further as described in the xref:session-management[session management] section."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "This simplifies how you handle an application that supports multiple OIDC providers."
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The next step is to ensure that the returned access token can be useful and is valid to the current Quarkus endpoint.\n"
"The first way is to call the OAuth2 provider introspection endpoint by configuring `quarkus.oidc.introspection-path`, if the provider offers such an endpoint.\n"
"In this case you can use the access token as a source of roles using `quarkus.oidc.roles.source=accesstoken`.\n"
"If no introspection endpoint is present, you can attempt instead to request xref:user-info[UserInfo] from the provider as it will at least validate the access token.\n"
"To do so, specify `quarkus.oidc.token.verify-access-token-with-user-info=true`.\n"
"You also need to set the `quarkus.oidc.user-info-path` property to a URL endpoint that fetches the user info (or to an endpoint protected by the access token).\n"
"For GitHub, since it does not have an introspection endpoint, requesting the UserInfo is required."
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Requiring xref:user-info[UserInfo] involves making a remote call on every request.\n"
"Therefore, you might want to consider caching `UserInfo` data.\n"
"For more information, see the xref:security-oidc-bearer-token-authentication.adoc#token-introspection-userinfo-cache[Token Introspection and UserInfo cache] section of the \"OpenID Connect (OIDC) Bearer token authentication\" guide."
msgstr ""

#. type: delimited block =
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "Alternatively, you may want to request that `UserInfo` is embedded into the internal generated `IdToken` with the `quarkus.oidc.cache-user-info-in-idtoken=true` property - the advantage of this approach is that by default no cached `UserInfo` state will be kept with the endpoint - instead it will be stored in a session cookie. You may also want to consider encrypting `IdToken` in this case if `UserInfo` contains sensitive data. For more information, see xref:token-state-manager[Encrypt tokens with TokenStateManager]."
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"OAuth2 servers might not support a well-known configuration endpoint.\n"
"In this case, you must disable the discovery and configure the authorization, token, and introspection and the userinfo endpoint paths manually."
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"For well-known OIDC or OAuth2 providers, like Apple, Facebook, GitHub, Google, Microsoft, Spotify, and Twitter, Quarkus can help significantly simplify your application's configuration with the `quarkus.oidc.provider` property.\n"
"Here is how you can integrate `quarkus-oidc` with GitHub after you have link:https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app[created a GitHub OAuth application]. Configure your Quarkus endpoint like this:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "See xref:security-openid-connect-providers.adoc[OpenID Connect providers] for more details about configuring other well-known providers."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "This is all what is needed for an endpoint like this one to return the currently-authenticated user's profile with `GET http://localhost:8080/github/userinfo` and access it as the individual `UserInfo` properties:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "If you support more than one social provider with the help of xref:security-openid-connect-multitenancy.adoc[OpenID Connect Multi-Tenancy], for example, Google which is an OpenID Connect Provider returning `IdToken` and GitHub which is an OAuth2 provider returning no `IdToken` and only allowing to access `UserInfo` then you can have your endpoint working with only the injected `SecurityIdentity` for both Google and GitHub flows. A simple augmentation of `SecurityIdentity` will be required where a principal created with the internally generated `IdToken` will be replaced with the `UserInfo` based principal when the GiHub flow is active:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "Now, the following code will work when the user signs into your application by using Google or GitHub:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "Possibly a simpler alternative is to inject both `@IdToken JsonWebToken` and `UserInfo` and use `JsonWebToken` when dealing with the providers returning `IdToken` and `UserInfo` with the providers which do not return `IdToken`."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "You must ensure that the callback path you enter in the GitHub OAuth application configuration matches the endpoint path where you'd like the user be redirected to after a successful GitHub authentication and application authorization, in this case it has to be set to `http:localhost:8080/github/userinfo`."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Listening to important authentication events"
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You can register the `@ApplicationScoped` bean which will observe important OIDC authentication events.\n"
"When a user logs in for the first time, reauthenticates, or refreshes the session, the listener is updated.\n"
"In the future, more events might be reported.\n"
"For example:"
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Propagating tokens to downstream services"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "For information about Authorization Code Flow access token propagation to downstream services, see the xref:security-openid-connect-client-reference.adoc#token-propagation[Token Propagation] section."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Integration considerations"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "Your application secured by OIDC integrates in an environment where it can be called from single-page applications, needs to work with well-known OIDC providers, run behind HTTP Reverse Proxy, require external and internal access, etc."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "This section discusses these considerations."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Single-page applications"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "You can check if implementing single-page applications (SPAs) the way it is suggested in the xref:security-oidc-bearer-token-authentication.adoc#single-page-applications[Single-page applications] section of the \"OpenID Connect (OIDC) Bearer token authentication\" guide meets your requirements."
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If you prefer to use SPAs and JavaScript APIs such as `Fetch` or `XMLHttpRequest`(XHR) with Quarkus web applications, be aware that OpenID Connect providers might not support cross-origin resource sharing (CORS) for authorization endpoints where the users are authenticated after a redirect from Quarkus.\n"
"This will lead to authentication failures if the Quarkus application and the OpenID Connect provider are hosted on different HTTP domains, ports, or both."
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"In such cases, set the `quarkus.oidc.authentication.java-script-auto-redirect` property to `false`, which will instruct Quarkus to return a `499` status code and a `WWW-Authenticate` header with the `OIDC` value.\n"
"You must also update the browser script to set the `X-Requested-With` header with the `JavaScript` value and reload the last requested page in case of a `499` status code.\n"
"For example:"
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Cross-origin resource sharing"
msgstr "Cross-Origin 资源共享"

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If you plan to consume this application from a single-page application running on a different domain, you need to configure cross-origin resource sharing (CORS).\n"
"For more information, see the xref:http-reference.adoc#cors-filter[CORS filter] section of the \"HTTP reference\" guide."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Calling Cloud provider services"
msgstr ""

#. type: Title ====
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Google Cloud"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "You can have Quarkus OIDC `web-app` applications access **Google Cloud services** such as **BigQuery** on behalf of the currently-authenticated users who have enabled OpenID Connect (Authorization Code Flow) permissions to such services in their Google developer consoles."
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"It is super easy to do with https://github.com/quarkiverse[Quarkiverse] https://github.com/quarkiverse/quarkiverse-google-cloud-services[Google Cloud Services], only add\n"
"the https://github.com/quarkiverse/quarkiverse-google-cloud-services/releases/latest[latest tag] service dependency, for example:"
msgstr ""

#. type: Block title
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "and configure Google OIDC properties:"
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Running Quarkus application behind a reverse proxy"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "OIDC authentication mechanism can be affected if your Quarkus application is running behind a reverse proxy/gateway/firewall when HTTP `Host` header may be reset to the internal IP address, HTTPS connection may be terminated, etc. For example, an authorization code flow `redirect_uri` parameter may be set to the internal host instead of the expected external one."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "In such cases configuring Quarkus to recognize the original headers forwarded by the proxy will be required, for more information, see the xref:http-reference.adoc#reverse-proxy[Running behind a reverse proxy] Vert.x documentation section."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "For example, if your Quarkus endpoint runs in a cluster behind Kubernetes Ingress then a redirect from the OpenID Connect Provider back to this endpoint may not work since the calculated `redirect_uri` parameter may point to the internal endpoint address. This problem can be resolved with the following configuration:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "where `X-ORIGINAL-HOST` is set by Kubernetes Ingress to represent the external endpoint address."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "`quarkus.oidc.authentication.force-redirect-https-scheme` property may also be used when the Quarkus application is running behind an SSL terminating reverse proxy."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "External and internal access to the OIDC provider"
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Note that the OpenID Connect Provider externally accessible authorization, logout and other endpoints may have different HTTP(S) URLs compared to the URLs auto-discovered or configured relative to `quarkus.oidc.auth-server-url` internal URL.\n"
"In such cases an issuer verification failure may be reported by the endpoint and redirects to the externally accessible Connect Provider endpoints may fail."
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"In such cases, if you work with Keycloak then please start it with a `KEYCLOAK_FRONTEND_URL` system property set to the externally accessible base URL.\n"
"If you work with other Openid Connect providers then please check your provider's documentation."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Testing"
msgstr "测试"

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Testing is often tricky when it comes to authentification to a separate OIDC like server.\n"
"Quarkus offers several options from mocking to a local run of an OIDC provider."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "Start by adding the following dependencies to your test project:"
msgstr "首先在你的测试项目中添加以下依赖项："

#. type: Title ===
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Wiremock"
msgstr "Wiremock"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "Add the following dependency:"
msgstr "添加以下依赖关系："

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "Prepare the REST test endpoints, set `application.properties`, for example:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "and finally write the test code, for example:"
msgstr "并最终写出测试代码，例如："

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "`OidcWiremockTestResource` recognizes `alice` and `admin` users. The user `alice` has the `user` role only by default - it can be customized with a `quarkus.test.oidc.token.user-roles` system property. The user `admin` has the `user` and `admin` roles by default - it can be customized with a `quarkus.test.oidc.token.admin-roles` system property."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "Additionally, `OidcWiremockTestResource` set token issuer and audience to `https://service.example.com` which can be customized with `quarkus.test.oidc.token.issuer` and `quarkus.test.oidc.token.audience` system properties."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "`OidcWiremockTestResource` can be used to emulate all OpenID Connect providers."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Dev services for Keycloak"
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Using xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] is recommended for the integration testing against Keycloak.\n"
"`Dev Services for Keycloak` will launch and initialize a test container: it will create a `quarkus` realm, a `quarkus-app` client (`secret` secret) and add `alice` (`admin` and `user` roles) and `bob` (`user` role) users, where all of these properties can be customized."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "First, prepare `application.properties`. You can start with a completely empty `application.properties` as `Dev Services for Keycloak` will register `quarkus.oidc.auth-server-url` pointing to the running test container as well as `quarkus.oidc.client-id=quarkus-app` and `quarkus.oidc.credentials.secret=secret`."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "But if you already have all the required `quarkus-oidc` properties configured then you only need to associate `quarkus.oidc.auth-server-url` with the `prod` profile for `Dev Services for Keycloak`to start a container, for example:"
msgstr "但是如果你已经配置了所需的 `quarkus-oidc` 属性，那么你只需要将 `quarkus.oidc.auth-server-url` 与 `Keycloak开发服务` 的 `prod` 配置文件联系起来，以启动一个容器，例如："

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "If a custom realm file has to be imported into Keycloak before running the tests then you can configure `Dev Services for Keycloak` as follows:"
msgstr "如果在运行测试前必须将自定义领域文件导入Keycloak，那么你可以按以下方式配置 `Keycloak开发服务` ："

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Finally, write a test code the same way as it is described in the xref:integration-testing-wiremock[Wiremock] section.\n"
"The only difference is that `@QuarkusTestResource` is no longer needed:"
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Using KeycloakTestResourceLifecycleManager"
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Use `KeycloakTestResourceLifecycleManager` for your tests only if there is a good reason not to use `Dev Services for Keycloak`.\n"
"If you need to do the integration testing against Keycloak then you are encouraged to do it with xref:integration-testing-keycloak-devservices[Dev services For Keycloak]."
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "Start with adding the following dependency:"
msgstr "首先要添加以下依赖关系："

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "which provides `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` - an implementation of `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which starts a Keycloak container."
msgstr "它提供了 `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` - 一个 `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` 的实现，用来启动一个Keycloak容器。"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "And configure the Maven Surefire plugin as follows:"
msgstr "并按以下方式配置Maven Surefire插件："

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "(and similarly the Maven Failsafe plugin when testing in native image)."
msgstr ""

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"And now set the configuration and write the test code the same way as it is described in the xref:integration-testing-wiremock[Wiremock] section.\n"
"The only difference is the name of `QuarkusTestResource`:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "`KeycloakTestResourceLifecycleManager` registers `alice` and `admin` users. The user `alice` has the `user` role only by default - it can be customized with a `keycloak.token.user-roles` system property. The user `admin` has the `user` and `admin` roles by default - it can be customized with a `keycloak.token.admin-roles` system property."
msgstr "`KeycloakTestResourceLifecycleManager` 注册 `alice` 和 `admin` 用户。默认情况下，用户 `alice` 仅具有 `user` 角色 - 可以使用 `keycloak.token.user-roles` 系统属性对其进行自定义。默认情况下，用户 `admin` 具有 `用户` 和 `admin` 角色 - 可以使用 `keycloak.token.admin-roles` 系统属性对其进行自定义。"

#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"By default, `KeycloakTestResourceLifecycleManager` uses HTTPS to initialize a Keycloak instance which can be disabled with `keycloak.use.https=false`.\n"
"Default realm name is `quarkus` and client id - `quarkus-web-app` - set `keycloak.realm` and `keycloak.web-app.client` system properties to customize the values if needed."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "TestSecurity annotation"
msgstr "TestSecurity注解"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "See xref:security-oidc-bearer-token-authentication.adoc#integration-testing-security-annotation[Use TestingSecurity with injected JsonWebToken] section for more information about using `@TestSecurity` and `@OidcSecurity` annotations for testing the `web-app` application endpoint code which depends on the injected ID and access `JsonWebToken` as well as `UserInfo` and `OidcConfigurationMetadata`."
msgstr ""

#. type: Title ===
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Checking errors in the logs"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "To see details about the token verification errors, you must enable `io.quarkus.oidc.runtime.OidcProvider` `TRACE` level logging:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "To see details about the OidcProvider client initialization errors, enable `io.quarkus.oidc.runtime.OidcRecorder` `TRACE` level logging:"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "You can also from `quarkus dev` console hit `j` to change the application global log level."
msgstr ""

#. type: Title ==
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "References"
msgstr "参考文献"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties]"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "xref:security-openid-connect-providers.adoc[Configuring well-known OpenID Connect Providers]"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "xref:security-openid-connect-client-reference.adoc[OpenID Connect and OAuth2 Client and Filters Reference Guide]"
msgstr "link:security-openid-connect-client.html[Quarkus - 使用OpenID Connect，OAuth2客户端和过滤器的参考指南]"

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "xref:security-authentication-mechanisms.adoc#oidc-jwt-oauth2-comparison[Choosing between OpenID Connect, SmallRye JWT, and OAuth2 authentication mechanisms]"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "xref:security-authentication-mechanisms.adoc#combining-authentication-mechanisms[Combining authentication mechanisms]"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr ""

#. type: Plain text
#: _versions/3.2/guides/security-oidc-code-flow-authentication.adoc
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr ""
