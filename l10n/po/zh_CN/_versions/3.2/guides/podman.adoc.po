# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-08-28 16:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/3.2/guides/podman.adoc
#, fuzzy, no-wrap
msgid "Using Podman with Quarkus"
msgstr "在Quarkus中使用Podman"

#: _versions/3.2/guides/podman.adoc
#, fuzzy
msgid "https://podman.io/[Podman] is an open-source, daemonless, and rootless container engine for developing, managing, and running OCI Containers on Linux, Windows and Mac. It can be used to support the container functionality and Dev Services on Quarkus."
msgstr "link:https://podman.io/[Podman] 是一个开源、无守护进程、无 root 的容器引擎，用于在 Linux、Windows 和 Mac 上开发、管理和运行 OCI 容器。它可用于支持 Quarkus 上的容器功能和开发服务。"

#. type: Title ==
#: _versions/3.2/guides/podman.adoc
#, fuzzy, no-wrap
msgid "Installing Podman"
msgstr "在Linux上安装Podman"

#: _versions/3.2/guides/podman.adoc
#, fuzzy
msgid "Podman's install approach varies depending on the operating system you are using, and the required steps also change over time depending on the version of Podman. For Mac and Windows we highly recommend installing through the Podman Desktop graphical application. It is the simplest option with the least number of steps, it adds additional functionality like automatic start, and it helps manage future updates. There is also a CLI-only option that may be used. However, this setup requires additional manual tasks to manage, update, and launch the Podman Machine environment."
msgstr "Podman 的安装方法因您使用的操作系统而异，所需步骤也会随着时间的推移而改变，这取决于 Podman 的版本。对于 Mac 和 Windows，我们强烈推荐通过 Podman 桌面图形应用程序进行安装。这是最简单的选项，步骤最少，还增加了自动启动等附加功能，并有助于管理未来的更新。也可以使用纯 CLI 选项。不过，这种设置需要额外的手动任务来管理、更新和启动 Podman Machine 环境。"

#: _versions/3.2/guides/podman.adoc
#, fuzzy
msgid "The Homebrew package manager on Mac (*brew*) *should not be used to install Podman* as it results in an unverified combination of components. This is due to Homebrew sharing dependencies between projects, along with limited vetting of upgrade requests. As an example, there were several instances where an update to qemu broke on Apple Silicon, preventing Podman machine VMs from booting."
msgstr "*不应使用* Mac 上的 Homebrew 软件包管理器 *(brew* ) *安装 Podman* ，因为这会导致未经验证的组件组合。这是由于 Homebrew 项目之间共享依赖关系，以及对升级请求的审查有限。例如，在苹果硅上曾发生过几次 qemu 升级失败的情况，导致 Podman 虚拟机无法启动。"

#: _versions/3.2/guides/podman.adoc
#, fuzzy
msgid "On Linux, Podman is integrated as part of the operating system, and installed through the system's packager manager. As with Mac, and Windows, Podman Desktop can also be installed to supplement the Podman CLI. However, on Linux, Podman Desktop acts as a client to the native Podman integration, and does not manage the underlying Podman installation."
msgstr "在 Linux 上，Podman 集成为操作系统的一部分，通过系统的打包管理器进行安装。与 Mac 和 Windows 一样，也可以安装 Podman Desktop 作为 Podman CLI 的补充。不过，在 Linux 上，Podman Desktop 作为本地 Podman 集成的客户端，并不管理底层 Podman 安装。"

#: _versions/3.2/guides/podman.adoc
#, fuzzy
msgid "See https://podman-desktop.io/downloads/ for the latest version of Podman Desktop or pick the version that suits your operating system from the list below:"
msgstr "请参阅 https://podman-desktop.io/downloads/ 获取 Podman Desktop 的最新版本，或从以下列表中选择适合您操作系统的版本："

#: _versions/3.2/guides/podman.adoc
#, fuzzy
msgid "https://podman-desktop.io/macos/[MacOS]"
msgstr "link:https://podman-desktop.io/macos/[MacOS]"

#: _versions/3.2/guides/podman.adoc
#, fuzzy
msgid "https://podman-desktop.io/windows/[Windows]"
msgstr "link:https://podman-desktop.io/windows/[视窗]"

#: _versions/3.2/guides/podman.adoc
#, fuzzy
msgid "https://podman-desktop.io/linux/[Linux]"
msgstr "link:https://podman-desktop.io/linux/[利纳克斯]"

#: _versions/3.2/guides/podman.adoc
#, fuzzy
msgid "Additionally, if you are using Linux, see the Podman https://podman.io/docs/installation#installing-on-linux[Linux installation documentation] for instructions installing Podman to your specific Linux distribution."
msgstr "此外，如果您使用 Linux，请参阅 Podman link:https://podman.io/docs/installation#installing-on-linux[Linux 安装文档] ，了解将 Podman 安装到特定 Linux 发行版的说明。"

#: _versions/3.2/guides/podman.adoc
#, fuzzy
msgid "Docker compatibility mode"
msgstr "Docker 兼容模式"

#: _versions/3.2/guides/podman.adoc
#, fuzzy
msgid "When installing Podman Desktop on Mac or Windows, it's important to enable Docker compatibility mode when prompted. This will ensure the podman-mac-helper is setup on your behalf (normally a manual action you are prompted to do after start), necessary for supporting /var/run/docker.sock (privileged location). It will also install support for Docker Compose."
msgstr "在 Mac 或 Windows 上安装 Podman Desktop 时，请务必根据提示启用 Docker 兼容模式。这将确保 podman-mac-helper 代表你进行设置（通常是启动后提示你进行的手动操作），这是支持 /var/run/docker.sock （特权位置）所必需的。它还将安装对 Docker Compose 的支持。"

#: _versions/3.2/guides/podman.adoc
#, fuzzy
msgid "Platform differences"
msgstr "平台差异"

#: _versions/3.2/guides/podman.adoc
#, fuzzy
msgid "While interacting with containers is mostly identical between Mac, Windows, and Linux, there are important environmental differences to be aware of. Notably, the way in which containers are executed is different, since \"Containers are Linux\". More specifically, containers contain Linux userland binaries with a dependency on the Linux kernel syscall interface. As such, Linux containers cannot run natively on macOS or Windows; they instead require the use of a virtual machine (VM), running Linux, to host them. For systems that require it, Podman includes a subsystem called Podman Machine that is used to manage this VM. Podman Desktop performs a guided interactive setup of this VM, and will automatically launch it on your behalf."
msgstr "虽然 Mac、Windows 和 Linux 之间与容器的交互方式基本相同，但仍有一些重要的环境差异需要注意。值得注意的是，由于 \"容器是 Linux\"，执行容器的方式也有所不同。更具体地说，容器的 Linux 用户区二进制文件依赖于 Linux 内核系统调用接口。因此，Linux 容器无法在 macOS 或 Windows 上原生运行；它们需要使用运行 Linux 的虚拟机（VM）来托管。对于需要的系统，Podman 包含一个名为 Podman Machine 的子系统，用于管理该虚拟机。Podman Desktop 对虚拟机进行引导式交互设置，并代表您自动启动虚拟机。"

#: _versions/3.2/guides/podman.adoc
#, fuzzy
msgid "Rootful vs Rootless"
msgstr "有根与无根"

#: _versions/3.2/guides/podman.adoc
#, fuzzy
msgid "Podman supports two modes of operation: rootful, in which case the container runs as root on the Linux host (or VM in the case of Mac/Windows), and rootless, where the container runs under a standard Unix user account. The latter offers significantly stronger security, but some containers are not capable of running under the increased restrictions. As an example, if a container creates new devices, loopback mount points, and performs other highly restricted operations, then they must be run as root. Note, that this is not to be confused with the USER value specified in Containerfile/Dockerfile, which refers to how processes inside the container perceive themselves. In rootless, processes running in a container with a USER of \"root\" will appear to each other as root, but due to pid namespacing, they will actually be running as a standard restricted user account on the host system."
msgstr "Podman 支持两种运行模式：有根模式（rootful），即容器在 Linux 主机（或 Mac/Windows 下的虚拟机）上以 root 身份运行；无根模式（rootless），即容器在标准 Unix 用户账户下运行。后者的安全性要强得多，但有些容器无法在增加的限制下运行。例如，如果容器创建新设备、环回挂载点并执行其他高度受限的操作，那么它们必须以 root 身份运行。请注意，这不能与 Containerfile/Dockerfile 中指定的 USER 值混淆，后者指的是容器内的进程如何看待自己。在无根状态下，在 USER 为 \"root \"的容器中运行的进程在彼此看来都是 root，但由于 pid 命名间隔的原因，它们实际上是以主机系统上标准受限用户账户的身份运行的。"

#: _versions/3.2/guides/podman.adoc
#, fuzzy
msgid "Configuring on Win & Mac"
msgstr "在 Win 和 Mac 上进行配置"

#: _versions/3.2/guides/podman.adoc
#, fuzzy
msgid "On systems which involve a Podman Machine managed VM (Mac & Windows), container clients and Podman commands communicate remotely to either a rootful or rootless system service running the VM. Which is used is determined by the `rootful` setting of the Podman machine. For maximal compatibility, Podman Desktop defaults to enabling rootful for new machine instances. There is limited security impact to this since the VM itself is running under a user process. This can also be changed via the podman commands:"
msgstr "在涉及 Podman Machine 管理虚拟机（Mac 和 Windows）的系统上，容器客户端和 Podman 命令与运行虚拟机的有根或无根系统服务进行远程通信。使用哪种方式由 Podman 机器的 `rootful` 设置决定。为实现最大兼容性，Podman Desktop 默认为新机器实例启用 rootful。这对安全的影响有限，因为虚拟机本身是在用户进程下运行的。也可以通过 podman 命令进行更改："

#: _versions/3.2/guides/podman.adoc
#, fuzzy
msgid "Configuring on Linux"
msgstr "在 Linux 上配置"

#: _versions/3.2/guides/podman.adoc
#, fuzzy
msgid "On Linux systems, it's recommended to configure client access in a rootless configuration using a user systemd service."
msgstr "在 Linux 系统上，建议使用用户 systemd 服务在无根配置中配置客户端访问。"

#: _versions/3.2/guides/podman.adoc
#, fuzzy
msgid "This can be enabled using the following command:"
msgstr "可以使用以下命令启用该功能："

#. type: Title ===
#: _versions/3.2/guides/podman.adoc
#, fuzzy, no-wrap
msgid "Setting DOCKER_HOST on Linux"
msgstr "在Linux上设置DOCKER_HOST"

#: _versions/3.2/guides/podman.adoc
#, fuzzy
msgid "With the above rootless setup on Linux, you will need to configure clients, such as Quarkus and testcontainers by setting the `DOCKER_HOST` environment variable to point to the user service podman socket. The path be set using an expression which queries the path using the podman command:"
msgstr "在 Linux 上进行上述无根设置后，需要通过设置 `DOCKER_HOST` 环境变量来配置 Quarkus 和 testcontainers 等客户端，使其指向用户服务 podman socket。路径可通过使用 podman 命令查询路径的表达式来设置："

#: _versions/3.2/guides/podman.adoc
#, fuzzy
msgid "Other Linux settings"
msgstr "其他 Linux 设置"

#. type: Title ==
#: _versions/3.2/guides/podman.adoc
#, fuzzy, no-wrap
msgid "Short names of images"
msgstr "图像的短名称"

#: _versions/3.2/guides/podman.adoc
#, fuzzy
msgid ""
"Testcontainers and Quarkus Dev Services also expect the container service they make requests against to be non-interactive.\n"
"In case you have multiple registries configured in your Docker or Podman configuration, and when using short image names, Podman responds with a prompt asking which registry should be used to pull images."
msgstr "Testcontainers 和 Quarkus Dev Services 还希望它们请求的容器服务是非交互式的。如果您在 Docker 或 Podman 配置中配置了多个注册表，并且使用了简短的镜像名称，Podman 会提示您应使用哪个注册表来提取镜像。"

#: _versions/3.2/guides/podman.adoc
#, fuzzy
msgid ""
"While we recommend you to avoid short names and always use fully specified names including the registry, Testcontainers unfortunately relies on short names internally for the time being.\n"
"If you are using Testcontainers, either directly or through Dev Services, you need to disable this prompt by setting the `short-name-mode=\"disabled\"` configuration property of Podman in `/etc/containers/registries.conf`."
msgstr "我们建议您避免使用简短的名称，始终使用完整指定的名称（包括注册表），但不幸的是，Testcontainers 内部暂时依赖于简短的名称。如果您直接或通过 Dev Services 使用 Testcontainers，则需要通过在 `/etc/containers/registries.conf` 中设置 Podman 的 `short-name-mode=\"disabled\"` 配置属性来禁用此提示。"
