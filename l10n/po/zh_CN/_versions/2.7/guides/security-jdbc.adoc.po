# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.7/guides/security-jdbc.adoc:6
#, no-wrap
msgid "Using Security with JDBC"
msgstr "使用JDBC的安全性"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jdbc.adoc:11
msgid "This guide demonstrates how your Quarkus application can use a database to store your user identities."
msgstr "本指南展示了你的Quarkus应用程序如何使用数据库来存储你的用户身份。"

#. type: Title ==
#: upstream/_versions/2.7/guides/security-jdbc.adoc:13
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: upstream/_versions/2.7/guides/security-jdbc.adoc:17
#, no-wrap
msgid "Architecture"
msgstr "应用结构"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jdbc.adoc:20
msgid "In this example, we build a very simple microservice which offers three endpoints:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jdbc.adoc:22
msgid "`/api/public`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jdbc.adoc:23
msgid "`/api/users/me`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jdbc.adoc:24
msgid "`/api/admin`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jdbc.adoc:28
msgid "The `/api/public` endpoint can be accessed anonymously.  The `/api/admin` endpoint is protected with RBAC (Role-Based Access Control) where only users granted with the `admin` role can access. At this endpoint, we use the `@RolesAllowed` annotation to declaratively enforce the access constraint.  The `/api/users/me` endpoint is also protected with RBAC (Role-Based Access Control) where only users granted with the `user` role can access. As a response, it returns a JSON document with details about the user."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/security-jdbc.adoc:29
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jdbc.adoc:33
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jdbc.adoc:35
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jdbc.adoc:37
msgid "The solution is located in the `security-jdbc-quickstart` {quickstarts-tree-url}/security-jdbc-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/security-jdbc.adoc:38
#, no-wrap
msgid "Creating the Maven Project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jdbc.adoc:41
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#. type: delimited block =
#: upstream/_versions/2.7/guides/security-jdbc.adoc:49
msgid "Don't forget to add the database connector library of choice. Here we are using PostgreSQL as identity store."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jdbc.adoc:53
msgid "This command generates a new project, importing the `elytron-security-jdbc` extension which is an https://docs.wildfly.org/17/WildFly_Elytron_Security.html#jdbc-security-realm[`wildfly-elytron-realm-jdbc`] adapter for Quarkus applications."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jdbc.adoc:56
msgid "If you already have your Quarkus project configured, you can add the `elytron-security-jdbc` extension to your project by running the following command in your project base directory:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jdbc.adoc:61
msgid "This will add the following to your build file:"
msgstr "这会将以下内容添加到你的构建文件中:"

#. type: Block title
#: upstream/_versions/2.7/guides/security-jdbc.adoc:63
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jdbc.adoc:69
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-elytron-security-jdbc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/2.7/guides/security-jdbc.adoc:72
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jdbc.adoc:75
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-elytron-security-jdbc\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/security-jdbc.adoc:77
#, no-wrap
msgid "Writing the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jdbc.adoc:80
msgid "Let's start by implementing the `/api/public` endpoint. As you can see from the source code below, it is just a regular JAX-RS resource:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jdbc.adoc:84
#: upstream/_versions/2.7/guides/security-jdbc.adoc:109
#: upstream/_versions/2.7/guides/security-jdbc.adoc:134
#, no-wrap
msgid "package org.acme.security.jdbc;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jdbc.adoc:90
#, no-wrap
msgid ""
"import javax.annotation.security.PermitAll;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jdbc.adoc:93
#, no-wrap
msgid ""
"@Path(\"/api/public\")\n"
"public class PublicResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jdbc.adoc:101
#, no-wrap
msgid ""
"    @GET\n"
"    @PermitAll\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String publicResource() {\n"
"        return \"public\";\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jdbc.adoc:104
msgid "The source code for the `/api/admin` endpoint is also very simple. The main difference here is that we are using a `@RolesAllowed` annotation to make sure that only users granted with the `admin` role can access the endpoint:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jdbc.adoc:115
#, no-wrap
msgid ""
"import javax.annotation.security.RolesAllowed;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jdbc.adoc:118
#, no-wrap
msgid ""
"@Path(\"/api/admin\")\n"
"public class AdminResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jdbc.adoc:126
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"admin\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String adminResource() {\n"
"         return \"admin\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jdbc.adoc:130
msgid "Finally, let's consider the `/api/users/me` endpoint. As you can see from the source code below, we are trusting only users with the `user` role.  We are using `SecurityContext` to get access to the current authenticated Principal and we return the user's name. This information is loaded from the database."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jdbc.adoc:141
#, no-wrap
msgid ""
"import javax.annotation.security.RolesAllowed;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.core.Context;\n"
"import javax.ws.rs.core.SecurityContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jdbc.adoc:144
#, no-wrap
msgid ""
"@Path(\"/api/users\")\n"
"public class UserResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jdbc.adoc:152
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"user\")\n"
"    @Path(\"/me\")\n"
"    public String me(@Context SecurityContext securityContext) {\n"
"        return securityContext.getUserPrincipal().getName();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.7/guides/security-jdbc.adoc:154
#, no-wrap
msgid "Configuring the Application"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jdbc.adoc:157
msgid "The `elytron-security-jdbc` extension requires at least one datasource to access to your database."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jdbc.adoc:164
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.datasource.username=quarkus\n"
"quarkus.datasource.password=quarkus\n"
"quarkus.datasource.jdbc.url=jdbc:postgresql:elytron-security-jdbc\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jdbc.adoc:167
msgid "In our context, we are using PostgreSQL as identity store and we initialize the database with users and roles."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jdbc.adoc:176
#, no-wrap
msgid ""
"CREATE TABLE test_user (\n"
"  id INT,\n"
"  username VARCHAR(255),\n"
"  password VARCHAR(255),\n"
"  role VARCHAR(255)\n"
");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jdbc.adoc:179
#, no-wrap
msgid ""
"INSERT INTO test_user (id, username, password, role) VALUES (1, 'admin', 'admin', 'admin');\n"
"INSERT INTO test_user (id, username, password, role) VALUES (2, 'user','user', 'user');\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.7/guides/security-jdbc.adoc:185
msgid "It is probably useless but we kindly remind you that you must not store clear-text passwords in production environment ;-).  The `elytron-security-jdbc` offers a built-in bcrypt password mapper."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jdbc.adoc:188
msgid "We can now configure the Elytron JDBC Realm."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jdbc.adoc:197
#, no-wrap
msgid ""
"quarkus.security.jdbc.enabled=true\n"
"quarkus.security.jdbc.principal-query.sql=SELECT u.password, u.role FROM test_user u WHERE u.username=? <1>\n"
"quarkus.security.jdbc.principal-query.clear-password-mapper.enabled=true <2>\n"
"quarkus.security.jdbc.principal-query.clear-password-mapper.password-index=1\n"
"quarkus.security.jdbc.principal-query.attribute-mappings.0.index=2 <3>\n"
"quarkus.security.jdbc.principal-query.attribute-mappings.0.to=groups\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jdbc.adoc:200
msgid "The `elytron-security-jdbc` extension requires at least one principal query to authenticate the user and its identity."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jdbc.adoc:202
msgid "We define a parameterized SQL statement (with exactly 1 parameter) which should return the user's password plus any additional information you want to load."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jdbc.adoc:203
msgid "We configure the password mapper with the position of the password field in the `SELECT` fields and other information like salt, hash encoding, etc."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jdbc.adoc:204
msgid "We use `attribute-mappings` to bind the `SELECT` projection fields (ie. `u.role` here) to the target Principal representation attributes."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.7/guides/security-jdbc.adoc:208
msgid "In the `principal-query` configuration all the `index` properties start at 1 (rather than 0)."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/security-jdbc.adoc:210
#, no-wrap
msgid "Testing the Application"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jdbc.adoc:214
msgid "The application is now protected and the identities are provided by our database.  The very first thing to check is to ensure the anonymous access works."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jdbc.adoc:221
#, no-wrap
msgid ""
"$ curl -i -X GET http://localhost:8080/api/public\n"
"HTTP/1.1 200 OK\n"
"Content-Length: 6\n"
"Content-Type: text/plain;charset=UTF-8\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jdbc.adoc:223
#, no-wrap
msgid "public%\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jdbc.adoc:226
msgid "Now, let's try a to hit a protected resource anonymously."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jdbc.adoc:233
#, no-wrap
msgid ""
"$ curl -i -X GET http://localhost:8080/api/admin\n"
"HTTP/1.1 401 Unauthorized\n"
"Content-Length: 14\n"
"Content-Type: text/html;charset=UTF-8\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jdbc.adoc:235
#, no-wrap
msgid "Not authorized%\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jdbc.adoc:238
msgid "So far so good, now let's try with an allowed user."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jdbc.adoc:245
#, no-wrap
msgid ""
"$ curl -i -X GET -u admin:admin http://localhost:8080/api/admin\n"
"HTTP/1.1 200 OK\n"
"Content-Length: 5\n"
"Content-Type: text/plain;charset=UTF-8\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jdbc.adoc:247
#, no-wrap
msgid "admin%\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jdbc.adoc:250
msgid "By providing the `admin:admin` credentials, the extension authenticated the user and loaded their roles.  The `admin` user is authorized to access to the protected resources."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jdbc.adoc:252
msgid "The user `admin` should be forbidden to access a resource protected with `@RolesAllowed(\"user\")` because it doesn't have this role."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jdbc.adoc:259
#, no-wrap
msgid ""
"$ curl -i -X GET -u admin:admin http://localhost:8080/api/users/me\n"
"HTTP/1.1 403 Forbidden\n"
"Content-Length: 34\n"
"Content-Type: text/html;charset=UTF-8\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jdbc.adoc:261
#, no-wrap
msgid "Forbidden%\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jdbc.adoc:264
msgid "Finally, using the user `user` works and the security context contains the principal details (username for instance)."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jdbc.adoc:271
#, no-wrap
msgid ""
"$ curl -i -X GET -u user:user http://localhost:8080/api/users/me\n"
"HTTP/1.1 200 OK\n"
"Content-Length: 4\n"
"Content-Type: text/plain;charset=UTF-8\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jdbc.adoc:273
#, no-wrap
msgid "user%\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/security-jdbc.adoc:275
#, no-wrap
msgid "Advanced Configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jdbc.adoc:278
msgid "This guide only covered an easy use case, the extension offers multiple datasources, multiple principal queries configuration as well as a bcrypt password mapper."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jdbc.adoc:285
msgid "quarkus.datasource.db-kind=postgresql quarkus.datasource.username=quarkus quarkus.datasource.password=quarkus quarkus.datasource.jdbc.url=jdbc:postgresql:multiple-data-sources-users"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jdbc.adoc:290
msgid "quarkus.datasource.permissions.db-kind=postgresql quarkus.datasource.permissions.username=quarkus quarkus.datasource.permissions.password=quarkus quarkus.datasource.permissions.jdbc.url=jdbc:postgresql:multiple-data-sources-permissions"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jdbc.adoc:295
msgid "quarkus.security.jdbc.enabled=true quarkus.security.jdbc.principal-query.sql=SELECT u.password FROM test_user u WHERE u.username=? quarkus.security.jdbc.principal-query.clear-password-mapper.enabled=true quarkus.security.jdbc.principal-query.clear-password-mapper.password-index=1"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jdbc.adoc:300
msgid "quarkus.security.jdbc.principal-query.roles.sql=SELECT r.role_name FROM test_role r, test_user_role ur WHERE ur.username=? AND ur.role_id = r.id quarkus.security.jdbc.principal-query.roles.datasource=permissions quarkus.security.jdbc.principal-query.roles.attribute-mappings.0.index=1 quarkus.security.jdbc.principal-query.roles.attribute-mappings.0.to=groups"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/security-jdbc.adoc:303
#, no-wrap
msgid "Configuration Reference"
msgstr "配置参考"

#. type: Title ==
#: upstream/_versions/2.7/guides/security-jdbc.adoc:307
#, no-wrap
msgid "References"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jdbc.adoc:309
msgid "xref:security.adoc[Quarkus Security]"
msgstr ""
