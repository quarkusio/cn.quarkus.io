# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:6
#, no-wrap
msgid "Build, Sign and Encrypt JSON Web Tokens"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:12
msgid "According to link:https://datatracker.ietf.org/doc/html/rfc7519[RFC7519], JSON Web Token (JWT) is a compact, URL-safe means of representing claims which are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code(MAC) and/or encrypted."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:14
msgid "Signing the claims is used most often to secure the claims. What is known today as a JWT token is typically produced by signing the claims in a JSON format using the steps described in the link:https://tools.ietf.org/html/rfc7515[JSON Web Signature] specification."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:16
msgid "However, when the claims are sensitive, their confidentiality can be guaranteed by following the steps described in the link:https://tools.ietf.org/html/rfc7516[JSON Web Encryption] specification to produce a JWT token with the encrypted claims."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:18
msgid "Finally both the confidentiality and integrity of the claims can be further enforced by signing them first and then encrypting the nested JWT token."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:20
msgid "SmallRye JWT Build provides an API for securing JWT claims using all of these options. link:https://bitbucket.org/b_c/jose4j/wiki/Home[Jose4J] is used internally to support this API."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:21
#, no-wrap
msgid "Dependency"
msgstr ""

#. type: Block title
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:24
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:30
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId></artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:33
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:36
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-smallrye-jwt-build\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:40
msgid "Note you can use Smallrye JWT Build API without having to create MicroProfile JWT endpoints supported by `quarkus-smallrye-jwt`.  It can also be excluded from `quarkus-smallrye-jwt` if MP JWT endpoints do not need to generate JWT tokens."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:41
#, no-wrap
msgid "Create JwtClaimsBuilder and set the claims"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:44
msgid "The first step is to initialize a `JwtClaimsBuilder` using one of the options below and add some claims to it:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:59
#, no-wrap
msgid ""
"import java.util.Collections;\n"
"import javax.json.Json;\n"
"import javax.json.JsonObject;\n"
"import io.smallrye.jwt.build.Jwt;\n"
"import io.smallrye.jwt.build.JwtClaimsBuilder;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"...\n"
"// Create an empty builder and add some claims\n"
"JwtClaimsBuilder builder1 = Jwt.claims();\n"
"builder1.claim(\"customClaim\", \"custom-value\").issuer(\"https://issuer.org\");\n"
"// Or start typing the claims immediately:\n"
"// JwtClaimsBuilder builder1 = Jwt.upn(\"Alice\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:62
#, no-wrap
msgid ""
"// Builder created from the existing claims\n"
"JwtClaimsBuilder builder2 = Jwt.claims(\"/tokenClaims.json\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:65
#, no-wrap
msgid ""
"// Builder created from a map of claims\n"
"JwtClaimsBuilder builder3 = Jwt.claims(Collections.singletonMap(\"customClaim\", \"custom-value\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:71
#, no-wrap
msgid ""
"// Builder created from JsonObject\n"
"JsonObject userName = Json.createObjectBuilder().add(\"username\", \"Alice\").build();\n"
"JsonObject userAddress = Json.createObjectBuilder().add(\"city\", \"someCity\").add(\"street\", \"someStreet\").build();\n"
"JsonObject json = Json.createObjectBuilder(userName).add(\"address\", userAddress).build();\n"
"JwtClaimsBuilder builder4 = Jwt.claims(json);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:75
#, no-wrap
msgid ""
"// Builder created from JsonWebToken\n"
"@Inject JsonWebToken token;\n"
"JwtClaimsBuilder builder5 = Jwt.claims(token);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:78
msgid "The API is fluent so the builder initialization can be done as part of the fluent API sequence."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:80
msgid "The builder will also set `iat` (issued at) to the current time, `exp` (expires at) to 5 minutes away from the current time (it can be customized with the `smallrye.jwt.new-token.lifespan` property) and `jti` (unique token identifier) claims if they have not already been set."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:82
msgid "One can also configure `smallrye.jwt.new-token.issuer` and `smallrye.jwt.new-token.audience` properties and skip setting the issuer and audience directly with the builder API."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:84
msgid "The next step is to decide how to secure the claims."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:86
#, no-wrap
msgid "Sign the claims"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:89
msgid "The claims can be signed immediately or after the `JSON Web Signature` headers have been set:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:94
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:148
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:213
#, no-wrap
msgid ""
"import io.smallrye.jwt.build.Jwt;\n"
"...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:98
#, no-wrap
msgid ""
"// Sign the claims using an RSA private key loaded from the location set with a 'smallrye.jwt.sign.key.location' property.\n"
"// No 'jws()' transition is necessary. Default algorithm is RS256.\n"
"String jwt1 = Jwt.claims(\"/tokenClaims.json\").sign();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:102
#, no-wrap
msgid ""
"// Set the headers and sign the claims with an RSA private key loaded in the code (the implementation of this method is omitted).\n"
"// Note a 'jws()' transition to a 'JwtSignatureBuilder', Default algorithm is RS256.\n"
"String jwt2 = Jwt.claims(\"/tokenClaims.json\").jws().keyId(\"kid1\").header(\"custom-header\", \"custom-value\").sign(getPrivateKey());\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:105
msgid "Note the `alg` (algorithm) header is set to `RS256` by default. Signing key identifier (`kid` header) does not have to be set if a single JSON Web Key (JWK) containing a `kid` property is used."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:108
msgid "RSA and Elliptic Curve (EC) private keys as well as symmetric secret keys can be used to sign the claims.  `ES256` and `HS256` are the defaut algorithms for EC private and symmetric key algorithms respectively."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:110
msgid "You can customize the signature algorithm, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:115
#, no-wrap
msgid ""
"import io.smallrye.jwt.SignatureAlgorithm;\n"
"import io.smallrye.jwt.build.Jwt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:118
#, no-wrap
msgid ""
"// Sign the claims using an RSA private key loaded from the location set with a 'smallrye.jwt.sign.key.location' property. Algorithm is PS256.\n"
"String jwt = Jwt.upn(\"Alice\").jws().algorithm(SignatureAlgorithm.PS256).sign();\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:121
msgid "Alternatively you can use a `smallrye.jwt.new-token.signature-algorithm` property:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:125
msgid "```properties smallrye.jwt.new-token.signature-algorithm=PS256 ```"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:127
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:190
msgid "and write a simpler API sequence:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:131
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:194
#, no-wrap
msgid "import io.smallrye.jwt.build.Jwt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:134
#, no-wrap
msgid ""
"// Sign the claims using an RSA private key loaded from the location set with a 'smallrye.jwt.sign.key.location' property. Algorithm is PS256.\n"
"String jwt = Jwt.upn(\"Alice\").sign();\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:137
msgid "Note the `sign` step can be combined with the <<encrypt-claims, encrypt>> step to produce `inner-signed and encrypted` tokens, see <<innersign-encrypt-claims, Sign the claims and encrypt the nested JWT token>> section."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:139
#, no-wrap
msgid "Encrypt the claims"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:143
msgid "The claims can be encrypted immediately or after the `JSON Web Encryption` headers have been set the same way as they can be signed.  The only minor difference is that encrypting the claims always requires a `jwe()` `JwtEncryptionBuilder` transition given that the API has been optimized to support signing and inner-signing of the claims."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:151
#, no-wrap
msgid ""
"// Encrypt the claims using an RSA public key loaded from the location set with a 'smallrye.jwt.encrypt.key.location' property. Default key encryption algorithm is RSA-OAEP.\n"
"String jwt1 = Jwt.claims(\"/tokenClaims.json\").jwe().encrypt();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:154
#, no-wrap
msgid ""
"// Set the headers and encrypt the claims with an RSA public key loaded in the code (the implementation of this method is omitted).  Default key encryption algorithm is A256KW.\n"
"String jwt2 = Jwt.claims(\"/tokenClaims.json\").jwe().header(\"custom-header\", \"custom-value\").encrypt(getSecretKey());\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:157
msgid "Note the `alg` (key management algorithm) header is set to `RSA-OAEP` and the `enc` (content encryption header) is set to `A256GCM` by default."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:160
msgid "RSA and Elliptic Curve (EC) public keys as well as symmetric secret keys can be used to encrypt the claims.  `ECDH-ES` and `A256KW` are the defaut algorithms for EC public and symmetric key encryption algorithms respectively."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:162
msgid "Note two encryption operations are done when creating an ecrypted token:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:164
msgid "the generated content encryption key is encrypted by the key supplied with the API using the key encryption algorithm such as `RSA-OAEP`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:165
msgid "the claims are encryped by the generated content encryption key using the content encryption algorithm such as `A256GCM`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:167
msgid "You can customize the key and content encryption algorithms, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:173
#, no-wrap
msgid ""
"import io.smallrye.jwt.KeyEncryptionAlgorithm;\n"
"import io.smallrye.jwt.ContentEncryptionAlgorithm;\n"
"import io.smallrye.jwt.build.Jwt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:180
#, no-wrap
msgid ""
"// Encrypt the claims using an RSA public key loaded from the location set with a 'smallrye.jwt.encrypt.key.location' property.\n"
"// Key encryption algorithm is RSA-OAEP-256, content encryption algorithm is A256CBC-HS512.\n"
"String jwt = Jwt.subject(\"Bob\").jwe()\n"
"    .keyAlgorithm(KeyEncryptionAlgorithm.RSA_OAEP_256)\n"
"    .contentAlgorithm(ContentEncryptionAlgorithm.A256CBC_HS512)\n"
"    .encrypt();\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:183
msgid "Alternatively you can use `smallrye.jwt.new-token.key-encryption-algorithm` and `smallrye.jwt.new-token.content-encryption-algorithm` properties to customize the key and content encryption algorithms:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:188
msgid "```properties smallrye.jwt.new-token.key-encryption-algorithm=RSA-OAEP-256 smallrye.jwt.new-token.content-encryption-algorithm=A256CBC-HS512 ```"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:198
#, no-wrap
msgid ""
"// Encrypt the claims using an RSA public key loaded from the location set with a 'smallrye.jwt.encrypt.key.location' property.\n"
"// Key encryption algorithm is RSA-OAEP-256, content encryption algorithm is A256CBC-HS512.\n"
"String jwt = Jwt.subject(\"Bob\").encrypt();\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:202
msgid "Note that when the token is directly encrypted by the public RSA or EC key it is not possible to verify which party sent the token.  Therefore the secret keys should be preferred for directly encrypting the tokens, for example, when using JWT as cookies where a secret key is managed by the Quarkus endpoint with only this endpoint being both a producer and a consumer of the encrypted token."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:204
msgid "If you would like to use RSA or EC public keys to encrypt the token then it is recommended to sign the token first if the signing key is available, see the next <<innersign-encrypt-claims, Sign the claims and encrypt the nested JWT token>> section."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:206
#, no-wrap
msgid "Sign the claims and encrypt the nested JWT token"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:209
msgid "The claims can be signed and then the nested JWT token encrypted by combining the sign and encrypt steps."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:216
#, no-wrap
msgid ""
"// Sign the claims and encrypt the nested token using the private and public keys loaded from the locations set with the 'smallrye.jwt.sign.key.location' and 'smallrye.jwt.encrypt.key.location' properties respectively. Signature algorithm is RS256, key encryption algorithm is RSA-OAEP-256.\n"
"String jwt = Jwt.claims(\"/tokenClaims.json\").innerSign().encrypt();\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:218
#, no-wrap
msgid "Fast JWT Generation"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:221
msgid "If `smallrye.jwt.sign.key.location` or/and `smallrye.jwt.encrypt.key.location` properties are set then one can secure the existing claims (resources, maps, JsonObjects) with a single call:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:226
#, no-wrap
msgid ""
"// More compact than Jwt.claims(\"/claims.json\").sign();\n"
"Jwt.sign(\"/claims.json\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:229
#, no-wrap
msgid ""
"// More compact than Jwt.claims(\"/claims.json\").jwe().encrypt();\n"
"Jwt.encrypt(\"/claims.json\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:232
#, no-wrap
msgid ""
"// More compact than Jwt.claims(\"/claims.json\").innerSign().encrypt();\n"
"Jwt.signAndEncrypt(\"/claims.json\");\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:234
msgid "As mentioned above, `iat` (issued at), `exp` (expires at), `jti` (token identifier), `iss` (issuer) and `aud` (audience) claims will be added if needed."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:235
#, no-wrap
msgid "Dealing with the keys"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:238
msgid "`smallrye.jwt.sign.key.location` and `smallrye.jwt.encrypt.key.location` properties can be used to point to signing and encryption key locations. The keys can be located on the local file system, classpath, or fetched from the remote endpoints and can be in `PEM` or `JSON Web Key` (`JWK`) formats. For example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:243
#, no-wrap
msgid ""
"smallrye.jwt.sign.key=privateKey.pem\n"
"smallrye.jwt.encrypt.key=publicKey.pem\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:246
msgid "You can also use MicroProfile `ConfigSource` to fetch the keys from the external services such as link:{vault-guide}[HashiCorp Vault] or other secret managers and use `smallrye.jwt.sign.key` and `smallrye.jwt.encrypt.key` properties instead:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:251
#, no-wrap
msgid ""
"smallrye.jwt.sign.key=${private.key.from.vault}\n"
"smallrye.jwt.encrypt.key=${public.key.from.vault}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:255
msgid "where both `private.key.from.vault` and `public.key.from.vault` are the `PEM` or `JWK` formatted key values provided by the custom `ConfigSource`.  `smallrye.jwt.sign.key` and `smallrye.jwt.encrypt.key` can also contain only the Base64-encoded private or public keys values."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:257
msgid "However, please note, directly inlining the private keys in the configuration is not recommended. Use the `smallrye.jwt.sign.key` property only if you need to fetch a signing key value from the remote secret manager."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:259
msgid "The keys can also be loaded by the code which builds the token and supplied to JWT Build API."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:261
msgid "If you need to sign and/or encrypt the token using the symmetric secret key then consider using `io.smallrye.jwt.util.KeyUtils` to generate a SecretKey of the required length."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:263
msgid "For example, one needs to have a 64 byte key to sign using the `HS512` algorithm (`512/8`) and a 32 byte key to encrypt the content encryption key with the `A256KW` algorithm (`256/8`):"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:271
#, no-wrap
msgid ""
"import javax.crypto.SecretKey;\n"
"import io.smallrye.jwt.KeyEncryptionAlgorithm;\n"
"import io.smallrye.jwt.SignatureAlgorithm;\n"
"import io.smallrye.jwt.build.Jwt;\n"
"import io.smallrye.jwt.util.KeyUtils;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:275
#, no-wrap
msgid ""
"SecretKey signingKey = KeyUtils.generateSecretKey(SignatureAlgorithm.HS512);\n"
"SecretKey encryptionKey = KeyUtils.generateSecretKey(KeyEncryptionAlgorithm.A256KW);\n"
"String jwt = Jwt.claim(\"sensitiveClaim\", getSensitiveClaim()).innerSign(signingKey).encrypt(encryptionKey);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:278
msgid "You can also consider using a `JSON Web Key` (JWK) or `JSON Web Key Set` (JWK Set) format to store a secret key on a secure file system and refer to it using either `smallrye.jwt.sign.key.location` or `smallrye.jwt.encrypt.key.location` properties, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:286
#, no-wrap
msgid ""
"{\n"
" \"kty\":\"oct\",\n"
" \"kid\":\"secretKey\",\n"
" \"k\":\"Fdh9u8rINxfivbrianbbVT1u232VQBZYKx1HGAGPt2I\"\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:289
msgid "or"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:306
#, no-wrap
msgid ""
"{\n"
" \"keys\": [\n"
"   {\n"
"     \"kty\":\"oct\",\n"
"     \"kid\":\"secretKey1\",\n"
"     \"k\":\"Fdh9u8rINxfivbrianbbVT1u232VQBZYKx1HGAGPt2I\"\n"
"   },\n"
"   {\n"
"     \"kty\":\"oct\",\n"
"     \"kid\":\"secretKey2\",\n"
"     \"k\":\"AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\"\n"
"   }\n"
" ]\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:309
msgid "`io.smallrye.jwt.util.KeyUtils` can also be used to generate a pair of assymetric RSA or EC keys. These keys can be stored using a `JWK`, `JWK Set` or `PEM` format."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:310
#, no-wrap
msgid "SmallRye JWT Builder configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:313
msgid "SmallRye JWT supports the following properties which can be used to customize the way claims are signed and/or encrypted:"
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:316
#, no-wrap
msgid "Property Nam"
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:316
#, no-wrap
msgid "Default"
msgstr "默认"

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:317
#, no-wrap
msgid "Description"
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:317
#, no-wrap
msgid "smallrye.jwt.sign.key.location"
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:317
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:319
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:320
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:323
#, no-wrap
msgid "`none`"
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:318
#, no-wrap
msgid "Location of a private key which will be used to sign the claims when either a no-argument `sign()` or `innerSign()` method is called."
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:318
#, no-wrap
msgid "smallrye.jwt.sign.key"
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:318
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:322
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:329
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:330
#, no-wrap
msgid "non"
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:319
#, no-wrap
msgid "Key value which will be used to sign the claims when either a no-argument sign() or innerSign() method is called."
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:319
#, no-wrap
msgid "smallrye.jwt.sign.key.i"
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:320
#, no-wrap
msgid "Signing key identifier which is checked only when JWK keys are used."
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:320
#, no-wrap
msgid "smallrye.jwt.encrypt.key.location"
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:321
#, no-wrap
msgid "Location of a public key which will be used to encrypt the claims or inner JWT when a no-argument `encrypt()` method is called."
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:321
#, no-wrap
msgid "smallrye.jwt.sign.relax-key-validation"
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:321
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:324
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:331
#, no-wrap
msgid "fals"
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:322
#, no-wrap
msgid "Relax the validation of the signing keys."
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:322
#, no-wrap
msgid "smallrye.jwt.encrypt.key"
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:323
#, no-wrap
msgid "Key value which will be used to encrypt the claims or inner JWT when a no-argument encrypt() method is called."
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:323
#, no-wrap
msgid "smallrye.jwt.encrypt.key.i"
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:324
#, no-wrap
msgid "Encryption key identifier which is checked only when JWK keys are used."
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:324
#, no-wrap
msgid "smallrye.jwt.encrypt.relax-key-validation"
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:325
#, no-wrap
msgid "Relax the validation of the encryption keys."
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:325
#, no-wrap
msgid "smallrye.jwt.new-token.signature-algorith"
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:325
#, no-wrap
msgid "RS256"
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:326
#, no-wrap
msgid "Signature algorithm. This property will be checked if the JWT signature builder has not already set the signature algorithm."
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:326
#, no-wrap
msgid "smallrye.jwt.new-token.key-encryption-algorith"
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:326
#, no-wrap
msgid "RSA-OAEP"
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:327
#, no-wrap
msgid "Key encryption algorithm. This property will be checked if the JWT encryption builder has not already set the key encryption algorithm."
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:327
#, no-wrap
msgid "smallrye.jwt.new-token.content-encryption-algorith"
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:327
#, no-wrap
msgid "A256GCM"
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:328
#, no-wrap
msgid "Content encryption algorithm. This property will be checked if the JWT encryption builder has not already set the content encryption algorithm."
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:328
#, no-wrap
msgid "smallrye.jwt.new-token.lifespan"
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:328
#, no-wrap
msgid "300"
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:329
#, no-wrap
msgid "Token lifespan in seconds which will be used to calculate an `exp` (expiry) claim value if this claim has not already been set."
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:329
#, no-wrap
msgid "smallrye.jwt.new-token.issuer"
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:330
#, no-wrap
msgid "Token issuer which can be used to set an `iss` (issuer) claim value if this claim has not already been set."
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:330
#, no-wrap
msgid "smallrye.jwt.new-token.audienc"
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:331
#, no-wrap
msgid "Token audience which can be used to set an `aud` (audience) claim value if this claim has not already been set."
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:331
#, no-wrap
msgid "smallrye.jwt.new-token.override-matching-claim"
msgstr ""

#. type: Table
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:332
#, no-wrap
msgid "Set this property to `true` for `smallrye.jwt.new-token.issuer` and `smallrye.jwt.new-token.audience` values to override the already initialized `iss` (issuer) and `aud` (audience) claims."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:334
#, no-wrap
msgid "References"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:337
msgid "link:https://github.com/smallrye/smallrye-jwt[SmallRye JWT]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:338
msgid "link:https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:339
msgid "link:https://tools.ietf.org/html/rfc7515[JSON Web Signature]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:340
msgid "link:https://tools.ietf.org/html/rfc7516[JSON Web Encryption]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:341
msgid "link:https://tools.ietf.org/html/rfc7518[JSON Web Algorithms]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:342
msgid "link:https://bitbucket.org/b_c/jose4j/wiki/Home[Jose4J]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:343
msgid "xref:security-openid-connect.adoc[Using OpenID Connect to Protect Service Applications]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:344
msgid "xref:security-jwt.adoc[Using Smallrye JWT to Protect Service Applications]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-jwt-build.adoc:344
msgid "xref:security.adoc[Quarkus Security]"
msgstr ""
