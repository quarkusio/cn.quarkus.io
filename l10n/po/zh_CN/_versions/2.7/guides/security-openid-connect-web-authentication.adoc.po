# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Using OpenID Connect (OIDC) to Protect Web Applications using Authorization Code Flow"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "This guide demonstrates how to use Quarkus OpenID Connect (OIDC) Extension to protect your Quarkus HTTP endpoints using OpenID Connect Authorization Code Flow supported by OpenID Connect compliant Authorization Servers such as https://www.keycloak.org[Keycloak]."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "The extension allows to easily authenticate the users of your web application by redirecting them to the OpenID Connect Provider (e.g.: Keycloak) to login and, once the authentication is complete, return them back with the code confirming the successful authentication. The extension will request ID and access tokens from the OpenID Connect Provider using an authorization code grant and verify these tokens in order to authorize an access to the application."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Please read the xref:security-openid-connect.adoc[Using OpenID Connect to Protect Service Applications] guide if you need to protect your applications using Bearer Token Authorization."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Please read the xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy] guide how to support multiple tenants."
msgstr "请阅读 xref:security-openid-connect-multitenancy.adoc[使用 OpenID Connect 多租户] ，来了解如何支持多租户。"

#. type: Title ==
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Quickstart"
msgstr "快速入门"

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Architecture"
msgstr "应用结构"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "In this example, we build a very simple web application with a single page:"
msgstr "在这个例子中，我们建立了一个非常简单的网络应用，只有一个页面："

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "`/index.html`"
msgstr " `/index.html` "

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "This page is protected and can only be accessed by authenticated users."
msgstr "这个页面是受保护的，只有通过认证的用户才能访问。"

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "The solution is located in the `security-openid-connect-web-authentication-quickstart` {quickstarts-tree-url}/security-openid-connect-web-authentication-quickstart[directory]."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Creating the Maven Project"
msgstr "创建Maven项目"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `oidc` extension\n"
"to your project by running the following command in your project base directory:"
msgstr "如果你已经配置了你的Quarkus项目，你可以通过在你的项目基础目录下运行以下命令，将 `oidc` 扩展加入到你的项目中去："

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "This will add the following to your build file:"
msgstr "这会将以下内容添加到你的构建文件中:"

#. type: Block title
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Writing the application"
msgstr "编写应用程序"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Let's write a simple JAX-RS resource which has all the tokens returned in the authorization code grant response injected:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "This endpoint has ID, access and refresh tokens injected. It returns a `preferred_username` claim from the ID token, a `scope` claim from the access token and also a refresh token availability status."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "Note that you do not have to inject the tokens - it is only required if the endpoint needs to use the ID token to interact with the currently authenticated user or use the access token to access a downstream service on behalf of this user."
msgstr "请注意，你不必注入令牌--只有当端点需要使用ID令牌与当前认证的用户进行交互或使用访问令牌代表该用户访问下游服务时才需要。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Please see <<access_id_and_access_tokens,Access ID and Access Tokens>> section below for more information."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Configuring the application"
msgstr "配置该应用程序"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "The OpenID Connect extension allows you to define the configuration using the `application.properties` file which should be located at the `src/main/resources` directory."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "This is the simplest configuration you can have when enabling authentication to your application."
msgstr "这是你在启用你的应用程序的认证时可以拥有的最简单的配置。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "The `quarkus.oidc.client-id` property references the `client_id` issued by the OpenID Connect Provider and the `quarkus.oidc.credentials.secret` property sets the client secret."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "The `quarkus.oidc.application-type` property is set to `web-app` in order to tell Quarkus that you want to enable the OpenID Connect Authorization Code Flow, so that your users are redirected to the OpenID Connect Provider to authenticate."
msgstr ""

#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid ""
"For last, the `quarkus.http.auth.permission.authenticated` permission is set to tell Quarkus about the paths you want to protect. In this case,\n"
"all paths are being protected by a policy that ensures that only `authenticated` users are allowed to access. For more details check xref:security-authorization.adoc[Security Authorization Guide]."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Starting and Configuring the Keycloak Server"
msgstr "启动和配置Keycloak服务器"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr "要启动Keycloak服务器，您可以使用Docker服务，且只需运行以下命令："

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "You should be able to access your Keycloak Server at http://localhost:8180/auth[localhost:8180/auth]."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Log in as the `admin` user to access the Keycloak Administration Console. Username should be `admin` and password `admin`."
msgstr "以 `admin` 用户身份登录，访问Keycloak管理控制台。用户名应该是 `admin` ，密码是 `admin` 。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Import the {quickstarts-tree-url}/security-openid-connect-web-authentication-quickstart/config/quarkus-realm.json[realm configuration file] to create a new realm. For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Running the Application in Dev and JVM modes"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "To run the application in a dev mode, use:"
msgstr "要在开发模式下运行应用程序，请使用："

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "When you're done playing with dev mode you can run it as a standard Java application."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "First compile it:"
msgstr "首先编译它："

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Then run it:"
msgstr "然后运行："

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Running the Application in Native Mode"
msgstr "在本地模式下运行应用程序"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "This same demo can be compiled into native code: no modifications required."
msgstr "这个同样的演示可以被编译成本地代码：不需要任何修改。"

#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid ""
"This implies that you no longer need to install a JVM on your\n"
"production environment, as the runtime technology is included in\n"
"the produced binary, and optimized to run with minimal resource overhead."
msgstr "这意味着您不再需要在您的生产环境中安装JVM，因为运行时技术包含在生产的二进制文件中，并以最小的资源开销优化运行。"

#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid ""
"Compilation will take a bit longer, so this step is disabled by default;\n"
"let's build again by enabling the native build:"
msgstr "编译时间会稍长一些，因此默认情况下这一步是禁用的；让我们通过启用本地编译再次进行编译："

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr "一杯咖啡的时间后，您就可以直接运行该二进制文件了："

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Testing the Application"
msgstr "测试应用程序"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "To test the application, you should open your browser and access the following URL:"
msgstr "为了测试应用程序，你应该打开你的浏览器并访问以下网址。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "http://localhost:8080[http://localhost:8080]"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "If everything is working as expected, you should be redirected to the Keycloak server to authenticate."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "In order to authenticate to the application you should type the following credentials when at the Keycloak login page:"
msgstr "为了验证应用程序，你应该在Keycloak的登录页面上输入以下证书。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "Username: *alice*"
msgstr "用户名: *alice* "

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "Password: *alice*"
msgstr "密码： *alice* "

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "After clicking the `Login` button you should be redirected back to the application."
msgstr "点击 `Login` 按钮后，你应该被重新引导到应用程序。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Please also see the <<integration-testing-keycloak-devservices, Dev Services for Keycloak>> section below about writing the integration tests which depend on `Dev Services for Keycloak`."
msgstr "关于编写依赖 `Keycloak开发服务` 的集成测试，也请参见下面的 link:#integration-testing-keycloak-devservices[Keycloak开发服务] 部分。"

#. type: Title ==
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Reference Guide"
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Accessing ID and Access Tokens"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "OIDC Code Authentication Mechanism acquires three tokens during the authorization code flow: https://openid.net/specs/openid-connect-core-1_0.html#IDToken[IDToken], Access Token and Refresh Token."
msgstr ""

#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid ""
"ID Token is always a JWT token and is used to represent a user authentication with the JWT claims.\n"
"One can access ID Token claims by injecting `JsonWebToken` with an `IdToken` qualifier:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Access Token is usually used by the OIDC `web-app` application to access other endpoints on behalf of the currently logged in user. The raw access token can be accessed as follows:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Note that `AccessTokenCredential` will have to be used if the Access Token issued to the Quarkus `web-app` application is opaque (binary) and can not be parsed to `JsonWebToken`."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "Injection of the `JsonWebToken` and `AccessTokenCredential` is supported in both `@RequestScoped` and `@ApplicationScoped` contexts."
msgstr "在 `@RequestScoped` 和 `@ApplicationScoped` 上下文中都支持注入 `JsonWebToken` 和 `AccessTokenCredential` 。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "RefreshToken is only used to refresh the current ID and access tokens as part of its <<session-management,session management>> process."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "User Info"
msgstr "用户信息"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "If IdToken does not provide enough information about the currently authenticated user then you can set a `quarkus.oidc.authentication.user-info-required=true` property for a https://openid.net/specs/openid-connect-core-1_0.html#UserInfo[UserInfo] JSON object from the OIDC userinfo endpoint to be requested."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "A request will be sent to the OpenID Provider UserInfo endpoint using the access token returned with the authorization code grant response and an `io.quarkus.oidc.UserInfo` (a simple `javax.json.JsonObject` wrapper) object will be created. `io.quarkus.oidc.UserInfo` can be either injected or accessed as a SecurityIdentity `userinfo` attribute."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Configuration Metadata"
msgstr "配置元数据"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "The current tenant's discovered link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect Configuration Metadata] is represented by `io.quarkus.oidc.OidcConfigurationMetadata` and can be either injected or accessed as a `SecurityIdentity` `configuration-metadata` attribute."
msgstr "当前租户发现的 link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect配置元数据] 由 `io.quarkus.oidc.OidcConfigurationMetadata` 表示，可以作为 `SecurityIdentity` `configuration-metadata` 属性注入或访问。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "The default tenant's `OidcConfigurationMetadata` is injected if the endpoint is public."
msgstr "如果端点是公开的，则默认租户的 `OidcConfigurationMetadata` 会被注入。"

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Token Claims And SecurityIdentity Roles"
msgstr "令牌声明(Token Claims)和安全身份角色(SecurityIdentity Roles)"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "The way the roles are mapped to the SecurityIdentity roles from the verified tokens is identical to how it is done for the xref:security-openid-connect.adoc#token-claims-and-securityidentity-roles[bearer tokens] with the only difference being is that https://openid.net/specs/openid-connect-core-1_0.html#IDToken[ID Token] is used as a source of the roles by default."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Note if you use Keycloak then you should set a Microprofile JWT client scope for ID token to contain a `groups` claim, please see the https://www.keycloak.org/docs/latest/server_admin/#protocol[Keycloak Server Administration Guide] for more information."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "If only the access token contains the roles and this access token is not meant to be propagated to the downstream endpoints then set `quarkus.oidc.roles.source=accesstoken`."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "If UserInfo is the source of the roles then set `quarkus.oidc.authentication.user-info-required=true` and `quarkus.oidc.roles.source=userinfo`, and if needed, `quarkus.oidc.roles.role-claim-path`."
msgstr "如果使用UserInfo为角色的来源，那么要设置 `quarkus.oidc.authentication.user-info-required=true` 和 `quarkus.oidc.roles.source=userinfo` ，如果需要的话，设置 `quarkus.oidc.roles.role-claim-path` 。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Additionally a custom `SecurityIdentityAugmentor` can also be used to add the roles as documented xref:security.adoc#security-identity-customization[here]."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Token Verification And Introspection"
msgstr "代币验证(Token Verification)和自省(Introspection)"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Please see xref:security-openid-connect.adoc#token-verification-introspection[Token Verification And Introspection] for details about how the tokens are verified and introspected."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Note that in case of `web-app` applications only `IdToken` is verified by default since the access token is not used by default to access the current Quarkus `web-app` endpoint and instead meant to be propagated to the services expecting this access token, for example, to the OpenID Connect Provider's UserInfo endpoint, etc. However if you expect the access token to contain the roles required to access the current Quarkus endpoint (`quarkus.oidc.roles.source=accesstoken`) then it will also be verified."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy, no-wrap
msgid "Token Introspection and UserInfo Cache"
msgstr "Token自省和UserInfo缓存"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Code flow access tokens are not introspected unless they are expected to be the source of roles but will be used to get `UserInfo`. So there will be one or two remote calls with the code flow access token, if the token introspection and/or `UserInfo` are required."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Please see xref:security-openid-connect.adoc#token-introspection-userinfo-cache[Token Introspection and UserInfo cache] for more information about using a default token cache or registering a custom cache implementation."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy, no-wrap
msgid "JSON Web Token Claim Verification"
msgstr "JSON网络令牌索赔验证"

#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid ""
"Please see xref:security-openid-connect.adoc#jwt-claim-verification[JSON Web Token Claim verification] section about the claim verification, including the `iss` (issuer) claim.\n"
"It applies to ID tokens but also to access tokens in a JWT format if the `web-app` application has requested the access token verification."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy, no-wrap
msgid "Redirection"
msgstr "重新定向"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "When the user is redirected to the OpenID Connect Provider to authenticate, the redirect URL includes a `redirect_uri` query parameter which indicates to the Provider where the user has to be redirected to once the authentication has been completed."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Quarkus will set this parameter to the current request URL by default. For example, if the user is trying to access a Quarkus service endpoint at `http://localhost:8080/service/1` then the `redirect_uri` parameter will be set to `http://localhost:8080/service/1`. Similarly, if the request URL is `http://localhost:8080/service/2` then the `redirect_uri` parameter will be set to `http://localhost:8080/service/2`, etc."
msgstr ""

#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid ""
"OpenID Connect Providers may be configured to require the `redirect_uri` parameter to have the same value (eg. `http://localhost:8080/service/callback`) for all the redirect URLs.\n"
"In such cases a `quarkus.oidc.authentication.redirect-path` property has to be set, for example, `quarkus.oidc.authentication.redirect-path=/service/callback`, and Quarkus will set the `redirect_uri` parameter to an absolute URL such as `http://localhost:8080/service/callback` which will be the same regardless of the current request URL."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "If `quarkus.oidc.authentication.redirect-path` is set but the original request URL has to be restored after the user has been redirected back to a callback URL such as `http://localhost:8080/service/callback` then a `quarkus.oidc.authentication.restore-path-after-redirect` property has to be set to `true` which will restore the request URL such as `http://localhost:8080/service/1`, etc."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Dealing with Cookies"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "The OIDC adapter uses cookies to keep the session, code flow and post logout state."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "`quarkus.oidc.authentication.cookie-path` property is used to ensure the cookies are visible especially when you access the protected resources with overlapping or different roots, for example:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "`/index.html` and `/web-app/service`"
msgstr " `/index.html` 和 `/web-app/service` "

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "`/web-app/service1` and `/web-app/service2`"
msgstr " `/web-app/service1` 和 `/web-app/service2` "

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "`/web-app1/service` and `/web-app2/service`"
msgstr " `/web-app1/service` 和 `/web-app2/service` "

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "`quarkus.oidc.authentication.cookie-path` is set to `/` by default but can be narrowed to the more specific root path such as `/web-app`."
msgstr ""

#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid ""
"You can also set a `quarkus.oidc.authentication.cookie-path-header` property if the cookie path needs to be set dynamically.\n"
"For example, setting `quarkus.oidc.authentication.cookie-path-header=X-Forwarded-Prefix` means that the value of HTTP `X-Forwarded-Prefix` header will be used to set a cookie path."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "If `quarkus.oidc.authentication.cookie-path-header` is set but no configured HTTP header is available in the current request then the `quarkus.oidc.authentication.cookie-path` will be checked."
msgstr "如果 `quarkus.oidc.authentication.cookie-path-header` ，但当前请求中没有配置的HTTP头，那么 `quarkus.oidc.authentication.cookie-path` ，将被检查。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "If your application is deployed across multiple domains, make sure to set a `quarkus.oidc.authentication.cookie-domain` property for the session cookie be visible to all protected Quarkus services, for example, if you have 2 services deployed at:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "https://whatever.wherever.company.net/"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "https://another.address.company.net/"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "then the `quarkus.oidc.authentication.cookie-domain` property must be set to `company.net`."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy, no-wrap
msgid "Logout"
msgstr "登出"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "By default the logout is based on the expiration time of the ID Token issued by the OpenID Connect Provider. When the ID Token expires, the current user session at the Quarkus endpoint is invalidated and the user is redirected to the OpenID Connect Provider again to authenticate. If the session at the OpenID Connect Provider is still active, users are automatically re-authenticated without having to provide their credentials again."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "The current user session may be automatically extended by enabling a `quarkus.oidc.token.refresh-expired` property. If it is set to `true` then when the current ID Token expires a Refresh Token Grant will be used to refresh ID Token as well as Access and Refresh Tokens."
msgstr ""

#. type: Title ====
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "User-Initiated Logout"
msgstr ""

#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid ""
"Users can request a logout by sending a request to the Quarkus endpoint logout path set with a `quarkus.oidc.logout.path` property.\n"
"For example, if the endpoint address is `https://application.com/webapp` and the `quarkus.oidc.logout.path` is set to \"/logout\" then the logout request has to be sent to `https://application.com/webapp/logout`."
msgstr "用户可以通过向使用 `quarkus.oidc.logout.path` 属性设置的 Quarkus 端点注销路径发送请求来请求注销。例如，如果端点地址为 `https://application.com/webapp` 且 `quarkus.oidc.logout.path` 设置为\"/logout\"，那么注销请求必须发送到 `https://application.com/webapp/logout` ."

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "This logout request will start an https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout] and the user will be redirected to the OpenID Connect Provider to logout where a user may be asked to confirm the logout is indeed intended."
msgstr "这个注销请求将启动一个 link:https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP发起的注销] ，用户将被重定向到OpenID连接提供商进行注销，在那里可能会要求用户确认注销确实是为了。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "The user will be returned to the endpoint post logout page once the logout has been completed if the `quarkus.oidc.logout.post-logout-path` property is set. For example, if the endpoint address is `https://application.com/webapp` and the `quarkus.oidc.logout.post-logout-path` is set to \"/signin\" then the user will be returned to `https://application.com/webapp/signin` (note this URI must be registered as a valid `post_logout_redirect_uri` in the OpenID Connect Provider)."
msgstr "如果设置了 `quarkus.oidc.logout.post-logout-path` 属性，一旦注销完成，用户将返回到端点后注销页面。例如，如果端点地址是 `<a href=\"https://application.com/webapp\" class=\"bare\">https://application.com/webapp</a>` 并且 `quarkus.oidc.logout.post-logout-path` 被设置为\"/signin\"，那么用户将被返回到 `<a href=\"https://application.com/webapp/signin\" class=\"bare\">https://application.com/webapp/signin</a>` (注意这个URI必须在OpenID Connect Provider中注册为有效的 `post_logout_redirect_uri` ）。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "If the `quarkus.oidc.logout.post-logout-path` is set then a `q_post_logout` cookie will be created and a matching `state` query parameter will be added to the logout redirect URI and the OpenID Connect Provider will return this `state` once the logout has been completed. It is recommended for the Quarkus `web-app` applications to check that a `state` query parameter matches the value of the `q_post_logout` cookie which can be done for example in a JAX-RS filter."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Note that a cookie name will vary when using xref:security-openid-connect-multitenancy.adoc[OpenID Connect Multi-Tenancy]. For example, it will be named `q_post_logout_tenant_1` for a tenant with a `tenant_1` id, etc."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Here is an example of how to configure an RP initiated logout flow:"
msgstr ""

#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid ""
"You may also need to set `quarkus.oidc.authentication.cookie-path` to a path value common to all of the application resources which is `/` in this example.\n"
"See <<oidc-cookies, Dealing with Cookies>> for more information."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Note that some OpenID Connect providers do not support https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout] specification (possibly because it is still technically a draft) and do not return an OpenID Connect well-known `end_session_endpoint` metadata property. However it should not be a problem since these providers' specific logout mechanisms may only differ in how the logout URL query parameters are named."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "According to the https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout] specification, the `quarkus.oidc.logout.post-logout-path` property is represented as a `post_logout_redirect_uri` query parameter which will not be recognized by the providers which do not support this specification."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "You can use `quarkus.oidc.logout.post-logout-url-param` to work around this issue. You can also request more logout query parameters added with `quarkus.oidc.logout.extra-params`. For example, here is how you can support a logout with `Auth0`:"
msgstr "你可以使用 `quarkus.oidc.logout.post-logout-url-param` 来解决这个问题。你还可以要求用 `quarkus.oidc.logout.extra-params` 添加更多的注销查询参数。例如，以下是你如何用 `Auth0` 支持注销："

#. type: Title ====
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Local Logout"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "If you work with a social provider such as Google and are concerned that the users can be logged out from all their Google applications with the <<user-initiated-logout,User-Initiated Logout>> which redirects the users to the provider's logout endpoint then you can support a local logout with the help of the <<oidc-session,OidcSession>> which only clears the local session cookie, for example:"
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Session Management"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "If you have a xref:security-openid-connect.adoc#single-page-applications[Single Page Application for Service Applications] where your OpenID Connect Provider script such as `keycloak.js` is managing an authoriization code flow then that script will also control the SPA authentication session lifespan."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "If you work with a Quarkus OIDC `web-app` application then it is Quarkus OIDC Code Authentication mechanism which is managing the user session lifespan."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "The session age is calculated by adding the lifespan value of the current IDToken and the values of the `quarkus.oidc.authentication.session-age-extension` and `quarkus.oidc.token.lifespan-grace` properties. Of the last two properties only `quarkus.oidc.authentication.session-age-extension` should be used to significantly extend the session lifespan if required since `quarkus.oidc.token.lifespan-grace` is only meant for taking some small clock skews into consideration."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "When the currently authenticated user returns to the protected Quarkus endpoint and the ID token associated with the session cookie has expired then, by default, the user will be auto-redirected to the OIDC Authorization endpoint to re-authenticate. Most likely the OIDC provider will challenge the user again though not necessarily if the session between the user and this OIDC provider is still active which may happen if it is configured to last longer than the ID token."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "If the `quarkus.oidc.token.refresh-expired` then the expired ID token (as well as the access token) will be refreshed using the refresh token returned with the authorization code grant response. This refresh token may also be recycled (refreshed) itself as part of this process. As a result the new session cookie will be created and the session will be extended."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Note, `quarkus.oidc.authentication.session-age-extension` can be important when dealing with expired ID tokens, when the user is not very active. In such cases, if the ID token expires, then the session cookie may not be returned back to the Quarkus endpoint during the next user request and Quarkus will assume it is the first authentication request. Therefore using `quarkus.oidc.authentication.session-age-extension` is important if you need to have even the expired ID tokens refreshed."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "You can also complement refreshing the expired ID tokens by proactively refreshing the valid ID tokens which are about to be expired within the `quarkus.oidc.token.refresh-token-time-skew` value. If, during the current user request, it is calculated that the current ID token will expire within this `quarkus.oidc.token.refresh-token-time-skew` then it will be refreshed and the new session cookie will be created. This property should be set to a value which is less than the ID token lifespan; the closer it is to this lifespan value the more often the ID token will be refreshed."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "You can have this process further optimized by having a simple JavaScript function periodically emulating the user activity by pinging your Quarkus endpoint thus minimizing the window during which the user may have to be re-authenticated."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Note this user session can not be extended forever - the returning user with the expired ID token will have to re-authenticate at the OIDC provider endpoint once the refresh token has expired."
msgstr ""

#. type: Title ====
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "OidcSession"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "`io.quarkus.oidc.OidcSession` is a wrapper around the current `IdToken`. It can help to perform a <<local-logout, Local Logout>>, retrieve the current session's tenant identifier and check when the session will expire. More useful methods will be added to it over time."
msgstr ""

#. type: Title ====
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "TokenStateManager"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "OIDC `CodeAuthenticationMechanism` is using the default `io.quarkus.oidc.TokenStateManager` interface implementation to keep the ID, access and refresh tokens returned in the authorization code or refresh grant responses in a session cookie. It makes Quarkus OIDC endpoints completely stateless."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Note that some endpoints do not require the access token. An access token is only required if the endpoint needs to retrieve `UserInfo` or access the downstream service with this access token or use the roles associated with the access token (the roles in the ID token are checked by default). In such cases you can set either `quarkus.oidc.token-state-manager.strategy=id-refresh-token` (keep ID and refresh tokens only) or `quarkus.oidc.token-state-manager.strategy=id-token` (keep ID token only)."
msgstr ""

#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid ""
"If the ID, access and refresh tokens are JWT tokens then combining all of them (if the strategy is the default `keep-all-tokens`) or only ID and refresh tokens (if the strategy is `id-refresh-token`) may produce a session cookie value larger than 4KB and the browsers may not be able to keep this cookie.\n"
"In such cases, you can use `quarkus.oidc.token-state-manager.split-tokens=true` to have a unique session token per each of these tokens."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Register your own `io.quarkus.oidc.TokenStateManager' implementation as an `@ApplicationScoped` CDI bean if you need to customize the way the tokens are associated with the session cookie. For example, you may want to keep the tokens in a database and have only a database pointer stored in a session cookie. Note though that it may present some challenges in making the tokens available across multiple microservices nodes."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "Here is a simple example:"
msgstr "下面是一个简单的例子："

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy, no-wrap
msgid "Listening to important authentication events"
msgstr "听取重要的认证事件"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "One can register `@ApplicationScoped` bean which will observe important OIDC authentication events. The listener will be updated when a user has logged in for the first time or re-authenticated, as well as when the session has been refreshed. More events may be reported in the future. For example:"
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Single Page Applications"
msgstr "单页应用程序"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Please check if implementing SPAs the way it is suggested in the xref:security-openid-connect.adoc#single-page-applications[Single Page Applications for Service Applications] section can meet your requirements."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "If you prefer to use SPA and JavaScript API such as `Fetch` or `XMLHttpRequest`(XHR) with Quarkus web applications, please be aware that OpenID Connect Providers may not support CORS for Authorization endpoints where the users are authenticated after a redirect from Quarkus. This will lead to authentication failures if the Quarkus application and the OpenID Connect Provider are hosted on the different HTTP domains/ports."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "In such cases, set the `quarkus.oidc.authentication.java-script-auto-redirect` property to `false` which will instruct Quarkus to return a `499` status code and `WWW-Authenticate` header with the `OIDC` value. The browser script also needs to be updated to set `X-Requested-With` header with the `JavaScript` value and reload the last requested page in case of `499`, for example:"
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Cross Origin Resource Sharing"
msgstr "跨域资源共享(CORS)"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "If you plan to consume this application from a Single Page Application running on a different domain, you will need to configure CORS (Cross-Origin Resource Sharing). Please read the xref:http-reference.adoc#cors-filter[HTTP CORS documentation] for more details."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Integration with GitHub and other OAuth2 providers"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Some well known providers such as `GitHub` or `LinkedIn` are not `OpenID Connect` but `OAuth2` providers which support the `authorization code flow`, for example, link:https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps[GitHub OAuth2] and link:https://docs.microsoft.com/en-us/linkedin/shared/authentication/authorization-code-flow[LinkedIn OAuth2]."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "The main difference between `OpenID Connect` and `OAuth2` providers is that `OpenID Connect` providers, by building on top of `OAuth2`, return an `ID Token` representing a user authentication, in addition to the standard authorization code flow `access` and `refresh` tokens returned by `OAuth2` providers."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "`OAuth2` providers such as `GitHub` do not return `IdToken`, the fact of the user authentication is implicit and is indirectly represented by the `access` token which represents an authenticated user authorizing the current Quarkus `web-app` application to access some data on behalf of the authenticated user."
msgstr ""

#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid ""
"For example, when working with `GitHub`, the Quarkus endpoint can acquire an `access` token which will allow it to request a `GitHub` profile of the current user.\n"
"In fact this is exactly how a standard `OpenID Connect` `UserInfo` acqusition also works - by authenticating into your `OpenID Connect` provider you also give a permission to Quarkus application to acquire your <<user-info,UserInfo>> on your behalf - and it also shows what is meant by `OpenID Connect` being built on top of `OAuth2`."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "In order to support the integration with such `OAuth2` servers, `quarkus-oidc` needs to be configured to allow the authorization code flow responses without `IdToken`: `quarkus.oidc.authentication.id-token-required=false`."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "It is required because `quarkus-oidc` expects that not only `access` and `refresh` tokens but also `IdToken` will be returned once the authorization code flow completes."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Note, even though you will configure the extension to support the authorization code flows without `IdToken`, an internal `IdToken` will be generated to support the way `quarkus-oidc` operates where an `IdToken` is used to support the authentication session and to avoid redirecting the user to the provider such as `GitHub` on every request. In this case the session lifespan is set to 5 minutes which can be extended further as described in the <<session-management,session management>> section."
msgstr ""

#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid ""
"The next step is to ensure that the returned access token can be useful to the current Quarkus endpoint.\n"
"If the `OAuth2` provider supports the introspection endpoint then you may be able to use this access token as a source of roles with `quarkus.oidc.roles.source=accesstoken`. If no introspection endpoint is available then at the very least it should be possible to request <<user-info,UserInfo>> from this provider with `quarkus.oidc.authentication.user-info-required` - this is the case with `GitHib`."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Configuring the endpoint to request <<user-info,UserInfo>> is the only way `quarkus-oidc` can be integrated with the providers such as `GitHib`."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Note that requiring <<user-info,UserInfo>> involves making a remote call on every request - therefore you may want to consider caching `UserInfo` data, see <<token-introspection-userinfo-cache,Token Introspection and UserInfo Cache> for more details."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Also, OAuth2 servers may not support a well-known configuration endpoint in which case the discovery has to be disabled and the authorization, token, and introspection and/or userinfo endpoint paths have to be configured manually."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Here is how you can integrate `quarkus-oidc` with `GitHub` after you have link:https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app[created a GitHub OAuth application]. Configure your Quarkus endpoint like this:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "This is all what is needed for an endpoint like this one to return the currently authenticated user's profile with `GET http://localhost:8080/github/userinfo` and access it as the individual `UserInfo` properties:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "If you support more than one social provider with the help of xref:security-openid-connect-multitenancy.adoc[OpenID Connect Multi-Tenancy], for example, `Google` which is an OpenID Connect Provider returning `IdToken` and `GitHub` which is an `OAuth2` provider returning no `IdToken` and only allowing to access `UserInfo` then you can have your endpoint working with only the injected `SecurityIdentity` for both `Google` and `GitHub` flows. A simple augmentation of `SecurityIdentity` will be required where a principal created with the internally generated `IdToken` will be replaced with the `UserInfo` based principal when the GiHub flow is active:"
msgstr ""

#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Now, the following code will work when the user is signing in into your application with both `Google` or `GitHub`:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Possibly a simpler alternative is to inject both `@IdToken JsonWebToken` and `UserInfo` and use `JsonWebToken` when dealing with the providers returning `IdToken` and `UserInfo` - with the providers which do not return `IdToken`."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "The last important point is to make sure the callback path you enter in the GitHub OAuth application configuration matches the endpoint path where you'd like the user be redirected to after a successful GitHub authentication and application authorization, in this case it has to be set to `http:localhost:8080/github/userinfo`."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Cloud Services"
msgstr ""

#. type: Title ====
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy, no-wrap
msgid "Google Cloud"
msgstr "谷歌云"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "You can have Quarkus OIDC `web-app` applications access **Google Cloud services** such as **BigQuery** on behalf of the currently authenticated users who have enabled OpenID Connect (Authorization Code Flow) permissions to such services in their Google Developer Consoles."
msgstr ""

#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid ""
"It is super easy to do with https://github.com/quarkiverse[Quarkiverse] https://github.com/quarkiverse/quarkiverse-google-cloud-services[Google Cloud Services], only add\n"
"the https://github.com/quarkiverse/quarkiverse-google-cloud-services/releases/latest[latest tag] service dependency, for example:"
msgstr "使用 link:https://github.com/quarkiverse[Quarkiverse] link:https://github.com/quarkiverse/quarkiverse-google-cloud-services[谷歌云服务] 非常简单，只需添加 link:https://github.com/quarkiverse/quarkiverse-google-cloud-services/releases/latest[最新的标签] 服务依赖即可："

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "and configure Google OIDC properties:"
msgstr "并配置谷歌OIDC属性："

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Provider Endpoint configuration"
msgstr "提供者端点配置"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "OIDC `web-app` application needs to know OpenID Connect provider's authorization, token, `JsonWebKey` (JWK) set and possibly `UserInfo`, introspection and end session (RP-initiated logout) endpoint addresses."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "By default they are discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc.auth-server-url`."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Alternatively, if the discovery endpoint is not available or you would like to save on the discovery endpoint roundtrip, you can disable the discovery and configure them with relative path values, for example:"
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Token Propagation"
msgstr "令牌传播"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Please see xref:security-openid-connect-client.adoc#token-propagation[Token Propagation] section about the Authorization Code Flow access token propagation to the downstream services."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy, no-wrap
msgid "Oidc Provider Client Authentication"
msgstr "OIDC供应商客户认证"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "`quarkus.oidc.runtime.OidcProviderClient` is used when a remote request to an OpenID Connect Provider has to be done. It has to authenticate to the OpenID Connect Provider when the authorization code has to be exchanged for the ID, access and refresh tokens, when the ID and access tokens have to be refreshed or introspected."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "`client_secret_basic`:"
msgstr " `client_secret_basic` :"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "or"
msgstr "或"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider]:"
msgstr "或者用从 link:credentials-provider.html[CredentialsProvider] 中获取的秘密。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "`client_secret_post`:"
msgstr " `client_secret_post` :"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "`client_secret_jwt`, signature algorithm is HS256:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "`private_key_jwt` with the PEM key file, signature algorithm is RS256:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "`private_key_jwt` with the key store file, signature algorithm is RS256:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that no client secret goes over the wire."
msgstr "使用 `client_secret_jwt` 或 `private_key_jwt` 认证方法，可以确保没有客户的秘密在网上流传。"

#. type: Title ====
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy, no-wrap
msgid "Additional JWT Authentication options"
msgstr "额外的JWT认证选项"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "If `client_secret_jwt`, `private_key_jwt` authentication methods are used or an `Apple` `post_jwt` method is used then the JWT signature algorithm, key identifier, audience, subject and issuer can be customized, for example:"
msgstr ""

#. type: Title ====
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy, no-wrap
msgid "Apple POST JWT"
msgstr "苹果POST JWT"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Apple OpenID Connect Provider uses a `client_secret_post` method where a secret is a JWT produced with a `private_key_jwt` authentication method but with Apple account specific issuer and subject claims."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "`quarkus-oidc` supports a non-standard `client_secret_post_jwt` authentication method which can be configured as follows:"
msgstr ""

#. type: Title ====
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy, no-wrap
msgid "Mutual TLS"
msgstr "相互之间的TLS"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Some OpenID Connect Providers may require that a client is authenticated as part of the `Mutual TLS` (`MTLS`) authentication process."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "`quarkus-oidc` can be configured as follows to support `MTLS`:"
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Testing"
msgstr "测试"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Start by adding the following dependencies to your test project:"
msgstr "首先在你的测试项目中添加以下依赖项："

#. type: Title ====
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Wiremock"
msgstr "Wiremock"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Add the following dependency:"
msgstr "添加以下依赖关系："

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "Prepare the REST test endpoints, set `application.properties`, for example:"
msgstr "准备好REST测试端点，设置 `application.properties` ，例如："

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "and finally write the test code, for example:"
msgstr "并最终写出测试代码，例如："

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "`OidcWiremockTestResource` recognizes `alice` and `admin` users. The user `alice` has the `user` role only by default - it can be customized with a `quarkus.test.oidc.token.user-roles` system property. The user `admin` has the `user` and `admin` roles by default - it can be customized with a `quarkus.test.oidc.token.admin-roles` system property."
msgstr " `OidcWiremockTestResource` 识别 和 用户。用户 ，默认情况下只有 角色--可以通过 系统属性来定制。用户 默认拥有 和 角色 - 它可以通过 系统属性进行定制。 `alice` `admin` `alice` `user` `quarkus.test.oidc.token.user-roles` `admin` `user` `admin` `quarkus.test.oidc.token.admin-roles` "

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "Additionally, `OidcWiremockTestResource` set token issuer and audience to `https://service.example.com` which can be customized with `quarkus.test.oidc.token.issuer` and `quarkus.test.oidc.token.audience` system properties."
msgstr "此外， `OidcWiremockTestResource` ，将代币发行者和受众设置为 `<a href=\"https://service.example.com\" class=\"bare\">https://service.example.com</a>` 这可以通过 `quarkus.test.oidc.token.issuer` 和 `quarkus.test.oidc.token.audience` 系统属性来定制。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "`OidcWiremockTestResource` can be used to emulate all OpenID Connect providers."
msgstr " `OidcWiremockTestResource` 可以用来模拟所有的OpenID Connect提供商。"

#. type: Title ====
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Dev Services for Keycloak"
msgstr "为Keycloak提供的开发服务"

#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid ""
"Using xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] is recommended for the integration testing against Keycloak.\n"
"`Dev Services for Keycloak` will launch and initialize a test container: it will create a `quarkus` realm, a `quarkus-app` client (`secret` secret) and add `alice` (`admin` and `user` roles) and `bob` (`user` role) users, where all of these properties can be customized."
msgstr "建议使用 link:security-openid-connect-dev-services.html[Keycloak开发服务] 进行针对Keycloak的集成测试。 `Keycloak开发服务` 将启动和初始化一个测试容器：它将创建一个 `quarkus` 领域，一个 `quarkus-app` 客户端（ `secret` 秘密）并添加 `alice` （ `admin` 和 `user` 角色）和 `bob` （ `user` 角色）用户，其中所有这些属性都可以被定制。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "First prepare `application.properties`. You can start with a completely empty `application.properties` as `Dev Services for Keycloak` will register `quarkus.oidc.auth-server-url` pointing to the running test container as well as `quarkus.oidc.client-id=quarkus-app` and `quarkus.oidc.credentials.secret=secret`."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "But if you already have all the required `quarkus-oidc` properties configured then you only need to associate `quarkus.oidc.auth-server-url` with the `prod` profile for `Dev Services for Keycloak`to start a container, for example:"
msgstr "但是如果你已经配置了所需的 `quarkus-oidc` 属性，那么你只需要将 `quarkus.oidc.auth-server-url` 与 `Keycloak开发服务` 的 `prod` 配置文件联系起来，以启动一个容器，例如："

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "If a custom realm file has to be imported into Keycloak before running the tests then you can configure `Dev Services for Keycloak` as follows:"
msgstr "如果在运行测试前必须将自定义领域文件导入Keycloak，那么你可以按以下方式配置 `Keycloak开发服务` ："

#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid ""
"Finally write a test code the same way as it is described in the <<integration-testing-wiremock, Wiremock>> section above.\n"
"The only difference is that `@QuarkusTestResource` is no longer needed:"
msgstr ""

#. type: Title ====
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy, no-wrap
msgid "KeycloakTestResourceLifecycleManager"
msgstr "KeycloakTestResourceLifecycleManager"

#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid ""
"If you need to do the integration testing against Keycloak then you are encouraged to do it with <<integration-testing-keycloak-devservices,Dev Services For Keycloak>>.\n"
"Use `KeycloakTestResourceLifecycleManager` for your tests only if there is a good reason not to use `Dev Services for Keycloak`."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Start with adding the following dependency:"
msgstr "首先要添加以下依赖关系："

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "which provides `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` - an implementation of `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which starts a Keycloak container."
msgstr "它提供了 `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` - 一个 `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` 的实现，用来启动一个Keycloak容器。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "And configure the Maven Surefire plugin as follows:"
msgstr "并按以下方式配置Maven Surefire插件："

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "(and similarly the Maven Failsafe plugin when testing in native image)."
msgstr "(和类似的Maven Failsafe插件，在本地图像中测试时）。"

#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid ""
"And now set the configuration and write the test code the same way as it is described in the <<integration-testing-wiremock, Wiremock>> section above.\n"
"The only difference is the name of `QuarkusTestResource`:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "`KeycloakTestResourceLifecycleManager` registers `alice` and `admin` users. The user `alice` has the `user` role only by default - it can be customized with a `keycloak.token.user-roles` system property. The user `admin` has the `user` and `admin` roles by default - it can be customized with a `keycloak.token.admin-roles` system property."
msgstr "`KeycloakTestResourceLifecycleManager` 注册 `alice` 和 `admin` 用户。默认情况下，用户 `alice` 仅具有 `user` 角色 - 可以使用 `keycloak.token.user-roles` 系统属性对其进行自定义。默认情况下，用户 `admin` 具有 `用户` 和 `admin` 角色 - 可以使用 `keycloak.token.admin-roles` 系统属性对其进行自定义。"

#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid ""
"By default, `KeycloakTestResourceLifecycleManager` uses HTTPS to initialize a Keycloak instance which can be disabled with `keycloak.use.https=false`.\n"
"Default realm name is `quarkus` and client id - `quarkus-web-app` - set `keycloak.realm` and `keycloak.web-app.client` system properties to customize the values if needed."
msgstr "默认情况下， `KeycloakTestResourceLifecycleManager` 使用 HTTPS 初始化 Keycloak 实例，可通过 `keycloak.use.https=false` 禁用。默认境界名称为 `quarkus` ，客户端 ID 为 `quarkus-web-app` - 如有需要，可设置 `keycloak.realm` 和 `keycloak.web-app.client` 系统属性以自定义值。"

#. type: Title ====
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "TestSecurity annotation"
msgstr "TestSecurity 注解"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Please see xref:security-openid-connect.adoc#integration-testing-security-annotation[Use TestingSecurity with injected JsonWebToken] section for more information about using `@TestSecurity` and `@OidcSecurity` annotations for testing the `web-app` application endpoint code which depends on the injected ID and access `JsonWebToken` as well as `UserInfo` and `OidcConfigurationMetadata`."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "How to check the errors in the logs"
msgstr "如何检查日志中的错误"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Please enable `io.quarkus.oidc.runtime.OidcProvider` `TRACE` level logging to see more details about the token verification errors:"
msgstr "请启用 `io.quarkus.oidc.runtime.OidcProvider` `TRACE` 级日志，以查看有关令牌验证错误的更多细节："

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "Please enable `io.quarkus.oidc.runtime.OidcRecorder` `TRACE` level logging to see more details about the OidcProvider client initialization errors:"
msgstr "请启用 `io.quarkus.oidc.runtime.OidcRecorder` `TRACE` 级日志，以查看关于OidcProvider客户端初始化错误的更多细节："

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy, no-wrap
msgid "Running behind a reverse proxy"
msgstr "在反向代理后面运行"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "OIDC authentication mechanism can be affected if your Quarkus application is running behind a reverse proxy/gateway/firewall when HTTP `Host` header may be reset to the internal IP address, HTTPS connection may be terminated, etc. For example, an authorization code flow `redirect_uri` parameter may be set to the internal host instead of the expected external one."
msgstr "如果你的Quarkus应用程序在反向代理/网关/防火墙后面运行，OIDC认证机制可能会受到影响，此时HTTP `Host` 头可能被重置为内部IP地址，HTTPS连接可能被终止，等等。例如，授权码流 `redirect_uri` 参数可能被设置为内部主机而不是预期的外部主机。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "In such cases configuring Quarkus to recognize the original headers forwarded by the proxy will be required, see xref:http-reference.adoc#reverse-proxy[Running behind a reverse proxy] Vert.x documentation section for more information."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "For example, if your Quarkus endpoint runs in a cluster behind Kubernetes Ingress then a redirect from the OpenID Connect Provider back to this endpoint may not work since the calculated `redirect_uri` parameter may point to the internal endpoint address. This problem can be resolved with the following configuration:"
msgstr "例如，如果你的Quarkus端点在Kubernetes Ingress后面的集群中运行，那么从OpenID Connect Provider重定向到这个端点可能会不工作，因为计算的 `redirect_uri` 参数可能指向内部端点地址。这个问题可以通过以下配置来解决："

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "where `X-ORIGINAL-HOST` is set by Kubernetes Ingress to represent the external endpoint address."
msgstr "其中 `X-ORIGINAL-HOST` ，由Kubernetes Ingress设置，代表外部端点地址。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "`quarkus.oidc.authentication.force-redirect-https-scheme` property may also be used when the Quarkus application is running behind a SSL terminating reverse proxy."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "External and Internal Access to OpenID Connect Provider"
msgstr "外部和内部访问OpenID Connect的提供者"

#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid ""
"Note that the OpenID Connect Provider externally accessible authorization, logout and other endpoints may have different HTTP(S) URLs compared to the URLs auto-discovered or configured relative to `quarkus.oidc.auth-server-url` internal URL.\n"
"In such cases an issuer verification failure may be reported by the endpoint and redirects to the externally accessible Connect Provider endpoints may fail."
msgstr "请注意，外部可访问的 OpenID Connect Provider 授权、注销和其他端点的 HTTP(S) URL 可能与自动发现或相对于 `quarkus.oidc.auth-server-url` 内部 URL 配置的 URL 不同。在这种情况下，端点可能会报告发行者验证失败，重定向到外部可访问的连接提供商端点也可能失败。"

#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid ""
"In such cases, if you work with Keycloak then please start it with a `KEYCLOAK_FRONTEND_URL` system property set to the externally accessible base URL.\n"
"If you work with other Openid Connect providers then please check your provider's documentation."
msgstr "在这种情况下，如果你使用Keycloak，那么请用 `KEYCLOAK_FRONTEND_URL` 系统属性设置为外部可访问的基本URL来启动它。如果你使用其他Openid Connect提供商，那么请查看你的提供商的文档。"

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Customize authentication requests"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "By default, only the `response_type` (set to `code`), `scope` (set to 'openid'), `client_id`, `redirect_uri` and `state` properties are passed as HTTP query parameters to the OpenID Connect provider's authorization endpoint when the user is redirected to it to authenticate."
msgstr "默认情况下，只有 `response_type` （设置为 `code` ）、 `scope` （设置为'openid'）、 `client_id` 、 `redirect_uri` 和 `state` 属性在用户被重定向到OpenID Connect提供商的授权端点进行认证时，作为HTTP查询参数传递给它。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "You can add more properties to it with `quarkus.oidc.authentication.extra-params`. For example, some OpenID Connect providers may choose to return the authorization code as part of the redirect URI's fragment which would break the authentication process - it can be fixed as follows:"
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Configuration Reference"
msgstr "配置参考"

#. type: Title ==
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "References"
msgstr "参考文献"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr "link:https://www.keycloak.org/documentation.html[Keycloak 文档]"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr "link:https://openid.net/connect/[OpenID Connect]"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "link:https://tools.ietf.org/html/rfc7519[JSON 网络令牌]"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "xref:security-openid-connect-client.adoc[Quarkus - Using OpenID Connect and OAuth2 Client and Filters to manage access tokens]"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]"
msgstr "xref:security-openid-connect-dev-services.adoc[Keycloak 的开发服务]"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
msgid "xref:security.adoc#oidc-jwt-oauth2-comparison[Summary of Quarkus OIDC, JWT and OAuth2 features]"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-web-authentication.adoc
#, fuzzy
msgid "xref:security.adoc[Quarkus Security]"
msgstr "xref:security.adoc[夸克安全]"
