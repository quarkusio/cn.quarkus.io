# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.7/guides/native-reference.adoc
#, no-wrap
msgid "Native Reference Guide"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"This guide is a companion to the\n"
"xref:building-native-image.adoc[Building a Native Executable],\n"
"xref:native-and-ssl.adoc[Using SSL With Native Images],\n"
"and xref:writing-native-applications-tips.adoc[Writing Native Applications],\n"
"guides.\n"
"It provides further details to debugging issues in Quarkus native executables that might arise during development or production."
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"This reference guide takes as input the application developed in the xref:getting-started.adoc[Getting Started Guide].\n"
"You can find instructions on how to quickly set up this application in this guide."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/native-reference.adoc
#, no-wrap
msgid "Requirements and Assumptions"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "This guide has the following requirements:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "JDK 11 installed with `JAVA_HOME` configured appropriately"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "A working container runtime (Docker, podman)"
msgstr "一个工作的容器运行时（Docker 或 podman）"

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"This guide builds and executes Quarkus native executables within a Linux environment.\n"
"To offer a homogeneous experience across all environments,\n"
"the guide relies on a container runtime environment to build and run the native executables.\n"
"The instructions below use Docker as example, but very similar commands should work on alternative container runtimes, e.g. podman."
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"Building native executables is an expensive process,\n"
"so make sure the container runtime has enough CPU and memory to do this.\n"
"A minimum of 4 CPUs and 4GB of memory is required."
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"Finally, this guide assumes the use of the link:https://github.com/graalvm/mandrel[Mandrel distribution] of GraalVM for building native executables,\n"
"and these are built within a container so there is no need for installing Mandrel on the host."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/native-reference.adoc
#, no-wrap
msgid "Bootstrapping the project"
msgstr "创建项目"

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"Start by creating a new Quarkus project.\n"
"Open a terminal and run the following command:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "For Linux & MacOS users"
msgstr "针对Linux和MacOS用户"

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "For Windows users"
msgstr "对于Windows用户"

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "If using cmd , (don't use backward slash `\\` and put everything on the same line)"
msgstr "如果使用cmd ，（不要使用反斜线 `\\` ，并将所有内容放在同一行）"

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "If using Powershell , wrap `-D` parameters in double quotes e.g. `\"-DprojectArtifactId=debugging-native\"`"
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/native-reference.adoc
#, no-wrap
msgid "Configure Quarkus properties"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"Some Quarkus configuration options will be used constantly throughout this guide,\n"
"so to help declutter command line invocations,\n"
"it's recommended to add these options to the `application.properties` file.\n"
"So, go ahead and add the following options to that file:"
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/native-reference.adoc
#, no-wrap
msgid "First Debugging Steps"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "As a first step, change to the project directory and build the native executable for the application:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "Run the application to verify it works as expected. In one terminal:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "In another:"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"The rest of this section explores ways to build the native executable with extra information,\n"
"but first, stop the running application.\n"
"We can obtain this information while building the native executable by adding additional native-image build options using `-Dquarkus.native.additional-build-args`, e.g."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "Executing that will produce additional output lines like this:"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"The target info file contains information such as the target platform,\n"
"the toolchain used to compile the executable,\n"
"and the C library in use:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "The native library info file contains information on the static libraries added to the binary and the other libraries dynamically linked to the executable:"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"Even more detail can be obtained by passing in `--verbose` as an additional native-image build argument.\n"
"This option can be very useful in detecting whether the options that you pass at a high level via Quarkus are being passed down to the native executable production,\n"
"or whether some third party jar has some native-image configuration embedded in it that is reaching the native-image invocation:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "Running with `--verbose` demonstrates how the native-image building process is two sequential java processes:"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"The first is a very short Java process that does some basic validation and builds the arguments for the second process\n"
"(in a stock GraalVM distribution, this is executed as native code)."
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"The second Java process is where the main part of the native executable production happens.\n"
"The `--verbose` option shows the actual Java process executed.\n"
"You could take the output and run it yourself."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "One may also combine multiple native build options by separating with a comma, e.g.:"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"Remember that if an argument for `-Dquarkus.native.additional-build-args` includes the `,` symbol,\n"
"it needs to be escaped to be processed correcly, e.g. `\\\\,`."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/native-reference.adoc
#, no-wrap
msgid "Inspecting Native Executables"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"Given a native executable, various Linux tools can be used to inspect it.\n"
"To allow supporting a variety of environments,\n"
"inspections will be done from within a Linux container.\n"
"Let's create a Linux container image with all the tools required for this guide:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "Using docker in the non-Linux environment, you can create an image using this Dockerfile via:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "Then, go to the root of the project and run the Docker container we have just created as:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "`ldd` shows the shared library dependencies of an executable:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "`strings` can be used to look for text messages inside the binary:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "Using `strings` you can also get Mandrel information given the binary:"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"Finally, using `readelf` we can inspect different sections of the binary.\n"
"For example, we can see how the heap and text sections take most of binary:"
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/native-reference.adoc
#, no-wrap
msgid "Native Reports"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "Optionally, the native build process can generate reports that show what goes into the binary:"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"The reports will be created under `target/debugging-native-1.0.0-SNAPSHOT-native-image-source-jar/reports/`.\n"
"These reports are some of the most useful resources when encountering issues with missing methods/classes, or encountering forbidden methods by Mandrel."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/native-reference.adoc
#, no-wrap
msgid "Call Tree Reports"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"`call_tree` text file report is one of the default reports generated when the `-Dquarkus.native.enable-reports` option is passed in.\n"
"This is useful for getting an approximation on why a method/class is included in the binary.\n"
"However, the text format makes it very difficult to read and can take up a lot of space."
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"Since Mandrel 21.3.0.0, the call tree is also reported as a group of CSV files.\n"
"The CSV output can be enabled by adding `-H:PrintAnalysisCallTreeType=CSV` to the additional native arguments. E.g."
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"These can in turn be imported into a graph database, such as Neo4j,\n"
"to inspect them more easily and run queries against the call tree.\n"
"Let’s see this in action."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "First, start a Neo4j instance:"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"Once the container is running,\n"
"you can access the link:http://localhost:7474[Neo4j browser].\n"
"Use `neo4j` as the username and the value of `NEO_PASS` as the password to log in."
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"To import the CSV files,\n"
"we need the following cypher script which will import the data within the CSV files and create graph database nodes and edges:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "Copy and paste the contents of the script into a file called `import.cypher`."
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"Mandrel 22.0.0 contains a bug where the symbolic links used by the import cypher file are not correctly set when generating reports within a container\n"
"(for more details see link:https://github.com/oracle/graal/issues/4355[here]).\n"
"This can be worked around by copying the following script into a file and executing it:"
msgstr ""

#. type: delimited block =
#: _versions/2.7/guides/native-reference.adoc
msgid "Next, copy the import cypher script and CSV files into Neo4j's import folder:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "After copying all the files, invoke the import script:"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"Once the import completes (shouldn't take more than a couple of minutes), go to the link:http://localhost:7474[Neo4j browser],\n"
"and you'll be able to observe a small summary of the data in the graph:"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"The data above shows that there are ~60000 methods, and just over ~200000 edges between them.\n"
"The Quarkus application demonstrated here is very basic, so there’s not a lot we can explore, but here are some example queries you can run to explore the graph in more detail.\n"
"Typically, you’d start by looking for a given method:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "From there, you can narrow down to a given method on a specific type:"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"Once you’ve located the node for the specific method you’re after, a typical question you’d want to get an answer for is:\n"
"why does this method get included in the call tree?\n"
"To do that, start from the method and look for incoming connections at a given depth,\n"
"starting from the end method.\n"
"For example, methods that directly call a method can be located via:"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"Then you can look for direct calls at depth of 2,\n"
"so you’d search for methods that call methods that call into the target method:"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"You can continue going up layers,\n"
"but unfortunately if you reach a depth with too many nodes,\n"
"the Neo4j browser will be unable to visualize them all.\n"
"When that happens, you can alternatively run the queries directly against the cypher shell:"
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/native-reference.adoc
#, no-wrap
msgid "Used Packages/Classes/Methods Reports"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"`used_packages`, `used_classes` and `used_methods` text file reports come in handy when comparing different versions of the application,\n"
"e.g. why does the image take longer to build? Or why is the image bigger now?"
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/native-reference.adoc
#, no-wrap
msgid "Further Reports"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"Mandrel can produce further reports beyond the ones that are enabled with the `-Dquarkus.native.enable-reports` option.\n"
"These are called expert options and you can learn more about them by running:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "To use these expert options, add them comma separated to the `-Dquarkus.native.additional-build-args` parameter."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/native-reference.adoc
#, no-wrap
msgid "Build-time vs Run-time Initialization"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"Quarkus instructs Mandrel to initialize as much as possible at build time,\n"
"so that runtime startup can be as fast as possible.\n"
"This is important in containerized environments where the startup speed has a big impact on how quickly an application is ready to do work.\n"
"Build time initialization also minimizes the risk of runtime failures due to unsupported features becoming reachable through runtime initialization,\n"
"thus making Quarkus more reliable."
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"The most common examples of build-time initialized code are static variables and blocks.\n"
"Although Mandrel executes those at run-time by default,\n"
"Quarkus instructs Mandrel to run them at build-time for the reasons given."
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"This means that any static variables initialized inline, or initialized in a static block,\n"
"will keep the same value even if the application is restarted.\n"
"This is a different behaviour compared to what would happen if executed as Java."
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"To see this in action with a very basic example,\n"
"add a new `TimestampResource` to the application that looks like this:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "Rebuild the binary using:"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"Run the application in one terminal\n"
"(make sure you stop any other native executable container runs before executing this):"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "Send a `GET` request multiple times from another terminal:"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"to see how the current time has been baked into the binary.\n"
"This time was calculated when the binary was being built,\n"
"hence application restarts have no effect."
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"In some situations, built time initializations can lead to errors when building native executables.\n"
"One example is when a value gets computed at build time which is forbidden to reside in the heap of the JVM that gets baked into the binary.\n"
"To see this in action, add this REST resource:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "When trying to rebuild the application, you’ll encounter an error:"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"So, what the message above is telling us is that our application caches a value that is supposed to be random as a constant.\n"
"This is not desirable because something that's supposed to be random is no longer so,\n"
"because the seed is baked in the image.\n"
"The message above makes it quite clear what is causing this,\n"
"but in other situations the cause might be more obfuscated.\n"
"As a next step, we'll add some extra flags to the native executable generation to get more information."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "As suggested by the message, let's start by adding an option to track object instantiation:"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"The error messages point to the code in the example,\n"
"but it can be suprising that a reference to `DnsClient` appears.\n"
"Why is that?\n"
"The key is in what happens inside `KeyPairGenerator.initialize()` method call.\n"
"It uses `JCAUtil.getSecureRandom()` which is why this is problematic,\n"
"but sometimes the tracing options can show some stack traces that do not represent what happens in reality.\n"
"The best option is to dig through the source code and use tracing output for guidance but not as full truth."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "Moving the `KEY_PAIR_GEN.initialize(1024);` call to the run-time executed method `encryptDecrypt` is enough to solve this particular issue."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "Additional information on which classes are initialized and why can be obtained by passing in the `-H:+PrintClassInitialization` flag via `-Dquarkus.native.additional-build-args`."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/native-reference.adoc
#, no-wrap
msgid "Profile Runtime Behaviour"
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/native-reference.adoc
#, no-wrap
msgid "Single Thread"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"In this exercise, we profile the runtime behaviour of some Quarkus application that was compiled to a native executable to determine where the bottleneck is.\n"
"Assume that you’re in a scenario where profiling the pure Java version is not possible, maybe because the issue only occurs with the native version of the application."
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"Add a REST resource with the following code\n"
"(example courtesy of link:https://github.com/apangin/java-profiling-presentation/blob/master/src/demo1/StringBuilderTest.java[Andrei Pangin's Java Profiling presentation]):"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "Recompile the application, rebuild the binary and run it. Attempting a simple curl will never complete, as expected:"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"However, the question we’re trying to answer here is:\n"
"what would be the bottleneck of such code?\n"
"Is it appending the characters? Is it deleting it? Is it checking whether the thread is alive?"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"Since we're dealing with a linux native executable,\n"
"we can use tools like `perf` directly.\n"
"To use `perf`,\n"
"go to the root of the project and start the tools container created earlier as a privileged user:"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"Note that in order to use `perf` to profile the native executables in the guide,\n"
"the container needs to run as privileged, or with `--cap-add sys_admin`.\n"
"Please note that privileged containers are **NOT** recommended in production, so use this flag with caution!"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "Once the container is running, you need to ensure that the kernel is ready for the profiling exercises:"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"The kernel modifications above also apply to Linux virtual machines.\n"
"If running on a bare metal Linux machine,\n"
"tweaking only `perf_event_paranoid` is enough."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "Then, from inside the tools container we execute:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "While `perf record` is running, open another window and access the endpoint:"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"After a few seconds, halt the `perf record` process.\n"
"This will generate a `perf.data` file.\n"
"We could use `perf report` to inspect the perf data,\n"
"but you can often get a better picture showing that data as a flame graph.\n"
"To generate flame graphs, we will use\n"
"https://github.com/brendangregg/FlameGraph[FlameGraph GitHub repository],\n"
"which has already been installed inside the tools container."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "Next, generate a flame graph using the data captured via `perf record`:"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"The flame graph is an svg file that a web browser, such as Firefox, can easily display.\n"
"After the above two commands complete one can open `flamegraph.svg` in their browser:"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"We see a big majority of time spent in what is supposed to be our main,\n"
"but we see no trace of the `StringBuilderResource` class,\n"
"nor the `StringBuilder` class we're calling.\n"
"We should look at the symbol table of the binary:\n"
"can we find symbols for our class and `StringBuilder`?\n"
"We need those in order to get meaningful data.\n"
"From within the tools container, query the symbol table:"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"No output appears when querying the symbol table.\n"
"This is why we don't see any call graphs in the flame graphs.\n"
"This is a deliberate decision that native-image makes.\n"
"By default, it removes symbols from the binary."
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"To regain the symbols, we need to rebuild the binary instructing GraalVM not to delete the symbols.\n"
"On top of that, enable DWARF debug info so that the stack traces can be populated with that information.\n"
"From outside the tools container, execute:"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"Next, re-enter the tools container if you exited,\n"
"and inspect the native executable with `objdump`,\n"
"and see how the symbols are now present:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "You should see a long list of symbols that match that pattern."
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"Then, run the executable through perf,\n"
"*indicating that the call graph is dwarf*:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "Run the curl command once again, stop the binary, generate the flamegraphs and open it:"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"The flamegraph now shows where the bottleneck is.\n"
"It's when `StringBuilder.delete()` is called which calls `System.arraycopy()`.\n"
"The issue is that 1 million characters need to be shifted in very small increments:"
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/native-reference.adoc
#, no-wrap
msgid "Multi-Thread"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"Multi-threaded programs might require special attention when trying to understand their runtime behaviour.\n"
"To demonstrate this, add this `MulticastResource` code to your project\n"
"(example courtesy of link:https://github.com/apangin/java-profiling-presentation/blob/master/src/demo6/DatagramTest.java[Andrei Pangin's Java Profiling presentation]):"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "Build the native executable with debug info:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "From inside the tools container (as privileged user) run the native executable through `perf`:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "Invoke the endpoint to send the multicast packets:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "Make and open a flamegraph:"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"The flamegraph produced looks odd. Each thread is treated independently even though they all do the same work.\n"
"This makes it difficult to have a clear picture of the bottlenecks in the program."
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"This is happening because from a `perf` perspective, each thread is a different command.\n"
"We can see that if we inspect `perf report`:"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"This can be worked around by applying some modifications to the perf output,\n"
"in order to make all threads have the same name. E.g."
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"When you open the flamegraph, you will see all threads' work collapsed into a single area.\n"
"Then, you can clearly see that there's some locking that could affect performance."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/native-reference.adoc
#, no-wrap
msgid "Debugging Native Crashes"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"One of the drawbacks of using native executables is that they cannot be debugged using the standard Java debuggers,\n"
"instead we need to debug them using `gdb`, the GNU Project debugger.\n"
"To demonstrate how to do this,\n"
"we are going to generate a native Quarkus application that crashes due to a Segmentation Fault when accessing http://localhost:8080/crash.\n"
"To achieve this, add the following REST resource to the project:"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"This code will try to copy 256 bytes from address `0x0` to `0x80` resulting in a Segmentation Fault.\n"
"To verify this compile and run the example application:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "This will result in the following output:"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"The omitted output above contains clues to what caused the issue,\n"
"but in this exercise we are going to assume that no information was provided.\n"
"Let’s try to debug the segmentation fault using `gdb`.\n"
"To do that, go to the root of the project and enter the tools container:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "Then start the application in `gdb` and execute `run`."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "Next, try to access http://localhost:8080/crash:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "This will result in the following message in `gdb`:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "If we try to get more info about the backtrace that led to this crash we will see that there is not enough information available."
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"This is because we didn’t compile the Quarkus application with `-Dquarkus.native.debug.enabled`,\n"
"so `gdb` cannot find debugging symbols for our native executable,\n"
"as indicated by the \"_No debugging symbols found in ./target/debugging-native-1.0.0-SNAPSHOT-runner_\" message in the beginning of `gdb`."
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"Recompiling the Quarkus application with `-Dquarkus.native.debug.enabled` and rerunning it through `gdb` we are now able to get a backtrace making clear what caused the crash.\n"
"On top of that, add `-H:-OmitInlinedMethodDebugLineInfo` option to avoid inlined methods being omitted from the backtrace:"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"We already see that `gdb` is able to tell us which method caused the crash and where it’s located in the source code.\n"
"We can also get a backtrace of the call graph that led us to this state:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "Similarly, we can get a backtrace of the call graph of other threads."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "First, we can list the available threads with:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "select the thread we want to inspect, e.g. thread 1:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "and, finally, print the stack trace:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "Alternatively, we can list the backtraces of all threads with a single command:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "Note, however, that despite being able to get a backtrace we can still not list the source code at point with the `list` command."
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"This is because `gdb` is not aware of the location of the source files.\n"
"We are running the executable outside of the target directory.\n"
"To fix this we can either rerun `gdb` from the target directory or,\n"
"run `directory target/debugging-native-1.0.0-SNAPSHOT-native-image-source-jar/sources` e.g.:"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"We can now examine line `169` and get a first hint of what might be wrong\n"
"(in this case we see that it fails at the first read from src which contains the address `0x0000`),\n"
"or walk up the stack using `gdb`’s `up` command to see what part of our code led to this situation.\n"
"To learn more about using gdb to debug native executables see\n"
"https://github.com/oracle/graal/blob/master/docs/reference-manual/native-image/DebugInfo.md[here]."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/native-reference.adoc
#, no-wrap
msgid "Frequently Asked Questions"
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/native-reference.adoc
#, no-wrap
msgid "Why is the process of generating a native executable slow?"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"Native executable generation is a multi-step process.\n"
"The analysis and compile steps are the most expensive of all and hence the ones that dominate the time spent generating the native executable."
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"In the analysis phase, a static points-to analysis starts from the main method of the program to find out what is reachable.\n"
"As new classes are discovered, some of them will be initialized during this process depending on the configuration.\n"
"In the next step, the heap is snapshotted and checks are made to see which types need to be available at runtime.\n"
"The initialization and heap snapshotting can cause new types to be discovered, in which case the process is repeated.\n"
"The process stops when a fixed point is reached, that is when the reachable program grows no more."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "The compilation step is pretty straightforward, it simply compiles all the reachable code."
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"The time spent in analysis and compilation phases depends on how big the application is.\n"
"The bigger the application, the longer it takes to compile it.\n"
"However, there are certain features that can have an exponential effect.\n"
"For example, when registering types and methods for reflection access,\n"
"the analysis can’t easily see what’s behind those types or methods,\n"
"so it has to do more work to complete the analysis step."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/native-reference.adoc
#, no-wrap
msgid "Why is runtime performance of a native executable inferior compared to JVM mode?"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"As with most things in life there are some trade offs involved when choosing native compilation over JVM mode.\n"
"So depending on the application the runtime performance of a native application might be slower compared to JVM mode,\n"
"though that’s not always the case."
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"JVM execution of an application includes runtime optimization of the code that profits from profile information built up during execution.\n"
"That includes the opportunities to inline a lot more of the code,\n"
"locate hot code on direct paths (i.e. ensure better instruction cache locality)\n"
"and cut out a lot of the code on cold paths (on the JVM a lot of code does not get compiled until something tries to execute it -- it is replaced with a trap that causes deoptimization and recompilation).\n"
"Removal of cold paths provides many more optimization opportunities than are available for ahead of time compilation because it significantly reduces the branch complexity and combinatorial logic of the smaller amount of hot code that is compiled."
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"By contrast, native executable compilation has to cater for all possible execution paths when it compiles code offline since it does not know which are the hot or cold paths and cannot use the trick of planting a trap and recompiling if it is hit. For the same reason it cannot load the dice to ensure that code cache conflicts are minimized by co-locating hot paths adjacent.\n"
"Native executable generation is able to remove some code because of the closed world hypothesis but that is often not enough to make up for all the benefits that profiling and runtime deopt & recompile provides to the JVM JIT compiler."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "Note, however, that there is a price you pay for that potentially higher JVM speed, and that price is in increased resource usage (both CPU and memory) and startup time because:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "it takes some time before the JIT kicks in and fully optimizes the code."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "the JIT compiler consumes resources that could be utilized by the application."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "the JVM has to retain a lot more metadata and compiler/profiler data to support the better optimizations that it can offer."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "The reason for 1) is that code needs to be run interpreted for some time and, possibly, to be compiled several times before all potential optimizations are realized to ensure that:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "it’s worth compiling that code path, i.e. it’s being executed enough times, and that"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "we have enough profiling data to perform meaningful optimizations."
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"An implication of 1) is that for small, short-lived applications a native executable may well be a better bet.\n"
"Although the compiled code is not as well optimized it is available straight away."
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"The reason for 2) is that the JVM is essentially running the compiler at runtime in parallel with the application itself.\n"
"In the case of native executables the compiler is run ahead of time removing the need to run the compiler in parallel with the application."
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"There are several reasons for 3). The JVM does not have a closed world assumption.\n"
"So, it has to be able to recompile code if loading of new classes implies that it needs to revise optimistic assumptions made at compile time.\n"
"For example, if an interface has only one implementation it can make a call jump directly to that code.\n"
"However, in the case where a second implementation class is loaded the call site needs to be patched to test the type of the receiver instance and jump to the code that belongs to its class.\n"
"Supporting optimizations like this one requires keeping track of a lot more details of the class base than a native executable,\n"
"including recording the full class and interface hierarchy,\n"
"details of which methods override other methods, all method bytecode etc.\n"
"In a native executable most of the details of class structure and bytecode can be ignored at run time."
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"The JVM also has to cope with changes to the class base or execution profiles that result in a thread going down a previously cold path.\n"
"At that point the JVM has to jump out of the compiled code into the interpreter and recompile the code to cater for a new execution profile that includes the previously cold path.\n"
"That requires keeping runtime info that allow a compiled stack frame to be replaced with one or more interpreter frames.\n"
"It also requires runtime extensible profile counters to be allocated and updated to track what has or has not been executed."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/native-reference.adoc
#, no-wrap
msgid "Why are native executables “big”?"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "This can be attributed to a number of different reasons:"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"Native executables include not only the application code but also, library code, and JDK code.\n"
"As a result a more fair comparison would be to compare the native executable’s size with the size of the application,\n"
"plus the size of the libraries it uses, plus the size of the JDK.\n"
"Especially the JDK part is not negligible even in simple applications like HelloWorld.\n"
"To get a glance on what is being pulled in the image one can use `-H:+PrintUniverse` when building the native executable."
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"Some features are always included in a native executable even though they might never be actually used at run time.\n"
"An example of such a feature is garbage collection.\n"
"At compile time we can’t be sure whether an application will need to run garbage collection at run time,\n"
"so garbage collection is always included in native executables increasing their size even if not necessary.\n"
"Native executable generation relies on static code analysis to identify which code paths are reachable,\n"
"and static code analysis can be imprecise leading to more code getting into the image than what’s actually needed."
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"There is a https://github.com/oracle/graal/issues/287[GraalVM upstream issue]\n"
"with some interesting discussions about that topic."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/native-reference.adoc
#, no-wrap
msgid "What version of Mandrel was used to generate a binary?"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "One can see which Mandrel version was used to generate a binary by inspecting the binary as follows:"
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/native-reference.adoc
#, no-wrap
msgid "How do I enable GC logging in native executables?"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"Executing the native executable with `-XX:PrintFlags=` prints a list of flags that can be passed to native executables.\n"
"For various levels of GC logging one may use:"
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/native-reference.adoc
#, no-wrap
msgid "Can I get a heap dump of a native executable? e.g. if it runs out of memory"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"Unfortunately generating heap dumps in hprof format,\n"
"which can be opened by tools such as VisualVM or Eclipse MAT,\n"
"can only be achieved with\n"
"https://www.graalvm.org/reference-manual/native-image/NativeImageHeapdump[GraalVM Enterprise Edition].\n"
"Mandrel, which is based on the GraalVM Community Edition, does not have this capability."
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"Although Mandrel can generate debug symbols and these contain a fair amount of information about object layouts,\n"
"including what is a pointer field vs a primitive field, this information cannot be used as is to detect memory leaks or find dominator objects.\n"
"This is because it has no idea what constitutes a root pointer nor how to recursively trace pointers from those roots."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/native-reference.adoc
#, no-wrap
msgid "Can I build and run this examples outside of a container in Linux?"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"Yes you can.\n"
"In fact, debugging native executables on a Linux bare metal box offers the best possible experience.\n"
"In this kind of environments, root access is not needed except to install packages required to run some debug steps,\n"
"or to enable `perf` to gather events at the kernel."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "These are the packages you'll need on your Linux environment to run through the different debugging sections:"
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/native-reference.adoc
#, no-wrap
msgid "Generating flame graphs is slow, or produces errors, what can I do?"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"There are multiple ways in which a native executable produced by Mandrel can be profiled.\n"
"All the methods require you to pass in the `-H:-DeleteLocalSymbols` option."
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"The method shown in this reference guide generates a binary with DWARF debug information,\n"
"runs it via `perf record` and then uses `perf script` and flame graph tooling to generate the flamegraphs.\n"
"However, the `perf script` post-processing step done on this binary can appear to be slow or can show some DWARF errors."
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"An alternative method to generate flame graphs is to pass in `-H:+PreserveFramePointer` when generating the native executable instead of generating the DWARF debug information.\n"
"It instructs the binary to use an extra register for the frame pointer.\n"
"This enables `perf` to do stack walking to profile the runtime behaviour.\n"
"To generate the native executable using these flags, do the following:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "To get runtime profiling information out of the native executable, simply do:"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"The recommended method for generating runtime profiling information is using the debug information rather than generating a binary that preserves the frame pointer.\n"
"This is because adding debug information to the native executable build process has no negative runtime performance whereas preserving the frame pointer does."
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"DWARF debug info is generated in a separate file and can even be omitted in the default deployment and only be transferred and used on demand,\n"
"for profiling or debugging purposes.\n"
"Furthermore, the presence of debug info enables `perf` to show us the relevant source code lines as well,\n"
"hence it does not bloat the native executable itself.\n"
"To do that, simply call `perf report` with an extra parameter to show source code lines:"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"The performance penalty of preserving the frame pointer is due to using the extra register for stack walking,\n"
"particularly in `x86_64` compared to `aarch64` where there are less registers available.\n"
"Using this extra register reduces the number of registers that are available for other work,\n"
"which can lead to performance penalties."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/native-reference.adoc
#, no-wrap
msgid "I think I’ve found a bug in native-image, how can I debug it with the IDE?"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"Although it is possible to remote debug processes within containers,\n"
"it might be easier to step-by-step debug native-image by installing Mandrel locally and adding it to the path of the shell process."
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"Native executable generation is the result of two Java processes that are executed sequentially.\n"
"The first process is very short and its main job is to set things up for the second process.\n"
"The second process is the one that takes care of most of the work.\n"
"The steps to debug one process or the other vary slightly."
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"Let’s discuss first how to debug the second process,\n"
"which is the one you most likely to want to debug.\n"
"The starting point for the second process is the `com.oracle.svm.hosted.NativeImageGeneratorRunner` class.\n"
"To debug this process, simply add `--debug-attach=*:8000` as an additional build time argument:"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"The starting point for the first process is the `com.oracle.svm.driver.NativeImages` class.\n"
"In GraalVM CE distributions, this first process is a binary, so debugging it in the traditional way with a Java IDE is not possible.\n"
"However, Mandrel distributions (or locally built GraalVM CE instances) keep this as a normal Java process,\n"
"so you can remote debug this process by adding the `--vm.agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:8000` as an additional build argument, e.g."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/native-reference.adoc
#, no-wrap
msgid "Can I use JFR/JMC to debug or profile native binaries?"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"https://docs.oracle.com/javacomponents/jmc-5-4/jfr-runtime-guide/about.htm#JFRUH170[Java Flight Recorder (JFR)] and\n"
"https://www.oracle.com/java/technologies/jdk-mission-control.html[JDK Mission Control (JMC)]\n"
"can be used to profile native binaries since GraalVM CE 21.2.0.\n"
"However, JFR in GraalVM is currently significantly limited in capabilities compared to HotSpot.\n"
"The custom event API is fully supported, but many VM level features are unavailable.\n"
"They will be added in future releases. Current limitations are:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "Minimal VM level events"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "No old object sampling"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "No stacktrace tracing"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "No Streaming API for JDK 17"
msgstr ""

#: _versions/2.7/guides/native-reference.adoc
msgid ""
"To use JFR add the application property: `-Dquarkus.native.enable-vm-inspection=true`.\n"
"E.g."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "Once the image is compiled, enable and start JFR via runtime flags: `-XX:+FlightRecorder` and `-XX:StartFlightRecording`. For example:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/native-reference.adoc
msgid "For more details on using JFR, see https://www.graalvm.org/reference-manual/native-image/JFR[here]."
msgstr ""
