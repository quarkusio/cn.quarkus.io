# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-30 17:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.7/guides/rest-client-reactive.adoc
#, no-wrap
msgid "Using the REST Client Reactive"
msgstr ""

#: _versions/2.7/guides/rest-client-reactive.adoc
msgid ""
"This guide explains how to use the REST Client Reactive in order to interact with REST APIs.\n"
"REST Client Reactive is a non-blocking counterpart of the RESTEasy REST Client."
msgstr ""

#: _versions/2.7/guides/rest-client-reactive.adoc
msgid ""
"If your application uses a client and exposes REST endpoints, please use xref:resteasy-reactive.adoc[RESTEasy Reactive]\n"
"for the server part."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/rest-client-reactive.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: _versions/2.7/guides/rest-client-reactive.adoc
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#: _versions/2.7/guides/rest-client-reactive.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "The solution is located in the `rest-client-reactive-quickstart` {quickstarts-tree-url}/rest-client-reactive-quickstart[directory]."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/rest-client-reactive.adoc
#, no-wrap
msgid "Creating the Maven project"
msgstr "创建Maven项目"

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "This command generates the Maven project with a REST endpoint and imports:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "the `resteasy-reactive-jackson` extension for the REST server support. Use `resteasy-reactive` instead if you do not wish to use Jackson;"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "the `rest-client-reactive-jackson` extension for the REST client support. Use `rest-client-reactive` instead if you do not wish to use Jackson"
msgstr ""

#: _versions/2.7/guides/rest-client-reactive.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `rest-client-reactive-jackson` extension\n"
"to your project by running the following command in your project base directory:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "This will add the following to your build file:"
msgstr "这会将以下内容添加到你的构建文件中:"

#. type: Block title
#: _versions/2.7/guides/rest-client-reactive.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/2.7/guides/rest-client-reactive.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: _versions/2.7/guides/rest-client-reactive.adoc
#, no-wrap
msgid "Setting up the model"
msgstr ""

#: _versions/2.7/guides/rest-client-reactive.adoc
msgid ""
"In this guide we will be demonstrating how to consume part of the REST API supplied by the link:https://stage.code.quarkus.io[stage.code.quarkus.io] service.\n"
"Our first order of business is to set up the model we will be using, in the form of a `Extension` POJO."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "Create a `src/main/java/org/acme/rest/client/Extension.java` file and set the following content:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "The model above is only a subset of the fields provided by the service, but it suffices for the purposes of this guide."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/rest-client-reactive.adoc
#, no-wrap
msgid "Create the interface"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "Using the REST Client Reactive is as simple as creating an interface using the proper JAX-RS and MicroProfile annotations. In our case the interface should be created at `src/main/java/org/acme/rest/client/ExtensionsService.java` and have the following content:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "The `getById` method gives our code the ability to get an extension by id from the Code Quarkus API. The client will handle all the networking and marshalling leaving our code clean of such technical details."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "The purpose of the annotations in the code above is the following:"
msgstr ""

#: _versions/2.7/guides/rest-client-reactive.adoc
msgid ""
"`@RegisterRestClient` allows Quarkus to know that this interface is meant to be available for\n"
"CDI injection as a REST Client"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "`@Path`, `@GET` and `@PathParam` are the standard JAX-RS annotations used to define how to access the service"
msgstr ""

#: _versions/2.7/guides/rest-client-reactive.adoc
msgid ""
"When the `quarkus-rest-client-reactive-jackson` extension is installed, Quarkus will use the `application/json` media type\n"
"by default for most return values, unless the media type is explicitly set via `@Produces` or `@Consumes` annotations."
msgstr ""

#: _versions/2.7/guides/rest-client-reactive.adoc
msgid ""
"If you don't rely on the JSON default, it is heavily recommended to annotate your endpoints with the `@Produces` and `@Consumes` annotations to define precisely the expected content-types.\n"
"It will allow to narrow down the number of JAX-RS providers (which can be seen as converters) included in the native executable."
msgstr ""

#: _versions/2.7/guides/rest-client-reactive.adoc
msgid ""
"The `getById` method above is a blocking call. It should not be invoked on the event loop.\n"
"The <<async-support>> section describes how to make non-blocking calls."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/rest-client-reactive.adoc
#, no-wrap
msgid "Path Parameters"
msgstr ""

#: _versions/2.7/guides/rest-client-reactive.adoc
msgid ""
"If the GET request requires path parameters you can leverage the `@PathParam(\"parameter-name\")` annotation instead of\n"
"(or in addition to) the `@QueryParam`. Path and query parameters can be combined, as required, as illustrated in the example below."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/rest-client-reactive.adoc
#, no-wrap
msgid "Create the configuration"
msgstr "创建配置"

#: _versions/2.7/guides/rest-client-reactive.adoc
msgid ""
"In order to determine the base URL to which REST calls will be made, the REST Client uses configuration from `application.properties`.\n"
"The name of the property needs to follow a certain convention which is best displayed in the following code:"
msgstr ""

#: _versions/2.7/guides/rest-client-reactive.adoc
msgid ""
"Having this configuration means that all requests performed using `org.acme.rest.client.ExtensionsService` will use `https://stage.code.quarkus.io/api` as the base URL.\n"
"Using the configuration above, calling the `getById` method of `ExtensionsService` with a value of `io.quarkus:quarkus-rest-client-reactive` would result in an HTTP GET request being made to `https://stage.code.quarkus.io/api/extensions?id=io.quarkus:quarkus-rest-client-reactive`."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "Note that `org.acme.rest.client.ExtensionsService` _must_ match the fully qualified name of the `ExtensionsService` interface we created in the previous section."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "To facilitate the configuration, you can use the `@RegisterRestClient` `configKey` property that allows to use different configuration root than the fully qualified name of your interface."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/rest-client-reactive.adoc
#, no-wrap
msgid "Create the JAX-RS resource"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "Create the `src/main/java/org/acme/rest/client/ExtensionsResource.java` file with the following content:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "There are two interesting parts in this listing:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "the client stub is injected with the `@RestClient` annotation instead of the usual CDI `@Inject`"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "the call we are making with the client is blocking, hence we need the `@Blocking` annotation on the REST endpoint"
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/rest-client-reactive.adoc
#, no-wrap
msgid "Programmatic client creation with RestClientBuilder"
msgstr ""

#: _versions/2.7/guides/rest-client-reactive.adoc
msgid ""
"Instead of annotating the client with `@RegisterRestClient`, and injecting\n"
"a client with `@RestClient`, you can also create REST Client programmatically.\n"
"You do that with `RestClientBuilder`."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "With this approach the client interface could look as follows:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "And the service as follows:"
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/rest-client-reactive.adoc
#, no-wrap
msgid "Update the test"
msgstr ""

#: _versions/2.7/guides/rest-client-reactive.adoc
msgid ""
"Next, we need to update the functional test to reflect the changes made to the endpoint.\n"
"Edit the `src/test/java/org/acme/rest/client/ExtensionsResourceTest.java` file and change the content of the test to:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "The code above uses link:http://rest-assured.io/[REST Assured]'s link:https://github.com/rest-assured/rest-assured/wiki/GettingStarted#jsonpath[json-path] capabilities."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/rest-client-reactive.adoc
#, no-wrap
msgid "Async Support"
msgstr ""

#: _versions/2.7/guides/rest-client-reactive.adoc
msgid ""
"To get the full power of the reactive nature of the client, you can use the non-blocking flavor of REST Client Reactive extension,\n"
"which comes with support for `CompletionStage` and `Uni`.\n"
"Let's see it in action by adding a `getByIdAsync` method in our `ExtensionsService` REST interface. The code should look like:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "Open the `src/main/java/org/acme/rest/client/ExtensionsResource.java` file and update it with the following content:"
msgstr ""

#: _versions/2.7/guides/rest-client-reactive.adoc
msgid ""
"Please note that since the invocation is now non-blocking, we don't need the `@Blocking` annotation anymore on the endpoint.\n"
"This means that the `idAsync` method will be invoked on the event loop, i.e. will not get offloaded to a worker pool thread\n"
"and thus reducing hardware resource utilization."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "To test asynchronous methods, add the test method below in `ExtensionsResourceTest`:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "The `Uni` version is very similar:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "The `ExtensionsResource` becomes:"
msgstr ""

#. type: Block title
#: _versions/2.7/guides/rest-client-reactive.adoc
#, no-wrap
msgid "Mutiny"
msgstr ""

#: _versions/2.7/guides/rest-client-reactive.adoc
msgid ""
"The previous snippet uses Mutiny reactive types.\n"
"If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr ""

#: _versions/2.7/guides/rest-client-reactive.adoc
msgid ""
"When returning a `Uni`, every _subscription_ invokes the remote service.\n"
"It means you can re-send the request by re-subscribing on the `Uni`, or use a `retry` as follows:"
msgstr ""

#: _versions/2.7/guides/rest-client-reactive.adoc
msgid ""
"If you use a `CompletionStage`, you would need to call the service's method to retry.\n"
"This difference comes from the laziness aspect of Mutiny and its subscription protocol.\n"
"More details about this can be found in https://smallrye.io/smallrye-mutiny/#_uni_and_multi[the Mutiny documentation]."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/rest-client-reactive.adoc
#, no-wrap
msgid "Custom headers support"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "There are a few ways in which you can specify custom headers for your REST calls:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "by registering a `ClientHeadersFactory` or a `ReactiveClientHeadersFactory` with the `@RegisterClientHeaders` annotation"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "by specifying the value of the header with `@ClientHeaderParam`"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "by specifying the value of the header by `@HeaderParam`"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "The code below demonstrates how to use each of these techniques:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "There can be only one `ClientHeadersFactory` per class. With it, you can not only add custom headers, but you can also transform existing ones. See the `RequestUUIDHeaderFactory` class below for an example of the factory."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "`@ClientHeaderParam` can be used on the client interface and on methods. It can specify a constant header value..."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "... and a name of a method that should compute the value of the header. It can either be a static method or a default method in this interface"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "... as well as a value from your application's configuration"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "... or as a normal JAX-RS `@HeaderParam` annotated argument"
msgstr ""

#: _versions/2.7/guides/rest-client-reactive.adoc
msgid ""
"When using Kotlin, if default methods are going to be leveraged, then the Kotlin compiler needs to be configured to use Java's default interface capabilities.\n"
"See link:https://kotlinlang.org/docs/java-to-kotlin-interop.html#default-methods-in-interfaces[this] for more details."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "A `ClientHeadersFactory` can look as follows:"
msgstr ""

#: _versions/2.7/guides/rest-client-reactive.adoc
msgid ""
"As you see in the example above, you can make your `ClientHeadersFactory` implementation a CDI bean by\n"
"annotating it with a scope-defining annotation, such as `@Singleton`, `@ApplicationScoped`, etc."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "To specify a value for `${header.value}`, simply put the following in your `application.properties`:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "Also, there is a reactive flavor of `ClientHeadersFactory` that allows doing blocking operations. For example:"
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/rest-client-reactive.adoc
#, no-wrap
msgid "Default header factory"
msgstr ""

#: _versions/2.7/guides/rest-client-reactive.adoc
msgid ""
"The `@RegisterClientHeaders` annotation can also be used without any custom factory specified. In that case the `DefaultClientHeadersFactoryImpl` factory will be used.\n"
"If you make a REST client call from a REST resource, this factory will propagate all the headers listed in `org.eclipse.microprofile.rest.client.propagateHeaders` configuration property from the resource request to the client request. Individual header names are comma-separated."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/rest-client-reactive.adoc
#, no-wrap
msgid "Exception handling"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "The MicroProfile REST Client specification introduces the `org.eclipse.microprofile.rest.client.ext.ResponseExceptionMapper` whose purpose is to convert an HTTP response to an exception."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "A simple example of implementing such a `ResponseExceptionMapper` for the `ExtensionsService` discussed above, could be:"
msgstr ""

#: _versions/2.7/guides/rest-client-reactive.adoc
msgid ""
"`ResponseExceptionMapper` also defines the `getPriority` method which is used in order to determine the priority with which `ResponseExceptionMapper` implementations will be called (implementations with a lower value for `getPriority` will be invoked first).\n"
"If `toThrowable` returns an exception, then that exception will be thrown. If `null` is returned, the next implementation of `ResponseExceptionMapper` in the chain will be called (if there is any)."
msgstr ""

#: _versions/2.7/guides/rest-client-reactive.adoc
msgid ""
"The class as written above, would not be automatically be used by any REST Client. To make it available to every REST Client of the application, the class needs to be annotated with `@Provider` (as long as `quarkus.rest-client-reactive.provider-autodiscovery` is not set to `false`).\n"
"Alternatively, if the exception handling class should only apply to specific REST Client interfaces, you can either annotate the interfaces with `@RegisterProvider(MyResponseExceptionMapper.class)`, or register it using configuration using the `providers` property of the proper `quarkus.rest-client` configuration group."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/rest-client-reactive.adoc
#, no-wrap
msgid "Using @ClientExceptionMapper"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "A simpler way to convert HTTP response codes of 400 or above is to use the `@ClientExceptionMapper` annotation."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "For the `ExtensionsService` REST Client interface defined above, an example use of `@ClientExceptionMapper` would be:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "Naturally this handling is per REST Client. `@ClientExceptionMapper` uses the default priority if the `priority` attribute is not set and the normal rules of invoking all handlers in turn apply."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/rest-client-reactive.adoc
#, no-wrap
msgid "Multipart Form support"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "REST Client Reactive support multipart messages."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/rest-client-reactive.adoc
#, no-wrap
msgid "Sending Multipart messages"
msgstr ""

#: _versions/2.7/guides/rest-client-reactive.adoc
msgid ""
"REST Client Reactive allows sending data as multipart forms. This way you can for example\n"
"send files efficiently."
msgstr ""

#: _versions/2.7/guides/rest-client-reactive.adoc
msgid ""
"To send data as a multipart form, you need to create a class that would encapsulate all the fields\n"
"to be sent, e.g."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "The method that sends a form needs to specify multipart form data as the consumed media type, e.g."
msgstr ""

#: _versions/2.7/guides/rest-client-reactive.adoc
msgid ""
"Fields specified as `File`, `Path`, `byte[]` or `Buffer` are sent as files; as binary files for\n"
"`@PartType(MediaType.APPLICATION_OCTET_STREAM)`, as text files for other content types.\n"
"Other fields are sent as form attributes."
msgstr ""

#: _versions/2.7/guides/rest-client-reactive.adoc
msgid ""
"There are a few modes in which the form data can be encoded. By default,\n"
"Rest Client Reactive uses RFC1738.\n"
"You can override it by specifying the mode either on the client level,\n"
"by setting `io.quarkus.rest.client.multipart-post-encoder-mode` RestBuilder property\n"
"to the selected value of `HttpPostRequestEncoder.EncoderMode` or\n"
"by specifying `quarkus.rest-client.multipart-post-encoder-mode` in your\n"
"`application.properties`. Please note that the latter works only for\n"
"clients created with the `@RegisterRestClient` annotation.\n"
"All the available modes are described in the link:https://netty.io/4.1/api/io/netty/handler/codec/http/multipart/HttpPostRequestEncoder.EncoderMode.html[Netty documentation]"
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/rest-client-reactive.adoc
#, no-wrap
msgid "Receiving Multipart Messages"
msgstr ""

#: _versions/2.7/guides/rest-client-reactive.adoc
msgid ""
"REST Client Reactive also supports receiving multipart messages.\n"
"As with sending, to parse a multipart response, you need to create a class that describes the response data, e.g."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "uses the shorthand `@RestForm` annotation to make a field as a part of a multipart form"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "the standard `@FormParam` can also be used. It allows to override the name of the multipart part."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "Then, create an interface method that corresponds to the call and make it return the `FormDto`:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "At the moment, multipart response support is subject to the following limitations:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "files sent in multipart responses can only be parsed to `File`, `Path` and `FileDownload`"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "each field of the response type has to be annotated with `@PartType` - fields without this annotation are ignored"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "REST Client Reactive needs to know the classes used as multipart return types upfront. If you have an interface method that produces `multipart/form-data`, the return type will be discovered automatically. However, if you intend to use the `ClientBuilder` API to parse a response as multipart, you need to annotate your DTO class with `@MultipartForm`."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "The files you download are not automatically removed and can take up a lot of disk space. Consider removing the files when you are done working with them."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/rest-client-reactive.adoc
#, no-wrap
msgid "Proxy support"
msgstr ""

#: _versions/2.7/guides/rest-client-reactive.adoc
msgid ""
"REST Client Reactive supports sending requests through a proxy.\n"
"It honors the JVM settings for it but also allows to specify both:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "global client proxy settings, with `quarkus.rest-client.proxy-address`, `quarkus.rest-client.proxy-user`, `quarkus.rest-client.proxy-password`, `quarkus.rest-client.non-proxy-hosts`"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "per-client proxy settings, with `quarkus.rest-client.<my-client>.proxy-address`, etc. These are applied only to clients injected with CDI, that is the ones created with `@RegisterRestClient`"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "If `proxy-address` is set on the client level, the client uses its specific proxy settings. No proxy settings are propagated from the global configuration or JVM properties."
msgstr ""

#: _versions/2.7/guides/rest-client-reactive.adoc
msgid ""
"If `proxy-address` is not set for the client but is set on the global level, the client uses the global settings.\n"
"Otherwise, the client uses the JVM settings."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "An example configuration for setting proxy:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "MicroProfile REST Client specification does not allow setting proxy credentials. In order to specify proxy user and proxy password programmatically, you need to cast your `RestClientBuilder` to `RestClientBuilderImpl`."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/rest-client-reactive.adoc
#, no-wrap
msgid "Package and run the application"
msgstr "打包并运行该应用程序"

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "Run the application with:"
msgstr "使用以下命令运行该应用程序:"

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "Open your browser to http://localhost:8080/extension/id/io.quarkus:quarkus-rest-client-reactive."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "You should see a JSON object containing some basic information about this extension."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "As usual, the application can be packaged using:"
msgstr "像往常一样，该应用程序能够使用以下方式进行打包:"

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "And executed with `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "You can also generate the native executable with:"
msgstr "你也可以通过以下命令生成本地可执行文件:"

#. type: Title ==
#: _versions/2.7/guides/rest-client-reactive.adoc
#, no-wrap
msgid "Logging traffic"
msgstr ""

#: _versions/2.7/guides/rest-client-reactive.adoc
msgid ""
"REST Client Reactive can log the requests it sends and the responses it receives.\n"
"To enable logging, add the `quarkus.rest-client.logging.scope` property to your `application.properties` and set it to:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "`request-response` to log the request and response contents, or"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "`all` to also enable low level logging of the underlying libraries."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "As HTTP messages can have large bodies, we limit the amount of body characters logged. The default limit is `100`, you can change it by specifying `quarkus.rest-client.logging.body-limit`."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "REST Client Reactive is logging the traffic with level DEBUG and does not alter logger properties. You may need to adjust your logger configuration to use this feature."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "An example logging configuration:"
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/rest-client-reactive.adoc
#, no-wrap
msgid "Mocking the client for tests"
msgstr ""

#: _versions/2.7/guides/rest-client-reactive.adoc
msgid ""
"If you use a client injected with the `@RestClient` annotation, you can easily mock it for tests.\n"
"You can do it with Mockito's `@InjectMock` or with `QuarkusMock`."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "This section shows how to replace your client with a mock. If you would like to get a more in-depth understanding of how mocking works in Quarkus, see the blog post on https://quarkus.io/blog/mocking/[Mocking CDI beans]."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "Mocking does not work when using `@NativeImageTest` or `@QuarkusIntegrationTest`."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "Let's assume you have the following client:"
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/rest-client-reactive.adoc
#, no-wrap
msgid "Mocking with InjectMock"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "The simplest approach to mock a client for tests is to use Mockito and `@InjectMock`."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "First, add the following dependency to your application:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "Then, in your test you can simply use `@InjectMock` to create and inject a mock:"
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/rest-client-reactive.adoc
#, no-wrap
msgid "Mocking with QuarkusMock"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "If Mockito doesn't meet your needs, you can create a mock programmatically using `QuarkusMock`, e.g.:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "here we use a manually created implementation of the client interface to replace the actual Client"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "note that `RestClient.LITERAL` has to be passed as the last argument of the `installMockForType` method"
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/rest-client-reactive.adoc
#, no-wrap
msgid "Using a Mock HTTP Server for tests"
msgstr ""

#: _versions/2.7/guides/rest-client-reactive.adoc
msgid ""
"In some cases you may want to mock the remote endpoint - the HTTP server - instead of mocking the client itself.\n"
"This may be especially useful for native tests, or for programmatically created clients."
msgstr ""

#: _versions/2.7/guides/rest-client-reactive.adoc
msgid ""
"You can easily mock an HTTP Server with Wiremock.\n"
"The xref:rest-client.adoc#using-a-mock-http-server-for-tests[Wiremock section of the Quarkus - Using the REST Client]\n"
"describes how to set it up in detail."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/rest-client-reactive.adoc
#, no-wrap
msgid "Known limitations"
msgstr ""

#: _versions/2.7/guides/rest-client-reactive.adoc
msgid ""
"While the REST Client Reactive extension aims to be a drop-in replacement for the REST Client extension, there are some differences\n"
"and limitations:"
msgstr ""

#: _versions/2.7/guides/rest-client-reactive.adoc
msgid ""
"the default scope of the client for the new extension is `@ApplicationScoped` while the `quarkus-rest-client` defaults to `@Dependent`\n"
"To change this behavior, set the `quarkus.rest-client-reactive.scope` property to the fully qualified scope name."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "it is not possible to set `HostnameVerifier` or `SSLContext`"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "a few things that don't make sense for a non-blocking implementations, such as setting the `ExecutorService`, don't work"
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/rest-client-reactive.adoc
#, no-wrap
msgid "Further reading"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/rest-client-reactive.adoc
msgid "link:https://download.eclipse.org/microprofile/microprofile-rest-client-2.0/microprofile-rest-client-spec-2.0.html[MicroProfile Rest Client specification]"
msgstr ""
