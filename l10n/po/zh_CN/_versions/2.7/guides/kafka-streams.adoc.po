# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.7/guides/kafka-streams.adoc
#, no-wrap
msgid "Using Apache Kafka Streams"
msgstr "使用Apache Kafka Streams"

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "This guide demonstrates how your Quarkus application can utilize the Apache Kafka Streams API to implement stream processing applications based on Apache Kafka."
msgstr "本指南展示了你的Quarkus应用如何利用Apache Kafka Streams API来实现基于Apache Kafka的流处理应用。"

#. type: Title ==
#: _versions/2.7/guides/kafka-streams.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "It is recommended, that you have read the {quickstarts-tree-url}/kafka-quickstart[Kafka quickstart] before."
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"The Quarkus extension for Kafka Streams allows for very fast turnaround times during development by supporting the Quarkus Dev Mode (e.g. via `./mvnw compile quarkus:dev`).\n"
"After changing the code of your Kafka Streams topology, the application will automatically be reloaded when the next input message arrives."
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"A recommended development set-up is to have some producer which creates test messages on the processed topic(s) in fixed intervals, e.g. every second and observe the streaming application's output topic(s) using a tool such as `kafkacat`.\n"
"Using the dev mode, you'll instantly see messages on the output topic(s) as produced by the latest version of your streaming application when saving."
msgstr ""

#. type: delimited block =
#: _versions/2.7/guides/kafka-streams.adoc
msgid "For the best development experience, we recommend applying the following configuration settings to your Kafka broker:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "Also specify the following settings in your Quarkus `application.properties`:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "Together, these settings will ensure that the application can very quickly reconnect to the broker after being restarted in dev mode."
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: _versions/2.7/guides/kafka-streams.adoc
#, no-wrap
msgid "Architecture"
msgstr "应用结构"

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"In this guide, we are going to generate (random) temperature values in one component (named `generator`).\n"
"These values are associated to given weather stations and are written in a Kafka topic (`temperature-values`).\n"
"Another topic (`weather-stations`) contains just the main data about the weather stations themselves (id and name)."
msgstr ""

#. type: delimited block =
#: _versions/2.7/guides/kafka-streams.adoc
msgid "A second component (`aggregator`) reads from the two Kafka topics and processes them in a streaming pipeline:"
msgstr ""

#. type: delimited block =
#: _versions/2.7/guides/kafka-streams.adoc
msgid "the two topics are joined on weather station id"
msgstr ""

#. type: delimited block =
#: _versions/2.7/guides/kafka-streams.adoc
msgid "per weather station the min, max and average temperature is determined"
msgstr ""

#. type: delimited block =
#: _versions/2.7/guides/kafka-streams.adoc
msgid "this aggregated data is written out to a third topic (`temperatures-aggregated`)"
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"The data can be examined by inspecting the output topic.\n"
"By exposing a Kafka Streams https://kafka.apache.org/22/documentation/streams/developer-guide/interactive-queries.html[interactive query],\n"
"the latest result for each weather station can alternatively be obtained via a simple REST query."
msgstr ""

#. type: delimited block =
#: _versions/2.7/guides/kafka-streams.adoc
msgid "The overall architecture looks like so:"
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/kafka-streams.adoc
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#. type: delimited block =
#: _versions/2.7/guides/kafka-streams.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: delimited block =
#: _versions/2.7/guides/kafka-streams.adoc
msgid "The solution is located in the `kafka-streams-quickstart` {quickstarts-tree-url}/kafka-streams-quickstart[directory]."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/kafka-streams.adoc
#, no-wrap
msgid "Creating the Producer Maven Project"
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"First, we need a new project with the temperature value producer.\n"
"Create a new project with the following command:"
msgstr ""

#. type: delimited block =
#: _versions/2.7/guides/kafka-streams.adoc
msgid "This command generates a Maven project, importing the Reactive Messaging and Kafka connector extensions."
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `smallrye-reactive-messaging-kafka` extension\n"
"to your project by running the following command in your project base directory:"
msgstr ""

#. type: delimited block =
#: _versions/2.7/guides/kafka-streams.adoc
msgid "This will add the following to your build file:"
msgstr "这会将以下内容添加到你的构建文件中:"

#. type: Block title
#: _versions/2.7/guides/kafka-streams.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/2.7/guides/kafka-streams.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ===
#: _versions/2.7/guides/kafka-streams.adoc
#, no-wrap
msgid "The Temperature Value Producer"
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"Create the `producer/src/main/java/org/acme/kafka/streams/producer/generator/ValuesGenerator.java` file,\n"
"with the following content:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "Instruct Reactive Messaging to dispatch the items from the returned `Multi` to `temperature-values`."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "The method returns a Mutiny _stream_ (`Multi`) emitting a random temperature value every 0.5 seconds."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "Instruct Reactive Messaging to dispatch the items from the returned `Multi` (static list of weather stations) to `weather-stations`."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "The two methods each return a _reactive stream_ whose items are sent to the streams named `temperature-values` and `weather-stations`, respectively."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/kafka-streams.adoc
#, no-wrap
msgid "Topic Configuration"
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"The two channels are mapped to Kafka topics using the Quarkus configuration file `application.properties`.\n"
"For that, add the following to the file `producer/src/main/resources/application.properties`:"
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"This configures the Kafka bootstrap server, the two topics and the corresponding (de-)serializers.\n"
"More details about the different configuration options are available on the https://kafka.apache.org/documentation/#producerconfigs[Producer configuration] and https://kafka.apache.org/documentation/#consumerconfigs[Consumer configuration] section from the Kafka documentation."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/kafka-streams.adoc
#, no-wrap
msgid "Creating the Aggregator Maven Project"
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"With the producer application in place, it's time to implement the actual aggregator application,\n"
"which will run the Kafka Streams pipeline.\n"
"Create another project like so:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "This creates the `aggregator` project with the Quarkus extension for Kafka Streams and with RESTEasy support for Jackson."
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `kafka-streams` extension\n"
"to your project by running the following command in your project base directory:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "This will add the following to your `pom.xml`:"
msgstr "这将在你的 `pom.xml` 中添加以下内容："

#. type: Title ===
#: _versions/2.7/guides/kafka-streams.adoc
#, no-wrap
msgid "The Pipeline Implementation"
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"Let's begin the implementation of the stream processing application by creating\n"
"a few value objects for representing temperature measurements, weather stations and for keeping track of aggregated values."
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"First, create the file `aggregator/src/main/java/org/acme/kafka/streams/aggregator/model/WeatherStation.java`,\n"
"representing a weather station, with the following content:"
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid "The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation. More details about the `@RegisterForReflection` annotation can be found on  the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"Then the file `aggregator/src/main/java/org/acme/kafka/streams/aggregator/model/TemperatureMeasurement.java`,\n"
"representing temperature measurements for a given station:"
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"And finally `aggregator/src/main/java/org/acme/kafka/streams/aggregator/model/Aggregation.java`,\n"
"which will be used to keep track of the aggregated values while the events are processed in the streaming pipeline:"
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"Next, let's create the actual streaming query implementation itself in the `aggregator/src/main/java/org/acme/kafka/streams/aggregator/streams/TopologyProducer.java` file.\n"
"All we need to do for that is to declare a CDI producer method which returns the Kafka Streams `Topology`;\n"
"the Quarkus extension will take care of configuring, starting and stopping the actual Kafka Streams engine."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "The `weather-stations` table is read into a `GlobalKTable`, representing the current state of each weather station"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "The `temperature-values` topic is read into a `KStream`; whenever a new message arrives to this topic, the pipeline will be processed for this measurement"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "The message from the `temperature-values` topic is joined with the corresponding weather station, using the topic's key (weather station id); the join result contains the data from the measurement and associated weather station message"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "The values are grouped by message key (the weather station id)"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "Within each group, all the measurements of that station are aggregated, by keeping track of minimum and maximum values and calculating the average value of all measurements of that station (see the `Aggregation` type)"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "The results of the pipeline are written out to the `temperatures-aggregated` topic"
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"The Kafka Streams extension is configured via the Quarkus configuration file `application.properties`.\n"
"Create the file `aggregator/src/main/resources/application.properties` with the following contents:"
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"The options with the `quarkus.kafka-streams` prefix can be changed dynamically at application startup,\n"
"e.g. via environment variables or system properties.\n"
"`bootstrap-servers` and `application-server` are mapped to the Kafka Streams properties `bootstrap.servers` and `application.server`, respectively.\n"
"`topics` is specific to Quarkus: the application will wait for all the given topics to exist before launching the Kafka Streams engine.\n"
"This is to done to gracefully await the creation of topics that don't yet exist at application startup time."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "Alternatively, you can use `kafka.bootstrap.servers` instead of `quarkus.kafka-streams.bootstrap-servers` as you did in the _generator_ project above."
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"All the properties within the `kafka-streams` namespace are passed through as-is to the Kafka Streams engine.\n"
"Changing their values requires a rebuild of the application."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/kafka-streams.adoc
#, no-wrap
msgid "Building and Running the Applications"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "We now can build the `producer` and `aggregator` applications:"
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"Instead of running them directly on the host machine using the Quarkus dev mode,\n"
"we're going to package them into container images and launch them via Docker Compose.\n"
"This is done in order to demonstrate scaling the `aggregator` aggregation to multiple nodes later on."
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"The `Dockerfile` created by Quarkus by default needs one adjustment for the `aggregator` application in order to run the Kafka Streams pipeline.\n"
"To do so, edit the file `aggregator/src/main/docker/Dockerfile.jvm` and replace the line `FROM fabric8/java-alpine-openjdk8-jre` with `FROM fabric8/java-centos-openjdk8-jdk`."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "Next create a Docker Compose file (`docker-compose.yaml`) for spinning up the two applications as well as Apache Kafka and ZooKeeper like so:"
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"To launch all the containers, building the `producer` and `aggregator` container images,\n"
"run `docker-compose up --build`."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "Instead of `QUARKUS_KAFKA_STREAMS_BOOTSTRAP_SERVERS`, you can use `KAFKA_BOOTSTRAP_SERVERS`."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "You should see log statements from the `producer` application about messages being sent to the \"temperature-values\" topic."
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"Now run an instance of the _debezium/tooling_ image, attaching to the same network all the other containers run in.\n"
"This image provides several useful tools such as _kafkacat_ and _httpie_:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "Within the tooling container, run _kafkacat_ to examine the results of the streaming pipeline:"
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"You should see new values arrive as the producer continues to emit temperature measurements,\n"
"each value on the outbound topic showing the minimum, maximum and average temperature values of the represented weather station."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/kafka-streams.adoc
#, no-wrap
msgid "Interactive Queries"
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"Subscribing to the `temperatures-aggregated` topic is a great way to react to any new temperature values.\n"
"It's a bit wasteful though if you're just interested in the latest aggregated value for a given weather station.\n"
"This is where Kafka Streams interactive queries shine:\n"
"they let you directly query the underlying state store of the pipeline for the value associated to a given key.\n"
"By exposing a simple REST endpoint which queries the state store,\n"
"the latest aggregation result can be retrieved without having to subscribe to any Kafka topic."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "Let's begin by creating a new class `InteractiveQueries` in the file `aggregator/src/main/java/org/acme/kafka/streams/aggregator/streams/InteractiveQueries.java`:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "one more method to the `KafkaStreamsPipeline` class which obtains the current state for a given key:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "A value for the given station id was found, so that value will be returned"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "No value was found, either because a non-existing station was queried or no measurement exists yet for the given station"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "Also create the method's return type in the file `aggregator/src/main/java/org/acme/kafka/streams/aggregator/streams/GetWeatherStationDataResult.java`:"
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"Also create `aggregator/src/main/java/org/acme/kafka/streams/aggregator/model/WeatherStationData.java`,\n"
"which represents the actual aggregation result for a weather station:"
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"We now can add a simple REST endpoint (`aggregator/src/main/java/org/acme/kafka/streams/aggregator/rest/WeatherStationEndpoint.java`),\n"
"which invokes `getWeatherStationData()` and returns the data to the client:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "Depending on whether a value was obtained, either return that value or a 404 response"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "With this code in place, it's time to rebuild the application and the `aggregator` service in Docker Compose:"
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"This will rebuild the `aggregator` container and restart its service.\n"
"Once that's done, you can invoke the service's REST API to obtain the temperature data for one of the existing stations.\n"
"To do so, you can use `httpie` in the tooling container launched before:"
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/kafka-streams.adoc
#, no-wrap
msgid "Scaling Out"
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"A very interesting trait of Kafka Streams applications is that they can be scaled out,\n"
"i.e. the load and state can be distributed amongst multiple application instances running the same pipeline.\n"
"Each node will then contain a subset of the aggregation results,\n"
"but Kafka Streams provides you with https://kafka.apache.org/22/documentation/streams/developer-guide/interactive-queries.html#querying-remote-state-stores-for-the-entire-app[an API] to obtain the information which node is hosting a given key.\n"
"The application can then either fetch the data directly from the other instance, or simply point the client to the location of that other node."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "Launching multiple instances of the `aggregator` application will make look the overall architecture like so:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "The `InteractiveQueries` class must be adjusted slightly for this distributed architecture:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "The streams metadata for the given weather station id is obtained"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "The given key (weather station id) is maintained by the local application node, i.e. it can answer the query itself"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "The given key is maintained by another application node; in this case the information about that node (host and port) will be returned"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "The `getMetaData()` method is added to provide callers with a list of all the nodes in the application cluster."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "The `GetWeatherStationDataResult` type must be adjusted accordingly:"
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"Also the return type for `getMetaData()` must be defined\n"
"(`aggregator/src/main/java/org/acme/kafka/streams/aggregator/streams/PipelineMetadata.java`):"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "Lastly, the REST endpoint class must be updated:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "The data was found locally, so return it"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "The data is maintained by another node, so reply with a redirect (HTTP status code 303) if the data for the given key is stored on one of the other nodes."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "No data was found for the given weather station id"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "Exposes information about all the hosts forming the application cluster"
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"Now stop the `aggregator` service again and rebuild it.\n"
"Then let's spin up three instances of it:"
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"When invoking the REST API on any of the three instances, it might either be\n"
"that the aggregation for the requested weather station id is stored locally on the node receiving the query,\n"
"or it could be stored on one of the other two nodes."
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"As the load balancer of Docker Compose will distribute requests to the `aggregator` service in a round-robin fashion,\n"
"we'll invoke the actual nodes directly.\n"
"The application exposes information about all the host names via REST:"
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"Retrieve the data from one of the three hosts shown in the response\n"
"(your actual host names will differ):"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "If that node holds the data for key \"1\", you'll get a response like this:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "Otherwise, the service will send a redirect:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "You can also have _httpie_ automatically follow the redirect by passing the `--follow option`:"
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/kafka-streams.adoc
#, no-wrap
msgid "Running Natively"
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"The Quarkus extension for Kafka Streams enables the execution of stream processing applications\n"
"natively via GraalVM without further configuration."
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"To run both the `producer` and `aggregator` applications in native mode,\n"
"the Maven builds can be executed using `-Dnative`:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "Now create an environment variable named `QUARKUS_MODE` and with value set to \"native\":"
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"This is used by the Docker Compose file to use the correct `Dockerfile` when building the `producer` and `aggregator` images.\n"
"The Kafka Streams application can work with less than 50 MB RSS in native mode.\n"
"To do so, add the `Xmx` option to the program invocation in `aggregator/src/main/docker/Dockerfile.native`:"
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"Now start Docker Compose as described above\n"
"(don't forget to rebuild the container images)."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/kafka-streams.adoc
#, no-wrap
msgid "Kafka Streams Health Checks"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "If you are using the `quarkus-smallrye-health` extension, `quarkus-kafka-streams` will automatically add:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "a readiness health check to validate that all topics declared in the `quarkus.kafka-streams.topics` property are created,"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "a liveness health check based on the Kafka Streams state."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "So when you access the `/q/health` endpoint of your application you will have information about the state of the Kafka Streams and the available and/or missing topics."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "This is an example of when the status is `DOWN`:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "Liveness health check. Also available at `/q/health/live` endpoint."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "Readiness health check. Also available at `/q/health/ready` endpoint."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "So as you can see, the status is `DOWN` as soon as one of the `quarkus.kafka-streams.topics` is missing or the Kafka Streams `state` is not `RUNNING`."
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"If no topics are available, the `available_topics` key will not be present in the `data` field of the `Kafka Streams topics health check`.\n"
"As well as if no topics are missing, the `missing_topics` key will not be present in the `data` field of the `Kafka Streams topics health check`."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "You can of course disable the health check of the `quarkus-kafka-streams` extension by setting the `quarkus.kafka-streams.health.enabled` property to `false` in your `application.properties`."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "Obviously you can create your liveness and readiness probes based on the respective endpoints `/q/health/live` and `/q/health/ready`."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/kafka-streams.adoc
#, no-wrap
msgid "Liveness health check"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "Here is an example of the liveness check:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "The `state` is coming from the `KafkaStreams.State` enum."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/kafka-streams.adoc
#, no-wrap
msgid "Readiness health check"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/kafka-streams.adoc
msgid "Here is an example of the readiness check:"
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/kafka-streams.adoc
#, no-wrap
msgid "Going Further"
msgstr ""

#: _versions/2.7/guides/kafka-streams.adoc
msgid ""
"This guide has shown how you can build stream processing applications using Quarkus and the Kafka Streams APIs,\n"
"both in JVM and native modes.\n"
"For running your KStreams application in production, you could also add health checks and metrics for the data pipeline.\n"
"Refer to the Quarkus guides on xref:micrometer.adoc[Micrometer], xref:smallrye-metrics.adoc[SmallRye Metrics], and xref:smallrye-health.adoc[SmallRye Health] to learn more."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/kafka-streams.adoc
#, no-wrap
msgid "Configuration Reference"
msgstr "配置参考"
