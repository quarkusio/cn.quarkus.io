# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.7/guides/config-mappings.adoc
#, no-wrap
msgid "Mapping configuration to objects"
msgstr ""

#: _versions/2.7/guides/config-mappings.adoc
msgid ""
"With config mappings it is possible to group multiple configuration properties in a single interface that\n"
"share the same prefix."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/config-mappings.adoc
#, no-wrap
msgid "`@ConfigMapping`"
msgstr ""

#: _versions/2.7/guides/config-mappings.adoc
msgid ""
"A config mapping requires an interface with minimal metadata configuration and annotated with the\n"
"`@io.smallrye.config.ConfigMapping` annotation."
msgstr ""

#: _versions/2.7/guides/config-mappings.adoc
msgid ""
"The `Server` interface is able to map configuration properties with the name `server.host` into the `Server.host()`\n"
"method and `server.port` into `Server.port()` method. The configuration property name to look up is built from the\n"
"prefix, and the method name with `.` (dot) as the separator."
msgstr ""

#: _versions/2.7/guides/config-mappings.adoc
msgid ""
"If a mapping fails to match a configuration property a `NoSuchElementException` is thrown, unless the mapped\n"
"element is an `Optional`."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/config-mappings.adoc
#, no-wrap
msgid "Registration"
msgstr ""

#: _versions/2.7/guides/config-mappings.adoc
msgid ""
"When a Quarkus application starts, a config mapping can be registered twice. One time for _STATIC INIT_ and a second\n"
"time for _RUNTIME INIT_:"
msgstr ""

#. type: Title ====
#: _versions/2.7/guides/config-mappings.adoc
#, no-wrap
msgid "STATIC INIT"
msgstr ""

#: _versions/2.7/guides/config-mappings.adoc
msgid ""
"Quarkus starts some of its services during static initialization, and `Config` is usually one of the first things that\n"
"is created. In certain situations it may not be possible to correctly initialize a config mapping. For instance, if the\n"
"mapping requires values from a custom `ConfigSource`. For this reason, any config mapping requires the annotation\n"
"`@io.quarkus.runtime.configuration.StaticInitSafe` to mark the mapping as safe to be used at this stage. Learn more\n"
"about xref:config-extending-support.adoc#custom-config-source[registration] of a custom `ConfigSource`."
msgstr ""

#. type: Title =====
#: _versions/2.7/guides/config-mappings.adoc
#, no-wrap
msgid "Example"
msgstr "例子"

#. type: Title ====
#: _versions/2.7/guides/config-mappings.adoc
#, no-wrap
msgid "RUNTIME INIT"
msgstr ""

#: _versions/2.7/guides/config-mappings.adoc
msgid ""
"The _RUNTIME INIT_ stage happens after _STATIC INIT_. There are no restrictions at this stage, and any config mapping\n"
"is added to the `Config` instance as expected."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/config-mappings.adoc
#, no-wrap
msgid "Retrieval"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/config-mappings.adoc
msgid "A config mapping interface can be injected into any CDI aware bean:"
msgstr ""

#: _versions/2.7/guides/config-mappings.adoc
msgid ""
"In non-CDI contexts, use the API `io.smallrye.config.SmallRyeConfig#getConfigMapping` to retrieve the config mapping\n"
"instance:"
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/config-mappings.adoc
#, no-wrap
msgid "Nested groups"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/config-mappings.adoc
msgid "A nested mapping provides a way to subgroup other config properties:"
msgstr ""

#. type: Block title
#: _versions/2.7/guides/config-mappings.adoc
#, no-wrap
msgid "application.properties"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/config-mappings.adoc
msgid "The method name of a mapping group acts as sub-namespace to the configurations properties."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/config-mappings.adoc
#, no-wrap
msgid "Overriding property names"
msgstr ""

#. type: Title ====
#: _versions/2.7/guides/config-mappings.adoc
#, no-wrap
msgid "`@WithName`"
msgstr ""

#: _versions/2.7/guides/config-mappings.adoc
msgid ""
"If a method name, or a property name do not match with each other, the `@WithName` annotation can override the method\n"
"name mapping and use the name supplied in the annotation:"
msgstr ""

#. type: Title ====
#: _versions/2.7/guides/config-mappings.adoc
#, no-wrap
msgid "`@WithParentName`"
msgstr ""

#: _versions/2.7/guides/config-mappings.adoc
msgid ""
"The `@WithParent` annotation allows to configurations mapping to inherit its container name, simplifying the\n"
"configuration property name required to match the mapping:"
msgstr ""

#: _versions/2.7/guides/config-mappings.adoc
msgid ""
"Without the `@WithParentName` the method `name()` requires the configuration property `server.info.name`. Because we use\n"
"`@WithParentName`, the `info()` mapping will inherit the parent name from `Server` and `name()` maps to `server.name`\n"
"instead."
msgstr ""

#. type: Title ====
#: _versions/2.7/guides/config-mappings.adoc
#, no-wrap
msgid "NamingStrategy"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/config-mappings.adoc
msgid "Method names in camelCase map to kebab-case property names:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/config-mappings.adoc
msgid "The mapping strategy can be adjusted by setting `namingStrategy` value in the `@ConfigMapping` annotation:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/config-mappings.adoc
msgid "The `@ConfigMapping` annotation support the following naming stategies:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/config-mappings.adoc
msgid "`KEBAB_CASE` (default) - The method name is derived by replacing case changes with a dash to map the configuration property."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/config-mappings.adoc
msgid "`VERBATIM` - The method name is used as is to map the configuration property."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/config-mappings.adoc
msgid "`SNAKE_CASE` - The method name is derived by replacing case changes with an underscore to map the configuration property."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/config-mappings.adoc
#, no-wrap
msgid "Conversions"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/config-mappings.adoc
msgid "A config mapping class support automatic conversions of all types available for conversion in `Config`:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/config-mappings.adoc
msgid "This is also valid for `Optional` and friends:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/config-mappings.adoc
msgid "In this case, the mapping won't fail if there are not configuration properties to match the mapping."
msgstr ""

#. type: Title ====
#: _versions/2.7/guides/config-mappings.adoc
#, no-wrap
msgid "`@WithConverter`"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/config-mappings.adoc
msgid "The `@WithConverter` annotation provides a way to set a `Converter` to use in a specific mapping:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/config-mappings.adoc
msgid "A call to `Converters.foo()` results in the value `bar`."
msgstr ""

#. type: Title ====
#: _versions/2.7/guides/config-mappings.adoc
#, no-wrap
msgid "Collections"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/config-mappings.adoc
msgid "A config mapping is also able to map collections types `List` and `Set`:"
msgstr ""

#: _versions/2.7/guides/config-mappings.adoc
msgid ""
"The `List` or `Set` mappings can use xref:config-reference.adoc#indexed-properties[indexed properties] to map\n"
"configuration values in mapping groups. For collection with simple element types like `String`, their configuration\n"
"value is a comma separated string."
msgstr ""

#. type: Title ====
#: _versions/2.7/guides/config-mappings.adoc
#, no-wrap
msgid "Maps"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/config-mappings.adoc
msgid "A config mapping is also able to map a `Map`:"
msgstr ""

#: _versions/2.7/guides/config-mappings.adoc
msgid ""
"The configuration property needs to specify an additional name to act as the key. In this case the `form()` `Map` will\n"
"contain three elements with the keys `login-page`, `error-page` and `landing-page`."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/config-mappings.adoc
#, no-wrap
msgid "Defaults"
msgstr ""

#: _versions/2.7/guides/config-mappings.adoc
msgid ""
"The `@WithDefault` annotation allows to set a default property into a mapping (and prevent and error if the\n"
"configuration value is not available in any `ConfigSource`):"
msgstr ""

#: _versions/2.7/guides/config-mappings.adoc
msgid ""
"No configuration properties required. The `Defaults.foo()` will return the value `foo` and `Defaults.bar()` will return\n"
"thevalue `bar`."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/config-mappings.adoc
#, no-wrap
msgid "Validation"
msgstr ""

#: _versions/2.7/guides/config-mappings.adoc
msgid ""
"A config mapping may combine annotations from https://beanvalidation.org[Bean Validation] to validate configuration\n"
"values:"
msgstr ""

#: _versions/2.7/guides/config-mappings.adoc
msgid ""
"For validation to work, the `quarkus-hibernate-validator` extension is required, and it is performed\n"
"automatically."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/config-mappings.adoc
#, no-wrap
msgid "Mocking"
msgstr ""

#: _versions/2.7/guides/config-mappings.adoc
msgid ""
"A mapping interface implementation is not a proxy, so it cannot be mocked directly with `@InjectMock` like other CDI\n"
"beans. One trick is to make it proxyable with a producer method:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/config-mappings.adoc
msgid "The `Server` can be injected as a mock into a Quarkus test class with `@InjectMock`:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/config-mappings.adoc
msgid "The mock is just an empty shell without any actual configuration values."
msgstr ""

#: _versions/2.7/guides/config-mappings.adoc
msgid ""
"If the goal is to only mock certain configuration values and retain the original configuration, the mocking instance\n"
"requires a spy:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/config-mappings.adoc
msgid "The `AppConfig` can be injected as a mock into a Quarkus test class with `@Inject`:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/config-mappings.adoc
msgid "Nested elements need to be spied individually by Mockito."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/config-mappings.adoc
#, no-wrap
msgid "[.line-through]#`@ConfigProperties`# (Deprecated)"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/config-mappings.adoc
msgid "This feature will be removed soon, please update your code base and use `@ConfigMapping` instead."
msgstr ""

#: _versions/2.7/guides/config-mappings.adoc
msgid ""
"The `@io.quarkus.arc.config.ConfigProperties` annotation is able to group multiple related configuration values in its\n"
"own class:"
msgstr ""

#: _versions/2.7/guides/config-mappings.adoc
msgid ""
"`prefix` is optional. If not set then the prefix to be used will be determined by the class name. In this case it\n"
"would still be `greeting` (since the `Configuration` suffix is removed). If the class were named\n"
"`GreetingExtraConfiguration` then the resulting default prefix would be `greeting-extra`."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/config-mappings.adoc
msgid "`!` will be the default value if `greeting.suffix` is not set."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/config-mappings.adoc
msgid "Inject the `GreetingResource` with CDI `@Inject`:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/config-mappings.adoc
msgid "Another alternative style provided by Quarkus is to create `GreetingConfiguration` as an interface:"
msgstr ""

#: _versions/2.7/guides/config-mappings.adoc
msgid ""
"The `@ConfigProperty` annotation is needed because the name of the configuration property that the method\n"
"corresponds does not follow the getter method naming conventions."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/config-mappings.adoc
msgid "In this case since `name` is not set, the corresponding property will be `greeting.suffix`."
msgstr ""

#: _versions/2.7/guides/config-mappings.adoc
msgid ""
"It is unnecessary to specify the `@ConfigProperty` annotation because the method name follows the getter method\n"
"naming conventions (`greeting.name` being the corresponding property) and no default value is required."
msgstr ""

#: _versions/2.7/guides/config-mappings.adoc
msgid ""
"When using `@ConfigProperties` on a class or an interface, if the value of one of its fields is not provided, the\n"
"application startup will fail, and a `javax.enterprise.inject.spi.DeploymentException` will be thrown. This does not\n"
"apply to `Optional` fields and fields with a default value."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/config-mappings.adoc
#, no-wrap
msgid "Additional notes on @ConfigProperties"
msgstr ""

#: _versions/2.7/guides/config-mappings.adoc
msgid ""
"When using a regular class annotated with `@ConfigProperties` the class doesn't necessarily have to declare getters and\n"
"setters. Having simple public non-final fields is valid as well."
msgstr ""

#: _versions/2.7/guides/config-mappings.adoc
msgid ""
"Furthermore, the configuration classes support nested object configuration. Suppose there was a need to have an extra\n"
"layer of greeting configuration named `content` that would contain a few fields:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/config-mappings.adoc
msgid "The name of the field (not the class name) will determine the name of the properties that are bound to the object."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/config-mappings.adoc
msgid "Setting the properties would occur in the normal manner:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/config-mappings.adoc
msgid "Furthermore, classes annotated with `@ConfigProperties` can be annotated with Bean Validation annotations:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/config-mappings.adoc
msgid "For validation to work, the `quarkus-hibernate-validator` extension is required."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/config-mappings.adoc
#, no-wrap
msgid "Using same ConfigProperties with different prefixes"
msgstr ""

#: _versions/2.7/guides/config-mappings.adoc
msgid ""
"Quarkus also supports the use of the same `@ConfigProperties` object with different prefixes for each injection point\n"
"using the `io.quarkus.arc.config.@ConfigPrefix` annotation. If `GreetingConfiguration` from above needs to be used for\n"
"both the `greeting` prefix and the `other` prefix:"
msgstr ""

#: _versions/2.7/guides/config-mappings.adoc
msgid ""
"At this injection point `greetingConfiguration` will use the `greeting` prefix since that is what has been defined\n"
"on `@ConfigProperties`."
msgstr ""

#: _versions/2.7/guides/config-mappings.adoc
msgid ""
"At this injection point `otherConfiguration` will use the `other` prefix from `@ConfigPrefix` instead of the\n"
"`greeting` prefix. Notice that in this case `@Inject` is not required."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/config-mappings.adoc
#, no-wrap
msgid "Combining ConfigProperties with build time conditions"
msgstr ""

#: _versions/2.7/guides/config-mappings.adoc
msgid ""
"Quarkus allows you to define conditions evaluated at build time (`@IfBuildProfile`, `@UnlessBuildProfile`,\n"
"`@IfBuildProperty` and `@UnlessBuildProperty`) to enable or not the annotations `@ConfigProperties` and `@ConfigPrefix`\n"
"which gives you a very flexible way to map your configuration."
msgstr ""

#: _versions/2.7/guides/config-mappings.adoc
msgid ""
"Let's assume that the configuration of a service is mapped thanks to a `@ConfigProperties` and you don't need this part\n"
"of the configuration for your tests as it will be mocked, in that case you can define a build time condition like in\n"
"the next example:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/config-mappings.adoc
msgid "`ServiceConfiguration.java`"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/config-mappings.adoc
msgid "The annotation `@ConfigProperties` is considered if and only if the active profile is not `test`."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/config-mappings.adoc
msgid "`SomeBean.java`"
msgstr ""

#: _versions/2.7/guides/config-mappings.adoc
msgid ""
"As the configuration of the service could be missing, we need to use `Instance<ServiceConfiguration>` as type at\n"
"the injection point."
msgstr ""
