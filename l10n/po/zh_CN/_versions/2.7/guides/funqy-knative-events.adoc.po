# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:6
#, no-wrap
msgid "Funqy Knative Events Binding"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:14
msgid "Quarkus Funqy link:https://knative.dev/docs/eventing[Knative Events] builds off of the xref:funqy-http.adoc[Funqy HTTP] extension to allow you to route and process Knative Events within a Funqy function."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:17
msgid "The guide walks through quickstart code to show you how you can deploy and invoke on Funqy functions with Knative Events."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:18
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:24
msgid "Read about xref:funqy.adoc[Funqy Basics].  This is a short read!"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:25
msgid "Have gone through the link:https://redhat-developer-demos.github.io/knative-tutorial/knative-tutorial/index.html[Knative Tutorial], specifically link:https://redhat-developer-demos.github.io/knative-tutorial/knative-tutorial-eventing/eventing-trigger-broker.html[Brokers and Triggers]"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:26
#, no-wrap
msgid "Setting up Knative"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:31
msgid "Setting up Knative locally in a Minikube environment is beyond the scope of this guide.  It is advised to follow https://redhat-developer-demos.github.io/knative-tutorial/knative-tutorial/index.html[this] Knative Tutorial put together by Red Hat.  It walks through how to set up Knative on Minikube or OpenShift in a local environment."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:34
msgid "Specifically you should run the link:https://redhat-developer-demos.github.io/knative-tutorial/knative-tutorial-eventing/eventing-trigger-broker.html[Brokers and Triggers] tutorial as this guide requires that you can invoke on a Broker to trigger the quickstart code."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:35
#, no-wrap
msgid "Read about Cloud Events"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:38
msgid "The Cloud Event link:https://cloudevents.io/[specification] is a good read to give you an even greater understanding of Knative Events."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:39
#, no-wrap
msgid "The Quickstart"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:42
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:44
msgid "The solution is located in the `funqy-knative-events-quickstart` {quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:45
#, no-wrap
msgid "The Quickstart Flow"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:51
msgid "The quickstart works by manually sending an HTTP request containing a Cloud Event to the Knative Broker using `curl`.  The Knative Broker receives the request and triggers the startup of the Funqy container built by the quickstart.  The event triggers the invocation of a chain of Funqy functions.  The output of one function triggers the invocation of another Funqy function."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:52
#, no-wrap
msgid "Funqy and Cloud Events"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:59
msgid "When living within a Knative Events environment, Funqy functions are triggered by a specific Cloud Event type.  You can have multiple Funqy functions within a single application/deployment, but they must be triggered by a specific Cloud Event Type.  The exception to this rule is if there is only one Funqy function in the application.  In that case, the event is pushed to that function irregardless of the Cloud Event type."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:63
msgid "Currently, Funqy can only consume JSON-based data.  It supports both Binary and Structured mode of execution, but the data component of the Cloud Event message must be JSON.  This JSON must also be marshallable to and from the Java parameters and return types of your functions."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:64
#, no-wrap
msgid "The Code"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:68
msgid "Let's start looking at our quickstart code so that you can understand how Knative Events map to Funqy.  Open up {quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/main/java/org/acme/funqy/SimpleFunctionChain.java[SimpleFunctionChain.java]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:70
msgid "The first function we'll look at is `defaultChain`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:74
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:97
#, no-wrap
msgid "import io.quarkus.funqy.Funq;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:81
#, no-wrap
msgid ""
"public class SimpleFunctionChain {\n"
"    @Funq\n"
"    public String defaultChain(String input) {\n"
"        log.info(\"*** defaultChain ***\");\n"
"        return input + \"::\" + \"defaultChain\";\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:87
msgid "As is, a Funqy function has a default Cloud Event mapping.  By default, the Cloud Event type must match the function name for the function to trigger.  If the function returns output, the response is converted into a Cloud Event and returned to the Broker to be routed to other triggers.  The default Cloud Event type for this response is the function name + `.output`.  The default Cloud Event source is the function name."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:90
msgid "So, for the `defaultChain` function, the Cloud Event type that triggers the function is `defaultChain`.  It generates a response that triggers a new Cloud Event whose type is `defaultChain.output` and the event source is `defaultChain`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:93
msgid "While the default mapping is simple, it might not always be feasible.  You can change this default mapping through configuration.  Let's look at the next function:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:104
#, no-wrap
msgid ""
"public class SimpleFunctionChain {\n"
"    @Funq\n"
"    public String configChain(String input) {\n"
"        log.info(\"*** configChain ***\");\n"
"        return input + \"::\" + \"configChain\";\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:107
msgid "The `configChain` function has its Cloud Event mapping changed by configuration within {quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/main/resources/application.properties[application.properties]."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:114
#, no-wrap
msgid ""
"quarkus.funqy.knative-events.mapping.configChain.trigger=defaultChain.output\n"
"quarkus.funqy.knative-events.mapping.configChain.response-type=annotated\n"
"quarkus.funqy.knative-events.mapping.configChain.response-source=configChain\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:118
msgid "In this case, the configuration maps the incoming Cloud Event type `defaultChain.output` to the `configChain` function.  The `configChain` function maps its response to the `annotated` Cloud Event type, and the Cloud Event source `configChain`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:120
msgid "`quarkus.funqy.knative-events.mapping.{function name}.trigger` sets the Cloud Event type that triggers a specific function. It is possible to use the special value `*` as a catch-all value. The function will in this case be used for all event types."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:121
msgid "`quarkus.funqy.knative-events.mapping.{function name}.response-type` sets the Cloud Event type of the response"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:122
msgid "`quarkus.funqy.knative-events.mapping.{function name}.resource-source` sets the Cloud Event source of the response"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:125
msgid "The Funqy Knative Events extension also has annotations to do this Cloud Event mapping to your functions.  Take a look at the `annotatedChain` method"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:130
#, no-wrap
msgid ""
"import io.quarkus.funqy.Funq;\n"
"import io.quarkus.funqy.knative.events.CloudEventMapping;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:138
#, no-wrap
msgid ""
"public class SimpleFunctionChain {\n"
"    @Funq\n"
"    @CloudEventMapping(trigger = \"annotated\", responseSource = \"annotated\", responseType = \"lastChainLink\")\n"
"    public String annotatedChain(String input) {\n"
"        log.info(\"*** annotatedChain ***\");\n"
"        return input + \"::\" + \"annotatedChain\";\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:144
msgid "If you use the `@CloudEventMapping` annotation on your function you can map the Cloud Event type trigger and the Cloud Event response.  In this example the `annotatedChain` function will be triggered by the `annotated` Cloud Event type and the response will be mapped to a `lastChainLink` type and `annotated` Cloud Event source."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:147
msgid "So, if look at all the functions defined within `SimpleFunctionChain` you'll notice that one function triggers the next.  The last function that is triggered is `lastChainLink`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:152
#, no-wrap
msgid ""
"import io.quarkus.funqy.Context;\n"
"import io.quarkus.funqy.Funq;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:160
#, no-wrap
msgid ""
"public class SimpleFunctionChain {\n"
"    @Funq\n"
"    public void lastChainLink(String input, @Context CloudEvent event) {\n"
"        log.info(\"*** lastChainLink ***\");\n"
"        log.info(input + \"::\" + \"lastChainLink\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:164
msgid "There are two things to notice about this function.  One, it has no output.  Your functions are not required to return output.  Second, there is an additional `event` parameter to the function."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:168
msgid "If you want to know additional information about the incoming Cloud Event, you can inject the `io.quarkus.funqy.knative.events.CloudEvent` interface using the Funqy `@Context` annotation.  The `CloudEvent` interface exposes information about the triggering event."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:178
#, no-wrap
msgid ""
"public interface CloudEvent {\n"
"    String id();\n"
"    String specVersion();\n"
"    String source();\n"
"    String subject();\n"
"    OffsetDateTime time();\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:180
#, no-wrap
msgid "Maven"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:184
msgid "If you look at the {quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/pom.xml[POM], you'll see that it is a typical Quarkus POM that pulls in one Funqy dependency:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:191
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-funqy-knative-events</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:193
#, no-wrap
msgid "Dev mode and Testing"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:199
msgid "Funqy Knative Events support dev mode and unit testing using RestAssured.  You can invoke on Funqy Knative Events functions using the same invocation model as xref:funqy-http.adoc[Funqy HTTP] using normal HTTP requests, or Cloud Event Binary mode, or Structured Mode.  All invocation modes are supported at the same time."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:202
msgid "So, if you open up the unit test code in {quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/test/java/org/acme/funqy/FunqyTest.java[FunqyTest.java] you'll see that its simply using RestAssured to make HTTP invocations to test the functions."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:204
msgid "Funqy also works with Quarkus Dev mode!"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:205
#, no-wrap
msgid "Build the Project"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:208
msgid "First build the Java artifacts:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:212
msgid "Next, a docker image is required by Knative, so you'll need to build that next:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:216
#, no-wrap
msgid "docker build -f src/main/docker/Dockerfile.jvm -t yourAccountName/funqy-knative-events-quickstart .\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:220
msgid "Make sure to replace `yourAccountName` with your docker or quay account name when you run `docker build`.  The Dockerfile is a standard Quarkus dockerfile.  No special Knative magic."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:222
msgid "Push your image to docker hub or quay"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:226
#, no-wrap
msgid "docker push yourAccountName/funqy-knative-events-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:229
msgid "Again, make sure to replace `yourAccountName` with your docker or quay account name when you run `docker push`."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:230
#, no-wrap
msgid "Deploy to Kubernetes/OpenShift"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:234
msgid "The first step is to set up the broker in our namespace.  Following is an example command from the the Knative cli."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:239
#, no-wrap
msgid ""
"kn broker create default \\\n"
"  --namespace knativetutorial\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:243
msgid "The broker we have created is called `default`, this broker will receive the cloud events.  The broker is also referenced in the function YAML files."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:246
msgid "The second step is to define a Kubernetes/OpenShift service to point to the Docker image you created and pushed during build. Take a look at {quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/main/k8s/funqy-service.yaml[funqy-service.yaml]"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:262
#, no-wrap
msgid ""
"apiVersion: serving.knative.dev/v1\n"
"kind: Service\n"
"metadata:\n"
"  name: funqy-knative-events-quickstart\n"
"spec:\n"
"  template:\n"
"    metadata:\n"
"      name: funqy-knative-events-quickstart-v1\n"
"      annotations:\n"
"        autoscaling.knative.dev/target: \"1\"\n"
"    spec:\n"
"      containers:\n"
"        - image: docker.io/yourAccountName/funqy-knative-events-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:265
msgid "This is a standard Kubernetes service definition YAML file."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:267
msgid "Make sure you change the image URL to point to the image you built and pushed earlier!"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:271
msgid "For our quickstart, one Kubernetes service will contain all functions. There's no reason you couldn't break up this quickstart into multiple different projects and deploy a service for each function.  For simplicity, and to show that you don't have to have a deployment per function, the quickstart combines everything into one project, image, and service."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:273
msgid "Deploy the service:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:277
#, no-wrap
msgid "kubectl apply -n knativetutorial -f src/main/k8s/funqy-service.yaml\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:282
msgid "The next step is to deploy Knative Event triggers for each of the event types. As noted in the code section, each Funqy function is mapped to a specific Cloud Event type.  You must create Knative Event triggers that map a Cloud Event and route it to a specific Kubernetes service.  We have 4 different triggers."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:285
msgid "{quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/main/k8s/defaultChain-trigger.yaml[defaultChain-trigger.yaml]"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:301
#, no-wrap
msgid ""
"apiVersion: eventing.knative.dev/v1alpha1\n"
"kind: Trigger\n"
"metadata:\n"
"  name: defaultchain\n"
"spec:\n"
"  broker: default\n"
"  filter:\n"
"    attributes:\n"
"      type: defaultChain\n"
"  subscriber:\n"
"    ref:\n"
"      apiVersion: serving.knative.dev/v1\n"
"      kind: Service\n"
"      name: funqy-knative-events-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:305
msgid "The `spec:filter:attributes:type` maps a Cloud Event type to the Kubernetes service defined in `spec:subscriber:ref`.  When a Cloud Event is pushed to the Broker, it will trigger the spin up of the service mapped to that event."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:307
msgid "There's a trigger YAML file for each of our 4 Funqy functions.  Deploy them all:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:314
#, no-wrap
msgid ""
"kubectl apply -n knativetutorial -f src/main/k8s/defaultChain-trigger.yaml\n"
"kubectl apply -n knativetutorial -f src/main/k8s/configChain-trigger.yaml\n"
"kubectl apply -n knativetutorial -f src/main/k8s/annotatedChain-trigger.yaml\n"
"kubectl apply -n knativetutorial -f src/main/k8s/lastChainLink-trigger.yaml\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:316
#, no-wrap
msgid "Run the demo"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:320
msgid "You'll need two different terminal windows.  One to do a curl request to the Broker, the other to watch the pod log files so you can see the messages flowing through the Funqy function event chain."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:323
msgid "Make sure you have the `stern` tool installed.  See the Knative Tutorial setup for information on that.  Run stern to look for logs outputted by our Funqy deployment"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:327
#, no-wrap
msgid "stern funq user-container\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:330
msgid "Open a separate terminal.  You'll first need to learn the URL of the broker.  Execute this command to find it."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:334
#, no-wrap
msgid "kubectl get broker default -o jsonpath='{.status.address.url}'\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:337
msgid "This will provide you a URL similar to e.g.: `http://broker-ingress.knative-eventing.svc.cluster.local/knativetutorial/default`. Remember this URL."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:340
msgid "Next thing we need to do is ssh into our Kubernetes cluster so that we can send a curl request to our broker.  Following command will create a simple OS pod so we can curl into our functions."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:344
#, no-wrap
msgid "kubectl -n knativetutorial apply -f src/main/k8s/curler.yaml\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:347
msgid "You might need to wait a couple of seconds until the curler pod comes up. Run the following to get bash access to the curler pod:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:351
#, no-wrap
msgid "kubectl -n knativetutorial exec -it curler -- /bin/bash\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:355
msgid "You will now be in a shell within the Kubernetes cluster.  Within the shell, execute this curl command , the broker address is an example and might differ based on your project or broker name."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:366
#, no-wrap
msgid ""
"curl -v \"http://default-broker.knativetutorial.svc.cluster.local\" \\\n"
"-X POST \\\n"
"-H \"Ce-Id: 1234\" \\\n"
"-H \"Ce-Specversion: 1.0\" \\\n"
"-H \"Ce-Type: defaultChain\" \\\n"
"-H \"Ce-Source: curl\" \\\n"
"-H \"Content-Type: application/json\" \\\n"
"-d '\"Start\"'\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:372
msgid "This posts a Knative Event to the broker, which will trigger the `defaultChain` function.  As discussed earlier, the output of `defaultChain` triggers an event that is posted to `configChain` which triggers an event posted to `annotatedChain` then finally to the `lastChainLink` function.  You can see this flow in your `stern` window.  Something like this should be outputted."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/funqy-knative-events.adoc:380
#, no-wrap
msgid ""
"funqy-knative-events-quickstart-v1-deployment-59bb88bcf4-9jwdx user-container 2020-05-12 13:44:02,256 INFO  [org.acm.fun.SimpleFunctionChain] (executor-thread-1) *** defaultChain ***\n"
"funqy-knative-events-quickstart-v1-deployment-59bb88bcf4-9jwdx user-container 2020-05-12 13:44:02,365 INFO  [org.acm.fun.SimpleFunctionChain] (executor-thread-2) *** configChain ***\n"
"funqy-knative-events-quickstart-v1-deployment-59bb88bcf4-9jwdx user-container 2020-05-12 13:44:02,394 INFO  [org.acm.fun.SimpleFunctionChain] (executor-thread-1) *** annotatedChain ***\n"
"funqy-knative-events-quickstart-v1-deployment-59bb88bcf4-9jwdx user-container 2020-05-12 13:44:02,466 INFO  [org.acm.fun.SimpleFunctionChain] (executor-thread-2) *** lastChainLink ***\n"
"funqy-knative-events-quickstart-v1-deployment-59bb88bcf4-9jwdx user-container 2020-05-12 13:44:02,467 INFO  [org.acm.fun.SimpleFunctionChain] (executor-thread-2) Start::defaultChain::configChain::annotatedChain::lastChainLink\n"
msgstr ""
