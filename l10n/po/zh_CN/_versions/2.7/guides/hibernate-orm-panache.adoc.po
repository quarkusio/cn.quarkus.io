# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.7/guides/hibernate-orm-panache.adoc
#, no-wrap
msgid "Simplified Hibernate ORM with Panache"
msgstr "简化的Hibernate ORM与Panache"

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"Hibernate ORM is the de facto JPA implementation and offers you the full breadth of an Object Relational Mapper.\n"
"It makes complex mappings possible, but it does not make simple and common mappings trivial.\n"
"Hibernate ORM with Panache focuses on making your entities trivial and fun to write in Quarkus."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/hibernate-orm-panache.adoc
#, no-wrap
msgid "First: an example"
msgstr "第一：一个例子"

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "What we're doing in Panache is to allow you to write your Hibernate ORM entities like this:"
msgstr "Panache允许这样编写Hibernate ORM实体："

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"You have noticed how much more compact and readable the code is?\n"
"Does this look interesting? Read on!"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "the `list()` method might be surprising at first. It takes fragments of HQL (JP-QL) queries and contextualizes the rest. That makes for very concise but yet readable code."
msgstr " `list()` 方法一开始可能会让人吃惊。它只需要接收HQL（JP-QL）查询语句的片段，并对查询语句其余部分进行上下文推断处理。这使得代码非常简明，但也不失可读性。"

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"what was described above is essentially the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[active record pattern], sometimes just called the entity pattern.\n"
"Hibernate with Panache also allows for the use of the more classical link:https://martinfowler.com/eaaCatalog/repository.html[repository pattern] via `PanacheRepository`."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/hibernate-orm-panache.adoc
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "The solution is located in the `hibernate-orm-panache-quickstart` {quickstarts-tree-url}/hibernate-orm-panache-quickstart[directory]."
msgstr "该解决方案位于 `hibernate-orm-panache-quickstart` {quickstarts-tree-url}/hibernate-orm-panache-quickstart[目录] 中。"

#. type: Title ==
#: _versions/2.7/guides/hibernate-orm-panache.adoc
#, no-wrap
msgid "Setting up and configuring Hibernate ORM with Panache"
msgstr "在Hibernate ORM中配置Panache "

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "To get started:"
msgstr "起步："

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "add your settings in `{config-file}`"
msgstr "在 `{config-file}` 中添加你的设置。"

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "annotate your entities with `@Entity`"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "make your entities extend `PanacheEntity` (optional if you are using the repository pattern)"
msgstr "实体类改为继承 `PanacheEntity` 类（使用Repository模式时为可选操作）。"

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "Follow the xref:hibernate-orm.adoc#setting-up-and-configuring-hibernate-orm[Hibernate set-up guide for all configuration]."
msgstr "按照 link:hibernate-orm.html#setting-up-and-configuring-hibernate-orm[Hibernate 设置指南] 进行其他配置。"

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "In your build file, add the following dependencies:"
msgstr "在你的项目构建文件中，添加以下依赖："

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "the Hibernate ORM with Panache extension"
msgstr "Hibernate ORM with Panache扩展"

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "your JDBC driver extension (`quarkus-jdbc-postgresql`, `quarkus-jdbc-h2`, `quarkus-jdbc-mariadb`, ...)"
msgstr "JDBC驱动扩展 (如 `quarkus-jdbc-postgresql` , `quarkus-jdbc-h2` , `quarkus-jdbc-mariadb` , ...)"

#. type: Block title
#: _versions/2.7/guides/hibernate-orm-panache.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/2.7/guides/hibernate-orm-panache.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "Then add the relevant configuration properties in `{config-file}`."
msgstr "然后在 `{config-file}` 中添加相关的配置属性。"

#. type: Title ==
#: _versions/2.7/guides/hibernate-orm-panache.adoc
#, no-wrap
msgid "Solution 1: using the active record pattern"
msgstr "解决方案1：使用active record（活动记录）模式"

#. type: Title ===
#: _versions/2.7/guides/hibernate-orm-panache.adoc
#, no-wrap
msgid "Defining your entity"
msgstr "定义你的实体"

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"To define a Panache entity, simply extend `PanacheEntity`, annotate it with `@Entity` and add your\n"
"columns as public fields:"
msgstr ""

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"You can put all your JPA column annotations on the public fields. If you need a field to not be persisted, use the\n"
"`@Transient` annotation on it. If you need to write accessors, you can:"
msgstr ""

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"And thanks to our field access rewrite, when your users read `person.name` they will actually call your `getName()` accessor,\n"
"and similarly for field writes and the setter.\n"
"This allows for proper encapsulation at runtime as all fields calls will be replaced by the corresponding getter/setter calls."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/hibernate-orm-panache.adoc
#, no-wrap
msgid "Most useful operations"
msgstr "最有用的操作"

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "Once you have written your entity, here are the most common operations you will be able to perform:"
msgstr "编写实体后，可以执行以下最常见的操作："

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "All `list` methods have equivalent `stream` versions."
msgstr "所有 `list` 方法都有相对应的 `stream` 版本。"

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"The `stream` methods require a transaction to work. +\n"
"As they perform I/O operations, they should be closed via the `close()` method or via a try-with-resource to close the underlying `ResultSet`.\n"
"If not, you will see warnings from Agroal that will close the underlying `ResultSet` for you."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/hibernate-orm-panache.adoc
#, no-wrap
msgid "Adding entity methods"
msgstr "添加实体方法"

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"Add custom queries on your entities inside the entities themselves.\n"
"That way, you and your co-workers can find them easily, and queries are co-located with the object they operate on.\n"
"Adding them as static methods in your entity class is the Panache Active Record way."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/hibernate-orm-panache.adoc
#, no-wrap
msgid "Solution 2: using the repository pattern"
msgstr "解决方案2：使用资源库模式"

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "When using the repository pattern, you can define your entities as regular JPA entities."
msgstr "使用Repository模式时，可以将实体类定义为普通的JPA实体。"

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"If you don't want to bother defining getters/setters for your entities, you can make them extend `PanacheEntityBase` and\n"
"Quarkus will generate them for you. You can even extend `PanacheEntity` and take advantage of the default ID it provides."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/hibernate-orm-panache.adoc
#, no-wrap
msgid "Defining your repository"
msgstr "定义你的存储库"

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"When using Repositories, you get the exact same convenient methods as with the active record pattern, injected in your Repository,\n"
"by making them implements `PanacheRepository`:"
msgstr ""

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"All the operations that are defined on `PanacheEntityBase` are available on your repository, so using it\n"
"is exactly the same as using the active record pattern, except you need to inject it:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "Once you have written your repository, here are the most common operations you will be able to perform:"
msgstr "编写存储库后，您可以执行以下最常见的操作："

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "The `stream` methods require a transaction to work."
msgstr "`stream` 方法的运行需要事务。"

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"The rest of the documentation show usages based on the active record pattern only,\n"
"but keep in mind that they can be performed with the repository pattern as well.\n"
"The repository pattern examples have been omitted for brevity."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/hibernate-orm-panache.adoc
#, no-wrap
msgid "Writing a JAX-RS resource"
msgstr "编写一个JAX-RS资源"

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "First, include one of the RESTEasy extensions to enable JAX-RS endpoints, for example, add the `io.quarkus:quarkus-resteasy-jackson` dependency for JAX-RS and JSON support."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "Then, you can create the following resource to create/read/update/delete your Person entity:"
msgstr "然后，你可以创建以下资源来create/read/update/delete你的Person实体："

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"Be careful to use the `@Transactional` annotation on the operations that modify the database,\n"
"you can add the annotation at the class level for simplicity purpose."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/hibernate-orm-panache.adoc
#, no-wrap
msgid "Advanced Query"
msgstr "高级查询"

#. type: Title ===
#: _versions/2.7/guides/hibernate-orm-panache.adoc
#, no-wrap
msgid "Paging"
msgstr "分页"

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"You should only use `list` and `stream` methods if your table contains small enough data sets. For larger data\n"
"sets you can use the `find` method equivalents, which return a `PanacheQuery` on which you can do paging:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "The `PanacheQuery` type has many other methods to deal with paging and returning streams."
msgstr "`PanacheQuery` 类型有许多其他方法来处理分页和返回流。"

#. type: Title ===
#: _versions/2.7/guides/hibernate-orm-panache.adoc
#, no-wrap
msgid "Using a range instead of pages"
msgstr "使用range而不是pages"

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "`PanacheQuery` also allows range-based queries."
msgstr "`PanacheQuery` 也允许基于范围的查询。"

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"You cannot mix ranges and pages: if you use a range, all methods that depend on having a current page will throw an `UnsupportedOperationException`;\n"
"you can switch back to paging using `page(Page)` or `page(int, int)`."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/hibernate-orm-panache.adoc
#, no-wrap
msgid "Sorting"
msgstr "排序"

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "All methods accepting a query string also accept the following simplified query form:"
msgstr "所有接收查询字符串的方法也能接收以下简化形式的查询："

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "But these methods also accept an optional `Sort` parameter, which allows your to abstract your sorting:"
msgstr "这些方法也可以接收一个 `Sort` 参数，它是对排序的抽象封装："

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "The `Sort` class has plenty of methods for adding columns and specifying sort direction."
msgstr "`Sort` 类有很多方法用于添加列和指定排序方向。"

#. type: Title ===
#: _versions/2.7/guides/hibernate-orm-panache.adoc
#, no-wrap
msgid "Simplified queries"
msgstr "简化查询"

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"Normally, HQL queries are of this form: `from EntityName [where ...] [order by ...]`, with optional elements\n"
"at the end."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "If your select query does not start with `from`, we support the following additional forms:"
msgstr "如果你的查询语句不是以 `from` 开始，我们还支持以下的形式："

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "`order by ...` which will expand to `from EntityName order by ...`"
msgstr "`order by ...` 语句会被扩展为： `from EntityName order by ...` "

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "`<singleColumnName>` (and single parameter) which will expand to `from EntityName where <singleColumnName> = ?`"
msgstr "`<singleColumnName>` (带单个参数）语句会被扩展为： `from EntityName where <singleColumnName> = ?` "

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "`<query>` will expand to `from EntityName where <query>`"
msgstr "`<query>` 语句会被扩展为： `from EntityName where <query>` "

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "If your update query does not start with `update`, we support the following additional forms:"
msgstr "如果你的更新语句不是以 `update` 开始，我们还支持以下的形式："

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "`from EntityName ...` which will expand to `update from EntityName ...`"
msgstr "`from EntityName ...​` 语句会被扩展为： `update from EntityName ...​` "

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "`set? <singleColumnName>` (and single parameter) which will expand to `update from EntityName set <singleColumnName> = ?`"
msgstr "`set? <singleColumnName>` (带单个参数）语句会被扩展为： `update from EntityName set <singleColumnName> = ?` "

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "`set? <update-query>` will expand to `update from EntityName set <update-query>`"
msgstr "`set? <update-query>` 语句会被扩展为： `update from EntityName set <update-query>` "

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "If your delete query does not start with `delete`, we support the following additional forms:"
msgstr "如果你的删除语句不是以 `delete` 开始，我们还支持以下的形式："

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "`from EntityName ...` which will expand to `delete from EntityName ...`"
msgstr "`from EntityName ...​` 语句会被扩展为： `delete from EntityName ...​` "

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "`<singleColumnName>` (and single parameter) which will expand to `delete from EntityName where <singleColumnName> = ?`"
msgstr " `<singleColumnName>` (带单个参数）语句会被扩展为： `delete from EntityName where <singleColumnName> = ?` "

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "`<query>` will expand to `delete from EntityName where <query>`"
msgstr "`<query>` 语句会被扩展为： `delete from EntityName where <query>` "

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"You can also write your queries in plain\n"
"link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#hql[HQL]:"
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/hibernate-orm-panache.adoc
#, no-wrap
msgid "Named queries"
msgstr "命名查询"

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "You can reference a named query instead of a (simplified) HQL query by prefixing its name with the '#' character. You can also use named queries for count, update and delete queries."
msgstr "除了上述的简化HQL查询以外，你还可以定义一个命名查询，然后通过'#'字符加命名来（在HQL中）引用它。在计数、更新和删除查询中也可以使用命名查询。"

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"Named queries can only be defined inside your JPA entity classes (being the Panache entity class, or the repository parameterized type),\n"
"or on one of its super classes."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/hibernate-orm-panache.adoc
#, no-wrap
msgid "Query parameters"
msgstr "查询参数"

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "You can pass query parameters by index (1-based) as shown below:"
msgstr "你可以通过索引（从1开始）传递查询参数，如下所示："

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "Or by name using a `Map`:"
msgstr "或者使用 `Map` ，按名字来命名："

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "Or using the convenience class `Parameters` either as is or to build a `Map`:"
msgstr "或者使用方便的类 `Parameters` ，既可以是原样，也可以是建立一个 `Map` 。"

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "Every query operation accepts passing parameters by index (`Object...`), or by name (`Map<String,Object>` or `Parameters`)."
msgstr "每个查询操作都接受按索引（ `Object...` ）或按名称（ `Map<String,Object>` 或 `Parameters` ）传递参数。"

#. type: Title ===
#: _versions/2.7/guides/hibernate-orm-panache.adoc
#, no-wrap
msgid "Query projection"
msgstr "查询映射"

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "Query projection can be done with the `project(Class)` method on the `PanacheQuery` object that is returned by the `find()` methods."
msgstr "查询映射可以使用 `find()` 方法返回的 `PanacheQuery` 对象上的 `project(Class)` 方法来完成。"

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "You can use it to restrict which fields will be returned by the database."
msgstr "你可以用投影限制数据库返回哪些字段。"

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"Hibernate will use **DTO projection** and generate a SELECT clause with the attributes from the projection class.\n"
"This is also called **dynamic instantiation** or **constructor expression**, more info can be found on the Hibernate guide:\n"
"link:https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#hql-select-clause[hql select clause]"
msgstr ""

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"The projection class needs to be a valid Java Bean and have a constructor that contains all its attributes, this constructor will be used to\n"
"instantiate the projection DTO instead of using the entity class. This class must have a matching constructor with all the class attributes as parameters."
msgstr ""

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation. More details about the `@RegisterForReflection` annotation can be found on  the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "We use public fields here, but you can use private fields and getters/setters if you prefer."
msgstr "在这里我们使用public的字段，你也可以使用private字段和对应的getter/setter方法。"

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "This constructor will be used by Hibernate, it must be the only constructor in your class and have all the class attributes as parameters."
msgstr "Hibernate会用到这个构造方法，它必须是类中唯一的构造函数，并且包含所有类属性作为参数。"

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"The implementation of the `project(Class)` method uses the constructor's parameter names to build the select clause of the query,\n"
"so the compiler must be configured to store parameter names inside the compiled class.\n"
"This is enabled by default if you are using the Quarkus Maven archetype. If you are not using it, add the property `<maven.compiler.parameters>true</maven.compiler.parameters>` to your `pom.xml`."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "If in the DTO projection object you have a field from a referenced entity, you can use the `@ProjectedFieldName` annotation to provide the path for the SELECT statement."
msgstr "如果DTO投影对象中有来自引用的实体字段，可以使用 `@ProjectedFieldName` 注解指定SELECT语句使用的查询路径。"

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "The `ownerName` DTO constructor's parameter will be loaded from the `owner.name` HQL property."
msgstr "DTO构造器的 `ownerName` 参数将从 `owner.name` HQL属性加载。"

#. type: Title ==
#: _versions/2.7/guides/hibernate-orm-panache.adoc
#, no-wrap
msgid "Multiple Persistence Units"
msgstr "多个持久化单元"

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "The support for multiple persistence units is described in detail in xref:hibernate-orm.adoc#multiple-persistence-units[the Hibernate ORM guide]."
msgstr "在 link:hibernate-orm.html#multiple-persistence-units[Hibernate ORM指南] 中对多个持久化单元的支持有详细描述。"

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "When using Panache, things are simple:"
msgstr "使用Panache时，事情很简单："

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "A given Panache entity can be attached to only a single persistence unit."
msgstr "一个Panache实体类只能配置到一个持久化单元。"

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "Given that, Panache already provides the necessary plumbing to transparently find the appropriate `EntityManager` associated to a Panache entity."
msgstr "鉴于此，Panache已经提供了必要的管道， 可以透明地找到Panache实体类对应的 `EntityManager` 。"

#. type: Title ==
#: _versions/2.7/guides/hibernate-orm-panache.adoc
#, no-wrap
msgid "Transactions"
msgstr "事务"

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"Make sure to wrap methods modifying your database (e.g. `entity.persist()`) within a transaction. Marking a\n"
"CDI bean method `@Transactional` will do that for you and make that method a transaction boundary. We recommend doing\n"
"so at your application entry point boundaries like your REST endpoint controllers."
msgstr ""

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"JPA batches changes you make to your entities and sends changes (it's called flush) at the end of the transaction or before a query.\n"
"This is usually a good thing as it's more efficient.\n"
"But if you want to check optimistic locking failures, do object validation right away or generally want to get immediate feedback, you can force the flush operation by calling `entity.flush()` or even use `entity.persistAndFlush()` to make it a single method call. This will allow you to catch any `PersistenceException` that could occur when JPA send those changes to the database.\n"
"Remember, this is less efficient so don't abuse it.\n"
"And your transaction still has to be committed."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "Here is an example of the usage of the flush method to allow making a specific action in case of `PersistenceException`:"
msgstr "下面是一个使用 flush 方法的例子，它在捕获到 `PersistenceException` 异常时执行指定操作："

#. type: Title ==
#: _versions/2.7/guides/hibernate-orm-panache.adoc
#, no-wrap
msgid "Lock management"
msgstr "锁管理"

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "Panache provides direct support for database locking with your entity/repository, using `findById(Object, LockModeType)` or `find().withLock(LockModeType)`."
msgstr "Panache支持在实体类/Repository类中直接使用数据库的锁，可使用 `findById(Object, LockModeType)` 或 `find().withLock(LockModeType)` 方法。"

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "The following examples are for the active record pattern, but the same can be used with repositories."
msgstr "下面的例子是针对Active Record模式的，但同样可以应用于Repository模式。"

#. type: Title ===
#: _versions/2.7/guides/hibernate-orm-panache.adoc
#, no-wrap
msgid "First: Locking using findById()."
msgstr "第一：通过findById()方法使用数据库锁。"

#. type: Title ===
#: _versions/2.7/guides/hibernate-orm-panache.adoc
#, no-wrap
msgid "Second: Locking in a find()."
msgstr "第二：通过find()方法使用数据库锁。"

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "Be careful that locks are released when the transaction ends, so the method that invokes the lock query must be annotated with the `@Transactional` annotation."
msgstr "请注意，事务结束时锁会被释放，所以调用了带锁查询的方法必须加上 `@Transactional` 注解。"

#. type: Title ==
#: _versions/2.7/guides/hibernate-orm-panache.adoc
#, no-wrap
msgid "Custom IDs"
msgstr "自定义ID"

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"IDs are often a touchy subject, and not everyone's up for letting them handled by the framework, once again we\n"
"have you covered."
msgstr ""

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"You can specify your own ID strategy by extending `PanacheEntityBase` instead of `PanacheEntity`. Then\n"
"you just declare whatever ID you want as a public field:"
msgstr ""

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"If you're using repositories, then you will want to extend `PanacheRepositoryBase` instead of `PanacheRepository`\n"
"and specify your ID type as an extra type parameter:"
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/hibernate-orm-panache.adoc
#, no-wrap
msgid "Mocking"
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/hibernate-orm-panache.adoc
#, no-wrap
msgid "Using the active record pattern"
msgstr "使用Active Record模式"

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"If you are using the active record pattern you cannot use Mockito directly as it does not support mocking static methods,\n"
"but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static\n"
"methods, including your own."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "Add this dependency to your `pom.xml`:"
msgstr "将此依赖添加到你的 `pom.xml` 中 ："

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "Given this simple entity:"
msgstr "提供这个简单的实体："

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "You can write your mocking test like this:"
msgstr "你可以像这样写你的模拟测试。"

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"Be sure to call your `verify` and `do*` methods on `PanacheMock` rather than `Mockito`, otherwise you won't know\n"
"what mock object to pass."
msgstr ""

#. type: Title ====
#: _versions/2.7/guides/hibernate-orm-panache.adoc
#, no-wrap
msgid "Mocking `EntityManager`, `Session` and entity instance methods"
msgstr "模拟 `EntityManager` , `Session` 及实体类的实例方法"

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "If you need to mock entity instance methods, such as `persist()` you can do it by mocking the Hibernate ORM `Session` object:"
msgstr "如果你需要模拟实体类的实例方法，比如 `persist()` ，可以通过模拟Hibernate ORM的 `Session` 对象来实现："

#. type: Title ===
#: _versions/2.7/guides/hibernate-orm-panache.adoc
#, no-wrap
msgid "Using the repository pattern"
msgstr "使用资源库模式"

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"If you are using the repository pattern you can use Mockito directly, using the `quarkus-junit5-mockito` module,\n"
"which makes mocking beans much easier:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "And this repository:"
msgstr "还有这个储存库："

#. type: Title ==
#: _versions/2.7/guides/hibernate-orm-panache.adoc
#, no-wrap
msgid "How and why we simplify Hibernate ORM mappings"
msgstr "我们为什么简化Hibernate ORM映射？怎么做到的？"

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"When it comes to writing Hibernate ORM entities, there are a number of annoying things that users have grown used to\n"
"reluctantly deal with, such as:"
msgstr ""

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"Duplicating ID logic: most entities need an ID, most people don't care how it's set, because it's not really\n"
"relevant to your model."
msgstr ""

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"Traditional EE patterns advise to split entity definition (the model) from the operations you can do on them\n"
"(DAOs, Repositories), but really that requires a split between the state and its operations even though\n"
"we would never do something like that for regular objects in the Object Oriented architecture, where state and methods\n"
"are in the same class. Moreover, this requires two classes per entity, and requires injection of the DAO or Repository\n"
"where you need to do entity operations, which breaks your edit flow and requires you to get out of the code you're\n"
"writing to set up an injection point before coming back to use it."
msgstr ""

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"Hibernate queries are super powerful, but overly verbose for common operations, requiring you to write queries even\n"
"when you don't need all the parts."
msgstr ""

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"Hibernate is very general-purpose, but does not make it trivial to do trivial operations that make up 90% of our\n"
"model usage."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "With Panache, we took an opinionated approach to tackle all these problems:"
msgstr "通过Panache，我们采取了一种有主见的方法来解决所有这些问题："

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"Make your entities extend `PanacheEntity`: it has an ID field that is auto-generated. If you require\n"
"a custom ID strategy, you can extend `PanacheEntityBase` instead and handle the ID yourself."
msgstr ""

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"Use public fields. Get rid of dumb getter and setters. Hibernate ORM w/o Panache also doesn't require you to use getters and setters,\n"
"but Panache will additionally generate all getters and setters that are missing, and rewrite every access to these fields to use the accessor methods. This way you can still\n"
"write _useful_ accessors when you need them, which will be used even though your entity users still use field accesses. This implies that from the Hibernate perspective you're using accessors via getters and setters even while it looks like field accessors."
msgstr ""

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"With the active record pattern: put all your entity logic in static methods in your entity class and don't create DAOs.\n"
"Your entity superclass comes with lots of super useful static methods, and you can add your own in your entity class.\n"
"Users can just start using your entity `Person` by typing `Person.` and getting completion for all the operations in a single place."
msgstr ""

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"Don't write parts of the query that you don't need: write `Person.find(\"order by name\")` or\n"
"`Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive)` or even better\n"
"`Person.find(\"name\", \"stef\")`."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "That's all there is to it: with Panache, Hibernate ORM has never looked so trim and neat."
msgstr "以上就是它的全部内容：有了Panache，Hibernate ORM看起来变得如此轻量和整洁。"

#. type: Title ==
#: _versions/2.7/guides/hibernate-orm-panache.adoc
#, no-wrap
msgid "Defining entities in external projects or jars"
msgstr "在外部项目或jar中定义实体"

#. type: Plain text
#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid "Hibernate ORM with Panache relies on compile-time bytecode enhancements to your entities."
msgstr "Hibernate ORM Panache依赖于编译时对实体类的字节码增强。"

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"It attempts to identify archives with Panache entities (and consumers of Panache entities)\n"
"by the presence of the marker file `META-INF/panache-archive.marker`. Panache includes an\n"
"annotation processor that will automatically create this file in archives that depend on\n"
"Panache (even indirectly). If you have disabled annotation processors you may need to create\n"
"this file manually in some cases."
msgstr ""

#: _versions/2.7/guides/hibernate-orm-panache.adoc
msgid ""
"If you include the jpa-modelgen annotation processor this will exclude the Panache\n"
"annotation processor by default. If you do this you should either create the marker file\n"
"yourself, or add the `quarkus-panache-common` as well, as shown below:"
msgstr ""
