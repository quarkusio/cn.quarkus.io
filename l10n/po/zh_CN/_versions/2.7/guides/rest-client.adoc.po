# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.7/guides/rest-client.adoc:6
#, no-wrap
msgid "Using the REST Client"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:12
msgid "This guide explains how to use the RESTEasy REST Client in order to interact with REST APIs with very little effort."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:14
msgid "there is another guide if you need to write server xref:rest-json.adoc[JSON REST APIs]."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/rest-client.adoc:15
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: upstream/_versions/2.7/guides/rest-client.adoc:19
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:23
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:25
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:27
msgid "The solution is located in the `rest-client-quickstart` {quickstarts-tree-url}/rest-client-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/rest-client.adoc:28
#, no-wrap
msgid "Creating the Maven project"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:31
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:37
msgid "This command generates the Maven project with a REST endpoint and imports:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:39
msgid "the `resteasy` and `resteasy-jackson` extensions for the REST server support;"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:40
msgid "the `rest-client` and `rest-client-jackson` extensions for the REST client support."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:43
msgid "If you already have your Quarkus project configured, you can add the `rest-client` and the `rest-client-jackson` extensions to your project by running the following command in your project base directory:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:48
msgid "This will add the following to your `pom.xml`:"
msgstr ""

#. type: Block title
#: upstream/_versions/2.7/guides/rest-client.adoc:50
#: upstream/_versions/2.7/guides/rest-client.adoc:629
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:60
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-rest-client</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-rest-client-jackson</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/2.7/guides/rest-client.adoc:63
#: upstream/_versions/2.7/guides/rest-client.adoc:641
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:67
#, no-wrap
msgid ""
"implementation(\"io.quarkus:quarkus-rest-client\")\n"
"implementation(\"io.quarkus:quarkus-rest-client-jackson\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/rest-client.adoc:69
#, no-wrap
msgid "Setting up the model"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:73
msgid "In this guide we will be demonstrating how to consume part of the REST API supplied by the link:https://stage.code.quarkus.io[stage.code.quarkus.io] service.  Our first order of business is to set up the model we will be using, in the form of an `Extension` POJO."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:75
msgid "Create a `src/main/java/org/acme/rest/client/Extension.java` file and set the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:79
#: upstream/_versions/2.7/guides/rest-client.adoc:101
#: upstream/_versions/2.7/guides/rest-client.adoc:147
#: upstream/_versions/2.7/guides/rest-client.adoc:247
#: upstream/_versions/2.7/guides/rest-client.adoc:282
#: upstream/_versions/2.7/guides/rest-client.adoc:325
#: upstream/_versions/2.7/guides/rest-client.adoc:353
#: upstream/_versions/2.7/guides/rest-client.adoc:408
#: upstream/_versions/2.7/guides/rest-client.adoc:436
#: upstream/_versions/2.7/guides/rest-client.adoc:501
#: upstream/_versions/2.7/guides/rest-client.adoc:535
#: upstream/_versions/2.7/guides/rest-client.adoc:661
#, no-wrap
msgid "package org.acme.rest.client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:81
#, no-wrap
msgid "import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:83
#, no-wrap
msgid "public class Extension {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:88
#, no-wrap
msgid ""
"    public String id;\n"
"    public String name;\n"
"    public String shortName;\n"
"    public List<String> keywords;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:90
#: upstream/_versions/2.7/guides/rest-client.adoc:346
#: upstream/_versions/2.7/guides/rest-client.adoc:384
#: upstream/_versions/2.7/guides/rest-client.adoc:722
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:93
msgid "The model above is only a subset of the fields provided by the service, but it suffices for the purposes of this guide."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/rest-client.adoc:94
#, no-wrap
msgid "Create the interface"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:97
msgid "Using the RESTEasy REST Client is as simple as creating an interface using the proper JAX-RS and MicroProfile annotations. In our case the interface should be created at `src/main/java/org/acme/rest/client/ExtensionsService.java` and have the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:104
#: upstream/_versions/2.7/guides/rest-client.adoc:334
#: upstream/_versions/2.7/guides/rest-client.adoc:417
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import org.jboss.resteasy.annotations.jaxrs.QueryParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:108
#: upstream/_versions/2.7/guides/rest-client.adoc:155
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:112
#: upstream/_versions/2.7/guides/rest-client.adoc:159
#: upstream/_versions/2.7/guides/rest-client.adoc:338
#: upstream/_versions/2.7/guides/rest-client.adoc:423
#, no-wrap
msgid ""
"@Path(\"/extensions\")\n"
"@RegisterRestClient\n"
"public interface ExtensionsService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:116
#, no-wrap
msgid ""
"    @GET\n"
"    Set<Extension> getById(@QueryParam String id);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:119
msgid "The `getById` method gives our code the ability to get an extension by id from the Code Quarkus API. The client will handle all the networking and marshalling leaving our code clean of such technical details."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:121
msgid "The purpose of the annotations in the code above is the following:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:124
msgid "`@RegisterRestClient` allows Quarkus to know that this interface is meant to be available for CDI injection as a REST Client"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:125
msgid "`@Path`, `@GET` and `@PathParam` are the standard JAX-RS annotations used to define how to access the service"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.7/guides/rest-client.adoc:132
msgid "When a JSON extension is installed such as `quarkus-rest-client-jackson` or `quarkus-rest-client-jsonb`, Quarkus will use the `application/json` media type by default for most return values, unless the media type is explicitly set via `@Produces` or `@Consumes` annotations (there are some exceptions for well known types, such as `String` and `File`, which default to `text/plain` and `application/octet-stream` respectively)."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.7/guides/rest-client.adoc:135
msgid "If you don't want JSON by default you can set `quarkus.resteasy-json.default-json=false` and the default will change back to being auto-negotiated. If you set this you will need to add `@Produces(MediaType.APPLICATION_JSON)` and `@Consumes(MediaType.APPLICATION_JSON)` to your endpoints in order to use JSON."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.7/guides/rest-client.adoc:138
msgid "If you don't rely on the JSON default, it is heavily recommended to annotate your endpoints with the `@Produces` and `@Consumes` annotations to define precisely the expected content-types.  It will allow to narrow down the number of JAX-RS providers (which can be seen as converters) included in the native executable."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.7/guides/rest-client.adoc:140
#, no-wrap
msgid "Path Parameters"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:143
msgid "If the GET request requires path parameters you can leverage the `@PathParam(\"parameter-name\")` annotation instead of (or in addition to) the `@QueryParam`. Path and query parameters can be combined, as required, as illustrated in a mock example below."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:151
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import org.jboss.resteasy.annotations.jaxrs.PathParam;\n"
"import org.jboss.resteasy.annotations.jaxrs.QueryParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:164
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/stream/{stream}\")\n"
"    Set<Extension> getByStream(@PathParam String stream, @QueryParam(\"id\") String id);\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/rest-client.adoc:167
#, no-wrap
msgid "Create the configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:171
msgid "In order to determine the base URL to which REST calls will be made, the REST Client uses configuration from `application.properties`.  The name of the property needs to follow a certain convention which is best displayed in the following code:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:177
#, no-wrap
msgid ""
"# Your configuration properties\n"
"quarkus.rest-client.\"org.acme.rest.client.ExtensionsService\".url=https://stage.code.quarkus.io/api # // <1>\n"
"quarkus.rest-client.\"org.acme.rest.client.ExtensionsService\".scope=javax.inject.Singleton # // <2>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:181
msgid "Having this configuration means that all requests performed using `ExtensionsService` will use `https://stage.code.quarkus.io` as the base URL.  Using the configuration above, calling the `getById` method of `ExtensionsService` with a value of `io.quarkus:quarkus-rest-client` would result in an HTTP GET request being made to `https://stage.code.quarkus.io/api/extensions?id=io.quarkus:quarkus-rest-client`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:183
msgid "Having this configuration means that the default scope of `ExtensionsService` will be `@Singleton`. Supported scope values are `@Singleton`, `@Dependent`, `@ApplicationScoped` and `@RequestScoped`. The default scope is `@Dependent`.  The default scope can also be defined on the interface."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:185
msgid "Note that `org.acme.rest.client.ExtensionsService` _must_ match the fully qualified name of the `ExtensionsService` interface we created in the previous section."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.7/guides/rest-client.adoc:189
msgid "The standard MicroProfile Rest Client properties notation can also be used to configure the client:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:194
#, no-wrap
msgid ""
"org.acme.rest.client.ExtensionsService/mp-rest/url=https://stage.code.quarkus.io/api\n"
"org.acme.rest.client.ExtensionsService/mp-rest/scope=javax.inject.Singleton\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:197
msgid "If a property is specified via both the Quarkus notation and the MicroProfile notation, the Quarkus notation takes a precedence."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.7/guides/rest-client.adoc:201
msgid "To facilitate the configuration, you can use the `@RegisterRestClient` `configKey` property that allows to use another configuration root than the fully qualified name of your interface."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:209
#, no-wrap
msgid ""
"@RegisterRestClient(configKey=\"extensions-api\")\n"
"public interface ExtensionsService {\n"
"    [...]\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:216
#, no-wrap
msgid ""
"# Your configuration properties\n"
"quarkus.rest-client.extensions-api.url=https://stage.code.quarkus.io/api\n"
"quarkus.rest-client.extensions-api.scope=javax.inject.Singleton\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.7/guides/rest-client.adoc:218
#, no-wrap
msgid "Disabling Hostname Verification"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:221
msgid "To disable the SSL hostname verification for a specific REST client, add the following property to your configuration:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:225
#, no-wrap
msgid "quarkus.rest-client.extensions-api.hostname-verifier=io.quarkus.restclient.NoopHostnameVerifier\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.7/guides/rest-client.adoc:227
#, no-wrap
msgid "Disabling SSL verifications"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:230
msgid "To disable all SSL verifications, add the following property to your configuration:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:234
#, no-wrap
msgid "quarkus.tls.trust-all=true\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.7/guides/rest-client.adoc:238
msgid "This setting should not be used in production as it will disable any kind of SSL verification."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/rest-client.adoc:240
#, no-wrap
msgid "Create the JAX-RS resource"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:243
msgid "Create the `src/main/java/org/acme/rest/client/ExtensionsResource.java` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:250
#: upstream/_versions/2.7/guides/rest-client.adoc:363
#: upstream/_versions/2.7/guides/rest-client.adoc:446
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RestClient;\n"
"import org.jboss.resteasy.annotations.jaxrs.PathParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:255
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:258
#: upstream/_versions/2.7/guides/rest-client.adoc:366
#: upstream/_versions/2.7/guides/rest-client.adoc:451
#, no-wrap
msgid ""
"@Path(\"/extension\")\n"
"public class ExtensionsResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:262
#: upstream/_versions/2.7/guides/rest-client.adoc:370
#: upstream/_versions/2.7/guides/rest-client.adoc:455
#, no-wrap
msgid ""
"    @Inject\n"
"    @RestClient\n"
"    ExtensionsService extensionsService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:269
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/id/{id}\")\n"
"    public Set<Extension> id(@PathParam String id) {\n"
"        return extensionsService.getById(id);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:272
msgid "Note that in addition to the standard CDI `@Inject` annotation, we also need to use the MicroProfile `@RestClient` annotation to inject `ExtensionsService`."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/rest-client.adoc:273
#, no-wrap
msgid "Update the test"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:277
msgid "We also need to update the functional test to reflect the changes made to the endpoint.  Edit the `src/test/java/org/acme/rest/client/ExtensionsResourceTest.java` file and change the content of the `testExtensionIdEndpoint` method to:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:287
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.hasItem;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
"import static org.hamcrest.Matchers.greaterThan;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:290
#, no-wrap
msgid ""
"import org.acme.rest.client.resources.WireMockExtensionsResource;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:293
#, no-wrap
msgid ""
"import io.quarkus.test.common.QuarkusTestResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:297
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(WireMockExtensionsResource.class)\n"
"public class ExtensionsResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:311
#, no-wrap
msgid ""
"    @Test\n"
"    public void testExtensionsIdEndpoint() {\n"
"        given()\n"
"            .when().get(\"/extension/id/io.quarkus:quarkus-rest-client\")\n"
"            .then()\n"
"            .statusCode(200)\n"
"            .body(\"$.size()\", is(1),\n"
"                \"[0].id\", is(\"io.quarkus:quarkus-rest-client\"),\n"
"                \"[0].name\", is(\"REST Client\"),\n"
"                \"[0].keywords.size()\", greaterThan(1),\n"
"                \"[0].keywords\", hasItem(\"rest-client\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:314
msgid "The code above uses link:http://rest-assured.io/[REST Assured]'s link:https://github.com/rest-assured/rest-assured/wiki/GettingStarted#jsonpath[json-path] capabilities."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/rest-client.adoc:316
#, no-wrap
msgid "Async Support"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:321
msgid "The rest client supports asynchronous rest calls.  Async support comes in 2 flavors: you can return a `CompletionStage` or a `Uni` (requires the `quarkus-rest-client-mutiny` extension).  Let's see it in action by adding a `getByIdAsync` method in our `ExtensionsService` REST interface. The code should look like:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:328
#: upstream/_versions/2.7/guides/rest-client.adoc:356
#: upstream/_versions/2.7/guides/rest-client.adoc:411
#: upstream/_versions/2.7/guides/rest-client.adoc:439
#: upstream/_versions/2.7/guides/rest-client.adoc:504
#, no-wrap
msgid ""
"import java.util.Set;\n"
"import java.util.concurrent.CompletionStage;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:331
#: upstream/_versions/2.7/guides/rest-client.adoc:414
#: upstream/_versions/2.7/guides/rest-client.adoc:507
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:341
#: upstream/_versions/2.7/guides/rest-client.adoc:521
#: upstream/_versions/2.7/guides/rest-client.adoc:571
#, no-wrap
msgid ""
"    @GET\n"
"    Set<Extension> getById(@QueryParam String id);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:344
#: upstream/_versions/2.7/guides/rest-client.adoc:524
#: upstream/_versions/2.7/guides/rest-client.adoc:574
#, no-wrap
msgid ""
"    @GET\n"
"    CompletionStage<Set<Extension>> getByIdAsync(@QueryParam String id);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:349
msgid "Open the `src/main/java/org/acme/rest/client/ExtensionsResource.java` file and update it with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:360
#: upstream/_versions/2.7/guides/rest-client.adoc:443
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:376
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/id/{id}\")\n"
"    public Set<Extension> id(@PathParam String id) {\n"
"        return extensionsService.getById(id);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:382
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/id-async/{id}\")\n"
"    public CompletionStage<Set<Extension>> idAsync(@PathParam String id) {\n"
"        return extensionsService.getByIdAsync(id);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:387
msgid "To test asynchronous methods, add the test method below in `ExtensionsResourceTest`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:401
#, no-wrap
msgid ""
"@Test\n"
"public void testExtensionIdAsyncEndpoint() {\n"
"    given()\n"
"        .when().get(\"/extension/id-async/io.quarkus:quarkus-rest-client\")\n"
"        .then()\n"
"        .statusCode(200)\n"
"        .body(\"$.size()\", is(1),\n"
"            \"[0].id\", is(\"io.quarkus:quarkus-rest-client\"),\n"
"            \"[0].name\", is(\"REST Client\"),\n"
"            \"[0].keywords.size()\", greaterThan(1),\n"
"            \"[0].keywords\", hasItem(\"rest-client\"));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:404
msgid "The `Uni` version is very similar:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:419
#: upstream/_versions/2.7/guides/rest-client.adoc:448
#: upstream/_versions/2.7/guides/rest-client.adoc:513
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:425
#: upstream/_versions/2.7/guides/rest-client.adoc:458
#, no-wrap
msgid "    // ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:429
#: upstream/_versions/2.7/guides/rest-client.adoc:528
#: upstream/_versions/2.7/guides/rest-client.adoc:578
#, no-wrap
msgid ""
"    @GET\n"
"    Uni<Set<Extension>> getByIdAsUni(@QueryParam String id);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:432
msgid "The `ExtensionsResource` becomes:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:465
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/id-uni/{id}\")\n"
"    public Uni<Set<Extension>> idMutiny(@PathParam String id) {\n"
"        return extensionsService.getByIdAsUni(id);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Block title
#: upstream/_versions/2.7/guides/rest-client.adoc:468
#, no-wrap
msgid "Mutiny"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.7/guides/rest-client.adoc:472
msgid "The previous snippet uses Mutiny reactive types.  If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:476
msgid "When returning a `Uni`, every _subscription_ invokes the remote service.  It means you can re-send the request by re-subscribing on the `Uni`, or use a `retry` as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:481
#, no-wrap
msgid "@Inject @RestClient ExtensionsService extensionsService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:483
#, no-wrap
msgid "// ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:486
#, no-wrap
msgid ""
"extensionsService.getByIdAsUni(id)\n"
"    .onFailure().retry().atMost(10);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:491
msgid "If you use a `CompletionStage`, you would need to call the service's method to retry.  This difference comes from the laziness aspect of Mutiny and its subscription protocol.  More details about this can be found in https://smallrye.io/smallrye-mutiny/#_uni_and_multi[the Mutiny documentation]."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/rest-client.adoc:492
#, no-wrap
msgid "Custom headers support"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:495
msgid "The MicroProfile REST client allows amending request headers by registering a `ClientHeadersFactory` with the `@RegisterClientHeaders` annotation."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:497
msgid "Let's see it in action by adding a `@RegisterClientHeaders` annotation pointing to a `RequestUUIDHeaderFactory` class in our `ExtensionsService` REST interface:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:511
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterClientHeaders;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import org.jboss.resteasy.annotations.jaxrs.QueryParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:518
#, no-wrap
msgid ""
"@Path(\"/extensions\")\n"
"@RegisterRestClient\n"
"@RegisterClientHeaders(RequestUUIDHeaderFactory.class)\n"
"public interface ExtensionsService {\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:531
msgid "And the `RequestUUIDHeaderFactory` would look like:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:537
#, no-wrap
msgid "import org.eclipse.microprofile.rest.client.ext.ClientHeadersFactory;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:542
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.ws.rs.core.MultivaluedHashMap;\n"
"import javax.ws.rs.core.MultivaluedMap;\n"
"import java.util.UUID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:545
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class RequestUUIDHeaderFactory implements ClientHeadersFactory {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:553
#, no-wrap
msgid ""
"    @Override\n"
"    public MultivaluedMap<String, String> update(MultivaluedMap<String, String> incomingHeaders, MultivaluedMap<String, String> clientOutgoingHeaders) {\n"
"        MultivaluedMap<String, String> result = new MultivaluedHashMap<>();\n"
"        result.add(\"X-request-uuid\", UUID.randomUUID().toString());\n"
"        return result;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:557
msgid "As you see in the example above, you can make your `ClientHeadersFactory` implementation a CDI bean by annotating it with a scope-defining annotation, such as `@Singleton`, `@ApplicationScoped`, etc."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.7/guides/rest-client.adoc:559
#, no-wrap
msgid "Default header factory"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:562
msgid "You can also use `@RegisterClientHeaders` annotation without any custom factory specified. In that case the `DefaultClientHeadersFactoryImpl` factory will be used and all headers listed in `org.eclipse.microprofile.rest.client.propagateHeaders` configuration property will be amended. Individual header names are comma-separated."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:568
#, no-wrap
msgid ""
"@Path(\"/extensions\")\n"
"@RegisterRestClient\n"
"@RegisterClientHeaders\n"
"public interface ExtensionsService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:584
#, no-wrap
msgid "org.eclipse.microprofile.rest.client.propagateHeaders=Authorization,Proxy-Authorization\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/rest-client.adoc:586
#, no-wrap
msgid "Package and run the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:589
msgid "Run the application with:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:593
msgid "Open your browser to http://localhost:8080/extension/id/io.quarkus:quarkus-rest-client."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:595
msgid "You should see a JSON object containing some basic information about the REST Client extension."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:597
msgid "As usual, the application can be packaged using:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:601
msgid "And executed with `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:603
msgid "You can also generate the native executable with:"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/rest-client.adoc:606
#, no-wrap
msgid "REST Client and RESTEasy interactions"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:610
msgid "In Quarkus, the REST Client extension and xref:rest-json.adoc[the RESTEasy extension] share the same infrastructure.  One important consequence of this consideration is that they share the same list of providers (in the JAX-RS meaning of the word)."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:613
msgid "For instance, if you declare a `WriterInterceptor`, it will by default intercept both the servers calls and the client calls, which might not be the desired behavior."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:615
msgid "However, you can change this default behavior and constrain a provider to:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:617
msgid "only consider *client* calls by adding the `@ConstrainedTo(RuntimeType.CLIENT)` annotation to your provider;"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:618
msgid "only consider *server* calls by adding the `@ConstrainedTo(RuntimeType.SERVER)` annotation to your provider."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/rest-client.adoc:620
#, no-wrap
msgid "Using a Mock HTTP Server for tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:625
msgid "Setting up a mock HTTP server, against which tests are run, is a common testing pattern.  Examples of such servers are link:http://wiremock.org/[Wiremock] and link:https://docs.hoverfly.io/projects/hoverfly-java/en/latest/index.html[Hoverfly].  In this section we'll demonstrate how Wiremock can be leveraged for testing the `ExtensionsService` which was developed above."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:627
msgid "First of all, Wiremock needs to be added as a test dependency. For a Maven project that would happen like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:637
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>com.github.tomakehurst</groupId>\n"
"    <artifactId>wiremock-jre8</artifactId>\n"
"    <scope>test</scope>\n"
"    <version>${wiremock.version}</version> <1>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:639
#: upstream/_versions/2.7/guides/rest-client.adoc:646
msgid "Use a proper Wiremock version. All available versions can be found link:https://search.maven.org/artifact/com.github.tomakehurst/wiremock-jre8[here]."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:644
#, no-wrap
msgid "testImplementation(\"com.github.tomakehurst:wiremock-jre8:$wiremockVersion\") <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:650
msgid "In Quarkus tests when some service needs to be started before the Quarkus tests are ran, we utilize the `@io.quarkus.test.common.QuarkusTestResource` annotation to specify a `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which can start the service and supply configuration values that Quarkus will use."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.7/guides/rest-client.adoc:654
msgid "For more details about `@QuarkusTestResource` refer to xref:getting-started-testing.adoc#quarkus-test-resource[this part of the documentation]."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:657
msgid "Let's create an implementation of `QuarkusTestResourceLifecycleManager` called `WiremockExtensions` like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:664
#, no-wrap
msgid ""
"import java.util.Collections;\n"
"import java.util.Map;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:667
#, no-wrap
msgid ""
"import com.github.tomakehurst.wiremock.WireMockServer;\n"
"import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:669
#, no-wrap
msgid "import static com.github.tomakehurst.wiremock.client.WireMock.*; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:671
#, no-wrap
msgid "public class WireMockExtensions implements QuarkusTestResourceLifecycleManager {  // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:673
#, no-wrap
msgid "    private WireMockServer wireMockServer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:678
#, no-wrap
msgid ""
"    @Override\n"
"    public Map<String, String> start() {\n"
"        wireMockServer = new WireMockServer();\n"
"        wireMockServer.start(); // <3>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:688
#, no-wrap
msgid ""
"        stubFor(get(urlEqualTo(\"/extensions?id=io.quarkus:quarkus-rest-client\"))   // <4>\n"
"                .willReturn(aResponse()\n"
"                        .withHeader(\"Content-Type\", \"application/json\")\n"
"                        .withBody(\n"
"                            \"[{\" +\n"
"                            \"\\\"id\\\": \\\"io.quarkus:quarkus-rest-client\\\",\" +\n"
"                            \"\\\"name\\\": \\\"REST Client\\\"\" +\n"
"                            \"}]\"\n"
"                        )));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:690
#, no-wrap
msgid "        stubFor(get(urlMatching(\".*\")).atPriority(10).willReturn(aResponse().proxiedFrom(\"https://stage.code.quarkus.io/api\")));   // <5>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:693
#, no-wrap
msgid ""
"        return Collections.singletonMap(\"quarkus.rest-client.\\\"org.acme.rest.client.ExtensionsService\\\".url\", wireMockServer.baseUrl()); // <6>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:701
#, no-wrap
msgid ""
"    @Override\n"
"    public void stop() {\n"
"        if (null != wireMockServer) {\n"
"            wireMockServer.stop();  // <7>\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:704
msgid "Statically importing the methods in the Wiremock package makes it easier to read the test."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:705
msgid "The `start` method is invoked by Quarkus before any test is run and returns a `Map` of configuration properties that apply during the test execution."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:706
msgid "Launch Wiremock."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:707
msgid "Configure Wiremock to stub the calls to `/extensions?id=io.quarkus:quarkus-rest-client` by returning a specific canned response."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:708
msgid "All HTTP calls that have not been stubbed are handled by calling the real service. This is done for demonstration purposes, as it is not something that would usually happen in a real test."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:710
msgid "As the `start` method returns configuration that applies for tests, we set the rest-client property that controls the base URL which is used by the implementation of `ExtensionsService` to the base URL where Wiremock is listening for incoming requests."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:711
msgid "When all tests have finished, shutdown Wiremock."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:714
msgid "The `ExtensionsResourceTest` test class needs to be annotated like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-client.adoc:720
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(WireMockExtensions.class)\n"
"public class ExtensionsResourceTest {\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.7/guides/rest-client.adoc:727
msgid "`@QuarkusTestResource` applies to all tests, not just `ExtensionsResourceTest`."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/rest-client.adoc:729
#, no-wrap
msgid "Further reading"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-client.adoc:731
msgid "link:https://download.eclipse.org/microprofile/microprofile-rest-client-2.0/microprofile-rest-client-spec-2.0.html[MicroProfile Rest Client specification]"
msgstr ""
