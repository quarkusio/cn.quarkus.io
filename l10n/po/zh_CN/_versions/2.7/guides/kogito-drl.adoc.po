# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.7/guides/kogito-drl.adoc
#, no-wrap
msgid "Using Kogito to add rule engine capabilities to an application"
msgstr "使用Kogito为应用程序添加规则引擎功能"

#. type: Plain text
#: _versions/2.7/guides/kogito-drl.adoc
#, fuzzy
msgid "This guide demonstrates how your Quarkus application can use Kogito to add DRL files with rules."
msgstr "本指南演示了 Quarkus 应用程序如何使用 Kogito 添加带有规则的 DRL 文件。"

#: _versions/2.7/guides/kogito-drl.adoc
#, fuzzy
msgid ""
"Kogito is a next generation business automation toolkit that originates from well known Open Source projects\n"
"Drools (for business rules) and jBPM (for business processes). Kogito aims at providing another approach\n"
"to business automation where the main message is to expose your business knowledge (processes, rules and decisions)\n"
"in a domain specific way."
msgstr "Kogito 是下一代业务自动化工具包，源自著名的开源项目 Drools（用于业务规则）和 jBPM（用于业务流程）。Kogito 旨在为业务自动化提供另一种方法，其主旨是以特定领域的方式公开业务知识（流程、规则和决策）。"

#. type: Title ==
#: _versions/2.7/guides/kogito-drl.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: _versions/2.7/guides/kogito-drl.adoc
#, no-wrap
msgid "Architecture"
msgstr "应用结构"

#. type: Plain text
#: _versions/2.7/guides/kogito-drl.adoc
#, fuzzy
msgid "In this example, we build a very simple microservice which offers one REST endpoint:"
msgstr "在本例中，我们构建了一个非常简单的微服务，提供一个 REST 端点："

#. type: Plain text
#: _versions/2.7/guides/kogito-drl.adoc
#, fuzzy
msgid "`/find-approved`"
msgstr "`/find-approved`"

#: _versions/2.7/guides/kogito-drl.adoc
#, fuzzy
msgid ""
"This endpoint will be automatically generated based on the query inserted in the Rule Unit of the DRL file.\n"
"It's an example of a stateless invocation (also called \"pure function invocation\") in which the execution of our business rules doesn't have any side effects.\n"
"The output value returned is based uniquely on the input provided."
msgstr "该端点将根据 DRL 文件的规则单元中插入的查询自动生成。这是一个无状态调用（也称为 \"纯函数调用\"）的示例，其中业务规则的执行不会产生任何副作用。返回的输出值完全基于所提供的输入。"

#. type: Title ===
#: _versions/2.7/guides/kogito-drl.adoc
#, fuzzy, no-wrap
msgid "Business rule"
msgstr "业务规则"

#: _versions/2.7/guides/kogito-drl.adoc
#, fuzzy
msgid ""
"A business rule allows to externalise decision logic into reusable pieces that can be easily\n"
"used in declarative way. There are multiple ways of writing rules like https://drools.org/learn/dmn.html[DMN models],\n"
"decision tables, decision trees, rules, etc. For this example we focus on the rule format backed by DRL\n"
"(Drools Rule Language)."
msgstr "业务规则允许将决策逻辑外部化为可重复使用的片段，这些片段可以很容易地以声明的方式使用。编写规则有多种方式，如 link:https://drools.org/learn/dmn.html[DMN 模型] 、决策表、决策树、规则等。在本例中，我们将重点介绍由 DRL（Drools 规则语言）支持的规则格式。"

#. type: Title ==
#: _versions/2.7/guides/kogito-drl.adoc
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#: _versions/2.7/guides/kogito-drl.adoc
#, fuzzy
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the complete example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。不过，您也可以直接查看完整示例。"

#. type: Plain text
#: _versions/2.7/guides/kogito-drl.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: _versions/2.7/guides/kogito-drl.adoc
#, fuzzy
msgid "The solution is located in the `kogito-drl-quickstart` {quickstarts-tree-url}/kogito-quickstart[directory]."
msgstr "解决方案位于 `kogito-drl-quickstart` {quickstarts-tree-url}/kogito-quickstart[目录]。"

#. type: Title ==
#: _versions/2.7/guides/kogito-drl.adoc
#, no-wrap
msgid "Creating the Maven Project"
msgstr "创建Maven项目"

#. type: Plain text
#: _versions/2.7/guides/kogito-drl.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#: _versions/2.7/guides/kogito-drl.adoc
#, fuzzy
msgid ""
"This command generates a Maven project, importing the `kogito-quarkus-rules` extension\n"
"that comes with all needed dependencies and configuration to equip your application\n"
"with business automation.\n"
"It also imports the `resteasy-jackson` extension that is needed for Kogito to expose REST services."
msgstr "该命令生成一个 Maven 项目，导入 `kogito-quarkus-rules` 扩展，该扩展包含所有必要的依赖项和配置，可为您的应用程序配备业务自动化功能。它还会导入 `resteasy-jackson` 扩展，这是 Kogito 公开 REST 服务所必需的。"

#: _versions/2.7/guides/kogito-drl.adoc
#, fuzzy
msgid ""
"If you already have your Quarkus project configured, you can add the `kogito-quarkus-rules` extension\n"
"to your project by running the following command in your project base directory:"
msgstr "如果已经配置了 Quarkus 项目，可以在项目基本目录下运行以下命令，将 `kogito-quarkus-rules` 扩展添加到项目中："

#. type: Plain text
#: _versions/2.7/guides/kogito-drl.adoc
msgid "This will add the following to your build file:"
msgstr "这会将以下内容添加到你的构建文件中:"

#. type: Block title
#: _versions/2.7/guides/kogito-drl.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/2.7/guides/kogito-drl.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: _versions/2.7/guides/kogito-drl.adoc
#, no-wrap
msgid "Writing the application"
msgstr "编写应用程序"

#: _versions/2.7/guides/kogito-drl.adoc
#, fuzzy
msgid ""
"Let's start from the application domain model.\n"
"This application will approve Loan Applications so we have a class with all the details of the wanted Loan:"
msgstr "让我们从应用程序的领域模型开始。该应用程序将审批贷款申请，因此我们有一个包含所需贷款所有详细信息的类："

#. type: Plain text
#: _versions/2.7/guides/kogito-drl.adoc
#, fuzzy
msgid "And another class with the details of the Applicant:"
msgstr "另一类是申请人的详细信息："

#: _versions/2.7/guides/kogito-drl.adoc
#, fuzzy
msgid ""
"Next, we create a rule file `loan-rules.drl` inside the `src/main/resources/org/acme/kogito/queries` folder of\n"
"the generated project."
msgstr "接下来，我们在生成项目的 `src/main/resources/org/acme/kogito/queries` 文件夹中创建一个规则文件 `loan-rules.drl` 。"

#: _versions/2.7/guides/kogito-drl.adoc
#, fuzzy
msgid ""
"In this file there are some example rules to decide whether the Loan should be approved or not. The service wants the Applicant to have an age equal or greater than 20 and more than 1000 currency on their bank account.\n"
"The amount of the Loan shouldn't be more than the `maxAmount`."
msgstr "该文件中有一些决定是否批准贷款的示例规则。该服务希望申请人的年龄等于或大于 20 岁，银行账户上有 1000 多美元。贷款金额不应超过 `maxAmount` 。"

#. type: Plain text
#: _versions/2.7/guides/kogito-drl.adoc
#, fuzzy
msgid "This example uses Rule Units, a new concept introduced in Kogito that helps users to encapsulate the set of rules and the facts against which those rules will be matched."
msgstr "本示例使用了 Kogito 中引入的新概念--规则单元（Rule Units），它可以帮助用户封装规则集和与这些规则匹配的事实。"

#. type: Plain text
#: _versions/2.7/guides/kogito-drl.adoc
#, fuzzy
msgid "The facts inserted will be inserted into a `DataStore`, a type-safe entry point. To make everything work, we need to define both the RuleUnit and the DataStore."
msgstr "插入的事实将被插入 `DataStore` ，这是一个类型安全的入口点。为了使一切正常，我们需要定义 RuleUnit 和 DataStore。"

#. type: Plain text
#: _versions/2.7/guides/kogito-drl.adoc
#, fuzzy
msgid "And that's it: REST endpoint to validate Loan Applications will be automatically generated from this Rule Unit."
msgstr "就是这样：验证贷款申请的 REST 端点将从该规则单元自动生成。"

#. type: Title ==
#: _versions/2.7/guides/kogito-drl.adoc
#, fuzzy, no-wrap
msgid "Running and Using the Application"
msgstr "运行和使用应用程序"

#. type: Title ===
#: _versions/2.7/guides/kogito-drl.adoc
#, fuzzy, no-wrap
msgid "Running in Dev Mode"
msgstr "在开发模式下运行"

#. type: Plain text
#: _versions/2.7/guides/kogito-drl.adoc
#, fuzzy
msgid "To run the microservice in dev mode, use:"
msgstr "要在开发模式下运行微服务，请使用。"

#. type: Title ===
#: _versions/2.7/guides/kogito-drl.adoc
#, fuzzy, no-wrap
msgid "Running in JVM Mode"
msgstr "在JVM模式下运行"

#. type: Plain text
#: _versions/2.7/guides/kogito-drl.adoc
#, fuzzy
msgid "When you're done playing with dev mode you can run it as a standard Java application."
msgstr "当你玩完开发模式后，可以将其作为标准 Java 应用程序运行。"

#. type: Plain text
#: _versions/2.7/guides/kogito-drl.adoc
msgid "First compile it:"
msgstr "首先编译它："

#. type: Plain text
#: _versions/2.7/guides/kogito-drl.adoc
msgid "Then run it:"
msgstr "然后运行："

#. type: Title ===
#: _versions/2.7/guides/kogito-drl.adoc
#, fuzzy, no-wrap
msgid "Running in Native Mode"
msgstr "在本地模式下运行"

#. type: Plain text
#: _versions/2.7/guides/kogito-drl.adoc
msgid "This same demo can be compiled into native code: no modifications required."
msgstr "这个同样的演示可以被编译成本地代码：不需要任何修改。"

#: _versions/2.7/guides/kogito-drl.adoc
msgid ""
"This implies that you no longer need to install a JVM on your\n"
"production environment, as the runtime technology is included in\n"
"the produced binary, and optimized to run with minimal resource overhead."
msgstr "这意味着您不再需要在您的生产环境中安装JVM，因为运行时技术包含在生产的二进制文件中，并以最小的资源开销优化运行。"

#: _versions/2.7/guides/kogito-drl.adoc
#, fuzzy
msgid ""
"Compilation will take a bit longer, so this step is disabled by default;\n"
"let's build a native executable with the following command:"
msgstr "编译需要较长的时间，因此默认情况下这一步骤是禁用的；让我们用以下命令构建一个本地可执行文件："

#. type: Plain text
#: _versions/2.7/guides/kogito-drl.adoc
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr "一杯咖啡的时间后，您就可以直接运行该二进制文件了："

#. type: Title ==
#: _versions/2.7/guides/kogito-drl.adoc
#, no-wrap
msgid "Testing the Application"
msgstr "测试应用程序"

#: _versions/2.7/guides/kogito-drl.adoc
#, fuzzy
msgid ""
"To test your application, just send a request to the service with giving the person as JSON\n"
"payload."
msgstr "要测试您的应用程序，只需向服务发送一个请求，并将人作为 JSON 有效负载。"

#. type: Plain text
#: _versions/2.7/guides/kogito-drl.adoc
#, fuzzy
msgid "In the response, the list of the approved applications will be returned:"
msgstr "在回复中，将返回已批准申请的清单："

#. type: Title ==
#: _versions/2.7/guides/kogito-drl.adoc
#, no-wrap
msgid "References"
msgstr "参考文献"

#. type: Plain text
#: _versions/2.7/guides/kogito-drl.adoc
#, fuzzy
msgid "https://kogito.kie.org[Kogito Website]"
msgstr "link:https://kogito.kie.org[科吉托网站]"

#. type: Plain text
#: _versions/2.7/guides/kogito-drl.adoc
#, fuzzy
msgid "https://docs.jboss.org/kogito/release/latest/html_single[Kogito Documentation]"
msgstr "link:https://docs.jboss.org/kogito/release/latest/html_single[Kogito 文件]"
