# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.7/guides/rest-json.adoc:6
#, no-wrap
msgid "Writing JSON REST Services"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:11
msgid "JSON is now the _lingua franca_ between microservices."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:13
msgid "In this guide, we see how you can get your REST services to consume and produce JSON payloads."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:15
msgid "there is another guide if you need a xref:rest-client.adoc[REST client] (including support for JSON)."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/rest-json.adoc:16
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: upstream/_versions/2.7/guides/rest-json.adoc:20
#, no-wrap
msgid "Architecture"
msgstr "应用结构"

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:23
msgid "The application built in this guide is quite simple: the user can add elements in a list using a form and the list is updated."
msgstr "本指南中构建的应用程序非常简单：用户可以使用一个表单在列表中添加元素并更新列表。"

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:25
msgid "All the information between the browser and the server are formatted as JSON."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/rest-json.adoc:26
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:30
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:32
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:34
msgid "The solution is located in the `rest-json-quickstart` {quickstarts-tree-url}/rest-json-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/rest-json.adoc:35
#, no-wrap
msgid "Creating the Maven project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:38
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:45
msgid "This command generates a new project importing the RESTEasy/JAX-RS and https://github.com/FasterXML/jackson[Jackson] extensions, and in particular adds the following dependency:"
msgstr ""

#. type: Block title
#: upstream/_versions/2.7/guides/rest-json.adoc:47
#: upstream/_versions/2.7/guides/rest-json.adoc:76
#: upstream/_versions/2.7/guides/rest-json.adoc:502
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:53
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-jackson</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/2.7/guides/rest-json.adoc:56
#: upstream/_versions/2.7/guides/rest-json.adoc:85
#: upstream/_versions/2.7/guides/rest-json.adoc:511
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:59
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-resteasy-jackson\")\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.7/guides/rest-json.adoc:64
msgid "To improve user experience, Quarkus registers the three Jackson https://github.com/FasterXML/jackson-modules-java8[Java 8 modules] so you don't need to do it manually."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:67
msgid "Quarkus also supports https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] so, if you prefer JSON-B over Jackson, you can create a project relying on the RESTEasy JSON-B extension instead:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:74
msgid "This command generates a new project importing the RESTEasy/JAX-RS and https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] extensions, and in particular adds the following dependency:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:82
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-jsonb</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:88
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-resteasy-jsonb\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/rest-json.adoc:90
#, no-wrap
msgid "Creating your first JSON REST service"
msgstr "创建你的第一个JSON REST服务"

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:93
msgid "In this example, we will create an application to manage a list of fruits."
msgstr "在这个例子中，我们将创建一个应用程序来管理fruit列表。"

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:95
msgid "First, let's create the `Fruit` bean as follows:"
msgstr "首先，让我们创建 `Fruit` 实体类，如下所示："

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:99
#: upstream/_versions/2.7/guides/rest-json.adoc:122
#: upstream/_versions/2.7/guides/rest-json.adoc:380
#: upstream/_versions/2.7/guides/rest-json.adoc:403
#: upstream/_versions/2.7/guides/rest-json.adoc:553
#, no-wrap
msgid "package org.acme.rest.json;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:101
#, no-wrap
msgid "public class Fruit {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:104
#: upstream/_versions/2.7/guides/rest-json.adoc:385
#, no-wrap
msgid ""
"    public String name;\n"
"    public String description;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:107
#, no-wrap
msgid ""
"    public Fruit() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:113
#, no-wrap
msgid ""
"    public Fruit(String name, String description) {\n"
"        this.name = name;\n"
"        this.description = description;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:116
msgid "Nothing fancy. One important thing to note is that having a default constructor is required by the JSON serialization layer."
msgstr "这非常的简单。需要注意的一件事是， JSON 序列化层需要具有默认构造函数。"

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:118
msgid "Now, create the `org.acme.rest.json.FruitResource` class as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:126
#, no-wrap
msgid ""
"import java.util.Collections;\n"
"import java.util.LinkedHashMap;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:131
#, no-wrap
msgid ""
"import javax.ws.rs.DELETE;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:134
#, no-wrap
msgid ""
"@Path(\"/fruits\")\n"
"public class FruitResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:136
#, no-wrap
msgid "    private Set<Fruit> fruits = Collections.newSetFromMap(Collections.synchronizedMap(new LinkedHashMap<>()));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:141
#, no-wrap
msgid ""
"    public FruitResource() {\n"
"        fruits.add(new Fruit(\"Apple\", \"Winter fruit\"));\n"
"        fruits.add(new Fruit(\"Pineapple\", \"Tropical fruit\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:146
#, no-wrap
msgid ""
"    @GET\n"
"    public Set<Fruit> list() {\n"
"        return fruits;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:152
#, no-wrap
msgid ""
"    @POST\n"
"    public Set<Fruit> add(Fruit fruit) {\n"
"        fruits.add(fruit);\n"
"        return fruits;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:159
#, no-wrap
msgid ""
"    @DELETE\n"
"    public Set<Fruit> delete(Fruit fruit) {\n"
"        fruits.removeIf(existingFruit -> existingFruit.name.contentEquals(fruit.name));\n"
"        return fruits;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:162
msgid "The implementation is pretty straightforward and you just need to define your endpoints using the JAX-RS annotations."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:165
msgid "The `Fruit` objects will be automatically serialized/deserialized by https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] or https://github.com/FasterXML/jackson[Jackson], depending on the extension you chose when initializing the project."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.7/guides/rest-json.adoc:172
msgid "When a JSON extension is installed such as `quarkus-resteasy-jackson` or `quarkus-resteasy-jsonb`, Quarkus will use the `application/json` media type by default for most return values, unless the media type is explicitly set via `@Produces` or `@Consumes` annotations (there are some exceptions for well known types, such as `String` and `File`, which default to `text/plain` and `application/octet-stream` respectively)."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.7/guides/rest-json.adoc:175
msgid "If you don't want JSON by default you can set `quarkus.resteasy-json.default-json=false` and the default will change back to being auto-negotiated. If you set this you will need to add `@Produces(MediaType.APPLICATION_JSON)` and `@Consumes(MediaType.APPLICATION_JSON)` to your endpoints in order to use JSON."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.7/guides/rest-json.adoc:178
msgid "If you don't rely on the JSON default, it is heavily recommended to annotate your endpoints with the `@Produces` and `@Consumes` annotations to define precisely the expected content-types.  It will allow to narrow down the number of JAX-RS providers (which can be seen as converters) included in the native executable."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.7/guides/rest-json.adoc:181
#, no-wrap
msgid "Configuring JSON support"
msgstr ""

#. type: Title ====
#: upstream/_versions/2.7/guides/rest-json.adoc:183
#, no-wrap
msgid "Jackson"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:187
msgid "In Quarkus, the default Jackson `ObjectMapper` obtained via CDI (and consumed by the Quarkus extensions) is configured to ignore unknown properties (by disabling the `DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES` feature)."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:190
msgid "You can restore the default behavior of Jackson by setting `quarkus.jackson.fail-on-unknown-properties=true` in your `application.properties` or on a per class basis via `@JsonIgnoreProperties(ignoreUnknown = false)`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:193
msgid "Furthermore, the `ObjectMapper` is configured to format dates and time in ISO-8601 (by disabling the `SerializationFeature.WRITE_DATES_AS_TIMESTAMPS` feature)."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:197
msgid "The default behaviour of Jackson can be restored by setting `quarkus.jackson.write-dates-as-timestamps=true` in your `application.properties`. If you want to change the format for a single field, you can use the `@JsonFormat` annotation."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:201
msgid "Also, Quarkus makes it very easy to configure various Jackson settings via CDI beans.  The simplest (and suggested) approach is to define a CDI bean of type `io.quarkus.jackson.ObjectMapperCustomizer` inside of which any Jackson configuration can be applied."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:203
msgid "An example where a custom module needs to be registered would look like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:209
#, no-wrap
msgid ""
"import com.fasterxml.jackson.databind.ObjectMapper;\n"
"import io.quarkus.jackson.ObjectMapperCustomizer;\n"
"import javax.inject.Singleton;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:212
#, no-wrap
msgid ""
"@Singleton\n"
"public class RegisterCustomModuleCustomizer implements ObjectMapperCustomizer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:217
#, no-wrap
msgid ""
"    public void customize(ObjectMapper mapper) {\n"
"        mapper.registerModule(new CustomModule());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:222
msgid "Users can even provide their own `ObjectMapper` bean if they so choose.  If this is done, it is very important to manually inject and apply all `io.quarkus.jackson.ObjectMapperCustomizer` beans in the CDI producer that produces `ObjectMapper`.  Failure to do so will prevent Jackson specific customizations provided by various extensions from being applied."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:227
#, no-wrap
msgid ""
"import com.fasterxml.jackson.databind.ObjectMapper;\n"
"import io.quarkus.jackson.ObjectMapperCustomizer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:230
#, no-wrap
msgid ""
"import javax.enterprise.inject.Instance;\n"
"import javax.inject.Singleton;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:232
#, no-wrap
msgid "public class CustomObjectMapper {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:237
#, no-wrap
msgid ""
"    // Replaces the CDI producer for ObjectMapper built into Quarkus\n"
"    @Singleton\n"
"    ObjectMapper objectMapper(Instance<ObjectMapperCustomizer> customizers) {\n"
"        ObjectMapper mapper = myObjectMapper(); // Custom `ObjectMapper`\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:242
#, no-wrap
msgid ""
"        // Apply all ObjectMapperCustomizer beans (incl. Quarkus)\n"
"        for (ObjectMapperCustomizer customizer : customizers) {\n"
"            customizer.customize(mapper);\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:246
#, no-wrap
msgid ""
"        return mapper;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/2.7/guides/rest-json.adoc:248
#, no-wrap
msgid "JSON-B"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:251
msgid "As stated above, Quarkus provides the option of using JSON-B instead of Jackson via the use of the `quarkus-resteasy-jsonb` extension."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:253
msgid "Following the same approach as described in the previous section, JSON-B can be configured using a `io.quarkus.jsonb.JsonbConfigCustomizer` bean."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:255
msgid "If for example a custom serializer named `FooSerializer` for type `com.example.Foo` needs to be registered with JSON-B, the addition of a bean like the following would suffice:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:262
#, no-wrap
msgid ""
"import io.quarkus.jsonb.JsonbConfigCustomizer;\n"
"import javax.inject.Singleton;\n"
"import javax.json.bind.JsonbConfig;\n"
"import javax.json.bind.serializer.JsonbSerializer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:265
#, no-wrap
msgid ""
"@Singleton\n"
"public class FooSerializerRegistrationCustomizer implements JsonbConfigCustomizer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:270
#, no-wrap
msgid ""
"    public void customize(JsonbConfig config) {\n"
"        config.withSerializers(new FooSerializer());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:275
msgid "A more advanced option would be to directly provide a bean of `javax.json.bind.JsonbConfig` (with a `Dependent` scope) or in the extreme case to provide a bean of type `javax.json.bind.Jsonb` (with a `Singleton` scope).  If the latter approach is leveraged it is very important to manually inject and apply all `io.quarkus.jsonb.JsonbConfigCustomizer` beans in the CDI producer that produces `javax.json.bind.Jsonb`.  Failure to do so will prevent JSON-B specific customizations provided by various extensions from being applied."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:279
#, no-wrap
msgid "import io.quarkus.jsonb.JsonbConfigCustomizer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:283
#, no-wrap
msgid ""
"import javax.enterprise.context.Dependent;\n"
"import javax.enterprise.inject.Instance;\n"
"import javax.json.bind.JsonbConfig;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:285
#, no-wrap
msgid "public class CustomJsonbConfig {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:290
#, no-wrap
msgid ""
"    // Replaces the CDI producer for JsonbConfig built into Quarkus\n"
"    @Dependent\n"
"    JsonbConfig jsonConfig(Instance<JsonbConfigCustomizer> customizers) {\n"
"        JsonbConfig config = myJsonbConfig(); // Custom `JsonbConfig`\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:295
#, no-wrap
msgid ""
"        // Apply all JsonbConfigCustomizer beans (incl. Quarkus)\n"
"        for (JsonbConfigCustomizer customizer : customizers) {\n"
"            customizer.customize(config);\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:299
#, no-wrap
msgid ""
"        return config;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/rest-json.adoc:302
#, no-wrap
msgid "Creating a frontend"
msgstr "创建一个网页"

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:307
msgid "Now let's add a simple web page to interact with our `FruitResource`.  Quarkus automatically serves static resources located under the `META-INF/resources` directory.  In the `src/main/resources/META-INF/resources` directory, add a `fruits.html` file with the content from this {quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/fruits.html[fruits.html] file in it."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:309
msgid "You can now interact with your REST service:"
msgstr "现在你可以与你的REST服务进行交互："

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:313
msgid "start Quarkus with:"
msgstr "启动Quarkus："

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:316
msgid "open a browser to `http://localhost:8080/fruits.html`"
msgstr "打开浏览器访问 `<a href=\"http://localhost:8080/fruits.html\" class=\"bare\">http://localhost:8080/fruits.html</a>` "

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:317
msgid "add new fruits to the list via the form"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/rest-json.adoc:320
#, no-wrap
msgid "Building a native executable"
msgstr "构建一个本地可执行文件"

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:323
msgid "You can build a native executable with the usual command:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:327
msgid "Running it is as simple as executing `./target/rest-json-quickstart-1.0.0-SNAPSHOT-runner`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:329
msgid "You can then point your browser to `http://localhost:8080/fruits.html` and use your application."
msgstr "然后你可以使用的浏览器访问 `<a href=\"http://localhost:8080/fruits.html\" class=\"bare\">http://localhost:8080/fruits.html</a>` 来使用你的应用程序。"

#. type: Title ==
#: upstream/_versions/2.7/guides/rest-json.adoc:330
#, no-wrap
msgid "About serialization"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:333
msgid "JSON serialization libraries use Java reflection to get the properties of an object and serialize them."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:337
msgid "When using native executables with GraalVM, all classes that will be used with reflection need to be registered.  The good news is that Quarkus does that work for you most of the time.  So far, we haven't registered any class, not even `Fruit`, for reflection usage and everything is working fine."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:340
msgid "Quarkus performs some magic when it is capable of inferring the serialized types from the REST methods.  When you have the following REST method, Quarkus determines that `Fruit` will be serialized:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:347
#, no-wrap
msgid ""
"@GET\n"
"public List<Fruit> list() {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:351
msgid "Quarkus does that for you automatically by analyzing the REST methods at build time and that's why we didn't need any reflection registration in the first part of this guide."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:354
msgid "Another common pattern in the JAX-RS world is to use the `Response` object.  `Response` comes with some nice perks:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:356
msgid "you can return different entity types depending on what happens in your method (a `Legume` or an `Error` for instance);"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:357
msgid "you can set the attributes of the `Response` (the status comes to mind in the case of an error)."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:359
msgid "Your REST method then looks like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:366
#, no-wrap
msgid ""
"@GET\n"
"public Response list() {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:370
msgid "It is not possible for Quarkus to determine at build time the type included in the `Response` as the information is not available.  In this case, Quarkus won't be able to automatically register for reflection the required classes."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:372
msgid "This leads us to our next section."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/rest-json.adoc:373
#, no-wrap
msgid "Using Response"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:376
msgid "Let's create the `Legume` class which will be serialized as JSON, following the same model as for our `Fruit` class:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:382
#, no-wrap
msgid "public class Legume {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:388
#, no-wrap
msgid ""
"    public Legume() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:394
#, no-wrap
msgid ""
"    public Legume(String name, String description) {\n"
"        this.name = name;\n"
"        this.description = description;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:397
msgid "Now let's create a `LegumeResource` REST service with only one method which returns the list of legumes."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:399
msgid "This method returns a `Response` and not a list of `Legume`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:407
#, no-wrap
msgid ""
"import java.util.Collections;\n"
"import java.util.LinkedHashSet;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:414
#, no-wrap
msgid ""
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import javax.ws.rs.core.Response;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:419
#, no-wrap
msgid ""
"@Path(\"/legumes\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public class LegumeResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:421
#, no-wrap
msgid "    private Set<Legume> legumes = Collections.synchronizedSet(new LinkedHashSet<>());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:426
#, no-wrap
msgid ""
"    public LegumeResource() {\n"
"        legumes.add(new Legume(\"Carrot\", \"Root vegetable, usually orange\"));\n"
"        legumes.add(new Legume(\"Zucchini\", \"Summer squash\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:432
#, no-wrap
msgid ""
"    @GET\n"
"    public Response list() {\n"
"        return Response.ok(legumes).build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:437
msgid "Now let's add a simple web page to display our list of legumes.  In the `src/main/resources/META-INF/resources` directory, add a `legumes.html` file with the content from this {quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/legumes.html[legumes.html] file in it."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:439
msgid "Open a browser to http://localhost:8080/legumes.html and you will see our list of legumes."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:441
msgid "The interesting part starts when running the application as a native executable:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:445
#: upstream/_versions/2.7/guides/rest-json.adoc:484
msgid "create the native executable with:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:448
#: upstream/_versions/2.7/guides/rest-json.adoc:487
msgid "execute it with `./target/rest-json-quickstart-1.0.0-SNAPSHOT-runner`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:449
#: upstream/_versions/2.7/guides/rest-json.adoc:488
msgid "open a browser and go to http://localhost:8080/legumes.html"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:453
msgid "No legumes there."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:456
msgid "As mentioned above, the issue is that Quarkus was not able to determine the `Legume` class will require some reflection by analyzing the REST endpoints.  The JSON serialization library tries to get the list of fields of `Legume` and gets an empty list so it does not serialize the fields' data."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.7/guides/rest-json.adoc:461
msgid "At the moment, when JSON-B or Jackson tries to get the list of fields of a class, if the class is not registered for reflection, no exception will be thrown.  GraalVM will simply return an empty list of fields."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.7/guides/rest-json.adoc:463
msgid "Hopefully, this will change in the future and make the error more obvious."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:466
msgid "We can register `Legume` for reflection manually by adding the `@RegisterForReflection` annotation on our `Legume` class:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:469
#, no-wrap
msgid "import io.quarkus.runtime.annotations.RegisterForReflection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:474
#, no-wrap
msgid ""
"@RegisterForReflection\n"
"public class Legume {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:477
msgid "The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation. More details about the `@RegisterForReflection` annotation can be found on the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:479
msgid "Let's do that and follow the same steps as before:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:483
msgid "hit `Ctrl+C` to stop the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:492
msgid "This time, you can see our list of legumes."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/rest-json.adoc:494
#, no-wrap
msgid "Being reactive"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:498
msgid "You can return _reactive types_ to handle asynchronous processing.  Quarkus recommends the usage of https://smallrye.io/smallrye-mutiny[Mutiny] to write reactive and asynchronous code."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:500
msgid "To integrate Mutiny and RESTEasy, you need to add the `quarkus-resteasy-mutiny` dependency to your project:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:508
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-mutiny</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:514
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-resteasy-mutiny\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:517
msgid "Then, your endpoint can return `Uni` or `Multi` instances:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:526
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/{name}\")\n"
"public Uni<Fruit> getOne(@PathParam String name) {\n"
"    return findByName(name);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:531
#, no-wrap
msgid ""
"@GET\n"
"public Multi<Fruit> getAll() {\n"
"    return findAll();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:535
msgid "Use `Uni` when you have a single result.  Use `Multi` when you have multiple items that may be emitted asynchronously."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:537
msgid "You can use `Uni` and `Response` to return asynchronous HTTP responses: `Uni<Response>`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:539
msgid "More details about Mutiny can be found in xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/rest-json.adoc:540
#, no-wrap
msgid "HTTP filters and interceptors"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:546
msgid "Both HTTP request and response can be intercepted by providing `ContainerRequestFilter` or `ContainerResponseFilter` implementations respectively. These filters are suitable for processing the metadata associated with a message: HTTP headers, query parameters, media type, and other metadata. They also have the capability to abort the request processing, for instance when the user does not have the permissions to access the endpoint."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:549
msgid "Let's use `ContainerRequestFilter` to add logging capability to our service. We can do that by implementing `ContainerRequestFilter` and annotating it with the `@Provider` annotation:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:556
#, no-wrap
msgid ""
"import io.vertx.core.http.HttpServerRequest;\n"
"import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:562
#, no-wrap
msgid ""
"import javax.ws.rs.container.ContainerRequestContext;\n"
"import javax.ws.rs.container.ContainerRequestFilter;\n"
"import javax.ws.rs.core.Context;\n"
"import javax.ws.rs.core.UriInfo;\n"
"import javax.ws.rs.ext.Provider;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:565
#, no-wrap
msgid ""
"@Provider\n"
"public class LoggingFilter implements ContainerRequestFilter {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:567
#, no-wrap
msgid "    private static final Logger LOG = Logger.getLogger(LoggingFilter.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:570
#, no-wrap
msgid ""
"    @Context\n"
"    UriInfo info;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:573
#, no-wrap
msgid ""
"    @Context\n"
"    HttpServerRequest request;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:576
#, no-wrap
msgid ""
"    @Override\n"
"    public void filter(ContainerRequestContext context) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:580
#, no-wrap
msgid ""
"        final String method = context.getMethod();\n"
"        final String path = info.getPath();\n"
"        final String address = request.remoteAddress().toString();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:584
#, no-wrap
msgid ""
"        LOG.infof(\"Request %s %s from IP %s\", method, path, address);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:587
msgid "Now, whenever a REST method is invoked, the request will be logged into the console:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:594
#, no-wrap
msgid ""
"2019-06-05 12:44:26,526 INFO  [org.acm.res.jso.LoggingFilter] (executor-thread-1) Request GET /legumes from IP 127.0.0.1\n"
"2019-06-05 12:49:19,623 INFO  [org.acm.res.jso.LoggingFilter] (executor-thread-1) Request GET /fruits from IP 0:0:0:0:0:0:0:1\n"
"2019-06-05 12:50:44,019 INFO  [org.acm.res.jso.LoggingFilter] (executor-thread-1) Request POST /fruits from IP 0:0:0:0:0:0:0:1\n"
"2019-06-05 12:51:04,485 INFO  [org.acm.res.jso.LoggingFilter] (executor-thread-1) Request GET /fruits from IP 127.0.0.1\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/rest-json.adoc:596
#, no-wrap
msgid "CORS filter"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:601
msgid "link:https://en.wikipedia.org/wiki/Cross-origin_resource_sharing[Cross-origin resource sharing] (CORS) is a mechanism that allows restricted resources on a web page to be requested from another domain outside the domain from which the first resource was served."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:604
msgid "Quarkus comes with a CORS filter. Read the xref:http-reference.adoc#cors-filter[HTTP Reference Documentation] to learn how to use it."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/rest-json.adoc:605
#, no-wrap
msgid "GZip Support"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:608
msgid "Quarkus comes with GZip support (even though it is not enabled by default). The following configuration knobs allow to configure GZip support."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:613
#, no-wrap
msgid ""
"quarkus.resteasy.gzip.enabled=true // <1>\n"
"quarkus.resteasy.gzip.max-input=10M // <2>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:616
msgid "Enable Gzip support."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:618
msgid "Configure the upper limit on deflated request body. This is useful to mitigate potential attacks by limiting their reach. The default value is `10M`.  This configuration option would recognize strings in this format (shown as a regular expression): `[0-9]+[KkMmGgTtPpEeZzYy]?`. If no suffix is given, assume bytes."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:620
msgid "Once GZip support has been enabled you can use it on an endpoint by adding the `@org.jboss.resteasy.annotations.GZIP` annotation to your endpoint method."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:623
msgid "If you want to compress everything then we recommended that you use the `quarkus.http.enable-compression=true` setting instead to globally enable compression support."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/rest-json.adoc:624
#, no-wrap
msgid "Multipart Support"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:627
msgid "RESTEasy supports multipart via the https://docs.jboss.org/resteasy/docs/4.5.6.Final/userguide/html/Multipart.html[RESTEasy Multipart Provider]."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:629
msgid "Quarkus provides an extension called `quarkus-resteasy-multipart` to make things easier for you."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:631
msgid "This extension slightly differs from the RESTEasy default behavior as the default charset (if none is specified in your request) is UTF-8 rather than US-ASCII."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:633
msgid "You can configure this behavior with the following configuration properties:"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/rest-json.adoc:636
#, no-wrap
msgid "Servlet compatibility"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:639
msgid "In Quarkus, RESTEasy can either run directly on top of the Vert.x HTTP server, or on top of Undertow if you have any servlet dependency."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:646
msgid "As a result, certain classes, such as `HttpServletRequest` are not always available for injection. Most use-cases for this particular class are covered by JAX-RS equivalents, except for getting the remote client's IP. RESTEasy comes with a replacement API which you can inject: https://docs.jboss.org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest.html[`HttpRequest`], which has the methods https://docs.jboss.org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest.html#getRemoteAddress--[`getRemoteAddress()`] and https://docs.jboss.org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest.html#getRemoteHost--[`getRemoteHost()`] to solve this problem."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/rest-json.adoc:647
#, no-wrap
msgid "RESTEasy and REST Client interactions"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:651
msgid "In Quarkus, the RESTEasy extension and xref:rest-client.adoc[the REST Client extension] share the same infrastructure.  One important consequence of this consideration is that they share the same list of providers (in the JAX-RS meaning of the word)."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:654
msgid "For instance, if you declare a `WriterInterceptor`, it will by default intercept both the servers calls and the client calls, which might not be the desired behavior."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:656
msgid "However, you can change this default behavior and constrain a provider to:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:658
msgid "only consider *server* calls by adding the `@ConstrainedTo(RuntimeType.SERVER)` annotation to your provider;"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:659
msgid "only consider *client* calls by adding the `@ConstrainedTo(RuntimeType.CLIENT)` annotation to your provider."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/rest-json.adoc:660
#, no-wrap
msgid "What's Different from Jakarta EE Development"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.7/guides/rest-json.adoc:662
#, no-wrap
msgid "No Need for `Application` Class"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:665
msgid "Configuration via an application-supplied subclass of `Application` is supported, but not required."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.7/guides/rest-json.adoc:666
#, no-wrap
msgid "Only a single JAX-RS application"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:670
msgid "In contrast to JAX-RS (and RESTeasy) running in a standard servlet-container, Quarkus only supports the deployment of a single JAX-RS application.  If multiple JAX-RS `Application` classes are defined, the build will fail with the message `Multiple classes have been annotated with @ApplicationPath which is currently not supported`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:672
msgid "If multiple JAX-RS applications are defined, the property `quarkus.resteasy.ignore-application-classes=true` can be used to ignore all explicit `Application` classes. This makes all resource-classes available via the application-path as defined by `quarkus.resteasy.path` (default: `/`)."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.7/guides/rest-json.adoc:673
#, no-wrap
msgid "Support limitations of JAX-RS application"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:678
msgid "The RESTEasy extension doesn't support the method `getProperties()` of the class `javax.ws.rs.core.Application`. Moreover, it only relies on the methods `getClasses()` and `getSingletons()` to filter out the annotated resource, provider and feature classes.  It doesn't filter out the built-in resource, provider and feature classes and also the resource, provider and feature classes registered by the other extensions.  Finally the objects returned by the method `getSingletons()` are ignored, only the classes are took into account to filter out the resource, provider and feature classes, in other words the method `getSingletons()` is actually managed the same way as `getClasses()`."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.7/guides/rest-json.adoc:679
#, no-wrap
msgid "Lifecycle of Resources"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:683
msgid "In Quarkus all JAX-RS resources are treated as CDI beans.  It's possible to inject other beans via `@Inject`, bind interceptors using bindings such as `@Transactional`, define `@PostConstruct` callbacks, etc."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:689
msgid "If there is no scope annotation declared on the resource class then the scope is defaulted.  The default scope can be controlled through the `quarkus.resteasy.singleton-resources` property.  If set to `true` (default) then a *single instance* of a resource class is created to service all requests (as defined by `@javax.inject.Singleton`).  If set to `false` then a *new instance* of the resource class is created per each request.  An explicit CDI scope annotation (`@RequestScoped`, `@ApplicationScoped`, etc.) always overrides the default behavior and specifies the lifecycle of resource instances."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/rest-json.adoc:690
#, no-wrap
msgid "Include/Exclude JAX-RS classes with build time conditions"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:694
msgid "Quarkus enables the inclusion or exclusion of JAX-RS Resources, Providers and Features directly thanks to build time conditions in the same that it does for CDI beans.  Thus, the various JAX-RS classes can be annotated with profile conditions (`@io.quarkus.arc.profile.IfBuildProfile` or `@io.quarkus.arc.profile.UnlessBuildProfile`) and/or with property conditions (`io.quarkus.arc.properties.IfBuildProperty` or `io.quarkus.arc.properties.UnlessBuildProperty`) to indicate to Quarkus at build time under which conditions these JAX-RS classes should be included."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:696
msgid "In the following example, Quarkus includes the endpoint `sayHello` if and only if the build profile `app1` has been enabled."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:701
#, no-wrap
msgid ""
"@IfBuildProfile(\"app1\")\n"
"public class ResourceForApp1Only {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/rest-json.adoc:708
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"sayHello\")\n"
"    public String sayHello() {\n"
"        return \"hello\";\n"
"     }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:711
msgid "Please note that if a JAX-RS Application has been detected and the method `getClasses()` and/or `getSingletons()` has/have been overridden, Quarkus will ignore the build time conditions and consider only what has been defined in the JAX-RS Application."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/rest-json.adoc:712
#, no-wrap
msgid "Conclusion"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:715
msgid "Creating JSON REST services with Quarkus is easy as it relies on proven and well known technologies."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:717
msgid "As usual, Quarkus further simplifies things under the hood when running your application as a native executable."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/rest-json.adoc:718
msgid "There is only one thing to remember: if you use `Response` and Quarkus can't determine the beans that are serialized, you need to annotate them with `@RegisterForReflection`."
msgstr ""
