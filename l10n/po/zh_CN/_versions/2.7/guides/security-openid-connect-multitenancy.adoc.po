# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Using OpenID Connect (OIDC) Multi-Tenancy"
msgstr "使用OpenID Connect（OIDC）多租户"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "This guide demonstrates how your OpenID Connect (OIDC) application can support multi-tenancy so that you can serve multiple tenants from a single application. Tenants can be distinct realms or security domains within the same OpenID Provider or even distinct OpenID Providers."
msgstr "本指南展示了您的OpenID Connect（OIDC）应用程序如何支持多租户，以便您可以从单个应用程序中为多个租户提供服务。租户可以是同一OpenID提供商中的不同领域或安全域，甚至是不同的OpenID提供商。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "When serving multiple customers from the same application (e.g.: SaaS), each customer is a tenant. By enabling multi-tenancy support to your applications you are allowed to also support distinct authentication policies for each tenant even though if that means authenticating against different OpenID Providers, such as Keycloak and Google."
msgstr "当从同一个应用程序为多个客户提供服务时（例如：SaaS），每个客户是一个租户。通过对你的应用程序启用多租户支持，你也可以为每个租户支持不同的认证策略，即使这意味着对不同的OpenID提供商进行认证，如Keycloak和Google。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Please read the xref:security-openid-connect.adoc[Using OpenID Connect to Protect Service Applications] guide if you need to authorize a tenant using Bearer Token Authorization."
msgstr "如果需要使用承载令牌授权对租户进行授权，请阅读《 xref:security-openid-connect.adoc[使用 OpenID Connect 保护服务应用程序] 》指南。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Please read the xref:security-openid-connect-web-authentication.adoc[Using OpenID Connect to Protect Web Applications] guide if you need to authenticate and authorize a tenant using OpenID Connect Authorization Code Flow."
msgstr "如果需要使用 OpenID Connect 授权代码流对租户进行身份验证和授权，请阅读《 xref:security-openid-connect-web-authentication.adoc[使用] OpenID Connect xref:security-openid-connect-web-authentication.adoc[保护 Web 应用程序] 》指南。"

#. type: Title ==
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr "link:https://stedolan.github.io/jq/[jq工具]"

#. type: Title ==
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Architecture"
msgstr "应用结构"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "In this example, we build a very simple application which offers a single land page:"
msgstr "在本示例中，我们构建了一个非常简单的应用程序，只提供一个登陆页面："

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "`/{tenant}`"
msgstr " `/{tenant}` "

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "The land page is served by a JAX-RS Resource and shows information obtained from the OpenID Provider about the authenticated user and the current tenant."
msgstr "陆地页面由 JAX-RS 资源提供，显示从 OpenID 提供商获取的有关已验证用户和当前租户的信息。"

#. type: Title ==
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "The solution is located in the `security-openid-connect-multi-tenancy-quickstart` {quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart[directory]."
msgstr "解决方案位于 `security-openid-connect-multi-tenancy-quickstart` {quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart[directory] 中。"

#. type: Title ==
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Creating the Maven Project"
msgstr "创建Maven项目"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `oidc` extension\n"
"to your project by running the following command in your project base directory:"
msgstr "如果你已经配置了你的Quarkus项目，你可以通过在你的项目基础目录下运行以下命令，将 `oidc` 扩展加入到你的项目中去："

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
msgid "This will add the following to your build file:"
msgstr "这会将以下内容添加到你的构建文件中:"

#. type: Block title
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Writing the application"
msgstr "编写应用程序"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Let's start by implementing the `/{tenant}` endpoint. As you can see from the source code below it is just a regular JAX-RS resource:"
msgstr "让我们从实现 `/{tenant}` 端点开始。从下面的源代码中可以看到，这只是一个普通的 JAX-RS 资源："

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "In order to resolve the tenant from incoming requests and map it to a specific `quarkus-oidc` tenant configuration in application.properties, you need to create an implementation for the `io.quarkus.oidc.TenantResolver` interface."
msgstr "为了从传入请求中解析租户并将其映射到 application.properties 中的特定 `quarkus-oidc` 租户配置，需要为 `io.quarkus.oidc.TenantResolver` 接口创建一个实现。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "From the implementation above, tenants are resolved from the request path so that in case no tenant could be inferred, `null` is returned to indicate that the default tenant configuration should be used."
msgstr "从上面的实现来看，租户是从请求路径中解析出来的，因此在无法推断出租户的情况下， `null` ，表示应该使用默认租户配置。"

#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"===\n"
"When a current tenant represents an OIDC `web-app` application, the current `io.vertx.ext.web.RoutingContext` will contain a `tenant-id` attribute by the time the custom tenant resolver has been called for all the requests completing the code authentication flow and the already authenticated requests, when either a tenant specific state or session cookie already exists.\n"
"Therefore, when working with mulltiple OpenID Connect Providers, you only need a path specific check to resolve a tenant id if the `RoutingContext` does not have the `tenant-id` attribute set, for example:"
msgstr "=== 当当前租户代表 OIDC `web-app` 应用程序时，如果租户特定状态或会话 cookie 已经存在，则在调用自定义租户解析器完成代码验证流和已验证请求的所有请求时，当前 `io.vertx.ext.web.RoutingContext` 将包含 `tenant-id` 属性。因此，在使用多个 OpenID Connect 提供商时，如果 `RoutingContext` 没有设置 `tenant-id` 属性，则只需进行路径特定检查即可解析租户 ID："

#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "==="
msgstr "==="

#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"===\n"
"If you also use xref:hibernate-orm.adoc#multitenancy[Hibernate ORM multitenancy] and both OIDC and Hibernate ORM tenant IDs are the same and must be extracted from the Vert.x `RoutingContext` then you can pass the tenant id from the OIDC Tenant Resolver to the Hibernate ORM Tenant Resolver as a `RoutingContext` attribute, for example:"
msgstr "=== 如果你也使用 xref:hibernate-orm.adoc#multitenancy[Hibernate ORM 多租] 户，并且 OIDC 和 Hibernate ORM 租户 ID 相同，且必须从 Vert.x `RoutingContext` 中提取，那么你可以将租户 ID 从 OIDC 租户解析器传递给 Hibernate ORM 租户解析器，例如作为 `RoutingContext` 属性："

#. type: Title ==
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Configuring the application"
msgstr "配置该应用程序"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "The first configuration is the default tenant configuration that should be used when the tenant can not be inferred from the request. This configuration is using a Keycloak instance to authenticate users."
msgstr "第一个配置是默认租户配置，在无法从请求中推断出租户时应使用该配置。该配置使用 Keycloak 实例对用户进行身份验证。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "The second configuration is the configuration that will be used when an incoming request is mapped to the tenant `tenant-a`."
msgstr "第二个配置是将传入请求映射到租户 `tenant-a` 时使用的配置。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Note that both configurations map to the same Keycloak server instance while using distinct `realms`."
msgstr "注意，这两种配置都映射到同一个Keycloak服务器实例，同时使用不同的 `realms` 。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "You can define multiple tenants in your configuration file, just make sure they have a unique alias so that you can map them properly when resolving a tenant from your `TenantResolver` implementation."
msgstr "你可以在你的配置文件中定义多个租户，只是要确保它们有一个独特的别名，以便你在从你的 `TenantResolver` 实现中解析一个租户时可以正确地映射它们。"

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy, no-wrap
msgid "Google OpenID Provider Configuration"
msgstr "谷歌 OpenID 提供商配置"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "In order to set-up the `tenant-a` configuration to use Google OpenID Provider, you need to create a project as described https://developers.google.com/identity/protocols/OpenIDConnect[here]."
msgstr "要设置 `tenant-a` 配置以使用 Google OpenID Provider，需要按照 link:https://developers.google.com/identity/protocols/OpenIDConnect[此处] 所述创建一个项目。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Once you create the project and have your project's `client_id` and `client_secret`, you can try to configure a tenant as follows:"
msgstr "创建项目并获得项目的 `client_id` 和 `client_secret` 后，就可以尝试按以下方式配置租户："

#. type: Title ==
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Starting and Configuring the Keycloak Server"
msgstr "启动和配置Keycloak服务器"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr "要启动Keycloak服务器，您可以使用Docker服务，且只需运行以下命令："

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "You should be able to access your Keycloak Server at http://localhost:8180/auth[localhost:8180/auth]."
msgstr "您应该可以通过 link:http://localhost:8180/auth[localhost:8180/auth] 访问 Keycloak 服务器。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
msgid "Log in as the `admin` user to access the Keycloak Administration Console. Username should be `admin` and password `admin`."
msgstr "以 `admin` 用户身份登录，访问Keycloak管理控制台。用户名应该是 `admin` ，密码是 `admin` 。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Now, follow the steps below to import the realms for the two tenants:"
msgstr "现在，按照下面的步骤，为两个租户导入境界。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Import the {quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/default-tenant-realm.json[default-tenant-realm.json] to create the default realm"
msgstr "导入 {quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/default-tenant-realm.json[default-tenant-realm.json] 以创建默认域"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Import the {quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/tenant-a-realm.json[tenant-a-realm.json] to create the realm for the tenant `tenant-a`."
msgstr "导入 {quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/tenant-a-realm.json[tenant-a-realm.json] 为租户创建 realm `tenant-a` 。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr "更多细节，请参阅Keycloak关于如何 link:https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[创建一个新领域] 的文档。"

#. type: Title ==
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy, no-wrap
msgid "Running and Using the Application"
msgstr "运行和使用应用程序"

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy, no-wrap
msgid "Running in Developer Mode"
msgstr "在开发模式下运行"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "To run the microservice in dev mode, use:"
msgstr "要在开发模式下运行微服务，请使用。"

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy, no-wrap
msgid "Running in JVM Mode"
msgstr "在JVM模式下运行"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "When you're done playing with dev mode, you can run it as a standard Java application."
msgstr "当你玩完开发模式后，你可以把它作为一个标准的Java应用程序运行。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
msgid "First compile it:"
msgstr "首先编译它："

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
msgid "Then run it:"
msgstr "然后运行："

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy, no-wrap
msgid "Running in Native Mode"
msgstr "在本地模式下运行"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
msgid "This same demo can be compiled into native code: no modifications required."
msgstr "这个同样的演示可以被编译成本地代码：不需要任何修改。"

#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
msgid ""
"This implies that you no longer need to install a JVM on your\n"
"production environment, as the runtime technology is included in\n"
"the produced binary, and optimized to run with minimal resource overhead."
msgstr "这意味着您不再需要在您的生产环境中安装JVM，因为运行时技术包含在生产的二进制文件中，并以最小的资源开销优化运行。"

#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"Compilation will take a bit longer, so this step is disabled by default;\n"
"let's build again by enabling the native build:"
msgstr "编译时间会稍长一些，因此默认情况下这一步是禁用的；让我们通过启用本地编译再次进行编译："

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr "一杯咖啡的时间后，您就可以直接运行该二进制文件了："

#. type: Title ==
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Testing the Application"
msgstr "测试应用程序"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "To test the application, you should open your browser and access the following URL:"
msgstr "为了测试应用程序，你应该打开你的浏览器并访问以下网址。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "http://localhost:8080/default[http://localhost:8080/default]"
msgstr "link:http://localhost:8080/default[http://localhost:8080/default]"

#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"If everything is working as expected, you should be redirected to the Keycloak server to authenticate. Note that the requested path\n"
"defines a `default` tenant which we don't have mapped in the configuration file. In this case, the default configuration will be used."
msgstr "如果一切正常，你应该会被重定向到 Keycloak 服务器进行身份验证。请注意，请求的路径定义了一个 `default` 租户，而我们的配置文件中没有映射该租户。在这种情况下，将使用默认配置。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "In order to authenticate to the application you should type the following credentials when at the Keycloak login page:"
msgstr "为了验证应用程序，你应该在Keycloak的登录页面上输入以下证书。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Username: *alice*"
msgstr "用户名: *alice* "

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Password: *alice*"
msgstr "密码： *alice* "

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "After clicking the `Login` button you should be redirected back to the application."
msgstr "点击 `Login` 按钮后，你应该被重新引导到应用程序。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "If you try now to access the application at the following URL:"
msgstr "如果你现在尝试在以下网址访问该应用程序。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "http://localhost:8080/tenant-a[http://localhost:8080/tenant-a]"
msgstr "link:http://localhost:8080/tenant-a[http://localhost:8080/tenant-a]"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "You should be redirected again to the login page at Keycloak. However, now you are going to authenticate using a different `realm`."
msgstr "你应该再次被重定向到Keycloak的登录页面。然而，现在你要使用一个不同的 `realm` 来验证。"

#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"In both cases, if the user is successfully authenticated, the landing page will show the user's name and e-mail. Even though\n"
"user `alice` exists in both tenants, for the application they are distinct users belonging to different realms/tenants."
msgstr "在这两种情况下，如果用户验证成功，登陆页面将显示用户的姓名和电子邮件。尽管用户 `alice` 同时存在于两个租户中，但对于应用程序来说，他们是属于不同领域/租户的不同用户。"

#. type: Title ==
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy, no-wrap
msgid "Programmatically Resolving Tenants Configuration"
msgstr "以编程方式解决租户配置问题"

#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"If you need a more dynamic configuration for the different tenants you want to support and don't want to end up with multiple\n"
"entries in your configuration file, you can use the `io.quarkus.oidc.TenantConfigResolver`."
msgstr "如果需要为不同租户提供更动态的配置，又不想在配置文件中加入多个条目，可以使用 `io.quarkus.oidc.TenantConfigResolver` ."

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "This interface allows you to dynamically create tenant configurations at runtime:"
msgstr "这个接口允许你在运行时动态地创建租户配置。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "The `OidcTenantConfig` returned from this method is the same used to parse the `oidc` namespace configuration from the `application.properties`. You can populate it using any of the settings supported by the `quarkus-oidc` extension."
msgstr "从这个方法返回的 `OidcTenantConfig` ，与用来解析 `oidc` 命名空间配置的 `application.properties` 。你可以使用 `quarkus-oidc` 扩展支持的任何设置来填充它。"

#. type: Title ==
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy, no-wrap
msgid "Tenant Resolution for OIDC 'web-app' applications"
msgstr "针对 OIDC \"网络应用程序 \"的租户解决方案"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Several options are available for selecting the tenant configuration which should be used to secure the current HTTP request for both `service` and `web-app` OIDC applications, such as:"
msgstr "有几个选项可用于选择租户配置，该配置应被用于保护 `service` 和 `web-app` OIDC应用程序的当前HTTP请求，例如："

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Check URL paths, for example, a `tenant-service` configuration has to be used for the \"/service\" paths, while a `tenant-manage` configuration - for the \"/management\" paths"
msgstr "检查URL路径，例如， `tenant-service` 配置必须用于\"/service \"路径，而 `tenant-manage` 配置 - 用于\"/management \"路径。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Check HTTP headers, for example, with a URL path always being '/service', a header such as \"Realm: service\" or \"Realm: management\" can help selecting between the `tenant-service` and `tenant-manage` configurations"
msgstr "检查 HTTP 头信息，例如，如果 URL 路径总是\"/service\"，则 \"Realm: service \"或 \"Realm: management \"等头信息有助于在 `tenant-service` 和 `tenant-manage` 配置之间做出选择。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Check URL query parameters - it can work similarly to the way the headers are used to select the tenant configuration"
msgstr "检查URL查询参数--它的工作方式类似于标题用于选择租户配置的方式。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "All these options can be easily implemented with the custom `TenantResolver` and `TenantConfigResolver` implementations for the OIDC `service` applications."
msgstr "所有这些选项都可以通过OIDC `TenantResolver` 和 `TenantConfigResolver` 的定制实现轻松实现， `service` 应用。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "However, due to an HTTP redirect required to complete the code authentication flow for the OIDC `web-app` applications, a custom HTTP cookie may be needed to select the same tenant configuration before and after this redirect request because:"
msgstr "然而，由于需要一个HTTP重定向来完成OIDC `web-app` 应用程序的代码认证流程，可能需要一个自定义的HTTP cookie来选择这个重定向请求前后的相同租户配置，因为。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "URL path may not be the same after the redirect request if a single redirect URL has been registered in the OIDC Provider - the original request path can be restored but after the the tenant configuration is resolved"
msgstr "如果在 OIDC 提供商中注册了单个重定向 URL，则重定向请求后的 URL 路径可能不一样--可以恢复原始请求路径，但要在租户配置得到解决后进行恢复"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "HTTP headers used during the original request are not available after the redirect"
msgstr "原始请求中使用的HTTP头在重定向后不可用"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Custom URL query parameters are restored after the redirect but after the tenant configuration is resolved"
msgstr "自定义URL查询参数在重定向后被恢复，但在租户配置被解决后被恢复"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "One option to ensure the information for resolving the tenant configurations for `web-app` applications is available before and after the redirect is to use a cookie, for example:"
msgstr "为确保解决 `web-app` 应用程序的租户配置的信息在重定向之前和之后都是可用的，一种选择是使用一个cookie，例如。"

#. type: Title ==
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy, no-wrap
msgid "Disabling Tenant Configurations"
msgstr "禁用租户配置"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Custom `TenantResolver` and `TenantConfigResolver` implementations may return `null` if no tenant can be inferred from the current request and a fallback to the default tenant configuration is required."
msgstr "如果不能从当前的请求中推断出租户，并且需要回退到默认的租户配置，自定义的 `TenantResolver` 和 `TenantConfigResolver` 实现可以返回 `null` 。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "If it is expected that the custom resolvers will always infer a tenant then the default tenant configuration is not needed. One can disable it with the `quarkus.oidc.tenant-enabled=false` setting."
msgstr "如果希望自定义解析器始终推断出租户，则不需要默认租户配置。可以通过 `quarkus.oidc.tenant-enabled=false` 设置将其禁用。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Note that tenant specific configurations can also be disabled, for example: `quarkus.oidc.tenant-a.tenant-enabled=false`."
msgstr "请注意，租户的具体配置也可以被禁用，例如： `quarkus.oidc.tenant-a.tenant-enabled=false` 。"

#. type: Title ==
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Configuration Reference"
msgstr "配置参考"

#. type: Title ==
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "References"
msgstr "参考文献"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr "link:https://www.keycloak.org/documentation.html[Keycloak 文档]"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr "link:https://openid.net/connect/[OpenID Connect]"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "link:https://tools.ietf.org/html/rfc7519[JSON 网络令牌]"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "https://developers.google.com/identity/protocols/OpenIDConnect[Google OpenID Connect]"
msgstr "link:https://developers.google.com/identity/protocols/OpenIDConnect[谷歌 OpenID 连接]"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "xref:security.adoc[Quarkus Security]"
msgstr "xref:security.adoc[夸克安全]"
