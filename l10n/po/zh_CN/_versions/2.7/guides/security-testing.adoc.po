# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.7/guides/security-testing.adoc:6
#, no-wrap
msgid "Security Testing"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-testing.adoc:11
msgid "This document describes how to test Quarkus Security."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/security-testing.adoc:13
#, no-wrap
msgid "Configuring User Information"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-testing.adoc:16
msgid "You can use xref:security-properties.adoc[quarkus-elytron-security-properties-file] for testing security. This supports both embedding user info in `application.properties` and standalone properties files."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-testing.adoc:18
msgid "For example, the following configuration will allow for configuring the users in both the production where OAuth2 is required and development modes using xref:config.adoc#configuration-profiles[Configuration Profiles]."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-testing.adoc:28
#, no-wrap
msgid ""
"# Configure embedded authentication\n"
"%dev.quarkus.security.users.embedded.enabled=true\n"
"%dev.quarkus.security.users.embedded.plain-text=true\n"
"%dev.quarkus.security.users.embedded.users.scott=reader\n"
"%dev.quarkus.security.users.embedded.users.stuart=writer\n"
"%dev.quarkus.security.users.embedded.roles.scott=READER\n"
"%dev.quarkus.security.users.embedded.roles.stuart=READER,WRITER\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-testing.adoc:35
#, no-wrap
msgid ""
"# Configure OAuth2\n"
"quarkus.oauth2.enabled=true\n"
"%dev.quarkus.oauth2.enabled=false\n"
"quarkus.oauth2.client-id=client-id\n"
"quarkus.oauth2.client-secret=client-secret\n"
"quarkus.oauth2.introspection-url=http://host:port/introspect\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/security-testing.adoc:38
#, no-wrap
msgid "Test Security Extension"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-testing.adoc:42
msgid "Quarkus provides explicit support for testing with different users, and with the security subsystem disabled. To use this you must include the `quarkus-test-security` dependency:"
msgstr ""

#. type: Block title
#: upstream/_versions/2.7/guides/security-testing.adoc:44
#, no-wrap
msgid "pom.xml"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-testing.adoc:51
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-security</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/2.7/guides/security-testing.adoc:54
#, no-wrap
msgid "build.gradle"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-testing.adoc:57
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-test-security\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-testing.adoc:63
msgid "This artifact provides the `io.quarkus.test.security.TestSecurity` annotation, that can be applied to test methods and test classes to control the security context that the test is run with. This allows you to do two things, you can disable authorization so tests can access secured endpoints without needing to be authenticated, and you can specify the identity that you want the tests to run under."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-testing.adoc:65
msgid "A test that runs with authorization disabled can just set the enabled property to false:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-testing.adoc:73
#, no-wrap
msgid ""
"@Test\n"
"@TestSecurity(authorizationEnabled = false)\n"
"void someTestMethod() {\n"
"...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-testing.adoc:76
msgid "This will disable all access checks, which allows the test to access secured endpoints without needing to authenticate."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-testing.adoc:78
msgid "You can also use this to configure the current user that the test will run as:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/security-testing.adoc:86
#, no-wrap
msgid ""
"@Test\n"
"@TestSecurity(user = \"testUser\", roles = {\"admin\", \"user\"})\n"
"void someTestMethod() {\n"
"...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-testing.adoc:91
msgid "This will run the test with an identity with the given username and roles. Note that these can be combined, so you can disable authorization while also providing an identity to run the test under, which can be useful if the endpoint expects an identity to be present."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-testing.adoc:93
msgid "See xref:security-openid-connect.adoc#integration-testing-security-annotation[OpenID Connect Bearer Token Integration testing], xref:security-openid-connect-web-authentication.adoc#integration-testing-security-annotation[OpenID Connect Authorization Code Flow Integration testing] and xref:security-jwt.adoc#integration-testing-security-annotation[SmallRye JWT Integration testing] for more details about testing the endpoint code which depends on the injected `JsonWebToken`."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.7/guides/security-testing.adoc:97
msgid "The feature is only available for `@QuarkusTest` and will **not** work on a `@NativeImageTest`."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.7/guides/security-testing.adoc:99
#, no-wrap
msgid "Mixing security tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-testing.adoc:104
msgid "If it becomes necessary to test security features using both `@TestSecurity` and Basic Auth (which is the fallback auth mechanism when none is defined), then Basic Auth needs to be enabled explicitly, for example by setting `quarkus.http.auth.basic=true` or `%test.quarkus.http.auth.basic=true`."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/security-testing.adoc:105
#, no-wrap
msgid "Use Wiremock for Integration Testing"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-testing.adoc:109
msgid "You can also use Wiremock to mock the authorization OAuth2 and OIDC services: See xref:security-oauth2#integration-testing.adoc[OAuth2 Integration testing], xref:security-openid-connect.adoc#integration-testing-wiremock[OpenID Connect Bearer Token Integration testing], xref:security-openid-connect-web-authentication.adoc#integration-testing-wiremock[OpenID Connect Authorization Code Flow Integration testing] and xref:security-jwt.adoc#integration-testing-wiremock[SmallRye JWT Integration testing] for more details."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/security-testing.adoc:110
#, no-wrap
msgid "References"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/security-testing.adoc:112
msgid "xref:security.adoc[Quarkus Security]"
msgstr ""
