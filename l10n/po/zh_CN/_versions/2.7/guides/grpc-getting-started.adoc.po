# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:6
#, no-wrap
msgid "Getting Started with gRPC"
msgstr "开始使用gRPC"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:12
msgid "This page explains how to start using gRPC in your Quarkus application.  While this page describes how to configure it with Maven, it is also possible to use Gradle."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:15
msgid "Let's imagine you have a regular Quarkus project, generated from the https://code.quarkus.io[Quarkus project generator].  The default configuration is enough, but you can also select some extensions if you want."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:16
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:20
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:22
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:24
msgid "The solution is located in the `grpc-plain-text-quickstart` {quickstarts-tree-url}/grpc-plain-text-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:25
#, no-wrap
msgid "Configuring your project"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:28
msgid "Edit the `pom.xml` file to add the Quarkus gRPC extension dependency (just under `<dependencies>`):"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:35
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-grpc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:39
msgid "By default the `quarkus-grpc` extension relies on reactive programming model, in this guide we will follow reactive approach.  Under the dependencies section of your `pom.xml` file replace the `quarkus-resteasy` dependency with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:46
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-reactive</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:51
msgid "Make sure you have `generate-code` goal of `quarkus-maven-plugin` enabled in your `pom.xml`.  If you wish to generate code from different `proto` files for tests, also add the `generate-code-tests` goal.  Please note that no additional task/goal is required for the Gradle plugin."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:73
#, no-wrap
msgid ""
"<build>\n"
"    <plugins>\n"
"        <plugin>\n"
"            <groupId>io.quarkus</groupId>\n"
"            <artifactId>quarkus-maven-plugin</artifactId>\n"
"            <version>${quarkus-plugin.version}</version>\n"
"            <extensions>true</extensions>\n"
"            <executions>\n"
"                <execution>\n"
"                    <goals>\n"
"                        <goal>build</goal>\n"
"                        <goal>generate-code</goal>\n"
"                        <goal>generate-code-tests</goal>\n"
"                    </goals>\n"
"                </execution>\n"
"            </executions>\n"
"        </plugin>\n"
"    </plugins>\n"
"</build>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:77
msgid "With this configuration, you can put your service and message definitions in the `src/main/proto` directory.  `quarkus-maven-plugin` will generate Java files from your `proto` files."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:83
msgid "`quarkus-maven-plugin` retrieves a version of `protoc` (the protobuf compiler) from Maven repositories. The retrieved version matches your operating system and CPU architecture.  If this retrieved version does not work in your context, you can either force to use a different OS classifier with `-Dquarkus.grpc.protoc-os-classifier=your-os-classifier` (e.g. `osx-x86_64`).  You can also download the suitable binary and specify the location via `-Dquarkus.grpc.protoc-path=/path/to/protoc`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:86
msgid "Alternatively to using the `generate-code` goal of the `quarkus-maven-plugin`, you can use `protobuf-maven-plugin` to generate these files, more in <<Generating Java files from proto with protobuf-maven-plugin>>"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:89
msgid "Let's start with a simple _Hello_ service.  Create the `src/main/proto/helloworld.proto` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:93
#, no-wrap
msgid "syntax = \"proto3\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:97
#, no-wrap
msgid ""
"option java_multiple_files = true;\n"
"option java_package = \"io.quarkus.example\";\n"
"option java_outer_classname = \"HelloWorldProto\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:99
#, no-wrap
msgid "package helloworld;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:105
#, no-wrap
msgid ""
"// The greeting service definition.\n"
"service Greeter {\n"
"    // Sends a greeting\n"
"    rpc SayHello (HelloRequest) returns (HelloReply) {}\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:110
#, no-wrap
msgid ""
"// The request message containing the user's name.\n"
"message HelloRequest {\n"
"    string name = 1;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:115
#, no-wrap
msgid ""
"// The response message containing the greetings\n"
"message HelloReply {\n"
"    string message = 1;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:118
msgid "This `proto` file defines a simple service interface with a single method (`SayHello`), and the exchanged messages (`HelloRequest` containing the name and `HelloReply` containing the greeting message)."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:121
msgid "Before coding, we need to generate the classes used to implement and consume gRPC services.  In a terminal, run:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:125
#, no-wrap
msgid "$ mvn compile\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:128
msgid "Once generated, you can look at the `target/generated-sources/grpc` directory:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:145
#, no-wrap
msgid ""
"target/generated-sources/grpc\n"
"└── io\n"
"    └── quarkus\n"
"        └── example\n"
"            ├── Greeter.java\n"
"            ├── GreeterBean.java\n"
"            ├── GreeterClient.java\n"
"            ├── GreeterGrpc.java\n"
"            ├── HelloReply.java\n"
"            ├── HelloReplyOrBuilder.java\n"
"            ├── HelloRequest.java\n"
"            ├── HelloRequestOrBuilder.java\n"
"            ├── HelloWorldProto.java\n"
"            └── MutinyGreeterGrpc.java\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:148
msgid "These are the classes we are going to use."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:150
#, no-wrap
msgid "`proto` files with imports"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:154
msgid "Protocol Buffers specification provides a way to import `proto` files.  The Quarkus code generation mechanism lets you control the scope of dependencies to scan for possible imports by setting the `quarkus.generate-code.grpc.scan-for-imports` property to one of the following:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:156
msgid "`all` - scan all the dependencies"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:157
msgid "`none` - don't scan the dependencies, use only what is defined in the `src/main/proto` or `src/test/proto`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:158
msgid "`groupId1:artifactId1,groupId2:artifactId2` - scan only the dependencies with group id and artifact id in the list."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:161
msgid "If not specified, the property is set to `com.google.protobuf:protobuf-java`.  To override it, set the `quarkus.generate-code.grpc.scan-for-imports` property in your application.properties to the desired value, e.g."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:165
#, no-wrap
msgid "quarkus.generate-code.grpc.scan-for-imports=all\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:167
#, no-wrap
msgid "`proto` files from dependencies"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:169
msgid "In some cases, you may want to use `proto` files from a different project to generate the gRPC stubs. In this case:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:171
msgid "Add a dependency on the artifact that contains the proto file to your project"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:172
msgid "In `application.properties`, specify the dependencies you want to scan for proto files."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:176
#, no-wrap
msgid "quarkus.generate-code.grpc.scan-for-proto=<groupId>:<artifactId>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:178
msgid "The value of the property may be `none`, which is the default value, or a comma separated list of `groupId:artifactId` coordinates."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:179
#, no-wrap
msgid "Implementing a gRPC service"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:182
msgid "Now that we have the generated classes let's implement our _hello_ service."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:186
msgid "With Quarkus, implementing a service requires to implement the generated service interface based on Mutiny, a Reactive Programming API integrated in Quarkus, and expose it as a CDI bean.  Learn more about Mutiny on the xref:mutiny-primer.adoc[Mutiny guide].  The service class must be annotated with the `@io.quarkus.grpc.GrpcService` annotation."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:187
#, no-wrap
msgid "Implementing a service"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:190
msgid "Create the `src/main/java/org/acme/HelloService.java` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:194
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:222
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:272
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:201
#, no-wrap
msgid ""
"import io.grpc.stub.StreamObserver;\n"
"import io.quarkus.example.Greeter;\n"
"import io.quarkus.example.HelloReply;\n"
"import io.quarkus.example.HelloRequest;\n"
"import io.quarkus.grpc.GrpcService;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:204
#, no-wrap
msgid ""
"@GrpcService <1>\n"
"public class HelloService implements Greeter {  <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:212
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<HelloReply> sayHello(HelloRequest request) { <3>\n"
"        return Uni.createFrom().item(() ->\n"
"                HelloReply.newBuilder().setMessage(\"Hello \" + request.getName()).build()\n"
"        );\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:214
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:242
msgid "Expose your implementation as a bean."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:215
msgid "Implement the generated service interface."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:216
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:244
msgid "Implement the methods defined in the service definition (here we have a single method)."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:218
msgid "You can also use the default gRPC API instead of Mutiny:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:228
#, no-wrap
msgid ""
"import io.grpc.stub.StreamObserver;\n"
"import io.quarkus.example.GreeterGrpc;\n"
"import io.quarkus.example.HelloReply;\n"
"import io.quarkus.example.HelloRequest;\n"
"import io.quarkus.grpc.GrpcService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:231
#, no-wrap
msgid ""
"@GrpcService <1>\n"
"public class HelloService extends GreeterGrpc.GreeterImplBase { <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:240
#, no-wrap
msgid ""
"    @Override\n"
"    public void sayHello(HelloRequest request, StreamObserver<HelloReply> responseObserver) { <3>\n"
"        String name = request.getName();\n"
"        String message = \"Hello \" + name;\n"
"        responseObserver.onNext(HelloReply.newBuilder().setMessage(message).build()); <4>\n"
"        responseObserver.onCompleted(); <5>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:243
msgid "Extends the `ImplBase` class. This is a generated class."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:245
msgid "Build and send the response."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:246
msgid "Close the response."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:251
msgid "If your service implementation logic is blocking (use blocking I/O for example), annotate your method with `@Blocking`.  The `io.smallrye.common.annotation.Blocking` annotation instructs the framework to invoke the annotated method on a worker thread instead of the I/O thread (event-loop)."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:252
#, no-wrap
msgid "The gRPC server"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:256
msgid "The services are _served_ by a _server_.  Available services (_CDI beans_) are automatically registered and exposed."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:259
msgid "By default, the server is exposed on `localhost:9000`, and uses _plain-text_ (so no TLS) when running normally, and `localhost:9001` for tests."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:261
msgid "Run the application using: `mvn quarkus:dev`."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:262
#, no-wrap
msgid "Consuming a gRPC service"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:266
msgid "In this section, we are going to consume the service we expose.  To simplify, we are going to consume the service from the same application, which in the real world, does not make sense."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:268
msgid "Open the existing `org.acme.ExampleResource` class, and edit the content to become:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:277
#, no-wrap
msgid ""
"import io.quarkus.example.Greeter;\n"
"import io.quarkus.example.HelloRequest;\n"
"import io.quarkus.grpc.GrpcClient;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:283
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.PathParam;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:286
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class ExampleResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:289
#, no-wrap
msgid ""
"    @GrpcClient                               // <1>\n"
"    Greeter hello;                            // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:295
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"hello\";\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:303
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/{name}\")\n"
"    public Uni<String> hello(@PathParam(\"name\") String name) {\n"
"        return hello.sayHello(HelloRequest.newBuilder().setName(name).build())\n"
"                .onItem().transform(helloReply -> helloReply.getMessage());  // <3>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:305
msgid "Inject the service and configure its name. The name is used in the application configuration. If not specified then the field name is used instead: `hello` in this particular case."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:306
msgid "Use the generated service interface based on Mutiny API."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:307
msgid "Invoke the service."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:310
msgid "We need to configure the application to indicate where the `hello` service is found.  In the `src/main/resources/application.properties` file, add the following property:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:314
#, no-wrap
msgid "quarkus.grpc.clients.hello.host=localhost\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:317
msgid "`hello` is the name used in the `@GrpcClient` annotation."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:318
msgid "`host` configures the service host (here it's localhost)."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:320
msgid "Then, open http://localhost:8080/hello/quarkus in a browser, and you should get `Hello quarkus`!"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:321
#, no-wrap
msgid "Packaging the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:325
msgid "Like any other Quarkus applications, you can package it with: `mvn package`.  You can also package the application into a native executable with: `mvn package -Pnative`."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:326
#, no-wrap
msgid "Generating Java files from proto with protobuf-maven-plugin"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:330
msgid "Alternatively to using Quarkus code generation to generate stubs for `proto` files, you can also use `protobuf-maven-plugin`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:332
msgid "To do it, first define the 2 following properties in the `<properties>` section:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:337
#, no-wrap
msgid ""
"<grpc.version>{grpc-version}</grpc.version>\n"
"<protoc.version>{protoc-version}</protoc.version>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:340
msgid "They configure the gRPC version and the `protoc` version."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:342
msgid "Then, add to the `build` section the `os-maven-plugin` extension and the `protobuf-maven-plugin` configuration."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:353
#, no-wrap
msgid ""
"<build>\n"
"    <extensions>\n"
"        <extension>\n"
"            <groupId>kr.motd.maven</groupId>\n"
"            <artifactId>os-maven-plugin</artifactId>\n"
"            <version>${os-maven-plugin-version}</version>\n"
"        </extension>\n"
"    </extensions>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:390
#, no-wrap
msgid ""
"    <plugins>\n"
"        <plugin>\n"
"            <groupId>org.xolstice.maven.plugins</groupId>\n"
"            <artifactId>protobuf-maven-plugin</artifactId>      // <1>\n"
"            <version>${protobuf-maven-plugin-version}</version>\n"
"            <configuration>\n"
"                <protocArtifact>com.google.protobuf:protoc:${protoc.version}:exe:${os.detected.classifier}</protocArtifact> // <2>\n"
"                <pluginId>grpc-java</pluginId>\n"
"                <pluginArtifact>io.grpc:protoc-gen-grpc-java:${grpc.version}:exe:${os.detected.classifier}</pluginArtifact>\n"
"                <protocPlugins>\n"
"                    <protocPlugin>\n"
"                        <id>quarkus-grpc-protoc-plugin</id>\n"
"                        <groupId>io.quarkus</groupId>\n"
"                        <artifactId>quarkus-grpc-protoc-plugin</artifactId>\n"
"                        <version>{quarkus-version}</version>\n"
"                        <mainClass>io.quarkus.grpc.protoc.plugin.MutinyGrpcGenerator</mainClass>\n"
"                    </protocPlugin>\n"
"                </protocPlugins>\n"
"            </configuration>\n"
"            <executions>\n"
"                <execution>\n"
"                    <id>compile</id>\n"
"                    <goals>\n"
"                        <goal>compile</goal>\n"
"                        <goal>compile-custom</goal>\n"
"                    </goals>\n"
"                </execution>\n"
"                <execution>\n"
"                    <id>test-compile</id>\n"
"                    <goals>\n"
"                        <goal>test-compile</goal>\n"
"                        <goal>test-compile-custom</goal>\n"
"                    </goals>\n"
"                </execution>\n"
"            </executions>\n"
"        </plugin>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:394
#, no-wrap
msgid ""
"        <!-- ... -->\n"
"    </plugins>\n"
"</build>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:396
msgid "The `protobuf-maven-plugin` that generates stub classes from your gRPC service definition (`proto` files)."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:398
msgid "The class generation uses a tool named `protoc`, which is OS-specific.  That's why we use the `os-maven-plugin` to target the executable compatible with the operating system."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:400
msgid "This configuration instructs the `protobuf-maven-plugin` to generate the default gRPC classes and classes using Mutiny to fit with the Quarkus development experience."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:402
msgid "When using `protobuf-maven-plugin`, instead of the `quarkus-maven-plugin`, every time you update the `proto` files, you need to re-generate the classes (using `mvn compile`)."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:404
#, no-wrap
msgid "gRPC classes from dependencies"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:408
msgid "When gRPC classes - the classes generated from `proto` files - are in a dependency of the application, then the dependency needs a Jandex index.  The `jandex-maven-plugin` can be used to create a Jandex index. More information on this topic can be found in the xref:cdi-reference.adoc#bean_discovery[Bean Discovery] section of the CDI guide."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.7/guides/grpc-getting-started.adoc:428
#, no-wrap
msgid ""
"<build>\n"
"    <plugins>\n"
"        <plugin>\n"
"            <groupId>org.jboss.jandex</groupId>\n"
"            <artifactId>jandex-maven-plugin</artifactId>\n"
"            <version>{jandex-maven-plugin-version}</version>\n"
"            <executions>\n"
"                <execution>\n"
"                <id>make-index</id>\n"
"                <goals>\n"
"                    <goal>jandex</goal>\n"
"                </goals>\n"
"                </execution>\n"
"            </executions>\n"
"        </plugin>\n"
"    </plugins>\n"
"</build>\n"
msgstr ""
