# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-11-17 12:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.13/guides/getting-started-reactive.adoc
#, no-wrap
msgid "Getting Started With Reactive"
msgstr "响应式入门"

#: _versions/2.13/guides/getting-started-reactive.adoc
msgid ""
"_Reactive_ is a set of principles to build robust, efficient, and concurrent applications and systems.\n"
"These principles let you handle more load than traditional approaches while using the resources (CPU and memory) more efficiently while also reacting to failures gracefully."
msgstr "_Reactive_ 是一组用于构建健壮、高效且并发的应用程序和系统的原则。 这些原则使您可以处理比传统方法更多的负载，同时更有效地使用资源（CPU 和内存），同时还可以优雅地对故障做出反应。"

#: _versions/2.13/guides/getting-started-reactive.adoc
msgid ""
"Quarkus is a _Reactive_ framework.\n"
"Since the beginning, _Reactive_ has been an essential tenet of the Quarkus architecture.\n"
"It includes many reactive features and offers a broad ecosystem."
msgstr "Quarkus是一个 _Reactive_ 框架。 从一开始，_Reactive_ 就一直是Quarkus架构的基本原则。 它包括许多反应式功能，并提供广泛的生态系统。"

#: _versions/2.13/guides/getting-started-reactive.adoc
msgid ""
"This guide is not an in-depth article about what _Reactive_ is and how Quarkus enables reactive architectures.\n"
"If you want to read more about these topics, refer to the xref:quarkus-reactive-architecture.adoc[Reactive Architecture guide], which provides an overview of the Quarkus reactive ecosystem."
msgstr "本指南不是一篇关于 _Reactive_ 是什么以及Quarkus如何实现响应式架构的深入文章。 如果你想阅读更多关于这些主题的信息，请参考 xref:quarkus-reactive-architecture.adoc[响应式架构指南]，它提供了Quarkus响应式生态系统的概述。"

#: _versions/2.13/guides/getting-started-reactive.adoc
msgid ""
"In this guide, we will get you started with some reactive features of Quarkus.\n"
"We are going to implement a simple CRUD application.\n"
"Yet, unlike in the xref:hibernate-orm-panache.adoc[Hibernate with Panache guide], it uses the reactive features of Quarkus."
msgstr "在本指南中，我们将带您开始了解Quarkus的一些响应式功能。 我们将实现一个简单的 CRUD 应用程序。 这部分与 xref:hibernate-orm-panache.adoc[Hibernate与Panache指南]不同，它使用了Quarkus的响应式功能。"

#. type: Plain text
#: _versions/2.13/guides/getting-started-reactive.adoc
msgid "This guide will help you with:"
msgstr "本指南将帮助您："

#. type: Plain text
#: _versions/2.13/guides/getting-started-reactive.adoc
msgid "Bootstrapping a reactive CRUD application with Quarkus"
msgstr "使用 Quarkus 引导响应式 CRUD 应用程序"

#. type: Plain text
#: _versions/2.13/guides/getting-started-reactive.adoc
msgid "Using Hibernate Reactive with Panache to interact with a database in a reactive fashion"
msgstr "将 Hibernate Reactive 与 Panache 结合使用，以响应式方式与数据库进行交互"

#. type: Plain text
#: _versions/2.13/guides/getting-started-reactive.adoc
msgid "Using RESTEasy Reactive to implement HTTP API while enforcing the reactive principle"
msgstr "使用 RESTEasy Reactive 实现 HTTP API，同时强制执行响应式原则"

#. type: Plain text
#: _versions/2.13/guides/getting-started-reactive.adoc
msgid "Packaging and Running the application"
msgstr "打包和运行应用程序"

#. type: Title ==
#: _versions/2.13/guides/getting-started-reactive.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#: _versions/2.13/guides/getting-started-reactive.adoc
msgid ""
"Verify that Maven is using the Java version you expect.\n"
"If you have multiple JDKs installed, make sure Maven is using the expected one.\n"
"You can verify which JDK Maven uses by running `mvn --version.`"
msgstr "验证Maven正在使用您期望的Java版本。如果安装了多个JDK，请确保Maven使用的是适当的版本。你可以通过运行 `mvn --version` 来验证Maven使用的是哪个JDK"

#. type: Title ==
#: _versions/2.13/guides/getting-started-reactive.adoc
#, no-wrap
msgid "Imperative vs. Reactive: a question of threads"
msgstr "指令式与响应式：线程的问题"

#: _versions/2.13/guides/getting-started-reactive.adoc
msgid ""
"As mentioned above, in this guide, we are going to implement a reactive CRUD application.\n"
"But you may wonder what the differences and benefits are in comparison to the traditional and imperative model."
msgstr "如上所述，在本指南中，我们将实现一个响应式CRUD应用程序。但您可能想知道，与传统的、指令式的模式相比，它有什么不同和好处。"

#: _versions/2.13/guides/getting-started-reactive.adoc
msgid ""
"To better understand the contrast, we need to explain the difference between the reactive and imperative execution models.\n"
"It's essential to comprehend that _Reactive_ is not just a different execution model, but that distinction is necessary to understand this guide."
msgstr "为了更好地理解这种对比，我们需要解释响应式执行模型和指令式执行模型之间的区别。理解 _Reactive_ 不仅仅是一种不同的执行模型是必要的，而且这一区别对于理解本指南是必要的。"

#: _versions/2.13/guides/getting-started-reactive.adoc
msgid ""
"In the traditional and imperative approach, frameworks assign a thread to handle the request.\n"
"So, the whole processing of the request runs on this worker thread.\n"
"This model does not scale very well.\n"
"Indeed, to handle multiple concurrent requests, you need multiple threads; and so your application concurrency is constrained by the number of threads.\n"
"In addition, these threads are blocked as soon as your code interacts with remote services.\n"
"So, it leads to inefficient usage of the resources, as you may need more threads, and each thread, as they are mapped to OS threads, has a cost in terms of memory and CPU."
msgstr "在传统的指令式方法中，框架分配一个线程来处理请求。因此，请求的整个处理都运行在这个工作线程上。这个模型的扩展性不太好。事实上，要处理多个并发请求，你需要多个线程。因此，应用程序的并发性受到线程数量的限制。此外，只要您的代码与远程服务交互，这些线程就会被阻塞。因此，这会导致资源的低效使用，因为您可能需要更多的线程，而每个线程在映射到OS线程时，在内存和CPU方面都有成本。"

#: _versions/2.13/guides/getting-started-reactive.adoc
msgid ""
"On the other side, the reactive model relies on non-blocking I/Os and a different execution model.\n"
"Non-blocking I/O provides an efficient way to deal with concurrent I/O.\n"
"A minimal amount of threads called I/O threads, can handle many concurrent I/O.\n"
"With such a model, request processing is not delegated to a worker thread but uses these I/O threads directly.It saves memory and CPU as there is no need to create worker threads to handle the requests.\n"
"It also improves the concurrency as it removes the constraint on the number of threads.\n"
"Finally, it also improves response time as it reduces the number of thread switches."
msgstr "另一方面，响应式模型依赖于非阻塞 I/O和不同的执行模型。非阻塞I/O提供了一种处理并发I/O的有效方法。最小数量的线程称为I/O线程，可以处理许多并发I/O。使用这样的模型，请求处理不会委托给工作线程，而是直接使用这些I/O线程。它节省了内存和CPU，因为不需要创建工作线程来处理请求。它还改善了并发性，因为它消除了对线程数量的限制。最后，它还改善了响应时间，因为它减少了线程开关的数量。"

#. type: Title ==
#: _versions/2.13/guides/getting-started-reactive.adoc
#, no-wrap
msgid "From sequential to continuation style"
msgstr "从顺序到延续风格"

#: _versions/2.13/guides/getting-started-reactive.adoc
msgid ""
"So, with the reactive execution model, the requests are processed using I/O threads.\n"
"But that's not all.\n"
"An I/O thread can handle multiple concurrent requests.\n"
"How? Here is the trick and one of the most significant differences between reactive and imperative."
msgstr "因此，使用响应式执行模型，请求是使用I/O线程处理的。但这还不是全部。一个I/O线程可以处理多个并发请求。如何实现？这是一个技巧，也是响应式和指令式之间最重要的区别之一。"

#: _versions/2.13/guides/getting-started-reactive.adoc
msgid ""
"When processing a request requires interacting with a remote service, like an HTTP API or a database, it does not block the execution while waiting for the response.\n"
"Instead, it schedules the I/O operation and attaches a continuation, i.e., the request processing remaining code.\n"
"This continuation can be passed as a callback (a function invoked with the I/O outcome), or use more advanced constructs such as reactive programming or co-routines.\n"
"Regardless of how the continuation is expressed, the essential aspect is the release of the I/O thread and, as a consequence, the fact that this thread can be used to process another request.\n"
"When the scheduled I/O completes, the I/O thread executes the continuation, and the processing of the pending request continues."
msgstr "当处理请求需要与远程服务(如HTTP API或数据库)交互时，它不会在等待响应时阻塞执行。相反，它调度I/O操作并附加一个延续，即请求处理剩余的代码。这种延续可以作为回调传递 (与I/O结果一起调用的函数)，或者使用更高级的结构，诸如响应式编程或协同程序。不管延续是如何表示的，最基本的方面是释放I/O线程，因此，这个线程可以用来处理另一个请求。当计划的I/O完成时，I/O线程执行延续，并继续处理挂起的请求。"

#: _versions/2.13/guides/getting-started-reactive.adoc
msgid ""
"So, unlike the imperative model, where I/O blocks the execution, reactive switches to a continuation-based design, where the I/O threads are released, and continuation invoked when the I/Os complete.\n"
"As a result, the I/O thread can handle multiple concurrent requests, improving the overall concurrency of the application."
msgstr "因此，与I/O阻塞执行的指令式模型不同，响应式切换到基于延续的设计，其中I/O线程被释放，而延续在I/O完成时被调用。因此，I/O线程可以处理多个并发请求，从而提高应用程序的整体并发性。"

#: _versions/2.13/guides/getting-started-reactive.adoc
msgid ""
"But, there is a catch.\n"
"We need a way to write continuation-passing code.\n"
"There are many ways of doing this.\n"
"In Quarkus, we propose:"
msgstr "但是，有一个问题。我们需要一种方法来编写延续传递代码。有很多方法可以做到这一点。在Quarkus，我们提出："

#. type: Plain text
#: _versions/2.13/guides/getting-started-reactive.adoc
#, fuzzy
msgid "Mutiny - an intuitive and event-driven reactive programming library"
msgstr "Mutiny - 直观、事件驱动的反应式编程库"

#. type: Plain text
#: _versions/2.13/guides/getting-started-reactive.adoc
#, fuzzy
msgid "Kotlin co-routines - a way to write asynchronous code in a sequential manner"
msgstr "Kotlin 共同例程--一种以顺序方式编写异步代码的方法"

#: _versions/2.13/guides/getting-started-reactive.adoc
msgid ""
"In this guide, we will use Mutiny.\n"
"To know more about Mutiny, check the xref:mutiny-primer.adoc[Mutiny documentation]."
msgstr "在本指南中，我们将使用Mutiny。想要了解更多关于Mutiny的信息，请查看 xref:mutiny-primer.adoc[Mutiny文档]。"

#: _versions/2.13/guides/getting-started-reactive.adoc
msgid ""
"Project Loom is coming to the JDK soon and proposes a virtual thread-based model.\n"
"The Quarkus architecture is ready to support Loom as soon as it's become globally available."
msgstr "Loom项目很快就会加入到JDK中，它提出了一个基于虚拟线程的模型。一旦在全局范围内可用，Quarkus架构就可以支持Loom。"

#. type: Title ==
#: _versions/2.13/guides/getting-started-reactive.adoc
#, no-wrap
msgid "Bootstrapping the Reactive Fruits application"
msgstr "启动响应式水果应用程序"

#. type: Plain text
#: _versions/2.13/guides/getting-started-reactive.adoc
msgid "With this in mind, let's see how we can develop a CRUD application with Quarkus, which will use the I/O thread to handle the HTTP requests, interact with a database, process the result, and write the HTTP response; in other words: a reactive CRUD application."
msgstr "考虑到这一点，让我们看看如何使用Quarkus开发一个CRUD应用程序，它将使用I/O线程处理HTTP请求，与数据库交互，处理结果，并编写HTTP响应，换句话说：一个响应式CRUD应用程序。"

#. type: Plain text
#: _versions/2.13/guides/getting-started-reactive.adoc
msgid "While we recommend you to follow the step-by-step instructions, you can find the final solution on https://github.com/quarkusio/quarkus-quickstarts/tree/main/hibernate-reactive-panache-quickstart."
msgstr "虽然我们建议您按照步骤操作，但您可以在 https://github.com/quarkusio/quarkus-quickstarts/tree/main/hibernate-reactive-panache-quickstart上找到最终的解决方案。"

#. type: Plain text
#: _versions/2.13/guides/getting-started-reactive.adoc
msgid "First, go to https://code.quarkus.io[code.quarkus.io] and select the following extensions:"
msgstr "首先，访问 https://code.quarkus.io[code.quarkus.io] 并选择以下扩展："

#. type: Plain text
#: _versions/2.13/guides/getting-started-reactive.adoc
#, fuzzy
msgid "RESTEasy Reactive Jackson"
msgstr "RESTEasy Reactive Jackson"

#. type: Plain text
#: _versions/2.13/guides/getting-started-reactive.adoc
#, fuzzy
msgid "Hibernate Reactive with Panache"
msgstr "酣畅淋漓的冬眠反应"

#. type: Plain text
#: _versions/2.13/guides/getting-started-reactive.adoc
#, fuzzy
msgid "Reactive PostgreSQL client"
msgstr "反应式 PostgreSQL 客户端"

#: _versions/2.13/guides/getting-started-reactive.adoc
msgid ""
"The last extension is the reactive database driver for PostgreSQL.\n"
"Hibernate Reactive uses that driver to interact with the database without blocking the caller thread."
msgstr "最后一个扩展是PostgreSQL的响应式数据库驱动程序。Hibernate响应式使用该驱动程序与数据库交互，而不会阻塞调用线程。"

#. type: Plain text
#: _versions/2.13/guides/getting-started-reactive.adoc
msgid "Once selected, click on \"Generate your application\", download the zip file, unzip it and open the code in your favorite IDE."
msgstr "选中后，单击 \"Generate your application\"，下载压缩文件，解压缩并在您喜欢的IDE中打开代码。"

#. type: Title ==
#: _versions/2.13/guides/getting-started-reactive.adoc
#, no-wrap
msgid "Reactive Panache Entity"
msgstr "响应式Panache实体"

#. type: Plain text
#: _versions/2.13/guides/getting-started-reactive.adoc
msgid "Let's start with the `Fruit` entity.Create the `src/main/java/org/acme/hibernate/orm/panache/Fruit.java` file with the following content:"
msgstr "让我们从 `Fruit` 实体开始。创建 `src/main/java/org/acme/hibernate/orm/panache/Fruit.java` 文件，内容如下:"

#. type: Plain text
#: _versions/2.13/guides/getting-started-reactive.adoc
msgid "Make sure you import the reactive variant of `PanacheEntity`."
msgstr "确保你导入了 `PanacheEntity` 的响应式类库。"

#: _versions/2.13/guides/getting-started-reactive.adoc
msgid ""
"This class represents `Fruits`.\n"
"It's a straightforward entity with a single field (`name`).\n"
"Note that it uses `io.quarkus.hibernate.reactive.panache.PanacheEntity`, the reactive variant of `PanacheEntity`.\n"
"So, behind the scenes, Hibernate uses the execution model we described above.\n"
"It interacts with the database without blocking the thread.\n"
"In addition, this reactive `PanacheEntity` proposes a reactive API.\n"
"We will use this API to implement the REST endpoint."
msgstr "这个类代表 `Fruits`。它是一个简单的实体，只有一个字段 (`name`)。注意，它使用的是 `io.quarkus.hibernate.reactive.panache.PanacheEntity`，是 `PanacheEntity` 的响应式类库。因此，Hibernate在幕后使用我们前面描述的执行模型。它与数据库交互而不阻塞线程。此外，这个响应式的 `PanacheEntity` 提出了一个响应式API。我们将使用这个API来实现REST端点。"

#. type: Plain text
#: _versions/2.13/guides/getting-started-reactive.adoc
msgid "Before going further, open the `src/main/resource/application.properties` file and add:"
msgstr "在继续之前，打开 `src/main/resource/application.properties` 文件并添加："

#. type: Plain text
#: _versions/2.13/guides/getting-started-reactive.adoc
msgid "It instructs the application to use PostgreSQL for the database and to handle the database schema generation."
msgstr "它指示应用程序对数据库使用PostgreSQL，并处理数据库模式的生成。"

#. type: Plain text
#: _versions/2.13/guides/getting-started-reactive.adoc
msgid "In the same directory, create an `import.sql` file, which inserts a few fruits, so we don't start with an empty database in dev mode:"
msgstr "在同一个目录中，创建一个 `import.sql` 文件，它插入了一些水果数据，所以我们不会在dev模式中面对一个空数据库开始："

#: _versions/2.13/guides/getting-started-reactive.adoc
msgid ""
"In a terminal, launch the application in dev mode using: `./mvnw quarkus:dev`.\n"
"Quarkus automatically starts a database instance for you and configure the application. Now we only need to implement the HTTP endpoint."
msgstr "在终端中，使用：`./mvnw quarkus:dev`。Quarkus会自动为您启动一个数据库实例并配置应用程序。现在我们只需要实现HTTP端点。"

#. type: Title ==
#: _versions/2.13/guides/getting-started-reactive.adoc
#, no-wrap
msgid "Reactive Resource"
msgstr "响应式资源"

#: _versions/2.13/guides/getting-started-reactive.adoc
msgid ""
"Because the interaction with the database is non-blocking and asynchronous, we need to use asynchronous constructs to implement our HTTP resource.\n"
"Quarkus uses Mutiny as its central reactive programming model.\n"
"So, it supports returning Mutiny types (`Uni` and `Multi`) from HTTP endpoints.\n"
"Also, our Fruit Panache entity exposes methods using these types, so we only need to implement the _glue_."
msgstr "由于与数据库的交互是非阻塞的和异步的，我们需要使用异步构造来实现我们的HTTP资源。Quarkus使用Mutiny作为其核心响应式编程模型。因此，它支持从HTTP端点返回Mutiny类型 (`Uni` and `Multi`) 。此外，水果Panache实例使用这些类型公开方法，因此我们只需要实现 _glue_。"

#. type: Plain text
#: _versions/2.13/guides/getting-started-reactive.adoc
msgid "Create the `src/main/java/org/acme/hibernate/orm/panache/FruitResource.java` file with the following content:"
msgstr "创建 `src/main/java/org/acme/hibernate/orm/panache/FruitResource.java` 文件，内容如下："

#: _versions/2.13/guides/getting-started-reactive.adoc
msgid ""
"Let's start with the `getAll` method. The `getAll` method returns all the fruits stored in the database.\n"
"In the `FruitResource`, add the following code:"
msgstr "让我们从 `getAll` 方法开始。 `getAll` 方法返回存储在数据库中的所有水果对象。在 `FruitResource` 中，添加以下代码："

#. type: Plain text
#: _versions/2.13/guides/getting-started-reactive.adoc
msgid "Open http://localhost:8080/fruits to invoke this method:"
msgstr "打开 http://localhost:8080/fruits 调用这个方法："

#: _versions/2.13/guides/getting-started-reactive.adoc
msgid ""
"We get the expected JSON array.\n"
"RESTEasy Reactive automatically maps the list into a JSON Array, except if instructed otherwise."
msgstr "我们得到了预期的JSON数组。RESTEasy Reactive自动将列表映射到JSON数组，除非另有指示。"

#: _versions/2.13/guides/getting-started-reactive.adoc
msgid ""
"Look at the return type; it returns a `Uni` of `List<Fruit>`.\n"
"`Uni` is an asynchronous type.\n"
"It's a bit like a future.\n"
"It's a placeholder that will get its value (item) later.\n"
"When it receives the item (Mutiny says it _emits_ its item), you can attach some behavior.\n"
"That's how we express the continuation: get a uni, and when the uni emits its item, execute the rest of the processing."
msgstr "看看返回类型，它返回 `List<Fruit>` 的 `Uni` 。`Uni` 是一个异步类型。这有点像未来。它是一个占位符，稍后将获得它的值条目 (item) 。当它接收条目(Mutiny说它 _输出_ 的条目)时，你可以附加一些行为。这就是我们表示延续的方式：获取一个uni，当uni输出它的条目时，执行其余的处理。"

#: _versions/2.13/guides/getting-started-reactive.adoc
msgid ""
"Reactive developers may wonder why we can't return a stream of fruits directly.\n"
"It tends to be a bad idea when dealing with a database.\n"
"Relational databases do not handle streaming well.\n"
"It’s a problem of protocols not designed for this use case.\n"
"So, to stream rows from the database, you need to keep a connection (and sometimes a transaction) open until all the rows are consumed.\n"
"If you have slow consumers, you break the golden rule of databases: don’t hold connections for too long.\n"
"Indeed, the number of connections is rather low, and having consumers keeping them for too long will dramatically reduce the concurrency of your application.\n"
"So, when possible, use a `Uni<List<T>>` and load the content.\n"
"If you have a large set of results, implement pagination."
msgstr "响应式程序开发者可能会想为什么我们不能直接返回水果流。在处理数据库时，这往往不是一个好主意。关系数据库不能很好地处理流。这是协议不是为这个用例设计的问题。因此，要从数据库流输出行，您需要保持一个连接（有时是一个事务）打开，直到所有行都被消耗掉。如果您的用户很慢，那么您就违反了数据库的黄金法则：不要保持连接太长时间。实际上，可用连接的数量相当少，并且让使用者保持这些连接太长时间将极大地降低应用程序的并发性。所以，如果可能的话，使用 `Uni<List<T>>` 并加载内容。如果有大量结果，则实现分页。"

#. type: Plain text
#: _versions/2.13/guides/getting-started-reactive.adoc
msgid "Let's continue our API with `getSingle`:"
msgstr "让我们用 `getSingle` 继续我们的API："

#: _versions/2.13/guides/getting-started-reactive.adoc
msgid ""
"In this case, we use `Fruit.findById` to retrieve the fruit.\n"
"It returns a `Uni`, which will complete when the database has retrieved the row."
msgstr "在本例中，我们使用 `Fruit.findById` 来检索水果。当数据库检索到该行时，它将返回一个 `Uni`。"

#. type: Plain text
#: _versions/2.13/guides/getting-started-reactive.adoc
msgid "The `create` method allows adding a new fruit to the database:"
msgstr "`create` 方法允许向数据库中添加新水果记录："

#: _versions/2.13/guides/getting-started-reactive.adoc
msgid ""
"The code is a bit more involved.\n"
"To write to a database, we need a transaction.\n"
"So we use `Panache.withTransaction` to get one (asynchronously) and call the `persist` method when we receive the transaction.\n"
"The `persist` method is also returning a `Uni`.\n"
"This `Uni` emits the result of the insertion of the fruit in the database.\n"
"Once the insertion completes (and that's our continuation), we create a `201 CREATED` response.\n"
"RESTEasy Reactive automatically reads the request body as JSON and creates the `Fruit` instance."
msgstr "代码稍微复杂一些。要写入数据库，我们需要一个事务。所以我们用 `Panache.withTransaction` 来获取一个（异步），并在接收到事务时调用 `persist` 方法。 `persist` 方法也返回一个 `Uni`。这个 `Uni` 发出水果插入数据库的结果。一旦插入完成（这就是我们的延续），我们创建一个 `201 CREATED` 响应。RESTEasy Reactive会自动将请求体读取为JSON并创建 `Fruit` 实例。"

#: _versions/2.13/guides/getting-started-reactive.adoc
msgid ""
"The `.onItem().transform(...)` can be replaced with `.map(...)`.\n"
"`map` is a shortcut."
msgstr "`.onItem().transform(...)`  可以用 `.map(...)` 取代。`map` 是它的快捷方式。"

#. type: Plain text
#: _versions/2.13/guides/getting-started-reactive.adoc
msgid "If you have https://curl.se/[curl] on your machine, you can try the endpoint using:"
msgstr "如果在您的机器安装了 https://curl.se/[curl]命令，便可以尝试使用端点："

#. type: Plain text
#: _versions/2.13/guides/getting-started-reactive.adoc
msgid "Following the same ideas, you can implement the other CRUD methods."
msgstr "遵循相同的思路，您可以实现其他CRUD方法。"

#. type: Title ==
#: _versions/2.13/guides/getting-started-reactive.adoc
#, no-wrap
msgid "Testing and Running"
msgstr "测试和运行"

#: _versions/2.13/guides/getting-started-reactive.adoc
msgid ""
"Testing a reactive application is similar to testing a non-reactive one: use the HTTP endpoint and verify the HTTP responses.\n"
"The fact that the application is reactive does not change anything."
msgstr "测试响应式应用程序与测试非响应式应用程序类似：使用HTTP端点并验证HTTP响应。应用程序是响应式的这一事实并没有改变任何事情。"

#. type: Plain text
#: _versions/2.13/guides/getting-started-reactive.adoc
msgid "In https://github.com/quarkusio/quarkus-quickstarts/blob/main/hibernate-reactive-panache-quickstart/src/test/java/org/acme/hibernate/orm/panache/FruitsEndpointTest.java[FruitsEndpointTest.java] you can see how the test for the fruit application can be implemented."
msgstr "在 https://github.com/quarkusio/quarkus-quickstarts/blob/main/hibernate-reactive-panache-quickstart/src/test/java/org/acme/hibernate/orm/panache/FruitsEndpointTest.java[FruitsEndpointTest.java]中，您可以看到如何实现水果应用程序的测试。"

#. type: Plain text
#: _versions/2.13/guides/getting-started-reactive.adoc
msgid "Packaging and running the application does not change either."
msgstr "打包和运行应用程序也不会改变。"

#. type: Plain text
#: _versions/2.13/guides/getting-started-reactive.adoc
msgid "You can use the following command as usual:"
msgstr "您可以像往常一样使用以下命令："

#. type: Plain text
#: _versions/2.13/guides/getting-started-reactive.adoc
msgid "or to build a native executable:"
msgstr "或者构建一个原生可执行文件："

#. type: Plain text
#: _versions/2.13/guides/getting-started-reactive.adoc
msgid "You can also package the application in a container."
msgstr "还可以将应用程序打包在容器中。"

#. type: Plain text
#: _versions/2.13/guides/getting-started-reactive.adoc
msgid "To run the application, don’t forget to start a database and provide the configuration to your application."
msgstr "要运行应用程序，不要忘记启动数据库并为应用程序提供配置。"

#. type: Plain text
#: _versions/2.13/guides/getting-started-reactive.adoc
msgid "For example, you can use Docker to run your database:"
msgstr "例如，你可以使用Docker来运行你的数据库："

#. type: Plain text
#: _versions/2.13/guides/getting-started-reactive.adoc
msgid "Then, launch the application using:"
msgstr "然后，使用以下命令启动应用程序："

#. type: Plain text
#: _versions/2.13/guides/getting-started-reactive.adoc
msgid "Or, if you packaged your application as native executable, use:"
msgstr "或者，如果你将你的应用打包为原生可执行文件，使用："

#: _versions/2.13/guides/getting-started-reactive.adoc
msgid ""
"The parameters passed to the application are described in the datasource guide.\n"
"There are other ways to configure the application - please check the xref:config-reference.adoc#configuration-sources[configuration guide] to have an overview of the possibilities (such as env variable, .env files and so on)."
msgstr "数据源指南中描述了这些传递给应用程序的参数。还有其他方法可以配置应用程序——请查看 xref:config-reference.adoc#configuration_sources[配置指南]来了解各种可能性（例如`env`变量，`.env`文件等）。"

#. type: Title ==
#: _versions/2.13/guides/getting-started-reactive.adoc
#, no-wrap
msgid "Going further"
msgstr "进一步探索"

#: _versions/2.13/guides/getting-started-reactive.adoc
msgid ""
"This guide is a brief introduction to some reactive features offered by Quarkus.\n"
"Quarkus is a reactive framework, and so offers a lot of reactive features."
msgstr "本指南简要介绍了Quarkus提供的一些响应式特性。Quarkus是一个响应式框架，因此提供了许多响应式特性。"

#. type: Plain text
#: _versions/2.13/guides/getting-started-reactive.adoc
msgid "If you want to continue on this topic check:"
msgstr "如果你想继续这个话题，请检查："

#. type: Plain text
#: _versions/2.13/guides/getting-started-reactive.adoc
#, fuzzy
msgid "xref:quarkus-reactive-architecture.adoc[The Quarkus Reactive Architecture]"
msgstr "xref:quarkus-reactive-architecture.adoc[Quarkus 反应式架构]"

#. type: Plain text
#: _versions/2.13/guides/getting-started-reactive.adoc
#, fuzzy
msgid "xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]"
msgstr "xref:mutiny-primer.adoc[Mutiny - 直观的反应式编程库]"
