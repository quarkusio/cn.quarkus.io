# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-11-17 12:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.13/guides/class-loading-reference.adoc
#, no-wrap
msgid "Class Loading Reference"
msgstr "类加载参考"

#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid ""
"This document explains the Quarkus class loading architecture. It is intended for extension\n"
"authors and advanced users who want to understand exactly how Quarkus works."
msgstr "本文档解释了 Quarkus 类加载架构。它面向扩展作者和希望确切了解 Quarkus 工作原理的高级用户。"

#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid ""
"The Quarkus class loading architecture is slightly different depending on the mode that\n"
"the application is run in."
msgstr "根据应用程序的运行模式，Quarkus 类加载架构略有不同。"

#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid ""
"When running a production application using the `fast-jar` package type\n"
"(which is the default), almost all dependencies are loaded via the `io.quarkus.bootstrap.runner.RunnerClassLoader`\n"
"which indexes class at build time, while a small set of dependencies is loaded from the system ClassLoader."
msgstr "在使用 `fast-jar` 包类型（默认）运行生产应用程序时，几乎所有依赖项都是通过 `io.quarkus.bootstrap.runner.RunnerClassLoader` 加载的，该程序在构建时会对类进行索引，而一小部分依赖项则是通过系统 ClassLoader 加载的。"

#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid ""
"When running a production application using the `legacy-jar` package type everything is loaded\n"
"in the system ClassLoader, so it is a completely flat classpath."
msgstr "在使用 `legacy-jar` 包类型运行生产应用程序时，所有内容都会在系统 ClassLoader 中加载，因此它是一个完全扁平的类路径。"

#. type: Plain text
#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid "The flat classpath strategy is also used for GraalVM native images, since GraalVM does not really support multiple ClassLoaders."
msgstr "平坦的classpath策略也被用于GraalVM的本地镜像，因为GraalVM并不真正支持多个ClassLoaders。"

#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid ""
"For all other use cases (e.g. tests, dev mode, and building the application) Quarkus\n"
"uses the class loading architecture outlined in following section."
msgstr "对于所有其他用例（如测试、开发模式和构建应用程序），Quarkus 都使用下一节概述的类加载架构。"

#. type: Title ==
#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy, no-wrap
msgid "Bootstrapping Quarkus"
msgstr "引导Quarkus"

#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid ""
"All Quarkus applications are created by the QuarkusBootstrap class in the `independent-projects/bootstrap` module. This\n"
"class is used to resolve all the relevant dependencies (both deployment and runtime) that are needed for the Quarkus\n"
"application. The end result of this process is a `CuratedApplication`, which contains all the class loading information\n"
"for the application."
msgstr "所有 Quarkus 应用程序都是由 `independent-projects/bootstrap` 模块中的 QuarkusBootstrap 类创建的。该类用于解析 Quarkus 应用程序所需的所有相关依赖项（包括部署和运行时）。这一过程的最终结果是 `CuratedApplication` ，其中包含应用程序的所有类加载信息。"

#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid ""
"The `CuratedApplication` can then be used to create an `AugmentAction` instance, which can create production application\n"
"and start/restart runtime ones. This application instance exists within an isolated ClassLoader, it is not necessary\n"
"to have any of the Quarkus deployment classes on the class path as the curate process will resolve them for you."
msgstr "然后， `CuratedApplication` 可用于创建 `AugmentAction` 实例，该实例可创建生产应用程序并启动/重启运行时应用程序。该应用程序实例存在于一个独立的 ClassLoader 中，不需要在类路径中包含任何 Quarkus 部署类，因为 Curate 进程会为你解决这些问题。"

#. type: Plain text
#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid "This bootstrap process should be the same no matter how Quarkus is launched, just with different parameters passed in."
msgstr "无论Quarkus是如何启动的，这个启动过程都应该是一样的，只是传递的参数不同。"

#. type: Title ===
#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy, no-wrap
msgid "Current Run Modes"
msgstr "目前的运行模式"

#. type: Plain text
#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid "At the moment we have the following use cases for bootstrapping Quarkus:"
msgstr "目前，我们有以下启动Quarkus的用例。"

#. type: Plain text
#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid "Maven creating production application"
msgstr "Maven创建生产应用"

#. type: Plain text
#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid "Maven dev mode"
msgstr "Maven开发模式"

#. type: Plain text
#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid "Gradle creating a production application"
msgstr "Gradle创建一个生产应用程序"

#. type: Plain text
#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid "Gradle dev mode"
msgstr "Gradle开发模式"

#. type: Plain text
#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid "QuarkusTest (Maven, Gradle and IDE)"
msgstr "QuarkusTest（Maven、Gradle和IDE）。"

#. type: Plain text
#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid "QuarkusUnitTest (Maven, Gradle and IDE)"
msgstr "QuarkusUnitTest (Maven, Gradle and IDE)"

#. type: Plain text
#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid "QuarkusDevModeTest (Maven, Gradle and IDE)"
msgstr "QuarkusDevModeTest（Maven、Gradle和IDE）。"

#. type: Plain text
#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid "Arquillian Adaptor"
msgstr "阿基里安适应器"

#. type: Plain text
#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid "One of the goals of this refactor is to have all these different run modes boot Quarkus in fundamentally the same way."
msgstr "这次重构的目标之一是让所有这些不同的运行模式以基本相同的方式启动Quarkus。"

#. type: Title ===
#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy, no-wrap
msgid "Notes on Transformer Safety"
msgstr "变压器安全须知"

#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid ""
"A ClassLoader is said to be 'transformer safe' if it is safe to load classes in the class loader before the transformers\n"
"are ready. Once a class has been loaded it cannot be changed, so if a class is loaded before the transformers have been\n"
"prepared this will prevent the transformation from working. Loading classes in a transformer safe ClassLoader will not\n"
"prevent the transformation, as the loaded class is not used at runtime."
msgstr "如果在转换器准备就绪之前在类加载器中加载类是安全的，那么类加载器就是 \"安全的转换器\"。类一旦加载就不能更改，因此如果在转换器准备就绪之前加载类，将导致转换无法进行。在转换器安全的类加载器中加载类不会阻止转换，因为加载的类在运行时不会被使用。"

#. type: Title ==
#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy, no-wrap
msgid "ClassLoader Implementations"
msgstr "类加载器的实现"

#. type: Plain text
#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid "Quarkus has the following ClassLoaders:"
msgstr "Quarkus 有以下 ClassLoaders："

#. type: Labeled list
#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy, no-wrap
msgid "Base ClassLoader"
msgstr "基础类加载器"

#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid ""
"This is usually the normal JVM System ClassLoader. In some environments such as Maven it may be different. This ClassLoader\n"
"is used to load the bootstrap classes, and other ClassLoader instances will delegate the loading of JDK classes to it."
msgstr "这通常是正常的 JVM 系统 ClassLoader。在某些环境（如 Maven）中可能有所不同。该 ClassLoader 用于加载引导类，其他 ClassLoader 实例将委托它加载 JDK 类。"

#. type: Labeled list
#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy, no-wrap
msgid "Augment ClassLoader"
msgstr "增强类加载器"

#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid ""
"This loads all the `-deployment` artifacts and their dependencies, as well as other user dependencies. It does not load the\n"
"application root or any hot deployed code. This ClassLoader is persistent, even if the application restarts it will remain\n"
"(which is why it cannot load application classes that may be hot deployed). Its parent is the base ClassLoader, and it is\n"
"transformer safe."
msgstr "这将加载所有 `-deployment` 构件及其依赖项，以及其他用户依赖项。它不会加载应用程序根目录或任何热部署代码。该 ClassLoader 是持久的，即使应用程序重新启动，它也会保持不变（这就是为什么它不能加载可能已热部署的应用程序类）。它的父级是基础 ClassLoader，对转换器是安全的。"

#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid ""
"At present this can be configured to delegate to the Base ClassLoader, however the plan is for this option to go away and\n"
"always have this as an isolated ClassLoader. Making this an isolated ClassLoader is complicated as it means that all\n"
"the builder classes are isolated, which means that use cases that want to customise the build chains are slightly more complex."
msgstr "目前，可以将其配置为委托给基础类加载器，但计划将取消该选项，并始终将其作为隔离的类加载器。将其作为独立的 ClassLoader 会比较复杂，因为这意味着所有的构建器类都是独立的，这就意味着想要自定义构建链的用例稍微复杂一些。"

#. type: Labeled list
#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy, no-wrap
msgid "Deployment ClassLoader"
msgstr "部署类加载器"

#. type: Plain text
#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid "This can load all application classes. Its parent is the Augment ClassLoader, so it can also load all deployment classes."
msgstr "它可以加载所有应用程序类。它的父类是 Augment ClassLoader，因此也可以加载所有部署类。"

#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid ""
"This ClassLoader is non-persistent, it will be re-created when the application is started, and is isolated. This ClassLoader\n"
"is the context ClassLoader that is used when running the build steps. It is also transformer safe."
msgstr "此 ClassLoader 是非持久性的，它将在应用程序启动时重新创建，并且是孤立的。此 ClassLoader 是运行构建步骤时使用的上下文 ClassLoader。它也是安全的转换器。"

#. type: Labeled list
#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy, no-wrap
msgid "Base Runtime ClassLoader"
msgstr "基础运行时类加载器"

#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid ""
"This loads all the runtime extension dependencies, as well as other user dependencies (note that this may include duplicate\n"
"copies of classes also loaded by the Augment ClassLoader). It does not load the application root or any hot deployed\n"
"code. This ClassLoader is persistent, even if the application restarts it will remain (which is why it cannot load\n"
"application classes that may be hot deployed). Its parent is the base ClassLoader."
msgstr "这将加载所有运行时扩展依赖项以及其他用户依赖项（注意，这可能包括 Augment ClassLoader 加载的类的重复副本）。它不会加载应用程序根目录或任何热部署代码。该 ClassLoader 是持久的，即使应用程序重新启动，它也会保留（这就是为什么它不能加载可能已热部署的应用程序类）。它的父级是基础 ClassLoader。"

#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid ""
"This loads code that is not hot-reloadable, but it does support transformation (although once the class is loaded this\n"
"transformation is no longer possible). This means that only transformers registered in the first application start\n"
"will take effect, however as these transformers are expected to be idempotent this should not cause problems. An example\n"
"of the sort of transformation that might be required here is a Panache entity packaged in an external jar. This class\n"
"needs to be transformed to have its static methods implemented, however this transformation only happens once, so\n"
"restarts use the copy of the class that was created on the first start."
msgstr "这将加载不可热加载的代码，但它支持转换（不过一旦类加载完毕，这种转换就不再可能）。这意味着，只有在首次启动应用程序时注册的转换器才会生效，但由于这些转换器预计是惰性的，因此不会造成问题。这里可能需要转换的一个例子是打包在外部 jar 中的 Panache 实体。该类需要进行转换以实现其静态方法，但这种转换只发生一次，因此重新启动时将使用第一次启动时创建的类副本。"

#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid ""
"This ClassLoader is isolated from the Augment and Deployment ClassLoaders. This means that it is not possible to set\n"
"values in a static field in the deployment side, and expect to read it at runtime. This allows dev and test applications\n"
"to behave more like a production application (production applications are isolated in that they run in a whole new JVM)."
msgstr "此 ClassLoader 与 Augment 和部署 ClassLoader 是隔离的。这意味着不可能在部署侧的静态字段中设置值，并期望在运行时读取。这使得开发和测试应用程序的行为更像生产应用程序（生产应用程序是隔离的，因为它们运行在全新的 JVM 中）。"

#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid ""
"This also means that the runtime version can be linked against a different set of dependencies, e.g. the hibernate\n"
"version used at deployment time might want to include ByteBuddy, while the version used at runtime does not."
msgstr "这也意味着运行时版本可以与一组不同的依赖关系进行链接，例如，部署时使用的 hibernate 版本可能需要包含 ByteBuddy，而运行时使用的版本则不需要。"

#. type: Labeled list
#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy, no-wrap
msgid "Runtime Class Loader"
msgstr "运行时类加载器"

#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid ""
"This ClassLoader is used to load the application classes and other hot deployable resources. Its parent is the base runtime\n"
"ClassLoader, and it is recreated when the application is restarted."
msgstr "该 ClassLoader 用于加载应用程序类和其他热部署资源。它的父级是基本运行时 ClassLoader，在重启应用程序时会重新创建。"

#. type: Title ==
#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy, no-wrap
msgid "Isolated ClassLoaders"
msgstr "孤立的类加载器"

#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid ""
"The runtime ClassLoader is always isolated. This means that it will have its own copies of almost every class from the\n"
"resolved dependency list. The exception to this are:"
msgstr "运行时的 ClassLoader 总是孤立的。这意味着它将拥有已解析依赖列表中几乎所有类的副本。但以下情况除外"

#. type: Plain text
#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid "JDK classes"
msgstr "JDK类"

#. type: Plain text
#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid "Classes from artifacts that extensions have marked as parent first (more on this later)."
msgstr "来自扩展部分首先标记为父类的工件的类（后面会有更多介绍）。"

#. type: Title ===
#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy, no-wrap
msgid "Parent First Dependencies"
msgstr "母体第一依赖关系"

#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid ""
"There are some classes that should not be loaded in an isolated manner, but that should always be loaded by the system\n"
"ClassLoader (or whatever ClassLoader is responsible for bootstrapping Quarkus). Most extensions do not need to worry about\n"
"this, however there are a few cases where this is necessary:"
msgstr "有些类不应该以孤立的方式加载，而应该始终由系统 ClassLoader（或负责引导 Quarkus 的任何 ClassLoader）加载。大多数扩展都不需要担心这个问题，但在少数情况下还是有必要的："

#. type: Plain text
#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid "Some logging related classes, as logging must be loaded by the system ClassLoader"
msgstr "一些与日志相关的类，因为日志必须由系统ClassLoader加载。"

#. type: Plain text
#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid "Quarkus bootstrap itself"
msgstr "夸库斯启动本身"

#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid ""
"If this is required it can be configured in the `quarkus-extension-maven-plugin`. Note that if you\n"
"mark a dependency as parent first then all of its dependencies must also be parent first,\n"
"or a `LinkageError` can occur."
msgstr "如果需要，可在 `quarkus-extension-maven-plugin` 中进行配置。请注意，如果将某个依赖关系标记为父优先，则其所有依赖关系也必须为父优先，否则会出现 `LinkageError` 。"

#. type: Title ===
#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy, no-wrap
msgid "Banned Dependencies"
msgstr "被禁止的依赖性"

#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid ""
"There are some dependencies that we can be sure we do not want. This generally happens when a dependency has had a name\n"
"change (e.g. smallrye-config changing groups from `org.smallrye` to `org.smallrye.config`, the `javax` -> `jakarta` rename).\n"
"This can cause problems, as if these artifacts end up in the dependency tree out of date classes can be loaded that are\n"
"not compatible with Quarkus. To deal with this, extensions can specify artifacts that should never be loaded. This is\n"
"done by modifying the `quarkus-extension-maven-plugin` config in the pom (which generates the `quarkus-extension.properties`\n"
"file). Simply add an `excludedArtifacts` section as shown below:"
msgstr "有些依赖关系我们可以确定不需要。这种情况一般发生在依赖关系的名称发生变化时（例如，smallrye-config 将 `org.smallrye` 改为 `org.smallrye.config` ， `javax` → `jakarta` 重命名）。这可能会造成问题，因为如果这些工件最终出现在依赖树中，那么加载的类就可能与 Quarkus 不兼容。为了解决这个问题，扩展可以指定永远不加载的工件。这可以通过修改 pom（生成 `quarkus-extension.properties` 文件）中的 `quarkus-extension-maven-plugin` 配置来实现。只需添加 `excludedArtifacts` 部分即可，如下所示："

#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid ""
"This should only be done if the extension depends on a newer version of these artifacts. If the extension does not bring\n"
"in a replacement artifact as a dependency then classes the application needs might end up missing."
msgstr "只有当扩展依赖于这些构件的更新版本时，才应这样做。如果扩展没有将替代构件作为依赖项，那么应用程序所需的类可能会丢失。"

#. type: Title ==
#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy, no-wrap
msgid "Configuring Class Loading"
msgstr "配置类的加载"

#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid ""
"It is possible to configure some aspects of class loading in dev and test mode. This can be done using `application.properties`.\n"
"Note that class loading config is different to normal config, in that it does not use the standard Quarkus config mechanisms\n"
"(as it is needed too early), so only supports `application.properties`. The following options are supported."
msgstr "可以在开发和测试模式下配置类加载的某些方面。可以使用 `application.properties` 进行配置。请注意，类加载配置与普通配置不同，它不使用标准的 Quarkus 配置机制（因为太早需要），因此只支持 `application.properties` 。支持以下选项。"

#. type: Title ==
#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy, no-wrap
msgid "Hiding/Removing classes and resources from dependencies"
msgstr "从依赖关系中隐藏/删除类和资源"

#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid ""
"It is possible to hide/remove classes and resources from dependencies. This is an advanced option, but it can be useful\n"
"at times. This is done via the `quarkus.class-loading.removed-resources` config key, for example:"
msgstr "可以从依赖关系中隐藏/删除类和资源。这是一个高级选项，但有时很有用。例如，可以通过 `quarkus.class-loading.removed-resources` 配置键来实现："

#. type: Plain text
#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid "`quarkus.class-loading.removed-resources.\"io.quarkus\\:quarkus-integration-test-shared-library\"=io/quarkus/it/shared/RemovedResource.class`"
msgstr " `quarkus.class-loading.removed-resources.\"io.quarkus\\:quarkus-integration-test-shared-library\"=io/quarkus/it/shared/RemovedResource.class` "

#. type: Plain text
#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid "This will remove the `RemovedResource.class` file from the `io.quarkus:quarkus-integration-test-shared-library` artifact."
msgstr "这将从 `io.quarkus:quarkus-integration-test-shared-library` 工件中删除 `RemovedResource.class` 文件。"

#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid ""
"Even though this option is a class loading option it will also affect the generated application, so when the application\n"
"is created removed resources will not be accessible."
msgstr "尽管该选项是一个类加载选项，但它也会影响生成的应用程序，因此在创建应用程序时，将无法访问已删除的资源。"

#. type: Title ==
#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy, no-wrap
msgid "Reading Class Bytecode"
msgstr "读取类的字节码"

#: _versions/2.13/guides/class-loading-reference.adoc
#, fuzzy
msgid ""
"It is important to use the correct `ClassLoader`. The recommended approach is to get it by calling the\n"
"`Thread.currentThread().getContextClassLoader()` method."
msgstr "使用正确的 `ClassLoader` 非常重要。建议通过调用 `Thread.currentThread().getContextClassLoader()` 方法获取。"

#. type: Plain text
#: _versions/2.13/guides/class-loading-reference.adoc
msgid "Example:"
msgstr "例如："
