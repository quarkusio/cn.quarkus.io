# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-11-17 12:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.13/guides/security-built-in-authentication.adoc
#, no-wrap
msgid "Built-In Authentication Support"
msgstr "内置的认证支持"

#. type: Plain text
#: _versions/2.13/guides/security-built-in-authentication.adoc
msgid "The following section describes the Quarkus built-in authentication mechanisms for HTTP based FORM, BASIC, and Mutual TLS authentication. Proactive authentication is also described."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/security-built-in-authentication.adoc
#, no-wrap
msgid "Form Based Authentication"
msgstr ""

#: _versions/2.13/guides/security-built-in-authentication.adoc
msgid ""
"Quarkus provides form based authentication that works in a similar manner to traditional Servlet form based auth. Unlike\n"
"traditional form authentication, the authenticated user is not stored in an HTTP session, as Quarkus does not provide\n"
"clustered HTTP session support. Instead, the authentication information is stored in an encrypted cookie, which can\n"
"be read by all members of the cluster (provided they all share the same encryption key)."
msgstr ""

#: _versions/2.13/guides/security-built-in-authentication.adoc
msgid ""
"The encryption key can be set using the `quarkus.http.auth.session.encryption-key` property, and it must be at least 16 characters\n"
"long. This key is hashed using SHA-256 and the resulting digest is used as a key for AES-256 encryption of the cookie\n"
"value. This cookie contains an expiry time as part of the encrypted value, so all nodes in the cluster must have their\n"
"clocks synchronized. At one minute intervals a new cookie will be generated with an updated expiry time if the session\n"
"is in use."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-built-in-authentication.adoc
msgid "The following properties can be used to configure form based auth:"
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/security-built-in-authentication.adoc
#, no-wrap
msgid "Mutual TLS Authentication"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-built-in-authentication.adoc
msgid "Quarkus provides mTLS authentication so that you can authenticate users based on their X.509 certificates."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-built-in-authentication.adoc
msgid "To use this authentication method, you should first enable SSL for your application. For more details, check the xref:http-reference.adoc#ssl[Supporting secure connections with SSL] guide."
msgstr ""

#: _versions/2.13/guides/security-built-in-authentication.adoc
msgid ""
"Once your application is accepting secure connections, the next step is to configure a `quarkus.http.ssl.certificate.trust-store-file`\n"
"holding all the certificates that your application should trust as well as how your application should ask for certificates when\n"
"a client (e.g.: browser or another service) tries to access one of its protected resources."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-built-in-authentication.adoc
msgid "Configures a key store where the server's private key is located."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-built-in-authentication.adoc
msgid "Configures a trust store from where the trusted certificates are going to be loaded from."
msgstr ""

#: _versions/2.13/guides/security-built-in-authentication.adoc
msgid ""
"Defines that the server should *always* ask certificates from clients. You can relax this behavior by using `REQUEST` so\n"
"that the server should still accept requests without a certificate. Useful when you are also supporting authentication methods other than\n"
"mTLS."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-built-in-authentication.adoc
#, fuzzy
msgid "Defines a policy where only authenticated users should have access to resources from your application."
msgstr "定义了一个策略，只有经过认证的用户才能访问你的应用程序的资源。"

#: _versions/2.13/guides/security-built-in-authentication.adoc
msgid ""
"Once the incoming request matches a valid certificate in the truststore, your application should be able to obtain the subject by\n"
"just injecting a `SecurityIdentity` as follows:"
msgstr ""

#. type: Block title
#: _versions/2.13/guides/security-built-in-authentication.adoc
#, fuzzy, no-wrap
msgid "Obtaining the subject"
msgstr "获得主题"

#. type: Plain text
#: _versions/2.13/guides/security-built-in-authentication.adoc
msgid "You should also be able to get the certificate as follows:"
msgstr ""

#. type: Block title
#: _versions/2.13/guides/security-built-in-authentication.adoc
#, fuzzy, no-wrap
msgid "Obtaining the certificate"
msgstr "获得证书"

#. type: Title ===
#: _versions/2.13/guides/security-built-in-authentication.adoc
#, no-wrap
msgid "Authorization"
msgstr "授权"

#: _versions/2.13/guides/security-built-in-authentication.adoc
msgid ""
"The information from the client certificate can be used to enhance Quarkus `SecurityIdentity`. For example, one can add new roles after checking a client certificate subject name, and so on.\n"
"Please see the xref:security-customization.adoc#security-identity-customization[SecurityIdentity Customization] section for more information about customizing Quarkus `SecurityIdentity`."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/security-built-in-authentication.adoc
#, no-wrap
msgid "Proactive Authentication"
msgstr "主动认证"

#: _versions/2.13/guides/security-built-in-authentication.adoc
msgid ""
"By default, Quarkus does what we call proactive authentication. This means that if an incoming request has a\n"
"credential then that request will always be authenticated (even if the target page does not require authentication)."
msgstr ""

#: _versions/2.13/guides/security-built-in-authentication.adoc
msgid ""
"This means that requests with an invalid credential will always be rejected, even for public pages. You can change\n"
"this behavior and only authenticate when required by setting `quarkus.http.auth.proactive=false`."
msgstr ""

#: _versions/2.13/guides/security-built-in-authentication.adoc
msgid ""
"If you disable proactive authentication then the authentication process will only be run when an identity is requested,\n"
"either because there are security rules that requires the user to be authenticated, or due to programmatic access to the\n"
"current identity."
msgstr ""

#: _versions/2.13/guides/security-built-in-authentication.adoc
msgid ""
"Note that if proactive authentication is in use accessing the `SecurityIdentity` is a blocking operation. This is because\n"
"authentication may not have happened yet, and accessing it may require calls to external systems such as databases that\n"
"may block. For blocking applications this is no problem, however if you have disabled authentication in a reactive\n"
"application this will fail (as you cannot do blocking operations on the IO thread). To work around this you need to\n"
"`@Inject` an instance of `io.quarkus.security.identity.CurrentIdentityAssociation`, and call the\n"
"`Uni<SecurityIdentity> getDeferredIdentity();` method. You can then subscribe to the resulting `Uni` and will be notified\n"
"when authentication is complete and the identity is available."
msgstr ""

#: _versions/2.13/guides/security-built-in-authentication.adoc
msgid ""
"It's still possible to access the `SecurityIdentity` synchronously with `public SecurityIdentity getIdentity()`\n"
"in the xref:resteasy-reactive.adoc[RESTEasy Reactive] from endpoints annotated with `@RolesAllowed`, `@Authenticated`,\n"
"or with respective configuration authorization checks as authentication has already happened. The same is also valid\n"
"for the xref:reactive-routes.adoc[Reactive routes] if a route response is synchronous."
msgstr ""

#. type: Title ===
#: _versions/2.13/guides/security-built-in-authentication.adoc
#, no-wrap
msgid "How to customize authentication exception responses"
msgstr ""

#: _versions/2.13/guides/security-built-in-authentication.adoc
msgid ""
"By default, the authentication security constraints are enforced before the JAX-RS chain starts.\n"
"Disabling the proactive authentication effectively shifts this process to the moment when the JAX-RS chain starts running thus making it possible to use JAX-RS `ExceptionMapper` to capture Quarkus Security authentication exceptions such as `io.quarkus.security.AuthenticationFailedException`, for example:"
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/security-built-in-authentication.adoc
#, no-wrap
msgid "References"
msgstr "参考文献"

#. type: Plain text
#: _versions/2.13/guides/security-built-in-authentication.adoc
msgid "xref:security.adoc[Quarkus Security]"
msgstr ""
