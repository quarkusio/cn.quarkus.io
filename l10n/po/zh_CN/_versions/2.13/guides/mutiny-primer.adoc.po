# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-11-17 12:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Mutiny - Async for bare mortal"
msgstr "叛变--裸体凡人的异步行动"

#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"https://smallrye.io/smallrye-mutiny[Mutiny] is an intuitive, reactive programming library.\n"
"It is the primary model to write reactive applications with Quarkus."
msgstr "link:https://smallrye.io/smallrye-mutiny[Mutiny] 是一个直观的反应式编程库。它是使用 Quarkus 编写反应式应用程序的主要模型。"

#. type: Title ==
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "An event-driven reactive programming API"
msgstr "一个事件驱动的反应式编程API"

#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"Mutiny is very different from the other reactive programming libraries.\n"
"It takes a different approach to design your program.\n"
"With Mutiny everything is event-driven: you receive events, and you react to them.\n"
"This event-driven aspect embraces the asynchronous nature of distributed systems and provides an elegant and precise way to express continuation."
msgstr "Mutiny 与其他反应式编程库截然不同。它采用不同的方法来设计程序。有了 Mutiny，一切都是事件驱动的：你接收事件，并对它们做出反应。这种事件驱动的方式包含了分布式系统的异步特性，并提供了一种优雅而精确的方式来表达延续性。"

#. type: Plain text
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid "Mutiny offers two types that are both event-driven and lazy:"
msgstr "Mutiny提供了两种类型，既是事件驱动的，又是懒惰的。"

#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"A `Uni` emits a single event (an item or a failure).\n"
"Unis are convenient to represent asynchronous actions that return 0 or 1 result.\n"
"A good example is the result of sending a message to a message broker queue."
msgstr "`Uni` 只发出一个事件（一个项目或一个失败）。Unis 可以方便地表示返回 0 或 1 个结果的异步操作。向消息代理队列发送消息的结果就是一个很好的例子。"

#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"A `Multi` emits multiple events (n items, 1 failure or 1 completion).\n"
"Multis can represent streams of items, potentially unbounded.\n"
"A good example is receiving messages from a message broker queue."
msgstr "`Multi` 会发出多个事件（n 个项目、1 个失败或 1 个完成）。多重事件可以表示项目流，可能是无限制的。从消息代理队列接收消息就是一个很好的例子。"

#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"These two types allow representing any type of interactions.\n"
"They are event sources.\n"
"You observe them (_subscription_) and you get notified when they emit an item, a failure, or, in the case of a bounded Multi, a completion event.\n"
"When you (the subscriber) receive the event, you can process it (e.g., transform it, filter it).\n"
"With Mutiny, you are going to write code like _onX().action()_, which reads as “on item X do action”."
msgstr "这两种类型可以表示任何类型的交互。它们是事件源。您可以观察它们 _（订阅_ ），并在它们发出项目、失败或完成事件（如果是有界 Multi）时收到通知。当你（订阅者）收到事件时，你可以对其进行处理（例如转换、过滤）。在使用 Mutiny 时，你需要编写 _onX().action()_ 这样的代码，读作 \"on item X do action\"。"

#. type: Plain text
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid "If you want to know more about Mutiny, and the concepts behind it, check https://smallrye.io/smallrye-mutiny/latest/reference/why-is-asynchronous-important[the Mutiny Reference documentation]."
msgstr "如果你想了解更多关于Mutiny的信息，以及它背后的概念，请查看 link:https://smallrye.io/smallrye-mutiny/pages/philosophy[Mutiny哲学] 。"

#. type: Title ==
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Mutiny in Quarkus"
msgstr "夸库斯的叛变"

#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"Mutiny is the primary API when dealing with the reactive features from Quarkus.\n"
"It means that most extensions support Mutiny either by exposing an API returning Unis and Multis (such as reactive data sources or rest clients) or understanding when your methods return a Uni or a Multi (such as RESTEasy Reactive or Reactive Messaging)."
msgstr "在使用 Quarkus 的反应式功能时，Mutiny 是主要的 API。这意味着，大多数扩展都支持 Mutiny，要么公开返回 Unis 和 Multis 的 API（如反应式数据源或休息客户端），要么理解你的方法何时返回 Uni 或 Multi（如 RESTEasy Reactive 或 Reactive Messaging）。"

#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"These integrations make Mutiny a prominent and cohesive model for every reactive application developed with Quarkus.\n"
"In addition, Mutiny architecture allows fine-grain dead-code elimination which improves the memory usage when compiled to native (such as with Quarkus native mode or GraalVM native image compiler)."
msgstr "这些集成使 Mutiny 成为使用 Quarkus 开发的每一个反应式应用程序的一个突出和内聚的模型。此外，Mutiny 架构还可以消除细粒度的死代码，从而在编译为本地程序（如使用 Quarkus 本地模式或 GraalVM 本地图像编译器）时提高内存使用率。"

#. type: Title ==
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Why another reactive programming API?"
msgstr "为什么是另一个反应式编程API？"

#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"Seasoned reactive developers may wonder why Quarkus introduced yet another reactive programming APIs while there are existing ones.\n"
"Mutiny is taking a very different angle:"
msgstr "经验丰富的反应式开发人员可能会问，既然已有反应式编程 API，为什么 Quarkus 还要再推出一个呢？Mutiny 采取了截然不同的角度："

#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"**Event-Driven** -\n"
"Mutiny places events at the core of its design.\n"
"With Mutiny, you observe events, react to them, and create elegant and readable processing pipelines.\n"
"A Ph.D. in functional programming is not required."
msgstr "*事件驱动* - Mutiny 将事件作为设计的核心。使用 Mutiny，你可以观察事件、对事件做出反应，并创建优雅、可读性强的处理管道。不需要函数式编程方面的博士学位。"

#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"**Navigable** - Even with intelligent code completion, classes with hundreds of methods are confusing.\n"
"Mutiny provides a navigable and explicit API driving you towards the operator you need."
msgstr "*可导航* --即使有智能代码自动补全功能，拥有数百种方法的类也会令人困惑。Mutiny 提供了一个可导航的、明确的应用程序接口，可以引导你找到所需的操作符。"

#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"**Non-Blocking I/O** - Mutiny is the perfect companion to tame the asynchronous nature of applications with non-blocking I/O (which powers xref:quarkus-reactive-architecture.adoc[Quarkus]).\n"
"Declaratively compose operations, transform data, enforce progress, recover from failures, and more."
msgstr "*非阻塞 I/O* - Mutiny 是使用非阻塞 I/O（为 xref:quarkus-reactive-architecture.adoc[Quarkus] 提供动力）驯服应用程序异步特性的完美伴侣。它可以声明式地组成操作、转换数据、执行进度、从故障中恢复等。"

#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid "**Made for an asynchronous world** - Mutiny can be used in any asynchronous application such as event-driven microservices, message-based applications, network utilities, data stream processing, and of course... reactive applications!"
msgstr "*为异步世界* 而生 - Mutiny 可用于任何异步应用程序，如事件驱动的微服务、基于消息的应用程序、网络实用程序、数据流处理，当然还有......反应式应用程序！"

#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"**Reactive Streams and Converters Built-In** - Mutiny is based on the https://www.reactive-streams.org/[Reactive Streams] specification, and so it can be integrated with any other reactive programming library.\n"
"In addition, it proposes converters to interact with other popular libraries."
msgstr "*内置反应流和转换器* --Mutiny 基于反应 link:https://www.reactive-streams.org/[流] 规范，因此可以与任何其他反应式编程库集成。此外，它还提供了与其他流行库交互的转换器。"

#. type: Title ==
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Mutiny and the I/O Threads"
msgstr "叛变和I/O线程"

#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"Quarkus is powered by a xref:quarkus-reactive-architecture.adoc#engine[reactive engine], and when developing a reactive application, your code is executed on one of the few I/O threads.\n"
"Remember, you must never block these threads, and the model would collapse if you do.\n"
"So, you can't use blocking I/O.\n"
"Instead, you need to schedule the I/O operation and pass a continuation."
msgstr "Quarkus 采用的是 xref:quarkus-reactive-architecture.adoc#engine[反应式引擎] ，在开发反应式应用程序时，你的代码会在为数不多的 I/O 线程上执行。记住，千万不能阻塞这些线程，否则模型就会崩溃。因此，不能使用阻塞 I/O。相反，您需要调度 I/O 操作并传递一个继续。"

#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"The Mutiny event-driven paradigm is tailored for this.\n"
"When the I/O operation completes successfully, the Uni that represents it emits an item event.\n"
"When it fails, it emits a failure event.\n"
"The continuation is simply and naturally expressed using the event-driven API."
msgstr "Mutiny 事件驱动范式正是为此而量身定制的。当 I/O 操作成功完成时，表示该操作的 Uni 会发出一个项目事件。当操作失败时，它会发出一个失败事件。使用事件驱动应用程序接口可以简单、自然地表达这种延续。"

#. type: Title ==
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Mutiny through Examples"
msgstr "通过实例看叛变"

#. type: Plain text
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid "Many Quarkus extensions expose Mutiny APIs. In this section, we use the MongoDB extension to illustrate how to use Mutiny."
msgstr "许多Quarkus扩展暴露了Mutiny APIs。在本节中，我们使用MongoDB扩展来说明如何使用Mutiny。"

#. type: Plain text
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid "Let's imagine a simple structure representing an element from the https://en.wikipedia.org/wiki/Periodic_table[periodic table]:"
msgstr "让我们想象一个简单的结构，代表 link:https://en.wikipedia.org/wiki/Periodic_table[周期表] 中的一个元素。"

#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"This structure contains the name, symbol, and position of the element.\n"
"To retrieve and store elements into a Mongo collection, you can use the following code:"
msgstr "该结构包含元素的名称、符号和位置。要检索元素并将其存储到 Mongo 集合中，可以使用以下代码："

#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"First, the Mongo client is injected.\n"
"Note that it uses the reactive variant (`io.quarkus.mongodb.reactive.ReactiveMongoClient`).\n"
"In the initialize method, we retrieve and store the collection in which elements will be inserted."
msgstr "首先，注入 Mongo 客户端。请注意，它使用的是反应式变体 ( `io.quarkus.mongodb.reactive.ReactiveMongoClient` )。在初始化方法中，我们检索并存储将插入元素的集合。"

#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"The `add` method inserts an element in the collection.\n"
"It receives the element as a parameter and uses the reactive API of the collection.\n"
"Interacting with the database involves I/Os.\n"
"The reactive principles forbid blocking while waiting for the interaction to complete.\n"
"Instead, we schedule the operation and pass a continuation.\n"
"The `insertOne` method returns a Uni, i.e., an asynchronous operation.\n"
"That's the scheduled I/O. We now need to express the continuation, which is done using the `.onItem()` method.\n"
"`.onItem()` allows configuring what needs to happen when the observed Uni emits an item, in our case when the scheduled I/Os completes.\n"
"In this example, we extract the inserted document id.\n"
"The final step is the subscription.\n"
"Without it, nothing would ever happen. Subscribing triggers the operation.\n"
"The subscription method can also define handlers:  the `id` value on success, or a failure when the insertion fails."
msgstr "`add` 方法在集合中插入一个元素。该方法将元素作为参数接收，并使用集合的反应式 API。与数据库的交互涉及 I/O。反应式原则禁止在等待交互完成时阻塞。相反，我们会调度操作并传递一个继续。 `insertOne` 方法会返回一个 Uni，即异步操作。这就是计划的 I/O。 `.onItem()` `.onItem()` 允许配置当观察到的 Uni 发射一个项目时需要发生的事情，在我们的例子中，就是当计划的 I/O 完成时。在本例中，我们提取插入的文档 ID。最后一步是订阅。没有它，一切都不会发生。订阅会触发操作。订阅方法还可以定义处理程序：成功时定义 `id` 值，插入失败时定义失败值。"

#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"Let's now look at the second method.\n"
"It retrieves all the stored elements.\n"
"In this case, it returns multiple items (one per stored element), so we are using a `Multi`.\n"
"As for the insertion, getting the stored elements involves I/Os.\n"
"The `find` is our operation.\n"
"As for Uni, you need to subscribe to trigger the operation.\n"
"The subscriber receives item events, a failure event, or a completion event when all the elements have been received."
msgstr "现在我们来看看第二个方法。它检索所有存储的元素。在这种情况下，它会返回多个项目（每个存储元素一个），因此我们使用的是 `Multi` 。至于插入，获取存储元素涉及 I/O。 `find` 是我们的操作。至于 Uni，您需要通过订阅来触发操作。订阅者会收到项目事件、失败事件或收到所有元素后的完成事件。"

#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"Subscribing to a Uni or a Multi is essential, as without it, the operation is never executed.\n"
"In Quarkus some extensions deal with the subscription for you.\n"
"For example, in RESTEasy Reactive your HTTP methods can return a Uni or a Multi, and RESTEasy Reactive handles the subscription."
msgstr "订阅 Uni 或 Multi 至关重要，因为如果没有订阅，操作将永远无法执行。在 Quarkus 中，有些扩展会为你处理订阅问题。例如，在 RESTEasy Reactive 中，你的 HTTP 方法可以返回一个 Uni 或 Multi，而 RESTEasy Reactive 会处理订阅。"

#. type: Title ==
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Mutiny Patterns"
msgstr "叛变模式"

#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"The example from the last section was simplistic on purpose.\n"
"Let's have a look at a few common patterns."
msgstr "上一节的例子故意简单化了。让我们来看看几种常见的模式。"

#. type: Title ===
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Observing events"
msgstr "观察事件"

#. type: Plain text
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid "You can observe the various kind of events using:"
msgstr "你可以使用观察各种类型的事件。"

#. type: Plain text
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid "`on{event}().invoke(ev -> System.out.println(ev));`"
msgstr " `on{event}().invoke(ev → System.out.println(ev));` "

#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"For example, for items use:\n"
"`onItem().invoke(item -> ...);`"
msgstr "例如，用于物品： `onItem().invoke(item → …​);`"

#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"For failure, use:\n"
"`onFailure().invoke(failure -> ...)`"
msgstr "如果失败，请使用 `onFailure().invoke(failure → …​)`"

#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"The `invoke` method is synchronous.\n"
"Sometimes you need to execute an asynchronous action.\n"
"In this case use `call`, as in: `onItem().call(item -> someAsyncAction(item))`.\n"
"Note that `call` does not change the item, it just calls an asynchronous action, and when this one completes, it emits the original item downstream."
msgstr "`invoke` 方法是同步的。有时您需要执行异步操作。在这种情况下，请使用 `call` ，如： `onItem().call(item → someAsyncAction(item))` 。请注意， `call` 不会更改项目，它只是调用异步操作，当异步操作完成后，它会向下游发送原始项目。"

#. type: Title ===
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Transforming item"
msgstr "改造项目"

#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"The first instrumental pattern consists of transforming the item events you receive.\n"
"As we have seen in the previous section, it could indicate the successful insertion, or the elements stored in the database."
msgstr "第一种工具模式包括对收到的项目事件进行转换。正如我们在上一节中看到的，它可以表示成功插入，也可以表示存储在数据库中的元素。"

#. type: Plain text
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid "Transforming an item is done using: `onItem().transform(item -> ....)`."
msgstr "转化一个项目是用： `onItem().transform(item → …​.)` 。"

#. type: Plain text
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid "More details about transformation can be found in the https://smallrye.io/smallrye-mutiny/latest/tutorials/transforming-items/[Mutiny documentation]."
msgstr "关于转换的更多细节可以在 link:https://smallrye.io/smallrye-mutiny/getting-started/transforming-items[Mutiny文档] 中找到。"

#. type: Title ===
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Sequential composition"
msgstr "顺序组成"

#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"Sequential composition allows chaining dependent asynchronous operations. This is achieved using `onItem().transformToUni(item -> ...)`.\n"
"Unlike `transform`, the function passed to `transformToUni` returns a Uni."
msgstr "顺序组合允许连锁依赖异步操作。这是通过 `onItem().transformToUni(item → …​)` 实现的。与 `transform` 不同，传入 `transformToUni` 的函数返回一个 Uni。"

#. type: Plain text
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid "More details about asynchronous transformation can be found in the https://smallrye.io/smallrye-mutiny/latest/tutorials/transforming-items-asynchronously/[Mutiny documentation]."
msgstr "关于异步转换的更多细节可以在 link:https://smallrye.io/smallrye-mutiny/getting-started/transforming-items-async[Mutiny文档] 中找到。"

#. type: Title ===
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Failure handling"
msgstr "失败处理"

#. type: Plain text
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid "So far we only handle the item events, but handling failure is essential. You can handle failures using `onFailure()`."
msgstr "到目前为止，我们只处理项目事件，但处理失败是必不可少的。你可以使用 `onFailure()` 。"

#. type: Plain text
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid "For example, you can recover with a fallback item using `onFailure().recoverWithItem(fallback)`:"
msgstr "例如，你可以使用 `onFailure().recoverWithItem(fallback)` ，用一个后备项目来恢复。"

#. type: Plain text
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid "You can also retry the operation such as in:"
msgstr "你也可以重试操作，如在。"

#. type: Plain text
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid "More info about failure recovery can be found on https://smallrye.io/smallrye-mutiny/latest/tutorials/handling-failures/[the handling failure documentation] and https://smallrye.io/smallrye-mutiny/latest/tutorials/retrying/[the retrying on failures documentation]."
msgstr "关于故障恢复的更多信息可以在 link:https://smallrye.io/smallrye-mutiny/getting-started/handling-failures[处理故障文档] 和 link:https://smallrye.io/smallrye-mutiny/getting-started/retry[重试文档] 中找到。"

#. type: Title ==
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Events and Actions"
msgstr "事件和行动"

#. type: Plain text
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid "The following tables list the events that you can receive for Uni and Multi. Each of them is associated with its own group (onX). The second table lists the classic action you can do upon an event. Note that some groups offer more possibilities."
msgstr "下表列出了你可以为Uni和Multi接收的事件。每个事件都与它自己的组（onX）有关。第二个表格列出了你在事件发生后可以做的经典动作。请注意，有些组提供了更多的可能性。"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Events from the upstream"
msgstr "来自上游的事件"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Events from the downstream"
msgstr "下游的事件"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Uni"
msgstr "统一"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Subscription (1), Item (0..1), failure (0..1)"
msgstr "订阅（1），项目（0...1），失败（0...1）。"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Cancellation"
msgstr "取消"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Multi"
msgstr "多功能"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Subscription (1), Item (0..n), failure (0..1), completion (0..1)"
msgstr "订阅 (1), 项目 (0..n), 失败 (0..1), 完成 (0..1)"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Cancellation, Request"
msgstr "取消，请求"

#. type: Plain text
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid "Check the full list of events on https://smallrye.io/smallrye-mutiny/latest/tutorials/observing-events/[the event documentation]."
msgstr "在 link:https://smallrye.io/smallrye-mutiny/getting-started/observing-events[活动文件] 上查看完整的活动清单。"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Action"
msgstr "行动"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "API"
msgstr "API"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Comment"
msgstr "评论"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "transform"
msgstr "转变"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`onItem().transform(Function<I, O> function);`"
msgstr " `onItem().transform(Function<I, O> function);` "

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid ""
"Transform the event into another event using a synchronous function.\n"
"The downstream receives the result of the function (or a failure if the transformation failed)."
msgstr "使用一个同步函数将事件转化为另一个事件。下游收到该函数的结果（如果转换失败，则为失败）。"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "transformToUni"
msgstr "转化为Uni"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`onItem().transformToUni(Function<I, Uni<O>> function);`"
msgstr " `onItem().transformToUni(Function<I, Uni<O>> function);` "

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Transform the event into another event using an asynchronous function. The downstream receives the item emitted by the produced Uni (or a failure if the transformation failed). If the produced Uni emits a failure, that failure is passed to the downstream."
msgstr "使用异步函数将该事件转化为另一个事件。下游接收由产生的Uni发出的项目（如果转换失败，则为失败）。如果产生的Uni发出了一个失败，那么这个失败就会被传递给下游的人。"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "invoke"
msgstr "启用"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`onItem().invoke(Consumer<I> consumer)`"
msgstr " `onItem().invoke(Consumer<I> consumer)` "

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Invokes the synchronous consumer. This is particularly convenient to execute side effects actions. The downstream receives the original event, or a failure if the consumer throws an exception"
msgstr "调用同步的消费者。这对于执行副作用的动作特别方便。下游会收到原始事件，如果消费者抛出异常，则会收到失败。"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "call"
msgstr "呼叫"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`onItem().call(Function<I, Uni<?>>)`"
msgstr " `onItem().call(Function<I, Uni<?>>)` "

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Invokes the asynchronous function. This is particularly convenient to execute asynchronous side effect actions.The downstream receives the original event, or a failure if the consumer throws an exception or if the produced Uni emits a failure."
msgstr "调用异步函数。这对于执行异步的副作用动作特别方便。下游收到原始事件，或者如果消费者抛出一个异常，或者如果产生的Uni发出一个失败。"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "fail"
msgstr "不合格"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`onItem().failWith(Function<I, Throwable>)`"
msgstr " `onItem().failWith(Function<I, Throwable>)` "

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Emits a failure when it receives the event."
msgstr "当它收到该事件时，发出一个失败的消息。"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "complete (Multi only)"
msgstr "完整的(仅限多国)"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`onItem().complete()`"
msgstr " `onItem().complete()` "

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Emits the completion event when it receives the event."
msgstr "当它收到事件时发出完成事件。"

#. type: Title ===
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Other patterns"
msgstr "其他模式"

#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"Mutiny provides lots of other features.\n"
"Head over to the https://smallrye.io/smallrye-mutiny[Mutiny documentation] to see many more examples, including the whole list of events and how to handle them."
msgstr "Mutiny 还提供了许多其他功能。前往 link:https://smallrye.io/smallrye-mutiny[Mutiny 文档] 查看更多示例，包括整个事件列表以及如何处理它们。"

#. type: Plain text
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid "Some frequently asked guides are the following:"
msgstr "一些经常被问及的指南如下。"

#. type: Plain text
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid "merge vs. concatenation - https://smallrye.io/smallrye-mutiny/latest/guides/merging-and-concatenating-streams/"
msgstr "合并与串联 - https://smallrye.io/smallrye-mutiny/guides/merge-concat "

#. type: Plain text
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid "controlling the emission thread - https://smallrye.io/smallrye-mutiny/latest/guides/emit-on-vs-run-subscription-on/"
msgstr "控制排放线 - https://smallrye.io/smallrye-mutiny/guides/emit-subscription "

#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid "explicit blocking  - https://smallrye.io/smallrye-mutiny/latest/guides/imperative-to-reactive/"
msgstr "显式阻塞 - https://smallrye.io/smallrye-mutiny/latest/guides/imperative-to-reactive/"

#. type: Title ==
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Shortcuts"
msgstr "捷径"

#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"When using Uni, having to write `onItem()` can be cumbersome.\n"
"Fortunately, Mutiny provides a set of shortcut to make your code more concise:"
msgstr "使用 Uni 时，编写 `onItem()` 可能会很麻烦。幸运的是，Mutiny 提供了一套快捷方式，让你的代码更加简洁："

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Shortcut"
msgstr "捷径"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Equivalent"
msgstr "等价物"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`uni.map(x -> y)`"
msgstr "uni.map(x → y)"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`uni.onItem().transform(x -> y)`"
msgstr "uni.onItem().transform(x → y)"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`uni.flatMap(x -> uni2)`"
msgstr "uni.flatMap(x → uni2)"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`uni.onItem().transformToUni(x -> uni2)`"
msgstr "uni.onItem().transformToUni(x → uni2)"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`uni.chain(x -> uni2)`"
msgstr "uni.chain(x → uni2)"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, no-wrap
msgid "`uni.then(() -> uni2)`"
msgstr ""

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`uni.onItem().transformToUni(ignored -> uni2)`"
msgstr "uni.onItem().transformToUni(ignored → uni2)"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`uni.invoke(x -> System.out.println(x))`"
msgstr "uni.invoke(x → System.out.println(x))"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`uni.onItem().invoke(x -> System.out.println(x))`"
msgstr "uni.onItem().invoke(x → System.out.println(x))"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`uni.call(x -> uni2)`"
msgstr "uni.call(x → uni2)"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`uni.onItem().call(x -> uni2)`"
msgstr "uni.onItem().call(x → uni2)"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`uni.eventually\\(() -> System.out.println(\"eventually\"))`"
msgstr "uni.eventually) → System.out.println(\"eventually\""

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`uni.onItemOrFailure().invoke\\((ignoredItem, ignoredException) -> System.out.println(\"eventually\"))`"
msgstr "uni.onItemOrFailure().invokeignoredItem, ignoredException) → System.out.println(\"最终\""

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`uni.eventually(() -> uni2)`"
msgstr "uni.evenly(() → uni2)"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`uni.onItemOrFailure().call((ignoredItem, ignoredException) -> uni2)`"
msgstr "uni.onItemOrFailure().call((ignoredItem, ignoredException) → uni2)"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`uni.replaceWith(x)`"
msgstr "`uni.replaceWith(x)`"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`uni.onItem().transform(ignored -> x)`"
msgstr "uni.onItem().transformToUni(ignored → uni2)"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`uni.replaceWith(uni2)`"
msgstr "`uni.replaceWith(uni2)`"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`uni.replaceIfNullWith(x)`"
msgstr "`uni.replaceIfNullWith(x)`"

#. type: Table
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "`uni.onItem().ifNull().continueWith(x)`"
msgstr "`uni.onItem().ifNull().continueWith(x)`"

#. type: Title ==
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Reactive Streams"
msgstr "反应式流"

#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"Mutiny uses https://www.reactive-streams.org/[Reactive Streams].\n"
"`Multi` implements `Publisher` and enforces the back-pressure protocol.\n"
"Emissions are constrained by the request emitted from the downstream subscribers.\n"
"Thus, it does not overload the subscribers.\n"
"Note that in some cases, you can’t follow this protocol (because the Multi emits events that can’t be controlled, such as time, or measures sensors).\n"
"In this case, Mutiny provides a way to control the overflow using `onOverflow()`."
msgstr "`Multi` 实现了 `Publisher` 并执行 link:https://www.reactive-streams.org/[反压] 协议。排放受下游用户发出的请求限制。因此，它不会使订阅者超载。请注意，在某些情况下，你无法遵循此协议（因为 Multi 发射的事件无法控制，如时间或测量传感器）。在这种情况下，Mutiny 提供了一种使用 `onOverflow()` 控制溢出的方法。"

#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"`Uni` does not implement Reactive Streams `Publisher`.\n"
"A `Uni` can only emit one event, so subscribing to the `Uni` is enough to express your intent to use the result and does not need the request protocol ceremony."
msgstr "`Uni` `Publisher` 。 只能发出一个事件，因此订阅 就足以表达您使用结果的意图，而不需要请求协议仪式。 `Uni` `Uni`"

#. type: Title ==
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Mutiny and Vert.x"
msgstr "叛变和死亡。"

#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"Vert.x is a toolkit to build reactive applications and systems.\n"
"It provides a huge ecosystem of libraries following the reactive principles (i.e., non-blocking and asynchronous).\n"
"Vert.x is an essential part of Quarkus, as it provides its reactive capabilities."
msgstr "Vert.x 是一个用于构建反应式应用程序和系统的工具包。它提供了一个遵循反应式原则（即非阻塞和异步）的庞大库生态系统。Vert.x 是 Quarkus 的重要组成部分，因为它提供了 Quarkus 的反应能力。"

#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"In addition, the whole Vert.x API can be used with Quarkus.\n"
"To provide a cohesive experience, the Vert.x API is also available using a Mutiny variant, i.e., returns Uni and Multi."
msgstr "此外，整个 Vert.x API 都可与 Quarkus 配合使用。为了提供连贯的体验，Vert.x API 还可以使用 Mutiny 变体，即返回 Uni 和 Multi。"

#. type: Plain text
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid "More details about this API can be found on: https://quarkus.io/blog/mutiny-vertx/."
msgstr "关于这个API的更多细节可以在 https://quarkus.io/blog/mutiny-vertx/ "

#. type: Title ==
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy, no-wrap
msgid "Mutiny Integration in Quarkus"
msgstr "瓜尔库斯的叛变整合"

#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"The integration of Mutiny in Quarkus goes beyond just the library.\n"
"Mutiny exposes hooks that allow Quarkus and Mutiny to be closely integrated:"
msgstr "Mutiny 与 Quarkus 的集成不仅仅局限于库。Mutiny 提供的钩子可以让 Quarkus 和 Mutiny 紧密结合："

#. type: Plain text
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid "Calling `await` or `toIterable` would fail if you are running on an I/O thread, preventing blocking the I/O thread;"
msgstr "如果你在一个I/O线程上运行，调用 `await` 或 `toIterable` 会失败，防止阻塞I/O线程。"

#. type: Plain text
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid "The `log()` operator use the Quarkus logger;"
msgstr " `log()` ，操作员使用Quarkus记录仪。"

#. type: Plain text
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid "The default Mutiny thread pool is the Quarkus worker thread pool;"
msgstr "Mutiny 的默认线程池是 Quarkus Worker 线程池；"

#. type: Plain text
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid "Context Propagation is enabled by default when using Mutiny Uni and Multi"
msgstr "使用 Mutiny Uni 和 Multi 时，默认情况下会启用上下文传播。"

#. type: Plain text
#: _versions/2.13/guides/mutiny-primer.adoc
#, fuzzy
msgid "More details about the infrastructure integration can be found on https://smallrye.io/smallrye-mutiny/latest/guides/framework-integration/."
msgstr "关于转换的更多细节可以在 link:https://smallrye.io/smallrye-mutiny/getting-started/transforming-items[Mutiny文档] 中找到。"
