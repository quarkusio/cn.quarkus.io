# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-12-20 12:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.13/guides/stork-reference.adoc
#, fuzzy, no-wrap
msgid "Stork Reference Guide"
msgstr "鹳鸟参考指南"

#: _versions/2.13/guides/stork-reference.adoc
#, fuzzy
msgid ""
"This guide is the companion from the xref:stork.adoc[Stork Getting Started Guide].\n"
"It explains the configuration and usage of SmallRye Stork integration in Quarkus."
msgstr "本指南是 xref:stork.adoc[Stork 入门指南] 的配套 xref:stork.adoc[指南] 。它解释了 Quarkus 中 SmallRye Stork 集成的配置和使用。"

#. type: Title ==
#: _versions/2.13/guides/stork-reference.adoc
#, fuzzy, no-wrap
msgid "Supported clients"
msgstr "支持的客户"

#. type: Plain text
#: _versions/2.13/guides/stork-reference.adoc
#, fuzzy
msgid "The current integration of Stork supports:"
msgstr "目前对Stork的整合支持。"

#. type: Plain text
#: _versions/2.13/guides/stork-reference.adoc
#, fuzzy
msgid "the Reactive REST Client"
msgstr "反应式REST客户端"

#. type: Plain text
#: _versions/2.13/guides/stork-reference.adoc
#, fuzzy
msgid "the gRPC clients"
msgstr "gRPC客户端"

#. type: Plain text
#: _versions/2.13/guides/stork-reference.adoc
#, fuzzy
msgid "Warning: The gRPC client integration does not support statistic-based load balancers."
msgstr "警告。gRPC客户端集成不支持基于统计学的负载均衡器。"

#. type: Title ==
#: _versions/2.13/guides/stork-reference.adoc
#, fuzzy, no-wrap
msgid "Available service discovery and selection"
msgstr "可用的服务发现和选择"

#. type: Plain text
#: _versions/2.13/guides/stork-reference.adoc
#, fuzzy
msgid "Check the https://smallrye.io/smallrye-stork[SmallRye Stork website] to find more about the provided service discovery and selection."
msgstr "查看 link:https://smallrye.io/smallrye-stork[SmallRye Stork网站] ，了解更多关于所提供的服务发现和选择。"

#. type: Title ==
#: _versions/2.13/guides/stork-reference.adoc
#, fuzzy, no-wrap
msgid "Using Stork in Kubernetes"
msgstr "在Kubernetes中使用Stork"

#: _versions/2.13/guides/stork-reference.adoc
#, fuzzy
msgid ""
"Stork provides a service discovery support for Kubernetes, which goes beyond what Kubernetes provides by default.\n"
"It looks for all the pods backing up a Kubernetes service, but instead of applying a round-robin (as Kubernetes would do), it gives you the option to select the pod using a Stork load-balancer."
msgstr "Stork 为 Kubernetes 提供服务发现支持，这超出了 Kubernetes 默认提供的功能。它可以查找为 Kubernetes 服务提供支持的所有 pod，但不会像 Kubernetes 那样采用轮循方式，而是让你选择使用 Stork 负载平衡器的 pod。"

#. type: Plain text
#: _versions/2.13/guides/stork-reference.adoc
#, fuzzy
msgid "To use this feature, add the following dependency to your project:"
msgstr "要使用这个功能，请在你的项目中添加以下依赖关系。"

#. type: Block title
#: _versions/2.13/guides/stork-reference.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/2.13/guides/stork-reference.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Plain text
#: _versions/2.13/guides/stork-reference.adoc
#, fuzzy
msgid "For each service expected to be exposed as a Kubernetes Service, configure the lookup:"
msgstr "对于每个预计将作为Kubernetes服务暴露的服务，配置查找。"

#: _versions/2.13/guides/stork-reference.adoc
#, fuzzy
msgid ""
"Stork looks for the Kubernetes Service with the given name (`my-service` in the previous example) in the specified namespace.\n"
"Instead of using the Kubernetes Service IP directly and let Kubernetes handle the selection and balancing, Stork inspects the service and retrieves the list of pods providing the service. Then, it can select the instance."
msgstr "Stork 在指定的命名空间中查找具有给定名称（上一示例中为 `my-service` ）的 Kubernetes 服务。Stork 不会直接使用 Kubernetes 服务 IP，让 Kubernetes 来处理选择和平衡，而是检查该服务并检索提供该服务的 pod 列表。然后，它就可以选择实例了。"

#. type: Plain text
#: _versions/2.13/guides/stork-reference.adoc
#, fuzzy
msgid "For a full example of using Stork with Kubernetes, please read the xref:stork-kubernetes.adoc[Using Stork with Kubernetes guide]."
msgstr "有关将 Stork 与 Kubernetes 结合使用的完整示例，请阅读《将 xref:stork-kubernetes.adoc[Stork 与 Kubernetes 结合使用] 》 xref:stork-kubernetes.adoc[指南] 。"

#. type: Title ==
#: _versions/2.13/guides/stork-reference.adoc
#, no-wrap
msgid "Implementing a custom service discovery"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/stork-reference.adoc
msgid "Stork is extensible, and you can implement your own service discovery mechanism."
msgstr ""

#. type: Title ===
#: _versions/2.13/guides/stork-reference.adoc
#, fuzzy, no-wrap
msgid "Dependency"
msgstr "依赖性"

#. type: Plain text
#: _versions/2.13/guides/stork-reference.adoc
msgid "To implement your Service Discovery Provider, make sure your project depends on Core and Configuration Generator. The former brings classes necessary to implement custom discovery, the latter contains an annotation processor that generates classes needed by Stork."
msgstr ""

#: _versions/2.13/guides/stork-reference.adoc
msgid ""
"If the provider is located in an extension, the configuration generator should be declared in the\n"
"`annotationProcessorPaths` section of the runtime module using the default scope:"
msgstr ""

#. type: Title ===
#: _versions/2.13/guides/stork-reference.adoc
#, no-wrap
msgid "Implementing a service discovery provider"
msgstr ""

#: _versions/2.13/guides/stork-reference.adoc
msgid ""
"The custom provider is a factory that creates an `io.smallrye.stork.ServiceDiscovery` instance for each configured service using this service discovery provider.\n"
"A type, for example, `acme` identifies each provider.\n"
"This type is used in the configuration to reference the provider:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/stork-reference.adoc
msgid "The first step consists of implementing the `io.smallrye.stork.spi.ServiceDiscoveryProvider` interface:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/stork-reference.adoc
msgid "This implementation is straightforward."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/stork-reference.adoc
msgid "`@ServiceDiscoveryType` annotation defines the type of the service discovery provider. For each `ServiceDiscoveryProvider` annotated with this annotation, a configuration class will be generated. The name of the configuration class is constructed by appending `Configuration` to the name of the provider."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/stork-reference.adoc
msgid "Use `@ServiceDiscoveryAttribute` to define configuration properties for services configured with this service discovery provider. Configuration properties are gathered from all properties of a form: `quarkus.stork.my-service.service-discovery.attr=value`."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/stork-reference.adoc
msgid "The provider needs to implement `ServiceDiscoveryType` typed by the configuration class. This configuration class is generated automatically by the Configuration Generator. Its name is created by appending `Configuration` to the service discovery type, such as `AcmeConfiguration`."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/stork-reference.adoc
msgid "`createServiceDiscovery` method is the factory method. It receives the configuration and access to the name of the service and available infrastructure."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/stork-reference.adoc
msgid "Then, we need to implement the `ServiceDiscovery` interface:"
msgstr ""

#: _versions/2.13/guides/stork-reference.adoc
msgid ""
"Again, this implementation is simplistic.\n"
"Typically, instead of creating a service instance with values from the configuration, you would connect to a service discovery backend, look for the service and build the list of service instances accordingly.\n"
"That's why the method returns a `Uni`.\n"
"Most of the time, the lookup is a remote operation."
msgstr ""

#. type: Title ===
#: _versions/2.13/guides/stork-reference.adoc
#, no-wrap
msgid "Using your service discovery"
msgstr ""

#: _versions/2.13/guides/stork-reference.adoc
msgid ""
"In the project using it, don't forget to add the dependency on the module providing your implementation.\n"
"Then, in the configuration, just add:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/stork-reference.adoc
msgid "Then, Stork will use your implementation to locate the `my-service` service."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/stork-reference.adoc
#, no-wrap
msgid "Implementing a custom service selection / load-balancer"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/stork-reference.adoc
msgid "Stork is extensible, and you can implement your own service selection (load-balancer) mechanism."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/stork-reference.adoc
msgid "To implement your Load Balancer Provider, make sure your project depends on Core and Configuration Generator. The former brings classes necessary to implement custom load balancer, the latter contains an annotation processor that generates classes needed by Stork."
msgstr ""

#. type: delimited block =
#: _versions/2.13/guides/stork-reference.adoc
msgid "Similar to custom discovery providers, if the provider is located in an extension, the configuration generator should be declared in the `annotationProcessorPaths` section of the runtime module using the default scope."
msgstr ""

#. type: Title ===
#: _versions/2.13/guides/stork-reference.adoc
#, no-wrap
msgid "Implementing a load balancer provider"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/stork-reference.adoc
msgid "Load balancer implementation consists of three elements:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/stork-reference.adoc
msgid "`LoadBalancer` which is responsible for selecting service instances for a single Stork service"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/stork-reference.adoc
msgid "`LoadBalancerProvider` which creates instances of `LoadBalancer` for a given load balancer _type_"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/stork-reference.adoc
msgid "`LoadBalancerProviderConfiguration` which is a configuration for the load balancer"
msgstr ""

#: _versions/2.13/guides/stork-reference.adoc
msgid ""
"A _type_, for example, `acme`, identifies each provider.\n"
"This _type_ is used in the configuration to reference the provider:"
msgstr ""

#: _versions/2.13/guides/stork-reference.adoc
msgid ""
"Similarly to `ServiceDiscoveryProvider, a `LoadBalancerProvider` implementation needs to be annotated with `@LoadBalancerType` that defines the _type_.\n"
"Any configuration properties that the provider expects should be defined with `@LoadBalancerAttribute` annotations placed on the provider."
msgstr ""

#: _versions/2.13/guides/stork-reference.adoc
msgid ""
"Note, that similarly to the `ServiceDiscoveryProvider`, the `LoadBalancerProvider` interface takes a configuration class as a parameter. This configuration class is generated automatically by the _Configuration Generator_.\n"
"Its name is created by appending `Configuration` to the name of the provider class."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/stork-reference.adoc
msgid "The next step is to implement the `LoadBalancer` interface:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/stork-reference.adoc
msgid "Again, this implementation is simplistic and just picks a random instance from the received list."
msgstr ""

#. type: Title ===
#: _versions/2.13/guides/stork-reference.adoc
#, no-wrap
msgid "Using your load balancer"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/stork-reference.adoc
msgid "Then, Stork will use your implementation to select the `my-service` service instance."
msgstr ""
