# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-11-17 12:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.13/guides/amazon-lambda-http.adoc
#, no-wrap
msgid "Amazon Lambda with RESTEasy Reactive, Undertow, or Reactive Routes"
msgstr "带有RESTEasy Reactive、Undertow或Reactive Routes的Amazon Lambda"

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"With Quarkus you can deploy your favorite Java HTTP frameworks as Amazon Lambda's using either the https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html[AWS Gateway HTTP API]\n"
"or https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-rest-api.html[AWS Gateway REST API].  This means that you can deploy your microservices written with RESTEasy Reactive (JAX-RS),\n"
"Undertow (servlet), Reactive Routes, xref:funqy-http.adoc[Funqy HTTP] or any other Quarkus HTTP framework as an AWS Lambda."
msgstr ""

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"You can deploy your Lambda as a pure Java jar, or you can compile your project to a native image and deploy that for a smaller\n"
"memory footprint and startup time.  Our integration also generates SAM deployment files that can be consumed by https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html[Amazon's SAM framework]."
msgstr ""

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"Quarkus has a different extension for each Gateway API.  The HTTP Gateway API is implemented within the `quarkus-amazon-lambda-http` extension.\n"
"The REST Gateway API is implemented within the `quarkus-amazon-lambda-rest` extension.  If you are confused on which Gateway product to use,\n"
"Amazon has a https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-vs-rest.html[great guide] to help you navigate this decision."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid "Like most Quarkus extensions, the Quarkus AWS Lambda HTTP/REST extensions support Live Coding."
msgstr "与大多数Quarkus扩展一样，Quarkus AWS Lambda HTTP/REST扩展支持实时编码。"

#. type: Title ==
#: _versions/2.13/guides/amazon-lambda-http.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid "https://aws.amazon.com[An Amazon AWS account]"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid "https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI]"
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/amazon-lambda-http.adoc
#, no-wrap
msgid "Getting Started"
msgstr "入门指南"

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"This guide walks you through generating an example Java project via a Maven archetype.  Later on, it walks through the structure\n"
"of the project so you can adapt any existing projects you have to use Amazon Lambda."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/amazon-lambda-http.adoc
#, no-wrap
msgid "Installing AWS bits"
msgstr "安装AWS位"

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"Installing all the AWS bits is probably the most difficult thing about this guide.  Make sure that you follow all the steps\n"
"for installing AWS SAM CLI."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/amazon-lambda-http.adoc
#, no-wrap
msgid "Creating the Maven Deployment Project"
msgstr "创建Maven部署项目"

#. type: Plain text
#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid "Create the Quarkus AWS Lambda Maven project using our Maven Archetype."
msgstr "使用我们的Maven 原型创建Quarkus AWS Lambda Maven项目。"

#. type: Plain text
#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid "If you want to use the AWS Gateway HTTP API, generate your project with this script:"
msgstr "如果你想使用AWS Gateway HTTP API，请用这个脚本生成你的项目："

#. type: Plain text
#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid "If you want to use the AWS Gateway REST API, generate your project with this script:"
msgstr "如果你想使用AWS Gateway REST API，请用这个脚本生成你的项目："

#. type: Title ==
#: _versions/2.13/guides/amazon-lambda-http.adoc
#, no-wrap
msgid "Build and Deploy"
msgstr "构建和部署"

#. type: Plain text
#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid "Build the project:"
msgstr "构建项目。"

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"This will compile the code and run the unit tests included within the generated project.\n"
"Unit testing is the same as any other Java project and does not require running on Amazon.  Quarkus dev mode is also\n"
"available with this extension."
msgstr ""

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"If you want to build a native executable, make sure you have GraalVM installed correctly and just add a `native` property\n"
"to the build"
msgstr ""

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"If you are building on a non-Linux system, you will need to also pass in a property instructing quarkus to use a Docker build as Amazon\n"
"Lambda requires Linux binaries.  You can do this by passing `-Dquarkus.native.container-build=true` to your build command.\n"
"This requires you to have Docker installed locally, however."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/amazon-lambda-http.adoc
#, no-wrap
msgid "Extra Build Generated Files"
msgstr "构建额外生成的文件"

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"After you run the build, there are a few extra files generated by the Quarkus lambda extension you are using.  These files\n"
"are in the build directory:  `target/` for Maven, `build/` for Gradle."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid "`function.zip` - lambda deployment file"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid "`sam.jvm.yaml` - sam cli deployment script"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid "`sam.native.yaml` - sam cli deployment script for native"
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/amazon-lambda-http.adoc
#, no-wrap
msgid "Live Coding and Simulating AWS Lambda Environment Locally"
msgstr "实时编码和本地模拟AWS Lambda环境"

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"In dev and test mode, Quarkus will start a mock AWS Lambda event server\n"
"that will convert HTTP requests to the corresponding API Gateway event types and post them to the underlying\n"
"Quarkus HTTP lambda environment for processing.  This simulates the AWS Lambda environment\n"
"as much as possible locally without requiring tools like Docker and SAM CLI."
msgstr ""

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"When using Quarkus Dev Mode just invoke HTTP requests on `http://localhost:8080`\n"
"as you normally would when testing your REST endpoints.  This request will hit the Mock Event Server and will\n"
"be converted to the API Gateway json message that is consumed by the Quarkus Lambda Poll loop."
msgstr ""

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"For testing, Quarkus starts up a separate Mock Event server under port 8081.  The default port for Rest Assured is\n"
"automatically set to 8081 by Quarkus, so you don't have to worry about setting this up."
msgstr ""

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"If you want to simulate more complex\n"
"API Gateway events in your tests, then manually do an HTTP POST to `http://localhost:8080/\\_lambda_` (port 8081 in test mode) with\n"
"the raw API Gateway json events.  These events will be placed directly on the Quarkus Lambda poll loop\n"
"for processing.  Here's an example of that:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid "The above example simulates sending a Cognito principal with an HTTP request to your HTTP Lambda."
msgstr "上面的例子模拟向你的HTTP Lambda发送一个带有HTTP请求的Cognito 主体。"

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"If you want to hand code raw events for the AWS HTTP API, the AWS Lambda library has the request event type which is\n"
"`com.amazonaws.services.lambda.runtime.events.APIGatewayV2HTTPEvent` and the response event type\n"
"of `com.amazonaws.services.lambda.runtime.events.APIGatewayV2HTTPResponse`.  This corresponds\n"
"to the `quarkus-amazon-lambda-http` extension and the AWS HTTP API."
msgstr ""

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"If you want to hand code raw events for the AWS REST API, Quarkus has its own implementation:  `io.quarkus.amazon.lambda.http.model.AwsProxyRequest`\n"
"and `io.quarkus.amazon.lambda.http.model.AwsProxyResponse`.  This corresponds\n"
"to `quarkus-amazon-lambda-rest` extension and the AWS REST API."
msgstr ""

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"The mock event server is also started for `@NativeImageTest` and `@QuarkusIntegrationTest` tests so will work\n"
"with native binaries too.  All this provides similar functionality to the SAM CLI local testing, without the overhead of Docker."
msgstr ""

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"Finally, if port 8080 or port 8081 is not available on your computer, you can modify the dev\n"
"and test mode ports with application.properties"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid "A port value of zero will result in a randomly assigned port."
msgstr "端口值为零将导致随机分配端口。"

#. type: Title ==
#: _versions/2.13/guides/amazon-lambda-http.adoc
#, no-wrap
msgid "Simulate Amazon Lambda Deployment with SAM CLI"
msgstr "用SAM CLI模拟Amazon Lambda部署"

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"The AWS SAM CLI allows you to run your lambda's locally on your laptop in a simulated Lambda environment.  This requires Docker to be installed.\n"
"After you have built your Maven project, execute this command:"
msgstr ""

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"This will start a Docker container that mimics Amazon's Lambda's deployment environment. Once the environment\n"
"is started you can invoke the example lambda in your browser by going to:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid "http://127.0.0.1:3000/hello"
msgstr "http://127.0.0.1:3000/hello"

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"In the console you'll see startup messages from the lambda.  This particular deployment starts a JVM and loads your\n"
"lambda as pure Java."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/amazon-lambda-http.adoc
#, no-wrap
msgid "Deploy to AWS"
msgstr "部署到AWS"

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"Answer all the questions and your lambda will be deployed and the necessary hooks to the API Gateway will be set up. If\n"
"everything deploys successfully, the root URL of your microservice will be output to the console.  Something like this:"
msgstr ""

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"Key                 LambdaHttpApi\n"
"Description         URL for application\n"
"Value               https://234asdf234as.execute-api.us-east-1.amazonaws.com/"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid "The `Value` attribute is the root URL for your lambda. Copy it to your browser and add `hello` at the end."
msgstr "`Value` 属性是你的lambda的根URL。把它复制到你的浏览器，并在末尾添加 `hello` 。"

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"Responses for binary types will be automatically encoded with base64.  This is different from the behavior using\n"
"`quarkus:dev` which will return the raw bytes.  Amazon's API has additional restrictions requiring the base64 encoding.\n"
"In general, client code will automatically handle this encoding but in certain custom situations, you should be aware\n"
"you may need to manually manage that encoding."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/amazon-lambda-http.adoc
#, no-wrap
msgid "Deploying a native executable"
msgstr "部署一个本地可执行文件"

#. type: Plain text
#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid "To deploy a native executable, you must build it with GraalVM."
msgstr "要部署一个本地可执行文件，你必须用GraalVM构建它。"

#. type: Plain text
#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid "You can then test the executable locally with sam local"
msgstr "然后你可以使用sam local在本地测试可执行文件"

#. type: Plain text
#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid "To deploy to AWS Lambda:"
msgstr "要部署到AWS Lambda："

#. type: Title ==
#: _versions/2.13/guides/amazon-lambda-http.adoc
#, no-wrap
msgid "Examine the POM"
msgstr "检查POM"

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"There is nothing special about the POM other than the inclusion of the `quarkus-amazon-lambda-http` extension\n"
"(if you are deploying an AWS Gateway HTTP API) or the `quarkus-amazon-lambda-rest` extension (if you are deploying an AWS Gateway REST API).\n"
"These extensions automatically generate everything you might need for your lambda deployment."
msgstr ""

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"Also, at least in the generated Maven archetype `pom.xml`, the `quarkus-resteasy-reactive`, `quarkus-reactive-routes`, and `quarkus-undertow`\n"
"dependencies are all optional.  Pick which HTTP framework(s) you want to use (JAX-RS, Reactive Routes, and/or Servlet) and\n"
"remove the other dependencies to shrink your deployment."
msgstr ""

#. type: Title ===
#: _versions/2.13/guides/amazon-lambda-http.adoc
#, no-wrap
msgid "Examine sam.yaml"
msgstr "检查sam.yaml"

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"The `sam.yaml` syntax is beyond the scope of this document.  There's a couple of things that must be highlighted just in case you are\n"
"going to craft your own custom `sam.yaml` deployment files."
msgstr ""

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"The first thing to note is that for pure Java lambda deployments require a specific handler class.\n"
"Do not change the Lambda handler name."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid "This handler is a bridge between the lambda runtime and the Quarkus HTTP framework you are using (JAX-RS, Servlet, etc.)"
msgstr "这个处理程序是lambda运行时和你正在使用的Quarkus HTTP框架（JAX-RS、Servlet等）之间的桥梁。"

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"If you want to go native, there's an environment variable that must be set for native GraalVM deployments.  If you look at `sam.native.yaml`\n"
"you'll see this:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid "This environment variable resolves some incompatibilities between Quarkus and the Amazon Lambda Custom Runtime environment."
msgstr "这个环境变量解决了Quarkus和Amazon Lambda Custom Runtime环境之间的一些不兼容问题。"

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"Finally, there is one specific thing for AWS Gateway REST API deployments.\n"
"That API assumes that HTTP response bodies are text unless you explicitly tell it which media types are\n"
"binary through configuration.  To make things easier, the Quarkus extension forces a binary (base 64) encoding of all\n"
"HTTP response messages and the `sam.yaml` file must configure the API Gateway to assume all media types are binary:"
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/amazon-lambda-http.adoc
#, no-wrap
msgid "Injectable AWS Context Variables"
msgstr "可注入的AWS上下文变量"

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"If you are using RESTEasy Reactive and JAX-RS, you can inject various AWS Context variables into your JAX-RS resource classes\n"
"using the JAX-RS `@Context` annotation or anywhere else with the CDI `@Inject` annotation."
msgstr ""

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"For the AWS HTTP API you can inject the AWS variables `com.amazonaws.services.lambda.runtime.Context` and\n"
"`com.amazonaws.services.lambda.runtime.events.APIGatewayV2HTTPEvent`.  Here is an example:"
msgstr ""

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"For the AWS REST API you can inject the AWS variables `com.amazonaws.services.lambda.runtime.Context` and\n"
"`io.quarkus.amazon.lambda.http.model.AwsProxyRequestContext`.  Here is an example:"
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/amazon-lambda-http.adoc
#, no-wrap
msgid "Tracing with AWS XRay and GraalVM"
msgstr "使用AWS XRay和GraalVM进行追踪"

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"If you are building native images, and want to use https://aws.amazon.com/xray[AWS X-Ray Tracing] with your lambda\n"
"you will need to include `quarkus-amazon-lambda-xray` as a dependency in your pom.  The AWS X-Ray\n"
"library is not fully compatible with GraalVM, so we had to do some integration work to make this work."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/amazon-lambda-http.adoc
#, no-wrap
msgid "Security Integration"
msgstr "安全集成"

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"When you invoke an HTTP request on the API Gateway, the Gateway turns that HTTP request into a JSON event document that is\n"
"forwarded to a Quarkus Lambda.  The Quarkus Lambda parses this json and converts in into an internal representation of an HTTP\n"
"request that can be consumed by any HTTP framework Quarkus supports (JAX-RS, servlet, Reactive Routes)."
msgstr ""

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"API Gateway supports many ways to securely invoke on your HTTP endpoints that are backed by Lambda and Quarkus.\n"
"If you enable it, Quarkus will automatically parse relevant parts of the https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-lambda.html[event json document]\n"
"and look for security based metadata and register a `java.security.Principal` internally that can be looked up in JAX-RS\n"
"by injecting a `javax.ws.rs.core.SecurityContext`, via `HttpServletRequest.getUserPrincipal()` in servlet, and `RouteContext.user()` in Reactive Routes.\n"
"If you want more security information, the `Principal` object can be typecast to\n"
"a class that will give you more information."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid "To enable this security feature, add this to your `application.properties` file:"
msgstr "要启用这一安全特性，请将此添加到你的 `application.properties` 文件中："

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid "quarkus.lambda-http.enable-security=true"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid "Here's how its mapped:"
msgstr "下面是它的映射方式："

#. type: Block title
#: _versions/2.13/guides/amazon-lambda-http.adoc
#, no-wrap
msgid "HTTP `quarkus-amazon-lambda-http`"
msgstr "HTTP `quarkus-amazon-lambda-http` "

#. type: Table
#: _versions/2.13/guides/amazon-lambda-http.adoc
#, no-wrap
msgid "Auth Type"
msgstr "认证类型"

#. type: Table
#: _versions/2.13/guides/amazon-lambda-http.adoc
#, no-wrap
msgid "Principal Class"
msgstr "主体类"

#. type: Table
#: _versions/2.13/guides/amazon-lambda-http.adoc
#, no-wrap
msgid "Json path of Principal Name"
msgstr "主体名的Json路径"

#. type: Table
#: _versions/2.13/guides/amazon-lambda-http.adoc
#, no-wrap
msgid "Cognito JWT"
msgstr "Cognito JWT"

#. type: Table
#: _versions/2.13/guides/amazon-lambda-http.adoc
#, no-wrap
msgid "`io.quarkus.amazon.lambda.http.CognitoPrincipal`"
msgstr "`io.quarkus.amazon.lambda.http.CognitoPrincipal` "

#. type: Table
#: _versions/2.13/guides/amazon-lambda-http.adoc
#, no-wrap
msgid "`requestContext.authorizer.jwt.claims.cognito:username`"
msgstr "`requestContext.authorizer.jwt.claims.cognito:username` "

#. type: Table
#: _versions/2.13/guides/amazon-lambda-http.adoc
#, no-wrap
msgid "IAM"
msgstr ""

#. type: Table
#: _versions/2.13/guides/amazon-lambda-http.adoc
#, no-wrap
msgid "`io.quarkus.amazon.lambda.http.IAMPrincipal`"
msgstr "`io.quarkus.amazon.lambda.http.IAMPrincipal` "

#. type: Table
#: _versions/2.13/guides/amazon-lambda-http.adoc
#, no-wrap
msgid "`requestContext.authorizer.iam.userId`"
msgstr "`requestContext.authorizer.iam.userId` "

#. type: Table
#: _versions/2.13/guides/amazon-lambda-http.adoc
#, no-wrap
msgid "Custom Lambda"
msgstr "自定义Lambda"

#. type: Table
#: _versions/2.13/guides/amazon-lambda-http.adoc
#, no-wrap
msgid "`io.quarkus.amazon.lambda.http.CustomPrincipal`"
msgstr "`io.quarkus.amazon.lambda.http.CustomPrincipal` "

#. type: Table
#: _versions/2.13/guides/amazon-lambda-http.adoc
#, no-wrap
msgid "`requestContext.authorizer.lambda.principalId`"
msgstr "`requestContext.authorizer.lambda.principalId` "

#. type: Block title
#: _versions/2.13/guides/amazon-lambda-http.adoc
#, no-wrap
msgid "REST `quarkus-amazon-lambda-rest`"
msgstr "REST `quarkus-amazon-lambda-rest` "

#. type: Table
#: _versions/2.13/guides/amazon-lambda-http.adoc
#, no-wrap
msgid "Cognito"
msgstr "Cognito"

#. type: Table
#: _versions/2.13/guides/amazon-lambda-http.adoc
#, no-wrap
msgid "`requestContext.authorizer.claims.cognito:username`"
msgstr "`requestContext.authorizer.claims.cognito:username` "

#. type: Table
#: _versions/2.13/guides/amazon-lambda-http.adoc
#, no-wrap
msgid "`requestContext.identity.user`"
msgstr "`requestContext.identity.user` "

#. type: Table
#: _versions/2.13/guides/amazon-lambda-http.adoc
#, no-wrap
msgid "`requestContext.authorizer.principalId`"
msgstr "`requestContext.authorizer.principalId` "

#. type: Title ==
#: _versions/2.13/guides/amazon-lambda-http.adoc
#, no-wrap
msgid "Custom Security Integration"
msgstr "自定义安全集成"

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"The default support for AWS security only maps the principal name to Quarkus security\n"
"APIs and does nothing to map claims or roles or permissions.  You have full control on\n"
"how security metadata in the lambda HTTP event is mapped to Quarkus security APIs using\n"
"implementations of the `io.quarkus.amazon.lambda.http.LambdaIdentityProvider`\n"
"interface.  By implementing this interface, you can do things like define role mappings for your principal\n"
"or publish additional attributes provided by IAM or Cognito or your Custom Lambda security integration."
msgstr ""

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"For HTTP, the important method to override is `LambdaIdentityProvider.authenticate(APIGatewayV2HTTPEvent event)`.  From this\n"
"you will allocate a SecurityIdentity based on how you want to map security data from `APIGatewayV2HTTPEvent`"
msgstr ""

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"For REST, the important method to override is `LambdaIdentityProvider.authenticate(AwsProxyRequest event)`.  From this\n"
"you will allocate a SecurityIdentity based on how you want to map security data from `AwsProxyRequest`."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid "Your implemented provider must be a CDI bean.  Here's an example:"
msgstr "您实现的提供者必须是一个CDI bean。这里是一个例子:"

#. type: Plain text
#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid "Here's the same example, but with the AWS Gateway REST API:"
msgstr "下面是同样的例子，但是使用了AWS Gateway REST API:"

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"Quarkus should automatically discover this implementation and use it instead of the default implementation\n"
"discussed earlier."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/amazon-lambda-http.adoc
#, no-wrap
msgid "Simple SAM Local Principal"
msgstr "简单的SAM本地主体"

#: _versions/2.13/guides/amazon-lambda-http.adoc
msgid ""
"If you are testing your application with `sam local` you can\n"
"hardcode a principal name to use when your application runs by setting\n"
"the `QUARKUS_AWS_LAMBDA_FORCE_USER_NAME` environment variable"
msgstr ""
