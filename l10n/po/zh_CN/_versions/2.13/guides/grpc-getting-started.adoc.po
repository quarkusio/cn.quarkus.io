# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-11-17 12:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.13/guides/grpc-getting-started.adoc
#, no-wrap
msgid "Getting Started with gRPC"
msgstr "开始使用gRPC"

#: _versions/2.13/guides/grpc-getting-started.adoc
msgid ""
"This page explains how to start using gRPC in your Quarkus application.\n"
"While this page describes how to configure it with Maven, it is also possible to use Gradle."
msgstr ""

#: _versions/2.13/guides/grpc-getting-started.adoc
msgid ""
"Let's imagine you have a regular Quarkus project, generated from the https://code.quarkus.io[Quarkus project generator].\n"
"The default configuration is enough, but you can also select some extensions if you want."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/grpc-getting-started.adoc
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#: _versions/2.13/guides/grpc-getting-started.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/grpc-getting-started.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库： `git clone {quickstarts-clone-url}` ，或者下载 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: _versions/2.13/guides/grpc-getting-started.adoc
msgid "The solution is located in the `grpc-plain-text-quickstart` {quickstarts-tree-url}/grpc-plain-text-quickstart[directory]."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/grpc-getting-started.adoc
#, no-wrap
msgid "Configuring your project"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/grpc-getting-started.adoc
msgid "Edit the `pom.xml` file to add the Quarkus gRPC extension dependency (just under `<dependencies>`):"
msgstr ""

#: _versions/2.13/guides/grpc-getting-started.adoc
msgid ""
"By default, the `quarkus-grpc` extension relies on the reactive programming model.\n"
"In this guide we will follow a reactive approach.\n"
"Under the `dependencies` section of your `pom.xml` file, make sure you have the RESTEasy Reactive dependency:"
msgstr ""

#: _versions/2.13/guides/grpc-getting-started.adoc
msgid ""
"Make sure you have `generate-code` goal of `quarkus-maven-plugin` enabled in your `pom.xml`.\n"
"If you wish to generate code from different `proto` files for tests, also add the `generate-code-tests` goal.\n"
"Please note that no additional task/goal is required for the Gradle plugin."
msgstr ""

#: _versions/2.13/guides/grpc-getting-started.adoc
msgid ""
"With this configuration, you can put your service and message definitions in the `src/main/proto` directory.\n"
"`quarkus-maven-plugin` will generate Java files from your `proto` files."
msgstr ""

#: _versions/2.13/guides/grpc-getting-started.adoc
msgid ""
"`quarkus-maven-plugin` retrieves a version of `protoc` (the protobuf compiler) from Maven repositories. The retrieved version matches your operating system and CPU architecture.\n"
"If this retrieved version does not work in your context, you can either force to use a different OS classifier with\n"
"`-Dquarkus.grpc.protoc-os-classifier=your-os-classifier` (e.g. `osx-x86_64`).\n"
"You can also download the suitable binary and specify the location via\n"
"`-Dquarkus.grpc.protoc-path=/path/to/protoc`."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/grpc-getting-started.adoc
msgid "Alternatively to using the `generate-code` goal of the `quarkus-maven-plugin`, you can use `protobuf-maven-plugin` to generate these files, more in <<Generating Java files from proto with protobuf-maven-plugin>>"
msgstr ""

#: _versions/2.13/guides/grpc-getting-started.adoc
msgid ""
"Let's start with a simple _Hello_ service.\n"
"Create the `src/main/proto/helloworld.proto` file with the following content:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/grpc-getting-started.adoc
msgid "This `proto` file defines a simple service interface with a single method (`SayHello`), and the exchanged messages (`HelloRequest` containing the name and `HelloReply` containing the greeting message)."
msgstr ""

#: _versions/2.13/guides/grpc-getting-started.adoc
msgid ""
"Before coding, we need to generate the classes used to implement and consume gRPC services.\n"
"In a terminal, run:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/grpc-getting-started.adoc
msgid "Once generated, you can look at the `target/generated-sources/grpc` directory:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/grpc-getting-started.adoc
msgid "These are the classes we are going to use."
msgstr ""

#. type: Title ===
#: _versions/2.13/guides/grpc-getting-started.adoc
#, no-wrap
msgid "`proto` files with imports"
msgstr ""

#: _versions/2.13/guides/grpc-getting-started.adoc
msgid ""
"Protocol Buffers specification provides a way to import `proto` files.\n"
"The Quarkus code generation mechanism lets you control the scope of dependencies to scan for possible imports by setting the `quarkus.generate-code.grpc.scan-for-imports` property to one of the following:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/grpc-getting-started.adoc
msgid "`all` - scan all the dependencies"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/grpc-getting-started.adoc
msgid "`none` - don't scan the dependencies, use only what is defined in the `src/main/proto` or `src/test/proto`"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/grpc-getting-started.adoc
msgid "`groupId1:artifactId1,groupId2:artifactId2` - scan only the dependencies with group id and artifact id in the list."
msgstr ""

#: _versions/2.13/guides/grpc-getting-started.adoc
msgid ""
"If not specified, the property is set to `com.google.protobuf:protobuf-java`.\n"
"To override it, set the `quarkus.generate-code.grpc.scan-for-imports` property in your application.properties to the desired value, e.g."
msgstr ""

#. type: Title ===
#: _versions/2.13/guides/grpc-getting-started.adoc
#, no-wrap
msgid "`proto` files from dependencies"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/grpc-getting-started.adoc
msgid "In some cases, you may want to use `proto` files from a different project to generate the gRPC stubs. In this case:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/grpc-getting-started.adoc
msgid "Add a dependency on the artifact that contains the proto file to your project"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/grpc-getting-started.adoc
msgid "In `application.properties`, specify the dependencies you want to scan for proto files."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/grpc-getting-started.adoc
msgid "The value of the property may be `none`, which is the default value, or a comma separated list of `groupId:artifactId` coordinates."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/grpc-getting-started.adoc
#, no-wrap
msgid "Implementing a gRPC service"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/grpc-getting-started.adoc
msgid "Now that we have the generated classes let's implement our _hello_ service."
msgstr ""

#: _versions/2.13/guides/grpc-getting-started.adoc
msgid ""
"With Quarkus, implementing a service requires to implement the generated service interface based on Mutiny, a Reactive Programming API integrated in Quarkus, and expose it as a CDI bean.\n"
"Learn more about Mutiny on the xref:mutiny-primer.adoc[Mutiny guide].\n"
"The service class must be annotated with the `@io.quarkus.grpc.GrpcService` annotation."
msgstr ""

#. type: Title ===
#: _versions/2.13/guides/grpc-getting-started.adoc
#, no-wrap
msgid "Implementing a service"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/grpc-getting-started.adoc
msgid "Create the `src/main/java/org/acme/HelloService.java` file with the following content:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/grpc-getting-started.adoc
msgid "Expose your implementation as a bean."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/grpc-getting-started.adoc
msgid "Implement the generated service interface."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/grpc-getting-started.adoc
msgid "Implement the methods defined in the service definition (here we have a single method)."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/grpc-getting-started.adoc
msgid "You can also use the default gRPC API instead of Mutiny:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/grpc-getting-started.adoc
msgid "Extends the `ImplBase` class. This is a generated class."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/grpc-getting-started.adoc
msgid "Build and send the response."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/grpc-getting-started.adoc
msgid "Close the response."
msgstr ""

#: _versions/2.13/guides/grpc-getting-started.adoc
msgid ""
"If your service implementation logic is blocking (use blocking I/O for example), annotate your method with\n"
"`@Blocking`.\n"
"The `io.smallrye.common.annotation.Blocking` annotation instructs the framework to invoke the\n"
"annotated method on a worker thread instead of the I/O thread (event-loop)."
msgstr ""

#. type: Title ===
#: _versions/2.13/guides/grpc-getting-started.adoc
#, no-wrap
msgid "The gRPC server"
msgstr ""

#: _versions/2.13/guides/grpc-getting-started.adoc
msgid ""
"The services are _served_ by a _server_.\n"
"Available services (_CDI beans_) are automatically registered and exposed."
msgstr ""

#: _versions/2.13/guides/grpc-getting-started.adoc
msgid ""
"By default, the server is exposed on `localhost:9000`, and uses _plain-text_ (so no TLS) when\n"
"running normally, and `localhost:9001` for tests."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/grpc-getting-started.adoc
msgid "Run the application using: `mvn quarkus:dev`."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/grpc-getting-started.adoc
#, no-wrap
msgid "Consuming a gRPC service"
msgstr ""

#: _versions/2.13/guides/grpc-getting-started.adoc
msgid ""
"In this section, we are going to consume the service we expose.\n"
"To simplify, we are going to consume the service from the same application, which in the real world, does not make sense."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/grpc-getting-started.adoc
msgid "Open the existing `org.acme.ExampleResource` class, and edit the content to become:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/grpc-getting-started.adoc
msgid "Inject the service and configure its name. The name is used in the application configuration. If not specified then the field name is used instead: `hello` in this particular case."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/grpc-getting-started.adoc
msgid "Use the generated service interface based on Mutiny API."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/grpc-getting-started.adoc
msgid "Invoke the service."
msgstr ""

#: _versions/2.13/guides/grpc-getting-started.adoc
msgid ""
"We need to configure the application to indicate where the `hello` service is found.\n"
"In the `src/main/resources/application.properties` file, add the following property:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/grpc-getting-started.adoc
msgid "`hello` is the name used in the `@GrpcClient` annotation."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/grpc-getting-started.adoc
msgid "`host` configures the service host (here it's localhost)."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/grpc-getting-started.adoc
msgid "Then, open http://localhost:8080/hello/quarkus in a browser, and you should get `Hello quarkus`!"
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/grpc-getting-started.adoc
#, no-wrap
msgid "Packaging the application"
msgstr "打包应用"

#: _versions/2.13/guides/grpc-getting-started.adoc
msgid ""
"Like any other Quarkus applications, you can package it with: `mvn package`.\n"
"You can also package the application into a native executable with: `mvn package -Pnative`."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/grpc-getting-started.adoc
#, no-wrap
msgid "Generating Java files from proto with protobuf-maven-plugin"
msgstr ""

#: _versions/2.13/guides/grpc-getting-started.adoc
msgid ""
"Alternatively to using Quarkus code generation to generate stubs for `proto` files, you can also use\n"
"`protobuf-maven-plugin`."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/grpc-getting-started.adoc
msgid "To do it, first define the 2 following properties in the `<properties>` section:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/grpc-getting-started.adoc
msgid "They configure the gRPC version and the `protoc` version."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/grpc-getting-started.adoc
msgid "Then, add to the `build` section the `os-maven-plugin` extension and the `protobuf-maven-plugin` configuration."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/grpc-getting-started.adoc
msgid "The `protobuf-maven-plugin` that generates stub classes from your gRPC service definition (`proto` files)."
msgstr ""

#: _versions/2.13/guides/grpc-getting-started.adoc
msgid ""
"The class generation uses a tool named `protoc`, which is OS-specific.\n"
"That's why we use the `os-maven-plugin` to target the executable compatible with the operating system."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/grpc-getting-started.adoc
msgid "This configuration instructs the `protobuf-maven-plugin` to generate the default gRPC classes and classes using Mutiny to fit with the Quarkus development experience."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/grpc-getting-started.adoc
msgid "When using `protobuf-maven-plugin`, instead of the `quarkus-maven-plugin`, every time you update the `proto` files, you need to re-generate the classes (using `mvn compile`)."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/grpc-getting-started.adoc
#, no-wrap
msgid "gRPC classes from dependencies"
msgstr ""

#: _versions/2.13/guides/grpc-getting-started.adoc
msgid ""
"When gRPC classes - the classes generated from `proto` files - are in a dependency of the application, then the dependency needs a Jandex index.\n"
"The `jandex-maven-plugin` can be used to create a Jandex index. More information on this topic can be found in the xref:cdi-reference.adoc#bean_discovery[Bean Discovery] section of the CDI guide."
msgstr ""
