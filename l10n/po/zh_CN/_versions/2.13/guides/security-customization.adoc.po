# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-11-17 12:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.13/guides/security-customization.adoc
#, no-wrap
msgid "Security Tips and Tricks"
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/security-customization.adoc
#, no-wrap
msgid "Quarkus Security Dependency"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-customization.adoc
msgid "`io.quarkus:quarkus-security` module contains the core Quarkus security classes."
msgstr ""

#: _versions/2.13/guides/security-customization.adoc
msgid ""
"In most cases, it does not have to be added directly to your project's build file as it is already provided by all the security extensions.\n"
"However, if you need to write your own custom security code (for example, register a <<jaxrs-security-context, Custom JAX-RS SecurityContext>>) or use <<bouncy-castle, BouncyCastle>> libraries, then please make sure it is included:"
msgstr ""

#. type: Block title
#: _versions/2.13/guides/security-customization.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/2.13/guides/security-customization.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: _versions/2.13/guides/security-customization.adoc
#, no-wrap
msgid "HttpAuthenticationMechanism Customization"
msgstr ""

#: _versions/2.13/guides/security-customization.adoc
msgid ""
"One can customize `HttpAuthenticationMechanism` by registering a CDI implementation bean.\n"
"In the example below the custom authenticator delegates to `JWTAuthMechanism` provided by `quarkus-smallrye-jwt`:"
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/security-customization.adoc
#, no-wrap
msgid "Dealing with more than one HttpAuthenticationMechanism"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-customization.adoc
msgid "More than one `HttpAuthenticationMechanism` can be combined, for example, the built-in `Basic` or `JWT` mechanism provided by `quarkus-smallrye-jwt` has to be used to verify the service clients credentials passed as the HTTP `Authorization` `Basic` or `Bearer` scheme values while the `Authorization Code` mechanism provided by `quarkus-oidc` has to be used to authenticate the users with Keycloak or other OpenID Connect providers."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-customization.adoc
msgid "In such cases the mechanisms are asked to verify the credentials in turn until a `SecurityIdentity` is created. The mechanisms are sorted in the descending order using their priority. `Basic` authentication mechanism has the highest priority of `2000`, followed by the `Authorization Code` one with the priority of `1001`, with all other mechanisms provided by Quarkus having the priority of `1000`."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-customization.adoc
msgid "If no credentials are provided then the mechanism specific challenge is created, for example, `401` status is returned by either `Basic` or `JWT` mechanisms, URL redirecting the user to the OpenID Connect provider is returned by `quarkus-oidc`, etc."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-customization.adoc
msgid "So if `Basic` and `Authorization Code` mechanisms are combined then `401` will be returned if no credentials are provided and if `JWT` and `Authorization Code` mechanisms are combined then a redirect URL will be returned."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-customization.adoc
msgid "In some cases such a default logic of selecting the challenge is exactly what is required by a given application, but sometimes it may not meet the requirements. In such cases (or indeed in other similar cases where you'd like to change the order in which the mechanisms are asked to handle the current authentication or challenge request), you can create a custom mechanism and choose which mechanism should create a challenge, for example:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-customization.adoc
msgid "Declaring the mechanism an alternative bean ensures this mechanism is used rather than `OidcAuthenticationMechanism` and `JWTAuthMechanism`."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/security-customization.adoc
#, no-wrap
msgid "Security Identity Customization"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-customization.adoc
msgid "Internally, the identity providers create and update an instance of the `io.quarkus.security.identity.SecurityIdentity` class which holds the principal, roles, credentials which were used to authenticate the client (user) and other security attributes. An easy option to customize `SecurityIdentity` is to register a custom `SecurityIdentityAugmentor`. For example, the augmentor below adds an addition role:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-customization.adoc
msgid "Here is another example showing how to use the client certificate available in the current xref:security-built-in-authentication.adoc#mutual-tls[Mutual TLS] request to add more roles:"
msgstr ""

#: _versions/2.13/guides/security-customization.adoc
msgid ""
"If more than one custom `SecurityIdentityAugmentor` is registered then they will be considered equal candidates and invoked in random order.\n"
"You can enforce the order by implementing a default `SecurityIdentityAugmentor#priority` method. Augmentors with higher priorities will be invoked first."
msgstr ""

#: _versions/2.13/guides/security-customization.adoc
msgid ""
"By default, the request context is not activated when augmenting the security identity, this means that if you want to use for example Hibernate\n"
"that mandates a request context, you will have a `javax.enterprise.context.ContextNotActiveException`."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-customization.adoc
msgid "The solution is to activate the request context, the following example shows how to get the roles from an Hibernate with Panache `UserRoleEntity`."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/security-customization.adoc
#, no-wrap
msgid "Custom JAX-RS SecurityContext"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-customization.adoc
msgid "If you use JAX-RS `ContainerRequestFilter` to set a custom JAX-RS `SecurityContext` then make sure `ContainerRequestFilter` runs in the JAX-RS pre-match phase by adding a `@PreMatching` annotation to it for this custom security context to be linked with Quarkus `SecurityIdentity`, for example:"
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/security-customization.adoc
#, no-wrap
msgid "Disabling Authorization"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-customization.adoc
msgid "If you have a good reason to disable the authorization then you can register a custom `AuthorizationController`:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-customization.adoc
msgid "For manual testing Quarkus provides a convenient config property to disable authorization in dev mode. This property has the exact same effect as the custom `AuthorizationController` shown above, but is only available in dev mode:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-customization.adoc
msgid "Please also see xref:security-testing.adoc#testing-security[TestingSecurity Annotation] section on how to disable the security checks using `TestSecurity` annotation."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/security-customization.adoc
#, no-wrap
msgid "Registering Security Providers"
msgstr ""

#. type: Title ===
#: _versions/2.13/guides/security-customization.adoc
#, no-wrap
msgid "Default providers"
msgstr ""

#: _versions/2.13/guides/security-customization.adoc
msgid ""
"When running in native mode, the default behavior for GraalVM native executable generation is to only include the main \"SUN\" provider\n"
"unless you have enabled SSL, in which case all security providers are registered. If you are not using SSL, then you can selectively\n"
"register security providers by name using the `quarkus.security.security-providers` property. The following example illustrates\n"
"configuration to register the \"SunRsaSign\" and \"SunJCE\" security providers:"
msgstr ""

#. type: Block title
#: _versions/2.13/guides/security-customization.adoc
#, no-wrap
msgid "Example Security Providers Configuration"
msgstr ""

#. type: Title ===
#: _versions/2.13/guides/security-customization.adoc
#, no-wrap
msgid "BouncyCastle"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-customization.adoc
msgid "If you need to register an `org.bouncycastle.jce.provider.BouncyCastleProvider` JCE provider then please set a `BC` provider name:"
msgstr ""

#. type: Block title
#: _versions/2.13/guides/security-customization.adoc
#, no-wrap
msgid "Example Security Providers BouncyCastle Configuration"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-customization.adoc
msgid "and add the BouncyCastle provider dependency:"
msgstr ""

#. type: Title ===
#: _versions/2.13/guides/security-customization.adoc
#, no-wrap
msgid "BouncyCastle JSSE"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-customization.adoc
msgid "If you need to register an `org.bouncycastle.jsse.provider.BouncyCastleJsseProvider` JSSE provider and use it instead of the default SunJSSE provider then please set a `BCJSSE` provider name:"
msgstr ""

#. type: Block title
#: _versions/2.13/guides/security-customization.adoc
#, no-wrap
msgid "Example Security Providers BouncyCastle JSSE Configuration"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-customization.adoc
msgid "and add the BouncyCastle TLS dependency:"
msgstr ""

#. type: Title ===
#: _versions/2.13/guides/security-customization.adoc
#, no-wrap
msgid "BouncyCastle FIPS"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-customization.adoc
msgid "If you need to register an `org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider` JCE provider then please set a `BCFIPS` provider name:"
msgstr ""

#. type: Block title
#: _versions/2.13/guides/security-customization.adoc
#, no-wrap
msgid "Example Security Providers BouncyCastle FIPS Configuration"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-customization.adoc
msgid "and add the BouncyCastle FIPS provider dependency:"
msgstr ""

#: _versions/2.13/guides/security-customization.adoc
msgid ""
"`BCFIPS` provider option is supported in native image but the algorithm self-tests which rely on `java.security.SecureRandom` to verify the generated keys have been removed for these tests to pass. The following classes have been affected:\n"
"- `org.bouncycastle.crypto.general.DSA`\n"
"- `org.bouncycastle.crypto.general.DSTU4145`\n"
"- `org.bouncycastle.crypto.general.ECGOST3410`\n"
"- `org.bouncycastle.crypto.general.GOST3410`\n"
"- `org.bouncycastle.crypto.fips.FipsDSA`\n"
"- `org.bouncycastle.crypto.fips.FipsEC`\n"
"- `org.bouncycastle.crypto.fips.FipsRSA`"
msgstr ""

#. type: Title ===
#: _versions/2.13/guides/security-customization.adoc
#, no-wrap
msgid "BouncyCastle JSSE FIPS"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-customization.adoc
msgid "If you need to register an `org.bouncycastle.jsse.provider.BouncyCastleJsseProvider` JSSE provider and use it in combination with `org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider` instead of the default SunJSSE provider then please set a `BCFIPSJSSE` provider name:"
msgstr ""

#. type: Block title
#: _versions/2.13/guides/security-customization.adoc
#, no-wrap
msgid "Example Security Providers BouncyCastle FIPS JSSE Configuration"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-customization.adoc
msgid "and the BouncyCastle TLS dependency optimized for using the BouncyCastle FIPS provider:"
msgstr ""

#: _versions/2.13/guides/security-customization.adoc
msgid ""
"Note that the keystore and truststore type and provider are set to `BCFKS` and `BCFIPS`.\n"
"One can generate a keystore with this type and provider like this:"
msgstr ""

#. type: delimited block =
#: _versions/2.13/guides/security-customization.adoc
msgid "`BCFIPSJSSE` provider option is currently not supported in native image."
msgstr ""

#. type: Title ===
#: _versions/2.13/guides/security-customization.adoc
#, no-wrap
msgid "SunPKCS11"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-customization.adoc
msgid "`SunPKCS11` provider provides a bridge to specific `PKCS#11` implementations such as cryptographic smartcards and other Hardware Security Modules, Network Security Services in FIPS mode, etc."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-customization.adoc
msgid "Typically, in order to work with `SunPKCS11`, one needs to install a `PKCS#11` implementation, generate a configuration which usually refers to a shared library, token slot, etc and write the following Java code:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-customization.adoc
msgid "In Quarkus you can achieve the same at the configuration level only without having to modify the code, for example:"
msgstr ""

#. type: delimited block =
#: _versions/2.13/guides/security-customization.adoc
msgid "Note that while accessing the `SunPKCS11` bridge provider is supported in native image, configuring `SunPKCS11` is currently not supported in native image at the Quarkus level."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/security-customization.adoc
#, no-wrap
msgid "Reactive Security"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-customization.adoc
msgid "If you are going to use security in a reactive environment, you will likely need SmallRye Context Propagation:"
msgstr ""

#: _versions/2.13/guides/security-customization.adoc
msgid ""
"This will allow you to propagate the identity throughout the reactive callbacks. You also need to make sure you\n"
"are using an executor that is capable of propagating the identity (e.g. no `CompletableFuture.supplyAsync`),\n"
"to make sure that Quarkus can propagate it. For more information see the\n"
"xref:context-propagation.adoc[Context Propagation Guide]."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/security-customization.adoc
#, no-wrap
msgid "References"
msgstr "参考文献"

#. type: Plain text
#: _versions/2.13/guides/security-customization.adoc
msgid "xref:security.adoc[Quarkus Security]"
msgstr ""
