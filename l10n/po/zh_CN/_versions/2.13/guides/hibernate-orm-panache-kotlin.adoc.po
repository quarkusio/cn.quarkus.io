# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-11-17 12:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.13/guides/hibernate-orm-panache-kotlin.adoc
#, no-wrap
msgid "Simplified Hibernate ORM with Panache and Kotlin"
msgstr "用Panache和Kotlin简化Hibernate ORM"

#: _versions/2.13/guides/hibernate-orm-panache-kotlin.adoc
#, fuzzy
msgid ""
"Hibernate ORM is the de facto standard JPA implementation and is well-known in the Java ecosystem. Hibernate ORM with Panache offers a\n"
"new layer atop this familiar framework.  This guide will not dive in to the specifics of either as those are already\n"
"covered in the xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache guide].  In this guide, we'll cover the Kotlin specific changes\n"
"needed to use Hibernate ORM with Panache in your Kotlin-based Quarkus applications."
msgstr "Hibernate ORM 是事实上的标准 JPA 实现，在 Java 生态系统中广为人知。使用 Panache 的 Hibernate ORM 在这个熟悉的框架之上提供了一个新的层。本指南将不深入探讨二者的具体细节，因为 xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache 指南] 已经涵盖了这些内容。在本指南中，我们将介绍在基于 Kotlin 的 Quarkus 应用程序中使用 Hibernate ORM with Panache 所需的 Kotlin 特定更改。"

#. type: Plain text
#: _versions/2.13/guides/hibernate-orm-panache-kotlin.adoc
#, fuzzy
msgid "When using the kotlin version of Hibernate ORM with Panache, note that the `PanacheEntity`, `PanacheQuery` and `PanacheRepository` are in a different package: `io.quarkus.hibernate.orm.panache.kotlin`."
msgstr "在使用带有 Panache 的 kotlin 版本 Hibernate ORM 时，请注意 `PanacheEntity` 、 `PanacheQuery` 和 `PanacheRepository` 位于不同的软件包中： `io.quarkus.hibernate.orm.panache.kotlin` 。"

#. type: Title ==
#: _versions/2.13/guides/hibernate-orm-panache-kotlin.adoc
#, no-wrap
msgid "First: an example"
msgstr "首先看一个例子"

#: _versions/2.13/guides/hibernate-orm-panache-kotlin.adoc
#, fuzzy
msgid ""
"As we saw in the Hibernate with Panache guide, it allows us to extend the functionality in our entities and repositories (also known as DAOs) with some automatically\n"
"provided functionality.  When using Kotlin, the approach is very similar to what we see in the Java version with a slight\n"
"change or two.  To Panache-enable your entity, you would define it something like:"
msgstr "正如我们在 \"Hibernate with Panache \"指南中所看到的，它允许我们使用一些自动提供的功能来扩展实体和存储库（也称为 DAO）中的功能。在使用 Kotlin 时，这种方法与 Java 版本非常相似，只是略有一两处改动。要启用 Panache 实体，您需要对其进行如下定义"

#: _versions/2.13/guides/hibernate-orm-panache-kotlin.adoc
msgid ""
"As you can see our entities remain simple.  There is, however, a slight difference from the Java version.  The Kotlin\n"
"language doesn't support the notion of static methods in quite the same way as Java does.  Instead, we must use a\n"
"https://kotlinlang.org/docs/tutorials/kotlin-for-py/objects-and-companion-objects.html#companion-objects[companion object]:"
msgstr "如你所见，我们的实体仍然很简单。然而，与Java版本有一点不同。Kotlin语言并不像Java那样支持静态方法的概念。相反，我们必须使用一个 link:https://kotlinlang.org/docs/tutorials/kotlin-for-py/objects-and-companion-objects.html#companion-objects[companion object（同伴对象）] ："

#: _versions/2.13/guides/hibernate-orm-panache-kotlin.adoc
msgid ""
"The companion object holds all the methods not related to a specific instance allowing for general management and\n"
"querying bound to a specific type."
msgstr "companion object持有所有与特定实例无关的方法，允许进行一般管理和与特定类型绑定的查询。"

#: _versions/2.13/guides/hibernate-orm-panache-kotlin.adoc
#, fuzzy
msgid ""
"Here there are options, but we've chosen the `lateinit` approach.  This allows us to declare these fields as non-null\n"
"knowing they will be properly assigned either by the constructor (not shown) or by hibernate loading data from the\n"
"database."
msgstr "这里有多种选择，但我们选择了 `lateinit` 方法。这样，我们就可以将这些字段声明为非空，并知道它们将由构造函数（未显示）或从数据库加载数据的 hibernate 正确分配。"

#: _versions/2.13/guides/hibernate-orm-panache-kotlin.adoc
#, fuzzy
msgid ""
"These types differ from the Java types mentioned in those tutorials.  For Kotlin support, all the Panache\n"
"types will be found in the `io.quarkus.hibernate.orm.panache.kotlin` package.  This subpackage allows for the distinction\n"
"between the Java and Kotlin variants and allows for both to be used unambiguously in a single project."
msgstr "这些类型与这些教程中提到的 Java 类型不同。对于 Kotlin 支持，所有 Panache 类型都可以在 `io.quarkus.hibernate.orm.panache.kotlin` 包中找到。该子软件包允许区分 Java 和 Kotlin 变体，并允许在单个项目中明确使用这两种类型。"

#: _versions/2.13/guides/hibernate-orm-panache-kotlin.adoc
msgid ""
"In the Kotlin version, we've simply moved the bulk of the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[`active record pattern`]\n"
"functionality to the `companion object`.  Apart from this slight change, we can then work with our types in ways that map easily\n"
"from the Java side of world."
msgstr "在Kotlin版本中，我们只是把大部分的功能 link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[`active record pattern`] 转移到了 `companion object` 。除了这个细微的变化，我们还可以从 Java 方面轻松映射的方式来处理我们的类型。"

#. type: Title ==
#: _versions/2.13/guides/hibernate-orm-panache-kotlin.adoc
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#: _versions/2.13/guides/hibernate-orm-panache-kotlin.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#. type: Plain text
#: _versions/2.13/guides/hibernate-orm-panache-kotlin.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库： `git clone {quickstarts-clone-url}` ，或者下载 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: _versions/2.13/guides/hibernate-orm-panache-kotlin.adoc
#, fuzzy
msgid "The solution is located in the `hibernate-orm-panache-kotlin-quickstart` {quickstarts-tree-url}/hibernate-orm-panache-kotlin-quickstart[directory]."
msgstr "解决方案位于 `hibernate-orm-panache-kotlin-quickstart` {quickstarts-tree-url}/hibernate-orm-panache-kotlin-quickstart[目录]。"

#. type: Title ==
#: _versions/2.13/guides/hibernate-orm-panache-kotlin.adoc
#, fuzzy, no-wrap
msgid "Setting up and configuring Hibernate ORM with Panache and Kotlin"
msgstr "用Panache和Kotlin设置和配置Hibernate ORM"

#: _versions/2.13/guides/hibernate-orm-panache-kotlin.adoc
#, fuzzy
msgid ""
"To get started using Hibernate ORM with Panache and Kotlin, you can, generally, follow the steps laid out in the Java tutorial. The biggest\n"
"change to configuring your project is the Quarkus artifact to include.  You can, of course, keep the Java version if you\n"
"need but if all you need are the Kotlin APIs then include the following dependency instead:"
msgstr "要开始在 Panache 和 Kotlin 中使用 Hibernate ORM，一般可以按照 Java 教程中的步骤进行。配置项目的最大变化在于要包含的 Quarkus 工具。当然，如果需要，你可以保留 Java 版本，但如果你需要的只是 Kotlin API，那么请加入以下依赖关系："

#. type: Block title
#: _versions/2.13/guides/hibernate-orm-panache-kotlin.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/2.13/guides/hibernate-orm-panache-kotlin.adoc
msgid ""
"Note the addition of `-kotlin` on the end. Generally you'll only need this version but if your project will be using\n"
"both Java and Kotlin code, you can safely include both artifacts."
msgstr "注意最后添加了 `-kotlin` 。通常你只需要这个版本，但如果你的项目将同时使用 Java 和 Kotlin 代码，你可以安全地包含这两个工件。"

#. type: Block title
#: _versions/2.13/guides/hibernate-orm-panache-kotlin.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: _versions/2.13/guides/hibernate-orm-panache-kotlin.adoc
#, no-wrap
msgid "Using the repository pattern"
msgstr "使用Repository模式"

#. type: Title ===
#: _versions/2.13/guides/hibernate-orm-panache-kotlin.adoc
#, no-wrap
msgid "Defining your entity"
msgstr "定义实体类"

#. type: Plain text
#: _versions/2.13/guides/hibernate-orm-panache-kotlin.adoc
msgid "When using the repository pattern, you can define your entities as regular JPA entities."
msgstr "使用Repository模式时，可以将实体类定义为普通的JPA实体。"

#. type: Title ===
#: _versions/2.13/guides/hibernate-orm-panache-kotlin.adoc
#, no-wrap
msgid "Defining your repository"
msgstr "定义Repository"

#: _versions/2.13/guides/hibernate-orm-panache-kotlin.adoc
#, fuzzy
msgid ""
"When using Repositories, you get the exact same convenient methods as with the active record pattern, injected in your Repository,\n"
"by making them implement `PanacheRepository`:"
msgstr "在使用 Repository 时，您可以通过让 Repository 实现 `PanacheRepository` ，获得与 Active Record 模式完全相同的便捷方法，并注入到 Repository 中："

#: _versions/2.13/guides/hibernate-orm-panache-kotlin.adoc
msgid ""
"All the operations that are defined on `PanacheEntityBase` are available on your repository, so using it\n"
"is exactly the same as using the active record pattern, except you need to inject it:"
msgstr "`PanacheEntityBase` 中定义的所有方法都可以在你的Repository类上使用，所以它使用起来与Active Record模式完全一样，只是你需要注入Repository类的实例："

#. type: Title ===
#: _versions/2.13/guides/hibernate-orm-panache-kotlin.adoc
#, no-wrap
msgid "Most useful operations"
msgstr "常用操作"

#. type: Plain text
#: _versions/2.13/guides/hibernate-orm-panache-kotlin.adoc
msgid "Once you have written your repository, here are the most common operations you will be able to perform:"
msgstr "写好了Repository类之后，你可以执行以下一些最常见的操作："

#. type: Plain text
#: _versions/2.13/guides/hibernate-orm-panache-kotlin.adoc
msgid "All `list` methods have equivalent `stream` versions."
msgstr "上述所有 `list` 方法都有等效的的 `stream` 版本。"

#. type: Plain text
#: _versions/2.13/guides/hibernate-orm-panache-kotlin.adoc
msgid "The `stream` methods require a transaction to work."
msgstr "`stream` 方法的运行需要事务。"

#: _versions/2.13/guides/hibernate-orm-panache-kotlin.adoc
#, fuzzy
msgid ""
"For more examples, please consult the xref:hibernate-orm-panache.adoc[Java version] for complete details.  Both APIs\n"
"are the same and work identically except for some Kotlin-specific tweaks to make things feel more natural to\n"
"Kotlin developers.  These tweaks include things like better use of nullability and the lack of `Optional` on API\n"
"methods."
msgstr "如需了解更多示例，请查阅 xref:hibernate-orm-panache.adoc[Java 版本] 的完整细节。除了一些特定于 Kotlin 的调整，让 Kotlin 开发人员感觉更自然之外，这两个 API 是一样的，工作方式也完全相同。这些调整包括更好地使用 nullability 以及在 API 方法上不使用 `Optional` 。"
