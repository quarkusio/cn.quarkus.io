# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-11-17 12:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.13/guides/resteasy.adoc
#, no-wrap
msgid "RESTEasy Classic"
msgstr ""

#. type: delimited block =
#: _versions/2.13/guides/resteasy.adoc
msgid "This guide is about https://resteasy.dev[RESTEasy Classic] which used to be the default JAX-RS implementation until Quarkus 2.8."
msgstr ""

#: _versions/2.13/guides/resteasy.adoc
msgid ""
"It is now recommended to use RESTEasy Reactive, which supports equally well traditional blocking workloads and reactive workloads.\n"
"For more information about RESTEasy Reactive,\n"
"please see the xref:rest-json.adoc[introductory REST JSON guide] or the more detailed xref:resteasy-reactive.adoc[RESTEasy Reactive guide]."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "there is another guide if you need a xref:rest-client.adoc[REST client based on RESTEasy Classic] (including support for JSON)."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/resteasy.adoc
#, no-wrap
msgid "Architecture"
msgstr "架构"

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "The application built in this guide is quite simple: the user can add elements in a list using a form and the list is updated."
msgstr "本指南中构建的应用程序非常简单：用户可以使用一个表单在列表中添加元素并更新列表。"

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "All the information between the browser and the server are formatted as JSON."
msgstr "浏览器和服务器之间的所有信息都被格式化为JSON。"

#. type: Title ==
#: _versions/2.13/guides/resteasy.adoc
#, no-wrap
msgid "Creating the Maven project"
msgstr "创建Maven项目"

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#: _versions/2.13/guides/resteasy.adoc
msgid ""
"This command generates a new project importing the RESTEasy/JAX-RS and https://github.com/FasterXML/jackson[Jackson] extensions,\n"
"and in particular adds the following dependency:"
msgstr ""

#. type: Block title
#: _versions/2.13/guides/resteasy.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/2.13/guides/resteasy.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block =
#: _versions/2.13/guides/resteasy.adoc
msgid "To improve user experience, Quarkus registers the three Jackson https://github.com/FasterXML/jackson-modules-java8[Java 8 modules] so you don't need to do it manually."
msgstr "为了提高用户体验，Quarkus注册了三个Jackson link:https://github.com/FasterXML/jackson-modules-java8[Java 8模块] ，所以你不需要手动操作。"

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "Quarkus also supports https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] so, if you prefer JSON-B over Jackson, you can create a project relying on the RESTEasy JSON-B extension instead:"
msgstr ""

#: _versions/2.13/guides/resteasy.adoc
msgid ""
"This command generates a new project importing the RESTEasy/JAX-RS and https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] extensions,\n"
"and in particular adds the following dependency:"
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/resteasy.adoc
#, no-wrap
msgid "Creating your first JSON REST service"
msgstr "创建你的第一个JSON REST服务"

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "In this example, we will create an application to manage a list of fruits."
msgstr "在这个例子中，我们将创建一个应用程序来管理fruit列表。"

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "First, let's create the `Fruit` bean as follows:"
msgstr "首先，让我们创建 `Fruit` 实体类，如下所示："

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "Nothing fancy. One important thing to note is that having a default constructor is required by the JSON serialization layer."
msgstr "这非常的简单。需要注意的一件事是， JSON 序列化层需要具有默认构造函数。"

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "Now, create the `org.acme.rest.json.FruitResource` class as follows:"
msgstr "现在，创建 `org.acme.rest.json.FruitResource` 类，如下所示。"

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "The implementation is pretty straightforward, and you just need to define your endpoints using the JAX-RS annotations."
msgstr ""

#: _versions/2.13/guides/resteasy.adoc
msgid ""
"The `Fruit` objects will be automatically serialized/deserialized by https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] or https://github.com/FasterXML/jackson[Jackson],\n"
"depending on the extension you chose when initializing the project."
msgstr "`Fruit` 对象将被 link:https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] 或 link:https://github.com/FasterXML/jackson[Jackson] 自动序列化/反序列化，这取决于你在初始化项目时选择的扩展。"

#: _versions/2.13/guides/resteasy.adoc
msgid ""
"When a JSON extension is installed such as `quarkus-resteasy-jackson` or `quarkus-resteasy-jsonb`, Quarkus will use the `application/json` media type\n"
"by default for most return values, unless the media type is explicitly set via\n"
"`@Produces` or `@Consumes` annotations (there are some exceptions for well known types, such as `String` and `File`, which default to `text/plain` and `application/octet-stream`\n"
"respectively)."
msgstr ""

#: _versions/2.13/guides/resteasy.adoc
msgid ""
"If you don't want JSON by default you can set `quarkus.resteasy-json.default-json=false` and the default will change back to being auto-negotiated. If you set this\n"
"you will need to add `@Produces(MediaType.APPLICATION_JSON)` and `@Consumes(MediaType.APPLICATION_JSON)` to your endpoints in order to use JSON."
msgstr ""

#: _versions/2.13/guides/resteasy.adoc
msgid ""
"If you don't rely on the JSON default, it is heavily recommended to annotate your endpoints with the `@Produces` and `@Consumes` annotations to define precisely the expected content-types.\n"
"It will allow to narrow down the number of JAX-RS providers (which can be seen as converters) included in the native executable."
msgstr ""

#. type: Title ===
#: _versions/2.13/guides/resteasy.adoc
#, no-wrap
msgid "Configuring JSON support"
msgstr "配置JSON支持"

#. type: Title ====
#: _versions/2.13/guides/resteasy.adoc
#, no-wrap
msgid "Jackson"
msgstr ""

#: _versions/2.13/guides/resteasy.adoc
msgid ""
"In Quarkus, the default Jackson `ObjectMapper` obtained via CDI (and consumed by the Quarkus extensions) is configured to ignore unknown properties\n"
"(by disabling the `DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES` feature)."
msgstr "在Quarkus中，通过CDI获得的默认Jackson `ObjectMapper` （并由Quarkus扩展使用）被配置为忽略未知属性（通过禁用 `DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES` 功能）。"

#: _versions/2.13/guides/resteasy.adoc
msgid ""
"You can restore the default behavior of Jackson by setting `quarkus.jackson.fail-on-unknown-properties=true` in your `application.properties`\n"
"or on a per-class basis via `@JsonIgnoreProperties(ignoreUnknown = false)`."
msgstr ""

#: _versions/2.13/guides/resteasy.adoc
msgid ""
"Furthermore, the `ObjectMapper` is configured to format dates and time in ISO-8601\n"
"(by disabling the `SerializationFeature.WRITE_DATES_AS_TIMESTAMPS` feature)."
msgstr "此外， `ObjectMapper` 被配置为ISO-8601的日期和时间格式（通过禁用 `SerializationFeature.WRITE_DATES_AS_TIMESTAMPS` 功能）。"

#: _versions/2.13/guides/resteasy.adoc
msgid ""
"The default behaviour of Jackson can be restored by setting `quarkus.jackson.write-dates-as-timestamps=true`\n"
"in your `application.properties`. If you want to change the format for a single field, you can use the\n"
"`@JsonFormat` annotation."
msgstr "Jackson的默认行为可以通过在你的 `application.properties` 中设置 `quarkus.jackson.write-dates-as-timestamps=true` 来设置。如果你想改变单个字段的默认行为，你可以使用 `@JsonFormat` 注解。"

#: _versions/2.13/guides/resteasy.adoc
msgid ""
"Also, Quarkus makes it very easy to configure various Jackson settings via CDI beans.\n"
"The simplest (and suggested) approach is to define a CDI bean of type `io.quarkus.jackson.ObjectMapperCustomizer`\n"
"inside of which any Jackson configuration can be applied."
msgstr "另外，Quarkus使得通过CDI beans来配置各种Jackson设置变得非常容易。最简单的（也是建议的）方法是定义一个类型为 `io.quarkus.jackson.ObjectMapperCustomizer` 的CDI Bean，在其中可以使用任何Jackson配置。"

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "An example where a custom module needs to be registered would look like so:"
msgstr "需要注册自定义模块的示例如下所示："

#: _versions/2.13/guides/resteasy.adoc
msgid ""
"Users can even provide their own `ObjectMapper` bean if they so choose.\n"
"If this is done, it is very important to manually inject and apply all `io.quarkus.jackson.ObjectMapperCustomizer` beans in the CDI producer that produces `ObjectMapper`.\n"
"Failure to do so will prevent Jackson specific customizations provided by various extensions from being applied."
msgstr "如果用户选择的话，他们甚至可以提供自己的 `ObjectMapper` bean。如果这样做，在产生 `ObjectMapper` 的CDI生产者中，手动注入和应用所有 `io.quarkus.jackson.ObjectMapperCustomizer` Bean是非常重要的。如果不这样做，就会阻止各种扩展所提供的Jackson特定的自定义功能被应用。"

#. type: Title ====
#: _versions/2.13/guides/resteasy.adoc
#, no-wrap
msgid "JSON-B"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "As stated above, Quarkus provides the option of using JSON-B instead of Jackson via the use of the `quarkus-resteasy-jsonb` extension."
msgstr "如上所述，Quarkus通过使用 `quarkus-resteasy-jsonb` 扩展提供了使用JSON-B而不是Jackson的选项。"

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "Following the same approach as described in the previous section, JSON-B can be configured using a `io.quarkus.jsonb.JsonbConfigCustomizer` bean."
msgstr "按照上一节所述的相同方法，JSON-B可以使用 `io.quarkus.jsonb.JsonbConfigCustomizer` bean进行配置。"

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "If for example a custom serializer named `FooSerializer` for type `com.example.Foo` needs to be registered with JSON-B, the addition of a bean like the following would suffice:"
msgstr "例如，如果需要使用 JSON-B 注册类型为 `com.example.Foo` 的名为 `FooSerializer` 的自定义序列化程序，则添加如下所示的 bean 就足够了："

#: _versions/2.13/guides/resteasy.adoc
msgid ""
"A more advanced option would be to directly provide a bean of `javax.json.bind.JsonbConfig` (with a `Dependent` scope) or in the extreme case to provide a bean of type `javax.json.bind.Jsonb` (with a `Singleton` scope).\n"
"If the latter approach is leveraged it is very important to manually inject and apply all `io.quarkus.jsonb.JsonbConfigCustomizer` beans in the CDI producer that produces `javax.json.bind.Jsonb`.\n"
"Failure to do so will prevent JSON-B specific customizations provided by various extensions from being applied."
msgstr "一个更高级的选择是直接提供一个 `javax.json.bind.JsonbConfig` 的bean（具有 `Dependent` 范围），或者在极端情况下，提供一个 `javax.json.bind.Jsonb` 的bean（具有 `Singleton` 范围）。如果采用后一种方法，那么在产成 `javax.json.bind.Jsonb` 的CDI生产者中手动注入和应用所有 `io.quarkus.jsonb.JsonbConfigCustomizer` Bean是非常重要的。如果不这样做，就会阻止由各种扩展提供的JSON-B特定的自定义功能被应用。"

#. type: Title ===
#: _versions/2.13/guides/resteasy.adoc
#, no-wrap
msgid "JSON Hypertext Application Language (HAL) support"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "The https://tools.ietf.org/id/draft-kelly-json-hal-01.html[HAL] standard is a simple format to represent web links."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "To enable the HAL support, add the `quarkus-hal` extension to your project. Also, as HAL needs JSON support, you need to add either the `quarkus-resteasy-jsonb` or the `quarkus-resteasy-jackson` extension."
msgstr ""

#. type: Block title
#: _versions/2.13/guides/resteasy.adoc
#, no-wrap
msgid "Table Context object"
msgstr ""

#. type: Table
#: _versions/2.13/guides/resteasy.adoc
#, no-wrap
msgid "GAV"
msgstr ""

#. type: Table
#: _versions/2.13/guides/resteasy.adoc
#, no-wrap
msgid "Usage"
msgstr ""

#. type: Table
#: _versions/2.13/guides/resteasy.adoc
#, no-wrap
msgid "`io.quarkus:quarkus-hal`"
msgstr ""

#. type: Table
#: _versions/2.13/guides/resteasy.adoc
#, no-wrap
msgid "https://tools.ietf.org/id/draft-kelly-json-hal-01.html[HAL]"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "After adding the extensions, we can now annotate the REST resources to produce the media type `application/hal+json` (or use RestMediaType.APPLICATION_HAL_JSON). For example:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "Now, the endpoints `/records` and `/records/first` will accept the media type both `json` and `hal+json` to print the records in Hal format."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "For example, if we invoke the `/records` endpoint using curl to return a list of records, the HAL format will look like as follows:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "When we call a resource `/records/first` that returns only one instance, then the output is:"
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/resteasy.adoc
#, no-wrap
msgid "Creating a frontend"
msgstr "创建一个网页"

#: _versions/2.13/guides/resteasy.adoc
msgid ""
"Now let's add a simple web page to interact with our `FruitResource`.\n"
"Quarkus automatically serves static resources located under the `META-INF/resources` directory.\n"
"In the `src/main/resources/META-INF/resources` directory, add a `fruits.html` file with the content from this {quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/fruits.html[fruits.html] file in it."
msgstr "现在让我们添加一个简单的网页来与我们的 `FruitResource` 进行交互。Quarkus自动提供位于 `META-INF/resources` 目录下的静态资源。在 `src/main/resources/META-INF/resources` 目录中，添加一个 `fruits.html` 文件，其中包含这个{quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/fruits.html[fruits.html] 文件的内容。"

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "You can now interact with your REST service:"
msgstr "现在你可以与你的REST服务进行交互："

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "start Quarkus with:"
msgstr "启动Quarkus："

#: _versions/2.13/guides/resteasy.adoc
msgid "CLI"
msgstr ""

#: _versions/2.13/guides/resteasy.adoc
msgid "Maven"
msgstr "Maven"

#: _versions/2.13/guides/resteasy.adoc
msgid "Gradle"
msgstr "Gradle"

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "open a browser to `http://localhost:8080/fruits.html`"
msgstr "打开浏览器访问 `<a href=\"http://localhost:8080/fruits.html\" class=\"bare\">http://localhost:8080/fruits.html</a>` "

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "add new fruits to the list via the form"
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/resteasy.adoc
#, no-wrap
msgid "Building a native executable"
msgstr "构建一个本地可执行文件"

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "You can build a native executable with the usual command:"
msgstr "你可以使用常用命令构建本机可执行文件："

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "Running it is as simple as executing `./target/rest-json-quickstart-1.0.0-SNAPSHOT-runner`."
msgstr "运行它就像执行 `./target/rest-json-quickstart-1.0.0-SNAPSHOT-runner` 一样简单。"

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "You can then point your browser to `http://localhost:8080/fruits.html` and use your application."
msgstr "然后你可以使用的浏览器访问 `<a href=\"http://localhost:8080/fruits.html\" class=\"bare\">http://localhost:8080/fruits.html</a>` 来使用你的应用程序。"

#. type: Title ==
#: _versions/2.13/guides/resteasy.adoc
#, no-wrap
msgid "About serialization"
msgstr "关于序列化"

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "JSON serialization libraries use Java reflection to get the properties of an object and serialize them."
msgstr "JSON序列化库使用Java反射来获取一个对象的属性并将其序列化。"

#: _versions/2.13/guides/resteasy.adoc
msgid ""
"When using native executables with GraalVM, all classes that will be used with reflection need to be registered.\n"
"The good news is that Quarkus does that work for you most of the time.\n"
"So far, we haven't registered any class, not even `Fruit`, for reflection usage and everything is working fine."
msgstr "当使用GraalVM的本地可执行文件时，需要注册所有将与反射一起使用的类。好消息是，Quarkus在大多数时候都会为你做这项工作。到目前为止，我们还没有注册任何类，甚至没有注册 `Fruit` ，并且一切正常。"

#: _versions/2.13/guides/resteasy.adoc
msgid ""
"Quarkus performs some magic when it is capable of inferring the serialized types from the REST methods.\n"
"When you have the following REST method, Quarkus determines that `Fruit` will be serialized:"
msgstr "当Quarkus能够从REST方法中推断出序列化的类型时，它会发挥一些作用。当你有以下的REST方法时，Quarkus确定 `Fruit` 将被序列化："

#: _versions/2.13/guides/resteasy.adoc
msgid ""
"Quarkus does that for you automatically by analyzing the REST methods at build time\n"
"and that's why we didn't need any reflection registration in the first part of this guide."
msgstr "Quarkus通过在构建时分析REST方法自动为你执行此操，这就是为什么我们在本指南的第一部分不需要任何反射注册。"

#: _versions/2.13/guides/resteasy.adoc
msgid ""
"Another common pattern in the JAX-RS world is to use the `Response` object.\n"
"`Response` comes with some nice perks:"
msgstr "JAX-RS世界中另一个常见的模式是使用 `Response` 对象。 `Response` 有一些很好的好处："

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "you can return different entity types depending on what happens in your method (a `Legume` or an `Error` for instance);"
msgstr "你可以根据你的方法中发生的情况，返回不同的实体类型（例如， `Legume` 或 `Error` ）。"

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "you can set the attributes of the `Response` (the status comes to mind in the case of an error)."
msgstr "你可以设置 `Response` 的属性（在出现错误的情况下，会想到状态）。"

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "Your REST method then looks like this:"
msgstr "你的 REST 方法如下所示："

#: _versions/2.13/guides/resteasy.adoc
msgid ""
"It is not possible for Quarkus to determine at build time the type included in the `Response` as the information is not available.\n"
"In this case, Quarkus won't be able to automatically register for reflection the required classes."
msgstr "Quarkus不可能在构建时确定 `Response` 中包含的类型，因为该信息不可用。在这种情况下，Quarkus将无法自动注册反映所需的类。"

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "This leads us to our next section."
msgstr "这将我们引向下一节。"

#. type: Title ==
#: _versions/2.13/guides/resteasy.adoc
#, no-wrap
msgid "Using Response"
msgstr "使用Response"

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "Let's create the `Legume` class which will be serialized as JSON, following the same model as for our `Fruit` class:"
msgstr "让我们创建一个将被序列化为 JSON 的 `Legume` 类，遵循与我们的 `Fruit` 类相同的模型："

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "Now let's create a `LegumeResource` REST service with only one method which returns the list of legumes."
msgstr "现在让我们创建一个 `LegumeResource` REST服务，它只有一个返回legumes类列表的方法。"

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "This method returns a `Response` and not a list of `Legume`."
msgstr "该方法返回一个 `Response` ，而不是一个 `Legume` 列表。"

#: _versions/2.13/guides/resteasy.adoc
msgid ""
"Now let's add a simple web page to display our list of legumes.\n"
"In the `src/main/resources/META-INF/resources` directory, add a `legumes.html` file with the content from this\n"
"{quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/legumes.html[legumes.html] file in it."
msgstr "现在让我们添加一个简单的网页来显示我们的legumes列表。在 `src/main/resources/META-INF/resources` 目录中，添加一个 `legumes.html` 文件，其中包含这个{quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/legumes.html[legumes.html] 文件的内容。"

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "Open a browser to http://localhost:8080/legumes.html, and you will see our list of legumes."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "The interesting part starts when running the application as a native executable:"
msgstr "有趣的部分是在将应用程序作为本机可执行文件运行时开始的："

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "create the native executable with:"
msgstr "创建本地可执行文件。"

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "execute it with `./target/rest-json-quickstart-1.0.0-SNAPSHOT-runner`"
msgstr "用以下方式执行它 `./target/rest-json-quickstart-1.0.0-SNAPSHOT-runner` "

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "open a browser and go to http://localhost:8080/legumes.html"
msgstr "打开浏览器，访问 http://localhost:8080/legumes.html "

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "No legumes there."
msgstr "那里没有legumes。"

#: _versions/2.13/guides/resteasy.adoc
msgid ""
"As mentioned above, the issue is that Quarkus was not able to determine the `Legume` class will require some reflection by analyzing the REST endpoints.\n"
"The JSON serialization library tries to get the list of fields of `Legume` and gets an empty list, so it does not serialize the fields' data."
msgstr ""

#: _versions/2.13/guides/resteasy.adoc
msgid ""
"At the moment, when JSON-B or Jackson tries to get the list of fields of a class, if the class is not registered for reflection, no exception will be thrown.\n"
"GraalVM will simply return an empty list of fields."
msgstr "目前，当JSON-B或Jackson尝试获取一个类的字段列表时，如果该类没有注册反射，则不会抛出异常。GraalVM将简单地返回一个空的字段列表。"

#. type: delimited block =
#: _versions/2.13/guides/resteasy.adoc
msgid "Hopefully, this will change in the future and make the error more obvious."
msgstr "希望这在将来会有所改变，使错误更加明显。"

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "We can register `Legume` for reflection manually by adding the `@RegisterForReflection` annotation on our `Legume` class:"
msgstr "我们可以通过在我们的 `Legume` 类上添加 `@RegisterForReflection` 注解来手动注册 `Legume` 进行反射："

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation. More details about the `@RegisterForReflection` annotation can be found on the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr "`@RegisterForReflection` 注解用于指导Quarkus在native编译过程中保留该类和其成员。关于 `@RegisterForReflection` 注解的更多细节可以在 link:writing-native-applications-tips.html#registerForReflection[native应用程序提示] 页面找到。"

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "Let's do that and follow the same steps as before:"
msgstr "让我们这样做，并遵循与之前相同的步骤："

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "hit `Ctrl+C` to stop the application"
msgstr "点击 `Ctrl+C` ，停止应用程序。"

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "This time, you can see our list of legumes."
msgstr "这一次，你可以看到我们的legumes列表。"

#. type: Title ==
#: _versions/2.13/guides/resteasy.adoc
#, no-wrap
msgid "Being reactive"
msgstr "响应式"

#. type: delimited block =
#: _versions/2.13/guides/resteasy.adoc
msgid "For reactive workloads, please always use xref:resteasy-reactive.adoc[RESTEasy Reactive]."
msgstr ""

#: _versions/2.13/guides/resteasy.adoc
msgid ""
"You can return _reactive types_ to handle asynchronous processing.\n"
"Quarkus recommends the usage of https://smallrye.io/smallrye-mutiny[Mutiny] to write reactive and asynchronous code."
msgstr "你可以返回 _响应式类型_ 来处理异步处理。Quarkus推荐使用 link:https://smallrye.io/smallrye-mutiny[Mutiny] 来编写响应式和异步代码。"

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "To integrate Mutiny and RESTEasy, you need to add the `quarkus-resteasy-mutiny` dependency to your project:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "Then, your endpoint can return `Uni` or `Multi` instances:"
msgstr ""

#: _versions/2.13/guides/resteasy.adoc
msgid ""
"Use `Uni` when you have a single result.\n"
"Use `Multi` when you have multiple items that may be emitted asynchronously."
msgstr "当你有一个单一的结果时，使用 `Uni` 。当你有多个可能被异步发射的项目时，使用 `Multi` 。"

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "You can use `Uni` and `Response` to return asynchronous HTTP responses: `Uni<Response>`."
msgstr "您可以使用 `Uni` 和 `Response` 返回异步 HTTP 响应：`Uni<Response>`。"

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "More details about Mutiny can be found in xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "有关 Mutiny 的更多详细信息，请参见外部参考：xref:mutiny-primer.adoc[Mutiny - 一个直观的响应式编程库]。"

#. type: Title ==
#: _versions/2.13/guides/resteasy.adoc
#, no-wrap
msgid "HTTP filters and interceptors"
msgstr ""

#: _versions/2.13/guides/resteasy.adoc
msgid ""
"Both HTTP request and response can be intercepted by providing `ContainerRequestFilter` or `ContainerResponseFilter`\n"
"implementations respectively. These filters are suitable for processing the metadata associated with a message: HTTP\n"
"headers, query parameters, media type, and other metadata. They also have the capability to abort the request\n"
"processing, for instance when the user does not have the permissions to access the endpoint."
msgstr ""

#: _versions/2.13/guides/resteasy.adoc
msgid ""
"Let's use `ContainerRequestFilter` to add logging capability to our service. We can do that by implementing\n"
"`ContainerRequestFilter` and annotating it with the `@Provider` annotation:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "Now, whenever a REST method is invoked, the request will be logged into the console:"
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/resteasy.adoc
#, no-wrap
msgid "CORS filter"
msgstr ""

#: _versions/2.13/guides/resteasy.adoc
msgid ""
"link:https://en.wikipedia.org/wiki/Cross-origin_resource_sharing[Cross-origin resource sharing] (CORS) is a mechanism that\n"
"allows restricted resources on a web page to be requested from another domain outside the domain from which the first resource\n"
"was served."
msgstr ""

#: _versions/2.13/guides/resteasy.adoc
msgid ""
"Quarkus comes with a CORS filter. Read the xref:http-reference.adoc#cors-filter[HTTP Reference Documentation] to learn\n"
"how to use it."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/resteasy.adoc
#, no-wrap
msgid "GZip Support"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "Quarkus comes with GZip support (even though it is not enabled by default). The following configuration knobs allow to configure GZip support."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "Enable Gzip support."
msgstr ""

#: _versions/2.13/guides/resteasy.adoc
msgid ""
"Configure the upper limit on deflated request body. This is useful to mitigate potential attacks by limiting their reach. The default value is `10M`.\n"
"This configuration option would recognize strings in this format (shown as a regular expression): `[0-9]+[KkMmGgTtPpEeZzYy]?`. If no suffix is given, assume bytes."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "Once GZip support has been enabled you can use it on an endpoint by adding the `@org.jboss.resteasy.annotations.GZIP` annotation to your endpoint method."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "The configuration property `quarkus.http.enable-compression` has no effect on compression support of RESTEasy Classic endpoints."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/resteasy.adoc
#, no-wrap
msgid "Multipart Support"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "RESTEasy supports multipart via the https://docs.jboss.org/resteasy/docs/4.5.6.Final/userguide/html/Multipart.html[RESTEasy Multipart Provider]."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "Quarkus provides an extension called `quarkus-resteasy-multipart` to make things easier for you."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "This extension slightly differs from the RESTEasy default behavior as the default charset (if none is specified in your request) is UTF-8 rather than US-ASCII."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "You can configure this behavior with the following configuration properties:"
msgstr ""

#: _versions/2.13/guides/resteasy.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/resteasy.adoc
#, no-wrap
msgid "Servlet compatibility"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "In Quarkus, RESTEasy can either run directly on top of the Vert.x HTTP server, or on top of Undertow if you have any servlet dependency."
msgstr ""

#: _versions/2.13/guides/resteasy.adoc
msgid ""
"As a result, certain classes, such as `HttpServletRequest` are not always available for injection. Most use-cases for this particular\n"
"class are covered by JAX-RS equivalents, except for getting the remote client's IP. RESTEasy comes with a replacement API which you can inject:\n"
"https://docs.jboss.org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest.html[`HttpRequest`], which has the methods\n"
"https://docs.jboss.org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest.html#getRemoteAddress--[`getRemoteAddress()`]\n"
"and https://docs.jboss.org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest.html#getRemoteHost--[`getRemoteHost()`]\n"
"to solve this problem."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/resteasy.adoc
#, no-wrap
msgid "RESTEasy and REST Client interactions"
msgstr ""

#: _versions/2.13/guides/resteasy.adoc
msgid ""
"In Quarkus, the RESTEasy extension and xref:rest-client.adoc[the REST Client extension] share the same infrastructure.\n"
"One important consequence of this consideration is that they share the same list of providers (in the JAX-RS meaning of the word)."
msgstr ""

#: _versions/2.13/guides/resteasy.adoc
msgid ""
"For instance, if you declare a `WriterInterceptor`, it will by default intercept both the servers calls and the client calls,\n"
"which might not be the desired behavior."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "However, you can change this default behavior and constrain a provider to:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "only consider *server* calls by adding the `@ConstrainedTo(RuntimeType.SERVER)` annotation to your provider;"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "only consider *client* calls by adding the `@ConstrainedTo(RuntimeType.CLIENT)` annotation to your provider."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/resteasy.adoc
#, no-wrap
msgid "What's Different from Jakarta EE Development"
msgstr ""

#. type: Title ===
#: _versions/2.13/guides/resteasy.adoc
#, no-wrap
msgid "No Need for `Application` Class"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "Configuration via an application-supplied subclass of `Application` is supported, but not required."
msgstr ""

#. type: Title ===
#: _versions/2.13/guides/resteasy.adoc
#, no-wrap
msgid "Only a single JAX-RS application"
msgstr ""

#: _versions/2.13/guides/resteasy.adoc
msgid ""
"In contrast to JAX-RS (and RESTeasy) running in a standard servlet-container, Quarkus only supports the deployment of a single JAX-RS application.\n"
"If multiple JAX-RS `Application` classes are defined, the build will fail with the message `Multiple classes have been annotated with @ApplicationPath which is currently not supported`."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "If multiple JAX-RS applications are defined, the property `quarkus.resteasy.ignore-application-classes=true` can be used to ignore all explicit `Application` classes. This makes all resource-classes available via the application-path as defined by `quarkus.resteasy.path` (default: `/`)."
msgstr ""

#. type: Title ===
#: _versions/2.13/guides/resteasy.adoc
#, no-wrap
msgid "Support limitations of JAX-RS application"
msgstr ""

#: _versions/2.13/guides/resteasy.adoc
msgid ""
"The RESTEasy extension doesn't support the method `getProperties()` of the class `javax.ws.rs.core.Application`. Moreover, it only relies on the methods `getClasses()` and `getSingletons()` to filter out the annotated resource, provider and feature classes.\n"
"It doesn't filter out the built-in resource, provider and feature classes and also the resource, provider and feature classes registered by the other extensions.\n"
"Finally, the objects returned by the method `getSingletons()` are ignored, only the classes are taken into account to filter out the resource, provider and feature classes, in other words the method `getSingletons()` is actually managed the same way as `getClasses()`."
msgstr ""

#. type: Title ===
#: _versions/2.13/guides/resteasy.adoc
#, no-wrap
msgid "Lifecycle of Resources"
msgstr ""

#: _versions/2.13/guides/resteasy.adoc
msgid ""
"In Quarkus all JAX-RS resources are treated as CDI beans.\n"
"It's possible to inject other beans via `@Inject`, bind interceptors using bindings such as `@Transactional`, define `@PostConstruct` callbacks, etc."
msgstr ""

#: _versions/2.13/guides/resteasy.adoc
msgid ""
"If there is no scope annotation declared on the resource class then the scope is defaulted.\n"
"The default scope can be controlled through the `quarkus.resteasy.singleton-resources` property.\n"
"If set to `true` (default) then a *single instance* of a resource class is created to service all requests (as defined by `@javax.inject.Singleton`).\n"
"If set to `false` then a *new instance* of the resource class is created per each request.\n"
"An explicit CDI scope annotation (`@RequestScoped`, `@ApplicationScoped`, etc.) always overrides the default behavior and specifies the lifecycle of resource instances."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/resteasy.adoc
#, no-wrap
msgid "Include/Exclude JAX-RS classes with build time conditions"
msgstr ""

#: _versions/2.13/guides/resteasy.adoc
msgid ""
"Quarkus enables the inclusion or exclusion of JAX-RS Resources, Providers and Features directly thanks to build time conditions in the same that it does for CDI beans.\n"
"Thus, the various JAX-RS classes can be annotated with profile conditions (`@io.quarkus.arc.profile.IfBuildProfile` or `@io.quarkus.arc.profile.UnlessBuildProfile`) and/or with property conditions (`io.quarkus.arc.properties.IfBuildProperty` or `io.quarkus.arc.properties.UnlessBuildProperty`) to indicate to Quarkus at build time under which conditions these JAX-RS classes should be included."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "In the following example, Quarkus includes the endpoint `sayHello` if and only if the build profile `app1` has been enabled."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "Please note that if a JAX-RS Application has been detected and the method `getClasses()` and/or `getSingletons()` has/have been overridden, Quarkus will ignore the build time conditions and consider only what has been defined in the JAX-RS Application."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/resteasy.adoc
#, no-wrap
msgid "Conclusion"
msgstr "解决方案"

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "Creating JSON REST services with Quarkus is easy as it relies on proven and well known technologies."
msgstr "使用 Quarkus 创建 JSON REST 服务很容易，因为它依赖于经过验证且众所周知的技术。"

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "As usual, Quarkus further simplifies things under the hood when running your application as a native executable."
msgstr "像往常一样，当您将应用程序作为本机可执行文件运行时，Quarkus 进一步简化了内部工作。"

#. type: Plain text
#: _versions/2.13/guides/resteasy.adoc
msgid "There is only one thing to remember: if you use `Response` and Quarkus can't determine the beans that are serialized, you need to annotate them with `@RegisterForReflection`."
msgstr "只有一件事要记住：如果您使用 `Response` 并且 Quarkus 无法确定被序列化的 bean，则需要使用 `@RegisterForReflection` 注解它们。"
