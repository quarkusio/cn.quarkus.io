# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-05-25 18:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.13/guides/gradle-tooling.adoc
#, no-wrap
msgid "Building Quarkus apps with Gradle"
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/gradle-tooling.adoc
#, no-wrap
msgid "Creating a new project"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "To scaffold a Gradle project you can either use the xref:cli-tooling.adoc[Quarkus CLI] or the Quarkus Maven plugin:"
msgstr ""

#. type: Block title
#: _versions/2.13/guides/gradle-tooling.adoc
#, no-wrap
msgid "CLI"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "_For more information about how to install the Quarkus CLI and use it, please refer to xref:cli-tooling.adoc[the Quarkus CLI guide]._"
msgstr "_关于如何安装并使用Quarkus CLI的更多信息，请参考xref:cli-tooling.adoc[Quarkus CLI指南]。_"

#. type: Block title
#: _versions/2.13/guides/gradle-tooling.adoc
#, no-wrap
msgid "Maven"
msgstr "Maven"

#: _versions/2.13/guides/gradle-tooling.adoc
msgid ""
"If you just launch `mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create` the Maven plugin asks\n"
"for user inputs. You can disable this interactive mode (and use default values) by passing `-B` to the Maven command."
msgstr ""

#. type: delimited block *
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "If you prefer using the Kotlin DSL, use `gradle-kotlin-dsl` instead of `gradle`."
msgstr ""

#. type: delimited block =
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "Quarkus project scaffolding automatically installs the Gradle wrapper (`./gradlew`) in your project."
msgstr ""

#. type: delimited block =
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "If you prefer to use a standalone Gradle installation, please use Gradle {gradle-version}."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "The project is generated in a directory named after the passed artifactId."
msgstr ""

#: _versions/2.13/guides/gradle-tooling.adoc
msgid ""
"A pair of Dockerfiles for native and JVM modes are also generated in `src/main/docker`.\n"
"Instructions to build the image and run the container are written in those Dockerfiles."
msgstr ""

#. type: Title ===
#: _versions/2.13/guides/gradle-tooling.adoc
#, no-wrap
msgid "Custom test configuration profile in JVM mode"
msgstr ""

#: _versions/2.13/guides/gradle-tooling.adoc
msgid ""
"By default, Quarkus tests in JVM mode are run using the `test` configuration profile. If you are not familiar with Quarkus\n"
"configuration profiles, everything you need to know is explained in the\n"
"xref:config-reference.adoc#profiles[Configuration Profiles Documentation]."
msgstr ""

#: _versions/2.13/guides/gradle-tooling.adoc
msgid ""
"It is however possible to use a custom configuration profile for your tests with the Gradle build configuration shown below.\n"
"This can be useful if you need for example to run some tests using a specific database which is not your default testing\n"
"database."
msgstr ""

#. type: Block title
#: _versions/2.13/guides/gradle-tooling.adoc
#, no-wrap
msgid "Groovy DSL"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "The `foo` configuration profile will be used to run the tests."
msgstr ""

#. type: Block title
#: _versions/2.13/guides/gradle-tooling.adoc
#, no-wrap
msgid "Kotlin DSL"
msgstr ""

#: _versions/2.13/guides/gradle-tooling.adoc
msgid ""
"It is not possible to use a custom test configuration profile in native mode for now. Native tests are always run using the\n"
"`prod` profile."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/gradle-tooling.adoc
#, no-wrap
msgid "Dealing with extensions"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "From inside a Quarkus project, you can obtain a list of the available extensions with:"
msgstr ""

#. type: Block title
#: _versions/2.13/guides/gradle-tooling.adoc
#, no-wrap
msgid "Gradle"
msgstr "Gradle"

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "You can enable an extension using:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "Extensions are passed using a comma-separated list."
msgstr ""

#: _versions/2.13/guides/gradle-tooling.adoc
msgid ""
"The extension name is the GAV name of the extension: e.g. `io.quarkus:quarkus-agroal`.\n"
"But you can pass a partial name and Quarkus will do its best to find the right extension.\n"
"For example, `agroal`, `Agroal` or `agro`  will expand to `io.quarkus:quarkus-agroal`.\n"
"If no extension is found or if more than one extensions match, you will see a red check mark  ❌ in the command result."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "You can install all extensions which match a globbing pattern:"
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/gradle-tooling.adoc
#, no-wrap
msgid "Development mode"
msgstr ""

#: _versions/2.13/guides/gradle-tooling.adoc
msgid ""
"Quarkus comes with a built-in development mode.\n"
"You can start it with:"
msgstr ""

#: _versions/2.13/guides/gradle-tooling.adoc
msgid ""
"Note that if you run it this way the continuous testing experience will not be as nice, as gradle runs as a daemon\n"
"Quarkus can't draw the 'pretty' test output so falls back to just logging the output."
msgstr ""

#: _versions/2.13/guides/gradle-tooling.adoc
msgid ""
"You can then update the application sources, resources and configurations.\n"
"The changes are automatically reflected in your running application.\n"
"This is great to do development spanning UI and database as you see changes reflected immediately."
msgstr ""

#: _versions/2.13/guides/gradle-tooling.adoc
msgid ""
"`quarkusDev` enables hot deployment with background compilation, which means that when you modify\n"
"your Java files or your resource files and refresh your browser these changes will automatically take effect.\n"
"This works too for resource files like the configuration property file.\n"
"The act of refreshing the browser triggers a scan of the workspace, and if any changes are detected the\n"
"Java files are compiled, and the application is redeployed, then your request is serviced by the\n"
"redeployed application. If there are any issues with compilation or deployment an error page will let you know."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "Hit `CTRL+C` to stop the application."
msgstr "使用 `CTRL+C` 来停止应用程序。"

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "You can change the working directory the development environment runs on:"
msgstr ""

#. type: delimited block =
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "By default, the `quarkusDev` task uses `compileJava` compiler options. These can be overridden by setting the `compilerArgs` property in the task."
msgstr ""

#. type: delimited block =
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "By default, `quarkusDev` sets the debug host to `localhost` (for security reasons). If you need to change this, for example to enable debugging on all hosts, you can use the `-DdebugHost` option like so:"
msgstr ""

#: _versions/2.13/guides/gradle-tooling.adoc
msgid ""
"The plugin also exposes a `quarkusDev` configuration. Using this configuration to declare a dependency will restrict the usage of that dependency to development mode.\n"
"The `quarkusDev` configuration can be used as following:"
msgstr ""

#. type: Title ===
#: _versions/2.13/guides/gradle-tooling.adoc
#, no-wrap
msgid "Remote Development Mode"
msgstr ""

#: _versions/2.13/guides/gradle-tooling.adoc
msgid ""
"It is possible to use development mode remotely, so that you can run Quarkus in a container environment (such as OpenShift)\n"
"and have changes made to your local files become immediately visible."
msgstr ""

#. type: delimited block *
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "This allows you to develop in the same environment you will actually run your app in, and with access to the same services."
msgstr ""

#. type: delimited block *
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "Do not use this in production. This should only be used in a development environment. You should not run production applications in dev mode."
msgstr ""

#. type: delimited block *
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "To do this you must build a mutable application, using the `mutable-jar` format. Set the following properties in `application.properties`:"
msgstr ""

#: _versions/2.13/guides/gradle-tooling.adoc
msgid ""
"This tells Quarkus to use the mutable-jar format. Mutable applications also include the deployment time parts of Quarkus,\n"
"so they take up a bit more disk space. If run normally they start just as fast and use the same memory as an immutable application,\n"
"however they can also be started in dev mode."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "The password that is used to secure communication between the remote side and the local side."
msgstr ""

#: _versions/2.13/guides/gradle-tooling.adoc
msgid ""
"The URL that your app is going to be running in dev mode at. This is only needed on the local side, so you\n"
"may want to leave it out of the properties file and specify it as a system property on the command line."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "The `mutable-jar` is then built in the same way that a regular Quarkus jar is built, i.e. by issuing:"
msgstr ""

#: _versions/2.13/guides/gradle-tooling.adoc
msgid ""
"Before you start Quarkus on the remote host set the environment variable `QUARKUS_LAUNCH_DEVMODE=true`. If you are\n"
"on bare metal you can set it via the `export QUARKUS_LAUNCH_DEVMODE=true` command and then run the application with the proper `java -jar ...` command to run the application."
msgstr ""

#: _versions/2.13/guides/gradle-tooling.adoc
msgid ""
"If you plan on running the application via Docker, then you'll need to add `-e QUARKUS_LAUNCH_DEVMODE=true` to the `docker run` command.\n"
"When the application starts you should now see the following line in the logs: `Profile dev activated. Live Coding activated`."
msgstr ""

#: _versions/2.13/guides/gradle-tooling.adoc
msgid ""
"The remote side does not need to include Maven or any other development tools. The normal `fast-jar` Dockerfile\n"
"that is generated with a new Quarkus application is all you need. If you are using bare metal launch the Quarkus runner\n"
"jar, do not attempt to run normal dev mode."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "Now you need to connect your local agent to the remote host, using the `remote-dev` command:"
msgstr ""

#: _versions/2.13/guides/gradle-tooling.adoc
msgid ""
"Now every time you refresh the browser you should see any changes you have made locally immediately visible in the remote\n"
"app."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "All the config options are shown below:"
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/gradle-tooling.adoc
#, no-wrap
msgid "Debugging"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "In development mode, Quarkus starts by default with debug mode enabled, listening to port `5005` without suspending the JVM."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "This behavior can be changed by giving the `debug` system property one of the following values:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "`false` - the JVM will start with debug mode disabled"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "`true` - The JVM is started in debug mode and will be listening on port `5005`"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "`client` - the JVM will start in client mode and attempt to connect to `localhost:5005`"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "`{port}` - The JVM is started in debug mode and will be listening on `{port}`"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "An additional system property `suspend` can be used to suspend the JVM, when launched in debug mode. `suspend` supports the following values:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "`y` or `true` - The debug mode JVM launch is suspended"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "`n` or `false` - The debug mode JVM is started without suspending"
msgstr ""

#. type: delimited block =
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "You can also run a Quarkus application in debug mode with a suspended JVM using:"
msgstr ""

#. type: delimited block =
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "Then, attach your debugger to `localhost:5005`."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/gradle-tooling.adoc
#, no-wrap
msgid "Import in your IDE"
msgstr ""

#: _versions/2.13/guides/gradle-tooling.adoc
msgid ""
"Once you have a <<project-creation, project generated>>, you can import it in your favorite IDE.\n"
"The only requirement is the ability to import a Gradle project."
msgstr ""

#: _versions/2.13/guides/gradle-tooling.adoc
msgid "**Eclipse**"
msgstr ""

#: _versions/2.13/guides/gradle-tooling.adoc
msgid ""
"In Eclipse, click on: `File -> Import`.\n"
"In the wizard, select: `Gradle -> Existing Gradle Project`.\n"
"On the next screen, select the root location of the project.\n"
"The next screen list the found modules; select the generated project and click on `Finish`. Done!"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "In a separated terminal, run:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "and enjoy a highly productive environment."
msgstr ""

#: _versions/2.13/guides/gradle-tooling.adoc
msgid "**IntelliJ IDEA**"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "In IntelliJ IDEA:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "From inside IntelliJ IDEA select `File -> New -> Project From Existing Sources...` or, if you are on the welcome dialog, select `Import project`."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "Select the project root"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "Select `Import project from external model` and `Gradle`"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "Next a few times (review the different options if needed)"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "On the last screen click on Finish"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "In a separated terminal or in the embedded terminal, run:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "Enjoy!"
msgstr ""

#: _versions/2.13/guides/gradle-tooling.adoc
msgid "**Apache NetBeans**"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "In NetBeans:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "Select `File -> Open Project`"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "Click on `Open Project`"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "In a separated terminal or the embedded terminal, go to the project root and run:"
msgstr ""

#: _versions/2.13/guides/gradle-tooling.adoc
msgid "**Visual Studio Code**"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "Open the project directory in VS Code. If you have installed the Java Extension Pack (grouping a set of Java extensions), the project is loaded as a Gradle project."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/gradle-tooling.adoc
#, no-wrap
msgid "Downloading dependencies for offline development and testing"
msgstr ""

#: _versions/2.13/guides/gradle-tooling.adoc
msgid ""
"Quarkus extension dependencies are divided into the runtime extension dependencies that end up on the application runtime\n"
"classpath and the deployment (or build time) extension dependencies that are resolved by Quarkus only at application build time to create\n"
"the build classpath. Application developers are expected to express dependencies only on the runtime artifacts of Quarkus extensions."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "To enable the use-case of building and testing a Quarkus application offline, the plugin includes the `quarkusGoOffline` task that could be called from the command line like this:"
msgstr ""

#: _versions/2.13/guides/gradle-tooling.adoc
msgid ""
"This task will resolve all the runtime, build time, test and dev mode dependencies of the application to the Gradle cache.\n"
"Once executed, you will be able to safely run quarkus task with `--offline` flag."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/gradle-tooling.adoc
#, no-wrap
msgid "Building a native executable"
msgstr "构建一个本地可执行文件"

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "Native executables make Quarkus applications ideal for containers and serverless workloads."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "Make sure to have `GRAALVM_HOME` configured and pointing to the latest release of GraalVM version {graalvm-version} (Make sure to use a Java 11 version of GraalVM)."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "Create a native executable using:"
msgstr "使用以下方法创建一个原生可执行文件："

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "A native executable will be present in `build/`."
msgstr ""

#: _versions/2.13/guides/gradle-tooling.adoc
msgid ""
"Native related properties can either be added in `application.properties` file, as command line arguments or in the `quarkusBuild` task.\n"
"Configuring the `quarkusBuild` task can be done as following:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "Set `quarkus.native.container-build` property to `true`"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "Set `quarkus.native.builder-image` property to `quay.io/quarkus/ubi-quarkus-graalvmce-builder-image:{graalvm-flavor}`"
msgstr ""

#: _versions/2.13/guides/gradle-tooling.adoc
msgid ""
"When using the Gradle Groovy DSL, property keys must follow lower camel case notation.\n"
"e.g. `container-build` is not valid, and should be replaced by `containerBuild`.\n"
"This limitation does not apply to the Gradle Kotlin DSL."
msgstr ""

#. type: Title ===
#: _versions/2.13/guides/gradle-tooling.adoc
#, no-wrap
msgid "Build a container friendly executable"
msgstr ""

#: _versions/2.13/guides/gradle-tooling.adoc
msgid ""
"The native executable will be specific to your operating system.\n"
"To create an executable that will run in a container, use the following:"
msgstr ""

#: _versions/2.13/guides/gradle-tooling.adoc
msgid ""
"The produced executable will be a 64-bit Linux executable, so depending on your operating system it may no longer be runnable.\n"
"However, it's not an issue as we are going to copy it to a Docker container.\n"
"Note that in this case the build itself runs in a Docker container too, so you don't need to have GraalVM installed locally."
msgstr ""

#. type: delimited block =
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "By default, the native executable will be generated using the `quay.io/quarkus/ubi-quarkus-graalvmce-builder-image:{graalvm-flavor}` Docker image."
msgstr ""

#: _versions/2.13/guides/gradle-tooling.adoc
msgid ""
"If you want to build a native executable with a different Docker image (for instance to use a different GraalVM version),\n"
"use the `-Dquarkus.native.builder-image=<image name>` build argument."
msgstr ""

#: _versions/2.13/guides/gradle-tooling.adoc
msgid ""
"The list of the available Docker images can be found on https://quay.io/repository/quarkus/ubi-quarkus-graalvmce-builder-image?tab=tags[quay.io].\n"
"Be aware that a given Quarkus version might not be compatible with all the images available."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/gradle-tooling.adoc
#, no-wrap
msgid "Running native tests"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "Run the native tests using:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "This task depends on `quarkusBuild`, so it will generate the native image before running the tests."
msgstr ""

#. type: delimited block =
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "By default, the `native-test` source set is based on `main` and `test` source sets. It is possible to add an extra source set. For example, if your integration tests are located in an `integrationTest` source set, you can specify it as:"
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/gradle-tooling.adoc
#, no-wrap
msgid "Running integration tests"
msgstr ""

#: _versions/2.13/guides/gradle-tooling.adoc
msgid ""
"Quarkus integration tests (annotated with `@QuarkusIntegrationTest`) will run on the artifact produced by Quarkus.\n"
"Those tests can be placed in a `src/integrationTest/java` directory and executed using:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "This task depends on both `test` and `quarkusBuild` tasks. The final artifact will be produced before running tests."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/gradle-tooling.adoc
#, no-wrap
msgid "Using fast-jar"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "`fast-jar` is now the default quarkus package type. The result of `./gradlew build` command is a new directory under `build` named `quarkus-app`."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "You can run the application using: `java -jar build/quarkus-app/quarkus-run.jar`."
msgstr ""

#: _versions/2.13/guides/gradle-tooling.adoc
msgid ""
"In order to successfully run the produced jar, you need to have the entire contents of the `quarkus-app` directory. If any of the files are missing, the application will not start or\n"
"might not function correctly."
msgstr ""

#: _versions/2.13/guides/gradle-tooling.adoc
msgid ""
"The `fast-jar` packaging results in creating an artifact that starts a little faster and consumes slightly less memory than a legacy Quarkus jar\n"
"because it has indexed information about which dependency jar contains classes and resources. It can thus avoid the lookup into potentially every jar\n"
"on the classpath that the legacy jar necessitates, when loading a class or resource."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/gradle-tooling.adoc
#, no-wrap
msgid "Building Uber-Jars"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "Quarkus Gradle plugin supports the generation of Uber-Jars by specifying a `quarkus.package.type` argument as follows:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "When building an Uber-Jar you can specify entries that you want to exclude from the generated jar by using the `--ignored-entry` argument:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "The entries are relative to the root of the generated Uber-Jar. You can specify multiple entries by adding extra `--ignored-entry` arguments."
msgstr ""

#. type: Title ===
#: _versions/2.13/guides/gradle-tooling.adoc
#, no-wrap
msgid "Working with multi-module projects"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "By default, Quarkus will not discover CDI beans inside another module."
msgstr ""

#: _versions/2.13/guides/gradle-tooling.adoc
msgid ""
"The best way to enable CDI bean discovery for a module in a multi-module project would be to include a `META-INF/beans.xml` file,\n"
"unless it is the main application module already configured with the quarkus-maven-plugin, in which case it will be indexed automatically."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "Alternatively, there is some unofficial link:https://plugins.gradle.org/search?term=jandex[Gradle Jandex plugins] that can be used instead of the `META-INF/beans.xml` file."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/gradle-tooling.adoc
msgid "More information on this topic can be found on the xref:cdi-reference.adoc#bean_discovery[Bean Discovery] section of the CDI guide."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/gradle-tooling.adoc
#, no-wrap
msgid "Publishing your application"
msgstr ""

#: _versions/2.13/guides/gradle-tooling.adoc
msgid ""
"In order to make sure the right dependency versions are being used by Gradle, the BOM is declared as an `enforcedPlatform` in your build file.\n"
"By default, the `maven-publish` plugin will prevent you from publishing your application due to this `enforcedPlatform`.\n"
"This validation can be skipped by adding the following configuration in your build file:"
msgstr ""
