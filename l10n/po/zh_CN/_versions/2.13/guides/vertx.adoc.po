# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-11-17 12:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.13/guides/vertx.adoc
#, no-wrap
msgid "Using Eclipse Vert.x API from a Quarkus Application"
msgstr "在Quarkus应用程序中使用Eclipse Vert.x API"

#: _versions/2.13/guides/vertx.adoc
msgid ""
"https://vertx.io[Vert.x] is a toolkit for building reactive applications.\n"
"As described in the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture], Quarkus uses Vert.x underneath."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "Quarkus applications can access and use the Vert.x APIs."
msgstr "Quarkus应用程序能够访问和使用Vert.x APIs。"

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "This guide presents how you can build a Quarkus application using:"
msgstr "该指南介绍如何使用以下方法构建 Quarkus 应用程序:"

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "the managed instance of Vert.x"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "the Vert.x event bus"
msgstr "Vert.x 事件总线"

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "the Vert.x Web Client"
msgstr "Vert.x 网络客户端"

#: _versions/2.13/guides/vertx.adoc
msgid ""
"It's an introductory guide.\n"
"The xref:vertx-reference.adoc[Vert.x reference guide] covers more advanced features such as verticles, and native transports."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/vertx.adoc
#, no-wrap
msgid "Architecture"
msgstr "架构"

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "We are going to build a simple application exposing four HTTP endpoints:"
msgstr "我们将构建一个简单应用程序 它包含四个暴露出的端点:"

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "`/vertx/lorem` returns the content from a small file"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "`/vertx/book` returns the content from a large file (a book)"
msgstr "`/vertx/book` 返回一个大文件的内容（一本书）"

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "`/vertx/hello` uses the Vert.x event bus to produce the response"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "`/vertx/web` uses the Vert.x Web Client to retrieve data from Wikipedia"
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/vertx.adoc
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#: _versions/2.13/guides/vertx.adoc
msgid ""
"We recommend that you follow the instructions in the following sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库： `git clone {quickstarts-clone-url}` ，或者下载 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "The solution is located in the `vertx-quickstart` {quickstarts-tree-url}/vertx-quickstart[directory]."
msgstr "该解决方案位于 `vertx-quickstart` {quickstarts-tree-url}/vertx-quickstart[目录]中。"

#. type: Block title
#: _versions/2.13/guides/vertx.adoc
#, no-wrap
msgid "Mutiny"
msgstr ""

#: _versions/2.13/guides/vertx.adoc
msgid ""
"This guide uses the Mutiny API.\n"
"If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive, reactive programming library]."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/vertx.adoc
#, no-wrap
msgid "Bootstrapping the application"
msgstr "引导启动该应用程序"

#: _versions/2.13/guides/vertx.adoc
msgid ""
"Click on https://code.quarkus.io/?a=quarkus-getting-started-vertx&nc=true&e=resteasy-reactive-jackson&e=vertx[this link] to configure your application.\n"
"It selected a few extensions:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "`resteasy-reactive-jackson`, which also brings `resteasy-reactive`. We are going to use it to expose our HTTP endpoints."
msgstr "`resteasy-reactive-jackson` ，它也带来了 `resteasy-reactive` 。我们将使用它来暴露出我们的HTTP端点。"

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "`vertx`, which provides access to the underlying managed Vert.x"
msgstr "`vertx` ，它提供了对底层管理的Vert.x的访问"

#: _versions/2.13/guides/vertx.adoc
msgid ""
"Click on the `Generate your application` button, download the zip file and unzip it.\n"
"Then, open the project in your favorite IDE."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "If you open the generated build file, you can see the selected extensions:"
msgstr "如果你打开生成的构建文件，你可以看到以下选定的扩展:"

#. type: Block title
#: _versions/2.13/guides/vertx.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/2.13/guides/vertx.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "While you are in your build file, add the following dependency:"
msgstr "在你的构建文件中，添加以下依赖项:"

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "This dependency provides the Vert.x Web Client, which we will be using to implement the `/web` endpoint."
msgstr "该依赖项提供了Vert.x Web客户端，我们将用它来实现 `/web` 端点。"

#. type: Title ==
#: _versions/2.13/guides/vertx.adoc
#, no-wrap
msgid "Accessing the managed Vert.x instance"
msgstr "访问被管理的Vert.x实例"

#: _versions/2.13/guides/vertx.adoc
msgid ""
"Create the `src/main/java/org/acme/VertxResource.java` file.\n"
"It will contain our HTTP endpoints."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "In this file, copy the following code:"
msgstr "在该文件中，拷贝以下代码:"

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "Declare the root HTTP path."
msgstr "声明HTTP根路径。"

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "We use constructor injection to receive the managed Vert.x instance. Field injection works too."
msgstr "我们使用构造函数注入的方式来接收被管理的Vert.x实例。当然 字段注入也被允许。"

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "Receives the Vert.x instance as a constructor parameter"
msgstr "接收Vert.x实例作为构造函数的参数"

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "Store the managed Vert.x instance into a field."
msgstr "将被管理的Vert.x实例存储到一个字段当中。"

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "With this, we can start implementing the endpoints."
msgstr "有了这些，我们就可以开始实现端点了。"

#. type: Title ==
#: _versions/2.13/guides/vertx.adoc
#, no-wrap
msgid "Using Vert.x Core API"
msgstr "使用Vert.x核心API"

#: _versions/2.13/guides/vertx.adoc
msgid ""
"The injected Vert.x instance provides a set of APIs you can use.\n"
"The one we are going to use in this section is the Vert.x File System.\n"
"It provides a non-blocking API to access files."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "In the `src/main/resource` directory, create a `lorem.txt` file with the following content:"
msgstr "在 `src/main/resource` 目录中，创建一个包含以下内容的 `lorem.txt` 文件:"

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "Then, in the `VertxResource` file add the following method:"
msgstr "接着，在 `VertxResource` 文件中添加以下方法:"

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "This endpoint handles HTTP `GET` request on path `/lorem` (so the full path will be `vertx/lorem`)"
msgstr "该端点处理路径 `/lorem` 上的 HTTP `GET` 请求（因此完整路径是 `vertx/lorem` ）"

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "As the Vert.x API is asynchronous, our method returns a `Uni`. The content is written into the HTTP response when the asynchronous operation represented by the Uni completes."
msgstr "由于Vert.x API是异步的，我们的方法返回一个 `Uni` 对象 。当Uni所代表的异步操作完成后，内容将会被写入HTTP响应中。"

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "We use the Vert.x file system API to read the created file"
msgstr "我们使用Vert.x文件系统API来读取创建的文件"

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "Once the file is read, the content is stored in an in-memory buffer.  We transform this buffer into a String."
msgstr "一旦文件被读取，其内容就被存储在一个内存缓冲区内。我们将这个缓冲区的内容转换为一个字符串。"

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "In a terminal, navigate to the root of the project and run:"
msgstr "在终端中，切换到项目根目录下 运行以下命令:"

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "In another terminal, run:"
msgstr "在另外一个终端中，运行:"

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "You should see the content of the file printed in the console."
msgstr "你应该会在控制台中看到打印的文件内容。"

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "Quarkus provides other ways to serve static files. This is an example made for the guide."
msgstr "Quarkus提供了其他方式来处理静态文件。这是专为该指南制作的一个例子。"

#. type: Title ==
#: _versions/2.13/guides/vertx.adoc
#, no-wrap
msgid "Using Vert.x stream capability"
msgstr "使用Vert.x流的功能"

#: _versions/2.13/guides/vertx.adoc
msgid ""
"Reading a file and storing the content in memory works for small files, but not big ones.\n"
"In this section, we will see how you can use Vert.x streaming capability."
msgstr ""

#: _versions/2.13/guides/vertx.adoc
msgid ""
"First, download https://www.gutenberg.org/files/2600/2600-0.txt[War and Peace] and store it in `src/main/resources/book.txt`.\n"
"It's a 3.2 Mb file, which, while not being huge, illustrates the purpose of streams.\n"
"This time, we will not accumulate the file's content in memory and write it in one batch, but read it chunk by chunk and write these chunks into the HTTP response one by one."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "So, you should have the following files in your project:"
msgstr "因此，你的项目中应该包含以下文件:"

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "Add the following imports to the `src/main/java/org/acme/VertxResource.java` file:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "Add the following method to the `VertxResource` class:"
msgstr "将以下方法添加到 `VertxResource` 类中:"

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "This time, we return a Multi as we want to stream the chunks"
msgstr "这一次，我们返回一个Multi类型的对象，因为我们想要流式地处理这些块"

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "We open the file using the `open` method. It returns a `Uni<AsyncFile>`"
msgstr "我们使用 `open` 方法打开该文件。它返回一个 `Uni<AsyncFile>` 类型的对象"

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "When the file is opened, we retrieve a `Multi` which will contain the chunks."
msgstr "当文件被打开时，我们获得到一个 `Multi` ，它包含了块的内容。"

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "For each chunk, we produce a String"
msgstr "对于每个块，我们生成一个字符串"

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "To visually see the chunks in the response, we append a separator"
msgstr "为了直观地看到响应中的分块，我们添加了一个分隔符"

#. type: Plain text
#: _versions/2.13/guides/vertx.adoc
msgid "Then, in a terminal, run:"
msgstr "接着，在终端中，运行以下命令:"

#: _versions/2.13/guides/vertx.adoc
msgid ""
"It should retrieve the book content.\n"
"In the output you should see the separator like:"
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/vertx.adoc
#, no-wrap
msgid "Using the event bus"
msgstr "使用事件总线"

#: _versions/2.13/guides/vertx.adoc
msgid ""
"One of the core features of Vert.x is the https://vertx.io/docs/vertx-core/java/#event_bus[event bus].\n"
"It provides a message-based backbone to your application.\n"
"So, you can have components interacting using asynchronous message passing, and so decouple your components.\n"
"You can send a message to a single consumer, or dispatch to multiple consumers, or implement a request-reply interaction, where you send a message (request) and expect a response.\n"
"This is what we are going to use in this section.\n"
"Our `VertxResource` will send a message containing a name to the `greetings` address.\n"
"Another component will receive the message and produce the \"hello $name\" response.\n"
"The `VertxResource` will receive the response and return it as the HTTP response."
msgstr ""

#. type: delimited block -
#: _versions/2.13/guides/vertx.adoc
msgid "So, first, add the following imports to the `src/main/java/org/acme/VertxResource.java` file:"
msgstr ""

#: _versions/2.13/guides/vertx.adoc
msgid "Next, let's extend our `VertxResource` class with the following code:"
msgstr ""

#: _versions/2.13/guides/vertx.adoc
msgid "Inject the event bus. Alternatively you can use `vertx.eventBus()`."
msgstr ""

#: _versions/2.13/guides/vertx.adoc
msgid "We receive a _name_ as a query parameter"
msgstr ""

#: _versions/2.13/guides/vertx.adoc
msgid "We use the `request` method to initiate the request-reply interaction. We send the name to the \"greetings\" address."
msgstr ""

#: _versions/2.13/guides/vertx.adoc
msgid "When the response is received, we extract the body and return it as the HTTP response"
msgstr ""

#: _versions/2.13/guides/vertx.adoc
msgid ""
"Now, we need the other side: the component receiving the name and replying.\n"
"Create the `src/main/java/org/acme/GreetingService.java` file with the following content:"
msgstr ""

#: _versions/2.13/guides/vertx.adoc
msgid "Declaring a CDI Bean in the Application scope. Quarkus will create a single instance of this class."
msgstr ""

#: _versions/2.13/guides/vertx.adoc
msgid "Use the `@ConsumeEvent` annotation to declare a consumer. It is possible to use the Vert.x API https://vertx.io/docs/vertx-core/java/#_acknowledging_messages_sending_replies[directly] too."
msgstr ""

#: _versions/2.13/guides/vertx.adoc
msgid "Receive the message payload as a method parameter. The returned object will be the reply."
msgstr ""

#: _versions/2.13/guides/vertx.adoc
msgid "Return the response. This response is sent back to the `VertxResource` class"
msgstr ""

#: _versions/2.13/guides/vertx.adoc
msgid ""
"Let's try this.\n"
"In a terminal, run:"
msgstr ""

#: _versions/2.13/guides/vertx.adoc
msgid "You should get the expected `Hello bob` message back."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/vertx.adoc
#, no-wrap
msgid "Using Vert.x Clients"
msgstr "使用Vert.x客户端"

#: _versions/2.13/guides/vertx.adoc
msgid ""
"So far, we have used the Vert.x Core API.\n"
"Vert.x offers much more.\n"
"It provides a vast ecosystem.\n"
"In this section, we will see how you can use the Vert.x Web Client, a reactive HTTP client."
msgstr ""

#: _versions/2.13/guides/vertx.adoc
msgid ""
"Note that some Quarkus extensions are wrapping Vert.x clients and manage them for you.\n"
"That's the case for the reactive data sources, Redis, mail...\n"
"That's not the case with the Web Client."
msgstr ""

#: _versions/2.13/guides/vertx.adoc
msgid ""
"Remember, at the beginning of the guide,  we added the `smallrye-mutiny-vertx-web-client` dependency to our `pom.xml` file.\n"
"It's now time to use it."
msgstr ""

#. type: delimited block -
#: _versions/2.13/guides/vertx.adoc
msgid "First, add the following imports to the `src/main/java/org/acme/VertxResource.java` file:"
msgstr ""

#: _versions/2.13/guides/vertx.adoc
msgid ""
"Next, we need to create an instance of `WebClient`.\n"
"Extend the `VertxResource` class with the `client` field and the creation of the web client in the constructor:"
msgstr ""

#: _versions/2.13/guides/vertx.adoc
msgid "Store the `WebClient`, so we will be able to use it in our HTTP endpoint"
msgstr ""

#: _versions/2.13/guides/vertx.adoc
msgid "Create the `WebClient`. Be sure to use the `io.vertx.mutiny.ext.web.client.WebClient` class"
msgstr ""

#: _versions/2.13/guides/vertx.adoc
msgid ""
"Let's now implement a new HTTP endpoint that queries the Wikipedia API to retrieve the pages about Quarkus in the different languages.\n"
"Add the following method to the `VertxResource` class:"
msgstr ""

#: _versions/2.13/guides/vertx.adoc
msgid "This endpoint returns a JSON Array. Vert.x provides a convenient way to manipulate JSON Object and Array. More details about these in xref:vertx-reference.adoc#using-vert-x-json[the reference guide]."
msgstr ""

#: _versions/2.13/guides/vertx.adoc
msgid "Send a `GET` request to the Wikipedia API"
msgstr ""

#: _versions/2.13/guides/vertx.adoc
msgid "Once the response is received, extract it as a JSON Object"
msgstr ""

#: _versions/2.13/guides/vertx.adoc
msgid "Extract the `langlinks` array from the response."
msgstr ""

#: _versions/2.13/guides/vertx.adoc
msgid "Then, invoke the endpoint using:"
msgstr ""

#: _versions/2.13/guides/vertx.adoc
msgid "The response indicates that, in addition to the English page, there are a German and a French page about Quarkus on wikipedia."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/vertx.adoc
#, no-wrap
msgid "Going further"
msgstr "进一步探索"

#: _versions/2.13/guides/vertx.adoc
msgid ""
"This guide introduced how you can use Vert.x APIs from a Quarkus application.\n"
"It's just a brief overview.\n"
"If you want to know more, check the xref:vertx-reference.adoc[reference guide about Vert.x in Quarkus]."
msgstr ""

#: _versions/2.13/guides/vertx.adoc
msgid ""
"As we have seen, the event bus is the connecting tissue of Vert.x applications.\n"
"Quarkus integrates it so different beans can interact with asynchronous messages.\n"
"This part is covered in the xref:reactive-event-bus.adoc[event bus documentation]."
msgstr ""

#. type: delimited block -
#: _versions/2.13/guides/vertx.adoc
msgid "Learn how to implement highly performant, low-overhead database applications on Quarkus with the xref:reactive-sql-clients.adoc[Reactive SQL Clients]."
msgstr "了解如何使用 xref:reactive-sql-clients.adoc[响应式SQL客户端] 在 Quarkus 上实现高性能、低开销的数据库应用程序。"
