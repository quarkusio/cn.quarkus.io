# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-11-22 13:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Using OpenID Connect (OIDC) Multi-Tenancy"
msgstr "使用OpenID Connect（OIDC）多租户"

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "This guide demonstrates how your OpenID Connect (OIDC) application can support multi-tenancy so that you can serve multiple tenants from a single application. Tenants can be distinct realms or security domains within the same OpenID Provider or even distinct OpenID Providers."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "When serving multiple customers from the same application (e.g.: SaaS), each customer is a tenant. By enabling multi-tenancy support to your applications you are allowed to also support distinct authentication policies for each tenant even though if that means authenticating against different OpenID Providers, such as Keycloak and Google."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "Please read the xref:security-openid-connect.adoc[Using OpenID Connect to Protect Service Applications] guide if you need to authorize a tenant using Bearer Token Authorization."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "Please read the xref:security-openid-connect-web-authentication.adoc[Using OpenID Connect to Protect Web Applications] guide if you need to authenticate and authorize a tenant using OpenID Connect Authorization Code Flow."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Architecture"
msgstr "架构"

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "In this example, we build a very simple application which offers a single land page:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "`/{tenant}`"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "The land page is served by a JAX-RS Resource and shows information obtained from the OpenID Provider about the authenticated user and the current tenant."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库： `git clone {quickstarts-clone-url}` ，或者下载 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "The solution is located in the `security-openid-connect-multi-tenancy-quickstart` {quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart[directory]."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Creating the Maven Project"
msgstr "创建Maven项目"

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `oidc` extension\n"
"to your project by running the following command in your project base directory:"
msgstr "如果你已经配置了你的Quarkus项目，你可以通过在你的项目基础目录下运行以下命令，将 `oidc` 扩展加入到你的项目中去："

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "This will add the following to your build file:"
msgstr "这会将以下内容添加到你的构建文件中:"

#. type: Block title
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Writing the application"
msgstr "编写应用程序"

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "Let's start by implementing the `/{tenant}` endpoint. As you can see from the source code below it is just a regular JAX-RS resource:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "In order to resolve the tenant from incoming requests and map it to a specific `quarkus-oidc` tenant configuration in application.properties, you need to create an implementation for the `io.quarkus.oidc.TenantResolver` interface."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "From the implementation above, tenants are resolved from the request path so that in case no tenant could be inferred, `null` is returned to indicate that the default tenant configuration should be used."
msgstr ""

#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid ""
"When a current tenant represents an OIDC `web-app` application, the current `io.vertx.ext.web.RoutingContext` will contain a `tenant-id` attribute by the time the custom tenant resolver has been called for all the requests completing the code authentication flow and the already authenticated requests, when either a tenant specific state or session cookie already exists.\n"
"Therefore, when working with multiple OpenID Connect Providers, you only need a path specific check to resolve a tenant id if the `RoutingContext` does not have the `tenant-id` attribute set, for example:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "If you also use xref:hibernate-orm.adoc#multitenancy[Hibernate ORM multitenancy] and both OIDC and Hibernate ORM tenant IDs are the same and must be extracted from the Vert.x `RoutingContext` then you can pass the tenant id from the OIDC Tenant Resolver to the Hibernate ORM Tenant Resolver as a `RoutingContext` attribute, for example:"
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Configuring the application"
msgstr "配置该应用程序"

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "The first configuration is the default tenant configuration that should be used when the tenant can not be inferred from the request. This configuration is using a Keycloak instance to authenticate users."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "The second configuration is the configuration that will be used when an incoming request is mapped to the tenant `tenant-a`."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "Note that both configurations map to the same Keycloak server instance while using distinct `realms`."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "You can define multiple tenants in your configuration file, just make sure they have a unique alias so that you can map them properly when resolving a tenant from your `TenantResolver` implementation."
msgstr ""

#. type: Title ===
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Google OpenID Provider Configuration"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "In order to set up the `tenant-a` configuration to use Google OpenID Provider, you need to create a project as described https://developers.google.com/identity/protocols/OpenIDConnect[here]."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "Once you create the project and have your project's `client_id` and `client_secret`, you can try to configure a tenant as follows:"
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Starting and Configuring the Keycloak Server"
msgstr "启动和配置Keycloak服务器"

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr "要启动Keycloak服务器，您可以使用Docker服务，且只需运行以下命令："

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "where `keycloak.version` should be set to `17.0.0` or higher."
msgstr "其中 `keycloak.version` 应该设置为 `17.0.0` 或更高。"

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "You should be able to access your Keycloak Server at http://localhost:8180[localhost:8180]."
msgstr "你应该能够通过 http://localhost:8180[localhost:8180] 访问你的Keycloak服务器。"

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "Log in as the `admin` user to access the Keycloak Administration Console. Username should be `admin` and password `admin`."
msgstr "以 `admin` 用户身份登录，访问Keycloak管理控制台。用户名应该是 `admin` ，密码是 `admin` 。"

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "Now, follow the steps below to import the realms for the two tenants:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "Import the {quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/default-tenant-realm.json[default-tenant-realm.json] to create the default realm"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "Import the {quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/tenant-a-realm.json[tenant-a-realm.json] to create the realm for the tenant `tenant-a`."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Running and Using the Application"
msgstr ""

#. type: Title ===
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Running in Developer Mode"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "To run the microservice in dev mode, use:"
msgstr ""

#. type: Title ===
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Running in JVM Mode"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "When you're done playing with dev mode, you can run it as a standard Java application."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "First compile it:"
msgstr "首先编译它："

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "Then run it:"
msgstr "然后运行："

#. type: Title ===
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Running in Native Mode"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "This same demo can be compiled into native code: no modifications required."
msgstr "这个同样的演示可以被编译成本地代码：不需要任何修改。"

#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid ""
"This implies that you no longer need to install a JVM on your\n"
"production environment, as the runtime technology is included in\n"
"the produced binary, and optimized to run with minimal resource overhead."
msgstr "这意味着您不再需要在您的生产环境中安装JVM，因为运行时技术包含在生产的二进制文件中，并以最小的资源开销优化运行。"

#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid ""
"Compilation will take a bit longer, so this step is disabled by default;\n"
"let's build again by enabling the native build:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr "一杯咖啡的时间后，您就可以直接运行该二进制文件了："

#. type: Title ==
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Testing the Application"
msgstr "测试应用程序"

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "To test the application, you should open your browser and access the following URL:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "http://localhost:8080/default[http://localhost:8080/default]"
msgstr ""

#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid ""
"If everything is working as expected, you should be redirected to the Keycloak server to authenticate. Note that the requested path\n"
"defines a `default` tenant which we don't have mapped in the configuration file. In this case, the default configuration will be used."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "In order to authenticate to the application you should type the following credentials when at the Keycloak login page:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "Username: *alice*"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "Password: *alice*"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "After clicking the `Login` button you should be redirected back to the application."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "If you try now to access the application at the following URL:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "http://localhost:8080/tenant-a[http://localhost:8080/tenant-a]"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "You should be redirected again to the login page at Keycloak. However, now you are going to authenticate using a different `realm`."
msgstr ""

#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid ""
"In both cases, if the user is successfully authenticated, the landing page will show the user's name and e-mail. Even though\n"
"user `alice` exists in both tenants, for the application they are distinct users belonging to different realms/tenants."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Resolving Tenant Identifiers with Annotations"
msgstr ""

#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid ""
"You can use the annotations and CDI interceptors for resolving the tenant identifiers as an alternative to using\n"
"`quarkus.oidc.TenantResolver`. This can be done by setting the value for the key `OidcUtils.TENANT_ID_ATTRIBUTE` on\n"
"the current `RoutingContext`."
msgstr ""

#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid ""
"Assuming your application supports two OIDC tenants (`hr`, and default) first you need to define one\n"
"annotation per tenant ID other than default:"
msgstr ""

#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid ""
"Proactive HTTP authentication needs to be disabled (`quarkus.http.auth.proactive=false`) for this to work. See\n"
"xref:security-built-in-authentication.adoc#proactive-authentication[Proactive Authentication] section for further details."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "Next, you'll need one interceptor for each of those annotations:"
msgstr ""

#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid ""
"Now all methods and classes carrying `@HrTenant` will be authenticated using the OIDC provider configured by\n"
"`quarkus.oidc.hr.auth-server-url`, while all other classes and methods will still be authenticated using the default\n"
"OIDC provider."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Programmatically Resolving Tenants Configuration"
msgstr ""

#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid ""
"If you need a more dynamic configuration for the different tenants you want to support and don't want to end up with multiple\n"
"entries in your configuration file, you can use the `io.quarkus.oidc.TenantConfigResolver`."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "This interface allows you to dynamically create tenant configurations at runtime:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "The `OidcTenantConfig` returned from this method is the same used to parse the `oidc` namespace configuration from the `application.properties`. You can populate it using any of the settings supported by the `quarkus-oidc` extension."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Tenant Resolution for OIDC 'web-app' applications"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "Several options are available for selecting the tenant configuration which should be used to secure the current HTTP request for both `service` and `web-app` OIDC applications, such as:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "Check URL paths, for example, a `tenant-service` configuration has to be used for the \"/service\" paths, while a `tenant-manage` configuration - for the \"/management\" paths"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "Check HTTP headers, for example, with a URL path always being '/service', a header such as \"Realm: service\" or \"Realm: management\" can help to select between the `tenant-service` and `tenant-manage` configurations"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "Check URL query parameters - it can work similarly to the way the headers are used to select the tenant configuration"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "All these options can be easily implemented with the custom `TenantResolver` and `TenantConfigResolver` implementations for the OIDC `service` applications."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "However, due to an HTTP redirect required to complete the code authentication flow for the OIDC `web-app` applications, a custom HTTP cookie may be needed to select the same tenant configuration before and after this redirect request because:"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "URL path may not be the same after the redirect request if a single redirect URL has been registered in the OIDC Provider - the original request path can be restored but after the tenant configuration is resolved"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "HTTP headers used during the original request are not available after the redirect"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "Custom URL query parameters are restored after the redirect but after the tenant configuration is resolved"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "One option to ensure the information for resolving the tenant configurations for `web-app` applications is available before and after the redirect is to use a cookie, for example:"
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Disabling Tenant Configurations"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "Custom `TenantResolver` and `TenantConfigResolver` implementations may return `null` if no tenant can be inferred from the current request and a fallback to the default tenant configuration is required."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "If it is expected that the custom resolvers will always infer a tenant then the default tenant configuration is not needed. One can disable it with the `quarkus.oidc.tenant-enabled=false` setting."
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "Note that tenant specific configurations can also be disabled, for example: `quarkus.oidc.tenant-a.tenant-enabled=false`."
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Configuration Reference"
msgstr "配置参考"

#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""

#. type: Title ==
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "References"
msgstr "参考文献"

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "https://developers.google.com/identity/protocols/OpenIDConnect[Google OpenID Connect]"
msgstr ""

#. type: Plain text
#: _versions/2.13/guides/security-openid-connect-multitenancy.adoc
msgid "xref:security.adoc[Quarkus Security]"
msgstr ""
