# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-01-20 14:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.0/guides/flyway.adoc:6
#, no-wrap
msgid "Using Flyway"
msgstr "使用Flyway"

#. type: Plain text
#: upstream/_versions/3.0/guides/flyway.adoc:14
msgid "https://flywaydb.org/[Flyway] is a popular database migration tool that is commonly used in JVM environments."
msgstr "link:https://flywaydb.org/[Flyway] 是一个流行的数据库迁移工具，通常用于JVM环境。"

#. type: Plain text
#: upstream/_versions/3.0/guides/flyway.adoc:16
msgid "Quarkus provides first class support for using Flyway as will be explained in this guide."
msgstr "本指南将会介绍Quarkus为使用Flyway提供了哪些一流的支持。"

#. type: Title ==
#: upstream/_versions/3.0/guides/flyway.adoc:17
#, no-wrap
msgid "Setting up support for Flyway"
msgstr "建立对Flyway的支持"

#. type: Plain text
#: upstream/_versions/3.0/guides/flyway.adoc:20
msgid "As shown in the <<developing-with-flyway>> section, to start using Flyway with your project, you just need to:"
msgstr "参照 <<用flyway开发>> ，要开始在项目中使用Flyway，只需要："

#. type: Plain text
#: upstream/_versions/3.0/guides/flyway.adoc:22
msgid "add your migrations to the `{migrations-path}` folder as you usually do with Flyway"
msgstr "像通常使用Flyway那样，将你的迁移文件添加到 `{migrations-path}` 文件夹中。"

#. type: Plain text
#: upstream/_versions/3.0/guides/flyway.adoc:24
msgid "activate the `migrate-at-start` option to migrate the schema automatically or inject the `Flyway` object and run your migration as you normally do"
msgstr "激活 `migrate-at-start` 选项来自动迁移表，或者添加 `Flyway` 对象，然后像通常那样运行迁移。"

#. type: Plain text
#: upstream/_versions/3.0/guides/flyway.adoc:26
msgid "In your build file, add the following dependencies:"
msgstr "在build文件中添加以下依赖项。"

#. type: Plain text
#: upstream/_versions/3.0/guides/flyway.adoc:28
msgid "the Flyway extension"
msgstr "Flyway扩展"

#. type: Plain text
#: upstream/_versions/3.0/guides/flyway.adoc:29
msgid "your JDBC driver extension (`quarkus-jdbc-postgresql`, `quarkus-jdbc-h2`, `quarkus-jdbc-mariadb`, ...)"
msgstr "JDBC驱动扩展 ( `quarkus-jdbc-postgresql` , `quarkus-jdbc-h2` , `quarkus-jdbc-mariadb` , ...)"

#. type: Plain text
#: upstream/_versions/3.0/guides/flyway.adoc:30
msgid "the MariaDB/MySQL support is now in a separate dependency, MariaDB/MySQL users need to add the `flyway-mysql` dependency from now on."
msgstr "MariaDB/MySQL的支持现在在一个单独的依赖中，MariaDB/MySQL的用户从现在开始需要添加 `flyway-mysql` 的依赖。"

#. type: Plain text
#: upstream/_versions/3.0/guides/flyway.adoc:31
msgid "the Microsoft SQL Server support is now in a separate dependency, Microsoft SQL Server users need to add the `flyway-sqlserver` dependency from now on."
msgstr "Microsoft SQL Server的支持现在在一个单独的依赖中，Microsoft SQL Server的用户从现在开始需要添加 `flyway-sqlserver` 的依赖。"

#. type: Block title
#: upstream/_versions/3.0/guides/flyway.adoc:33
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/3.0/guides/flyway.adoc:40
#, no-wrap
msgid ""
"<!-- Flyway specific dependencies -->\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-flyway</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/flyway.adoc:46
#, no-wrap
msgid ""
"<!-- Flyway SQL Server specific dependencies -->\n"
"<dependency>\n"
"    <groupId>org.flywaydb</groupId>\n"
"    <artifactId>flyway-sqlserver</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/flyway.adoc:52
#, no-wrap
msgid ""
"<!-- Flyway MariaDB/MySQL specific dependencies -->\n"
"<dependency>\n"
"    <groupId>org.flywaydb</groupId>\n"
"    <artifactId>flyway-mysql</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/flyway.adoc:58
#, no-wrap
msgid ""
"<!-- JDBC driver dependencies -->\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-jdbc-postgresql</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/flyway.adoc:61
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/3.0/guides/flyway.adoc:71
#, no-wrap
msgid ""
"// Flyway specific dependencies\n"
"implementation(\"io.quarkus:quarkus-flyway\")\n"
"// Flyway SQL Server specific dependencies\n"
"implementation(\"org.flywaydb:flyway-sqlserver\")\n"
"// Flyway MariaDB/MySQL specific dependencies\n"
"implementation(\"org.flywaydb:flyway-mysql\")\n"
"// JDBC driver dependencies\n"
"implementation(\"io.quarkus:quarkus-jdbc-postgresql\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/flyway.adoc:78
msgid "Flyway support relies on the Quarkus datasource config.  It can be customized for the default datasource as well as for every <<multiple-datasources,named datasource>>.  First, you need to add the datasource config to the `{config-file}` file in order to allow Flyway to manage the schema.  Also, you can customize the Flyway behaviour by using the following properties:"
msgstr "Flyway支持依赖于Quarkus的数据源配置。它可以为默认的数据源以及每个 link:#multiple-datasources[命名的数据源] 进行定制。首先，你需要将数据源配置添加到 `{config-file}` 文件中，以便让Flyway管理数据库模型。另外，你可以根据以下属性来设置Flyway。"

#. type: Title ==
#: upstream/_versions/3.0/guides/flyway.adoc:81
#, no-wrap
msgid "Developing with Flyway"
msgstr "用Flyway开发"

#. type: Plain text
#: upstream/_versions/3.0/guides/flyway.adoc:84
msgid "The following is an example for the `{config-file}` file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/flyway.adoc:92
#, no-wrap
msgid ""
"# configure your datasource\n"
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.datasource.username=sarah\n"
"quarkus.datasource.password=connor\n"
"quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/mydatabase\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/flyway.adoc:95
#, no-wrap
msgid ""
"# Run Flyway migrations automatically\n"
"quarkus.flyway.migrate-at-start=true\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/flyway.adoc:106
#, no-wrap
msgid ""
"# More Flyway configuration options\n"
"# quarkus.flyway.baseline-on-migrate=true\n"
"# quarkus.flyway.baseline-version=1.0.0\n"
"# quarkus.flyway.baseline-description=Initial version\n"
"# quarkus.flyway.connect-retries=10\n"
"# quarkus.flyway.schemas=TEST_SCHEMA\n"
"# quarkus.flyway.table=flyway_quarkus_history\n"
"# quarkus.flyway.locations=db/location1,db/location2\n"
"# quarkus.flyway.sql-migration-prefix=X\n"
"# quarkus.flyway.repeatable-sql-migration-prefix=K\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/flyway.adoc:109
msgid "Add a SQL migration to the default folder following the Flyway naming conventions: `{migrations-path}/V1.0.0__Quarkus.sql`"
msgstr "按照Flyway的命名惯例，在默认文件夹中添加SQL迁移： `{migrations-path}/V1.0.0__Quarkus.sql` "

#. type: delimited block -
#: upstream/_versions/3.0/guides/flyway.adoc:119
#, no-wrap
msgid ""
"CREATE TABLE quarkus\n"
"(\n"
"  id   INT,\n"
"  name VARCHAR(20)\n"
");\n"
"INSERT INTO quarkus(id, name)\n"
"VALUES (1, 'QUARKED');\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/flyway.adoc:123
msgid "Now you can start your application and Quarkus will run the Flyway's migrate method according to your config."
msgstr "现在可以启动你的应用程序，Quarkus会根据你的配置来运行Flyway的迁移方法。"

#. type: Plain text
#: upstream/_versions/3.0/guides/flyway.adoc:127
msgid "With `quarkus.flyway.migrate-at-start=true`, as in the example above, Quarkus will execute the Flyway migration as part of the xref:lifecycle.adoc[application startup]."
msgstr "如上例所述，通过设置 `quarkus.flyway.migrate-at-start=true` Quarkus将在 xref:lifecycle.adoc[应用启动] 的时候通过Flyway进行迁移。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/flyway.adoc:135
#: upstream/_versions/3.0/guides/flyway.adoc:212
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MigrationService {\n"
"    // You can Inject the object if you want to use it manually\n"
"    @Inject\n"
"    Flyway flyway; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/flyway.adoc:141
#, no-wrap
msgid ""
"    public void checkMigration() {\n"
"        // This will print 1.0.0\n"
"        System.out.println(flyway.info().current().getVersion().toString());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/flyway.adoc:143
#: upstream/_versions/3.0/guides/flyway.adoc:232
msgid "Inject the Flyway object if you want to use it directly"
msgstr "如果你想直接使用Flyway对象，请注入该对象"

#. type: Plain text
#: upstream/_versions/3.0/guides/flyway.adoc:149
msgid "In dev mode Quarkus will automatically restart the application if any of the existing migration scripts get modified. If you want to take advantage of this while developing and testing new migration scripts, you will want to set `%dev.quarkus.flyway.clean-at-start=true`, so that Flyway actually runs the modified migration."
msgstr "如果任何当前迁移脚本被修改，Quarkus在开发模式下会自动重启应用。如果你想在开发测试新的迁移脚本的时候充分利用这个特性，你需要设置  `%dev.quarkus.flyway.clean-at-start=true` ，这样Flyway会运行被修改的迁移脚本。"

#. type: Title ===
#: upstream/_versions/3.0/guides/flyway.adoc:150
#, no-wrap
msgid "Repairing the Flyway schema history table"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/flyway.adoc:155
msgid "There are different scenarios which may require _repairing_ the Flyway schema history table.  One such scenario is when a migration fails in a database which doesn't support transactional DDL statements."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/flyway.adoc:157
msgid "In such situations the link:https://flywaydb.org/documentation/command/repair[Flyway repair command] comes in handy. In Quarkus this can either be executed automatically before the migration by setting `quarkus.flyway.repair-at-start=true` or manually by injecting the `Flyway` object and calling `Flyway#repair()`."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/flyway.adoc:158
#, no-wrap
msgid "Multiple datasources"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/flyway.adoc:162
msgid "Flyway can be configured for multiple datasources.  The Flyway properties are prefixed exactly the same way as the named datasources, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/flyway.adoc:169
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=h2\n"
"quarkus.datasource.username=username-default\n"
"quarkus.datasource.jdbc.url=jdbc:h2:tcp://localhost/mem:default\n"
"quarkus.datasource.jdbc.max-size=13\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/flyway.adoc:174
#, no-wrap
msgid ""
"quarkus.datasource.users.db-kind=h2\n"
"quarkus.datasource.users.username=username1\n"
"quarkus.datasource.users.jdbc.url=jdbc:h2:tcp://localhost/mem:users\n"
"quarkus.datasource.users.jdbc.max-size=11\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/flyway.adoc:179
#, no-wrap
msgid ""
"quarkus.datasource.inventory.db-kind=h2\n"
"quarkus.datasource.inventory.username=username2\n"
"quarkus.datasource.inventory.jdbc.url=jdbc:h2:tcp://localhost/mem:inventory\n"
"quarkus.datasource.inventory.jdbc.max-size=12\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/flyway.adoc:184
#, no-wrap
msgid ""
"# Flyway configuration for the default datasource\n"
"quarkus.flyway.schemas=DEFAULT_TEST_SCHEMA\n"
"quarkus.flyway.locations=db/default/location1,db/default/location2\n"
"quarkus.flyway.migrate-at-start=true\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/flyway.adoc:189
#, no-wrap
msgid ""
"# Flyway configuration for the \"users\" datasource\n"
"quarkus.flyway.users.schemas=USERS_TEST_SCHEMA\n"
"quarkus.flyway.users.locations=db/users/location1,db/users/location2\n"
"quarkus.flyway.users.migrate-at-start=true\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/flyway.adoc:194
#, no-wrap
msgid ""
"# Flyway configuration for the \"inventory\" datasource\n"
"quarkus.flyway.inventory.schemas=INVENTORY_TEST_SCHEMA\n"
"quarkus.flyway.inventory.locations=db/inventory/location1,db/inventory/location2\n"
"quarkus.flyway.inventory.migrate-at-start=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/flyway.adoc:198
msgid "Notice there's an extra bit in the key.  The syntax is as follows: `quarkus.flyway.[optional name.][datasource property]`."
msgstr "请注意，键中有一个额外的位。语法如下： `quarkus.flyway.[optional name.][datasource property]` ."

#. type: Plain text
#: upstream/_versions/3.0/guides/flyway.adoc:200
msgid "Without configuration, Flyway is set up for every datasource using the default settings."
msgstr "在没有配置的情况下，Flyway对每个数据源都是使用默认设置。"

#. type: Title ==
#: upstream/_versions/3.0/guides/flyway.adoc:201
#, no-wrap
msgid "Using the Flyway object"
msgstr "使用Flyway对象"

#. type: Plain text
#: upstream/_versions/3.0/guides/flyway.adoc:204
msgid "In case you are interested in using the `Flyway` object directly, you can inject it as follows:"
msgstr "如果你有兴趣直接使用 `Flyway` 对象，可以按以下方式注入。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/flyway.adoc:216
#, no-wrap
msgid ""
"    @Inject\n"
"    @FlywayDataSource(\"inventory\") <2>\n"
"    Flyway flywayForInventory;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/flyway.adoc:220
#, no-wrap
msgid ""
"    @Inject\n"
"    @Named(\"flyway_users\") <3>\n"
"    Flyway flywayForUsers;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/flyway.adoc:229
#, no-wrap
msgid ""
"    public void checkMigration() {\n"
"        // Use the flyway instance manually\n"
"        flyway.clean(); <4>\n"
"        flyway.migrate();\n"
"        // This will print 1.0.0\n"
"        System.out.println(flyway.info().current().getVersion().toString());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/flyway.adoc:233
msgid "Inject Flyway for named datasources using the Quarkus `FlywayDataSource` qualifier"
msgstr "使用Quarkus `FlywayDataSource` 限定符为指定的数据源注入Flyway。"

#. type: Plain text
#: upstream/_versions/3.0/guides/flyway.adoc:234
msgid "Inject Flyway for named datasources"
msgstr "为命名的数据源注入Flyway"

#. type: Plain text
#: upstream/_versions/3.0/guides/flyway.adoc:235
msgid "Use the Flyway instance directly"
msgstr "直接使用Flyway实例"

#. type: Title ==
#: upstream/_versions/3.0/guides/flyway.adoc:236
#, no-wrap
msgid "Flyway and Hibernate ORM"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/flyway.adoc:239
msgid "When using Flyway together with Hibernate ORM, you can use the Dev UI to generate the initial schema creation script."
msgstr "当Flyway与Hibernate ORM一起使用时，你可以使用Dev UI来生成初始表创建脚本。"

#. type: Plain text
#: upstream/_versions/3.0/guides/flyway.adoc:241
msgid "You can find more information about this feature in the xref:hibernate-orm.adoc#flyway[Hibernate ORM guide]."
msgstr "你可以在xref:hibernate-orm.adoc#flyway[Hibernate ORM guide]找到更多相关信息。"

#. type: Title ==
#: upstream/_versions/3.0/guides/flyway.adoc:242
#, no-wrap
msgid "Flyway on Kubernetes"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/flyway.adoc:248
msgid "Sometimes, it's helpful not to execute Flyway initialization on each application startup. One such example is when deploying on Kubernetes, where it doesn't make sense to execute Flyway on every single replica. Instead it's desirable to execute it once and then start the actual application without Flyway. To support this use case, when generating manifests for Kubernetes the generated manifests contain a Kubernetes initialization `Job` for Flyway.  The `Job` performs initialization and the actual `Pod`, will starts once the `Job` is successfully completed."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/flyway.adoc:250
msgid "The feature is enabled by default and can be globally disabled, using:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/flyway.adoc:254
#, no-wrap
msgid "quarkus.kubernetes.externalize-init=false\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/flyway.adoc:257
msgid "or on OpenShift:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/flyway.adoc:261
#, no-wrap
msgid "quarkus.openshift.externalize-init=false\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/flyway.adoc:263
#, no-wrap
msgid "**Note**: In this context globally means `for all extensions that support init task externalization`.\n"
msgstr ""
