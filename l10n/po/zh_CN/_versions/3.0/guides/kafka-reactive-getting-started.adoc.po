# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-01-20 14:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:6
#, no-wrap
msgid "Getting Started to SmallRye Reactive Messaging with Apache Kafka"
msgstr "开始使用Apache Kafka的SmallRye响应式消息传递。"

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:12
msgid "This guide demonstrates how your Quarkus application can utilize SmallRye Reactive Messaging to interact with Apache Kafka."
msgstr "本指南演示了您的Quarkus应用程序如何利用SmallRye响应式消息传递与Apache Kafka进行交互。"

#. type: Title ==
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:13
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:18
#, no-wrap
msgid "Architecture"
msgstr "架构"

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:23
msgid "In this guide, we are going to develop two applications communicating with Kafka.  The first application sends a _quote request_ to Kafka and consumes Kafka messages from the _quote_ topic.  The second application receives the _quote request_ and sends a _quote_ back."
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:24
#, no-wrap
msgid "Architecture,"
msgstr "应用结构，"

#. type: Target for macro image
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:24
#, no-wrap
msgid "kafka-qs-architecture.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:29
msgid "The first application, the _producer_, will let the user request some quotes over an HTTP endpoint.  For each quote request a random identifier is generated and returned to the user, to mark the quote request as _pending_.  At the same time, the generated request id is sent over a Kafka topic `quote-requests`."
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:30
#, no-wrap
msgid "Producer"
msgstr "生产者"

#. type: Target for macro image
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:30
#, no-wrap
msgid "kafka-qs-app-screenshot.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:33
msgid "The second application, the _processor_, will read from the `quote-requests` topic, put a random price to the quote, and send it to a Kafka topic named `quotes`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:36
msgid "Lastly, the _producer_ will read the quotes and send them to the browser using server-sent events.  The user will therefore see the quote price updated from _pending_ to the received price in real-time."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:37
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:41
msgid "We recommend that you follow the instructions in the next sections and create applications step by step.  However, you can go right to the completed example."
msgstr "我们建议你按照下面章节中的说明，一步一步地创建应用程序。但是，你可以直接转到已完成的示例。"

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:43
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或者下载一个 {quickstarts-archive-url}[存档]。"

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:45
msgid "The solution is located in the `kafka-quickstart` {quickstarts-tree-url}/kafka-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:46
#, no-wrap
msgid "Creating the Maven Project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:49
msgid "First, we need to create two projects: the _producer_ and the _processor_."
msgstr "首先，我们需要创建两个项目： _producer_ 和 _processor_ 。"

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:51
msgid "To create the _producer_ project, in a terminal run:"
msgstr "要创建 _producer_ 项目，请在终端中运行："

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:58
msgid "This command creates the project structure and selects two Quarkus extensions we will be using:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:60
msgid "RESTEasy Reactive and its Jackson support (to handle JSON) to serve the HTTP endpoint."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:61
msgid "The Kafka connector for Reactive Messaging"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:63
msgid "To create the _processor_ project, from the same directory, run:"
msgstr "要创建 _processor_ 项目，请在同一目录下运行："

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:70
msgid "At that point, you should have the following structure:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:96
#, no-wrap
msgid ""
".\n"
"├── kafka-quickstart-processor\n"
"│  ├── README.md\n"
"│  ├── mvnw\n"
"│  ├── mvnw.cmd\n"
"│  ├── pom.xml\n"
"│  └── src\n"
"│     └── main\n"
"│        ├── docker\n"
"│        ├── java\n"
"│        └── resources\n"
"│           └── application.properties\n"
"└── kafka-quickstart-producer\n"
"   ├── README.md\n"
"   ├── mvnw\n"
"   ├── mvnw.cmd\n"
"   ├── pom.xml\n"
"   └── src\n"
"      └── main\n"
"         ├── docker\n"
"         ├── java\n"
"         └── resources\n"
"            └── application.properties\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:99
msgid "Open the two projects in your favorite IDE."
msgstr "在你喜欢的IDE中打开这两个项目。"

#. type: Block title
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:101
#, no-wrap
msgid "Dev Services"
msgstr "开发服务"

#. type: delimited block =
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:106
msgid "No need to start a Kafka broker when using the dev mode or for tests.  Quarkus starts a broker for you automatically.  See xref:kafka-dev-services.adoc[Dev Services for Kafka] for details."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:108
#, no-wrap
msgid "The Quote object"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:113
msgid "The `Quote` class will be used in both _producer_ and _processor_ projects.  For the sake of simplicity, we will duplicate the class.  In both projects, create the `src/main/java/org/acme/kafka/model/Quote.java` file, with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:117
#, no-wrap
msgid "package org.acme.kafka.model;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:119
#, no-wrap
msgid "public class Quote {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:122
#, no-wrap
msgid ""
"    public String id;\n"
"    public int price;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:127
#, no-wrap
msgid ""
"    /**\n"
"    * Default constructor required for Jackson serializer\n"
"    */\n"
"    public Quote() { }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:132
#, no-wrap
msgid ""
"    public Quote(String id, int price) {\n"
"        this.id = id;\n"
"        this.price = price;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:141
#, no-wrap
msgid ""
"    @Override\n"
"    public String toString() {\n"
"        return \"Quote{\" +\n"
"                \"id='\" + id + '\\'' +\n"
"                \", price=\" + price +\n"
"                '}';\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:145
msgid "JSON representation of `Quote` objects will be used in messages sent to the Kafka topic and also in the server-sent events sent to web browsers."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:148
msgid "Quarkus has built-in capabilities to deal with JSON Kafka messages.  In a following section, we will create serializer/deserializer classes for Jackson."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:149
#, no-wrap
msgid "Sending quote request"
msgstr "发送报价请求"

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:152
msgid "Inside the _producer_ project, create the `src/main/java/org/acme/kafka/producer/QuotesResource.java` file and add the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:156
#, no-wrap
msgid "package org.acme.kafka.producer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:158
#, no-wrap
msgid "import java.util.UUID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:164
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.POST;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:168
#, no-wrap
msgid ""
"import org.acme.kafka.model.Quote;\n"
"import org.eclipse.microprofile.reactive.messaging.Channel;\n"
"import org.eclipse.microprofile.reactive.messaging.Emitter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:171
#, no-wrap
msgid ""
"@Path(\"/quotes\")\n"
"public class QuotesResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:174
#, no-wrap
msgid ""
"    @Channel(\"quote-requests\")\n"
"    Emitter<String> quoteRequestEmitter; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:187
#, no-wrap
msgid ""
"    /**\n"
"     * Endpoint to generate a new quote request id and send it to \"quote-requests\" Kafka topic using the emitter.\n"
"     */\n"
"    @POST\n"
"    @Path(\"/request\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String createRequest() {\n"
"        UUID uuid = UUID.randomUUID();\n"
"        quoteRequestEmitter.send(uuid.toString()); // <2>\n"
"        return uuid.toString(); // <3>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:189
msgid "Inject a Reactive Messaging `Emitter` to send messages to the `quote-requests` channel."
msgstr "注入一个响应式消息 `Emitter` ，来向 `quote-requests` 通道发送消息。"

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:190
msgid "On a post request, generate a random UUID and send it to the Kafka topic using the emitter."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:191
msgid "Return the same UUID to the client."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:197
msgid "The `quote-requests` channel is going to be managed as a Kafka topic, as that's the only connector on the classpath.  If not indicated otherwise, like in this example, Quarkus uses the channel name as topic name.  So, in this example, the application writes into the `quote-requests` topic.  Quarkus also configures the serializer automatically, because it finds that the `Emitter` produces `String` values."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:199
msgid "When you have multiple connectors, you would need to indicate which connector you want to use in the application configuration."
msgstr "当你有多个连接器时，你需要在应用程序配置中指出你想要使用哪个连接器。"

#. type: Title ==
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:200
#, no-wrap
msgid "Processing quote requests"
msgstr "处理报价请求"

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:204
msgid "Now let's consume the quote request and give out a price.  Inside the _processor_ project, create the `src/main/java/org/acme/kafka/processor/QuotesProcessor.java` file and add the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:208
#, no-wrap
msgid "package org.acme.kafka.processor;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:210
#, no-wrap
msgid "import java.util.Random;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:212
#, no-wrap
msgid "import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:216
#, no-wrap
msgid ""
"import org.acme.kafka.model.Quote;\n"
"import org.eclipse.microprofile.reactive.messaging.Incoming;\n"
"import org.eclipse.microprofile.reactive.messaging.Outgoing;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:218
#, no-wrap
msgid "import io.smallrye.reactive.messaging.annotations.Blocking;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:225
#, no-wrap
msgid ""
"/**\n"
" * A bean consuming data from the \"quote-requests\" Kafka topic (mapped to \"requests\" channel) and giving out a random quote.\n"
" * The result is pushed to the \"quotes\" Kafka topic.\n"
" */\n"
"@ApplicationScoped\n"
"public class QuotesProcessor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:227
#, no-wrap
msgid "    private Random random = new Random();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:237
#, no-wrap
msgid ""
"    @Incoming(\"requests\") // <1>\n"
"    @Outgoing(\"quotes\")   // <2>\n"
"    @Blocking             // <3>\n"
"    public Quote process(String quoteRequest) throws InterruptedException {\n"
"        // simulate some hard working task\n"
"        Thread.sleep(200);\n"
"        return new Quote(quoteRequest, random.nextInt(100));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:240
msgid "Indicates that the method consumes the items from the `requests` channel."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:241
msgid "Indicates that the objects returned by the method are sent to the `quotes` channel."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:242
msgid "Indicates that the processing is _blocking_ and cannot be run on the caller thread."
msgstr "表示该处理是 _blocking_ ，不能在调用者线程上运行。"

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:245
msgid "For every Kafka _record_ from the `quote-requests` topic, Reactive Messaging calls the `process` method, and sends the returned `Quote` object to the `quotes` channel.  In this case, we need to configure the channel in the `application.properties` file, to configures the `requests` and `quotes` channels:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:249
#, no-wrap
msgid "%dev.quarkus.http.port=8081\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:253
#, no-wrap
msgid ""
"# Configure the incoming `quote-requests` Kafka topic\n"
"mp.messaging.incoming.requests.topic=quote-requests\n"
"mp.messaging.incoming.requests.auto.offset.reset=earliest\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:257
msgid "Note that in this case we have one incoming and one outgoing connector configuration, each one distinctly named.  The configuration keys are structured as follows:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:259
msgid "`mp.messaging.[outgoing|incoming].{channel-name}.property=value`"
msgstr "`mp.messaging.[outgoing|incoming].{channel-name}.property=value` "

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:261
msgid "The `channel-name` segment must match the value set in the `@Incoming` and `@Outgoing` annotation:"
msgstr "`channel-name` 片段必须与 `@Incoming` 和 `@Outgoing` 注解中设定的值相匹配:"

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:263
msgid "`quote-requests` -> Kafka topic from which we read the quote requests"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:264
msgid "`quotes` -> Kafka topic in which we write the quotes"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:269
msgid "More details about this configuration is available on the https://kafka.apache.org/documentation/#producerconfigs[Producer configuration] and https://kafka.apache.org/documentation/#consumerconfigs[Consumer configuration] section from the Kafka documentation. These properties are configured with the prefix `kafka`.  An exhaustive list of configuration properties is available in xref:kafka.adoc#kafka-configuration[Kafka Reference Guide - Configuration]."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:273
msgid "`mp.messaging.incoming.requests.auto.offset.reset=earliest` instructs the application to start reading the topics from the first offset, when there is no committed offset for the consumer group.  In other words, it will also process messages sent before we start the processor application."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:276
msgid "There is no need to set serializers or deserializers.  Quarkus detects them, and if none are found, generates them using JSON serialization."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:277
#, no-wrap
msgid "Receiving quotes"
msgstr "接收报价"

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:281
msgid "Back to our _producer_ project.  Let's modify the `QuotesResource` to consume quotes from Kafka and send them back to the client via Server-Sent Events:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:285
#, no-wrap
msgid "import io.smallrye.mutiny.Multi;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:287
#, no-wrap
msgid "...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:290
#, no-wrap
msgid ""
"@Channel(\"quotes\")\n"
"Multi<Quote> quotes; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:299
#, no-wrap
msgid ""
"/**\n"
" * Endpoint retrieving the \"quotes\" Kafka topic and sending the items to a server sent event.\n"
" */\n"
"@GET\n"
"@Produces(MediaType.SERVER_SENT_EVENTS) // <2>\n"
"public Multi<Quote> stream() {\n"
"    return quotes; // <3>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:301
msgid "Injects the `quotes` channel using the `@Channel` qualifier"
msgstr "使用 `@Channel` 修饰符注入 `quotes` 通道"

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:302
msgid "Indicates that the content is sent using `Server Sent Events`"
msgstr "表示内容是使用 `Server Sent Events` 发送的"

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:303
msgid "Returns the stream (_Reactive Stream_)"
msgstr "返回流 (_Reactive Stream_) 。"

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:306
msgid "No need to configure anything, as Quarkus will automatically associate the `quotes` channel to the `quotes` Kafka topic.  It will also generate a deserializer for the `Quote` class."
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:309
#, no-wrap
msgid "Message serialization in Kafka"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:312
msgid "In this example we used Jackson to serialize/deserialize Kafka messages.  For more options on message serialization, see xref:kafka.adoc#kafka-serialization[Kafka Reference Guide - Serialization]."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:316
msgid "We strongly suggest adopting a contract-first approach using a schema registry.  To learn more about how to use Apache Kafka with the schema registry and Avro, follow the xref:kafka-schema-registry-avro.adoc[Using Apache Kafka with Schema Registry and Avro] guide."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:318
#, no-wrap
msgid "The HTML page"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:321
msgid "Final touch, the HTML page requesting quotes and displaying the prices obtained over SSE."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:323
msgid "Inside the _producer_ project, create the `src/main/resources/META-INF/resources/quotes.html` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:331
#, no-wrap
msgid ""
"<!DOCTYPE html>\n"
"<html lang=\"en\">\n"
"<head>\n"
"    <meta charset=\"UTF-8\">\n"
"    <title>Prices</title>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:358
#, no-wrap
msgid ""
"    <link rel=\"stylesheet\" type=\"text/css\"\n"
"          href=\"https://cdnjs.cloudflare.com/ajax/libs/patternfly/3.24.0/css/patternfly.min.css\">\n"
"    <link rel=\"stylesheet\" type=\"text/css\"\n"
"          href=\"https://cdnjs.cloudflare.com/ajax/libs/patternfly/3.24.0/css/patternfly-additions.min.css\">\n"
"</head>\n"
"<body>\n"
"<div class=\"container\">\n"
"    <div class=\"card\">\n"
"        <div class=\"card-body\">\n"
"            <h2 class=\"card-title\">Quotes</h2>\n"
"            <button class=\"btn btn-info\" id=\"request-quote\">Request Quote</button>\n"
"            <div class=\"quotes\"></div>\n"
"        </div>\n"
"    </div>\n"
"</div>\n"
"</body>\n"
"<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n"
"<script>\n"
"    $(\"#request-quote\").click((event) => {\n"
"        fetch(\"/quotes/request\", {method: \"POST\"})\n"
"        .then(res => res.text())\n"
"        .then(qid => {\n"
"            var row = $(`<h4 class='col-md-12' id='${qid}'>Quote # <i>${qid}</i> | <strong>Pending</strong></h4>`);\n"
"            $(\".quotes\").prepend(row);\n"
"        });\n"
"    });\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:368
#, no-wrap
msgid ""
"    var source = new EventSource(\"/quotes\");\n"
"    source.onmessage = (event) => {\n"
"      var json = JSON.parse(event.data);\n"
"      $(`#${json.id}`).html((index, html) => {\n"
"        return html.replace(\"Pending\", `\\$\\xA0${json.price}`);\n"
"      });\n"
"    };\n"
"</script>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:373
msgid "Nothing spectacular here.  When the user clicks the button, HTTP request is made to request a quote, and a pending quote is added to the list.  On each quote received over SSE, the corresponding item in the list is updated."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:374
#, no-wrap
msgid "Get it running"
msgstr "运行"

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:378
msgid "You just need to run both applications.  In one terminal, run:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:382
#, no-wrap
msgid "mvn -f producer quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:385
msgid "In another terminal, run:"
msgstr "在另外一个终端中，运行:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:389
#, no-wrap
msgid "mvn -f processor quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:393
msgid "Quarkus starts a Kafka broker automatically, configures the application and shares the Kafka broker instance between different applications.  See xref:kafka-dev-services.adoc[Dev Services for Kafka] for more details."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:395
msgid "Open `http://localhost:8080/quotes.html` in your browser and request some quotes by clicking the button."
msgstr "在你的浏览器中打开 `http://localhost:8080/quotes.html` ，点击按钮来请求一些报价。"

#. type: Title ==
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:396
#, no-wrap
msgid "Running in JVM or Native mode"
msgstr "在JVM或本地模式下运行"

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:400
msgid "When not running in dev or test mode, you will need to start your Kafka broker.  You can follow the instructions from the https://kafka.apache.org/quickstart[Apache Kafka website] or create a `docker-compose.yaml` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:404
#, no-wrap
msgid "version: '3.5'\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:406
#, no-wrap
msgid "services:\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:419
#, no-wrap
msgid ""
"  zookeeper:\n"
"    image: quay.io/strimzi/kafka:0.23.0-kafka-2.8.0\n"
"    command: [\n"
"      \"sh\", \"-c\",\n"
"      \"bin/zookeeper-server-start.sh config/zookeeper.properties\"\n"
"    ]\n"
"    ports:\n"
"      - \"2181:2181\"\n"
"    environment:\n"
"      LOG_DIR: /tmp/logs\n"
"    networks:\n"
"      - kafka-quickstart-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:437
#, no-wrap
msgid ""
"  kafka:\n"
"    image: quay.io/strimzi/kafka:0.23.0-kafka-2.8.0\n"
"    command: [\n"
"      \"sh\", \"-c\",\n"
"      \"bin/kafka-server-start.sh config/server.properties --override listeners=$${KAFKA_LISTENERS} --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect=$${KAFKA_ZOOKEEPER_CONNECT}\"\n"
"    ]\n"
"    depends_on:\n"
"      - zookeeper\n"
"    ports:\n"
"      - \"9092:9092\"\n"
"    environment:\n"
"      LOG_DIR: \"/tmp/logs\"\n"
"      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092\n"
"      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092\n"
"      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181\n"
"    networks:\n"
"      - kafka-quickstart-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:451
#, no-wrap
msgid ""
"  producer:\n"
"    image: quarkus-quickstarts/kafka-quickstart-producer:1.0-${QUARKUS_MODE:-jvm}\n"
"    build:\n"
"      context: producer\n"
"      dockerfile: src/main/docker/Dockerfile.${QUARKUS_MODE:-jvm}\n"
"    depends_on:\n"
"      - kafka\n"
"    environment:\n"
"      KAFKA_BOOTSTRAP_SERVERS: kafka:9092\n"
"    ports:\n"
"      - \"8080:8080\"\n"
"    networks:\n"
"      - kafka-quickstart-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:463
#, no-wrap
msgid ""
"  processor:\n"
"    image: quarkus-quickstarts/kafka-quickstart-processor:1.0-${QUARKUS_MODE:-jvm}\n"
"    build:\n"
"      context: processor\n"
"      dockerfile: src/main/docker/Dockerfile.${QUARKUS_MODE:-jvm}\n"
"    depends_on:\n"
"      - kafka\n"
"    environment:\n"
"      KAFKA_BOOTSTRAP_SERVERS: kafka:9092\n"
"    networks:\n"
"      - kafka-quickstart-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:467
#, no-wrap
msgid ""
"networks:\n"
"  kafka-quickstart-network:\n"
"    name: kafkaquickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:470
msgid "Make sure you first build both applications in JVM mode with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:475
#, no-wrap
msgid ""
"mvn -f producer package\n"
"mvn -f processor package\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:478
msgid "Once packaged, run `docker-compose up`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:480
msgid "This is a development cluster, do not use in production."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:483
msgid "You can also build and run our applications as native executables.  First, compile both applications as native:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:488
#, no-wrap
msgid ""
"mvn -f producer package -Dnative -Dquarkus.native.container-build=true\n"
"mvn -f processor package -Dnative -Dquarkus.native.container-build=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:491
msgid "Run the system with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:496
#, no-wrap
msgid ""
"export QUARKUS_MODE=native\n"
"docker-compose up --build\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:498
#, no-wrap
msgid "Going further"
msgstr "进一步探索"

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:502
msgid "This guide has shown how you can interact with Kafka using Quarkus.  It utilizes https://smallrye.io/smallrye-reactive-messaging[SmallRye Reactive Messaging] to build data streaming applications."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:504
msgid "For the exhaustive list of features and configuration options, check the xref:kafka.adoc[Reference guide for Apache Kafka Extension]."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/kafka-reactive-getting-started.adoc:510
msgid "In this guide we explore Smallrye Reactive Messaging framework to interact with Apache Kafka.  Quarkus extension for Kafka also allows xref:kafka.adoc#kafka-bare-clients[using Kafka clients directly]."
msgstr ""
