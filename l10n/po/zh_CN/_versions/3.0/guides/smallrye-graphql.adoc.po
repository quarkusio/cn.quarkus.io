# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-01-20 14:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:6
#, no-wrap
msgid "SmallRye GraphQL"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:13
msgid "This guide demonstrates how your Quarkus application can use https://github.com/smallrye/smallrye-graphql/[SmallRye GraphQL], an implementation of the https://github.com/eclipse/microprofile-graphql/[MicroProfile GraphQL] specification."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:15
msgid "As the https://www.graphql.org/[GraphQL] specification website states:"
msgstr ""

#. type: quote
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:21
msgid "GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data.  GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools."
msgstr ""

#. type: quote
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:24
#, no-wrap
msgid ""
"**GraphQL** was originally developed by **Facebook** in 2012 and has been\n"
"an open standard since 2015.\n"
msgstr ""

#. type: quote
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:27
msgid "GraphQL is not a replacement for REST API specification but merely an alternative. Unlike REST, GraphQL API's have the ability to benefit the client by:"
msgstr ""

#. type: Labeled list
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:28
#, no-wrap
msgid "Preventing Over-fetching and Under-fetching"
msgstr ""

#. type: quote
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:34
msgid "REST APIs are server-driven fixed data responses that cannot be determined by the client. Although the client does not require all the fields the client must retrieve all the data hence `Over-fetching`. A client may also require multiple REST API calls according to the first call (HATEOAS) to retrieve all the data that is required thereby `Under-fetching`."
msgstr ""

#. type: Labeled list
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:35
#, no-wrap
msgid "API Evolution"
msgstr ""

#. type: quote
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:39
msgid "Since GraphQL API's returns data that are requested by the client adding additional fields and capabilities to existing API will not create breaking changes to existing clients."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:40
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:44
#, no-wrap
msgid "Architecture"
msgstr "架构"

#. type: quote
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:48
msgid "In this guide, we build a simple GraphQL application that exposes a GraphQL API at `/graphql`."
msgstr ""

#. type: quote
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:50
msgid "This example was inspired by a popular GraphQL API."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:51
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: quote
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:55
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议你按照下面几节的说明，一步一步地创建应用程序。然而，你可以直接进入已完成的例子。"

#. type: quote
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:57
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或者下载一个 {quickstarts-archive-url}[存档]。"

#. type: quote
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:59
msgid "The solution is located in the `microprofile-graphql-quickstart` {quickstarts-tree-url}/microprofile-graphql-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:60
#, no-wrap
msgid "Creating the Maven Project"
msgstr "创建Maven项目"

#. type: quote
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:63
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。用以下命令创建一个新项目："

#. type: quote
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:69
msgid "This command generates a project, importing the `smallrye-graphql` extension."
msgstr ""

#. type: quote
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:72
msgid "If you already have your Quarkus project configured, you can add the `smallrye-graphql` extension to your project by running the following command in your project base directory:"
msgstr ""

#. type: quote
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:77
msgid "This will add the following to your build file:"
msgstr "这将在您的构建文件中添加以下内容："

#. type: Block title
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:79
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1291
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:85
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-graphql</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:88
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1300
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:91
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-smallrye-graphql\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:93
#, no-wrap
msgid "Preparing an Application: GraphQL API"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:96
msgid "In this section we will start creating the GraphQL API."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:98
msgid "First, create the following entities representing a film from a galaxy far, far away:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:102
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:700
#, no-wrap
msgid "package org.acme.microprofile.graphql;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:104
#, no-wrap
msgid "public class Film {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:109
#, no-wrap
msgid ""
"    public String title;\n"
"    public Integer episodeID;\n"
"    public String director;\n"
"    public LocalDate releaseDate;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:111
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:123
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:707
#, no-wrap
msgid "}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:113
#, no-wrap
msgid "public class Hero {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:121
#, no-wrap
msgid ""
"    public String name;\n"
"    public String surname;\n"
"    public Double height;\n"
"    public Integer mass;\n"
"    public Boolean darkSide;\n"
"    public LightSaber lightSaber;\n"
"    public List<Integer> episodeIds = new ArrayList<>();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:127
#, no-wrap
msgid ""
"enum LightSaber {\n"
"    RED, BLUE, GREEN\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:130
msgid "For readability we use classes with public fields, but classes with private fields with public getters and setters will also work."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:133
msgid "The classes we have just created describe the GraphQL schema which is a set of possible data (objects, fields, relationships) that a client can access."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:135
msgid "Let's continue with an example CDI bean, that would work as a repository:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:140
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class GalaxyService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:142
#, no-wrap
msgid "    private List<Hero> heroes = new ArrayList<>();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:144
#, no-wrap
msgid "    private List<Film> films = new ArrayList<>();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:146
#, no-wrap
msgid "    public GalaxyService() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:152
#, no-wrap
msgid ""
"        Film aNewHope = new Film();\n"
"        aNewHope.title = \"A New Hope\";\n"
"        aNewHope.releaseDate = LocalDate.of(1977, Month.MAY, 25);\n"
"        aNewHope.episodeID = 4;\n"
"        aNewHope.director = \"George Lucas\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:158
#, no-wrap
msgid ""
"        Film theEmpireStrikesBack = new Film();\n"
"        theEmpireStrikesBack.title = \"The Empire Strikes Back\";\n"
"        theEmpireStrikesBack.releaseDate = LocalDate.of(1980, Month.MAY, 21);\n"
"        theEmpireStrikesBack.episodeID = 5;\n"
"        theEmpireStrikesBack.director = \"George Lucas\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:164
#, no-wrap
msgid ""
"        Film returnOfTheJedi = new Film();\n"
"        returnOfTheJedi.title = \"Return Of The Jedi\";\n"
"        returnOfTheJedi.releaseDate = LocalDate.of(1983, Month.MAY, 25);\n"
"        returnOfTheJedi.episodeID = 6;\n"
"        returnOfTheJedi.director = \"George Lucas\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:168
#, no-wrap
msgid ""
"        films.add(aNewHope);\n"
"        films.add(theEmpireStrikesBack);\n"
"        films.add(returnOfTheJedi);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:177
#, no-wrap
msgid ""
"        Hero luke = new Hero();\n"
"        luke.name = \"Luke\";\n"
"        luke.surname = \"Skywalker\";\n"
"        luke.height = 1.7;\n"
"        luke.mass = 73;\n"
"        luke.lightSaber = LightSaber.GREEN;\n"
"        luke.darkSide = false;\n"
"        luke.episodeIds.addAll(Arrays.asList(4, 5, 6));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:185
#, no-wrap
msgid ""
"        Hero leia = new Hero();\n"
"        leia.name = \"Leia\";\n"
"        leia.surname = \"Organa\";\n"
"        leia.height = 1.5;\n"
"        leia.mass = 51;\n"
"        leia.darkSide = false;\n"
"        leia.episodeIds.addAll(Arrays.asList(4, 5, 6));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:195
#, no-wrap
msgid ""
"        Hero vader = new Hero();\n"
"        vader.name = \"Darth\";\n"
"        vader.surname = \"Vader\";\n"
"        vader.height = 1.9;\n"
"        vader.mass = 89;\n"
"        vader.darkSide = true;\n"
"        vader.lightSaber = LightSaber.RED;\n"
"        vader.episodeIds.addAll(Arrays.asList(4, 5, 6));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:199
#, no-wrap
msgid ""
"        heroes.add(luke);\n"
"        heroes.add(leia);\n"
"        heroes.add(vader);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:201
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:205
#, no-wrap
msgid ""
"    public List<Film> getAllFilms() {\n"
"        return films;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:209
#, no-wrap
msgid ""
"    public Film getFilm(int id) {\n"
"        return films.get(id);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:215
#, no-wrap
msgid ""
"    public List<Hero> getHeroesByFilm(Film film) {\n"
"        return heroes.stream()\n"
"                .filter(hero -> hero.episodeIds.contains(film.episodeID))\n"
"                .collect(Collectors.toList());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:219
#, no-wrap
msgid ""
"    public void addHero(Hero hero) {\n"
"        heroes.add(hero);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:223
#, no-wrap
msgid ""
"    public Hero deleteHero(int id) {\n"
"        return heroes.remove(id);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:230
#, no-wrap
msgid ""
"    public List<Hero> getHeroesBySurname(String surname) {\n"
"        return heroes.stream()\n"
"                .filter(hero -> hero.surname.equals(surname))\n"
"                .collect(Collectors.toList());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:233
msgid "Now, let's create our first GraphQL API."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:235
msgid "Edit the `org.acme.microprofile.graphql.FilmResource` class as following:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:240
#, no-wrap
msgid ""
"@GraphQLApi // <1>\n"
"public class FilmResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:243
#, no-wrap
msgid ""
"    @Inject\n"
"    GalaxyService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:250
#, no-wrap
msgid ""
"    @Query(\"allFilms\") // <2>\n"
"    @Description(\"Get all Films from a galaxy far far away\") // <3>\n"
"    public List<Film> getAllFilms() {\n"
"        return service.getAllFilms();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:253
msgid "`@GraphQLApi` annotation indicates that the CDI bean will be a GraphQL endpoint"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:254
msgid "`@Query` annotation defines that this method will be queryable with the name `allFilms`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:255
msgid "Documentation of the queryable method"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:258
msgid "The value of the `@Query` annotation is optional and would implicitly be defaulted to the method name if absent."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:260
msgid "This way we have created our first queryable API which we will later expand."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:261
#, no-wrap
msgid "Launch"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:264
msgid "Launch the quarkus application in dev mode:"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:267
#, no-wrap
msgid "Introspect"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:270
msgid "The full schema of the GraphQL API can be retrieved by calling the following:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:274
#, no-wrap
msgid "curl http://localhost:8080/graphql/schema.graphql\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:277
msgid "The server will return the complete schema of the GraphQL API."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:279
#, no-wrap
msgid "GraphQL UI"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:282
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:690
msgid "Experimental - not included in the MicroProfile specification"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:284
msgid "GraphQL UI is a great tool permitting easy interaction with your GraphQL APIs."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:287
msgid "The Quarkus `smallrye-graphql` extension ships with https://github.com/graphql/graphiql/blob/main/packages/graphiql/README.md[GraphiQL] and enables it by default in `dev` and `test` modes, but it can also be explicitly configured for `production` mode as well, by setting the `quarkus.smallrye-graphql.ui.always-include` configuration property to `true`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:289
msgid "The GraphQL UI can be accessed from http://localhost:8080/q/graphql-ui/ ."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:291
msgid "image:graphql-ui-screenshot01.png[alt=GraphQL UI]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:293
msgid "Have a look at the link:security-authorization[Authorization of Web Endpoints] Guide on how to add/remove security for the GraphQL UI."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:294
#, no-wrap
msgid "Query the GraphQL API"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:297
msgid "Now visit the GraphQL UI page that has been deployed in `dev` mode."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:299
msgid "Enter the following query to the GraphQL UI and press the `play` button:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:310
#, no-wrap
msgid ""
"query allFilms {\n"
"  allFilms {\n"
"    title\n"
"    director\n"
"    releaseDate\n"
"    episodeID\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:316
msgid "Since our query contains all the fields in the `Film` class we will retrieve all the fields in our response. Since GraphQL API responses are client determined, the client can choose which fields it will require."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:320
msgid "Let's assume that our client only requires `title` and `releaseDate` making the previous call to the API `Over-fetching` of unnecessary data."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:322
msgid "Enter the following query into the GraphQL UI and hit the `play` button:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:331
#, no-wrap
msgid ""
"query allFilms {\n"
"  allFilms {\n"
"    title\n"
"    releaseDate\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:335
msgid "Notice in the response we have only retrieved the required fields.  Therefore, we have prevented `Over-fetching`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:338
msgid "Let's continue to expand our GraphQL API by adding the following to the `FilmResource` class."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:346
#, no-wrap
msgid ""
"    @Query\n"
"    @Description(\"Get a Films from a galaxy far far away\")\n"
"    public Film getFilm(@Name(\"filmId\") int id) {\n"
"        return service.getFilm(id);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:351
msgid "Notice how we have excluded the value in the `@Query` annotation.  Therefore, the name of the query is implicitly set as the method name excluding the `get`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:354
msgid "This query will allow the client to retrieve the film by id, and the `@Name` annotation on the parameter changes the parameter name to `filmId` rather than the default `id` that it would be if you omit the `@Name` annotation."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:356
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:557
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:676
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:766
msgid "Enter the following into the `GraphQL UI` and make a request."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:367
#, no-wrap
msgid ""
"query getFilm {\n"
"  film(filmId: 1) {\n"
"    title\n"
"    director\n"
"    releaseDate\n"
"    episodeID\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:372
msgid "The `film` query method requested fields can be determined as such in our previous example. This way we can retrieve individual film information."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:376
msgid "However, say our client requires both films with filmId `0` and `1`.  In a REST API the client would have to make two calls to the API.  Therefore, the client would be `Under-fetching`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:378
msgid "In GraphQL, it is possible to make multiple queries at once."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:380
msgid "Enter the following into the `GraphQL UI` to retrieve two films:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:397
#, no-wrap
msgid ""
"query getFilms {\n"
"  film0: film(filmId: 0) {\n"
"    title\n"
"    director\n"
"    releaseDate\n"
"    episodeID\n"
"  }\n"
"  film1: film(filmId: 1) {\n"
"    title\n"
"    director\n"
"    releaseDate\n"
"    episodeID\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:400
msgid "This enabled the client to fetch the required data in a single request."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:401
#, no-wrap
msgid "Expanding the API"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:405
msgid "Until now, we have created a GraphQL API to retrieve film data.  We now want to enable the clients to retrieve the `Hero` data of the `Film`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:407
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:665
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:755
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:792
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:901
msgid "Add the following to our `FilmResource` class:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:413
#, no-wrap
msgid ""
"    public List<Hero> heroes(@Source Film film) { // <1>\n"
"        return service.getHeroesByFilm(film);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:416
msgid "Enable `List<Hero>` data to be added to queries that respond with `Film`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:420
msgid "By adding this method we have effectively changed the schema of the GraphQL API.  Although the schema has changed the previous queries will still work.  Since we only expanded the API to be able to retrieve the `Hero` data of the `Film`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:422
msgid "Enter the following into the `GraphQL UI` to retrieve the film and hero data."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:440
#, no-wrap
msgid ""
"query getFilmHeroes {\n"
"  film(filmId: 1) {\n"
"    title\n"
"    director\n"
"    releaseDate\n"
"    episodeID\n"
"    heroes {\n"
"      name\n"
"      height\n"
"      mass\n"
"      darkSide\n"
"      lightSaber\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:443
msgid "The response now includes the heroes of the film."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:444
#, no-wrap
msgid "Batching"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:448
msgid "When you are exposing a `Collection` return like our `getAllFilms`, you might want to use the batch form of the above, to more efficiently fetch the heroes:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:454
#, no-wrap
msgid ""
"    public List<List<Hero>> heroes(@Source List<Film> films) { // <1>\n"
"        // Here fetch all hero lists\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:457
msgid "Here receive the films as a batch, allowing you to fetch the corresponding heroes."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:458
#, no-wrap
msgid "Non blocking"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:461
msgid "Queries can be made reactive by using `Uni` as a return type, or adding `@NonBlocking` to the method:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:469
#, no-wrap
msgid ""
"    @Query\n"
"    @Description(\"Get a Films from a galaxy far far away\")\n"
"    public Uni<Film> getFilm(int filmId) {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:473
msgid "Or you can use `@NonBlocking`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:482
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:496
#, no-wrap
msgid ""
"    @Query\n"
"    @Description(\"Get a Films from a galaxy far far away\")\n"
"    @NonBlocking\n"
"    public Film getFilm(int filmId) {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:485
msgid "Using `Uni` or `@NonBlocking` means that the request will be executed on Event-loop threads rather than Worker threads."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:487
msgid "You can mix Blocking and Non-blocking in one request,"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:500
#, no-wrap
msgid ""
"    public List<Hero> heroes(@Source Film film) {\n"
"        return service.getHeroesByFilm(film);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:503
msgid "Above will fetch the film on the event-loop threads, but switch to the worker thread to fetch the heroes."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:504
#, no-wrap
msgid "Abstract Types"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:509
msgid "The current schema is simple with only two concrete types, `Hero` and `Film`.  Now we want to expand our API with additional types and add some abstractions that make interacting with them easy for clients."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:510
#, no-wrap
msgid "Interfaces"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:513
msgid "Let's give our heroes some allies."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:515
msgid "First, create a new entity to represent our `Ally`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:519
#, no-wrap
msgid "public class Ally {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:524
#, no-wrap
msgid ""
"    public String name;\n"
"    public String surname;\n"
"    public Hero partner;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:527
msgid "Update the `GalaxyService` to have some allies."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:531
#, no-wrap
msgid "    private List<Ally> allies = new ArrayList();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:534
#, no-wrap
msgid ""
"    public GalaxyService() {\n"
"        // ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:540
#, no-wrap
msgid ""
"        Ally jarjar = new Ally();\n"
"        jarjar.name = \"Jar Jar\";\n"
"        jarjar.surname = \"Binks\";\n"
"        allies.add(jarjar);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:544
#, no-wrap
msgid ""
"    public List<Ally> getAllAllies() {\n"
"        return allies;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:547
msgid "Let's also update `FilmResource` to allow clients to query for all allies:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:554
#, no-wrap
msgid ""
"    @Query\n"
"    public List<Ally> allies() {\n"
"        return service.getAllAllies();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:566
#, no-wrap
msgid ""
"query getAllies {\n"
"    allies {\n"
"        name\n"
"        surname\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:570
msgid "Notice that `Ally` has a some of the same fields as a `Hero`.  To better make queries easier for clients, let's create an abstraction for any character."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:572
msgid "Create a new Java interface that defines our common character traits."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:576
#, no-wrap
msgid "public interface Character {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:581
#, no-wrap
msgid ""
"    // <1>\n"
"    String getName();\n"
"    String getSurname();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:584
msgid "Getters defined in an interface will define the GraphQL fields that it contains"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:586
msgid "Now, update our `Hero` and `Ally` entities to implement this interface."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:591
#, no-wrap
msgid ""
"public class Hero implements Character {\n"
"    // ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:596
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:610
#, no-wrap
msgid ""
"    // <1>\n"
"    public String getName() {\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:602
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:616
#, no-wrap
msgid ""
"    // <1>\n"
"    public String getSurname() {\n"
"        return surname;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:605
#, no-wrap
msgid ""
"public class Ally implements Character {\n"
"    // ...\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:619
msgid "Because interfaces can't define fields, we have to implement the getters"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:622
msgid "By adding an interface and updating existing entities to implement it, we have effectively changed the schema.  The updated schema will now include the new `Ally` type and `Character` interface."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:630
#, no-wrap
msgid ""
"# <1>\n"
"interface Character {\n"
"    name: String\n"
"    surname: String\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:637
#, no-wrap
msgid ""
"# <2>\n"
"type Ally implements Character {\n"
"    name: String\n"
"    surname: String\n"
"    partner: Hero\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:644
#, no-wrap
msgid ""
"# <3>\n"
"type Hero implements Character {\n"
"    name: String\n"
"    surname: String\n"
"    # ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:647
msgid "The `Character` interface was defined with the getters as fields"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:648
msgid "The `Ally` type was added and it implements `Character`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:649
msgid "The `Hero` type was updated to implement `Character`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:651
msgid "Update our `GalaxyService` to provide all characters."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:660
#, no-wrap
msgid ""
"    public List<Character> getAllCharacters() {\n"
"        List<Character> characters = new ArrayList<>();\n"
"        characters.addAll(heroes);\n"
"        characters.addAll(allies);\n"
"        return characters;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:663
msgid "Now we can allow clients to query for all characters, not just heroes."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:673
#, no-wrap
msgid ""
"    @Query\n"
"    @Description(\"Get all characters from a galaxy far far away\")\n"
"    public List<Characters> characters() {\n"
"        return service.getAllCharacters();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:685
#, no-wrap
msgid ""
"query getCharacters {\n"
"    characters {\n"
"        name\n"
"        surname\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:687
#, no-wrap
msgid "Unions"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:694
msgid "So far, our API has only allowed us to query directly for an entity or list of entities.  Now we want to allow clients to search all of our entities.  While `Hero` and `Ally` have a shared abstract type of `Character`, there is no abstraction that also includes `Film`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:696
msgid "First, create this new abstract type representing the possible return types for a search result."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:702
#, no-wrap
msgid "import io.smallrye.graphql.api.Union;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:705
#, no-wrap
msgid ""
"@Union // <1>\n"
"public interface SearchResult {\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:710
msgid "`@Union` is required to indicate this Java interface represents a GraphQL union, not a GraphQL interface"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:713
msgid "The Java interface representing the GraphQL union does not have to be empty, but any getters defined will not explicitly change the GraphQL schema."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:715
msgid "Update our entities to implement `SearchResult`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:721
#, no-wrap
msgid ""
"public class Film implements SearchResult {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:725
#, no-wrap
msgid ""
"public class Hero implements Character, SearchResult {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:729
#, no-wrap
msgid ""
"public class Ally implements Character, SearchResult {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:733
msgid "We can also leverage inheritance and have `interface Character extends SearchResult`.  This will result in all implementations of `Character` being added as members of the `SearchResult` union in the schema."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:735
msgid "Update `GalaxyService` to provide search:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:752
#, no-wrap
msgid ""
"    public List<SearchResult> search(String query) {\n"
"        List<SearchResult> results = new ArrayList<>();\n"
"        List<Film> matchingFilms = films.stream()\n"
"            .filter(film -> film.title.contains(query)\n"
"                || film.director.contains(query))\n"
"            .collect(Collectors.toList());\n"
"        results.addAll(matchingFilms);\n"
"        List<Character> matchingCharacters = getAllCharacters().stream()\n"
"            .filter(character -> character.getName().contains(query)\n"
"                || character.getSurname().contains(query))\n"
"            .collect(Collectors.toList());\n"
"        results.addAll(matchingCharacters);\n"
"        return results;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:763
#, no-wrap
msgid ""
"    @Query\n"
"    @Description(\"Search for heroes or films\")\n"
"    public List<SearchResult> search(String query) {\n"
"        return service.search(query);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:781
#, no-wrap
msgid ""
"query searchTheGalaxy {\n"
"    search(query: \"a\") {\n"
"        ... on Film {\n"
"            title\n"
"            director\n"
"        }\n"
"        ... on Character {\n"
"            name\n"
"            surname\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:784
msgid "We are able to use the `Character` interface because the `SearchResult` union contains members that implement it."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:785
#, no-wrap
msgid "Mutations"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:788
msgid "Mutations are used when data is created, updated or deleted."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:790
msgid "Let's now add the ability to add and delete heroes to our GraphQL API."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:800
#, no-wrap
msgid ""
"    @Mutation\n"
"    public Hero createHero(Hero hero) {\n"
"        service.addHero(hero);\n"
"        return hero;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:805
#, no-wrap
msgid ""
"    @Mutation\n"
"    public Hero deleteHero(int id) {\n"
"        return service.deleteHero(id);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:808
msgid "Enter the following into the `GraphQL UI` to insert a `Hero`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:826
#, no-wrap
msgid ""
"mutation addHero {\n"
"  createHero(hero: {\n"
"      name: \"Han\",\n"
"      surname: \"Solo\"\n"
"      height: 1.85\n"
"      mass: 80\n"
"      darkSide: false\n"
"      episodeIds: [4, 5, 6]\n"
"  \t}\n"
"  )\n"
"  {\n"
"    name\n"
"    surname\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:829
msgid "By using this mutation we have created a `Hero` entity in our service."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:834
msgid "Notice how in the response we have retrieved the `name` and `surname` of the created Hero. This is because we selected to retrieve these fields in the response within the `{ }` in the mutation query.  This can easily be a server side generated field that the client may require."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:836
msgid "Let's now try deleting an entry:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:845
#, no-wrap
msgid ""
"mutation DeleteHero {\n"
"  deleteHero(id :3){\n"
"    name\n"
"    surname\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:849
msgid "Similar to the `createHero` mutation method we also retrieve the `name` and `surname` of the hero we have deleted which is defined in `{ }`."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:850
#, no-wrap
msgid "Subscriptions"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:854
msgid "Subscriptions allow you to subscribe to a query. It allows you to receive events and is using web sockets.  See the https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md[GraphQL over WebSocket Protocol] spec for more details."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:856
msgid "Example: We want to know when new Heroes are being created:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:861
#, no-wrap
msgid "    BroadcastProcessor<Hero> processor = BroadcastProcessor.create(); // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:868
#, no-wrap
msgid ""
"    @Mutation\n"
"    public Hero createHero(Hero hero) {\n"
"        service.addHero(hero);\n"
"        processor.onNext(hero); // <2>\n"
"        return hero;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:873
#, no-wrap
msgid ""
"    @Subscription\n"
"    public Multi<Hero> heroCreated(){\n"
"        return processor; // <3>\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:877
msgid "The `Multi` processor that will broadcast any new ``Hero``es"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:878
msgid "When adding a new `Hero`, also broadcast it"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:879
msgid "Make the stream available in the schema and as a WebSocket during runtime"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:882
msgid "Any client that now connect to the `/graphql` WebSocket connection will receive events on new Heroes being created:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:892
#, no-wrap
msgid ""
"subscription ListenForNewHeroes {\n"
"  heroCreated {\n"
"    name\n"
"    surname\n"
"  }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:895
#, no-wrap
msgid "Creating Queries by fields"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:899
msgid "Queries can also be done on individual fields. For example, let's create a method to query heroes by their last name."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:908
#, no-wrap
msgid ""
"    @Query\n"
"    public List<Hero> getHeroesWithSurname(@DefaultValue(\"Skywalker\") String surname) {\n"
"        return service.getHeroesBySurname(surname);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:912
msgid "By using the `@DefaultValue` annotation we have determined that the surname value will be `Skywalker` when the parameter is not provided."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:914
msgid "Test the following queries with the `GraphQL UI`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:931
#, no-wrap
msgid ""
"query heroWithDefaultSurname {\n"
"  heroesWithSurname{\n"
"    name\n"
"    surname\n"
"    lightSaber\n"
"  }\n"
"}\n"
"query heroWithSurnames {\n"
"  heroesWithSurname(surname: \"Vader\") {\n"
"    name\n"
"    surname\n"
"    lightSaber\n"
"  }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:933
#, no-wrap
msgid "Context"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:936
msgid "You can get information about the GraphQL request anywhere in your code, using this experimental, SmallRye specific feature:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:941
#, no-wrap
msgid ""
"@Inject\n"
"Context context;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:944
msgid "or as a parameter in your method if you are in the `GraphQLApi` class, for instance:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:952
#, no-wrap
msgid ""
"    @Query\n"
"    @Description(\"Get a Films from a galaxy far far away\")\n"
"    public Film getFilm(Context context, int filmId) {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:955
msgid "The context object allows you to get:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:957
msgid "the original request (Query/Mutation)"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:958
msgid "the arguments"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:959
msgid "the path"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:960
msgid "the selected fields"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:961
msgid "any variables"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:963
msgid "This allows you to optimize the downstream queries to the datastore."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:965
msgid "See the https://javadoc.io/doc/io.smallrye/smallrye-graphql-api/latest/io/smallrye/graphql/api/Context.html[JavaDoc] for more details."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:966
#, no-wrap
msgid "GraphQL-Java"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:969
msgid "This context object also allows you to fall down to the underlying https://www.graphql-java.com/[graphql-java] features by using the leaky abstraction:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:973
#, no-wrap
msgid "DataFetchingEnvironment dfe = context.unwrap(DataFetchingEnvironment.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:976
msgid "You can also get access to the underlying `graphql-java` during schema generation, to add your own features directly:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:980
#, no-wrap
msgid "public GraphQLSchema.Builder addMyOwnEnum(@Observes GraphQLSchema.Builder builder) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:987
#, no-wrap
msgid ""
"    // Here add your own features directly, example adding an Enum\n"
"    GraphQLEnumType myOwnEnum = GraphQLEnumType.newEnum()\n"
"            .name(\"SomeEnum\")\n"
"            .description(\"Adding some enum type\")\n"
"            .value(\"value1\")\n"
"            .value(\"value2\").build();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:990
#, no-wrap
msgid ""
"    return builder.additionalType(myOwnEnum);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:993
msgid "By using the `@Observer` you can add anything to the Schema builder."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:995
msgid "For the Observer to work, you need to enable events. In `application.properties`, add the following: `quarkus.smallrye-graphql.events.enabled=true`."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:996
#, no-wrap
msgid "Adapting"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:998
#, no-wrap
msgid "Adapt to Scalar"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1002
msgid "Another SmallRye specific experimental feature, allows you to map an existing scalar (that is mapped by the implementation to a certain Java type) to another type, or to map complex object, that would typically create a `Type` or `Input` in GraphQL, to an existing scalar."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1003
#, no-wrap
msgid "Adapting an existing Scalar to another type:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1008
#, no-wrap
msgid "public class Movie {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1011
#, no-wrap
msgid ""
"    @AdaptToScalar(Scalar.Int.class)\n"
"    Long idLongThatShouldChangeToInt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1014
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1029
#, no-wrap
msgid ""
"    // ....\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1017
msgid "Above will adapt the `Long` java type to an `Int` Scalar type, rather than the https://download.eclipse.org/microprofile/microprofile-graphql-1.0/microprofile-graphql.html#scalars[default] `BigInteger`."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1018
#, no-wrap
msgid "Adapting a complex object to a Scalar type:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1023
#, no-wrap
msgid "public class Person {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1026
#, no-wrap
msgid ""
"    @AdaptToScalar(Scalar.String.class)\n"
"    Phone phone;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1032
msgid "This will, rather than creating a `Type` or `Input` in GraphQL, map to a String scalar."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1036
msgid "To be able to do the above, the `Phone` object needs to have a constructor that takes a String (or `Int` / `Date` / etc.), or have a setter method for the String (or `Int` / `Date` / etc.), or have a `fromString` (or `fromInt` / `fromDate` - depending on the Scalar type) static method."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1038
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1064
msgid "For example:"
msgstr "例如："

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1042
#, no-wrap
msgid "public class Phone {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1044
#, no-wrap
msgid "    private String number;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1046
#, no-wrap
msgid "    // Getters and setters....\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1053
#, no-wrap
msgid ""
"    public static Phone fromString(String number) {\n"
"        Phone phone = new Phone();\n"
"        phone.setNumber(number);\n"
"        return phone;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1056
msgid "See more about the `@AdaptToScalar` feature in the https://javadoc.io/static/io.smallrye/smallrye-graphql-api/1.5.0/io/smallrye/graphql/api/AdaptToScalar.html[JavaDoc]."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1057
#, no-wrap
msgid "Adapt with"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1060
msgid "Another option for more complex cases is to provide an Adapter. You can then do the mapping yourself in the adapter."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1062
msgid "See more about the `AdaptWith` feature in the https://javadoc.io/static/io.smallrye/smallrye-graphql-api/1.5.0/io/smallrye/graphql/api/AdaptWith.html[JavaDoc]."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1071
#, no-wrap
msgid ""
"    public class Profile {\n"
"        // Map this to an email address\n"
"        @AdaptWith(AddressAdapter.class)\n"
"        public Address address;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1074
#, no-wrap
msgid ""
"        // other getters/setters...\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1076
#, no-wrap
msgid "    public class AddressAdapter implements Adapter<EmailAddress, Address> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1084
#, no-wrap
msgid ""
"        @Override\n"
"        public Address from(EmailAddress email) {\n"
"            Address a = new Address();\n"
"            a.addressType = AddressType.email;\n"
"            a.addLine(email.getValue());\n"
"            return a;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1093
#, no-wrap
msgid ""
"        @Override\n"
"        public EmailAddress to(Address address) {\n"
"            if (address != null && address.addressType != null && address.addressType.equals(AddressType.email)) {\n"
"                return new EmailAddress(address.lines.get(0));\n"
"            }\n"
"            return null;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1097
msgid "`@JsonbTypeAdapter` is also supported."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1098
#, no-wrap
msgid "Built-in support for Maps"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1103
msgid "By default, due to the fact that maps are hard to model in a schema (as the keys and values can be dynamic at runtime) GraphQL does not support maps by default.  Using the above adaption, `Map` support is added for Quarkus and are mapped to an `Entry<Key,Value>` with an optional key parameter.  This allows you to return a map, and optionally query it by key."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1105
msgid "Example:"
msgstr "例如："

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1113
#, no-wrap
msgid ""
"    @Query\n"
"    public Map<ISO6391, Language> language() {\n"
"        return languageService.getLanguages();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1120
#, no-wrap
msgid ""
"    public enum ISO6391 {\n"
"        af,\n"
"        en,\n"
"        de,\n"
"        fr\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1127
#, no-wrap
msgid ""
"    public class Language {\n"
"        private ISO6391 iso6391;\n"
"        private String nativeName;\n"
"        private String enName;\n"
"        private String please;\n"
"        private String thankyou;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1130
#, no-wrap
msgid ""
"        // Getters & Setters\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1134
msgid "The key and value object can be any of Enum, Scalar or Complex object"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1136
msgid "You can now query the whole map with all the fields:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1151
#, no-wrap
msgid ""
"{\n"
"  language{\n"
"    key\n"
"    value {\n"
"      enName\n"
"      iso6391\n"
"      nativeName\n"
"      please\n"
"      thankyou\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1154
msgid "This will return a result like this for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1203
#, no-wrap
msgid ""
"{\n"
"  \"data\": {\n"
"    \"language\": [\n"
"      {\n"
"        \"key\": \"fr\",\n"
"        \"value\": {\n"
"          \"enName\": \"french\",\n"
"          \"iso6391\": \"fr\",\n"
"          \"nativeName\": \"français\",\n"
"          \"please\": \"s'il te plaît\",\n"
"          \"thankyou\": \"merci\"\n"
"        }\n"
"      },\n"
"      {\n"
"        \"key\": \"af\",\n"
"        \"value\": {\n"
"          \"enName\": \"afrikaans\",\n"
"          \"iso6391\": \"af\",\n"
"          \"nativeName\": \"afrikaans\",\n"
"          \"please\": \"asseblief\",\n"
"          \"thankyou\": \"dankie\"\n"
"        }\n"
"      },\n"
"      {\n"
"        \"key\": \"de\",\n"
"        \"value\": {\n"
"          \"enName\": \"german\",\n"
"          \"iso6391\": \"de\",\n"
"          \"nativeName\": \"deutsch\",\n"
"          \"please\": \"bitte\",\n"
"          \"thankyou\": \"danke dir\"\n"
"        }\n"
"      },\n"
"      {\n"
"        \"key\": \"en\",\n"
"        \"value\": {\n"
"          \"enName\": \"english\",\n"
"          \"iso6391\": \"en\",\n"
"          \"nativeName\": \"english\",\n"
"          \"please\": \"please\",\n"
"          \"thankyou\": \"thank you\"\n"
"        }\n"
"      }\n"
"    ]\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1206
msgid "You can also query by key"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1217
#, no-wrap
msgid ""
"{\n"
"  language (key:af){\n"
"    value {\n"
"      please\n"
"      thankyou\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1220
msgid "That will return only that value in the map:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1235
#, no-wrap
msgid ""
"{\n"
"  \"data\": {\n"
"    \"language\": [\n"
"      {\n"
"        \"value\": {\n"
"          \"please\": \"asseblief\",\n"
"          \"thankyou\": \"dankie\"\n"
"        }\n"
"      }\n"
"    ]\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1238
msgid "The default map adapter can to overridden with our own implementation."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1239
#, no-wrap
msgid "Error code"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1242
msgid "You can add an error code on the error output in the GraphQL response by using the (SmallRye specific) `@ErrorCode`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1249
#, no-wrap
msgid ""
"@ErrorCode(\"some-business-error-code\")\n"
"public class SomeBusinessException extends RuntimeException {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1252
msgid "When `SomeBusinessException` occurs, the error output will contain the Error code:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1279
#, no-wrap
msgid ""
"{\n"
"    \"errors\": [\n"
"        {\n"
"            \"message\": \"Unexpected failure in the system. Jarvis is working to fix it.\",\n"
"            \"locations\": [\n"
"                {\n"
"                    \"line\": 2,\n"
"                    \"column\": 3\n"
"                }\n"
"            ],\n"
"            \"path\": [\n"
"                \"annotatedCustomBusinessException\"\n"
"            ],\n"
"            \"extensions\": {\n"
"                \"exception\": \"io.smallrye.graphql.test.apps.error.api.ErrorApi$AnnotatedCustomBusinessException\",\n"
"                \"classification\": \"DataFetchingException\",\n"
"                \"code\": \"some-business-error-code\" <1>\n"
"            }\n"
"        }\n"
"    ],\n"
"    \"data\": {\n"
"        ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1282
msgid "The error code"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1283
#, no-wrap
msgid "Additional Notes"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1289
msgid "If you are using the `smallrye-graphql` extension and the `micrometer` metrics extension is present and metrics are enabled, you may encounter a `java.lang.NoClassDefFoundError` as some versions of the `smallrye-graphql` extension have runtime requirements on the Microprofile Metrics API.  Add the following MicroProfile Metrics API dependency to resolve the issue:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1297
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>org.eclipse.microprofile.metrics</groupId>\n"
"    <artifactId>microprofile-metrics-api</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1303
#, no-wrap
msgid "implementation(\"org.eclipse.microprofile.metrics:microprofile-metrics-api\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1305
#, no-wrap
msgid "Conclusion"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1309
msgid "SmallRye GraphQL enables clients to retrieve the exact data that is required preventing `Over-fetching` and `Under-fetching`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1312
msgid "The GraphQL API can be expanded without breaking previous queries enabling easy API `evolution`."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-graphql.adoc:1314
#, no-wrap
msgid "Configuration Reference"
msgstr "配置参考"
