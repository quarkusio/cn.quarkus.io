# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-01-20 14:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.0/guides/quartz.adoc:6
#, no-wrap
msgid "Scheduling Periodic Tasks with Quartz"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:14
msgid "Modern applications often need to run specific tasks periodically.  In this guide, you learn how to schedule periodic clustered tasks using the http://www.quartz-scheduler.org/[Quartz] extension."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:18
msgid "If you only need to run in-memory scheduler use the xref:scheduler.adoc[Scheduler] extension."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/quartz.adoc:19
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: upstream/_versions/3.0/guides/quartz.adoc:24
#, no-wrap
msgid "Architecture"
msgstr "架构"

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:27
msgid "In this guide, we are going to expose one Rest API `tasks` to visualise the list of tasks created by a Quartz job running every 10 seconds."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/quartz.adoc:28
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:32
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议你按照下面几节的说明，一步一步地创建应用程序。然而，你可以直接进入已完成的例子。"

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:34
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或者下载一个 {quickstarts-archive-url}[存档]。"

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:36
msgid "The solution is located in the `quartz-quickstart` {quickstarts-tree-url}/quartz-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/quartz.adoc:37
#, no-wrap
msgid "Creating the Maven project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:40
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。用以下命令创建一个新项目："

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:46
msgid "It generates:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:48
msgid "the Maven structure"
msgstr "Maven的结构"

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:49
msgid "a landing page accessible on `http://localhost:8080`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:50
msgid "example `Dockerfile` files for both `native` and `jvm` modes"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:51
msgid "the application configuration file"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:53
msgid "The Maven project also imports the Quarkus Quartz extension."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:56
msgid "If you already have your Quarkus project configured, you can add the `quartz` extension to your project by running the following command in your project base directory:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:61
msgid "This will add the following to your build file:"
msgstr "这将在您的构建文件中添加以下内容："

#. type: Block title
#: upstream/_versions/3.0/guides/quartz.adoc:63
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:69
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-quartz</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/quartz.adoc:72
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:75
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-quartz\")\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/quartz.adoc:80
msgid "To use a JDBC store, the `quarkus-agroal` extension, which provides the datasource support, is also required."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/quartz.adoc:82
#, no-wrap
msgid "Creating the Task Entity"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:85
msgid "In the `org.acme.quartz` package, create the `Task` class, with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:89
#: upstream/_versions/3.0/guides/quartz.adoc:119
#: upstream/_versions/3.0/guides/quartz.adoc:150
#: upstream/_versions/3.0/guides/quartz.adoc:240
#: upstream/_versions/3.0/guides/quartz.adoc:264
#, no-wrap
msgid "package org.acme.quartz;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:93
#, no-wrap
msgid ""
"import jakarta.persistence.Entity;\n"
"import java.time.Instant;\n"
"import jakarta.persistence.Table;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:95
#, no-wrap
msgid "import io.quarkus.hibernate.orm.panache.PanacheEntity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:100
#, no-wrap
msgid ""
"@Entity\n"
"@Table(name=\"TASKS\")\n"
"public class Task extends PanacheEntity { <1>\n"
"    public Instant createdAt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:104
#, no-wrap
msgid ""
"    public Task() {\n"
"        createdAt = Instant.now();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:109
#, no-wrap
msgid ""
"    public Task(Instant time) {\n"
"        this.createdAt = time;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:111
msgid "Declare the entity using xref:hibernate-orm-panache.adoc[Panache]"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/quartz.adoc:112
#, no-wrap
msgid "Creating a scheduled job"
msgstr "创建一个计划作业"

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:115
msgid "In the `org.acme.quartz` package, create the `TaskBean` class, with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:121
#, no-wrap
msgid "import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:123
#, no-wrap
msgid "import jakarta.transaction.Transactional;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:125
#, no-wrap
msgid "import io.quarkus.scheduler.Scheduled;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:128
#, no-wrap
msgid ""
"@ApplicationScoped <1>\n"
"public class TaskBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:136
#, no-wrap
msgid ""
"    @Transactional\n"
"    @Scheduled(every = \"10s\", identity = \"task-job\") <2>\n"
"    void schedule() {\n"
"        Task task = new Task(); <3>\n"
"        task.persist(); <4>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:138
msgid "Declare the bean in the _application_ scope"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:139
msgid "Use the `@Scheduled` annotation to instruct Quarkus to run this method every 10 seconds and set the unique identifier for this job."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:140
msgid "Create a new `Task` with the current start time."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:141
msgid "Persist the task in database using xref:hibernate-orm-panache.adoc[Panache]."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/quartz.adoc:142
#, no-wrap
msgid "Scheduling Jobs Programmatically"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:146
msgid "It is also possible to leverage the Quartz API directly.  You can inject the underlying `org.quartz.Scheduler` in any bean:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:153
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class TaskBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:156
#, no-wrap
msgid ""
"    @Inject\n"
"    org.quartz.Scheduler quartz; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:171
#, no-wrap
msgid ""
"    void onStart(@Observes StartupEvent event) throws SchedulerException {\n"
"       JobDetail job = JobBuilder.newJob(MyJob.class)\n"
"                         .withIdentity(\"myJob\", \"myGroup\")\n"
"                         .build();\n"
"       Trigger trigger = TriggerBuilder.newTrigger()\n"
"                            .withIdentity(\"myTrigger\", \"myGroup\")\n"
"                            .startNow()\n"
"                            .withSchedule(\n"
"                               SimpleScheduleBuilder.simpleSchedule()\n"
"                                  .withIntervalInSeconds(10)\n"
"                                  .repeatForever())\n"
"                            .build();\n"
"       quartz.scheduleJob(job, trigger); <2>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:177
#, no-wrap
msgid ""
"    @Transactional\n"
"    void performTask() {\n"
"        Task task = new Task();\n"
"        task.persist();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:180
#, no-wrap
msgid ""
"    // A new instance of MyJob is created by Quartz for every job execution\n"
"    public static class MyJob implements Job {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:183
#, no-wrap
msgid ""
"       @Inject\n"
"       TaskBean taskBean;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:187
#, no-wrap
msgid ""
"       public void execute(JobExecutionContext context) throws JobExecutionException {\n"
"          taskBean.performTask(); <3>\n"
"       }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:190
#, no-wrap
msgid ""
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:192
msgid "Inject the underlying `org.quartz.Scheduler` instance."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:193
msgid "Schedule a new job using the Quartz API."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:194
msgid "Invoke the `TaskBean#performTask()` method from the job. Jobs are also xref:cdi.adoc[container-managed] beans if they belong to a link:cdi-reference[bean archive]."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:196
msgid "By default, the scheduler is not started unless a `@Scheduled` business method is found. You may need to force the start of the scheduler for \"pure\" programmatic scheduling. See also <<quartz-configuration-reference>>."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/quartz.adoc:197
#, no-wrap
msgid "Updating the application configuration file"
msgstr "更新该应用程序的配置文件"

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:200
msgid "Edit the `application.properties` file and add the below configuration:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:206
#, no-wrap
msgid ""
"# Quartz configuration\n"
"quarkus.quartz.clustered=true <1>\n"
"quarkus.quartz.store-type=jdbc-cmt <2>\n"
"quarkus.quartz.misfire-policy.task-job=ignore-misfire-policy <3>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:212
#, no-wrap
msgid ""
"# Datasource configuration.\n"
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.datasource.username=quarkus_test\n"
"quarkus.datasource.password=quarkus_test\n"
"quarkus.datasource.jdbc.url=jdbc:postgresql://localhost/quarkus_test\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:217
#, no-wrap
msgid ""
"# Hibernate configuration\n"
"quarkus.hibernate-orm.database.generation=none\n"
"quarkus.hibernate-orm.log.sql=true\n"
"quarkus.hibernate-orm.sql-load-script=no-file\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:225
#, no-wrap
msgid ""
"# flyway configuration\n"
"quarkus.flyway.connect-retries=10\n"
"quarkus.flyway.table=flyway_quarkus_history\n"
"quarkus.flyway.migrate-at-start=true\n"
"quarkus.flyway.baseline-on-migrate=true\n"
"quarkus.flyway.baseline-version=1.0\n"
"quarkus.flyway.baseline-description=Quartz\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:227
msgid "Indicate that the scheduler will be run in clustered mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:228
msgid "Use the database store to persist job related information so that they can be shared between nodes"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:229
msgid "The misfire policy can be configured for each job. `task-job` is the identity of the job."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:232
msgid "Valid misfire policy for cron jobs are: `smart-policy`, `ignore-misfire-policy`, `fire-now` and `cron-trigger-do-nothing`.  Valid misfire policy for interval jobs are: `smart-policy`, `ignore-misfire-policy`, `fire-now`, `simple-trigger-reschedule-now-with-existing-repeat-count`, `simple-trigger-reschedule-now-with-remaining-repeat-count`, `simple-trigger-reschedule-next-with-existing-count` and `simple-trigger-reschedule-next-with-remaining-count`."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/quartz.adoc:233
#, no-wrap
msgid "Creating a REST resource and a test"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:236
msgid "Create the `org.acme.quartz.TaskResource` class with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:242
#, no-wrap
msgid "import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:247
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:250
#, no-wrap
msgid ""
"@Path(\"/tasks\")\n"
"public class TaskResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:256
#, no-wrap
msgid ""
"    @GET\n"
"    public List<Task> listAll() {\n"
"        return Task.listAll(); <1>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:258
msgid "Retrieve the list of created tasks from the database"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:260
msgid "You also have the option to create a `org.acme.quartz.TaskResourceTest` test with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:266
#, no-wrap
msgid "import io.quarkus.test.junit.QuarkusTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:268
#, no-wrap
msgid "import static org.hamcrest.Matchers.greaterThanOrEqualTo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:270
#, no-wrap
msgid "import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:273
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:276
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class TaskResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:287
#, no-wrap
msgid ""
"    @Test\n"
"    public void tasks() throws InterruptedException {\n"
"        Thread.sleep(1000); // wait at least a second to have the first task created\n"
"        given()\n"
"                .when().get(\"/tasks\")\n"
"                .then()\n"
"                .statusCode(200)\n"
"                .body(\"size()\", is(greaterThanOrEqualTo(1))); <1>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:289
msgid "Ensure that we have a `200` response and at least one task created"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/quartz.adoc:290
#, no-wrap
msgid "Creating Quartz Tables"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:294
msgid "Add a SQL migration file named `src/main/resources/db/migration/V2.0.0\\__QuarkusQuartzTasks.sql` with the content copied from file with the content from link:{quickstarts-blob-url}/quartz-quickstart/src/main/resources/db/migration/V2.0.0__QuarkusQuartzTasks.sql[V2.0.0__QuarkusQuartzTasks.sql]."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/quartz.adoc:295
#, no-wrap
msgid "Configuring the load balancer"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:298
msgid "In the root directory, create a `nginx.conf` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:302
#, no-wrap
msgid "user  nginx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:306
#, no-wrap
msgid ""
"events {\n"
"    worker_connections   1000;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:315
#, no-wrap
msgid ""
"http {\n"
"        server {\n"
"              listen 8080;\n"
"              location / {\n"
"                proxy_pass http://tasks:8080; <1>\n"
"              }\n"
"        }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:317
msgid "Route all traffic to our tasks application"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/quartz.adoc:318
#, no-wrap
msgid "Setting Application Deployment"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:321
msgid "In the root directory, create a `docker-compose.yml` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:325
#, no-wrap
msgid "version: '3'\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:338
#, no-wrap
msgid ""
"services:\n"
"  tasks: <1>\n"
"    image: quarkus-quickstarts/quartz:1.0\n"
"    build:\n"
"      context: ./\n"
"      dockerfile: src/main/docker/Dockerfile.${QUARKUS_MODE:-jvm}\n"
"    environment:\n"
"      QUARKUS_DATASOURCE_URL: jdbc:postgresql://postgres/quarkus_test\n"
"    networks:\n"
"      - tasks-network\n"
"    depends_on:\n"
"      - postgres\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:349
#, no-wrap
msgid ""
"  nginx: <2>\n"
"    image: nginx:1.17.6\n"
"    volumes:\n"
"      - ./nginx.conf:/etc/nginx/nginx.conf:ro\n"
"    depends_on:\n"
"      - tasks\n"
"    ports:\n"
"      - 8080:8080\n"
"    networks:\n"
"      - tasks-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:361
#, no-wrap
msgid ""
"  postgres: <3>\n"
"    image: postgres:14.1\n"
"    container_name: quarkus_test\n"
"    environment:\n"
"      - POSTGRES_USER=quarkus_test\n"
"      - POSTGRES_PASSWORD=quarkus_test\n"
"      - POSTGRES_DB=quarkus_test\n"
"    ports:\n"
"      - 5432:5432\n"
"    networks:\n"
"      - tasks-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:365
#, no-wrap
msgid ""
"networks:\n"
"  tasks-network:\n"
"    driver: bridge\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:367
msgid "Define the tasks service"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:368
msgid "Define the nginx load balancer to route incoming traffic to an appropriate node"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:369
msgid "Define the configuration to run the database"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/quartz.adoc:370
#, no-wrap
msgid "Running the database"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:373
msgid "In a separate terminal, run the below command:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:377
#, no-wrap
msgid "docker-compose up postgres <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:379
msgid "Start the database instance using the configuration options supplied in the `docker-compose.yml` file"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/quartz.adoc:380
#, no-wrap
msgid "Run the application in Dev Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:383
msgid "Run the application with:"
msgstr "使用以下命令运行该应用程序:"

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:387
msgid "After a few seconds, open another terminal and run `curl localhost:8080/tasks` to verify that we have at least one task created."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:389
msgid "As usual, the application can be packaged using:"
msgstr "像往常一样，该应用程序能够使用以下方式进行打包:"

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:393
msgid "and executed with `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr "并可以使用 `java -jar target/quarkus-app/quarkus-run.jar`  来执行。"

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:395
#: upstream/_versions/3.0/guides/quartz.adoc:415
msgid "You can also generate the native executable with:"
msgstr "你也可以通过以下命令生成本地可执行文件:"

#. type: Title ==
#: upstream/_versions/3.0/guides/quartz.adoc:398
#, no-wrap
msgid "Packaging the application and run several instances"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:401
msgid "The application can be packaged using:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:405
msgid "Once the build is successful, run the below command:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:409
#, no-wrap
msgid "docker-compose up --scale tasks=2 --scale nginx=1 <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:411
msgid "Start two instances of the application and a load balancer"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:413
msgid "After a few seconds, in another terminal, run `curl localhost:8080/tasks` to verify that tasks were only created at different instants and in an interval of 10 seconds."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:419
msgid "It's the responsibility of the deployer to clear/remove the previous state, i.e. stale jobs and triggers. Moreover, the applications that form the \"Quartz cluster\" should be identical, otherwise an unpredictable result may occur."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/quartz.adoc:421
#, no-wrap
msgid "Configuring the Instance ID"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:424
msgid "By default, the scheduler is configured with a simple instance ID generator using the machine hostname and the current timestamp, so you don't need to worry about setting a appropriate `instance-id` for each node when running in clustered mode. However, you can define a specific `instance-id` by yourself setting a configuration property reference or using other generators."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:428
#, no-wrap
msgid "quarkus.quartz.instance-id=${HOST:AUTO} <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:430
msgid "This will expand the `HOST` environment variable and use `AUTO` as the default value if `HOST` is not set."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:432
msgid "The example below configure the generator `org.quartz.simpl.HostnameInstanceIdGenerator` named as `hostname`, so you can use its name as `instance-id` to be used. That generator uses just the machine hostname and can be appropriate in environments providing unique names for the nodes."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:437
#, no-wrap
msgid ""
"quarkus.quartz.instance-id=hostname\n"
"quarkus.quartz.instance-id-generators.hostname.class=org.quartz.simpl.HostnameInstanceIdGenerator\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:440
msgid "It's the responsibility of the deployer to define appropriate instance identifiers. Moreover, the applications that form the \"Quartz cluster\" should contain unique instance identifiers, otherwise an unpredictable result may occur. It's recommended to use an appropriate instance ID generator rather than specifying explicit identifiers."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/quartz.adoc:442
#, no-wrap
msgid "Registering Plugin and Listeners"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:445
msgid "You can register `plugins`, `job-listeners` and `trigger-listeners` through Quarkus configuration."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:447
msgid "The example below registers the plugin `org.quartz.plugins.history.LoggingJobHistoryPlugin` named as `jobHistory` with the property `jobSuccessMessage` defined as `Job [{1}.{0}] execution complete and reports: {8}`"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:452
#, no-wrap
msgid ""
"quarkus.quartz.plugins.jobHistory.class=org.quartz.plugins.history.LoggingJobHistoryPlugin\n"
"quarkus.quartz.plugins.jobHistory.properties.jobSuccessMessage=Job [{1}.{0}] execution complete and reports: {8}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/quartz.adoc:455
msgid "You can also register a listener programmatically with an injected `org.quartz.Scheduler`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/quartz.adoc:464
#, no-wrap
msgid ""
"public class MyListenerManager {\n"
"    void onStart(@Observes StartupEvent event, org.quartz.Scheduler scheduler) throws SchedulerException {\n"
"        scheduler.getListenerManager().addJobListener(new MyJogListener());\n"
"        scheduler.getListenerManager().addTriggerListener(new MyTriggerListener());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/quartz.adoc:467
#, no-wrap
msgid "Quartz Configuration Reference"
msgstr ""
