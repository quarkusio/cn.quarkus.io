# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-01-20 14:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:6
#, no-wrap
msgid "Using Apache Kafka with Schema Registry and Avro"
msgstr "使用Apache Kafka与模式仓库和Avro"

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:13
msgid "This guide shows how your Quarkus application can use Apache Kafka, https://avro.apache.org/docs/current/[Avro] serialized records, and connect to a schema registry (such as the https://docs.confluent.io/platform/current/schema-registry/index.html[Confluent Schema Registry] or https://www.apicur.io/registry/[Apicurio Registry])."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:16
msgid "If you are not familiar with Kafka and Kafka in Quarkus in particular, consider first going through the xref:kafka.adoc[Using Apache Kafka with Reactive Messaging] guide."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:17
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:23
#, no-wrap
msgid "Architecture"
msgstr "架构"

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:27
msgid "In this guide we are going to implement a REST resource, namely `MovieResource`, that will consume movie DTOs and put them in a Kafka topic."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:31
msgid "Then, we will implement a consumer that will consume and collect messages from the same topic.  The collected messages will be then exposed by another resource, `ConsumedMovieResource`, via https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events[Server-Sent Events]."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:35
msgid "The _Movies_ will be serialized and deserialized using Avro.  The schema, describing the _Movie_, is stored in Apicurio Registry.  The same concept applies if you are using the Confluent Avro _serde_ and Confluent Schema Registry."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:36
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:40
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议你按照下面几节的说明，一步一步地创建应用程序。然而，你可以直接进入已完成的例子。"

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:42
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或者下载一个 {quickstarts-archive-url}[存档]。"

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:44
msgid "The solution is located in the `kafka-avro-schema-quickstart` {quickstarts-tree-url}/kafka-avro-schema-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:45
#, no-wrap
msgid "Creating the Maven Project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:48
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。用以下命令创建一个新项目："

#. type: delimited block =
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:58
msgid "If you use Confluent Schema Registry, you don't need the `quarkus-apicurio-registry-avro` extension.  Instead, you need the `quarkus-confluent-registry-avro` extension and a few more dependencies.  See <<confluent>> for details."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:60
#, no-wrap
msgid "Avro schema"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:65
msgid "Apache Avro is a data serialization system. Data structures are described using schemas.  The first thing we need to do is to create a schema describing the `Movie` structure.  Create a file called `src/main/avro/movie.avsc` with the schema for our record (Kafka message):"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:82
#, no-wrap
msgid ""
"{\n"
"  \"namespace\": \"org.acme.kafka.quarkus\",\n"
"  \"type\": \"record\",\n"
"  \"name\": \"Movie\",\n"
"  \"fields\": [\n"
"    {\n"
"      \"name\": \"title\",\n"
"      \"type\": \"string\"\n"
"    },\n"
"    {\n"
"      \"name\": \"year\",\n"
"      \"type\": \"int\"\n"
"    }\n"
"  ]\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:85
msgid "If you build the project with:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:90
msgid "the `movies.avsc` will get compiled to a `Movie.java` file placed in the `target/generated-sources/avsc` directory."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:93
msgid "Take a look at the https://avro.apache.org/docs/current/spec.html#schemas[Avro specification] to learn more about the Avro syntax and supported types."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:95
msgid "With Quarkus, there's no need to use a specific Maven plugin to process the Avro schema, this is all done for you by the `quarkus-avro` extension!"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:97
msgid "If you run the project with:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:102
msgid "the changes you do to the schema file will be automatically applied to the generated Java files."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:103
#, no-wrap
msgid "The `Movie` producer"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:106
msgid "Having defined the schema, we can now jump to implementing the `MovieResource`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:109
msgid "Let's open the `MovieResource`, inject an https://quarkus.io/blog/reactive-messaging-emitter/[`Emitter`] of `Movie` DTO and implement a `@POST` method that consumes `Movie` and sends it through the `Emitter`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:113
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:180
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:440
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:568
#, no-wrap
msgid "package org.acme.kafka;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:118
#, no-wrap
msgid ""
"import org.acme.kafka.quarkus.Movie;\n"
"import org.eclipse.microprofile.reactive.messaging.Channel;\n"
"import org.eclipse.microprofile.reactive.messaging.Emitter;\n"
"import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:122
#, no-wrap
msgid ""
"import jakarta.ws.rs.POST;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.core.Response;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:126
#, no-wrap
msgid ""
"@Path(\"/movies\")\n"
"public class MovieResource {\n"
"    private static final Logger LOGGER = Logger.getLogger(MovieResource.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:129
#, no-wrap
msgid ""
"    @Channel(\"movies\")\n"
"    Emitter<Movie> emitter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:136
#, no-wrap
msgid ""
"    @POST\n"
"    public Response enqueueMovie(Movie movie) {\n"
"        LOGGER.infof(\"Sending movie %s to Kafka\", movie.getTitle());\n"
"        emitter.send(movie);\n"
"        return Response.accepted().build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:138
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:528
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:142
msgid "Now, we need to _map_ the `movies` channel (the `Emitter` emits to this channel) to a Kafka topic.  To achieve this, edit the `application.properties` file, and add the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:147
#, no-wrap
msgid ""
"# set the connector for the outgoing channel to `smallrye-kafka`\n"
"mp.messaging.outgoing.movies.connector=smallrye-kafka\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:150
#, no-wrap
msgid ""
"# set the topic name for the channel to `movies`\n"
"mp.messaging.outgoing.movies.topic=movies\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:153
#, no-wrap
msgid ""
"# automatically register the schema with the registry, if not present\n"
"mp.messaging.outgoing.movies.apicurio.registry.auto-register=true\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:160
msgid "You might have noticed that we didn't define the `value.serializer`.  That's because Quarkus can xref:kafka.adoc#serialization-autodetection[autodetect] that `io.apicurio.registry.serde.avro.AvroKafkaSerializer` is appropriate here, based on the `@Channel` declaration, structure of the `Movie` type, and presence of the Apicurio Registry libraries.  We still have to define the `apicurio.registry.auto-register` property."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:166
msgid "If you use Confluent Schema Registry, you don't have to configure `value.serializer` either.  It is also detected automatically.  The Confluent Schema Registry analogue of `apicurio.registry.auto-register` is called `auto.register.schemas`.  It defaults to `true`, so it doesn't have to be configured in this example.  It can be explicitly set to `false` if you want to disable automatic schema registration."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:168
#, no-wrap
msgid "The `Movie` consumer"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:173
msgid "So, we can write records into Kafka containing our `Movie` data.  That data is serialized using Avro.  Now, it's time to implement a consumer for them."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:176
msgid "Let's create `ConsumedMovieResource` that will consume `Movie` messages from the `movies-from-kafka` channel and will expose it via Server-Sent Events:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:186
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:190
#, no-wrap
msgid ""
"import org.acme.kafka.quarkus.Movie;\n"
"import org.eclipse.microprofile.reactive.messaging.Channel;\n"
"import org.jboss.resteasy.reactive.RestStreamElementType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:192
#, no-wrap
msgid "import io.smallrye.mutiny.Multi;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:196
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@Path(\"/consumed-movies\")\n"
"public class ConsumedMovieResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:199
#, no-wrap
msgid ""
"    @Channel(\"movies-from-kafka\")\n"
"    Multi<Movie> movies;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:207
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.SERVER_SENT_EVENTS)\n"
"    @RestStreamElementType(MediaType.TEXT_PLAIN)\n"
"    public Multi<String> stream() {\n"
"        return movies.map(movie -> String.format(\"'%s' from %s\", movie.getTitle(), movie.getYear()));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:211
msgid "The last bit of the application's code is the configuration of the `movies-from-kafka` channel in `application.properties`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:216
#, no-wrap
msgid ""
"# set the connector for the incoming channel to `smallrye-kafka`\n"
"mp.messaging.incoming.movies-from-kafka.connector=smallrye-kafka\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:219
#, no-wrap
msgid ""
"# set the topic name for the channel to `movies`\n"
"mp.messaging.incoming.movies-from-kafka.topic=movies\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:222
#, no-wrap
msgid ""
"# disable auto-commit, Reactive Messaging handles it itself\n"
"mp.messaging.incoming.movies-from-kafka.enable.auto.commit=false\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:224
#, no-wrap
msgid "mp.messaging.incoming.movies-from-kafka.auto.offset.reset=earliest\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:231
msgid "You might have noticed that we didn't define the `value.deserializer`.  That's because Quarkus can xref:kafka.adoc#serialization-autodetection[autodetect] that `io.apicurio.registry.serde.avro.AvroKafkaDeserializer` is appropriate here, based on the `@Channel` declaration, structure of the `Movie` type, and presence of the Apicurio Registry libraries.  We don't have to define the `apicurio.registry.use-specific-avro-reader` property either, that is also configured automatically."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:234
msgid "If you use Confluent Schema Registry, you don't have to configure `value.deserializer` or `specific.avro.reader` either.  They are both detected automatically."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:236
#, no-wrap
msgid "Running the application"
msgstr "运行应用程序"

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:239
msgid "Start the application in dev mode:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:244
msgid "Kafka broker and Apicurio Registry instance are started automatically thanks to Dev Services.  See xref:kafka-dev-services.adoc[Dev Services for Kafka] and xref:apicurio-registry-dev-services.adoc[Dev Services for Apicurio Registry] for more details."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:249
msgid "You might have noticed that we didn't configure the schema registry URL anywhere.  This is because Dev Services for Apicurio Registry configures all Kafka channels in SmallRye Reactive Messaging to use the automatically started registry instance."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:252
msgid "Apicurio Registry, in addition to its native API, also exposes an endpoint that is API-compatible with Confluent Schema Registry.  Therefore, this automatic configuration works both for Apicurio Registry serde and Confluent Schema Registry serde."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:255
msgid "However, note that there's no Dev Services support for running Confluent Schema Registry itself.  If you want to use a running instance of Confluent Schema Registry, configure its URL, together with the URL of a Kafka broker:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:260
#, no-wrap
msgid ""
"kafka.bootstrap.servers=PLAINTEXT://localhost:9092\n"
"mp.messaging.connector.smallrye-kafka.schema.registry.url=http://localhost:8081\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:264
msgid "In the second terminal, query the `ConsumedMovieResource` resource with `curl`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:268
#, no-wrap
msgid "curl -N http://localhost:8080/consumed-movies\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:271
msgid "In the third one, post a few movies:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:278
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"  --request POST \\\n"
"  --data '{\"title\":\"The Shawshank Redemption\",\"year\":1994}' \\\n"
"  http://localhost:8080/movies\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:283
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"  --request POST \\\n"
"  --data '{\"title\":\"The Godfather\",\"year\":1972}' \\\n"
"  http://localhost:8080/movies\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:288
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"  --request POST \\\n"
"  --data '{\"title\":\"The Dark Knight\",\"year\":2008}' \\\n"
"  http://localhost:8080/movies\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:293
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"  --request POST \\\n"
"  --data '{\"title\":\"12 Angry Men\",\"year\":1957}' \\\n"
"  http://localhost:8080/movies\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:296
msgid "Observe what is printed in the second terminal. You should see something along the lines of:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:300
#, no-wrap
msgid "data:'The Shawshank Redemption' from 1994\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:302
#, no-wrap
msgid "data:'The Godfather' from 1972\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:304
#, no-wrap
msgid "data:'The Dark Knight' from 2008\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:306
#, no-wrap
msgid "data:'12 Angry Men' from 1957\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:308
#, no-wrap
msgid "Running in JVM or Native mode"
msgstr "在JVM或本地模式下运行"

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:312
msgid "When not running in dev or test mode, you will need to start your own Kafka broker and Apicurio Registry.  The easiest way to get them running is to use `docker-compose` to start the appropriate containers."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:315
msgid "If you use Confluent Schema Registry, you already have a Kafka broker and Confluent Schema Registry instance running and configured.  You can ignore the `docker-compose` instructions here, as well as the Apicurio Registry configuration."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:317
msgid "Create a `docker-compose.yaml` file at the root of the project with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:321
#, no-wrap
msgid "version: '2'\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:323
#, no-wrap
msgid "services:\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:334
#, no-wrap
msgid ""
"  zookeeper:\n"
"    image: quay.io/strimzi/kafka:0.22.1-kafka-2.7.0\n"
"    command: [\n"
"        \"sh\", \"-c\",\n"
"        \"bin/zookeeper-server-start.sh config/zookeeper.properties\"\n"
"    ]\n"
"    ports:\n"
"      - \"2181:2181\"\n"
"    environment:\n"
"      LOG_DIR: /tmp/logs\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:350
#, no-wrap
msgid ""
"  kafka:\n"
"    image: quay.io/strimzi/kafka:0.22.1-kafka-2.7.0\n"
"    command: [\n"
"        \"sh\", \"-c\",\n"
"        \"bin/kafka-server-start.sh config/server.properties --override listeners=$${KAFKA_LISTENERS} --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect=$${KAFKA_ZOOKEEPER_CONNECT}\"\n"
"    ]\n"
"    depends_on:\n"
"      - zookeeper\n"
"    ports:\n"
"      - \"9092:9092\"\n"
"    environment:\n"
"      LOG_DIR: \"/tmp/logs\"\n"
"      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092\n"
"      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092\n"
"      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:359
#, no-wrap
msgid ""
"  schema-registry:\n"
"    image: apicurio/apicurio-registry-mem:2.1.5.Final\n"
"    ports:\n"
"      - 8081:8080\n"
"    depends_on:\n"
"      - kafka\n"
"    environment:\n"
"      QUARKUS_PROFILE: prod\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:362
msgid "Before starting the application, let's first start the Kafka broker and Apicurio Registry:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:366
#, no-wrap
msgid "docker-compose up\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:370
msgid "To stop the containers, use `docker-compose down`. You can also clean up the containers with `docker-compose rm`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:372
msgid "You can build the application with:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:376
msgid "And run it in JVM mode with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:380
#, no-wrap
msgid "java -Dmp.messaging.connector.smallrye-kafka.apicurio.registry.url=http://localhost:8081/apis/registry/v2 -jar target/quarkus-app/quarkus-run.jar\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:384
msgid "By default, the application tries to connect to a Kafka broker listening at `localhost:9092`.  You can configure the bootstrap server using: `java -Dkafka.bootstrap.servers=\\... -jar target/quarkus-app/quarkus-run.jar`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:386
msgid "Specifying the registry URL on the command line is not very convenient, so you can add a configuration property only for the `prod` profile:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:390
#, no-wrap
msgid "%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.url=http://localhost:8081/apis/registry/v2\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:393
msgid "You can build a native executable with:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:397
msgid "and run it with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:401
#, no-wrap
msgid "./target/kafka-avro-schema-quickstart-1.0.0-SNAPSHOT-runner -Dkafka.bootstrap.servers=localhost:9092\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:403
#, no-wrap
msgid "Testing the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:408
msgid "As mentioned above, Dev Services for Kafka and Apicurio Registry automatically start and configure a Kafka broker and Apicurio Registry instance in dev mode and for tests.  Hence, we don't have to set up Kafka and Apicurio Registry ourselves.  We can just focus on writing the test."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:410
msgid "First, let's add test dependencies on REST Client and Awaitility to the build file:"
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:412
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:541
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:632
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:696
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:425
#, no-wrap
msgid ""
"<!-- we'll use JAX-RS Client for talking to the SSE endpoint -->\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-rest-client-reactive</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>org.awaitility</groupId>\n"
"    <artifactId>awaitility</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:428
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:558
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:667
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:736
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:432
#, no-wrap
msgid ""
"testImplementation(\"io.quarkus:quarkus-rest-client-reactive\")\n"
"testImplementation(\"org.awaitility:awaitility\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:436
msgid "In the test, we will send movies in a loop and check if the `ConsumedMovieResource` returns what we send."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:447
#, no-wrap
msgid ""
"import io.quarkus.test.common.QuarkusTestResource;\n"
"import io.quarkus.test.common.http.TestHTTPResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.restassured.http.ContentType;\n"
"import org.hamcrest.Matchers;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:457
#, no-wrap
msgid ""
"import jakarta.ws.rs.client.Client;\n"
"import jakarta.ws.rs.client.ClientBuilder;\n"
"import jakarta.ws.rs.client.WebTarget;\n"
"import jakarta.ws.rs.sse.SseEventSource;\n"
"import java.net.URI;\n"
"import java.util.List;\n"
"import java.util.concurrent.CopyOnWriteArrayList;\n"
"import java.util.concurrent.ExecutorService;\n"
"import java.util.concurrent.Executors;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:463
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static java.util.concurrent.TimeUnit.MILLISECONDS;\n"
"import static java.util.concurrent.TimeUnit.SECONDS;\n"
"import static org.awaitility.Awaitility.await;\n"
"import static org.hamcrest.MatcherAssert.assertThat;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:466
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class MovieResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:469
#, no-wrap
msgid ""
"    @TestHTTPResource(\"/consumed-movies\")\n"
"    URI consumedMovies;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:475
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHelloEndpoint() throws InterruptedException {\n"
"        // create a client for `ConsumedMovieResource` and collect the consumed resources in a list\n"
"        Client client = ClientBuilder.newClient();\n"
"        WebTarget target = client.target(consumedMovies);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:477
#, no-wrap
msgid "        List<String> received = new CopyOnWriteArrayList<>();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:480
#, no-wrap
msgid ""
"        SseEventSource source = SseEventSource.target(target).build();\n"
"        source.register(inboundSseEvent -> received.add(inboundSseEvent.readData()));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:483
#, no-wrap
msgid ""
"        // in a separate thread, feed the `MovieResource`\n"
"        ExecutorService movieSender = startSendingMovies();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:485
#, no-wrap
msgid "        source.open();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:491
#, no-wrap
msgid ""
"        // check if, after at most 5 seconds, we have at least 2 items collected, and they are what we expect\n"
"        await().atMost(5, SECONDS).until(() -> received.size() >= 2);\n"
"        assertThat(received, Matchers.hasItems(\"'The Shawshank Redemption' from 1994\",\n"
"                \"'12 Angry Men' from 1957\"));\n"
"        source.close();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:496
#, no-wrap
msgid ""
"        // shutdown the executor that is feeding the `MovieResource`\n"
"        movieSender.shutdownNow();\n"
"        movieSender.awaitTermination(5, SECONDS);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:508
#, no-wrap
msgid ""
"    private ExecutorService startSendingMovies() {\n"
"        ExecutorService executorService = Executors.newSingleThreadExecutor();\n"
"        executorService.execute(() -> {\n"
"            while (true) {\n"
"                given()\n"
"                        .contentType(ContentType.JSON)\n"
"                        .body(\"{\\\"title\\\":\\\"The Shawshank Redemption\\\",\\\"year\\\":1994}\")\n"
"                .when()\n"
"                        .post(\"/movies\")\n"
"                .then()\n"
"                        .statusCode(202);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:516
#, no-wrap
msgid ""
"                given()\n"
"                        .contentType(ContentType.JSON)\n"
"                        .body(\"{\\\"title\\\":\\\"12 Angry Men\\\",\\\"year\\\":1957}\")\n"
"                .when()\n"
"                        .post(\"/movies\")\n"
"                .then()\n"
"                        .statusCode(202);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:526
#, no-wrap
msgid ""
"                try {\n"
"                    Thread.sleep(200L);\n"
"                } catch (InterruptedException e) {\n"
"                    break;\n"
"                }\n"
"            }\n"
"        });\n"
"        return executorService;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:533
msgid "We modified the `MovieResourceTest` that was generated together with the project. This test class has a subclass, `NativeMovieResourceIT`, that runs the same test against the native executable.  To run it, execute:"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:536
#, no-wrap
msgid "Manual setup"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:539
msgid "If we couldn't use Dev Services and wanted to start a Kafka broker and Apicurio Registry instance manually, we would define a xref:getting-started-testing.adoc#quarkus-test-resource[QuarkusTestResourceLifecycleManager]."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:555
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.strimzi</groupId>\n"
"    <artifactId>strimzi-test-container</artifactId>\n"
"    <version>0.22.1</version>\n"
"    <scope>test</scope>\n"
"    <exclusions>\n"
"        <exclusion>\n"
"            <groupId>org.apache.logging.log4j</groupId>\n"
"            <artifactId>log4j-core</artifactId>\n"
"        </exclusion>\n"
"    </exclusions>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:563
#, no-wrap
msgid ""
"testImplementation(\"io.strimzi:strimzi-test-container:0.22.1\") {\n"
"    exclude group: \"org.apache.logging.log4j\", module: \"log4j-core\"\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:571
#, no-wrap
msgid ""
"import java.util.HashMap;\n"
"import java.util.Map;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:573
#, no-wrap
msgid "import org.testcontainers.containers.GenericContainer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:576
#, no-wrap
msgid ""
"import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n"
"import io.strimzi.StrimziKafkaContainer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:578
#, no-wrap
msgid "public class KafkaAndSchemaRegistryTestResource implements QuarkusTestResourceLifecycleManager {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:580
#, no-wrap
msgid "    private final StrimziKafkaContainer kafka = new StrimziKafkaContainer();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:582
#, no-wrap
msgid "    private GenericContainer<?> registry;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:596
#, no-wrap
msgid ""
"    @Override\n"
"    public Map<String, String> start() {\n"
"        kafka.start();\n"
"        registry = new GenericContainer<>(\"apicurio/apicurio-registry-mem:2.1.5.Final\")\n"
"                .withExposedPorts(8080)\n"
"                .withEnv(\"QUARKUS_PROFILE\", \"prod\");\n"
"        registry.start();\n"
"        Map<String, String> properties = new HashMap<>();\n"
"        properties.put(\"mp.messaging.connector.smallrye-kafka.apicurio.registry.url\",\n"
"                \"http://\" + registry.getHost() + \":\" + registry.getMappedPort(8080) + \"/apis/registry/v2\");\n"
"        properties.put(\"kafka.bootstrap.servers\", kafka.getBootstrapServers());\n"
"        return properties;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:603
#, no-wrap
msgid ""
"    @Override\n"
"    public void stop() {\n"
"        registry.stop();\n"
"        kafka.stop();\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:612
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(KafkaAndSchemaRegistryTestResource.class)\n"
"public class MovieResourceTest {\n"
"    ...\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:615
#, no-wrap
msgid "Using compatible versions of the Apicurio Registry"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:620
msgid "The `quarkus-apicurio-registry-avro` extension depends on recent versions of Apicurio Registry client, and most versions of Apicurio Registry server and client are backwards compatible.  For some you need to make sure that the client used by Serdes is compatible with the server."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:622
msgid "For example, with Apicurio dev service if you set the image name to use version `2.1.5.Final`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:626
#, no-wrap
msgid "quarkus.apicurio-registry.devservices.image-name=quay.io/apicurio/apicurio-registry-mem:2.1.5.Final\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:630
msgid "You need to make sure that `apicurio-registry-serdes-avro-serde` dependency and the REST client `apicurio-common-rest-client-vertx` dependency are set to compatible versions:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:664
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-apicurio-registry-avro</artifactId>\n"
"    <exclusions>\n"
"        <exclusion>\n"
"            <groupId>io.apicurio</groupId>\n"
"            <artifactId>apicurio-common-rest-client-vertx</artifactId>\n"
"        </exclusion>\n"
"        <exclusion>\n"
"            <groupId>io.apicurio</groupId>\n"
"            <artifactId>apicurio-registry-serdes-avro-serde</artifactId>\n"
"        </exclusion>\n"
"    </exclusions>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.apicurio</groupId>\n"
"    <artifactId>apicurio-registry-serdes-avro-serde</artifactId>\n"
"    <version>2.1.5.Final</version>\n"
"    <exclusions>\n"
"        <exclusion>\n"
"            <groupId>io.apicurio</groupId>\n"
"            <artifactId>apicurio-common-rest-client-jdk</artifactId>\n"
"        </exclusion>\n"
"    </exclusions>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.apicurio</groupId>\n"
"    <artifactId>apicurio-common-rest-client-vertx</artifactId>\n"
"    <version>0.1.5.Final</version>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:671
#, no-wrap
msgid ""
"dependencies {\n"
"    implementation(platform(\"io.quarkus.platform:quarkus-bom:2.12.3.Final\"))\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:673
#, no-wrap
msgid "    ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:687
#, no-wrap
msgid ""
"    implementation(\"io.quarkus:quarkus-apicurio-registry-avro\")\n"
"    implementation(\"io.apicurio:apicurio-registry-serdes-avro-serde\") {\n"
"        exclude group: \"io.apicurio\", module: \"apicurio-common-rest-client-jdk\"\n"
"        version {\n"
"            strictly \"2.1.5.Final\"\n"
"        }\n"
"    }\n"
"    implementation(\"io.apicurio:apicurio-common-rest-client-vertx\") {\n"
"        version {\n"
"            strictly \"0.1.5.Final\"\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:690
#, no-wrap
msgid "Using the Confluent Schema Registry"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:694
msgid "If you want to use the Confluent Schema Registry, you need the `quarkus-confluent-registry-avro` extension, instead of the `quarkus-apicurio-registry-avro` extension.  Also, you need to add a few dependencies and a custom Maven repository to your `pom.xml` / `build.gradle` file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:722
#, no-wrap
msgid ""
"<dependencies>\n"
"    ...\n"
"    <!-- the extension -->\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-confluent-registry-avro</artifactId>\n"
"    </dependency>\n"
"    <!-- Confluent registry libraries use JAX-RS client -->\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-rest-client-reactive</artifactId>\n"
"    </dependency>\n"
"    <dependency>\n"
"        <groupId>io.confluent</groupId>\n"
"        <artifactId>kafka-avro-serializer</artifactId>\n"
"        <version>7.2.0</version>\n"
"        <exclusions>\n"
"            <exclusion>\n"
"                <groupId>jakarta.ws.rs</groupId>\n"
"                <artifactId>jakarta.ws.rs-api</artifactId>\n"
"            </exclusion>\n"
"        </exclusions>\n"
"    </dependency>\n"
"</dependencies>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:733
#, no-wrap
msgid ""
"<repositories>\n"
"    <!-- io.confluent:kafka-avro-serializer is only available from this repository: -->\n"
"    <repository>\n"
"        <id>confluent</id>\n"
"        <url>https://packages.confluent.io/maven/</url>\n"
"        <snapshots>\n"
"            <enabled>false</enabled>\n"
"        </snapshots>\n"
"    </repository>\n"
"</repositories>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:740
#, no-wrap
msgid ""
"repositories {\n"
"    ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:745
#, no-wrap
msgid ""
"    maven {\n"
"        url \"https://packages.confluent.io/maven/\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:748
#, no-wrap
msgid ""
"dependencies {\n"
"    ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:750
#, no-wrap
msgid "    implementation(\"io.quarkus:quarkus-confluent-registry-avro\")\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:753
#, no-wrap
msgid ""
"    // Confluent registry libraries use JAX-RS client\n"
"    implementation(\"io.quarkus:quarkus-rest-client-reactive\")\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:758
#, no-wrap
msgid ""
"    implementation(\"io.confluent:kafka-avro-serializer:7.2.0\") {\n"
"        exclude group: \"jakarta.ws.rs\", module: \"jakarta.ws.rs-api\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:762
msgid "In JVM mode, any version of `io.confluent:kafka-avro-serializer` can be used.  In native mode, Quarkus only supports the following versions:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:764
msgid "6.2.x"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:765
msgid "7.0.x"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:766
msgid "7.1.x"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:767
msgid "7.2.x"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:769
msgid "For any other versions, the native configuration may need to be adjusted."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:770
#, no-wrap
msgid "Avro code generation details"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:774
msgid "In this guide we used the Quarkus code generation mechanism to generate Java files from Avro schema."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:776
msgid "Under the hood, the mechanism uses `org.apache.avro:avro-compiler`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:778
msgid "You can use the following configuration properties to alter how it works:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:782
msgid "`avro.codegen.[avsc|avdl|avpr].imports` - a list of files or directories that should be compiled first thus making them importable by subsequently compiled schemas. Note that imported files should not reference each other. All paths should be relative to the `src/[main|test]/avro` directory, or `avro` sub-directory in any source directory configured by the build system. Passed as a comma-separated list."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:784
msgid "`avro.codegen.stringType` - the Java type to use for Avro strings. May be one of `CharSequence`, `String` or `Utf8`. Defaults to `String`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:786
msgid "`avro.codegen.createOptionalGetters` - enables generating the `getOptional...` methods that return an Optional of the requested type. Defaults to `false`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:787
msgid "`avro.codegen.enableDecimalLogicalType` - determines whether to use Java classes for decimal types, defaults to `false`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:789
msgid "`avro.codegen.createSetters` - determines whether to create setters for the fields of the record.  Defaults to `false`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:791
msgid "`avro.codegen.gettersReturnOptional` - enables generating `get...` methods that return an Optional of the requested type. Defaults to `false`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:794
msgid "`avro.codegen.optionalGettersForNullableFieldsOnly`, works in conjunction with `gettersReturnOptional` option.  If it is set, `Optional` getters will be generated only for fields that are nullable. If the field is mandatory, regular getter will be generated. Defaults to `false`"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:795
#, no-wrap
msgid "Further reading"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:798
msgid "link:https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/3.4/kafka/kafka.html[SmallRye Reactive Messaging Kafka] documentation"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kafka-schema-registry-avro.adoc:799
msgid "link:https://quarkus.io/blog/kafka-avro/[How to Use Kafka, Schema Registry and Avro with Quarkus] - a blog post on which the guide is based. It gives a good introduction to Avro and the concept of schema registry"
msgstr ""
