# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-01-20 14:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.0/guides/capabilities.adoc:6
#, no-wrap
msgid "Extension Capabilities"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/capabilities.adoc:12
msgid "Quarkus extensions may provide certain capabilities and require certain capabilities to be provided by other extensions in an application to function properly."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/capabilities.adoc:14
msgid "A capability represents a technical aspect, for example, it could be an implementation of some functionality, a contract or a specification. Each capability has a name which should follow the Java package naming convention, e.g. `io.quarkus.rest`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/capabilities.adoc:16
msgid "Capability promises and requirements are described in Quarkus extension descriptors - `META-INF/quarkus-extension.properties` entries of the runtime extension JAR artifacts."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/capabilities.adoc:18
msgid "Only a single provider of any given capability is allowed in an application. If more than one provider of a capability is detected, the application build will fail with the corresponding error message."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/capabilities.adoc:20
msgid "If one extension requires a certain capability, there must be another one among the application dependencies that provides that capability, otherwise the build will fail with the corresponding error message."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/capabilities.adoc:22
msgid "At build time all the capabilities found in the application will be aggregated in an instance of the `io.quarkus.deployment.Capabilities` build item that extension build steps can inject to check whether a given capability is available or not."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/capabilities.adoc:23
#, no-wrap
msgid "Declaring capabilities"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/capabilities.adoc:26
msgid "The `quarkus-extension-maven-plugin:extension-descriptor` Maven goal and the `extensionDescriptor` Gradle task, that generate extension descriptors, allow configuring provided and required capabilities in the following way:"
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/capabilities.adoc:28
#: upstream/_versions/3.0/guides/capabilities.adoc:90
#, no-wrap
msgid "Maven"
msgstr "Maven"

#. type: delimited block -
#: upstream/_versions/3.0/guides/capabilities.adoc:42
#, no-wrap
msgid ""
"<plugin>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-extension-maven-plugin</artifactId>\n"
"    <configuration>\n"
"        <capabilities>\n"
"            <provides>io.quarkus.hibernate.orm</provides> <1>\n"
"            <requires>io.quarkus.agroal</requires> <2>\n"
"        </capabilities>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/capabilities.adoc:44
#: upstream/_versions/3.0/guides/capabilities.adoc:61
#: upstream/_versions/3.0/guides/capabilities.adoc:80
msgid "the extension provides the `io.quarkus.hibernate.orm` capability (multiple `provides` elements are allowed)"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/capabilities.adoc:45
#: upstream/_versions/3.0/guides/capabilities.adoc:62
#: upstream/_versions/3.0/guides/capabilities.adoc:81
msgid "the extension requires the `io.quarkus.agroal` capability to be provided to function properly (multiple `requires` elements are allowed)"
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/capabilities.adoc:49
#: upstream/_versions/3.0/guides/capabilities.adoc:118
#, no-wrap
msgid "Gradle (Groovy DSL)"
msgstr "Gradle (Groovy DSL)"

#. type: delimited block -
#: upstream/_versions/3.0/guides/capabilities.adoc:59
#, no-wrap
msgid ""
"quarkusExtension {\n"
"    capabilities {\n"
"        provides 'io.quarkus.rest' <1>\n"
"        requires 'io.quarkus.resteasy' <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/capabilities.adoc:64
#: upstream/_versions/3.0/guides/capabilities.adoc:83
msgid "The Gradle extension plugin is still experimental and may change in the future."
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/capabilities.adoc:68
#: upstream/_versions/3.0/guides/capabilities.adoc:134
#, no-wrap
msgid "Gradle (Kotlin DSL)"
msgstr "或者，如果您使用Gradle Kotlin DSL。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/capabilities.adoc:78
#, no-wrap
msgid ""
"quarkusExtension {\n"
"    capabilities {\n"
"        provides(\"io.quarkus.rest\") <1>\n"
"        requires(\"io.quarkus.resteasy\") <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/capabilities.adoc:85
#, no-wrap
msgid "Conditional capability promises and requirements"
msgstr ""

#. type: delimited block *
#: upstream/_versions/3.0/guides/capabilities.adoc:88
msgid "A capability may be provided or required only if a certain condition is satisfied, for example, if a certain configuration option is enabled or based on some other condition. Here is how a conditional capability promise can be configured:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/capabilities.adoc:106
#, no-wrap
msgid ""
"<plugin>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-extension-maven-plugin</artifactId>\n"
"    <configuration>\n"
"        <capabilities>\n"
"            <providesIf> <1>\n"
"                <positive>io.quarkus.container.image.openshift.deployment.OpenshiftBuild</positive> <2>\n"
"                <name>io.quarkus.container.image.openshift</name> <3>\n"
"            </providesIf>\n"
"        </capabilities>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/capabilities.adoc:108
msgid "declaration of a conditional capability"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/capabilities.adoc:109
#: upstream/_versions/3.0/guides/capabilities.adoc:129
#: upstream/_versions/3.0/guides/capabilities.adoc:145
msgid "condition that must be resolved to `true` by a class implementing `java.util.function.BooleanSupplier`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/capabilities.adoc:110
msgid "provided capability name"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/capabilities.adoc:112
msgid "`providesIf` allows listing multiple `<positive>` as well as `<negative>` elements."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/capabilities.adoc:114
msgid "The corresponding `requiresIf` element is also supported."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/capabilities.adoc:127
#, no-wrap
msgid ""
"quarkusExtension {\n"
"    capabilities {\n"
"        provides 'io.quarkus.container.image.openshift' onlyIf ['io.quarkus.container.image.openshift.deployment.OpenshiftBuild'] <1>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/capabilities.adoc:131
msgid "It is possible to specify `onlyIfNot` conditions as well. Conditions can also be set for required capabilities."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/capabilities.adoc:143
#, no-wrap
msgid ""
"quarkusExtension {\n"
"    capabilities {\n"
"        provides(\"io.quarkus.container.image.openshift\").onlyIf([\"io.quarkus.container.image.openshift.deployment.OpenshiftBuild\"]) <1>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/capabilities.adoc:147
msgid "It is possible to specify `onlyIfNot` conditions as well. . Conditions can also be set for required capabilities."
msgstr ""

#. type: delimited block *
#: upstream/_versions/3.0/guides/capabilities.adoc:150
msgid "In this case, `io.quarkus.container.image.openshift.deployment.OpenshiftBuild` should be included in one of the extension deployment dependencies and implement `java.util.function.BooleanSupplier`. At build time, the Quarkus bootstrap will create an instance of it and register `io.quarkus.container.image.openshift` capability only if its `getAsBoolean()` method returns true."
msgstr ""

#. type: delimited block *
#: upstream/_versions/3.0/guides/capabilities.adoc:152
msgid "An implementation of the `OpenshiftBuild` could look like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/capabilities.adoc:155
#, no-wrap
msgid "import java.util.function.BooleanSupplier;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/capabilities.adoc:157
#, no-wrap
msgid "import io.quarkus.container.image.deployment.ContainerImageConfig;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/capabilities.adoc:159
#, no-wrap
msgid "public class OpenshiftBuild implements BooleanSupplier {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/capabilities.adoc:161
#, no-wrap
msgid "    private ContainerImageConfig containerImageConfig;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/capabilities.adoc:165
#, no-wrap
msgid ""
"    OpenshiftBuild(ContainerImageConfig containerImageConfig) {\n"
"        this.containerImageConfig = containerImageConfig;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/capabilities.adoc:171
#, no-wrap
msgid ""
"    @Override\n"
"    public boolean getAsBoolean() {\n"
"        return containerImageConfig.builder.map(b -> b.equals(OpenshiftProcessor.OPENSHIFT)).orElse(true);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/capabilities.adoc:173
#, no-wrap
msgid "CapabilityBuildItem"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/capabilities.adoc:176
msgid "Each provided capability will be represented with an instance of `io.quarkus.deployment.builditem.CapabilityBuildItem` at build time. Theoretically, `CapabilityBuildItem`'s could be produced by extension build steps directly, bypassing the corresponding declaration in the extension descriptors. However, this way of providing capabilities should be avoided, unless there is a very good reason not to declare a capability in the descriptor."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/capabilities.adoc:178
msgid "Capabilities produced from extension build steps aren't available for the Quarkus dev tools. As a consequences, such capabilities can not be taken into account when analyzing extension compatibility during project creation or when adding new extensions to a project."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/capabilities.adoc:179
#, no-wrap
msgid "Querying capabilities"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/capabilities.adoc:182
msgid "All the capabilities found in an application will be aggregated during the build in an instance of `io.quarkus.deployment.Capabilities` build item, which can be injected by extension build steps to check whether a certain capability is present or not. E.g."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/capabilities.adoc:194
#, no-wrap
msgid ""
"    @BuildStep\n"
"    HealthBuildItem addHealthCheck(Capabilities capabilities, DataSourcesBuildTimeConfig dataSourcesBuildTimeConfig) {\n"
"        if (capabilities.isPresent(Capability.SMALLRYE_HEALTH)) {\n"
"            return new HealthBuildItem(\"io.quarkus.agroal.runtime.health.DataSourceHealthCheck\",\n"
"                    dataSourcesBuildTimeConfig.healthEnabled);\n"
"        } else {\n"
"            return null;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/capabilities.adoc:196
#, no-wrap
msgid "Capability prefixes"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/capabilities.adoc:199
msgid "Like a capability name, a capability prefix is a dot-separated string that is composed of either the first capability name element or a dot-separated sequence of the capability name elements starting from the first one. E.g. for capability `io.quarkus.resteasy.json.jackson` the following prefixes will be registered:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/capabilities.adoc:201
msgid "`io`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/capabilities.adoc:202
msgid "`io.quarkus`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/capabilities.adoc:203
msgid "`io.quarkus.resteasy`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/capabilities.adoc:204
msgid "`io.quarkus.resteasy.json`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/capabilities.adoc:206
msgid "`Capabilities.isCapabilityWithPrefixPresent(prefix)` could be used to check whether a capability with a given prefix is present."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/capabilities.adoc:208
msgid "Given that only a single provider of a given capability is allowed in an application, capability prefixes allow expressing a certain common aspect among different but somewhat related capabilities. E.g. there could be extensions providing the following capabilities:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/capabilities.adoc:210
msgid "`io.quarkus.resteasy.json.jackson`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/capabilities.adoc:211
msgid "`io.quarkus.resteasy.json.jackson.client`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/capabilities.adoc:212
msgid "`io.quarkus.resteasy.json.jsonb`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/capabilities.adoc:213
msgid "`io.quarkus.resteasy.json.jsonb.client`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/capabilities.adoc:214
msgid "Including any one of those extensions in an application will enable the RESTEasy JSON serializer. In case a build step needs to check whether the RESTEasy JSON serializer is already enabled in an application, instead of checking whether any of those capabilities is present, it could simply check whether an extension with prefix `io.quarkus.resteasy.json` is present."
msgstr ""
