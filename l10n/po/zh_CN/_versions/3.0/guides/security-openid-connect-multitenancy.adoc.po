# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-01-20 14:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:6
#, no-wrap
msgid "Using OpenID Connect (OIDC) Multi-Tenancy"
msgstr "使用OpenID Connect（OIDC）多租户"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:12
msgid "This guide demonstrates how your OpenID Connect (OIDC) application can support multi-tenancy so that you can serve multiple tenants from a single application. Tenants can be distinct realms or security domains within the same OpenID Provider or even distinct OpenID Providers."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:14
msgid "When serving multiple customers from the same application (e.g.: SaaS), each customer is a tenant. By enabling multi-tenancy support to your applications you are allowed to also support distinct authentication policies for each tenant even though if that means authenticating against different OpenID Providers, such as Keycloak and Google."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:16
msgid "Please read the xref:security-oidc-bearer-authentication-concept.adoc[OIDC Bearer authentication] guide if you need to authorize a tenant using Bearer Token Authorization."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:18
msgid "Please read the xref:security-openid-connect-web-authentication.adoc[Using OpenID Connect to Protect Web Applications] guide if you need to authenticate and authorize a tenant using OpenID Connect Authorization Code Flow."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:20
msgid "Also see the xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties] reference guide."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:22
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:27
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:28
#, no-wrap
msgid "Architecture"
msgstr "架构"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:31
msgid "In this example, we build a very simple application which supports two resource methods:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:33
msgid "`/{tenant}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:35
msgid "This resource returns information obtained from the ID token issued by OpenID Provider about the authenticated user and the current tenant."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:37
msgid "`/{tenant}`/bearer"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:39
msgid "This resource returns information obtained from the Access token issued by OpenID Provider about the authenticated user and the current tenant."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:40
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:44
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议你按照下面几节的说明，一步一步地创建应用程序。然而，你可以直接进入已完成的例子。"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:46
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或者下载一个 {quickstarts-archive-url}[存档]。"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:48
msgid "The solution is located in the `security-openid-connect-multi-tenancy-quickstart` {quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:49
#, no-wrap
msgid "Creating the Maven Project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:52
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。用以下命令创建一个新项目："

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:59
msgid "If you already have your Quarkus project configured, you can add the `oidc` extension to your project by running the following command in your project base directory:"
msgstr "如果你已经配置了你的Quarkus项目，你可以通过在你的项目基础目录下运行以下命令，将 `oidc` 扩展加入到你的项目中去："

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:64
msgid "This will add the following to your build file:"
msgstr "这将在您的构建文件中添加以下内容："

#. type: Block title
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:66
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:408
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:72
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:75
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:428
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:78
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-oidc\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:80
#, no-wrap
msgid "Writing the application"
msgstr "编写应用程序"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:83
msgid "Let's start by implementing the `/{tenant}` endpoint. As you can see from the source code below it is just a regular JAX-RS resource:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:87
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:157
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:244
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:280
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:461
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:543
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:710
#, no-wrap
msgid "package org.acme.quickstart.oidc;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:92
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:94
#, no-wrap
msgid "import org.eclipse.microprofile.jwt.JsonWebToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:96
#, no-wrap
msgid "import io.quarkus.oidc.IdToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:105
#, no-wrap
msgid ""
"@Path(\"/{tenant}\")\n"
"public class HomeResource {\n"
"    /**\n"
"     * Injection point for the ID Token issued by the OpenID Connect Provider\n"
"     */\n"
"    @Inject\n"
"    @IdToken\n"
"    JsonWebToken idToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:111
#, no-wrap
msgid ""
"    /**\n"
"     * Injection point for the Access Token issued by the OpenID Connect Provider\n"
"     */\n"
"    @Inject\n"
"    JsonWebToken accessToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:123
#, no-wrap
msgid ""
"    /**\n"
"     * Returns the ID Token info. This endpoint exists only for demonstration purposes, you should not\n"
"     * expose this token in a real application.\n"
"     *\n"
"     * @return ID Token info\n"
"     */\n"
"    @GET\n"
"    @Produces(\"text/html\")\n"
"    public String getIdTokenInfo() {\n"
"        StringBuilder response = new StringBuilder().append(\"<html>\")\n"
"                .append(\"<body>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:126
#, no-wrap
msgid ""
"        response.append(\"<h2>Welcome, \").append(this.idToken.getClaim(\"email\").toString()).append(\"</h2>\\n\");\n"
"        response.append(\"<h3>You are accessing the application within tenant <b>\").append(idToken.getIssuer()).append(\" boundaries</b></h3>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:129
#, no-wrap
msgid ""
"        return response.append(\"</body>\").append(\"</html>\").toString();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:142
#, no-wrap
msgid ""
"    /**\n"
"     * Returns the Access Token info. This endpoint exists only for demonstration purposes, you should not\n"
"     * expose this token in a real application.\n"
"     *\n"
"     * @return Access Token info\n"
"     */\n"
"    @GET\n"
"    @Produces(\"text/html\")\n"
"    @Path(\"bearer\")\n"
"    public String getAccessTokenInfo() {\n"
"        StringBuilder response = new StringBuilder().append(\"<html>\")\n"
"                .append(\"<body>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:145
#, no-wrap
msgid ""
"        response.append(\"<h2>Welcome, \").append(this.accessToken.getClaim(\"email\").toString()).append(\"</h2>\\n\");\n"
"        response.append(\"<h3>You are accessing the application within tenant <b>\").append(accessToken.getIssuer()).append(\" boundaries</b></h3>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:149
#, no-wrap
msgid ""
"        return response.append(\"</body>\").append(\"</html>\").toString();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:153
msgid "In order to resolve the tenant from incoming requests and map it to a specific `quarkus-oidc` tenant configuration in application.properties, you need to create an implementation for the `io.quarkus.oidc.TenantConfigResolver` interface which can be used to resolve the tenant configurations dynamically:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:159
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:246
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:282
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:714
#, no-wrap
msgid "import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:161
#, no-wrap
msgid "import org.eclipse.microprofile.config.ConfigProvider;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:168
#, no-wrap
msgid ""
"import io.quarkus.oidc.OidcRequestContext;\n"
"import io.quarkus.oidc.OidcTenantConfig;\n"
"import io.quarkus.oidc.OidcTenantConfig.ApplicationType;\n"
"import io.quarkus.oidc.TenantConfigResolver;\n"
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:171
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomTenantResolver implements TenantConfigResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:175
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<OidcTenantConfig> resolve(RoutingContext context, OidcRequestContext<OidcTenantConfig> requestContext) {\n"
"        String path = context.request().path();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:178
#, no-wrap
msgid ""
"        if (path.startsWith(\"/tenant-a\")) {\n"
"           String keycloakUrl = ConfigProvider.getConfig().getValue(\"keycloak.url\", String.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:192
#, no-wrap
msgid ""
"            OidcTenantConfig config = new OidcTenantConfig();\n"
"            config.setTenantId(\"tenant-a\");\n"
"            config.setAuthServerUrl(keycloakUrl + \"/realms/tenant-a\");\n"
"            config.setClientId(\"multi-tenant-client\");\n"
"            config.getCredentials().setSecret(\"secret\");\n"
"            config.setApplicationType(ApplicationType.HYBRID);\n"
"            return Uni.createFrom().item(config);\n"
"        } else {\n"
"            // resolve to default tenant config\n"
"            return Uni.createFrom().nullItem();\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:195
msgid "From the implementation above, tenants are resolved from the request path so that in case no tenant could be inferred, `null` is returned to indicate that the default tenant configuration should be used."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:197
msgid "Note the `tenant-a` application type is `hybrid` - it can accept HTTP bearer tokens if provided, otherwise it will initiate an authorization code flow when the authentication is required."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:198
#, no-wrap
msgid "Configuring the application"
msgstr "配置该应用程序"

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:206
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:228
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:446
#, no-wrap
msgid ""
"# Default Tenant Configuration\n"
"%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.client-id=multi-tenant-client\n"
"quarkus.oidc.application-type=web-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:208
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:448
#, no-wrap
msgid "# Tenant A Configuration is created dynamically in CustomTenantConfigResolver\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:212
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:237
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:452
#, no-wrap
msgid ""
"# HTTP Security Configuration\n"
"quarkus.http.auth.permission.authenticated.paths=/*\n"
"quarkus.http.auth.permission.authenticated.policy=authenticated\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:215
msgid "The first configuration is the default tenant configuration that should be used when the tenant can not be inferred from the request. Note that a `%prod` prodile prefix is used with `quarkus.oidc.auth-server-url` - it is done to support testing a multi-tenant application with `Dev Services For Keycloak`. This configuration is using a Keycloak instance to authenticate users."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:217
msgid "The second configuration is provided by `TenantConfigResolver`, it is the configuration that will be used when an incoming request is mapped to the tenant `tenant-a`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:219
msgid "Note that both configurations map to the same Keycloak server instance while using distinct `realms`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:221
msgid "Alternatively you can configure the tenant `tenant-a` directly in `application.properties`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:233
#, no-wrap
msgid ""
"# Tenant A Configuration\n"
"quarkus.oidc.tenant-a.auth-server-url=http://localhost:8180/realms/tenant-a\n"
"quarkus.oidc.tenant-a.client-id=multi-tenant-client\n"
"quarkus.oidc.tenant-a.application-type=web-app\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:240
msgid "and use a custom `TenantConfigResolver` to resolve it:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:249
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:285
#, no-wrap
msgid ""
"import io.quarkus.oidc.TenantResolver;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:252
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:288
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:721
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomTenantResolver implements TenantResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:257
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve(RoutingContext context) {\n"
"        String path = context.request().path();\n"
"        String[] parts = path.split(\"/\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:262
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:657
#, no-wrap
msgid ""
"        if (parts.length == 0) {\n"
"            // resolve to default tenant configuration\n"
"            return null;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:266
#, no-wrap
msgid ""
"        return parts[1];\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:269
msgid "You can define multiple tenants in your configuration file, just make sure they have a unique alias so that you can map them properly when resolving a tenant from your `TenantResolver` implementation."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:271
msgid "However, using a static tenant resolution (configuring tenants in `application.properties` and resolving them with `TenantResolver`) prevents testing the endpoint with `Dev Services for Keycloak` since `Dev Services for Keycloak` has no knowledge of how the requests will be mapped to individual tenants and can not dynamically provide tenant-specific `quarkus.oidc.<tenant-id>.auth-server-url` values and therefore using `%prod` prefixes with the tenant-specific URLs in `application.properties` will not work in tests or devmode."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:276
msgid "When a current tenant represents an OIDC `web-app` application, the current `io.vertx.ext.web.RoutingContext` will contain a `tenant-id` attribute by the time the custom tenant resolver has been called for all the requests completing the code authentication flow and the already authenticated requests, when either a tenant specific state or session cookie already exists.  Therefore, when working with multiple OpenID Connect Providers, you only need a path specific check to resolve a tenant id if the `RoutingContext` does not have the `tenant-id` attribute set, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:298
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve(RoutingContext context) {\n"
"        String tenantId = context.get(\"tenant-id\");\n"
"        if (tenantId != null) {\n"
"            return tenantId;\n"
"        } else {\n"
"            // Initial login request\n"
"            String path = context.request().path();\n"
"            String[] parts = path.split(\"/\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:307
#, no-wrap
msgid ""
"            if (parts.length == 0) {\n"
"                // resolve to default tenant configuration\n"
"                return null;\n"
"            }\n"
"            return parts[1];\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:310
msgid "A similar technique can be used with `TenantConfigResolver` where a `tenant-id` provided in the context can be used to return `OidcTenantConfig` already prepared with the previous request."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:317
msgid "If you also use xref:hibernate-orm.adoc#multitenancy[Hibernate ORM multitenancy] or xref:mongodb-panache.adoc#multitenancy[MongoDB with Panache multitenancy] and both tenant IDs are the same and must be extracted from the Vert.x `RoutingContext` you can pass the tenant id from the OIDC Tenant Resolver to the Hibernate ORM Tenant Resolver or MongoDB with Panache Mongo Database Resolver as a `RoutingContext` attribute, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:321
#, no-wrap
msgid "public class CustomTenantResolver implements TenantResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:329
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve(RoutingContext context) {\n"
"        String tenantId = extractTenantId(context);\n"
"        context.put(\"tenantId\", tenantId);\n"
"        return tenantId;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:332
#, no-wrap
msgid "Starting and Configuring the Keycloak Server"
msgstr "启动和配置Keycloak服务器"

#. type: delimited block =
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:335
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr "要启动Keycloak服务器，您可以使用Docker服务，且只需运行以下命令："

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:339
#, no-wrap
msgid "docker run --name keycloak -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin -p 8180:8080 quay.io/keycloak/keycloak:{keycloak.version} start-dev\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:342
msgid "where `keycloak.version` should be set to `17.0.0` or higher."
msgstr "其中 `keycloak.version` 应该设置为 `17.0.0` 或更高。"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:344
msgid "You should be able to access your Keycloak Server at http://localhost:8180[localhost:8180]."
msgstr "你应该能够通过 http://localhost:8180[localhost:8180] 访问你的Keycloak服务器。"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:346
msgid "Log in as the `admin` user to access the Keycloak Administration Console. Username should be `admin` and password `admin`."
msgstr "以 `admin` 用户身份登录，访问Keycloak管理控制台。用户名应该是 `admin` ，密码是 `admin` 。"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:348
msgid "Now, follow the steps below to import the realms for the two tenants:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:350
msgid "Import the {quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/default-tenant-realm.json[default-tenant-realm.json] to create the default realm"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:351
msgid "Import the {quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/tenant-a-realm.json[tenant-a-realm.json] to create the realm for the tenant `tenant-a`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:353
msgid "For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:354
#, no-wrap
msgid "Running and Using the Application"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:356
#, no-wrap
msgid "Running in Developer Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:359
msgid "To run the microservice in dev mode, use:"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:362
#, no-wrap
msgid "Running in JVM Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:365
msgid "When you're done playing with dev mode, you can run it as a standard Java application."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:367
msgid "First compile it:"
msgstr "首先编译它："

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:371
msgid "Then run it:"
msgstr "然后运行："

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:375
#, no-wrap
msgid "java -jar target/quarkus-app/quarkus-run.jar\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:377
#, no-wrap
msgid "Running in Native Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:380
msgid "This same demo can be compiled into native code: no modifications required."
msgstr "这个同样的演示可以被编译成本地代码：不需要任何修改。"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:384
msgid "This implies that you no longer need to install a JVM on your production environment, as the runtime technology is included in the produced binary, and optimized to run with minimal resource overhead."
msgstr "这意味着您不再需要在您的生产环境中安装JVM，因为运行时技术包含在生产的二进制文件中，并以最小的资源开销优化运行。"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:387
msgid "Compilation will take a bit longer, so this step is disabled by default; let's build again by enabling the native build:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:391
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr "一杯咖啡的时间后，您就可以直接运行该二进制文件了："

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:395
#, no-wrap
msgid "./target/security-openid-connect-multi-tenancy-quickstart-runner\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:397
#, no-wrap
msgid "Test the Application"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:399
#, no-wrap
msgid "Use Dev Services for Keycloak"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:403
msgid "Using xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] is recommended for the integration testing against Keycloak.  `Dev Services for Keycloak` will launch and initialize a test container: it will import configured realms and set a base Keycloak URL for `CustomTenantResolver` used in this quickstart to calculate a realm specific URL."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:406
msgid "First you need to add the following dependencies:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:425
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-keycloak-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.rest-assured</groupId>\n"
"    <artifactId>rest-assured</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>net.sourceforge.htmlunit</groupId>\n"
"    <artifactId>htmlunit</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:433
#, no-wrap
msgid ""
"testImplementation(\"io.quarkus:quarkus-test-keycloak-server\")\n"
"testImplementation(\"io.rest-assured:rest-assured\")\n"
"testImplementation(\"net.sourceforge.htmlunit:htmlunit\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:437
msgid "`quarkus-test-keycloak-server` provides a utility class `io.quarkus.test.keycloak.client.KeycloakTestClient` for acquiring the realm specific access tokens and which you can use with `RestAssured` for testing the `/{tenant}/bearer` endpoint expecting bearer access tokens.  `HtmlUnit` is used for testing the `/{tenant}` endpoint and the authorization code flow."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:439
msgid "Next, configure the required realms:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:454
#, no-wrap
msgid "quarkus.keycloak.devservices.realm-path=default-tenant-realm.json,tenant-a-realm.json\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:457
msgid "Finally, write your test which will be executed in JVM mode:"
msgstr "最后编写你的测试，它将在JVM模式下执行："

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:465
#, no-wrap
msgid ""
"import static org.hamcrest.Matchers.containsString;\n"
"import static org.junit.jupiter.api.Assertions.assertEquals;\n"
"import static org.junit.jupiter.api.Assertions.assertTrue;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:467
#, no-wrap
msgid "import java.io.IOException;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:469
#, no-wrap
msgid "import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:474
#, no-wrap
msgid ""
"import com.gargoylesoftware.htmlunit.SilentCssErrorHandler;\n"
"import com.gargoylesoftware.htmlunit.WebClient;\n"
"import com.gargoylesoftware.htmlunit.html.HtmlForm;\n"
"import com.gargoylesoftware.htmlunit.html.HtmlPage;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:478
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.keycloak.client.KeycloakTestClient;\n"
"import io.restassured.RestAssured;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:481
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class CodeFlowTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:483
#, no-wrap
msgid "    KeycloakTestClient keycloakClient = new KeycloakTestClient();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:488
#, no-wrap
msgid ""
"    @Test\n"
"    public void testLogInDefaultTenant() throws IOException {\n"
"        try (final WebClient webClient = createWebClient()) {\n"
"            HtmlPage page = webClient.getPage(\"http://localhost:8081/default\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:490
#, no-wrap
msgid "            assertEquals(\"Sign in to quarkus\", page.getTitleText());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:492
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:510
#, no-wrap
msgid "            HtmlForm loginForm = page.getForms().get(0);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:495
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:513
#, no-wrap
msgid ""
"            loginForm.getInputByName(\"username\").setValueAttribute(\"alice\");\n"
"            loginForm.getInputByName(\"password\").setValueAttribute(\"alice\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:497
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:515
#, no-wrap
msgid "            page = loginForm.getInputByName(\"login\").click();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:501
#, no-wrap
msgid ""
"            assertTrue(page.asText().contains(\"tenant\"));\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:506
#, no-wrap
msgid ""
"    @Test\n"
"    public void testLogInTenantAWebApp() throws IOException {\n"
"        try (final WebClient webClient = createWebClient()) {\n"
"            HtmlPage page = webClient.getPage(\"http://localhost:8081/tenant-a\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:508
#, no-wrap
msgid "            assertEquals(\"Sign in to tenant-a\", page.getTitleText());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:519
#, no-wrap
msgid ""
"            assertTrue(page.asText().contains(\"alice@tenant-a.org\"));\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:525
#, no-wrap
msgid ""
"    @Test\n"
"    public void testLogInTenantABearerToken() throws IOException {\n"
"        RestAssured.given().auth().oauth2(getAccessToken()).when()\n"
"            .get(\"/tenant-a/bearer\").then().body(containsString(\"alice@tenant-a.org\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:529
#, no-wrap
msgid ""
"    private String getAccessToken() {\n"
"        return keycloakClient.getRealmAccessToken(\"tenant-a\", \"alice\", \"alice\", \"multi-tenant-client\", \"secret\");\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:536
#, no-wrap
msgid ""
"    private WebClient createWebClient() {\n"
"        WebClient webClient = new WebClient();\n"
"        webClient.setCssErrorHandler(new SilentCssErrorHandler());\n"
"        return webClient;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:539
msgid "and in native mode:"
msgstr "在原生模式(native mode)下："

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:545
#, no-wrap
msgid "import io.quarkus.test.junit.QuarkusIntegrationTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:549
#, no-wrap
msgid ""
"@QuarkusIntegrationTest\n"
"public class CodeFlowIT extends CodeFlowTest {\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:552
msgid "Please see xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] for more information about the way it is initialized and configured."
msgstr "请参阅 link:security-openid-connect-dev-services.html[Keycloak开发服务] ，来了解更多关于它的初始化和配置方式的信息。"

#. type: Title ===
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:553
#, no-wrap
msgid "Use Browser"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:556
msgid "To test the application, you should open your browser and access the following URL:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:558
msgid "http://localhost:8080/default[http://localhost:8080/default]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:561
msgid "If everything is working as expected, you should be redirected to the Keycloak server to authenticate. Note that the requested path defines a `default` tenant which we don't have mapped in the configuration file. In this case, the default configuration will be used."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:563
msgid "In order to authenticate to the application you should type the following credentials when at the Keycloak login page:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:565
msgid "Username: *alice*"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:566
msgid "Password: *alice*"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:568
msgid "After clicking the `Login` button you should be redirected back to the application."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:570
msgid "If you try now to access the application at the following URL:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:572
msgid "http://localhost:8080/tenant-a[http://localhost:8080/tenant-a]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:574
msgid "You should be redirected again to the login page at Keycloak. However, now you are going to authenticate using a different `realm`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:577
msgid "In both cases, if the user is successfully authenticated, the landing page will show the user's name and e-mail. Even though user `alice` exists in both tenants, for the application they are distinct users belonging to different realms/tenants."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:578
#, no-wrap
msgid "Resolving Tenant Identifiers with Annotations"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:583
msgid "You can use the annotations and CDI interceptors for resolving the tenant identifiers as an alternative to using `quarkus.oidc.TenantResolver`. This can be done by setting the value for the key `OidcUtils.TENANT_ID_ATTRIBUTE` on the current `RoutingContext`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:586
msgid "Assuming your application supports two OIDC tenants (`hr`, and default) first you need to define one annotation per tenant ID other than default:"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:591
msgid "Proactive HTTP authentication needs to be disabled (`quarkus.http.auth.proactive=false`) for this to work. See xref:security-built-in-authentication-support-concept.adoc#proactive-authentication[Proactive Authentication] section for further details."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:601
#, no-wrap
msgid ""
"@Inherited\n"
"@InterceptorBinding\n"
"@Retention(RetentionPolicy.RUNTIME)\n"
"@Target({ElementType.METHOD, ElementType.TYPE})\n"
"public @interface HrTenant {\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:604
msgid "Next, you'll need one interceptor for each of those annotations:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:612
#, no-wrap
msgid ""
"@Interceptor\n"
"@HrTenant\n"
"public class HrTenantInterceptor {\n"
"    @Inject\n"
"    RoutingContext routingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:619
#, no-wrap
msgid ""
"    @AroundInvoke\n"
"    Object setTenant(InvocationContext context) throws Exception {\n"
"        routingContext.put(OidcUtils.TENANT_ID_ATTRIBUTE, \"hr\");\n"
"        return context.proceed();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:624
msgid "Now all methods and classes carrying `@HrTenant` will be authenticated using the OIDC provider configured by `quarkus.oidc.hr.auth-server-url`, while all other classes and methods will still be authenticated using the default OIDC provider."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:626
#, no-wrap
msgid "Programmatically Resolving Tenants Configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:630
msgid "If you need a more dynamic configuration for the different tenants you want to support and don't want to end up with multiple entries in your configuration file, you can use the `io.quarkus.oidc.TenantConfigResolver`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:632
msgid "This interface allows you to dynamically create tenant configurations at runtime:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:636
#, no-wrap
msgid "package io.quarkus.it.keycloak;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:639
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import java.util.function.Supplier;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:644
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.quarkus.oidc.OidcTenantConfig;\n"
"import io.quarkus.oidc.TenantConfigResolver;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:647
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomTenantConfigResolver implements TenantConfigResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:652
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<OidcTenantConfig> resolve(RoutingContext context, TenantConfigResolver.TenantConfigRequestContext requestContext) {\n"
"        String path = context.request().path();\n"
"        String[] parts = path.split(\"/\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:663
#, no-wrap
msgid ""
"        if (\"tenant-c\".equals(parts[1])) {\n"
"            // Do 'return requestContext.runBlocking(createTenantConfig());'\n"
"            // if a blocking call is required to create a tenant config\n"
"            return Uni.createFromItem(createTenantConfig());\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:667
#, no-wrap
msgid ""
"        // resolve to default tenant configuration\n"
"        return null;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:670
#, no-wrap
msgid ""
"    private Supplier<OidcTenantConfig> createTenantConfig() {\n"
"        final OidcTenantConfig config = new OidcTenantConfig();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:675
#, no-wrap
msgid ""
"        config.setTenantId(\"tenant-c\");\n"
"        config.setAuthServerUrl(\"http://localhost:8180/realms/tenant-c\");\n"
"        config.setClientId(\"multi-tenant-client\");\n"
"        OidcTenantConfig.Credentials credentials = new OidcTenantConfig.Credentials();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:677
#, no-wrap
msgid "        credentials.setSecret(\"my-secret\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:679
#, no-wrap
msgid "        config.setCredentials(credentials);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:681
#, no-wrap
msgid "        // any other setting support by the quarkus-oidc extension\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:685
#, no-wrap
msgid ""
"        return () -> config;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:688
msgid "The `OidcTenantConfig` returned from this method is the same used to parse the `oidc` namespace configuration from the `application.properties`. You can populate it using any of the settings supported by the `quarkus-oidc` extension."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:689
#, no-wrap
msgid "Tenant Resolution for OIDC 'web-app' applications"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:692
msgid "Several options are available for selecting the tenant configuration which should be used to secure the current HTTP request for both `service` and `web-app` OIDC applications, such as:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:694
msgid "Check URL paths, for example, a `tenant-service` configuration has to be used for the \"/service\" paths, while a `tenant-manage` configuration - for the \"/management\" paths"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:695
msgid "Check HTTP headers, for example, with a URL path always being '/service', a header such as \"Realm: service\" or \"Realm: management\" can help to select between the `tenant-service` and `tenant-manage` configurations"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:696
msgid "Check URL query parameters - it can work similarly to the way the headers are used to select the tenant configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:698
msgid "All these options can be easily implemented with the custom `TenantResolver` and `TenantConfigResolver` implementations for the OIDC `service` applications."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:700
msgid "However, due to an HTTP redirect required to complete the code authentication flow for the OIDC `web-app` applications, a custom HTTP cookie may be needed to select the same tenant configuration before and after this redirect request because:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:702
msgid "URL path may not be the same after the redirect request if a single redirect URL has been registered in the OIDC Provider - the original request path can be restored but after the tenant configuration is resolved"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:703
msgid "HTTP headers used during the original request are not available after the redirect"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:704
msgid "Custom URL query parameters are restored after the redirect but after the tenant configuration is resolved"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:706
msgid "One option to ensure the information for resolving the tenant configurations for `web-app` applications is available before and after the redirect is to use a cookie, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:712
#, no-wrap
msgid "import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:718
#, no-wrap
msgid ""
"import io.quarkus.oidc.TenantResolver;\n"
"import io.vertx.core.http.Cookie;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:732
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve(RoutingContext context) {\n"
"        List<String> tenantIdQuery = context.queryParam(\"tenantId\");\n"
"        if (!tenantIdQuery.isEmpty()) {\n"
"            String tenantId = tenantIdQuery.get(0);\n"
"            context.addCookie(Cookie.cookie(\"tenant\", tenantId));\n"
"            return tenantId;\n"
"        } else if (context.cookieMap().containsKey(\"tenant\")) {\n"
"            return context.getCookie(\"tenant\").getValue();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:736
#, no-wrap
msgid ""
"        return null;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:739
#, no-wrap
msgid "Disabling Tenant Configurations"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:742
msgid "Custom `TenantResolver` and `TenantConfigResolver` implementations may return `null` if no tenant can be inferred from the current request and a fallback to the default tenant configuration is required."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:744
msgid "If it is expected that the custom resolvers will always infer a tenant then the default tenant configuration is not needed. One can disable it with the `quarkus.oidc.tenant-enabled=false` setting."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:746
msgid "Note that tenant specific configurations can also be disabled, for example: `quarkus.oidc.tenant-a.tenant-enabled=false`."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:747
#, no-wrap
msgid "References"
msgstr "参考文献"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:750
msgid "xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:751
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:752
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:753
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:754
msgid "https://developers.google.com/identity/protocols/OpenIDConnect[Google OpenID Connect]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-openid-connect-multitenancy.adoc:754
msgid "xref:security-overview-concept.adoc[Quarkus Security overview]"
msgstr ""
