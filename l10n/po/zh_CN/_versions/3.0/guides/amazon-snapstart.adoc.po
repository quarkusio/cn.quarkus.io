# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-01-20 14:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:6
#, no-wrap
msgid "Amazon Lambda SnapStart Configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:14
msgid "https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html[SnapStart] is a snapshotting and restore mechanism reducing drastically the cold startup time of Java functions on AWS.  This document explains the various settings you can use to leverage this feature.  It is not a reference documentation on SnapStart, and it will not cover how SnapStart works in details."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:17
msgid "This feature is only available on AWS Lambda, and not in all regions.  Please check the AWS documentation to verify the eligibility of your AWS region."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:18
#, no-wrap
msgid "Enabling / Disabling SnapStart Optimizations"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:22
msgid "If you use the Quarkus Amazon Lambda extension, SnapStart optimizations are automatically enabled.  However, you can enable/disable it explicitly using:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:26
#, no-wrap
msgid "quarkus.snapstart.enabled=true|false\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:29
msgid "It does not enable/disable SnapStart for your function, only the Quarkus optimizations."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:30
#, no-wrap
msgid "Class Preloading"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:34
msgid "Classloading has a huge impact on your function execution time.  This optimization allows preloading classes during the snapshotting process of SnapStart."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:36
msgid "The classes to preload are listed in two places:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:38
msgid "extensions can produce a list of classes (using the `io.quarkus.deployment.builditem.PreloadClassBuildItem` build item)"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:39
msgid "you can add a `src/main/resources/META-INF/quarkus-preload-classes.txt` file listing the classes to preload, such as:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:64
#, no-wrap
msgid ""
"com.amazonaws.services.lambda.runtime.LambdaRuntimeInternal\n"
"com.fasterxml.jackson.annotation.JsonAlias\n"
"com.fasterxml.jackson.annotation.JsonFormat$Feature\n"
"com.fasterxml.jackson.core.exc.InputCoercionException\n"
"com.fasterxml.jackson.core.exc.StreamWriteException\n"
"com.fasterxml.jackson.core.io.ContentReference\n"
"com.fasterxml.jackson.core.io.IOContext\n"
"com.fasterxml.jackson.core.io.JsonEOFException\n"
"com.fasterxml.jackson.core.io.MergedStream\n"
"com.fasterxml.jackson.core.io.NumberInput\n"
"com.fasterxml.jackson.core.io.NumberOutput\n"
"com.fasterxml.jackson.core.io.UTF32Reader\n"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper\n"
"com.fasterxml.jackson.core.json.JsonReadContext\n"
"com.fasterxml.jackson.core.json.JsonWriteContext\n"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser\n"
"com.fasterxml.jackson.core.JsonEncoding\n"
"com.fasterxml.jackson.core.JsonGenerationException\n"
"com.fasterxml.jackson.core.JsonLocation\n"
"com.fasterxml.jackson.core.JsonStreamContext\n"
"com.fasterxml.jackson.core.JsonToken\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:67
msgid "The format is simple: one class per line."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:68
#, no-wrap
msgid "Computing the class list"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:71
msgid "That step is particularly not user-friendly. We plan to improve it."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:75
msgid "To compute the list of classes, we recommend deploying your function and setting the `JAVA_TOOL_OPTIONS` environment variable to `-verbose:class`.  Then execute your function and retrieve the log (in CloudWatch).  You should be able to extract the class names using sed/awk or any text editor."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:76
#, no-wrap
msgid "Application class list"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:80
msgid "By default, Quarkus generates the class list of the classes included in your application (including the classes generated by Quarkus).  So, you do not have to repeat them in the `quarkus-preload-classes.txt` file."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:82
msgid "You can disable this feature using:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:86
#, no-wrap
msgid "quarkus.snapstart.generate-application-class-list=false\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:88
#, no-wrap
msgid "Disable preloading"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:91
msgid "You can disable the preloading of classes using:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:95
#, no-wrap
msgid "quarkus.snapstart.preload-classes=false\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:97
#, no-wrap
msgid "Skipping class initialization"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:101
msgid "By default, when the classes are preloaded, they are also _initialized_, meaning it also resolves the dependent classes.  You can disable this behavior using:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:105
#, no-wrap
msgid "quarkus.snapstart.initialize-classes=false\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:107
#, no-wrap
msgid "Client Priming"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:110
msgid "Client _priming_ is a technique that allows initializing a client during the snapshotting process, so it's already fully functional during the application runtime."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:112
msgid "There are two ways to achieve _priming_:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:114
msgid "initialize the client in a `static` block, which, thanks to class preloading will be executed before the snapshot"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:115
msgid "register a CRaC Resource doing the initialization"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:117
msgid "can be achieved as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:123
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class HeroRepository {\n"
"    private static final DynamoDbClient client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:133
#, no-wrap
msgid ""
"    static {\n"
"        client = DynamoDbClient.builder()\n"
"                .region(Region.US_EAST_2)\n"
"                .credentialsProvider(DefaultCredentialsProvider.create())\n"
"                .build();\n"
"        client.describeEndpoints();\n"
"    }\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:137
msgid "Implementing priming using a static block may prevent the native compilation of your application.  Client initialization may start threads or open connections which are not compatible with the native compilation if the class is initialized at build time."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:139
msgid "The next section covers (2)."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:140
#, no-wrap
msgid "Resource registration"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:143
msgid "SnapStart uses the CRaC API to allow the application to execute custom code before the snapshotting or during the restoration."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:145
msgid "While it's the CRaC API, SnapStart is not CRaC and can do _things_ that would not work with others CRaC implementations."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:149
#, no-wrap
msgid "package org.acme.hello;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:155
#, no-wrap
msgid ""
"import io.quarkus.runtime.Startup;\n"
"import org.crac.Context;\n"
"import org.crac.Core;\n"
"import org.crac.Resource;\n"
"import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:159
#, no-wrap
msgid ""
"import jakarta.annotation.PostConstruct;\n"
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:163
#, no-wrap
msgid ""
"@Startup\n"
"@ApplicationScoped\n"
"public class HelloPriming implements Resource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:166
#, no-wrap
msgid ""
"    @Inject\n"
"    Logger logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:172
#, no-wrap
msgid ""
"    @PostConstruct\n"
"    void init() {\n"
"        // Important - register the resource\n"
"        Core.getGlobalContext().register(this);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:178
#, no-wrap
msgid ""
"    @Override\n"
"    public void beforeCheckpoint(Context<? extends Resource> context) throws Exception {\n"
"        logger.info(\"before checkout hook\");\n"
"        // initialize your client here.\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:185
#, no-wrap
msgid ""
"    @Override\n"
"    public void afterRestore(Context<? extends Resource> context) throws Exception {\n"
"        logger.info(\"after checkout hook\");\n"
"        // if there is anything to do during the restoration, do it here.\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:188
msgid "Restoration is limited to 2 seconds."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:189
#, no-wrap
msgid "TieredCompilation"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:193
msgid "It is also recommended to use _tiered compilation_ when using SnapStart.  To achieve this, set the `JAVA_TOOL_OPTIONS` environment property to `-XX:+TieredCompilation -XX:TieredStopAtLevel=1`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-snapstart.adoc:194
msgid "`TieredCompilation` can also be interesting for regular Lambda functions."
msgstr ""
