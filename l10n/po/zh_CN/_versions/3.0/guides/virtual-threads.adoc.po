# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-01-20 14:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.0/guides/virtual-threads.adoc:6
#, no-wrap
msgid "Writing simpler reactive REST services with Quarkus Virtual Thread support"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:19
msgid "This guide explains how to benefit from Java 19 virtual threads when writing REST services in Quarkus."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/virtual-threads.adoc:25
msgid "This is the reference guide for using virtual threads to write reactive REST services.  Please refer to the xref:rest-json.adoc[Writing JSON REST services guides] for a lightweight introduction to reactive REST services and to the xref:resteasy-reactive.adoc[Writing REST Services with RESTEasy Reactive] guide for a detailed presentation."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/virtual-threads.adoc:27
#, no-wrap
msgid "What are virtual threads ?"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/virtual-threads.adoc:29
#, no-wrap
msgid "Terminology"
msgstr ""

#. type: Labeled list
#: upstream/_versions/3.0/guides/virtual-threads.adoc:30
#, no-wrap
msgid "OS thread"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:32
msgid "A \"thread-like\" data-structure managed by the Operating System."
msgstr ""

#. type: Labeled list
#: upstream/_versions/3.0/guides/virtual-threads.adoc:33
#, no-wrap
msgid "Platform thread"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:36
msgid "Up until Java 19, every instance of the link:{thread}[Thread] class was a platform thread, that is, a wrapper around an OS thread.  Creating a platform threads creates an OS thread, blocking a platform thread blocks an OS thread."
msgstr ""

#. type: Labeled list
#: upstream/_versions/3.0/guides/virtual-threads.adoc:37
#, no-wrap
msgid "Virtual thread"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:40
msgid "Lightweight, JVM-managed threads. They extend the link:{thread}[Thread] class but are not tied to one specific OS thread.  Thus, scheduling virtual threads is the responsibility of the JVM."
msgstr ""

#. type: Labeled list
#: upstream/_versions/3.0/guides/virtual-threads.adoc:41
#, no-wrap
msgid "Carrier thread"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:44
msgid "A platform thread used to execute a virtual thread is called a carrier.  This isn't a class distinct from link:{Thread}[Thread] or VirtualThread but rather a functional denomination."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/virtual-threads.adoc:45
#, no-wrap
msgid "Differences between virtual threads and platform threads"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:47
msgid "We will give a brief overview of the topic here, please refer to the link:{vthreadjep}[JEP 425] for more information."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:49
msgid "Virtual threads are a feature available since Java 19 aiming at providing a cheap alternative to platform threads for I/O-bound workloads."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:53
msgid "Until now, platform threads were the concurrency unit of the JVM.  They are a wrapper over OS structures.  This means that creating a Java platform thread actually results in creating a \"thread-like\" structure in your operating system."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:57
msgid "Virtual threads on the other hand are managed by the JVM. In order to be executed, they need to be mounted on a platform thread (which acts as a carrier to that virtual thread).  As such, they have been designed to offer the following characteristics:"
msgstr ""

#. type: Labeled list
#: upstream/_versions/3.0/guides/virtual-threads.adoc:58
#, no-wrap
msgid "Lightweight "
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:62
msgid "Virtual threads occupy less space than platform threads in memory.  Hence, it becomes possible to use more virtual threads than platform threads simultaneously without blowing up the heap.  By default, platform threads are created with a stack of about 1 MB where virtual threads stack is \"pay-as-you-go\".  You can find these numbers along with other motivations for virtual threads in this presentation given by the lead developer of project Loom: https://youtu.be/lIq-x_iI-kc?t=543."
msgstr ""

#. type: Labeled list
#: upstream/_versions/3.0/guides/virtual-threads.adoc:63
#, no-wrap
msgid "Cheap to create"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:68
msgid "Creating a platform thread in Java takes time.  Currently, techniques such as pooling where threads are created once then reused are strongly encouraged to minimize the time lost in starting them (as well as limiting the maximum number of threads to keep memory consumption low).  Virtual threads are supposed to be disposable entities that we create when we need them, it is discouraged to pool them or to reuse them for different tasks."
msgstr ""

#. type: Labeled list
#: upstream/_versions/3.0/guides/virtual-threads.adoc:69
#, no-wrap
msgid "Cheap to block"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:73
msgid "When performing blocking I/O, the underlying OS thread wrapped by the Java platform thread is put in a wait queue and a context switch occurs to load a new thread context onto the CPU core. This operation takes time.  Since virtual threads are managed by the JVM, no underlying OS thread is blocked when they perform a blocking operation.  Their state is simply stored in the heap and another Virtual thread is executed on the same Java platform thread."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/virtual-threads.adoc:74
#, no-wrap
msgid "Virtual threads are useful for I/O-bound workloads only"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:82
msgid "We now know that we can create way more virtual threads than platform threads. One could be tempted to use virtual threads to perform long computations (CPU-bound workload).  This is useless if not counterproductive.  CPU-bound doesn't consist in quickly swapping threads while they need to wait for the completion of an I/O but in leaving them attached to a CPU-core to actually compute something.  In this scenario, it is useless to have thousands of threads if we have tens of CPU-cores, virtual threads won't enhance the performance of CPU-bound workloads."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/virtual-threads.adoc:84
#, no-wrap
msgid "Bringing virtual threads to reactive REST services"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:88
msgid "Since virtual threads are disposable entities, the fundamental idea of quarkus-loom is to offload the execution of an endpoint handler on a new virtual thread instead of running it on an event-loop (in the case of RESTeasy-reactive) or a platform worker thread."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:93
msgid "To do so, it suffices to add the link:{runonvthread}[@RunOnVirtualThread] annotation to the endpoint.  If the JDK is compatible (Java 19 or later versions) then the endpoint will be offloaded to a virtual thread.  It will then be possible to perform blocking operations without blocking the platform thread upon which the virtual thread is mounted."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:98
msgid "This annotation can only be used in conjunction with endpoints annotated with link:{blockingannotation}[@Blocking] or considered blocking because of their signature.  You can visit xref:resteasy-reactive.adoc#execution-model-blocking-non-blocking[Execution model, blocking, non-blocking] for more information."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/virtual-threads.adoc:99
#, no-wrap
msgid "Getting started"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:102
msgid "Add the following import to your build file:"
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/virtual-threads.adoc:104
#: upstream/_versions/3.0/guides/virtual-threads.adoc:121
#: upstream/_versions/3.0/guides/virtual-threads.adoc:449
#: upstream/_versions/3.0/guides/virtual-threads.adoc:469
#: upstream/_versions/3.0/guides/virtual-threads.adoc:502
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:110
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-reactive</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/virtual-threads.adoc:113
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:116
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-resteasy-reactive\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:119
msgid "You also need to make sure that you are using the version 19 of Java, this can be enforced in your pom.xml file with the following:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:127
#, no-wrap
msgid ""
"<properties>\n"
"    <maven.compiler.source>19</maven.compiler.source>\n"
"    <maven.compiler.target>19</maven.compiler.target>\n"
"</properties>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:130
msgid "Virtual threads are still an experimental feature, you need to start your application with the `--enable-preview` flag:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:134
#, no-wrap
msgid "java --enable-preview -jar target/quarkus-app/quarkus-run.jar\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:138
msgid "The example below shows the differences between three endpoints, all of them querying a fortune in the database then returning it to the client."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:140
msgid "the first one uses the traditional blocking style, it is considered blocking due to its signature."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:141
msgid "the second one uses Mutiny reactive streams in a declarative style, it is considered non-blocking due to its signature."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:143
msgid "the third one uses Mutiny reactive streams in a synchronous way, since it doesn't return a \"reactive type\" it is considered blocking and the link:{runonvthread}[@RunOnVirtualThread] annotation can be used."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:147
msgid "When using Mutiny, alternative \"xAndAwait\" methods are provided to be used with virtual threads.  They ensure that waiting for the completion of the I/O will not \"pin\" the carrier thread and deteriorate performance.  Pinning is a phenomenon that we describe in xref:Pinning cases[this section]."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:151
msgid "In other words, the mutiny environment is a safe environment for virtual threads.  The guarantees offered by Mutiny are detailed later."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:155
#: upstream/_versions/3.0/guides/virtual-threads.adoc:206
#, no-wrap
msgid "package org.acme.rest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:160
#: upstream/_versions/3.0/guides/virtual-threads.adoc:211
#, no-wrap
msgid ""
"import org.acme.fortune.model.Fortune;\n"
"import org.acme.fortune.repository.FortuneRepository;\n"
"import io.smallrye.common.annotation.RunOnVirtualThread;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:165
#: upstream/_versions/3.0/guides/virtual-threads.adoc:216
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import java.util.List;\n"
"import java.util.Random;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:169
#: upstream/_versions/3.0/guides/virtual-threads.adoc:220
#, no-wrap
msgid ""
"@Path(\"\")\n"
"public class FortuneResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:176
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/blocking\")\n"
"    public Fortune blocking() {\n"
"        var list = repository.findAllBlocking();\n"
"        return pickOne(list);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:183
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/reactive\")\n"
"    public Uni<Fortune> reactive() {\n"
"        return repository.findAllAsync()\n"
"                .map(this::pickOne);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:191
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/virtual\")\n"
"    @RunOnVirtualThread\n"
"    public Fortune virtualThread() {\n"
"        var list = repository.findAllAsyncAndAwait();\n"
"        return pickOne(list);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:193
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/virtual-threads.adoc:195
#, no-wrap
msgid "Simplifying complex logic"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:200
msgid "The previous example is trivial and doesn't capture how imperative style can simplify complex reactive operations.  Below is a more complex example.  The endpoints must now fetch all the fortunes in the database, then append a quote to each fortune before finally returning the result to the client."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:222
#, no-wrap
msgid "    private final FortuneRepository repository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:227
#, no-wrap
msgid ""
"    public Uni<List<String>> getQuotesAsync(int size){\n"
"        //...\n"
"        //asynchronously returns a list of quotes from an arbitrary source\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:233
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/quoted-blocking\")\n"
"    public List<Fortune> getAllQuotedBlocking() {\n"
"        // we get the list of fortunes\n"
"        var fortunes = repository.findAllBlocking();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:236
#, no-wrap
msgid ""
"        // we get the list of quotes\n"
"        var quotes = getQuotesAsync(fortunes.size()).await().indefinitely();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:243
#, no-wrap
msgid ""
"        // we append each quote to each fortune\n"
"        for(int i=0; i  < fortunes.size(); i ++){\n"
"            fortunes.get(i).title += \"   -  \" + quotes.get(i);\n"
"        }\n"
"        return fortunes;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:250
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/quoted-reactive\")\n"
"    public Uni<List<Fortune>> getAllQuotedReactive() {\n"
"        // we first fetch the list of resource and we memoize it\n"
"        // to avoid fetching it again everytime need it\n"
"        var fortunes = repository.findAllAsync().memoize().indefinitely();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:254
#, no-wrap
msgid ""
"        // once we get a result for fortunes,\n"
"        // we know its size and can thus query the right number of quotes\n"
"        var quotes = fortunes.onItem().transformToUni(list -> getQuotesAsync(list.size()));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:267
#, no-wrap
msgid ""
"        // we now need to combine the two reactive streams\n"
"        // before returning the result to the user\n"
"        return Uni.combine().all().unis(fortunes, quotes).asTuple().onItem().transform(tuple -> {\n"
"            var todoList = tuple.getItem1();\n"
"            //can await it since it is already resolved\n"
"            var quotesList = tuple.getItem2();\n"
"            for(int i=0; i  < todoList.size(); i ++){\n"
"                todoList.get(i).title += \"   -  \" + quotesList.get(i);\n"
"            }\n"
"            return todoList;\n"
"        });\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:274
#, no-wrap
msgid ""
"    @GET\n"
"    @RunOnVirtualThread\n"
"    @Path(\"/quoted-virtual-thread\")\n"
"    public List<Fortune> getAllQuotedVirtualThread() {\n"
"        //we get the list of fortunes\n"
"        var fortunes = repository.findAllAsyncAndAwait();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:277
#, no-wrap
msgid ""
"        //we get the list of quotes\n"
"        var quotes = getQuotesAsync(fortunes.size()).await().indefinitely();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:285
#, no-wrap
msgid ""
"        //we append each quote to each fortune\n"
"        for(int i=0; i  < fortunes.size(); i ++){\n"
"            fortunes.get(i).title += \"   -  \" + quotes.get(i);\n"
"        }\n"
"        return fortunes;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/virtual-threads.adoc:287
#, no-wrap
msgid "Pinning cases"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:291
msgid "The notion of \"cheap blocking\" might not always be true: in certain occasions a virtual thread might \"pin\" its carrier (the platform thread it is mounted upon).  In this situation, the platform thread is blocked exactly as it would have been in a typical blocking scenario."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:293
msgid "According to link:{vthreadjep}[JEP 425] this can happen in two situations:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:295
msgid "when a virtual thread performs a blocking operation inside a `synchronized` block or method"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:296
msgid "when it executes a blocking operation inside a native method or a foreign function"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:300
msgid "It can be fairly easy to avoid these situations in our own code, but it is hard to verify every dependency we use.  Typically, while experimenting with virtual-threads, we realized that using the link:{pgsql-driver}[postgresql-JDBC driver] results in frequent pinning."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/virtual-threads.adoc:301
#, no-wrap
msgid "The JDBC problem"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:304
msgid "Our experiments so far show that when a virtual thread queries a database using the JDBC driver, it will pin its carrier thread during the entire operation."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:306
msgid "Let's show the code of the `findAllBlocking()` method we used in the first example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:310
#: upstream/_versions/3.0/guides/virtual-threads.adoc:383
#, no-wrap
msgid "//import ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:314
#: upstream/_versions/3.0/guides/virtual-threads.adoc:387
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class FortuneRepository {\n"
"    // ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:334
#, no-wrap
msgid ""
"    public List<Fortune> findAllBlocking() {\n"
"        List<Fortune> fortunes = new ArrayList<>();\n"
"        Connection conn = null;\n"
"        try {\n"
"            conn = db.getJdbcConnection();\n"
"            var preparedStatement = conn.prepareStatement(SELECT_ALL);\n"
"            ResultSet rs = preparedStatement.executeQuery();\n"
"            while (rs.next()) {\n"
"                fortunes.add(create(rs));\n"
"            }\n"
"            rs.close();\n"
"            preparedStatement.close();\n"
"        } catch (SQLException e) {\n"
"            logger.warn(\"Unable to retrieve fortunes from the database\", e);\n"
"        } finally {\n"
"           close(conn);\n"
"        }\n"
"        return fortunes;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:337
#: upstream/_versions/3.0/guides/virtual-threads.adoc:403
#, no-wrap
msgid ""
"    //...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:341
msgid "The actual query happens at `ResultSet rs = preparedStatement.executeQuery();`, here is how it is implemented in the postgresql-jdbc driver 42.5.0:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:346
#, no-wrap
msgid ""
"class PgPreparedStatement extends PgStatement implements PreparedStatement {\n"
"    // ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:363
#, no-wrap
msgid ""
"    /*\n"
"    * A Prepared SQL query is executed and its ResultSet is returned\n"
"    *\n"
"    * @return a ResultSet that contains the data produced by the * query - never null\n"
"    *\n"
"    * @exception SQLException if a database access error occurs\n"
"    */\n"
"    @Override\n"
"    public ResultSet executeQuery() throws SQLException {\n"
"        synchronized (this) {\n"
"            if (!executeWithFlags(0)) {\n"
"                throw new PSQLException(GT.tr(\"No results were returned by the query.\"), PSQLState.NO_DATA);\n"
"            }\n"
"            return getSingleResultSet();\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:366
#, no-wrap
msgid ""
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:371
msgid "This `synchronized` block is the culprit.  Replacing it with a lock is a good solution, but it won't be enough: `synchronized` blocks are also used in `executeWithFlags(int flag)`.  A systematic review of the postgresql-jdbc driver is necessary to make sure that it is compliant with virtual threads."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/virtual-threads.adoc:372
#, no-wrap
msgid "Reactive drivers at the rescue"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:377
msgid "The vertx-sql-client is a reactive client, hence it is not supposed to block while waiting for the completion of a transaction with the database.  However, when using the link:{mutiny-vertx-sql}[smallrye-mutiny-vertx-sqlclient] it is possible to use a variant method that will await for the completion of the transaction, mimicking a blocking behaviour."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:379
msgid "Below is the `FortuneRepository` except the blocking we've seen earlier has been replaced by reactive methods."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:392
#, no-wrap
msgid ""
"    public Uni<List<Fortune>> findAllAsync() {\n"
"        return db.getPool()\n"
"                .preparedQuery(SELECT_ALL).execute()\n"
"                .map(this::createListOfFortunes);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:394
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:400
#, no-wrap
msgid ""
"    public List<Fortune> findAllAsyncAndAwait() {\n"
"        var rows = db.getPool().preparedQuery(SELECT_ALL)\n"
"                .executeAndAwait();\n"
"        return createListOfFortunes(rows);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:407
msgid "Contrary to the link:{pgsql-driver}[postgresql-jdbc driver], no `synchronized` block is used where it shouldn't be, and the `await` behaviour is implemented using locks and latches that won't cause pinning."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:411
msgid "Using the synchronous methods of the link:{mutiny-vertx-sql}[smallrye-mutiny-vertx-sqlclient] along with virtual threads will allow you to use the synchronous blocking style, avoid pinning the carrier thread, and get performance close to a pure reactive implementation."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/virtual-threads.adoc:412
#, no-wrap
msgid "A point about performance"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:418
msgid "Our experiments seem to indicate that Quarkus with virtual threads will scale better than Quarkus blocking (offloading the computation on a pool of platform worker threads) but not as well as Quarkus reactive.  The memory consumption especially might be an issue: if your system needs to keep its memory footprint low we would advise you stick to using reactive constructs."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:422
msgid "This degradation of performance doesn't seem to come from virtual threads themselves but from the interactions between Vert.x/Netty (Quarkus underlying reactive engine) and the virtual threads.  This was illustrated in the issue that we will now describe."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/virtual-threads.adoc:423
#, no-wrap
msgid "The Netty problem"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:428
msgid "For JSON serialization, Netty uses their custom implementation of thread locals, `FastThreadLocal` to store buffers.  When using virtual threads in quarkus, the number of virtual threads simultaneously living in the service is directly related to the incoming traffic.  It is possible to get hundreds of thousands, if not millions, of them."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:432
msgid "If they need to serialize some data to JSON they will end up creating as many instances of `FastThreadLocal`, resulting on a massive memory consumption as well as exacerbated pressure on the garbage collector.  This will eventually affect the performance of the application and inhibit its scalability."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:439
msgid "This is a perfect example of the mismatch between the reactive stack and the virtual threads.  The fundamental hypothesis are completely different and result in different optimizations.  Netty expects a system using few event-loops (as many event-loops as CPU cores by default in Quarkus), but it gets hundreds of thousands of threads.  You can refer to link:https://mail.openjdk.org/pipermail/loom-dev/2022-July/004844.html[this mail] to get more information on how we envision our future with virtual threads."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/virtual-threads.adoc:440
#, no-wrap
msgid "Our solution to the Netty problem"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:445
msgid "In order to avoid this wasting of resource without modifying Netty upstream, we wrote an extension that modifies the bytecode of the class responsible for creating the thread locals at build time.  Using this extension, performance of virtual threads in Quarkus for the Json Serialization test of the Techempower suite increased by nearly 80%, making it almost as good as reactive endpoints."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:447
msgid "To use it, it needs to be added as a dependency:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:455
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-netty-loom-adaptor</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:458
msgid "Furthermore, some operations undertaken by this extension need special access, it is necessary to"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:460
msgid "compile the application with the flag `-Dnet.bytebuddy.experimental`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:461
msgid "open the `java.base.lang` module at runtime with the flag `--add-opens java.base/java.lang=ALL-UNNAMED`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:463
msgid "This extension is only intended to improve performance, it is perfectly fine not to use it."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/virtual-threads.adoc:464
#, no-wrap
msgid "Concerning dev mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:467
msgid "If you want to use quarkus with the dev mode, it won't be possible to manually specify the flags we mentioned along this guide.  Instead, you want to specify them all in the configuration of the `quarkus-maven-plugin` as presented below."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:482
#, no-wrap
msgid ""
"<plugin>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-maven-plugin</artifactId>\n"
"    <version>${quarkus.version}</version>\n"
"    <executions>\n"
"        <execution>\n"
"            <goals>\n"
"                <goal>build</goal>\n"
"            </goals>\n"
"        </execution>\n"
"    </executions>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:492
#, no-wrap
msgid ""
"    <configuration>\n"
"      <source>19</source>\n"
"      <target>19</target>\n"
"      <compilerArgs>\n"
"        <arg>--enable-preview</arg>\n"
"        <arg>-Dnet.bytebuddy.experimental</arg>\n"
"      </compilerArgs>\n"
"      <jvmArgs>--enable-preview --add-opens java.base/java.lang=ALL-UNNAMED</jvmArgs>\n"
"    </configuration>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:494
#, no-wrap
msgid "</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:498
msgid "If you don't want to specify the opening of the `java.lang` module in your pom.xml file, you can also specify it as an argument when you start the dev mode."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:500
msgid "The configuration of the quarkus-maven-plugin will be simpler:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:513
#, no-wrap
msgid ""
"    <configuration>\n"
"      <source>19</source>\n"
"      <target>19</target>\n"
"      <compilerArgs>\n"
"        <arg>--enable-preview</arg>\n"
"        <arg>-Dnet.bytebuddy.experimental</arg>\n"
"      </compilerArgs>\n"
"      <jvmArgs>--enable-preview</jvmArgs>\n"
"    </configuration>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/virtual-threads.adoc:516
msgid "And the command will become:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/virtual-threads.adoc:520
#, no-wrap
msgid "mvn quarkus:dev -Dopen-lang-package\n"
msgstr ""
