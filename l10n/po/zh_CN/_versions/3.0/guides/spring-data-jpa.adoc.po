# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-01-20 14:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:6
#, no-wrap
msgid "Extension for Spring Data API"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:13
msgid "While users are encouraged to use Hibernate ORM with Panache for Relational Database access, Quarkus provides a compatibility layer for Spring Data JPA repositories in the form of the `spring-data-jpa` extension."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:14
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:18
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:22
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议你按照下面几节的说明，一步一步地创建应用程序。然而，你可以直接进入已完成的例子。"

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:24
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或者下载一个 {quickstarts-archive-url}[存档]。"

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:26
msgid "The solution is located in the `spring-data-jpa-quickstart` {quickstarts-tree-url}/spring-data-jpa-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:27
#, no-wrap
msgid "Creating the Maven project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:30
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。用以下命令创建一个新项目："

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:36
msgid "This command generates a Maven project and imports the `spring-data-jpa` extension."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:39
msgid "If you already have your Quarkus project configured, you can add the `spring-data-jpa` extension to your project by running the following command in your project base directory:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:43
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"spring-data-jpa\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:46
msgid "This will add the following to your build file:"
msgstr "这将在您的构建文件中添加以下内容："

#. type: Block title
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:48
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:54
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-spring-data-jpa</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:57
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:60
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-spring-data-jpa\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:62
#, no-wrap
msgid "Define the Entity"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:65
msgid "Throughout the course of this guide, the following JPA Entity will be used:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:69
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:171
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:194
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:267
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:432
#, no-wrap
msgid "package org.acme.spring.data.jpa;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:73
#, no-wrap
msgid ""
"import jakarta.persistence.Entity;\n"
"import jakarta.persistence.GeneratedValue;\n"
"import jakarta.persistence.Id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:76
#, no-wrap
msgid ""
"@Entity\n"
"public class Fruit {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:80
#, no-wrap
msgid ""
"    @Id\n"
"    @GeneratedValue\n"
"    private Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:82
#, no-wrap
msgid "    private String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:84
#, no-wrap
msgid "    private String color;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:88
#, no-wrap
msgid ""
"    public Fruit() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:93
#, no-wrap
msgid ""
"    public Fruit(String name, String color) {\n"
"        this.name = name;\n"
"        this.color = color;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:97
#, no-wrap
msgid ""
"    public Long getId() {\n"
"        return id;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:101
#, no-wrap
msgid ""
"    public void setId(Long id) {\n"
"        this.id = id;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:105
#, no-wrap
msgid ""
"    public String getName() {\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:109
#, no-wrap
msgid ""
"    public void setName(String name) {\n"
"        this.name = name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:113
#, no-wrap
msgid ""
"    public String getColor() {\n"
"        return color;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:118
#, no-wrap
msgid ""
"    public void setColor(String color) {\n"
"        this.color = color;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:121
#, no-wrap
msgid "Configure database access properties"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:124
msgid "Add the following properties to `application.properties` to configure access to a local PostgreSQL instance."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:134
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.datasource.username=quarkus_test\n"
"quarkus.datasource.password=quarkus_test\n"
"quarkus.datasource.jdbc.url=jdbc:postgresql:quarkus_test\n"
"quarkus.datasource.jdbc.max-size=8\n"
"quarkus.datasource.jdbc.min-size=2\n"
"quarkus.hibernate-orm.database.generation=drop-and-create\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:137
msgid "This configuration assumes that PostgreSQL will be running locally."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:139
msgid "A very easy way to accomplish that is by using the following Docker command:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:143
#, no-wrap
msgid "docker run -it --rm=true --name quarkus_test -e POSTGRES_USER=quarkus_test -e POSTGRES_PASSWORD=quarkus_test -e POSTGRES_DB=quarkus_test -p 5432:5432 postgres:14.1\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:146
msgid "If you plan on using a different setup, please change your `application.properties` accordingly."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:147
#, no-wrap
msgid "Prepare the data"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:151
msgid "To make it easier to showcase some capabilities of Spring Data JPA on Quarkus, some test data should be inserted into the database by adding the following content to a new file named `src/main/resources/import.sql`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:159
#, no-wrap
msgid ""
"INSERT INTO fruit(id, name, color) VALUES (1, 'Cherry', 'Red');\n"
"INSERT INTO fruit(id, name, color) VALUES (2, 'Apple', 'Red');\n"
"INSERT INTO fruit(id, name, color) VALUES (3, 'Banana', 'Yellow');\n"
"INSERT INTO fruit(id, name, color) VALUES (4, 'Avocado', 'Green');\n"
"INSERT INTO fruit(id, name, color) VALUES (5, 'Strawberry', 'Red');\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:162
msgid "Hibernate ORM will execute these queries on application startup."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:163
#, no-wrap
msgid "Define the repository"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:167
msgid "It is now time to define the repository that will be used to access `Fruit`.  In a typical Spring Data fashion create a repository like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:173
#, no-wrap
msgid "import org.springframework.data.repository.CrudRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:175
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:466
#, no-wrap
msgid "import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:177
#, no-wrap
msgid "public interface FruitRepository extends CrudRepository<Fruit, Long> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:180
#, no-wrap
msgid ""
"    List<Fruit> findByColor(String color);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:185
msgid "The `FruitRepository` above extends Spring Data's `org.springframework.data.repository.CrudRepository` which means that all the latter's methods are available to `FruitRepository`.  Additionally `findByColor` is defined whose purpose is to return all Fruit entities that match the specified color."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:186
#, no-wrap
msgid "Update the JAX-RS resource"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:190
msgid "With the repository in place, the next order of business is to create the JAX-RS resource that will use the `FruitRepository`.  Create `FruitResource` with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:200
#, no-wrap
msgid ""
"import jakarta.ws.rs.DELETE;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.POST;\n"
"import jakarta.ws.rs.PUT;\n"
"import jakarta.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:203
#, no-wrap
msgid ""
"import java.util.List;\n"
"import java.util.Optional;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:206
#, no-wrap
msgid ""
"@Path(\"/fruits\")\n"
"public class FruitResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:208
#, no-wrap
msgid "    private final FruitRepository fruitRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:212
#, no-wrap
msgid ""
"    public FruitResource(FruitRepository fruitRepository) {\n"
"        this.fruitRepository = fruitRepository;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:217
#, no-wrap
msgid ""
"    @GET\n"
"    public Iterable<Fruit> findAll() {\n"
"        return fruitRepository.findAll();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:224
#, no-wrap
msgid ""
"    @DELETE\n"
"    @Path(\"{id}\")\n"
"    public void delete(long id) {\n"
"        fruitRepository.deleteById(id);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:230
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/name/{name}/color/{color}\")\n"
"    public Fruit create(String name, String color) {\n"
"        return fruitRepository.save(new Fruit(name, color));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:240
#, no-wrap
msgid ""
"    @PUT\n"
"    @Path(\"/id/{id}/color/{color}\")\n"
"    public Fruit changeColor(Long id, String color) {\n"
"        Optional<Fruit> optional = fruitRepository.findById(id);\n"
"        if (optional.isPresent()) {\n"
"            Fruit fruit = optional.get();\n"
"            fruit.setColor(color);\n"
"            return fruitRepository.save(fruit);\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:243
#, no-wrap
msgid ""
"        throw new IllegalArgumentException(\"No Fruit with id \" + id + \" exists\");\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:250
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/color/{color}\")\n"
"    public List<Fruit> findByColor(String color) {\n"
"        return fruitRepository.findByColor(color);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:254
msgid "`FruitResource` now provides a few REST endpoints that can be used to perform CRUD operation on `Fruit`."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:255
#, no-wrap
msgid "Note on Spring Web"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:259
msgid "The JAX-RS resource can also be substituted with a Spring Web controller as Quarkus supports REST endpoint definition using Spring controllers.  See the xref:spring-web.adoc[Spring Web guide] for more details."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:260
#, no-wrap
msgid "Update the test"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:263
msgid "To test the capabilities of `FruitRepository` proceed to update the content of `FruitResourceTest` to:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:270
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:276
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.containsString;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
"import static org.hamcrest.CoreMatchers.notNullValue;\n"
"import static org.hamcrest.core.IsNot.not;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:279
#, no-wrap
msgid ""
"@QuarkusTest\n"
"class FruitResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:292
#, no-wrap
msgid ""
"    @Test\n"
"    void testListAllFruits() {\n"
"        //List all, should have all 3 fruits the database has initially:\n"
"        given()\n"
"                .when().get(\"/fruits\")\n"
"                .then()\n"
"                .statusCode(200)\n"
"                .body(\n"
"                        containsString(\"Cherry\"),\n"
"                        containsString(\"Apple\"),\n"
"                        containsString(\"Banana\")\n"
"                );\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:299
#, no-wrap
msgid ""
"        //Delete the Cherry:\n"
"        given()\n"
"                .when().delete(\"/fruits/1\")\n"
"                .then()\n"
"                .statusCode(204)\n"
"        ;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:310
#, no-wrap
msgid ""
"        //List all, cherry should be missing now:\n"
"        given()\n"
"                .when().get(\"/fruits\")\n"
"                .then()\n"
"                .statusCode(200)\n"
"                .body(\n"
"                        not(containsString(\"Cherry\")),\n"
"                        containsString(\"Apple\"),\n"
"                        containsString(\"Banana\")\n"
"                );\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:319
#, no-wrap
msgid ""
"        //Create a new Fruit\n"
"        given()\n"
"                .when().post(\"/fruits/name/Orange/color/Orange\")\n"
"                .then()\n"
"                .statusCode(200)\n"
"                .body(containsString(\"Orange\"))\n"
"                .body(\"id\", notNullValue())\n"
"                .extract().body().jsonPath().getString(\"id\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:331
#, no-wrap
msgid ""
"        //List all, Orange should be present now:\n"
"        given()\n"
"                .when().get(\"/fruits\")\n"
"                .then()\n"
"                .statusCode(200)\n"
"                .body(\n"
"                        not(containsString(\"Cherry\")),\n"
"                        containsString(\"Apple\"),\n"
"                        containsString(\"Orange\")\n"
"                );\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:340
#, no-wrap
msgid ""
"    @Test\n"
"    void testFindByColor() {\n"
"        //Find by color that no fruit has\n"
"        given()\n"
"                .when().get(\"/fruits/color/Black\")\n"
"                .then()\n"
"                .statusCode(200)\n"
"                .body(\"size()\", is(0));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:350
#, no-wrap
msgid ""
"        //Find by color that multiple fruits have\n"
"        given()\n"
"                .when().get(\"/fruits/color/Red\")\n"
"                .then()\n"
"                .statusCode(200)\n"
"                .body(\n"
"                        containsString(\"Apple\"),\n"
"                        containsString(\"Strawberry\")\n"
"                );\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:358
#, no-wrap
msgid ""
"        //Find by color that matches\n"
"        given()\n"
"                .when().get(\"/fruits/color/Green\")\n"
"                .then()\n"
"                .statusCode(200)\n"
"                .body(\"size()\", is(1))\n"
"                .body(containsString(\"Avocado\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:365
#, no-wrap
msgid ""
"        //Update color of Avocado\n"
"        given()\n"
"                .when().put(\"/fruits/id/4/color/Black\")\n"
"                .then()\n"
"                .statusCode(200)\n"
"                .body(containsString(\"Black\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:377
#, no-wrap
msgid ""
"        //Find by color that Avocado now has\n"
"        given()\n"
"                .when().get(\"/fruits/color/Black\")\n"
"                .then()\n"
"                .statusCode(200)\n"
"                .body(\"size()\", is(1))\n"
"                .body(\n"
"                        containsString(\"Black\"),\n"
"                        containsString(\"Avocado\")\n"
"                );\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:379
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:491
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:382
msgid "The test can be easily run by issuing:"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:385
#, no-wrap
msgid "Package and run the application"
msgstr "打包并运行该应用程序"

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:389
msgid "Quarkus dev mode works with the defined repositories just like with any other Quarkus extension, greatly enhancing your productivity during the dev cycle.  The application can be started in dev mode as usual using:"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:392
#, no-wrap
msgid "Run the application as a native binary"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:395
msgid "You can of course create a native executable following the instructions of xref:building-native-image.adoc[this guide]."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:396
#, no-wrap
msgid "Supported Spring Data JPA functionalities"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:399
msgid "Quarkus currently supports a subset of Spring Data JPA's features, namely the most useful and most commonly used features."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:404
msgid "An important part of this support is that all repository generation is done at build time thus ensuring that all supported features work correctly in native mode.  Moreover, developers know at build time whether their repository method names can be converted to proper JPQL queries.  This also means that if a method name indicates that a field should be used that is not part of the Entity, developers will get the relevant error at build time."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:405
#, no-wrap
msgid "What is supported"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:408
msgid "The following sections described the most important supported features of Spring Data JPA."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:409
#, no-wrap
msgid "Automatic repository implementation generation"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:412
msgid "Interfaces that extend any of the following Spring Data repositories are automatically implemented:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:414
msgid "`org.springframework.data.repository.Repository`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:415
msgid "`org.springframework.data.repository.CrudRepository`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:416
msgid "`org.springframework.data.repository.PagingAndSortingRepository`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:417
msgid "`org.springframework.data.jpa.repository.JpaRepository`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:420
msgid "The generated repositories are also registered as beans so they can be injected into any other bean.  Furthermore, the methods that update the database are automatically annotated with `@Transactional`."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:421
#, no-wrap
msgid "Fine-tuning of repository definition"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:425
msgid "This allows user defined repository interfaces to cherry-pick methods from any of the supported Spring Data repository interfaces without having to extend those interfaces.  This is particularly useful when for example a repository needs to use some methods from `CrudRepository` but it's undesirable to expose the full list of methods of said interface."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:428
msgid "Assume for example that a `PersonRepository` that shouldn't extend `CrudRepository` but would like to use `save` and `findById` methods which are defined in said interface.  In such a case, `PersonRepository` would look like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:434
#, no-wrap
msgid "import org.springframework.data.repository.Repository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:436
#, no-wrap
msgid "public interface PersonRepository extends Repository<Person, Long> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:438
#, no-wrap
msgid "    Person save(Person entity);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:441
#, no-wrap
msgid ""
"    Optional<Person> findById(Person entity);\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:443
#, no-wrap
msgid "Customizing individual repositories using repository fragments"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:447
msgid "Repositories can be enriched with additional functionality or override the default implementation of methods of the supported Spring Data repositories.  This is best shown with an example."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:449
msgid "A repository fragment is defined as so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:453
#, no-wrap
msgid "public interface PersonFragment {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:456
#, no-wrap
msgid ""
"    // custom findAll\n"
"    List<Person> findAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:459
#, no-wrap
msgid ""
"    void makeNameUpperCase(Person person);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:462
msgid "The implementation of that fragment looks like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:468
#, no-wrap
msgid "import io.quarkus.hibernate.orm.panache.runtime.JpaOperations;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:470
#, no-wrap
msgid "public class PersonFragmentImpl implements PersonFragment {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:476
#, no-wrap
msgid ""
"    @Override\n"
"    public List<Person> findAll() {\n"
"        // do something here\n"
"        return (List<Person>) JpaOperations.findAll(Person.class).list();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:482
#, no-wrap
msgid ""
"    @Override\n"
"    public void makeNameUpperCase(Person person) {\n"
"        person.setName(person.getName().toUpperCase());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:485
msgid "Then the actual `PersonRepository` interface to be used would look like:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:489
#, no-wrap
msgid "public interface PersonRepository extends JpaRepository<Person, Long>, PersonFragment {\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:493
#, no-wrap
msgid "Derived query methods"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:497
msgid "Methods of repository interfaces that follow the Spring Data conventions can be automatically implemented (unless they fall into one of the unsupported cases listed later on).  This means that methods like the following will all work:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:501
#, no-wrap
msgid "public interface PersonRepository extends CrudRepository<Person, Long> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:503
#, no-wrap
msgid "    List<Person> findByName(String name);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:505
#, no-wrap
msgid "    Person findByNameBySsn(String ssn);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:507
#, no-wrap
msgid "    Optional<Person> findByNameBySsnIgnoreCase(String ssn);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:509
#, no-wrap
msgid "    boolean existsBookByYearOfBirthBetween(Integer start, Integer end);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:511
#, no-wrap
msgid "    List<Person> findByName(String name, Sort sort);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:513
#, no-wrap
msgid "    Page<Person> findByNameOrderByJoined(String name, Pageable pageable);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:515
#, no-wrap
msgid "    List<Person> findByNameOrderByAge(String name);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:517
#, no-wrap
msgid "    List<Person> findByNameOrderByAgeDesc(String name, Pageable pageable);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:519
#, no-wrap
msgid "    List<Person> findByAgeBetweenAndNameIsNotNull(int lowerAgeBound, int upperAgeBound);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:521
#, no-wrap
msgid "    List<Person> findByAgeGreaterThanEqualOrderByAgeAsc(int age);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:523
#, no-wrap
msgid "    List<Person> queryByJoinedIsAfter(Date date);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:525
#, no-wrap
msgid "    Collection<Person> readByActiveTrueOrderByAgeDesc();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:527
#, no-wrap
msgid "    Long countByActiveNot(boolean active);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:529
#, no-wrap
msgid "    List<Person> findTop3ByActive(boolean active, Sort sort);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:532
#, no-wrap
msgid ""
"    Stream<Person> findPersonByNameAndSurnameAllIgnoreCase(String name, String surname);\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:534
#, no-wrap
msgid "User defined queries"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:537
msgid "User supplied queries contained in the `@Query` annotation. For example things like the following all work:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:541
#, no-wrap
msgid "public interface MovieRepository extends CrudRepository<Movie, Long> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:543
#, no-wrap
msgid "    Movie findFirstByOrderByDurationDesc();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:546
#, no-wrap
msgid ""
"    @Query(\"select m from Movie m where m.rating = ?1\")\n"
"    Iterator<Movie> findByRating(String rating);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:549
#, no-wrap
msgid ""
"    @Query(\"from Movie where title = ?1\")\n"
"    Movie findByTitle(String title);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:552
#, no-wrap
msgid ""
"    @Query(\"select m from Movie m where m.duration > :duration and m.rating = :rating\")\n"
"    List<Movie> withRatingAndDurationLargerThan(@Param(\"duration\") int duration, @Param(\"rating\") String rating);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:555
#, no-wrap
msgid ""
"    @Query(\"from Movie where title like concat('%', ?1, '%')\")\n"
"    List<Object[]> someFieldsWithTitleLike(String title, Sort sort);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:559
#, no-wrap
msgid ""
"    @Modifying\n"
"    @Query(\"delete from Movie where rating = :rating\")\n"
"    void deleteByRating(@Param(\"rating\") String rating);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:563
#, no-wrap
msgid ""
"    @Modifying\n"
"    @Query(\"delete from Movie where title like concat('%', ?1, '%')\")\n"
"    Long deleteByTitleLike(String title);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:567
#, no-wrap
msgid ""
"    @Modifying\n"
"    @Query(\"update Movie m set m.rating = :newName where m.rating = :oldName\")\n"
"    int changeRatingToNewName(@Param(\"newName\") String newName, @Param(\"oldName\") String oldName);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:571
#, no-wrap
msgid ""
"    @Modifying\n"
"    @Query(\"update Movie set rating = null where title =?1\")\n"
"    void setRatingToNullForTitle(String title);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:575
#, no-wrap
msgid ""
"    @Query(\"from Movie order by length(title)\")\n"
"    Slice<Movie> orderByTitleLength(Pageable pageable);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:577
msgid "All methods that are annotated with `@Modifying` will automatically be annotated with `@Transactional`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:579
msgid "In Quarkus, `@Param` is optional when parameter names have been compiled to bytecode (which is active by default in generated projects)."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:580
#, no-wrap
msgid "Naming Strategies"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:583
msgid "Hibernate ORM maps property names using a physical naming strategy and an implicit naming strategy. If you wish to use Spring Boot's default naming strategies, the following properties need to be set:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:588
#, no-wrap
msgid ""
"quarkus.hibernate-orm.physical-naming-strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy\n"
"quarkus.hibernate-orm.implicit-naming-strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:590
#, no-wrap
msgid "More examples"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:593
msgid "An extensive list of examples can be seen in the https://github.com/quarkusio/quarkus/tree/main/integration-tests/spring-data-jpa[integration tests] directory which is located inside the Quarkus source code."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:594
#, no-wrap
msgid "What is currently unsupported"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:597
msgid "Methods of the `org.springframework.data.repository.query.QueryByExampleExecutor` interface - if any of these are invoked, a Runtime exception will be thrown."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:598
msgid "QueryDSL support. No attempt will be made to generate implementations of the QueryDSL related repositories."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:599
msgid "Customizing the base repository for all repository interfaces in the code base."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:601
msgid "In Spring Data JPA this is done by registering a class that extends `org.springframework.data.jpa.repository.support.SimpleJpaRepository` however in Quarkus this class is not used at all (since all the necessary plumbing is done at build time). Similar support might be added to Quarkus in the future."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:602
msgid "Using `java.util.concurrent.Future` and classes that extend it as return types of repository methods."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:603
msgid "Native and named queries when using `@Query`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:605
msgid "https://github.com/spring-projects/spring-data-jpa/blob/main/src/main/asciidoc/jpa.adoc#entity-state-detection-strategies[Entity State-detection Strategies] via `EntityInformation`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:607
msgid "The Quarkus team is exploring various alternatives to bridging the gap between the JPA and Reactive worlds."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:608
#, no-wrap
msgid "Important Technical Note"
msgstr "重要技术说明"

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:612
msgid "Please note that the Spring support in Quarkus does not start a Spring Application Context nor are any Spring infrastructure classes run.  Spring classes and annotations are only used for reading metadata and / or are used as user code method return types or parameter types."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:613
#, no-wrap
msgid "More Spring guides"
msgstr "更多 Spring 指南"

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:616
msgid "Quarkus has more Spring compatibility features. See the following guides for more details:"
msgstr "Quarkus拥有更多的Spring兼容特性。获取更多细节请参阅以下指南:"

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:618
msgid "xref:spring-di.adoc[Quarkus - Extension for Spring DI]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:619
msgid "xref:spring-web.adoc[Quarkus - Extension for Spring Web]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:620
msgid "xref:spring-security.adoc[Quarkus - Extension for Spring Security]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:621
msgid "xref:spring-cloud-config-client.adoc[Quarkus - Reading properties from Spring Cloud Config Server]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:622
msgid "xref:spring-boot-properties.adoc[Quarkus - Extension for Spring Boot properties]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:623
msgid "xref:spring-cache.adoc[Quarkus - Extension for Spring Cache]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:624
msgid "xref:spring-scheduled.adoc[Quarkus - Extension for Spring Scheduled]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/spring-data-jpa.adoc:624
msgid "xref:spring-data-rest.adoc[Quarkus - Extension for Spring Data REST]"
msgstr ""
