# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-01-20 14:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:6
#, no-wrap
msgid "Using Stork with Kubernetes"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:12
msgid "This guide explains how to use Stork with Kubernetes for service discovery and load balancing."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:14
msgid "If you are new to Stork, please read the xref:stork.adoc[Stork Getting Started Guide]."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:17
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:22
msgid "Access to a Kubernetes cluster (Minikube is a viable option)"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:23
#, no-wrap
msgid "Architecture"
msgstr "架构"

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:26
msgid "In this guide, we will work with a few components deployed in a Kubernetes cluster:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:28
msgid "A simple blue service."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:29
msgid "A simple red service."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:30
msgid "The `color-service` is the Kubernetes service which is the entry point to the Blue and Red instances."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:31
msgid "A client service using a REST client to call the blue or the red service. Service discovery and selection are delegated to Stork."
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:32
#, no-wrap
msgid "Architecture of the application"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:32
#, no-wrap
msgid "stork-kubernetes-architecture.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:35
msgid "For the sake of simplicity, everything will be deployed in the same namespace of the Kubernetes cluster."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:36
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:40
msgid "We recommend that you follow the instructions in the next sections and create the applications step by step.  However, you can go right to the completed example."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:42
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或者下载一个 {quickstarts-archive-url}[存档]。"

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:44
msgid "The solution is located in the `stork-kubernetes-quickstart` {quickstarts-tree-url}/stork-kubernetes-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:45
#, no-wrap
msgid "Discovery and selection"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:48
msgid "Before going further, we need to discuss discovery vs. selection."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:51
msgid "Service discovery is the process of locating service instances.  It produces a list of service instances that is potentially empty (if no service matches the request) or contains multiple service instances."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:54
msgid "Service selection, also called load-balancing, chooses the best instance from the list returned by the discovery process.  The result is a single service instance or an exception when no suitable instance can be found."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:58
msgid "Stork handles both discovery and selection.  However, it does not handle the communication with the service but only provides a service instance.  The various integrations in Quarkus extract the location of the service from that service instance."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:60
#, no-wrap
msgid "Bootstrapping the project"
msgstr "创建项目"

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:63
msgid "Create a Quarkus project importing the quarkus-rest-client-reactive and quarkus-resteasy-reactive extensions using your favorite approach:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:69
msgid "In the generated project, also add the following dependencies:"
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:71
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:93
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.smallrye.stork</groupId>\n"
"    <artifactId>stork-service-discovery-kubernetes</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"      <groupId>io.smallrye.stork</groupId>\n"
"      <artifactId>stork-load-balancer-random</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-kubernetes</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-kubernetes-client</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-container-image-jib</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:96
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:103
#, no-wrap
msgid ""
"implementation(\"io.smallrye.stork:stork-service-discovery-kubernetes\")\n"
"implementation(\"io.smallrye.stork:stork-load-balancer-random\")\n"
"implementation(\"io.quarkus:quarkus-kubernetes\")\n"
"implementation(\"io.quarkus:quarkus-kubernetes-client\")\n"
"implementation(\"io.quarkus:quarkus-container-image-jib\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:106
msgid "`stork-service-discovery-kubernetes` provides an implementation of service discovery for Kubernetes. `stork-load-balancer-random` provides an implementation of random load balancer. `quarkus-kubernetes` enables the generation of Kubernetes manifests each time we perform a build. The `quarkuks-kubernetes-client` extension enables the use of the Fabric8 Kubernetes Client in native mode. And `quarkus-container-image-jib` enables the build of a container image using https://github.com/GoogleContainerTools/jib[Jib]."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:107
#, no-wrap
msgid "The Blue and Red services"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:110
msgid "Let's start with the very beginning: the service we will discover, select and call."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:112
msgid "The Red and Blue are two simple REST services serving an endpoint responding `Hello from Red!` and `Hello from Blue!` respectively. The code of both applications has been developed following the https://quarkus.io/guides/getting-started[Getting Started Guide]."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:114
msgid "As the goal of this guide is to show how to use Stork Kubernetes service discovery, we won't provide the specifics steps for the Red and Blue services. Their container images are already built and available in a public registry:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:116
msgid "https://quay.io/repository/quarkus/blue-service[Blue service container image]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:117
msgid "https://quay.io/repository/quarkus/red-service[Red service container image]"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:119
#, no-wrap
msgid "Deploy the Blue and Red services in Kubernetes"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:122
msgid "Now that we have our service container images available in a public registry, we need to deploy them into the Kubernetes cluster."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:124
msgid "The following file contains all the Kubernetes resources needed to deploy the Blue and Red services in the cluster and make them accessible:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:136
#, no-wrap
msgid ""
"kind: Role\n"
"apiVersion: rbac.authorization.k8s.io/v1\n"
"metadata:\n"
"  namespace: development\n"
"  name: endpoints-reader\n"
"rules:\n"
"  - apiGroups: [\"\"] # \"\" indicates the core API group\n"
"    resources: [\"endpoints\", \"pods\"]\n"
"    verbs: [\"get\", \"list\"]\n"
"---\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:152
#, no-wrap
msgid ""
"apiVersion: rbac.authorization.k8s.io/v1\n"
"kind: RoleBinding\n"
"metadata:\n"
"  name: stork-rb\n"
"  namespace: development\n"
"subjects:\n"
"  - kind: ServiceAccount\n"
"    # Reference to upper's `metadata.name`\n"
"    name: default\n"
"    # Reference to upper's `metadata.namespace`\n"
"    namespace: development\n"
"roleRef:\n"
"  kind: Role\n"
"  name: endpoints-reader\n"
"  apiGroup: rbac.authorization.k8s.io\n"
"---\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:172
#, no-wrap
msgid ""
"apiVersion: v1\n"
"kind: Service\n"
"metadata:\n"
"  annotations:\n"
"    app.quarkus.io/commit-id: f747f359406bedfb1a39c57392a5b5a9eaefec56\n"
"    app.quarkus.io/build-timestamp: 2022-03-31 - 10:36:56 +0000\n"
"  labels:\n"
"    app.kubernetes.io/name: color-service\n"
"    app.kubernetes.io/version: \"1.0\"\n"
"  name: color-service //<1>\n"
"spec:\n"
"  ports:\n"
"    - name: http\n"
"      port: 80\n"
"      targetPort: 8080\n"
"  selector:\n"
"    app.kubernetes.io/version: \"1.0\"\n"
"    type: color-service\n"
"  type: ClusterIP\n"
"---\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:215
#, no-wrap
msgid ""
"apiVersion: apps/v1\n"
"kind: Deployment\n"
"metadata:\n"
"  annotations:\n"
"    app.quarkus.io/commit-id: f747f359406bedfb1a39c57392a5b5a9eaefec56\n"
"    app.quarkus.io/build-timestamp: 2022-03-31 - 10:36:56 +0000\n"
"  labels:\n"
"    color: blue\n"
"    type: color-service\n"
"    app.kubernetes.io/name: blue-service\n"
"    app.kubernetes.io/version: \"1.0\"\n"
"  name: blue-service //<2>\n"
"spec:\n"
"  replicas: 1\n"
"  selector:\n"
"    matchLabels:\n"
"      app.kubernetes.io/name: blue-service\n"
"      app.kubernetes.io/version: \"1.0\"\n"
"  template:\n"
"    metadata:\n"
"      annotations:\n"
"        app.quarkus.io/commit-id: f747f359406bedfb1a39c57392a5b5a9eaefec56\n"
"        app.quarkus.io/build-timestamp: 2022-03-31 - 10:36:56 +0000\n"
"      labels:\n"
"        color: blue\n"
"        type: color-service\n"
"        app.kubernetes.io/name: blue-service\n"
"        app.kubernetes.io/version: \"1.0\"\n"
"    spec:\n"
"      containers:\n"
"        - env:\n"
"            - name: KUBERNETES_NAMESPACE\n"
"              valueFrom:\n"
"                fieldRef:\n"
"                  fieldPath: metadata.namespace\n"
"          image: quay.io/quarkus/blue-service:1.0\n"
"          imagePullPolicy: Always\n"
"          name: blue-service\n"
"          ports:\n"
"            - containerPort: 8080\n"
"              name: http\n"
"              protocol: TCP\n"
"---\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:258
#, no-wrap
msgid ""
"apiVersion: apps/v1\n"
"kind: Deployment\n"
"metadata:\n"
"  annotations:\n"
"    app.quarkus.io/commit-id: 27be03414510f776ca70d70d859b33e134570443\n"
"    app.quarkus.io/build-timestamp: 2022-03-31 - 10:38:54 +0000\n"
"  labels:\n"
"    color: red\n"
"    type: color-service\n"
"    app.kubernetes.io/version: \"1.0\"\n"
"    app.kubernetes.io/name: red-service\n"
"  name: red-service //<2>\n"
"spec:\n"
"  replicas: 1\n"
"  selector:\n"
"    matchLabels:\n"
"      app.kubernetes.io/version: \"1.0\"\n"
"      app.kubernetes.io/name: red-service\n"
"  template:\n"
"    metadata:\n"
"      annotations:\n"
"        app.quarkus.io/commit-id: 27be03414510f776ca70d70d859b33e134570443\n"
"        app.quarkus.io/build-timestamp: 2022-03-31 - 10:38:54 +0000\n"
"      labels:\n"
"        color: red\n"
"        type: color-service\n"
"        app.kubernetes.io/version: \"1.0\"\n"
"        app.kubernetes.io/name: red-service\n"
"    spec:\n"
"      containers:\n"
"        - env:\n"
"            - name: KUBERNETES_NAMESPACE\n"
"              valueFrom:\n"
"                fieldRef:\n"
"                  fieldPath: metadata.namespace\n"
"          image: quay.io/quarkus/red-service:1.0\n"
"          imagePullPolicy: Always\n"
"          name: red-service\n"
"          ports:\n"
"            - containerPort: 8080\n"
"              name: http\n"
"              protocol: TCP\n"
"---\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:283
#, no-wrap
msgid ""
"apiVersion: networking.k8s.io/v1\n"
"kind: Ingress //<3>\n"
"metadata:\n"
"  annotations:\n"
"    app.quarkus.io/commit-id: f747f359406bedfb1a39c57392a5b5a9eaefec56\n"
"    app.quarkus.io/build-timestamp: 2022-03-31 - 10:46:19 +0000\n"
"  labels:\n"
"    app.kubernetes.io/name: color-service\n"
"    app.kubernetes.io/version: \"1.0\"\n"
"    color: blue\n"
"    type: color-service\n"
"  name: color-service\n"
"spec:\n"
"  rules:\n"
"    - host: color-service.127.0.0.1.nip.io\n"
"      http:\n"
"        paths:\n"
"          - backend:\n"
"              service:\n"
"                name: color-service\n"
"                port:\n"
"                  name: http\n"
"            path: /\n"
"            pathType: Prefix\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:287
msgid "There are a few interesting parts in this listing:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:289
msgid "The Kubernetes Service resource, `color-service`, that Stork will discover."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:290
msgid "The Red and Blue service instances behind the `color-service` Kubernetes service."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:291
msgid "A Kubernetes Ingress resource making the `color-service` accessible from the outside of the cluster at the `color-service.127.0.0.1.nip.io` url. Not that the Ingress is not needed for Stork however, it helps to check that the architecture is in place."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:293
msgid "Create a file named `kubernetes-setup.yml` with the content above at the root of the project and run the following commands to deploy all the resources in the Kubernetes cluster. Don't forget to create a dedicated namespace:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:298
#, no-wrap
msgid ""
"kubectl create namespace development\n"
"kubectl apply -f kubernetes-setup.yml -n=development\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:301
msgid "If everything went well the Color service is accessible on http://color-service.127.0.0.1.nip.io. You should have `Hello from Red!` and `Hello from Blue!` response randomly."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:303
msgid "Stork is not limited to Kubernetes and integrates with other service discovery mechanisms."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:305
#, no-wrap
msgid "The REST Client interface and the front end API"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:308
msgid "So far, we didn't use Stork; we just deployed the services we will be discovering, selecting, and calling."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:311
msgid "We will call the services using the Reactive REST Client.  Create the `src/main/java/org/acme/MyService.java` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:315
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:348
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:317
#, no-wrap
msgid "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:321
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:331
#, no-wrap
msgid ""
"/**\n"
" * The REST Client interface.\n"
" *\n"
" * Notice the `baseUri`. It uses `stork://` as URL scheme indicating that the called service uses Stork to locate and\n"
" * select the service instance. The `my-service` part is the service name. This is used to configure Stork discovery\n"
" * and selection in the `application.properties` file.\n"
" */\n"
"@RegisterRestClient(baseUri = \"stork://my-service\")\n"
"public interface MyService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:336
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    String get();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:339
msgid "It's a straightforward REST client interface containing a single method. However, note the `baseUri` attribute:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:340
msgid "the `stork://` suffix instructs the REST client to delegate the discovery and selection of the service instances to Stork,"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:341
msgid "the `my-service` part of the URI is the service name we will be using in the application configuration."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:344
msgid "It does not change how the REST client is used.  Create the `src/main/java/org/acme/FrontendApi.java` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:350
#, no-wrap
msgid "import org.eclipse.microprofile.rest.client.inject.RestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:355
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:361
#, no-wrap
msgid ""
"/**\n"
" * A frontend API using our REST Client (which uses Stork to locate and select the service instance on each call).\n"
" */\n"
"@Path(\"/api\")\n"
"public class FrontendApi {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:363
#, no-wrap
msgid "    @RestClient MyService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:369
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String invoke() {\n"
"        return service.get();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:371
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:374
msgid "It injects and uses the REST client as usual."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:375
#, no-wrap
msgid "Stork configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:378
msgid "Now we need to configure Stork for using Kubernetes to discover the red and blue instances of the service."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:380
msgid "In the `src/main/resources/application.properties`, add:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:387
#, no-wrap
msgid ""
"quarkus.stork.my-service.service-discovery.type=kubernetes\n"
"quarkus.stork.my-service.service-discovery.k8s-namespace=development\n"
"quarkus.stork.my-service.service-discovery.application=color-service\n"
"quarkus.stork.my-service.load-balancer.type=random\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:394
msgid "`stork.my-service.service-discovery` indicates which type of service discovery we will be using to locate the `my-service` service.  In our case, it's `kubernetes`.  If your access to the Kubernetes cluster is configured via Kube config file, you don't need to configure the access to it. Otherwise, set the proper Kubernetes url using the `quarkus.stork.my-service.service-discovery.k8s-host` property.  `quarkus.stork.my-service.service-discovery.application` contains the name of the Kubernetes service Stork is going to ask for. In our case, this is the `color-service` corresponding to the kubernetes service backed by the Red and Blue instances.  Finally, `quarkus.stork.my-service.load-balancer.type` configures the service selection. In our case, we use a `random` Load Balancer."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:395
#, no-wrap
msgid "Deploy the REST Client interface and the front end API in the Kubernetes cluster"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:399
msgid "The system is almost complete. We only need to deploy the REST Client interface and the client service to the cluster.  In the `src/main/resources/application.properties`, add:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:406
#, no-wrap
msgid ""
"quarkus.container-image.registry=<public registry>\n"
"quarkus.kubernetes-client.trust-certs=true\n"
"quarkus.kubernetes.ingress.expose=true\n"
"quarkus.kubernetes.ingress.host=my-service.127.0.0.1.nip.io\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:411
msgid "The `quarkus.container-image.registry` contains the container registry to use.  The `quarkus.kubernetes.ingress.expose` indicates that the service will be accessible from the outside of the cluster.  The `quarkus.kubernetes.ingress.host` contains the url to access the service. We are using https://nip.io/[nip.io] wildcard for IP address mappings."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:413
msgid "For a more customized configuration you can check the https://quarkus.io/guides/deploying-to-kubernetes[Deploying to Kubernetes guide]"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:414
#, no-wrap
msgid "Build and push the container image"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:417
msgid "Thanks to the extensions we are using, we can perform the build of a container image using Jib and also enabling the generation of Kubernetes manifests while building the application. For example, the following command will generate a Kubernetes manifest in the `target/kubernetes/` directory and also build and push a container image for the project:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:421
#, no-wrap
msgid "./mvnw package -Dquarkus.container-image.build=true -Dquarkus.container-image.push=true\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:423
#, no-wrap
msgid "Deploy client service to the Kubernetes cluster"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:426
msgid "The generated manifest can be applied to the cluster from the project root using kubectl:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:430
#, no-wrap
msgid "kubectl apply -f target/kubernetes/kubernetes.yml -n=development\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:436
msgid "Please note that if you use Elliptic Curve keys with Stork and are getting exceptions like `java.lang.ClassNotFoundException: org.bouncycastle.jce.provider.BouncyCastleProvider`, then adding a BouncyCastle PKIX dependency (`org.bouncycastle:bcpkix-jdk15on`) is required."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:438
msgid "Note that internally an `org.bouncycastle.jce.provider.BouncyCastleProvider` provider will be registered if it has not already been registered."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:440
msgid "You can have this provider registered as described in the xref:security-customization.adoc#bouncy-castle[BouncyCastle] or xref:security-customization.adoc#bouncy-castle-fips[BouncyCastle FIPS] sections."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:444
msgid "We're done! So, let's see if it works."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:446
msgid "Open a browser and navigate to http://my-service.127.0.0.1.nip.io/api."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:448
msgid "Or if you prefer, in another terminal, run:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:457
#, no-wrap
msgid ""
"> curl http://my-service.127.0.0.1.nip.io/api\n"
"...\n"
"> curl http://my-service.127.0.0.1.nip.io/api\n"
"...\n"
"> curl http://my-service.127.0.0.1.nip.io/api\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:460
msgid "The responses should alternate randomly between `Hello from Red!` and `Hello from Blue!`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:462
msgid "You can compile this application into a native executable:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:466
msgid "Then, you need to build a container image based on the native executable. For this use the corresponding Dockerfile:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:470
#, no-wrap
msgid "> docker build -f src/main/docker/Dockerfile.native -t quarkus/stork-kubernetes-quickstart .\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:473
msgid "After publishing the new image to the container registry. You can redeploy the Kubernetes manifest to the cluster."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:474
#, no-wrap
msgid "Going further"
msgstr "进一步探索"

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:478
msgid "This guide has shown how to use SmallRye Stork to discover and select your services.  You can find more about Stork in:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:480
msgid "the xref:stork-reference.adoc[Stork reference guide],"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:481
msgid "the xref:stork.adoc[Stork with Consul reference guide],"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/stork-kubernetes.adoc:481
msgid "the https://smallrye.io/smallrye-stork[SmallRye Stork website]."
msgstr ""
