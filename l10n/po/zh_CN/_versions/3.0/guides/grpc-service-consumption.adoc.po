# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-01-20 14:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:6
#, no-wrap
msgid "Consuming a gRPC Service"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:12
msgid "gRPC clients can be injected in your application code."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:15
msgid "Consuming gRPC services requires the gRPC classes to be generated.  Place your `proto` files in `src/main/proto` and run `mvn compile`."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:16
#, no-wrap
msgid "Stubs and Injection"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:20
msgid "gRPC generation provides several stubs, providing different ways to consume a gRPC service.  You can inject:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:22
msgid "a service interface using the Mutiny API,"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:23
msgid "a blocking stub using the gRPC API,"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:24
msgid "a reactive stub based on Mutiny,"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:25
msgid "the gRPC `io.grpc.Channel`, that lets you create other types of stubs."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:29
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:107
#, no-wrap
msgid "import io.quarkus.grpc.GrpcClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:33
#, no-wrap
msgid ""
"import hello.Greeter;\n"
"import hello.GreeterGrpc.GreeterBlockingStub;\n"
"import hello.MutinyGreeterGrpc.MutinyGreeterStub;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:35
#, no-wrap
msgid "class MyBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:39
#, no-wrap
msgid ""
"   // A service interface using the Mutiny API\n"
"   @GrpcClient(\"helloService\")                   // <1>\n"
"   Greeter greeter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:43
#, no-wrap
msgid ""
"   // A reactive stub based on Mutiny\n"
"   @GrpcClient(\"helloService\")\n"
"   MutinyGreeterGrpc.MutinyGreeterStub mutiny;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:47
#, no-wrap
msgid ""
"   // A blocking stub using the gRPC API\n"
"   @GrpcClient\n"
"   GreeterGrpc.GreeterBlockingStub helloService; // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:50
#, no-wrap
msgid ""
"   @GrpcClient(\"hello-service\")\n"
"   Channel channel;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:52
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:198
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:54
msgid "A gRPC client injection point must be annotated with the `@GrpcClient` qualifier. This qualifier can be used to specify the name that is used to configure the underlying gRPC client. For example, if you set it to `hello-service`, configuring the host of the service is done using the `quarkus.grpc.clients.**hello-service**.host`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:55
msgid "If the name is not specified via the `GrpcClient#value()` then the field name is used instead, e.g. `helloService` in this particular case."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:58
msgid "The stub class names are derived from the service name used in your `proto` file.  For example, if you use `Greeter` as a service name as in:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:62
#, no-wrap
msgid "option java_package = \"hello\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:66
#, no-wrap
msgid ""
"service Greeter {\n"
"    rpc SayHello (HelloRequest) returns (HelloReply) {}\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:69
msgid "Then the service interface name is: `hello.Greeter`, the Mutiny stub name is: `hello.MutinyGreeterGrpc.MutinyGreeterStub` and the blocking stub name is: `hello.GreeterGrpc.GreeterBlockingStub`."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:70
#, no-wrap
msgid "Examples"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:72
#, no-wrap
msgid "Service Interface"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:78
#, no-wrap
msgid ""
"import io.quarkus.grpc.GrpcClient;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:80
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:337
#, no-wrap
msgid "import hello.Greeter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:85
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:114
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:88
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:117
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class ExampleResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:91
#, no-wrap
msgid ""
"   @GrpcClient <1>\n"
"   Greeter hello;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:99
#, no-wrap
msgid ""
"   @GET\n"
"   @Path(\"/mutiny/{name}\")\n"
"   public Uni<String> helloMutiny(String name) {\n"
"      return hello.sayHello(HelloRequest.newBuilder().setName(name).build())\n"
"            .onItem().transform(HelloReply::getMessage);\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:101
msgid "The service name is derived from the injection point - the field name is used. The `quarkus.grpc.clients.hello.host` property must be set."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:102
#, no-wrap
msgid "Blocking Stub"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:109
#, no-wrap
msgid "import hello.GreeterGrpc.GreeterBlockingStub;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:120
#, no-wrap
msgid ""
"   @GrpcClient(\"hello\") <1>\n"
"   GreeterGrpc.GreeterBlockingStub blockingHelloService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:127
#, no-wrap
msgid ""
"   @GET\n"
"   @Path(\"/blocking/{name}\")\n"
"   public String helloBlocking(String name) {\n"
"      return blockingHelloService.sayHello(HelloRequest.newBuilder().setName(name).build()).getMessage();\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:129
msgid "The `quarkus.grpc.clients.hello.host` property must be set."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:130
#, no-wrap
msgid "Handling streams"
msgstr "处理流"

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:133
msgid "gRPC allows sending and receiving streams:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:141
#, no-wrap
msgid ""
"service Streaming {\n"
"    rpc Source(Empty) returns (stream Item) {} // Returns a stream\n"
"    rpc Sink(stream Item) returns (Empty) {}   // Reads a stream\n"
"    rpc Pipe(stream Item) returns (stream Item) {}  // Reads a streams and return a streams\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:144
msgid "Using the Mutiny stub, you can interact with these as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:148
#, no-wrap
msgid "package io.quarkus.grpc.example.streaming;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:153
#, no-wrap
msgid ""
"import io.grpc.examples.streaming.Empty;\n"
"import io.grpc.examples.streaming.Item;\n"
"import io.grpc.examples.streaming.MutinyStreamingGrpc;\n"
"import io.quarkus.grpc.GrpcClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:156
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Multi;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:162
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:166
#, no-wrap
msgid ""
"@Path(\"/streaming\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"public class StreamingEndpoint {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:169
#, no-wrap
msgid ""
"    @GrpcClient\n"
"    MutinyStreamingGrpc.MutinyStreamingStub streaming;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:176
#, no-wrap
msgid ""
"    @GET\n"
"    public Multi<String> invokeSource() {\n"
"        // Retrieve a stream\n"
"        return streaming.source(Empty.newBuilder().build())\n"
"                .onItem().transform(Item::getValue);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:186
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"sink/{max}\")\n"
"    public Uni<Void> invokeSink(int max) {\n"
"        // Send a stream and wait for completion\n"
"        Multi<Item> inputs = Multi.createFrom().range(0, max)\n"
"                .map(i -> Integer.toString(i))\n"
"                .map(i -> Item.newBuilder().setValue(i).build());\n"
"        return streaming.sink(inputs).onItem().ignore().andContinueWithNull();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:196
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/{max}\")\n"
"    public Multi<String> invokePipe(int max) {\n"
"        // Send a stream and retrieve a stream\n"
"        Multi<Item> inputs = Multi.createFrom().range(0, max)\n"
"                .map(i -> Integer.toString(i))\n"
"                .map(i -> Item.newBuilder().setValue(i).build());\n"
"        return streaming.pipe(inputs).onItem().transform(Item::getValue);\n"
"    }\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:201
#, no-wrap
msgid "Client configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:204
msgid "For each gRPC service you inject in your application, you can configure the following attributes:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:208
msgid "The `client-name` is the name set in the `@GrpcClient` or derived from the injection point if not explicitly defined."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:211
msgid "The following examples uses _hello_ as the client name.  Don't forget to replace it with the name you used in the `@GrpcClient` annotation."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:213
msgid "When you enable `quarkus.grpc.clients.\"client-name\".use-quarkus-grpc-client`, you are then using the new Vert.x gRPC channel implementation, so not all configuration properties can still be applied. And currently there is no Stork support yet."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:215
msgid "When you enable `quarkus.grpc.clients.\"client-name\".xds.enabled`, it's the xDS that should handle most of the configuration above."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:216
#, no-wrap
msgid "Enabling TLS"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:221
msgid "To enable TLS, use the following configuration.  Note that all paths in the configuration may either specify a resource on the classpath (typically from `src/main/resources` or its subfolder) or an external file."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:225
#, no-wrap
msgid "quarkus.grpc.clients.hello.host=localhost\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:228
#, no-wrap
msgid ""
"# either a path to a classpath resource or to a file:\n"
"quarkus.grpc.clients.hello.ssl.trust-store=tls/ca.pem\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:231
msgid "When SSL/TLS is configured, `plain-text` is automatically disabled."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:232
#, no-wrap
msgid "TLS with Mutual Auth"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:235
msgid "To use TLS with mutual authentication, use the following configuration:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:240
#, no-wrap
msgid ""
"quarkus.grpc.clients.hello.host=localhost\n"
"quarkus.grpc.clients.hello.plain-text=false\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:245
#, no-wrap
msgid ""
"# all the following may use either a path to a classpath resource or to a file:\n"
"quarkus.grpc.clients.hello.ssl.certificate=tls/client.pem\n"
"quarkus.grpc.clients.hello.ssl.key=tls/client.key\n"
"quarkus.grpc.clients.hello.ssl.trust-store=tls/ca.pem\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:247
#, no-wrap
msgid "Client Stub Deadlines"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:251
msgid "If you need to configure a deadline for a gRPC stub, i.e. to specify a duration of time after which the stub will always return the status error `DEADLINE_EXCEEDED`.  You can specify the deadline via the `quarkus.grpc.clients.\"service-name\".deadline` configuration property, e.g.:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:256
#, no-wrap
msgid ""
"quarkus.grpc.clients.hello.host=localhost\n"
"quarkus.grpc.clients.hello.deadline=2s <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:258
msgid "Set the deadline for all injected stubs."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:261
msgid "Do not use this feature to implement an RPC timeout.  To implement an RPC timeout, either use Mutiny `call.ifNoItem().after(...)` or Fault Tolerance `@Timeout`."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:262
#, no-wrap
msgid "gRPC Headers"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:265
msgid "Similarly to HTTP, alongside the message, gRPC calls can carry headers.  Headers can be useful e.g. for authentication."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:267
msgid "To set headers for a gRPC call, create a client with headers attached and then perform the call on this client:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:270
#, no-wrap
msgid "import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:278
#, no-wrap
msgid ""
"import examples.Greeter;\n"
"import examples.HelloReply;\n"
"import examples.HelloRequest;\n"
"import io.grpc.Metadata;\n"
"import io.quarkus.grpc.GrpcClient;\n"
"import io.quarkus.grpc.GrpcClientUtils;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:283
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyService {\n"
"    @GrpcClient\n"
"    Greeter client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:289
#, no-wrap
msgid ""
"    public Uni<HelloReply> doTheCall() {\n"
"        Metadata extraHeaders = new Metadata();\n"
"        if (headers) {\n"
"            extraHeaders.put(\"my-header\", \"my-interface-value\");\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:291
#, no-wrap
msgid "        Greeter alteredClient = GrpcClientUtils.attachHeaders(client, extraHeaders); // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:295
#, no-wrap
msgid ""
"        return alteredClient.sayHello(HelloRequest.newBuilder().setName(name).build()); // <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:297
msgid "Alter the client to make calls with the `extraHeaders` attached"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:298
msgid "Perform the call with the altered client. The original client remains unmodified"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:300
msgid "`GrpcClientUtils` work with all flavors of clients."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:301
#, no-wrap
msgid "Client Interceptors"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:307
msgid "A gRPC client interceptor can be implemented by a CDI bean that also implements the `io.grpc.ClientInterceptor` interface.  You can annotate an injected client with `@io.quarkus.grpc.RegisterClientInterceptor` to register the specified interceptor for the particular client instance.  The `@RegisterClientInterceptor` annotation is repeatable.  Alternatively, if you want to apply the interceptor to any injected client then annotate the interceptor bean with `@io.quarkus.grpc.GlobalInterceptor`."
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:308
#, no-wrap
msgid "Global Client Interceptor Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:312
#, no-wrap
msgid "import io.quarkus.grpc.GlobalInterceptor;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:314
#, no-wrap
msgid "import io.grpc.ClientInterceptor;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:318
#, no-wrap
msgid ""
"@GlobalInterceptor <1>\n"
"@ApplicationScoped\n"
"public class MyInterceptor implements ClientInterceptor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:325
#, no-wrap
msgid ""
"    @Override\n"
"    public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(MethodDescriptor<ReqT, RespT> method,\n"
"            CallOptions callOptions, Channel next) {\n"
"       // ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:327
msgid "This interceptor is applied to all injected gRPC clients."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:329
msgid "Check the https://grpc.github.io/grpc-java/javadoc/io/grpc/ClientInterceptor.html[ClientInterceptor JavaDoc] to properly implement your interceptor."
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:330
#, no-wrap
msgid "`@RegisterClientInterceptor` Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:335
#, no-wrap
msgid ""
"import io.quarkus.grpc.GrpcClient;\n"
"import io.quarkus.grpc.RegisterClientInterceptor;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:340
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class MyBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:345
#, no-wrap
msgid ""
"    @RegisterClientInterceptor(MySpecialInterceptor.class) <1>\n"
"    @GrpcClient(\"helloService\")\n"
"    Greeter greeter;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:347
msgid "Registers the `MySpecialInterceptor` for this particular client."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:349
msgid "When you have multiple client interceptors, you can order them by implementing the `jakarta.enterprise.inject.spi.Prioritized` interface:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:354
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyInterceptor implements ClientInterceptor, Prioritized {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:360
#, no-wrap
msgid ""
"    @Override\n"
"    public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(MethodDescriptor<ReqT, RespT> method,\n"
"            CallOptions callOptions, Channel next) {\n"
"       // ...\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:366
#, no-wrap
msgid ""
"    @Override\n"
"    public int getPriority() {\n"
"        return 10;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:370
msgid "Interceptors with the highest priority are called first.  The default priority, used if the interceptor does not implement the `Prioritized` interface, is `0`."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:371
#, no-wrap
msgid "gRPC Client metrics"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:373
#, no-wrap
msgid "Enabling metrics collection"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:377
msgid "gRPC client metrics are automatically enabled when the application also uses the xref:micrometer.adoc[`quarkus-micrometer`] extension.  Micrometer collects the metrics of all the gRPC clients used by the application."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:379
msgid "As an example, if you export the metrics to Prometheus, you will get:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:395
#, no-wrap
msgid ""
"# HELP grpc_client_responses_received_messages_total The total number of responses received\n"
"# TYPE grpc_client_responses_received_messages_total counter\n"
"grpc_client_responses_received_messages_total{method=\"SayHello\",methodType=\"UNARY\",service=\"helloworld.Greeter\",} 6.0\n"
"# HELP grpc_client_requests_sent_messages_total The total number of requests sent\n"
"# TYPE grpc_client_requests_sent_messages_total counter\n"
"grpc_client_requests_sent_messages_total{method=\"SayHello\",methodType=\"UNARY\",service=\"helloworld.Greeter\",} 6.0\n"
"# HELP grpc_client_processing_duration_seconds The total time taken for the client to complete the call, including network delay\n"
"# TYPE grpc_client_processing_duration_seconds summary\n"
"grpc_client_processing_duration_seconds_count{method=\"SayHello\",methodType=\"UNARY\",service=\"helloworld.Greeter\",statusCode=\"OK\",} 6.0\n"
"grpc_client_processing_duration_seconds_sum{method=\"SayHello\",methodType=\"UNARY\",service=\"helloworld.Greeter\",statusCode=\"OK\",} 0.167411625\n"
"# HELP grpc_client_processing_duration_seconds_max The total time taken for the client to complete the call, including network delay\n"
"# TYPE grpc_client_processing_duration_seconds_max gauge\n"
"grpc_client_processing_duration_seconds_max{method=\"SayHello\",methodType=\"UNARY\",service=\"helloworld.Greeter\",statusCode=\"OK\",} 0.136478028\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:398
msgid "The service name, method and type can be found in the _tags_."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:399
#, no-wrap
msgid "Disabling metrics collection"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:402
msgid "To disable the gRPC client metrics when `quarkus-micrometer` is used, add the following property to the application configuration:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:406
#, no-wrap
msgid "quarkus.micrometer.binder.grpc-client.enabled=false\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:408
#, no-wrap
msgid "Custom exception handling"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:412
msgid "If any of the gRPC services or server interceptors throw an (custom) exception, you can add your own https://github.com/quarkusio/quarkus/extensions/grpc/api/src/main/java/io/quarkus/grpc/ExceptionHandlerProvider.java[ExceptionHandlerProvider] as a CDI bean in your application, to provide a custom handling of those exceptions."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:414
msgid "e.g."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:424
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class HelloExceptionHandlerProvider implements ExceptionHandlerProvider {\n"
"    @Override\n"
"    public <ReqT, RespT> ExceptionHandler<ReqT, RespT> createHandler(ServerCall.Listener<ReqT> listener,\n"
"            ServerCall<ReqT, RespT> serverCall, Metadata metadata) {\n"
"        return new HelloExceptionHandler<>(listener, serverCall, metadata);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:433
#, no-wrap
msgid ""
"    @Override\n"
"    public Throwable transform(Throwable t) {\n"
"        if (t instanceof HelloException he) {\n"
"            return new StatusRuntimeException(Status.ABORTED.withDescription(he.getName()));\n"
"        } else {\n"
"            return ExceptionHandlerProvider.toStatusException(t, true);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:438
#, no-wrap
msgid ""
"    private static class HelloExceptionHandler<A, B> extends ExceptionHandler<A, B> {\n"
"        public HelloExceptionHandler(ServerCall.Listener<A> listener, ServerCall<A, B> call, Metadata metadata) {\n"
"            super(listener, call, metadata);\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:447
#, no-wrap
msgid ""
"        @Override\n"
"        protected void handleException(Throwable t, ServerCall<A, B> call, Metadata metadata) {\n"
"            StatusRuntimeException sre = (StatusRuntimeException) ExceptionHandlerProvider.toStatusException(t, true);\n"
"            Metadata trailers = sre.getTrailers() != null ? sre.getTrailers() : metadata;\n"
"            call.close(sre.getStatus(), trailers);\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:449
#, no-wrap
msgid "Dev Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:453
msgid "By default, when starting the application in dev mode, a gRPC server is started, even if no services are configured.  You can configure the gRPC extension's dev mode behavior using the following properties."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:456
#, no-wrap
msgid "Inject mock clients"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:459
msgid "In your `@QuarkuTest`, you can use `@InjectMock` to inject the Mutiny client of a gRPC service:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:464
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class GrpcMockTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:468
#, no-wrap
msgid ""
"    @InjectMock\n"
"    @GrpcClient(\"hello\")\n"
"    Greeter greeter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:477
#, no-wrap
msgid ""
"    @Test\n"
"    void test1() {\n"
"        HelloRequest request = HelloRequest.newBuilder().setName(\"neo\").build();\n"
"        Mockito.when(greeter.sayHello(Mockito.any(HelloRequest.class)))\n"
"                .thenReturn(Uni.createFrom().item(HelloReply.newBuilder().setMessage(\"hello neo\").build()));\n"
"        Assertions.assertEquals(greeter.sayHello(request).await().indefinitely().getMessage(), \"hello neo\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/grpc-service-consumption.adoc:479
msgid "Only the Mutiny client can be _mocked_, channels, and other stubs cannot be mocked."
msgstr ""
