# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-01-20 14:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:6
#, no-wrap
msgid "Simplified MongoDB with Panache"
msgstr "使用Panache简化MongoDB"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:14
msgid "MongoDB is a well known NoSQL Database that is widely used, but using its raw API can be cumbersome as you need to express your entities and your queries as a MongoDB link:{mongodb-doc-root-url}/fundamentals/data-formats/documents/#document[`Document`]."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:16
msgid "MongoDB with Panache provides active record style entities (and repositories) like you have in xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] and focuses on making your entities trivial and fun to write in Quarkus."
msgstr "带有Panache的MongoDB提供了活跃的记录风格的实体（和存储库），就像你在 link:hibernate-orm-panache.html[带有Panache的Hibernate ORM] 中所拥有的那样，并专注于使你的实体在Quarkus中编写起来既简单又有趣。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:18
msgid "It is built on top of the xref:mongodb.adoc[MongoDB Client] extension."
msgstr "它是建立在 link:mongodb.html[MongoDB客户端] 扩展之上的。"

#. type: Title ==
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:19
#, no-wrap
msgid "First: an example"
msgstr "第一：一个例子"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:22
msgid "Panache allows you to write your MongoDB entities like this:"
msgstr "Panache允许你像这样写你的MongoDB实体："

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:29
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:288
#, no-wrap
msgid ""
"public class Person extends PanacheMongoEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:33
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:292
#, no-wrap
msgid ""
"    public static Person findByName(String name){\n"
"        return find(\"name\", name).firstResult();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:37
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:296
#, no-wrap
msgid ""
"    public static List<Person> findAlive(){\n"
"        return list(\"status\", Status.Alive);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:42
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:301
#, no-wrap
msgid ""
"    public static void deleteLoics(){\n"
"        delete(\"name\", \"Loïc\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:46
msgid "You have noticed how much more compact and readable the code is compared to using the MongoDB API? Does this look interesting? Read on!"
msgstr "你是否注意到与使用MongoDB API相比，代码更加紧凑和可读？这看起来是不是很有趣？请继续阅读!"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:50
msgid "the `list()` method might be surprising at first. It takes fragments of PanacheQL queries (subset of JPQL) and contextualizes the rest.  That makes for very concise but yet readable code.  MongoDB native queries are also supported."
msgstr "`list()` 的方法一开始可能会让人吃惊。它采用PanacheQL查询的片段（JPQL的子集），并将其余部分进行上下文处理。这使得代码非常简明，但又可读。也支持MongoDB本地查询。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:53
msgid "what was described above is essentially the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[active record pattern], sometimes just called the entity pattern.  MongoDB with Panache also allows for the use of the more classical link:https://martinfowler.com/eaaCatalog/repository.html[repository pattern] via `PanacheMongoRepository`."
msgstr "上面所描述的本质上是 link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[活动记录模式] ，有时也称为实体模式。带有Panache的MongoDB也允许通过 `PanacheMongoRepository` ，使用更经典的 link:https://martinfowler.com/eaaCatalog/repository.html[存储库模式] 。"

#. type: Title ==
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:54
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:58
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议你按照下面几节的说明，一步一步地创建应用程序。然而，你可以直接进入已完成的例子。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:60
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或者下载一个 {quickstarts-archive-url}[存档]。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:62
msgid "The solution is located in the `mongodb-panache-quickstart` {quickstarts-tree-url}/mongodb-panache-quickstart[directory]."
msgstr "该解决方案位于 `mongodb-panache-quickstart` {quickstarts-tree-url}/mongodb-panache-quickstart[目录] 中。"

#. type: Title ==
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:63
#, no-wrap
msgid "Creating the Maven project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:66
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。用以下命令创建一个新项目："

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:73
msgid "This command generates a Maven structure importing the RESTEasy Reactive Jackson and MongoDB with Panache extensions.  After this, the `quarkus-mongodb-panache` extension has been added to your build file."
msgstr "该命令生成一个Maven结构，导入RESTEasy Reactive Jackson和MongoDB with Panache扩展。在此之后， `quarkus-mongodb-panache` 扩展已被添加到您的构建文件中。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:75
msgid "If you don't want to generate a new project, add the dependency in your build file:"
msgstr "如果你不想生成一个新的项目，可以在你的构建文件中添加该依赖关系："

#. type: Block title
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:77
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:96
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1022
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1109
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:83
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-mongodb-panache</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:86
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:116
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1032
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1119
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:89
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-mongodb-panache\")\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:94
msgid "If your project is already configured to use other annotation processors, you will need to additionally add the Panache annotation processor:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:113
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-compiler-plugin</artifactId>\n"
"    <version>${compiler-plugin.version}</version>\n"
"    <configuration>\n"
"        <parameters>${maven.compiler.parameters}</parameters>\n"
"        <annotationProcessorPaths>\n"
"            <!-- Your existing annotation processor(s)... -->\n"
"            <path>\n"
"                <groupId>io.quarkus</groupId>\n"
"                <artifactId>quarkus-panache-common</artifactId>\n"
"                <version>${quarkus.platform.version}</version>\n"
"            </path>\n"
"        </annotationProcessorPaths>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:119
#, no-wrap
msgid "annotationProcessor(\"io.quarkus:quarkus-panache-common\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:122
#, no-wrap
msgid "Setting up and configuring MongoDB with Panache"
msgstr "使用Panache设置和配置MongoDB"

#. type: delimited block =
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:125
msgid "To get started:"
msgstr "起步："

#. type: delimited block =
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:127
msgid "add your settings in `{config-file}`"
msgstr "在 `{config-file}` 中添加你的设置。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:128
msgid "Make your entities extend `PanacheMongoEntity` (optional if you are using the repository pattern)"
msgstr "使你的实体继承 `PanacheMongoEntity` （如果你使用资源库模式，则是可选的）。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:129
msgid "Optionally, use the `@MongoEntity` annotation to specify the name of the collection, the name of the database or the name of the client."
msgstr "可以选择使用 `@MongoEntity` 注解来指定集合的名称、数据库的名称或客户端的名称。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:131
msgid "Then add the relevant configuration properties in `{config-file}`."
msgstr "然后在 `{config-file}` 中添加相关的配置属性。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:138
#, no-wrap
msgid ""
"# configure the MongoDB client for a replica set of two nodes\n"
"quarkus.mongodb.connection-string = mongodb://mongo1:27017,mongo2:27017\n"
"# mandatory if you don't specify the name of the database using @MongoEntity\n"
"quarkus.mongodb.database = person\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:141
msgid "The `quarkus.mongodb.database` property will be used by MongoDB with Panache to determine the name of the database where your entities will be persisted (if not overridden by `@MongoEntity`)."
msgstr "MongoDB将使用 `quarkus.mongodb.database` 属性和Panache来确定实体将持久化的数据库的名称。（如果没有被 `@MongoEntity` 重写）。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:143
msgid "The `@MongoEntity` annotation allows configuring:"
msgstr "`@MongoEntity` 注解允许根据以下配置："

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:145
msgid "the name of the client for multitenant application, see xref:mongodb.adoc#multiple-mongodb-clients[Multiple MongoDB Clients]. Otherwise, the default client will be used."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:146
msgid "the name of the database, otherwise the `quarkus.mongodb.database` property or a link:{mongodb-doc-root-url}#multitenancy[`MongoDatabaseResolver`] implementation will be used."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:147
msgid "the name of the collection, otherwise the simple name of the class will be used."
msgstr "集合的名称，否则将使用该类的简单名称。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:149
msgid "For advanced configuration of the MongoDB client, you can follow the xref:mongodb.adoc#configuring-the-mongodb-database[Configuring the MongoDB database guide]."
msgstr "对于MongoDB客户端的高级配置，你可以遵循配置 link:mongodb.html#configuring-the-mongodb-database[MongoDB数据库指南] 。"

#. type: Title ==
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:150
#, no-wrap
msgid "Solution 1: using the active record pattern"
msgstr "解决方案1：使用active record（活动记录）模式"

#. type: Title ===
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:152
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:305
#, no-wrap
msgid "Defining your entity"
msgstr "定义你的实体"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:156
msgid "To define a Panache entity, simply extend `PanacheMongoEntity` and add your columns as public fields.  You can add the `@MongoEntity` annotation to your entity if you need to customize the name of the collection, the database, or the client."
msgstr "要定义一个Panache实体，只需扩展 `PanacheMongoEntity` ，并添加你的列作为公共字段。如果你需要自定义集合、数据库或客户端的名称，你可以向你的实体添加 `@MongoEntity` 注解。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:162
#, no-wrap
msgid ""
"@MongoEntity(collection=\"ThePerson\")\n"
"public class Person extends PanacheMongoEntity {\n"
"    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:166
#, no-wrap
msgid ""
"    // will be persisted as a 'birth' field in MongoDB\n"
"    @BsonProperty(\"birth\")\n"
"    public LocalDate birthDate;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:169
#, no-wrap
msgid ""
"    public Status status;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:172
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:322
msgid "Annotating with `@MongoEntity` is optional. Here the entity will be stored in the `ThePerson` collection instead of the default `Person` collection."
msgstr "`@MongoEntity` 注解是可选的。在这里，实体将被存储在 `ThePerson` 集合中，而不是默认的 `Person` 集合。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:174
msgid "MongoDB with Panache uses the link:{mongodb-doc-root-url}/fundamentals/data-formats/document-data-format-pojo[PojoCodecProvider] to convert your entities to a MongoDB `Document`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:176
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:326
msgid "You will be allowed to use the following annotations to customize this mapping:"
msgstr "你将被允许使用以下注解来自定义这种映射："

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:178
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:328
msgid "`@BsonId`: allows you to customize the ID field, see <<custom-ids,Custom IDs>>."
msgstr "`@BsonId` ：允许你自定义ID字段，见 link:#custom-ids[自定义ID] 。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:179
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:329
msgid "`@BsonProperty`: customize the serialized name of the field."
msgstr "`@BsonProperty` ：自定义字段的序列化名称。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:180
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:330
msgid "`@BsonIgnore`: ignore a field during the serialization."
msgstr "`@BsonIgnore` ：在序列化过程中忽略一个字段。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:182
msgid "If you need to write accessors, you can:"
msgstr "如果你需要编写访问器，你可以这样编写："

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:186
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1042
#, no-wrap
msgid "public class Person extends PanacheMongoEntity {\n"
msgstr "public class Person extends PanacheMongoEntity {\n"

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:190
#, no-wrap
msgid ""
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:195
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:917
#, no-wrap
msgid ""
"    // return name as uppercase in the model\n"
"    public String getName(){\n"
"        return name.toUpperCase();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:201
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:923
#, no-wrap
msgid ""
"    // store all names in lowercase in the DB\n"
"    public void setName(String name){\n"
"        this.name = name.toLowerCase();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:205
msgid "And thanks to our field access rewrite, when your users read `person.name` they will actually call your `getName()` accessor, and similarly for field writes and the setter.  This allows for proper encapsulation at runtime as all fields calls will be replaced by the corresponding getter/setter calls."
msgstr "而且由于我们的字段访问重写，当你的用户读取 `person.name` ，他们实际上会调用你的 `getName()` 方法，类似的还有字段写入和设置器。这允许在运行时进行适当的封装，因为所有字段的调用都将被相应的getter/setter调用所取代。"

#. type: Title ===
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:206
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:374
#, no-wrap
msgid "Most useful operations"
msgstr "最有用的操作"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:209
msgid "Once you have written your entity, here are the most common operations you will be able to perform:"
msgstr "编写实体后，可以执行以下最常见的操作："

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:217
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:385
#, no-wrap
msgid ""
"// creating a person\n"
"Person person = new Person();\n"
"person.name = \"Loïc\";\n"
"person.birth = LocalDate.of(1910, Month.FEBRUARY, 1);\n"
"person.status = Status.Alive;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:220
#, no-wrap
msgid ""
"// persist it: if you keep the default ObjectId ID field, it will be populated by the MongoDB driver\n"
"person.persist();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:222
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:390
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:943
#, no-wrap
msgid "person.status = Status.Dead;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:225
#, no-wrap
msgid ""
"// Your must call update() in order to send your entity modifications to MongoDB\n"
"person.update();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:228
#, no-wrap
msgid ""
"// delete it\n"
"person.delete();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:231
#, no-wrap
msgid ""
"// getting a list of all Person entities\n"
"List<Person> allPersons = Person.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:236
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"// here we build a new ObjectId, but you can also retrieve it from the existing entity after being persisted\n"
"ObjectId personId = new ObjectId(idAsString);\n"
"person = Person.findById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:240
#, no-wrap
msgid ""
"// finding a specific person by ID via an Optional\n"
"Optional<Person> optional = Person.findByIdOptional(personId);\n"
"person = optional.orElseThrow(() -> new NotFoundException());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:243
#, no-wrap
msgid ""
"// finding all living persons\n"
"List<Person> livingPersons = Person.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:246
#, no-wrap
msgid ""
"// counting all persons\n"
"long countAll = Person.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:249
#, no-wrap
msgid ""
"// counting all living persons\n"
"long countAlive = Person.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:252
#, no-wrap
msgid ""
"// delete all living persons\n"
"Person.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:255
#, no-wrap
msgid ""
"// delete all persons\n"
"Person.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:258
#, no-wrap
msgid ""
"// delete by id\n"
"boolean deleted = Person.deleteById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:261
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"long updated = Person.update(\"name\", \"Mortal\").where(\"status\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:264
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:432
msgid "All `list` methods have equivalent `stream` versions."
msgstr "所有 `list` 方法都有与之对应的 `stream` 版本。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:272
#, no-wrap
msgid ""
"Stream<Person> persons = Person.streamAll();\n"
"List<String> namesButEmmanuels = persons\n"
"    .map(p -> p.name.toLowerCase() )\n"
"    .filter( n -> ! \"emmanuel\".equals(n) )\n"
"    .collect(Collectors.toList());\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:275
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:443
msgid "A `persistOrUpdate()` method exist that persist or update an entity in the database, it uses the __upsert__ capability of MongoDB to do it in a single query."
msgstr "存在一个 `persistOrUpdate()` 方法来持久化或更新数据库中的实体，它使用MongoDB的 __upsert__ 功能在单个查询中完成此操作。"

#. type: Title ===
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:276
#, no-wrap
msgid "Adding entity methods"
msgstr "添加实体方法"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:281
msgid "Add custom queries on your entities inside the entities themselves.  That way, you and your co-workers can find them easily, and queries are co-located with the object they operate on.  Adding them as static methods in your entity class is the Panache Active Record way."
msgstr "在实体本身内部的实体上添加自定义查询。这样，您和您的同事可以轻松找到它们，并且查询与他们操作的对象位于同一位置。将它们作为静态方法添加到实体类中是 Panache Active Record 方式。"

#. type: Title ==
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:303
#, no-wrap
msgid "Solution 2: using the repository pattern"
msgstr "解决方案2：使用资源库模式"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:309
msgid "You can define your entity as regular POJO.  You can add the `@MongoEntity` annotation to your entity if you need to customize the name of the collection, the database, or the client."
msgstr "你可以将你的实体定义为普通的POJO。如果你需要自定义集合、数据库或客户端的名称，你可以给你的实体添加 `@MongoEntity` 注解。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:319
#, no-wrap
msgid ""
"@MongoEntity(collection=\"ThePerson\")\n"
"public class Person  {\n"
"    public ObjectId id; // used by MongoDB for the _id field\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:324
msgid "MongoDB with Panache uses the link:{mongodb-doc-root-url}/fundamentals/data-formats/document-data-format-pojo/[PojoCodecProvider] to convert your entities to a MongoDB `Document`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:333
msgid "You can use public fields or private fields with getters/setters.  If you don't want to manage the ID by yourself, you can make your entity extends `PanacheMongoEntity`."
msgstr "你可以使用公共字段或带有getters/setters的私有字段。如果你不想自己管理ID，你可以让你的实体继承 `PanacheMongoEntity` 。"

#. type: Title ===
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:334
#, no-wrap
msgid "Defining your repository"
msgstr "定义你的repository（存储库）"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:338
msgid "When using Repositories, you can get the exact same convenient methods as with the active record pattern, injected in your Repository, by making them implements `PanacheMongoRepository`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:343
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheMongoRepository<Person> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:345
#, no-wrap
msgid "   // put your custom logic here as instance methods\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:349
#, no-wrap
msgid ""
"   public Person findByName(String name){\n"
"       return find(\"name\", name).firstResult();\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:353
#, no-wrap
msgid ""
"   public List<Person> findAlive(){\n"
"       return list(\"status\", Status.Alive);\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:358
#, no-wrap
msgid ""
"   public void deleteLoics(){\n"
"       delete(\"name\", \"Loïc\");\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:362
msgid "All the operations that are defined on `PanacheMongoEntityBase` are available on your repository, so using it is exactly the same as using the active record pattern, except you need to inject it:"
msgstr "所有在 `PanacheMongoEntityBase` 上定义的操作都可以在你的repository（存储库）上使用，所以使用它与使用active record（活动记录）模式完全一样，只是你需要注入它。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:367
#, no-wrap
msgid ""
"@Inject\n"
"PersonRepository personRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:372
#, no-wrap
msgid ""
"@GET\n"
"public long count(){\n"
"    return personRepository.count();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:377
msgid "Once you have written your repository, here are the most common operations you will be able to perform:"
msgstr "编写存储库后，您可以执行以下最常见的操作："

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:388
#, no-wrap
msgid ""
"// persist it: if you keep the default ObjectId ID field, it will be populated by the MongoDB driver\n"
"personRepository.persist(person);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:393
#, no-wrap
msgid ""
"// Your must call update() in order to send your entity modifications to MongoDB\n"
"personRepository.update(person);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:396
#, no-wrap
msgid ""
"// delete it\n"
"personRepository.delete(person);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:399
#, no-wrap
msgid ""
"// getting a list of all Person entities\n"
"List<Person> allPersons = personRepository.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:404
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"// here we build a new ObjectId, but you can also retrieve it from the existing entity after being persisted\n"
"ObjectId personId = new ObjectId(idAsString);\n"
"person = personRepository.findById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:408
#, no-wrap
msgid ""
"// finding a specific person by ID via an Optional\n"
"Optional<Person> optional = personRepository.findByIdOptional(personId);\n"
"person = optional.orElseThrow(() -> new NotFoundException());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:411
#, no-wrap
msgid ""
"// finding all living persons\n"
"List<Person> livingPersons = personRepository.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:414
#, no-wrap
msgid ""
"// counting all persons\n"
"long countAll = personRepository.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:417
#, no-wrap
msgid ""
"// counting all living persons\n"
"long countAlive = personRepository.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:420
#, no-wrap
msgid ""
"// delete all living persons\n"
"personRepository.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:423
#, no-wrap
msgid ""
"// delete all persons\n"
"personRepository.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:426
#, no-wrap
msgid ""
"// delete by id\n"
"boolean deleted = personRepository.deleteById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:429
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"long updated = personRepository.update(\"name\", \"Mortal\").where(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:440
#, no-wrap
msgid ""
"Stream<Person> persons = personRepository.streamAll();\n"
"List<String> namesButEmmanuels = persons\n"
"    .map(p -> p.name.toLowerCase() )\n"
"    .filter( n -> ! \"emmanuel\".equals(n) )\n"
"    .collect(Collectors.toList());\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:447
msgid "The rest of the documentation show usages based on the active record pattern only, but keep in mind that they can be performed with the repository pattern as well.  The repository pattern examples have been omitted for brevity."
msgstr "其余的文档只展示了基于活动记录模式的用法，但请记住，这些用法也可以用资源库模式来执行。为了简洁起见，已省略存储库模式示例。"

#. type: Title ==
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:448
#, no-wrap
msgid "Writing a JAX-RS resource"
msgstr "编写一个JAX-RS资源"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:451
msgid "First, include one of the RESTEasy extensions to enable JAX-RS endpoints, for example, add the `io.quarkus:quarkus-resteasy-reactive-jackson` dependency for JAX-RS and JSON support."
msgstr "首先，包括RESTEasy的一个扩展，以启用JAX-RS端点，例如，添加 `io.quarkus:quarkus-resteasy-reactive-jackson` 依赖来支持JAX-RS和JSON。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:453
msgid "Then, you can create the following resource to create/read/update/delete your Person entity:"
msgstr "然后，你可以创建以下资源来create/read/update/delete你的Person实体："

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:460
#, no-wrap
msgid ""
"@Path(\"/persons\")\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"public class PersonResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:465
#, no-wrap
msgid ""
"    @GET\n"
"    public List<Person> list() {\n"
"        return Person.listAll();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:471
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/{id}\")\n"
"    public Person get(String id) {\n"
"        return Person.findById(new ObjectId(id));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:477
#, no-wrap
msgid ""
"    @POST\n"
"    public Response create(Person person) {\n"
"        person.persist();\n"
"        return Response.created(URI.create(\"/persons/\" + person.id)).build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:483
#, no-wrap
msgid ""
"    @PUT\n"
"    @Path(\"/{id}\")\n"
"    public void update(String id, Person person) {\n"
"        person.update();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:493
#, no-wrap
msgid ""
"    @DELETE\n"
"    @Path(\"/{id}\")\n"
"    public void delete(String id) {\n"
"        Person person = Person.findById(new ObjectId(id));\n"
"        if(person == null) {\n"
"            throw new NotFoundException();\n"
"        }\n"
"        person.delete();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:499
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/search/{name}\")\n"
"    public Person search(String name) {\n"
"        return Person.findByName(name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:506
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/count\")\n"
"    public Long count() {\n"
"        return Person.count();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:508
#, no-wrap
msgid "Advanced Query"
msgstr "高级查询"

#. type: Title ===
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:510
#, no-wrap
msgid "Paging"
msgstr "分页"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:514
msgid "You should only use `list` and `stream` methods if your collection contains small enough data sets. For larger data sets you can use the `find` method equivalents, which return a `PanacheQuery` on which you can do paging:"
msgstr "如果你的集合包含足够小的数据集，你应该只使用 `list` 和 `stream` 方法。对于较大的数据集，你可以使用 `find` 方法来替代，它返回一个 `PanacheQuery` ，你可以对其进行分页。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:519
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:555
#, no-wrap
msgid ""
"// create a query for all living persons\n"
"PanacheQuery<Person> livingPersons = Person.find(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:522
#, no-wrap
msgid ""
"// make it use pages of 25 entries at a time\n"
"livingPersons.page(Page.ofSize(25));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:525
#, no-wrap
msgid ""
"// get the first page\n"
"List<Person> firstPage = livingPersons.list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:528
#, no-wrap
msgid ""
"// get the second page\n"
"List<Person> secondPage = livingPersons.nextPage().list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:531
#, no-wrap
msgid ""
"// get page 7\n"
"List<Person> page7 = livingPersons.page(Page.of(7, 25)).list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:534
#, no-wrap
msgid ""
"// get the number of pages\n"
"int numberOfPages = livingPersons.pageCount();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:537
#, no-wrap
msgid ""
"// get the total number of entities returned by this query without paging\n"
"int count = livingPersons.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:543
#, no-wrap
msgid ""
"// and you can chain methods of course\n"
"return Person.find(\"status\", Status.Alive)\n"
"    .page(Page.ofSize(25))\n"
"    .nextPage()\n"
"    .stream()\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:546
msgid "The `PanacheQuery` type has many other methods to deal with paging and returning streams."
msgstr "`PanacheQuery` 类型有许多其他方法来处理分页和返回流。"

#. type: Title ===
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:547
#, no-wrap
msgid "Using a range instead of pages"
msgstr "使用range而不是pages"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:550
msgid "`PanacheQuery` also allows range-based queries."
msgstr "`PanacheQuery` 也允许基于范围的查询。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:558
#, no-wrap
msgid ""
"// make it use a range: start at index 0 until index 24 (inclusive).\n"
"livingPersons.range(0, 24);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:561
#, no-wrap
msgid ""
"// get the range\n"
"List<Person> firstRange = livingPersons.list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:564
#, no-wrap
msgid ""
"// to get the next range, you need to call range again\n"
"List<Person> secondRange = livingPersons.range(25, 49).list();\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:570
msgid "You cannot mix ranges and pages: if you use a range, all methods that depend on having a current page will throw an `UnsupportedOperationException`; you can switch back to paging using `page(Page)` or `page(int, int)`."
msgstr "你不能混合使用ranges和pages：如果你使用range，所有依赖于拥有当前页面的方法将抛出一个 `UnsupportedOperationException` ；你可以使用 `page(Page)` 或 `page(int, int)` 切换回分页。"

#. type: Title ===
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:572
#, no-wrap
msgid "Sorting"
msgstr "排序"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:575
msgid "All methods accepting a query string also accept an optional `Sort` parameter, which allows you to abstract your sorting:"
msgstr "所有接受查询字符串的方法也接受一个可选的 `Sort` 参数，这使你可以抽象出你的排序："

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:579
#, no-wrap
msgid "List<Person> persons = Person.list(Sort.by(\"name\").and(\"birth\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:582
#, no-wrap
msgid ""
"// and with more restrictions\n"
"List<Person> persons = Person.list(\"status\", Sort.by(\"name\").and(\"birth\"), Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:585
msgid "The `Sort` class has plenty of methods for adding columns and specifying sort direction."
msgstr "`Sort` 类有很多方法用于添加列和指定排序方向。"

#. type: Title ===
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:586
#, no-wrap
msgid "Simplified queries"
msgstr "简化查询"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:589
msgid "Normally, MongoDB queries are of this form: `{'firstname': 'John', 'lastname':'Doe'}`, this is what we call MongoDB native queries."
msgstr "通常情况下，MongoDB的查询是这种形式： `{'firstname': 'John', 'lastname':'Doe'}` ，这就是我们所说的MongoDB原生查询。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:592
msgid "You can use them if you want, but we also support what we call **PanacheQL** that can be seen as a subset of link:https://docs.oracle.com/javaee/7/tutorial/persistence-querylanguage.htm#BNBTG[JPQL] (or link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#hql[HQL]) and allows you to easily express a query.  MongoDB with Panache will then map it to a MongoDB native query."
msgstr "如果你愿意，你可以使用它们，但我们也支持所谓的 **PanacheQL** ，它可以被看作是 link:https://docs.oracle.com/javaee/7/tutorial/persistence-querylanguage.htm#BNBTG[JPQL] （或 link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#hql[HQL] ）的一个子集，并允许你轻松地表达一个查询。使用Panache的MongoDB会将其映射为MongoDB的原生查询。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:594
msgid "If your query does not start with `{`, we will consider it a PanacheQL query:"
msgstr "如果你的查询不是以 `{` 开始，我们将认为它是一个PanacheQL查询："

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:596
msgid "`<singlePropertyName>` (and single parameter) which will expand to `{'singleColumnName': '?1'}`"
msgstr "`<singlePropertyName>` (和单一参数），这将扩展为 `{'singleColumnName': '?1'}` "

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:597
msgid "`<query>` will expand to `{<query>}` where we will map the PanacheQL query to MongoDB native query form. We support the following operators that will be mapped to the corresponding MongoDB operators: 'and', 'or' ( mixing 'and' and 'or' is not currently supported), '=', '>', '>=', '<', '<=', '!=', 'is null', 'is not null', and 'like' that is mapped to the MongoDB `$regex` operator (both String and JavaScript patterns are supported)."
msgstr "`<query>` 将扩展到 ，在这里我们将把PanacheQL查询映射到MongoDB原生查询形式。我们支持以下运算符，它们将被映射为相应的MongoDB运算符：'and'、 'or'（目前不支持 'and' 和 'or'一起使用）、'='、'>'、'>='、 '<'、'<='、'!='、'is null'、'is not null' 和 'like' 映射到 MongoDB `regex` 运算符（支持字符串和 JavaScript 模式）"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:599
msgid "Here are some query examples:"
msgstr "下面是一些查询例子："

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:601
msgid "`firstname = ?1 and status = ?2` will be mapped to `{'firstname': ?1, 'status': ?2}`"
msgstr "`firstname = ?1 and status = ?2` 将被映射到 `{'firstname': ?1, 'status': ?2}` "

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:602
msgid "`amount > ?1 and firstname != ?2` will be mapped to `{'amount': {'$gt': ?1}, 'firstname': {'$ne': ?2}}`"
msgstr "`amount > ?1 and firstname != ?2` 将被映射到 `{'amount': {'$gt': ?1}, 'firstname': {'$ne': ?2}}` "

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:603
msgid "`lastname like ?1` will be mapped to `{'lastname': {'$regex': ?1}}`. Be careful that this will be link:https://docs.mongodb.com/manual/reference/operator/query/regex/#op._S_regex[MongoDB regex] support and not SQL like pattern."
msgstr "`lastname like ?1` 将被映射到 `{'lastname': {'$regex': ?1}}` 。注意 link:https://docs.mongodb.com/manual/reference/operator/query/regex/#op._S_regex[MongoDB的regex] 支持，而不是类似SQL模式。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:604
msgid "`lastname is not null` will be mapped to `{'lastname':{'$exists': true}}`"
msgstr "`lastname is not null` 将被映射到 `{'lastname':{'$exists': true}}` "

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:605
msgid "`status in ?1` will be mapped to `{'status':{$in: [?1]}}`"
msgstr "`status in ?1` 将被映射到 `{'status':{$in: [?1]}}` "

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:609
msgid "MongoDB queries must be valid JSON documents, using the same field multiple times in a query is not allowed using PanacheQL as it would generate an invalid JSON (see link:https://github.com/quarkusio/quarkus/issues/12086[this issue on GitHub])."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:613
msgid "We also handle some basic date type transformations: all fields of type `Date`, `LocalDate`, `LocalDateTime` or `Instant` will be mapped to the link:https://docs.mongodb.com/manual/reference/bson-types/#date[BSON Date] using the `ISODate` type (UTC datetime).  The MongoDB POJO codec doesn't support `ZonedDateTime` and `OffsetDateTime` so you should convert them prior usage."
msgstr "我们还处理一些基本的日期类型转换：所有类型为 `Date` , `LocalDate` , `LocalDateTime` 或 `Instant` 的字段都将使用 `ISODate` 类型（UTC日期时间）映射到 link:https://docs.mongodb.com/manual/reference/bson-types/#date[BSON Date] 。MongoDB的POJO编解码器不支持 `ZonedDateTime` 和 `OffsetDateTime` ，因此你应该在使用前转换它们"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:615
msgid "MongoDB with Panache also supports extended MongoDB queries by providing a `Document` query, this is supported by the find/list/stream/count/delete/update methods."
msgstr "带有Panache的MongoDB还支持扩展的MongoDB查询，提供了一个 `Document` 查询，这被find/list/stream/count/delete/update方法所支持。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:618
msgid "MongoDB with Panache offers operations to update multiple documents based on an update document and a query : `Person.update(\"foo = ?1 and bar = ?2\", fooName, barName).where(\"name = ?1\", name)`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:620
msgid "For these operations, you can express the update document the same way you express your queries, here are some examples:"
msgstr "对于这些操作，你可以用表达查询的同样方式来表达更新文件，这里有一些例子："

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:622
msgid "`<singlePropertyName>` (and single parameter) which will expand to the update document `{'$set' : {'singleColumnName': '?1'}}`"
msgstr "`<singlePropertyName>` (和单一参数），这将扩展到更新文档 `{'$set' : {'singleColumnName': '?1'}}` "

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:623
msgid "`firstname = ?1 and status = ?2` will be mapped to the update document `{'$set' : {'firstname': ?1, 'status': ?2}}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:624
msgid "`firstname = :firstname and status = :status` will be mapped to the update document `{'$set' : {'firstname': :firstname, 'status': :status}}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:625
msgid "`{'firstname' : ?1 and 'status' : ?2}` will be mapped to the update document `{'$set' : {'firstname': ?1, 'status': ?2}}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:626
msgid "`{'firstname' : :firstname and 'status' : :status}` ` will be mapped to the update document `{'$set' : {'firstname': :firstname, 'status': :status}}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:627
msgid "`{'$inc': {'cpt': ?1}}` will be used as-is"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:628
#, no-wrap
msgid "Query parameters"
msgstr "查询参数"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:631
msgid "You can pass query parameters, for both native and PanacheQL queries, by index (1-based) as shown below:"
msgstr "对于原生和PanacheQL查询，你可以通过索引（基于1）传递查询参数，如下所示："

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:636
#, no-wrap
msgid ""
"Person.find(\"name = ?1 and status = ?2\", \"Loïc\", Status.Alive);\n"
"Person.find(\"{'name': ?1, 'status': ?2}\", \"Loïc\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:639
msgid "Or by name using a `Map`:"
msgstr "或者使用 `Map` ，按名字来命名："

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:647
#, no-wrap
msgid ""
"Map<String, Object> params = new HashMap<>();\n"
"params.put(\"name\", \"Loïc\");\n"
"params.put(\"status\", Status.Alive);\n"
"Person.find(\"name = :name and status = :status\", params);\n"
"Person.find(\"{'name': :name, 'status', :status}\", params);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:650
msgid "Or using the convenience class `Parameters` either as is or to build a `Map`:"
msgstr "或者使用方便的类 `Parameters` ，既可以是原样，也可以是建立一个 `Map` 。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:656
#, no-wrap
msgid ""
"// generate a Map\n"
"Person.find(\"name = :name and status = :status\",\n"
"         Parameters.with(\"name\", \"Loïc\").and(\"status\", Status.Alive).map());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:660
#, no-wrap
msgid ""
"// use it as-is\n"
"Person.find(\"{'name': :name, 'status': :status}\",\n"
"         Parameters.with(\"name\", \"Loïc\").and(\"status\", Status.Alive));\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:663
msgid "Every query operation accepts passing parameters by index (`Object...`), or by name (`Map<String,Object>` or `Parameters`)."
msgstr "每个查询操作都接受按索引（ `Object...` ）或按名称（ `Map<String,Object>` 或 `Parameters` ）传递参数。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:665
msgid "When you use query parameters, be careful that PanacheQL queries will refer to the Object parameters name but native queries will refer to MongoDB field names."
msgstr "当你使用查询参数时，要注意PanacheQL查询将参考Object参数名称，但本地查询将参考MongoDB字段名称。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:667
msgid "Imagine the following entity:"
msgstr "想象一下下面这个实体："

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:675
#, no-wrap
msgid ""
"public class Person extends PanacheMongoEntity {\n"
"    @BsonProperty(\"lastname\")\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:679
#, no-wrap
msgid ""
"    public static Person findByNameWithPanacheQLQuery(String name){\n"
"        return find(\"name\", name).firstResult();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:684
#, no-wrap
msgid ""
"    public static Person findByNameWithNativeQuery(String name){\n"
"        return find(\"{'lastname': ?1}\", name).firstResult();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:688
msgid "Both `findByNameWithPanacheQLQuery()` and `findByNameWithNativeQuery()` methods will return the same result but query written in PanacheQL will use the entity field name: `name`, and native query will use the MongoDB field name: `lastname`."
msgstr "`findByNameWithPanacheQLQuery()` 和 `findByNameWithNativeQuery()` 方法都将返回相同的结果，但用PanacheQL编写的查询将使用实体字段名： `name` ，而原生查询将使用MongoDB字段名： `lastname` 。"

#. type: Title ===
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:689
#, no-wrap
msgid "Query projection"
msgstr "查询映射"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:692
msgid "Query projection can be done with the `project(Class)` method on the `PanacheQuery` object that is returned by the `find()` methods."
msgstr "查询映射可以使用 `find()` 方法返回的 `PanacheQuery` 对象上的 `project(Class)` 方法来完成。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:695
msgid "You can use it to restrict which fields will be returned by the database, the ID field will always be returned, but it's not mandatory to include it inside the projection class."
msgstr "你可以用它来限制哪些字段将被数据库返回，ID字段将始终被返回，但并不强制要求在映射类中包含它。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:699
msgid "For this, you need to create a class (a POJO) that will only contain the projected fields.  This POJO needs to be annotated with `@ProjectionFor(Entity.class)` where `Entity` is the name of your entity class.  The field names, or getters, of the projection class will be used to restrict which properties will be loaded from the database."
msgstr "为此，你需要创建一个只包含映射字段的类（一个POJO）。这个POJO需要被注释为 `@ProjectionFor(Entity.class)` ，其中 `Entity` 是你的实体类的名称。映射类的字段名称或 getter 将用于限制将从数据库加载的属性。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:701
msgid "Projection can be done for both PanacheQL and native queries."
msgstr "对PanacheQL和原生查询都可以进行映射。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:706
#, no-wrap
msgid ""
"import io.quarkus.mongodb.panache.common.ProjectionFor;\n"
"import org.bson.codecs.pojo.annotations.BsonProperty;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:712
#, no-wrap
msgid ""
"// using public fields\n"
"@ProjectionFor(Person.class)\n"
"public class PersonName {\n"
"    public String name;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:717
#, no-wrap
msgid ""
"// using getters\n"
"@ProjectionFor(Person.class)\n"
"public class PersonNameWithGetter {\n"
"    private String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:721
#, no-wrap
msgid ""
"    public String getName(){\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:726
#, no-wrap
msgid ""
"    public void setName(String name){\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:731
#, no-wrap
msgid ""
"// only 'name' will be loaded from the database\n"
"PanacheQuery<PersonName> shortQuery = Person.find(\"status \", Status.Alive).project(PersonName.class);\n"
"PanacheQuery<PersonName> query = Person.find(\"'status': ?1\", Status.Alive).project(PersonNameWithGetter.class);\n"
"PanacheQuery<PersonName> nativeQuery = Person.find(\"{'status': 'ALIVE'}\", Status.Alive).project(PersonName.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:734
msgid "Using `@BsonProperty` is not needed to define custom column mappings, as the mappings from the entity class will be used."
msgstr "使用 `@BsonProperty` ，不需要定义自定义列映射，因为将使用来自实体类的映射。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:736
msgid "You can have your projection class extends from another class. In this case, the parent class also needs to have use `@ProjectionFor` annotation."
msgstr "你可以让你的映射类从另一个类继承。在这种情况下，父类也需要有使用 `@ProjectionFor` 注解。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:738
msgid "If you run Java 17+, records are a good fit for projection classes."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:739
#, no-wrap
msgid "Query debugging"
msgstr "查询调试"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:742
msgid "As MongoDB with Panache allows writing simplified queries, it is sometimes handy to log the generated native queries for debugging purpose."
msgstr "由于带有Panache的MongoDB允许编写简化的查询，有时为调试目的而记录生成的原生查询是很方便的。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:744
msgid "This can be achieved by setting to DEBUG the following log category inside your `application.properties`:"
msgstr "这可以通过在你的 `application.properties` ，将以下日志类别设置为DEBUG来实现："

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:748
#, no-wrap
msgid "quarkus.log.category.\"io.quarkus.mongodb.panache.runtime\".level=DEBUG\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:750
#, no-wrap
msgid "The PojoCodecProvider: easy object to BSON document conversion."
msgstr "PojoCodecProvider：简单的object（对象）到 BSON 文档的转换。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:754
msgid "MongoDB with Panache uses the link:{mongodb-doc-root-url}/fundamentals/data-formats/document-data-format-pojo/[PojoCodecProvider], with link:{mongodb-doc-root-url}/fundamentals/data-formats/document-data-format-pojo/#configure-the-driver-for-pojos[automatic POJO support], to automatically convert your object to a BSON document."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:759
msgid "In case you encounter the `org.bson.codecs.configuration.CodecConfigurationException` exception, it means the codec is not able to automatically convert your object.  This codec obeys the Java Bean standard, so it will successfully convert a POJO using public fields or getters/setters.  You can use `@BsonIgnore` to make a field, or a getter/setter, ignored by the codec."
msgstr "如果你遇到了 `org.bson.codecs.configuration.CodecConfigurationException` 异常，这意味着编解码器不能自动转换你的对象。这个编解码器遵守Java Bean的标准，所以它将成功地转换使用公共字段或getter/setters的POJO。你可以使用 `@BsonIgnore` ，使一个字段或一个getter/setter被编解码器所忽略。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:764
msgid "If your class doesn't obey these rules (for example by including a method that starts with `get` but is not a setter), you could provide a custom codec for it.  Your custom codec will be automatically discovered and registered inside the codec registry.  See xref:mongodb.adoc#simplifying-mongodb-client-usage-using-bson-codec[Using BSON codec]."
msgstr "如果你的类不遵守这些规则（例如，包括一个以 `get` 开始但不是setter的方法），你可以为它提供一个自定义的编解码器。你的自定义编解码器将被自动发现并在编解码器注册表内注册。参见 link:mongodb.html#simplifying-mongodb-client-usage-using-bson-codec[使用BSON编解码器] 。"

#. type: Title ==
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:765
#, no-wrap
msgid "Transactions"
msgstr "事务"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:768
msgid "MongoDB offers ACID transactions since version 4.0."
msgstr "MongoDB从4.0版本开始提供ACID事务。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:770
msgid "To use them with MongoDB with Panache you need to annotate the method that starts the transaction with the `@Transactional` annotation."
msgstr "要将它们与带有 Panache 的 MongoDB 一起使用，你需要在相应的方法上使用 `@Transactional` 注解启动事务。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:773
msgid "In MongoDB, a transaction is only possible on a replicaset, luckily our xref:mongodb.adoc#dev-services[Dev Services for MongoDB] setups a single node replicaset so it is compatible with transactions."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:775
msgid "Transaction support inside MongoDB with Panache is still experimental."
msgstr "使用Panache的MongoDB内部的事务支持仍处于试验阶段。"

#. type: Title ==
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:776
#, no-wrap
msgid "Custom IDs"
msgstr "自定义ID"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:781
msgid "IDs are often a touchy subject. In MongoDB, they are usually auto-generated by the database with an `ObjectId` type.  In MongoDB with Panache the ID are defined by a field named `id` of the `org.bson.types.ObjectId` type, but if you want to customize them, once again we have you covered."
msgstr "ID往往是一个敏感的话题。在MongoDB中，，它们通常由数据库以 `ObjectId` 类型自动生成。 在带有 Panache 的 MongoDB 中，ID是由一个名为 `org.bson.types.ObjectId` 类型的名为 `id` 的字段定义的，但如果你想自定义它们，我们再次为您提供服务。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:784
msgid "You can specify your own ID strategy by extending `PanacheMongoEntityBase` instead of `PanacheMongoEntity`. Then you just declare whatever ID you want as a public field by annotating it by `@BsonId`:"
msgstr "你可以通过继承 `PanacheMongoEntityBase` ，而不是 `PanacheMongoEntity` ，来指定你自己的ID策略。然后你只要通过 `@BsonId` ，将你想要的任何ID声明为一个公共字段。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:789
#, no-wrap
msgid ""
"@MongoEntity\n"
"public class Person extends PanacheMongoEntityBase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:792
#, no-wrap
msgid ""
"    @BsonId\n"
"    public Integer myId;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:795
#, no-wrap
msgid ""
"    //...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:799
msgid "If you're using repositories, then you will want to extend `PanacheMongoRepositoryBase` instead of `PanacheMongoRepository` and specify your ID type as an extra type parameter:"
msgstr "如果你使用存储库，那么你要继承 `PanacheMongoRepositoryBase` ，而不是 `PanacheMongoRepository` ，并指定你的ID类型作为一个额外的类型参数："

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:806
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheMongoRepositoryBase<Person,Integer> {\n"
"    //...\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:812
msgid "When using `ObjectId`, MongoDB will automatically provide a value for you, but if you use a custom field type, you need to provide the value by yourself."
msgstr "当使用 `ObjectId` ，MongoDB会自动为你提供一个值，但如果你使用一个自定义字段类型，你需要自己提供一个值。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:816
msgid "`ObjectId` can be difficult to use if you want to expose its value in your REST service.  So we created Jackson and JSON-B providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on either the RESTEasy Reactive Jackson extension or the RESTEasy Reactive JSON-B extension."
msgstr "如果您想在 REST 服务中公开它的值，则 `ObjectId` 可能很难使用。因此，我们创建了 Jackson 和 JSON-B 提供程序，将它们序列化为 `String` ，如果您的项目依赖于 RESTEasy Reactive Jackson 扩展或 RESTEasy Reactive JSON-B 扩展，则会自动注册。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:820
msgid "If you use the standard `ObjectId` ID type, don't forget to retrieve your entity by creating a new `ObjectId` when the identifier comes from a path parameter. For example:"
msgstr "如果你使用标准的 `ObjectId` ID类型，当标识符来自路径参数时，不要忘记通过创建一个新的 `ObjectId` 来检索你的实体。例如："

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:828
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/{id}\")\n"
"public Person findById(String id) {\n"
"    return Person.findById(new ObjectId(id));\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:831
#, no-wrap
msgid "Working with Kotlin Data classes"
msgstr "使用Kotlin Data classes工作"

#. type: delimited block =
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:834
msgid "Kotlin data classes are a very convenient way of defining data carrier classes, making them a great match to define an entity class."
msgstr "Kotlin data classes是定义数据载体类的一种非常方便的方式，非常适合定义实体类。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:837
msgid "But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked as nullable, and the generated constructor needs to have as parameters all the fields of the data class."
msgstr "但是这种类型的类有一些限制：所有的字段都需要在构造时被初始化或者被标记为nullable（可空），而且生成的构造函数需要有数据类的所有字段作为参数。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:839
msgid "MongoDB with Panache uses the link:{mongodb-doc-root-url}/fundamentals/data-formats/document-data-format-pojo[PojoCodecProvider], a MongoDB codec which mandates the presence of a parameterless constructor."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:843
msgid "Therefore, if you want to use a data class as an entity class, you need a way to make Kotlin generate an empty constructor.  To do so, you need to provide default values for all the fields of your classes.  The following sentence from the Kotlin documentation explains it:"
msgstr "因此，如果你想使用一个数据类作为实体类，你需要一种方法来使Kotlin生成一个空的构造函数。要做到这一点，你需要为你的类的所有字段提供默认值。下面这句话来自Kotlin文档的解释："

#. type: delimited block =
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:845
msgid "__On the JVM, if the generated class needs to have a parameterless constructor, default values for all properties have to be specified (see Constructors).__"
msgstr "__在JVM上，如果生成的类需要有一个无参数的构造函数，就必须为所有属性指定默认值（见构造函数）。__"

#. type: delimited block =
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:847
msgid "If for whatever reason, the aforementioned solution is deemed unacceptable, there are alternatives."
msgstr "如果由于某种原因，上述解决方案被认为是不可接受的，那么还有其他选择。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:850
msgid "First, you can create a BSON Codec which will be automatically registered by Quarkus and will be used instead of the `PojoCodecProvider`.  See this part of the documentation: xref:mongodb.adoc#simplifying-mongodb-client-usage-using-bson-codec[Using BSON codec]."
msgstr "首先，你可以创建一个BSON编解码器，它将被Quarkus自动注册，并代替 `PojoCodecProvider` 。见这部分文档。 link:mongodb.html#simplifying-mongodb-client-usage-using-bson-codec[使用BSON编解码器] 。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:853
msgid "Another option is to use the `@BsonCreator` annotation to tell the `PojoCodecProvider` to use the Kotlin data class default constructor, in this case all constructor parameters have to be annotated with `@BsonProperty`: see link:{mongodb-doc-root-url}/fundamentals/data-formats/pojo-customization/#pojos-without-no-argument-constructors[Supporting pojos without no args constructor]."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:855
msgid "This will only work when the entity extends `PanacheMongoEntityBase` and not `PanacheMongoEntity`, as the ID field also needs to be included in the constructor."
msgstr "这只有在实体继承了 `PanacheMongoEntityBase` ，而不是 `PanacheMongoEntity` ，这样才会起作用，因为ID字段也需要被包含在构造函数中。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:857
msgid "An example of a `Person` class defined as a Kotlin data class would look like:"
msgstr "一个定义为Kotlin数据类的 `Person` 类的例子是这样的："

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:866
#, no-wrap
msgid ""
"data class Person @BsonCreator constructor (\n"
"    @BsonId var id: ObjectId,\n"
"    @BsonProperty(\"name\") var name: String,\n"
"    @BsonProperty(\"birth\") var birth: LocalDate,\n"
"    @BsonProperty(\"status\") var status: Status\n"
"): PanacheMongoEntityBase()\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:871
msgid "Here we use `var` but note that `val` can also be used."
msgstr "这里我们使用 `var` ，但注意也可以使用 `val` 。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:873
msgid "The `@BsonId` annotation is used instead of `@BsonProperty(\"_id\")` for brevity's sake, but use of either is valid."
msgstr "为了简洁起见，使用了 `@BsonId` 注解，而不是 `@BsonProperty(\"_id\")` ，但使用其中任何一种都是有效的。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:877
msgid "The last option is to the use the link:https://kotlinlang.org/docs/reference/compiler-plugins.html#no-arg-compiler-plugin[no-arg] compiler plugin.  This plugin is configured with a list of annotations, and the end result is the generation of no-args constructor for each class annotated with them."
msgstr "最后一个选项是使用 link:https://kotlinlang.org/docs/reference/compiler-plugins.html#no-arg-compiler-plugin[无arg（参数）] 编译器插件。这个插件是用一个注释列表来配置的，最终的结果是为每个有注释的类生成无args（参数）构造函数。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:879
msgid "For MongoDB with Panache, you could use the `@MongoEntity` annotation on your data class for this:"
msgstr "对于带有Panache的MongoDB，你可以在你的数据类上使用 `@MongoEntity` 注解来实现这一点。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:888
#, no-wrap
msgid ""
"@MongoEntity\n"
"data class Person (\n"
"    var name: String,\n"
"    var birth: LocalDate,\n"
"    var status: Status\n"
"): PanacheMongoEntity()\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:891
#, no-wrap
msgid "Reactive Entities and Repositories"
msgstr "响应式实体和存储库"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:896
msgid "MongoDB with Panache allows using reactive style implementation for both entities and repositories.  For this, you need to use the Reactive variants when defining your entities : `ReactivePanacheMongoEntity` or `ReactivePanacheMongoEntityBase`, and when defining your repositories: `ReactivePanacheMongoRepository` or `ReactivePanacheMongoRepositoryBase`."
msgstr "带有Panache的MongoDB允许对实体和存储库使用响应式实现。为此，你需要在定义实体时使用Reactive变形： `ReactivePanacheMongoEntity` 或 `ReactivePanacheMongoEntityBase` ，在定义存储库时使用： `ReactivePanacheMongoRepository` 或 `ReactivePanacheMongoRepositoryBase` 。"

#. type: Block title
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:898
#, no-wrap
msgid "Mutiny"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:902
msgid "The reactive API of MongoDB with Panache uses Mutiny reactive types.  If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:905
msgid "The reactive variant of the `Person` class will be:"
msgstr "`Person` 类的响应式变形将是："

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:912
#, no-wrap
msgid ""
"public class ReactivePerson extends ReactivePanacheMongoEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:927
msgid "You will have access to the same functionalities of the _imperative_ variant inside the reactive one: bson annotations, custom ID, PanacheQL, ...  But the methods on your entities or repositories will all return reactive types."
msgstr "你可以在 _imperative_ 变形中使用同样的功能：Bson注释、自定义ID、PanacheQL......但是你的实体或资源库上的方法将全部返回响应式类型。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:929
msgid "See the equivalent methods from the imperative example with the reactive variant:"
msgstr "请参阅带有响应变形的命令式示例中的等效方法："

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:937
#, no-wrap
msgid ""
"// creating a person\n"
"ReactivePerson person = new ReactivePerson();\n"
"person.name = \"Loïc\";\n"
"person.birth = LocalDate.of(1910, Month.FEBRUARY, 1);\n"
"person.status = Status.Alive;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:941
#, no-wrap
msgid ""
"// persist it: if you keep the default ObjectId ID field, it will be populated by the MongoDB driver,\n"
"// and accessible when uni1 will be resolved\n"
"Uni<ReactivePerson> uni1 = person.persist();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:946
#, no-wrap
msgid ""
"// Your must call update() in order to send your entity modifications to MongoDB\n"
"Uni<ReactivePerson> uni2 = person.update();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:949
#, no-wrap
msgid ""
"// delete it\n"
"Uni<Void> uni3 = person.delete();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:952
#, no-wrap
msgid ""
"// getting a list of all persons\n"
"Uni<List<ReactivePerson>> allPersons = ReactivePerson.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:957
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"// here we build a new ObjectId, but you can also retrieve it from the existing entity after being persisted\n"
"ObjectId personId = new ObjectId(idAsString);\n"
"Uni<ReactivePerson> personById = ReactivePerson.findById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:961
#, no-wrap
msgid ""
"// finding a specific person by ID via an Optional\n"
"Uni<Optional<ReactivePerson>> optional = ReactivePerson.findByIdOptional(personId);\n"
"personById = optional.map(o -> o.orElseThrow(() -> new NotFoundException()));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:964
#, no-wrap
msgid ""
"// finding all living persons\n"
"Uni<List<ReactivePerson>> livingPersons = ReactivePerson.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:967
#, no-wrap
msgid ""
"// counting all persons\n"
"Uni<Long> countAll = ReactivePerson.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:970
#, no-wrap
msgid ""
"// counting all living persons\n"
"Uni<Long> countAlive = ReactivePerson.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:973
#, no-wrap
msgid ""
"// delete all living persons\n"
"Uni<Long>  deleteCount = ReactivePerson.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:976
#, no-wrap
msgid ""
"// delete all persons\n"
"deleteCount = ReactivePerson.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:979
#, no-wrap
msgid ""
"// delete by id\n"
"Uni<Boolean> deleted = ReactivePerson.deleteById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:982
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"Uni<Long> updated = ReactivePerson.update(\"name\", \"Mortal\").where(\"status\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:985
msgid "If you use MongoDB with Panache in conjunction with RESTEasy Reactive, you can directly return a reactive type inside your JAX-RS resource endpoint."
msgstr "如果您将MongoDB和Panache和RESTEasy Reactive结合使用，您可以直接在JAX-RS资源端点内返回一个响应式类型。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:987
msgid "The same query facility exists for the reactive types, but the `stream()` methods act differently: they return a `Multi` (which implement a reactive stream `Publisher`) instead of a `Stream`."
msgstr "响应类型存在相同的查询工具，但 `stream()` 方法的作用不同：它们返回一个 `Multi` （实现了反应式流 `Publisher` ），而不是 `Stream` 。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:989
msgid "It allows more advanced reactive use cases, for example, you can use it to send server-sent events (SSE) via RESTEasy Reactive:"
msgstr "它允许更高级的响应式用例，例如，你可以用它来通过RESTEasy Reactive发送服务器发送的事件（SSE）："

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:997
#, no-wrap
msgid ""
"import org.jboss.resteasy.reactive.RestStreamElementType;\n"
"import org.reactivestreams.Publisher;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1005
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/stream\")\n"
"@Produces(MediaType.SERVER_SENT_EVENTS)\n"
"@RestStreamElementType(MediaType.APPLICATION_JSON)\n"
"public Multi<ReactivePerson> streamPersons() {\n"
"    return ReactivePerson.streamAll();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1008
msgid "`@RestStreamElementType(MediaType.APPLICATION_JSON)` tells RESTEasy Reactive to serialize the object in JSON."
msgstr "`@RestStreamElementType(MediaType.APPLICATION_JSON)` 告诉RESTEasy Reactive将对象序列化为JSON格式。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1010
msgid "Transactions are not supported for Reactive Entities and Repositories."
msgstr "响应式实体和存储库不支持事务。"

#. type: Title ==
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1011
#, no-wrap
msgid "Mocking"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1013
#, no-wrap
msgid "Using the active-record pattern"
msgstr "使用active-record模式"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1018
msgid "If you are using the active-record pattern you cannot use Mockito directly as it does not support mocking static methods, but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static methods, including your own."
msgstr "如果你使用active-record模式，你不能直接使用Mockito，因为它不支持模拟静态方法，但你可以使用 `quarkus-panache-mock` 模块，它允许你使用Mockito来模拟所有提供的静态方法，包括你自己的。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1020
msgid "Add this dependency to your `pom.xml`:"
msgstr "将此依赖添加到你的 `pom.xml` 中 ："

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1029
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-panache-mock</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1035
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-panache-mock\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1038
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1125
msgid "Given this simple entity:"
msgstr "提供这个简单的实体："

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1044
#, no-wrap
msgid "    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1049
#, no-wrap
msgid ""
"    public static List<Person> findOrdered() {\n"
"        return findAll(Sort.by(\"lastname\", \"firstname\")).list();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1052
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1150
msgid "You can write your mocking test like this:"
msgstr "你可以像这样写你的模拟测试。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1057
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheFunctionalityTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1061
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheMocking() {\n"
"        PanacheMock.mock(Person.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1064
#, no-wrap
msgid ""
"        // Mocked classes always return a default value\n"
"        Assertions.assertEquals(0, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1068
#, no-wrap
msgid ""
"        // Now let's specify the return value\n"
"        Mockito.when(Person.count()).thenReturn(23L);\n"
"        Assertions.assertEquals(23, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1072
#, no-wrap
msgid ""
"        // Now let's change the return value\n"
"        Mockito.when(Person.count()).thenReturn(42L);\n"
"        Assertions.assertEquals(42, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1076
#, no-wrap
msgid ""
"        // Now let's call the original method\n"
"        Mockito.when(Person.count()).thenCallRealMethod();\n"
"        Assertions.assertEquals(0, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1079
#, no-wrap
msgid ""
"        // Check that we called it 4 times\n"
"        PanacheMock.verify(Person.class, Mockito.times(4)).count();// <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1085
#, no-wrap
msgid ""
"        // Mock only with specific parameters\n"
"        Person p = new Person();\n"
"        Mockito.when(Person.findById(12L)).thenReturn(p);\n"
"        Assertions.assertSame(p, Person.findById(12L));\n"
"        Assertions.assertNull(Person.findById(42L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1089
#, no-wrap
msgid ""
"        // Mock throwing\n"
"        Mockito.when(Person.findById(12L)).thenThrow(new WebApplicationException());\n"
"        Assertions.assertThrows(WebApplicationException.class, () -> Person.findById(12L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1093
#, no-wrap
msgid ""
"        // We can even mock your custom methods\n"
"        Mockito.when(Person.findOrdered()).thenReturn(Collections.emptyList());\n"
"        Assertions.assertTrue(Person.findOrdered().isEmpty());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1099
#, no-wrap
msgid ""
"        PanacheMock.verify(Person.class).findOrdered();\n"
"        PanacheMock.verify(Person.class, Mockito.atLeastOnce()).findById(Mockito.any());\n"
"        PanacheMock.verifyNoMoreInteractions(Person.class);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1102
msgid "Be sure to call your `verify` methods on `PanacheMock` rather than `Mockito`, otherwise you won't know what mock object to pass."
msgstr "请确保在 `PanacheMock` 而不是 `Mockito` 上调用你的 `verify` 方法，否则你将不知道要传递什么模拟对象。"

#. type: Title ===
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1103
#, no-wrap
msgid "Using the repository pattern"
msgstr "使用资源库模式"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1107
msgid "If you are using the repository pattern you can use Mockito directly, using the `quarkus-junit5-mockito` module, which makes mocking beans much easier:"
msgstr "如果你使用存储库模式，你可以直接使用Mockito，使用 `quarkus-junit5-mockito` 模块，这使得模拟Bean变得更加容易："

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1116
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5-mockito</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1122
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-junit5-mockito\")\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1129
#, no-wrap
msgid "public class Person {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1132
#, no-wrap
msgid ""
"    @BsonId\n"
"    public Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1135
#, no-wrap
msgid ""
"    public String name;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1138
msgid "And this repository:"
msgstr "还有这个储存库："

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1147
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheMongoRepository<Person> {\n"
"    public List<Person> findOrdered() {\n"
"        return findAll(Sort.by(\"lastname\", \"firstname\")).list();\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1157
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheFunctionalityTest {\n"
"    @InjectMock\n"
"    PersonRepository personRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1162
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheRepositoryMocking() throws Throwable {\n"
"        // Mocked classes always return a default value\n"
"        Assertions.assertEquals(0, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1166
#, no-wrap
msgid ""
"        // Now let's specify the return value\n"
"        Mockito.when(personRepository.count()).thenReturn(23L);\n"
"        Assertions.assertEquals(23, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1170
#, no-wrap
msgid ""
"        // Now let's change the return value\n"
"        Mockito.when(personRepository.count()).thenReturn(42L);\n"
"        Assertions.assertEquals(42, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1174
#, no-wrap
msgid ""
"        // Now let's call the original method\n"
"        Mockito.when(personRepository.count()).thenCallRealMethod();\n"
"        Assertions.assertEquals(0, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1177
#, no-wrap
msgid ""
"        // Check that we called it 4 times\n"
"        Mockito.verify(personRepository, Mockito.times(4)).count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1183
#, no-wrap
msgid ""
"        // Mock only with specific parameters\n"
"        Person p = new Person();\n"
"        Mockito.when(personRepository.findById(12L)).thenReturn(p);\n"
"        Assertions.assertSame(p, personRepository.findById(12L));\n"
"        Assertions.assertNull(personRepository.findById(42L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1187
#, no-wrap
msgid ""
"        // Mock throwing\n"
"        Mockito.when(personRepository.findById(12L)).thenThrow(new WebApplicationException());\n"
"        Assertions.assertThrows(WebApplicationException.class, () -> personRepository.findById(12L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1190
#, no-wrap
msgid ""
"        Mockito.when(personRepository.findOrdered()).thenReturn(Collections.emptyList());\n"
"        Assertions.assertTrue(personRepository.findOrdered().isEmpty());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1197
#, no-wrap
msgid ""
"        // We can even mock your custom methods\n"
"        Mockito.verify(personRepository).findOrdered();\n"
"        Mockito.verify(personRepository, Mockito.atLeastOnce()).findById(Mockito.any());\n"
"        Mockito.verifyNoMoreInteractions(personRepository);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1200
#, no-wrap
msgid "How and why we simplify MongoDB API"
msgstr "我们如何以及为什么要简化MongoDB的API"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1204
msgid "When it comes to writing MongoDB entities, there are a number of annoying things that users have grown used to reluctantly deal with, such as:"
msgstr "在编写MongoDB实体时，用户已经习惯了不情愿地处理许多烦人的事情，例如："

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1207
msgid "Duplicating ID logic: most entities need an ID, most people don't care how it's set, because it's not really relevant to your model."
msgstr "重复ID逻辑：大多数实体需要一个ID，大多数人并不关心它是如何设置的，因为它与你的模型并不真正相关。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1210
msgid "Dumb getters and setters: since Java lacks support for properties in the language, we have to create fields, then generate getters and setters for those fields, even if they don't actually do anything more than read/write the fields."
msgstr "繁琐的 getters 和 setters：由于Java语言中缺乏对属性的支持，我们必须创建字段，然后为这些字段getters 和 setters，即使它们除了read/write字段外实际上没有做任何事情。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1213
msgid "Traditional EE patterns advise to split entity definition (the model) from the operations you can do on them (DAOs, Repositories), but really that requires an unnatural split between the state and its operations even though we would never do something like that for regular objects in the Object-Oriented architecture, where state and methods are in the same class. Moreover, this requires two classes per entity, and requires injection of the DAO or Repository where you need to do entity operations, which breaks your edit flow and requires you to get out of the code you're writing to set up an injection point before coming back to use it."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1215
msgid "MongoDB queries are super powerful, but overly verbose for common operations, requiring you to write queries even when you don't need all the parts."
msgstr "MongoDB的查询功能超级强大，但对于普通操作来说过于冗长，即使不需要所有的部分，也需要你编写查询。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1216
msgid "MongoDB queries are JSON based, so you will need some String manipulation or using the `Document` type, and it will need a lot of boilerplate code."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1218
msgid "With Panache, we took an opinionated approach to tackle all these problems:"
msgstr "通过Panache，我们采取了一种有主见的方法来解决所有这些问题："

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1221
msgid "Make your entities extend `PanacheMongoEntity`: it has an ID field that is auto-generated. If you require a custom ID strategy, you can extend `PanacheMongoEntityBase` instead and handle the ID yourself."
msgstr "让你的实体继承 `PanacheMongoEntity` ：它有一个自动生成的ID字段。如果你需要一个自定义的ID策略，你可以继承 `PanacheMongoEntityBase` ，而不是自己处理ID。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1224
msgid "Use public fields. Get rid of dumb getter and setters. Under the hood, we will generate all getters and setters that are missing, and rewrite every access to these fields to use the accessor methods. This way you can still write _useful_ accessors when you need them, which will be used even though your entity users still use field accesses."
msgstr "使用公共字段。摆脱繁琐的getter和setters。在后台，我们将生成所有缺失的getter和setter，并重写对这些字段的每个访问，以使用访问器方法。这样，当你需要时，你仍然可以写出 _有用的_ 访问器，即使你的实体用户仍然使用字段访问，也会被使用。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1227
msgid "With the active record pattern: put all your entity logic in static methods in your entity class and don't create DAOs.  Your entity superclass comes with lots of super useful static methods, and you can add your own in your entity class.  Users can just start using your entity `Person` by typing `Person.` and getting completion for all the operations in a single place."
msgstr "使用活动记录模式：把你所有的实体逻辑放在实体类的静态方法中，不要创建DAO。你的实体超类带有很多超级有用的静态方法，你也可以在你的实体类中添加你自己的静态方法。用户可以通过输入 `Person.` ，开始使用你的实体 `Person` ，并在一个地方获得所有操作的完成。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1229
msgid "Don't write parts of the query that you don't need: write `Person.find(\"order by name\")` or `Person.find(\"name = ?1 and status = ?2\", \"Loïc\", Status.Alive)` or even better `Person.find(\"name\", \"Loïc\")`."
msgstr "不要写你不需要的查询部分：写 `Person.find(\"order by name\")` 或 `Person.find(\"name = ?1 and status = ?2\", \"Loïc\", Status.Alive)` ，甚至更好的 `Person.find(\"name\", \"Loïc\")` 。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1231
msgid "That's all there is to it: with Panache, MongoDB has never looked so trim and neat."
msgstr "这就是它的全部内容：有了Panache，MongoDB看起来从未如此简洁"

#. type: Title ==
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1232
#, no-wrap
msgid "Defining entities in external projects or jars"
msgstr "在外部项目或jar中定义实体"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1235
msgid "MongoDB with Panache relies on compile-time bytecode enhancements to your entities."
msgstr "带有Panache的MongoDB依赖于对你的实体进行编译时的字节码增强。"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1241
msgid "It attempts to identity archives with Panache entities (and consumers of Panache entities)  by the presence of the marker file `META-INF/panache-archive.marker`. Panache includes an annotation processor that will automatically create this file in archives that depend on Panache (even indirectly). If you have disabled annotation processors you may need to create this file manually in some cases."
msgstr "它试图通过标记文件 `META-INFpanache-archive.marker` 的存在来识别具有 Panache 实体（和 Panache 实体的消费者）的档案。 Panache 包含一个注释处理器，它将自动在依赖于 Panache（甚至间接）的档案中创建此文件。如果您禁用了注释处理器，在某些情况下您可能需要手动创建此文件。"

#. type: Title ==
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1242
#, no-wrap
msgid "Multitenancy"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1246
msgid "\"Multitenancy is a software architecture where a single software instance can serve multiple, distinct user groups. Software-as-a-service (SaaS)  offerings are an example of multitenant architecture.\" (link:https://www.redhat.com/en/topics/cloud-computing/what-is-multitenancy#:~:text=Multitenancy%20is%20a%20software%20architecture,an%20example%20of%20multitenant%20architecture.[Red Hat])."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1248
msgid "MongoDB with Panache currently supports the database per tenant approach, it's similar to schema per tenant approach when compared to SQL databases."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1249
#, no-wrap
msgid "Writing the application"
msgstr "编写应用程序"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1253
msgid "In order to resolve the tenant from incoming requests and map it to a specific database, you must create an implementation of the `io.quarkus.mongodb.panache.common.MongoDatabaseResolver` interface."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1258
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1290
#, no-wrap
msgid ""
"import io.quarkus.mongodb.panache.common.MongoDatabaseResolver;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1261
#, no-wrap
msgid ""
"@RequestScoped // <1>\n"
"public class CustomMongoDatabaseResolver implements MongoDatabaseResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1264
#, no-wrap
msgid ""
"    @Inject\n"
"    RoutingContext context;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1269
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve() {\n"
"        return context.request().getHeader(\"X-Tenant\");\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1271
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1273
msgid "The bean is made `@RequestScoped` as the tenant resolution depends on the incoming request."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1278
msgid "The database selection priority order is as follow: `@MongoEntity(database=\"mizain\")`, `MongoDatabaseResolver`, and then `quarkus.mongodb.database` property."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1285
msgid "If you also use xref:security-openid-connect-multitenancy.adoc[OIDC multitenancy], then if the OIDC tenantID and MongoDB database are the same and must be extracted from the Vert.x `RoutingContext` you can pass the tenant id from the OIDC `TenantResolver` to the MongoDB with Panache `MongoDatabaseResolver` as a `RoutingContext` attribute, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1293
#, no-wrap
msgid ""
"@RequestScoped\n"
"public class CustomMongoDatabaseResolver implements MongoDatabaseResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1303
#, no-wrap
msgid ""
"    @Inject\n"
"    RoutingContext context;\n"
"    ...\n"
"    @Override\n"
"    public String resolve() {\n"
"        // OIDC TenantResolver has already calculated the tenant id and saved it as a RoutingContext `tenantId` attribute:\n"
"        return context.get(\"tenantId\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1307
msgid "Given this entity:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1312
#, no-wrap
msgid ""
"import org.bson.codecs.pojo.annotations.BsonId;\n"
"import io.quarkus.mongodb.panache.common.MongoEntity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1320
#, no-wrap
msgid ""
"@MongoEntity(collection = \"persons\")\n"
"public class Person extends PanacheMongoEntityBase {\n"
"    @BsonId\n"
"    public Long id;\n"
"    public String firstName;\n"
"    public String lastName;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1323
msgid "And this resource:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1327
#, no-wrap
msgid "import java.net.URI;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1333
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.POST;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.core.Response;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1336
#, no-wrap
msgid ""
"@Path(\"/persons\")\n"
"public class PersonResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1342
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/{id}\")\n"
"    public Person getById(Long id) {\n"
"        return Person.findById(id);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1349
#, no-wrap
msgid ""
"    @POST\n"
"    public Response create(Person person) {\n"
"        Person.persist(person);\n"
"        return Response.created(URI.create(String.format(\"/persons/%d\", person.id))).build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1352
msgid "From the classes above, we have enough to persist and fetch persons from different databases, so it's possible to see how it works."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1353
#, no-wrap
msgid "Configuring the application"
msgstr "配置该应用程序"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1356
msgid "The same mongo connection will be used for all tenants, so a database has to be created for every tenant."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1362
#, no-wrap
msgid ""
"quarkus.mongodb.connection-string=mongodb://login:pass@mongo:27017\n"
"# The default database\n"
"quarkus.mongodb.database=sanjoka\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1364
#, no-wrap
msgid "Testing"
msgstr "测试"

#. type: Plain text
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1367
msgid "You can write your test like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1372
#, no-wrap
msgid ""
"import static org.junit.jupiter.api.Assertions.assertEquals;\n"
"import static org.junit.jupiter.api.Assertions.assertTrue;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1374
#, no-wrap
msgid "import java.util.Objects;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1377
#, no-wrap
msgid ""
"import org.apache.commons.lang3.builder.EqualsBuilder;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1383
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.restassured.RestAssured;\n"
"import io.restassured.http.Method;\n"
"import io.restassured.response.Response;\n"
"import io.restassured.specification.RequestSpecification;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1386
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheMongoMultiTenancyTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1390
#, no-wrap
msgid ""
"    public static final String TENANT_HEADER_NAME = \"X-Tenant\";\n"
"    private static final String TENANT_1 = \"Tenant1\";\n"
"    private static final String TENANT_2 = \"Tenant2\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1398
#, no-wrap
msgid ""
"    @Test\n"
"    public void testMongoDatabaseResolverUsingPersonResource() {\n"
"        Person person1 = new Person();\n"
"        person1.id = 1L;\n"
"        person1.firstname = \"Pedro\";\n"
"        person1.lastname = \"Pereira\";\n"
"        person1.status = Status.ALIVE;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1404
#, no-wrap
msgid ""
"        Person person2 = new Person();\n"
"        person2.id = 2L;\n"
"        person2.firstname = \"Tibé\";\n"
"        person2.lastname = \"Venâncio\";\n"
"        person2.status = Status.ALIVE;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1406
#, no-wrap
msgid "        String endpoint = \"/persons\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1410
#, no-wrap
msgid ""
"        // creating person 1\n"
"        Response createPerson1Response = callCreatePersonEndpoint(endpoint, TENANT_1, person1);\n"
"        assertResponse(createPerson1Response, 201);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1414
#, no-wrap
msgid ""
"        // checking person 1 creation\n"
"        Response getPerson1ByIdResponse = callGetPersonByIdEndpoint(endpoint, person1.id, TENANT_1);\n"
"        assertResponse(getPerson1ByIdResponse, 200, person1);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1418
#, no-wrap
msgid ""
"        // creating person 2\n"
"        Response createPerson2Response = callCreatePersonEndpoint(endpoint, TENANT_2, person2);\n"
"        assertResponse(createPerson2Response, 201);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1423
#, no-wrap
msgid ""
"        // checking person 2 creation\n"
"        Response getPerson2ByIdResponse = callGetPersonByIdEndpoint(endpoint, person2.id, TENANT_2);\n"
"        assertResponse(getPerson2ByIdResponse, 200, person2);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1432
#, no-wrap
msgid ""
"    protected Response callCreatePersonEndpoint(String endpoint, String tenant, Object person) {\n"
"        return RestAssured.given()\n"
"                .header(\"Content-Type\", \"application/json\")\n"
"                .header(TENANT_HEADER_NAME, tenant)\n"
"                .body(person)\n"
"                .post(endpoint)\n"
"                .andReturn();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1436
#, no-wrap
msgid ""
"    private Response callGetPersonByIdEndpoint(String endpoint, Long resourceId, String tenant) {\n"
"        RequestSpecification request = RestAssured.given()\n"
"                .header(\"Content-Type\", \"application/json\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1440
#, no-wrap
msgid ""
"        if (Objects.nonNull(tenant) && !tenant.isBlank()) {\n"
"            request.header(TENANT_HEADER_NAME, tenant);\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1445
#, no-wrap
msgid ""
"        return request.when()\n"
"                .request(Method.GET, endpoint.concat(\"/{id}\"), resourceId)\n"
"                .andReturn();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1449
#, no-wrap
msgid ""
"    private void assertResponse(Response response, Integer expectedStatusCode) {\n"
"        assertResponse(response, expectedStatusCode, null);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/mongodb-panache.adoc:1457
#, no-wrap
msgid ""
"    private void assertResponse(Response response, Integer expectedStatusCode, Object expectedResponseBody) {\n"
"        assertEquals(expectedStatusCode, response.statusCode());\n"
"        if (Objects.nonNull(expectedResponseBody)) {\n"
"            assertTrue(EqualsBuilder.reflectionEquals(response.as(expectedResponseBody.getClass()), expectedResponseBody));\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""
