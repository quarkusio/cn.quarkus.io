# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-01-20 14:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:6
#, no-wrap
msgid "Funqy Amazon Lambda Binding"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:14
msgid "The guide walks through quickstart code to show you how you can deploy Funqy functions to Amazon Lambda."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:17
msgid "Funqy functions can be deployed using the AWS Lambda Java Runtime, or you can build a native executable and use Lambda Custom Runtime if you want a smaller memory footprint and faster cold boot startup time."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:20
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:25
msgid "Read about xref:funqy.adoc[Funqy Basics].  This is a short read!"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:26
msgid "https://aws.amazon.com[An Amazon AWS account]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:27
msgid "https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html[AWS CLI]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:28
msgid "https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI], for local testing"
msgstr "link:https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI] ，用于本地测试"

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:30
msgid "Funqy Amazon Lambdas build off of our xref:amazon-lambda.adoc[Quarkus Amazon Lambda support]."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:31
#, no-wrap
msgid "Installing AWS bits"
msgstr "安装AWS位"

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:35
msgid "Installing all the AWS bits is probably the most difficult thing about this guide.  Make sure that you follow all the steps for installing AWS CLI."
msgstr "安装所有AWS位可能是本指南中最困难的事情。请确保你遵循安装AWS CLI的所有步骤。"

#. type: Title ==
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:36
#, no-wrap
msgid "The Quickstart"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:39
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或者下载一个 {quickstarts-archive-url}[存档]。"

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:41
msgid "The solution is located in the `funqy-amazon-lambda-quickstart` {quickstarts-tree-url}/funqy-quickstarts/funqy-amazon-lambda-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:42
#, no-wrap
msgid "The Code"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:46
msgid "There is nothing special about the code and more importantly nothing AWS specific.  Funqy functions can be deployed to many environments and AWS Lambda is one of them.  The Java code is actually the same exact code as the {quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart[funqy-http-quickstart]."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:48
#, no-wrap
msgid "Choose Your Function"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:52
msgid "Only one Funqy function can be exported per Amazon Lambda deployment.  If you have multiple functions defined within your project, then you will need to choose the function within your Quarkus `application.properties`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:56
#, no-wrap
msgid "quarkus.funqy.export=greet\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:59
msgid "You can see how the quickstart has done it within its own {quickstarts-tree-url}/funqy-quickstarts/funqy-amazon-lambda-quickstart/src/main/resources/application.properties[application.properties]."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:61
msgid "Alternatively, you can set the `QUARKUS_FUNQY_EXPORT` environment variable when you create the Amazon Lambda using the `aws` cli."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:62
#, no-wrap
msgid "Deploy to AWS Lambda Java Runtime"
msgstr "部署到AWS Lambda Java Runtime"

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:67
msgid "There are a few steps to get your Funqy function running on AWS Lambda.  The quickstart maven project generates a helpful script to create, update, delete, and invoke your functions for pure Java and native deployments.  This script is generated at build time."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:68
#, no-wrap
msgid "Build and Deploy"
msgstr "构建和部署"

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:71
msgid "Build the project using Maven:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:75
msgid "This will compile and package your code."
msgstr "这将对你的代码进行编译和打包。"

#. type: Title ==
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:76
#, no-wrap
msgid "Create an Execution Role"
msgstr "创建一个执行角色"

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:82
msgid "View the https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-awscli.html[Getting Started Guide] for deploying a lambda with AWS CLI.  Specifically, make sure you have created an `Execution Role`.  You will need to define a `LAMBDA_ROLE_ARN` environment variable in your profile or console window, Alternatively, you can edit the `manage.sh` script that is generated by the build and put the role value directly there:"
msgstr "查看使用AWS CLI部署lambda的 link:https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-awscli.html[入门指南] 。具体来说，确保你已经创建了一个 `Execution Role` 。你需要在你的配置文件或控制台窗口中定义一个 `LAMBDA_ROLE_ARN` 环境变量，或者，你可以编辑由构建生成的 `manage.sh` 脚本，并把角色值直接放在那里："

#. type: delimited block -
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:86
#, no-wrap
msgid "LAMBDA_ROLE_ARN=\"arn:aws:iam::1234567890:role/lambda-role\"\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:88
#, no-wrap
msgid "Extra Build Generated Files"
msgstr "构建额外生成的文件"

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:92
msgid "After you run the build, there are a few extra files generated by the `quarkus-funqy-amazon-lambda` extension.  These files are in the build directory: `target/` for maven, `build/` for gradle."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:94
msgid "`function.zip` - lambda deployment file"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:95
msgid "`manage.sh` - wrapper around aws lambda cli calls"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:96
msgid "`bootstrap-example.sh` - example bootstrap script for native deployments"
msgstr " `bootstrap-example.sh` - 用于原生部署的bootstrap脚本示例"

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:97
msgid "`sam.jvm.yaml` - (optional) for use with sam cli and local testing"
msgstr " `sam.jvm.yaml` - (可选)用于sam cli和本地测试"

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:98
msgid "`sam.native.yaml` - (optional) for use with sam cli and native local testing"
msgstr " `sam.native.yaml` - (可选)，用于Sam cli和原生本地测试"

#. type: Title ==
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:99
#, no-wrap
msgid "Create the function"
msgstr "创建函数"

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:104
msgid "The `target/manage.sh` script is for managing your Funqy function using the AWS Lambda Java runtime.  This script is provided only for your convenience. Examine the output of the `manage.sh` script if you want to learn what aws commands are executed to create, delete, and update your functions."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:106
msgid "`manage.sh` supports four operation: `create`, `delete`, `update`, and `invoke`."
msgstr "`manage.sh` 支持四种操作： `create`， `delete`， `update` 和 `invoke` 。"

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:110
msgid "To verify your setup, that you have the AWS CLI installed, executed aws configure for the AWS access keys, and set up the `LAMBDA_ROLE_ARN` environment variable (as described above), please execute `manage.sh` without any parameters.  A usage statement will be printed to guide you accordingly."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:112
msgid "To see the `usage` statement, and validate AWS configuration:"
msgstr "要查看  `用法`  声明，并验证AWS配置："

#. type: delimited block -
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:115
#, no-wrap
msgid "sh target/manage.sh\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:118
msgid "You can `create` your function using the following command:"
msgstr "你可以使用以下命令 `创建` 你的函数："

#. type: delimited block -
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:122
#, no-wrap
msgid "sh target/manage.sh create\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:125
msgid "or if you do not have `LAMBDA_ROLE_ARN` already defined in this shell:"
msgstr "或者如果在这个shell中没有定义 `LAMBDA_ROLE_ARN` ："

#. type: delimited block -
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:129
#, no-wrap
msgid "LAMBDA_ROLE_ARN=\"arn:aws:iam::1234567890:role/lambda-role\" sh target/manage.sh create\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:133
msgid "Do not change the handler switch.  This must be hardcoded to `io.quarkus.funqy.lambda.FunqyStreamHandler::handleRequest`.  This special handler is Funqy's integration point with AWS Lambda."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:136
msgid "If there are any problems creating the function, you must delete it with the `delete` function before re-running the `create` command."
msgstr "如果在创建函数时有任何问题，你必须在重新运行 `create` 命令之前使用 `delete` 函数来删除它。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:140
#, no-wrap
msgid "sh target/manage.sh delete\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:143
msgid "Commands may also be stacked:"
msgstr "命令也可以是叠加的："

#. type: delimited block -
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:146
#, no-wrap
msgid "sh target/manage.sh delete create\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:148
#, no-wrap
msgid "Invoke the function"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:151
msgid "Use the `invoke` command to invoke your function."
msgstr "使用 `invoke` 命令来调用你的函数。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:155
#, no-wrap
msgid "sh target/manage.sh invoke\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:159
msgid "The example function takes input passed in via the `--payload` switch which points to a json file in the root directory of the project."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:161
msgid "The function can also be invoked locally with the SAM CLI like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:165
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:275
#, no-wrap
msgid "sam local invoke --template target/sam.jvm.yaml --event payload.json\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:168
msgid "If you are working with your native image build, simply replace the template name with the native version:"
msgstr "如果你正在使用原生镜像构建，只需将模板名称替换为原生版本："

#. type: delimited block -
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:172
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:282
#, no-wrap
msgid "sam local invoke --template target/sam.native.yaml --event payload.json\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:174
#, no-wrap
msgid "Update the function"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:178
msgid "You can update the Java code as you see fit.  Once you've rebuilt, you can redeploy your function by executing the `update` command."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:182
#, no-wrap
msgid "sh target/manage.sh update\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:184
#, no-wrap
msgid "Deploy to AWS Lambda Custom (native) Runtime"
msgstr "部署到AWS Lambda Custom (native) Runtime"

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:188
msgid "If you want a lower memory footprint and faster initialization times for your Funqy function, you can compile your Java code to a native executable.  Just make sure to rebuild your project with the `-Pnative` switch."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:190
msgid "For Linux hosts execute:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:196
msgid "If you are building on a non-Linux system, you will need to also pass in a property instructing Quarkus to use a Docker build as Amazon Lambda requires Linux binaries.  You can do this by passing this property to your build: `-Dnative-image.docker-build=true`.  This requires you to have Docker installed locally, however."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:202
msgid "Either of these commands will compile and create a native executable.  It also generates a zip file `target/function.zip`.  This zip file contains your native executable image renamed to `bootstrap`.  This is a requirement of the AWS Lambda Custom (Provided) Runtime."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:205
msgid "The instructions here are exactly as above with one change: you'll need to add `native` as the first parameter to the `manage.sh` script:"
msgstr "这里的说明与上面的完全一样，但有一个变化：你需要将 `native` 作为第一个参数添加到 `manage.sh` 脚本中："

#. type: delimited block -
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:209
#, no-wrap
msgid "sh target/manage.sh native create\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:214
msgid "As above, commands can be stacked.  The only requirement is that `native` be the first parameter should you wish to work with native image builds.  The script will take care of the rest of the details necessary to manage your native image function deployments."
msgstr "如上所述，命令可以叠加。如果你想使用原生镜像构建，唯一的要求是 `native` 是第一个参数。该脚本将处理管理你原生镜像功能部署所需的其余细节。"

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:217
msgid "Examine the output of the `manage.sh` script if you want to learn what aws commands are executed to create, delete, and update your functions."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:220
msgid "One thing to note about the create command for native is that the `aws lambda create-function` call must set a specific environment variable:"
msgstr "对于原生的创建命令，需要注意的一点是， `aws lambda create-function` 调用必须设置一个特定的环境变量："

#. type: delimited block -
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:224
#, no-wrap
msgid "--environment 'Variables={DISABLE_SIGNAL_HANDLERS=true}'\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:226
#, no-wrap
msgid "Examine the POM"
msgstr "检查POM"

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:230
msgid "There is nothing special about the POM other than the inclusion of the `quarkus-funqy-amazon-lambda` extension as a dependency.  The extension automatically generates everything you might need for your lambda deployment."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:231
#, no-wrap
msgid "Integration Testing"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:236
msgid "Funqy Amazon Lambda support leverages the Quarkus AWS Lambda test framework so that you can unit tests your Funqy functions.  This is true for both JVM and native modes.  This test framework provides similar functionality to the SAM CLI, without the overhead of Docker."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:239
msgid "If you open up {quickstarts-tree-url}/funqy-quickstarts/funqy-amazon-lambda-quickstart/src/test/java/org/acme/funqy/FunqyTest.java[FunqyTest.java] you'll see that the test replicates the AWS execution environment."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:243
#, no-wrap
msgid "package org.acme.funqy;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:248
#, no-wrap
msgid ""
"import io.quarkus.amazon.lambda.test.LambdaClient;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.junit.jupiter.api.Assertions;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:258
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class FunqyTest {\n"
"    @Test\n"
"    public void testSimpleLambdaSuccess() throws Exception {\n"
"        Friend friend = new Friend(\"Bill\");\n"
"        Greeting out = LambdaClient.invoke(Greeting.class, friend);\n"
"        Assertions.assertEquals(\"Hello Bill\", out.getMessage());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:260
#, no-wrap
msgid "Testing with the SAM CLI"
msgstr "使用SAM CLI进行测试"

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:266
msgid "The https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI] allows you to run your functions locally on your laptop in a simulated Lambda environment.  This requires https://www.docker.com/products/docker-desktop[docker] to be installed.  This is an optional approach should you choose to take advantage of it.  Otherwise, the Quarkus JUnit integration should be sufficient for most of your needs."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:268
msgid "A starter template has been generated for both JVM and native execution modes."
msgstr "已经为JVM和原生执行模式生成了一个启动模板。"

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:271
msgid "Run the following SAM CLI command to locally test your function, passing the appropriate SAM `template`.  The `event` parameter takes any JSON file, in this case the sample `payload.json`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:278
msgid "The native image can also be locally tested using the `sam.native.yaml` template:"
msgstr "本地镜像也可以使用  `sam.native.yaml`  模板进行本地测试："

#. type: Title ==
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:284
#, no-wrap
msgid "Modifying `function.zip`"
msgstr "修改 `function.zip` "

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:289
msgid "There are times when you may have to add additional entries to the `function.zip` lambda deployment that is generated by the build.  To do this, create a `zip.jvm` or `zip.native` directory within `src/main`.  Create `zip.jvm/` if you are doing a pure Java.  `zip.native/` if you are doing a native deployment."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:291
msgid "Any you files and directories you create under your zip directory will be included within `function.zip`"
msgstr "你在zip目录下创建的任何文件和目录都将包括在 `function.zip` 内"

#. type: Title ==
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:292
#, no-wrap
msgid "Custom `bootstrap` script"
msgstr "自定义 `bootstrap` 脚本"

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:298
msgid "There are times you may want to set specific system properties or other arguments when lambda invokes your native Funqy deployment.  If you include a `bootstrap` script file within `zip.native`, the Funqy extension will automatically rename the executable to `runner` within `function.zip` and set the unix mode of the `bootstrap` script to executable."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:300
msgid "The native executable must be referenced as `runner` if you include a custom `bootstrap` script."
msgstr "如果你包含一个自定义的 `bootstrap` 脚本，那么本地可执行文件必须被引用为 `runner` 。"

#. type: Plain text
#: upstream/_versions/3.0/guides/funqy-amazon-lambda.adoc:301
msgid "The extension generates an example script within `target/bootstrap-example.sh`."
msgstr "扩展会在 `target/bootstrap-example.sh` 中生成了一个示例脚本。"
