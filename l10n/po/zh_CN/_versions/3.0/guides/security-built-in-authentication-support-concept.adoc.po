# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-01-20 14:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:7
#, no-wrap
msgid "Built-In Authentication Support"
msgstr "内置的认证支持"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:12
msgid "The following section describes the Quarkus built-in authentication mechanisms for HTTP based FORM, BASIC, and Mutual TLS authentication. Proactive authentication is also described."
msgstr ""

#.  include::security-enabling-basic-auth-howto.adoc[leveloffset=+2]
#.  How to I convert this how-to into a guide that appears alongside all the other guides?
#. type: Title ==
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:20
#, no-wrap
msgid "Form Based Authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:26
msgid "Quarkus provides form based authentication that works in a similar manner to traditional Servlet form based auth. Unlike traditional form authentication, the authenticated user is not stored in an HTTP session, as Quarkus does not provide clustered HTTP session support. Instead, the authentication information is stored in an encrypted cookie, which can be read by all members of the cluster (provided they all share the same encryption key)."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:32
msgid "The encryption key can be set using the `quarkus.http.auth.session.encryption-key` property, and it must be at least 16 characters long. This key is hashed using SHA-256 and the resulting digest is used as a key for AES-256 encryption of the cookie value. This cookie contains an expiry time as part of the encrypted value, so all nodes in the cluster must have their clocks synchronized. At one minute intervals a new cookie will be generated with an updated expiry time if the session is in use."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:34
msgid "Single Page Application (SPA) typically wants to avoid redirects, this can be done by removing default page paths:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:39
#, no-wrap
msgid ""
"# do not redirect, respond with HTTP 200 OK\n"
"quarkus.http.auth.form.landing-page=\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:43
#, no-wrap
msgid ""
"# do not redirect, respond with HTTP 401 Unauthorized\n"
"quarkus.http.auth.form.login-page=\n"
"quarkus.http.auth.form.error-page=\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:46
msgid "The following properties can be used to configure form based auth:"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:50
#, no-wrap
msgid "Mutual TLS Authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:53
msgid "Quarkus provides mTLS authentication so that you can authenticate users based on their X.509 certificates."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:55
msgid "To use this authentication method, you should first enable SSL for your application. For more details, check the xref:http-reference.adoc#ssl[Supporting secure connections with SSL] guide."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:59
msgid "Once your application is accepting secure connections, the next step is to configure a `quarkus.http.ssl.certificate.trust-store-file` holding all the certificates that your application should trust as well as how your application should ask for certificates when a client (e.g.: browser or another service) tries to access one of its protected resources."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:67
#, no-wrap
msgid ""
"quarkus.http.ssl.certificate.key-store-file=server-keystore.jks            <1>\n"
"quarkus.http.ssl.certificate.key-store-password=the_key_store_secret\n"
"quarkus.http.ssl.certificate.trust-store-file=server-truststore.jks        <2>\n"
"quarkus.http.ssl.certificate.trust-store-password=the_trust_store_secret\n"
"quarkus.http.ssl.client-auth=required                                      <3>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:70
#, no-wrap
msgid ""
"quarkus.http.auth.permission.default.paths=/*                              <4>\n"
"quarkus.http.auth.permission.default.policy=authenticated\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:72
msgid "Configures a key store where the server's private key is located."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:73
msgid "Configures a trust store from where the trusted certificates are going to be loaded from."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:76
msgid "Defines that the server should *always* ask certificates from clients. You can relax this behavior by using `REQUEST` so that the server should still accept requests without a certificate. Useful when you are also supporting authentication methods other than mTLS."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:77
msgid "Defines a policy where only authenticated users should have access to resources from your application."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:80
msgid "Once the incoming request matches a valid certificate in the truststore, your application should be able to obtain the subject by just injecting a `SecurityIdentity` as follows:"
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:82
#, no-wrap
msgid "Obtaining the subject"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:87
#, no-wrap
msgid ""
"@Inject\n"
"SecurityIdentity identity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:93
#, no-wrap
msgid ""
"@GET\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"public String hello() {\n"
"    return String.format(\"Hello, %s\", identity.getPrincipal().getName());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:96
msgid "You should also be able to get the certificate as follows:"
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:98
#, no-wrap
msgid "Obtaining the certificate"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:103
#, no-wrap
msgid ""
"import java.security.cert.X509Certificate;\n"
"import io.quarkus.security.credential.CertificateCredential;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:106
#, no-wrap
msgid ""
"CertificateCredential credential = identity.getCredential(CertificateCredential.class);\n"
"X509Certificate certificate = credential.getCertificate();\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:108
#, no-wrap
msgid "Authorization"
msgstr "授权"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:112
msgid "The information from the client certificate can be used to enhance Quarkus `SecurityIdentity`. For example, one can add new roles after checking a client certificate subject name, and so on.  Please see the xref:security-customization.adoc#security-identity-customization[SecurityIdentity Customization] section for more information about customizing Quarkus `SecurityIdentity`."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:114
#, no-wrap
msgid "Proactive Authentication"
msgstr "主动认证"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:118
msgid "By default, Quarkus does what we call proactive authentication. This means that if an incoming request has a credential then that request will always be authenticated (even if the target page does not require authentication)."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:121
msgid "This means that requests with an invalid credential will always be rejected, even for public pages. You can change this behavior and only authenticate when required by setting `quarkus.http.auth.proactive=false`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:125
msgid "If you disable proactive authentication then the authentication process will only be run when an identity is requested, either because there are security rules that requires the user to be authenticated, or due to programmatic access to the current identity."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:133
msgid "Note that if proactive authentication is in use accessing the `SecurityIdentity` is a blocking operation. This is because authentication may not have happened yet, and accessing it may require calls to external systems such as databases that may block. For blocking applications this is no problem, however if you have disabled authentication in a reactive application this will fail (as you cannot do blocking operations on the IO thread). To work around this you need to `@Inject` an instance of `io.quarkus.security.identity.CurrentIdentityAssociation`, and call the `Uni<SecurityIdentity> getDeferredIdentity();` method. You can then subscribe to the resulting `Uni` and will be notified when authentication is complete and the identity is available."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:138
msgid "It's still possible to access the `SecurityIdentity` synchronously with `public SecurityIdentity getIdentity()` in the xref:resteasy-reactive.adoc[RESTEasy Reactive] from endpoints annotated with `@RolesAllowed`, `@Authenticated`, or with respective configuration authorization checks as authentication has already happened. The same is also valid for the xref:reactive-routes.adoc[Reactive routes] if a route response is synchronous."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:142
msgid "xref:security-authorization.adoc#standard-security-annotations[Standard security annotations] on CDI beans are not supported on IO thread if a non-void secured method returns a value synchronously and proactive authentication is disabled, as they need to access the `SecurityIdentity`.  In the example below, we have defined `HelloResource` and `HelloService`. It's easy to see that any GET request to `/hello` will run on IO thread and throw `BlockingOperationNotAllowedException` exception.  There is more than one way to fix the example:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:144
msgid "switch to a worker thread (annotate `hello` endpoint with `@Blocking`)"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:145
msgid "change `sayHello` method return type (use reactive or asynchronous data type)"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:146
msgid "arguably the safest way is to move `@RolesAllowed` annotation to the endpoint, as accessing `SecurityIdentity` from endpoint methods is never the blocking operation"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:153
#, no-wrap
msgid ""
"import jakarta.annotation.security.PermitAll;\n"
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:155
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:159
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"@PermitAll\n"
"public class HelloResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:162
#, no-wrap
msgid ""
"    @Inject\n"
"    HelloService helloService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:167
#, no-wrap
msgid ""
"    @GET\n"
"    public Uni<String> hello() {\n"
"        return Uni.createFrom().item(helloService.sayHello());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:169
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:185
#, no-wrap
msgid "}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:175
#, no-wrap
msgid ""
"import jakarta.annotation.security.RolesAllowed;\n"
"import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:178
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class HelloService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:183
#, no-wrap
msgid ""
"    @RolesAllowed(\"admin\")\n"
"    public String sayHello() {\n"
"        return \"Hello\";\n"
"    }\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:188
#, no-wrap
msgid "How to customize authentication exception responses"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:191
msgid "You can use JAX-RS `ExceptionMapper` to capture Quarkus Security authentication exceptions such as `io.quarkus.security.AuthenticationFailedException`, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:195
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:227
#, no-wrap
msgid "package io.quarkus.it.keycloak;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:201
#, no-wrap
msgid ""
"import jakarta.annotation.Priority;\n"
"import jakarta.ws.rs.Priorities;\n"
"import jakarta.ws.rs.core.Response;\n"
"import jakarta.ws.rs.ext.ExceptionMapper;\n"
"import jakarta.ws.rs.ext.Provider;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:203
#, no-wrap
msgid "import io.quarkus.security.AuthenticationFailedException;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:207
#, no-wrap
msgid ""
"@Provider\n"
"@Priority(Priorities.AUTHENTICATION)\n"
"public class AuthenticationFailedExceptionMapper implements ExceptionMapper<AuthenticationFailedException> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:210
#, no-wrap
msgid ""
"    @Context\n"
"    UriInfo uriInfo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:216
#, no-wrap
msgid ""
"    @Override\n"
"    public Response toResponse(AuthenticationFailedException exception) {\n"
"        return Response.status(401).header(\"WWW-Authenticate\", \"Basic realm=\\\"Quarkus\\\"\").build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:223
msgid "Some HTTP authentication mechanisms need to handle authentication exceptions themselves in order to create a correct authentication challenge.  For example, `io.quarkus.oidc.runtime.CodeAuthenticationMechanism` which manages OpenId Connect authorization code flow authentication, needs to build a correct redirect URL, cookies, etc.  For that reason, using custom exception mappers to customize authentication exceptions thrown by such mechanisms is not recommended.  In such cases, a safer way to customize authentication exceptions is to make sure the proactive authentication is not disabled and use Vert.x HTTP route failure handlers, as events come to the handler with the correct response status and headers.  To that end, the only thing that needs to be done is to customize the response like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:230
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.enterprise.event.Observes;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:235
#, no-wrap
msgid ""
"import io.quarkus.security.AuthenticationFailedException;\n"
"import io.vertx.core.Handler;\n"
"import io.vertx.ext.web.Router;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:238
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class AuthenticationFailedExceptionHandler {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:252
#, no-wrap
msgid ""
"    public void init(@Observes Router router) {\n"
"        router.route().failureHandler(new Handler<RoutingContext>() {\n"
"            @Override\n"
"            public void handle(RoutingContext event) {\n"
"                if (event.failure() instanceof AuthenticationFailedException) {\n"
"                    event.response().end(\"CUSTOMIZED_RESPONSE\");\n"
"                } else {\n"
"                    event.next();\n"
"                }\n"
"            }\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:254
#, no-wrap
msgid "References"
msgstr "参考文献"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-built-in-authentication-support-concept.adoc:256
msgid "xref:security-overview-concept.adoc[Quarkus Security overview]"
msgstr ""
