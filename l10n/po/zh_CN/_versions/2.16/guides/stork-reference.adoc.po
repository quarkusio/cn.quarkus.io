# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-05-05 19:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy, no-wrap
msgid "Stork Reference Guide"
msgstr "鹳鸟参考指南"

#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy
msgid ""
"This guide is the companion from the xref:stork.adoc[Stork Getting Started Guide].\n"
"It explains the configuration and usage of SmallRye Stork integration in Quarkus."
msgstr "本指南是 xref:stork.adoc[Stork 入门指南] 的配套 xref:stork.adoc[指南] 。它解释了 Quarkus 中 SmallRye Stork 集成的配置和使用。"

#. type: Title ==
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy, no-wrap
msgid "Supported clients"
msgstr "支持的客户"

#. type: Plain text
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy
msgid "The current integration of Stork supports:"
msgstr "目前对Stork的整合支持。"

#. type: Plain text
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy
msgid "the Reactive REST Client"
msgstr "反应式REST客户端"

#. type: Plain text
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy
msgid "the gRPC clients"
msgstr "gRPC客户端"

#. type: Plain text
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy
msgid "Warning: The gRPC client integration does not support statistic-based load balancers."
msgstr "警告。gRPC客户端集成不支持基于统计学的负载均衡器。"

#. type: Title ==
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy, no-wrap
msgid "Available service discovery and selection"
msgstr "可用的服务发现和选择"

#. type: Plain text
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy
msgid "Check the https://smallrye.io/smallrye-stork[SmallRye Stork website] to find more about the provided service discovery and selection."
msgstr "查看 link:https://smallrye.io/smallrye-stork[SmallRye Stork网站] ，了解更多关于所提供的服务发现和选择。"

#. type: Title ==
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy, no-wrap
msgid "Using Stork in Kubernetes"
msgstr "在Kubernetes中使用Stork"

#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy
msgid ""
"Stork provides a service discovery support for Kubernetes, which goes beyond what Kubernetes provides by default.\n"
"It looks for all the pods backing up a Kubernetes service, but instead of applying a round-robin (as Kubernetes would do), it gives you the option to select the pod using a Stork load-balancer."
msgstr "Stork 为 Kubernetes 提供服务发现支持，这超出了 Kubernetes 默认提供的功能。它可以查找为 Kubernetes 服务提供支持的所有 pod，但不会像 Kubernetes 那样采用轮循方式，而是让你选择使用 Stork 负载平衡器的 pod。"

#. type: Plain text
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy
msgid "To use this feature, add the following dependency to your project:"
msgstr "要使用这个功能，请在你的项目中添加以下依赖关系。"

#. type: Block title
#: _versions/2.16/guides/stork-reference.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/2.16/guides/stork-reference.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Plain text
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy
msgid "For each service expected to be exposed as a Kubernetes Service, configure the lookup:"
msgstr "对于每个预计将作为Kubernetes服务暴露的服务，配置查找。"

#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy
msgid ""
"Stork looks for the Kubernetes Service with the given name (`my-service` in the previous example) in the specified namespace.\n"
"Instead of using the Kubernetes Service IP directly and let Kubernetes handle the selection and balancing, Stork inspects the service and retrieves the list of pods providing the service. Then, it can select the instance."
msgstr "Stork 在指定的命名空间中查找具有给定名称（上一示例中为 `my-service` ）的 Kubernetes 服务。Stork 不会直接使用 Kubernetes 服务 IP，让 Kubernetes 来处理选择和平衡，而是检查该服务并检索提供该服务的 pod 列表。然后，它就可以选择实例了。"

#. type: Plain text
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy
msgid "For a full example of using Stork with Kubernetes, please read the xref:stork-kubernetes.adoc[Using Stork with Kubernetes guide]."
msgstr "有关将 Stork 与 Kubernetes 结合使用的完整示例，请阅读《将 xref:stork-kubernetes.adoc[Stork 与 Kubernetes 结合使用] 》 xref:stork-kubernetes.adoc[指南] 。"

#. type: Title ==
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy, no-wrap
msgid "Implementing a custom service discovery"
msgstr "实施自定义服务发现"

#. type: Plain text
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy
msgid "Stork is extensible, and you can implement your own service discovery mechanism."
msgstr "Stork 是可扩展的，你可以实现自己的服务发现机制。"

#. type: Title ===
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy, no-wrap
msgid "Dependency"
msgstr "依赖性"

#. type: Plain text
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy
msgid "To implement your Service Discovery Provider, make sure your project depends on Core and Configuration Generator. The former brings classes necessary to implement custom discovery, the latter contains an annotation processor that generates classes needed by Stork."
msgstr "要实现服务发现提供程序，请确保您的项目依赖于 Core 和 Configuration Generator。前者提供了实现自定义发现所需的类，后者包含一个注解处理器，可生成 Stork 所需的类。"

#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy
msgid ""
"If the provider is located in an extension, the configuration generator should be declared in the\n"
"`annotationProcessorPaths` section of the runtime module using the default scope:"
msgstr "如果提供程序位于扩展程序中，则应使用默认作用域在运行模块的 `annotationProcessorPaths` 部分声明配置生成器："

#. type: Title ===
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy, no-wrap
msgid "Implementing a service discovery provider"
msgstr "实施服务发现提供程序"

#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy
msgid ""
"The custom provider is a factory that creates an `io.smallrye.stork.ServiceDiscovery` instance for each configured service using this service discovery provider.\n"
"A type, for example, `acme` identifies each provider.\n"
"This type is used in the configuration to reference the provider:"
msgstr "自定义提供程序是一个工厂，可为使用此服务发现提供程序的每个配置服务创建 `io.smallrye.stork.ServiceDiscovery` 实例。每个提供程序都有一个类型，例如 `acme` 。该类型在配置中用于引用提供程序："

#. type: Plain text
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy
msgid "The first step consists of implementing the `io.smallrye.stork.spi.ServiceDiscoveryProvider` interface:"
msgstr "第一步是实现 `io.smallrye.stork.spi.ServiceDiscoveryProvider` 接口："

#. type: Plain text
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy
msgid "This implementation is straightforward."
msgstr "这种实施方法简单明了。"

#. type: Plain text
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy
msgid "`@ServiceDiscoveryType` annotation defines the type of the service discovery provider. For each `ServiceDiscoveryProvider` annotated with this annotation, a configuration class will be generated. The name of the configuration class is constructed by appending `Configuration` to the name of the provider."
msgstr "`@ServiceDiscoveryType` 注解定义了服务发现提供程序的类型。对于每个使用此注解注释的 ，都将生成一个配置类。配置类的名称是通过在提供程序的名称后附加 而生成的。 `ServiceDiscoveryProvider` `Configuration` "

#. type: Plain text
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy
msgid "Use `@ServiceDiscoveryAttribute` to define configuration properties for services configured with this service discovery provider. Configuration properties are gathered from all properties of a form: `quarkus.stork.my-service.service-discovery.attr=value`."
msgstr "使用 `@ServiceDiscoveryAttribute` 为使用此服务发现提供程序配置的服务定义配置属性。配置属性是从以下表单的所有属性中收集的： `quarkus.stork.my-service.service-discovery.attr=value` 。"

#. type: Plain text
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy
msgid "The provider needs to implement `ServiceDiscoveryType` typed by the configuration class. This configuration class is generated automatically by the Configuration Generator. Its name is created by appending `Configuration` to the service discovery type, such as `AcmeConfiguration`."
msgstr "提供程序需要实现由配置类键入的 `ServiceDiscoveryType` 。该配置类由配置生成器自动生成。其名称通过在服务发现类型（如 `AcmeConfiguration` ）后附加 `Configuration` 来创建。"

#. type: Plain text
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy
msgid "`createServiceDiscovery` method is the factory method. It receives the configuration and access to the name of the service and available infrastructure."
msgstr "`createServiceDiscovery` 方法是工厂方法。它接收配置并访问服务名称和可用基础设施。"

#. type: Plain text
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy
msgid "Then, we need to implement the `ServiceDiscovery` interface:"
msgstr "然后，我们需要实现 `ServiceDiscovery` 接口："

#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy
msgid ""
"Again, this implementation is simplistic.\n"
"Typically, instead of creating a service instance with values from the configuration, you would connect to a service discovery backend, look for the service and build the list of service instances accordingly.\n"
"That's why the method returns a `Uni`.\n"
"Most of the time, the lookup is a remote operation."
msgstr "同样，这种实现方式也很简单。通常情况下，与其使用配置中的值创建服务实例，不如连接到服务发现后台，查找服务并建立相应的服务实例列表。这就是该方法返回 `Uni` 的原因。大多数情况下，查找是远程操作。"

#. type: Title ===
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy, no-wrap
msgid "Using your service discovery"
msgstr "使用服务发现"

#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy
msgid ""
"In the project using it, don't forget to add the dependency on the module providing your implementation.\n"
"Then, in the configuration, just add:"
msgstr "在使用它的项目中，不要忘记添加对提供实现的模块的依赖。然后，在配置中添加"

#. type: Plain text
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy
msgid "Then, Stork will use your implementation to locate the `my-service` service."
msgstr "然后，Stork 将使用您的实施来定位 `my-service` 服务。"

#. type: Title ==
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy, no-wrap
msgid "Implementing a custom service selection / load-balancer"
msgstr "实施自定义服务选择/负载平衡器"

#. type: Plain text
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy
msgid "Stork is extensible, and you can implement your own service selection (load-balancer) mechanism."
msgstr "Stork 是可扩展的，你可以实现自己的服务选择（负载平衡器）机制。"

#. type: Plain text
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy
msgid "To implement your Load Balancer Provider, make sure your project depends on Core and Configuration Generator. The former brings classes necessary to implement custom load balancer, the latter contains an annotation processor that generates classes needed by Stork."
msgstr "要实现负载平衡器提供程序，请确保您的项目依赖于 Core 和 Configuration Generator。前者提供了实现自定义负载平衡器所需的类，后者包含一个注解处理器，可生成 Stork 所需的类。"

#. type: delimited block =
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy
msgid "Similar to custom discovery providers, if the provider is located in an extension, the configuration generator should be declared in the `annotationProcessorPaths` section of the runtime module using the default scope."
msgstr "与自定义发现提供程序类似，如果提供程序位于扩展中，则应使用默认作用域在运行时模块的 `annotationProcessorPaths` 部分声明配置生成器。"

#. type: Title ===
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy, no-wrap
msgid "Implementing a load balancer provider"
msgstr "实施负载平衡器提供程序"

#. type: Plain text
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy
msgid "Load balancer implementation consists of three elements:"
msgstr "负载平衡器的实施包括三个要素："

#. type: Plain text
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy
msgid "`LoadBalancer` which is responsible for selecting service instances for a single Stork service"
msgstr "`LoadBalancer` 负责为单个 Stork 服务选择服务实例"

#. type: Plain text
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy
msgid "`LoadBalancerProvider` which creates instances of `LoadBalancer` for a given load balancer _type_"
msgstr "`LoadBalancerProvider` 它会为给定的负载平衡器 _类型_ 创建 实例 `LoadBalancer` "

#. type: Plain text
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy
msgid "`LoadBalancerProviderConfiguration` which is a configuration for the load balancer"
msgstr "`LoadBalancerProviderConfiguration` 这是负载平衡器的配置"

#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy
msgid ""
"A _type_, for example, `acme`, identifies each provider.\n"
"This _type_ is used in the configuration to reference the provider:"
msgstr "每个提供程序都有一个 _类型_ ，例如 `acme` 。该 _类型_ 在配置中用于引用提供程序："

#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy
msgid ""
"Similarly to `ServiceDiscoveryProvider`, a `LoadBalancerProvider` implementation needs to be annotated with `@LoadBalancerType` that defines the _type_.\n"
"Any configuration properties that the provider expects should be defined with `@LoadBalancerAttribute` annotations placed on the provider."
msgstr "与 `ServiceDiscoveryProvider` 类似， `LoadBalancerProvider` 的实现也需要用 `@LoadBalancerType` 进行注解，以定义 _类型_ 。提供程序所期望的任何配置属性都应通过 `@LoadBalancerAttribute` 注释来定义。"

#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy
msgid ""
"Note, that similarly to the `ServiceDiscoveryProvider`, the `LoadBalancerProvider` interface takes a configuration class as a parameter. This configuration class is generated automatically by the _Configuration Generator_.\n"
"Its name is created by appending `Configuration` to the name of the provider class."
msgstr "请注意，与 `ServiceDiscoveryProvider` 类似， `LoadBalancerProvider` 接口也将一个配置类作为参数。该配置类由 _配置生成器_ 自动 _生成_ 。其名称是通过在提供程序类名称后附加 `Configuration` 而生成的。"

#. type: Plain text
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy
msgid "The next step is to implement the `LoadBalancer` interface:"
msgstr "下一步是实现 `LoadBalancer` 接口："

#. type: Plain text
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy
msgid "Again, this implementation is simplistic and just picks a random instance from the received list."
msgstr "同样，这种实现方式比较简单，只是从接收到的列表中随机抽取一个实例。"

#. type: Title ===
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy, no-wrap
msgid "Using your load balancer"
msgstr "使用负载平衡器"

#. type: Plain text
#: _versions/2.16/guides/stork-reference.adoc
#, fuzzy
msgid "Then, Stork will use your implementation to select the `my-service` service instance."
msgstr "然后，Stork 将使用您的实现来选择 `my-service` 服务实例。"
