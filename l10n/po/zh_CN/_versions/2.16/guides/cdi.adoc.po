# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-05-05 19:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "Introduction to Contexts and Dependency Injection"
msgstr "上下文和依赖注入简介"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "In this guide we're going to describe the basic principles of the Quarkus programming model that is based on the https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification."
msgstr "在本指南中，我们将介绍基于 link:https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html[Java 2.0 上下文和依赖注入] 规范 link:https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html[的] Quarkus 编程模型的基本原理。"

#. type: Title ==
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "OK. Let's start simple. What is a bean?"
msgstr "好的。让我们从简单的开始。什么是豆子？"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "Well, a bean is a _container-managed_ object that supports a set of basic services, such as injection of dependencies, lifecycle callbacks and interceptors."
msgstr "好吧，Bean是一个 _容器管理_ 的对象，它支持一系列的基本服务，如依赖关系的注入、生命周期的回调和拦截器。"

#. type: Title ==
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "Wait a minute. What does \"container-managed\" mean?"
msgstr "等一下。容器管理 \"是什么意思？"

#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid ""
"Simply put, you don't control the lifecycle of the object instance directly.\n"
"Instead, you can affect the lifecycle through declarative means, such as annotations, configuration, etc.\n"
"The container is the _environment_ where your application runs.\n"
"It creates and destroys the instances of beans, associates the instances with a designated context, and injects them into other beans."
msgstr "简而言之，您不能直接控制对象实例的生命周期。相反，您可以通过注解、配置等声明性手段来影响生命周期。容器是应用程序运行的 _环境_ 。它创建和销毁 Bean 实例，将实例与指定的上下文关联起来，并将它们注入到其他 Bean 中。"

#. type: Title ==
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "What is it good for?"
msgstr "它有什么好处？"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "An application developer can focus on the business logic rather than finding out \"where and how\" to obtain a fully initialized component with all of its dependencies."
msgstr "应用程序开发人员可以专注于业务逻辑，而不是找出 \"在哪里以及如何 \"获得一个完全初始化的组件及其所有的依赖关系。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "You've probably heard of the _inversion of control_ (IoC) programming principle. Dependency injection is one of the implementation techniques of IoC."
msgstr "你可能听说过 _控制反转_ （IoC）的编程原则。依赖性注入是IoC的实现技术之一。"

#. type: Title ==
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "What does a bean look like?"
msgstr "豆子是什么样子的？"

#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid ""
"There are several kinds of beans.\n"
"The most common ones are class-based beans:"
msgstr "豆有好几种。最常见的是基于类的 bean："

#. type: Block title
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "Simple Bean Example"
msgstr "简单的豆类例子"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "This is a scope annotation. It tells the container which context to associate the bean instance with. In this particular case, a *single bean instance* is created for the application and used by all other beans that inject `Translator`."
msgstr "这是一个范围注解。它告诉容器要把 bean 实例与哪个上下文联系起来。在这种特殊情况下，为应用程序创建了一个 *Bean实例* ，并被所有其他注入 `Translator` 的Bean使用。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "This is a field injection point. It tells the container that `Translator` depends on the `Dictionary` bean. If there is no matching bean the build fails."
msgstr "这是一个字段注入点。它告诉容器， `Translator` 依赖于 `Dictionary` Bean。如果没有匹配的Bean，则构建失败。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "This is an interceptor binding annotation. In this case, the annotation comes from the MicroProfile Metrics. The relevant interceptor intercepts the invocation and updates the relevant metrics. We will talk about <<interceptors,interceptors>> later."
msgstr "这是一个拦截器绑定注解。在本例中，注释来自 MicroProfile Metrics。相关拦截器会拦截调用并更新相关指标。稍后我们将讨论 xref:interceptors[拦截器] 。"

#. type: Title ==
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "Nice. How does the dependency resolution work? I see no names or identifiers."
msgstr "不错。依赖关系的解决是如何进行的？我没有看到名称或标识符。"

#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid ""
"That's a good question.\n"
"In CDI the process of matching a bean to an injection point is *type-safe*.\n"
"Each bean declares a set of bean types.\n"
"In our example above, the `Translator` bean has two bean types: `Translator` and `java.lang.Object`.\n"
"Subsequently, a bean is assignable to an injection point if the bean has a bean type that matches the _required type_ and has all the _required qualifiers_.\n"
"We'll talk about qualifiers later.\n"
"For now, it's enough to know that the bean above is assignable to an injection point of type `Translator` and `java.lang.Object`."
msgstr "这个问题问得好。在 CDI 中，将 Bean 与注入点匹配的过程是 *类型安全的* 。每个 Bean 都声明了一组 Bean 类型。在我们上面的示例中， `Translator` Bean 有两个 Bean 类型： `Translator` 和 `java.lang.Object` 。随后，如果一个 Bean 的 Bean 类型与 _所需类型_ 相匹配，并且具有所有必需的 _限定符_ ，那么该 Bean 就可以分配给注入点。我们稍后将讨论限定符。现在，我们只需知道上述 Bean 可分配给类型为 `Translator` 和 `java.lang.Object` 的注入点即可。"

#. type: Title ==
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "Hm, wait a minute. What happens if multiple beans declare the same type?"
msgstr "嗯，等一下。如果多个豆子声明相同的类型会发生什么？"

#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid ""
"There is a simple rule: *exactly one bean must be assignable to an injection point, otherwise the build fails*.\n"
"If none is assignable the build fails with `UnsatisfiedResolutionException`.\n"
"If multiple are assignable the build fails with `AmbiguousResolutionException`.\n"
"This is very useful because your application fails fast whenever the container is not able to find an unambiguous dependency for any injection point."
msgstr "有一条简单的规则： *必须正好有一个 Bean 可分配给注入点，否则构建失败* 。如果没有一个 Bean 可分配，则构建失败，显示 `UnsatisfiedResolutionException` 。如果有多个 Bean 可分配，则构建失败，显示 `AmbiguousResolutionException` 。这一点非常有用，因为只要容器无法为任何注入点找到明确的依赖关系，应用程序就会快速失败。"

#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "Your can use programmatic lookup via  `javax.enterprise.inject.Instance` to resolve ambiguities at runtime and even iterate over all beans implementing a given type:"
msgstr "您可以通过 `javax.enterprise.inject.Instance` 使用编程查找功能，在运行时解决模糊问题，甚至可以遍历所有实现给定类型的豆子："

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "This injection point will not result in an ambiguous dependency even if there are multiple beans that implement the `Dictionary` type."
msgstr "即使有多个Bean实现了 `Dictionary` 类型，这个注入点也不会导致模糊的依赖关系。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "`javax.enterprise.inject.Instance` extends `Iterable`."
msgstr "`javax.enterprise.inject.Instance` 扩展 。 `Iterable`"

#. type: Title ==
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "Can I use setter and constructor injection?"
msgstr "我可以使用设置器和构造器注入吗？"

#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid ""
"Yes, you can.\n"
"In fact, in CDI the \"setter injection\" is superseded by more powerful https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#initializer_methods[initializer methods, window=\"_blank\"].\n"
"Initializers may accept multiple parameters and don't have to follow the JavaBean naming conventions."
msgstr "可以。事实上，在 CDI 中，\"setter 注入 \"被功能更强大的 link:https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#initializer_methods[初始化器方法] 所取代。初始化器可以接受多个参数，而且不必遵循 JavaBean 的命名约定。"

#. type: Block title
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "Initialized and Constructor Injection Example"
msgstr "初始化和构造函数注入实例"

#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid ""
"This is a constructor injection.\n"
"In fact, this code would not work in regular CDI implementations where a bean with a normal scope must always declare a no-args constructor and the bean constructor must be annotated with `@Inject`.\n"
"However, in Quarkus we detect the absence of no-args constructor and \"add\" it directly in the bytecode.\n"
"It's also not necessary to add `@Inject` if there is only one constructor present."
msgstr "这就是构造函数注入。事实上，这段代码在常规的 CDI 实现中是行不通的，因为在常规的 CDI 实现中，具有正常作用域的 Bean 必须始终声明一个无参数构造函数，而且 Bean 的构造函数必须用 `@Inject` 进行注解。但是，在 Quarkus 中，我们会检测无参数构造函数的缺失，并直接在字节码中 \"添加 \"它。如果只有一个构造函数，也无需添加 `@Inject` 。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "An initializer method must be annotated with `@Inject`."
msgstr "一个初始化方法必须用 `@Inject` 。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "An initializer may accept multiple parameters - each one is an injection point."
msgstr "一个初始化器可以接受多个参数--每个参数都是一个注入点。"

#. type: Title ==
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "You talked about some qualifiers?"
msgstr "你谈到了一些限定词？"

#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid ""
"https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#qualifiers[Qualifiers, window=\"_blank\"] are annotations that help the container to distinguish beans that implement the same type.\n"
"As we already said a bean is assignable to an injection point if it has all the required qualifiers.\n"
"If you declare no qualifier at an injection point the `@Default` qualifier is assumed."
msgstr "link:https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#qualifiers[限定符] 是帮助容器区分实现相同类型的 Bean 的注解。我们已经说过，如果一个 Bean 具有所有必需的限定符，那么它就可以分配给注入点。如果您没有在注入点声明限定符， `@Default` 限定符将被假定。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "A qualifier type is a Java annotation defined as `@Retention(RUNTIME)` and annotated with the `@javax.inject.Qualifier` meta-annotation:"
msgstr "限定符类型是一种 Java 注释，定义为 `@Retention(RUNTIME)` ，并使用 `@javax.inject.Qualifier` 元注解："

#. type: Block title
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "Qualifier Example"
msgstr "限定词示例"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "The qualifiers of a bean are declared by annotating the bean class or producer method or field with the qualifier types:"
msgstr "一个Bean的限定词是通过用限定词类型注释Bean类或生产者方法或字段来声明的。"

#. type: Block title
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "Bean With Custom Qualifier Example"
msgstr "带有自定义限定词的豆子示例"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "`@Superior` is a https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#defining_qualifier_types[qualifier annotation, window=\"_blank\"]."
msgstr "`@Superior` 是一个 link:https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#defining_qualifier_types[限定符注释] 。"

#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid ""
"This bean would be assignable to `@Inject @Superior Translator` and `@Inject @Superior SuperiorTranslator` but not to `@Inject Translator`.\n"
"The reason is that `@Inject Translator` is automatically transformed to `@Inject @Default Translator` during typesafe resolution.\n"
"And since our `SuperiorTranslator` does not declare `@Default` only the original `Translator` bean is assignable."
msgstr "这个 Bean 可以分配给 `@Inject @Superior Translator` 和 `@Inject @Superior SuperiorTranslator` ，但不能分配给 `@Inject Translator` 。原因是 `@Inject Translator` 在类型安全解析过程中会自动转换为 `@Inject @Default Translator` 。而由于我们的 `SuperiorTranslator` 没有声明 `@Default` ，因此只有原始的 `Translator` Bean 是可分配的。"

#. type: Title ==
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "[[looks-good-what-is-the-bean-scope]] Looks good. What is the bean scope?"
msgstr " 看起来不错。豆子的范围是多少？"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "The scope of a bean determines the lifecycle of its instances, i.e. when and where an instance should be created and destroyed."
msgstr "Bean的作用域决定了其实例的生命周期，也就是说，何时何地应该创建和销毁一个实例。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "Every bean has exactly one scope."
msgstr "每个豆子正好有一个范围。"

#. type: Title ==
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "[[what-scopes-can-i-actually-use-in-my-quarkus-application]] What scopes can I actually use in my Quarkus application?"
msgstr " 我在 Quarkus 应用程序中究竟可以使用哪些作用域？"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "You can use all the built-in scopes mentioned by the specification except for `javax.enterprise.context.ConversationScoped`."
msgstr "您可以使用规范中提到的所有内置作用域，但 `javax.enterprise.context.ConversationScoped` 除外。"

#. type: Table
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "Annotation"
msgstr "注释"

#: _versions/2.16/guides/cdi.adoc
msgid "Description"
msgstr "描述"

#. type: Table
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "`@javax.enterprise.context.ApplicationScoped`"
msgstr "`@javax.enterprise.context.ApplicationScoped`"

#. type: Table
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "A single bean instance is used for the application and shared among all injection points. The instance is created lazily, i.e. once a method is invoked upon the <<client_proxies, client proxy>>."
msgstr "应用程序使用单个 bean 实例，所有注入点共享该实例。该实例是懒散地创建的，也就是说，一旦 xref:client_proxies[客户端代理] 调用了一个方法，就会创建该实例。"

#. type: Table
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "`@javax.inject.Singleton`"
msgstr "`@javax.inject.Singleton`"

#. type: Table
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "Just like `@ApplicationScoped` except that no client proxy is used. The instance is created when an injection point that resolves to a @Singleton bean is being injected."
msgstr "就像 `@ApplicationScoped` ，只是没有使用客户端代理。当解析到@Singleton Bean的注入点被注入时，该实例被创建。"

#. type: Table
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "`@javax.enterprise.context.RequestScoped`"
msgstr "`@javax.enterprise.context.RequestScoped`"

#. type: Table
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "The bean instance is associated with the current _request_ (usually an HTTP request)."
msgstr "该bean实例与当前 _请求_ （通常是HTTP请求）相关联。"

#. type: Table
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "`@javax.enterprise.context.Dependent`"
msgstr "`@javax.enterprise.context.Dependent`"

#. type: Table
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "This is a pseudo-scope. The instances are not shared and every injection point spawns a new instance of the dependent bean. The lifecycle of dependent bean is bound to the bean injecting it - it will be created and destroyed along with the bean injecting it."
msgstr "这是个伪范围。实例是不共享的，每个注入点都会产生一个新的依赖Bean的实例。从属Bean的生命周期与注入它的Bean相联系--它将与注入它的Bean一起被创建和销毁。"

#. type: Table
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "`@javax.enterprise.context.SessionScoped`"
msgstr "`@javax.enterprise.context.SessionScoped`"

#. type: Table
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "This scope is backed by a `javax.servlet.http.HttpSession` object. It's only available if the `quarkus-undertow` extension is used."
msgstr "该作用域由 `javax.servlet.http.HttpSession` 对象支持。只有在使用 `quarkus-undertow` 扩展时才可用。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "There can be other custom scopes provided by Quarkus extensions. For example, xref:transaction.adoc[`quarkus-narayana-jta`] provides xref:transaction.adoc#transaction-scope[`javax.transaction.TransactionScoped`]."
msgstr "Quarkus 扩展还可以提供其他自定义作用域。例如 xref:transaction.adoc[quarkus-narayana-jta] 提供 xref:transaction.adoc#transaction-scope[javax.transaction.TransactionScoped] ."

#. type: Title ==
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "`@ApplicationScoped` and `@Singleton` look very similar. Which one should I choose for my Quarkus application?"
msgstr " `@ApplicationScoped` 和 看起来非常相似。我应该为我的Quarkus应用程序选择哪一个？ `@Singleton` "

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "It depends ;-)."
msgstr "这取决于;-)。"

#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid ""
"A `@Singleton` bean has no <<client_proxies,client proxy>> and hence an instance is _created eagerly_ when the bean is injected. By contrast, an instance of an `@ApplicationScoped` bean is _created lazily_, i.e.\n"
"when a method is invoked upon an injected instance for the first time."
msgstr "`@Singleton` Bean 没有 xref:client_proxies[客户代理] ，因此在注入 Bean 时会 _急切地创建_ 实例。相比之下， `@ApplicationScoped` Bean 的实例是 _懒散地创建_ 的，即当首次对注入的实例调用方法时。"

#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid ""
"Furthermore, client proxies only delegate method invocations and thus you should never read/write fields of an injected `@ApplicationScoped` bean directly.\n"
"You can read/write fields of an injected `@Singleton` safely."
msgstr "此外，客户端代理只能委托方法调用，因此您绝不能直接读/写注入的 `@ApplicationScoped` Bean 的字段。您可以安全地读取/写入注入的 `@Singleton` 的字段。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "`@Singleton` should have a slightly better performance because the is no indirection (no proxy that delegates to the current instance from the context)."
msgstr "`@Singleton` 的性能应该会稍好一些，因为它没有间接性（没有从上下文委托给当前实例的代理）。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "On the other hand, you cannot mock `@Singleton` beans using <<getting-started-testing.adoc#quarkus_mock,QuarkusMock>>."
msgstr "另一方面，使用 xref:getting-started-testing.adoc#quarkus_mock[QuarkusMock] 无法模拟 `@Singleton` Bean。"

#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid ""
"`@ApplicationScoped` beans can be also destroyed and recreated at runtime.\n"
"Existing injection points just work because the injected proxy delegates to the current instance."
msgstr "`@ApplicationScoped` 豆也可以在运行时销毁和重新创建。现有的注入点可以正常工作，因为注入的代理委托给了当前实例。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "Therefore, we recommend to stick with `@ApplicationScoped` by default unless there's a good reason to use `@Singleton`."
msgstr "因此，我们建议默认使用 `@ApplicationScoped` ，除非有充分的理由使用 `@Singleton` 。"

#. type: Title ==
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "I don't understand the concept of client proxies."
msgstr "我不明白客户代理的概念。"

#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid ""
"Indeed, the https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#client_proxies[client proxies, window=\"_blank\"] could be hard to grasp, but they provide some useful functionality.\n"
"A client proxy is basically an object that delegates all method invocations to a target bean instance.\n"
"It's a container construct that implements `io.quarkus.arc.ClientProxy` and extends the bean class."
msgstr "事实上， link:https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#client_proxies[客户代理] 可能很难掌握，但它们提供了一些有用的功能。客户端代理基本上是一个将所有方法调用委托给目标 Bean 实例的对象。它是一种容器构造，实现了 `io.quarkus.arc.ClientProxy` 并扩展了 bean 类。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "Client proxies only delegate method invocations. So never read or write a field of a normal scoped bean, otherwise you will work with non-contextual or stale data."
msgstr "客户端代理只委托方法调用。因此，永远不要读或写一个正常范围的Bean的字段，否则你将与非上下文或陈旧的数据一起工作。"

#. type: Block title
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "Generated Client Proxy Example"
msgstr "生成的客户代理实例"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "The `Translator_ClientProxy` instance is always injected instead of a direct reference to a https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#contextual_instance[contextual instance, window=\"_blank\"] of the `Translator` bean."
msgstr "`Translator_ClientProxy` 实例总是被注入，而不是直接引用 `Translator` Bean 的 link:https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#contextual_instance[上下文实例] 。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "Client proxies allow for:"
msgstr "客户端代理允许。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "Lazy instantiation - the instance is created once a method is invoked upon the proxy."
msgstr "懒惰的实例化 - 一旦在代理上调用一个方法，就会创建实例。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "Ability to inject a bean with \"narrower\" scope to a bean with \"wider\" scope; i.e. you can inject a `@RequestScoped` bean into an `@ApplicationScoped` bean."
msgstr "能够将具有 \"较窄 \"范围的Bean注入具有 \"较宽 \"范围的Bean；即你可以将一个 `@RequestScoped` Bean注入一个 `@ApplicationScoped` Bean。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "Circular dependencies in the dependency graph. Having circular dependencies is often an indication that a redesign should be considered, but sometimes it's inevitable."
msgstr "依赖关系图中的循环依赖关系。有循环的依赖关系往往表明应该考虑重新设计，但有时它是不可避免的。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "In rare cases it's practical to destroy the beans manually. A direct injected reference would lead to a stale bean instance."
msgstr "在少数情况下，手动销毁Bean是很实用的。一个直接注入的引用会导致一个陈旧的Bean实例。"

#. type: Title ==
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "OK. You said that there are several kinds of beans?"
msgstr "好的。你说有几种豆子？"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "Yes. In general, we distinguish:"
msgstr "是的，一般来说，我们会加以区分。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "Class beans"
msgstr "班级豆子"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "Producer methods"
msgstr "生产者方法"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "Producer fields"
msgstr "生产者领域"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "Synthetic beans"
msgstr "合成豆"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "Synthetic beans are usually provided by extensions. Therefore, we are not going to cover them in this guide."
msgstr "合成豆通常由扩展提供。因此，我们不打算在本指南中介绍它们。"

#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid ""
"Producer methods and fields are useful if you need additional control over instantiation of a bean.\n"
"They are also useful when integrating third-party libraries where you don't control the class source and may not add additional annotations etc."
msgstr "如果需要对 bean 的实例化进行额外控制，生产者方法和字段就非常有用。在集成第三方库时，它们也很有用，因为在这种情况下，您无法控制类的源代码，也可能无法添加额外的注释等。"

#. type: Block title
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "Producers Example"
msgstr "生产者实例"

#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid ""
"The container analyses the field annotations to build a bean metadata.\n"
"The _type_ is used to build the set of bean types.\n"
"In this case, it will be `double` and `java.lang.Object`.\n"
"No scope annotation is declared and so it's defaulted to `@Dependent`."
msgstr "容器通过分析字段注解来构建 Bean 元数据。 _类型_ 用于构建 Bean _类型_ 集。在本例中，它将是 `double` 和 `java.lang.Object` 。没有声明作用域注解，因此默认为 `@Dependent` 。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "The container will read this field when creating the bean instance."
msgstr "容器将在创建Bean实例时读取这个字段。"

#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid ""
"The container analyses the method annotations to build a bean metadata.\n"
"The _return type_ is used to build the set of bean types.\n"
"In this case, it will be `List<String>`, `Collection<String>`, `Iterable<String>` and `java.lang.Object`.\n"
"No scope annotation is declared and so it's defaulted to `@Dependent`."
msgstr "容器通过分析方法注解来构建 Bean 元数据。 _返回类型_ 用于构建 Bean 类型集。在本例中，它将是 `List<String>` 、 `Collection<String>` 、 `Iterable<String>` 和 `java.lang.Object` 。没有声明作用域注解，因此默认为 `@Dependent` 。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "The container will call this method when creating the bean instance."
msgstr "容器将在创建Bean实例时调用这个方法。"

#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid ""
"There's more about producers.\n"
"You can declare qualifiers, inject dependencies into the producer methods parameters, etc.\n"
"You can read more about producers for example in the https://docs.jboss.org/weld/reference/latest/en-US/html/producermethods.html[Weld docs, window=\"_blank\"]."
msgstr "关于生产者还有更多。你可以在生产者方法参数中声明限定符、注入依赖关系等。有关生产者的更多信息，请参阅 link:https://docs.jboss.org/weld/reference/latest/en-US/html/producermethods.html[Weld 文档] 。"

#. type: Title ==
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "OK, injection looks cool. What other services are provided?"
msgstr "好的，注射看起来很酷。还提供什么其他服务？"

#. type: Title ===
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "Lifecycle Callbacks"
msgstr "生命周期回调"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "A bean class may declare lifecycle `@PostConstruct` and `@PreDestroy` callbacks:"
msgstr "一个bean类可以声明生命周期 `@PostConstruct` 和 `@PreDestroy` 回调。"

#. type: Block title
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "Lifecycle Callbacks Example"
msgstr "生命周期回调实例"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "This callback is invoked before the bean instance is put into service. It is safe to perform some initialization here."
msgstr "这个回调在Bean实例投入服务之前被调用。在这里执行一些初始化是安全的。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "This callback is invoked before the bean instance is destroyed. It is safe to perform some cleanup tasks here."
msgstr "这个回调在Bean实例被销毁之前被调用。在这里执行一些清理任务是安全的。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "It's a good practice to keep the logic in the callbacks \"without side effects\", i.e. you should avoid calling other beans inside the callbacks."
msgstr "保持回调中的逻辑 \"无副作用 \"是一个很好的做法，也就是说，你应该避免在回调中调用其他豆类。"

#. type: Title ===
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "Interceptors"
msgstr "拦截器"

#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid ""
"Interceptors are used to separate cross-cutting concerns from business logic.\n"
"There is a separate specification - Java Interceptors - that defines the basic programming model and semantics."
msgstr "拦截器用于将横向关注点与业务逻辑分开。有一个单独的规范--Java 拦截器--定义了基本的编程模型和语义。"

#. type: Block title
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "Simple Interceptor Binding Example"
msgstr "简单的拦截器实例"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "This is an interceptor binding annotation. See the following examples for how it's used."
msgstr "这是一个拦截器绑定注解。关于它的使用方法，请看下面的例子。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "An interceptor binding annotation is always put on the interceptor type, and may be put on target types or methods."
msgstr "这是一个拦截器绑定注解，用来将我们的拦截器绑定到Bean上。只需用 `@Logged` .NET来注解一个bean类。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "Interceptor bindings are often `@Inherited`, but don't have to be."
msgstr "拦截器绑定通常是 `@Inherited` ，但不一定是这样。"

#. type: Block title
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "Simple Interceptor Example"
msgstr "简单的拦截器实例"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "The interceptor binding annotation is used to bind our interceptor to a bean. Simply annotate a bean class with `@Logged`, as in the following example."
msgstr "这是一个拦截器绑定注解，用来将我们的拦截器绑定到Bean上。只需用 `@Logged` .NET来注解一个bean类。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "`Priority` enables the interceptor and affects the interceptor ordering. Interceptors with smaller priority values are called first."
msgstr " `Priority` 启用拦截器并影响拦截器的排序。优先级值较小的拦截器会被首先调用。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "Marks an interceptor component."
msgstr "标记一个拦截器组件。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "An interceptor may inject dependencies."
msgstr "拦截器实例可以成为依赖性注入的目标。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "`AroundInvoke` denotes a method that interposes on business methods."
msgstr " `AroundInvoke` 表示穿插在业务方法上的一种方法。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "Proceed to the next interceptor in the interceptor chain or invoke the intercepted business method."
msgstr "进入拦截器链中的下一个拦截器或调用被拦截的业务方法。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "Instances of interceptors are dependent objects of the bean instance they intercept, i.e. a new interceptor instance is created for each intercepted bean."
msgstr "拦截器的实例是它们所拦截的Bean实例的依赖对象，也就是说，为每个被拦截的Bean创建一个新的拦截器实例。"

#. type: Block title
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "Simple Example of Interceptor Usage"
msgstr "简单的拦截器实例"

#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid ""
"The interceptor binding annotation is put on a bean class so that all business methods are intercepted.\n"
"The annotation can also be put on individual methods, in which case, only the annotated methods are intercepted."
msgstr "拦截器绑定注解放在 bean 类上，这样所有业务方法都会被拦截。也可以在单个方法上加注解，在这种情况下，只有加注解的方法才会被拦截。"

#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid ""
"Remember that the `@Logged` annotation is `@Inherited`.\n"
"If there's a bean class that inherits from `MyService`, the `LoggingInterceptor` will also apply to it."
msgstr "请记住， `@Logged` 注解是 `@Inherited` 。如果有一个 Bean 类继承自 `MyService` ，那么 `LoggingInterceptor` 也将适用于它。"

#. type: Title ===
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "Decorators"
msgstr "装饰公司"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "Decorators are similar to interceptors, but because they implement interfaces with business semantics, they are able to implement business logic."
msgstr "装饰器类似于拦截器，但由于它们实现了具有业务语义的接口，所以能够实现业务逻辑。"

#. type: Block title
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "Simple Decorator Example"
msgstr "简单的装饰器实例"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "`@Priority` enables the decorator. Decorators with smaller priority values are called first."
msgstr " `@Priority` 启用该装饰器。具有较小优先级值的装饰器会被首先调用。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "`@Decorator` marks a decorator component."
msgstr " `@Decorator` 标志着一个装饰器组件。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "The set of decorated types includes all bean types which are Java interfaces, except for `java.io.Serializable`."
msgstr "装饰类型的集合包括所有属于Java接口的bean类型，除了 `java.io.Serializable` 。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "Each decorator must declare exactly one _delegate injection point_. The decorator applies to beans that are assignable to this delegate injection point."
msgstr "每个装饰器必须准确地声明一个 _委托注入点_ 。该装饰器适用于可分配给该委托注入点的Bean。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "Decorators can inject other beans."
msgstr "装饰者可以注入其他豆子。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "The decorator may invoke any method of the delegate object. And the container invokes either the next decorator in the chain or the business method of the intercepted instance."
msgstr "装饰器可以调用委托对象的任何方法。而容器则调用链中的下一个装饰器或被拦截实例的业务方法。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "Instances of decorators are dependent objects of the bean instance they intercept, i.e. a new decorator instance is created for each intercepted bean."
msgstr "装饰器的实例是它们所拦截的Bean实例的依赖对象，也就是说，为每个被拦截的Bean创建一个新的装饰器实例。"

#. type: Title ===
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "Events and Observers"
msgstr "活动和观察者"

#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid ""
"Beans may also produce and consume events to interact in a completely decoupled fashion.\n"
"Any Java object can serve as an event payload.\n"
"The optional qualifiers act as topic selectors."
msgstr "Bean 还可以产生和消耗事件，以完全解耦的方式进行交互。任何 Java 对象都可以作为事件有效载荷。可选限定符可用作主题选择器。"

#. type: Block title
#: _versions/2.16/guides/cdi.adoc
#, fuzzy, no-wrap
msgid "Simple Event Example"
msgstr "简单事件实例"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "`javax.enterprise.event.Event` is used to fire events."
msgstr "`javax.enterprise.event.Event` 用于触发事件。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "Fire the event synchronously."
msgstr "同步启动该事件。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "This method is notified when a `TaskCompleted` event is fired."
msgstr "当一个 `TaskCompleted` 事件被触发时，这个方法被通知。"

#. type: Plain text
#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid "For more info about events/observers visit https://docs.jboss.org/weld/reference/latest/en-US/html/events.html[Weld docs, window=\"_blank\"]."
msgstr "关于事件/观察者的更多信息，请访问 link:https://docs.jboss.org/weld/reference/latest/en-US/html/events.html[Weld docs, target=\"_blank\"] 。"

#. type: Title ==
#: _versions/2.16/guides/cdi.adoc
#, no-wrap
msgid "Conclusion"
msgstr "解决方案"

#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid ""
"In this guide, we've covered some basic topics of the Quarkus programming model that is based on the https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.\n"
"However, a full CDI implementation is not used under the hood.\n"
"Quarkus only implements a subset of the CDI features - see also <<cdi-reference.adoc#supported_features,the list of supported features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.\n"
"On the other hand, there are quite a few <<cdi-reference#nonstandard_features,non-standard features>> and <<cdi-reference.adoc#build_time_apis,Quarkus-specific APIs>>.\n"
"We believe that our efforts will drive the innovation of the CDI specification towards the build-time oriented developer stacks in the future."
msgstr "在本指南中，我们介绍了基于 link:https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html[Java 2.0 上下文和依赖注入] 规范 link:https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html[的] Quarkus 编程模型的一些基本内容。不过，Quarkus 并没有完全实现 CDI。Quarkus 只实现了 CDI 功能的一个子集--另请参阅 xref:cdi-reference.adoc#supported_features[支持] 的功能 xref:cdi-reference.adoc#supported_features[列表] 和 xref:cdi-reference.adoc#limitations[限制列表] 。另一方面，还有许多 xref:cdi-reference.adoc#nonstandard_features[非标准功能] 和 xref:cdi-reference.adoc#build_time_apis[Quarkus 特有的应用程序接口] 。我们相信，我们的努力将推动 CDI 规范在未来面向构建时间的开发人员堆栈的创新。"

#: _versions/2.16/guides/cdi.adoc
#, fuzzy
msgid ""
"If you wish to learn more about Quarkus-specific features and limitations there is a Quarkus xref:cdi-reference.adoc[CDI Reference Guide].\n"
"We also recommend you to read the https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html[CDI specification] and the https://docs.jboss.org/weld/reference/latest/en-US/html/[Weld documentation] (Weld is a CDI Reference Implementation) to get acquainted with more complex topics."
msgstr "如果您想了解更多有关 Quarkus 特定功能和限制的信息，请参阅《Quarkus xref:cdi-reference.adoc[CDI 参考指南》] 。我们还建议您阅读 link:https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html[CDI 规范] 和 link:https://docs.jboss.org/weld/reference/latest/en-US/html/[Weld 文档] （Weld 是 CDI 参考实现），以了解更复杂的主题。"
