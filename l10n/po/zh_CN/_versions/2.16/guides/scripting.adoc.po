# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-05-05 19:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.16/guides/scripting.adoc
#, no-wrap
msgid "Scripting with Quarkus"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "Quarkus provides integration with https://jbang.dev[jbang] which allows you to write Java scripts/applications requiring no Maven nor Gradle to get running."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "In this guide, we will see how you can write a REST application using just a single Java file."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/scripting.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "https://jbang.dev/download[JBang]"
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/scripting.adoc
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "Normally we would link to a Git repository to clone but in this case there is no additional files than the following:"
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/scripting.adoc
#, no-wrap
msgid "Architecture"
msgstr "应用结构"

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "In this guide, we create a straightforward application serving a `hello` endpoint with a single source file, no additional build files like `pom.xml` or `build.gradle` needed. To demonstrate dependency injection, this endpoint uses a `greeting` bean."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/scripting.adoc
#, no-wrap
msgid "Creating the initial file"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "First, we need a Java file. JBang lets you create an initial version using:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "This command generates a .java file that you can directly run on Linux and macOS, i.e. `./quarkusapp.java` - on Windows you need to use `jbang quarkusapp.java`."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "This initial version will print `Hello World` when run."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "Once generated, look at the `quarkusapp.java` file."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "You will find at the top a line looking like this:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "This line is what on Linux and macOS allows you to run it as a script. On Windows this line is ignored."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "The next lines"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "illustrate how you add dependencies to this script. This is a feature of JBang."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "Go ahead and update this line to include the `quarkus-bom` and the `quarkus-resteasy-reactive` dependency like so:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "Now, run `jbang quarkusapp.java` and you will see JBang resolving this dependency and building the jar with help from Quarkus' JBang integration."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "For now the application does nothing new."
msgstr ""

#. type: Block title
#: _versions/2.16/guides/scripting.adoc
#, no-wrap
msgid "How do I edit this file and get content assist?"
msgstr ""

#: _versions/2.16/guides/scripting.adoc
msgid ""
"As there is nothing but a `.java` file, most IDE's don't handle content assist well.\n"
"To work around that you can run `jbang edit quarkusapp.java`, this will print out a directory that will have a temporary project setup you can use in your IDE."
msgstr ""

#. type: delimited block =
#: _versions/2.16/guides/scripting.adoc
msgid "On Linux/macOS you can run `<idecommand> `jbang edit quarkusapp.java``."
msgstr ""

#: _versions/2.16/guides/scripting.adoc
msgid ""
"If you add dependencies while editing, you can get JBang to automatically refresh\n"
"the IDE project using `jbang edit --live=<idecommand> quarkusapp.java`."
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/scripting.adoc
#, no-wrap
msgid "The JAX-RS resources"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "Now let us replace the class with one that uses Quarkus features:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "It's a very simple class with a main method that starts Quarkus with a REST endpoint, returning \"hello\" to requests on \"/hello\"."
msgstr ""

#. type: Block title
#: _versions/2.16/guides/scripting.adoc
#, no-wrap
msgid "Why is the `main` method there?"
msgstr ""

#. type: delimited block =
#: _versions/2.16/guides/scripting.adoc
msgid "A `main` method is currently needed for the JBang integration to work - we might remove this requirement in the future."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/scripting.adoc
#, no-wrap
msgid "Running the application"
msgstr "运行应用程序"

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "Now when you run the application you will see Quarkus start up."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "Use: `jbang quarkusapp.java`:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "Once started, you can request the provided endpoint:"
msgstr "一旦启动，你可以发送请求到提供服务的端点。"

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "After that, hit `CTRL+C` to stop the application."
msgstr ""

#. type: Block title
#: _versions/2.16/guides/scripting.adoc
#, no-wrap
msgid "Automatically add newline with `curl -w \"\\n\"`"
msgstr "自动添加换行符 `curl -w \"\\n\"` "

#. type: delimited block =
#: _versions/2.16/guides/scripting.adoc
msgid "We are using `curl -w \"\\n\"` in this example to avoid your terminal printing a '%' or put both result and next command prompt on the same line."
msgstr "我们在这个例子中使用 `curl -w \"\\n\"` ，以避免你的终端打印出'%'或把结果和下一个命令提示符放在同一行。"

#. type: Block title
#: _versions/2.16/guides/scripting.adoc
#, no-wrap
msgid "Why is `quarkus-resteasy-reactive` not resolved?"
msgstr ""

#: _versions/2.16/guides/scripting.adoc
msgid ""
"In this second run you should not see a line saying it is resolving `quarkus-resteasy-reactive` as JBang caches the dependency resolution between runs.\n"
"If you want to clear the caches to force resolution use `jbang cache clear`."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/scripting.adoc
#, no-wrap
msgid "Using injection"
msgstr "使用注入法"

#: _versions/2.16/guides/scripting.adoc
msgid ""
"Dependency injection in Quarkus is based on ArC which is a CDI-based dependency injection solution tailored for Quarkus' architecture.\n"
"You can learn more about it in the xref:cdi-reference.adoc[Contexts and Dependency Injection guide]."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "ArC comes as a dependency of `quarkus-resteasy-reactive` so you already have it handy."
msgstr "ArC作为 `quarkus-resteasy-reactive` 的一个依赖项，所以你已经有了。"

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "Let's modify the application and add a companion bean."
msgstr ""

#: _versions/2.16/guides/scripting.adoc
msgid ""
"Normally you would add a separate class, but as we are aiming to have it all in one file you will add a\n"
"nested class."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "Add the following *inside* the `quarkusapp` class body."
msgstr ""

#. type: Block title
#: _versions/2.16/guides/scripting.adoc
#, no-wrap
msgid "Use of nested static public classes"
msgstr ""

#. type: delimited block =
#: _versions/2.16/guides/scripting.adoc
msgid "We are using a nested static public class instead of a top level class for two reasons:"
msgstr ""

#. type: delimited block =
#: _versions/2.16/guides/scripting.adoc
msgid "JBang currently does not support multiple source files."
msgstr ""

#. type: delimited block =
#: _versions/2.16/guides/scripting.adoc
msgid "All Java frameworks relying on introspection have challenges using top level classes as they are not as visible as public classes; and in Java there can only be one top level public class in a file."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "Edit the `quarksapp` class to inject the `GreetingService` and create a new endpoint using it, you should end up with something like:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "Now when you run `jbang quarkusapp.java` you can check what the new end point returns:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "Now that is unexpected, why is it returning `hello null` and not `hello quarkus`?"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "The reason is that RESTEasy Reactive relies on the `-parameters` compiler flag to be set to be able to map `{name}` to the `name` parameter."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "We fix that by adding the following comment instruction to the file:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "Now when you run with `jbang quarkusapp.java` the end point should return what you expect:"
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/scripting.adoc
#, no-wrap
msgid "Debugging"
msgstr ""

#: _versions/2.16/guides/scripting.adoc
msgid ""
"To debug the application you use `jbang --debug quarkusapp.java` and you can use your IDE to connect on port 4004; if you want to use the\n"
"more traditional Quarkus debug port you can use `jbang --debug=5005 quarkusapp.java`."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "Note: JBang debugging always suspends thus you need to connect the debugger to have the application run."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/scripting.adoc
#, no-wrap
msgid "Logging"
msgstr "日志"

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "To use logging in Quarkus scripting with JBang you do as usual, with configuring a logger, i.e."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "To get it to work you need to add a Java option to ensure the logging is initialized properly, i.e."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "With that in place running `jbang quarkusapp.java` will log and render as expected."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/scripting.adoc
#, no-wrap
msgid "Configuring Application"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "You can use `//Q:CONFIG <property>=<value>` to set up static configuration for your application."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "I.e. if you wanted to add the `smallrye-openapi` and `swagger-ui` extensions and have the Swagger UI always show up you would add the following:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "Now during build the `quarkus.swagger-ui.always-include` will be generated into the resulting jar and `http://0.0.0.0:8080/q/swagger-ui` will be available when run."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/scripting.adoc
#, no-wrap
msgid "Running as a native application"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "If you have the `native-image` binary installed and `GRAALVM_HOME` set, you can get the native executable built and run using `jbang --native quarkusapp.java`:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "This native build will take some time on first run but any subsequent runs (without changing `quarkusapp.java`) will be close to instant thanks to JBang cache:"
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/scripting.adoc
#, no-wrap
msgid "Conclusion"
msgstr "解决方案"

#. type: Plain text
#: _versions/2.16/guides/scripting.adoc
msgid "If you want to get started with Quarkus or write something quickly, Quarkus Scripting with jbang lets you do that. No Maven, no Gradle - just a Java file. In this guide we outlined the very basics on using Quarkus with JBang; if you want to learn more about what JBang can do, go see https://jbang.dev."
msgstr ""
