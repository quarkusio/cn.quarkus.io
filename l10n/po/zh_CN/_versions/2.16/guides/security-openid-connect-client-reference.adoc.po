# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-05-05 19:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "OpenID Connect (OIDC) and OAuth2 Client and Filters Reference Guide"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "This reference guide explains how to use:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "`quarkus-oidc-client`, `quarkus-oidc-client-reactive-filter` and `quarkus-oidc-client-filter` extensions to acquire and refresh access tokens from OpenID Connect and OAuth 2.0 compliant Authorization Servers such as https://www.keycloak.org[Keycloak]"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "`quarkus-oidc-token-propagation-reactive` and `quarkus-oidc-token-propagation` extensions to propagate the current `Bearer` or `Authorization Code Flow` access tokens"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "The access tokens managed by these extensions can be used as HTTP Authorization Bearer tokens to access the remote services."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "Please also see xref:security-openid-connect-client.adoc[OpenID Connect Client and Token Propagation Quickstart]."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "OidcClient"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "Add the following dependency:"
msgstr "添加以下依赖关系："

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "`quarkus-oidc-client` extension provides a reactive `io.quarkus.oidc.client.OidcClient` which can be used to acquire and refresh tokens using SmallRye Mutiny `Uni` and `Vert.x WebClient`."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "`OidcClient` is initialized at the build time with the IDP token endpoint URL which can be auto-discovered or manually configured and uses this endpoint to acquire access tokens using the token grants such as `client_credentials` or `password` and refresh the tokens using a `refresh_token` grant."
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Token Endpoint Configuration"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "By default, the token endpoint address is discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc-client.auth-server-url`."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "For example, given this Keycloak URL:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "`OidcClient` will discover that the token endpoint URL is `http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens`."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "Alternatively, if the discovery endpoint is not available or you would like to save on the discovery endpoint round-trip, you can disable the discovery and configure the token endpoint address with a relative path value, for example:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "A more compact way to configure the token endpoint URL without the discovery is to set `quarkus.oidc-client.token-path` to an absolute URL:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "Setting 'quarkus.oidc-client.auth-server-url' and 'quarkus.oidc-client.discovery-enabled' is not required in this case."
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Supported Token Grants"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "The main token grants which `OidcClient` can use to acquire the tokens are the `client_credentials` (default) and `password` grants."
msgstr ""

#. type: Title ====
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Client Credentials Grant"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "Here is how `OidcClient` can be configured to use the `client_credentials` grant:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "The `client_credentials` grant allows to set extra parameters to the token request via `quarkus.oidc-client.grant-options.client.<param-name>=<value>`. Here is how to set the intended token recipient via the `audience` parameter:"
msgstr ""

#. type: Title ====
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Password Grant"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "Here is how `OidcClient` can be configured to use the `password` grant:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "It can be further customized using a `quarkus.oidc-client.grant-options.password` configuration prefix, similarly to how the client credentials grant can be customized."
msgstr ""

#. type: Title ====
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Other Grants"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "`OidcClient` can also help with acquiring the tokens using the grants which require some extra input parameters which can not be captured in the configuration. These grants are `refresh_token` (with the external refresh token), `authorization_code`, as well as two grants which can be used to exchange the current access token, `urn:ietf:params:oauth:grant-type:token-exchange` and `urn:ietf:params:oauth:grant-type:jwt-bearer`."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "Using the `refresh_token` grant which uses an out-of-band refresh token to acquire a new set of tokens will be required if the existing refresh token has been posted to the current Quarkus endpoint for it to acquire the access token. In this case `OidcClient` needs to be configured as follows:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "and then you can use `OidcClient.refreshTokens` method with a provided refresh token to get the access token."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "Using the `urn:ietf:params:oauth:grant-type:token-exchange` or `urn:ietf:params:oauth:grant-type:jwt-bearer` grants may be required if you are building a complex microservices application and would like to avoid the same `Bearer` token be propagated to and used by more than one service. Please see <<token-propagation-reactive,Token Propagation in MicroProfile RestClient Reactive filter>> and <<token-propagation,Token Propagation in MicroProfile RestClient filter>> for more details."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "Using `OidcClient` to support the `authorization code` grant might be required if for some reasons you can not use the xref:security-openid-connect-web-authentication.adoc[Quarkus OpenID Connect extension] to support Authorization Code Flow. If there is a very good reason for you to implement Authorization Code Flow then you can configure `OidcClient` as follows:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "and then you can use `OidcClient.accessTokens` method accepting a Map of extra properties and pass the current `code` and `redirect_uri` parameters to exchange the authorization code for the tokens."
msgstr ""

#. type: Title ====
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Grant scopes"
msgstr ""

#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid ""
"You may need to request that a specific set of scopes is associated with an issued access token.\n"
"Use a dedicated `quarkus.oidc-client.scopes` list property, for example: `quarkus.oidc-client.scopes=email,phone`"
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Use OidcClient directly"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "One can use `OidcClient` directly as follows:"
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Inject Tokens"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "You can inject `Tokens` which uses `OidcClient` internally. `Tokens` can be used to acquire the access tokens and refresh them if necessary:"
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Use OidcClients"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "`io.quarkus.oidc.client.OidcClients` is a container of ``OidcClient``s - it includes a default `OidcClient` and named clients which can be configured like this:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "Note in this case the default client is disabled with a `client-enabled=false` property. The `jwt-secret` client can be accessed like this:"
msgstr ""

#. type: delimited block =
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "If you also use xref:security-openid-connect-multitenancy.adoc[OIDC multitenancy] and each OIDC tenant has its own associated `OidcClient` then you can use a Vert.x `RoutingContext` `tenantId` attribute, for example:"
msgstr ""

#. type: delimited block =
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "If you need you can also create new `OidcClient` programmatically like this:"
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Inject named OidcClient and Tokens"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "In case of multiple configured ``OidcClient``s you can specify the `OidcClient` injection target by the extra qualifier `@NamedOidcClient` instead of working with `OidcClients`:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "The same qualifier can be used to specify the `OidcClient` used for a `Tokens` injection:"
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Use OidcClient in RestClient Reactive ClientFilter"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "Add the following Maven Dependency:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "Note it will also bring `io.quarkus:quarkus-oidc-client`."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "`quarkus-oidc-client-reactive-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestReactiveFilter`."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "It works similarly to the way `OidcClientRequestFilter` does (see <<oidc-client-filter, Use OidcClient in MicroProfile RestClient client filter>>) - it uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value. The difference is that it works with xref:rest-client-reactive.adoc[Reactive RestClient] and implements a non-blocking client filter which does not block the current IO thread when acquiring or refreshing the tokens."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "`OidcClientRequestReactiveFilter` delays an initial token acquisition until it is executed to avoid blocking an IO thread."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "You can selectively register `OidcClientRequestReactiveFilter` by using either io.quarkus.oidc.client.reactive.filter.OidcClientFilter or org.eclipse.microprofile.rest.client.annotation.RegisterProvider annotations:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "or"
msgstr ""

#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid ""
"`OidcClientRequestReactiveFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-reactive-filter.client-name` configuration property.\n"
"You can also select `OidcClient` by setting `value` attribute of the `@OidcClientFilter` annotation. The client name set through annotation has higher priority than the `quarkus.oidc-client-reactive-filter.client-name` configuration property.\n"
"For example, given <<use-oidc-clients, this>> `jwt-secret` named OIDC client declaration, you can refer to this client like this:"
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Use OidcClient in RestClient ClientFilter"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "`quarkus-oidc-client-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestFilter` JAX-RS ClientRequestFilter which uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "By default, this filter will get `OidcClient` to acquire the first pair of access and refresh tokens at its initialization time. If the access tokens are short-lived and refresh tokens are not available then the token acquisition should be delayed with `quarkus.oidc-client.early-tokens-acquisition=false`."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "You can selectively register `OidcClientRequestFilter` by using either `io.quarkus.oidc.client.filter.OidcClientFilter` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotations:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "Alternatively, `OidcClientRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if `quarkus.oidc-client-filter.register-filter=true` property is set."
msgstr ""

#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid ""
"`OidcClientRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-filter.client-name` configuration property.\n"
"You can also select `OidcClient` by setting `value` attribute of the `@OidcClientFilter` annotation. The client name set through annotation has higher priority than the `quarkus.oidc-client-filter.client-name` configuration property.\n"
"For example, given <<use-oidc-clients, this>> `jwt-secret` named OIDC client declaration, you can refer to this client like this:"
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Use Custom RestClient ClientFilter"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "If you prefer you can use your own custom filter and inject `Tokens`:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "The `Tokens` producer will acquire and refresh the tokens, and the custom filter will decide how and when to use the token."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "You can also inject named `Tokens`, see <<named-oidc-clients,Inject named OidcClient and Tokens>>"
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Refreshing Access Tokens"
msgstr ""

#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid ""
"`OidcClientRequestReactiveFilter`, `OidcClientRequestFilter` and `Tokens` producers will refresh the current expired access token if the refresh token is available.\n"
"Additionally, `quarkus.oidc-client.refresh-token-time-skew` property can be used for a preemptive access token refreshment to avoid sending nearly expired access tokens which may cause HTTP 401 errors. For example if this property is set to `3S` and the access token will expire in less than 3 seconds then this token will be auto-refreshed."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "If the access token needs to be refreshed but no refresh token is available then an attempt will be made to acquire a new token using the configured grant such as `client_credentials`."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "Please note that some OpenID Connect Providers will not return a refresh token in a `client_credentials` grant response. For example, starting from Keycloak 12 a refresh token will not be returned by default for `client_credentials`. The providers may also restrict a number of times a refresh token can be used."
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Revoking Access Tokens"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "If your OpenId Connect provider such as Keycloak supports a token revocation endpoint then `OidcClient#revokeAccessToken` can be used to revoke the current access token. The revocation endpoint URL will be discovered alongside the token request URI or can be configured with `quarkus.oidc-client.revoke-path`."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "You may want to have the access token revoked if using this token with a REST client fails with HTTP `401` or the access token has already been used for a long time and you'd like to refresh it."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "This can be achieved by requesting a token refresh using a refresh token. However, if the refresh token is not available then you can refresh it by revoking it first and then request a new access token."
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "OidcClient Authentication"
msgstr ""

#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid ""
"`OidcClient` has to authenticate to the OpenID Connect Provider for the `client_credentials` and other grant requests to succeed.\n"
"All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "`client_secret_basic`:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider]:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "`client_secret_post`:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "`client_secret_jwt`, signature algorithm is `HS256`:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider], signature algorithm is `HS256`:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "`private_key_jwt` with the PEM key file, signature algorithm is `RS256`:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "`private_key_jwt` with the key store file, signature algorithm is `RS256`:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that no client secret goes over the wire."
msgstr ""

#. type: Title ====
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Additional JWT Authentication options"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "If either `client_secret_jwt` or `private_key_jwt` authentication methods are used then the JWT signature algorithm, key identifier, audience, subject and issuer can be customized, for example:"
msgstr ""

#. type: Title ====
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Apple POST JWT"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "Apple OpenID Connect Provider uses a `client_secret_post` method where a secret is a JWT produced with a `private_key_jwt` authentication method but with Apple account specific issuer and subject properties."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "`quarkus-oidc-client` supports a non-standard `client_secret_post_jwt` authentication method which can be configured as follows:"
msgstr ""

#. type: Title ====
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Mutual TLS"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "Some OpenID Connect Providers may require that a client is authenticated as part of the `Mutual TLS` (`mTLS`) authentication process."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "`quarkus-oidc-client` can be configured as follows to support `mTLS`:"
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Testing"
msgstr "测试"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "Start by adding the following dependencies to your test project:"
msgstr "首先在你的测试项目中添加以下依赖项："

#. type: Title ====
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Wiremock"
msgstr "Wiremock"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "Add the following dependencies to your test project:"
msgstr "在你的测试项目中添加以下依赖项："

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "Write Wiremock based `QuarkusTestResourceLifecycleManager`, for example:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "Prepare the REST test endpoints, you can have the test frontend endpoint which uses the injected MP REST client with a registered OidcClient filter to invoke on the downstream endpoint which echoes the token back, for example, see the `integration-tests/oidc-client-wiremock` in the `main` Quarkus repository."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "Set `application.properties`, for example:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "and finally write the test code. Given the Wiremock-based resource above, the first test invocation should return `access_token_1` access token which will expire in 4 seconds. Use `awaitility` to wait for about 5 seconds, and now the next test invocation should return `access_token_2` access token which confirms the expired `access_token_1` access token has been refreshed."
msgstr ""

#. type: Title ====
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Keycloak"
msgstr "Keycloak"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "If you work with Keycloak then you can use the same approach as described in the xref:security-openid-connect.adoc#integration-testing-keycloak[OpenID Connect Bearer Token Integration testing] Keycloak section."
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "How to check the errors in the logs"
msgstr "如何检查日志中的错误"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "Please enable `io.quarkus.oidc.client.runtime.OidcClientImpl` `TRACE` level logging to see more details about the token acquisition and refresh errors:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "Please enable `io.quarkus.oidc.client.runtime.OidcClientRecorder` `TRACE` level logging to see more details about the OidcClient initialization errors:"
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Token Propagation Reactive"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "The `quarkus-oidc-token-propagation-reactive` extension provides RestEasy Reactive Client `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` that simplifies the propagation of authentication information by propagating the xref:security-openid-connect.adoc[Bearer] token present in the current active request or the token acquired from the xref:security-openid-connect-web-authentication.adoc[Authorization Code Flow], as the HTTP `Authorization` header's `Bearer` scheme value."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "You can selectively register `AccessTokenRequestReactiveFilter` by using either `io.quarkus.oidc.token.propagation.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotation, for example:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "Additionally, `AccessTokenRequestReactiveFilter` can support a complex application that needs to exchange the tokens before propagating them."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "If you work with link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] or other OpenID Connect Providers which support a link:https://tools.ietf.org/html/rfc8693[Token Exchange] token grant then you can configure `AccessTokenRequestReactiveFilter` to exchange the token like this:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "Note `AccessTokenRequestReactiveFilter` will use `OidcClient` to exchange the current token, and you can use `quarkus.oidc-client.grant-options.exchange` to set the additional exchange properties expected by your OpenID Connect Provider."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "If you work with providers such as `Azure` that link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[require using] link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWT bearer token grant] to exhange the current token then you can configure `AccessTokenRequestReactiveFilter` to exchange the token like this:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "`AccessTokenRequestReactiveFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-token-propagation-reactive.client-name` configuration property."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Token Propagation"
msgstr "令牌传播"

#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid ""
"The `quarkus-oidc-token-propagation` extension provides two JAX-RS `javax.ws.rs.client.ClientRequestFilter` class implementations that simplify the propagation of authentication information.\n"
"`io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` propagates the xref:security-openid-connect.adoc[Bearer] token present in the current active request or the token acquired from the xref:security-openid-connect-web-authentication.adoc[Authorization Code Flow], as the HTTP `Authorization` header's `Bearer` scheme value.\n"
"The `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` provides the same functionality, but in addition provides support for JWT tokens."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "When you need to propagate the current Authorization Code Flow access token then the immediate token propagation will work well - as the code flow access tokens (as opposed to ID tokens) are meant to be propagated for the current Quarkus endpoint to access the remote services on behalf of the currently authenticated user."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "However, the direct end to end Bearer token propagation should be avoided if possible. For example, `Client -> Service A -> Service B` where `Service B` receives a token sent by `Client` to `Service A`. In such cases `Service B` will not be able to distinguish if the token came from `Service A` or from `Client` directly. For `Service B` to verify the token came from `Service A` it should be able to assert a new issuer and audience claims."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "Additionally, a complex application may need to exchange or update the tokens before propagating them. For example, the access context might be different when `Service A` is accessing `Service B`. In this case, `Service A` might be granted a narrow or a completely different set of scopes to access `Service B`."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "The following sections show how `AccessTokenRequestFilter` and `JsonWebTokenRequestFilter` can help."
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "RestClient AccessTokenRequestFilter"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "`AccessTokenRequestFilter` treats all tokens as Strings and as such it can work with both JWT and opaque tokens."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "You can selectively register `AccessTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "Alternatively, `AccessTokenRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if `quarkus.oidc-token-propagation.register-filter` property is set to `true` and `quarkus.oidc-token-propagation.json-web-token` property is set to `false` (which is a default value)."
msgstr ""

#. type: Title ====
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Exchange Token Before Propagation"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "If the current access token needs to be exchanged before propagation and you work with link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] or other OpenID Connect Provider which supports a link:https://tools.ietf.org/html/rfc8693[Token Exchange] token grant then you can configure `AccessTokenRequestFilter` like this:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "If you work with providers such as `Azure` that link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[require using] link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWT bearer token grant] to exhange the current token then you can configure `AccessTokenRequestFilter` to exchange the token like this:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "Note `AccessTokenRequestFilter` will use `OidcClient` to exchange the current token, and you can use `quarkus.oidc-client.grant-options.exchange` to set the additional exchange properties expected by your OpenID Connect Provider."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "`AccessTokenRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-token-propagation.client-name` configuration property."
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "RestClient JsonWebTokenRequestFilter"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "Using `JsonWebTokenRequestFilter` is recommended if you work with Bearer JWT tokens where these tokens can have their claims such as `issuer` and `audience` modified and the updated tokens secured (for example, re-signed) again. It expects an injected `org.eclipse.microprofile.jwt.JsonWebToken` and therefore will not work with the opaque tokens. Also, if your OpenID Connect Provider supports a Token Exchange protocol then it is recommended to use `AccessTokenRequestFilter` instead - as both JWT and opaque bearer tokens can be securely exchanged with `AccessTokenRequestFilter`."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "`JsonWebTokenRequestFilter` makes it easy for `Service A` implementations to update the injected `org.eclipse.microprofile.jwt.JsonWebToken` with the new `issuer` and `audience` claim values and secure the updated token again with a new signature. The only difficult step is to ensure `Service A` has a signing key - it should be provisioned from a secure file system or from the remote secure storage such as Vault."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "You can selectively register `JsonWebTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.JsonWebToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "Alternatively, `JsonWebTokenRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if both `quarkus.oidc-token-propagation.register-filter` and `quarkus.oidc-token-propagation.json-web-token` properties are set to `true`."
msgstr ""

#. type: Title ====
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Update Token Before Propagation"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "If the injected token needs to have its `iss` (issuer) and/or `aud` (audience) claims updated and secured again with a new signature then you can configure `JsonWebTokenRequestFilter` like this:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "As already noted above, please use `AccessTokenRequestFilter` if you work with Keycloak or OpenID Connect Provider which supports a Token Exchange protocol."
msgstr ""

#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid ""
"You can generate the tokens as described in xref:security-openid-connect.adoc#integration-testing[OpenID Connect Bearer Token Integration testing] section.\n"
"Prepare the REST test endpoints, you can have the test frontend endpoint which uses the injected MP REST client with a registered token propagation filter to invoke on the downstream endpoint, for example, see the `integration-tests/oidc-token-propagation` in the `main` Quarkus repository."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "The `quarkus-oidc-token-propagation-reactive` extension provides `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` which can be used to propagate the current `Bearer` or `Authorization Code Flow` access tokens."
msgstr ""

#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid ""
"The `quarkus-oidc-token-propagation-reactive` extension (as opposed to the non-reactive `quarkus-oidc-token-propagation` extension) does not currently support the exchanging or resigning the tokens before the propagation.\n"
"However, these features may be added in the future."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "References"
msgstr "参考文献"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "xref:security-openid-connect-client.adoc[OpenID Connect Client and Token Propagation Quickstart]"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "xref:security-openid-connect.adoc[Quarkus - Using OpenID Connect to Protect Service Applications using Bearer Token Authorization]"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "xref:security-openid-connect-web-authentication.adoc[Quarkus - Using OpenID Connect to Protect Web Applications using Authorization Code Flow]"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-client-reference.adoc
msgid "xref:security-overview-concept.adoc[Quarkus Security overview]"
msgstr ""
