# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-05-05 19:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.16/guides/rest-client.adoc
#, no-wrap
msgid "Using the REST Client"
msgstr ""

#. type: delimited block =
#: _versions/2.16/guides/rest-client.adoc
msgid "This guide is about the REST Client compatible with https://resteasy.dev[RESTEasy Classic] which used to be the default JAX-RS implementation until Quarkus 2.8."
msgstr ""

#: _versions/2.16/guides/rest-client.adoc
msgid ""
"It is now recommended to use RESTEasy Reactive, which supports equally well traditional blocking workloads and reactive workloads.\n"
"For more information about RESTEasy Reactive,\n"
"please see the xref:rest-client-reactive.adoc[REST Client Reactive guide] and, for the server side, the xref:rest-json.adoc[introductory REST JSON guide] or the more detailed xref:resteasy-reactive.adoc[RESTEasy Reactive guide]."
msgstr ""

#: _versions/2.16/guides/rest-client.adoc
msgid ""
"This guide explains how to use the RESTEasy REST Client in order to interact with REST APIs\n"
"with very little effort."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "there is another guide if you need to write server xref:rest-json.adoc[JSON REST APIs]."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/rest-client.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: _versions/2.16/guides/rest-client.adoc
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#: _versions/2.16/guides/rest-client.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "The solution is located in the `rest-client-quickstart` {quickstarts-tree-url}/rest-client-quickstart[directory]."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/rest-client.adoc
#, no-wrap
msgid "Creating the Maven project"
msgstr "创建Maven项目"

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "This command generates the Maven project with a REST endpoint and imports:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "the `resteasy` and `resteasy-jackson` extensions for the REST server support;"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "the `rest-client` and `rest-client-jackson` extensions for the REST client support."
msgstr ""

#: _versions/2.16/guides/rest-client.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `rest-client` and the `rest-client-jackson` extensions\n"
"to your project by running the following command in your project base directory:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "This will add the following to your `pom.xml`:"
msgstr "这将在你的 `pom.xml` 中添加以下内容："

#. type: Block title
#: _versions/2.16/guides/rest-client.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/2.16/guides/rest-client.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: _versions/2.16/guides/rest-client.adoc
#, no-wrap
msgid "Setting up the model"
msgstr ""

#: _versions/2.16/guides/rest-client.adoc
msgid ""
"In this guide we will be demonstrating how to consume part of the REST API supplied by the link:https://stage.code.quarkus.io[stage.code.quarkus.io] service.\n"
"Our first order of business is to set up the model we will be using, in the form of an `Extension` POJO."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "Create a `src/main/java/org/acme/rest/client/Extension.java` file and set the following content:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "The model above is only a subset of the fields provided by the service, but it suffices for the purposes of this guide."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/rest-client.adoc
#, no-wrap
msgid "Create the interface"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "Using the RESTEasy REST Client is as simple as creating an interface using the proper JAX-RS and MicroProfile annotations. In our case the interface should be created at `src/main/java/org/acme/rest/client/ExtensionsService.java` and have the following content:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "The `getById` method gives our code the ability to get an extension by id from the Code Quarkus API. The client will handle all the networking and marshalling leaving our code clean of such technical details."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "The purpose of the annotations in the code above is the following:"
msgstr ""

#: _versions/2.16/guides/rest-client.adoc
msgid ""
"`@RegisterRestClient` allows Quarkus to know that this interface is meant to be available for\n"
"CDI injection as a REST Client"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "`@Path`, `@GET` and `@QueryParam` are the standard JAX-RS annotations used to define how to access the service"
msgstr ""

#: _versions/2.16/guides/rest-client.adoc
msgid ""
"When a JSON extension is installed such as `quarkus-rest-client-jackson` or `quarkus-rest-client-jsonb`, Quarkus will use the `application/json` media type\n"
"by default for most return values, unless the media type is explicitly set via\n"
"`@Produces` or `@Consumes` annotations (there are some exceptions for well known types, such as `String` and `File`, which default to `text/plain` and `application/octet-stream`\n"
"respectively)."
msgstr ""

#: _versions/2.16/guides/rest-client.adoc
msgid ""
"If you don't want JSON by default you can set `quarkus.resteasy-json.default-json=false` and the default will change back to being auto-negotiated. If you set this\n"
"you will need to add `@Produces(MediaType.APPLICATION_JSON)` and `@Consumes(MediaType.APPLICATION_JSON)` to your endpoints in order to use JSON."
msgstr ""

#: _versions/2.16/guides/rest-client.adoc
msgid ""
"If you don't rely on the JSON default, it is heavily recommended to annotate your endpoints with the `@Produces` and `@Consumes` annotations to define precisely the expected content-types.\n"
"It will allow to narrow down the number of JAX-RS providers (which can be seen as converters) included in the native executable."
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/rest-client.adoc
#, no-wrap
msgid "Path Parameters"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "If the GET request requires path parameters you can leverage the `@PathParam(\"parameter-name\")` annotation instead of (or in addition to) the `@QueryParam`. Path and query parameters can be combined, as required, as illustrated in a mock example below."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/rest-client.adoc
#, no-wrap
msgid "Create the configuration"
msgstr "创建配置"

#: _versions/2.16/guides/rest-client.adoc
msgid ""
"In order to determine the base URL to which REST calls will be made, the REST Client uses configuration from `application.properties`.\n"
"The name of the property needs to follow a certain convention which is best displayed in the following code:"
msgstr ""

#: _versions/2.16/guides/rest-client.adoc
msgid ""
"Having this configuration means that all requests performed using `ExtensionsService` will use `https://stage.code.quarkus.io` as the base URL.\n"
"Using the configuration above, calling the `getById` method of `ExtensionsService` with a value of `io.quarkus:quarkus-rest-client` would result in an HTTP GET request being made to `https://stage.code.quarkus.io/api/extensions?id=io.quarkus:quarkus-rest-client`."
msgstr ""

#: _versions/2.16/guides/rest-client.adoc
msgid ""
"Having this configuration means that the default scope of `ExtensionsService` will be `@Singleton`. Supported scope values are `@Singleton`, `@Dependent`, `@ApplicationScoped` and `@RequestScoped`. The default scope is `@Dependent`.\n"
"The default scope can also be defined on the interface."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "Note that `org.acme.rest.client.ExtensionsService` _must_ match the fully qualified name of the `ExtensionsService` interface we created in the previous section."
msgstr ""

#. type: delimited block =
#: _versions/2.16/guides/rest-client.adoc
msgid "The standard MicroProfile Rest Client properties notation can also be used to configure the client:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "If a property is specified via both the Quarkus notation and the MicroProfile notation, the Quarkus notation takes a precedence."
msgstr ""

#. type: delimited block =
#: _versions/2.16/guides/rest-client.adoc
msgid "To facilitate the configuration, you can use the `@RegisterRestClient` `configKey` property that allows to use another configuration root than the fully qualified name of your interface."
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/rest-client.adoc
#, no-wrap
msgid "Disabling Hostname Verification"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "To disable the SSL hostname verification for a specific REST client, add the following property to your configuration:"
msgstr ""

#. type: delimited block =
#: _versions/2.16/guides/rest-client.adoc
msgid "This setting should not be used in production as it will disable the SSL hostname verification."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "Moreover, you can configure a REST client to use your custom hostname verify strategy. All you need to do is to provide a class that implements the interface `javax.net.ssl.HostnameVerifier` and add the following property to your configuration:"
msgstr ""

#. type: delimited block =
#: _versions/2.16/guides/rest-client.adoc
msgid "Quarkus REST client provides an embedded hostname verifier strategy to disable the hostname verification called `io.quarkus.restclient.NoopHostnameVerifier`."
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/rest-client.adoc
#, no-wrap
msgid "Disabling SSL verifications"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "To disable all SSL verifications, add the following property to your configuration:"
msgstr ""

#. type: delimited block =
#: _versions/2.16/guides/rest-client.adoc
msgid "This setting should not be used in production as it will disable any kind of SSL verification."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/rest-client.adoc
#, no-wrap
msgid "Create the JAX-RS resource"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "Create the `src/main/java/org/acme/rest/client/ExtensionsResource.java` file with the following content:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "Note that in addition to the standard CDI `@Inject` annotation, we also need to use the MicroProfile `@RestClient` annotation to inject `ExtensionsService`."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/rest-client.adoc
#, no-wrap
msgid "Update the test"
msgstr ""

#: _versions/2.16/guides/rest-client.adoc
msgid ""
"We also need to update the functional test to reflect the changes made to the endpoint.\n"
"Edit the `src/test/java/org/acme/rest/client/ExtensionsResourceTest.java` file and change the content of the `testExtensionIdEndpoint` method to:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "The code above uses link:https://rest-assured.io/[REST Assured]'s link:https://github.com/rest-assured/rest-assured/wiki/GettingStarted#jsonpath[json-path] capabilities."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/rest-client.adoc
#, no-wrap
msgid "Async Support"
msgstr ""

#: _versions/2.16/guides/rest-client.adoc
msgid ""
"The rest client supports asynchronous rest calls.\n"
"Async support comes in 2 flavors: you can return a `CompletionStage` or a `Uni` (requires the `quarkus-rest-client-mutiny` extension).\n"
"Let's see it in action by adding a `getByIdAsync` method in our `ExtensionsService` REST interface. The code should look like:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "Open the `src/main/java/org/acme/rest/client/ExtensionsResource.java` file and update it with the following content:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "To test asynchronous methods, add the test method below in `ExtensionsResourceTest`:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "The `Uni` version is very similar:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "The `ExtensionsResource` becomes:"
msgstr ""

#. type: Block title
#: _versions/2.16/guides/rest-client.adoc
#, no-wrap
msgid "Mutiny"
msgstr ""

#: _versions/2.16/guides/rest-client.adoc
msgid ""
"The previous snippet uses Mutiny reactive types.\n"
"If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr ""

#: _versions/2.16/guides/rest-client.adoc
msgid ""
"When returning a `Uni`, every _subscription_ invokes the remote service.\n"
"It means you can re-send the request by re-subscribing on the `Uni`, or use a `retry` as follows:"
msgstr ""

#: _versions/2.16/guides/rest-client.adoc
msgid ""
"If you use a `CompletionStage`, you would need to call the service's method to retry.\n"
"This difference comes from the laziness aspect of Mutiny and its subscription protocol.\n"
"More details about this can be found in https://smallrye.io/smallrye-mutiny/latest/reference/uni-and-multi/[the Mutiny documentation]."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/rest-client.adoc
#, no-wrap
msgid "Custom headers support"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "The MicroProfile REST client allows amending request headers by registering a `ClientHeadersFactory` with the `@RegisterClientHeaders` annotation."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "Let's see it in action by adding a `@RegisterClientHeaders` annotation pointing to a `RequestUUIDHeaderFactory` class in our `ExtensionsService` REST interface:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "And the `RequestUUIDHeaderFactory` would look like:"
msgstr ""

#: _versions/2.16/guides/rest-client.adoc
msgid ""
"As you see in the example above, you can make your `ClientHeadersFactory` implementation a CDI bean by\n"
"annotating it with a scope-defining annotation, such as `@Singleton`, `@ApplicationScoped`, etc."
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/rest-client.adoc
#, no-wrap
msgid "Default header factory"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "You can also use `@RegisterClientHeaders` annotation without any custom factory specified. In that case the `DefaultClientHeadersFactoryImpl` factory will be used and all headers listed in `org.eclipse.microprofile.rest.client.propagateHeaders` configuration property will be amended. Individual header names are comma-separated."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/rest-client.adoc
#, no-wrap
msgid "Package and run the application"
msgstr "打包并运行该应用程序"

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "Run the application with:"
msgstr "使用以下命令运行该应用程序:"

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "Open your browser to http://localhost:8080/extension/id/io.quarkus:quarkus-rest-client."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "You should see a JSON object containing some basic information about the REST Client extension."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "As usual, the application can be packaged using:"
msgstr "像往常一样，该应用程序能够使用以下方式进行打包:"

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "And executed with `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "You can also generate the native executable with:"
msgstr "你也可以通过以下命令生成本地可执行文件:"

#. type: Title ==
#: _versions/2.16/guides/rest-client.adoc
#, no-wrap
msgid "REST Client and RESTEasy interactions"
msgstr ""

#: _versions/2.16/guides/rest-client.adoc
msgid ""
"In Quarkus, the REST Client extension and xref:rest-json.adoc[the RESTEasy extension] share the same infrastructure.\n"
"One important consequence of this consideration is that they share the same list of providers (in the JAX-RS meaning of the word)."
msgstr ""

#: _versions/2.16/guides/rest-client.adoc
msgid ""
"For instance, if you declare a `WriterInterceptor`, it will by default intercept both the servers calls and the client calls,\n"
"which might not be the desired behavior."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "However, you can change this default behavior and constrain a provider to:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "only consider *client* calls by adding the `@ConstrainedTo(RuntimeType.CLIENT)` annotation to your provider;"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "only consider *server* calls by adding the `@ConstrainedTo(RuntimeType.SERVER)` annotation to your provider."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/rest-client.adoc
#, no-wrap
msgid "Using a Mock HTTP Server for tests"
msgstr ""

#: _versions/2.16/guides/rest-client.adoc
msgid ""
"Setting up a mock HTTP server, against which tests are run, is a common testing pattern.\n"
"Examples of such servers are link:https://wiremock.org/[Wiremock] and link:https://docs.hoverfly.io/projects/hoverfly-java/en/latest/index.html[Hoverfly].\n"
"In this section we'll demonstrate how Wiremock can be leveraged for testing the `ExtensionsService` which was developed above."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "First, Wiremock needs to be added as a test dependency. For a Maven project that would happen like so:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "Use a proper Wiremock version. All available versions can be found link:https://search.maven.org/artifact/com.github.tomakehurst/wiremock-jre8[here]."
msgstr ""

#: _versions/2.16/guides/rest-client.adoc
msgid ""
"In Quarkus tests when some service needs to be started before the Quarkus tests are ran, we utilize the `@io.quarkus.test.common.QuarkusTestResource`\n"
"annotation to specify a `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which can start the service and supply configuration\n"
"values that Quarkus will use."
msgstr ""

#: _versions/2.16/guides/rest-client.adoc
msgid "For more details about `@QuarkusTestResource` refer to  xref:getting-started-testing.adoc#quarkus-test-resource[this part of the documentation]."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "Let's create an implementation of `QuarkusTestResourceLifecycleManager` called `WiremockExtensions` like so:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "Statically importing the methods in the Wiremock package makes it easier to read the test."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "The `start` method is invoked by Quarkus before any test is run and returns a `Map` of configuration properties that apply during the test execution."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "Launch Wiremock."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "Configure Wiremock to stub the calls to `/extensions?id=io.quarkus:quarkus-rest-client` by returning a specific canned response."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "All HTTP calls that have not been stubbed are handled by calling the real service. This is done for demonstration purposes, as it is not something that would usually happen in a real test."
msgstr ""

#: _versions/2.16/guides/rest-client.adoc
msgid ""
"As the `start` method returns configuration that applies for tests, we set the rest-client property that controls the base URL which is used by the implementation\n"
"of `ExtensionsService` to the base URL where Wiremock is listening for incoming requests."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "When all tests have finished, shutdown Wiremock."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "The `ExtensionsResourceTest` test class needs to be annotated like so:"
msgstr ""

#. type: delimited block =
#: _versions/2.16/guides/rest-client.adoc
msgid "`@QuarkusTestResource` applies to all tests, not just `ExtensionsResourceTest`."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/rest-client.adoc
#, no-wrap
msgid "Further reading"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/rest-client.adoc
msgid "link:https://download.eclipse.org/microprofile/microprofile-rest-client-2.0/microprofile-rest-client-spec-2.0.html[MicroProfile Rest Client specification]"
msgstr ""
