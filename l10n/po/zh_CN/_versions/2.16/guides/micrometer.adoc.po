# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-05-05 19:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.16/guides/micrometer.adoc
#, fuzzy, no-wrap
msgid "Micrometer Metrics"
msgstr "测微计指标"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"This guide demonstrates how your Quarkus application can utilize the Micrometer metrics library for runtime and\n"
"application metrics."
msgstr "本指南展示了您的Quarkus应用程序如何利用Micrometer metrics库测量运行时和应用程序metrics。"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Apart from application-specific metrics, which are described in this guide, you may also utilize built-in metrics\n"
"exposed by various Quarkus extensions. These are described in the guide for each particular extension that supports\n"
"built-in metrics."
msgstr "除了在本指南中所述的一些的应用特定的metrics之外，您也可以利用各种Quarkus扩展所暴露的内置metrics。这些将在支持内置metrics的每个特定扩展的指南中描述。"

#. type: Plain text
#: _versions/2.16/guides/micrometer.adoc
msgid "Micrometer is the recommended approach to metrics for Quarkus."
msgstr "Micrometer是Quarkus推荐的metrics度量库。"

#. type: Title ==
#: _versions/2.16/guides/micrometer.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: _versions/2.16/guides/micrometer.adoc
#, no-wrap
msgid "Architecture"
msgstr "应用结构"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Micrometer defines a core library providing a registration mechanism for Metrics, and core metric types (Counters,\n"
"Gauges, Timers, Distribution Summaries, etc.). These core types provide an abstraction layer that can be adapted to\n"
"different backend monitoring systems. In essence, your application (or a library) can `register` a `Counter`,\n"
"`Gauge`, `Timer`, or `DistributionSummary` with a `MeterRegistry`. Micrometer will then delegate that registration to\n"
"one or more implementations, where each implementation handles the unique considerations for the associated\n"
"monitoring stack."
msgstr "Micrometer定义了一个核心库为Metrics提供注册机制，以及核心metric类型（Counters、Gauges、Timers、Distribution Summaries等）。这些核心类型提供了一个抽象层，以适应不同的后端监控系统。从本质上讲，您的应用程序（或一个库）可以向 `MeterRegistry` `注册` 一个 `Counter` ， `Gauge` ， `Timer` ，或 `DistributionSummary` 。Micrometer会将该注册委托给一个或多个实现，每个实现都会处理相关监控栈的特定考虑。"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Micrometer uses naming conventions to translate between registered Meters and the conventions used by various backend\n"
"registries. Meter names, for example, should be created and named using dots to separate segments, `a.name.like.this`.\n"
"Micrometer then translates that name into the format that the selected registry prefers. Prometheus\n"
"uses underscores, which means the previous name will appear as `a_name_like_this` in Prometheus-formatted metrics\n"
"output."
msgstr "Micrometer使用了一套命名规范来翻译已注册的Meters和各种后端registries使用的规范。例如，Meters名称的创建和命名应使用点来分隔各段，如 `a.name.like.this` 。之后Micrometer会将该名称翻译成所选registries使用的格式。Prometheus使用的是下划线，这意味着之前的名称在Prometheus的格式的metrics输出中会显示为 `a_name_like_this` 。"

#. type: Title ==
#: _versions/2.16/guides/micrometer.adoc
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"You can skip right to the solution if you prefer. Either:"
msgstr "我们建议您按照下面几节的说明，一步一步地创建应用程序。您也可以直接跳到解决方案。或者："

#. type: Plain text
#: _versions/2.16/guides/micrometer.adoc
msgid "Clone the git repository: `git clone {quickstarts-clone-url}`, or"
msgstr "克隆git存储库。 `git clone {quickstarts-clone-url}` ，或"

#. type: Plain text
#: _versions/2.16/guides/micrometer.adoc
msgid "Download an {quickstarts-archive-url}[archive]."
msgstr "下载这个 {quickstarts-archive-url}[档案] 。"

#. type: Plain text
#: _versions/2.16/guides/micrometer.adoc
msgid "The solution is located in the `micrometer-quickstart` {quickstarts-tree-url}/micrometer-quickstart[directory]."
msgstr "该解决方案位于 `micrometer-quickstart` {quickstarts-tree-url}/micrometer-quickstart[目录]中。"

#. type: Title ==
#: _versions/2.16/guides/micrometer.adoc
#, no-wrap
msgid "Creating the Maven Project"
msgstr "创建Maven项目"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Quarkus Micrometer extensions are structured similarly to Micrometer itself: `quarkus-micrometer` provides core\n"
"micrometer support and runtime integration and other Quarkus and Quarkiverse extensions bring in additional\n"
"dependencies and requirements to support specific monitoring systems."
msgstr "Quarkus Micrometer扩展的结构与Micrometer本身类似： `quarkus-micrometer` 提供核心Micrometer支持和运行时集成，其他Quarkus和Quarkiverse扩展提供额外的依赖和需求，以支持相应的监控系统。"

#. type: Plain text
#: _versions/2.16/guides/micrometer.adoc
msgid "For this example, we'll use the Prometheus registry."
msgstr "在这个例子中，我们将使用Prometheus registry。"

#. type: Plain text
#: _versions/2.16/guides/micrometer.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"This command generates a Maven project, that imports the `micrometer-registry-prometheus` extension as a dependency.\n"
"This extension will load the core `micrometer` extension as well as additional library dependencies required to support\n"
"prometheus."
msgstr "该命令生成一个Maven项目，将 `micrometer-registry-prometheus` 扩展作为一个依赖导入。该扩展将加载核心的 `micrometer` 扩展，以及支持Prometheus所需的其他依赖项。"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `micrometer-registry-prometheus` extension\n"
"to your project by running the following command in your project base directory:"
msgstr "如果您已有配置好的Quarkus项目，您可以通过在您的项目根目录下运行以下命令来将 `micrometer-registry-prometheus` 扩展添加到您的项目中："

#. type: Plain text
#: _versions/2.16/guides/micrometer.adoc
msgid "This will add the following to your build file:"
msgstr "这将在您的构建文件中添加以下内容："

#. type: Block title
#: _versions/2.16/guides/micrometer.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/2.16/guides/micrometer.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: _versions/2.16/guides/micrometer.adoc
#, no-wrap
msgid "Writing the application"
msgstr "编写应用程序"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Micrometer provides an API that allows you to construct your own custom metrics. The most common types of\n"
"meters supported by monitoring systems are gauges, counters, and summaries. The following sections build\n"
"an example endpoint, and observes endpoint behavior using these basic meter types."
msgstr "Micrometer提供了一个API，允许您构建自己的自定义度量。监测系统支持的最常见的meters类型是gauges、counters和summaries。下面的章节构建了一个示例节点，并使用这些基本的meter类型观察节点行为。"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"To register meters, you need a reference to a `MeterRegistry`, which is configured and maintained by the Micrometer\n"
"extension. The `MeterRegistry` can be injected into your application as follows:"
msgstr "要注册meters，您需要一个对 `MeterRegistry` 的引用，该引用由Micrometer扩展配置和维护。 `MeterRegistry` 可以按以下方式注入到您的应用程序中："

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Micrometer maintains an internal mapping between unique metric identifier and tag combinations and specific meter\n"
"instances. Using `register`, `counter`,  or other methods to increment counters or record values does not create\n"
"a new instance of a meter unless that combination of identifier and tag/label values hasn't been seen before."
msgstr "Micrometer在唯一的metric标识和标签组合与对应的meter实例之间维护着一种内部映射关系。使用 `register` , `counter` , 或其他方法来增加counters或记录的数值并不会创建一个新的meter实例，除非该标识符和标记/标签值的组合以前未曾出现过。"

#. type: Title ===
#: _versions/2.16/guides/micrometer.adoc
#, fuzzy, no-wrap
msgid "Gauges"
msgstr "计量器"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Gauges measure a value that can increase or decrease over time, like the speedometer on a car. Gauges can be\n"
"useful when monitoring the statistics for a cache or collection. Consider the following simple example that\n"
"observes the size of a list:"
msgstr "Gauges测量的是一个可以随时间增加或减少的数值，就像汽车上的车速表。Gauges在监控一个缓存或集合的统计数据时很有用。考虑下面这个观察列表大小的简单例子："

#. type: Plain text
#: _versions/2.16/guides/micrometer.adoc
msgid "Note that even numbers are added to the list, and odd numbers remove an element from the list."
msgstr "请注意，在这里偶数被添加到列表中，而到奇数时列表将删除一个元素。"

#. type: Plain text
#: _versions/2.16/guides/micrometer.adoc
msgid "Start your application in dev mode:"
msgstr "在开发模式下启动您的应用程序："

#. type: Plain text
#: _versions/2.16/guides/micrometer.adoc
msgid "Then try the following sequence and look for `example_list_size` in the plain text output:"
msgstr "然后尝试以下命令并在文本输出中找出 `example_list_size` ："

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"It is important to note that gauges are sampled rather than set; there is no record of how the value associated with a\n"
"gauge might have changed between measurements. In this example, the size of the list is observed when the Prometheus\n"
"endpoint is visited."
msgstr "需要注意的是，gauges是采样的，而不是设置的；因而与一个gauge相关的值在不同的测量之间可能会发生怎样的变化将无从记录。在本例中，列表的大小会在访问Prometheus节点时被观察到。"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Micrometer provides a few additional mechanisms for creating gauges. Note that Micrometer does not create strong\n"
"references to the objects it observes by default. Depending on the registry, Micrometer either omits gauges that observe\n"
"objects that have been garbage-collected entirely or uses `NaN` (not a number) as the observed value."
msgstr "Micrometer提供了一些额外的机制来创建gauges。请注意，Micrometer在默认情况下不会对它所观察的对象创建强引用。根据其所在的registry，Micrometer要么完全省略掉观察已经被垃圾收集的对象的gauge，要么使用 `NaN` （not a umber - 不是数字）作为观察值。"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"When should you use a Gauge? Only if you can't use something else. Never gauge something you can count. Gauges can be\n"
"less straight-forward to use than counters. If what you are measuring can be counted (because the value always\n"
"increments), use a counter instead."
msgstr "什么时候应该使用Gauge？只有在您无法使用其他测量值的时候。不要对您可以计算的东西使用gauge。Gauges的使用可能没有counters那么直白。如果您要测量的东西可以计数（因为数值总是递增的），就用counter代替。"

#. type: Title ===
#: _versions/2.16/guides/micrometer.adoc
#, no-wrap
msgid "Counters"
msgstr "计数器（Counters）"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Counters are used to measure values that only increase. In the example below, you will count the number of times you\n"
"test a number to see if it is prime:"
msgstr "Counters是用来测量只增加的数值的。在下面的例子中，您将统计您测试一个数字是否是质数的次数:"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"It might be tempting to add a label or tag to the counter indicating what value was checked, but remember that each\n"
"unique combination of metric name (`example.prime.number`) and label value produces a unique time series. Using an\n"
"unbounded set of data as label values can lead to a \"cardinality explosion\", an exponential increase in the creation\n"
"of new time series."
msgstr "以上代码打算给counter添加一个标签来表明是什么值被检查了，但是请记住，metric名称( `example.prime.number` )和标签值的每个独特组合只会产生一个唯一的时间序列。使用未绑定的数据集来作为标签值会导致 \"基数爆炸(cardinality explosion)\"，即新的时间序列的创建会呈指数级增长。"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Label and tag can be used interchangeably. You may also see \"attribute\" used in this context in some documentation.\n"
"The gist is each that each label or tag or attribute defines an additional bit of information associated with the\n"
"single numerical measurement that helps you classify, group, or aggregate the measured value later. The Micrometer API\n"
"uses `Tag` as the mechanism for specifying this additional data."
msgstr ""

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"It is possible to add a tag that would convey a little more information, however. Let's adjust our code, and move\n"
"the counter to add some tags to convey additional information."
msgstr "不过添加一个标签以传达更多的信息也是有可能的。让我们调整我们的代码，改动一下counter来添加一些标签以传达更多信息。"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Looking at the data produced by this counter, you can tell how often a negative number was checked, or the number one,\n"
"or an even number, and so on. Try the following sequence and look for `example_prime_number_total` in the plain text\n"
"output. Note that the `_total` suffix is added when Micrometer applies Prometheus naming conventions to\n"
"`example.prime.number`, the originally specified counter name."
msgstr "看一下这个counter产生的数据，您可以看到负数或者数字1被或者偶数等被检查的频率。尝试以下命令，并在文本输出中查找 `example_prime_number_total` 。请注意，当Micrometer将Prometheus命名规则应用于 `example.prime.number` ，即最初指定的counter名称时，会添加后缀 `_total` 。"

#. type: Plain text
#: _versions/2.16/guides/micrometer.adoc
msgid "If you did not leave Quarkus running in dev mode, start it again:"
msgstr "如果您的Quarkus从之前的开发模式下退出了，那么请再次启动它："

#. type: Plain text
#: _versions/2.16/guides/micrometer.adoc
msgid "Then execute the following sequence:"
msgstr "然后执行以下命令序列："

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"When should you use a counter? Only if you are doing something that can not be either timed (or summarized).\n"
"Counters only record a count, which may be all that is needed. However, if you want to understand more about how a\n"
"value is changing, a timer (when the base unit of measurement is time) or a distribution summary might be\n"
"more appropriate."
msgstr "那么什么时候使用counter呢？只有当您正在做的事情不能被计时(timed）（或总结summarized）的时候。counter只记录一个计数值，而这个值可能就是所需的全部。但是，如果您想更多地了解一个值是如何变化的，那么timer（当基本的测量单位是时间时）或distribution summary可能更合适。"

#. type: Title ===
#: _versions/2.16/guides/micrometer.adoc
#, fuzzy, no-wrap
msgid "Summaries and Timers"
msgstr "摘要和计时器"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Timers and distribution summaries in Micrometer are very similar. Both allow you to record an observed value, which\n"
"will be aggregated with other recorded values and stored as a sum. Micrometer also increments a counter to indicate the\n"
"number of measurements that have been recorded and tracks the maximum observed value (within a decaying interval)."
msgstr "Micrometer中的Timers和distribution summaries非常相似。两者都允许您记录这样一种观察值，它将与其他记录值汇总并作为一个总和来被记录。Micrometer也会使用一个counter来表示已经记录的测量值的个数，并且跟踪最大的观察值（在一个衰减的区间内）。"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Distribution summaries are populated by calling the `record` method to record observed values, while timers provide\n"
"additional capabilities specific to working with time and measuring durations. For example, we can use a timer to\n"
"measure how long it takes to calculate prime numbers using one of the `record` methods that wraps the invocation of a\n"
"Supplier function:"
msgstr "Distribution summaries是通过调用 `record` 方法来记录观测值，而timers则提供了专门用于处理时间和测量持续时间的额外功能。例如，我们可以通过如下方式使用一个timer来测量计算素数所需的时间："

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Micrometer will apply Prometheus conventions when emitting metrics for this timer. Prometheus measures time in seconds.\n"
"Micrometer converts measured durations into seconds and includes the unit in the metric name, per convention. After\n"
"visiting the prime endpoint a few more times, look in the plain text output for the following three entries:\n"
"`example_prime_number_test_seconds_count`, `example_prime_number_test_seconds_sum`, and\n"
"`example_prime_number_test_seconds_max`."
msgstr "Micrometer在为这个timer发送metrics时将应用Prometheus规范。Prometheus测量时间的单位是秒。Micrometer会将测量的持续时间转换为秒，并按照规范在metric名称中包含单位。再访问几次prime节点后，在文本输出中寻找以下三个条目： `example_prime_number_test_seconds_count` , `example_prime_number_test_seconds_sum` , 和 `example_prime_number_test_seconds_max` 。"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Both timers and distribution summaries can be configured to emit additional statistics, like histogram data,\n"
"precomputed percentiles, or service level objective (SLO) boundaries. Note that the count, sum, and histogram data\n"
"can be re-aggregated across dimensions (or across a series of instances), while precomputed percentile values cannot."
msgstr "Timers和distritution summaries都可以被配置为发送额外的统计数据，如hitogram数据、预计算的百分位数或service level object（SLO）的边界值。请注意，计数、总和和histogram数据可以跨维度（或跨一系列实例）重新汇总，而预计算的百分数则不能。"

#. type: Title ===
#: _versions/2.16/guides/micrometer.adoc
#, no-wrap
msgid "Review automatically generated metrics"
msgstr "审查自动生成的metrics"

#. type: Plain text
#: _versions/2.16/guides/micrometer.adoc
msgid "To view metrics, execute `curl localhost:8080/q/metrics/`"
msgstr "要查看metrics，请执行 `curl localhost:8080/q/metrics/`"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"The Micrometer extension automatically times HTTP server requests. Following Prometheus naming conventions for\n"
"timers, look for `http_server_requests_seconds_count`, `http_server_requests_seconds_sum`, and\n"
"`http_server_requests_seconds_max`. Dimensional labels have been added for the requested uri, the HTTP method\n"
"(GET, POST, etc.), the status code (200, 302, 404, etc.), and a more general outcome field."
msgstr "Micrometer扩展会自动为HTTP服务器请求计时。按照Prometheus对timers的命名惯例，查找 `http_server_requests_seconds_count` , `http_server_requests_seconds_sum` , 和 `http_server_requests_seconds_max` 。维度标签已经被添加到请求的URI、HTTP方法（GET、POST等）、状态代码（200、302、404等）和一个更通用的结果字段。"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Note that metrics appear lazily, you often won't see any data for your endpoint until\n"
"something tries to access it, etc."
msgstr "请注意，metric是延迟出现的，您通常不会看到您的节点的任何数据，直到有请求试图访问它，等等。"

#. type: Block title
#: _versions/2.16/guides/micrometer.adoc
#, no-wrap
msgid "Ignoring endpoints"
msgstr "忽略节点"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"You can disable measurement of HTTP endpoints using the `quarkus.micrometer.binder.http-server.ignore-patterns`\n"
"property. This property accepts a comma-separated list of simple regex match patterns identifying URI paths that should\n"
"be ignored. For example, setting `quarkus.micrometer.binder.http-server.ignore-patterns=/example/prime/[0-9]+` will\n"
"ignore a request to `http://localhost:8080/example/prime/7919`. A request to `http://localhost:8080/example/gauge/7919`\n"
"would still be measured."
msgstr "您可以使用 `quarkus.micrometer.binder.http-server.ignore-patterns` 属性禁用对HTTP节点的测量。这个属性接受一个用逗号分隔的简单正则表达式匹配的列表来识别应被忽略的URI路径。例如， `quarkus.micrometer.binder.http-server.ignore-patterns=/example/prime/[0-9]+` 会忽略对 `<a href=\"http://localhost:8080/example/prime/7919\" class=\"bare\">http://localhost:8080/example/prime/7919</a>` 请求的监测。而一个对 `<a href=\"http://localhost:8080/example/gauge/7919\" class=\"bare\">http://localhost:8080/example/gauge/7919</a>` 的请求仍会被监测。"

#. type: Block title
#: _versions/2.16/guides/micrometer.adoc
#, fuzzy, no-wrap
msgid "URI templates"
msgstr "URI 模板"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"The micrometer extension will make a best effort at representing URIs containing path parameters in templated form.\n"
"Using examples from above, a request to `http://localhost:8080/example/prime/7919` should appear as an attribute of\n"
"`http_server_requests_seconds_*` metrics with a value of `uri=/example/prime/{number}`."
msgstr "Micrometer扩展将尽最大努力以模板的形式表示包含路径参数的URI。使用上面的例子，一个对 `<a href=\"http://localhost:8080/example/prime/7919\" class=\"bare\">http://localhost:8080/example/prime/7919</a>` 的请求应该作为 `http_server_requests_seconds_*` metrics 的一个属性出现，其值为 `uri=/example/prime/{number}` 。"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Use the `quarkus.micrometer.binder.http-server.match-patterns` property if the correct URL can not be determined. This\n"
"property accepts a comma-separated list defining an association between a simple regex match pattern and a replacement\n"
"string. For example, setting\n"
"`quarkus.micrometer.binder.http-server.match-patterns=/example/prime/[0-9]+=/example/{jellybeans}` would use the value\n"
"`/example/{jellybeans}` for the uri attribute any time the requested uri matches `/example/prime/[0-9]+`."
msgstr "如果不能确定正确的URL，请使用 `quarkus.micrometer.binder.http-server.match-patterns` 属性。这个属性使用一个逗号分隔的列表来定义一个简单的正则匹配模式和对应的替换字符串之间的关联。例如，设置成 `quarkus.micrometer.binder.http-server.match-patterns=/example/prime/[0-9]+=/example/{jellybeans}` ，则可以请求的URI与 `/example/prime/[0-9]+` 匹配时为URI属性使用 `/example/{jellybeans}` 的值。"

#. type: Block title
#: _versions/2.16/guides/micrometer.adoc
#, fuzzy, no-wrap
msgid "Exported metrics format"
msgstr "导出的度量衡格式"

#: _versions/2.16/guides/micrometer.adoc
#, fuzzy
msgid ""
"By default, the  metrics are exported using the Prometheus format `application/openmetrics-text`,\n"
"you can revert to the former format by specifying the `Accept` request header to `text/plain` (`curl -H \"Accept: text/plain\" localhost:8080/q/metrics/`)."
msgstr "默认情况下，度量值使用 Prometheus 格式 `application/openmetrics-text` 导出，您可以通过将 `Accept` 请求头指定为 `text/plain` ( `curl -H \"Accept: text/plain\" localhost:8080/q/metrics/` )，恢复到以前的格式。"

#. type: Title ==
#: _versions/2.16/guides/micrometer.adoc
#, no-wrap
msgid "Using MeterFilter to configure metrics"
msgstr "使用MeterFilter来配置metrics"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Micrometer uses `MeterFilter` instances to customize the metrics emitted by `MeterRegistry` instances.\n"
"The Micrometer extension will detect `MeterFilter` CDI beans and use them when initializing `MeterRegistry`\n"
"instances."
msgstr "Micrometer使用 `MeterFilter` 实例来定制 `MeterRegistry` 实例发出的metrics。Micrometer扩展将检测 `MeterFilter` CDI beans，并在初始化 `MeterRegistry` 实例时使用它们。"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"In this example, a singleton CDI bean will produce two different `MeterFilter` beans. One will be applied only to\n"
"Prometheus `MeterRegistry` instances (using the `@MeterFilterConstraint` qualifier), and another will be applied\n"
"to all `MeterRegistry` instances. An application configuration property is also injected and used as a tag value.\n"
"Additional examples of MeterFilters can be found in the\n"
"link:https://micrometer.io/docs/concepts[official documentation]."
msgstr "在这个例子中，一个CDI bean单例将产生两个不同的 `MeterFilter` beans。一个将只用于Prometheus `MeterRegistry` 实例（使用 `@MeterFilterConstraint` 修饰符），另一个将用于所有 `MeterRegistry` 实例。一个应用配置属性也被注入并作为标签值使用。MeterFilters的其他例子可以在 link:https://micrometer.io/docs/concepts[官方文档] 中找到。"

#. type: Title ==
#: _versions/2.16/guides/micrometer.adoc
#, no-wrap
msgid "Does Micrometer support annotations?"
msgstr "Micrometer支持注解吗？"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Micrometer does define two annotations, `@Counted` and `@Timed`, that can be added to methods. The `@Timed` annotation\n"
"will wrap the execution of a method and will emit the following tags in addition to any tags defined on the\n"
"annotation itself: class, method, and exception (either \"none\" or the simple class name of a detected exception)."
msgstr "Micrometer确实也定义了两个注解， `@Counted` 和 `@Timed` ，它们可以被添加到方法中。 `@Timed` 注解将修饰一个方法的执行。除了注解本身定义的标签外，还将添加以下标签：类名、方法名和异常（\"none \"或检测到的异常的简单类名）。"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Using annotations is limited, as you can't dynamically assign meaningful tag values. Also note that many methods, e.g.\n"
"REST endpoint methods or Vert.x Routes, are counted and timed by the micrometer extension out of the box."
msgstr "使用注解是被限制的，因为您不能动态地分配有意义的标签值。还要注意的是，许多方法的计数和计时，例如REST节点方法或Vert.x Routes，Micrometer扩展都支持开箱即用。"

#. type: Title ==
#: _versions/2.16/guides/micrometer.adoc
#, no-wrap
msgid "Using other Registry implementations"
msgstr "使用其他Registry实现"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"If you aren't using Prometheus, you have a few options. Some Micrometer registry implementations\n"
"have been wrapped in\n"
"https://github.com/quarkiverse/quarkiverse-micrometer-registry[Quarkiverse extensions].\n"
"To use the Micrometer StackDriver MeterRegistry, for example, you would use the\n"
"`quarkus-micrometer-registry-stackdriver` extension:"
msgstr "如果您不使用Prometheus，您可以有其他选择。一些Micrometer registry的实现已经包含在 link:https://github.com/quarkiverse/quarkiverse-micrometer-registry[Quarkiverse扩展] 中了。例如，要使用Micrometer StackDriver MeterRegistry，您可以使用 `quarkus-micrometer-registry-stackdriver` 扩展："

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"If the Micrometer registry you would like to use does not yet have an associated extension,\n"
"use the `quarkus-micrometer` extension and bring in the packaged MeterRegistry dependency directly:"
msgstr "如果您想使用的Micrometer registry还没有对应的扩展，请使用 `quarkus-micrometer` 扩展，并直接添加已打包的MeterRegistry依赖："

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"You will then need to specify your own provider to configure and initialize the\n"
"MeterRegistry, as discussed in the next section."
msgstr "然后，您将需要指定自定义的provider来配置和初始化MeterRegistry，我们将在下一节讨论。"

#. type: Title ==
#: _versions/2.16/guides/micrometer.adoc
#, no-wrap
msgid "Creating a customized MeterRegistry"
msgstr "创建一个自定义的MeterRegistry"

#. type: Plain text
#: _versions/2.16/guides/micrometer.adoc
msgid "Use a custom `@Produces` method to create and configure a customized `MeterRegistry` if you need to."
msgstr "如果需要的话，请使用自定义的 `@Produces` 方法来创建和配置一个自定义的 `MeterRegistry` 。"

#. type: Plain text
#: _versions/2.16/guides/micrometer.adoc
msgid "The following example customizes the line format used for StatsD:"
msgstr "下面的例子自定义了用于StatsD的行格式："

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"This example corresponds to the following instructions in the Micrometer documentation:\n"
"https://micrometer.io/docs/registry/statsD#_customizing_the_metrics_sink"
msgstr "这个例子对应于Micrometer文档中的以下说明 https://micrometer.io/docs/registry/statsD#_customizing_the_metrics_sink"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Note that the method returns the specific type of `MeterRegistry` as a `@Singleton`. Use MicroProfile Config\n"
"to inject any configuration attributes you need to configure the registry. Most Micrometer registry extensions,\n"
"like `quarkus-micrometer-registry-statsd`, define a producer for registry-specific configuration objects\n"
"that are integrated with the Quarkus configuration model."
msgstr "请注意，该方法返回了一个特定类型的 `MeterRegistry` 的 `@Singleton` 。使用MicroProfile Config来注入任何您需要更改registry的配置属性。大多数Micrometer registry扩展，如 `quarkus-micrometer-registry-statsd` ，为registry特定的配置对象定义了一个用于与Quarkus配置模型集成的生产者。"

#. type: Title ==
#: _versions/2.16/guides/micrometer.adoc
#, fuzzy, no-wrap
msgid "Support for the MicroProfile Metrics API"
msgstr "支持MicroProfile Metrics API"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"If you use the MicroProfile Metrics API in your application, the Micrometer extension will create an adaptive\n"
"layer to map those metrics into the Micrometer registry. Note that naming conventions between the two\n"
"systems is different, so the metrics that are emitted when using MP Metrics with Micrometer will change.\n"
"You can use a `MeterFilter` to remap names or tags according to your conventions."
msgstr "如果您在您的应用程序中使用MicroProfile Metrics API，Micrometer扩展将创建一个自适应层l来把这些metrics映射到Micrometer registry中。注意，两个系统之间的命名规则是不同的，所以在Micrometer中使用MP Metrics时发出的metrics将发生变化。您可以使用 `MeterFilter` ，根据您的规范重新映射名称或标签。"

#. type: Plain text
#: _versions/2.16/guides/micrometer.adoc
msgid "Ensure the following dependency is present in your build file if you require the MicroProfile Metrics API:"
msgstr "如果您需要使用MicroProfile Metrics API，请确保您的构建文件中存在以下依赖："

#. type: Plain text
#: _versions/2.16/guides/micrometer.adoc
msgid "The MP Metrics API compatibility layer will be moved to a different extension in the future."
msgstr "MP Metrics API 的兼容层会在将来迁移至另外的扩展中。"

#. type: Title ==
#: _versions/2.16/guides/micrometer.adoc
#, no-wrap
msgid "Configuration Reference"
msgstr "配置参考"

#: _versions/2.16/guides/micrometer.adoc
#, fuzzy
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr "<span class=\"icicon\"><i class=\"fa fa-lock\" title=\"在构建时固定\"></i></span>在构建时固定的配置属性 - 所有其他配置属性都可在运行时重写 <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
