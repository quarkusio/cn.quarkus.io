# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-05-05 19:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.16/guides/micrometer.adoc
#, no-wrap
msgid "Micrometer Metrics"
msgstr ""

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"This guide demonstrates how your Quarkus application can utilize the Micrometer metrics library for runtime and\n"
"application metrics."
msgstr ""

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Apart from application-specific metrics, which are described in this guide, you may also utilize built-in metrics\n"
"exposed by various Quarkus extensions. These are described in the guide for each particular extension that supports\n"
"built-in metrics."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/micrometer.adoc
msgid "Micrometer is the recommended approach to metrics for Quarkus."
msgstr "Micrometer是Quarkus推荐的metrics度量库。"

#. type: Title ==
#: _versions/2.16/guides/micrometer.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: _versions/2.16/guides/micrometer.adoc
#, no-wrap
msgid "Architecture"
msgstr "应用结构"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Micrometer defines a core library providing a registration mechanism for Metrics, and core metric types (Counters,\n"
"Gauges, Timers, Distribution Summaries, etc.). These core types provide an abstraction layer that can be adapted to\n"
"different backend monitoring systems. In essence, your application (or a library) can `register` a `Counter`,\n"
"`Gauge`, `Timer`, or `DistributionSummary` with a `MeterRegistry`. Micrometer will then delegate that registration to\n"
"one or more implementations, where each implementation handles the unique considerations for the associated\n"
"monitoring stack."
msgstr ""

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Micrometer uses naming conventions to translate between registered Meters and the conventions used by various backend\n"
"registries. Meter names, for example, should be created and named using dots to separate segments, `a.name.like.this`.\n"
"Micrometer then translates that name into the format that the selected registry prefers. Prometheus\n"
"uses underscores, which means the previous name will appear as `a_name_like_this` in Prometheus-formatted metrics\n"
"output."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/micrometer.adoc
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"You can skip right to the solution if you prefer. Either:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/micrometer.adoc
msgid "Clone the git repository: `git clone {quickstarts-clone-url}`, or"
msgstr "克隆git存储库。 `git clone {quickstarts-clone-url}` ，或"

#. type: Plain text
#: _versions/2.16/guides/micrometer.adoc
msgid "Download an {quickstarts-archive-url}[archive]."
msgstr "下载这个 {quickstarts-archive-url}[档案] 。"

#. type: Plain text
#: _versions/2.16/guides/micrometer.adoc
msgid "The solution is located in the `micrometer-quickstart` {quickstarts-tree-url}/micrometer-quickstart[directory]."
msgstr "该解决方案位于 `micrometer-quickstart` {quickstarts-tree-url}/micrometer-quickstart[目录]中。"

#. type: Title ==
#: _versions/2.16/guides/micrometer.adoc
#, no-wrap
msgid "Creating the Maven Project"
msgstr "创建Maven项目"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Quarkus Micrometer extensions are structured similarly to Micrometer itself: `quarkus-micrometer` provides core\n"
"micrometer support and runtime integration and other Quarkus and Quarkiverse extensions bring in additional\n"
"dependencies and requirements to support specific monitoring systems."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/micrometer.adoc
msgid "For this example, we'll use the Prometheus registry."
msgstr "在这个例子中，我们将使用Prometheus registry。"

#. type: Plain text
#: _versions/2.16/guides/micrometer.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"This command generates a Maven project, that imports the `micrometer-registry-prometheus` extension as a dependency.\n"
"This extension will load the core `micrometer` extension as well as additional library dependencies required to support\n"
"prometheus."
msgstr ""

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `micrometer-registry-prometheus` extension\n"
"to your project by running the following command in your project base directory:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/micrometer.adoc
msgid "This will add the following to your build file:"
msgstr "这将在您的构建文件中添加以下内容："

#. type: Block title
#: _versions/2.16/guides/micrometer.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/2.16/guides/micrometer.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: _versions/2.16/guides/micrometer.adoc
#, no-wrap
msgid "Writing the application"
msgstr "编写应用程序"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Micrometer provides an API that allows you to construct your own custom metrics. The most common types of\n"
"meters supported by monitoring systems are gauges, counters, and summaries. The following sections build\n"
"an example endpoint, and observes endpoint behavior using these basic meter types."
msgstr ""

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"To register meters, you need a reference to a `MeterRegistry`, which is configured and maintained by the Micrometer\n"
"extension. The `MeterRegistry` can be injected into your application as follows:"
msgstr ""

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Micrometer maintains an internal mapping between unique metric identifier and tag combinations and specific meter\n"
"instances. Using `register`, `counter`,  or other methods to increment counters or record values does not create\n"
"a new instance of a meter unless that combination of identifier and tag/label values hasn't been seen before."
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/micrometer.adoc
#, no-wrap
msgid "Gauges"
msgstr ""

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Gauges measure a value that can increase or decrease over time, like the speedometer on a car. Gauges can be\n"
"useful when monitoring the statistics for a cache or collection. Consider the following simple example that\n"
"observes the size of a list:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/micrometer.adoc
msgid "Note that even numbers are added to the list, and odd numbers remove an element from the list."
msgstr "请注意，在这里偶数被添加到列表中，而到奇数时列表将删除一个元素。"

#. type: Plain text
#: _versions/2.16/guides/micrometer.adoc
msgid "Start your application in dev mode:"
msgstr "在开发模式下启动您的应用程序："

#. type: Plain text
#: _versions/2.16/guides/micrometer.adoc
msgid "Then try the following sequence and look for `example_list_size` in the plain text output:"
msgstr "然后尝试以下命令并在文本输出中找出 `example_list_size` ："

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"It is important to note that gauges are sampled rather than set; there is no record of how the value associated with a\n"
"gauge might have changed between measurements. In this example, the size of the list is observed when the Prometheus\n"
"endpoint is visited."
msgstr ""

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Micrometer provides a few additional mechanisms for creating gauges. Note that Micrometer does not create strong\n"
"references to the objects it observes by default. Depending on the registry, Micrometer either omits gauges that observe\n"
"objects that have been garbage-collected entirely or uses `NaN` (not a number) as the observed value."
msgstr ""

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"When should you use a Gauge? Only if you can't use something else. Never gauge something you can count. Gauges can be\n"
"less straight-forward to use than counters. If what you are measuring can be counted (because the value always\n"
"increments), use a counter instead."
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/micrometer.adoc
#, no-wrap
msgid "Counters"
msgstr "计数器（Counters）"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Counters are used to measure values that only increase. In the example below, you will count the number of times you\n"
"test a number to see if it is prime:"
msgstr ""

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"It might be tempting to add a label or tag to the counter indicating what value was checked, but remember that each\n"
"unique combination of metric name (`example.prime.number`) and label value produces a unique time series. Using an\n"
"unbounded set of data as label values can lead to a \"cardinality explosion\", an exponential increase in the creation\n"
"of new time series."
msgstr ""

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Label and tag can be used interchangeably. You may also see \"attribute\" used in this context in some documentation.\n"
"The gist is each that each label or tag or attribute defines an additional bit of information associated with the\n"
"single numerical measurement that helps you classify, group, or aggregate the measured value later. The Micrometer API\n"
"uses `Tag` as the mechanism for specifying this additional data."
msgstr ""

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"It is possible to add a tag that would convey a little more information, however. Let's adjust our code, and move\n"
"the counter to add some tags to convey additional information."
msgstr ""

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Looking at the data produced by this counter, you can tell how often a negative number was checked, or the number one,\n"
"or an even number, and so on. Try the following sequence and look for `example_prime_number_total` in the plain text\n"
"output. Note that the `_total` suffix is added when Micrometer applies Prometheus naming conventions to\n"
"`example.prime.number`, the originally specified counter name."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/micrometer.adoc
msgid "If you did not leave Quarkus running in dev mode, start it again:"
msgstr "如果您的Quarkus从之前的开发模式下退出了，那么请再次启动它："

#. type: Plain text
#: _versions/2.16/guides/micrometer.adoc
msgid "Then execute the following sequence:"
msgstr "然后执行以下命令序列："

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"When should you use a counter? Only if you are doing something that can not be either timed (or summarized).\n"
"Counters only record a count, which may be all that is needed. However, if you want to understand more about how a\n"
"value is changing, a timer (when the base unit of measurement is time) or a distribution summary might be\n"
"more appropriate."
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/micrometer.adoc
#, no-wrap
msgid "Summaries and Timers"
msgstr ""

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Timers and distribution summaries in Micrometer are very similar. Both allow you to record an observed value, which\n"
"will be aggregated with other recorded values and stored as a sum. Micrometer also increments a counter to indicate the\n"
"number of measurements that have been recorded and tracks the maximum observed value (within a decaying interval)."
msgstr ""

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Distribution summaries are populated by calling the `record` method to record observed values, while timers provide\n"
"additional capabilities specific to working with time and measuring durations. For example, we can use a timer to\n"
"measure how long it takes to calculate prime numbers using one of the `record` methods that wraps the invocation of a\n"
"Supplier function:"
msgstr ""

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Micrometer will apply Prometheus conventions when emitting metrics for this timer. Prometheus measures time in seconds.\n"
"Micrometer converts measured durations into seconds and includes the unit in the metric name, per convention. After\n"
"visiting the prime endpoint a few more times, look in the plain text output for the following three entries:\n"
"`example_prime_number_test_seconds_count`, `example_prime_number_test_seconds_sum`, and\n"
"`example_prime_number_test_seconds_max`."
msgstr ""

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Both timers and distribution summaries can be configured to emit additional statistics, like histogram data,\n"
"precomputed percentiles, or service level objective (SLO) boundaries. Note that the count, sum, and histogram data\n"
"can be re-aggregated across dimensions (or across a series of instances), while precomputed percentile values cannot."
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/micrometer.adoc
#, no-wrap
msgid "Review automatically generated metrics"
msgstr "审查自动生成的metrics"

#. type: Plain text
#: _versions/2.16/guides/micrometer.adoc
msgid "To view metrics, execute `curl localhost:8080/q/metrics/`"
msgstr "要查看metrics，请执行 `curl localhost:8080/q/metrics/`"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"The Micrometer extension automatically times HTTP server requests. Following Prometheus naming conventions for\n"
"timers, look for `http_server_requests_seconds_count`, `http_server_requests_seconds_sum`, and\n"
"`http_server_requests_seconds_max`. Dimensional labels have been added for the requested uri, the HTTP method\n"
"(GET, POST, etc.), the status code (200, 302, 404, etc.), and a more general outcome field."
msgstr ""

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Note that metrics appear lazily, you often won't see any data for your endpoint until\n"
"something tries to access it, etc."
msgstr ""

#. type: Block title
#: _versions/2.16/guides/micrometer.adoc
#, no-wrap
msgid "Ignoring endpoints"
msgstr "忽略节点"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"You can disable measurement of HTTP endpoints using the `quarkus.micrometer.binder.http-server.ignore-patterns`\n"
"property. This property accepts a comma-separated list of simple regex match patterns identifying URI paths that should\n"
"be ignored. For example, setting `quarkus.micrometer.binder.http-server.ignore-patterns=/example/prime/[0-9]+` will\n"
"ignore a request to `http://localhost:8080/example/prime/7919`. A request to `http://localhost:8080/example/gauge/7919`\n"
"would still be measured."
msgstr ""

#. type: Block title
#: _versions/2.16/guides/micrometer.adoc
#, no-wrap
msgid "URI templates"
msgstr ""

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"The micrometer extension will make a best effort at representing URIs containing path parameters in templated form.\n"
"Using examples from above, a request to `http://localhost:8080/example/prime/7919` should appear as an attribute of\n"
"`http_server_requests_seconds_*` metrics with a value of `uri=/example/prime/{number}`."
msgstr ""

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Use the `quarkus.micrometer.binder.http-server.match-patterns` property if the correct URL can not be determined. This\n"
"property accepts a comma-separated list defining an association between a simple regex match pattern and a replacement\n"
"string. For example, setting\n"
"`quarkus.micrometer.binder.http-server.match-patterns=/example/prime/[0-9]+=/example/{jellybeans}` would use the value\n"
"`/example/{jellybeans}` for the uri attribute any time the requested uri matches `/example/prime/[0-9]+`."
msgstr ""

#. type: Block title
#: _versions/2.16/guides/micrometer.adoc
#, no-wrap
msgid "Exported metrics format"
msgstr ""

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"By default, the  metrics are exported using the Prometheus format `application/openmetrics-text`,\n"
"you can revert to the former format by specifying the `Accept` request header to `text/plain` (`curl -H \"Accept: text/plain\" localhost:8080/q/metrics/`)."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/micrometer.adoc
#, no-wrap
msgid "Using MeterFilter to configure metrics"
msgstr "使用MeterFilter来配置metrics"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Micrometer uses `MeterFilter` instances to customize the metrics emitted by `MeterRegistry` instances.\n"
"The Micrometer extension will detect `MeterFilter` CDI beans and use them when initializing `MeterRegistry`\n"
"instances."
msgstr ""

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"In this example, a singleton CDI bean will produce two different `MeterFilter` beans. One will be applied only to\n"
"Prometheus `MeterRegistry` instances (using the `@MeterFilterConstraint` qualifier), and another will be applied\n"
"to all `MeterRegistry` instances. An application configuration property is also injected and used as a tag value.\n"
"Additional examples of MeterFilters can be found in the\n"
"link:https://micrometer.io/docs/concepts[official documentation]."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/micrometer.adoc
#, no-wrap
msgid "Does Micrometer support annotations?"
msgstr "Micrometer支持注解吗？"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Micrometer does define two annotations, `@Counted` and `@Timed`, that can be added to methods. The `@Timed` annotation\n"
"will wrap the execution of a method and will emit the following tags in addition to any tags defined on the\n"
"annotation itself: class, method, and exception (either \"none\" or the simple class name of a detected exception)."
msgstr ""

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Using annotations is limited, as you can't dynamically assign meaningful tag values. Also note that many methods, e.g.\n"
"REST endpoint methods or Vert.x Routes, are counted and timed by the micrometer extension out of the box."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/micrometer.adoc
#, no-wrap
msgid "Using other Registry implementations"
msgstr "使用其他Registry实现"

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"If you aren't using Prometheus, you have a few options. Some Micrometer registry implementations\n"
"have been wrapped in\n"
"https://github.com/quarkiverse/quarkiverse-micrometer-registry[Quarkiverse extensions].\n"
"To use the Micrometer StackDriver MeterRegistry, for example, you would use the\n"
"`quarkus-micrometer-registry-stackdriver` extension:"
msgstr ""

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"If the Micrometer registry you would like to use does not yet have an associated extension,\n"
"use the `quarkus-micrometer` extension and bring in the packaged MeterRegistry dependency directly:"
msgstr ""

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"You will then need to specify your own provider to configure and initialize the\n"
"MeterRegistry, as discussed in the next section."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/micrometer.adoc
#, no-wrap
msgid "Creating a customized MeterRegistry"
msgstr "创建一个自定义的MeterRegistry"

#. type: Plain text
#: _versions/2.16/guides/micrometer.adoc
msgid "Use a custom `@Produces` method to create and configure a customized `MeterRegistry` if you need to."
msgstr "如果需要的话，请使用自定义的 `@Produces` 方法来创建和配置一个自定义的 `MeterRegistry` 。"

#. type: Plain text
#: _versions/2.16/guides/micrometer.adoc
msgid "The following example customizes the line format used for StatsD:"
msgstr "下面的例子自定义了用于StatsD的行格式："

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"This example corresponds to the following instructions in the Micrometer documentation:\n"
"https://micrometer.io/docs/registry/statsD#_customizing_the_metrics_sink"
msgstr ""

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"Note that the method returns the specific type of `MeterRegistry` as a `@Singleton`. Use MicroProfile Config\n"
"to inject any configuration attributes you need to configure the registry. Most Micrometer registry extensions,\n"
"like `quarkus-micrometer-registry-statsd`, define a producer for registry-specific configuration objects\n"
"that are integrated with the Quarkus configuration model."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/micrometer.adoc
#, no-wrap
msgid "Support for the MicroProfile Metrics API"
msgstr ""

#: _versions/2.16/guides/micrometer.adoc
msgid ""
"If you use the MicroProfile Metrics API in your application, the Micrometer extension will create an adaptive\n"
"layer to map those metrics into the Micrometer registry. Note that naming conventions between the two\n"
"systems is different, so the metrics that are emitted when using MP Metrics with Micrometer will change.\n"
"You can use a `MeterFilter` to remap names or tags according to your conventions."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/micrometer.adoc
msgid "Ensure the following dependency is present in your build file if you require the MicroProfile Metrics API:"
msgstr "如果您需要使用MicroProfile Metrics API，请确保您的构建文件中存在以下依赖："

#. type: Plain text
#: _versions/2.16/guides/micrometer.adoc
msgid "The MP Metrics API compatibility layer will be moved to a different extension in the future."
msgstr "MP Metrics API 的兼容层会在将来迁移至另外的扩展中。"

#. type: Title ==
#: _versions/2.16/guides/micrometer.adoc
#, no-wrap
msgid "Configuration Reference"
msgstr "配置参考"

#: _versions/2.16/guides/micrometer.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""
