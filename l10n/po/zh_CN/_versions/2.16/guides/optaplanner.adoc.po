# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-05-05 19:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.16/guides/optaplanner.adoc
#, no-wrap
msgid "OptaPlanner - Using AI to optimize a schedule with OptaPlanner"
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"This guide walks you through the process of creating a Quarkus application\n"
"with https://www.optaplanner.org/[OptaPlanner]'s constraint solving Artificial Intelligence (AI)."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/optaplanner.adoc
#, no-wrap
msgid "What you will build"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "You will build a REST application that optimizes a school timetable for students and teachers:"
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"Your service will assign `Lesson` instances to `Timeslot` and `Room` instances automatically\n"
"by using AI to adhere to hard and soft scheduling _constraints_, such as the following examples:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "A room can have at most one lesson at the same time."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "A teacher can teach at most one lesson at the same time."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "A student can attend at most one lesson at the same time."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "A teacher prefers to teach all lessons in the same room."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "A teacher prefers to teach sequential lessons and dislikes gaps between lessons."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "A student dislikes sequential lessons on the same subject."
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"Mathematically speaking, school timetabling is an _NP-hard_ problem.\n"
"This means it is difficult to scale.\n"
"Simply brute force iterating through all possible combinations takes millions of years\n"
"for a non-trivial dataset, even on a supercomputer.\n"
"Luckily, AI constraint solvers such as OptaPlanner have advanced algorithms\n"
"that deliver a near-optimal solution in a reasonable amount of time."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/optaplanner.adoc
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "The solution is located in {quickstarts-tree-url}/optaplanner-quickstart[the `optaplanner-quickstart` directory]."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/optaplanner.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: _versions/2.16/guides/optaplanner.adoc
#, no-wrap
msgid "The build file and the dependencies"
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"Use https://code.quarkus.io/[code.quarkus.io] to generate an application\n"
"with the following extensions, for Maven or Gradle:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "RESTEasy Reactive (`quarkus-resteasy-reactive`)"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "RESTEasy Reactive Jackson (`quarkus-resteasy-reactive-jackson`)"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "OptaPlanner (`optaplanner-quarkus`)"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "OptaPlanner Jackson (`optaplanner-quarkus-jackson`)"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "Alternatively, generate it from the command line:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "This will include the following dependencies in your build file:"
msgstr ""

#. type: Block title
#: _versions/2.16/guides/optaplanner.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/2.16/guides/optaplanner.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: _versions/2.16/guides/optaplanner.adoc
#, no-wrap
msgid "Model the domain objects"
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"Your goal is to assign each lesson to a time slot and a room.\n"
"You will create these classes:"
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/optaplanner.adoc
#, no-wrap
msgid "Timeslot"
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"The `Timeslot` class represents a time interval when lessons are taught,\n"
"for example, `Monday 10:30 - 11:30` or `Tuesday 13:30 - 14:30`.\n"
"For simplicity's sake, all time slots have the same duration\n"
"and there are no time slots during lunch or other breaks."
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"A time slot has no date, because a high school schedule just repeats every week.\n"
"So there is no need for https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/index.html#continuousPlanning[continuous planning]."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "Create the `src/main/java/org/acme/optaplanner/domain/Timeslot.java` class:"
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"Because no `Timeslot` instances change during solving, a `Timeslot` is called a _problem fact_.\n"
"Such classes do not require any OptaPlanner specific annotations."
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"Notice the `toString()` method keeps the output short,\n"
"so it is easier to read OptaPlanner's `DEBUG` or `TRACE` log, as shown later."
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/optaplanner.adoc
#, no-wrap
msgid "Room"
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"The `Room` class represents a location where lessons are taught,\n"
"for example, `Room A` or `Room B`.\n"
"For simplicity's sake, all rooms are without capacity limits\n"
"and they can accommodate all lessons."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "Create the `src/main/java/org/acme/optaplanner/domain/Room.java` class:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "`Room` instances do not change during solving, so `Room` is also a _problem fact_."
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/optaplanner.adoc
#, no-wrap
msgid "Lesson"
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"During a lesson, represented by the `Lesson` class,\n"
"a teacher teaches a subject to a group of students,\n"
"for example, `Math by A.Turing for 9th grade` or `Chemistry by M.Curie for 10th grade`.\n"
"If a subject is taught multiple times per week by the same teacher to the same student group,\n"
"there are multiple `Lesson` instances that are only distinguishable by `id`.\n"
"For example, the 9th grade has six math lessons a week."
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"During solving, OptaPlanner changes the `timeslot` and `room` fields of the `Lesson` class,\n"
"to assign each lesson to a time slot and a room.\n"
"Because OptaPlanner changes these fields, `Lesson` is a _planning entity_:"
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"Most of the fields in the previous diagram contain input data, except for the orange fields:\n"
"A lesson's `timeslot` and `room` fields are unassigned (`null`) in the input data\n"
"and assigned (not `null`) in the output data.\n"
"OptaPlanner changes these fields during solving.\n"
"Such fields are called planning variables.\n"
"In order for OptaPlanner to recognize them,\n"
"both the `timeslot` and `room` fields require an `@PlanningVariable` annotation.\n"
"Their containing class, `Lesson`, requires an `@PlanningEntity` annotation."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "Create the `src/main/java/org/acme/optaplanner/domain/Lesson.java` class:"
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"The `Lesson` class has an `@PlanningEntity` annotation,\n"
"so OptaPlanner knows that this class changes during solving\n"
"because it contains one or more planning variables."
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"The `timeslot` field has an `@PlanningVariable` annotation,\n"
"so OptaPlanner knows that it can change its value.\n"
"In order to find potential `Timeslot` instances to assign to this field,\n"
"OptaPlanner uses the `valueRangeProviderRefs` property to connect to a value range provider\n"
"(explained later) that provides a `List<Timeslot>` to pick from."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "The `room` field also has an `@PlanningVariable` annotation, for the same reasons."
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"Determining the `@PlanningVariable` fields for an arbitrary constraint solving use case\n"
"is often challenging the first time.\n"
"Read https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/index.html#domainModelingGuide[the domain modeling guidelines]\n"
"to avoid common pitfalls."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/optaplanner.adoc
#, no-wrap
msgid "Define the constraints and calculate the score"
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"A _score_ represents the quality of a specific solution.\n"
"The higher, the better.\n"
"OptaPlanner looks for the best solution, which is the solution with the highest score found in the available time.\n"
"It might be the _optimal_ solution."
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"Because this use case has hard and soft constraints,\n"
"use the `HardSoftScore` class to represent the score:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "Hard constraints must not be broken. For example: _A room can have at most one lesson at the same time._"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "Soft constraints should not be broken. For example: _A teacher prefers to teach in a single room._"
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"Hard constraints are weighted against other hard constraints.\n"
"Soft constraints are weighted too, against other soft constraints.\n"
"*Hard constraints always outweigh soft constraints*, regardless of their respective weights."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "To calculate the score, you could implement an `EasyScoreCalculator` class:"
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"Unfortunately **that does not scale well**, because it is non-incremental:\n"
"every time a lesson is assigned to a different time slot or room,\n"
"all lessons are re-evaluated to calculate the new score."
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"Instead, create a `src/main/java/org/acme/optaplanner/solver/TimeTableConstraintProvider.java` class\n"
"to perform incremental score calculation.\n"
"It uses OptaPlanner's ConstraintStream API which is inspired by Java Streams and SQL:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "The `ConstraintProvider` scales an order of magnitude better than the `EasyScoreCalculator`: __O__(n) instead of __O__(n²)."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/optaplanner.adoc
#, no-wrap
msgid "Gather the domain objects in a planning solution"
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"A `TimeTable` wraps all `Timeslot`, `Room`, and `Lesson` instances of a single dataset.\n"
"Furthermore, because it contains all lessons, each with a specific planning variable state,\n"
"it is a _planning solution_ and it has a score:"
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"If lessons are still unassigned, then it is an _uninitialized_ solution,\n"
"for example, a solution with the score `-4init/0hard/0soft`."
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"If it breaks hard constraints, then it is an _infeasible_ solution,\n"
"for example, a solution with the score `-2hard/-3soft`."
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"If it adheres to all hard constraints, then it is a _feasible_ solution,\n"
"for example, a solution with the score `0hard/-7soft`."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "Create the `src/main/java/org/acme/optaplanner/domain/TimeTable.java` class:"
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"The `TimeTable` class has an `@PlanningSolution` annotation,\n"
"so OptaPlanner knows that this class contains all the input and output data."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "Specifically, this class is the input of the problem:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "A `timeslotList` field with all time slots"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "This is a list of problem facts, because they do not change during solving."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "A `roomList` field with all rooms"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "A `lessonList` field with all lessons"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "This is a list of planning entities, because they change during solving."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "Of each `Lesson`:"
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"The values of the `timeslot` and `room` fields are typically still `null`, so unassigned.\n"
"They are planning variables."
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"The other fields, such as `subject`, `teacher` and `studentGroup`, are filled in.\n"
"These fields are problem properties."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "However, this class is also the output of the solution:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "A `lessonList` field for which each `Lesson` instance has non-null `timeslot` and `room` fields after solving"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "A `score` field that represents the quality of the output solution, for example, `0hard/-5soft`"
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/optaplanner.adoc
#, no-wrap
msgid "The value range providers"
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"The `timeslotList` field is a value range provider.\n"
"It holds the `Timeslot` instances which OptaPlanner can pick from to assign to the `timeslot` field of `Lesson` instances.\n"
"The `timeslotList` field has an `@ValueRangeProvider` annotation to connect the `@PlanningVariable` with the `@ValueRangeProvider`,\n"
"by matching the value of the `id` property with the value of the `valueRangeProviderRefs` property of the `@PlanningVariable` annotation in the `Lesson` class."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "Following the same logic, the `roomList` field also has an `@ValueRangeProvider` annotation."
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/optaplanner.adoc
#, no-wrap
msgid "The problem fact and planning entity properties"
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"Furthermore, OptaPlanner needs to know which `Lesson` instances it can change\n"
"as well as how to retrieve the `Timeslot` and `Room` instances used for score calculation\n"
"by your `TimeTableConstraintProvider`."
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"The `timeslotList` and `roomList` fields have an `@ProblemFactCollectionProperty` annotation,\n"
"so your `TimeTableConstraintProvider` can select _from_ those instances."
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"The `lessonList` has an `@PlanningEntityCollectionProperty` annotation,\n"
"so OptaPlanner can change them during solving\n"
"and your `TimeTableConstraintProvider` can select _from_ those too."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/optaplanner.adoc
#, no-wrap
msgid "Create the solver service"
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"Now you are ready to put everything together and create a REST service.\n"
"But solving planning problems on REST threads causes HTTP timeout issues.\n"
"Therefore, the Quarkus extension injects a `SolverManager` instance,\n"
"which runs solvers in a separate thread pool\n"
"and can solve multiple datasets in parallel."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "Create the `src/main/java/org/acme/optaplanner/rest/TimeTableResource.java` class:"
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"For simplicity's sake, this initial implementation waits for the solver to finish,\n"
"which can still cause an HTTP timeout.\n"
"The _complete_ implementation avoids HTTP timeouts much more elegantly."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/optaplanner.adoc
#, no-wrap
msgid "Set the termination time"
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"Without a termination setting or a termination event, the solver runs forever.\n"
"To avoid that, limit the solving time to five seconds.\n"
"That is short enough to avoid the HTTP timeout."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "Create the `src/main/resources/application.properties` file:"
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/optaplanner.adoc
#, no-wrap
msgid "Run the application"
msgstr "运行应用程序"

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "First start the application:"
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/optaplanner.adoc
#, no-wrap
msgid "Try the application"
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"Now that the application is running, you can test the REST service.\n"
"You can use any REST client you wish.\n"
"The following example uses the Linux command `curl` to send a POST request:"
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"After about five seconds, according to the termination spent time defined in your `application.properties`,\n"
"the service returns an output similar to the following example:"
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"Notice that your application assigned all four lessons to one of the two time slots and one of the two rooms.\n"
"Also notice that it conforms to all hard constraints.\n"
"For example, M. Curie's two lessons are in different time slots."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "On the server side, the `info` log show what OptaPlanner did in those five seconds:"
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/optaplanner.adoc
#, no-wrap
msgid "Test the application"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "A good application includes test coverage."
msgstr ""

#. type: Title ====
#: _versions/2.16/guides/optaplanner.adoc
#, no-wrap
msgid "Test the constraints"
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"To test each constraint in isolation, use a `ConstraintVerifier` in unit tests.\n"
"It tests each constraint's corner cases in isolation from the other tests,\n"
"which lowers maintenance when adding a new constraint with proper test coverage."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "Add a `optaplanner-test` dependency in your build file:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "Create the `src/test/java/org/acme/optaplanner/solver/TimeTableConstraintProviderTest.java` class:"
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"This test verifies that the constraint `TimeTableConstraintProvider::roomConflict`,\n"
"when given three lessons in the same room, where two lessons have the same timeslot,\n"
"it penalizes with a  match weight of `1`.\n"
"So with a constraint weight of `10hard` it would reduce the score by `-10hard`."
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"Notice how `ConstraintVerifier` ignores the constraint weight during testing - even\n"
"if those constraint weights are hard coded in the `ConstraintProvider` - because\n"
"constraints weights change regularly before going into production.\n"
"This way, constraint weight tweaking does not break the unit tests."
msgstr ""

#. type: Title ====
#: _versions/2.16/guides/optaplanner.adoc
#, no-wrap
msgid "Test the solver"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "In a JUnit test, generate a test dataset and send it to the `TimeTableResource` to solve."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "Create the `src/test/java/org/acme/optaplanner/rest/TimeTableResourceTest.java` class:"
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"This test verifies that after solving, all lessons are assigned to a time slot and a room.\n"
"It also verifies that it found a feasible solution (no hard constraints broken)."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "Add test properties to the `src/main/resources/application.properties` file:"
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"Normally, the solver finds a feasible solution in less than 200 milliseconds.\n"
"Notice how the `application.properties` overwrites the solver termination during tests\n"
"to terminate as soon as a feasible solution (`0hard/*soft`) is found.\n"
"This avoids hard coding a solver time, because the unit test might run on arbitrary hardware.\n"
"This approach ensures that the test runs long enough to find a feasible solution, even on slow machines.\n"
"But it does not run a millisecond longer than it strictly must, even on fast machines."
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/optaplanner.adoc
#, no-wrap
msgid "Logging"
msgstr "日志"

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"When adding constraints in your `ConstraintProvider`,\n"
"keep an eye on the _score calculation speed_ in the `info` log,\n"
"after solving for the same amount of time, to assess the performance impact:"
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"To understand how OptaPlanner is solving your problem internally,\n"
"change the logging in the `application.properties` file or with a `-D` system property:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "Use `debug` logging to show every _step_:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "Use `trace` logging to show every _step_ and every _move_ per step."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/optaplanner.adoc
#, no-wrap
msgid "Summary"
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"Congratulations!\n"
"You have just developed a Quarkus application with https://www.optaplanner.org/[OptaPlanner]!"
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/optaplanner.adoc
#, no-wrap
msgid "Further improvements: Database and UI integration"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "Now try adding database and UI integration:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "Store `Timeslot`, `Room`, and `Lesson` in the database with xref:hibernate-orm-panache.adoc[Hibernate and Panache]."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "xref:rest-json.adoc[Expose them through REST]."
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"Adjust the `TimeTableResource` to read and write a `TimeTable` instance in a single transaction\n"
"and use those accordingly:"
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"For simplicity's sake, this code handles only one `TimeTable` instance,\n"
"but it is straightforward to enable multi-tenancy and handle multiple `TimeTable` instances of different high schools in parallel."
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"The `getTimeTable()` method returns the latest timetable from the database.\n"
"It uses the `ScoreManager` (which is automatically injected)\n"
"to calculate the score of that timetable, so the UI can show the score."
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"The `solve()` method starts a job to solve the current timetable and store the time slot and room assignments in the database.\n"
"It uses the `SolverManager.solveAndListen()` method to listen to intermediate best solutions\n"
"and update the database accordingly.\n"
"This enables the UI to show progress while the backend is still solving."
msgstr ""

#: _versions/2.16/guides/optaplanner.adoc
msgid ""
"Adjust the `TimeTableResourceTest` instance accordingly, now that the `solve()` method returns immediately.\n"
"Poll for the latest solution until the solver finishes solving:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "Build an attractive web UI on top of these REST methods to visualize the timetable."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/optaplanner.adoc
msgid "Take a look at {quickstarts-tree-url}/optaplanner-quickstart[the quickstart source code] to see how this all turns out."
msgstr ""
