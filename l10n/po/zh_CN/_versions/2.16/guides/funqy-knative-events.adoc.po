# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-05-05 19:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy, no-wrap
msgid "Funqy Knative Events Binding"
msgstr "Funqy Knative事件绑定"

#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid ""
"Quarkus Funqy link:https://knative.dev/docs/eventing[Knative Events] builds off of the xref:funqy-http.adoc[Funqy HTTP] extension to allow you to\n"
"route and process Knative Events within a Funqy function."
msgstr "Quarkus Funqy link:https://knative.dev/docs/eventing[Knative Events] 基于 xref:funqy-http.adoc[Funqy HTTP] 扩展，允许你在 Funqy 函数中路由和处理 Knative 事件。"

#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid ""
"The guide walks through quickstart code to show you how you can deploy and invoke on Funqy functions\n"
"with Knative Events."
msgstr "本指南通过快速入门代码向您展示如何使用 Knative Events 部署和调用 Funqy 函数。"

#. type: Title ==
#: _versions/2.16/guides/funqy-knative-events.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid "Read about xref:funqy.adoc[Funqy Basics].  This is a short read!"
msgstr "阅读关于 link:funqy.html[Funqy基础知识] 。这是一个简短的阅读!"

#. type: Plain text
#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid "Have gone through the link:https://redhat-developer-demos.github.io/knative-tutorial/knative-tutorial/index.html[Knative Tutorial], specifically link:https://redhat-developer-demos.github.io/knative-tutorial/knative-tutorial/eventing/eventing-trigger-broker.html[Brokers and Triggers]"
msgstr "已经通过了 link:https://redhat-developer-demos.github.io/knative-tutorial/knative-tutorial/index.html[Knative教程] ，特别是 link:https://redhat-developer-demos.github.io/knative-tutorial/knative-tutorial-eventing/eventing-trigger-broker.html[经纪人和触发器]"

#. type: Title ==
#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy, no-wrap
msgid "Setting up Knative"
msgstr "设置Knative"

#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid ""
"Setting up Knative locally in a Minikube environment is beyond the scope of this guide.  It is advised\n"
"to follow  https://redhat-developer-demos.github.io/knative-tutorial/knative-tutorial/index.html[this] Knative Tutorial\n"
"put together by Red Hat.  It walks through how to set up Knative on Minikube or OpenShift in a local environment."
msgstr "在 Minikube 环境中本地设置 Knative 超出了本指南的范围。建议按照 Red Hat 编写 link:https://redhat-developer-demos.github.io/knative-tutorial/knative-tutorial/index.html[的] Knative 教程进行操作。它介绍了如何在本地环境中在 Minikube 或 OpenShift 上设置 Knative。"

#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid ""
"Specifically you should run the link:https://redhat-developer-demos.github.io/knative-tutorial/knative-tutorial/eventing/eventing-trigger-broker.html[Brokers and Triggers]\n"
"tutorial as this guide requires that you can invoke on a Broker to trigger the quickstart code."
msgstr "具体来说，您应该运行 \" link:https://redhat-developer-demos.github.io/knative-tutorial/knative-tutorial/eventing/eventing-trigger-broker.html[代理和触发器] \"教程，因为本指南要求您可以调用代理来触发快速启动代码。"

#. type: Title ==
#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy, no-wrap
msgid "Read about Cloud Events"
msgstr "阅读关于云计算活动"

#. type: Plain text
#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid "The Cloud Event link:https://cloudevents.io/[specification] is a good read to give you an even greater understanding of Knative Events."
msgstr "云事件 link:https://cloudevents.io/[规范] 是一个很好的读物，让你对Knative事件有更多的了解。"

#. type: Title ==
#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy, no-wrap
msgid "The Quickstart"
msgstr "快速入门"

#. type: Plain text
#: _versions/2.16/guides/funqy-knative-events.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid "The solution is located in the `funqy-knative-events-quickstart` {quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart[directory]."
msgstr "解决方案位于 `funqy-knative-events-quickstart` {quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart [目录]。"

#. type: Title ==
#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy, no-wrap
msgid "The Quickstart Flow"
msgstr "快速启动流程"

#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid ""
"The quickstart works by manually sending an HTTP request containing a Cloud Event to the Knative Broker using `curl`.\n"
"The Knative Broker receives the request and triggers the startup of the Funqy container built by the quickstart.\n"
"The event triggers the invocation of a chain of Funqy functions.  The output of one function triggers the\n"
"invocation of another Funqy function."
msgstr "快速启动的工作方式是使用 `curl` 手动向 Knative Broker 发送包含云事件的 HTTP 请求。Knative 经纪人收到请求后，会触发启动由快速启动程序构建的 Funqy 容器。事件会触发一系列 Funqy 函数的调用。一个函数的输出会触发另一个 Funqy 函数的调用。"

#. type: Title ==
#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy, no-wrap
msgid "Funqy and Cloud Events"
msgstr "Funqy和云活动"

#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid ""
"When living within a Knative Events environment, Funqy functions are triggered by a specific\n"
"Cloud Event type.  You can have multiple Funqy functions within a single application/deployment,\n"
"but they must be triggered by a specific Cloud Event Type.  The exception to this rule is if there is\n"
"only one Funqy function in the application.  In that case, the event is pushed to that function irregardless\n"
"of the Cloud Event type."
msgstr "在 Knative Events 环境中，Funqy 功能由特定的云事件类型触发。您可以在单个应用程序/部署中使用多个 Funqy 函数，但它们必须由特定的云事件类型触发。如果应用程序中只有一个 Funqy 函数，则此规则例外。在这种情况下，无论云事件类型如何，事件都会推送到该函数。"

#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid ""
"Currently, Funqy can only consume JSON-based data.  It supports both Binary and Structured mode of execution,\n"
"but the data component of the Cloud Event message must be JSON.  This JSON must also be marshallable to and from the\n"
"Java parameters and return types of your functions."
msgstr "目前，Funqy 只能消费基于 JSON 的数据。它支持二进制和结构化执行模式，但云事件消息的数据组件必须是 JSON。该 JSON 还必须能与函数的 Java 参数和返回类型进行 marshall。"

#. type: Title ==
#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy, no-wrap
msgid "The Code"
msgstr "准则"

#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid ""
"Let's start looking at our quickstart code so that you can understand how Knative Events map to Funqy.\n"
"Open up {quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/main/java/org/acme/funqy/SimpleFunctionChain.java[SimpleFunctionChain.java]"
msgstr "让我们开始看看我们的快速启动代码，以便了解 Knative 事件是如何映射到 Funqy 的。打开 {quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/main/java/org/acme/funqy/SimpleFunctionChain.java[SimpleFunctionChain.java］"

#. type: Plain text
#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid "The first function we'll look at is `defaultChain`."
msgstr "我们要看的第一个函数是 `defaultChain` 。"

#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid ""
"As is, a Funqy function has a default Cloud Event mapping.  By default, the Cloud Event type must match\n"
"the function name for the function to trigger.  If the function returns output,\n"
"the response is converted into a Cloud Event and returned to the Broker to be routed to other triggers.\n"
"The default Cloud Event type for this response is the function name + `.output`.  The default Cloud Event source is the function name."
msgstr "目前，Funqy 函数有一个默认的云事件映射。默认情况下，云事件类型必须与函数名称相匹配，函数才能触发。如果函数返回输出，则响应将转换为云事件并返回代理，以便路由到其他触发器。此响应的默认云事件类型是函数名称 + `.output` 。默认云事件源为函数名称。"

#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid ""
"So, for the `defaultChain` function, the Cloud Event type that triggers the function is `defaultChain`.  It generates\n"
"a response that triggers a new Cloud Event whose type is `defaultChain.output` and the event source is `defaultChain`."
msgstr "因此，对于 `defaultChain` 函数，触发该函数的云事件类型是 `defaultChain` 。它生成的响应会触发一个新的云事件，其类型是 `defaultChain.output` ，事件源是 `defaultChain` 。"

#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid ""
"While the default mapping is simple, it might not always be feasible.  You can change this default mapping\n"
"through configuration.  Let's look at the next function:"
msgstr "虽然默认映射很简单，但并不总是可行的。您可以通过配置更改默认映射。让我们看看下一个函数："

#. type: Plain text
#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid "The `configChain` function has its Cloud Event mapping changed by configuration within {quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/main/resources/application.properties[application.properties]."
msgstr "`configChain` 函数的云事件映射由 {quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/main/resources/application.properties[application.properties] 中的配置更改。"

#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid ""
"In this case, the configuration maps the incoming Cloud Event type `defaultChain.output` to the `configChain` function.\n"
"The `configChain` function maps its response to the `annotated` Cloud Event type, and the Cloud Event source `configChain`."
msgstr "在这种情况下，配置会将传入的云事件类型 `defaultChain.output` 映射到 `configChain` 函数。 `configChain` 函数将其响应映射到 `annotated` 云事件类型和云事件源 `configChain` 。"

#. type: Plain text
#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid "`quarkus.funqy.knative-events.mapping.{function name}.trigger` sets the Cloud Event type that triggers a specific function. It is possible to use the special value `*` as a catch-all value. The function will in this case be used for all event types."
msgstr " `quarkus.funqy.knative-events.mapping.{function name}.trigger` 设置触发一个特定函数的云事件类型。可以使用特殊值 ，作为一个总括性的值。在这种情况下，该函数将被用于所有事件类型。 `*` "

#. type: Plain text
#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid "`quarkus.funqy.knative-events.mapping.{function name}.response-type` sets the Cloud Event type of the response"
msgstr " `quarkus.funqy.knative-events.mapping.{function name}.response-type` 设置响应的云事件类型"

#. type: Plain text
#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid "`quarkus.funqy.knative-events.mapping.{function name}.resource-source` sets the Cloud Event source of the response"
msgstr " `quarkus.funqy.knative-events.mapping.{function name}.resource-source` 设置响应的云事件来源"

#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid ""
"The Funqy Knative Events extension also has annotations to do this Cloud Event mapping to your functions.  Take a look at the\n"
"`annotatedChain` method"
msgstr "Funqy Knative Events 扩展也有注解，可以将云事件映射到您的函数中。请看 `annotatedChain` 方法"

#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid ""
"If you use the `@CloudEventMapping` annotation on your function you can map the Cloud Event type trigger\n"
"and the Cloud Event response.  In this example the `annotatedChain` function will be triggered\n"
"by the `annotated` Cloud Event type and the response will be mapped to a `lastChainLink` type\n"
"and `annotated` Cloud Event source."
msgstr "如果在函数上使用 `@CloudEventMapping` 注解，您就可以映射云事件类型触发器和云事件响应。在此示例中， `annotatedChain` 函数将由 `annotated` 云事件类型触发，响应将映射到 `lastChainLink` 类型和 `annotated` 云事件源。"

#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid ""
"So, if you look at all the functions defined within `SimpleFunctionChain` you'll notice that one function triggers the next.\n"
"The last function that is triggered is `lastChainLink`."
msgstr "因此，如果查看 `SimpleFunctionChain` 中定义的所有函数，就会发现一个函数会触发下一个函数。最后一个被触发的函数是 `lastChainLink` 。"

#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid ""
"There are two things to notice about this function.  One, it has no output.  Your functions are not\n"
"required to return output.  Second, there is an additional `event` parameter to the function."
msgstr "这个函数有两点需要注意。第一，它没有输出。您的函数不需要返回输出。其次，该函数有一个额外的 `event` 参数。"

#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid ""
"If you want to know additional information about the incoming Cloud Event, you can inject the\n"
"`io.quarkus.funqy.knative.events.CloudEvent` interface using the Funqy `@Context` annotation.  The `CloudEvent` interface exposes information\n"
"about the triggering event."
msgstr "如果想了解传入云事件的其他信息，可使用 Funqy `@Context` 注解注入 `io.quarkus.funqy.knative.events.CloudEvent` 接口。 `CloudEvent` 接口公开了有关触发事件的信息。"

#. type: Title ==
#: _versions/2.16/guides/funqy-knative-events.adoc
#, no-wrap
msgid "Maven"
msgstr "Maven"

#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid ""
"If you look at the {quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/pom.xml[POM],\n"
"you'll see that it is a typical Quarkus POM that pulls in one Funqy dependency:"
msgstr "如果你查看{quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/pom.xml[POM]，就会发现这是一个典型的 Quarkus POM，其中引入了一个 Funqy 依赖项："

#. type: Title ==
#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy, no-wrap
msgid "Dev mode and Testing"
msgstr "开发模式和测试"

#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid ""
"Funqy Knative Events support dev mode and unit testing using RestAssured.  You can invoke on Funqy Knative Events functions\n"
"using the same invocation model as\n"
"xref:funqy-http.adoc[Funqy HTTP] using normal HTTP requests, or Cloud Event Binary mode, or Structured Mode.  All\n"
"invocation modes are supported at the same time."
msgstr "Funqy Knative Events 使用 RestAssured 支持开发模式和单元测试。您可以使用与 xref:funqy-http.adoc[Funqy HTTP] 相同的调用模式调用 xref:funqy-http.adoc[Funqy] Knative Events 函数，即使用普通 HTTP 请求、云事件二进制模式或结构化模式。同时支持所有调用模式。"

#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid ""
"So, if you open up the unit test code in {quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/test/java/org/acme/funqy/FunqyTest.java[FunqyTest.java]\n"
"you'll see that its simply using RestAssured to make HTTP invocations to test the functions."
msgstr "因此，如果你打开{quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/test/java/org/acme/funqy/FunqyTest.java[FunqyTest.java]中的单元测试代码，你会发现它只是使用 RestAssured 进行 HTTP 调用来测试函数。"

#. type: Plain text
#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid "Funqy also works with Quarkus Dev mode!"
msgstr "Funqy还可以与Quarkus开发模式一起使用!"

#. type: Title ==
#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy, no-wrap
msgid "Build the Project"
msgstr "构建项目"

#. type: Plain text
#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid "First build the Java artifacts:"
msgstr "首先构建Java构件。"

#. type: Plain text
#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid "Next, a docker image is required by Knative, so you'll need to build that next:"
msgstr "接下来，Knative需要一个docker镜像，所以接下来你需要构建这个镜像。"

#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid ""
"Make sure to replace `yourAccountName` with your docker or quay account name when you run `docker build`.  The\n"
"Dockerfile is a standard Quarkus dockerfile.  No special Knative magic."
msgstr "运行 `docker build` 时，确保将 `yourAccountName` 替换为你的 docker 或 quay 账户名。Dockerfile 是标准的 Quarkus dockerfile。没有特别的 Knative 魔法。"

#. type: Plain text
#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid "Push your image to docker hub or quay"
msgstr "将你的镜像推送到docker hub或quay上"

#. type: Plain text
#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid "Again, make sure to replace `yourAccountName` with your docker or quay account name when you run `docker push`."
msgstr "同样，确保在运行 `docker push` ，用你的docker或quay账户名替换 `yourAccountName` 。"

#. type: Title ==
#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy, no-wrap
msgid "Deploy to Kubernetes/OpenShift"
msgstr "部署到Kubernetes/OpenShift上"

#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid ""
"The first step is to set up the broker in our namespace.\n"
"Following is an example command from the Knative cli."
msgstr "第一步是在我们的命名空间中设置代理。下面是 Knative cli 中的一个命令示例。"

#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid ""
"The broker we have created is called `default`, this broker will receive the cloud events.\n"
"The broker is also referenced in the function YAML files."
msgstr "我们创建的代理名为 `default` ，该代理将接收云事件。函数 YAML 文件中也引用了该代理。"

#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid ""
"The second step is to define a Kubernetes/OpenShift service to point to the Docker image you created and pushed\n"
"during build. Take a look at {quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/main/k8s/funqy-service.yaml[funqy-service.yaml]"
msgstr "第二步是定义一个 Kubernetes/OpenShift 服务，指向你在构建过程中创建并推送的 Docker 镜像。请查看 {quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/main/k8s/funqy-service.yaml[funqy-service.yaml] 。"

#. type: Plain text
#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid "This is a standard Kubernetes service definition YAML file."
msgstr "这是一个标准的Kubernetes服务定义YAML文件。"

#. type: Plain text
#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid "Make sure you change the image URL to point to the image you built and pushed earlier!"
msgstr "请确保你改变图像的URL，以指向你先前建立和推送的图像"

#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid ""
"For our quickstart, one Kubernetes service will contain all functions. There's no reason you couldn't break up this\n"
"quickstart into multiple different projects and deploy a service for each function.  For simplicity, and to show that you\n"
"don't have to have a deployment per function, the quickstart combines everything into one project, image, and service."
msgstr "对于我们的快速入门项目，一个 Kubernetes 服务将包含所有功能。你没有理由不把这个快速启动分解成多个不同的项目，并为每个功能部署一个服务。为了简单起见，也为了说明不必为每个功能都部署一个服务，快速入门将所有内容合并到一个项目、映像和服务中。"

#. type: Plain text
#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid "Deploy the service:"
msgstr "部署服务。"

#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid ""
"The next step is to deploy Knative Event triggers for each of the event types. As noted in the code section, each\n"
"Funqy function is mapped to a specific Cloud Event type.  You must create Knative Event triggers that map a Cloud Event\n"
"and route it to a specific Kubernetes service.  We have 4 different triggers."
msgstr "下一步是为每种事件类型部署 Knative 事件触发器。如代码部分所述，每个 Funqy 函数都映射到特定的云事件类型。您必须创建 Knative 事件触发器，映射云事件并将其路由到特定的 Kubernetes 服务。我们有 4 种不同的触发器。"

#. type: Plain text
#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid "{quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/main/k8s/defaultChain-trigger.yaml[defaultChain-trigger.yaml]"
msgstr "{quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/main/k8s/defaultChain-trigger.yaml[defaultChain-trigger.yaml]"

#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid ""
"The `spec:filter:attributes:type` maps a Cloud Event type to the Kubernetes service defined in `spec:subscriber:ref`.\n"
"When a Cloud Event is pushed to the Broker, it will trigger the spin up of the service mapped to that event."
msgstr "`spec:filter:attributes:type` 会将云事件类型映射到 `spec:subscriber:ref` 中定义的 Kubernetes 服务。当云事件被推送到代理时，它将触发映射到该事件的服务的启动。"

#. type: Plain text
#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid "There's a trigger YAML file for each of our 4 Funqy functions.  Deploy them all:"
msgstr "我们的4个Funqy函数都有一个触发YAML文件。把它们都部署起来。"

#. type: Title ==
#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy, no-wrap
msgid "Run the demo"
msgstr "运行演示"

#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid ""
"You'll need two different terminal windows.  One to do a curl request to the Broker, the other to watch the pod log\n"
"files, so you can see the messages flowing through the Funqy function event chain."
msgstr "您需要两个不同的终端窗口。一个用于向 Broker 发送 curl 请求，另一个用于查看 pod 日志文件，这样就能看到流经 Funqy 函数事件链的消息。"

#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid ""
"Make sure you have the `stern` tool installed.  See the Knative Tutorial setup for information on that.  Run stern\n"
"to look for logs outputted by our Funqy deployment"
msgstr "确保安装了 `stern` 工具。有关信息，请参阅 Knative 教程设置。运行 stern 查找 Funqy 部署输出的日志"

#. type: Plain text
#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid "Open a separate terminal.  You'll first need to learn the URL of the broker.  Execute this command to find it."
msgstr "打开一个单独的终端。你首先需要了解经纪人的URL。执行这个命令来找到它。"

#. type: Plain text
#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid "This will provide you a URL similar to e.g.: `http://broker-ingress.knative-eventing.svc.cluster.local/knativetutorial/default`. Remember this URL."
msgstr "这将为你提供一个类似的URL，例如。 `<a href=\"http://broker-ingress.knative-eventing.svc.cluster.local/knativetutorial/default\" class=\"bare\">http://broker-ingress.knative-eventing.svc.cluster.local/knativetutorial/default</a>` .记住这个URL。"

#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid ""
"Next thing we need to do is ssh into our Kubernetes cluster so that we can send a curl request to our broker.\n"
"The following command will create a simple OS pod so we can curl into our functions."
msgstr "接下来，我们需要 ssh 进入 Kubernetes 集群，以便向代理发送 curl 请求。下面的命令将创建一个简单的操作系统 pod，这样我们就可以向我们的功能发送 curl。"

#. type: Plain text
#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid "You might need to wait a couple of seconds until the curler pod comes up. Run the following to get bash access to the curler pod:"
msgstr "你可能需要等待几秒钟，直到curler pod出现。运行下面的程序来获得bash对curler pod的访问权。"

#. type: Plain text
#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid "You will now be in a shell within the Kubernetes cluster.  Within the shell, execute this curl command , the broker address is an example and might differ based on your project or broker name."
msgstr "现在你将进入Kubernetes集群中的一个shell。在shell中，执行这个curl命令，经纪商地址是一个例子，可能会根据你的项目或经纪商名称而有所不同。"

#: _versions/2.16/guides/funqy-knative-events.adoc
#, fuzzy
msgid ""
"This posts a Knative Event to the broker, which will trigger the `defaultChain` function.  As discussed earlier, the output\n"
"of `defaultChain` triggers an event that is posted to `configChain` which triggers an event posted to `annotatedChain` then\n"
"finally to the `lastChainLink` function.  You can see this flow in your `stern` window.  Something like this should\n"
"be outputted."
msgstr "这将向代理发布一个 Knative 事件，从而触发 `defaultChain` 函数。如前所述， `defaultChain` 的输出会触发一个事件，该事件被发布到 `configChain` ，然后触发一个事件被发布到 `annotatedChain` ，最后被发布到 `lastChainLink` 函数。您可以在 `stern` 窗口看到这一流程。应该输出类似这样的内容。"
