# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-05-05 19:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.16/guides/reactive-event-bus.adoc
#, no-wrap
msgid "Using the event bus"
msgstr "使用事件总线"

#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid ""
"Quarkus allows different beans to interact using asynchronous events, thus promoting loose-coupling.\n"
"The messages are sent to _virtual addresses_.\n"
"It offers 3 types of delivery mechanism:"
msgstr "Quarkus 允许不同的 bean 使用异步事件进行交互，从而促进松耦合。消息被发送到 _虚拟地址_ 。它提供 3 种发送机制："

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
msgid "point-to-point - send the message, one consumer receives it. If several consumers listen to the address, a round-robin is applied;"
msgstr "point-to-point - 发送消息，一个消费者接收。如果有几个消费者监听该地址，则采用轮流的方式；"

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid "publish/subscribe - publish a message, all the consumers listening to the address are receiving the message;"
msgstr "发布/订阅 - 发布一个消息，所有监听该地址的消费者都会收到该消息。"

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid "request/reply - send the message and expect a response. The receiver can respond to the message in an asynchronous-fashion"
msgstr "request/reply - 发送消息并期望得到回应。接收者可以以异步方式对消息作出回应"

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid "All these delivery mechanisms are non-blocking, and are providing one of the fundamental brick to build reactive applications."
msgstr "所有这些交付机制都是无阻塞的，并且为构建反应式应用提供了基本的砖块之一。"

#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid ""
"The asynchronous message passing feature allows replying to messages which is not supported by Reactive Messaging.\n"
"However, it is limited to single-event behavior (no stream) and to local messages."
msgstr "异步消息传递功能允许回复消息，这是反应式消息传递所不支持的。不过，它仅限于单事件行为（无流）和本地消息。"

#. type: Title ==
#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy, no-wrap
msgid "Installing"
msgstr "安装"

#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid ""
"This mechanism uses the Vert.x EventBus, so you need to enable the `vertx` extension to use this feature.\n"
"If you are creating a new project, set the `extensions` parameter are follows:"
msgstr "该机制使用 Vert.x EventBus，因此需要启用 `vertx` 扩展才能使用该功能。如果要创建一个新项目，请设置 `extensions` 参数如下："

#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid ""
"If you have an already created project, the `vertx` extension can be added to an existing Quarkus project with\n"
"the `add-extension` command:"
msgstr "如果您已经创建了一个项目，可以使用 `add-extension` 命令将 `vertx` 扩展名添加到现有的 Quarkus 项目中："

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid "Otherwise, you can manually add this to the dependencies section of your build file:"
msgstr "否则，你可以手动将其添加到你的构建文件的依赖项中。"

#. type: Block title
#: _versions/2.16/guides/reactive-event-bus.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/2.16/guides/reactive-event-bus.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy, no-wrap
msgid "Consuming events"
msgstr "消耗性事件"

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid "To consume events, use the `io.quarkus.vertx.ConsumeEvent` annotation:"
msgstr "要消耗事件，请使用 `io.quarkus.vertx.ConsumeEvent` 注解。"

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid "If not set, the address is the fully qualified name of the bean, for instance, in this snippet it's `org.acme.vertx.GreetingService`."
msgstr "如果没有设置，地址就是Bean的完全合格名称，例如，在这个片段中是 `org.acme.vertx.GreetingService` 。"

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid "The method parameter is the message body. If the method returns _something_ it's the message response."
msgstr "方法参数是消息主体。如果该方法返回 _一些东西_ ，那就是消息响应。"

#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid ""
"By default, the code consuming the event must be _non-blocking_, as it's called on the Vert.x event loop.\n"
"If your processing is blocking, use the `blocking` attribute:"
msgstr "默认情况下，消耗事件的代码必须 _是非阻塞_ 的，因为它是在 Vert.x 事件循环中调用的。如果处理过程是阻塞的，请使用 `blocking` 属性："

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid "Alternatively, you can annotate your method with `@io.smallrye.common.annotation.Blocking`:"
msgstr "另外，你可以用 `@io.smallrye.common.annotation.Blocking` 来注释你的方法。"

#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid ""
"When using `@Blocking`, it ignores the value of the `blocking` attribute of `@ConsumeEvent`.\n"
"See the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture documentation] for further details on this topic."
msgstr "使用 `@Blocking` 时，它会忽略 `@ConsumeEvent` 的 `blocking` 属性值。有关此主题的更多详情，请参阅 xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture 文档] 。"

#. type: delimited block =
#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid "Asynchronous processing is also possible by returning either an `io.smallrye.mutiny.Uni` or a `java.util.concurrent.CompletionStage`:"
msgstr "异步处理也可以通过返回一个 `io.smallrye.mutiny.Uni` 或一个 `java.util.concurrent.CompletionStage` 。"

#. type: Block title
#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy, no-wrap
msgid "Mutiny"
msgstr "叛变"

#: _versions/2.16/guides/reactive-event-bus.adoc
msgid ""
"The previous example uses Mutiny reactive types.\n"
"If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "前面的例子使用了Mutiny响应式类型。如果你不熟悉Mutiny，请查看 link:mutiny-primer.html[Mutiny - 一个直观的响应式编程库] 。"

#. type: Title ===
#: _versions/2.16/guides/reactive-event-bus.adoc
#, no-wrap
msgid "Configuring the address"
msgstr "配置地址"

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
msgid "The `@ConsumeEvent` annotation can be configured to set the address:"
msgstr "可以配置 `@ConsumeEvent` 注解设置地址："

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
msgid "Receive the messages sent to the `greeting` address"
msgstr "接收发送到 `greeting` 地址的信息"

#. type: Title ===
#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy, no-wrap
msgid "Replying"
msgstr "回复"

#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid ""
"The _return_ value of a method annotated with `@ConsumeEvent` is used as response to the incoming message.\n"
"For instance, in the following snippet, the returned `String` is the response."
msgstr "注释为 `@ConsumeEvent` 的方法的 _返回值_ 用作对传入信息的响应。例如，在下面的代码段中，返回的 `String` 就是响应。"

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
msgid "You can also return a `Uni<T>` or a `CompletionStage<T>` to handle asynchronous reply:"
msgstr "你也可以返回一个 `Uni<T>` 或一个 `CompletionStage<T>` 来处理异步回复："

#. type: delimited block =
#: _versions/2.16/guides/reactive-event-bus.adoc
msgid "You can inject an `executor` if you use the Context Propagation extension:"
msgstr "如果你使用Context Propagation扩展，你可以注入一个 `executor` ："

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid "Alternatively, you can use the default Quarkus worker pool using:"
msgstr "或者，你可以使用默认的Quarkus工作池，使用。"

#. type: Title ===
#: _versions/2.16/guides/reactive-event-bus.adoc
#, no-wrap
msgid "Implementing fire and forget interactions"
msgstr "实现即发即弃（fire and forget）交互"

#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid ""
"You don't have to reply to received messages.\n"
"Typically, for a _fire and forget_ interaction, the messages are consumed and the sender does not need to know about it.\n"
"To implement this, your consumer method just returns `void`"
msgstr "您不必回复收到的信息。通常情况下，对于 \" _点火即忘_ \"的交互，信息已被消耗，发送者无需知道。要实现这一点，您的消费者方法只需返回 `void`"

#. type: Title ===
#: _versions/2.16/guides/reactive-event-bus.adoc
#, no-wrap
msgid "Dealing with messages"
msgstr "处理信息"

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid "As said above, this mechanism is based on the Vert.x event bus. So, you can also use `Message` directly:"
msgstr "如上所述，这种机制是基于Vert.x事件总线的。所以，你也可以直接使用 `Message` 。"

#. type: Title ===
#: _versions/2.16/guides/reactive-event-bus.adoc
#, no-wrap
msgid "Handling Failures"
msgstr "处理故障"

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid "If a method annotated with `@ConsumeEvent` throws an exception then:"
msgstr "如果一个用 `@ConsumeEvent` 注解的方法抛出了一个异常，那么。"

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid "if a reply handler is set then the failure is propagated back to the sender via an `io.vertx.core.eventbus.ReplyException` with code `ConsumeEvent#FAILURE_CODE` and the exception message,"
msgstr "如果设置了一个回复处理程序，那么失败就会通过一个带有代码 `ConsumeEvent#FAILURE_CODE` 和异常消息的 `io.vertx.core.eventbus.ReplyException` 传播回发送者。"

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid "if no reply handler is set then the exception is rethrown (and wrapped in a `RuntimeException` if necessary) and can be handled by the default exception handler, i.e. `io.vertx.core.Vertx#exceptionHandler()`."
msgstr "如果没有设置回复处理程序，那么异常会被重新抛出（如果需要的话，会被包裹在一个 `RuntimeException` ），并且可以由默认的异常处理程序来处理，即 `io.vertx.core.Vertx#exceptionHandler()` 。"

#. type: Title ==
#: _versions/2.16/guides/reactive-event-bus.adoc
#, no-wrap
msgid "Sending messages"
msgstr "发送信息"

#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid ""
"Ok, we have seen how to receive messages, let's now switch to the _other side_: the sender.\n"
"Sending and publishing messages use the Vert.x event bus:"
msgstr "好了，我们已经了解了如何接收信息，现在让我们切换到 _另一面_ ：发送者。发送和发布信息使用的是 Vert.x 事件总线："

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
msgid "Inject the Event bus"
msgstr "注入事件总线"

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
msgid "Send a message to the address `greeting`. Message payload is `name`"
msgstr "发送消息到地址 `greeting` 。消息的有效载荷是 `name` "

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
msgid "The `EventBus` object provides methods to:"
msgstr "`EventBus` 对象提供了以下方法："

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
msgid "`send` a message to a specific address - one single consumer receives the message."
msgstr "`send` 一个消息到一个特定的地址 - 单个消费者收到该消息。"

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
msgid "`publish` a message to a specific address - all consumers receive the messages."
msgstr "`publish` 向一个特定的地址发送消息--所有的消费者都会收到这些消息。"

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid "`send` a message and expect reply asynchronously"
msgstr " `send` 留言并期待回复"

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid "`send` a message and expect reply in a blocking manner"
msgstr " `send` 留言并期待回复"

#. type: Title ==
#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy, no-wrap
msgid "Putting things together - bridging HTTP and messages"
msgstr "把东西放在一起--桥接HTTP和消息"

#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid ""
"Let's revisit a greeting HTTP endpoint and use asynchronous message passing to delegate the call to a separated bean.\n"
"It uses the request/reply dispatching mechanism.\n"
"Instead of implementing the business logic inside the JAX-RS endpoint, we are sending a message.\n"
"This message is consumed by another bean and the response is sent using the _reply_ mechanism."
msgstr "让我们重温一下问候 HTTP 端点，并使用异步消息传递将调用委托给分离的 Bean。它使用了请求/回复分派机制。我们发送的不是 JAX-RS 端点内部的业务逻辑，而是一条消息。该消息由另一个 Bean 接收，并使用 _回复_ 机制发送回复。"

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid "First create a new project using:"
msgstr "首先创建一个新的项目，使用。"

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid "You can already start the application in _dev mode_ using:"
msgstr "你已经可以在 _开发模式_ 下使用启动应用程序。"

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid "Then, creates a new JAX-RS resource with the following content:"
msgstr "然后，创建一个包含以下内容的新 JAX-RS 资源："

#. type: Block title
#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy, no-wrap
msgid "src/main/java/org/acme/vertx/EventResource.java"
msgstr "src/main/java/org/acme/vertx/EventResource.java"

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid "send the `name` to the `greeting` address and request a response"
msgstr "将 `name` 发送到 `greeting` 地址，并要求作出回应。"

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid "when we get the response, extract the body and send it to the user"
msgstr "当我们得到响应时，提取正文并将其发送给用户"

#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid ""
"If you call this endpoint, you will wait and get a timeout. Indeed, no one is listening.\n"
"So, we need a consumer listening on the `greeting` address. Create a `GreetingService` bean with the following content:"
msgstr "如果调用该端点，您将等待并获得超时。的确，没有人在监听。因此，我们需要一个消费者监听 `greeting` 地址。创建一个 `GreetingService` Bean，内容如下："

#. type: Block title
#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy, no-wrap
msgid "src/main/java/org/acme/vertx/GreetingService.java"
msgstr "src/main/java/org/acme/vertx/GreetingService.java"

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid "This bean receives the name, and returns the greeting message."
msgstr "这个Bean接收名字，并返回问候信息。"

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid "Now, open your browser to http://localhost:8080/async/Quarkus, and you should see:"
msgstr "现在，打开你的浏览器到 http://localhost:8080/async/Quarkus 你应该看到。"

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
msgid "To better understand, let's detail how the HTTP request/response has been handled:"
msgstr "为了更好地理解，让我们详细介绍一下HTTP request/response 是如何被处理的："

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid "The request is received by the `hello` method"
msgstr "该请求由 `hello` 方法接收"

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid "a message containing the _name_ is sent to the event bus"
msgstr "含有该 _名称_ 的消息被发送到事件总线。"

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
msgid "Another bean receives this message and computes the response"
msgstr "另一个Bean收到这个消息，并计算出响应"

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
msgid "This response is sent back using the reply mechanism"
msgstr "使用回复机制发回此响应"

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
msgid "Once the reply is received by the sender, the content is written to the HTTP response"
msgstr "一旦发送方收到回复，会将内容写入 HTTP 响应"

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid "This application can be packaged using:"
msgstr "这个应用程序可以用以下方式打包。"

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid "You can also compile it as a native executable with:"
msgstr "你也可以把它编译成一个本地可执行文件。"

#. type: Title ==
#: _versions/2.16/guides/reactive-event-bus.adoc
#, no-wrap
msgid "Using codecs"
msgstr "使用编解码器"

#: _versions/2.16/guides/reactive-event-bus.adoc
msgid ""
"The https://vertx.io/docs/vertx-core/java/#event_bus[Vert.x Event Bus] uses codecs to _serialize_ and _deserialize_ objects.\n"
"Quarkus provides a default codec for local delivery.\n"
"So you can exchange objects as follows:"
msgstr "link:https://vertx.io/docs/vertx-core/java/#event_bus[Vert.x事件总线] 使用编解码器来 _序列化_ 和 _反序列化_ 对象。Quarkus为本地交付提供了一个默认的编解码器。所以你可以按以下方式交换对象："

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
#, fuzzy
msgid "If you want to use a specific codec, you need to explicitly set it on both ends:"
msgstr "如果要使用特定的编解码器，需要在两端明确设置："

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
msgid "Set the name of the codec to use to send the message"
msgstr "设置用于发送消息的编解码器的名称"

#. type: Plain text
#: _versions/2.16/guides/reactive-event-bus.adoc
msgid "Set the codec to use to receive the message"
msgstr "设置用于接收信息的编解码器"
