# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-05-05 19:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy, no-wrap
msgid "Packaging And Releasing With JReleaser"
msgstr "使用JReleaser进行包装和发布"

#. type: Plain text
#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid "This guide covers packaging and releasing CLI applications using the link:https://jreleaser.org[JReleaser] tool."
msgstr "本指南包括使用 link:https://jreleaser.org[JReleaser] 工具打包和发布CLI应用程序。"

#. type: Title ==
#: _versions/2.16/guides/jreleaser.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid "a GitHub account and a GitHub Personal Access token"
msgstr "一个GitHub账户和一个GitHub个人访问令牌"

#. type: Title ==
#: _versions/2.16/guides/jreleaser.adoc
#, no-wrap
msgid "Bootstrapping the project"
msgstr "创建项目"

#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid ""
"First, we need a project that defines a CLI application. We recommend using the xref:picocli.adoc[PicoCLI] extension.\n"
"This can be done using the following command:"
msgstr "首先，我们需要一个定义 CLI 应用程序的项目。我们建议使用 xref:picocli.adoc[PicoCLI] 扩展。使用以下命令即可完成："

#. type: Plain text
#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid "This command initializes the file structure and the minimum set of required files in the project:"
msgstr "该命令初始化了文件结构和项目中所需要的最小文件集。"

#. type: Plain text
#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid "It will also configure the picocli extension in the `pom.xml`:"
msgstr "它还将在 `pom.xml` .NET中配置picocli扩展。"

#. type: Title ==
#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy, no-wrap
msgid "Preparing the project for GitHub releases"
msgstr "为GitHub发布项目做准备"

#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid ""
"The project must be hosted at a GitHub repository before we continue. This task can be completed by logging into your\n"
"GitHub account, creating a new repository, and adding the newly created sources to said repository. Choose the `main`\n"
"branch as default to take advantage of conventions and thus configure less in your `pom.xml`."
msgstr "在继续之前，项目必须托管在 GitHub 仓库中。登录 GitHub 账户，创建一个新仓库，然后将新创建的源代码添加到该仓库，即可完成这项任务。选择 `main` 分支作为默认分支，以便利用惯例，从而在 `pom.xml` 中减少配置。"

#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid ""
"You also need a GitHub Personal Access token to be able to post a release to the repository you just created. Follow\n"
"the official documentation for\n"
"link:https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token[creating a personal access token].\n"
"Store the newly created token at a safe place for future reference. Next, you have the choice of configuring the token\n"
"as an environment variable named `JRELEASER_GITHUB_TOKEN` so that the tool can read it. Alternatively you may store\n"
"the token at a secure location of your choosing, using a `.yml`, `.toml`, `.json`, or `.properties` file. The default\n"
"location is `~/.jreleaser/config[format]`. For example, using the `.yml` format this file could look like:"
msgstr "您还需要一个 GitHub 个人访问令牌，才能向您刚刚创建的版本库发布版本。请按照官方文档 link:https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token[创建个人访问令牌] 。将新创建的令牌存放在安全的地方，以备将来参考。接下来，你可以选择将令牌配置为名为 `JRELEASER_GITHUB_TOKEN` 的环境变量，以便工具可以读取。或者，也可以使用 `.yml` 、 `.toml` 、 `.json` 或 `.properties` 文件，将令牌存储在自己选择的安全位置。默认位置是 `~/.jreleaser/config[format]` 。例如，使用 `.yml` 格式的文件可以如下所示："

#. type: Block title
#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy, no-wrap
msgid "~/.jreleaser/config.yml"
msgstr "~/.jreleaser/config.yml"

#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid ""
"Alright. Add all sources and create a first commit. You can choose your own conventions for commit messages however you\n"
"can get more bang for your buck when using JReleaser if you follow the\n"
"link:https://www.conventionalcommits.org/en/v1.0.0/[Conventional Commits] specification. Make your first commit with the\n"
"following message \"build: Add initial sources\"."
msgstr "好吧。添加所有源代码并创建第一次提交。你可以选择自己的提交信息约定，但如果遵循 \" link:https://www.conventionalcommits.org/en/v1.0.0/[约定提交] \"规范，使用 JReleaser 时就会事半功倍。第一次提交时，请输入 \"build：添加初始源代码\"。"

#. type: Title ==
#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy, no-wrap
msgid "Packaging as a Native Image distribution"
msgstr "作为本地图像分发的包装"

#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid ""
"Quarkus already knows how to create a native executable using GraalVM Native Image. The default setup will create a\n"
"single executable file following a naming convention. However, the JReleaser tool expects a distribution that is, a\n"
"conventional file structure packaged as a Zip or Tar file. The file structure must follow this layout:"
msgstr "Quarkus 已经知道如何使用 GraalVM Native Image 创建本地可执行文件。默认设置将按照命名约定创建一个可执行文件。不过，JReleaser 工具需要一个发行版，也就是打包为 Zip 或 Tar 文件的传统文件结构。文件结构必须遵循此布局："

#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid ""
"This structure lets you add all kinds of supporting files required by the executable, such as configuration files,\n"
"shell completion scripts, man pages, license, readme, and more."
msgstr "通过这种结构，您可以添加可执行文件所需的各种支持文件，如配置文件、shell 完成脚本、man 页、许可证、自述文件等。"

#. type: Title ==
#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy, no-wrap
msgid "Creating the distribution"
msgstr "创建分布"

#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid ""
"We can leverage the link:http://maven.apache.org/plugins/maven-assembly-plugin/[maven-assembly-plugin] to create such\n"
"a distribution. We'll also make use of the link:https://github.com/trustin/os-maven-plugin[os-maven-plugin] to properly\n"
"identify the platform on which this executable can run, adding said platform to the distribution's filename."
msgstr "我们可以利用 link:http://maven.apache.org/plugins/maven-assembly-plugin/[maven-assembly-plugin] 创建这样一个发行版。我们还将使用 link:https://github.com/trustin/os-maven-plugin[os-maven-plugin] 来正确标识该可执行文件的运行平台，并将该平台添加到发行版的文件名中。"

#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid ""
"First, let's add the os-maven-plugin to the `pom.xml`. This plugin works as a Maven extension and as such must be added\n"
"to the `<build>` section of the file:"
msgstr "首先，让我们将 os-maven-plugin 添加到 `pom.xml` 中。该插件作为 Maven 扩展工作，因此必须添加到文件的 `<build>` 部分："

#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid ""
"Next, native executables on Linux and macOS platforms typically do not have a file extension but Windows executables do,\n"
"we need to take care of this when renaming the generated executable. We can also place the generated distributions into\n"
"their own directory to avoid cluttering the `target` directory. Thus, let's add a couple of properties to the existing\n"
"`<properties>` section in the `pom.xml`:"
msgstr "其次，Linux 和 macOS 平台上的本地可执行文件通常没有文件扩展名，但 Windows 可执行文件却有，因此我们在重命名生成的可执行文件时需要注意这一点。我们还可以将生成的发行版放到它们自己的目录中，以避免干扰 `target` 目录。因此，让我们为 `pom.xml` .NET 目录中现有的 `<properties>` 部分添加几个属性："

#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid ""
"Now we configure the maven-assembly-plugin to create a Zip and a Tar file containing the executable and any supporting files\n"
"it may need to perform its job. Take special note on the name of the distribution, this is where we make use of the platform\n"
"properties detected by the os-maven-plugin. This plugin is configured in its own profile with the `single` goal bound to\n"
"the `package` phase. It's done this way to avoid rebuilding the distribution every single time the build is invoked, as we\n"
"only needed when we're ready for a release."
msgstr "现在，我们配置 maven-assembly-plugin 以创建一个 Zip 文件和一个 Tar 文件，其中包含可执行文件和执行任务所需的任何支持文件。请特别注意发行版的名称，这是我们使用 os-maven-plugin 检测到的平台属性的地方。该插件在自己的配置文件中配置， `single` 目标绑定到 `package` 阶段。这样做是为了避免每次调用编译时都重建发行版，因为我们只在准备发布时才需要这样做。"

#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid ""
"Note that two profiles are configured. The `dist` profile configures the assembly plugin, and it's configured in such a way that\n"
"it must be activated explicitly by passing `-Pdist` as a command flag. On the other hand the `dist-windows` profile becomes\n"
"active automatically when the build is run on a Windows platform. This second profile takes care of setting the value for the\n"
"`executable-suffix` property which is required by the assembly descriptor, as shown next:"
msgstr "请注意，我们配置了两个配置文件。 `dist` 配置文件配置汇编插件，其配置方式是必须通过 `-Pdist` 作为命令标志明确激活。另一方面，当构建在 Windows 平台上运行时， `dist-windows` 配置文件会自动激活。第二个配置文件负责设置程序集描述符所需的 `executable-suffix` 属性值，如下所示："

#. type: Block title
#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy, no-wrap
msgid "src/main/assembly/assembly.xml"
msgstr "src/main/assembly/assembly.xml"

#. type: Plain text
#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid "These are the files created by the assembly plugin when invoking `./mvnw -Pdist package` on macOS:"
msgstr "这些是在macOS上调用 `./mvnw -Pdist package` ，由汇编插件创建的文件。"

#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid ""
"Feel free to update the assembly descriptor to include additional files such as LICENSE, readme, or anything else needed by\n"
"the consumers of the executable. Make another commit right here with \"build: Configure distribution assembly\"."
msgstr "请随时更新程序集描述符，以包含额外的文件，如 LICENSE、readme 或可执行文件用户需要的任何其他文件。在此处再提交一次 \"构建：配置分发程序集\"。"

#. type: Plain text
#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid "We're ready to go to the next phase: configuring the release."
msgstr "我们已经准备好进入下一个阶段：配置发布。"

#. type: Title ==
#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy, no-wrap
msgid "Adding JReleaser"
msgstr "添加JReleaser"

#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid ""
"The JReleaser tool can be invoked in many ways: as a CLI tool, as a Docker image, or as a Maven plugin. The last option is very\n"
"convenient given that we are already working with Maven. Let's add yet another profile that contains the release configuration\n"
"as once again we don't require this behavior to be active all the time only when we're ready to post a release:"
msgstr "JReleaser 工具有多种调用方式：CLI 工具、Docker 镜像或 Maven 插件。最后一种方式非常方便，因为我们已经在使用 Maven。让我们再添加一个包含发布配置的配置文件，因为我们并不要求该行为一直处于激活状态，只有在准备发布版本时才会这样做："

#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid ""
"There are a few goals we can invoke at this point, we can for example ask JReleaser to print out its current configuration by\n"
"invoking the `./mvnw -Prelease jreleaser:config` command. The tool will output everything that it knows about the project. We\n"
"can also generate the changelog by invoking `./mvnw -Prelease jreleaser:changelog`. A file containing the changelog will be\n"
"placed at `target/jreleaser/release/CHANGELOG.md` which at this point should look like this:"
msgstr "此时我们可以调用一些目标，例如通过调用 `./mvnw -Prelease jreleaser:config` 命令，要求 JReleaser 打印出当前配置。该工具将输出它所知道的关于项目的所有信息。我们还可以调用 `./mvnw -Prelease jreleaser:changelog` 生成更新日志。包含更新日志的文件将被放置在 `target/jreleaser/release/CHANGELOG.md` ，此时应该是这样的："

#. type: Block title
#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy, no-wrap
msgid "target/jreleaser/release/CHANGELOG.md"
msgstr "target/jreleaser/release/CHANGELOG.md"

#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid ""
"Not very exciting, but we can change this by instructing JReleaser to format the changelog according to our own conventions. You\n"
"can manually specify patterns to categorize commits however if you chose to follow Conventional Commits we can instruct JReleaser\n"
"to do the same. Add the following to the JReleaser plugin configuration section:"
msgstr "这并不令人兴奋，但我们可以通过指示 JReleaser 根据我们自己的约定来格式化更新日志来改变这种情况。您可以手动指定模式来对提交进行分类，但如果您选择遵循 \"常规提交\"（Conventional Commits），我们也可以指示 JReleaser 这样做。在 JReleaser 插件配置部分添加以下内容："

#. type: Plain text
#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid "Run the previous Maven command once again and inspect the generated changelog, it should now look like this:"
msgstr "再次运行之前的Maven命令，检查生成的更新日志，现在应该是这样的。"

#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid ""
"There are more formatting options you may apply but for now these will suffice. Let's make yet another commit right now, with\n"
"\"build: Configure JReleaser plugin\" as a commit message. If you want you can generate the changelog once again and see this\n"
"latest commit added to the file."
msgstr "你还可以使用更多格式化选项，但现在这些就足够了。现在让我们再提交一次，以 \"构建：配置 JReleaser 插件 \"作为提交信息。如果你愿意，可以再次生成更新日志，查看添加到文件中的最新提交。"

#. type: Title ==
#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy, no-wrap
msgid "Adding distributions to the release"
msgstr "在发布中添加发行版本"

#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid ""
"We've reached the point where we can configure the binary distributions. If you run the `./mvnw -Prelease jreleaser:config`\n"
"command you'll notice there's no mention of any distribution files that we configured in previous steps. This is because\n"
"the tool has no implicit knowledge of them, we must tell JReleaser which files we'd like to release. This decouples creation\n"
"of distributions from release assets as you might like to add or remove files at your leisure. For this particular case we'll\n"
"configure Zip files for both macOS and Windows, and a Tar file for Linux. These files must be added to the JReleaser plugin\n"
"configuration section, like so:"
msgstr "现在我们可以配置二进制发行版了。如果运行 `./mvnw -Prelease jreleaser:config` 命令，你会发现其中没有提到我们在前面步骤中配置的任何发布文件。这是因为该工具并不隐含这些文件，我们必须告诉 JReleaser 我们想要发布哪些文件。这将发行版的创建与发行资产分离开来，因为你可能想随意添加或删除文件。在本例中，我们将为 macOS 和 Windows 配置 Zip 文件，为 Linux 配置 Tar 文件。这些文件必须像这样添加到 JReleaser 插件的配置部分："

#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid ""
"We can appreciate a distribution named `app` (same as the project's artifactId for convenience) with 3 configured artifacts.\n"
"Note the use of Maven properties and Mustache templates to define the paths. You may use explicit values if you want or rely\n"
"on properties to parameterize the configuration. Maven properties resolve eagerly during build validation while Mustache\n"
"templates resolve lazily during the execution of the JReleaser plugin goals. Each artifact must define a `platform`\n"
"property that uniquely identifies them. If we run the `./mvnw -Prelease jreleaser:config` we'll quickly get an error as now\n"
"that there's a configured distribution the plugin expects more metadata to be provided by the project:"
msgstr "我们可以看到一个名为 `app` （为方便起见，与项目的 artifactId 相同）的发布包，其中有 3 个配置好的工件。注意使用 Maven 属性和 Mustache 模板来定义路径。您可以根据需要使用显式值，也可以依赖属性来参数化配置。Maven 属性在构建验证过程中急于解析，而 Mustache 模板则在执行 JReleaser 插件目标时懒于解析。每个工件都必须定义一个 `platform` 属性来唯一标识它们。如果我们运行 `./mvnw -Prelease jreleaser:config` ，很快就会出错，因为现在已经有了一个配置好的发布版本，插件希望项目提供更多的元数据："

#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid ""
"This metadata can be provided in two ways: either as part of the JReleaser plugin's configuration or using standard\n"
"POM elements. If you choose the former option then the plugin's configuration may look like this:"
msgstr "提供元数据的方式有两种：一种是作为 JReleaser 插件配置的一部分，另一种是使用标准 POM 元素。如果选择前一种方式，插件的配置可能如下所示："

#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid ""
"If you choose to use standard POM elements then your `pom.xml` must contain these entries at the very least, of course\n"
"adapting values to your own:"
msgstr "如果您选择使用标准 POM 元素，那么您的 `pom.xml` 至少必须包含这些条目，当然也可以根据自己的需要调整值："

#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid ""
"Yet, we're not still out of the woods as invoking the `./mvnw -Prelease jreleaser:config` once more will still result in\n"
"another error, this time the failure relates to missing artifacts. This is because we did not assemble all required\n"
"artifacts, yet the plugin expects them to be readily available. Here you have the choice to build the required artifacts\n"
"on other nodes then copy them to their expected locations -- a task that can be performed running a GitHub Actions\n"
"workflow on multiple nodes. Or you can instruct JReleaser to ignore some artifacts and select only those that match your\n"
"current platform. Previously we showed how the distribution would look like when created on macOS, assuming we're still on\n"
"that platform we have the correct artifact."
msgstr "然而，我们并没有摆脱困境，因为再次调用 `./mvnw -Prelease jreleaser:config` 仍然会导致另一个错误，这次的故障与缺少工件有关。这是因为我们没有组装好所有需要的工件，而插件却希望它们是现成的。在这里，你可以选择在其他节点上构建所需的工件，然后将它们复制到预期位置--这项任务可以在多个节点上运行 GitHub Actions 工作流来完成。或者，你也可以指示 JReleaser 忽略某些工件，只选择与当前平台相匹配的工件。之前我们展示了在 macOS 上创建的发行版，假设我们仍在该平台上，并拥有正确的工件。"

#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid ""
"We can instruct JReleaser to select only artifacts that match macOS at this point by invoking the `jreleaser:config` goal\n"
"with an additional flag: `./mvnw -Prelease jreleaser:config -Djreleaser.select.current.platform`. This time the command\n"
"will succeed and print out the model. Note that only the path for the macOS artifact has been fully resolved, leaving the\n"
"other 2 paths untouched."
msgstr "我们可以通过调用 `jreleaser:config` 目标来指示 JReleaser 在此时只选择与 macOS 匹配的工件，并加上一个额外的标志： `./mvnw -Prelease jreleaser:config -Djreleaser.select.current.platform` 。这次命令将成功并打印出模型。请注意，只有 macOS 工件的路径已完全解析，其他两个路径未被触及。"

#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid ""
"Let's make one more commit here with \"build: Configure distribution artifacts\" as message. We can create a release right\n"
"now, by invoking a different goal: `./mvnw -Prelease jreleaser:release -Djreleaser.select.current.platform`. This will\n"
"create a Git release at the chosen repository, which includes tagging the repository, uploading the changelog, all\n"
"distribution artifacts and their checksum as release assets."
msgstr "让我们再提交一次，以 \"构建：配置发布工件 \"作为信息。我们现在就可以调用不同的目标创建一个发布版本： `./mvnw -Prelease jreleaser:release -Djreleaser.select.current.platform` 。这将在选定的版本库中创建一个 Git 版本，包括标记版本库、上传更新日志、所有发布工件及其校验和作为发布资产。"

#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid ""
"But before we do that let's add one additional feature, let's create a Homebrew formula that will make it easy for macOS\n"
"users to consume the binary distribution, shall we?"
msgstr "但在此之前，让我们先增加一项功能，创建一个 Homebrew 公式，让 macOS 用户能轻松使用二进制发行版，好吗？"

#. type: Title ==
#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy, no-wrap
msgid "Configuring Homebrew as a packager"
msgstr "将Homebrew配置为一个打包器"

#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid ""
"link:https://brew.sh/[Homebrew] is a popular choice among macOS users to install and manage binaries. Homebrew packages\n"
"are at their core a Ruby file (known as a formula) that's executed on the target environment to install or upgrade a\n"
"particular binary. JReleaser can create formulae from binary distributions such as the one we already have configured."
msgstr "在 macOS 用户中， link:https://brew.sh/[Homebrew] 是安装和管理二进制文件的热门选择。Homebrew 软件包的核心是一个 Ruby 文件（称为公式），在目标环境中执行该文件即可安装或升级特定的二进制文件。JReleaser 可以从二进制发行版中创建公式，比如我们已经配置好的发行版。"

#. type: Plain text
#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid "For this to work we simply have to enable Homebrew in the JReleaser plugin configuration like so:"
msgstr "要做到这一点，我们只需在JReleaser插件的配置中启用Homebrew，像这样。"

#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid ""
"One last thing: it's a good practice to publish Homebrew formulae for non-snapshot releases thus change the project's version\n"
"from `1.0.0-SNAPSHOT` to say `1.0.0.Alpha1` or go directly with `1.0.0` as you feel like doing. One last commit, and we're done:\n"
"say `feat: Add Homebrew packager configuration` as commit message. Alright, we're finally ready, let's post a release!"
msgstr "最后一件事：发布非快照版本的 Homebrew 公式是个好做法，因此请将项目版本从 `1.0.0-SNAPSHOT` 改为 `1.0.0.Alpha1` 或直接使用 `1.0.0` 。最后一次提交，我们就大功告成了：在提交信息中注明 `feat: Add Homebrew packager configuration` 。好了，我们终于准备好了，开始发布吧！"

#. type: Title ==
#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy, no-wrap
msgid "Creating a release"
msgstr "创建一个版本"

#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid ""
"It's been quite the whirlwind tour of adding configuration to the `pom.xml` but that's just for getting the project ready for\n"
"its first release; subsequent release require less tampering with configuration. We can create a git release and the\n"
"Homebrew formula with the `jreleaser:full-release` goal but if you still have some doubts on how things may play out then\n"
"you can invoke the goal in dry-run mode that is, let JReleaser perform all local operations as needed without affecting\n"
"remote resources such as Git repositories. This is how it would look like:"
msgstr "在 `pom.xml` 中添加配置的过程可谓一波三折，但这只是为项目的首次发布做准备，后续发布对配置的篡改会更少。我们可以使用 `jreleaser:full-release` 目标创建一个 git 版本和 Homebrew 公式，但如果你对事情的发展仍有疑问，可以在干运行模式下调用目标，即让 JReleaser 按需要执行所有本地操作，而不影响 Git 仓库等远程资源。这就是它的样子："

#. type: Plain text
#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid "JReleaser will perform the following tasks for us:"
msgstr "JReleaser将为我们执行以下任务。"

#. type: Plain text
#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid "Generate a changelog based on all commits from the last tag (if any) to the latest commit."
msgstr "根据从最后一个标签（如果有的话）到最新提交的所有提交，生成一份更新日志。"

#. type: Plain text
#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid "Calculate SHA256 (default) checksums for all input files."
msgstr "计算所有输入文件的SHA256（默认）校验和。"

#. type: Plain text
#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid "Sign all files with GPG. In our case we did not configure this step thus it's skipped."
msgstr "用GPG签署所有文件。在我们的案例中，我们没有配置这个步骤，因此它被跳过了。"

#. type: Plain text
#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid "Upload assets to JFrog Artifactory or AWS S3. We also skip this step as it's not configured."
msgstr "上传资产到JFrog Artifactory或AWS S3。我们也跳过这一步，因为它没有被配置。"

#. type: Plain text
#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid "Create a Git release at the chosen repository, tagging it."
msgstr "在所选版本库中创建 Git 版本，并对其进行标记。"

#. type: Plain text
#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid "Upload all assets, including checksums."
msgstr "上传所有资产，包括校验和。"

#. type: Plain text
#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid "Create a Homebrew formula, publishing to pass:[https://github.com/aalmiray/homebrew-tap]."
msgstr "创建自制公式，发布到 https://github.com/aalmiray/homebrew-tap。"

#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid ""
"Of course no remote repository was affected as we can appreciate the `-Djreleaser.dry.run=true` property was in effect. If you're\n"
"so inclined inspect the contents of `target/jreleaser/package/app/brew/Formula/app.rb` which defines the Homebrew formula\n"
"to be published. It should look something like this:"
msgstr "当然，由于 `-Djreleaser.dry.run=true` 属性有效，因此没有远程版本库受到影响。如果你想查看 `target/jreleaser/package/app/brew/Formula/app.rb` 的内容，它定义了要发布的 Homebrew 公式。它应该是这样的"

#. type: Block title
#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy, no-wrap
msgid "app.rb"
msgstr "app.rb"

#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid ""
"When ready, create a release for real this time by simply removing the `-Djreleaser.dry.run` flag from the command line, then\n"
"browse to your repository and look at the freshly created release."
msgstr "准备就绪后，只需从命令行中移除 `-Djreleaser.dry.run` 标志，就能真正创建一个发布版本，然后浏览你的版本库，查看新创建的发布版本。"

#. type: Title ==
#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy, no-wrap
msgid "Further reading"
msgstr "进一步阅读"

#. type: Plain text
#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid "link:https://jreleaser.org/guide/latest/index.html[JReleaser] documentation."
msgstr "link:https://jreleaser.org/guide/latest/index.html[JReleaser] 文档。"

#. type: Title ==
#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy, no-wrap
msgid "Reference"
msgstr "参考资料"

#. type: Plain text
#: _versions/2.16/guides/jreleaser.adoc
#, fuzzy
msgid "As a reference, these are the full contents of the `pom.xml`:"
msgstr "以下是 `pom.xml` 的全部内容，以供参考："
