msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Simplified Hibernate Reactive with Panache"
msgstr "使用Panache简化Hibernate Reactive"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid ""
"link:https://hibernate.org/reactive/[Hibernate Reactive] is the only reactive Jakarta Persistence (formerly known as JPA) implementation and offers you the full\n"
"breadth of an Object Relational Mapper allowing you to access your database over reactive drivers.\n"
"It makes complex mappings possible, but it does not make simple and common mappings trivial.\n"
"Hibernate Reactive with Panache focuses on making your entities trivial and fun to write in Quarkus."
msgstr "link:https://hibernate.org/reactive/[Hibernate Reactive] 是唯一的反应式 Jakarta Persistence（以前称为 JPA）实现，为您提供对象关系映射器的全部功能，允许您通过反应式驱动程序访问数据库。它使复杂的映射成为可能，但不会使简单和普通的映射变得微不足道。Hibernate Reactive with Panache》的重点是让你的实体在 Quarkus 中变得琐碎而有趣。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid ""
"Hibernate Reactive is not a replacement for xref:hibernate-orm-panache.adoc[Hibernate ORM] or the future of Hibernate ORM.\n"
"It is a different stack tailored for reactive use cases where you need high-concurrency."
msgstr "Hibernate Reactive 不是 xref:hibernate-orm-panache.adoc[Hibernate ORM] 的替代品，也不是 Hibernate ORM 的未来。它是为需要高并发性的反应式用例量身定制的不同堆栈。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid ""
"Furthermore, using RESTEasy Reactive, our default REST layer, does not require the use of Hibernate Reactive.\n"
"It is perfectly valid to use RESTEasy Reactive with Hibernate ORM,\n"
"and if you do not need high-concurrency, or are not accustomed to the reactive paradigm, it is recommended to use Hibernate ORM."
msgstr "此外，使用 RESTEasy Reactive（我们的默认 REST 层）并不需要使用 Hibernate Reactive。将 RESTEasy Reactive 与 Hibernate ORM 结合使用是完全有效的，如果你不需要高并发性，或者不习惯反应式范例，建议使用 Hibernate ORM。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "First: an example"
msgstr "首先看一个例子"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid "What we're doing in Panache allows you to write your Hibernate Reactive entities like this:"
msgstr "我们在 Panache 所做的工作允许你像这样编写 Hibernate Reactive 实体："

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid ""
"You have noticed how much more compact and readable the code is?\n"
"Does this look interesting? Read on!"
msgstr "你有注意到代码的紧凑性和可读性大大提高了吗？看起来很有趣吧？请继续阅读!"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid "The `list()` method might be surprising at first. It takes fragments of HQL (JP-QL) queries and contextualizes the rest. That makes for very concise but yet readable code."
msgstr "`list()` 方法可能会让人大吃一惊。它采用 HQL（JP-QL）查询的片段，并将其余部分上下文化。这使得代码非常简洁但可读。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid ""
"What was described above is essentially the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[active record pattern], sometimes just called the entity pattern.\n"
"Hibernate with Panache also allows for the use of the more classical link:https://martinfowler.com/eaaCatalog/repository.html[repository pattern] via `PanacheRepository`."
msgstr "上面描述的基本上是 link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[活动记录模式] ，有时也称为实体模式。使用 Panache 的 Hibernate 还可以通过 `PanacheRepository` 使用更经典的 link:https://martinfowler.com/eaaCatalog/repository.html[存储库模式] 。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Solution"
msgstr "解决方案"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库： `git clone {quickstarts-clone-url}` ，或者下载 {quickstarts-archive-url}[存档] 。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid "The solution is located in the `hibernate-reactive-panache-quickstart` link:{quickstarts-tree-url}/hibernate-reactive-panache-quickstart[directory]."
msgstr "解决方案位于 `hibernate-reactive-panache-quickstart` link:{quickstarts-tree-url}/hibernate-reactive-panache-quickstart[目录] 中。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid "If your project is already configured to use other annotation processors, you will need to additionally add the Panache annotation processor:"
msgstr "如果您的项目已配置使用其他注释处理器，则需要额外添加 Panache 注释处理器："

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Setting up and configuring Hibernate Reactive with Panache"
msgstr "在Hibernate Reactive中配置Panache"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "To get started:"
msgstr "按以下步骤开始："

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "add your settings in `{config-file}`"
msgstr "在 `{config-file}` 中添加你的设置。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "annotate your entities with `@Entity`"
msgstr "给实体类增加 `@Entity` 注解"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "make your entities extend `PanacheEntity` (optional if you are using the repository pattern)"
msgstr "实体类改为继承 `PanacheEntity` 类（使用Repository模式时为可选操作）。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Follow the xref:hibernate-orm.adoc#setting-up-and-configuring-hibernate-orm[Hibernate set-up guide for all configuration]."
msgstr "按照 link:hibernate-orm.html#setting-up-and-configuring-hibernate-orm[Hibernate 设置指南] 进行其他配置。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "In your `pom.xml`, add the following dependencies:"
msgstr "在你的 `pom.xml` 文件中添加以下依赖项："

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "the Hibernate Reactive with Panache extension"
msgstr "Hibernate Reactive with Panache扩展"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "your reactive driver extension (`quarkus-reactive-pg-client`, `quarkus-reactive-mysql-client`, `quarkus-reactive-db2-client`, ...)"
msgstr "响应式驱动扩展 ( `quarkus-reactive-pg-client` , `quarkus-reactive-mysql-client` , `quarkus-reactive-db2-client` , ...)"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "For instance:"
msgstr "比如："

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Then add the relevant configuration properties in `{config-file}`."
msgstr "然后在 `{config-file}` 添加相关配置。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Solution 1: using the active record pattern"
msgstr "解决方案1：使用Active Record模式"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Defining your entity"
msgstr "定义实体类"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid ""
"To define a Panache entity, simply extend `PanacheEntity`, annotate it with `@Entity` and add your\n"
"columns as public fields:"
msgstr "要定义一个Panache实体类，只需继承 `PanacheEntity` ，增加 `@Entity` 注解，并将数据库列作为公共字段添加到实体类："

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid ""
"You can put all your Jakarta Persistence column annotations on the public fields. If you need a field to not be persisted, use the\n"
"`@Transient` annotation on it. If you need to write accessors, you can:"
msgstr "您可以在公共字段上添加所有 Jakarta 持久化列注解。如果需要某个字段不被持久化，请使用 `@Transient` 注解。如果需要编写访问器，也可以这样做："

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid ""
"And thanks to our field access rewrite, when your users read `person.name` they will actually call your `getName()` accessor,\n"
"and similarly for field writes and the setter.\n"
"This allows for proper encapsulation at runtime as all fields calls will be replaced by the corresponding getter/setter calls."
msgstr "而且由于我们的字段访问重写，当你的用户读取 `person.name` ，他们实际上会调用你的 `getName()` 方法，类似的还有字段写入和设置器。这允许在运行时进行适当的封装，因为所有字段的调用都将被相应的getter/setter调用所取代。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Most useful operations"
msgstr "常用操作"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Once you have written your entity, here are the most common operations you will be able to perform:"
msgstr "写好了实体类之后，你可以执行以下一些最常见的操作："

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Adding entity methods"
msgstr "添加实体方法"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid ""
"Add custom queries on your entities inside the entities themselves.\n"
"That way, you and your co-workers can find them easily, and queries are co-located with the object they operate on.\n"
"Adding them as static methods in your entity class is the Panache Active Record way."
msgstr "在实体本身内部的实体上添加自定义查询。这样，您和您的同事可以轻松找到它们，并且查询与他们操作的对象位于同一位置。将它们作为静态方法添加到实体类中是 Panache Active Record 方式。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Solution 2: using the repository pattern"
msgstr "解决方案2：使用Repository模式"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid "When using the repository pattern, you can define your entities as regular Jakarta Persistence entities."
msgstr "使用存储库模式时，您可以将实体定义为常规的 Jakarta Persistence 实体。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid ""
"If you don't want to bother defining getters/setters for your entities, you can make them extend `PanacheEntityBase` and\n"
"Quarkus will generate them for you. You can even extend `PanacheEntity` and take advantage of the default ID it provides."
msgstr "如果你不想自己定义实体的getter和setter方法，可以让实体类继承 `PanacheEntityBase` ，Quarkus将自动生成getter和setter方法。你也可以继承 `PanacheEntity` ，相比 `PanacheEntityBase` ，其优势是它还提供默认的ID字段。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Defining your repository"
msgstr "定义Repository"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid ""
"When using Repositories, you get the exact same convenient methods as with the active record pattern, injected in your Repository,\n"
"by making them implements `PanacheRepository`:"
msgstr "使用 Repository 模式时，通过实现 `PanacheRepository` 接口，你可以使用与Active Record模式下完全相同的便捷方法："

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid ""
"All the operations that are defined on `PanacheEntityBase` are available on your repository, so using it\n"
"is exactly the same as using the active record pattern, except you need to inject it:"
msgstr "`PanacheEntityBase` 中定义的所有方法都可以在你的Repository类上使用，所以它使用起来与Active Record模式完全一样，只是你需要注入Repository类的实例："

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Once you have written your repository, here are the most common operations you will be able to perform:"
msgstr "写好了Repository类之后，你可以执行以下一些最常见的操作："

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid ""
"The rest of the documentation show usages based on the active record pattern only,\n"
"but keep in mind that they can be performed with the repository pattern as well.\n"
"The repository pattern examples have been omitted for brevity."
msgstr "其余的文档只展示了基于活动记录模式的用法，但请记住，这些用法也可以用资源库模式来执行。为了简洁起见，已省略存储库模式示例。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Advanced Query"
msgstr "高级查询"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Paging"
msgstr "分页"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid ""
"You should only use the `list` methods if your table contains small enough data sets. For larger data\n"
"sets you can use the `find` method equivalents, which return a `PanacheQuery` on which you can do paging:"
msgstr "如果你的表数据量很小，你应该只用到 `list` 方法。对于较大的数据集，你可以使用对应的 `find` 方法，它返回一个 `PanacheQuery` ，可以对其进行分页查询操作："

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "The `PanacheQuery` type has many other methods to deal with paging and returning streams."
msgstr "`PanacheQuery` 类还有很多其他方法来做分页查询、返回流。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Using a range instead of pages"
msgstr "使用范围查询而替代分页查询"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "`PanacheQuery` also allows range-based queries."
msgstr "`PanacheQuery` 也支持基于范围的查询。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid ""
"You cannot mix ranges and pages: if you use a range, all methods that depend on having a current page will throw an `UnsupportedOperationException`;\n"
"you can switch back to paging using `page(Page)` or `page(int, int)`."
msgstr "你不能混合使用ranges和pages：如果你使用range，所有依赖于拥有当前页面的方法将抛出一个 `UnsupportedOperationException` ；你可以使用 `page(Page)` 或 `page(int, int)` 切换回分页。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Sorting"
msgstr "排序"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "All methods accepting a query string also accept the following simplified query form:"
msgstr "所有接收查询字符串的方法也能接收以下简化形式的查询："

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid "But these methods also accept an optional `Sort` parameter, which allows you to abstract your sorting:"
msgstr "但是，这些方法也接受一个可选的 `Sort` 参数，这样就可以对排序进行抽象："

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid "The `Sort` class has plenty of methods for adding columns and specifying sort direction or the null precedence."
msgstr "`Sort` 类有大量方法用于添加列和指定排序方向或空优先级。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Simplified queries"
msgstr "简化查询"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid ""
"Normally, HQL queries are of this form: `from EntityName [where ...] [order by ...]`, with optional elements\n"
"at the end."
msgstr "通常情况下，HQL查询语句是这种形式： `from EntityName [where ...​] [order by ...​]` ，结尾处有可选元素。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "If your select query does not start with `from`, we support the following additional forms:"
msgstr "如果你的查询语句不是以 `from` 开始，我们还支持以下的形式："

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "`order by ...` which will expand to `from EntityName order by ...`"
msgstr "`order by ...` 语句会被扩展为： `from EntityName order by ...` "

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "`<singleColumnName>` (and single parameter) which will expand to `from EntityName where <singleColumnName> = ?`"
msgstr "`<singleColumnName>` (带单个参数）语句会被扩展为： `from EntityName where <singleColumnName> = ?` "

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "`<query>` will expand to `from EntityName where <query>`"
msgstr "`<query>` 语句会被扩展为： `from EntityName where <query>` "

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "If your update query does not start with `update`, we support the following additional forms:"
msgstr "如果你的更新语句不是以 `update` 开始，我们还支持以下的形式："

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "`from EntityName ...` which will expand to `update from EntityName ...`"
msgstr "`from EntityName ...​` 语句会被扩展为： `update from EntityName ...​` "

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "`set? <singleColumnName>` (and single parameter) which will expand to `update from EntityName set <singleColumnName> = ?`"
msgstr "`set? <singleColumnName>` (带单个参数）语句会被扩展为： `update from EntityName set <singleColumnName> = ?` "

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "`set? <update-query>` will expand to `update from EntityName set <update-query>`"
msgstr "`set? <update-query>` 语句会被扩展为： `update from EntityName set <update-query>` "

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "If your delete query does not start with `delete`, we support the following additional forms:"
msgstr "如果你的删除语句不是以 `delete` 开始，我们还支持以下的形式："

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "`from EntityName ...` which will expand to `delete from EntityName ...`"
msgstr "`from EntityName ...​` 语句会被扩展为： `delete from EntityName ...​` "

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "`<singleColumnName>` (and single parameter) which will expand to `delete from EntityName where <singleColumnName> = ?`"
msgstr "`<singleColumnName>` (带单个参数）语句会被扩展为： `delete from EntityName where <singleColumnName> = ?` "

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "`<query>` will expand to `delete from EntityName where <query>`"
msgstr "`<query>` 语句会被扩展为： `delete from EntityName where <query>` "

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid ""
"You can also write your queries in plain\n"
"link:{hibernate-orm-docs-url}#hql[HQL]:"
msgstr "您也可以使用纯 link:{hibernate-orm-docs-url}#hql[HQL] 编写查询："

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Named queries"
msgstr "命名查询"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "You can reference a named query instead of a (simplified) HQL query by prefixing its name with the '#' character. You can also use named queries for count, update and delete queries."
msgstr "除了上述的简化HQL查询以外，你还可以定义一个命名查询，然后通过'#'字符加命名来（在HQL中）引用它。在计数、更新和删除查询中也可以使用命名查询。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid ""
"Named queries can only be defined inside your Jakarta Persistence entity classes (being the Panache entity class, or the repository parameterized type),\n"
"or on one of its super classes."
msgstr "命名查询只能在 Jakarta Persistence 实体类（Panache 实体类或存储库参数化类型）中定义，或在其超级类中定义。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Query parameters"
msgstr "查询参数"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "You can pass query parameters by index (1-based) as shown below:"
msgstr "你可以通过索引（从1开始）传递查询参数，如下所示："

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Or by name using a `Map`:"
msgstr "或者使用 `Map` ，用key做参数名："

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Or using the convenience class `Parameters` either as is or to build a `Map`:"
msgstr "或者使用 `Parameters` 类，也可以方便地构造一个 `Map` ："

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Every query operation accepts passing parameters by index (`Object...`), or by name (`Map<String,Object>` or `Parameters`)."
msgstr "所有查询操作都可以接收按索引（ `Object...​` ）或按名称（ `Map<String,Object>` 或 `Parameters` ）传递的参数。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Query projection"
msgstr "查询结果投影"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Query projection can be done with the `project(Class)` method on the `PanacheQuery` object that is returned by the `find()` methods."
msgstr "对 `find()` 方法返回的 `PanacheQuery` 对象，可以使用 `project(Class)` 方法投影到指定的实体类。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "You can use it to restrict which fields will be returned by the database."
msgstr "你可以用投影限制数据库返回哪些字段。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid ""
"Hibernate will use **DTO projection** and generate a SELECT clause with the attributes from the projection class.\n"
"This is also called **dynamic instantiation** or **constructor expression**, more info can be found on the Hibernate guide:\n"
"link:{hibernate-orm-docs-url}#hql-select-clause[hql select clause]"
msgstr "Hibernate 将使用 *DTO 投影* 并生成一个带有投影类属性的 SELECT 子句。这也被称为 *动态实例化* 或 *构造函数表达式* ，更多信息请参见 Hibernate 指南： link:{hibernate-orm-docs-url}#hql-select-clause[HQL SELECT 子句]"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid ""
"The projection class needs to be a valid Java Bean and have a constructor that contains all its attributes, this constructor will be used to\n"
"instantiate the projection DTO instead of using the entity class. This must be the only constructor of the class."
msgstr "投影类必须是有效的Java Bean，并且拥有一个包含所有属性的构造方法，这个构造方法用于实例化投影DTO，而不是使用实体类。这个构造方法必须是唯一的构造方法。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation. More details about the `@RegisterForReflection` annotation can be found on  the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr "`@RegisterForReflection` 注解用于指导Quarkus在native编译过程中保留该类和其成员。关于 `@RegisterForReflection` 注解的更多细节可以在 link:writing-native-applications-tips.html#registerForReflection[native应用程序提示] 页面找到。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "We use public fields here, but you can use private fields and getters/setters if you prefer."
msgstr "在这里我们使用public的字段，你也可以使用private字段和对应的getter/setter方法。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "This constructor will be used by Hibernate, and it must have a matching constructor with all the class attributes as parameters."
msgstr "Hibernate会用到这个构造方法，它必须有一个匹配的构造函数，所有的类属性都是参数。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid ""
"The implementation of the `project(Class)` method uses the constructor's parameter names to build the select clause of the query,\n"
"so the compiler must be configured to store parameter names inside the compiled class.\n"
"This is enabled by default if you are using the Quarkus Maven archetype. If you are not using it, add the property `<maven.compiler.parameters>true</maven.compiler.parameters>` to your pom.xml."
msgstr "在 `project(Class)` 方法的实现中，使用构造函数的参数名来构建查询的select子句，所以编译器必须配置为在编译的类中保留参数名。如果是使用Quarkus Maven archetype创建的项目，该功能默认是启用的。如果你没有使用，请在你的 `pom.xml` 中添加该属性 `<maven.compiler.parameters>true</maven.compiler.parameters>` 。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "If in the DTO projection object you have a field from a referenced entity, you can use the `@ProjectedFieldName` annotation to provide the path for the SELECT statement."
msgstr "如果DTO投影对象中有来自引用的实体字段，可以使用 `@ProjectedFieldName` 注解指定SELECT语句使用的查询路径。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "The `ownerName` DTO constructor's parameter will be loaded from the `owner.name` HQL property."
msgstr "DTO构造器的 `ownerName` 参数将从 `owner.name` HQL属性加载。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid ""
"It is also possible to specify a HQL query with a select clause. In this case, the projection class must have a constructor\n"
"matching the values returned by the select clause:"
msgstr "也可以使用选择子句指定 HQL 查询。在这种情况下，投影类必须有一个与选择子句返回值相匹配的构造函数："

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid "Hibernate Reactive will use this constructor. When the query has a select clause, it is possible to have multiple constructors."
msgstr "Hibernate Reactive 将使用该构造函数。当查询有一个选择子句时，可以有多个构造函数。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid "It is not possible to have a HQL `select new` query and `.project(Class)` at the same time - you need to pick one approach."
msgstr "不可能同时使用 HQL `select new` 查询和 `.project(Class)` - 您需要选择一种方法。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid "For example, this will fail:"
msgstr "例如，这样做就会失败："

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Multiple Persistence Units"
msgstr "多个持久化单元"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Hibernate Reactive in Quarkus currently does not support multiple persistence units."
msgstr "Quarkus中的Hibernate Reactive目前不支持多个持久化单元。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid "Sessions and Transactions"
msgstr "会话和事务"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid ""
"First of all, most of the methods of a Panache entity must be invoked within the scope of a reactive `Mutiny.Session`.\n"
"In some cases, the session is opened automatically on demand.\n"
"For example, if a Panache entity method is invoked in a Jakarta REST resource method in an application that includes the `quarkus-resteasy-reactive` extension.\n"
"For other cases, there are both a declarative and a programmatic way to ensure the session is opened.\n"
"You can annotate a CDI business method that returns `Uni` with the `@WithSession` annotation.\n"
"The method will be intercepted and the returned `Uni` will be triggered within a scope of a reactive session.\n"
"Alternatively, you can use the `Panache.withSession()` method to achieve the same effect."
msgstr "首先，Panache 实体的大多数方法必须在反应式 `Mutiny.Session` 的范围内调用。在某些情况下，会话是按需自动打开的。例如，如果在包含 `quarkus-resteasy-reactive` 扩展的应用程序中，在 Jakarta REST 资源方法中调用了 Panache 实体方法。在其他情况下，有一种声明式和编程式方法可确保会话被打开。您可以使用 `@WithSession` 注解来注解返回 `Uni` 的 CDI 业务方法。该方法将被拦截，返回的 `Uni` 将在反应会话的作用域内触发。或者，您也可以使用 `Panache.withSession()` 方法来达到同样的效果。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid "Note that a Panache entity may not be used from a blocking thread. See also xref:getting-started-reactive.adoc[Getting Started With Reactive] guide that explains the basics of reactive principles in Quarkus."
msgstr "请注意，Panache 实体不能在阻塞线程中使用。另请参阅《 xref:getting-started-reactive.adoc[反应式入门] 指南》，其中解释了 Quarkus 中反应式原理的基础知识。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid ""
"Also make sure to wrap methods that modify the database or involve multiple queries (e.g. `entity.persist()`) within a transaction.\n"
"You can annotate a CDI business method that returns `Uni` with the `@WithTransaction` annotation.\n"
"The method will be intercepted and the returned `Uni` is triggered within a transaction boundary.\n"
"Alternatively, you can use the `Panache.withTransaction()` method for the same effect."
msgstr "还要确保将修改数据库或涉及多个查询（如 `entity.persist()` ）的方法封装在一个事务中。您可以使用 `@WithTransaction` 注解来注解返回 `Uni` 的 CDI 业务方法。该方法将被拦截，返回的 `Uni` 将在事务边界内触发。或者，您也可以使用 `Panache.withTransaction()` 方法来达到同样的效果。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid "You cannot use the `@Transactional` annotation with Hibernate Reactive for your transactions: you must use `@WithTransaction`, and your annotated method must return a `Uni` to be non-blocking."
msgstr "您不能在 Hibernate Reactive 中使用 `@Transactional` 注解来处理事务：您必须使用 `@WithTransaction` ，而且您的注解方法必须返回 `Uni` ，这样才是非阻塞的。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid ""
"Hibernate Reactive batches changes you make to your entities and sends changes (it is called flush) at the end of the transaction or before a query.\n"
"This is usually a good thing as it is more efficient.\n"
"But if you want to check optimistic locking failures, do object validation right away or generally want to get immediate feedback, you can force the flush operation by calling `entity.flush()` or even use `entity.persistAndFlush()` to make it a single method call. This will allow you to catch any `PersistenceException` that could occur when Hibernate Reactive send those changes to the database.\n"
"Remember, this is less efficient so don't abuse it.\n"
"And your transaction still has to be committed."
msgstr "Hibernate Reactive 会批处理对实体所做的更改，并在事务结束或查询之前发送更改（称为 flush）。这通常是件好事，因为效率更高。但是，如果您想检查乐观锁定失败、立即进行对象验证或通常想获得即时反馈，您可以通过调用 `entity.flush()` 或甚至使用 `entity.persistAndFlush()` 来强制 flush 操作，使其成为单个方法调用。这样，当 Hibernate Reactive 将这些更改发送到数据库时，你就可以捕捉到任何可能发生的 `PersistenceException` 。请记住，这样做效率较低，所以不要滥用。你的事务仍然必须提交。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Here is an example of the usage of the flush method to allow making a specific action in case of `PersistenceException`:"
msgstr "下面是一个使用 flush 方法的例子，它在捕获到 `PersistenceException` 异常时执行指定操作："

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid ""
"The `@WithTransaction` annotation will also work for testing.\n"
"This means that changes done during the test will be propagated to the database.\n"
"If you want any changes made to be rolled back at the end of\n"
"the test you can use the `io.quarkus.test.TestReactiveTransaction` annotation.\n"
"This will run the test method in a transaction, but roll it back once the test method is complete to revert any database changes."
msgstr "`@WithTransaction` 注释也适用于测试。这意味着测试期间所做的更改将传播到数据库。如果希望在测试结束时回滚任何更改，可以使用 `io.quarkus.test.TestReactiveTransaction` 注解。这将在事务中运行测试方法，但在测试方法完成后回滚，以还原任何数据库更改。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Lock management"
msgstr "锁管理"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Panache provides direct support for database locking with your entity/repository, using `findById(Object, LockModeType)` or `find().withLock(LockModeType)`."
msgstr "Panache支持在实体类/Repository类中直接使用数据库的锁，可使用 `findById(Object, LockModeType)` 或 `find().withLock(LockModeType)` 方法。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "The following examples are for the active record pattern, but the same can be used with repositories."
msgstr "下面的例子是针对Active Record模式的，但同样可以应用于Repository模式。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "First: Locking using findById()."
msgstr "第一：通过findById()方法使用数据库锁。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Second: Locking in a find()."
msgstr "第二：通过find()方法使用数据库锁。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Be careful that locks are released when the transaction ends, so the method that invokes the lock query must be called within a transaction."
msgstr "请注意，事务结束时锁会被释放，所以带锁查询的方法必须在事务中调用。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Custom IDs"
msgstr "自定义ID"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid ""
"IDs are often a touchy subject, and not everyone's up for letting them handled by the framework, once again we\n"
"have you covered."
msgstr "ID往往是一个敏感的话题，并不是所有人都愿意让框架来处理，因此我们提供了相应的配置。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid ""
"You can specify your own ID strategy by extending `PanacheEntityBase` instead of `PanacheEntity`. Then\n"
"you just declare whatever ID you want as a public field:"
msgstr "你可以通过继承 `PanacheEntityBase` ，而非 `PanacheEntity` ，来指定你自己的ID策略。然后只要把你想要的ID字段声明为public字段："

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid ""
"If you're using repositories, then you will want to extend `PanacheRepositoryBase` instead of `PanacheRepository`\n"
"and specify your ID type as an extra type parameter:"
msgstr "如果你使用Repository模式，那么要继承 `PanacheRepositoryBase` ，而非 `PanacheRepository` ，并将ID字段类型作为额外的类型参数："

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Testing"
msgstr "测试"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid "Testing reactive Panache entities in a `@QuarkusTest` is slightly more complicated than testing regular Panache entities due to the asynchronous nature of the APIs and the fact that all operations need to run on a Vert.x event loop."
msgstr "在 `@QuarkusTest` 中测试反应式 Panache 实体要比测试普通 Panache 实体稍微复杂一些，这是因为 API 具有异步性质，而且所有操作都需要在 Vert.x 事件循环中运行。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid ""
"The `quarkus-test-vertx` dependency provides the `@io.quarkus.test.vertx.RunOnVertxContext` annotation and the `io.quarkus.test.vertx.UniAsserter` class which are intended precisely for this purpose.\n"
"The usage is described in the xref:hibernate-reactive.adoc#testing[Hibernate Reactive] guide."
msgstr "`quarkus-test-vertx` 依赖关系提供了 `@io.quarkus.test.vertx.RunOnVertxContext` 注解和 `io.quarkus.test.vertx.UniAsserter` 类，它们正是为此目的而设计的。 xref:hibernate-reactive.adoc#testing[Hibernate Reactive] 指南中介绍了其用法。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid ""
"Moreover, the `quarkus-test-hibernate-reactive-panache` dependency provides the `io.quarkus.test.hibernate.reactive.panache.TransactionalUniAsserter` that can be injected as a method parameter of a test method annotated with `@RunOnVertxContext`.\n"
"The `TransactionalUniAsserter` is a `io.quarkus.test.vertx.UniAsserterInterceptor` that wraps each assert method within a separate reactive transaction."
msgstr "此外， `quarkus-test-hibernate-reactive-panache` 依赖项提供了 `io.quarkus.test.hibernate.reactive.panache.TransactionalUniAsserter` ，可作为注释为 `@RunOnVertxContext` 的测试方法的方法参数注入。 `TransactionalUniAsserter` 是一个 `io.quarkus.test.vertx.UniAsserterInterceptor` ，它将每个断言方法封装在一个单独的反应式事务中。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid "`TransactionalUniAsserter` Example"
msgstr "`TransactionalUniAsserter` 示例"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid "The first reactive transaction is used to persist the entity."
msgstr "第一个反应式事务用于持久化实体。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid "The second reactive transaction is used to count the entities."
msgstr "第二个反应式事务用于对实体进行计数。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid "The third reactive transaction is used to delete all entities."
msgstr "第三个被动事务用于删除所有实体。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid "Of course, you can also define a custom `UniAsserterInterceptor` to wrap the injected `UniAsserter` and customize the behavior."
msgstr "当然，您也可以定义一个自定义 `UniAsserterInterceptor` 来封装注入的 `UniAsserter` 并自定义行为。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Mocking"
msgstr "Mock模拟测试"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Using the active record pattern"
msgstr "使用Active Record模式"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid ""
"If you are using the active record pattern you cannot use Mockito directly as it does not support mocking static methods,\n"
"but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static\n"
"methods, including your own."
msgstr "如果你使用了Active Record模式，那么不能直接使用Mockito，因为它不支持Mock静态方法。你可以使用 `quarkus-panache-mock` 模块，它允许你使用Mockito来模拟所有静态方法，包括你自己编写的。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Add this dependency to your build file:"
msgstr "将以下依赖性添加到你的构建文件中："

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Given this simple entity:"
msgstr "编写一个简单的实体类："

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "You can write your mocking test like this:"
msgstr "你可以这样编写模拟测试："

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid "Make sure the test method is run on the Vert.x event loop."
msgstr "确保测试方法在 Vert.x 事件循环中运行。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid "The injected `UniAsserter` argument is used to make assertions."
msgstr "注入的 `UniAsserter` 参数用于作出断言。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid ""
"Be sure to call your `verify` and `do*` methods on `PanacheMock` rather than `Mockito`, otherwise you won't know\n"
"what mock object to pass."
msgstr "请确保是在 `PanacheMock` 上调用 `verify` 和 `do*` 方法，而不是在 `Mockito` 上调用，否则无法传递mock对象。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Using the repository pattern"
msgstr "使用Repository模式"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid ""
"If you are using the repository pattern you can use Mockito directly, using the `quarkus-junit5-mockito` module,\n"
"which makes mocking beans much easier:"
msgstr "如果你使用存储库模式，你可以直接使用Mockito，使用 `quarkus-junit5-mockito` 模块，这使得模拟Bean变得更加容易："

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "And this repository:"
msgstr "以及这个Repository类："

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid "The injected `UniAsserter` agrument is used to make assertions."
msgstr "注入的 `UniAsserter` 参数用于作出断言。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "How and why we simplify Hibernate Reactive mappings"
msgstr "我们为什么简化Hibernate Reactive映射？怎么做到的？"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid ""
"When it comes to writing Hibernate Reactive entities, there are a number of annoying things that users have grown used to\n"
"reluctantly deal with, such as:"
msgstr "在编写Hibernate Reactive实体类时，用户已经习惯了被迫处理许多烦人的事情，例如："

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid ""
"Duplicating ID logic: most entities need an ID, most people don't care how it is set, because it is not really\n"
"relevant to your model."
msgstr "重复 ID 逻辑：大多数实体都需要一个 ID，但大多数人并不关心它是如何设置的，因为它与你的模型并不相关。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid ""
"Dumb getters and setters: since Java lacks support for properties in the language, we have to create fields,\n"
"then generate getters and setters for those fields, even if they don't actually do anything more than read/write\n"
"the fields."
msgstr "繁琐的 getters 和 setters：由于Java语言中缺乏对属性的支持，我们必须创建字段，然后为这些字段getters 和 setters，即使它们除了read/write字段外实际上没有做任何事情。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
#, fuzzy
msgid ""
"Traditional EE patterns advise to split entity definition (the model) from the operations you can do on them\n"
"(DAOs, Repositories), but really that requires an unnatural split between the state and its operations even though\n"
"we would never do something like that for regular objects in the Object-Oriented architecture, where state and methods\n"
"are in the same class. Moreover, this requires two classes per entity, and requires injection of the DAO or Repository\n"
"where you need to do entity operations, which breaks your edit flow and requires you to get out of the code you're\n"
"writing to set up an injection point before coming back to use it."
msgstr "传统的 EE 模式建议将实体定义（模型）与对实体的操作（DAO、Repositories）分割开来，但实际上，这需要将状态与其操作非自然地分割开来，尽管在面向对象架构中，状态和方法都在同一个类中，我们绝不会对普通对象做这样的事情。此外，这还要求每个实体有两个类，并且需要在需要进行实体操作的地方注入 DAO 或 Repository，这就破坏了编辑流程，需要你从正在编写的代码中抽身出来设置注入点，然后再回来使用。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid ""
"Hibernate queries are super powerful, but overly verbose for common operations, requiring you to write queries even\n"
"when you don't need all the parts."
msgstr "Hibernate查询功能很强大，但对于普通操作来说过于冗长，即使是简单操作也要求写完整的HQL语句。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid ""
"Hibernate is very general-purpose, but does not make it trivial to do trivial operations that make up 90% of our\n"
"model usage."
msgstr "Hibernate很通用，但对于模型里90%的琐碎操作，编写起来并不简单。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "With Panache, we took an opinionated approach to tackle all these problems:"
msgstr "我们通过Panache采取了一种有主见的方案来解决以上这些问题："

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid ""
"Make your entities extend `PanacheEntity`: it has an ID field that is auto-generated. If you require\n"
"a custom ID strategy, you can extend `PanacheEntityBase` instead and handle the ID yourself."
msgstr "让你的实体类继承 `PanacheEntity` ：它有一个自动生成的ID字段。如果你需要自定义ID策略，可以继承 `PanacheEntityBase` ，而不用自己处理ID。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid ""
"Use public fields. Get rid of dumb getter and setters. Under the hood, we will generate all getters and setters\n"
"that are missing, and rewrite every access to these fields to use the accessor methods. This way you can still\n"
"write _useful_ accessors when you need them, which will be used even though your entity users still use field accesses."
msgstr "使用公共字段。摆脱繁琐的getter和setters。在后台，我们将生成所有缺失的getter和setter，并重写对这些字段的每个访问，以使用访问器方法。这样，当你需要时，你仍然可以写出 _有用的_ 访问器，即使你的实体用户仍然使用字段访问，也会被使用。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid ""
"With the active record pattern: put all your entity logic in static methods in your entity class and don't create DAOs.\n"
"Your entity superclass comes with lots of super useful static methods, and you can add your own in your entity class.\n"
"Users can just start using your entity `Person` by typing `Person.` and getting completion for all the operations in a single place."
msgstr "使用活动记录模式：把你所有的实体逻辑放在实体类的静态方法中，不要创建DAO。你的实体超类带有很多超级有用的静态方法，你也可以在你的实体类中添加你自己的静态方法。用户可以通过输入 `Person.` ，开始使用你的实体 `Person` ，并在一个地方获得所有操作的完成。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid ""
"Don't write parts of the query that you don't need: write `Person.find(\"order by name\")` or\n"
"`Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive)` or even better\n"
"`Person.find(\"name\", \"stef\")`."
msgstr "不要写多余的查询语句：可以写 `Person.find(\"order by name\")` 或 `Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive)` ，甚至更好的 `Person.find(\"name\", \"stef\")` 。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "That's all there is to it: with Panache, Hibernate Reactive has never looked so trim and neat."
msgstr "以上就是它的全部内容：有了Panache，Hibernate Reactive看起来变得如此轻量和整洁。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Defining entities in external projects or jars"
msgstr "在外部项目或jar包中定义实体"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid "Hibernate Reactive with Panache relies on compile-time bytecode enhancements to your entities."
msgstr "Hibernate Reactive Panache依赖于编译时对实体类的字节码增强。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid ""
"It attempts to identify archives with Panache entities (and consumers of Panache entities)\n"
"by the presence of the marker file `META-INF/panache-archive.marker`. Panache includes an\n"
"annotation processor that will automatically create this file in archives that depend on\n"
"Panache (even indirectly). If you have disabled annotation processors you may need to create\n"
"this file manually in some cases."
msgstr "Panache通过判断是否存在标记文件 `META-INF/panache-archive.marker` 来识别jar包是否包含 Panache 实体类（及 Panache 实体类的调用方）。Panache 包含一个注解处理器，它会自动在依赖 Panache（包括间接依赖Panache）的jar包中创建此文件。如果在某些情况下你禁用了注解处理器，可能需要手动创建此文件。"

#: _versions/3.6/guides/hibernate-reactive-panache.adoc
msgid ""
"If you include the jpa-modelgen annotation processor this will exclude the Panache\n"
"annotation processor by default. If you do this you should either create the marker file\n"
"yourself, or add the `quarkus-panache-common` as well, as shown below:"
msgstr "如果你的项目包含 jpa-modelgen 注解处理器，则默认情况下会排除 Panache 注解处理器。这种情况下，你应该自己创建标记文件，或者添加 `quarkus-panache-common` 插件，如下所示："
