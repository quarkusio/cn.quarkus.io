msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Using OpenID Connect (OIDC) Multi-Tenancy"
msgstr "使用OpenID Connect（OIDC）多租户"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "This guide demonstrates how your OpenID Connect (OIDC) application can support multi-tenancy so that you can serve multiple tenants from a single application. Tenants can be distinct realms or security domains within the same OpenID Provider or even distinct OpenID Providers."
msgstr "本指南演示了 OpenID Connect (OIDC) 应用程序如何支持多租户，以便从单个应用程序为多个租户提供服务。租户可以是同一 OpenID 提供商内的不同领域或安全域，甚至是不同的 OpenID 提供商。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "When serving multiple customers from the same application (e.g.: SaaS), each customer is a tenant. By enabling multi-tenancy support to your applications you are allowed to also support distinct authentication policies for each tenant even though if that means authenticating against different OpenID Providers, such as Keycloak and Google."
msgstr "当同一个应用程序（如 SaaS）为多个客户提供服务时，每个客户都是一个租户。通过为应用程序启用多租户支持，您还可以为每个租户支持不同的身份验证策略，即使这意味着要通过不同的 OpenID 提供商（如 Keycloak 和 Google）进行身份验证。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Please read the xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication] guide if you need to authorize a tenant using Bearer Token Authorization."
msgstr "如果需要使用承载令牌授权对租户进行授权，请阅读 xref:security-oidc-bearer-token-authentication.adoc[OIDC 承载] 令牌 xref:security-oidc-bearer-token-authentication.adoc[身份验证] 指南。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "If you need to authenticate and authorize a tenant using OpenID Connect Authorization Code Flow, read the xref:security-oidc-code-flow-authentication.adoc[OIDC code flow mechanism for protecting web applications] guide."
msgstr "如果您需要使用 OpenID Connect 授权代码流对租户进行验证和授权，请阅读 xref:security-oidc-code-flow-authentication.adoc[OIDC 代码流机制保护网络应用程序] 指南。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Also see the xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties] reference guide."
msgstr "另请参阅 xref:security-oidc-configuration-properties-reference.adoc[OIDC 配置属性] 参考指南。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Prerequisites"
msgstr "先决条件"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr "link:https://stedolan.github.io/jq/[jq工具]"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Architecture"
msgstr "架构"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "In this example, we build a very simple application which supports two resource methods:"
msgstr "在本例中，我们构建了一个非常简单的应用程序，它支持两种资源方法："

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "`/{tenant}`"
msgstr "`/{tenant}`"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "This resource returns information obtained from the ID token issued by OpenID Provider about the authenticated user and the current tenant."
msgstr "此资源返回从 OpenID 提供商签发的 ID 令牌中获取的有关已验证用户和当前租户的信息。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "`/{tenant}`/bearer"
msgstr "`/{tenant}` /bearer"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "This resource returns information obtained from the Access token issued by OpenID Provider about the authenticated user and the current tenant."
msgstr "此资源返回从 OpenID 提供商签发的访问令牌中获取的有关已验证用户和当前租户的信息。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Solution"
msgstr "解决方案"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库： `git clone {quickstarts-clone-url}` ，或者下载 {quickstarts-archive-url}[存档] 。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "The solution is located in the `security-openid-connect-multi-tenancy-quickstart` link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart[directory]."
msgstr "解决方案位于 `security-openid-connect-multi-tenancy-quickstart` link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart[目录] 中。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Creating the Maven Project"
msgstr "创建Maven项目"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `oidc` extension\n"
"to your project by running the following command in your project base directory:"
msgstr "如果你已经配置了你的Quarkus项目，你可以通过在你的项目基础目录下运行以下命令，将 `oidc` 扩展加入到你的项目中去："

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "This will add the following to your build file:"
msgstr "这会将以下内容添加到你的构建文件中:"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Writing the application"
msgstr "编写应用程序"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Let's start by implementing the `/{tenant}` endpoint. As you can see from the source code below it is just a regular Jakarta REST resource:"
msgstr "让我们从实现 `/{tenant}` 端点开始。从下面的源代码中可以看到，这只是一个普通的 Jakarta REST 资源："

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "In order to resolve the tenant from incoming requests and map it to a specific `quarkus-oidc` tenant configuration in application.properties, you need to create an implementation for the `io.quarkus.oidc.TenantConfigResolver` interface which can be used to resolve the tenant configurations dynamically:"
msgstr "为了从传入请求中解析租户并将其映射到 application.properties 中的特定 `quarkus-oidc` 租户配置，需要为 `io.quarkus.oidc.TenantConfigResolver` 接口创建一个实现，用于动态解析租户配置："

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "From the implementation above, tenants are resolved from the request path so that in case no tenant could be inferred, `null` is returned to indicate that the default tenant configuration should be used."
msgstr "从上面的实现来看，租户是从请求路径中解析出来的，因此如果无法推断出租户， `null` 将被返回，以表示应使用默认租户配置。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Note the `tenant-a` application type is `hybrid` - it can accept HTTP bearer tokens if provided, otherwise it will initiate an authorization code flow when the authentication is required."
msgstr "请注意， `tenant-a` 应用程序类型是 `hybrid` - 如果提供 HTTP 承载令牌，它可以接受 HTTP 承载令牌，否则会在需要验证时启动授权代码流。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Configuring the application"
msgstr "配置该应用程序"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "The first configuration is the default tenant configuration that should be used when the tenant can not be inferred from the request. Note that a `%prod` profile prefix is used with `quarkus.oidc.auth-server-url` - it is done to support testing a multi-tenant application with `Dev Services For Keycloak`. This configuration is using a Keycloak instance to authenticate users."
msgstr "第一个配置是默认租户配置，当无法从请求中推断出租户时应使用该配置。请注意， `%prod` 配置文件前缀与 `quarkus.oidc.auth-server-url` 一起使用--这样做是为了支持使用 `Dev Services For Keycloak` 测试多租户应用程序。该配置使用 Keycloak 实例对用户进行身份验证。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "The second configuration is provided by `TenantConfigResolver`, it is the configuration that will be used when an incoming request is mapped to the tenant `tenant-a`."
msgstr "第二个配置由 `TenantConfigResolver` 提供，它是将传入请求映射到租户 `tenant-a` 时使用的配置。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Note that both configurations map to the same Keycloak server instance while using distinct `realms`."
msgstr "请注意，两种配置都映射到同一个 Keycloak 服务器实例，但使用不同的 `realms` 。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Alternatively you can configure the tenant `tenant-a` directly in `application.properties`:"
msgstr "您也可以直接在 `application.properties` 中配置租户 `tenant-a` ："

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "and use a custom `TenantConfigResolver` to resolve it:"
msgstr "并使用自定义 `TenantConfigResolver` 来解决："

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "You can define multiple tenants in your configuration file, just make sure they have a unique alias so that you can map them properly when resolving a tenant from your `TenantResolver` implementation."
msgstr "您可以在配置文件中定义多个租户，只需确保它们有一个唯一的别名，以便在 `TenantResolver` 实现中解析租户时能正确映射它们。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "However, using a static tenant resolution (configuring tenants in `application.properties` and resolving them with `TenantResolver`) prevents testing the endpoint with `Dev Services for Keycloak` since `Dev Services for Keycloak` has no knowledge of how the requests will be mapped to individual tenants and can not dynamically provide tenant-specific `quarkus.oidc.<tenant-id>.auth-server-url` values and therefore using `%prod` prefixes with the tenant-specific URLs in `application.properties` will not work in test or dev mode."
msgstr "不过，使用静态租户解析（在 `application.properties` 中配置租户并用 `TenantResolver` 解析）无法使用 `Dev Services for Keycloak` 测试端点，因为 `Dev Services for Keycloak` 不知道请求将如何映射到各个租户，也无法动态提供特定于租户的 `quarkus.oidc.<tenant-id>.auth-server-url` 值，因此在 `application.properties` 中使用 `%prod` 前缀和特定于租户的 URL 将无法在测试或开发模式下运行。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"When a current tenant represents an OIDC `web-app` application, the current `io.vertx.ext.web.RoutingContext` will contain a `tenant-id` attribute by the time the custom tenant resolver has been called for all the requests completing the code authentication flow and the already authenticated requests, when either a tenant specific state or session cookie already exists.\n"
"Therefore, when working with multiple OpenID Connect Providers, you only need a path specific check to resolve a tenant id if the `RoutingContext` does not have the `tenant-id` attribute set, for example:"
msgstr "当当前租户代表 OIDC `web-app` 应用程序时，如果租户特定状态或会话 cookie 已经存在，则在调用自定义租户解析器完成代码验证流程的所有请求和已验证请求时，当前 `io.vertx.ext.web.RoutingContext` 将包含 `tenant-id` 属性。因此，在使用多个 OpenID Connect 提供商时，如果 `RoutingContext` 没有设置 `tenant-id` 属性，则只需进行路径特定检查即可解析租户 ID："

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "In fact, this is how Quarkus OIDC resolves static custom tenants itself if no custom `TenantResolver` is registered."
msgstr "事实上，如果没有注册自定义 `TenantResolver` ，Quarkus OIDC 也是这样解析静态自定义租户的。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "A similar technique can be used with `TenantConfigResolver` where a `tenant-id` provided in the context can be used to return `OidcTenantConfig` already prepared with the previous request."
msgstr "`TenantConfigResolver` 也可以使用类似的技术，即上下文中提供的 `tenant-id` 可以用来返回上一个请求已经准备好的 `OidcTenantConfig` 。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"If you also use xref:hibernate-orm.adoc#multitenancy[Hibernate ORM multitenancy] or xref:mongodb-panache.adoc#multitenancy[MongoDB with Panache multitenancy] and both tenant IDs are the same\n"
"and must be extracted from the Vert.x `RoutingContext` you can pass the tenant id from the OIDC Tenant Resolver to the Hibernate ORM Tenant Resolver or MongoDB with Panache Mongo Database Resolver\n"
"as a `RoutingContext` attribute, for example:"
msgstr "如果您也使用 xref:hibernate-orm.adoc#multitenancy[Hibernate ORM 多] 租户或使用 xref:mongodb-panache.adoc#multitenancy[Panache 多租户的 MongoDB] ，并且两个租户 ID 相同，且必须从 Vert.x `RoutingContext` 中提取，您可以将租户 ID 作为 `RoutingContext` 属性从 OIDC 租户解析器传递给 Hibernate ORM 租户解析器或使用 Panache MongoDB 的 Mongo 数据库解析器："

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Starting and Configuring the Keycloak Server"
msgstr "启动和配置Keycloak服务器"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr "要启动Keycloak服务器，您可以使用Docker服务，且只需运行以下命令："

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "where `keycloak.version` should be set to `17.0.0` or higher."
msgstr "其中 `keycloak.version` 应该设置为 `17.0.0` 或更高。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "You should be able to access your Keycloak Server at http://localhost:8180[localhost:8180]."
msgstr "你应该能够通过 http://localhost:8180[localhost:8180] 访问你的Keycloak服务器。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Log in as the `admin` user to access the Keycloak Administration Console. Username should be `admin` and password `admin`."
msgstr "以 `admin` 用户身份登录，访问Keycloak管理控制台。用户名应该是 `admin` ，密码是 `admin` 。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Now, follow the steps below to import the realms for the two tenants:"
msgstr "现在，请按照以下步骤为两个租户导入域："

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Import the link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/default-tenant-realm.json[default-tenant-realm.json] to create the default realm"
msgstr "导入 link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/default-tenant-realm.json[default-tenant-realm.json] 以创建默认域"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Import the link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/tenant-a-realm.json[tenant-a-realm.json] to create the realm for the tenant `tenant-a`."
msgstr "导入租户 link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/tenant-a-realm.json[-a-realm.json] ，为租户创建领域 `tenant-a` 。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr "更多详情，请参阅 Keycloak 有关如何 link:https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[创建新领域] 的文档。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Running and Using the Application"
msgstr "运行和使用应用程序"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Running in Developer Mode"
msgstr "以开发者模式运行"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "To run the microservice in dev mode, use:"
msgstr "要在开发模式下运行微服务，请使用"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Running in JVM Mode"
msgstr "在 JVM 模式下运行"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "When you're done playing with dev mode, you can run it as a standard Java application."
msgstr "当您玩完开发模式后，就可以将其作为标准 Java 应用程序运行。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "First compile it:"
msgstr "首先编译它："

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Then run it:"
msgstr "然后运行："

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Running in Native Mode"
msgstr "以本地模式运行"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "This same demo can be compiled into native code: no modifications required."
msgstr "这个同样的演示可以被编译成本地代码：不需要任何修改。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid ""
"This implies that you no longer need to install a JVM on your\n"
"production environment, as the runtime technology is included in\n"
"the produced binary, and optimized to run with minimal resource overhead."
msgstr "这意味着您不再需要在您的生产环境中安装JVM，因为运行时技术包含在生产的二进制文件中，并以最小的资源开销优化运行。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"Compilation will take a bit longer, so this step is disabled by default;\n"
"let's build again by enabling the native build:"
msgstr "编译会花费较长的时间，因此默认情况下这一步是禁用的；让我们通过启用本地编译再次进行编译："

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr "一杯咖啡的时间后，您就可以直接运行该二进制文件了："

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Test the Application"
msgstr "测试应用程序"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Use Dev Services for Keycloak"
msgstr "为 Keycloak 使用开发服务"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"Using xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] is recommended for the integration testing against Keycloak.\n"
"`Dev Services for Keycloak` will launch and initialize a test container: it will import configured realms and set a base Keycloak URL for `CustomTenantResolver` used in this quickstart to calculate a realm specific URL."
msgstr "建议使用 xref:security-openid-connect-dev-services.adoc[Keycloak Dev Services] 进行 Keycloak 集成测试。 `Dev Services for Keycloak` 将启动并初始化一个测试容器：它将导入已配置的境界，并为 `CustomTenantResolver` 设置一个基础 Keycloak URL，用于计算本快速入门中使用的特定境界 URL。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "First you need to add the following dependencies:"
msgstr "首先，您需要添加以下依赖项："

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"`quarkus-test-keycloak-server` provides a utility class `io.quarkus.test.keycloak.client.KeycloakTestClient` for acquiring the realm specific access tokens and which you can use with `RestAssured` for testing the `/{tenant}/bearer` endpoint expecting bearer access tokens.\n"
"`HtmlUnit` is used for testing the `/{tenant}` endpoint and the authorization code flow."
msgstr "`quarkus-test-keycloak-server` `io.quarkus.test.keycloak.client.KeycloakTestClient` `RestAssured` `/{tenant}/bearer` `HtmlUnit` 用于测试 端点和授权代码流。 `/{tenant}` "

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Next, configure the required realms:"
msgstr "然后，配置所需的域："

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Finally, write your test which will be executed in JVM mode:"
msgstr "最后编写你的测试，它将在JVM模式下执行："

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "and in native mode:"
msgstr "在原生模式(native mode)下："

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Please see xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] for more information about the way it is initialized and configured."
msgstr "请参阅 link:security-openid-connect-dev-services.html[Keycloak开发服务] ，来了解更多关于它的初始化和配置方式的信息。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Use Browser"
msgstr "使用浏览器"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "To test the application, you should open your browser and access the following URL:"
msgstr "要测试应用程序，请打开浏览器访问以下 URL："

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "http://localhost:8080/default[http://localhost:8080/default]"
msgstr "http://localhost:8080/default"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"If everything is working as expected, you should be redirected to the Keycloak server to authenticate. Note that the requested path\n"
"defines a `default` tenant which we don't have mapped in the configuration file. In this case, the default configuration will be used."
msgstr "如果一切正常，你应该会被重定向到 Keycloak 服务器进行身份验证。请注意，请求的路径定义了一个 `default` 租户，而我们的配置文件中没有映射该租户。在这种情况下，将使用默认配置。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "In order to authenticate to the application you should type the following credentials when at the Keycloak login page:"
msgstr "要对应用程序进行身份验证，您应在 Keycloak 登录页面键入以下凭据："

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Username: *alice*"
msgstr "用户名: *alice*"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Password: *alice*"
msgstr "密码： *alice*"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "After clicking the `Login` button you should be redirected back to the application."
msgstr "单击 `Login` 按钮后，您将被转回应用程序。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "If you try now to access the application at the following URL:"
msgstr "如果您现在尝试访问以下 URL 中的应用程序："

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "http://localhost:8080/tenant-a[http://localhost:8080/tenant-a]"
msgstr "http://localhost:8080/tenant-a"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "You should be redirected again to the login page at Keycloak. However, now you are going to authenticate using a different `realm`."
msgstr "您应该会再次被重定向到 Keycloak 的登录页面。不过，您现在要使用不同的 `realm` 进行身份验证。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"In both cases, if the user is successfully authenticated, the landing page will show the user's name and e-mail. Even though\n"
"user `alice` exists in both tenants, for the application they are distinct users belonging to different realms/tenants."
msgstr "在这两种情况下，如果用户验证成功，登陆页面将显示用户的姓名和电子邮件。尽管用户 `alice` 同时存在于两个租户中，但对于应用程序来说，他们是属于不同领域/租户的不同用户。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Static tenant configuration resolution"
msgstr "静态租户配置解析"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"When you set multiple tenant configurations in the `application.properties` file, you only need to specify how the tenant identifier gets resolved.\n"
"To configure the resolution of the tenant identifier, use one of the following options:"
msgstr "在 `application.properties` 文件中设置多个租户配置时，只需指定租户标识符的解析方式。要配置租户标识符的解析，请使用以下选项之一："

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "xref:tenant-resolver[Resolve with `TenantResolver`]"
msgstr "xref:tenant-resolver[用以下方式解决TenantResolver]"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "xref:default-tenant-resolver[Default resolution]"
msgstr "xref:default-tenant-resolver[默认分辨率]"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "xref:annotations-tenant-resolver[Resolve with annotations]"
msgstr "xref:annotations-tenant-resolver[使用注释解决]"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"These tenant resolution options will be tried in turn, in the order they are listed, until the tenant id gets resolved.\n"
"If the tenant id remains unresolved (`null`) in the end then the default (unnamed) tenant configuration will be selected."
msgstr "将按照列出的顺序依次尝试这些租户解决选项，直到租户 ID 得到解决。如果租户 ID 最终仍未解决（ `null` ），则将选择默认（未命名）租户配置。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Resolve with `TenantResolver`"
msgstr "用以下方式解决 `TenantResolver`"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "The following `application.properties` example shows how you can resolve the tenant identifier of two tenants named `a` and `b` by using the `TenantResolver` method:"
msgstr "下面的 `application.properties` 示例展示了如何使用 `TenantResolver` 方法解析名为 `a` 和 `b` 的两个租户的租户标识符："

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "You can return the tenant ID of either `a` or `b` from `quarkus.oidc.TenantResolver`:"
msgstr "您可以从 `quarkus.oidc.TenantResolver` 返回 `a` 或 `b` 的租户 ID："

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "In this example, the value of the last request path segment is a tenant ID, but if required, you can implement a more complex tenant identifier resolution logic."
msgstr "在本例中，最后一个请求路径段的值是租户标识符，但如果需要，可以实施更复杂的租户标识符解析逻辑。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Default resolution"
msgstr "默认分辨率"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "The default resolution for a tenant identifier is convention based, whereby the authentication request must include the tenant identifier in the last segment of the request path."
msgstr "租户标识符的默认解析是基于惯例的，即身份验证请求必须在请求路径的最后一段包含租户标识符。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "The following `application.properties` example shows how you can configure two tenants named `google` and `github`:"
msgstr "下面的 `application.properties` 示例显示了如何配置名为 `google` 和 `github` 的两个租户："

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"In this example, both tenants configure OIDC `web-app` applications to use an authorization code flow to authenticate users and also require session cookies to get generated after the authentication has taken place.\n"
"After either Google or GitHub authenticates the current user, the user gets returned to the `/signed-in` area for authenticated users, for example, a secured resource path on the JAX-RS endpoint."
msgstr "在本例中，两个租户都配置了 OIDC `web-app` 应用程序，以使用授权代码流对用户进行身份验证，并要求在身份验证后生成会话 Cookie。在 Google 或 GitHub 对当前用户进行身份验证后，用户将被返回到 `/signed-in` 区域（例如，JAX-RS 端点上的安全资源路径），供已通过身份验证的用户使用。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Finally, to complete the default tenant resolution, set the following configuration property:"
msgstr "最后，要完成默认租户解析，请设置以下配置属性："

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"If the endpoint is running on `http://localhost:8080`, you can also provide UI options for users to log in to either `http://localhost:8080/google` or `http://localhost:8080/github`, without having to add specific`/google` or `/github` JAX-RS resource paths.\n"
"Tenant identifiers are also recorded in the session cookie names after the authentication is completed.\n"
"Therefore, authenticated users can access the secured application area without requiring either the `google` or `github` path values to be included in the secured URL."
msgstr "如果端点运行在 `http://localhost:8080` 的用户界面选项，用户可以登录到 `http://localhost:8080/google` 或 `http://localhost:8080/github` ，而无需添加特定的`/google`或 `/github` JAX-RS 资源路径。完成身份验证后，租户标识符也会记录在会话 cookie 名称中。因此，已通过身份验证的用户无需在安全 URL 中包含 `google` 或 `github` 路径值，即可访问安全应用区域。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Default resolution can also work for Bearer token authentication but it might be less practical in this case because a tenant identifier will always need to be set as the last path segment value."
msgstr "默认解析也可用于承载令牌身份验证，但在这种情况下可能不太实用，因为租户标识符始终需要设置为最后一个路径段值。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Resolve with annotations"
msgstr "使用注释解决"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "You can use the `io.quarkus.oidc.Tenant` annotation for resolving the tenant identifiers as an alternative to using `io.quarkus.oidc.TenantResolver`."
msgstr "您可以使用 `io.quarkus.oidc.Tenant` 注释来解析租户标识符，而不是使用 `io.quarkus.oidc.TenantResolver` 。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Proactive HTTP authentication must be disabled (`quarkus.http.auth.proactive=false`) for this to work. For more information, see xref:security-proactive-authentication.adoc[Proactive authentication]."
msgstr "必须禁用主动 HTTP 身份验证 ( `quarkus.http.auth.proactive=false` ) 才能正常工作。有关更多信息，请参阅 xref:security-proactive-authentication.adoc[主动身份验证] 。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"Assuming your application supports two OIDC tenants (`hr`, and default), all resource methods and classes\n"
"carrying `@Tenant(\"hr\")` will be authenticated using the OIDC provider configured by `quarkus.oidc.hr.auth-server-url`,\n"
"while all other classes and methods will still be authenticated using the default OIDC provider."
msgstr "假设您的应用程序支持两个 OIDC 租户（ `hr` , 和默认），则所有携带 `@Tenant(\"hr\")` 的资源方法和类都将使用 `quarkus.oidc.hr.auth-server-url` 配置的 OIDC 提供程序进行身份验证，而所有其他类和方法仍将使用默认 OIDC 提供程序进行身份验证。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "The `io.quarkus.oidc.Tenant` annotation must be placed either on resource class or resource method."
msgstr "`io.quarkus.oidc.Tenant` 注解必须放在资源类或资源方法上。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Dynamic tenant configuration resolution"
msgstr "动态租户配置解析"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"If you need a more dynamic configuration for the different tenants you want to support and don't want to end up with multiple\n"
"entries in your configuration file, you can use the `io.quarkus.oidc.TenantConfigResolver`."
msgstr "如果需要为不同租户提供更动态的配置，又不想在配置文件中出现多个条目，可以使用 `io.quarkus.oidc.TenantConfigResolver` ."

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "This interface allows you to dynamically create tenant configurations at runtime:"
msgstr "该界面允许您在运行时动态创建租户配置："

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "The `OidcTenantConfig` returned from this method is the same used to parse the `oidc` namespace configuration from the `application.properties`. You can populate it using any of the settings supported by the `quarkus-oidc` extension."
msgstr "从该方法返回的 `OidcTenantConfig` 与从 `application.properties` 解析 `oidc` 命名空间配置时使用的相同。您可以使用 `quarkus-oidc` 扩展支持的任何设置来填充它。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "If the dynamic tenant resolver returns `null` then a xref:static-tenant-resolution[Static tenant configuration resolution] will be attempted next."
msgstr "如果动态租户解析器返回 `null` ，那么接下来将尝试 xref:static-tenant-resolution[静态租户配置解析] 。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Tenant resolution for OIDC `web-app` applications"
msgstr "OIDC `web-app` 申请的租户解决方案"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "The simplest option for resolving OIDC `web-app` application configuration is to follow the steps described in the xref:default-tenant-resolver[Default resolution] section."
msgstr "解析 OIDC `web-app` 应用程序配置的最简单方法是按照 xref:default-tenant-resolver[默认解析] 部分所述的步骤进行。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Try one of the options suggested below if the default resolution strategy does not work for your application setup."
msgstr "如果默认分辨率策略不适合您的应用程序设置，请尝试以下建议的选项之一。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Several options are available for selecting the tenant configuration which should be used to secure the current HTTP request for both `service` and `web-app` OIDC applications, such as:"
msgstr "`service` 和 `web-app` OIDC 应用程序的当前 HTTP 请求安全应使用租户配置，有多个选项可供选择，如"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Check URL paths, for example, a `tenant-service` configuration has to be used for the \"/service\" paths, while a `tenant-manage` configuration - for the \"/management\" paths"
msgstr "检查 URL 路径，例如，\"/service \"路径必须使用 `tenant-service` 配置，而\"/management \"路径必须使用 `tenant-manage` 配置。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Check HTTP headers, for example, with a URL path always being '/service', a header such as \"Realm: service\" or \"Realm: management\" can help to select between the `tenant-service` and `tenant-manage` configurations"
msgstr "检查 HTTP 头信息，例如，如果 URL 路径始终为\"/service\"，则 \"Realm: service \"或 \"Realm: management \"等头信息有助于在 `tenant-service` 和 `tenant-manage` 配置之间做出选择。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Check URL query parameters - it can work similarly to the way the headers are used to select the tenant configuration"
msgstr "检查 URL 查询参数--其作用类似于使用标头选择租户配置的方式"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "All these options can be easily implemented with the custom `TenantResolver` and `TenantConfigResolver` implementations for the OIDC `service` applications."
msgstr "所有这些选项都可以通过 OIDC `service` 应用程序的定制 `TenantResolver` 和 `TenantConfigResolver` 实现轻松实现。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "However, due to an HTTP redirect required to complete the code authentication flow for the OIDC `web-app` applications, a custom HTTP cookie may be needed to select the same tenant configuration before and after this redirect request because:"
msgstr "不过，由于完成 OIDC `web-app` 应用程序的代码验证流程需要 HTTP 重定向，因此可能需要自定义 HTTP cookie，以便在重定向请求前后选择相同的租户配置："

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "URL path may not be the same after the redirect request if a single redirect URL has been registered in the OIDC Provider - the original request path can be restored but after the tenant configuration is resolved"
msgstr "如果在 OIDC 提供商中注册了单个重定向 URL，则重定向请求后的 URL 路径可能不一样--但在租户配置解决后，可以恢复原来的请求路径"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "HTTP headers used during the original request are not available after the redirect"
msgstr "重定向后，原始请求中使用的 HTTP 标头将不可用"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Custom URL query parameters are restored after the redirect but after the tenant configuration is resolved"
msgstr "重定向后，但租户配置解决后，自定义 URL 查询参数会恢复"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "One option to ensure the information for resolving the tenant configurations for `web-app` applications is available before and after the redirect is to use a cookie, for example:"
msgstr "要确保 `web-app` 应用程序的租户配置解析信息在重定向前后都可用，一种方法是使用 cookie 等："

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Disabling Tenant Configurations"
msgstr "禁用租户配置"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Custom `TenantResolver` and `TenantConfigResolver` implementations may return `null` if no tenant can be inferred from the current request and a fallback to the default tenant configuration is required."
msgstr "如果无法从当前请求中推断出租户，并且需要回退到默认租户配置，则自定义 `TenantResolver` 和 `TenantConfigResolver` 实现可能会返回 `null` 。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "If you expect that the custom resolvers will always infer a tenant then you do not need to configure the default tenant resolution."
msgstr "如果您希望自定义解析器始终推断出租户，则无需配置默认租户解析。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "To disable the default tenant configuration, set  `quarkus.oidc.tenant-enabled=false`."
msgstr "要禁用默认租户配置，请设置 `quarkus.oidc.tenant-enabled=false` 。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "The default tenant configuration is automatically disabled when `quarkus.oidc.auth-server-url` is not configured but either custom tenant configurations are available or `TenantConfigResolver` is registered."
msgstr "当 `quarkus.oidc.auth-server-url` 未配置，但有自定义租户配置可用或 `TenantConfigResolver` 已注册时，默认租户配置会自动禁用。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Note that tenant specific configurations can also be disabled, for example: `quarkus.oidc.tenant-a.tenant-enabled=false`."
msgstr "请注意，租户特定配置也可以禁用，例如： `quarkus.oidc.tenant-a.tenant-enabled=false` 。"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "References"
msgstr "参考文献"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties]"
msgstr "xref:security-oidc-configuration-properties-reference.adoc[OIDC 配置属性]"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr "link:https://www.keycloak.org/documentation.html[Keycloak 文档]"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr "link:https://openid.net/connect/[OpenID Connect]"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "link:https://tools.ietf.org/html/rfc7519[JSON 网络令牌]"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "https://developers.google.com/identity/protocols/OpenIDConnect[Google OpenID Connect]"
msgstr "link:https://developers.google.com/identity/protocols/OpenIDConnect[谷歌 OpenID 连接]"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus 安全概述]"
