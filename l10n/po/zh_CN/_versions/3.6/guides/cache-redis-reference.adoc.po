msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.6/guides/cache-redis-reference.adoc
#, fuzzy
msgid "Redis Cache"
msgstr "Redis 缓存"

#: _versions/3.6/guides/cache-redis-reference.adoc
#, fuzzy
msgid ""
"By default, Quarkus Cache uses Caffeine as backend.\n"
"It's possible to use Redis instead."
msgstr "默认情况下，Quarkus Cache 使用 Caffeine 作为后端。也可以使用 Redis 代替。"

#: _versions/3.6/guides/cache-redis-reference.adoc
#, fuzzy
msgid "Redis as cache backend"
msgstr "将 Redis 作为缓存后端"

#: _versions/3.6/guides/cache-redis-reference.adoc
#, fuzzy
msgid "When using Redis as the backend for Quarkus cache, each cached item will be stored in Redis:"
msgstr "使用 Redis 作为 Quarkus 缓存的后端时，每个缓存项都将存储在 Redis 中："

#: _versions/3.6/guides/cache-redis-reference.adoc
#, fuzzy
msgid "The backend uses the _<default>_ Redis client (if not configured otherwise), so make sure it's configured (or use the xref:redis-dev-services.adoc[redis dev service])"
msgstr "后端使用 _<default>_ Redis 客户端（如果未另行配置），因此请确保已配置（或使用 xref:redis-dev-services.adoc[redis 开发服务）]"

#: _versions/3.6/guides/cache-redis-reference.adoc
#, fuzzy
msgid "the Redis key is built as follows: `cache:$cache-name:$cache-key`, where `cache-key` is the key the application uses."
msgstr "Redis 密钥的创建过程如下： `cache:$cache-name:$cache-key` 其中 `cache-key` 是应用程序使用的密钥。"

#: _versions/3.6/guides/cache-redis-reference.adoc
#, fuzzy
msgid "the value is encoded to JSON if needed"
msgstr "如果需要，会将值编码为 JSON 格式"

#: _versions/3.6/guides/cache-redis-reference.adoc
#, fuzzy
msgid "Use the Redis backend"
msgstr "使用 Redis 后端"

#: _versions/3.6/guides/cache-redis-reference.adoc
#, fuzzy
msgid "First, you need to add the `quarkus-redis-cache` extension to your project:"
msgstr "首先，您需要在项目中添加 `quarkus-redis-cache` 扩展："

#: _versions/3.6/guides/cache-redis-reference.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.6/guides/cache-redis-reference.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.6/guides/cache-redis-reference.adoc
#, fuzzy
msgid "Then, use the `@CacheResult` and others cache annotations as explained in the xref:cache.adoc[Quarkus Cache guide]:"
msgstr "然后，按照 xref:cache.adoc[Quarkus 缓存指南] 中的说明，使用 `@CacheResult` 和其他缓存注释："

#: _versions/3.6/guides/cache-redis-reference.adoc
#, fuzzy
msgid "Configure the Redis backend"
msgstr "配置 Redis 后端"

#: _versions/3.6/guides/cache-redis-reference.adoc
#, fuzzy
msgid ""
"The Redis backend uses the `<default>` Redis client.\n"
"See the xref:redis-reference.adoc[Redis reference] to configure the access to Redis."
msgstr "Redis 后端使用 `<default>` Redis 客户端。请参阅 Redis xref:redis-reference.adoc[参考资料] 配置对 Redis 的访问。"

#: _versions/3.6/guides/cache-redis-reference.adoc
#, fuzzy
msgid "In dev mode, you can use the xref:redis-dev-services.adoc[Redis Dev Service]."
msgstr "在开发模式下，您可以使用 xref:redis-dev-services.adoc[Redis 开发服务] 。"

#: _versions/3.6/guides/cache-redis-reference.adoc
#, fuzzy
msgid "If you want to use another Redis for your cache, configure the `client-name` as follows:"
msgstr "如果想使用另一个 Redis 作为缓存，请按如下方式配置 `client-name` ："

#: _versions/3.6/guides/cache-redis-reference.adoc
#, fuzzy
msgid ""
"When writing to Redis or reading from Redis, Quarkus needs to know the type.\n"
"Indeed, the objects need to be serialized and deserialized.\n"
"For that purpose, you may need to configure type (class names) of the key and value you want to cache.\n"
"At build time, Quarkus tries to deduce the types from the application code, but that decision can be overridden using:"
msgstr "向 Redis 写入或从 Redis 读取时，Quarkus 需要知道类型。事实上，对象需要序列化和反序列化。为此，你可能需要配置要缓存的键和值的类型（类名）。在构建时，Quarkus 会尝试从应用程序代码中推断类型，但这一决定可以通过以下方式重写："

#: _versions/3.6/guides/cache-redis-reference.adoc
#, fuzzy
msgid "You can also configure the time to live of the cached entries:"
msgstr "您还可以配置缓存条目的有效时间："

#: _versions/3.6/guides/cache-redis-reference.adoc
#, fuzzy
msgid ""
"If the `expire-after-write` is not configured, the entry won't be evicted.\n"
"You would need to invalidate the values using the `@CacheInvalidateAll` or `@CacheInvalidate` annotations."
msgstr "如果未配置 `expire-after-write` ，则不会驱逐条目。您需要使用 `@CacheInvalidateAll` 或 `@CacheInvalidate` 注释使值失效。"

#: _versions/3.6/guides/cache-redis-reference.adoc
#, fuzzy
msgid "The following table lists the supported properties:"
msgstr "下表列出了支持的属性："

#: _versions/3.6/guides/cache-redis-reference.adoc
#, fuzzy
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr "<span class=\"icicon\"><i class=\"fa fa-lock\" title=\"在构建时固定\"></i></span>在构建时固定的配置属性 - 所有其他配置属性都可在运行时重写 <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"

#: _versions/3.6/guides/cache-redis-reference.adoc
#, fuzzy
msgid "Configure the Redis key"
msgstr "配置 Redis 密钥"

#: _versions/3.6/guides/cache-redis-reference.adoc
#, fuzzy
msgid ""
"By default, the Redis backend stores the entry using the following keys: `cache:$cache-name:$cache-key`, where `cache-key` is the key the application uses.\n"
"So, you can find all the entries for a single cache using the Redis `KEYS` command: `KEYS cache:$cache-name:*`"
msgstr "默认情况下，Redis 后端使用以下键值存储条目： `cache:$cache-name:$cache-key` 其中 `cache-key` 是应用程序使用的键。因此，你可以使用 Redis `KEYS` 命令找到单个缓存的所有条目： `KEYS cache:$cache-name:*`"

#: _versions/3.6/guides/cache-redis-reference.adoc
#, fuzzy
msgid "The `cache:$cache-name:` segment can be configured using the `prefix` property:"
msgstr "`cache:$cache-name:` 网段可使用 `prefix` 属性进行配置："

#: _versions/3.6/guides/cache-redis-reference.adoc
#, fuzzy
msgid "In these cases, you can find all the keys managed by the default cache using `KEYS my-cache:*`, and all the keys managed by the `expensiveResourceCache` cache using: `KEYS my-expensive-cache:*`."
msgstr "在这种情况下，可以使用 `KEYS my-cache:*` 找到默认缓存管理的所有密钥，使用 `KEYS my-expensive-cache:*` 找到 `expensiveResourceCache` 缓存管理的所有密钥。"

#: _versions/3.6/guides/cache-redis-reference.adoc
#, fuzzy
msgid "Enable optimistic locking"
msgstr "启用乐观锁定"

#: _versions/3.6/guides/cache-redis-reference.adoc
#, fuzzy
msgid ""
"The access to the cache can be _direct_ or use https://redis.io/docs/manual/transactions/#optimistic-locking-using-check-and-set[optimistic locking].\n"
"By default, optimistic locking is disabled."
msgstr "对缓存的访问可以是 _直接_ 访问，也可以使用 link:https://redis.io/docs/manual/transactions/#optimistic-locking-using-check-and-set[乐观锁定] 。默认情况下，乐观锁定是禁用的。"

#: _versions/3.6/guides/cache-redis-reference.adoc
#, fuzzy
msgid "You can enable optimistic locking using:"
msgstr "您可以使用"

#: _versions/3.6/guides/cache-redis-reference.adoc
#, fuzzy
msgid "When used, the key is _watched_ and the _SET_ command is executed in a transaction (`MULTI/EXEC`)."
msgstr "使用时，将在一个事务中 _监视_ 密钥并执行 _SET_ 命令 ( `MULTI/EXEC` )。"
