msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "OpenID Connect Client and Token Propagation Quickstart"
msgstr "OpenID Connect 客户端和令牌传播快速入门"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "This quickstart demonstrates how to use `OpenID Connect Client Reactive Filter` to acquire and propagate access tokens as `HTTP Authorization Bearer` access tokens, alongside `OpenID Token Propagation Reactive Filter` which propagates the incoming `HTTP Authorization Bearer` access tokens."
msgstr "本快速入门演示如何使用 `OpenID Connect Client Reactive Filter` 获取访问令牌并将其传播为 `HTTP Authorization Bearer` 访问令牌，同时使用 `OpenID Token Propagation Reactive Filter` 传播传入的 `HTTP Authorization Bearer` 访问令牌。"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Please check xref:security-openid-connect-client-reference.adoc[OpenID Connect Client and Token Propagation Reference Guide] for all the information related to `Oidc Client` and `Token Propagation` support in Quarkus."
msgstr "请查阅《 xref:security-openid-connect-client-reference.adoc[OpenID Connect 客户端和令牌传播参考指南》] ，了解 Quarkus 支持 `Oidc Client` 和 `Token Propagation` 的所有相关信息。"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Please also read xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication] guide if you need to protect your applications using Bearer Token Authorization."
msgstr "如果您需要使用承载令牌授权来保护您的应用程序，也请阅读 xref:security-oidc-bearer-token-authentication.adoc[OIDC 承载] 令牌 xref:security-oidc-bearer-token-authentication.adoc[身份验证] 指南。"

#: _versions/3.6/guides/security-openid-connect-client.adoc
msgid "Prerequisites"
msgstr "先决条件"

#: _versions/3.6/guides/security-openid-connect-client.adoc
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr "link:https://stedolan.github.io/jq/[jq工具]"

#: _versions/3.6/guides/security-openid-connect-client.adoc
msgid "Architecture"
msgstr "架构"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "In this example, we will build an application which consists of two Jakarta REST resources, `FrontendResource` and `ProtectedResource`. `FrontendResource` propagates access tokens to `ProtectedResource` and uses either `OpenID Connect Client Reactive Filter` to acquire a token first before propagating it or `OpenID Token Propagation Reactive Filter` to propagate the incoming, already existing access token."
msgstr "在本示例中，我们将构建一个由两个 Jakarta REST 资源（ `FrontendResource` 和 `ProtectedResource` ）组成的应用程序。 `FrontendResource` 将访问令牌传播到 `ProtectedResource` ，并使用 `OpenID Connect Client Reactive Filter` 在传播令牌之前先获取令牌，或使用 `OpenID Token Propagation Reactive Filter` 传播传入的已有访问令牌。"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`FrontendResource` has 4 endpoints:"
msgstr "`FrontendResource` 有 4 个端点："

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`/frontend/user-name-with-oidc-client-token`"
msgstr "`/frontend/user-name-with-oidc-client-token`"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`/frontend/admin-name-with-oidc-client-token`"
msgstr "`/frontend/admin-name-with-oidc-client-token`"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`/frontend/user-name-with-propagated-token`"
msgstr "`/frontend/user-name-with-propagated-token`"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`/frontend/admin-name-with-propagated-token`"
msgstr "`/frontend/admin-name-with-propagated-token`"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`FrontendResource` will use REST Client with `OpenID Connect Client Reactive Filter` to acquire and propagate an access token to `ProtectedResource` when either `/frontend/user-name-with-oidc-client-token` or `/frontend/admin-name-with-oidc-client-token` is called. And it will use REST Client with `OpenID Connect Token Propagation Reactive Filter` to propagate the current incoming access token to `ProtectedResource` when either `/frontend/user-name-with-propagated-token` or `/frontend/admin-name-with-propagated-token` is called."
msgstr "`FrontendResource` 将使用 的 REST 客户端获取访问令牌，并在调用 或 时将访问令牌传播到 。当调用 或 时，它将使用 的 REST 客户端向 传播当前传入的访问令牌。 `OpenID Connect Client Reactive Filter` `/frontend/user-name-with-oidc-client-token` `/frontend/admin-name-with-oidc-client-token` `ProtectedResource` `/frontend/user-name-with-propagated-token` `/frontend/admin-name-with-propagated-token` `OpenID Connect Token Propagation Reactive Filter` `ProtectedResource` "

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`ProtecedResource` has 2 endpoints:"
msgstr "`ProtecedResource` 有两个端点："

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`/protected/user-name`"
msgstr "`/protected/user-name`"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`/protected/admin-name`"
msgstr "`/protected/admin-name`"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Both of these endpoints return the username extracted from the incoming access token which was propagated to `ProtectedResource` from `FrontendResource`. The only difference between these endpoints is that calling `/protected/user-name` is only allowed if the current access token has a `user` role and calling `/protected/admin-name` is only allowed if the current access token has an `admin` role."
msgstr "这两个端点都会返回从传入访问令牌中提取的用户名，该访问令牌是从 `FrontendResource` 传播到 `ProtectedResource` 的。这些端点之间的唯一区别是，只有当前访问令牌具有 `user` 角色时，才允许调用 `/protected/user-name` ；只有当前访问令牌具有 `admin` 角色时，才允许调用 `/protected/admin-name` 。"

#: _versions/3.6/guides/security-openid-connect-client.adoc
msgid "Solution"
msgstr "解决方案"

#: _versions/3.6/guides/security-openid-connect-client.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#: _versions/3.6/guides/security-openid-connect-client.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库： `git clone {quickstarts-clone-url}` ，或者下载 {quickstarts-archive-url}[存档] 。"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "The solution is located in the `security-openid-connect-client-quickstart` link:{quickstarts-tree-url}/security-openid-connect-client-quickstart[directory]."
msgstr "解决方案位于 `security-openid-connect-client-quickstart` link:{quickstarts-tree-url}/security-openid-connect-client-quickstart[目录] 中。"

#: _versions/3.6/guides/security-openid-connect-client.adoc
msgid "Creating the Maven Project"
msgstr "创建Maven项目"

#: _versions/3.6/guides/security-openid-connect-client.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "This command generates a Maven project, importing the `oidc`, `oidc-client-reactive-filter`, `oidc-token-propagation-reactive-filter` and `resteasy-reactive` extensions."
msgstr "该命令生成一个 Maven 项目，导入 `oidc` , `oidc-client-reactive-filter` , `oidc-token-propagation-reactive-filter` 和 `resteasy-reactive` 扩展。"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "If you already have your Quarkus project configured, you can add these extensions to your project by running the following command in your project base directory:"
msgstr "如果您已经配置了 Quarkus 项目，可以在项目基本目录下运行以下命令，将这些扩展添加到项目中："

#: _versions/3.6/guides/security-openid-connect-client.adoc
msgid "This will add the following to your build file:"
msgstr "这会将以下内容添加到你的构建文件中:"

#: _versions/3.6/guides/security-openid-connect-client.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.6/guides/security-openid-connect-client.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.6/guides/security-openid-connect-client.adoc
msgid "Writing the application"
msgstr "编写应用程序"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Let's start by implementing `ProtectedResource`:"
msgstr "让我们从实施 `ProtectedResource` 开始："

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "As you can see `ProtectedResource` returns a name from both `userName()` and `adminName()` methods. The name is extracted from the current `JsonWebToken`."
msgstr "可以看到， `ProtectedResource` 从 `userName()` 和 `adminName()` 方法中返回一个名称。名称是从当前的 `JsonWebToken` 中提取的。"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Next let's add a REST Client with `OidcClientRequestReactiveFilter` and another REST Client with `AccessTokenRequestReactiveFilter`. `FrontendResource` will use these two clients to call `ProtectedResource`:"
msgstr "接下来，让我们添加一个 `OidcClientRequestReactiveFilter` 的 REST 客户端和另一个 `AccessTokenRequestReactiveFilter` 的 REST 客户端。 `FrontendResource` 将使用这两个客户端调用 `ProtectedResource` ："

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "where `RestClientWithOidcClientFilter` will depend on `OidcClientRequestReactiveFilter` to acquire and propagate the tokens and"
msgstr "其中 `RestClientWithOidcClientFilter` 将依赖 `OidcClientRequestReactiveFilter` 获取和传播代币，而"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "where `RestClientWithTokenPropagationFilter` will depend on `AccessTokenRequestReactiveFilter` to propagate the incoming, already existing tokens."
msgstr "其中 `RestClientWithTokenPropagationFilter` 将依赖 `AccessTokenRequestReactiveFilter` 来传播传入的、已经存在的令牌。"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Note that both `RestClientWithOidcClientFilter` and `RestClientWithTokenPropagationFilter` interfaces are identical - the reason behind it is that combining `OidcClientRequestReactiveFilter` and `AccessTokenRequestReactiveFilter` on the same REST Client will cause side effects as both filters can interfere with other, for example, `OidcClientRequestReactiveFilter` may override the token propagated by `AccessTokenRequestReactiveFilter` or `AccessTokenRequestReactiveFilter` can fail if it is called when no token is available to propagate and `OidcClientRequestReactiveFilter` is expected to acquire a new token instead."
msgstr "请注意， `RestClientWithOidcClientFilter` 和 `RestClientWithTokenPropagationFilter` 接口完全相同--其背后的原因是，在同一个 REST 客户端上结合 `OidcClientRequestReactiveFilter` 和 `AccessTokenRequestReactiveFilter` 会产生副作用，因为这两个过滤器会相互干扰，例如 `OidcClientRequestReactiveFilter` 可能会覆盖 `AccessTokenRequestReactiveFilter` 传播的令牌，或者 `AccessTokenRequestReactiveFilter` 在没有令牌可传播时被调用会失败，而 `OidcClientRequestReactiveFilter` 则会获取一个新的令牌。"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Now let's complete creating the application with adding `FrontendResource`:"
msgstr "现在，让我们通过添加 `FrontendResource` 来完成应用程序的创建："

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Finally, let's add a Jakarta REST `ExceptionMapper`:"
msgstr "最后，让我们添加一个 Jakarta REST `ExceptionMapper` ："

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "This exception mapper is only added to verify during the tests that `ProtectedResource` returns `403` when the token has no expected role. Without this mapper `RESTEasy Reactive` will correctly convert the exceptions which will escape from REST Client calls to `500` to avoid leaking the information from the downstream resources such as `ProtectedResource` but in the tests it will not be possible to assert that `500` is in fact caused by an authorization exception as opposed to some internal error."
msgstr "添加该异常映射器只是为了在测试中验证 `ProtectedResource` 是否会在令牌没有预期作用时返回 `403` 。如果没有该映射器， `RESTEasy Reactive` 将正确转换从 REST 客户端调用到 `500` 的异常，以避免从下游资源（如 `ProtectedResource` ）泄漏信息，但在测试中，将无法断言 `500` 实际上是由授权异常而非某些内部错误引起的。"

#: _versions/3.6/guides/security-openid-connect-client.adoc
msgid "Configuring the application"
msgstr "配置该应用程序"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "We have prepared the code, and now let's configure the application:"
msgstr "我们已经准备好代码，现在来配置应用程序："

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "This configuration references Keycloak which will be used by `ProtectedResource` to verify the incoming access tokens and by `OidcClient` to get the tokens for a user `alice` using a `password` grant. Both RESTClients point to `ProtectedResource`'s HTTP address."
msgstr "此配置引用了 Keycloak， `ProtectedResource` 将使用 Keycloak 验证传入的访问令牌， `OidcClient` 将使用 `password` 授予获取用户 `alice` 的令牌。两个 RESTClients 都指向 \"受保护资源 \"的 HTTP 地址。"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Adding a `%prod.` profile prefix to `quarkus.oidc.auth-server-url` ensures that `Dev Services for Keycloak` will launch a container for you when the application is run in dev or test modes. See xref:keycloak-dev-mode[Running the Application in Dev mode] section below for more information."
msgstr "在 `quarkus.oidc.auth-server-url` 中添加 `%prod.` 配置文件前缀可确保 `Dev Services for Keycloak` 在开发或测试模式下运行应用程序时为您启动容器。有关详细信息，请参阅下面的 \" xref:keycloak-dev-mode[在开发模式下运行应用程序] \"部分。"

#: _versions/3.6/guides/security-openid-connect-client.adoc
msgid "Starting and Configuring the Keycloak Server"
msgstr "启动和配置Keycloak服务器"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Do not start the Keycloak server when you run the application in dev mode or test modes - `Dev Services for Keycloak` will launch a container. See xref:keycloak-dev-mode[Running the Application in Dev mode] section below for more information. Make sure to put the link:{quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[realm configuration file] on the classpath (`target/classes` directory) so that it gets imported automatically when running in dev mode - unless you have already built a link:{quickstarts-tree-url}/security-openid-connect-quickstart[complete solution] in which case this realm file will be added to the classpath during the build."
msgstr "在开发模式或测试模式下运行应用程序时，请勿启动 Keycloak 服务器 - `Dev Services for Keycloak` 将启动一个容器。有关详细信息，请参阅下面的 \" xref:keycloak-dev-mode[在开发模式下运行应用程序] \"部分。确保将 link:{quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[realm 配置文件] 放在类路径上（ `target/classes` 目录），以便在开发模式下运行时自动导入，除非已经构建了 link:{quickstarts-tree-url}/security-openid-connect-quickstart[完整的解决方案] ，在这种情况下，realm 文件会在构建过程中添加到类路径上。"

#: _versions/3.6/guides/security-openid-connect-client.adoc
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr "要启动Keycloak服务器，您可以使用Docker服务，且只需运行以下命令："

#: _versions/3.6/guides/security-openid-connect-client.adoc
msgid "where `keycloak.version` should be set to `17.0.0` or higher."
msgstr "其中 `keycloak.version` 应该设置为 `17.0.0` 或更高。"

#: _versions/3.6/guides/security-openid-connect-client.adoc
msgid "You should be able to access your Keycloak Server at http://localhost:8180[localhost:8180]."
msgstr "你应该能够通过 http://localhost:8180[localhost:8180] 访问你的Keycloak服务器。"

#: _versions/3.6/guides/security-openid-connect-client.adoc
msgid "Log in as the `admin` user to access the Keycloak Administration Console. Username should be `admin` and password `admin`."
msgstr "以 `admin` 用户身份登录，访问Keycloak管理控制台。用户名应该是 `admin` ，密码是 `admin` 。"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Import the link:{quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[realm configuration file] to create a new realm. For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr "导入 link:{quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[领域配置文件] 以创建新领域。更多详情，请参阅 Keycloak 有关如何 link:https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[创建新领域] 的文档。"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "This `quarkus` realm file will add a `frontend` client, and `alice` and `admin` users. `alice` has a `user` role, `admin` - both `user` and `admin` roles."
msgstr "这个 `quarkus` realm 文件将添加一个 `frontend` 客户端以及 `alice` 和 `admin` 用户。 `alice` 有一个 `user` 角色， `admin` - 有 `user` 和 `admin` 两个角色。"

#: _versions/3.6/guides/security-openid-connect-client.adoc
msgid "Running the Application in Dev mode"
msgstr "在开发模式下运行应用程序"

#: _versions/3.6/guides/security-openid-connect-client.adoc
msgid "To run the application in a dev mode, use:"
msgstr "要在开发模式下运行应用程序，请使用："

#: _versions/3.6/guides/security-openid-connect-client.adoc
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] will launch a Keycloak container and import a `quarkus-realm.json`."
msgstr "link:security-openid-connect-dev-services.html[Keycloak开发服务] 将启动一个Keycloak容器并导入一个 `quarkus-realm.json` 。"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Open a xref:dev-ui.adoc[Dev UI] available at http://localhost:8080/q/dev-ui[/q/dev-ui] and click on a `Provider: Keycloak` link in an `OpenID Connect` `Dev UI` card."
msgstr "打开 link:http://localhost:8080/q/dev-ui[/q/dev-ui] 上的 xref:dev-ui.adoc[Dev UI] ，点击 `OpenID Connect` `Dev UI` 卡上的 `Provider: Keycloak` 链接。"

#: _versions/3.6/guides/security-openid-connect-client.adoc
msgid "You will be asked to log in into a `Single Page Application` provided by `OpenID Connect Dev UI`:"
msgstr "您将被要求登录到由 `OpenID Connect Dev UI` 提供的 `Single Page Application` ："

#: _versions/3.6/guides/security-openid-connect-client.adoc
msgid "Login as `alice` (password: `alice`) who has a `user` role"
msgstr "以 `alice` （密码： `alice` ）的身份登录，他的角色(role)是 `user`"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "accessing `/frontend/user-name-with-propagated-token` will return `200`"
msgstr "访问 `/frontend/user-name-with-propagated-token` 将返回 `200`"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "accessing `/frontend/admin-name-with-propagated-token` will return `403`"
msgstr "访问 `/frontend/admin-name-with-propagated-token` 将返回 `403`"

#: _versions/3.6/guides/security-openid-connect-client.adoc
msgid "Logout and login as `admin` (password: `admin`) who has both `admin` and `user` roles"
msgstr "退出并以 `admin` （密码： `admin` ）的身份登录，他同时拥有 `admin` 和 `user` 的角色(roles)"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "accessing `/frontend/admin-name-with-propagated-token` will return `200`"
msgstr "访问 `/frontend/admin-name-with-propagated-token` 将返回 `200`"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "In this case you are testing that `FrontendResource` can propagate the access tokens acquired by `OpenID Connect Dev UI`."
msgstr "在这种情况下，您需要测试 `FrontendResource` 能否传播 `OpenID Connect Dev UI` 获取的访问令牌。"

#: _versions/3.6/guides/security-openid-connect-client.adoc
msgid "Running the Application in JVM mode"
msgstr "在JVM模式下运行应用程序"

#: _versions/3.6/guides/security-openid-connect-client.adoc
msgid "When you're done playing with the `dev` mode\" you can run it as a standard Java application."
msgstr "当您尝试完毕 `开发` 模式后，您可以把它作为一个标准的Java应用程序运行。"

#: _versions/3.6/guides/security-openid-connect-client.adoc
msgid "First compile it:"
msgstr "首先编译它："

#: _versions/3.6/guides/security-openid-connect-client.adoc
msgid "Then run it:"
msgstr "然后运行："

#: _versions/3.6/guides/security-openid-connect-client.adoc
msgid "Running the Application in Native Mode"
msgstr "在本地模式下运行应用程序"

#: _versions/3.6/guides/security-openid-connect-client.adoc
msgid "This same demo can be compiled into native code: no modifications required."
msgstr "这个同样的演示可以被编译成本地代码：不需要任何修改。"

#: _versions/3.6/guides/security-openid-connect-client.adoc
msgid ""
"This implies that you no longer need to install a JVM on your\n"
"production environment, as the runtime technology is included in\n"
"the produced binary, and optimized to run with minimal resource overhead."
msgstr "这意味着您不再需要在您的生产环境中安装JVM，因为运行时技术包含在生产的二进制文件中，并以最小的资源开销优化运行。"

#: _versions/3.6/guides/security-openid-connect-client.adoc
msgid ""
"Compilation will take a bit longer, so this step is disabled by default;\n"
"let's build again by enabling the `native` profile:"
msgstr "编译会花一点时间，所以这一步默认是禁用的；让我们通过启用 `native` profile来再次构建："

#: _versions/3.6/guides/security-openid-connect-client.adoc
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr "一杯咖啡的时间后，您就可以直接运行该二进制文件了："

#: _versions/3.6/guides/security-openid-connect-client.adoc
msgid "Testing the Application"
msgstr "测试应用程序"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "See xref:keycloak-dev-mode[Running the Application in Dev mode] section above about testing your application in dev mode."
msgstr "有关在开发模式下测试 xref:keycloak-dev-mode[应用程序] ，请参阅上文 \"在开发模式下 xref:keycloak-dev-mode[运行] 应用程序 \"一节。"

#: _versions/3.6/guides/security-openid-connect-client.adoc
msgid "You can test the application launched in JVM or Native modes with `curl`."
msgstr "您可以用 `curl` 测试在JVM或Native模式下启动的应用程序。"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Obtain an access token for `alice`:"
msgstr "获取 `alice` 的访问令牌："

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Now use this token to call `/frontend/user-name-with-propagated-token` and `/frontend/admin-name-with-propagated-token`:"
msgstr "现在使用此令牌调用 `/frontend/user-name-with-propagated-token` 和 `/frontend/admin-name-with-propagated-token` ："

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "will return `200` status code and the name `alice` while"
msgstr "将返回 `200` 状态代码和名称 `alice` ，而"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "will return `403` - recall that `alice` only has a `user` role."
msgstr "将返回 `403` - 记得 `alice` 只具有 `user` 的作用。"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Next obtain an access token for `admin`:"
msgstr "然后获取 `admin` 的访问令牌："

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "and use this token to call `/frontend/user-name-with-propagated-token` and `/frontend/admin-name-with-propagated-token`:"
msgstr "并使用此令牌调用 `/frontend/user-name-with-propagated-token` 和 `/frontend/admin-name-with-propagated-token` ："

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "will return `200` status code and the name `admin`, and"
msgstr "将返回 `200` 状态代码和名称 `admin` ，而"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "will also return `200` status code and the name `admin`, as `admin` has both `user` and `admin` roles."
msgstr "也将返回 `200` 状态代码和名称 `admin` ，因为 `admin` 同时具有 `user` 和 `admin` 两个角色。"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Now let's check `FrontendResource` methods which do not propagate the existing tokens but use `OidcClient` to acquire and propagate the tokens. You have seen that `OidcClient` is configured to acquire the tokens for the `alice` user, so:"
msgstr "现在让我们检查 `FrontendResource` 方法，这些方法不会传播现有的令牌，而是使用 `OidcClient` 获取和传播令牌。您已经看到 `OidcClient` 被配置为获取 `alice` 用户的令牌，因此："

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "will return `200` status code and the name `alice`, but"
msgstr "将返回 `200` 状态代码和 `alice` 名称，但"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "will return `403` status code."
msgstr "将返回 `403` 状态代码。"

#: _versions/3.6/guides/security-openid-connect-client.adoc
msgid "References"
msgstr "参考文献"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "xref:security-openid-connect-client-reference.adoc[OpenID Connect Client and Token Propagation Reference Guide]"
msgstr "xref:security-openid-connect-client-reference.adoc[OpenID Connect 客户端和令牌传播参考指南]"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]"
msgstr "xref:security-oidc-bearer-token-authentication.adoc[OIDC 承载令牌验证]"

#: _versions/3.6/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus 安全概述]"
