msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "OpenID Connect authorization code flow mechanism for protecting web applications"
msgstr "用于保护网络应用程序的 OpenID Connect 授权代码流机制"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "To protect your web applications, you can use the industry-standard OpenID Connect (OIDC) Authorization Code Flow mechanism provided by the Quarkus OIDC extension."
msgstr "为了保护您的网络应用程序，您可以使用 Quarkus OIDC 扩展提供的行业标准 OpenID Connect (OIDC) 授权码流机制。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Overview of the OIDC authorization code flow mechanism"
msgstr "OIDC 授权代码流机制概述"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The Quarkus OpenID Connect (OIDC) extension can protect application HTTP endpoints by using the OIDC Authorization Code Flow mechanism supported by OIDC-compliant authorization servers, such as link:https://www.keycloak.org[Keycloak]."
msgstr "Quarkus OpenID Connect（OIDC）扩展可通过使用符合 OIDC 标准的授权服务器（如 link:https://www.keycloak.org[Keycloak] ）所支持的 OIDC 授权码流机制来保护应用程序 HTTP 端点。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The Authorization Code Flow mechanism authenticates users of your web application by redirecting them to an OIDC provider, such as Keycloak, to log in.\n"
"After authentication, the OIDC provider redirects the user back to the application with an authorization code that confirms that authentication was successful.\n"
"Then, the application exchanges this code with the OIDC provider for an ID token (which represents the authenticated user), an access token, and a refresh token to authorize the user's access to the application."
msgstr "授权码流机制通过将网络应用程序的用户重定向到 OIDC 提供商（如 Keycloak）进行登录来验证用户身份。身份验证后，OIDC 提供商会将用户重定向回应用程序，并提供一个授权代码，确认身份验证成功。然后，应用程序将该代码与 OIDC 提供商交换 ID 令牌（代表已通过身份验证的用户）、访问令牌和刷新令牌，以授权用户访问应用程序。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The following diagram outlines the Authorization Code Flow mechanism in Quarkus."
msgstr "下图概述了 Quarkus 的授权代码流机制。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Authorization code flow mechanism in Quarkus"
msgstr "Quarkus 中的授权代码流机制"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The Quarkus user requests access to a Quarkus web-app application."
msgstr "Quarkus 用户请求访问 Quarkus 网络应用程序。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The Quarkus web-app redirects the user to the authorization endpoint, that is, the OIDC provider for authentication."
msgstr "Quarkus 网络应用程序会将用户重定向到授权端点，即 OIDC 提供商进行身份验证。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The OIDC provider redirects the user to a login and authentication prompt."
msgstr "OIDC 提供商会将用户重定向到登录和身份验证提示。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "At the prompt, the user enters their user credentials."
msgstr "在提示符下，用户输入用户凭据。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The OIDC provider authenticates the user credentials entered and, if successful, issues an authorization code then redirects the user back to the Quarkus web-app with the code included as a query parameter."
msgstr "OIDC 提供商会对输入的用户凭据进行验证，如果验证成功，会发出一个授权代码，然后将用户重定向到 Quarkus 网络应用程序，并将代码作为查询参数。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The Quarkus web-app exchanges this authorization code with the OIDC provider for ID, access, and refresh tokens."
msgstr "Quarkus 网络应用程序与 OIDC 提供商交换此授权代码，以获取 ID、访问和刷新令牌。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The authorization code flow is completed and the Quarkus web-app uses the tokens issued to access information about the user and grants the relevant role-based authorization to that user.\n"
"The following tokens are issued:"
msgstr "授权代码流程完成后，Quarkus 网络应用程序将使用所签发的令牌访问用户信息，并向该用户授予相关的基于角色的授权。发布的令牌如下"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "ID token: The Quarkus `web-app` application uses the user information in the ID token to enable the authenticated user to log in securely and to provide role-based access to the web application."
msgstr "ID 令牌：Quarkus `web-app` 应用程序使用 ID 令牌中的用户信息，使通过身份验证的用户能够安全登录，并提供对网络应用程序的基于角色的访问。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Access token: The Quarkus web-app might use the access token to access the UserInfo API to get additional information about the authenticated user or to propagate it to another endpoint."
msgstr "访问令牌：Quarkus 网络应用程序可使用访问令牌访问用户信息应用程序接口（UserInfo API），以获取已验证用户的其他信息，或将其传播到其他端点。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Refresh token: (Optional) If the ID and access tokens expire, the Quarkus web-app can use the refresh token to get new ID and access tokens."
msgstr "刷新令牌：（可选）如果 ID 和访问令牌过期，Quarkus 网络应用程序可使用刷新令牌获取新的 ID 和访问令牌。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "See also the xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties] reference guide."
msgstr "另请参阅 xref:security-oidc-configuration-properties-reference.adoc[OIDC 配置属性] 参考指南。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "To learn about how you can protect web applications by using the OIDC authorization code flow mechanism, see xref:security-oidc-code-flow-authentication-tutorial.adoc[Protect a web application by using OIDC authorization code flow]"
msgstr "要了解如何使用 OIDC 授权代码流机制保护网络应用程序，请参阅 xref:security-oidc-code-flow-authentication-tutorial.adoc[使用 OIDC 授权代码流保护网络应用] 程序。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "If you want to protect service applications by using OIDC Bearer token authentication, see xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]."
msgstr "如果要使用 OIDC Bearer 令牌身份验证保护服务应用程序，请参阅 xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer 令牌身份验证] 。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "For information about how to support multiple tenants, see xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy]."
msgstr "有关如何支持多租户的信息，请参阅 xref:security-openid-connect-multitenancy.adoc[使用 OpenID Connect 多租户] 。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Using the authorization code flow mechanism"
msgstr "使用授权代码流机制"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Configuring access to the OIDC provider endpoint"
msgstr "配置对 OIDC 提供商端点的访问"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The OIDC `web-app` application requires URLs of the OIDC provider's authorization, token, `JsonWebKey` (JWK) set, and possibly the `UserInfo`, introspection, and end session (RP-initiated logout) endpoints."
msgstr "OIDC `web-app` 应用程序需要 OIDC 提供商的授权、令牌、 `JsonWebKey` (JWK) 集的 URL，可能还需要 `UserInfo` 、反省和结束会话（RP 启动的注销）端点的 URL。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "By convention, they are discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc.auth-server-url`."
msgstr "按照惯例，它们是通过在配置的 `quarkus.oidc.auth-server-url` 中添加 `/.well-known/openid-configuration` 路径来发现的。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Alternatively, if the discovery endpoint is not available, or you prefer to reduce the discovery endpoint round-trip, you can disable endpoint discovery and configure relative path values, for example:"
msgstr "另外，如果发现端点不可用，或者希望减少发现端点的往返次数，可以禁用端点发现并配置相对路径值等："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Some OIDC providers support metadata discovery but do not return all the endpoint URL values required for the authorization code flow to complete or to support application functions, for example, user logout.\n"
"To work around this limitation, you can configure the missing endpoint URL values locally, as outlined in the following example:"
msgstr "某些 OIDC 提供商支持元数据发现，但不会返回完成授权代码流或支持应用程序功能（如用户注销）所需的所有端点 URL 值。要绕过这一限制，可以在本地配置缺失的端点 URL 值，如下例所示："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"You can use this same configuration to override a discovered endpoint URL if that URL does not work for the local Quarkus endpoint and a more specific value is required.\n"
"For example, a provider that supports both global and application-specific end-session endpoints returns a global end-session URL such as `http://localhost:8180/oidcprovider/account/global-logout`.\n"
"This URL will log the user out of all of the applications that the user is currently logged into.\n"
"However, if the requirement is for the current application to log the user out of only the specific application, you can override the global end-session URL, by setting the `quarkus.oidc.end-session-path=logout` parameter."
msgstr "如果发现的端点 URL 不适用于本地 Quarkus 端点，而需要更具体的值，则可以使用相同的配置来覆盖该 URL。例如，同时支持全局和应用程序特定端会话端点的提供程序会返回一个全局端会话 URL，如 `http://localhost:8180/oidcprovider/account/global-logout` .该 URL 将注销用户当前登录的所有应用程序。但是，如果要求当前应用程序只将用户注销特定应用程序，则可以通过设置 `quarkus.oidc.end-session-path=logout` 参数来覆盖全局结束会话 URL。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "OIDC provider client authentication"
msgstr "OIDC 提供商客户端验证"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"OIDC providers typically require applications to be identified and authenticated when they interact with the OIDC endpoints.\n"
"Quarkus OIDC, specifically the `quarkus.oidc.runtime.OidcProviderClient` class,  authenticates to the OIDC provider when the authorization code must be exchanged for the ID, access, and refresh tokens, or when the ID and access tokens need to be refreshed or introspected."
msgstr "OIDC 提供商通常要求应用程序在与 OIDC 端点交互时进行身份识别和验证。Quarkus OIDC，特别是 `quarkus.oidc.runtime.OidcProviderClient` 类，在必须交换 ID、访问和刷新令牌的授权代码时，或者在需要刷新或反省 ID 和访问令牌时，会对 OIDC 提供商进行身份验证。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Typically, client id and client secrets are defined for a given application when it enlists to the OIDC provider.\n"
"All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
msgstr "通常情况下，客户 ID 和客户机密是在特定应用程序加入 OIDC 提供商时为其定义的。例如，支持所有 link:https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC 客户端身份验证] 选项："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Example of  `client_secret_basic`:"
msgstr "`client_secret_basic` 示例 ："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Or:"
msgstr "或者"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The following example shows the secret retrieved from a xref:credentials-provider.adoc[credentials provider]:"
msgstr "下面的示例显示了从 xref:credentials-provider.adoc[凭证提供者] 那里获取的秘密："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Example of `client_secret_post`"
msgstr "实例 `client_secret_post`"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Example of `client_secret_jwt`, where the signature algorithm is HS256:"
msgstr "`client_secret_jwt` 示例，签名算法为 HS256："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Example of `client_secret_jwt`, where the secret is retrieved from a xref:credentials-provider.adoc[credentials provider]:"
msgstr "`client_secret_jwt` 的示例，其中的秘密是从 xref:credentials-provider.adoc[凭证提供者] 那里获取的："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Example of `private_key_jwt` with the PEM key file, and where the signature algorithm is RS256:"
msgstr "使用 PEM 密钥文件和 RS256 签名算法的 `private_key_jwt` 示例："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Example of `private_key_jwt` with the keystore file, where the signature algorithm is RS256:"
msgstr "使用密钥存储文件 `private_key_jwt` 的示例，其中签名算法为 RS256："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that a client secret does not get sent to the OIDC provider, therefore avoiding the risk of a secret being intercepted by a  'man-in-the-middle' attack."
msgstr "使用 `client_secret_jwt` 或 `private_key_jwt` 身份验证方法可确保客户端秘密不会发送给 OIDC 提供商，从而避免秘密被 \"中间人 \"攻击截获的风险。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Additional JWT authentication options"
msgstr "其他 JWT 身份验证选项"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "If `client_secret_jwt`, `private_key_jwt` authentication methods are used or an Apple `post_jwt` method is used, then the JWT signature algorithm, key identifier, audience, subject and issuer can be customized, for example:"
msgstr "如果使用 `client_secret_jwt` 、 `private_key_jwt` 身份验证方法或 Apple `post_jwt` 方法，则可以定制 JWT 签名算法、密钥标识符、受众、主题和签发人等："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Apple POST JWT"
msgstr "苹果 POST JWT"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The Apple OIDC provider uses a `client_secret_post` method whereby a secret is a JWT produced with a `private_key_jwt` authentication method but with the Apple account-specific issuer and subject claims."
msgstr "苹果 OIDC 提供商使用 `client_secret_post` 方法，其中的秘密是使用 `private_key_jwt` 身份验证方法生成的 JWT，但包含特定于苹果账户的签发人和主体声明。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "In Quarkus Security, `quarkus-oidc` supports a non-standard `client_secret_post_jwt` authentication method, which you can configure as follows:"
msgstr "在 Quarkus Security 中， `quarkus-oidc` 支持一种非标准的 `client_secret_post_jwt` 身份验证方法，可以按如下方式进行配置："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "mutual TLS (mTLS)"
msgstr "相互 TLS（mTLS）"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Some OpenID Connect providers might require that a client is authenticated as part of the mutual TLS  authentication process."
msgstr "某些 OpenID Connect 提供商可能会要求将客户端身份验证作为 TLS 交互身份验证过程的一部分。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The following example shows how you can configure `quarkus-oidc` to support `mTLS`:"
msgstr "下面的示例显示了如何配置 `quarkus-oidc` 以支持 `mTLS` ："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Introspection endpoint authentication"
msgstr "自省端点验证"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Some OIDC providers require authenticating to its introspection endpoint by using Basic authentication and with credentials that are different to the `client_id` and `client_secret`.\n"
"If you have previously configured security authentication to support either the`client_secret_basic` or `client_secret_post` client authentication methods as described in the xref:oidc-provider-client-authentication[OIDC provider client authentication]  section, you might need to apply the additional configuration, as follows."
msgstr "某些 OIDC 提供商要求使用基本身份验证和不同于 `client_id` 和 `client_secret` 的凭据对其自省端点进行身份验证。如果您之前已配置了安全身份验证，以支持 xref:oidc-provider-client-authentication[OIDC 提供商客户端] 身份验证部分所述的 \"client_secret_basic \"或 `client_secret_post` xref:oidc-provider-client-authentication[客户端] 身份验证方法，则可能需要应用附加配置，如下所示。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "If the tokens have to be introspected and the introspection endpoint-specific authentication mechanism is required, then you can configure `quarkus-oidc`, as follows:"
msgstr "如果必须对令牌进行反省，并且需要特定于反省端点的身份验证机制，则可以按如下方式配置 `quarkus-oidc` , ："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "OIDC request customization"
msgstr "OIDC 申请定制"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can customize OIDC requests made by Quarkus to the OIDC provider by registering one or more `OidcRequestFiler` implementations which can update or add new request headers, please see xref:security-openid-connect-client-reference#oidc-client-filters[Client request customization] for more information."
msgstr "您可以通过注册一个或多个 `OidcRequestFiler` 实现来定制 Quarkus 向 OIDC 提供商发出的 OIDC 请求，这些实现可以更新或添加新的请求标头，更多信息请参阅 xref:security-openid-connect-client-reference.adoc#oidc-client-filters[客户端请求定制] 。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Redirecting to and from the OIDC provider"
msgstr "重定向至 OIDC 提供商或从 OIDC 提供商重定向至 OIDC 提供商"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"When a user is redirected to the OpenID Connect provider to authenticate, the redirect URL includes a `redirect_uri` query parameter, which indicates to the provider where the user has to be redirected to when the authentication is complete.\n"
"In our case, this is the Quarkus application."
msgstr "当用户被重定向到 OpenID Connect 提供商处进行身份验证时，重定向 URL 会包含一个 `redirect_uri` 查询参数，该参数用于向提供商指明身份验证完成后用户必须被重定向到的位置。在我们的例子中，这就是 Quarkus 应用程序。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Quarkus sets this parameter to the current application request URL by default.\n"
"For example, if a user is trying to access a Quarkus service endpoint at `http://localhost:8080/service/1` then the `redirect_uri` parameter is set to `http://localhost:8080/service/1`.\n"
"Similarly, if the request URL is `http://localhost:8080/service/2` then the `redirect_uri` parameter is set to `http://localhost:8080/service/2`."
msgstr "Quarkus 默认将此参数设置为当前应用程序请求 URL。例如，如果用户试图访问位于 `http://localhost:8080/service/1` 则 `redirect_uri` 参数设置为 `http://localhost:8080/service/1` .同样，如果请求 URL 是 `http://localhost:8080/service/2` 则 `redirect_uri` 参数设置为 `http://localhost:8080/service/2` ."

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Some OIDC providers require the `redirect_uri` to have the same value for a given application, for example, `http://localhost:8080/service/callback`, for all the redirect URLs.\n"
"In such cases, a `quarkus.oidc.authentication.redirect-path` property has to be set, for example, `quarkus.oidc.authentication.redirect-path=/service/callback`, and Quarkus will set the `redirect_uri` parameter to an absolute URL such as `http://localhost:8080/service/callback`, which will be the same regardless of the current request URL."
msgstr "有些 OIDC 提供商要求 `redirect_uri` 对特定应用程序具有相同的值，例如、 `http://localhost:8080/service/callback` ，所有重定向 URL 的值都相同。在这种情况下，必须设置 `quarkus.oidc.authentication.redirect-path` 属性，例如 `quarkus.oidc.authentication.redirect-path=/service/callback` ，Quarkus 会将 `redirect_uri` 参数设置为绝对 URL，如 `http://localhost:8080/service/callback` ，无论当前请求的 URL 如何，该 URL 都是相同的。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"If `quarkus.oidc.authentication.redirect-path` is set but you need the original request URL to be restored after the user has been redirected back to a unique callback URL, for example,  `http://localhost:8080/service/callback`, set `quarkus.oidc.authentication.restore-path-after-redirect` property to `true`.\n"
"This will restore the request URL such as `http://localhost:8080/service/1`."
msgstr "如果设置了 `quarkus.oidc.authentication.redirect-path` ，但需要在用户被重定向到一个唯一的回调 URL 后恢复原来的请求 URL（例如），则应将 属性设置为 、 `http://localhost:8080/service/callback` 则应将 `quarkus.oidc.authentication.restore-path-after-redirect` 属性设置为 `true` 。这将恢复请求 URL，如 `http://localhost:8080/service/1` ."

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Customizing authentication requests"
msgstr "自定义身份验证请求"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "By default, only the `response_type` (set to `code`), `scope` (set to 'openid'), `client_id`, `redirect_uri` and `state` properties are passed as HTTP query parameters to the OpenID Connect provider's authorization endpoint when the user is redirected to it to authenticate."
msgstr "默认情况下，当用户被重定向到 OpenID Connect 提供商的授权端点进行身份验证时，只有 `response_type` （设置为 `code` ）、 `scope` （设置为 \"openid\"）、 `client_id` 、 `redirect_uri` 和 `state` 属性会作为 HTTP 查询参数传递给该端点。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"You can add more properties to it with `quarkus.oidc.authentication.extra-params`.\n"
"For example, some OIDC providers might choose to return the authorization code as part of the redirect URI's fragment, which would break the authentication process.\n"
"The following example shows how you can work around this issue:"
msgstr "您可以通过 `quarkus.oidc.authentication.extra-params` 添加更多属性。例如，某些 OIDC 提供商可能会选择将授权代码作为重定向 URI 片段的一部分返回，这样就会破坏身份验证过程。下面的示例展示了如何解决这个问题："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Customizing the authentication error response"
msgstr "自定义身份验证错误响应"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"If the user authentication fails at the OIDC authorization endpoint, then the provider will redirect the user back to Quarkus with `error` and `error_description` parameters instead of `code`.\n"
"For example, this can happen when an invalid scope or other invalid parameters are included in the redirect to the provider."
msgstr "如果用户身份验证在 OIDC 授权端点失败，那么提供商将使用 `error` 和 `error_description` 参数而不是 `code` 把用户重定向回 Quarkus。例如，当重定向到提供商的过程中包含无效范围或其他无效参数时，就会发生这种情况。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"In such cases, an HTTP `401`error will be returned by default.\n"
"However, you can instead request that a custom public error endpoint is called to return a more user-friendly HTML error page.\n"
"To do this, set the `quarkus.oidc.authentication.error-path` property, as shown in the following example:"
msgstr "在这种情况下，HTTP `401`error will be returned by default. However, you can instead request that a custom public error endpoint is called to return a more user-friendly HTML error page. To do this, set the `quarkus.oidc.authentication.error-path` 属性，如下例所示："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Ensure that the property starts with a forward slash (/) character and the path is relative to the base URI of the current endpoint.\n"
"For example, if it is set as '/error' and the current request URI is `https://localhost:8080/callback?error=invalid_scope` then a final redirect will be made to `https://localhost:8080/error?error=invalid_scope`."
msgstr "确保该属性以斜线 (/) 字符开头，且路径相对于当前端点的基本 URI。例如，如果设置为\"/error\"，而当前请求 URI 为 `https://localhost:8080/callback?error=invalid_scope` 则最终将重定向到 `https://localhost:8080/error?error=invalid_scope` ."

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "It is important to ensure that this error endpoint is a public resource to prevent the user from being redirected to this page to be authenticated again."
msgstr "必须确保该错误端点是公共资源，以防止用户被重定向到该页面再次进行身份验证。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Accessing authorization data"
msgstr "访问授权数据"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Let's first discuss how to access information around authorization."
msgstr "我们先来讨论一下如何获取有关授权的信息。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Accessing ID and access tokens"
msgstr "访问 ID 和访问令牌"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The OIDC code authentication mechanism acquires three tokens during the authorization code flow: https://openid.net/specs/openid-connect-core-1_0.html#IDToken[IDToken], Access Token, and Refresh Token."
msgstr "OIDC 代码验证机制在授权代码流程中获取三个令牌： link:https://openid.net/specs/openid-connect-core-1_0.html#IDToken[IDToken] 、访问令牌和刷新令牌。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"ID Token is always a JWT token and is used to represent a user authentication with the JWT claims.\n"
"You can use this to get the issuing OIDC endpoint, the username, and other information called _claims_.\n"
"One can access ID Token claims by injecting `JsonWebToken` with an `IdToken` qualifier:"
msgstr "ID 令牌始终是一个 JWT 令牌，用于表示用户通过 JWT 索赔进行的身份验证。你可以用它来获取签发的 OIDC 端点、用户名和其他称为 _权利要求_ 的信息。通过注入带有 `IdToken` 限定符的 `JsonWebToken` ，可以访问 ID 令牌声明："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Access Token is usually used by the OIDC `web-app` application to access other endpoints on behalf of the currently logged-in user. The raw access token can be accessed as follows:"
msgstr "访问令牌通常由 OIDC `web-app` 应用程序使用，代表当前登录用户访问其他端点。原始访问令牌的访问方式如下："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Note that `AccessTokenCredential` is used if the access token issued to the Quarkus `web-app` application is opaque (binary) and can not be parsed to a `JsonWebToken` or if the inner content is necessary for the application."
msgstr "请注意，如果发给 Quarkus `web-app` 应用程序的访问令牌是不透明的（二进制），无法解析为 `JsonWebToken` ，或者应用程序需要内部内容，则应使用 `AccessTokenCredential` 。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Injection of the `JsonWebToken` and `AccessTokenCredential` is supported in both `@RequestScoped` and `@ApplicationScoped` contexts."
msgstr "`@RequestScoped` 和 `@ApplicationScoped` 上下文都支持注入 `JsonWebToken` 和 `AccessTokenCredential` 。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "RefreshToken is used by Quarkusn OIDC to refresh the current ID and access tokens as part of its xref:session-management[session management] process."
msgstr "作为 xref:session-management[会话管理] 流程的一部分，Quarkusn OIDC 使用 RefreshToken 来刷新当前 ID 和访问令牌。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "User info"
msgstr "用户信息"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"If the ID token does not provide enough information about the currently-authenticated user, you can get more information from the `UserInfo` endpoint.\n"
"Set the `quarkus.oidc.authentication.user-info-required=true` property for a link:https://openid.net/specs/openid-connect-core-1_0.html#UserInfo[UserInfo] JSON object from the OIDC `UserInfo` endpoint to be requested."
msgstr "如果 ID 标记不能提供有关当前已通过身份验证的用户的足够信息，则可从 `UserInfo` 端点获取更多信息。设置 `quarkus.oidc.authentication.user-info-required=true` 属性，以便从 OIDC `UserInfo` 端点请求 link:https://openid.net/specs/openid-connect-core-1_0.html#UserInfo[UserInfo] JSON 对象。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "A request will be sent to the OpenID Provider UserInfo endpoint using the access token returned with the authorization code grant response and an `io.quarkus.oidc.UserInfo` (a simple `jakarta.json.JsonObject` wrapper) object will be created. `io.quarkus.oidc.UserInfo` can be either injected or accessed as a SecurityIdentity `userinfo` attribute."
msgstr "将使用随授权代码授予响应返回的访问令牌向 OpenID 提供商 UserInfo 端点发送请求，并创建一个 `io.quarkus.oidc.UserInfo` （简单的 `jakarta.json.JsonObject` 封装）对象。 `io.quarkus.oidc.UserInfo` 可作为 SecurityIdentity `userinfo` 属性注入或访问。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Accessing the OIDC configuration information"
msgstr "访问 OIDC 配置信息"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "The current tenant's discovered link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect Configuration Metadata] is represented by `io.quarkus.oidc.OidcConfigurationMetadata` and can be either injected or accessed as a `SecurityIdentity` `configuration-metadata` attribute."
msgstr "当前租户发现的 link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect配置元数据] 由 `io.quarkus.oidc.OidcConfigurationMetadata` 表示，可以作为 `SecurityIdentity` `configuration-metadata` 属性注入或访问。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "The default tenant's `OidcConfigurationMetadata` is injected if the endpoint is public."
msgstr "如果端点是公开的，则默认租户的 `OidcConfigurationMetadata` 会被注入。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Mapping token claims and `SecurityIdentity` roles"
msgstr "映射令牌申请和 `SecurityIdentity` 角色"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The way the roles are mapped to the SecurityIdentity roles from the verified tokens is identical to how it is done for the xref:security-oidc-bearer-token-authentication.adoc[Bearer tokens] with the only difference being that https://openid.net/specs/openid-connect-core-1_0.html#IDToken[ID Token] is used as a source of the roles by default."
msgstr "从已验证令牌将角色映射到 SecurityIdentity 角色的方法与不 xref:security-oidc-bearer-token-authentication.adoc[记名] 令牌的方法相同，唯一的区别是 link:https://openid.net/specs/openid-connect-core-1_0.html#IDToken[ID 令牌] 默认用作角色的来源。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"If you use Keycloak, set a `microprofile_jwt` client scope for ID token to contain a `groups` claim.\n"
"For more information, see the link:https://www.keycloak.org/docs/latest/server_admin/#protocol[Keycloak Server Administration Guide]."
msgstr "如果使用 Keycloak，请为 ID 标记设置 `microprofile_jwt` 客户端范围，以包含 `groups` claim。更多信息，请参阅《 link:https://www.keycloak.org/docs/latest/server_admin/#protocol[Keycloak 服务器管理指南》] 。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "But depending on your OIDC provider, roles might be stored in the access token or the user info."
msgstr "但根据 OIDC 提供商的不同，角色可能存储在访问令牌或用户信息中。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "If the access token contains the roles and this access token is not meant to be propagated to the downstream endpoints then set `quarkus.oidc.roles.source=accesstoken`."
msgstr "如果访问令牌包含角色，且该访问令牌不打算传播给下游端点，则设置 `quarkus.oidc.roles.source=accesstoken` 。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "If UserInfo is the source of the roles then set `quarkus.oidc.roles.source=userinfo`, and if needed, `quarkus.oidc.roles.role-claim-path`."
msgstr "如果 UserInfo 是角色的来源，则设置 `quarkus.oidc.roles.source=userinfo` ，如果需要，还可设置 `quarkus.oidc.roles.role-claim-path` 。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Additionally, a custom `SecurityIdentityAugmentor` can also be used to add the roles. For more information, see xref:security-customization.adoc#security-identity-customization[SecurityIdentity customization]."
msgstr "此外，还可使用自定义 `SecurityIdentityAugmentor` 添加角色。更多信息，请参阅 xref:security-customization.adoc#security-identity-customization[SecurityIdentity 自定义] 。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Ensuring validity of tokens and authentication data"
msgstr "确保令牌和验证数据的有效性"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"A core part of the authentication process is ensuring the chain of trust and validity of the information.\n"
"This is done by ensuring tokens are trustable."
msgstr "身份验证流程的核心部分是确保信息的信任链和有效性。要做到这一点，就必须确保令牌是可信的。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Token verification and introspection"
msgstr "令牌验证和反省"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The verification process of OIDC authorization code flow tokens follows the Bearer token authentication token verification and introspection logic. For more information, see the xref:security-oidc-bearer-token-authentication.adoc#token-verification-introspection[Token Verification And Introspection] section of the \"Quarkus OpenID Connect (OIDC) Bearer token authentication\" guide."
msgstr "OIDC 授权代码流令牌的验证过程遵循不记名令牌身份验证令牌验证和反省逻辑。更多信息，请参阅 \"Quarkus OpenID Connect (OIDC) Bearer xref:security-oidc-bearer-token-authentication.adoc#token-verification-introspection[令牌] 验证 \"指南中的 xref:security-oidc-bearer-token-authentication.adoc#token-verification-introspection[令牌验证和自省] 部分。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"With Quarkus `web-app` applications, only the `IdToken` is verified by default because the access token is not used to access the current Quarkus `web-app` endpoint and is intended to be propagated to the services expecting this access token.\n"
"If you expect the access token to contain the roles required to access the current Quarkus endpoint (`quarkus.oidc.roles.source=accesstoken`) then it will also be verified."
msgstr "在 Quarkus `web-app` 应用程序中，默认情况下只验证 `IdToken` ，因为访问令牌不是用来访问当前 Quarkus `web-app` 端点的，而是要传播给期待此访问令牌的服务。如果您希望访问令牌包含访问当前 Quarkus 端点 ( `quarkus.oidc.roles.source=accesstoken` ) 所需的角色，那么它也将被验证。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Token introspection and UserInfo cache"
msgstr "令牌反省和用户信息缓存"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Code flow access tokens are not introspected unless they are expected to be the source of roles.\n"
"They will however be used to get `UserInfo`.\n"
"There will be one or two remote calls with the code flow access token, if the token introspection and/or `UserInfo` are required."
msgstr "代码流访问令牌不会被反省，除非它们被认为是角色的来源。不过，它们将用于获取 `UserInfo` 。如果需要对代码流访问令牌进行反省和/或 `UserInfo` ，将使用代码流访问令牌进行一到两次远程调用。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Please see xref:security-oidc-bearer-token-authentication.adoc#token-introspection-userinfo-cache[Token Introspection and UserInfo cache] for more information about using a default token cache or registering a custom cache implementation."
msgstr "有关使用默认 xref:security-oidc-bearer-token-authentication.adoc#token-introspection-userinfo-cache[令牌] 缓存或注册自定义缓存实现的更多信息，请参阅令牌自省和 xref:security-oidc-bearer-token-authentication.adoc#token-introspection-userinfo-cache[UserInfo] 缓存。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "JSON web token claim verification"
msgstr "JSON 网络令牌索赔验证"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Please see xref:security-oidc-bearer-token-authentication.adoc#jwt-claim-verification[JSON Web Token Claim verification] section about the claim verification, including the `iss` (issuer) claim.\n"
"It applies to ID tokens but also to access tokens in a JWT format if the `web-app` application has requested the access token verification."
msgstr "请参阅 \" xref:security-oidc-bearer-token-authentication.adoc#jwt-claim-verification[JSON 网络令牌声明验证] \"部分有关声明验证的内容，包括 `iss` （发行方）声明。它不仅适用于 ID 令牌，还适用于 JWT 格式的访问令牌（如果 `web-app` 应用程序要求进行访问令牌验证）。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Further security with Proof Key for Code Exchange (PKCE)"
msgstr "通过代码交换证明密钥 (PKCE) 进一步提高安全性"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "link:https://datatracker.ietf.org/doc/html/rfc7636[Proof Key for Code Exchange] (PKCE) minimizes the risk of authorization code interception."
msgstr "link:https://datatracker.ietf.org/doc/html/rfc7636[代码交换证明密钥] (PKCE) 可最大限度地降低授权代码被截获的风险。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"While PKCE is of primary importance to public OpenID Connect clients, such as SPA scripts running in a browser, it can also provide an extra level of protection to Quarkus OIDC `web-app` applications.\n"
"With PKCE, Quarkus OIDC `web-app` applications are confidential OpenID Connect clients capable of securely storing the client secret and using it to exchange the code for the tokens."
msgstr "虽然 PKCE 对公共 OpenID Connect 客户端（如在浏览器中运行的 SPA 脚本）至关重要，但它也可以为 Quarkus OIDC `web-app` 应用程序提供额外的保护。有了 PKCE，Quarkus OIDC `web-app` 应用程序就成了保密的 OpenID Connect 客户端，能够安全地存储客户端秘密，并用它来交换令牌代码。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can enable `PKCE` for your OIDC `web-app` endpoint with a `quarkus.oidc.authentication.pkce-required` property and a 32-character secret which is required to encrypt the PKCE code verifier in the state cookie, as shown in the following example:"
msgstr "您可以通过 `quarkus.oidc.authentication.pkce-required` 属性和 32 个字符的密文为 OIDC `web-app` 端点启用 `PKCE` ，密文需要用于加密状态 cookie 中的 PKCE 代码验证器，如下例所示："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "If you already have a 32-characters client secret then you do not need to set the  `quarkus.oidc.authentication.pkce-secret` property unless you prefer to use a different secret key. This secret will be auto-generated if it is not configured and if the fallback to the client secret is not possible in case of the client secret being less than 16 characters long."
msgstr "如果您已经拥有 32 个字符的客户机密钥，则无需设置 `quarkus.oidc.authentication.pkce-secret` 属性，除非您希望使用不同的密钥。如果未配置该密钥，并且在客户端密钥长度少于 16 个字符时无法回退到客户端密钥，则会自动生成该密钥。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The secret key is required for encrypting a randomly generated `PKCE` `code_verifier` while the user is being redirected with the `code_challenge` query parameter to an OIDC provider to authenticate.\n"
"The `code_verifier` is decrypted when the user is redirected back to Quarkus and sent to the token endpoint alongside the `code`, client secret, and other parameters to complete the code exchange.\n"
"The provider will fail the code exchange if a `SHA256` digest of the `code_verifier` does not match the `code_challenge` that was provided during the authentication request."
msgstr "当用户使用 `code_challenge` 查询参数被重定向到 OIDC 提供商进行身份验证时，需要使用秘钥对随机生成的 `PKCE` `code_verifier` 进行加密。当用户被重定向回 Quarkus 时， `code_verifier` 将被解密，并与 `code` 、客户机密钥和其他参数一起发送到令牌端点，以完成代码交换。如果 `code_verifier` 的 `SHA256` 摘要与认证请求中提供的 `code_challenge` 不匹配，提供程序将导致代码交换失败。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Handling and controlling the lifetime of authentication"
msgstr "处理和控制身份验证的有效期"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Another important requirement for authentication is to ensure that the data the session is based on is up-to-date without requiring the user to authenticate for every single request.\n"
"There are also situations where a logout event is explicitly requested.\n"
"Use the following key points to find the right balance for securing your Quarkus applications:"
msgstr "身份验证的另一个重要要求是确保会话所基于的数据是最新的，而不要求用户对每个请求都进行身份验证。在某些情况下，还需要明确请求注销事件。利用以下要点，找到确保 Quarkus 应用程序安全的正确平衡点："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Cookies"
msgstr "曲奇"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The OIDC adapter uses cookies to keep the session, code flow, and post-logout state.\n"
"This state is a key element controlling the lifetime of authentication data."
msgstr "OIDC 适配器使用 cookies 保存会话、代码流和注销后状态。这种状态是控制身份验证数据寿命的关键因素。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Use the `quarkus.oidc.authentication.cookie-path` property to ensure that the same cookie is visible when you access protected resources with overlapping or different roots, for example:"
msgstr "例如，使用 `quarkus.oidc.authentication.cookie-path` 属性可确保在访问受保护资源时，同一 cookie 在重叠或不同根目录下可见："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "`/index.html` and `/web-app/service`"
msgstr "`/index.html` 和 `/web-app/service`"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "`/web-app/service1` and `/web-app/service2`"
msgstr "`/web-app/service1` 和 `/web-app/service2`"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "`/web-app1/service` and `/web-app2/service`"
msgstr "`/web-app1/service` 和 `/web-app2/service`"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "By default, `quarkus.oidc.authentication.cookie-path` is set to `/` but you can change this to a more specific path if required, for example, `/web-app`."
msgstr "默认情况下， `quarkus.oidc.authentication.cookie-path` 设置为 `/` ，但您可以根据需要将其更改为更具体的路径，例如 `/web-app` 。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"To set the cookie path dynamically, configure the `quarkus.oidc.authentication.cookie-path-header` property.\n"
"Set the `quarkus.oidc.authentication.cookie-path-header` property.\n"
"For example, to set the cookie path dynamically by using the value of the`X-Forwarded-Prefix` HTTP header, configure the property to `quarkus.oidc.authentication.cookie-path-header=X-Forwarded-Prefix`."
msgstr "要动态设置 cookie 路径，请配置 `quarkus.oidc.authentication.cookie-path-header` 属性。设置 `quarkus.oidc.authentication.cookie-path-header` 属性。例如，要使用 \"X-Forwarded-Prefix \"HTTP 标头的值动态设置 cookie 路径，可将该属性配置为 `quarkus.oidc.authentication.cookie-path-header=X-Forwarded-Prefix` 。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "If `quarkus.oidc.authentication.cookie-path-header` is set but no configured HTTP header is available in the current request then the `quarkus.oidc.authentication.cookie-path` will be checked."
msgstr "如果 `quarkus.oidc.authentication.cookie-path-header` 已设置，但当前请求中没有配置的 HTTP 头信息，则将检查 `quarkus.oidc.authentication.cookie-path` 。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"If your application is deployed across multiple domains, set the `quarkus.oidc.authentication.cookie-domain` property so that the session cookie is visible to all protected Quarkus services.\n"
"For example, if you have Quarkus services deployed on the following two domains, then you must set the `quarkus.oidc.authentication.cookie-domain` property to `company.net`."
msgstr "如果您的应用程序部署在多个域上，请设置 `quarkus.oidc.authentication.cookie-domain` 属性，以便所有受保护的 Quarkus 服务都能看到会话 cookie。例如，如果在以下两个域上部署了 Quarkus 服务，则必须将 `quarkus.oidc.authentication.cookie-domain` 属性设置为 `company.net` 。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "\\https://whatever.wherever.company.net/"
msgstr "https://whatever.wherever.company.net/"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "\\https://another.address.company.net/"
msgstr "https://another.address.company.net/"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Session cookie and default TokenStateManager"
msgstr "会话 cookie 和默认 TokenStateManager"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "OIDC `CodeAuthenticationMechanism` uses the default `io.quarkus.oidc.TokenStateManager` interface implementation to keep the ID, access, and refresh tokens returned in the authorization code or refresh grant responses in an encrypted session cookie."
msgstr "OIDC `CodeAuthenticationMechanism` 使用默认的 `io.quarkus.oidc.TokenStateManager` 接口实现，将授权代码或刷新授权响应中返回的 ID、访问和刷新令牌保存在加密的会话 cookie 中。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "It makes Quarkus OIDC endpoints completely stateless and it is recommended to follow this strategy in order to achieve the best scalability results."
msgstr "这使得 Quarkus OIDC 端点完全无状态，建议采用这种策略，以获得最佳的可扩展性效果。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "See xref:db-token-state-manager[Database TokenStateManager] and xref:custom-token-state-manager[Session cookie and custom TokenStateManager] sections of this guide for alternative approaches where tokens can be stored in the database or other server-side storage, if you prefer and have good reasons for storing the token state on the server."
msgstr "请参阅本指南的 xref:db-token-state-manager[数据库令牌状态管理器（Database TokenStateManager] ）和 xref:custom-token-state-manager[会话 cookie 及自定义令牌状态管理器（Session Cookie and Custom TokenStateManager] ）章节，了解令牌可存储在数据库或其他服务器端存储中的替代方法，如果你更喜欢并有充分理由在服务器上存储令牌状态。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can configure the default `TokenStateManager` to avoid saving an access token in the session cookie and only keep ID and refresh tokens or ID token only."
msgstr "您可以对默认 `TokenStateManager` 进行配置，避免在会话 cookie 中保存访问令牌，而只保存 ID 和刷新令牌或只保存 ID 令牌。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "An access token is only required if the endpoint needs to:"
msgstr "只有在端点需要时才需要访问令牌："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Retrieve `UserInfo`"
msgstr "检索 `UserInfo`"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Access the downstream service with this access token"
msgstr "使用此访问令牌访问下游服务"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Use the roles associated with the access token, which are checked by default"
msgstr "使用与访问令牌相关联的角色，默认情况下会选中这些角色"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "In such cases, use the `quarkus.oidc.token-state-manager.strategy` property to configure the token state strategy as follows:"
msgstr "在这种情况下，使用 `quarkus.oidc.token-state-manager.strategy` 属性配置令牌状态策略如下："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "To..."
msgstr "要..."

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Set the property to ..."
msgstr "将属性设置为 ..."

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Keep the ID and refresh tokens only"
msgstr "只保留 ID 和刷新令牌"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "`quarkus.oidc.token-state-manager.strategy=id-refresh-token`"
msgstr "`quarkus.oidc.token-state-manager.strategy=id-refresh-token`"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Keep the ID token only"
msgstr "只保留 ID 标记"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "`quarkus.oidc.token-state-manager.strategy=id-token`"
msgstr "`quarkus.oidc.token-state-manager.strategy=id-token`"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"If your chosen session cookie strategy combines tokens and generates a large session cookie value that is greater than 4KB, some browsers might not be able to handle such cookie sizes.\n"
"This can occur when the ID, access, and refresh tokens are JWT tokens and the selected strategy is `keep-all-tokens` or with ID and refresh tokens when the strategy is `id-refresh-token`.\n"
"To workaround this issue, you can set `quarkus.oidc.token-state-manager.split-tokens=true` to create a unique session token for each token. An alternative solution is to have the tokens saved in the database, see xref:db-token-state-manager[Database TokenStateManager] for more information."
msgstr "如果您选择的会话 cookie 策略结合了令牌并生成了大于 4KB 的大型会话 cookie 值，某些浏览器可能无法处理此类 cookie 大小。如果 ID、访问和刷新令牌是 JWT 令牌，且所选策略是 `keep-all-tokens` ，或者 ID 和刷新令牌的策略是 `id-refresh-token` ，就会出现这种情况。要解决这个问题，可以设置 `quarkus.oidc.token-state-manager.split-tokens=true` ，为每个令牌创建唯一的会话令牌。另一个解决方案是将令牌保存在数据库中，更多信息请参阅 xref:db-token-state-manager[数据库令牌状态管理器（Database TokenStateManager] ）。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Default `TokenStateManager` encrypts the tokens before storing them in the session cookie.\n"
"The following example shows how you configure it to split the tokens and encrypt them:"
msgstr "默认情况下， `TokenStateManager` 会先加密令牌，然后再将其存储到会话 cookie 中。下面的示例显示了如何配置以分割令牌并对其加密："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The token encryption secret must be at least 32 characters long.\n"
"If this key is not configured then either `quarkus.oidc.credentials.secret` or `quarkus.oidc.credentials.jwt.secret` will be hashed to create an encryption key."
msgstr "令牌加密密钥的长度必须至少为 32 个字符。如果未配置该密钥，则 `quarkus.oidc.credentials.secret` 或 `quarkus.oidc.credentials.jwt.secret` 将被散列以创建加密密钥。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Configure the `quarkus.oidc.token-state-manager.encryption-secret` property if Quarkus authenticates to the OpenId Connect Provider by using one of the following authentication methods:"
msgstr "如果 Quarkus 使用以下一种身份验证方法对 OpenId Connect 提供程序进行身份验证，请配置 `quarkus.oidc.token-state-manager.encryption-secret` 属性："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "mTLS"
msgstr "mTLS"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "`private_key_jwt`, where a private RSA or EC key is used to sign a JWT token"
msgstr "`private_key_jwt` 其中，私人 RSA 或 EC 密钥用于签署 JWT 令牌"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Otherwise, a random key is generated, which can be problematic if the Quarkus application is running in the cloud with multiple pods managing the requests."
msgstr "否则，就会生成一个随机密钥，如果 Quarkus 应用程序在云中运行，有多个 pod 管理请求，就会出现问题。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can disable token encryption in the session cookie by setting `quarkus.oidc.token-state-manager.encryption-required=false`."
msgstr "您可以通过设置 `quarkus.oidc.token-state-manager.encryption-required=false` 来禁用会话 cookie 中的令牌加密。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Session cookie and custom TokenStateManager"
msgstr "会话 cookie 和自定义 TokenStateManager"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Register a custom `io.quarkus.oidc.TokenStateManager' implementation as an `@ApplicationScoped` CDI bean if you need to customize the way the tokens are associated with the session cookie."
msgstr "如果需要自定义令牌与会话 cookie 关联的方式，请注册自定义 `io.quarkus.oidc.TokenStateManager' implementation as an `@ApplicationScoped` CDI Bean。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"For example, you may want to keep the tokens in a cache cluster and have only a key stored in a session cookie.\n"
"Note that this approach might introduce some challenges if you need to make the tokens available across multiple microservices nodes."
msgstr "例如，您可能希望将令牌保存在缓存集群中，只将密钥存储在会话 cookie 中。请注意，如果需要在多个微服务节点上使用令牌，这种方法可能会带来一些挑战。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Here is a simple example:"
msgstr "下面是一个简单的例子："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "See xref:token-state-manager[Session cookie and default TokenStateManager] for the information about the default `TokenStateManager` storing the tokens in an encrypted session cookie."
msgstr "有关默认 `TokenStateManager` 在加密会话 cookie 中存储令牌的信息，请参见会话 cookie xref:token-state-manager[和默认 TokenStateManager] 。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "See xref:db-token-state-manager[Database TokenStateManager] for the information about the custom `TokenStatemanager` implementation provided by Quarkus."
msgstr "有关 Quarkus 提供的自定义 `TokenStatemanager` 实现的信息，请参见 xref:db-token-state-manager[数据库令牌状态管理器（Database TokenStateManager] ）。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Database TokenStateManager"
msgstr "数据库令牌状态管理器"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "If you prefer to follow a stateful token storage strategy, then you can use a custom `TokenStateManager` provided by Quarkus to have your application storing tokens in a database, instead of storing them in an encrypted session cookie which is done by default, as described in the xref:token-state-manager[Session cookie and default TokenStateManager] section."
msgstr "如果你喜欢使用有状态令牌存储策略，那么你可以使用 Quarkus 提供的自定义 `TokenStateManager` ，让你的应用程序将令牌存储在数据库中，而不是存储在加密的会话 cookie 中，默认情况下是这样做的， xref:token-state-manager[如会话 cookie 和默认令牌状态管理器] 部分所述。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "To use this feature, add the following extension to your project:"
msgstr "要使用此功能，请在项目中添加以下扩展："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "This extension will replace the default `io.quarkus.oidc.TokenStateManager' with a database-based one."
msgstr "该扩展将用基于数据库的 \"io.quarkus.oidc.TokenStateManager \"替换默认的 \"io.quarkus.oidc.TokenStateManager\"。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "OIDC Database Token State Manager is using a Reactive SQL client under the hood to avoid blocking since the authentication is likely to happen on IO thread."
msgstr "OIDC 数据库令牌状态管理器在引擎盖下使用反应式 SQL 客户端，以避免阻塞，因为身份验证很可能在 IO 线程上进行。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Depending on your database, please include and configure exactly one xref:reactive-sql-clients.adoc[Reactive SQL client].\n"
"Following Reactive SQL clients are supported:"
msgstr "根据您的数据库，请包含并配置一个 xref:reactive-sql-clients.adoc[Reactive SQL 客户端] 。支持以下 Reactive SQL 客户端："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Reactive MS SQL client"
msgstr "反应式 MS SQL 客户端"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Reactive MySQL client"
msgstr "反应式 MySQL 客户端"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Reactive PostgreSQL client"
msgstr "反应式 PostgreSQL 客户端"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Reactive Oracle client"
msgstr "反应式 Oracle 客户端"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Reactive DB2 client"
msgstr "反应式 DB2 客户端"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Your application is not required to switch to using the Reactive SQL client if it already uses Hibernate ORM with one of the JDBC driver extensions."
msgstr "如果您的应用程序已经使用了带有 JDBC 驱动程序扩展之一的 Hibernate ORM，则无需转而使用 Reactive SQL 客户端。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Let's say you already have application that is using the Hibernate ORM extension together with a PostgreSQL JDBC Driver and your datasource is configured like this:"
msgstr "比方说，你已经有了一个使用 Hibernate ORM 扩展和 PostgreSQL JDBC 驱动程序的应用程序，你的数据源是这样配置的："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Now, if you decided to use OIDC Database Token State Manager, you need to add following dependencies and set a reactive driver URL."
msgstr "现在，如果你决定使用 OIDC 数据库令牌状态管理器，你需要添加以下依赖项并设置反应式驱动程序 URL。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "And you are ready to go."
msgstr "你就可以出发了。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"By default, a database table used for storing tokens is created for you, however you can disable this option with the `quarkus.oidc.db-token-state-manager.create-database-table-if-not-exists` configuration property.\n"
"Should you want the Hibernate ORM extension to create this table instead, you simply need to include an Entity like this one:"
msgstr "默认情况下，会为你创建一个用于存储令牌的数据库表，但你可以通过 `quarkus.oidc.db-token-state-manager.create-database-table-if-not-exists` 配置属性禁用该选项。如果你想让 Hibernate ORM 扩展创建这个表，只需包含一个像这样的实体即可："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The Hibernate ORM extension will only create this table for you when database schema is generated. Please refer to the xref:hibernate-orm.adoc[Hibernate ORM] guide for more information."
msgstr "Hibernate ORM 扩展只会在生成数据库模式时为你创建这个表。更多信息请参阅 xref:hibernate-orm.adoc[Hibernate ORM] 指南。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can choose column length depending on the length of your tokens."
msgstr "您可以根据代币的长度选择列的长度。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Logout and expiration"
msgstr "注销和过期"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "There are two main ways for the authentication information to expire: the tokens expired and were not renewed or an explicit logout operation was triggered."
msgstr "身份验证信息过期主要有两种方式：令牌过期且未续期，或者触发了明确的注销操作。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Let's start with explicit logout operations."
msgstr "让我们从显式注销操作开始。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "User-initiated logout"
msgstr "用户主动注销"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Users can request a logout by sending a request to the Quarkus endpoint logout path set with a `quarkus.oidc.logout.path` property.\n"
"For example, if the endpoint address is `https://application.com/webapp` and the `quarkus.oidc.logout.path` is set to \"/logout\" then the logout request has to be sent to `https://application.com/webapp/logout`."
msgstr "用户可以通过向使用 `quarkus.oidc.logout.path` 属性设置的 Quarkus 端点注销路径发送请求来请求注销。例如，如果端点地址为 `https://application.com/webapp` 且 `quarkus.oidc.logout.path` 设置为\"/logout\"，那么注销请求必须发送到 `https://application.com/webapp/logout` ."

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "This logout request will start an https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout] and the user will be redirected to the OpenID Connect Provider to logout where a user may be asked to confirm the logout is indeed intended."
msgstr "此注销请求将启动 link:https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP 发起] 的注销，用户将被重定向到 OpenID Connect 提供程序注销，在此过程中，用户可能会被要求确认注销是否属实。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The user will be returned to the endpoint post logout page once the logout has been completed if the `quarkus.oidc.logout.post-logout-path` property is set. For example, if the endpoint address is `https://application.com/webapp` and the `quarkus.oidc.logout.post-logout-path` is set to \"/signin\" then the user will be returned to `https://application.com/webapp/signin` (note this URI must be registered as a valid `post_logout_redirect_uri` in the OpenID Connect Provider)."
msgstr "如果设置了 `quarkus.oidc.logout.post-logout-path` 属性，注销完成后，用户将返回到端点注销后页面。例如，如果端点地址为 `https://application.com/webapp` 且 `quarkus.oidc.logout.post-logout-path` 设置为\"/signin\"，那么用户将被返回到 `https://application.com/webapp/signin` (注意该 URI 必须在 OpenID Connect Provider 中注册为有效的 `post_logout_redirect_uri` ）。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "If the `quarkus.oidc.logout.post-logout-path` is set then a `q_post_logout` cookie will be created and a matching `state` query parameter will be added to the logout redirect URI and the OpenID Connect Provider will return this `state` once the logout has been completed. It is recommended for the Quarkus `web-app` applications to check that a `state` query parameter matches the value of the `q_post_logout` cookie which can be done for example in a Jakarta REST filter."
msgstr "如果设置了 `quarkus.oidc.logout.post-logout-path` ，则将创建 `q_post_logout` cookie，并在注销重定向 URI 中添加匹配的 `state` 查询参数，注销完成后，OpenID Connect 提供程序将返回 `state` 。建议 Quarkus `web-app` 应用程序检查 `state` 查询参数是否与 `q_post_logout` cookie 的值相匹配，例如可以在 Jakarta REST 过滤器中进行检查。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Note that a cookie name varies when using xref:security-openid-connect-multitenancy.adoc[OpenID Connect Multi-Tenancy]. For example, it will be named `q_post_logout_tenant_1` for a tenant with a `tenant_1` ID, and so on."
msgstr "请注意，在使用 xref:security-openid-connect-multitenancy.adoc[OpenID Connect 多租户] 时，cookie 名称会有所不同。例如，对于 `tenant_1` ID 的租户，cookie 名称为 `q_post_logout_tenant_1` ，以此类推。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Here is an example of how to configure a Quarkus app initiated logout flow:"
msgstr "下面举例说明如何配置由 Quarkus 应用程序启动的注销流程："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"You may also need to set `quarkus.oidc.authentication.cookie-path` to a path value common to all the application resources which is `/` in this example.\n"
"For more information, see the xref:oidc-cookies[Cookies] section."
msgstr "您可能还需要将 `quarkus.oidc.authentication.cookie-path` 设置为所有应用程序资源通用的路径值，本例中的路径值为 `/` 。有关详细信息，请参阅 xref:oidc-cookies[Cookie] 部分。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Some OIDC providers do not support link:https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-initiated logout] specification and do not return an OpenID Connect well-known `end_session_endpoint` metadata property.\n"
"However, this is not a problem for Quarkus because the specific logout mechanisms of such OIDC providers only differ in how the logout URL query parameters are named."
msgstr "有些 OIDC 提供商不支持 link:https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP 启动] 的注销规范，也不返回 OpenID Connect 众所周知的 `end_session_endpoint` 元数据属性。不过，这对 Quarkus 来说不是问题，因为这些 OIDC 提供商的特定注销机制只是在注销 URL 查询参数的命名方式上有所不同。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "According to the https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-initiated logout] specification, the `quarkus.oidc.logout.post-logout-path` property is represented as a `post_logout_redirect_uri` query parameter, which is not recognized by the providers that do not support this specification."
msgstr "根据 link:https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP 启动的注销] 规范， `quarkus.oidc.logout.post-logout-path` 属性表示为 `post_logout_redirect_uri` 查询参数，不支持该规范的提供商无法识别。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can use `quarkus.oidc.logout.post-logout-url-param` to work around this issue. You can also request more logout query parameters added with `quarkus.oidc.logout.extra-params`. For example, here is how you can support a logout with `Auth0`:"
msgstr "您可以使用 `quarkus.oidc.logout.post-logout-url-param` 解决这个问题。您还可以通过 `quarkus.oidc.logout.extra-params` 申请添加更多注销查询参数。例如，以下是使用 `Auth0` 支持注销的方法："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Back-channel logout"
msgstr "后方通道注销"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The OIDC provider can force the logout of all applications using the authentification data: this is called back-channel logout.\n"
"In this case the OIDC will call a specific URL from each application to trigger that logout."
msgstr "OIDC 提供商可以使用验证数据强制注销所有应用程序：这称为后向通道注销。在这种情况下，OIDC 将调用每个应用程序的特定 URL 来触发注销。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "link:https://openid.net/specs/openid-connect-backchannel-1_0.html[Back-Channel Logout] is used by OpenID Connect providers to log out the current user from all the applications this user is currently logged in, bypassing the user agent."
msgstr "link:https://openid.net/specs/openid-connect-backchannel-1_0.html[Back-Channel Logout] 由 OpenID Connect 提供商使用，绕过用户代理，从当前用户登录的所有应用程序中注销当前用户。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can configure Quarkus to support `Back-Channel Logout` as follows:"
msgstr "您可以对 Quarkus 进行如下配置，使其支持 `Back-Channel Logout` ："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The absolute `back-channel logout` URL is calculated by adding `quarkus.oidc.back-channel-logout.path` to the current endpoint URL, for example, `http://localhost:8080/back-channel-logout`.\n"
"You will need to configure this URL in the admin console of your OIDC provider."
msgstr "绝对 `back-channel logout` URL 的计算方法是将 `quarkus.oidc.back-channel-logout.path` 加入当前端点 URL，例如 `http://localhost:8080/back-channel-logout` .您需要在 OIDC 提供商的管理控制台中配置此 URL。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"You will also need to configure a token age property for the logout token verification to succeed if your OpenID Connect Provider does not set an expiry claim in the current logout token.\n"
"For example, set `quarkus.oidc.token.age=10S` to ensure that no more than 10 seconds elapse since the logout token's `iat` (issued at) time."
msgstr "如果 OpenID Connect 提供商未在当前注销令牌中设置过期声明，您还需要配置令牌年龄属性，以便注销令牌验证成功。例如，设置 `quarkus.oidc.token.age=10S` 以确保注销令牌的 `iat` （签发时间）不超过 10 秒。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Front-channel logout"
msgstr "前置通道注销"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"link:https://openid.net/specs/openid-connect-frontchannel-1_0.html[Front-Channel Logout] can be used to logout the current user directly from the user agent (e.g. its browser).\n"
"It is like xref:back-channel-logout[Back-channel logout] but the logout steps are executed by the user agent like the browser and not in the background by the OIDP provider.\n"
"This option is rarely used."
msgstr "link:https://openid.net/specs/openid-connect-frontchannel-1_0.html[前台] 注销可用于直接从用户代理（如浏览器）注销当前用户。它与 xref:back-channel-logout[后] 端注销类似，但注销步骤由浏览器等用户代理执行，而不是由 OIDP 提供商在后台执行。该选项很少使用。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can configure Quarkus to support `Front-Channel Logout` as follows:"
msgstr "您可以对 Quarkus 进行如下配置，使其支持 `Front-Channel Logout` ："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "This path will be compared against the current request's path and the user will be logged out if these paths match."
msgstr "该路径将与当前请求的路径进行比较，如果路径匹配，用户将被注销。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Local logout"
msgstr "本地注销"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"xref:user-initiated-logout[User-initiated logout] will log the user out of the OIDC provider, if it is used as single sign-on, it might not be what you require.\n"
"If, for example, your OIDC provider is Google, you will be logged out from Google and its services.\n"
"Instead the user might just want to log out of that specific application.\n"
"Another use case might be when the OIDC provider does not have a logout endpoint."
msgstr "xref:user-initiated-logout[用户主动注销] 会将用户从 OIDC 提供商注销，如果用作单点登录，则可能不符合您的要求。例如，如果您的 OIDC 提供商是 Google，您就会注销 Google 及其服务。相反，用户可能只想注销该特定应用程序。另一种情况可能是 OIDC 提供商没有注销端点。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "By using xref:oidc-session[OidcSession], you can support a local logout, which means that only the local session cookie is cleared, as shown in the following example:"
msgstr "通过使用 xref:oidc-session[OidcSession] ，可以支持本地注销，即只清除本地会话 cookie，如下例所示："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Using `OidcSession` for local logout"
msgstr "使用 `OidcSession` 进行本地注销"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"`io.quarkus.oidc.OidcSession` is a wrapper around the current `IdToken`, which can help to perform a xref:local-logout[Local logout], retrieve the current session's tenant identifier, and check when the session will expire.\n"
"More useful methods will be added to it over time."
msgstr "`io.quarkus.oidc.OidcSession` 是当前 的包装器，可以帮助执行 `IdToken` xref:local-logout[本地注销] 、检索当前会话的租户标识符以及检查会话何时过期。随着时间的推移，还将添加更多有用的方法。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Session management"
msgstr "会话管理"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"By default, logout is based on the expiration time of the ID token issued by the OIDC provider. When the ID token expires, the current user session at the Quarkus endpoint is invalidated and the user is redirected to the OIDC provider again to authenticate.\n"
"If the session at the OIDC provider is still active, users are automatically re-authenticated without needing to provide their credentials again."
msgstr "默认情况下，注销基于 OIDC 提供商签发的 ID 令牌的过期时间。当 ID 标记过期时，Quarkus 端点的当前用户会话将失效，用户将被重定向到 OIDC 提供商再次进行身份验证。如果 OIDC 提供商的会话仍处于活动状态，用户将自动重新进行身份验证，无需再次提供凭据。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The current user session can be automatically extended by enabling the `quarkus.oidc.token.refresh-expired` property.\n"
"If set to `true`, when the current ID token expires, a refresh token grant will be used to refresh the ID token as well as access and refresh tokens."
msgstr "当前用户会话可通过启用 `quarkus.oidc.token.refresh-expired` 属性自动延长。如果设置为 `true` ，当当前 ID 令牌过期时，将使用刷新令牌授权来刷新 ID 令牌以及访问和刷新令牌。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "If you have a xref:security-oidc-bearer-token-authentication.adoc#single-page-applications[single page application for service applications] where your OIDC provider script such as `keycloak.js` is managing an authorization code flow then that script will also control the SPA authentication session lifespan."
msgstr "如果您有一个 xref:security-oidc-bearer-token-authentication.adoc#single-page-applications[用于服务应用程序的单页面应用程序] ，其中您的 OIDC 提供程序脚本（如 `keycloak.js` ）正在管理授权代码流，那么该脚本也将控制 SPA 身份验证会话的生命周期。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "If you work with a Quarkus OIDC `web-app` application, then it is the Quarkus OIDC code authentication mechanism that is managing the user session lifespan."
msgstr "如果您使用的是 Quarkus OIDC `web-app` 应用程序，那么管理用户会话寿命的就是 Quarkus OIDC 代码验证机制。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"To use the refresh token, you should carefully configure the session cookie age.\n"
"The session age should be longer than the ID token lifespan and close to or equal to the refresh token lifespan."
msgstr "要使用刷新令牌，应仔细配置会话 cookie 的年龄。会话年龄应长于 ID 令牌寿命，接近或等于刷新令牌寿命。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You calculate the session age by adding the lifespan value of the current ID token and the values of the `quarkus.oidc.authentication.session-age-extension` and `quarkus.oidc.token.lifespan-grace` properties."
msgstr "计算会话年龄的方法是，将当前 ID 标记的寿命值与 `quarkus.oidc.authentication.session-age-extension` 和 `quarkus.oidc.token.lifespan-grace` 属性的值相加。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"You use only the `quarkus.oidc.authentication.session-age-extension` property to significantly extend the session lifespan, if required.\n"
"You use the `quarkus.oidc.token.lifespan-grace` property only for taking some small clock skews into consideration."
msgstr "如果需要，只需使用 `quarkus.oidc.authentication.session-age-extension` 属性来大幅延长会话寿命。使用 `quarkus.oidc.token.lifespan-grace` 属性只是为了考虑一些小的时钟偏差。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"When the current authenticated user returns to the protected Quarkus endpoint and the ID token associated with the session cookie has expired, then, by default, the user is automatically redirected to the OIDC Authorization endpoint to re-authenticate.\n"
"The OIDC provider might challenge the user again if the session between the user and this OIDC provider is still active, which might happen if the session is configured to last longer than the ID token."
msgstr "当当前已通过身份验证的用户返回到受保护的 Quarkus 端点时，如果与会话 cookie 关联的 ID 标记已过期，那么默认情况下，用户会被自动重定向到 OIDC 授权端点重新进行身份验证。如果用户与该 OIDC 提供商之间的会话仍处于活动状态，OIDC 提供商可能会再次向用户提出挑战，如果会话配置为比 ID 令牌持续时间更长，则可能会发生这种情况。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"If the `quarkus.oidc.token.refresh-expired` is set to `true`, then the expired ID token (as well as the access token) is refreshed by using the refresh token returned with the initial authorization code grant response.\n"
"This refresh token might also be recycled (refreshed) itself as part of this process.\n"
"As a result, the new session cookie is created and the session is extended."
msgstr "如果 `quarkus.oidc.token.refresh-expired` 设置为 `true` ，则过期的 ID 令牌（以及访问令牌）将通过使用随初始授权码授予响应一起返回的刷新令牌来刷新。在此过程中，刷新令牌本身也可能被回收（刷新）。因此，新的会话 cookie 会被创建，会话也会被扩展。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"In instances where the user is not very active, you can use the `quarkus.oidc.authentication.session-age-extension` property to help handle expired ID tokens.\n"
"If the ID token expires, the session cookie might not be returned to the Quarkus endpoint during the next user request as the cookie lifespan would have elapsed.\n"
"Quarkus assumes that this request is the first authentication request.\n"
"Set `quarkus.oidc.authentication.session-age-extension` to be _reasonably_ long for your barely-active users and in accordance with your security policies."
msgstr "在用户不是很活跃的情况下，可以使用 `quarkus.oidc.authentication.session-age-extension` 属性来帮助处理过期的 ID 标记。如果 ID 令牌过期，在下一次用户请求时，会话 Cookie 可能不会返回到 Quarkus 端点，因为 Cookie 的有效期已过。Quarkus 假定此请求是第一次身份验证请求。请根据您的安全策略，为几乎不活动的用户设置 _合理的_ `quarkus.oidc.authentication.session-age-extension` 。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"You can go one step further and proactively refresh ID tokens or access tokens that are about to expire.\n"
"Set `quarkus.oidc.token.refresh-token-time-skew` to the value you want to anticipate the refresh. If, during the current user request, it is calculated that the current ID token will expire within this `quarkus.oidc.token.refresh-token-time-skew` then it will be refreshed and the new session cookie will be created. This property should be set to a value which is less than the ID token lifespan; the closer it is to this lifespan value the more often the ID token will be refreshed."
msgstr "您可以更进一步，主动刷新即将过期的 ID 令牌或访问令牌。将 `quarkus.oidc.token.refresh-token-time-skew` 设置为预计刷新的值。如果在当前用户请求期间，计算出当前 ID 令牌将在此 `quarkus.oidc.token.refresh-token-time-skew` 内过期，那么它将被刷新并创建新的会话 cookie。该属性应设置为小于 ID 令牌有效期的值；越接近有效期值，ID 令牌刷新的频率就越高。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can further optimize this process by having a simple JavaScript function ping your Quarkus endpoint to periodically emulate the user activity, which minimizes the time frame during which the user might have to be re-authenticated."
msgstr "您可以让一个简单的 JavaScript 函数 ping 您的 Quarkus 端点，定期模拟用户活动，从而进一步优化这一过程，最大限度地减少用户可能需要重新进行身份验证的时间。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"You cannot extend the user session indefinitely.\n"
"The returning user with the expired ID token will have to re-authenticate at the OIDC provider endpoint once the refresh token has expired."
msgstr "不能无限期延长用户会话。一旦刷新令牌过期，使用过期 ID 令牌的返回用户必须在 OIDC 提供商端点重新进行身份验证。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Integration with GitHub and non-OIDC OAuth2 providers"
msgstr "与 GitHub 和非 OIDC OAuth2 提供商集成"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Some well known providers such as GitHub or LinkedIn are not OpenID Connect but OAuth2 providers which support the `authorization code flow`, for example, link:https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps[GitHub OAuth2] and link:https://docs.microsoft.com/en-us/linkedin/shared/authentication/authorization-code-flow[LinkedIn OAuth2].\n"
"Remember, OIDC is built on top of OAuth2."
msgstr "一些知名的提供商（如 GitHub 或 LinkedIn）并不是 OpenID Connect，而是 OAuth2 提供商，它们支持 `authorization code flow` ，例如 link:https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps[GitHub OAuth2] 和 link:https://docs.microsoft.com/en-us/linkedin/shared/authentication/authorization-code-flow[LinkedIn OAuth2] 。请记住，OIDC 是建立在 OAuth2 基础之上的。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The main difference between OpenID Connect and OAuth2 providers is that OpenID Connect providers return an `ID Token` that represents a user authentication, in addition to the standard authorization code flow `access` and `refresh` tokens returned by `OAuth2` providers."
msgstr "OpenID Connect 和 OAuth2 提供商的主要区别在于，除了 `OAuth2` 提供商返回的标准授权码流 `access` 和 `refresh` 标记外，OpenID Connect 提供商还会返回一个代表用户验证的 `ID Token` 。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "OAuth2 providers such as GitHub do not return `IdToken`, the fact of the user authentication is implicit and is indirectly represented by the `access` token which represents an authenticated user authorizing the current Quarkus `web-app` application to access some data on behalf of the authenticated user."
msgstr "OAuth2 提供商（如 GitHub）不会返回 `IdToken` ，用户身份验证的事实是隐式的，由 `access` 令牌间接表示，该令牌代表已通过身份验证的用户授权当前 Quarkus `web-app` 应用程序代表已通过身份验证的用户访问某些数据。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"For OIDC, you validate the ID token as proof of authentication validity whereas in the case of OAuth2, you validate the access token.\n"
"This is done by subsequently calling an endpoint that requires the access token and that typically returns user information.\n"
"This approach is similar to the OIDC xref:user-info[UserInfo] approach, with `UserInfo` fetched by Quarkus OIDC on your behalf."
msgstr "对于 OIDC，用户需要验证 ID 令牌作为验证有效性的证明，而对于 OAuth2，用户需要验证访问令牌。验证的方法是随后调用一个需要访问令牌的端点，该端点通常会返回用户信息。这种方法类似于 OIDC xref:user-info[UserInfo] 方法，由 Quarkus OIDC 代表你获取 `UserInfo` 。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "For example, when working with GitHub, the Quarkus endpoint can acquire an `access` token which allows the Quarkus endpoint to request a GitHub profile for the current user."
msgstr "例如，在使用 GitHub 时，Quarkus 端点可以获取 `access` 令牌，该令牌允许 Quarkus 端点请求当前用户的 GitHub 配置文件。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "To support the integration with such OAuth2 servers, `quarkus-oidc` needs to be configured a bit differently to allow the authorization code flow responses without `IdToken`: `quarkus.oidc.authentication.id-token-required=false`."
msgstr "为了支持与此类 OAuth2 服务器的集成，需要对 `quarkus-oidc` 进行一些不同的配置，以便在没有 `IdToken` : `quarkus.oidc.authentication.id-token-required=false` 的情况下允许授权代码流响应。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Even though you configure the extension to support the authorization code flows without `IdToken`, an internal `IdToken` is generated to standardize the way `quarkus-oidc` operates.\n"
"You use an `IdToken` to support the authentication session and to avoid redirecting the user to the provider,  such as GitHub, on every request.\n"
"In this case, the session lifespan is set to 5 minutes, which you can can extend further as described in the xref:session-management[session management] section."
msgstr "即使您配置扩展以支持无需 `IdToken` 的授权代码流，也会生成一个内部 `IdToken` ，以规范 `quarkus-oidc` 的操作方式。您使用 `IdToken` 来支持身份验证会话，避免每次请求都将用户重定向到提供商（如 GitHub）。在这种情况下，会话生命期被设置为 5 分钟，您可以根据 xref:session-management[会话管理] 部分的描述进一步延长 xref:session-management[会话] 生命期。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "This simplifies how you handle an application that supports multiple OIDC providers."
msgstr "这简化了如何处理支持多个 OIDC 提供商的应用程序。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The next step is to ensure that the returned access token can be useful and is valid to the current Quarkus endpoint.\n"
"The first way is to call the OAuth2 provider introspection endpoint by configuring `quarkus.oidc.introspection-path`, if the provider offers such an endpoint.\n"
"In this case you can use the access token as a source of roles using `quarkus.oidc.roles.source=accesstoken`.\n"
"If no introspection endpoint is present, you can attempt instead to request xref:user-info[UserInfo] from the provider as it will at least validate the access token.\n"
"To do so, specify `quarkus.oidc.token.verify-access-token-with-user-info=true`.\n"
"You also need to set the `quarkus.oidc.user-info-path` property to a URL endpoint that fetches the user info (or to an endpoint protected by the access token).\n"
"For GitHub, since it does not have an introspection endpoint, requesting the UserInfo is required."
msgstr "下一步是确保返回的访问令牌对当前的 Quarkus 端点有用且有效。第一种方法是通过配置 `quarkus.oidc.introspection-path` 来调用 OAuth2 提供商自省端点（如果提供商提供此类端点的话）。在这种情况下，你可以使用 `quarkus.oidc.roles.source=accesstoken` 将访问令牌用作角色来源。如果没有自省端点，可以尝试从提供程序请求 xref:user-info[用户信息] ，因为它至少会验证访问令牌。为此，请指定 `quarkus.oidc.token.verify-access-token-with-user-info=true` 。还需要将 `quarkus.oidc.user-info-path` 属性设置为获取用户信息的 URL 端点（或受访问令牌保护的端点）。对于 GitHub 而言，由于它没有自省端点，因此需要请求 UserInfo。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Requiring xref:user-info[UserInfo] involves making a remote call on every request.\n"
"Therefore, you might want to consider caching `UserInfo` data.\n"
"For more information, see the xref:security-oidc-bearer-token-authentication.adoc#token-introspection-userinfo-cache[Token Introspection and UserInfo cache] section of the \"OpenID Connect (OIDC) Bearer token authentication\" guide."
msgstr "要求提供 xref:user-info[UserInfo] 会导致每次请求都要进行远程调用。因此，你可能需要考虑缓存 `UserInfo` 数据。更多信息，请参阅 \"OpenID Connect (OIDC) Bearer xref:security-oidc-bearer-token-authentication.adoc#token-introspection-userinfo-cache[令牌] 验证 \"指南中的 xref:security-oidc-bearer-token-authentication.adoc#token-introspection-userinfo-cache[令牌自省和 UserInfo 缓存] 部分。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Alternatively, you may want to request that `UserInfo` is embedded into the internal generated `IdToken` with the `quarkus.oidc.cache-user-info-in-idtoken=true` property - the advantage of this approach is that by default no cached `UserInfo` state will be kept with the endpoint - instead it will be stored in a session cookie. You may also want to consider encrypting `IdToken` in this case if `UserInfo` contains sensitive data. For more information, see xref:token-state-manager[Encrypt tokens with TokenStateManager]."
msgstr "另外，您也可以使用 `quarkus.oidc.cache-user-info-in-idtoken=true` 属性，要求将 `UserInfo` 嵌入到内部生成的 `IdToken` 中。这种方法的优点是，默认情况下，端点不会保留缓存的 `UserInfo` 状态，而是将其存储在会话 cookie 中。在这种情况下，如果 `UserInfo` 包含敏感数据，还可以考虑加密 `IdToken` 。更多信息，请参阅 xref:token-state-manager[使用 TokenStateManager 加密令牌] 。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"OAuth2 servers might not support a well-known configuration endpoint.\n"
"In this case, you must disable the discovery and configure the authorization, token, and introspection and the userinfo endpoint paths manually."
msgstr "OAuth2 服务器可能不支持众所周知的配置端点。在这种情况下，必须禁用发现功能，并手动配置授权、令牌、自省和用户信息端点路径。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"For well-known OIDC or OAuth2 providers, like Apple, Facebook, GitHub, Google, Microsoft, Spotify, and Twitter, Quarkus can help significantly simplify your application's configuration with the `quarkus.oidc.provider` property.\n"
"Here is how you can integrate `quarkus-oidc` with GitHub after you have link:https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app[created a GitHub OAuth application]. Configure your Quarkus endpoint like this:"
msgstr "对于知名的 OIDC 或 OAuth2 提供商，如 Apple、Facebook、GitHub、Google、Microsoft、Spotify 和 Twitter，Quarkus 可通过 `quarkus.oidc.provider` 属性帮助大大简化应用程序的配置。以下是 link:https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app[创建 GitHub OAuth 应用程序] 后，如何将 `quarkus-oidc` 与 link:https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app[GitHub] 集成的方法。像这样配置你的 Quarkus 端点："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "See xref:security-openid-connect-providers.adoc[OpenID Connect providers] for more details about configuring other well-known providers."
msgstr "有关配置其他知名提供程序的详细信息，请参阅 xref:security-openid-connect-providers.adoc[OpenID Connect 提供] 程序。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "This is all what is needed for an endpoint like this one to return the currently-authenticated user's profile with `GET http://localhost:8080/github/userinfo` and access it as the individual `UserInfo` properties:"
msgstr "这就是像这样的端点所需要的全部内容，它可以返回当前已通过身份验证的用户的配置文件，并以 `GET http://localhost:8080/github/userinfo` 来返回当前已通过身份验证的用户配置文件，并以 `UserInfo` 个人属性的形式访问该配置文件："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "If you support more than one social provider with the help of xref:security-openid-connect-multitenancy.adoc[OpenID Connect Multi-Tenancy], for example, Google which is an OpenID Connect Provider returning `IdToken` and GitHub which is an OAuth2 provider returning no `IdToken` and only allowing to access `UserInfo` then you can have your endpoint working with only the injected `SecurityIdentity` for both Google and GitHub flows. A simple augmentation of `SecurityIdentity` will be required where a principal created with the internally generated `IdToken` will be replaced with the `UserInfo` based principal when the GiHub flow is active:"
msgstr "如果您在 xref:security-openid-connect-multitenancy.adoc[OpenID Connect 多租户] 的帮助下支持一个以上的社交提供商，例如，Google 是一个返回 `IdToken` 的 OpenID Connect 提供商，而 GitHub 是一个不返回 `IdToken` 且只允许访问 `UserInfo` 的 OAuth2 提供商，那么您就可以让您的端点仅使用为 Google 和 GitHub 流程注入的 `SecurityIdentity` 来工作。需要对 `SecurityIdentity` 进行简单的增强，即当 GiHub 流量处于活动状态时，使用内部生成的 `IdToken` 创建的 principal 将被替换为基于 `UserInfo` 的 principal："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Now, the following code will work when the user signs into your application by using Google or GitHub:"
msgstr "现在，当用户使用 Google 或 GitHub 登录应用程序时，下面的代码就会起作用："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Possibly a simpler alternative is to inject both `@IdToken JsonWebToken` and `UserInfo` and use `JsonWebToken` when dealing with the providers returning `IdToken` and `UserInfo` with the providers which do not return `IdToken`."
msgstr "一个更简单的替代方法可能是同时注入 `@IdToken JsonWebToken` 和 `UserInfo` ，在处理返回 `IdToken` 的提供程序时使用 `JsonWebToken` ，在处理不返回 `IdToken` 的提供程序时使用 `UserInfo` 。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You must ensure that the callback path you enter in the GitHub OAuth application configuration matches the endpoint path where you'd like the user be redirected to after a successful GitHub authentication and application authorization, in this case it has to be set to `http:localhost:8080/github/userinfo`."
msgstr "必须确保在 GitHub OAuth 应用程序配置中输入的回调路径与 GitHub 身份验证和应用程序授权成功后将用户重定向到的端点路径相匹配，在这种情况下，必须将其设置为 `http:localhost:8080/github/userinfo` 。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Listening to important authentication events"
msgstr "聆听重要的认证事件"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"You can register the `@ApplicationScoped` bean which will observe important OIDC authentication events.\n"
"When a user logs in for the first time, reauthenticates, or refreshes the session, the listener is updated.\n"
"In the future, more events might be reported.\n"
"For example:"
msgstr "您可以注册 `@ApplicationScoped` Bean，它将观察重要的 OIDC 身份验证事件。当用户首次登录、重新认证或刷新会话时，监听器就会更新。将来，可能会报告更多事件。例如"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Propagating tokens to downstream services"
msgstr "向下游服务传播代币"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "For information about Authorization Code Flow access token propagation to downstream services, see the xref:security-openid-connect-client-reference.adoc#token-propagation[Token Propagation] section."
msgstr "有关授权代码流访问令牌向下游服务传播的信息，请参阅 xref:security-openid-connect-client-reference.adoc#token-propagation[令牌传播] 部分。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Integration considerations"
msgstr "整合考虑因素"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Your application secured by OIDC integrates in an environment where it can be called from single-page applications, needs to work with well-known OIDC providers, run behind HTTP Reverse Proxy, require external and internal access, etc."
msgstr "您通过 OIDC 保护的应用程序集成在一个环境中，可以从单页应用程序中调用，需要与知名的 OIDC 提供商合作，在 HTTP 反向代理后运行，需要外部和内部访问等。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "This section discusses these considerations."
msgstr "本节将讨论这些考虑因素。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Single-page applications"
msgstr "单页应用程序"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can check if implementing single-page applications (SPAs) the way it is suggested in the xref:security-oidc-bearer-token-authentication.adoc#single-page-applications[Single-page applications] section of the \"OpenID Connect (OIDC) Bearer token authentication\" guide meets your requirements."
msgstr "您可以检查按照 \"OpenID Connect (OIDC) 不记名令牌身份验证 \"指南中 \"单页应用程序 \"部分建议的方式实施单 xref:security-oidc-bearer-token-authentication.adoc#single-page-applications[页应用程序] (SPA) 是否符合您的要求。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"If you prefer to use SPAs and JavaScript APIs such as `Fetch` or `XMLHttpRequest`(XHR) with Quarkus web applications, be aware that OpenID Connect providers might not support cross-origin resource sharing (CORS) for authorization endpoints where the users are authenticated after a redirect from Quarkus.\n"
"This will lead to authentication failures if the Quarkus application and the OpenID Connect provider are hosted on different HTTP domains, ports, or both."
msgstr "如果您喜欢在 Quarkus Web 应用程序中使用 SPAs 和 JavaScript API（如 `Fetch` 或 `XMLHttpRequest` (XHR)），请注意 OpenID Connect 提供商可能不支持授权端点的跨源资源共享 (CORS)，在这些授权端点中，用户是在 Quarkus 重定向后进行身份验证的。如果 Quarkus 应用程序和 OpenID Connect 提供商托管在不同的 HTTP 域、端口或两者上，这将导致验证失败。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "In such cases, set the `quarkus.oidc.authentication.java-script-auto-redirect` property to `false`, which will instruct Quarkus to return a `499` status code and a `WWW-Authenticate` header with the `OIDC` value."
msgstr "在这种情况下，请将 `quarkus.oidc.authentication.java-script-auto-redirect` 属性设置为 `false` ，这将指示 Quarkus 返回 `499` 状态代码和带有 `OIDC` 值的 `WWW-Authenticate` 头信息。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The browser script must set a header to identify the current request as a JavaScript request for `499` status code to be returned when `quarkus.oidc.authentication.java-script-auto-redirect` property is set to `false`."
msgstr "当 `quarkus.oidc.authentication.java-script-auto-redirect` 属性设置为 `false` 时，浏览器脚本必须设置一个标头，将当前请求标识为 JavaScript 请求，以返回 `499` 状态代码。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "If the script engine sets an engine-specific request header itself, then you can register a custom `quarkus.oidc.JavaScriptRequestChecker` bean, which will inform Quarkus if the current request is a JavaScript request. For example, if the JavaScript engine sets a header such as `HX-Request: true` then you can have it checked like this:"
msgstr "如果脚本引擎自己设置了特定于引擎的请求头，那么你可以注册一个自定义的 `quarkus.oidc.JavaScriptRequestChecker` Bean，它会告知 Quarkus 当前请求是否为 JavaScript 请求。例如，如果 JavaScript 引擎设置了 `HX-Request: true` 这样的标头，那么你就可以像这样检查它："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "and reload the last requested page in case of a `499` status code."
msgstr "并在出现 `499` 状态代码时重新加载上次请求的页面。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Otherwise you must also update the browser script to set the `X-Requested-With` header with the `JavaScript` value and reload the last requested page in case of a `499` status code."
msgstr "否则，您还必须更新浏览器脚本，将 `X-Requested-With` 头设置为 `JavaScript` 值，并在出现 `499` 状态代码时重新加载上次请求的页面。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "For example:"
msgstr "例如："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Cross-origin resource sharing"
msgstr "Cross-Origin 资源共享"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"If you plan to consume this application from a single-page application running on a different domain, you need to configure cross-origin resource sharing (CORS).\n"
"For more information, see the xref:security-cors.adoc#cors-filter[CORS filter] section of the \"Cross-origin resource sharing\" guide."
msgstr "如果计划从运行在不同域上的单页面应用程序中使用此应用程序，则需要配置跨源资源共享 (CORS)。更多信息，请参阅 \"跨源资源共享 \"指南中的 xref:security-cors.adoc#cors-filter[CORS 过滤器] 部分。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Calling Cloud provider services"
msgstr "呼叫云提供商服务"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Google Cloud"
msgstr "谷歌云"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can have Quarkus OIDC `web-app` applications access **Google Cloud services** such as **BigQuery** on behalf of the currently-authenticated users who have enabled OpenID Connect (Authorization Code Flow) permissions to such services in their Google developer consoles."
msgstr "您可以让 Quarkus OIDC `web-app` 应用程序代表当前已通过身份验证的用户访问 *BigQuery* 等 *Google 云* 服务，这些用户已在其 Google 开发人员控制台中启用了 OpenID Connect（授权代码流）权限。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"It is super easy to do with https://github.com/quarkiverse[Quarkiverse] https://github.com/quarkiverse/quarkiverse-google-cloud-services[Google Cloud Services], only add\n"
"the https://github.com/quarkiverse/quarkiverse-google-cloud-services/releases/latest[latest tag] service dependency, for example:"
msgstr "使用 link:https://github.com/quarkiverse[Quarkiverse] link:https://github.com/quarkiverse/quarkiverse-google-cloud-services[谷歌云服务] 非常简单，只需添加 link:https://github.com/quarkiverse/quarkiverse-google-cloud-services/releases/latest[最新的标签] 服务依赖即可："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "and configure Google OIDC properties:"
msgstr "并配置 Google OIDC 属性："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Running Quarkus application behind a reverse proxy"
msgstr "在反向代理后运行 Quarkus 应用程序"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "OIDC authentication mechanism can be affected if your Quarkus application is running behind a reverse proxy/gateway/firewall when HTTP `Host` header may be reset to the internal IP address, HTTPS connection may be terminated, etc. For example, an authorization code flow `redirect_uri` parameter may be set to the internal host instead of the expected external one."
msgstr "如果您的 Quarkus 应用程序在反向代理/网关/防火墙后面运行，当 HTTP `Host` 标头可能被重置为内部 IP 地址、HTTPS 连接可能被终止等时，OIDC 身份验证机制可能会受到影响。例如，授权码流 `redirect_uri` 参数可能被设置为内部主机，而不是预期的外部主机。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "In such cases configuring Quarkus to recognize the original headers forwarded by the proxy will be required, for more information, see the xref:http-reference.adoc#reverse-proxy[Running behind a reverse proxy] Vert.x documentation section."
msgstr "在这种情况下，需要对 Quarkus 进行配置，以识别由代理转发的原始标头，有关详细信息，请参阅 xref:http-reference.adoc#reverse-proxy[反向代理] Vert.x 文档部分。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "For example, if your Quarkus endpoint runs in a cluster behind Kubernetes Ingress then a redirect from the OpenID Connect Provider back to this endpoint may not work since the calculated `redirect_uri` parameter may point to the internal endpoint address. This problem can be resolved with the following configuration:"
msgstr "例如，如果你的 Quarkus 端点运行在 Kubernetes Ingress 后面的集群中，那么从 OpenID Connect Provider 重定向回该端点可能无法正常工作，因为计算出的 `redirect_uri` 参数可能指向内部端点地址。这个问题可以通过以下配置解决："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "where `X-ORIGINAL-HOST` is set by Kubernetes Ingress to represent the external endpoint address."
msgstr "其中 `X-ORIGINAL-HOST` 由 Kubernetes Ingress 设置，代表外部端点地址。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "`quarkus.oidc.authentication.force-redirect-https-scheme` property may also be used when the Quarkus application is running behind an SSL terminating reverse proxy."
msgstr "`quarkus.oidc.authentication.force-redirect-https-scheme` 当 Quarkus 应用程序在 SSL 终止反向代理后面运行时，也可以使用该属性。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "External and internal access to the OIDC provider"
msgstr "从外部和内部访问 OIDC 提供商"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Note that the OpenID Connect Provider externally accessible authorization, logout and other endpoints may have different HTTP(S) URLs compared to the URLs auto-discovered or configured relative to `quarkus.oidc.auth-server-url` internal URL.\n"
"In such cases an issuer verification failure may be reported by the endpoint and redirects to the externally accessible Connect Provider endpoints may fail."
msgstr "请注意，外部可访问的 OpenID Connect Provider 授权、注销和其他端点的 HTTP(S) URL 可能与自动发现或相对于 `quarkus.oidc.auth-server-url` 内部 URL 配置的 URL 不同。在这种情况下，端点可能会报告发行者验证失败，重定向到外部可访问的连接提供商端点也可能失败。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"In such cases, if you work with Keycloak then please start it with a `KEYCLOAK_FRONTEND_URL` system property set to the externally accessible base URL.\n"
"If you work with other Openid Connect providers then please check your provider's documentation."
msgstr "在这种情况下，如果你使用Keycloak，那么请用 `KEYCLOAK_FRONTEND_URL` 系统属性设置为外部可访问的基本URL来启动它。如果你使用其他Openid Connect提供商，那么请查看你的提供商的文档。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "OIDC SAML Identity broker"
msgstr "OIDC SAML 身份代理"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "If your identity provider does not implement OpenId Connect but only the legacy XML-based SAML2.0 SSO protocol, then Quarkus can not be used as a SAML 2.0 adapter, similarly to how `quarkus-oidc` is used as an OIDC adapter."
msgstr "如果你的身份提供商没有实施 OpenId Connect，而只是实施了传统的基于 XML 的 SAML2.0 SSO 协议，那么 Quarkus 就不能用作 SAML 2.0 适配器，就像 `quarkus-oidc` 不能用作 OIDC 适配器一样。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "However, many OIDC providers such as Keycloak, Okta, Auth0, Microsoft ADFS can offer OIDC to SAML 2.0 bridges. You can create an identity broker connection to SAML 2.0 provider in your OIDC provider and use `quarkus-oidc` to authenticate your users to this SAML 2.0 provider with the OIDC provider coordinating OIDC and  SAML 2.0 communications. As far as Quarkus endpoints are concerned, they can continue using the same Quarkus Security and OIDC API and annotations such as `@Authenticated`, `SecurityIdentity`, etc."
msgstr "不过，许多 OIDC 提供商（如 Keycloak、Okta、Auth0、Microsoft ADFS）都能提供 OIDC 到 SAML 2.0 的桥接。您可以在 OIDC 提供商中创建与 SAML 2.0 提供商的身份代理连接，并使用 `quarkus-oidc` 将用户认证到该 SAML 2.0 提供商，由 OIDC 提供商协调 OIDC 和 SAML 2.0 通信。至于 Quarkus 端点，它们可以继续使用相同的 Quarkus 安全和 OIDC API 以及注释，如 `@Authenticated` , `SecurityIdentity` 等。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "For example, lets assume `Okta` is your SAML 2.0 provider and `Keycloak` is your OIDC provider. Here is a typical sequence explaining how to configure `Keycloak` to broker with the `Okta` SAML 2.0 provider."
msgstr "例如，假设 `Okta` 是 SAML 2.0 提供商，而 `Keycloak` 是 OIDC 提供商。以下是解释如何配置 `Keycloak` 以与 `Okta` SAML 2.0 提供商进行代理的典型顺序。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "First, create a new `SAML2` integration in your `Okta` `Dashboard/Applications`:"
msgstr "首先，在您的 `Okta` `Dashboard/Applications` 中创建一个新的 `SAML2` 集成："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "For example, name it as `OktaSaml`:"
msgstr "例如，将其命名为 `OktaSaml` ："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Next, configure it to point to a Keycloak SAML broker endpoint. At this point you need to know the name of the Keycloak realm, for example, `quarkus`, and, assuming that the Keycloak SAML broker alias is `saml`, enter the endpoint address as `http:localhost:8081/realms/quarkus/broker/saml/endpoint` and Service provider (SP) entity id as `http:localhost:8081/realms/quarkus`, where `http://localhost:8081` is a Keycloak base address and `saml` is a broker alias:"
msgstr "接下来，配置它指向 Keycloak SAML 代理端点。此时，您需要知道 Keycloak 领域的名称，例如 `quarkus` ，并假定 Keycloak SAML 代理别名为 `saml` ，将端点地址输入为 `http:localhost:8081/realms/quarkus/broker/saml/endpoint` ，将服务提供商 (SP) 实体 ID 输入为 `http:localhost:8081/realms/quarkus` ，其中 `http://localhost:8081` 是 Keycloak 基本地址， `saml` 是代理别名："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Next, save this SAML integration and note its Metadata URL:"
msgstr "接下来，保存此 SAML 集成并记下其元数据 URL："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Next, add SAML Provider to Keycloak:"
msgstr "接下来，将 SAML 提供程序添加到 Keycloak："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "First, as usual, create a new realm or import the existing realm to `Keycloak`, in this case, the realm name has to be `quarkus`."
msgstr "首先，像往常一样，创建一个新领域或将现有领域导入 `Keycloak` ，在这种情况下，领域名称必须是 `quarkus` 。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Now, in the `quarkus` Realm properties, navigate to `Identity Providers` and add a new SAML provider:"
msgstr "现在，在 `quarkus` Realm 属性中，导航至 `Identity Providers` 并添加新的 SAML 提供程序："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Note the alias is set to `saml`, `Redirect URI` is `http:localhost:8081/realms/quarkus/broker/saml/endpoint` and `Service provider entity id` is `http:localhost:8081/realms/quarkus` - these are the same values you have entered when creating the Okta SAML integration in the previous step."
msgstr "请注意，别名设置为 `saml` ， `Redirect URI` 为 `http:localhost:8081/realms/quarkus/broker/saml/endpoint` ， `Service provider entity id` 为 `http:localhost:8081/realms/quarkus` - 这些值与您在上一步创建 Okta SAML 集成时输入的值相同。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Finally, set `Service entity descriptor` to point to the Okta SAML Intregration Metadata URL you noted at the end of the previous step."
msgstr "最后，设置 `Service entity descriptor` ，指向上一步末尾提到的 Okta SAML 集成元数据 URL。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Next, if you would like, you can register this Keycloak SAML Provider as a Default Provider by navigating to `Authentication/browser/Identity Provider Redirector config` and setting both `Alias` and `Default Identity Provider` properties to `saml`. If you do not configure it as a Default Provider then, at the authentication time, Keycloak will offer 2 options - authenticate with the SAML provider, and authenticate directly to Keycloak with the name and password."
msgstr "接下来，如果您愿意，可以将此 Keycloak SAML 提供程序注册为默认提供程序，方法是导航到 `Authentication/browser/Identity Provider Redirector config` ，并将 `Alias` 和 `Default Identity Provider` 属性都设置为 `saml` 。如果您不将其配置为默认提供程序，那么在身份验证时，Keycloak 将提供两个选项--使用 SAML 提供程序进行身份验证，以及使用名称和密码直接向 Keycloak 进行身份验证。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Now configure the Quarkus OIDC `web-app` application to point to the Keycloak `quarkus` realm, `quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus` and you are ready to start authenticating your Quarkus users to the Okta SAML 2.0 provider using an OIDC to SAML bridge provided by Keycloak OIDC and Okta SAML 2.0 providers."
msgstr "现在配置 Quarkus OIDC `web-app` 应用程序，使其指向 Keycloak `quarkus` realm， `quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus` ，然后就可以使用 Keycloak OIDC 和 Okta SAML 2.0 提供商提供的 OIDC 到 SAML 桥接，开始验证 Quarkus 用户到 Okta SAML 2.0 提供商。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can configure other OIDC providers to provide a SAML bridge similarly to how it can be done for Keycloak."
msgstr "您可以配置其他 OIDC 提供商提供 SAML 桥接，与 Keycloak 的配置方式类似。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Testing"
msgstr "测试"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Testing is often tricky when it comes to authentification to a separate OIDC like server.\n"
"Quarkus offers several options from mocking to a local run of an OIDC provider."
msgstr "当需要对类似于 OIDC 的独立服务器进行身份验证时，测试往往很棘手。Quarkus 提供了从模拟到本地运行 OIDC 提供商的多种选择。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Start by adding the following dependencies to your test project:"
msgstr "首先在你的测试项目中添加以下依赖项："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Wiremock"
msgstr "Wiremock"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Add the following dependency:"
msgstr "添加以下依赖关系："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Prepare the REST test endpoints, set `application.properties`, for example:"
msgstr "准备 REST 测试端点，例如设置 `application.properties` ："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "and finally write the test code, for example:"
msgstr "并最终写出测试代码，例如："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "`OidcWiremockTestResource` recognizes `alice` and `admin` users. The user `alice` has the `user` role only by default - it can be customized with a `quarkus.test.oidc.token.user-roles` system property. The user `admin` has the `user` and `admin` roles by default - it can be customized with a `quarkus.test.oidc.token.admin-roles` system property."
msgstr "`OidcWiremockTestResource` 承认 和 用户。用户 默认只具有 角色--可通过 系统属性进行自定义。用户 默认具有 和 角色，可通过 系统属性进行自定义。 `alice` `admin` `alice` `user` `quarkus.test.oidc.token.user-roles` `admin` `user` `admin` `quarkus.test.oidc.token.admin-roles` "

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Additionally, `OidcWiremockTestResource` set token issuer and audience to `https://service.example.com` which can be customized with `quarkus.test.oidc.token.issuer` and `quarkus.test.oidc.token.audience` system properties."
msgstr "此外， `OidcWiremockTestResource` 将令牌发行人和受众设置为 `https://service.example.com` 可通过 `quarkus.test.oidc.token.issuer` 和 `quarkus.test.oidc.token.audience` 系统属性进行自定义。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "`OidcWiremockTestResource` can be used to emulate all OpenID Connect providers."
msgstr "`OidcWiremockTestResource` 可用于模拟所有 OpenID Connect 提供商。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Dev services for Keycloak"
msgstr "Keycloak 的开发服务"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Using xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] is recommended for the integration testing against Keycloak.\n"
"`Dev Services for Keycloak` will launch and initialize a test container: it will create a `quarkus` realm, a `quarkus-app` client (`secret` secret) and add `alice` (`admin` and `user` roles) and `bob` (`user` role) users, where all of these properties can be customized."
msgstr "建议使用 link:security-openid-connect-dev-services.html[Keycloak开发服务] 进行针对Keycloak的集成测试。 `Keycloak开发服务` 将启动和初始化一个测试容器：它将创建一个 `quarkus` 领域，一个 `quarkus-app` 客户端（ `secret` 秘密）并添加 `alice` （ `admin` 和 `user` 角色）和 `bob` （ `user` 角色）用户，其中所有这些属性都可以被定制。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "First, prepare `application.properties`. You can start with a completely empty `application.properties` as `Dev Services for Keycloak` will register `quarkus.oidc.auth-server-url` pointing to the running test container as well as `quarkus.oidc.client-id=quarkus-app` and `quarkus.oidc.credentials.secret=secret`."
msgstr "首先，准备 `application.properties` 。您可以从完全为空的 `application.properties` 开始，因为 `Dev Services for Keycloak` 将注册指向运行中的测试容器的 `quarkus.oidc.auth-server-url` 以及 `quarkus.oidc.client-id=quarkus-app` 和 `quarkus.oidc.credentials.secret=secret` 。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "But if you already have all the required `quarkus-oidc` properties configured then you only need to associate `quarkus.oidc.auth-server-url` with the `prod` profile for `Dev Services for Keycloak`to start a container, for example:"
msgstr "但是如果你已经配置了所需的 `quarkus-oidc` 属性，那么你只需要将 `quarkus.oidc.auth-server-url` 与 `Keycloak开发服务` 的 `prod` 配置文件联系起来，以启动一个容器，例如："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "If a custom realm file has to be imported into Keycloak before running the tests then you can configure `Dev Services for Keycloak` as follows:"
msgstr "如果在运行测试前必须将自定义领域文件导入Keycloak，那么你可以按以下方式配置 `Keycloak开发服务` ："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Finally, write a test code the same way as it is described in the xref:integration-testing-wiremock[Wiremock] section.\n"
"The only difference is that `@QuarkusTestResource` is no longer needed:"
msgstr "最后，按照 xref:integration-testing-wiremock[Wiremock] 部分所述的相同方法编写测试代码。唯一不同的是，不再需要 `@QuarkusTestResource` ："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Using KeycloakTestResourceLifecycleManager"
msgstr "使用 KeycloakTestResourceLifecycleManager"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Use `KeycloakTestResourceLifecycleManager` for your tests only if there is a good reason not to use `Dev Services for Keycloak`.\n"
"If you need to do the integration testing against Keycloak then you are encouraged to do it with xref:integration-testing-keycloak-devservices[Dev services For Keycloak]."
msgstr "只有在有充分理由不使用 `Dev Services for Keycloak` 的情况下，才使用 `KeycloakTestResourceLifecycleManager` 进行测试。如果您需要针对 Keycloak 进行集成测试，我们建议您使用 xref:integration-testing-keycloak-devservices[Keycloak 开发服务] 进行测试。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "Start with adding the following dependency:"
msgstr "首先要添加以下依赖关系："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "which provides `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` - an implementation of `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which starts a Keycloak container."
msgstr "它提供了 `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` - 一个 `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` 的实现，用来启动一个Keycloak容器。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "And configure the Maven Surefire plugin as follows:"
msgstr "并按以下方式配置Maven Surefire插件："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "(and similarly the Maven Failsafe plugin when testing in native image)."
msgstr "(在原生图像中进行测试时，类似地使用 Maven Failsafe 插件）。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"And now set the configuration and write the test code the same way as it is described in the xref:integration-testing-wiremock[Wiremock] section.\n"
"The only difference is the name of `QuarkusTestResource`:"
msgstr "现在，设置配置和编写测试代码的方法与 xref:integration-testing-wiremock[Wiremock] 部分所述的相同。唯一不同的是 `QuarkusTestResource` 的名称："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "`KeycloakTestResourceLifecycleManager` registers `alice` and `admin` users. The user `alice` has the `user` role only by default - it can be customized with a `keycloak.token.user-roles` system property. The user `admin` has the `user` and `admin` roles by default - it can be customized with a `keycloak.token.admin-roles` system property."
msgstr "`KeycloakTestResourceLifecycleManager` 注册 `alice` 和 `admin` 用户。默认情况下，用户 `alice` 仅具有 `user` 角色 - 可以使用 `keycloak.token.user-roles` 系统属性对其进行自定义。默认情况下，用户 `admin` 具有 `用户` 和 `admin` 角色 - 可以使用 `keycloak.token.admin-roles` 系统属性对其进行自定义。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"By default, `KeycloakTestResourceLifecycleManager` uses HTTPS to initialize a Keycloak instance which can be disabled with `keycloak.use.https=false`.\n"
"Default realm name is `quarkus` and client id - `quarkus-web-app` - set `keycloak.realm` and `keycloak.web-app.client` system properties to customize the values if needed."
msgstr "默认情况下， `KeycloakTestResourceLifecycleManager` 使用 HTTPS 初始化 Keycloak 实例，可通过 `keycloak.use.https=false` 禁用。默认境界名称为 `quarkus` ，客户端 ID 为 `quarkus-web-app` - 如有需要，可设置 `keycloak.realm` 和 `keycloak.web-app.client` 系统属性以自定义值。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "TestSecurity annotation"
msgstr "TestSecurity注解"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "See xref:security-oidc-bearer-token-authentication.adoc#integration-testing-security-annotation[Use TestingSecurity with injected JsonWebToken] section for more information about using `@TestSecurity` and `@OidcSecurity` annotations for testing the `web-app` application endpoint code which depends on the injected ID and access `JsonWebToken` as well as `UserInfo` and `OidcConfigurationMetadata`."
msgstr "有关使用 `@TestSecurity` 和 `@OidcSecurity` 注释测试 `web-app` 应用程序端点代码的更多信息，请参阅 \" xref:security-oidc-bearer-token-authentication.adoc#integration-testing-security-annotation[使用注入] 的 xref:security-oidc-bearer-token-authentication.adoc#integration-testing-security-annotation[JsonWebToken 测试安全性] \"一节，该代码依赖于注入的 ID 和访问 `JsonWebToken` 以及 `UserInfo` 和 `OidcConfigurationMetadata` 。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Checking errors in the logs"
msgstr "检查日志中的错误"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "To see details about the token verification errors, you must enable `io.quarkus.oidc.runtime.OidcProvider` `TRACE` level logging:"
msgstr "要查看令牌验证错误的详细信息，必须启用 `io.quarkus.oidc.runtime.OidcProvider` `TRACE` 级别日志："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "To see details about the OidcProvider client initialization errors, enable `io.quarkus.oidc.runtime.OidcRecorder` `TRACE` level logging:"
msgstr "要查看有关 OidcProvider 客户端初始化错误的详细信息，请启用 `io.quarkus.oidc.runtime.OidcRecorder` `TRACE` 级别日志："

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can also from `quarkus dev` console hit `j` to change the application global log level."
msgstr "您还可以从 `quarkus dev` 控制台点击 `j` 更改应用程序的全局日志级别。"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "References"
msgstr "参考文献"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties]"
msgstr "xref:security-oidc-configuration-properties-reference.adoc[OIDC 配置属性]"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "xref:security-openid-connect-providers.adoc[Configuring well-known OpenID Connect Providers]"
msgstr "xref:security-openid-connect-providers.adoc[配置众所周知的 OpenID Connect 提供商]"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
msgid "xref:security-openid-connect-client-reference.adoc[OpenID Connect and OAuth2 Client and Filters Reference Guide]"
msgstr "link:security-openid-connect-client.html[Quarkus - 使用OpenID Connect，OAuth2客户端和过滤器的参考指南]"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]"
msgstr "xref:security-openid-connect-dev-services.adoc[Keycloak 的开发服务]"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "xref:security-authentication-mechanisms.adoc#oidc-jwt-oauth2-comparison[Choosing between OpenID Connect, SmallRye JWT, and OAuth2 authentication mechanisms]"
msgstr "xref:security-authentication-mechanisms.adoc#oidc-jwt-oauth2-comparison[在 OpenID Connect、SmallRye JWT 和 OAuth2 身份验证机制之间做出选择]"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "xref:security-authentication-mechanisms.adoc#combining-authentication-mechanisms[Combining authentication mechanisms]"
msgstr "xref:security-authentication-mechanisms.adoc#combining-authentication-mechanisms[组合认证机制]"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus 安全概述]"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr "link:https://www.keycloak.org/documentation.html[Keycloak 文档]"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr "link:https://openid.net/connect/[OpenID Connect]"

#: _versions/3.6/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "link:https://tools.ietf.org/html/rfc7519[JSON 网络令牌]"
