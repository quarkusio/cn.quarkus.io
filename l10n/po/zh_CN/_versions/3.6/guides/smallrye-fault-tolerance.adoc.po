msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid "SmallRye Fault Tolerance"
msgstr "小麦容错"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid ""
"One of the challenges brought by the distributed nature of microservices is that communication with external systems is\n"
"inherently unreliable. This increases demand on resiliency of applications. To simplify making more resilient\n"
"applications, Quarkus provides https://github.com/smallrye/smallrye-fault-tolerance/[SmallRye Fault Tolerance], an\n"
"implementation of the https://github.com/eclipse/microprofile-fault-tolerance/[MicroProfile Fault Tolerance]\n"
"specification."
msgstr "微服务的分布式特性带来的挑战之一是，与外部系统的通信本质上是不可靠的。这就增加了对应用程序弹性的要求。为了简化更具弹性的应用程序，Quarkus 提供了 link:https://github.com/smallrye/smallrye-fault-tolerance/[SmallRye Fault Tolerance] ，这是 link:https://github.com/eclipse/microprofile-fault-tolerance/[MicroProfile Fault Tolerance] 规范的一种实现。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid ""
"In this guide, we demonstrate usage of MicroProfile Fault Tolerance annotations such as `@Timeout`, `@Fallback`,\n"
"`@Retry` and `@CircuitBreaker`."
msgstr "在本指南中，我们演示了 MicroProfile 容错注释的用法，如 `@Timeout` , `@Fallback` , `@Retry` 和 `@CircuitBreaker` 。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
msgid "Prerequisites"
msgstr "先决条件"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid "The Scenario"
msgstr "场景"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid ""
"The application built in this guide simulates a simple backend for a gourmet coffee e-shop. It implements a REST\n"
"endpoint providing information about coffee samples we have on store."
msgstr "本指南中构建的应用程序模拟了一家美食咖啡电子商店的简单后台。它实现了一个 REST 端点，提供有关店内咖啡样品的信息。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid ""
"Let's imagine, although it's not implemented as such, that some methods in our endpoint require communication\n"
"to external services like a database or an external microservice, which introduces a factor of unreliability."
msgstr "让我们设想一下，虽然没有实现，但我们端点中的某些方法需要与外部服务（如数据库或外部微服务）通信，这就引入了一个不可靠因素。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
msgid "Solution"
msgstr "解决方案"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库： `git clone {quickstarts-clone-url}` ，或者下载 {quickstarts-archive-url}[存档] 。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid "The solution is located in the `microprofile-fault-tolerance-quickstart` link:{quickstarts-tree-url}/microprofile-fault-tolerance-quickstart[directory]."
msgstr "解决方案位于 `microprofile-fault-tolerance-quickstart` link:{quickstarts-tree-url}/microprofile-fault-tolerance-quickstart[目录] 中。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
msgid "Creating the Maven Project"
msgstr "创建Maven项目"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid "This command generates a project, importing the extensions for RESTEasy Reactive/Jakarta REST and SmallRye Fault Tolerance."
msgstr "该命令生成一个项目，导入 RESTEasy Reactive/Jakarta REST 和 SmallRye Fault Tolerance 的扩展。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid ""
"If you already have your Quarkus project configured, you can add the `smallrye-fault-tolerance` extension\n"
"to your project by running the following command in your project base directory:"
msgstr "如果已经配置了 Quarkus 项目，可以在项目基本目录下运行以下命令，将 `smallrye-fault-tolerance` 扩展添加到项目中："

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
msgid "This will add the following to your build file:"
msgstr "这会将以下内容添加到你的构建文件中:"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid "Preparing an Application: REST Endpoint and CDI Bean"
msgstr "准备应用程序：REST 端点和 CDI Bean"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid ""
"In this section we create a skeleton of our application, so that we have something that we can extend and to which\n"
"we can add fault tolerance features later on."
msgstr "在本节中，我们将创建应用程序的骨架，这样我们就可以对其进行扩展，并在以后添加容错功能。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid "First, create a simple entity representing a coffee sample in our store:"
msgstr "首先，创建一个简单的实体，代表我们商店中的咖啡样品："

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid "Let's continue with a simple CDI bean, that would work as a repository of our coffee samples."
msgstr "让我们继续使用一个简单的 CDI 咖啡豆，它可以作为我们的咖啡样品库。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid "Finally, create the `org.acme.microprofile.faulttolerance.CoffeeResource` class as follows:"
msgstr "最后，创建 `org.acme.microprofile.faulttolerance.CoffeeResource` 类，如下所示："

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid ""
"At this point, we expose a single REST method that will show a list of coffee samples in a JSON format. Note\n"
"that we introduced some fault making code in our `CoffeeResource#maybeFail()` method, which is going to cause failures\n"
"in the `CoffeeResource#coffees()` endpoint method in about 50 % of requests."
msgstr "在这一点上，我们暴露了一个 REST 方法，该方法将以 JSON 格式显示咖啡样品列表。请注意，我们在 `CoffeeResource#maybeFail()` 方法中引入了一些故障代码，这将导致约 50% 的请求在 `CoffeeResource#coffees()` 端点方法中失败。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid "Why not check that our application works? Run the Quarkus development server with:"
msgstr "为什么不检查一下我们的应用程序是否正常运行？使用以下命令运行 Quarkus 开发服务器"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid ""
"and open `http://localhost:8080/coffee` in your browser. Make a couple of requests (remember, some of them are expected\n"
"to fail). At least some requests should show us the list of our coffee samples in JSON, the rest will fail\n"
"with a `RuntimeException` thrown in `CoffeeResource#maybeFail()`."
msgstr "并在浏览器中打开 `http://localhost:8080/coffee` 浏览器。发出几个请求（记住，有些请求可能会失败）。至少有一些请求会以 JSON 格式显示咖啡样品列表，其余请求将以 `RuntimeException` 失败， `CoffeeResource#maybeFail()` 。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid "Congratulations, you've just made a working (although somewhat unreliable) Quarkus application!"
msgstr "恭喜你，你刚刚制作了一个可以正常工作的 Quarkus 应用程序（虽然有点不可靠）！"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid "Adding Resiliency: Retries"
msgstr "增加弹性：重试"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid ""
"Let the Quarkus development server running and in your IDE add the `@Retry` annotation to the `CoffeeResource#coffees()`\n"
"method as follows and save the file:"
msgstr "让 Quarkus 开发服务器运行，在集成开发环境中为 `CoffeeResource#coffees()` 方法添加 `@Retry` 注解，如下所示，然后保存文件："

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid ""
"Hit refresh in your browser. The Quarkus development server will automatically detect the changes\n"
"and recompile the app for you, so there's no need to restart it."
msgstr "在浏览器中点击刷新。Quarkus 开发服务器会自动检测到更改，并为你重新编译应用程序，因此无需重新启动。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid ""
"You can hit refresh couple more times. Practically all requests should now be succeeding. The `CoffeeResource#coffees()`\n"
"method is still in fact failing in about 50 % of time, but every time it happens, the platform will automatically retry\n"
"the call!"
msgstr "你可以再点击几次刷新。现在几乎所有请求都应该成功了。事实上， `CoffeeResource#coffees()` 方法仍有约 50% 的时间会失败，但每次失败后，平台都会自动重试调用！"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid ""
"To see that the failures still happen, check the output of the development server. The log messages should be\n"
"similar to these:"
msgstr "要查看故障是否仍然发生，请检查开发服务器的输出。日志信息应与这些类似："

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid ""
"You can see that every time an invocation fails, it's immediately followed by another invocation, until one succeeds.\n"
"Since we allowed 4 retries, it would require 5 invocations to fail in a row, in order for the user to be actually exposed\n"
"to a failure. Which is fairly unlikely to happen."
msgstr "您可以看到，每次调用失败后，都会立即进行另一次调用，直到调用成功为止。由于我们允许 4 次重试，因此需要连续 5 次调用失败，用户才能真正暴露在失败面前。这种情况不太可能发生。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid "Adding Resiliency: Timeouts"
msgstr "增加弹性：超时"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid "So what else have we got in MicroProfile Fault Tolerance? Let's look into timeouts."
msgstr "那么 MicroProfile Fault Tolerance 还有哪些功能呢？让我们来看看超时。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid ""
"Add following two methods to our `CoffeeResource` endpoint. Again, no need to restart the server, just paste the code\n"
"and save the file."
msgstr "在 `CoffeeResource` 端点中添加以下两个方法。同样，无需重启服务器，只需粘贴代码并保存文件即可。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid ""
"We added some new functionality. We want to be able to recommend some related coffees based on a coffee that a user\n"
"is currently looking at. It's not a critical functionality, it's a nice-to-have. When the system is overloaded and the\n"
"logic behind obtaining recommendations takes too long to execute, we would rather time out and render the UI without\n"
"recommendations."
msgstr "我们添加了一些新功能。我们希望能够根据用户当前正在查看的咖啡推荐一些相关的咖啡。这不是一个关键功能，而是一个很好的功能。当系统负荷过重，获取推荐背后的逻辑执行时间过长时，我们宁愿超时，也不愿在没有推荐的情况下呈现用户界面。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid ""
"Note that the timeout was configured to 250 ms, and a random artificial delay between 0 and 500 ms was introduced\n"
"into the `CoffeeResource#recommendations()` method."
msgstr "请注意，超时时间被配置为 250 毫秒，并且在 `CoffeeResource#recommendations()` 方法中引入了 0 至 500 毫秒的随机人工延迟。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid "In your browser, go to `http://localhost:8080/coffee/2/recommendations` and hit refresh a couple of times."
msgstr "在浏览器中，转到 `http://localhost:8080/coffee/2/recommendations` 并刷新几次。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid ""
"You should see some requests time out with `org.eclipse.microprofile.faulttolerance.exceptions.TimeoutException`.\n"
"Requests that do not time out should show two recommended coffee samples in JSON."
msgstr "您应该会看到一些请求超时， `org.eclipse.microprofile.faulttolerance.exceptions.TimeoutException` 。未超时的请求应在 JSON 中显示两个推荐的咖啡样本。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid "Adding Resiliency: Fallbacks"
msgstr "增加复原力：后备方案"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid ""
"Let's make our recommendations feature even better by providing a fallback (and presumably faster) way of getting related\n"
"coffees."
msgstr "让我们提供一种获取相关咖啡的备用方法（可能更快），使我们的推荐功能更加完善。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid ""
"Add a fallback method to `CoffeeResource` and a `@Fallback` annotation to `CoffeeResource#recommendations()` method\n"
"as follows:"
msgstr "在 `CoffeeResource` 中添加回退方法，在 `CoffeeResource#recommendations()` 方法中添加 `@Fallback` 注解，如下所示："

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid ""
"Hit refresh several times on `http://localhost:8080/coffee/2/recommendations`.\n"
"The `TimeoutException` should not appear anymore. Instead, in case of a timeout, the page will\n"
"display a single recommendation that we hardcoded in our fallback method `fallbackRecommendations()`, rather than\n"
"two recommendations returned by the original method."
msgstr "在 `http://localhost:8080/coffee/2/recommendations` . `TimeoutException` 应该不会再出现了。相反，在超时的情况下，页面将显示我们在回退方法 `fallbackRecommendations()` 中硬编码的单个推荐，而不是原始方法返回的两个推荐。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid "Check the server output to see that fallback is really happening:"
msgstr "检查服务器输出，查看是否真的发生了回退："

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid "The fallback method is required to have the same parameters as the original method."
msgstr "回退方法的参数必须与原始方法相同。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid "Adding Resiliency: Circuit Breaker"
msgstr "增加复原力：断路器"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid ""
"A circuit breaker is useful for limiting number of failures happening in the system, when part of the system becomes\n"
"temporarily unstable. The circuit breaker records successful and failed invocations of a method, and when the ratio\n"
"of failed invocations reaches the specified threshold, the circuit breaker _opens_ and blocks all further invocations\n"
"of that method for a given time."
msgstr "当部分系统暂时不稳定时，断路器可用于限制系统中发生故障的次数。断路器会记录方法的成功调用和失败调用，当失败调用的比例达到指定阈值时，断路器就会 _打开_ ，并在给定时间内阻止该方法的所有进一步调用。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid "Add the following code into the `CoffeeRepositoryService` bean, so that we can demonstrate a circuit breaker in action:"
msgstr "在 `CoffeeRepositoryService` Bean 中添加以下代码，以便演示断路器的操作："

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid "And inject the code below into the `CoffeeResource` endpoint:"
msgstr "然后将下面的代码注入 `CoffeeResource` 端点："

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid ""
"We added another functionality - the application can return the amount of remaining packages of given coffee on our store\n"
"(just a random number)."
msgstr "我们还添加了另一项功能--应用程序可以返回我们商店中特定咖啡的剩余包装数量（只是一个随机数）。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid ""
"This time an artificial failure was introduced in the CDI bean: the `CoffeeRepositoryService#getAvailability()` method is\n"
"going to alternate between two successful and two failed invocations."
msgstr "这次在 CDI bean 中引入了人为故障： `CoffeeRepositoryService#getAvailability()` 方法将在两次成功调用和两次失败调用之间交替进行。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid ""
"We also added a `@CircuitBreaker` annotation with `requestVolumeThreshold = 4`. `CircuitBreaker.failureRatio` is\n"
"by default 0.5, and `CircuitBreaker.delay` is by default 5 seconds. That means that a circuit breaker will open\n"
"when 2 of the last 4 invocations failed, and it will stay open for 5 seconds."
msgstr "我们还通过 `requestVolumeThreshold = 4` 添加了 `@CircuitBreaker` 注释。 `CircuitBreaker.failureRatio` 的默认值为 0.5，而 `CircuitBreaker.delay` 的默认值为 5 秒。这意味着，当最后 4 次调用中有 2 次失败时，断路器将打开，并保持打开状态 5 秒钟。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid "To test this out, do the following:"
msgstr "要测试这一点，请执行以下操作："

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid "Go to `http://localhost:8080/coffee/2/availability` in your browser. You should see a number being returned."
msgstr "转到 `http://localhost:8080/coffee/2/availability` 浏览器。您应该会看到返回的数字。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid "Hit refresh, this second request should again be successful and return a number."
msgstr "点击刷新，第二次请求应该会再次成功，并返回一个数字。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid ""
"Refresh two more times. Both times you should see text \"RuntimeException: Service failed.\", which is the exception\n"
"thrown by `CoffeeRepositoryService#getAvailability()`."
msgstr "再刷新两次。这两次你都会看到 \"RuntimeException：服务失败。\"，这是 `CoffeeRepositoryService#getAvailability()` 引发的异常。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid ""
"Refresh a couple more times. Unless you waited too long, you should again see exception, but this time it's\n"
"\"CircuitBreakerOpenException: getAvailability\". This exception indicates that the circuit breaker opened\n"
"and the `CoffeeRepositoryService#getAvailability()` method is not being called anymore."
msgstr "再刷新几次。除非等待的时间太长，否则你应该会再次看到异常，不过这次是 \"CircuitBreakerOpenException: getAvailability\"。该异常表明断路器已打开， `CoffeeRepositoryService#getAvailability()` 方法不再被调用。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid ""
"Give it 5 seconds during which circuit breaker should close, and you should be able to make two successful requests\n"
"again."
msgstr "给它 5 秒钟时间，在此期间断路器应关闭，然后您就可以再次成功请求两次。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid "Runtime configuration"
msgstr "运行时配置"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid "You can override the annotations parameters at runtime inside your `application.properties` file."
msgstr "您可以在运行时在 `application.properties` 文件中覆盖注释参数。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid "If we take the retry example that we already saw:"
msgstr "如果以我们已经看到的重试为例："

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid "We can override the `maxRetries` parameter with 6 retries instead of 4 by the following configuration item:"
msgstr "我们可以通过以下配置项覆盖 `maxRetries` 参数，重试 6 次而不是 4 次："

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid ""
"The format is `fully-qualified-class-name/method-name/annotation-name/property-name=value`.\n"
"You can also configure a property for all the annotation via `annotation-name/property-name=value`."
msgstr "格式为 `fully-qualified-class-name/method-name/annotation-name/property-name=value` 。您还可以通过 `annotation-name/property-name=value` 为所有注释配置一个属性。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
msgid "Conclusion"
msgstr "解决方案"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid ""
"SmallRye Fault Tolerance allows to improve resiliency of your application, without having an impact on the complexity\n"
"of our business logic."
msgstr "SmallRye Fault Tolerance 允许提高应用程序的弹性，而不会影响业务逻辑的复杂性。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid "All that is needed to enable the fault tolerance features in Quarkus is:"
msgstr "要启用 Quarkus 的容错功能，只需要"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid "adding the `smallrye-fault-tolerance` Quarkus extension to your project using the `quarkus-maven-plugin`:"
msgstr "使用 `quarkus-maven-plugin` 将 `smallrye-fault-tolerance` Quarkus 扩展程序添加到您的项目中："

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid "CLI"
msgstr "CLI"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
msgid "Maven"
msgstr "Maven"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
msgid "Gradle"
msgstr "Gradle"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid "or simply adding the following Maven dependency:"
msgstr "或直接添加以下 Maven 依赖项："

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid "Additional resources"
msgstr "其他资源"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid ""
"SmallRye Fault Tolerance has more features than shown here.\n"
"Please check the link:https://smallrye.io/docs/smallrye-fault-tolerance/6.2.6/index.html[SmallRye Fault Tolerance documentation] to learn about them."
msgstr "SmallRye Fault Tolerance 具有比此处显示更多的功能。请查看 SmallR link:https://smallrye.io/docs/smallrye-fault-tolerance/6.2.6/index.html[ye Fault Tolerance 文档] 了解这些功能。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid "In Quarkus, you can use the SmallRye Fault Tolerance optional features out of the box."
msgstr "在 Quarkus 中，您可以使用开箱即用的 SmallRye 容错可选功能。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid "Support for Mutiny is present, so your asynchronous methods can return `Uni` in addition to `CompletionStage`."
msgstr "支持 Mutiny，因此除了 `CompletionStage` 之外，您的异步方法还可以返回 `Uni` 。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid "MicroProfile Context Propagation is integrated with Fault Tolerance, so existing contexts are automatically propagated to your asynchronous methods."
msgstr "MicroProfile 上下文传播与容错功能集成，因此现有上下文会自动传播到异步方法中。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid ""
"This also applies to the CDI request context: if it is active on the original thread, it is propagated to the new thread, but if it's not, then the new thread won't have it either.\n"
"This is contrary to MicroProfile Fault Tolerance specification, which states that the request context must be active during the `@Asynchronous` method invocation."
msgstr "这也适用于 CDI 请求上下文：如果它在原始线程上处于活动状态，则会传播到新线程，但如果它不处于活动状态，则新线程也不会拥有它。这违反了 MicroProfile 容错规范，该规范规定请求上下文必须在 `@Asynchronous` 方法调用期间处于活动状态。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid ""
"We believe that in presence of MicroProfile Context Propagation, this requirement should not apply.\n"
"The entire point of context propagation is to make sure the new thread has the same contexts as the original thread."
msgstr "我们认为，在微配置文件上下文传播的情况下，这一要求不应适用。上下文传播的全部意义在于确保新线程拥有与原线程相同的上下文。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid ""
"Non-compatible mode is enabled by default.\n"
"This means that methods that return `CompletionStage` (or `Uni`) have asynchronous fault tolerance applied without any `@Asynchronous`, `@AsynchronousNonBlocking`, `@Blocking` or `@NonBlocking` annotation.\n"
"It also means that circuit breaker, fallback and retry automatically inspect the exception cause chain if the exception itself is insufficient to decide what should happen."
msgstr "非兼容模式默认已启用。这意味着返回 `CompletionStage` （或 `Uni` ）的方法会应用异步容错，而无需任何 `@Asynchronous` 、 `@AsynchronousNonBlocking` 、 `@Blocking` 或 `@NonBlocking` 注释。这也意味着，如果异常本身不足以决定应该发生什么，断路器、回退和重试会自动检查异常原因链。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid ""
"This mode is not compatible with the MicroProfile Fault Tolerance specification, albeit the incompatibility is very small.\n"
"To restore full compatibility, add this configuration property:"
msgstr "该模式与 MicroProfile 容错规范不兼容，尽管不兼容程度很小。要恢复完全兼容，请添加此配置属性："

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid ""
"The link:https://smallrye.io/docs/smallrye-fault-tolerance/6.2.6/reference/programmatic-api.html[programmatic API] is present, including Mutiny support, and integrated with the declarative, annotation-based API.\n"
"You can use the `FaultTolerance` and `MutinyFaultTolerance` APIs out of the box."
msgstr "link:https://smallrye.io/docs/smallrye-fault-tolerance/6.2.6/reference/programmatic-api.html[编程式应用程序接口（API] ）包括 Mutiny 支持，并与基于注解的声明式应用程序接口（API）集成。您可以使用 `FaultTolerance` 和 `MutinyFaultTolerance` API。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid "Support for Kotlin is present (assuming you use the Quarkus extension for Kotlin), so you can guard your `suspend` functions with fault tolerance annotations."
msgstr "它支持 Kotlin（假设您使用的是 Kotlin 的 Quarkus 扩展），因此您可以使用容错注解来保护您的 `suspend` 函数。"

#: _versions/3.6/guides/smallrye-fault-tolerance.adoc
#, fuzzy
msgid ""
"Metrics are automatically discovered and integrated.\n"
"If your application uses the Quarkus extension for Micrometer, SmallRye Fault Tolerance will emit metrics to Micrometer.\n"
"If your application uses the Quarkus extension for SmallRye Metrics, SmallRye Fault Tolerance will emit metrics to MicroProfile Metrics.\n"
"Otherwise, SmallRye Fault Tolerance metrics will be disabled."
msgstr "自动发现并集成度量指标。如果您的应用程序使用 Quarkus 的 Micrometer 扩展，SmallRye Fault Tolerance 将向 Micrometer 发送度量指标。如果您的应用程序使用了 SmallRye Metrics 的 Quarkus 扩展，SmallRye Fault Tolerance 将向 MicroProfile Metrics 发送指标。否则，SmallRye Fault Tolerance 指标将被禁用。"
