msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.6/guides/funqy-http.adoc
#, fuzzy
msgid "Funqy HTTP Binding (Standalone)"
msgstr "Funqy HTTP 绑定（单机版）"

#: _versions/3.6/guides/funqy-http.adoc
#, fuzzy
msgid ""
"The guide walks through quickstart code to show you how you can deploy Funqy as a\n"
"standalone service and invoke on Funqy functions using HTTP."
msgstr "本指南通过快速入门代码向您展示如何将 Funqy 部署为独立服务，并使用 HTTP 调用 Funqy 函数。"

#: _versions/3.6/guides/funqy-http.adoc
#, fuzzy
msgid ""
"The Funqy HTTP binding is not a replacement for REST over HTTP.  Because Funqy\n"
"needs to be portable across a lot of different protocols and function providers its HTTP binding\n"
"is very minimalistic and you will lose REST features like linking and the ability to leverage\n"
"HTTP features like cache-control and conditional GETs.  You may want to consider using Quarkus's\n"
"Jakarta REST, Spring MVC, or Vert.x Web Reactive Routes support instead, although Funqy will have less overhead\n"
"than these alternatives (except Vert.x which is still super fast)."
msgstr "Funqy HTTP 绑定并非 HTTP REST 的替代品。由于 Funqy 需要在许多不同的协议和函数提供者之间进行移植，因此它的 HTTP 绑定非常简约，你将失去 REST 功能（如链接）以及利用 HTTP 功能（如缓存控制和条件 GET）的能力。您可以考虑使用 Quarkus 的 Jakarta REST、Spring MVC 或 Vert.x Web Reactive Routes 支持，尽管 Funqy 的开销比这些替代方案要小（Vert.x 除外，它的速度仍然超快）。"

#: _versions/3.6/guides/funqy-http.adoc
msgid "Prerequisites"
msgstr "先决条件"

#: _versions/3.6/guides/funqy-http.adoc
#, fuzzy
msgid "Read about xref:funqy.adoc[Funqy Basics].  This is a short read!"
msgstr "了解 xref:funqy.adoc[Funqy 基础知识] 。这是一篇短文！"

#: _versions/3.6/guides/funqy-http.adoc
#, fuzzy
msgid "The Quickstart"
msgstr "快速入门"

#: _versions/3.6/guides/funqy-http.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库： `git clone {quickstarts-clone-url}` ，或者下载 {quickstarts-archive-url}[存档] 。"

#: _versions/3.6/guides/funqy-http.adoc
#, fuzzy
msgid "The solution is located in the `funqy-http-quickstart` link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart[directory]."
msgstr "解决方案位于 `funqy-http-quickstart` link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart[目录] 中。"

#: _versions/3.6/guides/funqy-http.adoc
#, fuzzy
msgid "The Code"
msgstr "守则"

#: _versions/3.6/guides/funqy-http.adoc
#, fuzzy
msgid ""
"If you look at the Java code, you'll see that there is no HTTP specific API.  Its just simple Java methods\n"
"annotated with `@Funq`.  Simple, easy, straightforward."
msgstr "如果您查看 Java 代码，就会发现其中没有 HTTP 特定的 API。它只是用 `@Funq` 进行注解的简单 Java 方法。简单、方便、直接。"

#: _versions/3.6/guides/funqy-http.adoc
#, fuzzy
msgid "Maven Dependencies"
msgstr "Maven 依赖项"

#: _versions/3.6/guides/funqy-http.adoc
#, fuzzy
msgid "To write Funqy HTTP functions, simply include the `quarkus-funqy-http` dependency into your Quarkus `pom.xml` file:"
msgstr "要编写 Funqy HTTP 函数，只需在 Quarkus `pom.xml` 文件中加入 `quarkus-funqy-http` 依赖关系即可："

#: _versions/3.6/guides/funqy-http.adoc
#, fuzzy
msgid "Build Project"
msgstr "建设项目"

#: _versions/3.6/guides/funqy-http.adoc
#, fuzzy
msgid "This starts your functions in Quarkus dev mode."
msgstr "这将在 Quarkus 开发模式下启动你的功能。"

#: _versions/3.6/guides/funqy-http.adoc
#, fuzzy
msgid "Execute Funqy HTTP functions"
msgstr "执行 Funqy HTTP 函数"

#: _versions/3.6/guides/funqy-http.adoc
#, fuzzy
msgid ""
"The URL path to execute a function is the function name.  For example if your function name is `foo` then the URL path\n"
"to execute the function would be `/foo`."
msgstr "执行函数的 URL 路径就是函数名称。例如，如果函数名是 `foo` ，那么执行函数的 URL 路径就是 `/foo` 。"

#: _versions/3.6/guides/funqy-http.adoc
#, fuzzy
msgid ""
"The HTTP POST or GET methods can be used to invoke on a function.  The return value of the function\n"
"is marshalled to JSON using the Jackson JSON library.  Jackson annotations can be used.  If your function\n"
"has an input parameter, a POST invocation must use JSON as the input type.  Jackson is also used here for unmarshalling."
msgstr "HTTP POST 或 GET 方法可用于调用函数。函数的返回值将使用 Jackson JSON 库 marshalled 为 JSON。可以使用 Jackson 注释。如果函数有输入参数，POST 调用必须使用 JSON 作为输入类型。这里还使用 Jackson 来取消转义。"

#: _versions/3.6/guides/funqy-http.adoc
#, fuzzy
msgid ""
"You can invoke the `hello` function defined in link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/PrimitiveFunctions.java[PrimitiveFunctions.java]\n"
"by pointing your browser to http://localhost:8080/hello"
msgstr "您可以将浏览器指向 http://localhost:8080/hello ，调用 link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/PrimitiveFunctions.java[PrimitiveFunctions.java] 中定义的 `hello` 函数。"

#: _versions/3.6/guides/funqy-http.adoc
#, fuzzy
msgid ""
"Invoking the other functions in the quickstart requires an HTTP POST.\n"
"To execute the `greet` function defined in link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/GreetingFunction.java[GreetingFunction.java]\n"
"invoke this curl script."
msgstr "调用 quickstart 中的其他函数需要 HTTP POST。要执行 link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/GreetingFunction.java[GreetingFunction.java] 中定义的 `greet` 函数，请调用此 curl 脚本。"

#: _versions/3.6/guides/funqy-http.adoc
#, fuzzy
msgid ""
"Primitive types can also be passed as input using the standard JSON mapping for them.\n"
"To execute the `toLowerCase` function defined in link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/PrimitiveFunctions.java[PrimitiveFunctions.java]\n"
"invoke this curl script:"
msgstr "原始类型也可以使用标准的 JSON 映射作为输入传递。要执行 link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/PrimitiveFunctions.java[PrimitiveFunctions.java] 中定义的 `toLowerCase` 函数，请调用此 curl 脚本："

#: _versions/3.6/guides/funqy-http.adoc
#, fuzzy
msgid ""
"To execute the `double` function defined in link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/PrimitiveFunctions.java[PrimitiveFunctions.java]\n"
"invoke this curl script:"
msgstr "要执行 link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/PrimitiveFunctions.java[PrimitiveFunctions.java] 中定义的 `double` 函数，请调用此 curl 脚本："

#: _versions/3.6/guides/funqy-http.adoc
#, fuzzy
msgid "GET Query Parameter Mapping"
msgstr "GET 查询参数映射"

#: _versions/3.6/guides/funqy-http.adoc
#, fuzzy
msgid ""
"For GET requests, the Funqy HTTP Binding also has a query parameter mapping for function input parameters.\n"
"Only bean style classes and `java.util.Map` can be used for your input parameter.  For bean style\n"
"classes, query parameter names are mapped to properties on the bean class.  Here's an example of a simple\n"
"`Map`:"
msgstr "对于 GET 请求，Funqy HTTP 绑定还为函数输入参数提供了查询参数映射。只有 Bean 样式类和 `java.util.Map` 可用于输入参数。对于 Bean 样式类，查询参数名称会映射到 Bean 类的属性。下面是一个简单的示例 `Map` ："

#: _versions/3.6/guides/funqy-http.adoc
#, fuzzy
msgid ""
"Key values must be a primitive type (except char) or `String`.  Values can be primitives (except char), `String`, `OffsetDateTime` or a complex\n"
"bean style class.  For the above example, here's the corresponding curl request:"
msgstr "键值必须是基元类型（字符串除外）或 `String` 。值可以是基元类型（字符串除外）、 `String` 、 `OffsetDateTime` 或复杂 bean 风格类。对于上述示例，下面是相应的 curl 请求："

#: _versions/3.6/guides/funqy-http.adoc
#, fuzzy
msgid "The `map` input parameter of the `hello` function would have the key value pairs: `a`->1, `b`->2."
msgstr "`map` 输入参数 `hello` 函数的键值对为： `a` →1， `b` →2。"

#: _versions/3.6/guides/funqy-http.adoc
#, fuzzy
msgid "Bean style classes can also be use as the input parameter type.  Here's an example:"
msgstr "Bean 样式类也可用作输入参数类型。下面是一个例子："

#: _versions/3.6/guides/funqy-http.adoc
#, fuzzy
msgid ""
"Property values can be any primitive type except `char`. It can also be `String`, and `OffsetDateTime`.\n"
"`OffsetDateTime` query param values must be in ISO-8601 format."
msgstr "属性值可以是除 `char` 之外的任何基元类型。也可以是 `String` , 和 `OffsetDateTime` 。 `OffsetDateTime` 查询参数值必须是 ISO-8601 格式。"

#: _versions/3.6/guides/funqy-http.adoc
#, fuzzy
msgid "You can invoke on this using an HTTP GET and query parameters:"
msgstr "您可以使用 HTTP GET 和查询参数对此进行调用："

#: _versions/3.6/guides/funqy-http.adoc
#, fuzzy
msgid "In the above request, the query parameter names are mapped to corresponding properties in the input class."
msgstr "在上述请求中，查询参数名称被映射到输入类中的相应属性。"

#: _versions/3.6/guides/funqy-http.adoc
#, fuzzy
msgid "The input class can also have nested bean classes.  Expanding on the previous example:"
msgstr "输入类还可以嵌套 bean 类。扩展上一个示例："

#: _versions/3.6/guides/funqy-http.adoc
#, fuzzy
msgid "In this case, query parameters for nested values use the `.` notation.  For example:"
msgstr "在这种情况下，嵌套值的查询参数使用 `.` 符号。例如"

#: _versions/3.6/guides/funqy-http.adoc
#, fuzzy
msgid "`java.util.List` and `Set` are also supported as property values.  For example:"
msgstr "`java.util.List` 和 也支持作为属性值。例如 `Set` "

#: _versions/3.6/guides/funqy-http.adoc
#, fuzzy
msgid "To invoke a GET request, just list the `pets` query parameter multiple times."
msgstr "要调用 GET 请求，只需多次列出 `pets` 查询参数即可。"

#: _versions/3.6/guides/funqy-http.adoc
#, fuzzy
msgid ""
"For more complex types, `List` and `Set` members must have an identifier in the\n"
"query parameter.  For example:"
msgstr "对于更复杂的类型， `List` 和 `Set` 成员必须在查询参数中包含标识符。例如"

#: _versions/3.6/guides/funqy-http.adoc
#, fuzzy
msgid ""
"Each `kids` query parameter must identify the kid they are referencing so that\n"
"the runtime can figure out which\n"
"property values go to which members in the list.  Here's the curl request:"
msgstr "每个 `kids` 查询参数都必须标识出它们所引用的孩子，以便运行时可以找出哪些属性值对应于列表中的哪些成员。下面是 curl 请求"

#: _versions/3.6/guides/funqy-http.adoc
#, fuzzy
msgid ""
"The above URL uses the value `1` and `2` to identity the target member of the list, but any unique\n"
"string can be used."
msgstr "上述 URL 使用 `1` 和 `2` 值来标识列表中的目标成员，但也可以使用任何唯一字符串。"

#: _versions/3.6/guides/funqy-http.adoc
#, fuzzy
msgid ""
"A property can also be a `java.util.Map`.  The key of the map can be any primitive type and `String`.\n"
"For example:"
msgstr "属性也可以是 `java.util.Map` 。映射的键可以是任何基元类型和 `String` 。例如"

#: _versions/3.6/guides/funqy-http.adoc
#, fuzzy
msgid "The corresponding call would look like this:"
msgstr "相应的调用如下"

#: _versions/3.6/guides/funqy-http.adoc
#, fuzzy
msgid "If your `Map` value is a complex type, then just continue the notation by adding the property to set at the end."
msgstr "如果 `Map` 值是一个复杂类型，那么只需在最后添加要设置的属性，继续使用该符号。"
