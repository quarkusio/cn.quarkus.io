msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.6/guides/grpc-getting-started.adoc
msgid "Getting Started with gRPC"
msgstr "开始使用gRPC"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid ""
"This page explains how to start using gRPC in your Quarkus application.\n"
"While this page describes how to configure it with Maven, it is also possible to use Gradle."
msgstr "本页介绍了如何在 Quarkus 应用程序中开始使用 gRPC。本页介绍了如何使用 Maven 进行配置，也可以使用 Gradle。"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid ""
"Let's imagine you have a regular Quarkus project, generated from the https://code.quarkus.io[Quarkus project generator].\n"
"The default configuration is enough, but you can also select some extensions if you want."
msgstr "假设你有一个普通的 Quarkus 项目，由 link:https://code.quarkus.io[Quarkus 项目生成器生成] 。默认配置已经足够，但你也可以根据需要选择一些扩展。"

#: _versions/3.6/guides/grpc-getting-started.adoc
msgid "Solution"
msgstr "解决方案"

#: _versions/3.6/guides/grpc-getting-started.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#: _versions/3.6/guides/grpc-getting-started.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库： `git clone {quickstarts-clone-url}` ，或者下载 {quickstarts-archive-url}[存档] 。"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid "The solution is located in the `grpc-plain-text-quickstart` link:{quickstarts-tree-url}/grpc-plain-text-quickstart[directory]."
msgstr "解决方案位于 `grpc-plain-text-quickstart` link:{quickstarts-tree-url}/grpc-plain-text-quickstart[目录] 中。"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid "Configuring your project"
msgstr "配置项目"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid "Add the Quarkus gRPC extension to your build file:"
msgstr "在构建文件中添加 Quarkus gRPC 扩展："

#: _versions/3.6/guides/grpc-getting-started.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.6/guides/grpc-getting-started.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid ""
"By default, the `quarkus-grpc` extension relies on the reactive programming model.\n"
"In this guide we will follow a reactive approach.\n"
"Under the `dependencies` section of your `pom.xml` file, make sure you have the RESTEasy Reactive dependency:"
msgstr "默认情况下， `quarkus-grpc` 扩展依赖于反应式编程模型。在本指南中，我们将采用反应式方法。在 `pom.xml` 文件的 `dependencies` 部分中，确保有 RESTEasy Reactive 依赖关系："

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid ""
"If you are using Maven, make sure you have the `generate-code` goal of `quarkus-maven-plugin` enabled in your `pom.xml`.\n"
"If you wish to generate code from different `proto` files for tests, also add the `generate-code-tests` goal.\n"
"Please note that no additional task/goal is required for the Gradle plugin."
msgstr "如果使用 Maven，请确保在 `pom.xml` 中启用了 `generate-code` goal of `quarkus-maven-plugin` 。如果希望从不同的 `proto` 文件中生成用于测试的代码，还需添加 `generate-code-tests` 目标。请注意，Gradle 插件不需要额外的任务/目标。"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid ""
"With this configuration, you can put your service and message definitions in the `src/main/proto` directory.\n"
"`quarkus-maven-plugin` will generate Java files from your `proto` files."
msgstr "通过这种配置，您可以将服务和消息定义放在 `src/main/proto` 目录中。 `quarkus-maven-plugin` 将根据 `proto` 文件生成 Java 文件。"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid ""
"`quarkus-maven-plugin` retrieves a version of `protoc` (the protobuf compiler) from Maven repositories. The retrieved version matches your operating system and CPU architecture.\n"
"If this retrieved version does not work in your context, you can either force to use a different OS classifier with\n"
"`-Dquarkus.grpc.protoc-os-classifier=your-os-classifier` (e.g. `osx-x86_64`).\n"
"You can also download the suitable binary and specify the location via\n"
"`-Dquarkus.grpc.protoc-path=/path/to/protoc`."
msgstr "`quarkus-maven-plugin` 从 Maven 资源库中检索 （protobuf 编译器）的版本。检索到的版本与操作系统和 CPU 架构相匹配。如果检索到的版本不适合您的情况，您可以通过 （如 ）强制使用不同的操作系统分类器。也可以通过 下载合适的二进制文件并指定位置。 `protoc` `-Dquarkus.grpc.protoc-os-classifier=your-os-classifier` `osx-x86_64` `-Dquarkus.grpc.protoc-path=/path/to/protoc`"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid ""
"Let's start with a simple _Hello_ service.\n"
"Create the `src/main/proto/helloworld.proto` file with the following content:"
msgstr "让我们从简单的 _Hello_ 服务开始。创建 `src/main/proto/helloworld.proto` 文件，内容如下："

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid "This `proto` file defines a simple service interface with a single method (`SayHello`), and the exchanged messages (`HelloRequest` containing the name and `HelloReply` containing the greeting message)."
msgstr "`proto` 文件定义了一个简单的服务接口，只有一个方法（ `SayHello` ）和交换信息（ `HelloRequest` ，包含名称； `HelloReply` ，包含问候信息）。"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid "Your `proto` file must not contain `option java_generic_services = true;`. https://developers.google.com/protocol-buffers/docs/reference/java-generated?hl=en#service[Generic services are deprecated] and are not compatible with Quarkus code generation plugins."
msgstr "您的 `proto` 文件不得包含 `option java_generic_services = true;` 。 link:https://developers.google.com/protocol-buffers/docs/reference/java-generated?hl=en#service[通用服务已过时] ，与 Quarkus 代码生成插件不兼容。"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid ""
"Before coding, we need to generate the classes used to implement and consume gRPC services.\n"
"In a terminal, run:"
msgstr "在编码之前，我们需要生成用于实现和使用 gRPC 服务的类。在终端运行"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid "Once generated, you can look at the `target/generated-sources/grpc` directory:"
msgstr "生成后，您可以查看 `target/generated-sources/grpc` 目录："

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid "These are the classes we are going to use."
msgstr "这些是我们要使用的类。"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid "Different gRPC implementations / types"
msgstr "不同的 gRPC 实现/类型"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid "Another thing to take note as well is that Quarkus' gRPC support currently includes 3 different types of gRPC usage:"
msgstr "另外需要注意的是，Quarkus 的 gRPC 支持目前包括 3 种不同类型的 gRPC 使用："

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid "old Vert.x gRPC implementation with a separate gRPC server (default)"
msgstr "旧的 Vert.x gRPC 实现，带有单独的 gRPC 服务器（默认值）"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid "new Vert.x gRPC implementation on top of the existing HTTP server"
msgstr "在现有 HTTP 服务器基础上实现新的 Vert.x gRPC"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid "https://grpc.github.io/grpc/core/md_doc_grpc_xds_features.html[xDS gRPC] wrapper over https://github.com/grpc/grpc-java[grpc-java] with a separate Netty based gRPC server"
msgstr "基于 link:https://github.com/grpc/grpc-java[grpc-java] 的 link:https://grpc.github.io/grpc/core/md_doc_grpc_xds_features.html[xDS gRPC] 封装器和一个单独的基于 Netty 的 gRPC 服务器"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid "Further docs explain how to enable and use each of them."
msgstr "更多文档解释了如何启用和使用这些功能。"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid "Implementing a gRPC service"
msgstr "实施 gRPC 服务"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid "Now that we have the generated classes let's implement our _hello_ service."
msgstr "现在我们有了生成的类，让我们来实现 _hello_ 服务吧。"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid ""
"With Quarkus, implementing a service requires to implement the generated service interface based on Mutiny, a Reactive Programming API integrated in Quarkus, and expose it as a CDI bean.\n"
"Learn more about Mutiny on the xref:mutiny-primer.adoc[Mutiny guide].\n"
"The service class must be annotated with the `@io.quarkus.grpc.GrpcService` annotation."
msgstr "使用 Quarkus 实现服务需要基于 Mutiny（Quarkus 中集成的反应式编程 API）实现生成的服务接口，并将其作为 CDI Bean 公开。有关 Mutiny 的更多信息，请参阅 xref:mutiny-primer.adoc[Mutiny 指南] 。服务类必须使用 `@io.quarkus.grpc.GrpcService` 注解。"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid "Implementing a service"
msgstr "实施服务"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid "Create the `src/main/java/org/acme/HelloService.java` file with the following content:"
msgstr "创建 `src/main/java/org/acme/HelloService.java` 文件，内容如下："

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid "Expose your implementation as a bean."
msgstr "将您的实现作为 bean 公开。"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid "Implement the generated service interface."
msgstr "执行生成的服务接口。"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid "Implement the methods defined in the service definition (here we have a single method)."
msgstr "执行服务定义中定义的方法（这里只有一个方法）。"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid "You can also use the default gRPC API instead of Mutiny:"
msgstr "您也可以使用默认的 gRPC API 代替 Mutiny："

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid "Extends the `ImplBase` class. This is a generated class."
msgstr "扩展了 `ImplBase` 类。这是一个生成类。"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid "Build and send the response."
msgstr "建立并发送响应。"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid "Close the response."
msgstr "关闭回复。"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid ""
"If your service implementation logic is blocking (use blocking I/O for example), annotate your method with\n"
"`@Blocking`.\n"
"The `io.smallrye.common.annotation.Blocking` annotation instructs the framework to invoke the\n"
"annotated method on a worker thread instead of the I/O thread (event-loop)."
msgstr "如果您的服务实现逻辑是阻塞的（例如使用阻塞 I/O），请使用 `@Blocking` 注释您的方法。 `io.smallrye.common.annotation.Blocking` 注解指示框架在工作线程上调用注解的方法，而不是在 I/O 线程上（事件循环）。"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid "The gRPC server"
msgstr "gRPC 服务器"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid ""
"The services are _served_ by a _server_.\n"
"Available services (_CDI beans_) are automatically registered and exposed."
msgstr "服务由 _服务器_ _提供_ 。可用的服务 _（CDI Bean_ ）会自动注册并公开。"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid ""
"By default, the server is exposed on `localhost:9000`, and uses _plain-text_ (so no TLS) when\n"
"running normally, and `localhost:9001` for tests."
msgstr "默认情况下，服务器通过 `localhost:9000` 公开，正常运行时使用 _纯文本_ （因此不使用 TLS），测试时使用 `localhost:9001` 。"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid "Run the application using: `mvn quarkus:dev`."
msgstr "使用以下方式运行应用程序： `mvn quarkus:dev` 。"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid "Consuming a gRPC service"
msgstr "使用 gRPC 服务"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid ""
"In this section, we are going to consume the service we expose.\n"
"To simplify, we are going to consume the service from the same application, which in the real world, does not make sense."
msgstr "在本节中，我们将使用我们公开的服务。为简化起见，我们将从同一个应用程序中消费服务，但这在现实世界中并不合理。"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid "Open the existing `org.acme.ExampleResource` class, and edit the content to become:"
msgstr "打开现有的 `org.acme.ExampleResource` 类，将内容编辑为"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid "Inject the service and configure its name. The name is used in the application configuration. If not specified then the field name is used instead: `hello` in this particular case."
msgstr "注入服务并配置其名称。该名称将在应用程序配置中使用。如果未指定，则使用字段名称： `hello` 。"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid "Use the generated service interface based on Mutiny API."
msgstr "使用基于 Mutiny API 生成的服务接口。"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid "Invoke the service."
msgstr "调用服务。"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid ""
"We need to configure the application to indicate where the `hello` service is found.\n"
"In the `src/main/resources/application.properties` file, add the following property:"
msgstr "我们需要对应用程序进行配置，以指明 `hello` 服务的位置。在 `src/main/resources/application.properties` 文件中，添加以下属性："

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid "`hello` is the name used in the `@GrpcClient` annotation."
msgstr "`hello` 是 注释中使用的名称。 `@GrpcClient` "

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid "`host` configures the service host (here it's localhost)."
msgstr "`host` 配置服务主机（此处为 localhost）。"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid "Then, open http://localhost:8080/hello/quarkus in a browser, and you should get `Hello quarkus`!"
msgstr "然后，在浏览器中打开 http://localhost:8080/hello/quarkus ，您应该会看到 `Hello quarkus` ！"

#: _versions/3.6/guides/grpc-getting-started.adoc
msgid "Packaging the application"
msgstr "打包应用"

#: _versions/3.6/guides/grpc-getting-started.adoc
#, fuzzy
msgid ""
"Like any other Quarkus applications, you can package it with: `mvn package`.\n"
"You can also package the application into a native executable with: `mvn package -Dnative`."
msgstr "与其他 Quarkus 应用程序一样，您可以用： `mvn package` .您也可以使用以下方法将应用程序打包为本地可执行文件： `mvn package -Dnative` ."
