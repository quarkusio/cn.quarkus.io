msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Migrate from Vert.x OIDC to Quarkus OIDC"
msgstr "从 Vert.x OIDC 迁移到 Quarkus OIDC"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Learn how to migrate your Vert.x OIDC application to Quarkus and choose to either retain Vert.x OIDC or replace it with Quarkus OIDC."
msgstr "了解如何将 Vert.x OIDC 应用程序迁移到 Quarkus，并选择保留 Vert.x OIDC 或将其替换为 Quarkus OIDC。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "We will start with an original Vert.x https://how-to.vertx.io/web-and-oauth2-oidc/[Securing a Web Application with OAuth2/OpenID Connect] `how-to` tutorial which shows how a https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/authenticating-to-the-rest-api-with-an-oauth-app[GitHub OAuth2 application] can be implemented with Vert.x OIDC. You may have already worked through this tutorial before as a Vert.x OIDC user."
msgstr "我们将从最初的 Vert.x link:https://how-to.vertx.io/web-and-oauth2-oidc/[使用 OAuth2/OpenID Connect 保护 Web 应用程序安全] `how-to` 教程开始，该教程展示了如何使用 Vert.x OIDC 实现 link:https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/authenticating-to-the-rest-api-with-an-oauth-app[GitHub OAuth2 应用程序] 。作为 Vert.x OIDC 用户，您可能已经学习过该教程。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid ""
"Even though GitHub supports `OAuth2` only, we will use a `Vert.x OIDC` term.\n"
"OIDC is built on top of OAuth2 and the Vert.x https://how-to.vertx.io/web-and-oauth2-oidc/[Securing a Web Application with OAuth2/OpenID Connect] tutorial also https://how-to.vertx.io/web-and-oauth2-oidc/#openid-connect[talks about OIDC]."
msgstr "尽管 GitHub 仅支持 `OAuth2` ，但我们将使用 `Vert.x OIDC` 术语。OIDC 建立在 OAuth2 的基础之上，Vert.x link:https://how-to.vertx.io/web-and-oauth2-oidc/[Securing a Web Application with OAuth2/OpenID Connect] 教程也 link:https://how-to.vertx.io/web-and-oauth2-oidc/#openid-connect[谈到了 OIDC] 。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Next, you will learn how to migrate the Vert.x application to Quarkus, while `completely retaining` the Vert.x OIDC code."
msgstr "接下来，您将学习如何将 Vert.x 应用程序迁移到 Quarkus，同时 `completely retaining` Vert.x OIDC 代码。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Finally, an option of replacing the Vert.x OIDC with Quarkus OIDC will be explained for you to analyze and consider implementing it."
msgstr "最后，我们将解释用 Quarkus OIDC 取代 Vert.x OIDC 的方案，供大家分析并考虑实施。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Vert.x OIDC on Vert.x"
msgstr "Vert.x 上的 OIDC"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Let's start with the https://how-to.vertx.io/web-and-oauth2-oidc/[Securing a Web Application with OAuth2/OpenID Connect] `how-to` tutorial."
msgstr "让我们从 link:https://how-to.vertx.io/web-and-oauth2-oidc/[使用 OAuth2/OpenID Connect 保护网络应用程序的] `how-to` 教程开始。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "https://how-to.vertx.io/web-and-oauth2-oidc/#create-a-project[Create the project], you should end up with a `pom.xml` which contains the following properties and dependencies:"
msgstr "link:https://how-to.vertx.io/web-and-oauth2-oidc/#create-a-project[创建项目] 后，您将得到一个包含以下属性和依赖项的 `pom.xml` ："

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Register the GitHub application as described in the https://how-to.vertx.io/web-and-oauth2-oidc/[Securing a Web Application with OAuth2/OpenID Connect] tutorial, the only difference is that you should register a `http://localhost:8080/login` callback url, instead of `http://localhost:8080/callback`."
msgstr "按照 \" link:https://how-to.vertx.io/web-and-oauth2-oidc/[使用 OAuth2/OpenID Connect 保护网络应用程序] \"教程中的说明注册 GitHub 应用程序，唯一不同的是你应该注册一个 `http://localhost:8080/login` 回调 URL，而不是 `http://localhost:8080/callback` ."

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "The final version of the `MainVerticle` Java class looks like this:"
msgstr "`MainVerticle` Java 类的最终版本如下所示："

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Initialize Handlebars templating engine."
msgstr "初始化 Handlebars 模板引擎。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Create Vert.x router."
msgstr "创建 Vert.x 路由器。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Register Vert.x OIDC session handler which keeps the session details in memory."
msgstr "注册 Vert.x OIDC 会话处理程序，将会话详情保存在内存中。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Create a route handler to support a welcome page at the `http://localhost:8080` address."
msgstr "创建路由处理程序，以支持在 `http://localhost:8080` 地址的欢迎页面。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Initialize OAuth2 GitHub provider with a Vert.x instance, and GitHub client id and secret properties."
msgstr "使用 Vert.x 实例以及 GitHub 客户端 id 和 secret 属性初始化 OAuth2 GitHub 提供程序。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Register OAuth2 handler to secure the `http://localhost:8080/protected` endpoint. This handler uses the GitHub provider to authenticate users and requests a `user:email` scope when redirecting users to GitHub. The handler is set up with a callback route which uses a returned authorizaion code and the provided `http://localhost:8080/login` redirect URL to complete the authorization code flow and acquire a GitHub access token."
msgstr "注册 OAuth2 处理程序，以确保 `http://localhost:8080/protected` 端点的安全。该处理程序使用 GitHub 提供商对用户进行身份验证，并在将用户重定向到 GitHub 时请求 `user:email` 范围。该处理程序通过回调路由设置，使用返回的授权码和提供的 `http://localhost:8080/login` 重定向 URL 来完成授权代码流程并获取 GitHub 访问令牌。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Do not allow access to the `http://localhost:8080/protected` endpoint if the GitHub access token does not have a `user:email` scope. Please note that while the `PermissionBasedAuthorization` capability to constrain access tokens is great, applying it in the context of this application is not necessary: authorization code flow access tokens, and GitHub access tokens in particular, are not meant to control access to the application that acquired them but for this application to use them on behalf of the authenticated user to access another API, such as GitHub API, as indeed, is demonsrtated below."
msgstr "如果 GitHub 访问令牌的 `http://localhost:8080/protected` 如果 GitHub 访问令牌没有 `user:email` 范围，则不允许访问端点。请注意，虽然 `PermissionBasedAuthorization` 具有约束访问令牌的强大功能，但在本应用程序中应用这种功能并无必要：授权代码流访问令牌，尤其是 GitHub 访问令牌，并不是为了控制获取这些令牌的应用程序的访问，而是为了让本应用程序代表已通过身份验证的用户使用这些令牌访问另一个 API，如 GitHub API（下文将详细说明）。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "The `ProtectedProfileHandler` Java class returns a list of user emails and looks exactly as shown in the https://how-to.vertx.io/web-and-oauth2-oidc/#create-a-project[Securing a Web Application with OAuth2/OpenID Connect] tutorial:"
msgstr "`ProtectedProfileHandler` Java 类会返回一个用户电子邮件列表，其外观与 link:https://how-to.vertx.io/web-and-oauth2-oidc/#create-a-project[使用 OAuth2/OpenID Connect 保护网络应用程序] 教程中所示的一模一样："

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Fetch the user emails with Vert.x WebClient"
msgstr "使用 Vert.x WebClient 获取用户电子邮件"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Use the GitHub access token to access GitHub API"
msgstr "使用 GitHub 访问令牌访问 GitHub API"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Update UserInfo with a JSON array containing private emails and pass it to the `protected.hbs` template."
msgstr "使用包含私人邮件的 JSON 数组更新 UserInfo，并将其传递给 `protected.hbs` 模板。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Finally, create `index.hbs` and `protected.hbs` templates in the `src/main/resources/views` directory, copy their content from the https://how-to.vertx.io/web-and-oauth2-oidc/#create-a-project[Securing a Web Application with OAuth2/OpenID Connect] tutorial."
msgstr "最后，在 `src/main/resources/views` 目录中创建 `index.hbs` 和 `protected.hbs` 模板，并从 \" link:https://how-to.vertx.io/web-and-oauth2-oidc/#create-a-project[使用 OAuth2/OpenID Connect 保护 Web 应用程序] \"教程中复制其内容。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Compile and run the application as `java -jar target/oauth-oidc-1.0.0-SNAPSHOT-fat.jar`, go to `http://localhost:8080` and follow the https://how-to.vertx.io/web-and-oauth2-oidc/#create-a-project[Securing a Web Application with OAuth2/OpenID Connect] tutorial to login to GitHub and get your GitHub account email(s) displayed."
msgstr "以 `java -jar target/oauth-oidc-1.0.0-SNAPSHOT-fat.jar` 的形式编译并运行应用程序，访问 `http://localhost:8080` 并按照 \" link:https://how-to.vertx.io/web-and-oauth2-oidc/#create-a-project[使用 OAuth2/OpenID Connect 保护网络应用程序] \"教程登录 GitHub 并显示 GitHub 账户电子邮件。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "When you accessed the `http://localhost:8080/protected` page the first time, the following redirects happened:"
msgstr "当您第一次访问 `http://localhost:8080/protected` 页面时，会出现以下重定向："

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "You were redirected by Vert.x OIDC to GitHub to login."
msgstr "您被 Vert.x OIDC 重定向到 GitHub 以登录。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "You were redirected by GitHub to the `http://localhost:8080/login` callback route handler which completed the authorization code flow and acquired the GitHub access token."
msgstr "您被 GitHub 重定向到了 `http://localhost:8080/login` 回调路由处理程序，完成授权代码流程并获取 GitHub 访问令牌。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "You were redirected by Vert.x OIDC to the `original` request URL, `http://localhost:8080/protected`."
msgstr "您被 Vert.x OIDC 重定向到 `original` 请求 URL、 `http://localhost:8080/protected` ."

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Vert.x OIDC on Quarkus"
msgstr "Quarkus 上的 Vert.x OIDC"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "We have worked through the original https://how-to.vertx.io/web-and-oauth2-oidc/#create-a-project[Securing a Web Application with OAuth2/OpenID Connect] tutorial in the <<vertx-oidc-vertx>> section, and now we can start planning moving the Vert.x applicaton to Quarkus, while retaining Vert.x OIDC."
msgstr "我们已经在 <<vertx-oidc-vertx>> 部分学习了 link:https://how-to.vertx.io/web-and-oauth2-oidc/#create-a-project[使用 OAuth2/OpenID Connect 确保 Web 应用程序安全的] 原始教程，现在可以开始计划将 Vert.x 应用程序转移到 Quarkus，同时保留 Vert.x OIDC。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Let's update `pom.xml` as follows:"
msgstr "让我们更新 `pom.xml` 如下："

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Compared to the pom.xml from the <<vertx-oidc-vertx>> section, this pom.xml retains only two original Vert.x dependencies in the `io.vertx` group, `vertx-web-client` to support GitHub API calls, and `vertx-auth-oauth2` to continue securing the protected endpoint with the Vert.x GitHub OAuth2 provider."
msgstr "与 <<vertx-oidc-vertx>> 部分的 pom.xml 相比，该 pom.xml 只保留了 `io.vertx` 组中的两个原始 Vert.x 依赖项： `vertx-web-client` ，以支持 GitHub API 调用； `vertx-auth-oauth2` ，以继续使用 Vert.x GitHub OAuth2 提供程序确保受保护端点的安全。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "We also introduce two Quarkus dependencies in the `io.quarkus` group, `quarkus-vertx-http`, and `quarkus-qute` which provides https://quarkus.io/guides/qute[Qute Templating Engine] and replaces the Handlebars engine used in the <<vertx-oidc-vertx>> section."
msgstr "我们还在 `io.quarkus` 组中引入了两个 Quarkus 依赖项，即 `quarkus-vertx-http` 和 `quarkus-qute` ，后者提供 link:https://quarkus.io/guides/qute[Qute 模板引擎] ，取代了 <<vertx-oidc-vertx>> 部分使用的 Handlebars 引擎。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "The `MainVerticle` Java class has been converted to a CDI `ApplicationScoped` `GitHubProfileService` Java bean class which registeres the Vert.x route and handlers on the start-up:"
msgstr "`MainVerticle` Java 类已转换为 CDI `ApplicationScoped` `GitHubProfileService` Java Bean 类，可在启动时注册 Vert.x 路由和处理程序："

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Initialize OAuth2 GitHub provider with an injected Vert.x instance, and GitHub client id and secret properties."
msgstr "使用注入的 Vert.x 实例以及 GitHub 客户端 id 和 secret 属性初始化 OAuth2 GitHub 提供程序。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Setup a router at the start up, nearly exactly as it was done in the `MainVerticle` class in the <<vertx-oidc-vertx>> section, with only a small difference, see the next point."
msgstr "在启动时设置路由器，几乎与 `MainVerticle` class 中 <<vertx-oidc-vertx>> 部分的操作完全相同，只有一点不同，请参见下一点。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Pass the injected Qute `userEmail` template to the `ProtectedProfileHandler`."
msgstr "将注入的 Qute `userEmail` 模板传递给 `ProtectedProfileHandler` 。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "The `ProtectedProfileHandler` Java class remains similar to how it was implemented in the <<vertx-oidc-vertx>> section, but now it works with the Qute template and looks like this:"
msgstr "`ProtectedProfileHandler` Java 类仍与 <<vertx-oidc-vertx>> 部分中的实现方式类似，但现在它与 Qute 模板一起工作，看起来像这样："

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Update UserInfo with a JSON array containing private emails, pass it to the `userEmail` template and render it asynchronously."
msgstr "使用包含私人邮件的 JSON 数组更新 UserInfo，将其传递给 `userEmail` 模板并异步呈现。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "The `index.hbs` has been renamed to the `index.html` Qute template and moved to the `src/main/resources/META-INF/resources/` directory, its content remains the same."
msgstr "`index.hbs` 已更名为 `index.html` Qute 模板，并移至 `src/main/resources/META-INF/resources/` 目录，其内容保持不变。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "The `protected.hbs` has been converted to the `userEmail.html` Qute template and moved to the `src/main/templates` directory. It has been updated to follow Qute rules:"
msgstr "`protected.hbs` 已转换为 `userEmail.html` Qute 模板，并移至 `src/main/templates` 目录。它已按照 Qute 规则进行了更新："

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "This simple template is quite similar to the Handlebars template you created in the the <<vertx-oidc-vertx>> section. Please see the https://quarkus.io/guides/qute-reference[Qute Reference Guide] for more details."
msgstr "这个简单的模板与您在 <<vertx-oidc-vertx>> 部分创建的手把模板非常相似。更多详情，请参阅《 link:https://quarkus.io/guides/qute-reference[Qute 参考指南] 》。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Now, you can compile and run the application but let's start it the dev mode with `mvn quarkus:dev`."
msgstr "现在，您可以编译并运行应用程序，但让我们使用 `mvn quarkus:dev` 启动它的开发模式。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Go to `http://localhost:8080` and follow the https://how-to.vertx.io/web-and-oauth2-oidc/#create-a-project[Securing a Web Application with OAuth2/OpenID Connect] tutorial to login to GitHub and get your GitHub account email(s) displayed."
msgstr "访问 `http://localhost:8080` 并按照 \" link:https://how-to.vertx.io/web-and-oauth2-oidc/#create-a-project[使用 OAuth2/OpenID Connect 保护 Web 应用程序] \"教程登录 GitHub 并显示 GitHub 账户的电子邮件。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "The same sequence of redirects that is described in the end of the <<vertx-oidc-vertx>> section also happened in this application, after you accessed `http://localhost:8080/protected`."
msgstr "<<vertx-oidc-vertx>> 部分末尾描述的重定向序列也发生在此应用程序中，在您访问了 `http://localhost:8080/protected` ."

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "At this point, if you prefer, you can continue learning working with Quarkus, while keeping your existing Veert.x OIDC code."
msgstr "此时，如果您愿意，可以继续学习使用 Quarkus，同时保留现有的 Veert.x OIDC 代码。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "You may also want to have a look at https://quarkus.io/guides/security-authorize-web-endpoints-reference[how to apply authorization rules to the HTTP request paths], without having to use annotations."
msgstr "您可能还想了解 link:https://quarkus.io/guides/security-authorize-web-endpoints-reference[如何在 HTTP 请求路径中应用授权规则] ，而无需使用注解。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "If you would like to learn how to migrate Vert.x OIDC to Quarkus OIDC, please follow to the next <<vertx-oidc-to-quarkus-oidc>> section."
msgstr "如果您想了解如何将 Vert.x OIDC 迁移到 Quarkus OIDC，请访问 <<vertx-oidc-to-quarkus-oidc>> 。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Migrate to Quarkus OIDC"
msgstr "迁移到 Quarkus OIDC"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "We started with working through the original https://how-to.vertx.io/web-and-oauth2-oidc/#create-a-project[Securing a Web Application with OAuth2/OpenID Connect] tutorial in the <<vertx-oidc-vertx>> section. And in the <<vertx-oidc-quarkus>> section, we converted it to run on Quarkus, while retaining Vert.x OIDC."
msgstr "我们首先在 <<vertx-oidc-vertx>> 部分学习了 link:https://how-to.vertx.io/web-and-oauth2-oidc/#create-a-project[使用 OAuth2/OpenID Connect 确保 Web 应用程序安全的] 原始教程。在 <<vertx-oidc-quarkus>> 部分，我们将其转换为在 Quarkus 上运行，同时保留了 Vert.x OIDC。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "In this section, you are going to learn how the Vert.x OIDC code can be converted to Quarkus OIDC."
msgstr "在本节中，您将学习如何将 Vert.x OIDC 代码转换为 Quarkus OIDC。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Let's start with updating the `pom.xml`, it should look like this:"
msgstr "让我们从更新 `pom.xml` 开始，它应该是这样的："

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Compared to the pom.xml from the <<vertx-oidc-quarkus>> section above, this pom.xml no longer has dependencies in the `io.vertx` group but retains two Quarkus dependencies in the `io.quarkus` group, `quarkus-vertx-http` and `quarkus-qute`, and adds several more Quarkus dependencies."
msgstr "与上文 <<vertx-oidc-quarkus>> 部分的 pom.xml 相比，该 pom.xml 不再包含 `io.vertx` 组中的依赖项，但保留了 `io.quarkus` 组中的两个 Quarkus 依赖项 `quarkus-vertx-http` 和 `quarkus-qute` ，并增加了几个 Quarkus 依赖项。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid ""
"The `quarkus-oidc` extension is used to protect the secured endpoint and manage the GitHub OAuth2 authentication.\n"
"The `quarkus-rest` extension is used to support JAX-RS REST endpoints, while the `quarkus-rest-qute` extension makes it easier to render Qute templates with JAX-RS."
msgstr "`quarkus-oidc` 扩展用于保护安全端点和管理 GitHub OAuth2 身份验证。 `quarkus-rest` 扩展用于支持 JAX-RS REST 端点，而 `quarkus-rest-qute` 扩展则能让使用 JAX-RS 渲染 Qute 模板变得更容易。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "The `quarkus-rest-client-oidc-token-propagation` extension supports an easy access token propagation with the REST client, and the `quarkus-rest-client-jackson` helps to convert REST client responses in JSON format to Java beans and records with Jackson."
msgstr "`quarkus-rest-client-oidc-token-propagation` 扩展支持通过 REST 客户端轻松传播访问令牌，而 `quarkus-rest-client-jackson` 则有助于将 JSON 格式的 REST 客户端响应转换为 Java Bean 和 Jackson 记录。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "The `GitHubProfileService` has now become a JAX-RS REST class:"
msgstr "`GitHubProfileService` 现在已成为 JAX-RS REST 类："

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Require an authenticated access to the `/protected` endpoint."
msgstr "要求通过验证访问 `/protected` 端点。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Inject GitHub specific UserInfo representation."
msgstr "注入 GitHub 特定的 UserInfo 表示法。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Inject GitHub API REST client that is used to request user emails."
msgstr "注入用于请求用户电子邮件的 GitHub API REST 客户端。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Inject the current OIDC session."
msgstr "注入当前 OIDC 会话。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "JAX-RS method that returns a `userEmail` template instance to be rendered. You do not have to use `Uni` but since you are migrating from Vert.x, you are surely very comfortable with the reactive code supported by `Uni` in Quarkus."
msgstr "JAX-RS 方法，该方法会返回一个 `userEmail` 模板实例以供渲染。您不必使用 `Uni` ，但既然您是从 Vert.x 迁移过来的，您肯定对 Quarkus 中 `Uni` 支持的反应式代码非常熟悉。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Use the injected REST client to access GitHub API and request the private user emails"
msgstr "使用注入的 REST 客户端访问 GitHub API 并请求私人用户电子邮件"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "If the request to the GitHub API succeeded, initialize a template instance with the user email and the returned set of the private email addresses"
msgstr "如果向 GitHub API 的请求成功，则使用用户电子邮件和返回的私人电子邮件地址集初始化模板实例"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "If the request to the GitHub API failed, clear a session cookie by performing a local session logout and return HTTP 401 status."
msgstr "如果对 GitHub API 的请求失败，则通过执行本地会话注销清除会话 cookie，并返回 HTTP 401 状态。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "To acquire the private user emails, `GitHubApiClient` REST Client is used:"
msgstr "要获取私人用户的电子邮件，需要使用 `GitHubApiClient` REST 客户端："

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Register a REST client, use the `github-api-client` configuration key"
msgstr "注册 REST 客户端，使用 `github-api-client` 配置密钥"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Request the access token propagation."
msgstr "请求传播访问令牌。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Return a set of private emails. As in the previous example, you do not have to use `Uni` but having `Uni` aligns better with the JAX-RS method which calls this method and returns a `Uni` response in the `GitHubProfileService` JAX-RS resource above."
msgstr "返回一组私人电子邮件。在上一个示例中，您不必使用 `Uni` ，但在上述 `GitHubProfileService` JAX-RS 资源中，使用 `Uni` 与调用此方法并返回 `Uni` 响应的 JAX-RS 方法更匹配。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "The configuration in the `application.properties` looks like this:"
msgstr "`application.properties` 中的配置如下："

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Enable the Quarkus GitHub provider"
msgstr "启用 Quarkus GitHub 提供程序"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "By default, when the Quarkus GitHub provider acquires the access token, it sends the client id and secret as the encoded HTTP Authorization `Basic` scheme value. In some regions, GitHub may not support such an option, see the comment in the `application.properties` above how to enable a `client_secret_post` method instead, for the client id and secret be sent as form parameters."
msgstr "默认情况下，当 Quarkus GitHub 提供程序获取访问令牌时，会将客户端 id 和秘密作为编码后的 HTTP 授权 `Basic` 方案值发送。在某些地区，GitHub 可能不支持该选项，请参阅 `application.properties` 上文的注释，了解如何启用 `client_secret_post` 方法，将客户端 id 和秘密作为表单参数发送。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Declare a callback `/login` path."
msgstr "声明回调 `/login` 路径。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Restore the original `/protected` request path once the authorization code flow has been complete. You may recall that in the examples with Vert.x OIDC in the <<vertx-oidc-vertx>> and <<vertx-oidc-vertx>> sections, the original request path is restored by default, without users having to do anything at all. However, by default, Quarkus OIDC gives access to the callback resource, `but only after it has completed the authorization code flow`, see the next <<vertx-oidc-to-quarkus-oidc-custom-callback>> section for more details."
msgstr "授权代码流程完成后，恢复原来的 `/protected` 请求路径。你可能还记得，在 <<vertx-oidc-vertx>> 和 <<vertx-oidc-vertx>> 章节中使用 Vert.x OIDC 的示例中，默认情况下会恢复原来的请求路径，用户根本不需要做任何事情。不过，默认情况下，Quarkus OIDC 允许访问回调资源 `but only after it has completed the authorization code flow` ，详情请参阅下一节 <<vertx-oidc-to-quarkus-oidc-custom-callback>> 。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "In Quarkus security, the resource is secured if it is either annotated with one of the security annotations such as `@Authenticated` or its endpoint path is secured in the configured HTTP security policy. The `/login` callback resource is virtual - neither JAX-RS method nor an additional callback handler is allocated to process it, therefore it must be secured with the HTTP security policy configuration, for the Quarkus OIDC authentication mechanism to secure it."
msgstr "在 Quarkus 安全性中，如果资源注释了 `@Authenticated` 等安全注释之一，或者其端点路径在配置的 HTTP 安全策略中受到保护，那么该资源就是安全的。 `/login` 回调资源是虚拟的--既没有分配 JAX-RS 方法，也没有分配额外的回调处理程序来处理它，因此必须通过 HTTP 安全策略配置来确保它的安全，以便 Quarkus OIDC 身份验证机制确保它的安全。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Configure the `github-api-client` REST Client base URL."
msgstr "配置 `github-api-client` REST 客户端基本 URL。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Log REST Client request and response data."
msgstr "记录 REST 客户端请求和响应数据。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "The `index.html` Qute template in the `src/main/resources/META-INF/resources/` directory and the `userEmail.html` Qute template in the `src/main/templates` directory remain unchanged."
msgstr "`src/main/resources/META-INF/resources/` 目录中的 `index.html` Qute 模板和 `src/main/templates` 目录中的 `userEmail.html` Qute 模板保持不变。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Now, start the application in the dev mode with `mvn quarkus:dev`."
msgstr "现在，使用 `mvn quarkus:dev` 在开发模式下启动应用程序。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Go to `http://localhost:8080`, login to GitHub and get your GitHub account email(s) displayed."
msgstr "转到 `http://localhost:8080` ，登录 GitHub 并显示您的 GitHub 账户电子邮件。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "You were redirected by Quarkus OIDC to GitHub to login."
msgstr "您被 Quarkus OIDC 重定向到 GitHub 以登录。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "You were redirected by GitHub to the `http://localhost:8080/login` virtual callback handler, Quarkus OIDC completed the authorization code flow and acquired the GitHub access token."
msgstr "您已被 GitHub 重定向至 `http://localhost:8080/login` 虚拟回调处理程序，Quarkus OIDC 完成了授权代码流程并获取了 GitHub 访问令牌。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "You were redirected by Quarkus OIDC to the `original` request URL, `http://localhost:8080/protected`. The OIDC redirect query parameters such as `code` and `state` are also dropped during this final redirect."
msgstr "您被 Quarkus OIDC 重定向到 `original` 请求 URL、 `http://localhost:8080/protected` .OIDC 重定向查询参数（如 `code` 和 `state` ）也会在最终重定向过程中被删除。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Migrate to Quarkus OIDC with the custom callback method"
msgstr "使用自定义回调方法迁移到 Quarkus OIDC"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "When we worked with the first <<vertx-oidc-to-quarkus-oidc,Vertx OIDC to Quarkus OIDC migration example>>, we had to configure Quarkus OIDC to restore the original request URL, after the authorization code flow is complete."
msgstr "当我们使用第一个 xref:vertx-oidc-to-quarkus-oidc[从 Vertx OIDC 迁移到 Quarkus OIDC 的示例] 时，我们必须配置 Quarkus OIDC，以便在授权代码流完成后恢复原来的请求 URL。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "In this section, we are going to look at the alternative, default option, where a custom callback handler is called, but after Quarkus OIDC has completed the authorization code flow."
msgstr "在本节中，我们将讨论另一种默认选项，即在 Quarkus OIDC 完成授权代码流之后，调用自定义回调处理程序。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Typically, in production, users that must login are guided to the central login URL first, as opposed to them accessing random secured paths and expecting to be returned to the very same original request paths, likely missing the context available from the central login endpoint. Instead, once the user lands at the secured central login page, this page redirects users further according to the application flow."
msgstr "通常情况下，在生产过程中，必须登录的用户首先会被引导至中央登录 URL，而不是访问随机的安全路径，并期望返回到相同的原始请求路径，因为这样很可能会丢失中央登录端点提供的上下文。相反，一旦用户进入安全的中央登录页面，该页面就会根据应用流程进一步重定向用户。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "By nominating the central login endpoint as a callback URL, you have the authenticated users landing on this login endpoint once the authorization code flow is complete without requiring Quarkus OIDC to keep the original request URL as the authorization code flow state to be able to restore it, and also making it possible to secure the callback endpoints with the security annotations."
msgstr "通过指定中央登录端点作为回调 URL，一旦授权码流完成，您就可以让通过身份验证的用户登陆该登录端点，而无需 Quarkus OIDC 将原始请求 URL 保留为授权码流状态，以便能够还原它，同时还可以通过安全注释确保回调端点的安全。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Let's have a look at how it can be done."
msgstr "让我们来看看如何做到这一点。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "The dependencies remain the same as in <<vertx-oidc-to-quarkus-oidc>> section, but we add one more JAX-RS resource that manages a login callback:"
msgstr "依赖关系与 <<vertx-oidc-to-quarkus-oidc>> 部分相同，但我们增加了一个管理登录回调的 JAX-RS 资源："

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "`LoginService` is a secured callback handler which gets control once Quarkus OIDC completes the authorization code flow."
msgstr "`LoginService` 是一个安全的回调处理程序，一旦 Quarkus OIDC 完成授权代码流，它就会获得控制权。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Do whatever is required by the application once the authenticated users land on this page. In this case, they are redirected to the secured `/protected` resource. This `/protected` endpoint may be an internal endpoint. If the secured `/protected` endpoint is also publicly accessible and unauthenticated users try to access it, then they will still land on this `LoginService` page first after authenticating with GitHub, and be redirected to the `/protected` page next."
msgstr "一旦已通过身份验证的用户登录到该页面，应用程序就会执行所需的任何操作。在这种情况下，他们会被重定向到安全的 `/protected` 资源。 `/protected` 端点可能是一个内部端点。如果安全的 `/protected` 端点也是可公开访问的，且未经身份验证的用户试图访问该端点，那么他们在通过 GitHub 身份验证后仍将首先登陆 `LoginService` 页面，然后被重定向到 `/protected` 页面。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "`GitHubProfileService` and `GitHubApiClient` classes remain the same as in the <<vertx-oidc-to-quarkus-oidc>> section."
msgstr "`GitHubProfileService` 和 `GitHubApiClient` 类与 <<vertx-oidc-to-quarkus-oidc>> 部分的内容相同。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "The configuration looks much simpler now:"
msgstr "现在配置看起来简单多了："

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "You were redirected by Quarkus OIDC to GitHub to login"
msgstr "您已被 Quarkus OIDC 重定向至 GitHub 以登录"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "You were redirected by GitHub to the `http://localhost:8080/login` callback handler, but Quarkus OIDC completes the authorization code flow and acquires the GitHub access token first."
msgstr "您被 GitHub 重定向到了 `http://localhost:8080/login` 回调处理程序，但 Quarkus OIDC 会先完成授权代码流程并获取 GitHub 访问令牌。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Before the `/login` handler is given control, Quarkus OIDC removes the OIDC redirect `code` and `state` properties and redirects the user to the same `/login` endpoint - this is done to minimize a risk of these parameters remaining visible in the user browser if the applications returns an application error after completing the authorization code flow, with the `code` and `state` query parameters still present in the current browser view. If preferred, this final redirect can be disabled with `quarkus.oidc.authentication.remove-redirect-parameters=false`."
msgstr "在 `/login` 处理程序获得控制权之前，Quarkus OIDC 会移除 OIDC 重定向 `code` 和 `state` 属性，并将用户重定向到相同的 `/login` 端点--这样做是为了最大限度地降低风险：如果应用程序在完成授权代码流程后返回应用程序错误，而 `code` 和 `state` 查询参数仍然存在于当前浏览器视图中，那么这些参数在用户浏览器中仍然可见。如果愿意，可通过 `quarkus.oidc.authentication.remove-redirect-parameters=false` 禁用最后的重定向。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Enforce GitHub access token scope in Quarkus OIDC"
msgstr "在 Quarkus OIDC 中强制 GitHub 访问令牌范围"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Both the <<vertx-oidc-vertx>> and <<vertx-oidc-quarkus>> sections demonstrate how you can retrict access to the Vert.x OIDC application by enforcing that the GitHub access token has a `user:email` scope."
msgstr "<<vertx-oidc-vertx>> 和 <<vertx-oidc-quarkus>> 两个部分都演示了如何通过强制 GitHub 访问令牌具有 `user:email` 范围来限制对 Vert.x OIDC 应用程序的访问。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Also, in the <<vertx-oidc-vertx>> section, we also commented that GitHub access tokens are meant to be used to access GitHub API, and not the application that acquired them, and therefore enforcing a GitHub access token `user:email` scope was not necessary."
msgstr "此外，在 <<vertx-oidc-vertx>> 部分，我们还评论说，GitHub 访问令牌的目的是用于访问 GitHub API，而不是访问获取令牌的应用程序，因此没有必要强制 GitHub 访问令牌 `user:email` 范围。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "If you do wish to continue enforcing a GitHub access token `user:email` scope after migrating to Quarkus OIDC, you can do as follows."
msgstr "如果迁移到 Quarkus OIDC 后仍希望继续执行 GitHub 访问令牌 `user:email` 范围，可以按以下步骤操作。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "First, replace the `@Authenticated` annotation with `@PermissionsAllowed(\"user:email\")`, with the latter implying the former and requiring a user authentication too:"
msgstr "首先，用 `@PermissionsAllowed(\"user:email\")` 替换 `@Authenticated` 注释，后者意味着前者，也需要用户认证："

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "And add the following configuration property: `quarkus.oidc.roles.source=accesstoken`."
msgstr "并添加以下配置属性： `quarkus.oidc.roles.source=accesstoken` ."

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "The reason you have to add this property is because with the authorization code flow, Quarkus OIDC treats the ID token as the primary token that controls access to the application into where the user has logged in, it uses the access token to access downstream services as required by the application on behalf of the authenticated user who authorized the application to do it."
msgstr "必须添加此属性的原因是，在授权代码流中，Quarkus OIDC 将 ID 令牌视为控制访问应用程序的主要令牌，在用户登录的地方，它使用访问令牌代表授权应用程序的认证用户访问应用程序所需的下游服务。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "When Quarkus OIDC works with the pure OAuth2 providers such as GitHub, it generates an internal ID token to represent the user authentication. The GitHub access token is still meant to access GitHub API."
msgstr "当 Quarkus OIDC 与纯 OAuth2 提供商（如 GitHub）合作时，它会生成一个内部 ID 令牌来代表用户身份验证。GitHub 访问令牌仍用于访问 GitHub API。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "This is why you have to set `quarkus.oidc.roles.source=accesstoken`, when you prefer to use an access token acquired by the application during the authorizatuion code flow to access this very same application."
msgstr "这就是为什么在使用应用程序在授权代码流程中获取的访问令牌访问同一应用程序时，必须设置 `quarkus.oidc.roles.source=accesstoken` 的原因。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Session management in Vertx OIDC and Quarkus OIDC"
msgstr "Vertx OIDC 和 Quarkus OIDC 中的会话管理"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Vert.x OIDC is `stateful` and some users may assume that, therefore, Vert.x OIDC does not use cookies. It is not the case: it uses an opaque session cookie to track both the authorization code flow progress and the authenticated user session."
msgstr "Vert.x OIDC 是 `stateful` ，因此有些用户可能会认为 Vert.x OIDC 不使用 cookie。事实并非如此：它使用一个不透明的会话 cookie 来跟踪授权代码流的进度和经过验证的用户会话。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "When you run an application created in either the <<vertx-oidc-vertx>> or <<vertx-oidc-quarkus>> sections, you can use your browser's developer tools to observe that an opaque `vertx-web-session` session cookie is used to track the user session:"
msgstr "当您运行 <<vertx-oidc-vertx>> 或 <<vertx-oidc-quarkus>> 部分创建的应用程序时，您可以使用浏览器的开发工具观察到一个不透明的 `vertx-web-session` 会话 cookie 用于跟踪用户会话："

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "The state associated with the current user session is stored on the server."
msgstr "与当前用户会话相关的状态存储在服务器上。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Now, when you run an application created in either the <<vertx-oidc-to-quarkus-oidc>> or <<vertx-oidc-to-quarkus-oidc-custom-callback>> sections, you can observe that Quarkus OIDC also uses a `q_session` session cookie but it is significantly larger in size:"
msgstr "现在，当你运行在 <<vertx-oidc-to-quarkus-oidc>> 或 <<vertx-oidc-to-quarkus-oidc-custom-callback>> 部分创建的应用程序时，你可以观察到 Quarkus OIDC 也使用 `q_session` 会话 cookie，但它的大小要大得多："

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "It is due to the fact that Quarkus OIDC is `stateless` by default. It encrypts the user session details in the session cookie and no user session related content is stored on the server. This approach offers significantly higher WEB-scale level capabilities."
msgstr "这是因为 Quarkus OIDC 默认为 `stateless` 。它会在会话 cookie 中加密用户会话详情，服务器上不会存储与用户会话相关的内容。这种方法大大提高了 WEB 规模级别的能力。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Is it less secure than the `stateful` approach ? It is hard to give a precise answer. The `stateful` approach does not protect the session cookie, if the attacker gets hold of it, the secure access is compromised. Thefore, with either approach, using HTTPS and applying additional CORS and CSRF controls must be considered."
msgstr "它比 `stateful` 方法更不安全吗？很难给出准确的答案。 `stateful` 方法不保护会话 cookie，如果攻击者掌握了它，安全访问就会受到影响。因此，无论采用哪种方法，都必须考虑使用 HTTPS 和应用额外的 CORS 和 CSRF 控制。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "For the `stateless` approach, Quarkus allows users to configure a session cookie encryption key, fallbacks to the client secret and finally to a generated secure random key to apply a JSON Web Encryption (JWE) to encrypt a generated content encryption key with the symmetric `A256GCMKW` algorithm and the `A256GCM` algorithm to encrypt the actual session cookie content."
msgstr "对于 `stateless` 方法，Quarkus 允许用户配置会话 Cookie 加密密钥，回退到客户端秘密，最后到生成的安全随机密钥，以应用 JSON Web Encryption (JWE)，用对称 `A256GCMKW` 算法和 `A256GCM` 算法加密生成的内容加密密钥，以加密实际的会话 Cookie 内容。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "However, if you do prefer to continue following a stateful approach, you can easily achieve it with Quarkus OIDC."
msgstr "不过，如果您希望继续使用有状态方法，也可以通过 Quarkus OIDC 轻松实现。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "The session state that Quarkus OIDC keeps includes the ID, access and refresh tokens. Additionally, if the authorization code grant response returns the access token expiry and scope properties, then their values are also stored."
msgstr "Quarkus OIDC 保存的会话状态包括 ID、访问令牌和刷新令牌。此外，如果授权代码授予响应返回访问令牌到期和范围属性，那么它们的值也会被保存。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "To start with, you can register a custom `quarkus.oidc.TokenStateManager` and implement a required session state storage mechanism. For example, Quarkus OIDC does not ship an in-memory `TokenStateManager` because it does not really work after restarts or across multiple pods, but you can implement the one in order to start experimenting with the custom `TokenStateManager`."
msgstr "首先，你可以注册一个自定义的 `quarkus.oidc.TokenStateManager` ，并实现所需的会话状态存储机制。例如，Quarkus OIDC 并不提供内存中的 `TokenStateManager` ，因为它在重启后或跨多个 pod 时并不能真正发挥作用，但你可以实现一个内存中的 `TokenStateManager` ，以便开始尝试自定义 。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Additionally, Quarkus OIDC ships both a database-aware `TokenStateManager` that can integrate with most known databases and a Redis `TokenStateManager`. See the https://quarkus.io/guides/security-oidc-code-flow-authentication#handling-and-controlling-the-lifetime-of-authentication[section] for mor details."
msgstr "此外，Quarkus OIDC 还提供了可与大多数已知数据库集成的数据库感知 `TokenStateManager` 和 Redis `TokenStateManager` 。有关详细信息，请参阅 link:https://quarkus.io/guides/security-oidc-code-flow-authentication#handling-and-controlling-the-lifetime-of-authentication[本节] 。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Let's see how it works with the Redis `TokenStateManager`."
msgstr "让我们看看 Redis `TokenStateManager` 是如何工作的。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Update the pom.xml from either the <<vertx-oidc-to-quarkus-oidc>> or <<vertx-oidc-to-quarkus-oidc-custom-callback>> sections by adding this single dependency:"
msgstr "从 <<vertx-oidc-to-quarkus-oidc>> 或 <<vertx-oidc-to-quarkus-oidc-custom-callback>> 部分更新 pom.xml，添加此单个依赖项："

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "It is all that you need to do to start using the Redis `TokenStateManager`."
msgstr "这就是你开始使用 Redis `TokenStateManager` 所需要做的一切。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Clear the cookies in the browser, access the protected endpoint again and now you can observe an opaque `q_session` session cookie only:"
msgstr "清除浏览器中的 cookie，再次访问受保护的端点，现在你只能看到一个不透明的 `q_session` 会话 cookie："

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "You may also observe that Vert.x OIDC uses a session cookie to track the authorization code flow progress as well as the authenticated user's session."
msgstr "您可能还会注意到，Vert.x OIDC 使用会话 cookie 来跟踪授权代码流程的进度以及已验证用户的会话。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "On the other hand, Quarkus OIDC uses a dedicated `q_auth_<uuid>` state cookie while the authorization code flow is in progress and only creates a session cookie once the code flow is complete. The state cookie names are also unique allowing for a multi-tab authentication."
msgstr "另一方面，Quarkus OIDC 在授权代码流程进行时使用专用的 `q_auth_<uuid>` 状态 Cookie，只有在代码流程完成后才创建会话 Cookie。状态 Cookie 的名称也是唯一的，允许进行多标签验证。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Help with the migration"
msgstr "帮助迁移"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "If you are considering to migrate from Vert.x OIDC to Quarkus OIDC and have questions that may not have been answered in this guide, please https://quarkus.io/support/[reach out to the Quarkus team]."
msgstr "如果您正在考虑从 Vert.x OIDC 迁移到 Quarkus OIDC，并且有本指南中没有解答的问题，请 link:https://quarkus.io/support/[联系 Quarkus 团队] 。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Please also see the <<references>> for more information."
msgstr "更多信息，请参阅 <<references>> 。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "References"
msgstr "参考文献"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus 安全概述]"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "xref:security-oidc-code-flow-authentication.adoc[OpenID Connect authorization code flow authentication]."
msgstr "xref:security-oidc-code-flow-authentication.adoc[OpenID Connect 授权代码流验证] 。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "xref:security-oidc-bearer-token-authentication.adoc[OpenID Connect bearer access token authentication]."
msgstr "xref:security-oidc-bearer-token-authentication.adoc[OpenID Connect 承载访问令牌验证] 。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy]"
msgstr "xref:security-openid-connect-multitenancy.adoc[使用 OpenID Connect 多租户功能]"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "xref:security-oidc-expanded-configuration.adoc[Expanded OIDC Configuration Reference]"
msgstr "xref:security-oidc-expanded-configuration.adoc[扩展 OIDC 配置参考]"
