msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Simplified Hibernate ORM with Panache"
msgstr "简化的Hibernate ORM与Panache"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Hibernate ORM is the de facto Jakarta Persistence (formerly known as JPA) implementation and offers you the full breadth of an Object Relational Mapper.\n"
"It makes complex mappings possible, but it does not make simple and common mappings trivial.\n"
"Hibernate ORM with Panache focuses on making your entities trivial and fun to write in Quarkus."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "First: an example"
msgstr "第一：一个例子"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "What we're doing in Panache is to allow you to write your Hibernate ORM entities like this:"
msgstr "Panache允许这样编写Hibernate ORM实体："

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"You have noticed how much more compact and readable the code is?\n"
"Does this look interesting? Read on!"
msgstr "你有注意到代码的紧凑性和可读性大大提高了吗？看起来很有趣吧？请继续阅读!"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "the `list()` method might be surprising at first. It takes fragments of HQL (JP-QL) queries and contextualizes the rest. That makes for very concise but yet readable code."
msgstr " `list()` 方法一开始可能会让人吃惊。它只需要接收HQL（JP-QL）查询语句的片段，并对查询语句其余部分进行上下文推断处理。这使得代码非常简明，但也不失可读性。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"what was described above is essentially the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[active record pattern], sometimes just called the entity pattern.\n"
"Hibernate with Panache also allows for the use of the more classical link:https://martinfowler.com/eaaCatalog/repository.html[repository pattern] via `PanacheRepository`."
msgstr "上面所描述的编码模式本质上是 link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[Active Record模式] ，有时也称为实体模式。Panache也支持通过 `PanacheRepository` 使用更经典的 link:https://martinfowler.com/eaaCatalog/repository.html[Repository模式] 。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Solution"
msgstr "解决方案"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "The solution is located in the `hibernate-orm-panache-quickstart` link:{quickstarts-tree-url}/hibernate-orm-panache-quickstart[directory]."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Setting up and configuring Hibernate ORM with Panache"
msgstr "在Hibernate ORM中配置Panache "

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "To get started:"
msgstr "起步："

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "add your settings in `{config-file}`"
msgstr "在 `{config-file}` 中添加你的设置。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "annotate your entities with `@Entity`"
msgstr "给实体类增加 `@Entity` 注解"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "make your entities extend `PanacheEntity` (optional if you are using the repository pattern)"
msgstr "实体类改为继承 `PanacheEntity` 类（使用Repository模式时为可选操作）。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Follow the xref:hibernate-orm.adoc#setting-up-and-configuring-hibernate-orm[Hibernate set-up guide for all configuration]."
msgstr "按照 link:hibernate-orm.html#setting-up-and-configuring-hibernate-orm[Hibernate 设置指南] 进行其他配置。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "In your build file, add the following dependencies:"
msgstr "在你的项目构建文件中，添加以下依赖："

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "the Hibernate ORM with Panache extension"
msgstr "Hibernate ORM with Panache扩展"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "your JDBC driver extension (`quarkus-jdbc-postgresql`, `quarkus-jdbc-h2`, `quarkus-jdbc-mariadb`, ...)"
msgstr "JDBC驱动扩展 (如 `quarkus-jdbc-postgresql` , `quarkus-jdbc-h2` , `quarkus-jdbc-mariadb` , ...)"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Then add the relevant configuration properties in `{config-file}`."
msgstr "然后在 `{config-file}` 中添加相关的配置属性。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Solution 1: using the active record pattern"
msgstr "解决方案1：使用active record（活动记录）模式"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Defining your entity"
msgstr "定义你的实体"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"To define a Panache entity, simply extend `PanacheEntity`, annotate it with `@Entity` and add your\n"
"columns as public fields:"
msgstr "要定义一个Panache实体类，只需继承 `PanacheEntity` ，增加 `@Entity` 注解，并将数据库列作为公共字段添加到实体类："

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"You can put all your Jakarta Persistence column annotations on the public fields. If you need a field to not be persisted, use the\n"
"`@Transient` annotation on it. If you need to write accessors, you can:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"And thanks to our field access rewrite, when your users read `person.name` they will actually call your `getName()` accessor,\n"
"and similarly for field writes and the setter.\n"
"This allows for proper encapsulation at runtime as all fields calls will be replaced by the corresponding getter/setter calls."
msgstr "而且由于我们的字段访问重写，当你的用户读取 `person.name` ，他们实际上会调用你的 `getName()` 方法，类似的还有字段写入和设置器。这允许在运行时进行适当的封装，因为所有字段的调用都将被相应的getter/setter调用所取代。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Most useful operations"
msgstr "最有用的操作"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Once you have written your entity, here are the most common operations you will be able to perform:"
msgstr "编写实体后，可以执行以下最常见的操作："

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "All `list` methods have equivalent `stream` versions."
msgstr "所有 `list` 方法都有相对应的 `stream` 版本。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"The `stream` methods require a transaction to work. +\n"
"As they perform I/O operations, they should be closed via the `close()` method or via a try-with-resource to close the underlying `ResultSet`.\n"
"If not, you will see warnings from Agroal that will close the underlying `ResultSet` for you."
msgstr "`stream` 方法的运行需要事务。+ 由于这些stream开头的方法会执行I/O操作，所以应该通过 `close()` 方法或try-with-resource来关闭底层的 `ResultSet` 。否则你会看到来自Agroal的警告，它会为你关闭底层的 `ResultSet` 。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Adding entity methods"
msgstr "添加实体方法"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Add custom queries on your entities inside the entities themselves.\n"
"That way, you and your co-workers can find them easily, and queries are co-located with the object they operate on.\n"
"Adding them as static methods in your entity class is the Panache Active Record way."
msgstr "在实体本身内部的实体上添加自定义查询。这样，您和您的同事可以轻松找到它们，并且查询与他们操作的对象位于同一位置。将它们作为静态方法添加到实体类中是 Panache Active Record 方式。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Solution 2: using the repository pattern"
msgstr "解决方案2：使用资源库模式"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "When using the repository pattern, you can define your entities as regular Jakarta Persistence entities."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"If you don't want to bother defining getters/setters for your entities, you can make them extend `PanacheEntityBase` and\n"
"Quarkus will generate them for you. You can even extend `PanacheEntity` and take advantage of the default ID it provides."
msgstr "如果你不想自己定义实体的getter和setter方法，可以让实体类继承 `PanacheEntityBase` ，Quarkus将自动生成getter和setter方法。你也可以继承 `PanacheEntity` ，相比 `PanacheEntityBase` ，其优势是它还提供默认的ID字段。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Defining your repository"
msgstr "定义你的存储库"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"When using Repositories, you get the exact same convenient methods as with the active record pattern, injected in your Repository,\n"
"by making them implements `PanacheRepository`:"
msgstr "使用 Repository 模式时，通过实现 `PanacheRepository` 接口，你可以使用与Active Record模式下完全相同的便捷方法："

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"All the operations that are defined on `PanacheEntityBase` are available on your repository, so using it\n"
"is exactly the same as using the active record pattern, except you need to inject it:"
msgstr "`PanacheEntityBase` 中定义的所有方法都可以在你的Repository类上使用，所以它使用起来与Active Record模式完全一样，只是你需要注入Repository类的实例："

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Once you have written your repository, here are the most common operations you will be able to perform:"
msgstr "编写存储库后，您可以执行以下最常见的操作："

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "The `stream` methods require a transaction to work."
msgstr "`stream` 方法的运行需要事务。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"The rest of the documentation show usages based on the active record pattern only,\n"
"but keep in mind that they can be performed with the repository pattern as well.\n"
"The repository pattern examples have been omitted for brevity."
msgstr "其余的文档只展示了基于活动记录模式的用法，但请记住，这些用法也可以用资源库模式来执行。为了简洁起见，已省略存储库模式示例。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Writing a Jakarta REST resource"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "First, include one of the Quarkus REST (formerly RESTEasy Reactive) extensions to enable Jakarta REST endpoints, for example, add the `io.quarkus:quarkus-rest-jackson` dependency for Jakarta REST and JSON support."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Then, you can create the following resource to create/read/update/delete your Person entity:"
msgstr "然后，你可以创建以下资源来create/read/update/delete你的Person实体："

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Be careful to use the `@Transactional` annotation on the operations that modify the database,\n"
"you can add the annotation at the class level for simplicity purpose."
msgstr "请注意，在修改数据库的操作上需要使用 `@Transactional` 注解，为了简单起见，你可以给类添加这个注解。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "To make it easier to showcase some capabilities of Hibernate ORM with Panache on Quarkus with Dev mode, some test data should be inserted into the database by adding the following content to a new file named src/main/resources/import.sql:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "If you would like to initialize the DB when you start the Quarkus app in your production environment, add `quarkus.hibernate-orm.schema-management.strategy=drop-and-create` to the Quarkus startup options in addition to `import.sql`."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "After that, you can see the people list and add new person as followings:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "If you see the Person object as Person<1>, then the object has not been converted. In this case, add the dependency `quarkus-rest-jackson` in `pom.xml`."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Advanced Query"
msgstr "高级查询"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Paging"
msgstr "分页"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"You should only use `list` and `stream` methods if your table contains small enough data sets. For larger data\n"
"sets you can use the `find` method equivalents, which return a `PanacheQuery` on which you can do paging:"
msgstr "如果你的表数据量很小，你应该只用到 `list` 和 `stream` 方法。对于较大的数据集，你可以使用对应的 `find` 方法，它返回一个 `PanacheQuery` ，可以对其进行分页查询操作："

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "The `PanacheQuery` type has many other methods to deal with paging and returning streams."
msgstr "`PanacheQuery` 类型有许多其他方法来处理分页和返回流。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Using a range instead of pages"
msgstr "使用range而不是pages"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "`PanacheQuery` also allows range-based queries."
msgstr "`PanacheQuery` 也允许基于范围的查询。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"You cannot mix ranges and pages: if you use a range, all methods that depend on having a current page will throw an `UnsupportedOperationException`;\n"
"you can switch back to paging using `page(Page)` or `page(int, int)`."
msgstr "你不能混合使用ranges和pages：如果你使用range，所有依赖于拥有当前页面的方法将抛出一个 `UnsupportedOperationException` ；你可以使用 `page(Page)` 或 `page(int, int)` 切换回分页。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Sorting"
msgstr "排序"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "All methods accepting a query string also accept the following simplified query form:"
msgstr "所有接收查询字符串的方法也能接收以下简化形式的查询："

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "But these methods also accept an optional `Sort` parameter, which allows you to abstract your sorting:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "The `Sort` class has plenty of methods for adding columns and specifying sort direction or the null precedence."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Simplified queries"
msgstr "简化查询"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Normally, HQL queries are of this form: `from EntityName [where ...] [order by ...]`, with optional elements\n"
"at the end."
msgstr "通常情况下，HQL查询语句是这种形式： `from EntityName [where ...​] [order by ...​]` ，结尾处有可选元素。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "If your select query does not start with `from`, `select` or `with`, we support the following additional forms:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "`order by ...` which will expand to `from EntityName order by ...`"
msgstr "`order by ...` 语句会被扩展为： `from EntityName order by ...` "

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "`<singleAttribute>` (and single parameter) which will expand to `from EntityName where <singleAttribute> = ?`"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "`where <query>` will expand to `from EntityName where <query>`"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "`<query>` will expand to `from EntityName where <query>`"
msgstr "`<query>` 语句会被扩展为： `from EntityName where <query>` "

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "If your update query does not start with `update`, we support the following additional forms:"
msgstr "如果你的更新语句不是以 `update` 开始，我们还支持以下的形式："

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "`from EntityName ...` which will expand to `update EntityName ...`"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "`set? <singleAttribute>` (and single parameter) which will expand to `update EntityName set <singleAttribute> = ?`"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "`set? <update-query>` will expand to `update EntityName set <update-query>`"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "If your delete query does not start with `delete`, we support the following additional forms:"
msgstr "如果你的删除语句不是以 `delete` 开始，我们还支持以下的形式："

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "`from EntityName ...` which will expand to `delete from EntityName ...`"
msgstr "`from EntityName ...​` 语句会被扩展为： `delete from EntityName ...​` "

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "`<singleAttribute>` (and single parameter) which will expand to `delete from EntityName where <singleAttribute> = ?`"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "`<query>` will expand to `delete from EntityName where <query>`"
msgstr "`<query>` 语句会被扩展为： `delete from EntityName where <query>` "

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"You can also write your queries in plain\n"
"link:{hibernate-orm-docs-url}#hql[HQL]:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Named queries"
msgstr "命名查询"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "You can reference a named query instead of a (simplified) HQL query by prefixing its name with the '#' character. You can also use named queries for count, update and delete queries."
msgstr "除了上述的简化HQL查询以外，你还可以定义一个命名查询，然后通过'#'字符加命名来（在HQL中）引用它。在计数、更新和删除查询中也可以使用命名查询。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Named queries can only be defined inside your Jakarta Persistence entity classes,\n"
"or on one of their super classes."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Query parameters"
msgstr "查询参数"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "You can pass query parameters by index (1-based) as shown below:"
msgstr "你可以通过索引（从1开始）传递查询参数，如下所示："

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Or by name using a `Map`:"
msgstr "或者使用 `Map` ，按名字来命名："

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Or using the convenience class `Parameters` either as is or to build a `Map`:"
msgstr "或者使用方便的类 `Parameters` ，既可以是原样，也可以是建立一个 `Map` 。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Every query operation accepts passing parameters by index (`Object...`), or by name (`Map<String,Object>` or `Parameters`)."
msgstr "每个查询操作都接受按索引（ `Object...` ）或按名称（ `Map<String,Object>` 或 `Parameters` ）传递参数。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Query projection"
msgstr "查询映射"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Query projection can be done with the `project(Class)` method on the `PanacheQuery` object that is returned by the `find()` methods."
msgstr "查询映射可以使用 `find()` 方法返回的 `PanacheQuery` 对象上的 `project(Class)` 方法来完成。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "You can use it to restrict which fields will be returned by the database."
msgstr "你可以用投影限制数据库返回哪些字段。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Hibernate will use **DTO projection** and generate a SELECT clause with the attributes from the projection class.\n"
"This is also called **dynamic instantiation** or **constructor expression**, more info can be found on the Hibernate guide:\n"
"link:{hibernate-orm-docs-url}#hql-select-clause[hql select clause]"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"The projection class needs to have a constructor that contains all its attributes, this constructor will be used to\n"
"instantiate the projection DTO instead of using the entity class. This class must have a matching constructor with all the class attributes as parameters."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation. More details about the `@RegisterForReflection` annotation can be found on  the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr "`@RegisterForReflection` 注解用于指导Quarkus在native编译过程中保留该类和其成员。关于 `@RegisterForReflection` 注解的更多细节可以在 link:writing-native-applications-tips.html#registerForReflection[native应用程序提示] 页面找到。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "We use public fields here, but you can use private fields and getters/setters if you prefer."
msgstr "在这里我们使用public的字段，你也可以使用private字段和对应的getter/setter方法。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "This constructor will be used by Hibernate, it must be the only constructor in your class and have all the class attributes as parameters."
msgstr "Hibernate会用到这个构造方法，它必须是类中唯一的构造函数，并且包含所有类属性作为参数。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"The implementation of the `project(Class)` method uses the constructor's parameter names to build the select clause of the query,\n"
"so the compiler must be configured to store parameter names inside the compiled class.\n"
"This is enabled by default if you are using the Quarkus Maven archetype. If you are not using it, add the property `<maven.compiler.parameters>true</maven.compiler.parameters>` to your `pom.xml`."
msgstr "在 `project(Class)` 方法的实现中，使用构造函数的参数名来构建查询的select子句，所以编译器必须配置为在编译的类中保留参数名。如果是使用Quarkus Maven archetype创建的项目，该功能默认是启用的。如果你没有使用，请在你的 `pom.xml` 中添加该属性 `<maven.compiler.parameters>true</maven.compiler.parameters>` 。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "If you run Java 17+, records are a good fit for projection classes."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "If in the DTO projection object you have a field from a referenced entity, you can use the `@ProjectedFieldName` annotation to provide the path for the SELECT statement."
msgstr "如果DTO投影对象中有来自引用的实体字段，可以使用 `@ProjectedFieldName` 注解指定SELECT语句使用的查询路径。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "The `ownerName` DTO constructor's parameter will be loaded from the `owner.name` HQL property."
msgstr "DTO构造器的 `ownerName` 参数将从 `owner.name` HQL属性加载。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "In case you want to project an entity in a class with nested classes, you can use the `@NestedProjectedClass` annotation on those nested classes."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"This annotation can be used when you want to project `@Embedded` entity or `@ManyToOne`, `@OneToOne` relation.\n"
"It does not support `@OneToMany` or `@ManyToMany` relation."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"It is also possible to specify a HQL query with a select clause. In this case, the projection class must have a constructor\n"
"matching the values returned by the select clause:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Hibernate ORM will use this constructor. When the query has a select clause, it is possible to have multiple constructors."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "It is not possible to have a HQL `select new` query and `.project(Class)` at the same time - you need to pick one approach."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "For example, this will fail:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Multiple Persistence Units"
msgstr "多个持久化单元"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "The support for multiple persistence units is described in detail in xref:hibernate-orm.adoc#multiple-persistence-units[the Hibernate ORM guide]."
msgstr "在 link:hibernate-orm.html#multiple-persistence-units[Hibernate ORM指南] 中对多个持久化单元的支持有详细描述。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "When using Panache, things are simple:"
msgstr "使用Panache时，事情很简单："

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "A given Panache entity can be attached to only a single persistence unit."
msgstr "一个Panache实体类只能配置到一个持久化单元。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Given that, Panache already provides the necessary plumbing to transparently find the appropriate `EntityManager` associated to a Panache entity."
msgstr "鉴于此，Panache已经提供了必要的管道， 可以透明地找到Panache实体类对应的 `EntityManager` 。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Transactions"
msgstr "事务"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Make sure to wrap methods modifying your database (e.g. `entity.persist()`) within a transaction. Marking a\n"
"CDI bean method `@Transactional` will do that for you and make that method a transaction boundary. We recommend doing\n"
"so at your application entry point boundaries like your REST endpoint controllers."
msgstr "请确保修改数据库的方法（例如： `entity.persist()` ）处于同一个事务中。给一个CDI bean方法增加 `@Transactional` 注解，可以确保该方法即事务边界。我们建议在应用端点的边界这样做，比如REST端点的Controller。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Hibernate ORM batches changes you make to your entities and sends changes (it is called flush) at the end of the transaction or before a query.\n"
"This is usually a good thing as it is more efficient.\n"
"But if you want to check optimistic locking failures, do object validation right away or generally want to get immediate feedback, you can force the flush operation by calling `entity.flush()` or even use `entity.persistAndFlush()` to make it a single method call. This will allow you to catch any `PersistenceException` that could occur when Hibernate ORM sends those changes to the database.\n"
"Remember, this is less efficient so don't abuse it.\n"
"And your transaction still has to be committed."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Here is an example of the usage of the flush method to allow making a specific action in case of `PersistenceException`:"
msgstr "下面是一个使用 flush 方法的例子，它在捕获到 `PersistenceException` 异常时执行指定操作："

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Lock management"
msgstr "锁管理"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Panache provides direct support for database locking with your entity/repository, using `findById(Object, LockModeType)` or `find().withLock(LockModeType)`."
msgstr "Panache支持在实体类/Repository类中直接使用数据库的锁，可使用 `findById(Object, LockModeType)` 或 `find().withLock(LockModeType)` 方法。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "The following examples are for the active record pattern, but the same can be used with repositories."
msgstr "下面的例子是针对Active Record模式的，但同样可以应用于Repository模式。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "First: Locking using findById()."
msgstr "第一：通过findById()方法使用数据库锁。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Second: Locking in a find()."
msgstr "第二：通过find()方法使用数据库锁。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Be careful that locks are released when the transaction ends, so the method that invokes the lock query must be annotated with the `@Transactional` annotation."
msgstr "请注意，事务结束时锁会被释放，所以调用了带锁查询的方法必须加上 `@Transactional` 注解。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Custom IDs"
msgstr "自定义ID"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"IDs are often a touchy subject, and not everyone's up for letting them handled by the framework, once again we\n"
"have you covered."
msgstr "ID往往是一个敏感的话题，并不是所有人都愿意让框架来处理，因此我们提供了相应的配置。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"You can specify your own ID strategy by extending `PanacheEntityBase` instead of `PanacheEntity`. Then\n"
"you just declare whatever ID you want as a public field:"
msgstr "你可以通过继承 `PanacheEntityBase` ，而非 `PanacheEntity` ，来指定你自己的ID策略。然后只要把你想要的ID字段声明为public字段："

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"If you're using repositories, then you will want to extend `PanacheRepositoryBase` instead of `PanacheRepository`\n"
"and specify your ID type as an extra type parameter:"
msgstr "如果你使用Repository模式，那么要继承 `PanacheRepositoryBase` ，而非 `PanacheRepository` ，并将ID字段类型作为额外的类型参数："

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Mocking"
msgstr "Mock模拟测试"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Using the active record pattern"
msgstr "使用Active Record模式"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"If you are using the active record pattern you cannot use Mockito directly as it does not support mocking static methods,\n"
"but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static\n"
"methods, including your own."
msgstr "如果你使用了Active Record模式，那么不能直接使用Mockito，因为它不支持Mock静态方法。你可以使用 `quarkus-panache-mock` 模块，它允许你使用Mockito来模拟所有静态方法，包括你自己编写的。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Add this dependency to your `pom.xml`:"
msgstr "将此依赖添加到你的 `pom.xml` 中 ："

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Given this simple entity:"
msgstr "提供这个简单的实体："

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "You can write your mocking test like this:"
msgstr "你可以像这样写你的模拟测试。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Be sure to call your `verify` and `do*` methods on `PanacheMock` rather than `Mockito`, otherwise you won't know\n"
"what mock object to pass."
msgstr "请确保是在 `PanacheMock` 上调用 `verify` 和 `do*` 方法，而不是在 `Mockito` 上调用，否则无法传递mock对象。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Mocking `EntityManager`, `Session` and entity instance methods"
msgstr "模拟 `EntityManager` , `Session` 及实体类的实例方法"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "If you need to mock entity instance methods, such as `persist()` you can do it by mocking the Hibernate ORM `Session` object:"
msgstr "如果你需要模拟实体类的实例方法，比如 `persist()` ，可以通过模拟Hibernate ORM的 `Session` 对象来实现："

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Using the repository pattern"
msgstr "使用资源库模式"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"If you are using the repository pattern you can use Mockito directly, using the `quarkus-junit5-mockito` module,\n"
"which makes mocking beans much easier:"
msgstr "如果你使用存储库模式，你可以直接使用Mockito，使用 `quarkus-junit5-mockito` 模块，这使得模拟Bean变得更加容易："

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "And this repository:"
msgstr "还有这个储存库："

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "How and why we simplify Hibernate ORM mappings"
msgstr "我们为什么简化Hibernate ORM映射？怎么做到的？"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"When it comes to writing Hibernate ORM entities, there are a number of annoying things that users have grown used to\n"
"reluctantly deal with, such as:"
msgstr "在编写Hibernate ORM实体类时，用户已经习惯了被迫处理许多烦人的事情，例如："

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Duplicating ID logic: most entities need an ID, most people don't care how it is set, because it is not really\n"
"relevant to your model."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Traditional EE patterns advise to split entity definition (the model) from the operations you can do on them\n"
"(DAOs, Repositories), but really that requires a split between the state and its operations even though\n"
"we would never do something like that for regular objects in the Object-Oriented architecture, where state and methods\n"
"are in the same class. Moreover, this requires two classes per entity, and requires injection of the DAO or Repository\n"
"where you need to do entity operations, which breaks your edit flow and requires you to get out of the code you're\n"
"writing to set up an injection point before coming back to use it."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Hibernate queries are super powerful, but overly verbose for common operations, requiring you to write queries even\n"
"when you don't need all the parts."
msgstr "Hibernate查询功能很强大，但对于普通操作来说过于冗长，即使是简单操作也要求写完整的HQL语句。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Hibernate is very general-purpose, but does not make it trivial to do trivial operations that make up 90% of our\n"
"model usage."
msgstr "Hibernate很通用，但对于模型里90%的琐碎操作，编写起来并不简单。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "With Panache, we took an opinionated approach to tackle all these problems:"
msgstr "通过Panache，我们采取了一种有主见的方法来解决所有这些问题："

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Make your entities extend `PanacheEntity`: it has an ID field that is auto-generated. If you require\n"
"a custom ID strategy, you can extend `PanacheEntityBase` instead and handle the ID yourself."
msgstr "让你的实体类继承 `PanacheEntity` ：它有一个自动生成的ID字段。如果你需要自定义ID策略，可以继承 `PanacheEntityBase` ，而不用自己处理ID。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Use public fields. Get rid of dumb getter and setters. Hibernate ORM w/o Panache also doesn't require you to use getters and setters,\n"
"but Panache will additionally generate all getters and setters that are missing, and rewrite every access to these fields to use the accessor methods. This way you can still\n"
"write _useful_ accessors when you need them, which will be used even though your entity users still use field accesses. This implies that from the Hibernate perspective you're using accessors via getters and setters even while it looks like field accessors."
msgstr "使用public字段，抛开愚蠢的getter和setter方法。Hibernate ORM Panache不要求你使用getter和setter方法，但Panache会额外生成所有缺失的getter和setter方法，并将所有对这些字段的访问重写为getter/setter方法的调用。这样，当你需要的时候，仍可以编写 _有用的_ 访问器，即使实体类的调用者仍然使用字段访问，实际也会使用这些访问器。这意味着从Hibernate的角度来看，你正在通过getter和setter方法使用访问器，即使代码看起来像字段访问器。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"With the active record pattern: put all your entity logic in static methods in your entity class and don't create DAOs.\n"
"Your entity superclass comes with lots of super useful static methods, and you can add your own in your entity class.\n"
"Users can just start using your entity `Person` by typing `Person.` and getting completion for all the operations in a single place."
msgstr "使用活动记录模式：把你所有的实体逻辑放在实体类的静态方法中，不要创建DAO。你的实体超类带有很多超级有用的静态方法，你也可以在你的实体类中添加你自己的静态方法。用户可以通过输入 `Person.` ，开始使用你的实体 `Person` ，并在一个地方获得所有操作的完成。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Don't write parts of the query that you don't need: write `Person.find(\"order by name\")` or\n"
"`Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive)` or even better\n"
"`Person.find(\"name\", \"stef\")`."
msgstr "不要写多余的查询语句：可以写 `Person.find(\"order by name\")` 或 `Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive)` ，甚至更好的 `Person.find(\"name\", \"stef\")` 。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "That's all there is to it: with Panache, Hibernate ORM has never looked so trim and neat."
msgstr "以上就是它的全部内容：有了Panache，Hibernate ORM看起来变得如此轻量和整洁。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Defining entities in external projects or jars"
msgstr "在外部项目或jar中定义实体"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Hibernate ORM with Panache in Quarkus relies on compile-time bytecode enhancements to your entities. If you define your entities in the\n"
"same project where you build your Quarkus application, everything will work fine."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"If the entities come from external projects\n"
"or jars, you can make sure that your jar is treated like a Quarkus application library by adding an empty `META-INF/beans.xml` file."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "This will allow Quarkus to index and enhance your entities as if they were inside the current project."
msgstr ""
