# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.11/guides/vault.adoc:6
#, no-wrap
msgid "Quarkus - Using HashiCorp Vault"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:21
msgid "https://www.vaultproject.io/[HashiCorp Vault] is a multi-purpose tool aiming at protecting sensitive data, such as credentials, certificates, access tokens, encryption keys, ... In the context of Quarkus, several use cases are supported:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:24
msgid "mounting a map of properties stored into the https://www.vaultproject.io/docs/secrets/kv/index.html[Vault kv secret engine] as an Eclipse MicroProfile config source"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:25
msgid "fetching credentials from Vault when configuring an Agroal datasource, as documented in the {vault-datasource-guide}"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:26
msgid "accessing Vault _kv secret engine_ programmatically"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:27
msgid "support for the https://www.vaultproject.io/docs/secrets/totp[TOTP Secret Engine]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:29
msgid "support for the https://www.vaultproject.io/docs/secrets/transit[Transit Secret Engine] as documented in the {vault-transit-guide}"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:30
msgid "support for several authentication methods as documented in the {vault-auth-guide}"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:33
msgid "Under the hood, the Quarkus Vault extension takes care of authentication when negotiating a client Vault token plus any transparent token or lease renewals according to _ttl_ and _max-ttl._"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/vault.adoc:36
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:39
msgid "To complete this guide, you need:"
msgstr "要完成这个指南，你需要："

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:41
msgid "roughly 20 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:42
msgid "an IDE"
msgstr "一个编辑器"

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:43
msgid "JDK 1.8+ installed with `JAVA_HOME` configured appropriately"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:44
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:45
msgid "Docker installed"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/vault.adoc:46
#, no-wrap
msgid "Starting Vault"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:49
msgid "Let's start Vault in development mode:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:53
#, no-wrap
msgid "docker run --rm --cap-add=IPC_LOCK -e VAULT_ADDR=http://localhost:8200 -p 8200:8200 -d --name=dev-vault vault:{vault-version}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:56
msgid "You can check that vault is running with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:59
#, no-wrap
msgid "docker logs dev-vault\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:62
#: upstream/_versions/1.11/guides/vault.adoc:198
#: upstream/_versions/1.11/guides/vault.adoc:226
#: upstream/_versions/1.11/guides/vault.adoc:320
#: upstream/_versions/1.11/guides/vault.adoc:363
msgid "You should see:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:66
#, no-wrap
msgid "==> Vault server configuration:\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:75
#, no-wrap
msgid ""
"             Api Address: http://0.0.0.0:8200\n"
"                     Cgo: disabled\n"
"         Cluster Address: https://0.0.0.0:8201\n"
"              Listener 1: tcp (addr: \"0.0.0.0:8200\", cluster address: \"0.0.0.0:8201\", max_request_duration: \"1m30s\", max_request_size: \"33554432\", tls: \"disabled\")\n"
"               Log Level: info\n"
"                   Mlock: supported: true, enabled: false\n"
"                 Storage: inmem\n"
"                 Version: Vault v{vault-version}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:79
#, no-wrap
msgid ""
"WARNING! dev mode is enabled! In this mode, Vault runs entirely in-memory\n"
"and starts unsealed with a single unseal key. The root token is already\n"
"authenticated to the CLI, so you can immediately begin using Vault.\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:81
#, no-wrap
msgid "You may need to set the following environment variable:\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:83
#, no-wrap
msgid "    $ export VAULT_ADDR='http://0.0.0.0:8200'\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:86
#, no-wrap
msgid ""
"The unseal key and root token are displayed below in case you want to\n"
"seal/unseal the Vault or re-authenticate.\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:89
#, no-wrap
msgid ""
"Unseal Key: 0lZ2/vzpa92pH8gersSn2h9b5tmzd4m5sqIdMC/4PDs=\n"
"Root Token: {root-token}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:91
#, no-wrap
msgid "Development mode should NOT be used in production installations!\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:93
#, no-wrap
msgid "==> Vault server started! Log data will stream in below:\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:96
msgid "In development mode, Vault gets configured with several options that makes it convenient:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:99
msgid "Vault is already initialized with one key share (whereas in normal mode this has to be done explicitly and the number of key shares is 5 by default)"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:101
msgid "the unseal key and the root token are displayed in the logs (please write down the root token, we will need it in the following step)"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:102
msgid "Vault is unsealed"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:103
msgid "in-memory storage"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:104
msgid "TLS is disabled"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:105
msgid "a _kv secret engine v2_ is mounted at `secret/`"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/vault.adoc:111
msgid "By default Quarkus assumes that a _kv secret engine_ in version *2* mounted at path `secret/` will be used.  If that is not the case, please use properties `quarkus.vault.kv-secret-engine-version` and `quarkus.vault.kv-secret-engine-mount-path` accordingly."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:115
msgid "In the following step, we are going to add a `userpass` authentication that we will use from the Quarkus application, to access a secret stored in the _kv secret engine_."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:117
msgid "First open a shell inside the vault container:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:121
#, no-wrap
msgid "docker exec -it dev-vault sh\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:124
msgid "Set the `VAULT_TOKEN` with the value that was printed in the logs:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:128
#, no-wrap
msgid "export VAULT_TOKEN={root-token}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:131
msgid "You can check Vault's status using the CLI command `vault status`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:145
#, no-wrap
msgid ""
"Key             Value\n"
"---             -----\n"
"Seal Type       shamir\n"
"Initialized     true\n"
"Sealed          false\n"
"Total Shares    1\n"
"Threshold       1\n"
"Version         1.6.0\n"
"Cluster Name    vault-cluster-b07e80d8\n"
"Cluster ID      55bd74b6-eaaf-3862-f7ce-3473ab86c57f\n"
"HA Enabled      false\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:148
msgid "Now let's add a secret configuration for our application:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:152
#, no-wrap
msgid "vault kv put secret/myapps/vault-quickstart/config a-private-key=123456\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:155
msgid "We have defined a path `secret/myapps/vault-quickstart` in Vault that we need to give access to from the Quarkus application."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:157
msgid "Create a policy that gives read access to `secret/myapps/vault-quickstart` and subpaths:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:165
#, no-wrap
msgid ""
"cat <<EOF | vault policy write vault-quickstart-policy -\n"
"path \"secret/data/myapps/vault-quickstart/*\" {\n"
"  capabilities = [\"read\"]\n"
"}\n"
"EOF\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/vault.adoc:175
msgid "When using a _kv secret engine version 2_, secrets are written and fetched at path `<mount>/*data*/<secret-path>` as opposed to `<mount>/<secret-path>` in a _kv secret engine version 1_.  It does not change any of the CLI commands (i.e. you do not specify `data` in your path).  However it does change the policies, since capabilities are applied to the real path. In the example above, the path is `secret/*data*/myapps/vault-quickstart/\\*` since we are working with a _kv secret engine version 2_.  It would be `secret/myapps/vault-quickstart/*` with a _kv secret engine version 1_."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:178
msgid "And finally, let's enable the _userpass auth secret engine_, and create user `bob` with access to the `vault-quickstart-policy`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:183
#, no-wrap
msgid ""
"vault auth enable userpass\n"
"vault write auth/userpass/users/bob password=sinclair policies=vault-quickstart-policy\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/vault.adoc:188
msgid "Quarkus supports additional Vault Authentication methods. Check the {vault-auth-guide} for details."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:191
msgid "To check that the configuration is correct, try logging in:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:195
#, no-wrap
msgid "vault login -method=userpass username=bob password=sinclair\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:204
#, no-wrap
msgid ""
"Success! You are now authenticated. The token information displayed below\n"
"is already stored in the token helper. You do NOT need to run \"vault login\"\n"
"again. Future Vault requests will automatically use this token.\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:215
#, no-wrap
msgid ""
"Key                    Value\n"
"---                    -----\n"
"token                  {client-token}\n"
"token_accessor         OKNipTAgxWbxsrjixASNiwdY\n"
"token_duration         768h\n"
"token_renewable        true\n"
"token_policies         [\"default\" \"vault-quickstart-policy\"]\n"
"identity_policies      []\n"
"policies               [\"default\" \"vault-quickstart-policy\"]\n"
"token_meta_username    bob\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:218
msgid "Now set `VAULT_TOKEN` to the `token` above (instead of the root token), and try reading the vault-quickstart secret config:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:223
#, no-wrap
msgid ""
"export VAULT_TOKEN={client-token}\n"
"vault kv get secret/myapps/vault-quickstart/config\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:233
#, no-wrap
msgid ""
"======== Data ========\n"
"Key              Value\n"
"---              -----\n"
"a-private-key    123456\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/vault.adoc:235
#, no-wrap
msgid "Create a Quarkus application with a secret configuration"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:246
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=vault-quickstart \\\n"
"    -DclassName=\"org.acme.quickstart.GreetingResource\" \\\n"
"    -Dpath=\"/hello\" \\\n"
"    -Dextensions=\"resteasy,vault\"\n"
"cd vault-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:250
msgid "If you already have your Quarkus project configured, you can add the `vault` extension to your project by running the following command in your project base directory:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:254
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"vault\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:257
msgid "This will add the following to your `pom.xml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:264
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-vault</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:267
msgid "Configure access to Vault from the `{config-file}`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:272
#, no-wrap
msgid ""
"# vault url\n"
"quarkus.vault.url=http://localhost:8200\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:276
#, no-wrap
msgid ""
"# vault authentication\n"
"quarkus.vault.authentication.userpass.username=bob\n"
"quarkus.vault.authentication.userpass.password=sinclair\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:279
#, no-wrap
msgid ""
"# path within the kv secret engine where is located the vault-quickstart secret configuration\n"
"quarkus.vault.secret-config-kv-path=myapps/vault-quickstart/config\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:282
msgid "This should mount whatever keys are stored in `secret/myapps/vault-quickstart` as MicroProfile Config properties."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:284
msgid "Let's verify that by adding a new endpoint in GreetingResource:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:289
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class GreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:292
#, no-wrap
msgid ""
"    @ConfigProperty(name = \"a-private-key\")\n"
"    String privateKey;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:294
#, no-wrap
msgid "    ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:302
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/private-key\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String privateKey() {\n"
"        return privateKey;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:305
msgid "Now compile the application and run it:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:310
#, no-wrap
msgid ""
"./mvnw clean install\n"
"java -jar target/vault-quickstart-1.0.0-SNAPSHOT-runner.jar\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:313
msgid "Finally test the new endpoint:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:317
#, no-wrap
msgid "curl http://localhost:8080/hello/private-key\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:324
#, no-wrap
msgid "123456\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/vault.adoc:326
#, no-wrap
msgid "Programmatic access to the KV secret engine"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:331
msgid "Sometimes secrets are retrieved from an arbitrary path that is known only at runtime through an application specific property, or a method argument for instance.  In that case it is possible to inject a Quarkus `VaultKVSecretEngine`, and retrieve secrets programmatically."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:333
msgid "For instance, in `GreetingResource`, add:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:338
#, no-wrap
msgid ""
"@Inject\n"
"VaultKVSecretEngine kvSecretEngine;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:340
#: upstream/_versions/1.11/guides/vault.adoc:468
#, no-wrap
msgid "...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:347
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/secrets/{vault-path}\")\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"public String getSecrets(@PathParam(\"vault-path\") String vaultPath) {\n"
"    return kvSecretEngine.readSecret(\"myapps/vault-quickstart/\" + vaultPath).toString();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:350
msgid "Add a new key in Vault:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:353
#, no-wrap
msgid "vault kv put secret/myapps/vault-quickstart/private mysecret=abc\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:356
msgid "Restart the application after rebuilding it, and test it with the new endpoint:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:360
#, no-wrap
msgid "curl http://localhost:8080/hello/secrets/private\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:366
#, no-wrap
msgid "{mysecret=abc}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/vault.adoc:369
#, no-wrap
msgid "TOTP Secrets Engine"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:372
msgid "The https://www.vaultproject.io/docs/secrets/totp/[Vault TOTP secrets engine] generates time-based credentials according to the TOTP standard."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:374
msgid "Vault TOTP supports both the generator scenario (like Google Authenticator) and the provider scenario (like the Google.com sign in)."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:376
msgid "The Vault extension integrates with the Vault TOTP secret engine by providing an `io.quarkus.vault.VaultTOTPSecretEngine` class."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:383
#, no-wrap
msgid ""
"import io.quarkus.vault.VaultTOTPSecretEngine;\n"
"import io.quarkus.vault.secrets.totp.CreateKeyParameters;\n"
"import io.quarkus.vault.secrets.totp.KeyConfiguration;\n"
"import io.quarkus.vault.secrets.totp.KeyDefinition;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:386
#, no-wrap
msgid ""
"@Inject\n"
"VaultTOTPSecretEngine vaultTOTPSecretEngine;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:389
#, no-wrap
msgid ""
"CreateKeyParameters createKeyParameters = new CreateKeyParameters(\"Google\", \"test@gmail.com\");\n"
"createKeyParameters.setPeriod(\"30m\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:391
#, no-wrap
msgid "/** Google Authentication logic */\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:394
#, no-wrap
msgid ""
"final Optional<KeyDefinition> myKey = vaultTOTPSecretEngine\n"
"                                            .createKey(\"my_key_2\", createKeyParameters); // <1> <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:396
#, no-wrap
msgid "final String keyCode = vaultTOTPSecretEngine.generateCode(\"my_key_2\"); // <3>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:398
#, no-wrap
msgid "/** Google Login logic */\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:400
#, no-wrap
msgid "boolean valid = vaultTOTPSecretEngine.validateCode(\"my_key_2\", keyCode); // <4>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:402
msgid "Create a key to generate codes."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:403
msgid "`KeyDefinition` class contains an embeddable base64 QR code that can be used by third-party code generators."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:404
msgid "Generates a code (not using third-party generator)."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:405
msgid "Validates that the code is valid."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/vault.adoc:406
#, no-wrap
msgid "Vault Health Check"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:410
msgid "If you are using the `quarkus-smallrye-health` extension, `quarkus-vault` can add a readiness health check to validate the connection to the Vault server. This is disabled by default."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:412
msgid "If enabled, when you access the `/q/health/ready` endpoint of your application you will have information about the connection validation status."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:414
msgid "This behavior can be enabled by setting the `quarkus.vault.health.enabled` property to `true` in your `application.properties`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:416
msgid "Only if Vault is initialized, unsealed and active, the health endpoint returns that Vault is ready to serve requests."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:418
msgid "You can change a bit this behaviour by using `quarkus.vault.health.stand-by-ok` and `quarkus.vault.health.performance-stand-by-ok` to `true` in your `application.properties`."
msgstr ""

#. type: Labeled list
#: upstream/_versions/1.11/guides/vault.adoc:419
#, no-wrap
msgid "stand-by-ok"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:420
msgid "Specifies if being a standby should still return the active status code instead of the standby status code."
msgstr ""

#. type: Labeled list
#: upstream/_versions/1.11/guides/vault.adoc:421
#, no-wrap
msgid "performance-stand-by-ok"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:422
msgid "Specifies if being a performance standby should still return the active status code instead of the performance standby status code."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:424
msgid "You can inject `io.quarkus.vault.VaultSystemBackendEngine` to run system operations programmatically."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:426
msgid "When the readiness probe is failing in Kubernetes, then the application is not reachable. This means that if Vault is failing, all services depending on Vault will become unreachable and maybe this is not the desired state, so use this flag according to your requirements."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/vault.adoc:427
#, no-wrap
msgid "TLS"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:430
msgid "In production mode, TLS should be activated between the Quarkus application and Vault to prevent _man-in-the-middle_ attacks."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:432
msgid "There are several ways to configure the Quarkus application:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:435
msgid "through the standard `javax.net.ssl.trustStore` system property, which should refer to a JKS truststore containing the trusted certificates"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:436
msgid "using property `quarkus.vault.tls.ca-cert`, which should refer to a pem encoded file."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:441
msgid "If `quarkus.vault.tls.ca-cert` is not set and the Quarkus application is using the Kubernetes authentication, TLS will be active and use the CA certificate bundle located in `/var/run/secrets/kubernetes.io/serviceaccount/ca.crt`.  If you want to disable this behavior (for instance when using a trust store), you need to set it explicitly using: `quarkus.vault.tls.use-kubernetes-ca-cert=false`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:445
msgid "The last relevant property is `quarkus.vault.tls.skip-verify`, which allows to communicate with Vault using TLS, but without checking the certificate authenticity. This may be convenient in development, but is strongly discouraged in production as it is not more secure than talking to Vault in plain HTTP."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/vault.adoc:446
#, no-wrap
msgid "Vault Provisioning"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:450
msgid "Beside the typical client use cases, the Quarkus extension can be used to provision Vault as well, for instance as part of a CD pipeline. Specific CDI beans and operations support this scenario:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:452
msgid "`VaultSystemBackendEngine`: create Vault Policies. See the https://www.vaultproject.io/api-docs/system/policy[Vault documentation]."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:453
msgid "`VaultKubernetesAuthService`. See the https://www.vaultproject.io/api-docs/auth/kubernetes[Vault documentation]."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:454
msgid "Configure the Kubernetes Auth Method (Kubernetes host, certificates, keys, ...)"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:455
msgid "Create Kubernetes Auth Roles (association between Kubernetes service accounts, Kubernetes namespaces and Vault policies)"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:456
msgid "`VaultTransitSecretEngine`: _CRUD_ operations on keys. See the https://www.vaultproject.io/api-docs/secret/transit[Vault documentation]."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:458
msgid "For instance:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:463
#, no-wrap
msgid ""
"@Inject\n"
"VaultSystemBackendEngine vaultSystemBackendEngine;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:466
#, no-wrap
msgid ""
"@Inject\n"
"VaultKubernetesAuthService vaultKubernetesAuthService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:474
#, no-wrap
msgid ""
"  String rules = \"path \\\"transit/*\\\" {\\n\" +\n"
"          \"  capabilities = [ \\\"create\\\", \\\"read\\\", \\\"update\\\" ]\\n\" +\n"
"          \"}\";\n"
"  String policyName = \"sys-test-policy\";\n"
"  vaultSystemBackendEngine.createUpdatePolicy(policyName, rules);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:479
#, no-wrap
msgid ""
"  String roleName = \"test-auth-k8s\";\n"
"  List<String> boundServiceAccountNames = asList(\"vault-auth\");\n"
"  List<String> boundServiceAccountNamespaces = asList(\"default\");\n"
"  List<String> tokenPolicies = asList(policyName);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:484
#, no-wrap
msgid ""
"  vaultKubernetesAuthService.createRole(roleName, new VaultKubernetesAuthRole()\n"
"          .setBoundServiceAccountNames(boundServiceAccountNames)\n"
"          .setBoundServiceAccountNamespaces(boundServiceAccountNamespaces)\n"
"          .setTokenPolicies(tokenPolicies));\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:488
msgid "Like any client, a provisioning program would have to authenticate using one of the supported Auth methods, and get the appropriate grants through one or more policies. Example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:495
#, no-wrap
msgid ""
"# create Policies\n"
"path \"sys/policy/*\" {\n"
"  capabilities = [\"read\", \"create\", \"update\", \"delete\"]\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault.adoc:500
#, no-wrap
msgid ""
"# create Kubernetes Auth Roles\n"
"path \"auth/kubernetes/role/*\" {\n"
"  capabilities = [\"read\", \"create\", \"update\", \"delete\"]\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:503
msgid "You should adjust to the minimal set of access rights depending on your specific use case."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/vault.adoc:504
#, no-wrap
msgid "Conclusion"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:508
msgid "As a general matter, you should consider reading the extensive https://www.vaultproject.io/docs/[Vault documentation] and apply best practices."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:512
msgid "The features exposed today through the Vault extension covers only a small fraction of what the product is capable of.  Still, it addresses already some of the most common microservices scenarii (e.g. sensitive configuration and database credentials), which goes a long way towards creating secured applications."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/vault.adoc:514
#, no-wrap
msgid "Configuration Reference"
msgstr "配置参考"

#. type: Title ==
#: upstream/_versions/1.11/guides/vault.adoc:518
#, no-wrap
msgid "References"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:521
msgid "https://www.vaultproject.io/[HashiCorp Vault]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault.adoc:521
msgid "link:security[Quarkus Security]"
msgstr ""
