# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:6
#, no-wrap
msgid "Quarkus - Using OpenID Connect and OAuth2 Client and Filters to manage access tokens"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:12
msgid "This guide explains how to use:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:13
msgid "`quarkus-oidc-client` and `quarkus-oidc-client-filter` extensions to acquire and refresh access tokens from OpenId Connect and OAuth 2.0 compliant Authorization Servers such as https://www.keycloak.org/about.html[Keycloak]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:14
msgid "`quarkus-oidc-token-propagation` extension to propagate the current bearer or authorization code flow access tokens"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:16
msgid "The access tokens managed by these extensions can be used as HTTP Authorization Bearer tokens to access the remote services."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:17
#, no-wrap
msgid "OidcClient"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:20
msgid "`quarkus-oidc-client` extension provides a reactive `io.quarkus.oidc.client.OidcClient` which can be used to acquire and refresh tokens using Smallrye Mutiny `Uni` and `Vert.x WebClient`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:22
msgid "`OidcClient` is initialized at the build time with the IDP token endpoint URL which can be auto-discovered or manually configured and uses this endpoint to acquire access tokens using `client_credentials` or `password` token grants and refresh the tokens using `refresh_token` grant."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:24
msgid "Here is how `OidcClient` can be configured to use the `client_credentials` grant:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:30
msgid "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus2/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.secret=secret ```"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:32
msgid "Here is how `OidcClient` can be configured to use the `password` grant:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:42
msgid "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus2/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.secret=secret quarkus.oidc-client.grant.type=password quarkus.oidc-client.grant-options.password.username=alice quarkus.oidc-client.grant-options.password.password=alice ``` In both cases `OidcClient` will auto-discover the token endpoint URL and use it to acquire the tokens."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:43
#, no-wrap
msgid "Use OidcClient directly"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:46
msgid "One can use `OidcClient` directly as follows:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:51
msgid "``` import javax.inject.PostConstruct; import javax.inject.Inject; import javax.ws.rs.GET;"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:54
msgid "import io.quarkus.oidc.client.OidcClient; import io.quarkus.oidc.client.Tokens;"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:57
msgid "@Path(\"/service\")  public class OidcClientResource {"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:60
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcClient client;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:62
#, no-wrap
msgid "    volatile Tokens currentTokens;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:67
#, no-wrap
msgid ""
"    @PostConstruct\n"
"    public init() {\n"
"        currentTokens = client.getTokens().await().indefinitely();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:70
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:80
#, no-wrap
msgid ""
"        Tokens tokens = currentTokens;\n"
"        if (tokens.isAccessTokenExpired()) {\n"
"            tokens = client.refreshTokens(tokens.getRefreshToken()).await().indefinitely();\n"
"            currentTokens = tokens;\n"
"        } \n"
"        // use tokens.getAccessToken() to configure MP RestClient Authorization header/etc\n"
"    }\n"
"}\n"
"```\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:81
#, no-wrap
msgid "Use OidcClient in MicroProfile RestClient client filter"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:84
msgid "`quarkus-oidc-client-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestFilter` JAX-RS ClientRequestFilter which uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:86
msgid "By default this filter will get `OidcClient` to acquire the first pair of access and refresh tokens at its initialization time. If the access tokens are short lived and refresh tokens are not available then the token acquisition should be delayed with `quarkus.oidc-client.early-tokens-acquisition=false`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:88
msgid "You can selectively register `OidcClientRequestFilter` by using either `io.quarkus.oidc.client.filter.OidcClientFilter` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotations:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:92
msgid "``` import org.eclipse.microprofile.rest.client.inject.RegisterRestClient; import io.quarkus.oidc.client.filter.OidcClientFilter;"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:97
msgid "@RegisterRestClient @OidcClientFilter @Path(\"/\")  public interface ProtectedResourceService {"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:102
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:119
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:321
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:338
#, no-wrap
msgid ""
"    @GET\n"
"    String getUserName();\n"
"}\n"
"```\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:104
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:323
msgid "or"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:109
msgid "``` import org.eclipse.microprofile.rest.client.annotation.RegisterProvider; import org.eclipse.microprofile.rest.client.inject.RegisterRestClient; import io.quarkus.oidc.client.filter.OidcClientRequestFilter;"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:114
msgid "@RegisterRestClient @RegisterProvider(OidcClientRequestFilter.class)  @Path(\"/\")  public interface ProtectedResourceService {"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:121
msgid "Alternatively, `OidcClientRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if `quarkus.oidc-client-filter.register-filter=true` property is set."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:122
#, no-wrap
msgid "Use injected Tokens"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:125
msgid "If you prefer you can use your own custom filter and inject `Tokens`:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:131
msgid "``` @Provider @Priority(Priorities.AUTHENTICATION)  @RequestScoped public class OidcClientRequestCustomFilter implements ClientRequestFilter {"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:134
#, no-wrap
msgid ""
"    @Inject\n"
"    Tokens tokens;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:141
#, no-wrap
msgid ""
"    @Override\n"
"    public void filter(ClientRequestContext requestContext) throws IOException {\n"
"        requestContext.getHeaders().add(HttpHeaders.AUTHORIZATION, \"Bearer \" + tokens.getAccessToken());\n"
"    }\n"
"}\n"
"```\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:143
msgid "The `Tokens` producer will acquire and refresh the tokens and the custom filter will decide how and when to use the token."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:145
msgid "See also the previous section about delaying the token acquisition in some cases."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:146
#, no-wrap
msgid "OidcClients"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:149
msgid "`io.quarkus.oidc.client.OidcClients` is a container of `OidcClient`s - it includes a default `OidcClient` (which can also be injected directly as described above) and named clients which can be configured like this:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:152
msgid "``` quarkus.oidc-client.client-enabled=false"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:157
msgid "quarkus.oidc-client.jwt-secret.auth-server-url=${keycloak.url}/realms/quarkus2/ quarkus.oidc-client.jwt-secret.client-id=quarkus-app quarkus.oidc-client.jwt-secret.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow ```"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:159
msgid "Note in this case the default client is disabled with a `client-enabled=false` property. The `jwt-secret` client can be accessed like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:165
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:192
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:223
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:168
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:171
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:199
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:232
#, no-wrap
msgid ""
"@Path(\"/clients\")\n"
"public class OidcClientResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:174
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:235
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcClients clients;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:181
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        OidcClient client = clients.getClient(\"jwt-secret\");\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:186
msgid "If you also use link:security-openid-connect-multitenancy[OIDC multitenancy] and each OIDC tenant has its own associated `OidcClient` then you can use a Vert.x `RoutingContext` `tenantId` attribute, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:196
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:204
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcClients clients;\n"
"    @Inject\n"
"    RoutingContext context;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:213
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        String tenantId = context.get(\"tenantId\");\n"
"        // named OIDC tenant and client configurations use the same key:\n"
"        OidcClient client = clients.getClient(tenantId);\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:217
msgid "If you need you can also create new `OidcClient` programmatically like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:227
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
"import io.quarkus.oidc.client.OidcClientConfig;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:229
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:247
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        OidcClientConfig cfg = new OidcClientConfig();\n"
"        cfg.setId(\"myclient\");\n"
"        cfg.setAuthServerUrl(\"http://localhost:8081/auth/realms/quarkus/\");\n"
"        cfg.setClientId(\"quarkus\"));\n"
"        cfg.getCredentials().setSecret(\"secret\");\n"
"        Uni<OidcClient> client = clients.newClient(config);\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:250
#, no-wrap
msgid "OidcClient Authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:254
msgid "`OidcClient` has to authenticate to the OpenId Connect Provider for the `client_credentials` and other grant requests to succeed.  All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:256
msgid "`client_secret_basic`:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:262
msgid "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.secret=mysecret ```"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:264
msgid "`client_secret_post`:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:271
msgid "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.client-secret.value=mysecret quarkus.oidc-client.credentials.client-secret.method=post ```"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:273
msgid "`client_secret_jwt`:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:279
msgid "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow ```"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:281
msgid "`private_key_jwt` with the PEM key file:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:287
msgid "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.jwt.key-file=privateKey.pem ```"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:289
msgid "`private_key_jwt` with the key store file:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:298
msgid "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.jwt.key-store-file=keystore.jks quarkus.oidc-client.credentials.jwt.key-store-password=mypassword quarkus.oidc-client.credentials.jwt.key-password=mykeypassword quarkus.oidc-client.credentials.jwt.key-id=mykey ```"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:300
msgid "Using `private_key_jwt` or `private_key_jwt` authentication methods ensures that no client secret goes over the wire."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:302
#, no-wrap
msgid "Token Propagation in MicroProfile RestClient client filter"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:305
msgid "`quarkus-oidc-token-propagation` extension provides `io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` JAX-RS ClientRequestFilter which propagates the current link:security-openid-connect[Bearer] or link:security-openid-connect-web-authentication[Authorization Code Flow] access token as an HTTP `Authorization` `Bearer` scheme value."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:307
msgid "You can selectively register `AccessTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:311
msgid "``` import org.eclipse.microprofile.rest.client.inject.RegisterRestClient; import io.quarkus.oidc.token.propagation.TokenCredential;"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:316
msgid "@RegisterRestClient @AccessToken @Path(\"/\")  public interface ProtectedResourceService {"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:328
msgid "``` import org.eclipse.microprofile.rest.client.annotation.RegisterProvider; import org.eclipse.microprofile.rest.client.inject.RegisterRestClient; import io.quarkus.oidc.token.propagation.AccessTokenRequestFilter;"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:333
msgid "@RegisterRestClient @RegisterProvider(AccessTokenRequestFilter.class)  @Path(\"/\")  public interface ProtectedResourceService {"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:340
msgid "Alternatively, `AccessTokenRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if `quarkus.oidc-token-propagation.register-filter=true` property is set."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:342
msgid "This filter will be enhanced in the future to support re-signing and/or exchanging the access tokens before propagating them."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:343
#, no-wrap
msgid "References"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:346
msgid "link:security[Quarkus Security]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:347
msgid "link:security-openid-connect[Quarkus - Using OpenID Connect to Protect Service Applications using Bearer Token Authorization]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:347
msgid "link:security-openid-connect-web-authentication[Quarkus - Using OpenID Connect to Protect Web Applications using Authorization Code Flow]"
msgstr ""
