# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.11/guides/vault-auth.adoc:6
#, no-wrap
msgid "Quarkus - Working with HashiCorp Vault’s Authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:21
msgid "Working with Vault is typically a 2 step process:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:23
msgid "Logging in, which returns a client token"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:24
msgid "Start using Vault using the client token, within the limits of what is allowed by the policies associated with the token"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:26
msgid "There are several Vault authentication methods supported in Quarkus today, namely:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:28
msgid "https://www.vaultproject.io/docs/auth/token[Token]: whenever you already have a token"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:29
msgid "https://www.vaultproject.io/docs/auth/userpass[Userpass]: authenticate with a username and a password"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:31
msgid "https://www.vaultproject.io/docs/auth/approle[AppRole]: authenticate with a role id and a secret id (which can be seen as a _Userpass_ for automated workflows - machines and services)"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:32
msgid "https://www.vaultproject.io/docs/auth/kubernetes[Kubernetes], which is applicable to workloads deployed into Kubernetes"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:34
msgid "This guide aims at providing examples for each of those authentication methods."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/vault-auth.adoc:37
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:40
msgid "To complete this guide, you need:"
msgstr "要完成这个指南，你需要："

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:42
msgid "to complete the {base-guide}"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:43
msgid "roughly 30 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:44
msgid "an IDE"
msgstr "一个编辑器"

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:45
msgid "JDK 1.8+ installed with `JAVA_HOME` configured appropriately"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:46
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:47
msgid "Docker installed"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:48
msgid "For the Kubernetes authentication: A Kubernetes distribution to deploy the Quarkus application (Minishift, K3s, Docker Desktop, …​)"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/vault-auth.adoc:49
#, no-wrap
msgid "Token Authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:52
msgid "We assume there is a Vault container and a PostgreSQL container running from the {base-guide}, and the root token is known."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:54
msgid "First, create a new shell, `docker exec` into the container and set the root token:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault-auth.adoc:58
#, no-wrap
msgid ""
"docker exec -it dev-vault sh\n"
"/ # export VAULT_TOKEN={root-token}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:61
msgid "Create a token for the `vault-quickstart-policy` policy:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault-auth.adoc:73
#, no-wrap
msgid ""
"/ # vault token create -policy=vault-quickstart-policy\n"
"Key                  Value\n"
"---                  -----\n"
"token                {client-token}\n"
"token_accessor       q1ynY9T7FDgbMKd3uST7RzLy\n"
"token_duration       768h\n"
"token_renewable      true\n"
"token_policies       [\"default\" \"vault-quickstart-policy\"]\n"
"identity_policies    []\n"
"policies             [\"default\" \"vault-quickstart-policy\"]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:76
msgid "Now use the generated client token in the application configuration:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault-auth.adoc:79
#, no-wrap
msgid "quarkus.vault.authentication.client-token={client-token}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:82
msgid "Compile and start the application:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault-auth.adoc:86
#, no-wrap
msgid ""
"./mvnw clean install\n"
"java -jar target/vault-quickstart-1.0.0-SNAPSHOT-runner.jar\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:89
msgid "Finally test the application endpoint:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault-auth.adoc:92
#: upstream/_versions/1.11/guides/vault-auth.adoc:163
#, no-wrap
msgid "curl http://localhost:8080/hello/private-key\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:95
#: upstream/_versions/1.11/guides/vault-auth.adoc:166
msgid "You should see: `{private-key}`."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/vault-auth.adoc:96
#, no-wrap
msgid "Client Token using Response Wrapping"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:102
msgid "One drawback of this approach is that you expose a secret piece of information (i.e. the token) that can give access to sensitive data in Vault. This requires ensuring that the application’s configuration stays secure at all time.  If an intruder was to access the client token, it would be able to start calling Vault on all endpoints permitted by the policy."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:112
msgid "This risk can be mitigated using an approach called https://www.vaultproject.io/docs/concepts/response-wrapping[Response Wrapping] (which used to be known as _Cubbyhole Authentication_ in older versions of Vault). This principle is simple: instead of configuring the client token itself, we hide it inside a _Wrapping Token_, which we provide to the application. Upon startup, the application will unwrap the _Wrapping Token_, and fetch the real token from within. The additional level of security comes from the fact that the _Wrapping Token_ is short lived (from a few seconds to a few minutes; basically just enough to start and unwrap the token), and can be unwrapped *only once*.  If the _Wrapping Token_ gets stolen and unwrapped, we will notice immediately because the legitimate application will get an error saying that the token is invalid."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:114
msgid "With that in mind, let’s create a new token and wrap it inside a _Wrapping Token_ with a TTL of 1 minute:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault-auth.adoc:125
#, no-wrap
msgid ""
"/ # vault token create -wrap-ttl=60s -policy=vault-quickstart-policy\n"
"Key                              Value\n"
"---                              -----\n"
"wrapping_token:                  {client-token-wrapping-token}\n"
"wrapping_accessor:               ojvbOtmLzB5D47SzXGo9b3sR\n"
"wrapping_token_ttl:              1m\n"
"wrapping_token_creation_time:    2020-04-14 16:05:20.990240428 +0000 UTC\n"
"wrapping_token_creation_path:    auth/token/create\n"
"wrapped_accessor:                a4ITYQNnQtwCOUmV5DJMpCiG\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:128
msgid "Now let’s use this wrapping token in the configuration:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault-auth.adoc:131
#, no-wrap
msgid "quarkus.vault.authentication.client-token-wrapping-token={client-token-wrapping-token}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:134
msgid "Compile and run the application *without the tests*, you should be able now to curl the private key `{private-key}` as before."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:136
msgid "Stop the application, and execute tests with `./mvnw test`. They should fail with the following error:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault-auth.adoc:140
#, no-wrap
msgid ""
"ERROR: Failed to start application\n"
"io.quarkus.vault.VaultException: wrapping token is not valid or does not exist; this means that the token has already expired (if so you can increase the TTL on the wrapping token) or has been consumed by somebody else (potentially indicating that the wrapping token has been stolen)\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/vault-auth.adoc:142
#, no-wrap
msgid "Userpass Authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:146
msgid "Normally the `userpass` auth method should already be enabled from the {base-guide}. If not, execute the following commands now:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault-auth.adoc:150
#, no-wrap
msgid ""
"vault auth enable userpass\n"
"vault write auth/userpass/users/bob password=sinclair policies=vault-quickstart-policy\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:153
msgid "And simply specify the username and password for this user in the application configuration:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault-auth.adoc:157
#, no-wrap
msgid ""
"quarkus.vault.authentication.userpass.username=bob\n"
"quarkus.vault.authentication.userpass.password=sinclair\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:160
msgid "Test the application endpoint after compiling and starting the application again:"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/vault-auth.adoc:172
msgid "Userpass supports response wrapping as well for the `password` property, although it is more unusual to use this approach as response wrapping typically involves a technical workflow, which is better suited for `approle`."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/vault-auth.adoc:174
#, no-wrap
msgid "Approle Authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:177
msgid "_Approle_ is an authentication method suited for technical workflows. It relies on 2 pieces of information:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:179
msgid "role id can be compared to the user name in _Userpass_"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:180
msgid "secret id plays the role of the `password`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:183
msgid "To set up _Approle_ you need to enable the `approle` auth method, create an app role, and generate a role id and secret id:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault-auth.adoc:187
#, no-wrap
msgid ""
"/ # vault auth enable approle\n"
"/ # vault write auth/approle/role/myapprole policies=vault-quickstart-policy\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault-auth.adoc:192
#, no-wrap
msgid ""
"/ # vault read auth/approle/role/myapprole/role-id\n"
"Key        Value\n"
"---        -----\n"
"role_id    {role-id}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault-auth.adoc:198
#, no-wrap
msgid ""
"/ # vault write -f auth/approle/role/myapprole/secret-id\n"
"Key                   Value\n"
"---                   -----\n"
"secret_id             {secret-id}\n"
"secret_id_accessor    2acff656-d049-c4b3-a752-6125e69210ba\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:201
msgid "Add the appropriate properties:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault-auth.adoc:205
#, no-wrap
msgid ""
"quarkus.vault.authentication.app-role.role-id={role-id}\n"
"quarkus.vault.authentication.app-role.secret-id={secret-id}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:209
msgid "After compiling and running the application you should be able to curl it on the `private-key` endpoint to see the secret information `{private-key}` as usual."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/vault-auth.adoc:210
#, no-wrap
msgid "Approle using Response Wrapping"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:213
msgid "Similarly to direct client token authentication, it is possible to wrap the `secret-id`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault-auth.adoc:223
#, no-wrap
msgid ""
"/ # vault write -wrap-ttl=60s -f auth/approle/role/myapprole/secret-id\n"
"Key                              Value\n"
"---                              -----\n"
"wrapping_token:                  {secret-id-wrapping-token}\n"
"wrapping_accessor:               u5EPZOnqyIJN8mT44od67WMS\n"
"wrapping_token_ttl:              1m\n"
"wrapping_token_creation_time:    2020-04-14 16:59:25.482352967 +0000 UTC\n"
"wrapping_token_creation_path:    auth/approle/role/myapprole/secret-id\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:226
msgid "Replace the `secret-id` property with `secret-id-wrapping-token` in the configuration:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault-auth.adoc:229
#, no-wrap
msgid "quarkus.vault.authentication.app-role.secret-id-wrapping-token={secret-id-wrapping-token}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:233
msgid "Finally, recompile the application without tests (otherwise you are going to consume the wrapping token), launch it and curl the `private-key` endpoint. As usual, you should see `{private-key}`."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/vault-auth.adoc:234
#, no-wrap
msgid "Kubernetes Authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:238
msgid "Vault provides an integration with Kubernetes to allow containers to authenticate with Vault using their Kubernetes JWT token located in `/var/run/secrets/kubernetes.io/serviceaccount`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:241
msgid "The setup is more involved than with the other auth methods because we need to allow Vault to talk to the master API to be able to validate the JWT token that the application will authenticate with."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/vault-auth.adoc:242
#, no-wrap
msgid "auth-delegator"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:246
msgid "The first step involves creating a `vault-auth-sa` service account with `auth-delegator` role that Vault will use to communicate with the master API."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:248
msgid "First create file `vault-auth-k8s.yml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault-auth.adoc:250
#: upstream/_versions/1.11/guides/vault-auth.adoc:350
#, no-wrap
msgid "---\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault-auth.adoc:255
#, no-wrap
msgid ""
"apiVersion: v1\n"
"kind: ServiceAccount\n"
"metadata:\n"
"name: vault-auth-sa\n"
"---\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault-auth.adoc:268
msgid "kind: ClusterRoleBinding apiVersion: rbac.authorization.k8s.io/v1 metadata: name: vault-auth-delegator subjects: - kind: User name: vault-auth-sa namespace: default roleRef: kind: ClusterRole name: system:auth-delegator apiGroup: rbac.authorization.k8s.io"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:271
msgid "And apply it: `kubectl apply -f vault-auth-k8s.yml`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:274
msgid "Once the objects are created, we need to capture the JWT token of this service account, and grab the public certificate of the cluster:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault-auth.adoc:280
#, no-wrap
msgid ""
"secret_name=$(kubectl get sa vault-auth-sa -o json | jq -r '.secrets[0].name')\n"
"token=$(kubectl get secret $secret_name -o json | jq -r '.data.token' | base64 --decode)\n"
"echo token=$token\n"
"kubectl get secret $secret_name -o json | jq -r '.data.\"ca.crt\"' | base64 -D > /tmp/ca.crt\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/vault-auth.adoc:282
#, no-wrap
msgid "Vault"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:286
msgid "The next step requires to exec interactively with the root token into the Vault container to configure the Kubernetes auth method:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault-auth.adoc:290
#, no-wrap
msgid ""
"docker exec -it dev-vault sh\n"
"export VAULT_TOKEN={root-token}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:295
msgid "Once inside the pod, set the token variable to the value that was just printed in the console before, and recreate `ca.crt` with the same content as `/tmp/ca.crt` outside the container. Finally use `kubectl config view` to assess the url of your Kubernetes cluster:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault-auth.adoc:300
#, no-wrap
msgid ""
"token=...       => set the value printed in the console just before\n"
"vi ca.crt       => copy/paste /tmp/ca.crt from outside the container\n"
"kubernetes_host => url from the kubectl config view (e.g. https://kubernetes.docker.internal:6443)\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:303
msgid "Now we have all the information we need to configure Vault:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault-auth.adoc:306
#, no-wrap
msgid "vault auth enable kubernetes\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault-auth.adoc:312
#, no-wrap
msgid ""
"# configure master API access from Vault\n"
"vault write auth/kubernetes/config \\\n"
"    token_reviewer_jwt=$token \\\n"
"    kubernetes_host=$kubernetes_host \\\n"
"    kubernetes_ca_cert=@ca.crt\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault-auth.adoc:319
#, no-wrap
msgid ""
"# create vault-quickstart-role role\n"
"vault write auth/kubernetes/role/vault-quickstart-role \\\n"
"    bound_service_account_names=vault-quickstart-sa \\\n"
"    bound_service_account_namespaces=default \\\n"
"    policies=vault-quickstart-policy \\\n"
"    ttl=1h\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/vault-auth.adoc:321
#, no-wrap
msgid "Deploy the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:326
msgid "Add the following properties to the application (and remove any other authentication Vault property, plus replace `<host>` by the ip or name of the local host that is running the Vault and PostgreSQL containers, such that they will be accessible from the pod):"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault-auth.adoc:334
#, no-wrap
msgid ""
"quarkus.vault.url=http://<host>:8200\n"
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.datasource.username=<your username>\n"
"quarkus.datasource.password=<your password>\n"
"quarkus.datasource.jdbc.url = jdbc:postgresql://<host>:5432/mydatabase\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault-auth.adoc:336
#, no-wrap
msgid "quarkus.vault.authentication.kubernetes.role=vault-quickstart-role\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault-auth.adoc:338
#, no-wrap
msgid "quarkus.log.category.\"io.quarkus.vault\".level=DEBUG\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:341
msgid "Now build the application:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault-auth.adoc:345
#, no-wrap
msgid ""
"./mvnw package -DskipTests\n"
"docker build -f src/main/docker/Dockerfile.jvm -t quarkus/vault-quickstart-jvm .\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:348
msgid "Create a `vault-quickstart-k8s.yml` file with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault-auth.adoc:355
#, no-wrap
msgid ""
"apiVersion: v1\n"
"kind: ServiceAccount\n"
"metadata:\n"
"  name: vault-quickstart-sa\n"
"---\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault-auth.adoc:381
#, no-wrap
msgid ""
"apiVersion: apps/v1\n"
"kind: Deployment\n"
"metadata:\n"
"  labels:\n"
"    app: vaultapp\n"
"  name: vaultapp\n"
"spec:\n"
"  replicas: 1\n"
"  selector:\n"
"    matchLabels:\n"
"      app: vaultapp\n"
"  template:\n"
"    metadata:\n"
"      labels:\n"
"        app: vaultapp\n"
"    spec:\n"
"      serviceAccountName: vault-quickstart-sa\n"
"      containers:\n"
"      - image: quarkus/vault-quickstart-jvm\n"
"        imagePullPolicy: Never\n"
"        name: vaultapp\n"
"        ports:\n"
"        - containerPort: 8080\n"
"          name: vaultport\n"
"          protocol: TCP\n"
"---\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault-auth.adoc:396
#, no-wrap
msgid ""
"apiVersion: v1\n"
"kind: Service\n"
"metadata:\n"
"  name: vaultapp\n"
"  labels:\n"
"    app: vaultapp\n"
"spec:\n"
"  type: NodePort\n"
"  ports:\n"
"    - name: vault\n"
"      port: 8080\n"
"      nodePort: 30400\n"
"  selector:\n"
"    app: vaultapp\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:399
msgid "And apply it: `kubectl apply -f vault-quickstart-k8s.yml`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:401
msgid "This will deploy the application, and make it available on port `30400` of the Kubernetes host."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:403
msgid "You can check that the application has started from the logs:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault-auth.adoc:408
#, no-wrap
msgid ""
"kubectl get pods\n"
"pod=$(kubectl get pod -l app=vaultapp -o json | jq -r '.items[0].metadata.name')\n"
"kubectl logs $pod\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:411
msgid "You should see:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault-auth.adoc:428
#, no-wrap
msgid ""
"exec java -Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager -XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -XX:MinHeapFreeRatio=20 -XX:MaxHeapFreeRatio=40 -XX:+ExitOnOutOfMemoryError -cp . -jar /deployments/app.jar\n"
"__  ____  __  _____   ___  __ ____  ______\n"
" --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/\n"
" -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\\n"
"--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/\n"
"2020-04-15 18:30:00,983 DEBUG [io.qua.vau.run.con.VaultConfigSource] (main) loaded vault runtime config VaultRuntimeConfig{url=Optional[http://<host>:8200], kubernetesAuthenticationRole=vault-quickstart-role, kubernetesJwtTokenPath='/var/run/secrets/kubernetes.io/serviceaccount/token', userpassUsername='', userpassPassword='***', appRoleRoleId='', appRoleSecretId='***', appRoleSecretIdWrappingToken='***', clientToken=***, clientTokenWrappingToken=***, renewGracePeriod=PT1H, cachePeriod=PT10M, logConfidentialityLevel=MEDIUM, kvSecretEngineVersion=2, kvSecretEngineMountPath='secret', tlsSkipVerify=false, tlsCaCert=Optional.empty, connectTimeout=PT5S, readTimeout=PT1S}\n"
"2020-04-15 18:30:00,985 DEBUG [io.qua.vau.run.con.VaultConfigSource] (main) loaded vault buildtime config io.quarkus.vault.runtime.config.VaultBuildTimeConfig@4163f1cd\n"
"2020-04-15 18:30:01,310 DEBUG [io.qua.vau.run.cli.OkHttpClientFactory] (main) create SSLSocketFactory with tls /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n"
"2020-04-15 18:30:01,559 DEBUG [io.qua.vau.run.VaultAuthManager] (main) authenticate with jwt at: /var/run/secrets/kubernetes.io/serviceaccount/token => ***\n"
"2020-04-15 18:30:01,779 DEBUG [io.qua.vau.run.VaultAuthManager] (main) created new login token: {clientToken: ***, renewable: true, leaseDuration: 3600s, valid_until: Wed Apr 15 19:30:01 GMT 2020}\n"
"2020-04-15 18:30:01,802 DEBUG [io.qua.vau.run.con.VaultConfigSource] (main) loaded 1 properties from vault\n"
"2020-04-15 18:30:02,722 DEBUG [io.qua.vau.run.VaultAuthManager] (Agroal_7305849841) extended login token: {clientToken: ***, renewable: true, leaseDuration: 3600s, valid_until: Wed Apr 15 19:30:02 GMT 2020}\n"
"2020-04-15 18:30:03,274 INFO  [io.quarkus] (main) vault-quickstart 1.0.0-SNAPSHOT (powered by Quarkus 999-SNAPSHOT) started in 4.255s. Listening on: http://0.0.0.0:8080\n"
"2020-04-15 18:30:03,276 INFO  [io.quarkus] (main) Profile prod activated.\n"
"2020-04-15 18:30:03,276 INFO  [io.quarkus] (main) Installed features: [agroal, cdi, hibernate-orm, jdbc-postgresql, narayana-jta, resteasy, vault]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:431
msgid "Notice in particular the following log line:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault-auth.adoc:434
#, no-wrap
msgid "authenticate with jwt at: /var/run/secrets/kubernetes.io/serviceaccount/token => ***\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:437
msgid "Finally curl the `private-key` endpoint to make sure you can retrieve your secret:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vault-auth.adoc:440
#, no-wrap
msgid "curl http://localhost:30400/hello/private-key\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vault-auth.adoc:442
msgid "You should see `{private-key}`."
msgstr ""
