# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.11/guides/neo4j.adoc:6
#, no-wrap
msgid "Quarkus - Neo4j"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:15
msgid "https://neo4j.com[Neo4j] is a graph database management system developed by Neo4j, Inc. Neo4j is a native graph database focused not only on the data itself, but especially on the relations between data.  Neo4j stores data as a property graph, which consists of vertices or nodes as we call them, connected with edges or relationships.  Both of them can have properties."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:19
msgid "Neo4j offers Cypher, a declarative query language much like SQL.  Cypher is used to for both querying the graph and creating or updating nodes and relationships.  As a declarative language it used to tell the database what to do and not how to do it."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:23
#, no-wrap
msgid ""
"Learn more about Cypher in the https://neo4j.com/docs/cypher-manual/current/[Neo4j Cypher manual].\n"
"      Cypher is not only available in Neo4j, but for example coming to https://github.com/opencypher/morpheus[Apache Spark].\n"
"      A spec called http://www.opencypher.org[OpenCypher] is available, too.\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:25
msgid "Clients communicate over the so called Bolt protocol with the database."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:27
msgid "Neo4j - as the most popular graph database according to DB-Engines ranking - provides a variety of drivers for various languages."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:32
msgid "The Quarkus Neo4j extension is based on the official https://github.com/neo4j/neo4j-java-driver[Neo4j Java Driver].  The extension provides an instance of the driver configured ready for usage in any Quarkus application.  You will be able to issue arbitrary Cypher statements over Bolt with this extension.  Those statements can be simple CRUD statements as well as complex queries, calling graph algorithms and more."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:36
msgid "The driver itself is released under the Apache 2.0 license, while Neo4j itself is available in a GPL3-licensed open-source \"community edition\", with online backup and high availability extensions licensed under a closed-source commercial license."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/neo4j.adoc:39
#, no-wrap
msgid "Programming model"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:42
msgid "The driver and thus the Quarkus extension support three different programming models:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:44
msgid "Blocking database access (much like standard JDBC)"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:45
msgid "Asynchronous programming based on JDK's completable futures and related infrastructure"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:46
msgid "Reactive programming based on http://www.reactive-streams.org[Reactive Streams]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:49
msgid "The reactive programming model is only available when connected against a 4.0+ version of Neo4j.  Reactive programming in Neo4j is fully end-to-end reactive and therefore requires a server that supports backpressure."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:51
msgid "In this guide you will learn how to"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:53
msgid "Add the Neo4j extension to your project"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:54
msgid "Configure the driver"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:55
msgid "And how to use the driver to access a Neo4j database"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:58
msgid "This guide will focus on asynchronous access to Neo4j, as this is ready to use for everyone.  At the end of this guide, there will be a reactive version, which needs however a 4.0 database version."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/neo4j.adoc:59
#, no-wrap
msgid "The domain"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:62
msgid "As with some of the other guides, the application shall manage fruit entities."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/neo4j.adoc:66
#: upstream/_versions/1.11/guides/neo4j.adoc:202
#: upstream/_versions/1.11/guides/neo4j.adoc:443
#, no-wrap
msgid "package org.acme.neo4j;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/neo4j.adoc:68
#, no-wrap
msgid "public class Fruit {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/neo4j.adoc:70
#, no-wrap
msgid "    public Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/neo4j.adoc:72
#, no-wrap
msgid "    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/neo4j.adoc:76
#, no-wrap
msgid ""
"    public Fruit() {\n"
"        // This is needed for the REST-Easy JSON Binding\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/neo4j.adoc:80
#, no-wrap
msgid ""
"    public Fruit(String name) {\n"
"        this.name = name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/neo4j.adoc:86
#, no-wrap
msgid ""
"    public Fruit(Long id, String name) {\n"
"        this.id = id;\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/neo4j.adoc:88
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:91
msgid "To complete this guide, you need:"
msgstr "要完成这个指南，你需要："

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:93
msgid "JDK 1.8+ installed with `JAVA_HOME` configured appropriately"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:94
msgid "an IDE"
msgstr "一个编辑器"

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:95
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:96
msgid "Access to a Neo4j Database"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:97
msgid "Optional Docker for your system"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/neo4j.adoc:98
#, no-wrap
msgid "Setup Neo4j"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:101
msgid "The easiest way to start a Neo4j instance is a locally installed Docker environment."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/neo4j.adoc:105
#, no-wrap
msgid "docker run --publish=7474:7474 --publish=7687:7687 -e 'NEO4J_AUTH=neo4j/secret' neo4j:{neo4j_version}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:108
msgid "This starts a Neo4j instance, that publishes its Bolt port on `7687` and a web interface on http://localhost:7474."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:110
msgid "Have a look at the https://neo4j.com/download/?ref=product[download page] for other options to get started with the product itself."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/neo4j.adoc:111
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:115
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:117
msgid "Clone the Git repository: git clone https://github.com/quarkusio/quarkus-quickstarts.git, or download an archive."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:120
msgid "The solution is located in the `neo4j-quickstart` {quickstarts-tree-url}/neo4j-quickstart[directory].  It contains a very simple UI to use the JAX-RS resources created here, too."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/neo4j.adoc:121
#, no-wrap
msgid "Creating the Maven project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:124
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#. type: delimited block -
#: upstream/_versions/1.11/guides/neo4j.adoc:133
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=neo4j-quickstart \\\n"
"    -DclassName=\"org.acme.datasource.GreetingResource\" \\\n"
"    -Dextensions=\"resteasy,neo4j,resteasy-jackson\"\n"
"cd neo4j-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:136
msgid "It generates:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:138
msgid "the Maven structure"
msgstr "Maven的结构"

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:139
msgid "a landing page accessible on `http://localhost:8080`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:140
msgid "example `Dockerfile` files for both `native` and `jvm` modes"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:141
msgid "the application configuration file"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:142
msgid "an `org.acme.datasource.GreetingResource` resource"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:143
msgid "an associated test"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:147
msgid "The Neo4j extension has been added already to your `pom.xml`.  In addition, we added `resteasy-jackson`, which allows us to expose `Fruit` instances over HTTP in the JSON format via JAX-RS resources.  If you have an already created project, the `neo4j` extension can be added to an existing Quarkus project with the `add-extension` command:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/neo4j.adoc:151
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"neo4j\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:154
msgid "Otherwise, you can manually add this to the dependencies section of your `pom.xml` file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/neo4j.adoc:161
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-neo4j</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/neo4j.adoc:163
#, no-wrap
msgid "Configuring"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:166
msgid "The Neo4j driver can be configured with standard Quarkus properties:"
msgstr ""

#. type: Block title
#: upstream/_versions/1.11/guides/neo4j.adoc:168
#, no-wrap
msgid "src/main/resources/application.properties"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/neo4j.adoc:173
#, no-wrap
msgid ""
"quarkus.neo4j.uri = bolt://localhost:7687\n"
"quarkus.neo4j.authentication.username = neo4j\n"
"quarkus.neo4j.authentication.password = secret\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:176
msgid "You'll recognize the authentication here that you passed on to the docker command above."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:178
msgid "Having done that, the driver is ready to use, there are however other configuration options, detailed below."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/neo4j.adoc:179
#, no-wrap
msgid "Using the driver"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/neo4j.adoc:181
#, no-wrap
msgid "General remarks"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:186
msgid "The result of a statement consists usually of one or more `org.neo4j.driver.Record`.  Those records contain arbitrary values, supported by the driver.  If you return a node of the graph, it will be a `org.neo4j.driver.types.Node`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:188
msgid "We add the following method to the `Fruit`, as a convenient way to create them:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/neo4j.adoc:194
#, no-wrap
msgid ""
"public static Fruit from(Node node) {\n"
"    return new Fruit(node.id(), node.get(\"name\").asString());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:197
msgid "Add a `FruitResource` skeleton like this and `@Inject` a `org.neo4j.driver.Driver` instance:"
msgstr ""

#. type: Block title
#: upstream/_versions/1.11/guides/neo4j.adoc:199
#: upstream/_versions/1.11/guides/neo4j.adoc:221
#: upstream/_versions/1.11/guides/neo4j.adoc:266
#: upstream/_versions/1.11/guides/neo4j.adoc:307
#: upstream/_versions/1.11/guides/neo4j.adoc:353
#, no-wrap
msgid "src/main/java/org/acme/neo4j/FruitResource.java"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/neo4j.adoc:205
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/neo4j.adoc:207
#, no-wrap
msgid "import org.neo4j.driver.Driver;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/neo4j.adoc:210
#, no-wrap
msgid ""
"@Path(\"fruits\")\n"
"public class FruitResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/neo4j.adoc:214
#, no-wrap
msgid ""
"    @Inject\n"
"    Driver driver;\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/neo4j.adoc:216
#, no-wrap
msgid "Reading nodes"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:219
msgid "Add the following method to the fruit resource:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/neo4j.adoc:237
#, no-wrap
msgid ""
"@GET\n"
"public CompletionStage<Response> get() {\n"
"    AsyncSession session = driver.asyncSession(); // <1>\n"
"    return session\n"
"        .runAsync(\"MATCH (f:Fruit) RETURN f ORDER BY f.name\")  // <2>\n"
"        .thenCompose(cursor ->  // <3>\n"
"            cursor.listAsync(record -> Fruit.from(record.get(\"f\").asNode()))\n"
"        )\n"
"        .thenCompose(fruits ->  // <4>\n"
"            session.closeAsync().thenApply(signal -> fruits)\n"
"        )\n"
"        .thenApply(Response::ok) // <5>\n"
"        .thenApply(ResponseBuilder::build);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:239
msgid "Open a new, asynchronous session with Neo4j"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:240
msgid "Execute a query. This is a Cypher statement."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:241
msgid "Retrieve a cursor, list the results and create ``Fruit``s."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:242
msgid "Close the session after processing"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:243
msgid "Create a JAX-RS response"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:245
msgid "Now start Quarkus in `dev` mode with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/neo4j.adoc:249
#, no-wrap
msgid "./mvnw compile quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:252
msgid "and retrieve the endpoint like this"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/neo4j.adoc:256
#, no-wrap
msgid "curl localhost:8080/fruits\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:259
msgid "There are not any fruits, so let's create some."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/neo4j.adoc:260
#, no-wrap
msgid "Creating nodes"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:264
msgid "The `POST` method looks similar.  It uses transaction functions of the driver:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/neo4j.adoc:283
#, no-wrap
msgid ""
"@POST\n"
"public CompletionStage<Response> create(Fruit fruit) {\n"
"    AsyncSession session = driver.asyncSession();\n"
"    return session\n"
"        .writeTransactionAsync(tx -> tx\n"
"            .runAsync(\"CREATE (f:Fruit {name: $name}) RETURN f\", Values.parameters(\"name\", fruit.name))\n"
"            .thenCompose(fn -> fn.singleAsync())\n"
"        )\n"
"        .thenApply(record -> Fruit.from(record.get(\"f\").asNode()))\n"
"        .thenCompose(persistedFruit -> session.closeAsync().thenApply(signal -> persistedFruit))\n"
"        .thenApply(persistedFruit -> Response\n"
"            .created(URI.create(\"/fruits/\" + persistedFruit.id))\n"
"            .build()\n"
"        );\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:287
msgid "As you can see, we are now using a Cypher statement with named parameters (The `$name` of the fruit).  The node is returned, a `Fruit` entity created and then mapped to a `201` created response."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:289
msgid "A curl request against this path may look like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/neo4j.adoc:297
#, no-wrap
msgid ""
"curl -v -X \"POST\" \"http://localhost:8080/fruits\" \\\n"
"     -H 'Content-Type: application/json; charset=utf-8' \\\n"
"     -d $'{\n"
"  \"name\": \"Banana\"\n"
"}'\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:300
msgid "The response contains an URI that shall return single nodes."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/neo4j.adoc:301
#, no-wrap
msgid "Read single nodes"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:305
msgid "This time, we ask for a read-only transaction.  We also add some exception handling, in case the resource is called with an invalid id:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/neo4j.adoc:335
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"{id}\")\n"
"public CompletionStage<Response> getSingle(@PathParam(\"id\") Long id) {\n"
"    AsyncSession session = driver.asyncSession();\n"
"    return session\n"
"        .readTransactionAsync(tx -> tx\n"
"            .runAsync(\"MATCH (f:Fruit) WHERE id(f) = $id RETURN f\", Values.parameters(\"id\", id))\n"
"            .thenCompose(fn -> fn.singleAsync())\n"
"    )\n"
"    .handle((record, exception) -> {\n"
"        if(exception != null) {\n"
"            Throwable source = exception;\n"
"            if(exception instanceof CompletionException) {\n"
"                source = ((CompletionException)exception).getCause();\n"
"            }\n"
"            Status status = Status.INTERNAL_SERVER_ERROR;\n"
"            if(source instanceof NoSuchRecordException) {\n"
"                status = Status.NOT_FOUND;\n"
"            }\n"
"            return Response.status(status).build();\n"
"        } else  {\n"
"            return Response.ok(Fruit.from(record.get(\"f\").asNode())).build();\n"
"        }\n"
"    })\n"
"    .thenCompose(response -> session.closeAsync().thenApply(signal -> response));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:338
msgid "A request may look like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/neo4j.adoc:342
#, no-wrap
msgid "curl localhost:8080/fruits/42\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:347
#, no-wrap
msgid ""
"In case Neo4j has been setup as a cluster, the transaction mode is used to decide whether a request is routed\n"
"      to a leader or a follower instance. Write transactions must be handled by a leader, whereas read-only transactions\n"
"      can be handled by followers.\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/neo4j.adoc:348
#, no-wrap
msgid "Deleting nodes"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:351
msgid "Finally, we want to get rid of fruits again and we add the `DELETE` method:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/neo4j.adoc:358
#, no-wrap
msgid ""
"@DELETE\n"
"@Path(\"{id}\")\n"
"public CompletionStage<Response> delete(@PathParam(\"id\") Long id) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/neo4j.adoc:368
#, no-wrap
msgid ""
"    AsyncSession session = driver.asyncSession();\n"
"    return session\n"
"        .writeTransactionAsync(tx -> tx\n"
"            .runAsync(\"MATCH (f:Fruit) WHERE id(f) = $id DELETE f\", Values.parameters(\"id\", id))\n"
"            .thenCompose(fn -> fn.consumeAsync()) // <1>\n"
"        )\n"
"        .thenCompose(response -> session.closeAsync())\n"
"        .thenApply(signal -> Response.noContent().build());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:370
msgid "There is no result for us, only a summary of the query executed."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:372
msgid "A request may look like this"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/neo4j.adoc:376
#, no-wrap
msgid "curl -X DELETE localhost:8080/fruits/42\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:382
msgid "And that's already the most simple CRUD application with one type of nodes.  Feel free to add relationships to the model.  One idea would be to model recipes that contain fruits.  The Cypher manual linked in the introduction will help you with modelling your queries."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/neo4j.adoc:383
#, no-wrap
msgid "Next steps"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/neo4j.adoc:385
#, no-wrap
msgid "Packaging"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:389
msgid "Packaging your application is as simple as `./mvnw clean package`.  It can be run with `java -jar target/neo4j-quickstart-1.0.0-SNAPSHOT-runner.jar`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:392
msgid "With GraalVM installed, you can also create a native executable binary: `./mvnw clean package -Dnative`.  Depending on your system, that will take some time."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/neo4j.adoc:393
#, no-wrap
msgid "Connection Health Check"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:397
msgid "If you are using the `quarkus-smallrye-health` extension, `quarkus-neo4j` will automatically add a readiness health check to validate the connection to Neo4j."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:399
msgid "So when you access the `/q/health/ready` endpoint of your application you will have information about the connection validation status."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:401
msgid "This behavior can be disabled by setting the `quarkus.neo4j.health.enabled` property to `false` in your `application.properties`."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/neo4j.adoc:402
#, no-wrap
msgid "Driver metrics"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:406
msgid "If you are using a metrics extension and specify the config property `quarkus.neo4j.pool.metrics-enabled=true`, the Neo4j extension will expose several metrics related to the Neo4j connection pool."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/neo4j.adoc:407
#, no-wrap
msgid "Explore Cypher and the Graph"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:411
msgid "There are tons of options to model your domain within a Graph.  The https://neo4j.com/docs/[Neo4j docs], the sandboxes and more are a good starting point."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/neo4j.adoc:413
#, no-wrap
msgid "Going reactive"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:416
msgid "If you have access to Neo4j 4.0, you can go fully reactive."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:418
msgid "To make life a bit easier, we will use https://smallrye.io/smallrye-mutiny/[Mutiny] for this."
msgstr ""

#. type: Block title
#: upstream/_versions/1.11/guides/neo4j.adoc:420
#, no-wrap
msgid "Mutiny"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/neo4j.adoc:423
msgid "The following example uses Mutiny reactive types, if you're not familiar with them, read the link:getting-started-reactive#mutiny[Getting Started with Reactive guide] first."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:426
msgid "Add the following dependency to your `pom.xml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/neo4j.adoc:435
#, no-wrap
msgid ""
"<dependencies>\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-resteasy-mutiny</artifactId>\n"
"    </dependency>\n"
"</dependencies>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:438
msgid "The reactive fruit resources streams the name of all fruits:"
msgstr ""

#. type: Block title
#: upstream/_versions/1.11/guides/neo4j.adoc:440
#, no-wrap
msgid "src/main/java/org/acme/neo4j/ReactiveFruitResource.java"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/neo4j.adoc:450
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/neo4j.adoc:456
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Multi;\n"
"import io.smallrye.mutiny.Uni;\n"
"import org.neo4j.driver.Driver;\n"
"import org.neo4j.driver.reactive.RxResult;\n"
"import org.reactivestreams.Publisher;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/neo4j.adoc:462
#, no-wrap
msgid ""
"@Path(\"reactivefruits\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public class ReactiveFruitResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/neo4j.adoc:465
#, no-wrap
msgid ""
"    @Inject\n"
"    Driver driver;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/neo4j.adoc:481
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.SERVER_SENT_EVENTS)\n"
"    public Publisher<String> get() {\n"
"        // Create a stream from a resource we can close in a finalizer:\n"
"        return Multi.createFrom().resource(driver::rxSession,\n"
"                session -> session.readTransaction(tx -> {\n"
"                    RxResult result = tx.run(\"MATCH (f:Fruit) RETURN f.name as name ORDER BY f.name\");\n"
"                    return Multi.createFrom().publisher(result.records())\n"
"                            .map(record -> record.get(\"name\").asString());\n"
"                })\n"
"        ).withFinalizer(session -> {\n"
"            return Uni.createFrom().publisher(session.close());\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/neo4j.adoc:487
msgid "`driver.rxSession()` returns a reactive session.  It exposes its API based on http://www.reactive-streams.org[Reactive Streams], most prominently, as `org.reactivestreams.Publisher`.  Those can be used directly, but we found it easier and more expressive to wrap them in reactive types such as the one provided by Mutiny.  Typically, in the previous code, the session is closed when the stream completes, fails or the subscriber cancels."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/neo4j.adoc:488
#, no-wrap
msgid "Configuration Reference"
msgstr "配置参考"
