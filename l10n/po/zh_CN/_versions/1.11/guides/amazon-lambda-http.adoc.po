# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:6
#, no-wrap
msgid "Quarkus - Amazon Lambda with RESTEasy, Undertow, or Vert.x WebÂ "
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:14
msgid "The `quarkus-amazon-lambda-http` extension allows you to write microservices with RESTEasy (JAX-RS), Undertow (servlet), Vert.x Web, or link:funqy-http[Funqy HTTP] and make these microservices deployable as an Amazon Lambda using https://aws.amazon.com/api-gateway/[Amazon's API Gateway] and https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html[Amazon's SAM framework]."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:17
msgid "You can deploy your Lambda as a pure Java jar, or you can compile your project to a native image and deploy that for a smaller memory footprint and startup time."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:20
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:23
msgid "To complete this guide, you need:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:25
msgid "less than 30 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:26
msgid "JDK 11 (AWS requires JDK 1.8 or 11)"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:27
msgid "Apache Maven {maven-version}"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:28
msgid "https://aws.amazon.com[An Amazon AWS account]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:29
msgid "https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI]"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:30
#, no-wrap
msgid "Getting Started"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:34
msgid "This guide walks you through generating an example Java project via a maven archetype.  Later on it walks through the structure of the project so you can adapt any existing projects you have to use Amazon Lambda."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:35
#, no-wrap
msgid "Installing AWS bits"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:39
msgid "Installing all the AWS bits is probably the most difficult thing about this guide.  Make sure that you follow all the steps for installing AWS SAM CLI."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:40
#, no-wrap
msgid "Creating the Maven Deployment Project"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:43
msgid "Create the Quarkus AWS Lambda maven project using our Maven Archetype."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:51
#, no-wrap
msgid ""
"mvn archetype:generate \\\n"
"       -DarchetypeGroupId=io.quarkus \\\n"
"       -DarchetypeArtifactId=quarkus-amazon-lambda-http-archetype \\\n"
"       -DarchetypeVersion={quarkus-version}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:53
#, no-wrap
msgid "Build and Deploy"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:56
msgid "Build the project using maven."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:60
#, no-wrap
msgid "./mvnw clean install\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:65
msgid "This will compile the code and run the unit tests included within the generated project.  Unit testing is the same as any other Java project and does not require running on Amazon.  Quarkus dev-mode is also available with this extension."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:68
msgid "If you want to build for native too, make sure you have GraalVM installed correctly and just add a `native` property to the build"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:72
#, no-wrap
msgid "./mvnw clean install -Dnative\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:77
msgid "If you are building on a non-Linux system, you will need to also pass in a property instructing quarkus to use a docker build as Amazon Lambda requires linux binaries.  You can do this by passing this property to your Maven build: `-Dnative-image.docker-build=true`, or for Gradle: `--docker-build=true`.  This requires you to have docker installed locally, however."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:81
#, no-wrap
msgid "./mvnw clean install -Dnative -Dnative-image.docker-build=true\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:83
#, no-wrap
msgid "Extra Build Generated Files"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:87
msgid "After you run the build, there are a few extra files generated by the `quarkus-amazon-lambda` extension.  These files are in the the build directory: `target/` for maven, `build/` for gradle."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:89
msgid "`function.zip` - lambda deployment file"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:90
msgid "`sam.jvm.yaml` - sam cli deployment script"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:91
msgid "`sam.native.yaml` - sam cli deployment script for native"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:92
#, no-wrap
msgid "Simulate Amazon Lambda Deployment"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:96
msgid "The AWS SAM CLI allows you to run your lambda's locally on your laptop in a simulated Lambda environment.  This requires docker to be installed (see their install docs).  After you have built your maven project, execute this command"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:100
#, no-wrap
msgid "sam local start-api --template target/sam.jvm.yaml\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:104
msgid "This will start a docker container that mimics Amazon's Lambda's deployment environment.  Once the environment is started you can invoke the example lambda in your browser by going to"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:106
msgid "http://127.0.0.1:3000/hello"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:109
msgid "In the console you'll see startup messages from the lambda.  This particular deployment starts a JVM and loads your lambda as pure Java."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:112
msgid "If you want to deploy a native executable of your lambda, use a different yaml template that is provided in your generated project:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:116
#, no-wrap
msgid "sam local start-api --template target/sam.native.yaml\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:118
#, no-wrap
msgid "Deploy to AWS"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:121
msgid "There are a few steps to get your lambda running on AWS."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:122
#, no-wrap
msgid "Package your deployment."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:127
#, no-wrap
msgid "sam package --template-file target/sam.jvm.yaml --output-template-file packaged.yaml --s3-bucket <YOUR_S3_BUCKET>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:131
msgid "Type the simple name of your S3 bucket you created during.  If you've built a native executable, replace `sam.jvm.yaml` with `sam.native.yaml`."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:132
#, no-wrap
msgid "Deploy your package"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:137
#, no-wrap
msgid "sam deploy --template-file packaged.yaml --capabilities CAPABILITY_IAM --stack-name <YOUR_STACK_NAME>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:140
msgid "The stack name can be anything you want."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:141
#, no-wrap
msgid "Debugging AWS Deployment Problems"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:145
msgid "If `sam deploy`, run the `describe-stack-events` command to get information about your deployment and what happened."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:149
#, no-wrap
msgid "aws cloudformation describe-stack-events --stack-name <YOUR_STACK_NAME>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:153
msgid "One common issue that you may run across is that your S3 bucket has to be in the same region as Amazon Lambda.  Look for this error from `describe-stack-events` output:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:160
#, no-wrap
msgid ""
"Error occurred while GetObject. S3 Error Code: AuthorizationHeaderMalformed. S3 Error Message:\n"
"The authorization header is malformed; the region 'us-east-1' is wrong; expecting 'us-east-2'\n"
"(Service: AWSLambdaInternal; Status Code: 400; Error Code: InvalidParameterValueException;\n"
"Request ID: aefcf978-ad2a-4b53-9ffe-cea3fcd0f868)\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:164
msgid "The above error is stating that my S3 bucket should be in `us-east-2`, not `us-east-1`.  To fix this error you'll need to create an S3 bucket in that region and redo steps 1 and 2 from above."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:167
msgid "Another annoying this is that if there is an error in deployment, you also have to completely delete it before trying to deploy again:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:171
#, no-wrap
msgid "aws cloudformation delete-stack --stack-name <YOUR_STACK_NAME>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:173
#, no-wrap
msgid "Execute your REST Lambda on AWS"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:176
msgid "To get the root URL for your service, type the following command and see the following output:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:180
#, no-wrap
msgid "aws cloudformation describe-stacks --stack-name <YOUR_STACK_NAME>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:183
msgid "It should give you something like the following output:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:202
#, no-wrap
msgid ""
"{\n"
"    \"Stacks\": [\n"
"        {\n"
"            \"StackId\": \"arn:aws:cloudformation:us-east-1:502833056128:stack/QuarkusNativeRestExample2/b35b0200-f685-11e9-aaa0-0e8cd4caae34\",\n"
"            \"DriftInformation\": {\n"
"                \"StackDriftStatus\": \"NOT_CHECKED\"\n"
"            },\n"
"            \"Description\": \"AWS Serverless Quarkus HTTP - io.demo::rest-example\",\n"
"            \"Tags\": [],\n"
"            \"Outputs\": [\n"
"                {\n"
"                    \"Description\": \"URL for application\",\n"
"                    \"ExportName\": \"RestExampleNativeApi\",\n"
"                    \"OutputKey\": \"RestExampleNativeApi\",\n"
"                    \"OutputValue\": \"https://234234234.execute-api.us-east-1.amazonaws.com/Prod/\"\n"
"                }\n"
"            ],\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:205
msgid "The `OutputValue` attribute is the root URL for your lambda. Copy it to your browser and add `hello` at the end."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:211
msgid "Responses for binary types will be automatically encoded with base64.  This is different than the behavior using `quarkus:dev` which will return the raw bytes.  Amazon's API has additional restrictions requiring the base64 encoding.  In general, client code will automatically handle this encoding but in certain custom situations, you should be aware you may need to manually manage that encoding."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:212
#, no-wrap
msgid "Examine the POM"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:216
msgid "There is nothing special about the POM other than the inclusion of the `quarkus-amazon-lambda-http` extension as a dependencies.  The extension automatically generates everything you might need for your lambda deployment."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:219
msgid "In previous versions of this extension you had to set up your pom or gradle to zip up your executable for native deployments, but this is not the case anymore."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:223
msgid "Also, at least in the generated maven archetype `pom.xml`, the `quarkus-resteasy`, `quarkus-vertx-web`, and `quarkus-undertow` dependencies are all optional.  Pick which http framework(s) you want to use (JAX-RS, Vertx Web, and/or Servlet) and remove the other dependencies to shrink your deployment."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:224
#, no-wrap
msgid "Examine sam.yaml"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:228
msgid "The `sam.yaml` syntax is beyond the scope of this document.  There's a couple of things to note though that are particular to the `quarkus-amazon-lambda-http` extension."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:232
msgid "Amazon's API Gateway assumes that HTTP response bodies are text unless you explicitly tell it which media types are binary through configuration.  To make things easier, the Quarkus extension forces a binary (base 64) encoding of all HTTP response messages and the `sam.yaml` file must configure the API Gateway to assume all media types are binary:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:240
#, no-wrap
msgid ""
"  Globals:\n"
"    Api:\n"
"      EndpointConfiguration: REGIONAL\n"
"      BinaryMediaTypes:\n"
"        - \"*/*\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:243
msgid "Another thing to note is that for pure Java lambda deployments, do not change the Lambda handler name."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:249
#, no-wrap
msgid ""
"     Properties:\n"
"        Handler: io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest\n"
"        Runtime: java8\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:253
msgid "This particular handler handles all the intricacies of integrating with the Quarkus runtime.  So you must use that handler."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:256
msgid "Finally, there's an environment variable that must be set for native GraalVM deployments.  If you look at `sam.native.yaml` you'll see this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:262
#, no-wrap
msgid ""
"        Environment:\n"
"          Variables:\n"
"            DISABLE_SIGNAL_HANDLERS: true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:265
msgid "This environment variable resolves some incompatibilities between Quarkus and the Amazon Lambda Custom Runtime environment."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:266
#, no-wrap
msgid "Tracing with AWS XRay and GraalVM"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda-http.adoc:270
msgid "If you are building native images, and want to use https://aws.amazon.com/xray[AWS X-Ray Tracing] with your lambda you will need to include `quarkus-amazon-lambda-xray` as a dependency in your pom.  The AWS X-Ray library is not fully compatible with GraalVM so we had to do some integration work to make this work."
msgstr ""
