# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:6
#, no-wrap
msgid "Quarkus - Using OpenID Connect to Protect Service Applications using Bearer Token Authorization"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:12
msgid "This guide demonstrates how to use Quarkus OpenID Connect Extension to protect your JAX-RS applications using Bearer Token Authorization where Bearer Tokens are issued by OpenId Connect and OAuth 2.0 compliant Authorization Servers such as https://www.keycloak.org/about.html[Keycloak]."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:14
msgid "Bearer Token Authorization is the process of authorizing HTTP requests based on the existence and validity of a Bearer Token which provides valuable information to determine the subject of the call as well as whether or not an HTTP resource can be accessed."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:16
msgid "Please read the link:security-openid-connect-web-authentication[Using OpenID Connect to Protect Web Applications] guide if you need to authenticate and authorize the users using OpenId Connect Authorization Code Flow."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:18
msgid "If you use Keycloak and Bearer tokens then also see the link:security-keycloak-authorization[Using Keycloak to Centralize Authorization] guide."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:20
msgid "Please read the link:security-openid-connect-multitenancy[Using OpenID Connect Multi-Tenancy] guide how to support multiple tenants."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:21
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:24
msgid "To complete this guide, you need:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:26
msgid "less than 15 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:27
msgid "an IDE"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:28
msgid "JDK 1.8+ installed with `JAVA_HOME` configured appropriately"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:29
msgid "Apache Maven {maven-version}"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:30
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:31
msgid "Docker"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:32
#, no-wrap
msgid "Architecture"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:35
msgid "In this example, we build a very simple microservice which offers three endpoints:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:37
msgid "`/api/users/me`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:38
msgid "`/api/admin`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:40
msgid "These endpoints are protected and can only be accessed if a client is sending a bearer token along with the request, which must be valid (e.g.: signature, expiration and audience) and trusted by the microservice."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:42
msgid "The bearer token is issued by a Keycloak Server and represents the subject to which the token was issued for. For being an OAuth 2.0 Authorization Server, the token also references the client acting on behalf of the user."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:44
msgid "The `/api/users/me` endpoint can be accessed by any user with a valid token. As a response, it returns a JSON document with details about the user where these details are obtained from the information carried on the token."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:46
msgid "The `/api/admin` endpoint is protected with RBAC (Role-Based Access Control) where only users granted with the `admin` role can access. At this endpoint, we use the `@RolesAllowed` annotation to declaratively enforce the access constraint."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:47
#, no-wrap
msgid "Solution"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:51
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:53
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:55
msgid "The solution is located in the `security-openid-connect-quickstart` {quickstarts-tree-url}/security-openid-connect-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:56
#, no-wrap
msgid "Creating the Maven Project"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:59
msgid "First, we need a new project. Create a new project with the following command:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:68
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=security-openid-connect-quickstart \\\n"
"    -Dextensions=\"resteasy,oidc,resteasy-jackson\" \\\n"
"    -DnoExamples\n"
"cd security-openid-connect-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:72
msgid "This command generates a Maven project, importing the `keycloak` extension which is an implementation of a Keycloak Adapter for Quarkus applications and provides all the necessary capabilities to integrate with a Keycloak Server and perform bearer token authorization."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:75
msgid "If you already have your Quarkus project configured, you can add the `oidc` extension to your project by running the following command in your project base directory:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:79
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"oidc\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:82
msgid "This will add the following to your `pom.xml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:89
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:91
#, no-wrap
msgid "Writing the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:94
msgid "Let's start by implementing the `/api/users/me` endpoint. As you can see from the source code below it is just a regular JAX-RS resource:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:98
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:141
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:169
#, no-wrap
msgid "package org.acme.security.openid.connect;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:103
#, no-wrap
msgid ""
"import javax.annotation.security.RolesAllowed;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:106
#, no-wrap
msgid ""
"import org.jboss.resteasy.annotations.cache.NoCache;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:109
#, no-wrap
msgid ""
"@Path(\"/api/users\")\n"
"public class UsersResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:112
#, no-wrap
msgid ""
"    @Inject\n"
"    SecurityIdentity securityIdentity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:120
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/me\")\n"
"    @RolesAllowed(\"user\")\n"
"    @NoCache\n"
"    public User me() {\n"
"        return new User(securityIdentity);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:122
#, no-wrap
msgid "    public static class User {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:124
#, no-wrap
msgid "        private final String userName;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:128
#, no-wrap
msgid ""
"        User(SecurityIdentity securityIdentity) {\n"
"            this.userName = securityIdentity.getPrincipal().getName();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:134
#, no-wrap
msgid ""
"        public String getUserName() {\n"
"            return userName;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:137
msgid "The source code for the `/api/admin` endpoint is also very simple. The main difference here is that we are using a `@RolesAllowed` annotation to make sure that only users granted with the `admin` role can access the endpoint:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:147
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:177
#, no-wrap
msgid ""
"import javax.annotation.security.RolesAllowed;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:150
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:180
#, no-wrap
msgid ""
"@Path(\"/api/admin\")\n"
"public class AdminResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:158
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"admin\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String admin() {\n"
"        return \"granted\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:161
msgid "Injection of the `SecurityIdentity` is supported in both `@RequestScoped` and `@ApplicationScoped` contexts."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:162
#, no-wrap
msgid "Accessing JWT claims"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:165
msgid "If you need to access `JsonWebToken` claims, you may simply inject the token itself:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:171
#, no-wrap
msgid "import org.eclipse.microprofile.jwt.JsonWebToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:183
#, no-wrap
msgid ""
"    @Inject\n"
"    JsonWebToken jwt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:191
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"admin\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String admin() {\n"
"        return \"Access for subject \" + jwt.getSubject() + \" is granted\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:194
msgid "Injection of the `JsonWebToken` is supported in both `@RequestScoped` and `@ApplicationScoped` contexts."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:195
#, no-wrap
msgid "Configuring the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:198
msgid "The OpenID Connect extension allows you to define the adapter configuration using the `application.properties` file which should be located at the `src/main/resources` directory."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:199
#, no-wrap
msgid "Configuring using the application.properties file"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:204
msgid "Example configuration:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:209
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
"quarkus.oidc.client-id=backend-service\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:211
#, no-wrap
msgid "Configuring CORS"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:214
msgid "If you plan to consume this application from another application running on a different domain, you will need to configure CORS (Cross-Origin Resource Sharing). Please read the link:http-reference#cors-filter[HTTP CORS documentation] for more details."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:215
#, no-wrap
msgid "Starting and Configuring the Keycloak Server"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:218
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:222
#, no-wrap
msgid "docker run --name keycloak -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin -p 8180:8080 {keycloak-docker-image}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:225
msgid "You should be able to access your Keycloak Server at http://localhost:8180/auth[localhost:8180/auth]."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:227
msgid "Log in as the `admin` user to access the Keycloak Administration Console. Username should be `admin` and password `admin`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:229
msgid "Import the {quickstarts-tree-url}/security-openid-connect-quickstart/config/quarkus-realm.json[realm configuration file] to create a new realm. For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:232
msgid "If you want to use the Keycloak Admin Client to configure your server from your application you need to include the `quarkus-keycloak-admin-client` extension."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:233
#, no-wrap
msgid "Running and Using the Application"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:235
#, no-wrap
msgid "Running in Developer Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:238
msgid "To run the microservice in dev mode, use `./mvnw clean compile quarkus:dev`."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:239
#, no-wrap
msgid "Running in JVM Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:242
msgid "When you're done playing with \"dev-mode\" you can run it as a standard Java application."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:244
msgid "First compile it:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:248
#, no-wrap
msgid "./mvnw package\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:251
msgid "Then run it:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:255
#, no-wrap
msgid "java -jar ./target/security-openid-connect-quickstart-runner.jar\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:257
#, no-wrap
msgid "Running in Native Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:260
msgid "This same demo can be compiled into native code: no modifications required."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:264
msgid "This implies that you no longer need to install a JVM on your production environment, as the runtime technology is included in the produced binary, and optimized to run with minimal resource overhead."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:267
msgid "Compilation will take a bit longer, so this step is disabled by default; let's build again by enabling the `native` profile:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:271
#, no-wrap
msgid "./mvnw package -Pnative\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:274
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:278
#, no-wrap
msgid "./target/security-openid-connect-quickstart-runner\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:280
#, no-wrap
msgid "Testing the Application"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:285
msgid "The application is using bearer token authorization and the first thing to do is obtain an access token from the Keycloak Server in order to access the application resources:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:294
#, no-wrap
msgid ""
"export access_token=$(\\\n"
"    curl -X POST http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/token \\\n"
"    --user backend-service:secret \\\n"
"    -H 'content-type: application/x-www-form-urlencoded' \\\n"
"    -d 'username=alice&password=alice&grant_type=password' | jq --raw-output '.access_token' \\\n"
" )\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:297
msgid "The example above obtains an access token for user `alice`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:301
msgid "Any user is allowed to access the `http://localhost:8080/api/users/me` endpoint which basically returns a JSON payload with details about the user."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:307
#, no-wrap
msgid ""
"curl -v -X GET \\\n"
"  http://localhost:8080/api/users/me \\\n"
"  -H \"Authorization: Bearer \"$access_token\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:312
#, no-wrap
msgid ""
"The `http://localhost:8080/api/admin` endpoint can only be accessed by users with the `admin` role. If you try to access this endpoint with the\n"
" previously issued access token, you should get a `403` response\n"
" from the server.\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:318
#, no-wrap
msgid ""
"curl -v -X GET \\\n"
"   http://localhost:8080/api/admin \\\n"
"   -H \"Authorization: Bearer \"$access_token\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:321
msgid "In order to access the admin endpoint you should obtain a token for the `admin` user:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:330
#, no-wrap
msgid ""
"export access_token=$(\\\n"
"    curl -X POST http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/token \\\n"
"    --user backend-service:secret \\\n"
"    -H 'content-type: application/x-www-form-urlencoded' \\\n"
"    -d 'username=admin&password=admin&grant_type=password' | jq --raw-output '.access_token' \\\n"
" )\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:333
#, no-wrap
msgid "User Info"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:338
msgid "Set `quarkus.oidc.user-info-required=true` if a UserInfo JSON object from the OIDC userinfo endpoint has to be requested.  A request will be sent to the OpenId Provider UserInfo endpoint and an `io.quarkus.oidc.UserInfo` (a simple `javax.json.JsonObject` wrapper) object will be created.  `io.quarkus.oidc.UserInfo` can be either injected or accessed as a SecurityIdentity `userinfo` attribute."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:339
#, no-wrap
msgid "Token Claims And SecurityIdentity Roles"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:342
msgid "SecurityIdentity roles can be mapped from the verified JWT access tokens as follows:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:345
msgid "If `quarkus.oidc.roles.role-claim-path` property is set and a matching array or string claim is found then the roles are extracted from this claim.  For example, `customroles`, `customroles/array`, `scope`, `\"http://namespace-qualified-custom-claim\"/roles`, `\"http://namespace-qualified-roles\"`, etc."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:346
msgid "If `groups` claim is available then its value is used"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:348
msgid "If `realm_access/roles` or `resource_access/client_id/roles` (where `client_id` is the value of the `quarkus.oidc.client-id` property) claim is available then its value is used.  This check supports the tokens issued by Keycloak"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:350
msgid "If the token is opaque (binary) then a `scope` property from the remote token introspection response will be used."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:352
msgid "If UserInfo is the source of the roles then set `quarkus.oidc.authentication.user-info-required=true` and `quarkus.oidc.roles.source=userinfo`, and if needed, `quarkus.oidc.roles.role-claim-path`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:354
msgid "Additionally a custom `SecurityIdentityAugmentor` can also be used to add the roles as documented link:security#security-identity-customization[here]."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:356
#, no-wrap
msgid "Single Page Applications"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:360
msgid "Single Page Application (SPA) typically uses `XMLHttpRequest`(XHR) and the Java Script utility code provided by the OpenId Connect provider to acquire a bearer token and use it to access Quarkus `service` applications."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:362
msgid "For example, here is how you can use `keycloak.js` to authenticate the users and refresh the expired tokens from the SPA:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:401
#, no-wrap
msgid ""
"<html>\n"
"<head>\n"
"    <title>keycloak-spa</title>\n"
"    <script src=\"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\"></script>\n"
"    <script src=\"http://localhost:8180/auth/js/keycloak.js\"></script>\n"
"    <script>\n"
"        var keycloak = new Keycloak();\n"
"        keycloak.init({onLoad: 'login-required'}).success(function () {\n"
"            console.log('User is now authenticated.');\n"
"        }).error(function () {\n"
"            window.location.reload();\n"
"        });\n"
"        function makeAjaxRequest() {\n"
"            axios.get(\"/api/hello\", {\n"
"                headers: {\n"
"                    'Authorization': 'Bearer ' + keycloak.token\n"
"                }\n"
"            })\n"
"            .then( function (response) {\n"
"                console.log(\"Response: \", response.status);\n"
"            }).catch(function (error) {\n"
"                console.log('refreshing');\n"
"                keycloak.updateToken(5).then(function () {\n"
"                    console.log('Token refreshed');\n"
"                }).catch(function () {\n"
"                    console.log('Failed to refresh token');\n"
"                    window.location.reload();\n"
"                });\n"
"            });\n"
"    }\n"
"    </script>\n"
"</head>\n"
"<body>\n"
"    <button onclick=\"makeAjaxRequest()\">Request</button>\n"
"</body>\n"
"</html>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:403
#, no-wrap
msgid "Token Propagation"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:406
msgid "Please see link:security-openid-connect-client#token-propagation[Token Propagation] section about the Bearer access token propagation to the downstream services."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:407
#, no-wrap
msgid "References"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:410
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:411
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:412
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:413
msgid "link:security-openid-connect-client[Quarkus - Using OpenID Connect and OAuth2 Client and Filters to manage access tokens]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect.adoc:413
msgid "link:security[Quarkus Security]"
msgstr ""
