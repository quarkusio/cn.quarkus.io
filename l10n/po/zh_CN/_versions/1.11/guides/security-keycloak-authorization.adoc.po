# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:6
#, no-wrap
msgid "Quarkus - Using OpenID Connect and Keycloak to Centralize Authorization"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:11
msgid "This guide demonstrates how your Quarkus application can authorize a bearer token access to protected resources using https://www.keycloak.org/docs/latest/authorization_services/index.html[Keycloak Authorization Services]."
msgstr "本指南展示了如何在您的Quarkus应用程序中使用 link:https://www.keycloak.org/docs/latest/authorization_services/index.html[Keycloak授权服务] 来授权不记名token(bearer token)访问受保护的资源。"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:15
msgid "The `quarkus-keycloak-authorization` extension is based on `quarkus-oidc` and provides a policy enforcer that enforces access to protected resources based on permissions managed by Keycloak and currently can only be used with the Quarkus link:security-openid-connect[OIDC service applications].  It provides a flexible and dynamic authorization capability based on Resource-Based Access Control.  In other words, instead of explicitly enforcing access based on some specific access control mechanism (e.g.: RBAC), you just check whether or not a request is allowed to access a resource based on its name, identifier or URI."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:17
msgid "By externalizing authorization from your application, you are allowed to protect your applications using different access control mechanisms as well as avoid re-deploying your application every time your security requirements change, where Keycloak will be acting as a centralized authorization service from where your protected resources and their associated permissions are managed."
msgstr "通过将授权功能从您的应用程序中抽离并外部化，您可以使用不同的访问控制机制来保护您的应用程序，也可以避免在您的安全控制需求发生变化时重新部署您的应用程序。Keycloak将作为一个集中的授权服务，它允许您的受保护资源和它们的相关权限在它这里得到管理。"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:19
msgid "See the link:security-openid-connect[Using OpenID Connect to Protect Service Applications] guide for more information about `Bearer Token` authentication mechanism."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:22
msgid "If you are already familiar with Keycloak, you’ll notice that the extension is basically another adapter implementation but specific for Quarkus applications.  Otherwise, you can find more information in the Keycloak https://www.keycloak.org/docs/latest/authorization_services/index.html#_enforcer_overview[documentation]."
msgstr "如果您已经熟悉Keycloak，您会注意到这个扩展基本上是另一个专门针对Quarkus的keycloak适配器的实现。另外，您也可以在Keycloak link:https://www.keycloak.org/docs/latest/authorization_services/index.html#_enforcer_overview[文档] 中找到更多信息。"

#. type: Title ==
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:23
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:26
msgid "To complete this guide, you need:"
msgstr "要完成这个指南，你需要："

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:28
msgid "less than 15 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:29
msgid "an IDE"
msgstr "一个编辑器"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:30
msgid "JDK 1.8+ installed with `JAVA_HOME` configured appropriately"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:31
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:32
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:33
msgid "https://www.keycloak.org/docs/latest/server_installation/index.html[Keycloak]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:34
msgid "Docker"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:35
#, no-wrap
msgid "Architecture"
msgstr "应用结构"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:38
msgid "In this example, we build a very simple microservice which offers two endpoints:"
msgstr "在该例子中，我们建立了一个非常简单的微服务并提供了两个节点："

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:40
msgid "`/api/users/me`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:41
msgid "`/api/admin`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:43
msgid "These endpoints are protected and can only be accessed if a client is sending a bearer token along with the request, which must be valid (e.g.: signature, expiration and audience) and trusted by the microservice."
msgstr "这些节点是受保护的，只有当客户端将一个bearer token与请求一起发送时才能被访问，而且该token必须是有效的（例如：签名、过期时间和受众），并且要得到微服务的信任。"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:46
msgid "The bearer token is issued by a Keycloak Server and represents the subject to which the token was issued for.  For being an OAuth 2.0 Authorization Server, the token also references the client acting on behalf of the user."
msgstr "Bearer token是由Keycloak服务器发放的，而且代表了该token的发放对象。对于作为OAuth 2.0授权服务器，该token还可以表示代表用户的客户端。"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:50
msgid "The `/api/users/me` endpoint can be accessed by any user with a valid token.  As a response, it returns a JSON document with details about the user where these details are obtained from the information carried on the token.  This endpoint is protected with RBAC (Role-Based Access Control) and only users granted with the `user` role can access this endpoint."
msgstr "`/api/users/me` 节点可由任何拥有有效token的用户访问。作为响应，它返回一个JSON文档，其中包含关于用户的详细信息，这些详细信息是从token上的信息中获得的。这个节点受到RBAC（基于角色的访问控制）的保护，只有被授予 `user` 角色的用户才能访问这个节点。"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:52
msgid "The `/api/admin` endpoint is protected with RBAC (Role-Based Access Control) and only users granted with the `admin` role can access it."
msgstr "`/api/admin` 节点受到RBAC（基于角色的访问控制）的保护，只有被授予 `admin` 角色的用户才能访问它。"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:56
msgid "This is a very simple example using RBAC policies to govern access to your resources.  However, Keycloak supports other types of policies that you can use to perform even more fine-grained access control.  By using this example, you'll see that your application is completely decoupled from your authorization policies with enforcement being purely based on the accessed resource."
msgstr "该示例非常简单，它使用RBAC策略来管理对您的资源的访问。但是，Keycloak也支持其他类型的策略，您可以用这些策略来执行更细粒度的访问控制。通过这个例子，您会发现您的应用程序与授权策略完全解耦，授权策略的执行完全基于所访问的资源。"

#. type: Title ==
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:57
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:61
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:63
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:65
msgid "The solution is located in the `security-keycloak-authorization-quickstart` {quickstarts-tree-url}/security-keycloak-authorization-quickstart[directory]."
msgstr "该方案位于 `security-keycloak-authorization-quickstart` {quickstarts-tree-url}/security-keycloak-authorization-quickstart[目录]中。"

#. type: Title ==
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:66
#, no-wrap
msgid "Creating the Project"
msgstr "创建项目"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:70
msgid "First, we need a new project.  Create a new project with the following command:"
msgstr "首先，我们需要一个新的工程项目。用以下命令创建一个新项目："

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:79
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=security-keycloak-authorization-quickstart \\\n"
"    -Dextensions=\"oidc,keycloak-authorization,resteasy-jackson\" \\\n"
"    -DnoExamples\n"
"cd security-keycloak-authorization-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:82
msgid "This command generates a Maven project, importing the `keycloak-authorization` extension which is an implementation of a Keycloak Adapter for Quarkus applications and provides all the necessary capabilities to integrate with a Keycloak Server and perform bearer token authorization."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:85
msgid "If you already have your Quarkus project configured, you can add the `oidc` and `keycloak-authorization` extensions to your project by running the following command in your project base directory:"
msgstr "如果您已经配置了Quarkus项目，您可以通过在项目根目录中执行以下命令将 `oidc` 和 `keycloak-authorization` 扩展添加到您的项目中:"

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:89
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"oidc,keycloak-authorization\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:92
msgid "This will add the following to your `pom.xml`:"
msgstr "这将在你的 `pom.xml` 中添加以下内容："

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:103
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-keycloak-authorization</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:107
msgid "Let's start by implementing the `/api/users/me` endpoint.  As you can see from the source code below it is just a regular JAX-RS resource:"
msgstr "让我们从实现 `/api/users/me` 节点开始。从下面的源代码可以看出，它就是一个普通的JAX-RS资源："

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:111
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:153
#, no-wrap
msgid "package org.acme.security.keycloak.authorization;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:115
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:117
#, no-wrap
msgid "import org.jboss.resteasy.annotations.cache.NoCache;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:119
#, no-wrap
msgid "import io.quarkus.security.identity.SecurityIdentity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:122
#, no-wrap
msgid ""
"@Path(\"/api/users\")\n"
"public class UsersResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:125
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:316
#, no-wrap
msgid ""
"    @Inject\n"
"    SecurityIdentity identity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:132
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/me\")\n"
"    @NoCache\n"
"    public User me() {\n"
"        return new User(identity);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:134
#, no-wrap
msgid "    public static class User {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:136
#, no-wrap
msgid "        private final String userName;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:140
#, no-wrap
msgid ""
"        User(SecurityIdentity identity) {\n"
"            this.userName = identity.getPrincipal().getName();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:146
#, no-wrap
msgid ""
"        public String getUserName() {\n"
"            return userName;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:149
msgid "The source code for the `/api/admin` endpoint is also very simple:"
msgstr "`/api/admin` 节点的源代码也非常简单："

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:158
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:160
#, no-wrap
msgid "import io.quarkus.security.Authenticated;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:164
#, no-wrap
msgid ""
"@Path(\"/api/admin\")\n"
"@Authenticated\n"
"public class AdminResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:171
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String admin() {\n"
"        return \"granted\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:175
msgid "Note that we did not define any annotation such as `@RoleAllowed` to explicitly enforce access to a resource.  The extension will be responsible to map the URIs of the protected resources you have in Keycloak and evaluate the permissions accordingly, granting or denying access depending on the permissions that will be granted by Keycloak."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:176
#, no-wrap
msgid "Configuring the application"
msgstr "配置该应用程序"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:179
msgid "The OpenID Connect extension allows you to define the adapter configuration using the `application.properties` file which should be located at the `src/main/resources` directory."
msgstr "OpenID Connect扩展允许您使用 `application.properties` 来定义适配器配置，该文件应位于 `src/main/resources` 目录下。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:187
#, no-wrap
msgid ""
"# OIDC Configuration\n"
"quarkus.oidc.auth-server-url=https://localhost:8543/auth/realms/quarkus\n"
"quarkus.oidc.client-id=backend-service\n"
"quarkus.oidc.credentials.secret=secret\n"
"quarkus.oidc.tls.verification=none\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:190
#, no-wrap
msgid ""
"# Enable Policy Enforcement\n"
"quarkus.keycloak.policy-enforcer.enable=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:193
msgid "By default, applications using the `quarkus-oidc` extension are marked as a `service` type application (see `quarkus.oidc.application-type`). This extension currently supports only such `service` type applications."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:194
#, no-wrap
msgid "Starting and Configuring the Keycloak Server"
msgstr "启动和配置Keycloak服务器"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:197
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr "要启动Keycloak服务器，您可以使用Docker服务，且只需运行以下命令："

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:201
#, no-wrap
msgid "docker run --name keycloak -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin -p 8180:8080 -p 8543:8443 {keycloak-docker-image}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:204
msgid "You should be able to access your Keycloak Server at http://localhost:8180/auth[localhost:8180/auth] or https://localhost:8543/auth[localhost:8543/auth]."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:207
msgid "Log in as the `admin` user to access the Keycloak Administration Console.  Username should be `admin` and password `admin`."
msgstr "以 `admin` 用户身份登录，访问Keycloak管理控制台。管理员账户请使用 `admin` ，密码是 `admin` 。"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:210
msgid "Import the {quickstarts-tree-url}/security-keycloak-authorization-quickstart/config/quarkus-realm.json[realm configuration file] to create a new realm.  For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr "导入{quickstarts-tree-url}/security-keycloak-authorization-quickstart/config/quarkus-realm.json[realm配置文件]来创建一个新realm。更多细节，请参阅Keycloak文档中关于如何 link:https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[创建一个新的realm] 。"

#. type: Title ==
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:211
#, no-wrap
msgid "Running and Using the Application"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:213
#, no-wrap
msgid "Running in Developer Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:216
msgid "To run the microservice in dev mode, use `./mvnw clean compile quarkus:dev`."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:217
#, no-wrap
msgid "Running in JVM Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:220
msgid "When you're done playing with \"dev-mode\" you can run it as a standard Java application."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:222
msgid "First compile it:"
msgstr "首先编译它："

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:226
#, no-wrap
msgid "./mvnw package\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:229
msgid "Then run it:"
msgstr "然后运行："

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:233
#, no-wrap
msgid "java -jar ./target/security-keycloak-authorization-quickstart-runner.jar\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:235
#, no-wrap
msgid "Running in Native Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:238
msgid "This same demo can be compiled into native code: no modifications required."
msgstr "这个同样的演示可以被编译成本地代码：不需要任何修改。"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:240
msgid "This implies that you no longer need to install a JVM on your production environment, as the runtime technology is included in the produced binary, and optimized to run with minimal resource overhead."
msgstr "这意味着您不再需要在您的生产环境中安装JVM，因为运行时技术包含在生产的二进制文件中，并以最小的资源开销优化运行。"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:242
msgid "Compilation will take a bit longer, so this step is disabled by default; let's build again by enabling the `native` profile:"
msgstr "编译会花一点时间，所以这一步默认是禁用的；让我们通过启用 `native` profile来再次构建："

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:246
#, no-wrap
msgid "./mvnw package -Pnative\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:249
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr "一杯咖啡的时间后，您就可以直接运行该二进制文件了："

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:253
#, no-wrap
msgid "./target/security-keycloak-authorization-quickstart-runner\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:255
#, no-wrap
msgid "Testing the Application"
msgstr "测试应用程序"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:258
msgid "The application is using bearer token authorization and the first thing to do is obtain an access token from the Keycloak Server in order to access the application resources:"
msgstr "该应用程序使用bearer token授权，首先要做的是从Keycloak服务器获得一个访问token，以便访问应用程序资源："

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:267
#, no-wrap
msgid ""
"export access_token=$(\\\n"
"    curl --insecure -X POST https://localhost:8543/auth/realms/quarkus/protocol/openid-connect/token \\\n"
"    --user backend-service:secret \\\n"
"    -H 'content-type: application/x-www-form-urlencoded' \\\n"
"    -d 'username=alice&password=alice&grant_type=password' | jq --raw-output '.access_token' \\\n"
" )\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:270
msgid "The example above obtains an access token for user `alice`."
msgstr "上面的命令为用户 `alice` 获取了一个访问token。"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:274
msgid "Any user is allowed to access the `http://localhost:8080/api/users/me` endpoint which basically returns a JSON payload with details about the user."
msgstr "任何用户都被允许访问 `<a href=\"http://localhost:8080/api/users/me\" class=\"bare\">http://localhost:8080/api/users/me</a>` 节点，该节点会返回一个包含用户详细信息的JSON payload。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:280
#, no-wrap
msgid ""
"curl -v -X GET \\\n"
"  http://localhost:8080/api/users/me \\\n"
"  -H \"Authorization: Bearer \"$access_token\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:284
msgid "The `http://localhost:8080/api/admin` endpoint can only be accessed by users with the `admin` role.  If you try to access this endpoint with the previously issued access token, you should get a `403` response from the server."
msgstr "`<a href=\"http://localhost:8080/api/admin\" class=\"bare\">http://localhost:8080/api/admin</a>` 节点只能由具有 `admin` 角色的用户访问。如果您试图用先前发放的access token访问这个节点，您将会得到一个 `403` 的响应。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:290
#, no-wrap
msgid ""
" curl -v -X GET \\\n"
"   http://localhost:8080/api/admin \\\n"
"   -H \"Authorization: Bearer \"$access_token\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:293
msgid "In order to access the admin endpoint you should obtain a token for the `admin` user:"
msgstr "为了访问管理节点，您需要获得一个 `admin` 用户的token："

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:302
#, no-wrap
msgid ""
"export access_token=$(\\\n"
"    curl --insecure -X POST https://localhost:8543/auth/realms/quarkus/protocol/openid-connect/token \\\n"
"    --user backend-service:secret \\\n"
"    -H 'content-type: application/x-www-form-urlencoded' \\\n"
"    -d 'username=admin&password=admin&grant_type=password' | jq --raw-output '.access_token' \\\n"
" )\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:304
#, no-wrap
msgid "Checking Permissions Programmatically"
msgstr "以编程方式检查权限"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:308
msgid "In some cases, you may want to programmatically check whether or not a request is granted to access a protected resource. By injecting a `SecurityIdentity` instance in your beans, you are allowed to check permissions as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:313
#, no-wrap
msgid ""
"@Path(\"/api/protected\")\n"
"public class ProtectedResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:329
#, no-wrap
msgid ""
"    @GET\n"
"    public CompletionStage<List<Permission>> get() {\n"
"        return identity.checkPermission(new AuthPermission(\"{resource_name}\"))\n"
"                .transform(granted -> {\n"
"                    if (granted) {\n"
"                        return CompletableFuture.completedFuture(doGetState());\n"
"                    }\n"
"                    throw new ForbiddenException();\n"
"                });\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:331
#, no-wrap
msgid "Mapping Protected Resources"
msgstr "映射受保护资源"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:334
msgid "By default, the extension is going to fetch resources on-demand from Keycloak where their `URI` are used to map the resources in your application that should be protected."
msgstr "默认情况下，扩展将从Keycloak按需获取资源，而资源 `URI` 被用于映射您的应用程序中应被保护的资源。"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:336
msgid "If you want to disable this behavior and fetch resources during startup, you can use the following configuration:"
msgstr "如果您想禁用这种行为，并在启动期间获取资源，您可以使用以下配置："

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:340
#, no-wrap
msgid "quarkus.keycloak.policy-enforcer.lazy-load-paths=false\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:343
msgid "Note that, depending on how many resources you have in Keycloak the time taken to fetch them may impact your application startup time."
msgstr "请注意，基于您在Keycloak中的资源数量，获取这些资源的时间可能会影响您的应用程序的启动时间。"

#. type: Title ==
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:344
#, no-wrap
msgid "More About Configuring Protected Resources "
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:347
msgid "In the default configuration, Keycloak is responsible for managing the roles and deciding who can access which routes."
msgstr "在默认配置中，Keycloak负责管理角色并决定谁可以访问哪些路由。"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:349
msgid "To configure the protected routes using the `@RolesAllowed` annotation or the `application.properties` file, check the link:security-openid-connect[Using OpenID Connect Adapter to Protect JAX-RS Applications] guide. For more details, check the link:security[Security guide]."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:350
#, no-wrap
msgid "Configuration Reference"
msgstr "配置参考"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:353
msgid "The configuration is based on the official https://www.keycloak.org/docs/latest/authorization_services/index.html#_enforcer_filter[Keycloak Policy Enforcer Configuration]. If you are looking for more details about the different configuration options, please take a look at this documentation,"
msgstr "以下配置基于官方文档 link:https://www.keycloak.org/docs/latest/authorization_services/index.html#_enforcer_filter[Keycloak Policy Enforcer Configuration]。如果您想要查看不同配置选项的更多细节，请参看该文档,"

#. type: Title ==
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:356
#, no-wrap
msgid "References"
msgstr "参考文献"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:359
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:360
msgid "https://www.keycloak.org/docs/latest/authorization_services/index.html[Keycloak Authorization Services Documentation]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:361
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:362
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-keycloak-authorization.adoc:362
msgid "link:security[Quarkus Security]"
msgstr ""
