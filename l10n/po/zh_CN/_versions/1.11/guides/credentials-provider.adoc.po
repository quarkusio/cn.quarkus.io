# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.11/guides/credentials-provider.adoc:6
#, no-wrap
msgid "Quarkus - Using a Credentials Provider"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/credentials-provider.adoc:18
msgid "Interacting with a datastore typically implies first connecting using credentials.  Those credentials will allow the client to be identified, authenticated and eventually authorized.  Username/password based authentication is very common, but that is not by any means the only one.  Such credentials information may appear in the application configuration, but it is becoming increasingly popular to store this type of sensitive information in secure stores, such as HashiCorp Vault, Azure Key Vault or the AWS Secrets Manager to name just a few."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/credentials-provider.adoc:24
msgid "To bridge datastores that consume credentials, which can take different forms, and secure stores that provide those credentials, Quarkus introduces an intermediate abstraction called `Credentials Provider`, that some extensions may support to consume credentials (e.g. `agroal`), and some others may implement to produce credentials (e.g. `vault`)."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/credentials-provider.adoc:27
msgid "This Service Programming Interface (SPI) may also be used by implementers that want to support custom providers not yet implemented in Quarkus (e.g. Azure Key Vault)."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/credentials-provider.adoc:30
msgid "Currently, the `Credentials Provider` interface is implemented by the `vault` extension, and is supported by the following credentials consumer extensions:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/credentials-provider.adoc:32
msgid "`agroal`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/credentials-provider.adoc:33
msgid "`reactive-db2-client`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/credentials-provider.adoc:34
msgid "`reactive-mysql-client`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/credentials-provider.adoc:35
msgid "`reactive-pg-client`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/credentials-provider.adoc:39
msgid "All extensions that rely on username/password authentication also allow setting configuration properties in the `application.properties` as an alternative. But the `Credentials Provider` is the only option if credentials are generated (e.g. `Vault Dynamic DB Credentials`) or if a custom credentials provider is required."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/credentials-provider.adoc:43
msgid "This guide will show how to use the `Credentials Provider` provided in the `vault` extension, then we will look at implementing a custom `Credentials Provider`, and finally we will talk about additional considerations regarding implementing a `Credentials Provider` in a new extension."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/credentials-provider.adoc:46
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: upstream/_versions/1.11/guides/credentials-provider.adoc:49
msgid "To complete this guide, you need:"
msgstr "要完成这个指南，你需要："

#. type: Plain text
#: upstream/_versions/1.11/guides/credentials-provider.adoc:51
msgid "roughly 20 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/credentials-provider.adoc:52
msgid "an IDE"
msgstr "一个编辑器"

#. type: Plain text
#: upstream/_versions/1.11/guides/credentials-provider.adoc:53
msgid "JDK 1.8+ installed with `JAVA_HOME` configured appropriately"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/credentials-provider.adoc:54
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_versions/1.11/guides/credentials-provider.adoc:55
msgid "Docker installed"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/credentials-provider.adoc:56
#, no-wrap
msgid "Vault Credentials Provider"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/credentials-provider.adoc:59
msgid "To configure a `Vault Credentials Provider` you need to provide the following properties:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/credentials-provider.adoc:63
#, no-wrap
msgid "quarkus.vault.credentials-provider.<name>.<property>=<value>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/credentials-provider.adoc:66
msgid "The `<name>` will be used in the consumer to refer to this provider. The `<property>` and `<value>` fields are specific to the `Vault Credentials Provider`. For complete details, please refer to the {vault-datasource-guide}."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/credentials-provider.adoc:68
msgid "For instance:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/credentials-provider.adoc:72
#, no-wrap
msgid "quarkus.vault.credentials-provider.mydatabase.kv-path=myapps/vault-quickstart/db\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/credentials-provider.adoc:75
msgid "Once defined, the `mydatabase` provider can be used in any extension that supports the `Credentials Provider` interface. For instance in `agroal`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/credentials-provider.adoc:83
#, no-wrap
msgid ""
"# configure your datasource\n"
"quarkus.datasource.db-kind = postgresql\n"
"quarkus.datasource.username = sarah\n"
"quarkus.datasource.credentials-provider = mydatabase\n"
"quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/mydatabase\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/credentials-provider.adoc:90
msgid "Note that `quarkus.datasource.username` is the original `agroal` property, whereas the `password` property is not included because the value will come from the `mydatabase` credentials provider we just defined.  An alternative is to define both username and password in Vault and drop the `quarkus.datasource.username` property from configuration. All consuming extensions do support the ability to fetch both the username and password from the provider, or just the password."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/credentials-provider.adoc:91
#, no-wrap
msgid "Custom Credentials Provider"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/credentials-provider.adoc:94
msgid "Implementing a custom credentials provider is the only option when a vault product is not yet supported in Quarkus, or if credentials need to be retrieved from a custom store."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/credentials-provider.adoc:96
msgid "The only interface to implement is:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/credentials-provider.adoc:100
#, no-wrap
msgid "public interface CredentialsProvider {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/credentials-provider.adoc:103
#, no-wrap
msgid ""
"    String USER_PROPERTY_NAME = \"user\";\n"
"    String PASSWORD_PROPERTY_NAME = \"password\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/credentials-provider.adoc:105
#, no-wrap
msgid "    Map<String, String> getCredentials(String credentialsProviderName);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/credentials-provider.adoc:107
#: upstream/_versions/1.11/guides/credentials-provider.adoc:131
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/credentials-provider.adoc:110
msgid "`USER_PROPERTY_NAME` and `PASSWORD_PROPERTY_NAME` are standard properties that should be recognized by any consuming extension that support username/password based authentication."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/credentials-provider.adoc:112
msgid "It is required that implementations be valid `@ApplicationScoped` CDI beans."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/credentials-provider.adoc:114
msgid "Here is a simple example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/credentials-provider.adoc:120
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@Unremovable\n"
"public class MyCredentialsProvider implements CredentialsProvider {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/credentials-provider.adoc:123
#, no-wrap
msgid ""
"\t@Override\n"
"\tpublic Map<String, String> getCredentials(String credentialsProviderName) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/credentials-provider.adoc:129
#, no-wrap
msgid ""
"\t\tMap<String, String> properties = new HashMap<>();\n"
"\t\tproperties.put(USER_PROPERTY_NAME, \"hibernate_orm_test\");\n"
"\t\tproperties.put(PASSWORD_PROPERTY_NAME, \"hibernate_orm_test\");\n"
"\t\treturn properties;\n"
"\t}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/credentials-provider.adoc:134
msgid "Note that we decided here to return both the username and the password."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/credentials-provider.adoc:136
msgid "This provider may be used in a datasource definition like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/credentials-provider.adoc:142
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.datasource.credentials-provider=custom\n"
"quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5431/hibernate_orm_test\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/credentials-provider.adoc:145
msgid "It is also possible to pass configuration properties to the provider using standard MicroProfile Config injection:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/credentials-provider.adoc:149
#, no-wrap
msgid "custom.foo=bar\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/credentials-provider.adoc:152
msgid "And in the provider implementation:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/credentials-provider.adoc:157
#, no-wrap
msgid ""
"@Inject\n"
"Config config;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/credentials-provider.adoc:160
#, no-wrap
msgid ""
"@Override\n"
"public Map<String, String> getCredentials(String credentialsProviderName) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/credentials-provider.adoc:163
#, no-wrap
msgid ""
"    System.out.println(\"MyCredentialsProvider called with foo=\" + config.getValue(credentialsProviderName + \".foo\", String.class));\n"
"    ...\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/credentials-provider.adoc:165
#, no-wrap
msgid "New Credentials Provider extension"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/credentials-provider.adoc:168
msgid "When creating a custom credentials provider in a new extension, there are a few additional considerations."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/credentials-provider.adoc:170
msgid "First, you need to name it to avoid collisions in case multiple credentials providers are available in the project:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/credentials-provider.adoc:177
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@Unremovable\n"
"@Named(\"my-credentials-provider\")\n"
"public class MyCredentialsProvider implements CredentialsProvider {\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/credentials-provider.adoc:180
msgid "It is the responsibility of the consumer to allow a `credentials-provider-name` property:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/credentials-provider.adoc:185
#, no-wrap
msgid ""
"quarkus.datasource.credentials-provider = custom\n"
"quarkus.datasource.credentials-provider-name = my-credentials-provider\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/credentials-provider.adoc:189
msgid "The extension should allow runtime config, such as the `CredentialsProviderConfig` from the `vault` extension to configure any custom property in the provider. For an AWS Secrets Manager extension, this could be:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/credentials-provider.adoc:191
msgid "`region`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/credentials-provider.adoc:192
msgid "`credentials-type`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/credentials-provider.adoc:193
msgid "`secrets-id`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/credentials-provider.adoc:197
msgid "Note also that some consumers such as `agroal` will add to their connection configuration any properties returned by the credentials provider, not just the username and password. So when you design the new credentials provider limit the properties to what would be understood by consumers, or provide appropriate configuration options to support different modes."
msgstr ""
