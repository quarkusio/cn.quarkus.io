# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:6
#, no-wrap
msgid "Quarkus - Measuring the coverage of your tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:22
msgid "Learn how to measure the test coverage of your application. This guide covers:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:24
msgid "Measuring the coverage of your Unit Tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:25
msgid "Measuring the coverage of your Integration Tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:26
msgid "Separating the execution of your Unit Tests and Integration Tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:27
msgid "Consolidating the coverage for all your tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:29
msgid "Please note that code coverage is not supported in native mode."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:30
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:33
msgid "To complete this guide, you need:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:35
msgid "less than 15 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:36
msgid "an IDE"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:37
msgid "JDK 1.8+ installed with JAVA_HOME configured appropriately"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:38
msgid "Apache Maven {maven-version}"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:39
msgid "Having completed the link:getting-started-testing[Testing your application guide]"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:40
#, no-wrap
msgid "Architecture"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:44
msgid "The application built in this guide is just a JAX-RS endpoint (hello world) that relies on dependency injection to use a service.  The service will be tested with JUnit 5 and the endpoint will be annotated via a `@QuarkusTest` annotation."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:45
#, no-wrap
msgid "Solution"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:49
msgid "We recommend that you follow the instructions in the next sections and create the application step by step. However, you can go right to the completed example.  Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:51
msgid "The solution is located in the `tests-with-coverage-quickstart` {quickstarts-tree-url}/tests-with-coverage-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:52
#, no-wrap
msgid "Starting from a simple project and two tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:55
msgid "Let's start from an empty application created with the Quarkus Maven plugin:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:62
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=tests-with-coverage-quickstart\n"
"cd tests-with-coverage-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:65
msgid "Now we'll be adding all the elements necessary to have an application that is properly covered with tests."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:67
msgid "First, an application serving a hello endpoint:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:71
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:109
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:127
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:146
#, no-wrap
msgid "package org.acme.testcoverage;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:78
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.PathParam;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:81
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class GreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:83
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:402
#, no-wrap
msgid "    private final GreetingService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:88
#, no-wrap
msgid ""
"    @Inject\n"
"    public GreetingResource(GreetingService service) {\n"
"        this.service = service;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:95
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:383
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"/greeting/{name}\")\n"
"    public String greeting(@PathParam(\"name\") String name) {\n"
"        return service.greeting(name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:102
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:390
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"hello\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:105
msgid "This endpoint uses a greeting service:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:111
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:114
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class GreetingService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:118
#, no-wrap
msgid ""
"    public String greeting(String name) {\n"
"        return \"hello \" + name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:120
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:123
msgid "The project will also need some tests. First a simple JUnit:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:130
#, no-wrap
msgid ""
"import org.junit.jupiter.api.Assertions;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:132
#, no-wrap
msgid "public class GreetingServiceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:139
#, no-wrap
msgid ""
"    @Test\n"
"    public void testGreetingService() {\n"
"        GreetingService service = new GreetingService();\n"
"        Assertions.assertEquals(\"hello Quarkus\", service.greeting(\"Quarkus\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:142
msgid "But also a `@QuarkusTest`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:150
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.junit.jupiter.api.Tag;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:152
#, no-wrap
msgid "import java.util.UUID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:155
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:159
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@Tag(\"integration\")\n"
"public class GreetingResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:168
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHelloEndpoint() {\n"
"        given()\n"
"          .when().get(\"/hello\")\n"
"          .then()\n"
"             .statusCode(200)  \n"
"             .body(is(\"hello\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:180
#, no-wrap
msgid ""
"    @Test\n"
"    public void testGreetingEndpoint() {\n"
"        String uuid = UUID.randomUUID().toString();\n"
"        given()\n"
"          .pathParam(\"name\", uuid)\n"
"          .when().get(\"/hello/greeting/{name}\")\n"
"          .then()\n"
"            .statusCode(200)\n"
"            .body(is(\"hello \" + uuid));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:183
msgid "The first one will be our example of a Unit Test and the second one will be our example of Integration Test."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:184
#, no-wrap
msgid "Separating executions of Unit Tests and Integration Tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:188
msgid "You may want to consider that JUnits and QuarkusTests are two different kind of tests and that they deserve to be separated. This way you could run them separately, in different cases or some more often than the others.  In order to do so, we'll use a feature of JUnit 5 that allows us to tag some tests. Let's tag `GreetingResourceTest.java` and specify that it is an Integration Test:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:193
#, no-wrap
msgid ""
"import org.junit.jupiter.api.Tag;\n"
"...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:199
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@Tag(\"integration\")\n"
"public class GreetingResourceTest {\n"
"    ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:202
msgid "We're now able to distinguish unit tests and integration tests. Now, let's bind them to different Maven lifecycle phases. Let's use surefire to bind unit tests to the *test* phase and the integration tests to the *integration-test* phase."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:237
#, no-wrap
msgid ""
"<project>\n"
"    ...\n"
"    <build>\n"
"        <plugins>\n"
"            <plugin>\n"
"                <artifactId>maven-surefire-plugin</artifactId>\n"
"                <version>${surefire-plugin.version}</version>\n"
"                <configuration>\n"
"                    <excludedGroups>integration</excludedGroups>\n"
"                    <systemPropertyVariables>\n"
"                        <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"                        <maven.home>${maven.home}</maven.home>\n"
"                    </systemPropertyVariables>\n"
"                </configuration>\n"
"                <executions>\n"
"                    <execution>\n"
"                        <id>integration-tests</id>\n"
"                        <phase>integration-test</phase>\n"
"                        <goals>\n"
"                            <goal>test</goal>\n"
"                        </goals>\n"
"                        <configuration>\n"
"                            <excludedGroups>!integration</excludedGroups>\n"
"                            <groups>integration</groups>\n"
"                        </configuration>\n"
"                    </execution>\n"
"                </executions>\n"
"            </plugin>\n"
"        </plugins>\n"
"    </build>\n"
"    ...\n"
"</project>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:241
msgid "This way, the `QuarkusTest` instances will be executed as part of the `integration-test` build phase while the other JUnit tests will still be ran during the `test` phase.  You can run all the tests with the command `./mvnw clean verify` (and you will notice that two tests are ran in different phases)."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:242
#, no-wrap
msgid "Measuring the coverage of JUnit tests using JaCoCo"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:245
msgid "It is now time to introduce JaCoCo to measure the coverage. The straightforward way to add JaCoCo to your build is to reference the plugin in your `pom.xml`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:252
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:296
#, no-wrap
msgid ""
"    <properties>\n"
"    ...\n"
"        <jacoco.version>0.8.4</jacoco.version>\n"
"    </properties>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:281
#, no-wrap
msgid ""
"    <build>\n"
"        <plugins>\n"
"        ...\n"
"            <plugin>\n"
"                <groupId>org.jacoco</groupId>\n"
"                <artifactId>jacoco-maven-plugin</artifactId>\n"
"                <version>${jacoco.version}</version>\n"
"                <executions>\n"
"                    <execution>\n"
"                        <id>default-prepare-agent</id>\n"
"                        <goals>\n"
"                            <goal>prepare-agent</goal>\n"
"                        </goals>\n"
"                    </execution>\n"
"                    <execution>\n"
"                        <id>default-report</id>\n"
"                        <goals>\n"
"                            <goal>report</goal>\n"
"                        </goals>\n"
"                        <configuration>\n"
"                            <dataFile>${project.build.directory}/jacoco.exec</dataFile>\n"
"                            <outputDirectory>${project.reporting.outputDirectory}/jacoco</outputDirectory>\n"
"                        </configuration>\n"
"                    </execution>\n"
"                </executions>\n"
"            </plugin>\n"
"        </plugins>\n"
"    </build>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:284
msgid "If you run `./mvnw clean test` the coverage information will be collected during the execution of the unit tests in the file `jacoco.exec`."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:285
#, no-wrap
msgid "Measuring separately the coverage of each test type"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:289
msgid "It is not strictly necessary, but let's distinguish the coverage brought by each test type. To do so, we'll just output the coverage info in two different files, one in `jacoco-ut.exec` and one in `jacoco-it.exec`.  We also need to generate a separate report for each test execution. Let's adjust the Jacoco configuration for that:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:349
#, no-wrap
msgid ""
"    <build>\n"
"        <plugins>\n"
"        ...\n"
"            <plugin>\n"
"                <groupId>org.jacoco</groupId>\n"
"                <artifactId>jacoco-maven-plugin</artifactId>\n"
"                <version>${jacoco.version}</version>\n"
"                <executions>\n"
"                    <execution>\n"
"                        <id>prepare-agent-ut</id>\n"
"                        <goals>\n"
"                            <goal>prepare-agent</goal>\n"
"                        </goals>\n"
"                        <configuration>\n"
"                            <destFile>${project.build.directory}/jacoco-ut.exec</destFile>\n"
"                        </configuration>\n"
"                    </execution>\n"
"                    <execution>\n"
"                        <id>prepare-agent-it</id>\n"
"                        <phase>pre-integration-test</phase>\n"
"                        <goals>\n"
"                            <goal>prepare-agent</goal>\n"
"                        </goals>\n"
"                        <configuration>\n"
"                            <destFile>${project.build.directory}/jacoco-it.exec</destFile>\n"
"                        </configuration>\n"
"                    </execution>\n"
"                    <execution>\n"
"                        <id>report-ut</id>\n"
"                        <goals>\n"
"                            <goal>report</goal>\n"
"                        </goals>\n"
"                        <configuration>\n"
"                            <dataFile>${project.build.directory}/jacoco-ut.exec</dataFile>\n"
"                            <outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>\n"
"                        </configuration>\n"
"                    </execution>\n"
"                    <execution>\n"
"                        <id>report-it</id>\n"
"                        <phase>post-integration-test</phase>\n"
"                        <goals>\n"
"                            <goal>report</goal>\n"
"                        </goals>\n"
"                        <configuration>\n"
"                            <dataFile>${project.build.directory}/jacoco-it.exec</dataFile>\n"
"                            <outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>\n"
"                        </configuration>\n"
"                    </execution>\n"
"                </executions>\n"
"            </plugin>\n"
"        </plugins>\n"
"    </build>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:351
#, no-wrap
msgid "The coverage does not seem to correspond to the reality"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:354
msgid "You can now run the tests: `./mvnw clean verify` As explained earlier, it will run the unit tests first, then the integration tests. And finally, it will generate two separate reports. First a report of the coverage of the unit tests in `target/site/jacoco-ut` then a report of the coverage of the integration tests in `target/site/jacoco-it`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:356
msgid "Given the content of `GreetingResourceTest`, `GreetingResource` should have been covered. But when we open the report `target/site/jacoco-it/index.html`, the class `GreetingResource` is reported with 0% of coverage. But the fact that `GreetingService` is reported as covered shows that the test execution was actually recorded. How come?"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:358
msgid "During the report generation, you may have noticed a warning:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:363
#, no-wrap
msgid ""
"[WARNING] Classes in bundle '***' do no match with execution data. For report generation the same class files must be used as at runtime.\n"
"[WARNING] Execution data for class org/acme/testcoverage/GreetingResource does not match.\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:367
msgid "It seems that Quarkus and JaCoCo step on each other's toes. What happens is that Quarkus transforms the JAX-RS resources (and also the Panache files).  You may have noticed that `GreetingResource` was not written in the simplest way like:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:373
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:400
#, no-wrap
msgid ""
"...\n"
"@Path(\"/hello\")\n"
"public class GreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:376
#, no-wrap
msgid ""
"    @Inject\n"
"    GreetingService service;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:394
msgid "Above, the constructor is implicit and we use injection to have an instance of `GreetingService`. Note that, with this code relying on an implicit constructor, the coverage would have been reported properly by JaCoCo.  Instead, we introduced a constructor based injection:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:409
#, no-wrap
msgid ""
"    @Inject\n"
"    public GreetingResource(GreetingService service) {\n"
"        this.service = service;\n"
"    }\n"
"...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:413
msgid "Some might say that this approach is preferable since the field can be *final* like this. Anyway, in some cases you might need an explicit constructor. And, in that case, the coverage is not reported properly by JaCoCo.  This is because Quarkus generates a constructor without any parameter and does some bytecode manipulations in order to add it to the class. That is what happened here, just before the execution of the integration tests:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:419
#, no-wrap
msgid ""
"[INFO] --- quarkus-maven-plugin:0.16.0:build (default) @ getting-started-testing ---\n"
"[INFO] [io.quarkus.deployment.QuarkusAugmentor] Beginning quarkus augmentation\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:422
msgid "As a consequence, JaCoCo does not recognize the classes when it wants to create its report. But wait... there is a solution."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:423
#, no-wrap
msgid "Instrumenting the classes instead"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:427
msgid "JaCoCo has two modes. The first one is based on an agent and instruments classes on-the-fly. Unfortunately, this is incompatible with the dynamic classfile transformations that Quarkus does. The second mode is called link:https://www.eclemma.org/jacoco/trunk/doc/offline.html[offline instrumentation]. Classes are pre-instrumented in advance via the *jacoco:instrument* Maven goal and during their usage (when the tests are ran), *jacocoagent.jar* must be added to the classpath.  Once the tests have been executed, it is recommended to restore the original classes using the *jacoco:restore-instrumented-classes* Maven goal."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:429
msgid "Let's first add the dependency on *jacocoagent.jar*:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:445
#, no-wrap
msgid ""
"<project>\n"
"    ...\n"
"    <dependencies>\n"
"        ...\n"
"        <dependency>\n"
"            <groupId>org.jacoco</groupId>\n"
"            <artifactId>org.jacoco.agent</artifactId>\n"
"            <classifier>runtime</classifier>\n"
"            <scope>test</scope>\n"
"            <version>${jacoco.version}</version>\n"
"        </dependency>\n"
"    </dependencies>\n"
"</project>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:448
msgid "Then let's configure three jacoco plugin goals for unit tests:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:450
msgid "One to instrument the classes during the *process-classes* phase"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:451
msgid "One to restore the original classes during the *prepare-package* phase (after the tests are ran)"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:452
msgid "One to generate the report during the *verify* phase (the report generation requires the original classes to have been restored)"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:454
msgid "and a similar setup for the integration tests too:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:519
#, no-wrap
msgid ""
"<project>\n"
"    ...\n"
"    <build>\n"
"        <plugins>\n"
"            ...\n"
"            <plugin>\n"
"                <groupId>org.jacoco</groupId>\n"
"                <artifactId>jacoco-maven-plugin</artifactId>\n"
"                <version>${jacoco.version}</version>\n"
"                <executions>\n"
"                    <execution>\n"
"                        <id>instrument-ut</id>\n"
"                        <goals>\n"
"                            <goal>instrument</goal>\n"
"                        </goals>\n"
"                    </execution>\n"
"                    <execution>\n"
"                        <id>restore-ut</id>\n"
"                        <goals>\n"
"                            <goal>restore-instrumented-classes</goal>\n"
"                        </goals>\n"
"                    </execution>\n"
"                    <execution>\n"
"                        <id>report-ut</id>\n"
"                        <goals>\n"
"                            <goal>report</goal>\n"
"                        </goals>\n"
"                        <configuration>\n"
"                            <dataFile>${project.build.directory}/jacoco-ut.exec</dataFile>\n"
"                            <outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>\n"
"                        </configuration>\n"
"                    </execution>\n"
"                    <execution>\n"
"                        <id>instrument-it</id>\n"
"                        <phase>pre-integration-test</phase>\n"
"                        <goals>\n"
"                            <goal>instrument</goal>\n"
"                        </goals>\n"
"                    </execution>\n"
"                    <execution>\n"
"                        <id>restore-it</id>\n"
"                        <phase>post-integration-test</phase>\n"
"                        <goals>\n"
"                            <goal>restore-instrumented-classes</goal>\n"
"                        </goals>\n"
"                    </execution>\n"
"                    <execution>\n"
"                        <id>report-it</id>\n"
"                        <phase>post-integration-test</phase>\n"
"                        <goals>\n"
"                            <goal>report</goal>\n"
"                        </goals>\n"
"                        <configuration>\n"
"                            <dataFile>${project.build.directory}/jacoco-it.exec</dataFile>\n"
"                            <outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>\n"
"                        </configuration>\n"
"                    </execution>\n"
"                </executions>\n"
"            </plugin>\n"
"        </plugins>\n"
"    </build>\n"
"</project>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:522
msgid "It also requires a small change in the Surefire configuration. Note below that we specified `jacoco-agent.destfile` as a system property in the default case (unit tests) and for the integration tests."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:561
#, no-wrap
msgid ""
"<project>\n"
"    ...\n"
"    <build>\n"
"        <plugins>\n"
"            ...\n"
"            <plugin>\n"
"                <artifactId>maven-surefire-plugin</artifactId>\n"
"                <version>${surefire-plugin.version}</version>\n"
"                <configuration>\n"
"                    <excludedGroups>integration</excludedGroups>\n"
"                    <systemPropertyVariables>\n"
"                        <jacoco-agent.destfile>${project.build.directory}/jacoco-ut.exec</jacoco-agent.destfile>\n"
"                        <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"                        <maven.home>${maven.home}</maven.home>\n"
"                    </systemPropertyVariables>\n"
"                </configuration>\n"
"                <executions>\n"
"                    <execution>\n"
"                        <id>integration-tests</id>\n"
"                        <phase>integration-test</phase>\n"
"                        <goals>\n"
"                            <goal>test</goal>\n"
"                        </goals>\n"
"                        <configuration>\n"
"                            <excludedGroups>!integration</excludedGroups>\n"
"                            <groups>integration</groups>\n"
"                            <systemPropertyVariables>\n"
"                                <jacoco-agent.destfile>${project.build.directory}/jacoco-it.exec</jacoco-agent.destfile>\n"
"                            </systemPropertyVariables>\n"
"                        </configuration>\n"
"                    </execution>\n"
"                </executions>\n"
"            </plugin>\n"
"        </plugins>\n"
"    </build>\n"
"</project>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:564
msgid "Let's now check the generated report that can be found in `target/site/jacoco-it/index.html`. The report now shows that `GreetingResource` is actually properly covered! Yay!"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:565
#, no-wrap
msgid "Bonus: Building a consolidated report for Unit Tests and Integration Tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:568
msgid "So, finally, let's improve the setup even further and let's merge the two execution files (*jacoco-ut.exec* and *jacoco-it.exec*) into one consolidated report and generate a consolidated report that will show the coverage of all your tests combined."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:570
msgid "You should end up with something like this (note the addition of the `merge-results` and `post-merge-report` executions):"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:703
#, no-wrap
msgid ""
"<project>\n"
"    ...\n"
"    <build>\n"
"        <plugins>\n"
"            <plugin>\n"
"                <artifactId>maven-surefire-plugin</artifactId>\n"
"                <version>${surefire-plugin.version}</version>\n"
"                <configuration>\n"
"                    <excludedGroups>integration</excludedGroups>\n"
"                    <systemPropertyVariables>\n"
"                        <jacoco-agent.destfile>${project.build.directory}/jacoco-ut.exec</jacoco-agent.destfile>\n"
"                        <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"                        <maven.home>${maven.home}</maven.home>\n"
"                    </systemPropertyVariables>\n"
"                </configuration>\n"
"                <executions>\n"
"                    <execution>\n"
"                        <id>integration-tests</id>\n"
"                        <phase>integration-test</phase>\n"
"                        <goals>\n"
"                            <goal>test</goal>\n"
"                        </goals>\n"
"                        <configuration>\n"
"                            <excludedGroups>!integration</excludedGroups>\n"
"                            <groups>integration</groups>\n"
"                            <systemPropertyVariables>\n"
"                                <jacoco-agent.destfile>${project.build.directory}/jacoco-it.exec</jacoco-agent.destfile>\n"
"                            </systemPropertyVariables>\n"
"                        </configuration>\n"
"                    </execution>\n"
"                </executions>\n"
"            </plugin>\n"
"            ...\n"
"            <plugin>\n"
"                <groupId>org.jacoco</groupId>\n"
"                <artifactId>jacoco-maven-plugin</artifactId>\n"
"                <version>${jacoco.version}</version>\n"
"                <executions>\n"
"                    <execution>\n"
"                        <id>instrument-ut</id>\n"
"                        <goals>\n"
"                            <goal>instrument</goal>\n"
"                        </goals>\n"
"                    </execution>\n"
"                    <execution>\n"
"                        <id>restore-ut</id>\n"
"                        <goals>\n"
"                            <goal>restore-instrumented-classes</goal>\n"
"                        </goals>\n"
"                    </execution>\n"
"                    <execution>\n"
"                        <id>report-ut</id>\n"
"                        <goals>\n"
"                            <goal>report</goal>\n"
"                        </goals>\n"
"                        <configuration>\n"
"                            <dataFile>${project.build.directory}/jacoco-ut.exec</dataFile>\n"
"                            <outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>\n"
"                        </configuration>\n"
"                    </execution>\n"
"                    <execution>\n"
"                        <id>instrument-it</id>\n"
"                        <phase>pre-integration-test</phase>\n"
"                        <goals>\n"
"                            <goal>instrument</goal>\n"
"                        </goals>\n"
"                    </execution>\n"
"                    <execution>\n"
"                        <id>restore-it</id>\n"
"                        <phase>post-integration-test</phase>\n"
"                        <goals>\n"
"                            <goal>restore-instrumented-classes</goal>\n"
"                        </goals>\n"
"                    </execution>\n"
"                    <execution>\n"
"                        <id>report-it</id>\n"
"                        <phase>post-integration-test</phase>\n"
"                        <goals>\n"
"                            <goal>report</goal>\n"
"                        </goals>\n"
"                        <configuration>\n"
"                            <dataFile>${project.build.directory}/jacoco-it.exec</dataFile>\n"
"                            <outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>\n"
"                        </configuration>\n"
"                    </execution>\n"
"                    <execution>\n"
"                        <id>merge-results</id>\n"
"                        <phase>verify</phase>\n"
"                        <goals>\n"
"                            <goal>merge</goal>\n"
"                        </goals>\n"
"                        <configuration>\n"
"                            <fileSets>\n"
"                                <fileSet>\n"
"                                    <directory>${project.build.directory}</directory>\n"
"                                    <includes>\n"
"                                        <include>*.exec</include>\n"
"                                    </includes>\n"
"                                </fileSet>\n"
"                            </fileSets>\n"
"                            <destFile>${project.build.directory}/jacoco.exec</destFile>\n"
"                        </configuration>\n"
"                    </execution>\n"
"                    <execution>\n"
"                        <id>post-merge-report</id>\n"
"                        <phase>verify</phase>\n"
"                        <goals>\n"
"                            <goal>report</goal>\n"
"                        </goals>\n"
"                        <configuration>\n"
"                            <dataFile>${project.build.directory}/jacoco.exec</dataFile>\n"
"                            <outputDirectory>${project.reporting.outputDirectory}/jacoco</outputDirectory>\n"
"                        </configuration>\n"
"                    </execution>\n"
"                </executions>\n"
"            </plugin>\n"
"        </plugins>\n"
"    </build>\n"
"    ...\n"
"    <dependencies>\n"
"        ...\n"
"        <dependency>\n"
"            <groupId>org.jacoco</groupId>\n"
"            <artifactId>org.jacoco.agent</artifactId>\n"
"            <classifier>runtime</classifier>\n"
"            <scope>test</scope>\n"
"            <version>${jacoco.version}</version>\n"
"        </dependency>\n"
"    </dependencies>\n"
"</project>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:705
#, no-wrap
msgid "Conclusion"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/tests-with-coverage.adoc:708
msgid "You now have all the information you need to study the coverage of your tests! But remember, some code that is not covered is certainly not well tested. But some code that is covered is not necessarily *well* tested. Make sure to write good tests!"
msgstr ""
