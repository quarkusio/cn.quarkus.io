# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.11/guides/micrometer.adoc:6
#, no-wrap
msgid "Quarkus - Micrometer Metrics"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:12
msgid "This guide demonstrates how your Quarkus application can utilize the Micrometer metrics library for runtime and application metrics."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:16
msgid "Apart from application-specific metrics, which are described in this guide, you may also utilize built-in metrics exposed by various Quarkus extensions. These are described in the guide for each particular extension that supports built-in metrics."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:18
msgid "Micrometer is the recommended approach to metrics for Quarkus."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/micrometer.adoc:19
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:22
msgid "To complete this guide, you need:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:24
msgid "less than 15 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:25
msgid "an IDE"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:26
msgid "JDK 1.8+ installed with `JAVA_HOME` configured appropriately"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:27
msgid "Apache Maven {maven-version}"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/micrometer.adoc:28
#, no-wrap
msgid "Architecture"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:32
msgid "In this example, we build a very simple microservice which offers one REST endpoint and that determines if a number is prime."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/micrometer.adoc:33
#, no-wrap
msgid "Solution"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:37
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:39
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:41
msgid "The solution is located in the `micrometer-quickstart` {quickstarts-tree-url}/micrometer-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/micrometer.adoc:42
#, no-wrap
msgid "Creating the Maven Project"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:48
msgid "Micrometer defines a core library and a set of additional libraries that support different monitoring systems.  Quarkus Micrometer extensions are structured similarly: `quarkus-micrometer` provides core micrometer support and runtime integration and other supporting Quarkus and Quarkiverse extensions bring in additional dependencies and requirements to support specific monitoring systems."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:50
msgid "For this example, we'll use the Prometheus registry."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:52
msgid "First, we need a new project. Create a new project with the following command:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/micrometer.adoc:62
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=micrometer-quickstart \\\n"
"    -DclassName=\"org.acme.micrometer.PrimeNumberResource\" \\\n"
"    -Dpath=\"/\" \\\n"
"    -Dextensions=\"resteasy,micrometer-registry-prometheus\"\n"
"cd micrometer-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:67
msgid "This command generates a Maven project, that imports the `micrometer-registry-prometheus` extension as a dependency.  This extension will load the core `micrometer` extension as well as additional library dependencies required to support prometheus."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:70
msgid "If you already have your Quarkus project configured, you can add the `micrometer-registry-prometheus` extension to your project by running the following command in your project base directory:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/micrometer.adoc:74
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"micrometer-registry-prometheus\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:77
msgid "This will add the following to your `pom.xml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/micrometer.adoc:84
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-micrometer-registry-prometheus</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/micrometer.adoc:86
#, no-wrap
msgid "Writing the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:91
msgid "The application consists of a single class that implements an algorithm for checking whether a number is prime.  This algorithm is exposed over a REST interface. With the Micrometer extension enabled, metrics for all http server requests are collected automatically."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:93
msgid "We do want to add a few other metrics to demonstrate how those types work:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:95
msgid "A counter will be incremented for every prime number discovered"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:96
msgid "A gauge will store the highest prime number discovered"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:97
msgid "A timer will record the time spent testing if ia number is prime."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/micrometer.adoc:101
#, no-wrap
msgid "package org.acme.micrometer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/micrometer.adoc:103
#, no-wrap
msgid "import io.micrometer.core.instrument.MeterRegistry;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/micrometer.adoc:111
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.PathParam;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import java.util.concurrent.atomic.LongAccumulator;\n"
"import java.util.function.Supplier;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/micrometer.adoc:114
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"public class PrimeNumberResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/micrometer.adoc:117
#, no-wrap
msgid ""
"    private final LongAccumulator highestPrime = new LongAccumulator(Long::max, 0);\n"
"    private final MeterRegistry registry;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/micrometer.adoc:120
#, no-wrap
msgid ""
"    PrimeNumberResource(MeterRegistry registry) {\n"
"        this.registry = registry;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/micrometer.adoc:126
#, no-wrap
msgid ""
"        // Create a gauge that uses the highestPrimeNumberSoFar method\n"
"        // to obtain the highest observed prime number\n"
"        registry.gauge(\"prime.number.max\", this,\n"
"                PrimeNumberResource::highestObservedPrimeNumber);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/micrometer.adoc:143
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/{number}\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String checkIfPrime(@PathParam(\"number\") long number) {\n"
"        if (number < 1) {\n"
"            return \"Only natural numbers can be prime numbers.\";\n"
"        }\n"
"        if (number == 1) {\n"
"            return \"1 is not prime.\";\n"
"        }\n"
"        if (number == 2) {\n"
"            return \"2 is prime.\";\n"
"        }\n"
"        if (number % 2 == 0) {\n"
"            return number + \" is not prime, it is divisible by 2.\";\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/micrometer.adoc:153
#, no-wrap
msgid ""
"        Supplier<String> supplier = () -> {\n"
"            for (int i = 3; i < Math.floor(Math.sqrt(number)) + 1; i = i + 2) {\n"
"                if (number % i == 0) {\n"
"                    return number + \" is not prime, is divisible by \" + i + \".\";\n"
"                }\n"
"            }\n"
"            highestPrime.accumulate(number);\n"
"            return number + \" is prime.\";\n"
"        };\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/micrometer.adoc:156
#, no-wrap
msgid ""
"        return registry.timer(\"prime.number.test\").wrap(supplier).get();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/micrometer.adoc:165
#, no-wrap
msgid ""
"    /**\n"
"     * This method is called by the registered {@code highest.prime.number} gauge.\n"
"     * @return the highest observed prime value\n"
"     */\n"
"    long highestObservedPrimeNumber() {\n"
"        return highestPrime.get();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/micrometer.adoc:167
#, no-wrap
msgid "Running and using the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:170
msgid "To run the microservice in dev mode, use `./mvnw clean compile quarkus:dev`"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/micrometer.adoc:171
#, no-wrap
msgid "Generate some values for the metrics"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:174
msgid "First, ask the endpoint whether some numbers are prime numbers."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/micrometer.adoc:178
#, no-wrap
msgid "curl localhost:8080/350\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:181
msgid "The application will respond that 350 is not a prime number because it can be divided by 2."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:183
msgid "Now for some large prime number so that the test takes a bit more time:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/micrometer.adoc:187
#, no-wrap
msgid "curl localhost:8080/629521085409773\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:191
msgid "The application will respond that 629521085409773 is a prime number.  If you want, try some more calls with numbers of your choice."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/micrometer.adoc:192
#, no-wrap
msgid "Review the generated metrics"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:195
msgid "To view the metrics, execute `curl localhost:8080/q/metrics/`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:197
msgid "Prometheus-formatted metrics will be returned in plain text in no particular order."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:202
msgid "The application above has only one custom gauge that measures the time spent determining whether or not a number is prime. The Micrometer extension enables additional system, jvm, and http metrics. A subset of the collected metrics are shown below."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/micrometer.adoc:280
#, no-wrap
msgid ""
"# HELP http_server_requests_seconds\n"
"# TYPE http_server_requests_seconds summary\n"
"http_server_requests_seconds_count{method=\"GET\",outcome=\"SUCCESS\",status=\"200\",uri=\"/{number}\",} 4.0\n"
"http_server_requests_seconds_sum{method=\"GET\",outcome=\"SUCCESS\",status=\"200\",uri=\"/{number}\",} 0.041501773\n"
"# HELP http_server_requests_seconds_max\n"
"# TYPE http_server_requests_seconds_max gauge\n"
"http_server_requests_seconds_max{method=\"GET\",outcome=\"SUCCESS\",status=\"200\",uri=\"/{number}\",} 0.038066359\n"
"# HELP jvm_threads_peak_threads The peak live thread count since the Java virtual machine started or peak was reset\n"
"# TYPE jvm_threads_peak_threads gauge\n"
"jvm_threads_peak_threads 56.0\n"
"# HELP http_server_connections_seconds_max\n"
"# TYPE http_server_connections_seconds_max gauge\n"
"http_server_connections_seconds_max 0.102580737\n"
"# HELP http_server_connections_seconds\n"
"# TYPE http_server_connections_seconds summary\n"
"http_server_connections_seconds_active_count 5.0\n"
"http_server_connections_seconds_duration_sum 0.175032815\n"
"# HELP system_load_average_1m The sum of the number of runnable entities queued to available processors and the number of runnable entities running on the available processors averaged over a period of time\n"
"# TYPE system_load_average_1m gauge\n"
"system_load_average_1m 2.4638671875\n"
"# HELP http_server_bytes_written_max\n"
"# TYPE http_server_bytes_written_max gauge\n"
"http_server_bytes_written_max 39.0\n"
"# HELP http_server_bytes_written\n"
"# TYPE http_server_bytes_written summary\n"
"http_server_bytes_written_count 4.0\n"
"http_server_bytes_written_sum 99.0\n"
"# HELP jvm_classes_loaded_classes The number of classes that are currently loaded in the Java virtual machine\n"
"# TYPE jvm_classes_loaded_classes gauge\n"
"jvm_classes_loaded_classes 9341.0\n"
"# HELP prime_number_max\n"
"# TYPE prime_number_max gauge\n"
"prime_number_max 887.0\n"
"# HELP jvm_info JVM version info\n"
"# TYPE jvm_info gauge\n"
"jvm_info{runtime=\"OpenJDK Runtime Environment\",vendor=\"Oracle Corporation\",version=\"13.0.2+8\",} 1.0\n"
"# HELP jvm_classes_unloaded_classes_total The total number of classes unloaded since the Java virtual machine has started execution\n"
"# TYPE jvm_classes_unloaded_classes_total counter\n"
"jvm_classes_unloaded_classes_total 28.0\n"
"# HELP prime_number_test_seconds\n"
"# TYPE prime_number_test_seconds summary\n"
"prime_number_test_seconds_count 3.0\n"
"prime_number_test_seconds_sum 1.94771E-4\n"
"# HELP prime_number_test_seconds_max\n"
"# TYPE prime_number_test_seconds_max gauge\n"
"prime_number_test_seconds_max 1.76162E-4\n"
"# HELP http_server_bytes_read\n"
"# TYPE http_server_bytes_read summary\n"
"http_server_bytes_read_count 4.0\n"
"http_server_bytes_read_sum 0.0\n"
"# HELP http_server_bytes_read_max\n"
"# TYPE http_server_bytes_read_max gauge\n"
"http_server_bytes_read_max 0.0\n"
"# HELP jvm_threads_states_threads The current number of threads having NEW state\n"
"# TYPE jvm_threads_states_threads gauge\n"
"jvm_threads_states_threads{state=\"runnable\",} 37.0\n"
"jvm_threads_states_threads{state=\"blocked\",} 0.0\n"
"jvm_threads_states_threads{state=\"waiting\",} 15.0\n"
"jvm_threads_states_threads{state=\"timed-waiting\",} 4.0\n"
"jvm_threads_states_threads{state=\"new\",} 0.0\n"
"jvm_threads_states_threads{state=\"terminated\",} 0.0\n"
"# HELP jvm_buffer_memory_used_bytes An estimate of the memory that the Java virtual machine is using for this buffer pool\n"
"# TYPE jvm_buffer_memory_used_bytes gauge\n"
"jvm_buffer_memory_used_bytes{id=\"mapped\",} 0.0\n"
"jvm_buffer_memory_used_bytes{id=\"direct\",} 149521.0\n"
"# HELP jvm_memory_committed_bytes The amount of memory in bytes that is committed for the Java virtual machine to use\n"
"# TYPE jvm_memory_committed_bytes gauge\n"
"jvm_memory_committed_bytes{area=\"nonheap\",id=\"CodeHeap 'profiled nmethods'\",} 1.1403264E7\n"
"jvm_memory_committed_bytes{area=\"heap\",id=\"G1 Survivor Space\",} 4194304.0\n"
"jvm_memory_committed_bytes{area=\"heap\",id=\"G1 Old Gen\",} 9.2274688E7\n"
"jvm_memory_committed_bytes{area=\"nonheap\",id=\"Metaspace\",} 4.9803264E7\n"
"jvm_memory_committed_bytes{area=\"nonheap\",id=\"CodeHeap 'non-nmethods'\",} 2555904.0\n"
"jvm_memory_committed_bytes{area=\"heap\",id=\"G1 Eden Space\",} 6.9206016E7\n"
"jvm_memory_committed_bytes{area=\"nonheap\",id=\"Compressed Class Space\",} 6815744.0\n"
"jvm_memory_committed_bytes{area=\"nonheap\",id=\"CodeHeap 'non-profiled nmethods'\",} 2555904.0\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:284
msgid "Note that metrics appear lazily, you often won't see any data for your endpoint until something tries to access it, etc."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/micrometer.adoc:285
#, no-wrap
msgid "Using MeterFilter to configure metrics"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:290
msgid "Micrometer uses `MeterFilter` instances to customize the metrics emitted by `MeterRegistry` instances.  The Micrometer extension will detect `MeterFilter` CDI beans and use them when initializing `MeterRegistry` instances."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/micrometer.adoc:295
#, no-wrap
msgid ""
"@Singleton\n"
"public class CustomConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/micrometer.adoc:298
#, no-wrap
msgid ""
"    @ConfigProperty(name = \"deployment.env\")\n"
"    String deploymentEnv;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/micrometer.adoc:307
#, no-wrap
msgid ""
"    /** Define common tags that apply only to a Prometheus Registry */\n"
"    @Produces\n"
"    @Singleton\n"
"    @MeterFilterConstraint(applyTo = PrometheusMeterRegistry.class)\n"
"    public MeterFilter configurePrometheusRegistries() {\n"
"        return MeterFilter.commonTags(Arrays.asList(\n"
"                Tag.of(\"registry\", \"prometheus\")));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/micrometer.adoc:315
#, no-wrap
msgid ""
"    /** Define common tags that apply globally */\n"
"    @Produces\n"
"    @Singleton\n"
"    public MeterFilter configureAllRegistries() {\n"
"        return MeterFilter.commonTags(Arrays.asList(\n"
"                Tag.of(\"env\", deploymentEnv)));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/micrometer.adoc:335
#, no-wrap
msgid ""
"    /** Enable histogram buckets for a specific timer */\n"
"    @Produces\n"
"    @Singleton\n"
"    public MeterFilter enableHistogram() {\n"
"        return new MeterFilter() {\n"
"            @Override\n"
"            public DistributionStatisticConfig configure(Meter.Id id, DistributionStatisticConfig config) {\n"
"                if(id.getName().startsWith(\"myservice\")) {\n"
"                    return DistributionStatisticConfig.builder()\n"
"                        .percentiles(0.5, 0.95)     // median and 95th percentile, not aggregable\n"
"                        .percentilesHistogram(true) // histogram buckets (e.g. prometheus histogram_quantile)\n"
"                        .build()\n"
"                        .merge(config);\n"
"                }\n"
"                return config;\n"
"            }\n"
"        };\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:340
msgid "In this example, a singleton CDI bean will produce two different `MeterFilter` beans. One will be applied only to Prometheus `MeterRegistry` instances (using the `@MeterFilterConstraint` qualifier), and another will be applied to all `MeterRegistry` instances. An application configuration property is also injected and used as a tag value."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/micrometer.adoc:341
#, no-wrap
msgid "Using other Registry implementations"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:348
msgid "If you aren't using Prometheus, you have a few options. Some Micrometer registry implementations have been wrapped in https://github.com/quarkiverse/quarkiverse-micrometer-registry[Quarkiverse extensions].  To use the Micrometer StackDriver MeterRegistry, for example, you would use the `quarkus-micrometer-registry-stackdriver` extension:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/micrometer.adoc:355
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkiverse</groupId>\n"
"    <artifactId>quarkus-micrometer-registry-stackdriver</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:359
msgid "If the Micrometer registry you would like to use does not yet have an associated extension, use the `quarkus-micrometer` extension and bring in the packaged MeterRegistry dependency directly:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/micrometer.adoc:370
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-micrometer</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>com.acme</groupId>\n"
"    <artifactId>custom-micrometer-registry</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:374
msgid "You will then need to specify your own provider to configure and initialize the MeterRegistry, as discussed in the next section."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/micrometer.adoc:375
#, no-wrap
msgid "Creating a customized MeterRegistry"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:378
msgid "Use a custom `@Produces` method to create and configure a customized `MeterRegistry` if you need to."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:380
msgid "The following example customizes the line format used for StatsD:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/micrometer.adoc:388
#, no-wrap
msgid ""
"@Produces\n"
"@Singleton\n"
"public StatsdMeterRegistry createStatsdMeterRegistry(StatsdConfig statsdConfig, Clock clock) {\n"
"    // define what to do with lines\n"
"    Consumer<String> lineLogger = line -> logger.info(line);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/micrometer.adoc:395
#, no-wrap
msgid ""
"    // inject a configuration object, and then customize the line builder\n"
"    return StatsdMeterRegistry.builder(statsdConfig)\n"
"          .clock(clock)\n"
"          .lineSink(lineLogger)\n"
"          .build();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:399
msgid "This example corresponds to the following instructions in the Micrometer documentation: https://micrometer.io/docs/registry/statsD#_customizing_the_metrics_sink"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:404
msgid "Note that the method returns the specific type of `MeterRegistry` as a `@Singleton`. Use MicroProfile Config to inject any configuration attributes you need to configure the registry. Most Micrometer registry extensions, like `quarkus-micrometer-registry-statsd`, define a producer for registry-specific configuration objects that are integrated with the Quarkus configuration model."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/micrometer.adoc:405
#, no-wrap
msgid "Support for the MicroProfile Metrics API"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:410
msgid "If you use the MicroProfile Metrics API in your application, the Micrometer extension will create an adaptive layer to map those metrics into the Micrometer registry. Note that naming conventions between the two systems will change, but you can use MeterFilters to remap names or tags to what your dashboards require."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/micrometer.adoc:417
#, no-wrap
msgid ""
"@Produces\n"
"@Singleton\n"
"public MeterFilter renameApplicationMeters() {\n"
"    final String targetMetric = PrimeResource.class.getName() + \".highestPrimeNumberSoFar\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/micrometer.adoc:432
#, no-wrap
msgid ""
"    return MeterFilter() {\n"
"        @Override\n"
"        public Meter.Id map(Meter.Id id) {\n"
"            // rename the specified metric (remove package), and drop the scope tag\n"
"            // you could also use this to prepend a scope tag (application, base, vendor, if present) to the metric name\n"
"            if (id.getName().equals(targetMetric)) {\n"
"                List<Tag> tags = id.getTags().stream().filter(x -> !\"scope\".equals(x.getKey()))\n"
"                        .collect(Collectors.toList());\n"
"                return id.withName(\"highestPrimeNumberSoFar\").replaceTags(tags);\n"
"            }\n"
"            return id;\n"
"        }\n"
"    };\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/micrometer.adoc:435
msgid "The MP Metrics API compatibility layer will be moved to a different extension in the future."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/micrometer.adoc:436
#, no-wrap
msgid "Configuration Reference"
msgstr ""
