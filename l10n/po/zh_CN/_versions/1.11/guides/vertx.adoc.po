# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.11/guides/vertx.adoc:6
#, no-wrap
msgid "Quarkus - Using Eclipse Vert.x"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:13
msgid "Eclipse https://vertx.io[Vert.x] is a toolkit for building reactive applications.  It is designed to be lightweight and embeddable.  Vert.x defines a reactive execution model and provides a large ecosystem."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:18
msgid "Quarkus is based on Vert.x, and almost all network-related features rely on Vert.x.  While lots of reactive features from Quarkus don't _show_ Vert.x, it's used underneath.  Quarkus also integrates smoothly with the Vert.x event bus (to enable asynchronous messaging passing between application components) and some reactive clients.  You can also use various Vert.x APIs in your Quarkus application, such as deploying _verticles_, instantiating clients..."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/vertx.adoc:20
#, no-wrap
msgid "Installing"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:24
msgid "To access Vert.x, well, you need to enable the `vertx` extension to use this feature.  If you are creating a new project, set the `extensions` parameter are follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:34
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=vertx-quickstart \\\n"
"    -DclassName=\"org.acme.vertx.GreetingResource\" \\\n"
"    -Dpath=\"/hello\" \\\n"
"    -Dextensions=\"resteasy,vertx\"\n"
"cd vertx-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:38
msgid "If you have an already created project, the `vertx` extension can be added to an existing Quarkus project with the `add-extension` command:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:42
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"vertx\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:45
msgid "Otherwise, you can manually add this to the dependencies section of your `pom.xml` file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:52
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-vertx</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/vertx.adoc:54
#, no-wrap
msgid "Native Transport"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:60
msgid "Vert.x is capable of using https://netty.io/wiki/native-transports.html[Netty's native transports] which offers performance improvements on certain platforms. To enable them you must include the appropriate dependency for your platform. It's usually a good idea to include both to keep your application platform agnostic. Netty is smart enough to use the correct one, that includes none at all on unsupported platforms:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:68
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.netty</groupId>\n"
"  <artifactId>netty-transport-native-epoll</artifactId>\n"
"  <classifier>linux-x86_64</classifier>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:74
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.netty</groupId>\n"
"  <artifactId>netty-transport-native-kqueue</artifactId>\n"
"  <classifier>osx-x86_64</classifier>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:77
msgid "You will also have to explicitly configure Vert.x to use the native transport. In `application.properties` add:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:81
#, no-wrap
msgid "quarkus.vertx.prefer-native-transport=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:84
msgid "Or in `application.yml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:90
#, no-wrap
msgid ""
"quarkus:\n"
"  vertx:\n"
"    prefer-native-transport: true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:93
msgid "If all is well quarkus will log:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:96
#, no-wrap
msgid "[io.qua.ver.cor.run.VertxCoreRecorder] (main) Vertx has Native Transport Enabled: true\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/vertx.adoc:98
#, no-wrap
msgid "Native Linux Transport"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:101
msgid "On Linux you can enable the following socket options:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:103
#: upstream/_versions/1.11/guides/vertx.adoc:124
msgid "SO_REUSEPORT"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:105
#: upstream/_versions/1.11/guides/vertx.adoc:126
#, no-wrap
msgid "quarkus.http.so-reuse-port=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:107
msgid "TCP_QUICKACK"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:109
#, no-wrap
msgid "quarkus.http.tcp-quick-ack=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:111
msgid "TCP_CORK"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:113
#, no-wrap
msgid "quarkus.http.tcp-cork=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:115
msgid "TCP_FASTOPEN"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:117
#, no-wrap
msgid "quarkus.http.tcp-fast-open=true\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/vertx.adoc:119
#, no-wrap
msgid "Native MacOS Transport"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:122
msgid "On MacOS Sierra and above you can enable the following socket options:"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/vertx.adoc:128
#, no-wrap
msgid "Accessing Vert.x"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:131
msgid "Once the extension has been added, you can access the _managed_ Vert.x instance using `@Inject`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:135
#: upstream/_versions/1.11/guides/vertx.adoc:601
#, no-wrap
msgid "@Inject Vertx vertx;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:139
msgid "If you are familiar with Vert.x, you know that Vert.x provides different API models.  For instance _bare_ Vert.x uses callbacks, the Mutiny variants uses `Uni` and `Multi`, the RX Java 2 version uses `Single`, `Maybe`, `Completable`, `Observable` and `Flowable`..."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:141
msgid "Quarkus provides 4 Vert.x APIs:"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/vertx.adoc:145
#, no-wrap
msgid "Name"
msgstr "名称"

#. type: Table
#: upstream/_versions/1.11/guides/vertx.adoc:145
#, no-wrap
msgid "Code"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/vertx.adoc:147
#, no-wrap
msgid "Description"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/vertx.adoc:147
#, no-wrap
msgid "_bare_"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/vertx.adoc:147
#, no-wrap
msgid "`@Inject io.vertx.core.Vertx vertx`"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/vertx.adoc:149
#, no-wrap
msgid "_bare_ Vert.x instance, the API uses callbacks."
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/vertx.adoc:149
#, no-wrap
msgid "https://smallrye.io/smallrye-mutiny/[Mutiny]"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/vertx.adoc:149
#, no-wrap
msgid "`@Inject io.vertx.mutiny.core.Vertx vertx`"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/vertx.adoc:151
#, no-wrap
msgid "The Mutiny API for Vert.x."
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/vertx.adoc:151
#, no-wrap
msgid "RX Java 2"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/vertx.adoc:151
#, no-wrap
msgid "`@Inject io.vertx.reactivex.core.Vertx vertx`"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/vertx.adoc:153
#, no-wrap
msgid "RX Java 2 Vert.x, the API uses RX Java 2 types (deprecated)."
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/vertx.adoc:153
#, no-wrap
msgid "_Axle_"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/vertx.adoc:153
#, no-wrap
msgid "`@Inject io.vertx.axle.core.Vertx vertx`"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/vertx.adoc:155
#, no-wrap
msgid "Axle Vert.x, the API uses `CompletionStage` and `Reactive Streams` (deprecated)."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:159
msgid "You may inject any of the 4 flavors of `Vertx` as well as the `EventBus` in your Quarkus application beans: `bare`, `Mutiny`, `Axle`, `RxJava2`.  They are just shims and rely on a single _managed_ Vert.x instance."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:161
msgid "You will pick one or the other depending on your use cases."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:163
msgid "`bare`: for advanced usage or if you have existing Vert.x code you want to reuse in your Quarkus application"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:164
msgid "`mutiny`: Mutiny is an event-driven reactive programming API. It uses 2 types: `Uni` and `Multi`. This is the recommended API."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:165
msgid "`Axle`: works well with Quarkus and MicroProfile APIs (`CompletionStage` for single results and `Publisher` for streams) - deprecated, it is recommended to switch to Mutiny"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:166
msgid "`Rx Java 2`: when you need support for a wide range of data transformation operators on your streams - deprecated, it is recommended to switch to Mutiny"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:168
msgid "The following snippets illustrate the difference between these 4 APIs:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:179
#, no-wrap
msgid ""
"// Bare Vert.x:\n"
"vertx.fileSystem().readFile(\"lorem-ipsum.txt\", ar -> {\n"
"    if (ar.succeeded()) {\n"
"        System.out.println(\"Content:\" + ar.result().toString(\"UTF-8\"));\n"
"    } else {\n"
"        System.out.println(\"Cannot read the file: \" + ar.cause().getMessage());\n"
"    }\n"
"});\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:188
#, no-wrap
msgid ""
"// Mutiny Vert.x:\n"
"vertx.fileSystem().readFile(\"lorem-ipsum.txt\")\n"
"    .onItem().transform(buffer -> buffer.toString(\"UTF-8\"))\n"
"    .subscribe()\n"
"    .with(\n"
"            content -> System.out.println(\"Content: \" + content),\n"
"            err -> System.out.println(\"Cannot read the file: \" + err.getMessage())\n"
"    );\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:196
#, no-wrap
msgid ""
"// Rx Java 2 Vert.x\n"
"vertx.fileSystem().rxReadFile(\"lorem-ipsum.txt\")\n"
"    .map(buffer -> buffer.toString(\"UTF-8\"))\n"
"    .subscribe(\n"
"            content -> System.out.println(\"Content: \" + content),\n"
"            err -> System.out.println(\"Cannot read the file: \" + err.getMessage())\n"
"    );\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:207
#, no-wrap
msgid ""
"// Axle API:\n"
"vertx.fileSystem().readFile(\"lorem-ipsum.txt\")\n"
"    .thenApply(buffer -> buffer.toString(\"UTF-8\"))\n"
"    .whenComplete((content, err) -> {\n"
"        if (err != null) {\n"
"            System.out.println(\"Cannot read the file: \" + err.getMessage());\n"
"        } else {\n"
"            System.out.println(\"Content: \" + content);\n"
"        }\n"
"    });\n"
msgstr ""

#. type: Block title
#: upstream/_versions/1.11/guides/vertx.adoc:210
#, no-wrap
msgid "Mutiny"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/vertx.adoc:213
msgid "If you're not familiar with Mutiny, we recommend to read the link:getting-started-reactive#mutiny[Getting Started with Reactive guide] first."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/vertx.adoc:215
#, no-wrap
msgid "Using Vert.x in Reactive JAX-RS resources"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:218
msgid "Quarkus web resources support asynchronous processing and streaming results over https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events[server-sent events]."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/vertx.adoc:219
#, no-wrap
msgid "Asynchronous processing"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:222
msgid "To asynchronously handle the HTTP request, the endpoint method must return a `java.util.concurrent.CompletionStage` or an `io.smallrye.mutiny.Uni` (requires the `quarkus-resteasy-mutiny` extension):"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:227
#: upstream/_versions/1.11/guides/vertx.adoc:265
#, no-wrap
msgid ""
"@Path(\"/lorem\")\n"
"public class GreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:237
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public Uni<String> doSomethingAsync() {\n"
"        // Mimic an asynchronous computation.\n"
"        return Uni.createFrom()\n"
"                .item(() -> \"Hello!\")\n"
"                .onItem().delayIt().by(Duration.ofMillis(10));\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:243
#: upstream/_versions/1.11/guides/vertx.adoc:564
#, no-wrap
msgid "./mvnw compile quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:246
msgid "Then, open your browser to http://localhost:8080/lorem and you should get the message."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:249
msgid "So far so good.  Now let's use the Vert.x API instead of this artificial delay:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:253
#: upstream/_versions/1.11/guides/vertx.adoc:318
#: upstream/_versions/1.11/guides/vertx.adoc:502
#, no-wrap
msgid "package org.acme.vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:256
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.mutiny.core.Vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:262
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:268
#: upstream/_versions/1.11/guides/vertx.adoc:335
#: upstream/_versions/1.11/guides/vertx.adoc:524
#, no-wrap
msgid ""
"    @Inject\n"
"    Vertx vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:276
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public Uni<String> doSomethingAsync() {\n"
"        return vertx.fileSystem().readFile(\"/META-INF/resources/lorem.txt\")\n"
"                .onItem().transform(b -> b.toString(\"UTF-8\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:279
msgid "In this code, we inject the `vertx` instance (`io.vertx.mutiny.core.Vertx`) and read a file from the file system."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:281
msgid "Create the `src/main/resources/META_INF/resources/lorem.txt` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:285
#, no-wrap
msgid "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:288
msgid "Then, refresh the page, you should see the _lorem ipsum_ text."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/vertx.adoc:289
#, no-wrap
msgid "Streaming using Server-Sent Events"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:292
msgid "Quarkus web resources that need to send content as https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events[server-sent events] must have a method:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:294
msgid "declaring the `text/event-stream` response content type"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:295
msgid "returning a https://www.reactive-streams.org/[Reactive Streams] `Publisher` or Mutiny `Multi` (requires the `quarkus-resteasy-mutiny` extension)"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:297
msgid "In practice, a streaming greeting service would look like:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:302
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class StreamingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:311
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.SERVER_SENT_EVENTS)\n"
"    @Path(\"/{name}\")\n"
"    public Multi<String> greeting(@PathParam String name) {\n"
"        // TODO: create a Reactive Streams publisher or a Mutiny Multi\n"
"        return publisher;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:314
msgid "Now we just need to return our `Publisher` or `Multi`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:322
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Multi;\n"
"import io.vertx.mutiny.core.Vertx;\n"
"import org.jboss.resteasy.annotations.jaxrs.PathParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:329
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import java.util.Date;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:332
#, no-wrap
msgid ""
"@Path(\"/stream\")\n"
"public class StreamingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:344
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.SERVER_SENT_EVENTS)\n"
"    @Path(\"/{name}\")\n"
"    public Multi<String> greeting(@PathParam String name) {\n"
"        return vertx.periodicStream(2000).toMulti()\n"
"                .map(l -> String.format(\"Hello %s! (%s)%n\", name, new Date()));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:348
msgid "The server side is ready.  In order to see the result in the browser, we need a web page."
msgstr ""

#. type: Block title
#: upstream/_versions/1.11/guides/vertx.adoc:350
#, no-wrap
msgid "META-INF/resources/streaming.html"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:363
#, no-wrap
msgid ""
"<!doctype html>\n"
"<html>\n"
"<head>\n"
"    <meta charset=\"utf-8\"/>\n"
"    <title>SSE with Vert.x - Quarkus</title>\n"
"    <script type=\"application/javascript\" src=\"streaming.js\"></script>\n"
"</head>\n"
"<body>\n"
"<div id=\"container\"></div>\n"
"</body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:367
msgid "Our web page just has an empty `<div>` container.  The magic, as always, lies in the Javascript code:"
msgstr ""

#. type: Block title
#: upstream/_versions/1.11/guides/vertx.adoc:369
#, no-wrap
msgid "META-INF/resources/streaming.js"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:382
#, no-wrap
msgid ""
"if (!!window.EventSource) {\n"
"    var eventSource = new EventSource(\"/stream/Quarkus\");\n"
"    eventSource.onmessage = function (event) {\n"
"        var container = document.getElementById(\"container\");\n"
"        var paragraph = document.createElement(\"p\");\n"
"        paragraph.innerHTML = event.data;\n"
"        container.appendChild(paragraph);\n"
"    };\n"
"} else {\n"
"    window.alert(\"EventSource not available on this browser.\")\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:386
msgid "Most browsers support SSE but some don't.  More about this in Mozilla's https://developer.mozilla.org/en-US/docs/Web/API/EventSource#Browser_compatibility[SSE browser-compatibility list]."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:389
msgid "Navigate to http://localhost:8080/streaming.html.  A new greeting should show-up every 2 seconds."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:393
#, no-wrap
msgid "Hello Quarkus! (Wed Feb 12 17:13:55 CET 2020)\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:395
#, no-wrap
msgid "Hello Quarkus! (Wed Feb 12 17:13:57 CET 2020)\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:397
#, no-wrap
msgid "Hello Quarkus! (Wed Feb 12 17:13:59 CET 2020)\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:399
#, no-wrap
msgid "Hello Quarkus! (Wed Feb 12 17:14:01 CET 2020)\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:401
#, no-wrap
msgid "Hello Quarkus! (Wed Feb 12 17:14:03 CET 2020)\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:403
#, no-wrap
msgid "...\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/vertx.adoc:405
#, no-wrap
msgid "Using Vert.x JSON"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:409
msgid "Vert.x API heavily relies on JSON, namely the `io.vertx.core.json.JsonObject` and `io.vertx.core.json.JsonArray` types.  They are both supported as Quarkus web resource request and response bodies."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:411
msgid "Consider these endpoints:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:417
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"public class VertxJsonResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:423
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"{name}/object\")\n"
"    public JsonObject jsonObject(@PathParam String name) {\n"
"        return new JsonObject().put(\"Hello\", name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:430
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"{name}/array\")\n"
"    public JsonArray jsonArray(@PathParam String name) {\n"
"        return new JsonArray().add(\"Hello\").add(name);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:433
msgid "In your browser, navigate to http://localhost:8080/hello/Quarkus/object. You should see:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:437
#, no-wrap
msgid "{\"Hello\":\"Quarkus\"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:440
msgid "Then, navigate to http://localhost:8080/hello/Quarkus/array:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:444
#, no-wrap
msgid "[\"Hello\",\"Quarkus\"]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:447
msgid "Needless to say, this works equally well when the JSON content is a request body or is wrapped in a `Uni`, `Multi`, `CompletionStage` or `Publisher`."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/vertx.adoc:448
#, no-wrap
msgid "Using Vert.x Clients"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:452
msgid "As you can inject a Vert.x instance, you can use Vert.x clients in a Quarkus application.  This section gives an example with the `WebClient`."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/vertx.adoc:453
#, no-wrap
msgid "Picking the right dependency"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:456
msgid "Depending on the API model you want to use you need to add the right dependency to your `pom.xml` file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:464
#, no-wrap
msgid ""
"<!-- bare API -->\n"
"<dependency>\n"
"  <groupId>io.vertx</groupId>\n"
"  <artifactId>vertx-web-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:470
#, no-wrap
msgid ""
"<!-- Mutiny API -->\n"
"<dependency>\n"
"  <groupId>io.smallrye.reactive</groupId>\n"
"  <artifactId>smallrye-mutiny-vertx-web-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:476
#, no-wrap
msgid ""
"<!-- Axle API -->\n"
"<dependency>\n"
"  <groupId>io.smallrye.reactive</groupId>\n"
"  <artifactId>smallrye-axle-web-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:482
#, no-wrap
msgid ""
"<!-- RX Java 2 API -->\n"
"<dependency>\n"
"  <groupId>io.vertx</groupId>\n"
"  <artifactId>vertx-rx-java2</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:485
msgid "The `vertx-rx-java2` provides the RX Java 2 API for the whole Vert.x stack, not only the web client."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:487
msgid "In this guide, we are going to use the Mutiny API, so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:494
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.smallrye.reactive</groupId>\n"
"  <artifactId>smallrye-mutiny-vertx-web-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:497
msgid "Now, create a new resource in your project with the following content:"
msgstr ""

#. type: Block title
#: upstream/_versions/1.11/guides/vertx.adoc:499
#, no-wrap
msgid "src/main/java/org/acme/vertx/ResourceUsingWebClient.java"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:510
#, no-wrap
msgid ""
"import javax.annotation.PostConstruct;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:513
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import org.jboss.resteasy.annotations.jaxrs.PathParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:518
#, no-wrap
msgid ""
"import io.vertx.mutiny.core.Vertx;\n"
"import io.vertx.mutiny.ext.web.client.WebClient;\n"
"import io.vertx.core.json.JsonObject;\n"
"import io.vertx.ext.web.client.WebClientOptions;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:521
#, no-wrap
msgid ""
"@Path(\"/fruit-data\")\n"
"public class ResourceUsingWebClient {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:526
#, no-wrap
msgid "    private WebClient client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:533
#, no-wrap
msgid ""
"    @PostConstruct\n"
"    void initialize() {\n"
"        this.client = WebClient.create(vertx,\n"
"                new WebClientOptions().setDefaultHost(\"fruityvice.com\")\n"
"                    .setDefaultPort(443).setSsl(true).setTrustAll(true));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:550
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.APPLICATION_JSON)\n"
"    @Path(\"/{name}\")\n"
"    public Uni<JsonObject> getFruitData(@PathParam(\"name\") String name) {\n"
"        return client.get(\"/api/fruit/\" + name)\n"
"                .send()\n"
"                .onItem().transform(resp -> {\n"
"                    if (resp.statusCode() == 200) {\n"
"                        return resp.bodyAsJsonObject();\n"
"                    } else {\n"
"                        return new JsonObject()\n"
"                                .put(\"code\", resp.statusCode())\n"
"                                .put(\"message\", resp.bodyAsString());\n"
"                    }\n"
"                });\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:552
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:558
msgid "This resource creates a `WebClient` and upon request use this client to invoke the _fruityvice_ API.  Depending on the result the response is forwarded as it's received, or a new JSON object is created with the status and body.  The `WebClient` is obviously asynchronous (and non-blocking), to the endpoint returns a `Uni`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:560
msgid "Run the application with:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:567
msgid "And then, open a browser to: `http://localhost:8080/fruit-data/pear`. You should get some details about pears."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:571
msgid "The application can also run as a native executable.  But, first, we need to instruct Quarkus to enable _ssl_.  Open the `src/main/resources/application.properties` and add:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:575
#, no-wrap
msgid "quarkus.ssl.native=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:578
msgid "Then, create the native executable with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:582
#, no-wrap
msgid "./mvnw package -Pnative\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/vertx.adoc:584
#, no-wrap
msgid "Deploying verticles"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:589
msgid "link:https://vertx.io/docs/vertx-core/java/#\\_verticles[Verticles] is \"a simple, scalable, actor-like deployment and concurrency model\" provided by _Vert.x_.  This model does not claim to be a strict actor-model implementation, but it does share similarities especially with respect to concurrency, scaling and deployment.  To use this model, you write and _deploy_ verticles, communicating with each other by sending messages on the event bus."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:592
msgid "You can deploy _verticles_ in Quarkus.  It supports:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:594
msgid "_bare_ verticle - Java classes extending `io.vertx.core.AbstractVerticle`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:595
msgid "_Mutiny_ verticle - Java classes extending `io.smallrye.mutiny.vertx.core.AbstractVerticle`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:597
msgid "To deploy verticles, use the regular Vert.x API:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:605
#, no-wrap
msgid ""
"// ...\n"
"vertx.deployVerticle(MyVerticle.class.getName(), ar -> { });\n"
"vertx.deployVerticle(new MyVerticle(), ar -> { });\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:608
msgid "You can also pass deployment options to configure the verticle as well as set the number of instances."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:611
msgid "Verticles are not _beans_ by default.  However, you can implement them as _ApplicationScoped_ beans and get injection support:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:615
#: upstream/_versions/1.11/guides/vertx.adoc:643
#, no-wrap
msgid "package io.quarkus.vertx.verticles;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:619
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.smallrye.mutiny.vertx.core.AbstractVerticle;\n"
"import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:621
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:624
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyBeanVerticle extends AbstractVerticle {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:626
#, no-wrap
msgid "    @ConfigProperty(name = \"address\") String address;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:634
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<Void> asyncStart() {\n"
"        return vertx.eventBus().consumer(address)\n"
"                .handler(m -> m.replyAndForget(\"hello\"))\n"
"                .completionHandler();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:637
msgid "You don't have to inject the `vertx` instance but instead leverage the instance stored in the protected field of `AbstractVerticle`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:639
msgid "Then, deploy the verticle instance with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:646
#, no-wrap
msgid ""
"import io.quarkus.runtime.StartupEvent;\n"
"import io.vertx.mutiny.core.Vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:649
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.enterprise.event.Observes;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:652
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class VerticleDeployer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:657
#, no-wrap
msgid ""
"    public void init(@Observes StartupEvent e, Vertx vertx, MyBeanVerticle verticle) {\n"
"         vertx.deployVerticle(verticle).await().indefinitely();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:660
msgid "If you want to deploy every exposed `AbstractVerticle`, you can use:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:668
#, no-wrap
msgid ""
"public void init(@Observes StartupEvent e, Vertx vertx, Instance<AbstractVerticle> verticles) {\n"
"    for (AbstractVerticle verticle : verticles) {\n"
"        vertx.deployVerticle(verticle).await().indefinitely();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/vertx.adoc:670
#, no-wrap
msgid "Listening to a Unix Domain Socket"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:676
msgid "Listening on a unix domain socket allows us to dispense with the overhead of TCP if the connection to the quarkus service is established from the same host. This can happen if access to the service goes through a proxy which is often the case if you're setting up a service mesh with a proxy like Envoy."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:678
msgid "This will only work on platforms that support <<native-transport>>."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:681
msgid "To setup please enable the appropriate <<native-transport>> and set the following environment property:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:685
#, no-wrap
msgid ""
"quarkus.http.domain-socket=/var/run/io.quarkus.app.socket\n"
"quarkus.http.domain-socket-enabled=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:689
msgid "By itself this will not disable the tcp socket which by default will open on `0.0.0.0:8080`. It can be explicitly disabled:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:692
#, no-wrap
msgid "quarkus.http.host-enabled=false\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:696
msgid "These properties can be set through Java's `-D` command line parameter or on `application.properties`."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/vertx.adoc:697
#, no-wrap
msgid "Read only deployment environments"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:700
msgid "In environments with read only file systems you may receive errors of the form:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:704
#, no-wrap
msgid "java.lang.IllegalStateException: Failed to create cache dir\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:707
msgid "Assuming `/tmp/` is writable this can be fixed by setting the `vertx.cacheDirBase` property to point to a directory in `/tmp/` for instance in OpenShift by creating an environment variable `JAVA_OPTS` with the value `-Dvertx.cacheDirBase=/tmp/vertx`."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/vertx.adoc:709
#, no-wrap
msgid "Running behind a reverse proxy"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:715
msgid "Quarkus could be accessed through proxies that additionally generate headers (e.g. `X-Forwarded-Host`) to keep information from the client-facing side of the proxy servers that is altered or lost when they are involved.  In those scenarios, Quarkus can be configured to automatically update information like protocol, host, port and URI reflecting the values in these headers."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:718
msgid "Activating this feature makes the server exposed to several security issues (i.e. information spoofing).  Consider activate it only when running behind a reverse proxy."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:720
msgid "To setup this feature, please include the following lines in `src/main/resources/application.properties`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:723
#, no-wrap
msgid "quarkus.http.proxy-address-forwarding=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:726
msgid "To consider only de-facto standard header (`Forwarded` header), please include the following lines in `src/main/resources/application.properties`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:729
#, no-wrap
msgid "quarkus.http.proxy.allow-forwarded=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:732
msgid "To consider only non-standard headers, please include the following lines instead in `src/main/resources/application.properties`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:738
#, no-wrap
msgid ""
"quarkus.http.proxy.proxy-address-forwarding=true\n"
"quarkus.http.proxy.enable-forwarded-host=true\n"
"quarkus.http.proxy.enable-forwarded-prefix=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:741
msgid "Both configurations related to standard and non-standard headers can be combined, although the standard headers configuration will have precedence."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:743
msgid "Supported forwarding address headers are:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:745
msgid "`Forwarded`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:746
msgid "`X-Forwarded-Proto`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:747
msgid "`X-Forwarded-Host`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:748
msgid "`X-Forwarded-Port`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:749
msgid "`X-Forwarded-Ssl`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:750
msgid "`X-Forwarded-Prefix`"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/vertx.adoc:752
#, no-wrap
msgid "SameSite cookies"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:755
msgid "One can easily add a https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite[SameSite] cookie property to any of the cookies set by a Quarkus endpoint by listing a cookie name and a `SameSite` attribute, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/vertx.adoc:760
#, no-wrap
msgid ""
"quarkus.http.same-site-cookie.jwt.value=Lax\n"
"quarkus.http.same-site-cookie.session.value=Strict\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:763
msgid "Given this configuration, the `jwt` cookie will have a `SameSite=Lax` attribute and the `session` cookie will have a `SameSite=Strict` attribute."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/vertx.adoc:764
#, no-wrap
msgid "Going further"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:767
msgid "There are many other facets of Quarkus using Vert.x underneath:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:771
msgid "The event bus is the connecting tissue of Vert.x applications.  Quarkus integrates it so different beans can interact with asynchronous messages.  This part is covered in the link:reactive-event-bus[event bus documentation]."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:775
msgid "Data streaming and Apache Kafka are an important part of modern systems.  Quarkus integrates data streaming using Reactive Messaging.  More details on link:kafka[Interacting with Kafka]."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/vertx.adoc:776
msgid "Learn how to implement highly performant, low-overhead database applications on Quarkus with the link:reactive-sql-clients[Reactive SQL Clients]."
msgstr ""
