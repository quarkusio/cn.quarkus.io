# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:6
#, no-wrap
msgid "Quarkus - Using OpenID Connect Multi-Tenancy"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:12
msgid "This guide demonstrates how your OpenID Connect application can support multi-tenancy so that you can serve multiple tenants from a single application. Tenants can be distinct realms or security domains within the same OpenID Provider or even distinct OpenID Providers."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:14
msgid "When serving multiple customers from the same application (e.g.: SaaS), each customer is a tenant. By enabling multi-tenancy support to your applications you are allowed to also support distinct authentication policies for each tenant even though if that means authenticating against different OpenID Providers, such as Keycloak and Google."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:16
msgid "Please read the link:security-openid-connect[Using OpenID Connect to Protect Service Applications] guide if you need to authorize a tenant using Bearer Token Authorization."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:18
msgid "Please read the link:security-openid-connect-web-authentication[Using OpenID Connect to Protect Web Applications] guide if you need to authenticate and authorize a tenant using OpenId Connect Authorization Code Flow."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:19
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:22
msgid "To complete this guide, you need:"
msgstr "要完成这个指南，你需要："

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:24
msgid "less than 15 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:25
msgid "an IDE"
msgstr "一个编辑器"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:26
msgid "JDK 1.8+ installed with `JAVA_HOME` configured appropriately"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:27
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:28
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:29
msgid "Docker"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:30
#, no-wrap
msgid "Architecture"
msgstr "应用结构"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:33
msgid "In this example, we build a very simple application which offers a single land page:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:35
msgid "`/{tenant}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:37
msgid "The land page is served by a JAX-RS Resource and shows information obtained from the OpenID Provider about the authenticated user and the current tenant."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:38
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:42
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:44
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:46
msgid "The solution is located in the `security-openid-connect-multi-tenancy` {quickstarts-tree-url}/security-openid-connect-multi-tenancy[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:47
#, no-wrap
msgid "Creating the Maven Project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:50
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:59
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=security-openid-connect-multi-tenancy \\\n"
"    -Dextensions=\"oidc,resteasy-jackson\" \\\n"
"    -DnoExamples\n"
"cd security-openid-connect-multi-tenancy\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:63
msgid "If you already have your Quarkus project configured, you can add the `oidc` extension to your project by running the following command in your project base directory:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:67
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"oidc\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:70
msgid "This will add the following to your `pom.xml`:"
msgstr "这将在你的 `pom.xml` 中添加以下内容："

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:77
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:79
#, no-wrap
msgid "Writing the application"
msgstr "编写应用程序"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:82
msgid "Let's start by implementing the `/{tenant}` endpoint. As you can see from the source code below it is just a regular JAX-RS resource:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:86
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:129
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:385
#, no-wrap
msgid "package org.acme.quickstart.oidc;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:90
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:92
#, no-wrap
msgid "import org.eclipse.microprofile.jwt.JsonWebToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:94
#, no-wrap
msgid "import io.quarkus.oidc.IdToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:97
#, no-wrap
msgid ""
"@Path(\"/{tenant}\")\n"
"public class HomeResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:104
#, no-wrap
msgid ""
"    /**\n"
"     * Injection point for the ID Token issued by the OpenID Connect Provider \n"
"     */\n"
"    @Inject\n"
"    @IdToken\n"
"    JsonWebToken idToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:114
#, no-wrap
msgid ""
"    /**\n"
"     * Returns the tokens available to the application. This endpoint exists only for demonstration purposes, you should not\n"
"     * expose these tokens in a real application.\n"
"     * \n"
"     * @return the landing page HTML\n"
"     */\n"
"    @GET\n"
"    public String getHome() {\n"
"        StringBuilder response = new StringBuilder().append(\"<html>\").append(\"<body>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:117
#, no-wrap
msgid ""
"        response.append(\"<h2>Welcome, \").append(this.idToken.getClaim(\"email\").toString()).append(\"</h2>\\n\");\n"
"        response.append(\"<h3>You are accessing the application within tenant <b>\").append(idToken.getIssuer()).append(\" boundaries</b></h3>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:121
#, no-wrap
msgid ""
"        return response.append(\"</body>\").append(\"</html>\").toString();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:125
msgid "In order to resolve the tenant from incoming requests and map it to a specific `quarkus-oidc` tenant configuration in application.properties, you need to create an implementation for the `io.quarkus.oidc.TenantResolver` interface."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:131
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:321
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:389
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:134
#, no-wrap
msgid ""
"import io.quarkus.oidc.TenantResolver;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:137
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:396
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomTenantResolver implements TenantResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:142
#, no-wrap
msgid ""
"    @Override \n"
"    public String resolve(RoutingContext context) {\n"
"        String path = context.request().path();\n"
"        String[] parts = path.split(\"/\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:147
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:338
#, no-wrap
msgid ""
"        if (parts.length == 0) {\n"
"            // resolve to default tenant configuration\n"
"            return null;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:151
#, no-wrap
msgid ""
"        return parts[1];\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:154
msgid "From the implementation above, tenants are resolved from the request path so that in case no tenant could be inferred, `null` is returned to indicate that the default tenant configuration should be used."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:156
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:171
#, no-wrap
msgid "===\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:158
msgid "If you also use link:hibernate-orm#multitenancy[Hibernate ORM multitenancy] and both OIDC and Hibernate ORM tenant IDs are the same and must be extracted from the Vert.x `RoutingContext` then you can pass the tenant id from the OIDC Tenant Resolver to the Hibernate ORM Tenant Resolver as a `RoutingContext` attribute, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:162
#, no-wrap
msgid "public class CustomTenantResolver implements TenantResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:170
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve(RoutingContext context) {\n"
"        String tenantId = extractTenantId(context);\n"
"        context.put(\"tenantId\", tenantId);\n"
"        return tenantId;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:173
#, no-wrap
msgid "Configuring the application"
msgstr "配置该应用程序"

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:181
#, no-wrap
msgid ""
"# Default Tenant Configuration\n"
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
"quarkus.oidc.client-id=multi-tenant-client\n"
"quarkus.oidc.application-type=web-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:186
#, no-wrap
msgid ""
"# Tenant A Configuration\n"
"quarkus.oidc.tenant-a.auth-server-url=http://localhost:8180/auth/realms/tenant-a\n"
"quarkus.oidc.tenant-a.client-id=multi-tenant-client\n"
"quarkus.oidc.tenant-a.application-type=web-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:190
#, no-wrap
msgid ""
"# HTTP Security Configuration\n"
"quarkus.http.auth.permission.authenticated.paths=/*\n"
"quarkus.http.auth.permission.authenticated.policy=authenticated\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:193
msgid "The first configuration is the default tenant configuration that should be used when the tenant can not be inferred from the request. This configuration is using a Keycloak instance to authenticate users."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:195
msgid "The second configuration is the configuration that will be used when an incoming request is mapped to the tenant `tenant-a`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:197
msgid "Note that both configurations map to the same Keycloak server instance while using distinct `realms`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:199
msgid "You can define multiple tenants in your configuration file, just make sure they have a unique alias so that you can map them properly when resolving a tenant from your `TenantResolver` implementation."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:200
#, no-wrap
msgid "Google OpenID Provider Configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:203
msgid "In order to set-up the `tenant-a` configuration to use Google OpenID Provider, you need to create a project as described https://developers.google.com/identity/protocols/OpenIDConnect[here]."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:205
msgid "Once you create the project and have your project's `client_id` and `client_secret`, you can try to configure a tenant as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:215
#, no-wrap
msgid ""
"# Tenant configuration using Google OpenID Provider\n"
"quarkus.oidc.tenant-b.auth-server-url=https://accounts.google.com\n"
"quarkus.oidc.tenant-b.application-type=web-app\n"
"quarkus.oidc.tenant-b.client-id={GOOGLE_CLIENT_ID}\n"
"quarkus.oidc.tenant-b.credentials.secret={GOOGLE_CLIENT_SECRET}\n"
"quarkus.oidc.tenant-b.token.issuer=https://accounts.google.com\n"
"quarkus.oidc.tenant-b.authentication.scopes=email,profile,openid\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:217
#, no-wrap
msgid "Starting and Configuring the Keycloak Server"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:220
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:224
#, no-wrap
msgid "docker run --name keycloak -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin -p 8180:8080 {keycloak-docker-image}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:227
msgid "You should be able to access your Keycloak Server at http://localhost:8180/auth[localhost:8180/auth]."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:229
msgid "Log in as the `admin` user to access the Keycloak Administration Console. Username should be `admin` and password `admin`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:231
msgid "Now, follow the steps below to import the realms for the two tenants:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:233
msgid "Import the {quickstarts-tree-url}/security-openid-connect-multi-tenancy/config/default-tenant-realm.json[default-tenant-realm.json] to create the default realm"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:234
msgid "Import the {quickstarts-tree-url}/security-openid-connect-multi-tenancy/config/tenant-a-realm.json[tenant-a-realm.json] to create the realm for the tenant `tenant-a`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:236
msgid "For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:237
#, no-wrap
msgid "Running and Using the Application"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:239
#, no-wrap
msgid "Running in Developer Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:242
msgid "To run the microservice in dev mode, use `./mvnw clean compile quarkus:dev`."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:243
#, no-wrap
msgid "Running in JVM Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:246
msgid "When you're done playing with \"dev-mode\" you can run it as a standard Java application."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:248
msgid "First compile it:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:252
#, no-wrap
msgid "./mvnw package\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:255
msgid "Then run it:"
msgstr "然后运行："

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:259
#, no-wrap
msgid "java -jar ./target/security-openid-connect-multi-tenancy-quickstart-runner.jar\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:261
#, no-wrap
msgid "Running in Native Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:264
msgid "This same demo can be compiled into native code: no modifications required."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:268
msgid "This implies that you no longer need to install a JVM on your production environment, as the runtime technology is included in the produced binary, and optimized to run with minimal resource overhead."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:271
msgid "Compilation will take a bit longer, so this step is disabled by default; let's build again by enabling the `native` profile:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:275
#, no-wrap
msgid "./mvnw package -Pnative\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:278
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:282
#, no-wrap
msgid "./target/security-openid-connect-multi-tenancy-quickstart-runner\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:284
#, no-wrap
msgid "Testing the Application"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:287
msgid "To test the application, you should open your browser and access the following URL:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:289
msgid "http://localhost:8080/default[http://localhost:8080/default]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:292
msgid "If everything is working as expected, you should be redirected to the Keycloak server to authenticate. Note that the requested path defines a `default` tenant which we don't have mapped in the configuration file. In this case, the default configuration will be used."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:294
msgid "In order to authenticate to the application you should type the following credentials when at the Keycloak login page:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:296
msgid "Username: *alice*"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:297
msgid "Password: *alice*"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:299
msgid "After clicking the `Login` button you should be redirected back to the application."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:301
msgid "If you try now to access the application at the following URL:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:303
msgid "http://localhost:8080/tenant-a[http://localhost:8080/tenant-a]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:305
msgid "You should be redirected again to the login page at Keycloak. However, now you are going to authenticate using a different `realm`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:308
msgid "In both cases, if the user is successfully authenticated, the landing page will show the user's name and e-mail. Even though user `alice` exists in both tenants, for the application they are distinct users belonging to different realms/tenants."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:309
#, no-wrap
msgid "Programmatically Resolving Tenants Configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:313
msgid "If you need a more dynamic configuration for the different tenants you want to support and don't want to end up with multiple entries in your configuration file, you can use the `io.quarkus.oidc.TenantConfigResolver`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:315
msgid "This interface allows you to dynamically create tenant configurations at runtime:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:319
#, no-wrap
msgid "package io.quarkus.it.keycloak;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:325
#, no-wrap
msgid ""
"import io.quarkus.oidc.TenantConfigResolver;\n"
"import io.quarkus.oidc.runtime.OidcTenantConfig;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:328
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomTenantConfigResolver implements TenantConfigResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:333
#, no-wrap
msgid ""
"    @Override\n"
"    public OidcTenantConfig resolve(RoutingContext context) {\n"
"        String path = context.request().path();\n"
"        String[] parts = path.split(\"/\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:341
#, no-wrap
msgid ""
"        if (\"tenant-c\".equals(parts[1])) {\n"
"            OidcTenantConfig config = new OidcTenantConfig();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:346
#, no-wrap
msgid ""
"            config.setTenantId(\"tenant-c\");\n"
"            config.setAuthServerUrl(\"http://localhost:8180/auth/realms/tenant-c\");\n"
"            config.setClientId(\"multi-tenant-client\");\n"
"            OidcTenantConfig.Credentials credentials = new OidcTenantConfig.Credentials();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:348
#, no-wrap
msgid "            credentials.setSecret(\"my-secret\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:350
#, no-wrap
msgid "            config.setCredentials(credentials);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:352
#, no-wrap
msgid "            // any other setting support by the quarkus-oidc extension\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:355
#, no-wrap
msgid ""
"            return config;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:360
#, no-wrap
msgid ""
"        // resolve to default tenant configuration\n"
"        return null;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:363
msgid "The `OidcTenantConfig` returned from this method is the same used to parse the `oidc` namespace configuration from the `application.properties`. You can populate it using any of the settings supported by the `quarkus-oidc` extension."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:364
#, no-wrap
msgid "Tenant Resolution for OIDC 'web-app' applications"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:367
msgid "Several options are available for selecting the tenant configuration which should be used to secure the current HTTP request for both `service` and `web-app` OIDC applications, such as:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:369
msgid "Check URL paths, for example, a `tenant-service` configuration has to be used for the \"/service\" paths, while a `tenant-manage` configuration - for the \"/management\" paths"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:370
msgid "Check HTTP headers, for example, with a URL path always being '/service', a header such as \"Realm: service\" or \"Realm: management\" can help selecting between the `tenant-service` and `tenant-manage` configurations"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:371
msgid "Check URL query parameters - it can work similarly to the way the headers are used to select the tenant configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:373
msgid "All these options can be easily implemented with the custom `TenantResolver` and `TenantConfigResolver` implementations for the OIDC `service` applications."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:375
msgid "However, due to an HTTP redirect required to complete the code authentication flow for the OIDC `web-app` applications, a custom HTTP cookie may be needed to select the same tenant configuration before and after this redirect request because:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:377
msgid "URL path may not be the same after the redirect request if a single redirect URL has been registered in the OIDC Provider - the original request path can be restored but after the the tenant configuration is resolved"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:378
msgid "HTTP headers used during the original request are not available after the redirect"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:379
msgid "Custom URL query parameters are restored after the redirect but after the tenant configuration is resolved"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:381
msgid "One option to ensure the information for resolving the tenant configurations for `web-app` applications is available before and after the redirect is to use a cookie, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:387
#, no-wrap
msgid "import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:393
#, no-wrap
msgid ""
"import io.quarkus.oidc.TenantResolver;\n"
"import io.vertx.core.http.Cookie;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:407
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve(RoutingContext context) {\n"
"        List<String> tenantIdQuery = context.queryParam(\"tenantId\");\n"
"        if (!tenantIdQuery.isEmpty()) {\n"
"            String tenantId = tenantIdQuery.get(0);\n"
"            context.addCookie(Cookie.cookie(\"tenant\", tenantId));\n"
"            return tenantId;\n"
"        } else if (context.cookieMap().containsKey(\"tenant\")) {\n"
"            return context.getCookie(\"tenant\").getValue();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:411
#, no-wrap
msgid ""
"        return null;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:414
#, no-wrap
msgid "Disabling Tenant Configurations"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:417
msgid "Custom `TenantResolver` and `TenantConfigResolver` implementations may return `null` if no tenant can be inferred from the current request and a fallback to the default tenant configuration is required."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:419
msgid "If it is expected that the custom resolvers will always infer a tenant then the default tenant configuration is not needed. One can disable it with the `quarkus.oidc.tenant-enabled=false` setting."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:421
msgid "Note that tenant specific configurations can also be disabled, for example: `quarkus.oidc.tenant-a.tenant-enabled=false`."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:422
#, no-wrap
msgid "Configuration Reference"
msgstr "配置参考"

#. type: Title ==
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:426
#, no-wrap
msgid "References"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:429
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:430
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:431
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:432
msgid "https://developers.google.com/identity/protocols/OpenIDConnect[Google OpenID Connect]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-multitenancy.adoc:432
msgid "link:security[Quarkus Security]"
msgstr ""
