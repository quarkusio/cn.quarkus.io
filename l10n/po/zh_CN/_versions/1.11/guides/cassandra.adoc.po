# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.11/guides/cassandra.adoc:6
#, no-wrap
msgid "Quarkus - Using the Cassandra Client"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:13
msgid "Apache Cassandra® is a free and open-source, distributed, wide column store, NoSQL database management system designed to handle large amounts of data across many commodity servers, providing high availability with no single point of failure."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:15
msgid "In this guide, we will see how you can get your REST services to use a Cassandra database."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/cassandra.adoc:18
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:21
msgid "To complete this guide, you need:"
msgstr "要完成这个指南，你需要："

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:23
msgid "an IDE"
msgstr "一个编辑器"

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:24
msgid "JDK 1.8+ installed with `JAVA_HOME` configured appropriately"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:25
msgid "GraalVM installed with `GRAALVM_HOME` configured appropriately if you want to use the native mode."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:26
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:27
msgid "Cassandra or Docker installed"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/cassandra.adoc:28
#, no-wrap
msgid "Architecture"
msgstr "应用结构"

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:32
msgid "The application built in this guide is quite simple: the user can add elements in a list using a form, and the items list is updated."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:34
msgid "All the information between the browser and the server is formatted as JSON."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:36
msgid "The elements are stored in the Cassandra database."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/cassandra.adoc:37
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:42
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:45
msgid "The solution is located in the `quickstart` link:https://github.com/datastax/cassandra-quarkus/tree/main/quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/cassandra.adoc:46
#, no-wrap
msgid "Creating the Maven project"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:50
msgid "First, create a new Maven project and copy the `pom.xml` file that is present in the `quickstart` directory."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:53
msgid "The `pom.xml` is importing the RESTEasy/JAX-RS, JSON-B, Context Propagation and Cassandra Client extensions."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:57
msgid "We will be building a REST application using the link:https://docs.datastax.com/en/developer/java-driver/latest/manual/mapper[DataStax Object Mapper] to simplify the Data Access Layer code."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:59
msgid "The most important part of the `pom.xml` is adding the `cassandra-quarkus` extension:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:67
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>com.datastax.oss.quarkus</groupId>\n"
"    <artifactId>cassandra-quarkus-client</artifactId>\n"
"    <version>${quarkus.version}</version>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:73
msgid "Also make sure to follow the link:https://docs.datastax.com/en/developer/java-driver/latest/manual/mapper/config/[instructions] on how to add an annotation processor to the compiler configuration. When the project is compiled, additional mapper classes are generated."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/cassandra.adoc:74
#, no-wrap
msgid "Creating JSON REST service"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:77
msgid "In this example, we will create an application to manage a list of fruits."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:79
msgid "First, let's create the `Fruit` bean as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:84
#, no-wrap
msgid ""
"@Entity\n"
"public class Fruit {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:88
#, no-wrap
msgid ""
"    @PartitionKey private String storeId;\n"
"    @ClusteringColumn private String name;\n"
"    private String description;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:90
#, no-wrap
msgid "    public Fruit() {}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:96
#, no-wrap
msgid ""
"    public Fruit(String storeId, String name, String description) {\n"
"      this.storeId = storeId;\n"
"      this.name = name;\n"
"      this.description = description;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:99
#, no-wrap
msgid ""
"    // getters, setters, hashCode and equals omitted for brevity\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:105
msgid "We are using DataStax Java driver Object Mapper, which is why this class is annotated with an `@Entity`. Also, the `storeId` field represents a Cassandra partition key and `name` represents a clustering column, and so we are using the corresponding annotations from the Object Mapper library.  It will allow the Mapper to generate proper CQL queries underneath."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:107
msgid "Entity classes are required to have a default no-args constructor."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:109
msgid "To leverage the Mapper logic in this app we need to create a DAO:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:116
#, no-wrap
msgid ""
"@Dao\n"
"public interface FruitDao {\n"
"  @Update\n"
"  void update(Fruit fruit);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:120
#, no-wrap
msgid ""
"  @Select\n"
"  PagingIterable<Fruit> findById(String id);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:123
msgid "This class exposes operations that will be used in the REST service."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:125
msgid "Finally, the Mapper itself:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:133
#, no-wrap
msgid ""
"@Mapper\n"
"public interface FruitMapper {\n"
"  @DaoFactory\n"
"  FruitDao fruitDao();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:138
msgid "The mapper is responsible for constructing instances of `FruitDao`. In the example above, the `FruitDao` instance will be connected to the same keyspace as the underlying session. More on that below."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:142
msgid "It is also possible to create DAO instances for different keyspaces. To learn how, see link:https://docs.datastax.com/en/developer/java-driver/4.7/manual/mapper/mapper/#dao-parameterization[DAO parameterization] in the driver docs."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:146
msgid "Next, we need a component to create our DAO instances: `FruitDaoProducer`. Indeed, Mapper and Dao instances are stateful objects, and should be created only once, as application-scoped singletons.  This component will do exactly that, leveraging Quarkus Dependency Injection container:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:155
#, no-wrap
msgid ""
"import com.datastax.oss.driver.api.core.CqlIdentifier;\n"
"import com.datastax.oss.quarkus.runtime.api.config.CassandraClientConfig;\n"
"import com.datastax.oss.quarkus.runtime.api.session.QuarkusCqlSession;\n"
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.enterprise.inject.Produces;\n"
"import javax.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:157
#, no-wrap
msgid "public class FruitDaoProducer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:160
#, no-wrap
msgid ""
"  private final FruitDao fruitDao;\n"
"  private final FruitDaoReactive fruitDaoReactive;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:169
#, no-wrap
msgid ""
"  @Inject\n"
"  public FruitDaoProducer(QuarkusCqlSession session) {\n"
"    // create a mapper\n"
"    FruitMapper mapper = new FruitMapperBuilder(session).build();\n"
"    // instantiate our Daos\n"
"    fruitDao = mapper.fruitDao();\n"
"    fruitDaoReactive = mapper.fruitDaoReactive();\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:175
#, no-wrap
msgid ""
"  @Produces\n"
"  @ApplicationScoped\n"
"  FruitDao produceFruitDao() {\n"
"    return fruitDao;\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:182
#, no-wrap
msgid ""
"  @Produces\n"
"  @ApplicationScoped\n"
"  FruitDaoReactive produceFruitDaoReactive() {\n"
"    return fruitDaoReactive;\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:186
msgid "Note how the `QuarkusCqlSession` instance is injected automatically by the cassandra-quarkus extension in the `FruitDaoProducer` constructor."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:189
msgid "Also note that `FruitMapperBuilder` is one of the classes generated automatically by the `java-driver-mapper-processor` annotation processor."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:192
msgid "Now create a `FruitService` that will be the business layer of our application and store/load the fruits from the Cassandra database."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:197
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class FruitService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:199
#, no-wrap
msgid "  private final FruitDao dao;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:204
#, no-wrap
msgid ""
"  @Inject\n"
"  public FruitService(FruitDao dao) {\n"
"    this.dao = dao;\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:208
#, no-wrap
msgid ""
"  public void save(Fruit fruit) {\n"
"    dao.update(fruit);\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:213
#, no-wrap
msgid ""
"  public List<Fruit> get(String id) {\n"
"    return dao.findById(id).all();\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:217
msgid "Note how the service receives a `FruitDao` instance in the constructor. This DAO instance is provided by `FruitDaoProducer` and injected automatically."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:219
msgid "The last missing piece is the REST API that will expose GET and POST methods:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:224
#, no-wrap
msgid ""
"@Path(\"/fruits\")\n"
"public class FruitResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:226
#, no-wrap
msgid "  private static final String STORE_NAME = \"acme\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:228
#, no-wrap
msgid "  @Inject FruitService fruitService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:235
#, no-wrap
msgid ""
"  @GET\n"
"  public List<FruitDto> list() {\n"
"    return fruitService.get(STORE_NAME).stream()\n"
"        .map(fruit -> new FruitDto(fruit.getName(), fruit.getDescription()))\n"
"        .collect(Collectors.toList());\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:240
#, no-wrap
msgid ""
"  @POST\n"
"  public void add(FruitDto fruit) {\n"
"    fruitService.save(covertFromDto(fruit));\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:245
#: upstream/_versions/1.11/guides/cassandra.adoc:527
#, no-wrap
msgid ""
"  private Fruit covertFromDto(FruitDto fruitDto) {\n"
"    return new Fruit(fruitDto.getName(), fruitDto.getDescription(), STORE_NAME);\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:251
msgid "The `list` and `add` operations are executed for the `storeId` \"acme\". This is the partition key of our data model. We can easily retrieve all rows from cassandra using that partition key.  They will be sorted by the clustering column. `FruitResource` is using `FruitService` which encapsulates the data access logic."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:257
msgid "When creating the REST API we should not share the same entity object between REST API and data access layers. They should not be coupled to allow the API to evolve independently of the storage layer. This is the reason why the API is using a `FruitDto` class. This class will be used by Quarkus to convert JSON to java objects for client requests and java objects to JSON for the responses. The translation is done by quarkus-resteasy extension."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:261
#, no-wrap
msgid "public class FruitDto {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:264
#, no-wrap
msgid ""
"  private String name;\n"
"  private String description;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:266
#, no-wrap
msgid "  public FruitDto() {}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:273
#, no-wrap
msgid ""
"  public FruitDto(String name, String description) {\n"
"    this.name = name;\n"
"    this.description = description;\n"
"  }\n"
"  // getters and setters omitted for brevity\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:277
msgid "DTO classes used by the JSON serialization layer are required to have a default no-arg constructor."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/cassandra.adoc:278
#, no-wrap
msgid "Configuring the Cassandra database"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/cassandra.adoc:280
#, no-wrap
msgid "Connecting to Apache Cassandra or DataStax Enterprise (DSE)"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:284
msgid "The main properties to configure are: `contact-points`, to access the Cassandra database, `local-datacenter`, which is required by the driver, and – optionally – the keyspace to bind to."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:286
msgid "A sample configuration should look like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:292
#, no-wrap
msgid ""
"quarkus.cassandra.contact-points={cassandra_ip}:9042\n"
"quarkus.cassandra.local-datacenter={dc_name}\n"
"quarkus.cassandra.keyspace={keyspace}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:296
msgid "In this example, we are using a single instance running on localhost, and the keyspace containing our data is `k1`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:302
#, no-wrap
msgid ""
"quarkus.cassandra.contact-points=127.0.0.1:9042\n"
"quarkus.cassandra.local-datacenter=datacenter1\n"
"quarkus.cassandra.keyspace=k1\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:306
msgid "If your cluster requires plain text authentication, you can also provide two more settings: `username` and `password`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:311
#, no-wrap
msgid ""
"quarkus.cassandra.auth.username=john\n"
"quarkus.cassandra.auth.password=s3cr3t\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/cassandra.adoc:313
#, no-wrap
msgid "Connecting to a cloud DataStax Astra database"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:318
msgid "When connecting to Astra, instead of providing a contact point and a datacenter, you should provide `secure-connect-bundle`, which should point to a valid path to an Astra secure connect bundle, as well as `username` and`password`, since authentication is always required on Astra clusters."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:320
msgid "A sample configuration for DataStax Astra should look like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:327
#, no-wrap
msgid ""
"quarkus.cassandra.cloud.secure-connect-bundle=/path/to/secure-connect-bundle.zip\n"
"quarkus.cassandra.auth.username=john\n"
"quarkus.cassandra.auth.password=s3cr3t\n"
"quarkus.cassandra.keyspace=k1\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/cassandra.adoc:329
#, no-wrap
msgid "Advanced driver configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:336
msgid "You can configure other Java driver settings using `application.conf` or `application.json` files.  They need to be located in the classpath of your application.  All settings will be passed automatically to the underlying driver configuration mechanism.  Settings defined in `application.properties` with the `quarkus.cassandra` prefix will have priority over settings defined in `application.conf` or `application.json`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:339
msgid "To see the full list of settings, please refer to the link:https://docs.datastax.com/en/developer/java-driver/latest/manual/core/configuration/reference/[driver settings reference]."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/cassandra.adoc:340
#, no-wrap
msgid "Running a Cassandra Database"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:344
msgid "By default, `CassandraClient` is configured to access a local Cassandra database on port 9042 (the default Cassandra port)."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:347
msgid "Make sure that the setting `quarkus.cassandra.local-datacenter` matches the datacenter of your Cassandra cluster."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:350
msgid "If you don't know the name of your local datacenter, this value can be found by running the following CQL query: `SELECT data_center FROM system.local`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:353
msgid "If you want to use Docker to run a Cassandra database, you can use the following command to launch one:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:366
#, no-wrap
msgid ""
"docker run \\\n"
"   --name local-cassandra-instance \\\n"
"   -p 7000:7000 \\\n"
"   -p 7001:7001 \\\n"
"   -p 7199:7199 \\\n"
"   -p 9042:9042 \\\n"
"   -p 9160:9160 \\\n"
"   -p 9404:9404 \\\n"
"   -d \\\n"
"   launcher.gcr.io/google/cassandra3\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:370
msgid "Note that only the 9042 port is required. All others all optional but provide enhanced features like JMX monitoring of the Cassandra instance."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:373
msgid "Next you need to create the keyspace and table that will be used by your application. If you are using Docker, run the following commands:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:378
#, no-wrap
msgid ""
"docker exec -it local-cassandra-instance cqlsh -e \"CREATE KEYSPACE IF NOT EXISTS k1 WITH replication = {'class':'SimpleStrategy', 'replication_factor':1}\"\n"
"docker exec -it local-cassandra-instance cqlsh -e \"CREATE TABLE IF NOT EXISTS k1.fruit(store_id text, name text, description text, PRIMARY KEY((store_id), name))\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:381
msgid "If you're running Cassandra locally you can execute the cqlsh commands directly:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:386
#, no-wrap
msgid ""
"cqlsh -e \"CREATE KEYSPACE IF NOT EXISTS k1 WITH replication = {'class':'SimpleStrategy', 'replication_factor':1}\n"
"cqlsh -e \"CREATE TABLE IF NOT EXISTS k1.fruit(store_id text, name text, description text, PRIMARY KEY((store_id), name))\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/cassandra.adoc:388
#, no-wrap
msgid "Creating a frontend"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:391
msgid "Now let's add a simple web page to interact with our `FruitResource`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:395
msgid "Quarkus automatically serves static resources located under the `META-INF/resources` directory.  In the `src/main/resources/META-INF/resources` directory, add a `fruits.html` file with the content from this link:https://github.com/datastax/cassandra-quarkus/tree/main/quickstart/src/main/resources/META-INF/resources/fruits.html[fruits.html] file in it."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:397
msgid "You can now interact with your REST service:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:399
#: upstream/_versions/1.11/guides/cassandra.adoc:542
msgid "start Quarkus with `mvn clean quarkus:dev`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:400
msgid "open a browser to `http://localhost:8080/fruits.html`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:401
#: upstream/_versions/1.11/guides/cassandra.adoc:544
msgid "add new fruits to the list via the form"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/cassandra.adoc:403
#, no-wrap
msgid "Reactive Cassandra Client"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:407
msgid "When using `QuarkusCqlSession` you have access to reactive variant of methods that integrate with Quarkus and Mutiny."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:410
msgid "If you're not familiar with Mutiny, read the link:getting-started-reactive[Getting Started with Reactive guide] first."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:412
msgid "Let's rewrite the previous example using reactive programming with Mutiny."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:414
msgid "Firstly, we need to implement the `@Dao` that works in a reactive way:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:419
#, no-wrap
msgid ""
"@Dao\n"
"public interface FruitDaoReactive {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:422
#, no-wrap
msgid ""
"  @Update\n"
"  Uni<Void> updateAsync(Fruit fruitDao);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:426
#, no-wrap
msgid ""
"  @Select\n"
"  MutinyMappedReactiveResultSet<Fruit> findByIdAsync(String id);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:433
msgid "Please note the usage of `MutinyMappedReactiveResultSet` - it is a specialized `Mutiny` type converted from the original `Publisher` returned by the driver, which also exposes a few extra methods, e.g. to obtain the query execution info. If you don't need anything in that interface, you can also simply declare your method to return `Multi`: `Multi<Fruit> findByIdAsync(String id)`,"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:436
msgid "Similarly, the method `updateAsync` returns a `Uni` - it is automatically converted from the original result set returned by the driver."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:444
msgid "The Cassandra driver uses the Reactive Streams `Publisher` API for reactive calls. The Quarkus framework however uses Mutiny. Because of that, the `CqlQuarkusSession` interface transparently converts the `Publisher` instances returned by the driver into the reactive type `Multi`.  `CqlQuarkusSession` is also capable of converting a `Publisher` into a `Uni` – in this case, the publisher is expected to emit at most one row, then complete. This is suitable for write queries (they return no rows), or for read queries guaranteed to return one row at most (count queries, for example)."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:446
msgid "Next, we need to adapt the `FruitMapper` to construct a `FruitDaoReactive` instance:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:452
#, no-wrap
msgid ""
"@Mapper\n"
"public interface FruitMapper {\n"
"  // the existing method omitted\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:456
#, no-wrap
msgid ""
"  @DaoFactory\n"
"  FruitDaoReactive fruitDaoReactive();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:460
msgid "Now, we can create a `FruitReactiveService` that leverages the reactive `@Dao`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:465
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class FruitReactiveService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:467
#, no-wrap
msgid "  private final FruitDaoReactive fruitDao;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:472
#, no-wrap
msgid ""
"  @Inject\n"
"  public FruitReactiveService(FruitDaoReactive fruitDao) {\n"
"    this.fruitDao = fruitDao;\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:476
#, no-wrap
msgid ""
"  public Uni<Void> add(Fruit fruit) {\n"
"    return fruitDao.update(fruit);\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:481
#, no-wrap
msgid ""
"  public Multi<Fruit> get(String id) {\n"
"    return fruitDao.findById(id);\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:485
msgid "The `get()` method above returns `Multi`, and the `add()` method returns `Uni`; these types are compatible with the Quarkus reactive REST API."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:488
msgid "To integrate the reactive logic with REST API, you need to have a dependency to `quarkus-resteasy-mutiny`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:495
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-resteasy-mutiny</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:498
msgid "It provides an integration layer between `Multi`, `Uni` and the REST API."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:500
msgid "Finally, we can create a `FruitReactiveResource`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:509
#, no-wrap
msgid ""
"@Path(\"/reactive-fruits\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public class FruitReactiveResource {\n"
"  private static final String STORE_NAME = \"acme\";\n"
"  @Inject FruitReactiveService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:516
#, no-wrap
msgid ""
"  @GET\n"
"  public Multi<FruitDto> getAll() {\n"
"    return service\n"
"        .get(STORE_NAME)\n"
"        .map(fruit -> new FruitDto(fruit.getName(), fruit.getDescription()));\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:522
#, no-wrap
msgid ""
"  @POST\n"
"  public Multi<FruitDto> add(FruitDto fruitDto) {\n"
"    Fruit fruit = covertFromDto(fruitDto);\n"
"    return service.add(fruit).then(ignored -> getAll());\n"
"  }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:530
msgid "All methods exposed via REST interface are returning reactive types from the Mutiny API."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/cassandra.adoc:531
#, no-wrap
msgid "Creating a reactive frontend"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:538
msgid "Now let's add a simple web page to interact with our `FruitReactiveResource`.  In the `src/main/resources/META-INF/resources` directory, add a `reactive-fruits.html` file with the content from this link:https://github.com/datastax/cassandra-quarkus/tree/main/quickstart/src/main/resources/META-INF/resources/reactive-fruits.html[reactive-fruits.html] file in it."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:540
msgid "You can now interact with your reactive REST service:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:543
msgid "open a browser to `http://localhost:8080/reactive-fruits.html`"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/cassandra.adoc:546
#, no-wrap
msgid "Connection Health Check"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:550
msgid "If you are using the `quarkus-smallrye-health` extension, `cassandra-quarkus` will automatically add a readiness health check to validate the connection to the cluster."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:553
msgid "So when you access the `/q/health/ready` endpoint of your application you will have information about the connection validation status."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:556
msgid "This behavior can be disabled by setting the `quarkus.cassandra.health.enabled` property to `false` in your `application.properties`."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/cassandra.adoc:557
#, no-wrap
msgid "Metrics"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:561
msgid "If you are using the `quarkus-smallrye-metrics` extension, `cassandra-quarkus` can provide metrics about QuarkusCqlSession and Cassandra nodes."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:564
msgid "This behavior must first be enabled by setting the `quarkus.cassandra.metrics.enabled` property to `true` in your `application.properties`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:566
msgid "The next step that you need to do is set explicitly which metrics should be enabled."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:571
msgid "The `quarkus.cassandra.metrics.session-enabled` and `quarkus.cassandra.metrics.node-enabled` properties should be used for enabling metrics; the former should contain a list of session-level metrics to enable, while the latter should contain a list of node-level metrics to enable. Both properties accept a comma-separated list of valid metric names."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:574
msgid "For example, to enable `session.connected-nodes`, `session.bytes-sent`, and `node.pool.open-connections` you should add the following settings to your `application.properties`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/cassandra.adoc:580
#, no-wrap
msgid ""
"quarkus.cassandra.metrics.enabled=true\n"
"quarkus.cassandra.metrics.session-enabled=connected-nodes,bytes-sent\n"
"quarkus.cassandra.metrics.node-enabled=pool.open-connections\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:585
msgid "For the full list of available metrics, please refer to the link:https://docs.datastax.com/en/developer/java-driver/latest/manual/core/configuration/reference/[driver settings reference] and the `advanced.metrics` section."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:588
msgid "When metrics are enabled and you access the `/q/metrics` endpoint of your application, you will see metric reports for all enabled metrics."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/cassandra.adoc:589
#, no-wrap
msgid "Building a native executable"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:592
msgid "You can use the Cassandra client in a native executable."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:594
msgid "You can build a native executable with the `mvn clean package -Dnative` command."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:596
msgid "Running it is as simple as executing `./target/quickstart-1.0.0-SNAPSHOT-runner`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:598
msgid "You can then point your browser to `http://localhost:8080/fruits.html` and use your application."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/cassandra.adoc:599
#, no-wrap
msgid "Conclusion"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/cassandra.adoc:603
msgid "Accessing a Cassandra database from a client application is easy with Quarkus and the Cassandra extension, which provides configuration and native support for the DataStax Java driver for Apache Cassandra."
msgstr ""
