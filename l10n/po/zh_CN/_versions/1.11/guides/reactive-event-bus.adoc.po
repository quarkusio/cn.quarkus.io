# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:6
#, no-wrap
msgid "Quarkus - Using the event bus"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:13
msgid "Quarkus allows different beans to interact using asynchronous events, thus promoting loose-coupling.  The messages are sent to _virtual addresses_.  It offers 3 types of delivery mechanism:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:15
msgid "point-to-point - send the message, one consumer receives it. If several consumers listen to the address, a round robin is applied;"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:16
msgid "publish/subscribe - publish a message, all the consumers listening to the address are receiving the message;"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:17
msgid "request/reply - send the message and expect a response. The receiver can respond to the message in an asynchronous-fashion"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:19
msgid "All these delivery mechanism are non-blocking, and are providing one of the fundamental brick to build reactive applications."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:22
msgid "The asynchronous message passing feature allows replying to messages which is not supported by Reactive Messaging.  However, it is limited to single-event behavior (no stream) and to local messages."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:23
#, no-wrap
msgid "Installing"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:27
msgid "This mechanism uses the Vert.x EventBus, so you need to enable the `vertx` extension to use this feature.  If you are creating a new project, set the `extensions` parameter are follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:36
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=vertx-quickstart \\\n"
"    -Dextensions=\"vertx,resteasy-mutiny\" \\\n"
"    -DnoExamples\n"
"cd vertx-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:40
msgid "If you have an already created project, the `vertx` extension can be added to an existing Quarkus project with the `add-extension` command:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:44
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"vertx,resteasy-mutiny\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:47
msgid "Otherwise, you can manually add this to the dependencies section of your `pom.xml` file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:54
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-vertx</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:56
#, no-wrap
msgid "Consuming events"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:59
msgid "To consume events, use the `io.quarkus.vertx.ConsumeEvent` annotation:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:63
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:111
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:222
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:296
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:333
#, no-wrap
msgid "package org.acme.vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:65
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:113
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:335
#, no-wrap
msgid "import io.quarkus.vertx.ConsumeEvent;\n"
msgstr "import io.quarkus.vertx.ConsumeEvent;\n"

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:67
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:337
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:70
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:121
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:340
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class GreetingService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:76
#, no-wrap
msgid ""
"    @ConsumeEvent                           // <1>\n"
"    public String consume(String name) {    // <2>\n"
"        return name.toUpperCase();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:78
msgid "If not set, the address is the fully qualified name of the bean, for instance, in this snippet it's `org.acme.vertx.GreetingService`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:79
msgid "The method parameter is the message body. If the method returns _something_ it's the message response."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:84
msgid "By default, the code consuming the event must be _non-blocking_, as it's called on the Vert.x event loop.  If your processing is blocking, use the `blocking` attribute:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:91
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"blocking-consumer\", blocking = true)\n"
"void consumeBlocking(String message) {\n"
"    // Something blocking\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:94
msgid "Alternatively, you can annotate your method with `@io.smallrye.common.annotation.Blocking`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:101
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"blocking-consumer\")\n"
"@Blocking\n"
"void consumeBlocking(String message) {\n"
"    // Something blocking\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:104
msgid "When using `@Blocking`, it ignores the value of the `blocking` attribute of `@ConsumeEvent`."
msgstr "当使用 `@Blocking` ，它忽略了 `blocking` 属性的值 `@ConsumeEvent` 。"

#. type: delimited block =
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:107
msgid "Asynchronous processing is also possible by returning either an `io.smallrye.mutiny.Uni` or a `java.util.concurrent.CompletionStage`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:118
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import java.util.concurrent.CompletableFuture;\n"
"import java.util.concurrent.CompletionStage;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:127
#, no-wrap
msgid ""
"    @ConsumeEvent\n"
"    public CompletionStage<String> consume(String name) {\n"
"        // return a CompletionStage completed when the processing is finished.\n"
"        // You can also fail the CompletionStage explicitly\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:134
#, no-wrap
msgid ""
"    @ConsumeEvent\n"
"    public Uni<String> process(String name) {\n"
"        // return an Uni completed when the processing is finished.\n"
"        // You can also fail the Uni explicitly\n"
"    }\n"
"}\n"
msgstr ""

#. type: Block title
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:137
#, no-wrap
msgid "Mutiny"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:140
msgid "The previous example uses Mutiny reactive types, if you're not familiar with them, we recommend reading the link:getting-started-reactive#mutiny[Getting Started with Reactive guide]."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:142
#, no-wrap
msgid "Configuring the address"
msgstr "配置地址"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:145
msgid "The `@ConsumeEvent` annotation can be configured to set the address:"
msgstr "可以配置 `@ConsumeEvent` 注解设置地址："

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:152
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")               // <1>\n"
"public String consume(String name) {\n"
"    return name.toUpperCase();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:154
msgid "Receive the messages sent to the `greeting` address"
msgstr "接收发送到 `greeting` 地址的信息"

#. type: Title ===
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:155
#, no-wrap
msgid "Replying"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:159
msgid "The _return_ value of a method annotated with `@ConsumeEvent` is used as response to the incoming message.  For instance, in the following snippet, the returned `String` is the response."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:166
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public String consume(String name) {\n"
"    return name.toUpperCase();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:169
msgid "You can also return a `Uni<T>` or a `CompletionStage<T>` to handle asynchronous reply:"
msgstr "你也可以返回一个 `Uni<T>` 或一个 `CompletionStage<T>` 来处理异步回复："

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:176
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public Uni<String> consume2(String name) {\n"
"    return Uni.createFrom().item(() -> name.toUpperCase()).emitOn(executor);\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:181
msgid "You can inject an `executor` if you use the Context Propagation extension:"
msgstr "如果你使用Context Propagation扩展，你可以注入一个 `executor` ："

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:184
#, no-wrap
msgid "@Inject Executor executor;\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:187
#, no-wrap
msgid "Implementing fire and forget interactions"
msgstr "实现即发即弃（fire and forget）交互"

#. type: delimited block =
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:192
msgid "You don't have to reply to received messages.  Typically for a _fire and forget_ interaction, the messages are consumed and the sender does not need to know about it.  To implement this, your consumer method just returns `void`"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:199
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public void consume(String event) {\n"
"    // Do something with the event\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:201
#, no-wrap
msgid "Dealing with messages"
msgstr "处理信息"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:204
msgid "As said above, this mechanism is based on the Vert.x event bus. So, you can also use `Message` directly:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:212
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public void consume(Message<String> msg) {\n"
"    System.out.println(msg.address());\n"
"    System.out.println(msg.body());\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:214
#, no-wrap
msgid "Sending messages"
msgstr "发送信息"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:218
msgid "Ok, we have seen how to receive messages, let's now switch to the _other side_: the sender.  Sending and publishing messages use the Vert.x event bus:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:227
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:301
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.mutiny.core.eventbus.EventBus;\n"
"import io.vertx.mutiny.core.eventbus.Message;\n"
"import org.jboss.resteasy.annotations.jaxrs.PathParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:233
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:307
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:236
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:310
#, no-wrap
msgid ""
"@Path(\"/async\")\n"
"public class EventResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:239
#, no-wrap
msgid ""
"    @Inject\n"
"    EventBus bus;                                       // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:248
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"{name}\")\n"
"    public Uni<String> greeting(@PathParam String name) {\n"
"        return bus.<String>request(\"greeting\", name)        // <2>\n"
"                .onItem().transform(Message::body);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:250
msgid "Inject the Event bus"
msgstr "注入事件总线"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:251
msgid "Send a message to the address `greeting`. Message payload is `name`"
msgstr "发送消息到地址 `greeting` 。消息的有效载荷是 `name` "

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:253
msgid "The `EventBus` object provides methods to:"
msgstr "`EventBus` 对象提供了以下方法："

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:255
msgid "`send` a message to a specific address - one single consumer receives the message."
msgstr "`send` 一个消息到一个特定的地址 - 单个消费者收到该消息。"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:256
msgid "`publish` a message to a specific address - all consumers receive the messages."
msgstr "`publish` 向一个特定的地址发送消息--所有的消费者都会收到这些消息。"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:257
msgid "`send` a message and expect reply"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:267
#, no-wrap
msgid ""
"// Case 1\n"
"bus.sendAndForget(\"greeting\", name)\n"
"// Case 2\n"
"bus.publish(\"greeting\", name)\n"
"// Case 3\n"
"Uni<String> response = bus.<String>request(\"address\", \"hello, how are you?\")\n"
"        .onItem().transform(Message::body);\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:269
#, no-wrap
msgid "Putting things together - bridging HTTP and messages"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:275
msgid "Let's revisit a greeting HTTP endpoint and use asynchronous message passing to delegate the call to a separated bean.  It uses the request/reply dispatching mechanism.  Instead of implementing the business logic inside the JAX-RS endpoint, we are sending a message.  This message is consumed by another bean and the response is sent using the _reply_ mechanism."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:277
msgid "First create a new project using:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:286
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=vertx-http-quickstart \\\n"
"    -Dextensions=\"vertx\" \\\n"
"    -DnoExamples\n"
"cd vertx-http-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:289
msgid "You can already start the application in _dev mode_ using `./mvnw compile quarkus:dev`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:291
msgid "Then, creates a new JAX-RS resource with the following content:"
msgstr ""

#. type: Block title
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:293
#, no-wrap
msgid "src/main/java/org/acme/vertx/EventResource.java"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:313
#, no-wrap
msgid ""
"    @Inject\n"
"    EventBus bus;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:322
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"{name}\")\n"
"    public Uni<String> greeting(@PathParam String name) {\n"
"        return bus.<String>request(\"greeting\", name)            // <1>\n"
"                .onItem().transform(Message::body);            // <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:324
msgid "send the `name` to the `greeting` address and request a response"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:325
msgid "when we get the response, extract the body and send it to the user"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:328
msgid "If you call this endpoint, you will wait and get a timeout. Indeed, no one is listening.  So, we need a consumer listening on the `greeting` address. Create a `GreetingService` bean with the following content:"
msgstr ""

#. type: Block title
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:330
#, no-wrap
msgid "src/main/java/org/acme/vertx/GreetingService.java"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:345
#, no-wrap
msgid ""
"    @ConsumeEvent(\"greeting\")\n"
"    public String greeting(String name) {\n"
"        return \"Hello \" + name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:347
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:350
msgid "This bean receives the name, and returns the greeting message."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:352
msgid "Now, open your browser to http://localhost:8080/async/Quarkus, and you should see:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:356
#, no-wrap
msgid "Hello Quarkus\n"
msgstr "Hello Quarkus\n"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:359
msgid "To better understand, let's detail how the HTTP request/response has been handled:"
msgstr "为了更好地理解，让我们详细介绍一下HTTP request/response 是如何被处理的："

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:361
msgid "The request is received by the `hello` method"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:362
msgid "a message containing the _name_ is sent to the event bus"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:363
msgid "Another bean receives this message and computes the response"
msgstr "另一个Bean收到这个消息，并计算出响应"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:364
msgid "This response is sent back using the reply mechanism"
msgstr "使用回复机制发回此响应"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:365
msgid "Once the reply is received by the sender, the content is written to the HTTP response"
msgstr "一旦发送方收到回复，会将内容写入 HTTP 响应"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:367
msgid "This application can be packaged using:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:371
#, no-wrap
msgid "./mvnw clean package\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:374
msgid "You can also compile it as a native executable with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:378
#, no-wrap
msgid "./mvnw clean package -Pnative\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:380
#, no-wrap
msgid "Using codecs"
msgstr "使用编解码器"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:385
msgid "The https://vertx.io/docs/vertx-core/java/#event_bus[Vert.x Event Bus] uses codecs to _serialize_ and _deserialize_ objects.  Quarkus provides a default codec for local delivery.  So you can exchange objects as follows:"
msgstr "link:https://vertx.io/docs/vertx-core/java/#event_bus[Vert.x事件总线] 使用编解码器来 _序列化_ 和 _反序列化_ 对象。Quarkus为本地交付提供了一个默认的编解码器。所以你可以按以下方式交换对象："

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:395
#, no-wrap
msgid ""
"@GET\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"@Path(\"{name}\")\n"
"public Uni<String> greeting(@PathParam String name) {\n"
"    return bus.<String>request(\"greeting\", new MyName(name))\n"
"        .onItem().transform(Message::body);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:400
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"greeting\")\n"
"Uni<String> greeting(MyName name) {\n"
"    return Uni.createFrom().item(() -> \"Hello \" + name.getName());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:403
msgid "If you want to use a specific codec, you need to explicitly set it on both ends:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:414
#, no-wrap
msgid ""
"@GET\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"@Path(\"{name}\")\n"
"public Uni<String> greeting(@PathParam String name) {\n"
"    return bus.<String>request(\"greeting\", name,\n"
"        new DeliveryOptions().setCodecName(MyNameCodec.class.getName())) // <1>\n"
"        .onItem().transform(Message::body);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:419
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"greeting\", codec = MyNameCodec.class)            // <2>\n"
"Uni<String> greeting(MyName name) {\n"
"    return Uni.createFrom().item(() -> \"Hello \"+name.getName());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:421
msgid "Set the name of the codec to use to send the message"
msgstr "设置用于发送消息的编解码器的名称"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-event-bus.adoc:421
msgid "Set the codec to use to receive the message"
msgstr "设置用于接收信息的编解码器"
