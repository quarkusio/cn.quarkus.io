# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:6
#, no-wrap
msgid "Quarkus - Scheduler Reference Guide"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:20
msgid "Modern applications often need to run specific tasks periodically.  There are two scheduler extensions in Quarkus.  The `quarkus-scheduler` extension brings the API and a lightweight in-memory scheduler implementation.  The `quarkus-quartz` extension implements the API from the `quarkus-scheduler` extension and contains a scheduler implementation based on the Quartz library.  You will only need `quarkus-quartz` for more advanced scheduling use cases, such as persistent tasks, clustering and programmatic scheduling of jobs."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:22
msgid "If you add the `quarkus-quartz` dependency to your project the lightweight scheduler implementation from the `quarkus-scheduler` extension is automatically disabled."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:23
#, no-wrap
msgid "Scheduled Methods"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:28
msgid "If you annotate a method with `@io.quarkus.scheduler.Scheduled` it is automatically scheduled for invocation.  In fact, such a method must be a non-private non-static method of a CDI bean.  As a consequence of being a method of a CDI bean a scheduled method can be annotated with interceptor bindings, such as `@javax.transaction.Transactional` and `@org.eclipse.microprofile.metrics.annotation.Counted`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:30
msgid "If there is no CDI scope defined on the declaring class then `@Singleton` is used."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:32
msgid "Furthermore, the annotated method must return `void` and either declare no parameters or one parameter of type `io.quarkus.scheduler.ScheduledExecution`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:34
msgid "The annotation is repeatable so a single method could be scheduled multiple times."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:35
#, no-wrap
msgid "Triggers"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:40
msgid "A trigger is defined either by the `@Scheduled#cron()` or by the `@Scheduled#every()` attributes.  If both are specified, the cron expression takes precedence.  If none is specified, the build fails with an `IllegalStateException`."
msgstr ""

#. type: Title ====
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:41
#, no-wrap
msgid "CRON"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:45
msgid "A CRON trigger is defined by a cron-like expression.  For example `\"0 15 10 * * ?\"` fires at 10:15am every day."
msgstr ""

#. type: Block title
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:46
#, no-wrap
msgid "CRON Trigger Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:51
#, no-wrap
msgid ""
"@Scheduled(cron = \"0 15 10 * * ?\")\n"
"void fireAt10AmEveryDay() { }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:56
msgid "The syntax used in CRON expressions is controlled by the `quarkus.scheduler.cron-type` property.  The values can be `cron4j`, `quartz`, `unix` and `spring`.  `quartz` is used by default."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:58
msgid "If a CRON expression starts with `{` and ends with `}` then the scheduler attempts to find a corresponding config property and use the configured value instead."
msgstr ""

#. type: Block title
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:59
#, no-wrap
msgid "CRON Config Property Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:64
#, no-wrap
msgid ""
"@Scheduled(cron = \"{myMethod.cron.expr}\")\n"
"void myMethod() { }\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:66
#, no-wrap
msgid "Intervals"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:72
msgid "An interval trigger defines a period between invocations.  The period expression is based on the ISO-8601 duration format `PnDTnHnMn.nS` and the value of `@Scheduled#every()` is parsed with `java.time.Duration#parse(CharSequence)`.  However, if an expression starts with a digit then the `PT` prefix is added automatically.  So for example, `15m` can be used instead of `PT15M` and is parsed as \"15 minutes\"."
msgstr ""

#. type: Block title
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:73
#, no-wrap
msgid "Interval Trigger Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:78
#, no-wrap
msgid ""
"@Scheduled(every = \"15m\")\n"
"void every15Mins() { }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:81
msgid "If a value starts with `{` and ends with `}` then the scheduler attempts to find a corresponding config property and use the configured value instead."
msgstr ""

#. type: Block title
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:82
#, no-wrap
msgid "Interval Config Property Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:87
#, no-wrap
msgid ""
"@Scheduled(every = \"{myMethod.every.expr}\")\n"
"void myMethod() { }\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:89
#, no-wrap
msgid "Identity"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:94
msgid "By default, a unique id is generated for each scheduled method.  This id is used in log messages and during debugging.  Sometimes a possibility to specify an explicit id may come in handy."
msgstr ""

#. type: Block title
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:95
#, no-wrap
msgid "Identity Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:100
#, no-wrap
msgid ""
"@Scheduled(identity = \"myScheduledMethod\")\n"
"void myMethod() { }\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:102
#, no-wrap
msgid "Delayed Execution"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:105
msgid "`@Scheduled` provides two ways to delay the time a trigger should start firing at."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:107
msgid "`@Scheduled#delay()` and `@Scheduled#delayUnit()` form the initial delay together."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:112
#, no-wrap
msgid ""
"@Scheduled(every = \"2s\", delay = 2, delayUnit = TimeUnit.HOUR) <1>\n"
"void everyTwoSeconds() { }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:114
msgid "The trigger fires for the first time two hours after the application start."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:116
msgid "The final value is always rounded to full second."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:121
msgid "`@Scheduled#delayed()` is a text alternative to the properties above.  The period expression is based on the ISO-8601 duration format `PnDTnHnMn.nS` and the value is parsed with `java.time.Duration#parse(CharSequence)`.  However, if an expression starts with a digit, the `PT` prefix is added automatically.  So for example, `15s` can be used instead of `PT15S` and is parsed as \"15 seconds\"."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:126
#, no-wrap
msgid ""
"@Scheduled(every = \"2s\", delayed = \"2h\")\n"
"void everyTwoSeconds() { }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:129
msgid "If `@Scheduled#delay()` is set to a value greater then zero the value of `@Scheduled#delayed()` is ignored."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:132
msgid "The main advantage over `@Scheduled#delay()` is that the value is configurable.  If the value starts with `{` and ends with `}` then the scheduler attempts to find a corresponding config property and use the configured value instead:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:137
#, no-wrap
msgid ""
"@Scheduled(every = \"2s\", delayed = \"{myMethod.delay.expr}\") <1>\n"
"void everyTwoSeconds() { }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:139
msgid "The config property `myMethod.delay.expr` is used to set the delay."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:141
#, no-wrap
msgid "Concurrent Execution"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:145
msgid "By default, a scheduled method can be executed concurrently.  Nevertheless, it is possible to specify the strategy to handle concurrent executions via `@Scheduled#concurrentExecution()`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:149
#, no-wrap
msgid "import static io.quarkus.scheduler.Scheduled.ConcurrentExecution.SKIP;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:154
#, no-wrap
msgid ""
"@Scheduled(every = \"1s\", concurrentExecution = SKIP) <1>\n"
"void nonConcurrent() {\n"
"  // we can be sure that this method is never executed concurrently\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:156
msgid "Concurrent executions are skipped."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:157
#, no-wrap
msgid "Scheduler"
msgstr "调度器"

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:160
msgid "Quarkus provides a built-in bean of type `io.quarkus.scheduler.Scheduler` that can be injected and used to pause/resume the scheduler."
msgstr ""

#. type: Block title
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:161
#, no-wrap
msgid "Scheduler Injection Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:165
#, no-wrap
msgid "import io.quarkus.scheduler.Scheduler;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:167
#, no-wrap
msgid "class MyService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:170
#, no-wrap
msgid ""
"   @Inject\n"
"   Scheduler scheduler;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:179
#, no-wrap
msgid ""
"   void ping() {\n"
"      scheduler.pause(); <1>\n"
"      if (scheduler.isRunning()) {\n"
"         throw new IllegalStateException(\"This should never happen!\");\n"
"      }\n"
"      scheduler.resume(); <2>\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:181
msgid "Pause all triggers."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:182
msgid "Resume the scheduler."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:183
#, no-wrap
msgid "Programmatic Scheduling"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:186
msgid "If you need to schedule a job programmatically you'll need to add the link:quartz[Quartz extension] and use the Quartz API directly."
msgstr ""

#. type: Block title
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:187
#, no-wrap
msgid "Programmatic Scheduling with Quartz API"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:191
#, no-wrap
msgid "import org.quartz.Scheduler;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:193
#, no-wrap
msgid "class MyJobs {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:208
#, no-wrap
msgid ""
"    void onStart(@Observes StartupEvent event, Scheduler quartz) throws SchedulerException {\n"
"        JobDetail job = JobBuilder.newJob(SomeJob.class)\n"
"                .withIdentity(\"myJob\", \"myGroup\")\n"
"                .build();\n"
"        Trigger trigger = TriggerBuilder.newTrigger()\n"
"                .withIdentity(\"myTrigger\", \"myGroup\")\n"
"                .startNow()\n"
"                .withSchedule(SimpleScheduleBuilder.simpleSchedule()\n"
"                        .withIntervalInSeconds(1)\n"
"                        .repeatForever())\n"
"                .build();\n"
"        quartz.scheduleJob(job, trigger);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:211
msgid "By default, the scheduler is not started unless a `@Scheduled` business method is found. You may need to force the start of the scheduler for \"pure\" programmatic scheduling. See also <<quartz.adoc#quartz-configuration-reference,Quartz Configuration Reference>>."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:212
#, no-wrap
msgid "Scheduled Methods and Testing"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:218
msgid "It is often desirable to disable the scheduler when running the tests.  The scheduler can be disabled through the runtime config property `quarkus.scheduler.enabled`.  If set to `false` the scheduler is not started even though the application contains scheduled methods.  You can even disable the scheduler for particular <<getting-started-testing#testing_different_profiles,Test Profiles>>."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:219
#, no-wrap
msgid "Configuration Reference"
msgstr ""
