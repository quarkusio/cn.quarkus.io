# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.11/guides/building-native-image.adoc:6
#, no-wrap
msgid "Quarkus - Building a Native Executable"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:11
msgid "This guide covers:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:13
msgid "Compiling the application to a native executable"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:14
msgid "Packaging the native executable in a container"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/building-native-image.adoc:15
#: upstream/_versions/1.11/guides/building-native-image.adoc:571
#, no-wrap
msgid "Debugging native executable"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:17
msgid "This guide takes as input the application developed in the link:getting-started[Getting Started Guide]."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/building-native-image.adoc:18
#, no-wrap
msgid "GraalVM"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:24
msgid "Building a native executable requires using a distribution of GraalVM.  There are three distributions: Oracle GraalVM Community Edition (CE), Oracle GraalVM Enterprise Edition (EE) and Mandrel.  The differences between the Oracle and Mandrel distributions are as follows:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:27
msgid "Mandrel is a downstream distribution of the Oracle GraalVM CE.  Mandrel's main goal is to provide a way to build native executables specifically designed to support Quarkus."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:36
msgid "Mandrel releases are built from a code base derived from the upstream Oracle GraalVM CE code base, with only minor changes but some significant exclusions that are not necessary for Quarkus native apps.  They support the same capabilities to build native executables as Oracle GraalVM CE, with no significant changes to functionality.  Notably, they do not include support for polyglot programming.  The reason for these exclusions is to provide a better level of support for the majority of Quarkus users.  These exclusions also mean Mandrel offers a considerable reduction in its distribution size when compared with Oracle GraalVM CE/EE."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:41
msgid "Mandrel is built slightly differently to Oracle GraalVM CE, using the standard OpenJDK project.  This means that it does not profit from a few small enhancements that Oracle have added to the version of OpenJDK used to build their own GraalVM downloads.  This enhancements are omitted because upstream OpenJDK does not manage them, and cannot vouch for.  This is particularly important when it comes to conformance and security."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:50
msgid "Mandrel is currently only recommended for building native executables that target Linux containerized environments.  This means that Mandrel users should use containers to build their native executables.  If you are building native executables for macOS or Windows target platforms, you should consider using Oracle GraalVM instead, because Mandrel does not currently target these platforms.  Building native executables directly on bare metal Linux is possible, with details available in the https://github.com/graalvm/mandrel/blob/master/README-Mandrel.md[Mandrel README] and https://github.com/graalvm/mandrel/releases[Mandrel releases]."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:52
msgid "The prerequisites vary slightly depending on whether you are using Oracle GraalVM CE/EE or Mandrel."
msgstr ""

#. type: Block title
#: upstream/_versions/1.11/guides/building-native-image.adoc:54
#, no-wrap
msgid "Install the Java 11 version of GraalVM"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:58
msgid "While Oracle GraalVM is available for both Java 8 and Java 11 (Mandrel only supports Java 11), Quarkus only works with the Java 11 version.  If you use the Oracle distribution, make sure to install the Java 11 version."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/building-native-image.adoc:60
#, no-wrap
msgid "Prerequisites for Mandrel"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:63
msgid "To complete this guide using Mandrel, you need:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:65
#: upstream/_versions/1.11/guides/building-native-image.adoc:78
msgid "less than 15 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:66
#: upstream/_versions/1.11/guides/building-native-image.adoc:79
msgid "an IDE"
msgstr "一个编辑器"

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:67
#: upstream/_versions/1.11/guides/building-native-image.adoc:80
msgid "JDK 11 installed with `JAVA_HOME` configured appropriately"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:68
#: upstream/_versions/1.11/guides/building-native-image.adoc:83
msgid "A working container runtime (Docker, podman)"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:69
#: upstream/_versions/1.11/guides/building-native-image.adoc:84
msgid "The code of the application developed in the link:getting-started[Getting Started Guide]."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:72
msgid "Skip to <<#container-runtime,this section>> to continue with the guide for Mandrel, and follow the Mandrel-specific instructions in that section."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/building-native-image.adoc:73
#, no-wrap
msgid "Prerequisites for Oracle GraalVM CE/EE"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:76
msgid "To complete this guide, you need:"
msgstr "要完成这个指南，你需要："

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:81
msgid "A xref:configuring-c-development[working C development environment]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:82
msgid "GraalVM version {graalvm-version} (be sure to install the Java 11 support) installed and xref:configuring-graalvm[configured appropriately]"
msgstr ""

#. type: Block title
#: upstream/_versions/1.11/guides/building-native-image.adoc:85
#, no-wrap
msgid "Supporting native compilation in C"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:90
msgid "What does having a working C developer environment mean?"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:92
msgid "On Linux, you will need GCC, and the glibc and zlib headers. Examples for common distributions:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/building-native-image.adoc:99
#, no-wrap
msgid ""
"# dnf (rpm-based)\n"
"sudo dnf install gcc glibc-devel zlib-devel libstdc++-static\n"
"# Debian-based distributions:\n"
"sudo apt-get install build-essential libz-dev zlib1g-dev\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:101
msgid "XCode provides the required dependencies on macOS:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/building-native-image.adoc:105
#, no-wrap
msgid "xcode-select --install\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:107
msgid "On Windows, you will need to install the https://aka.ms/vs/15/release/vs_buildtools.exe[Visual Studio 2017 Visual C++ Build Tools]"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/building-native-image.adoc:110
#, no-wrap
msgid "Configuring GraalVM"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:115
msgid "If you cannot install GraalVM, you can use a multi-stage Docker build to run Maven inside a Docker container that embeds GraalVM. There is an explanation of how to do this at the end of this guide."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:118
msgid "Version {graalvm-version} is required. Using the community edition is enough."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:120
msgid "Install GraalVM (pick the java 11 version) if you haven't already. You have a few options for this:"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:121
msgid "Use platform-specific install tools like https://github.com/graalvm/homebrew-tap[homebrew], https://sdkman.io/jdks#Oracle[sdkman], or https://github.com/ScoopInstaller/Java[scoop]."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:123
msgid "Download the appropriate Community Edition archive from <https://github.com/graalvm/graalvm-ce-builds/releases>, and unpack it like you would any other JDK.  Make sure to download and install at Java 11 version."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:124
msgid "Configure the runtime environment. Set `GRAALVM_HOME` environment variable to the GraalVM installation directory, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/building-native-image.adoc:128
#, no-wrap
msgid "export GRAALVM_HOME=$HOME/Development/graalvm/\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:131
msgid "On macOS, point the variable to the `Home` sub-directory:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/building-native-image.adoc:135
#, no-wrap
msgid "export GRAALVM_HOME=$HOME/Development/graalvm/Contents/Home/\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:138
msgid "On Windows, you will have to go through the Control Panel to set your environment variables."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:142
msgid "Installing via scoop will do this for you."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:144
msgid "Install the `native-image` tool using `gu install`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/building-native-image.adoc:148
#, no-wrap
msgid "${GRAALVM_HOME}/bin/gu install native-image\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:151
msgid "Some previous releases of GraalVM included the `native-image` tool by default.  This is no longer the case; it must be installed as a second step after GraalVM itself is installed. Note: there is an outstanding issue xref:graal-and-catalina[using GraalVM with macOS Catalina]."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:152
msgid "(Optional) Set the `JAVA_HOME` environment variable to the GraalVM installation directory."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/building-native-image.adoc:156
#, no-wrap
msgid "export JAVA_HOME=${GRAALVM_HOME}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:158
msgid "(Optional) Add the GraalVM `bin` directory to the path"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/building-native-image.adoc:162
#, no-wrap
msgid "export PATH=${GRAALVM_HOME}/bin:$PATH\n"
msgstr ""

#. type: Block title
#: upstream/_versions/1.11/guides/building-native-image.adoc:165
#, no-wrap
msgid "Issues using GraalVM with macOS Catalina"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:169
msgid "GraalVM binaries are not (yet) notarized for macOS Catalina as reported in this https://github.com/oracle/graal/issues/1724[GraalVM issue]. This means that you may see the following error when using `gu`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/building-native-image.adoc:173
#, no-wrap
msgid "“gu” cannot be opened because the developer cannot be verified\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:176
msgid "Use the following command to recursively delete the `com.apple.quarantine` extended attribute on the GraalVM install directory as a workaround:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/building-native-image.adoc:180
#, no-wrap
msgid "xattr -r -d com.apple.quarantine ${GRAALVM_HOME}/../..\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/building-native-image.adoc:183
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:186
msgid "We recommend that you follow the instructions in the next sections and package the application step by step. However, you can go right to the completed example."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:188
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:190
msgid "The solution is located in the `getting-started` directory."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/building-native-image.adoc:191
#, no-wrap
msgid "Producing a native executable"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:194
msgid "The native executable for our application will contain the application code, required libraries, Java APIs, and a reduced version of a VM. The smaller VM base improves the startup time of the application and produces a minimal disk footprint."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:196
msgid "image:native-executable-process.png[Creating a native executable]"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:198
msgid "If you have generated the application from the previous tutorial, you can find in the `pom.xml` the following _profile_:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/building-native-image.adoc:209
#, no-wrap
msgid ""
"<profiles>\n"
"    <profile>\n"
"        <id>native</id>\n"
"        <properties>\n"
"            <quarkus.package.type>native</quarkus.package.type>\n"
"        </properties>\n"
"    </profile>\n"
"</profiles>\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:215
msgid "You can provide custom options for the `native-image` command using the `<quarkus.native.additional-build-args>` property.  Multiple options may be separated by a comma."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:217
msgid "Another possibility is to include the `quarkus.native.additional-build-args` configuration property in your `application.properties`."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:219
msgid "You can find more information about how to configure the native image building process in the <<configuration-reference>> section below."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:224
msgid "We use a profile because, you will see very soon, packaging the native executable takes a _few_ minutes. You could just pass -Dquarkus.package.type=native as a property on the command line, however it is better to use a profile as this allows native image tests to also be run."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:226
msgid "Create a native executable using: `./mvnw package -Pnative`."
msgstr ""

#. type: Block title
#: upstream/_versions/1.11/guides/building-native-image.adoc:229
#, no-wrap
msgid "Issues with packaging on Windows"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:234
msgid "The Microsoft Native Tools for Visual Studio must first be initialized before packaging. You can do this by starting the `x64 Native Tools Command Prompt` that was installed with the Visual Studio Build Tools. At `x64 Native Tools Command Prompt` you can navigate to your project folder and run `mvnw package -Pnative`."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:236
msgid "Another solution is to write a script to do this for you:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/building-native-image.adoc:240
#, no-wrap
msgid "cmd /c 'call \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Auxiliary\\Build\\vcvars64.bat\" && mvn package -Pnative'\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:245
msgid "In addition to the regular files, the build also produces `target/getting-started-1.0.0-SNAPSHOT-runner`.  You can run it using: `./target/getting-started-1.0.0-SNAPSHOT-runner`."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/building-native-image.adoc:246
#, no-wrap
msgid "Testing the native executable"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:249
msgid "Producing a native executable can lead to a few issues, and so it's also a good idea to run some tests against the application running in the native file."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:251
msgid "In the `pom.xml` file, the `native` profile contains:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/building-native-image.adoc:274
#, no-wrap
msgid ""
"<plugin>\n"
"    <groupId>org.apache.maven.plugins</groupId>\n"
"    <artifactId>maven-failsafe-plugin</artifactId>\n"
"    <version>${surefire-plugin.version}</version>\n"
"    <executions>\n"
"        <execution>\n"
"            <goals>\n"
"                <goal>integration-test</goal>\n"
"                <goal>verify</goal>\n"
"            </goals>\n"
"            <configuration>\n"
"                <systemPropertyVariables>\n"
"                    <native.image.path>${project.build.directory}/${project.build.finalName}-runner</native.image.path>\n"
"                    <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"                    <maven.home>${maven.home}</maven.home>\n"
"                </systemPropertyVariables>\n"
"            </configuration>\n"
"        </execution>\n"
"    </executions>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:277
msgid "This instructs the failsafe-maven-plugin to run integration-test and indicates the location of the produced native executable."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:279
msgid "Then, open the `src/test/java/org/acme/quickstart/NativeGreetingResourceIT.java`. It contains:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/building-native-image.adoc:283
#, no-wrap
msgid "package org.acme.quickstart;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/building-native-image.adoc:286
#, no-wrap
msgid "import io.quarkus.test.junit.NativeImageTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/building-native-image.adoc:289
#, no-wrap
msgid ""
"@NativeImageTest // <1>\n"
"public class NativeGreetingResourceIT extends GreetingResourceTest { // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/building-native-image.adoc:291
#, no-wrap
msgid "    // Run the same tests\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/building-native-image.adoc:293
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:296
msgid "Use another test runner that starts the application from the native file before the tests.  The executable is retrieved using the `native.image.path` system property configured in the _Failsafe Maven Plugin_."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:297
msgid "We extend our previous tests, but you can also implement your tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:299
msgid "To see the `NativeGreetingResourceIT` run against the native executable, use `./mvnw verify -Pnative`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/building-native-image.adoc:323
#, no-wrap
msgid ""
"$ ./mvnw verify -Pnative\n"
"...\n"
"[getting-started-1.0.0-SNAPSHOT-runner:18820]     universe:     587.26 ms\n"
"[getting-started-1.0.0-SNAPSHOT-runner:18820]      (parse):   2,247.59 ms\n"
"[getting-started-1.0.0-SNAPSHOT-runner:18820]     (inline):   1,985.70 ms\n"
"[getting-started-1.0.0-SNAPSHOT-runner:18820]    (compile):  14,922.77 ms\n"
"[getting-started-1.0.0-SNAPSHOT-runner:18820]      compile:  20,361.28 ms\n"
"[getting-started-1.0.0-SNAPSHOT-runner:18820]        image:   2,228.30 ms\n"
"[getting-started-1.0.0-SNAPSHOT-runner:18820]        write:     364.35 ms\n"
"[getting-started-1.0.0-SNAPSHOT-runner:18820]      [total]:  52,777.76 ms\n"
"[INFO]\n"
"[INFO] --- maven-failsafe-plugin:2.22.1:integration-test (default) @ getting-started ---\n"
"[INFO]\n"
"[INFO] -------------------------------------------------------\n"
"[INFO]  T E S T S\n"
"[INFO] -------------------------------------------------------\n"
"[INFO] Running org.acme.quickstart.NativeGreetingResourceIT\n"
"Executing [/data/home/gsmet/git/quarkus-quickstarts/getting-started/target/getting-started-1.0.0-SNAPSHOT-runner, -Dquarkus.http.port=8081, -Dtest.url=http://localhost:8081, -Dquarkus.log.file.path=build/quarkus.log]\n"
"2019-04-15 11:33:20,348 INFO  [io.quarkus] (main) Quarkus 999-SNAPSHOT started in 0.002s. Listening on: http://[::]:8081\n"
"2019-04-15 11:33:20,348 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy]\n"
"[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.387 s - in org.acme.quickstart.NativeGreetingResourceIT\n"
"...\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:330
msgid "By default, Quarkus waits for 60 seconds for the native image to start before automatically failing the native tests. This duration can be changed using the `quarkus.test.native-image-wait-time` system property. For example, to increase the duration to 300 seconds, use: `./mvnw verify -Pnative -Dquarkus.test.native-image-wait-time=300`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:338
msgid "By default, native tests runs using the `prod` profile.  This can be overridden using the `quarkus.test.native-image-profile` property.  For example, in your `application.properties` file, add: `quarkus.test.native-image-profile=test`.  Alternatively, you can run your tests with: `./mvnw verify -Pnative -Dquarkus.test.native-image-profile=test`.  However, don't forget that when the native executable is built the `prod` profile is enabled.  So, the profile you enable this way must be compatible with the produced executable."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/building-native-image.adoc:339
#, no-wrap
msgid "Excluding tests when running as a native executable"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:344
msgid "When running tests this way, the only things that actually run natively are you application endpoints, which you can only test via HTTP calls. Your test code does not actually run natively, so if you are testing code that does not call your HTTP endpoints, it's probably not a good idea to run them as part of native tests."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:347
msgid "If you share your test class between JVM and native executions like we advise above, you can mark certain tests with the `@DisabledOnNativeImage` annotation in order to only run them on the JVM."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/building-native-image.adoc:349
#, no-wrap
msgid "Testing an existing native executable"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:354
msgid "It is also possible to re-run the tests against a native executable that has already been built. To do this run `./mvnw test-compile failsafe:integration-test`. This will discover the existing native image and run the tests against it using failsafe."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:357
msgid "If the process cannot find the native image for some reason, or you want to test a native image that is no longer in the target directory you can specify the executable with the `-Dnative.image.path=` system property."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/building-native-image.adoc:359
#, no-wrap
msgid "Creating a Linux executable without GraalVM installed"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:363
msgid "Before going further, be sure to have a working container runtime (Docker, podman) environment. If you use Docker on Windows you should share your project's drive at Docker Desktop file share settings and restart Docker Desktop."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:367
msgid "Quite often one only needs to create a native Linux executable for their Quarkus application (for example in order to run in a containerized environment) and would like to avoid the trouble of installing the proper GraalVM version in order to accomplish this task (for example, in CI environments it's common practice to install as little software as possible)."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:370
msgid "To this end, Quarkus provides a very convenient way of creating a native Linux executable by leveraging a container runtime such as Docker or podman.  The easiest way of accomplishing this task is to execute:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/building-native-image.adoc:374
#, no-wrap
msgid "./mvnw package -Pnative -Dquarkus.native.container-build=true\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:380
msgid "By default Quarkus automatically detects the container runtime.  If you want to explicitely select the container runtime, you can do it with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/building-native-image.adoc:386
#, no-wrap
msgid ""
"# Docker\n"
"./mvnw package -Pnative -Dquarkus.native.container-build=true -Dquarkus.native.container-runtime=docker\n"
"# Podman\n"
"./mvnw package -Pnative -Dquarkus.native.container-build=true -Dquarkus.native.container-runtime=podman\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:390
msgid "These are normal Quarkus config properties, so if you always want to build in a container it is recommended you add these to your `application.properties` in order to avoid specifying them every time."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:396
msgid "Building with Mandrel requires a custom builder image parameter to be passed additionally:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/building-native-image.adoc:399
#, no-wrap
msgid "./mvnw package -Pnative -Dquarkus.native.container-build=true -Dquarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-mandrel:{mandrel-flavor}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:407
msgid "Please note that the above command points to a floating tag.  It is highly recommended to use the floating tag, so that your builder image remains up-to-date and secure.  If you absolutely must, you may hard-code to a specific tag (see https://quay.io/repository/quarkus/ubi-quarkus-mandrel?tab=tags[here] for available tags), but be aware that you won't get security updates that way and it's unsupported."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/building-native-image.adoc:409
#, no-wrap
msgid "Creating a container"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/building-native-image.adoc:411
#, no-wrap
msgid "Using the container-image extensions"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:414
msgid "By far the easiest way to create a container-image from your Quarkus application is to leverage one of the container-image extensions."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:416
msgid "If one of those extensions is present, then creating a container image for the native executable is essentially a matter of executing a single command:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/building-native-image.adoc:420
#, no-wrap
msgid "./mvnw package -Pnative -Dquarkus.native.container-build=true -Dquarkus.container-image.build=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:423
msgid "`quarkus.native.container-build=true` allows for creating a Linux executable without GraalVM being installed (and is only necessary if you don't have GraalVM installed locally or your local operating system is not Linux)"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:424
msgid "`quarkus.container-image.build=true` instructs Quarkus to create a container-image using the final application artifact (which is the native executable in this case)"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:426
msgid "See the link:container-image[Container Image guide] for more details."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/building-native-image.adoc:427
#, no-wrap
msgid "Manually"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:431
msgid "You can run the application in a container using the JAR produced by the Quarkus Maven Plugin.  However, in this section we focus on creating a container image using the produced native executable."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:433
msgid "image:containerization-process.png[Containerization Process]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:437
msgid "When using a local GraalVM installation, the native executable targets your local operating system (Linux, macOS, Windows etc).  However, as a container may not use the same _executable_ format as the one produced by your operating system, we will instruct the Maven build to produce an executable by leveraging a container runtime (as described in <<#container-runtime,this section>>):"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:441
msgid "The produced executable will be a 64 bit Linux executable, so depending on your operating system it may no longer be runnable.  However, it's not an issue as we are going to copy it to a container.  The project generation has provided a `Dockerfile.native` in the `src/main/docker` directory with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/building-native-image.adoc:450
#, no-wrap
msgid ""
"FROM registry.access.redhat.com/ubi8/ubi-minimal\n"
"WORKDIR /work/\n"
"COPY target/*-runner /work/application\n"
"RUN chmod 775 /work\n"
"EXPOSE 8080\n"
"CMD [\"./application\", \"-Dquarkus.http.host=0.0.0.0\"]\n"
msgstr ""

#. type: Block title
#: upstream/_versions/1.11/guides/building-native-image.adoc:453
#, no-wrap
msgid "Ubi?"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:458
msgid "The provided `Dockerfiles` use https://access.redhat.com/containers/?tab=overview#/registry.access.redhat.com/ubi8/ubi[UBI] (Universal Base Image) as parent image.  This base image has been tailored to work perfectly in containers.  The `Dockerfiles` use the https://access.redhat.com/containers/#/registry.access.redhat.com/ubi8/ubi-minimal[_minimal_ version] of the base image to reduce the size of the produced image."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:460
msgid "You can read more about UBI on:"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:462
msgid "https://access.redhat.com/containers/?tab=overview#/registry.access.redhat.com/ubi8/ubi[the UBI image page]"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:463
msgid "https://access.redhat.com/containers/#/registry.access.redhat.com/ubi8/ubi-minimal[the _UBI-minimal_ image page]"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:464
msgid "https://access.redhat.com/containers/?tab=tags#/registry.access.redhat.com/ubi8/ubi-minimal[the list of _UBI-minimal_ tags]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:467
msgid "Then, if you didn't delete the generated native executable, you can build the docker image with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/building-native-image.adoc:471
#, no-wrap
msgid "docker build -f src/main/docker/Dockerfile.native -t quarkus-quickstart/getting-started .\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:474
#: upstream/_versions/1.11/guides/building-native-image.adoc:558
msgid "And finally, run it with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/building-native-image.adoc:478
#: upstream/_versions/1.11/guides/building-native-image.adoc:562
#, no-wrap
msgid "docker run -i --rm -p 8080:8080 quarkus-quickstart/getting-started\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:481
msgid "If you are interested in tiny Docker images, check the {quarkus-images-url}/master/distroless[distroless] version."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/building-native-image.adoc:482
#, no-wrap
msgid "Using a multi-stage Docker build"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:485
msgid "The previous section showed you how to build a native executable using Maven, but implicitly required that the proper GraalVM version be installed on the building machine (be it your local machine or your CI/CD infrastructure)."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:487
msgid "In cases where the GraalVM requirement cannot be met, you can use Docker to perform the Maven or Gradle build by using a multi-stage Docker build. A multi-stage Docker build is like two Dockerfile files combined in one, the first is used to build the artifact used by the second."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:489
msgid "In this guide we will use the first stage to generate the native executable and the second stage to create our runtime image."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:491
msgid "Sample Dockerfile for building with Maven:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/building-native-image.adoc:502
#, no-wrap
msgid ""
"## Stage 1 : build with maven builder image with native capabilities\n"
"FROM quay.io/quarkus/centos-quarkus-maven:{graalvm-flavor} AS build\n"
"COPY pom.xml /usr/src/app/\n"
"RUN mvn -f /usr/src/app/pom.xml -B de.qaware.maven:go-offline-maven-plugin:1.2.5:resolve-dependencies\n"
"COPY src /usr/src/app/src\n"
"USER root\n"
"RUN chown -R quarkus /usr/src/app\n"
"USER quarkus\n"
"RUN mvn -f /usr/src/app/pom.xml -Pnative clean package\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/building-native-image.adoc:507
#, no-wrap
msgid ""
"## Stage 2 : create the docker final image\n"
"FROM registry.access.redhat.com/ubi8/ubi-minimal\n"
"WORKDIR /work/\n"
"COPY --from=build /usr/src/app/target/*-runner /work/application\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/building-native-image.adoc:513
#, no-wrap
msgid ""
"# set up permissions for user `1001`\n"
"RUN chmod 775 /work /work/application \\\n"
"  && chown -R 1001 /work \\\n"
"  && chmod -R \"g+rwX\" /work \\\n"
"  && chown -R 1001:root /work\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/building-native-image.adoc:516
#, no-wrap
msgid ""
"EXPOSE 8080\n"
"USER 1001\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/building-native-image.adoc:518
#, no-wrap
msgid "CMD [\"./application\", \"-Dquarkus.http.host=0.0.0.0\"]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:521
msgid "Save this file in `src/main/docker/Dockerfile.multistage` as it is not included in the getting started quickstart."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:523
msgid "Sample Dockerfile for building with Gradle:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/building-native-image.adoc:535
#, no-wrap
msgid ""
"## Stage 1 : build with maven builder image with native capabilities\n"
"FROM quay.io/quarkus/centos-quarkus-maven:{graalvm-version}-java8 AS build\n"
"COPY src /usr/src/app/src\n"
"COPY build.gradle /usr/src/app\n"
"COPY settings.gradle /usr/src/app\n"
"COPY gradle.properties /usr/src/app\n"
"USER root\n"
"RUN chown -R quarkus /usr/src/app\n"
"USER quarkus\n"
"RUN gradle -b /usr/src/app/build.gradle clean buildNative\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/building-native-image.adoc:543
#, no-wrap
msgid ""
"## Stage 2 : create the docker final image\n"
"FROM registry.access.redhat.com/ubi8/ubi-minimal\n"
"WORKDIR /work/\n"
"COPY --from=build /usr/src/app/build/*-runner /work/application\n"
"RUN chmod 775 /work\n"
"EXPOSE 8080\n"
"CMD [\"./application\", \"-Dquarkus.http.host=0.0.0.0\"]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:546
msgid "If you are using Gradle in your project, you can use this sample Dockerfile.  Save it in `src/main/docker/Dockerfile.multistage`."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:550
msgid "Before launching our Docker build, we need to update the default `.dockerignore` file as it filters everything except the `target` directory and as we plan to build inside a container we need to be able to copy the `src` directory. So edit your `.dockerignore` and remove or comment its content."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/building-native-image.adoc:555
#, no-wrap
msgid "docker build -f src/main/docker/Dockerfile.multistage -t quarkus-quickstart/getting-started .\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:567
msgid "If you need SSL support in your native executable, you can easily include the necessary libraries in your Docker image."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:569
msgid "Please see link:native-and-ssl#working-with-containers[our Using SSL With Native Executables guide] for more information."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:577
msgid "Starting with Oracle GraalVM 20.2 or Mandrel 20.1, debug symbols for native executables can be generated for Linux environments (Windows support is still under development).  These symbols can be used to debug native executables with tools such as `gdb`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:581
msgid "To generate debug symbols, add `-Dquarkus.native.debug.enabled=true` flag when generating the native executable.  You will find the debug symbols for the native executable in a `.debug` file next to the native executable."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:586
msgid "The generation of the `.debug` file depends on `objcopy`.  On common Linux distributions and macOS you will need to install the `binutils` package:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/building-native-image.adoc:596
#, no-wrap
msgid ""
"# dnf (rpm-based)\n"
"sudo dnf install binutils\n"
"# Debian-based distributions\n"
"sudo apt-get install binutils\n"
"# macOS\n"
"brew install binutils\n"
"export PATH=/usr/local/opt/binutils/bin:$PATH\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:599
msgid "When `objcopy` is not available debug symbols are embedded in the executable."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:607
msgid "Aside from debug symbols, setting `-Dquarkus.native.debug.enabled=true` flag generates a cache of source files for any JDK runtime classes, GraalVM classes and application classes resolved during native executable generation.  This source cache is useful for native debugging tools, to establish the link between the symbols and matching source code.  It provides a convenient way of making just the necessary sources available to the debugger/IDE when debugging a native executable."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:613
msgid "Sources for third party jar dependencies, including Quarkus source code, are not added to the source cache by default.  To include those, make sure you invoke `mvn dependency:sources` first.  This step is required in order to pull the sources for these dependencies, and get them included in the source cache."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:615
msgid "The source cache is located in the `target/sources` folder."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:619
msgid "If running `gdb` from a different directory than `target`, then the sources can be loaded by running:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/building-native-image.adoc:623
#, no-wrap
msgid "directory path/to/target\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:626
msgid "in the `gdb` prompt."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:628
msgid "Or start `gdb` with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/building-native-image.adoc:632
#, no-wrap
msgid "gdb -ex 'directory path/to/target' path/to/target/{project.name}-{project.version}-runner\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/building-native-image.adoc:635
msgid "e.g.,"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/building-native-image.adoc:638
#, no-wrap
msgid "gdb -ex 'directory ./target' ./target/getting-started-1.0.0-SNAPSHOT-runner\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/building-native-image.adoc:642
#, no-wrap
msgid "Configuring the Native Executable"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:646
msgid "There are a lot of different configuration options that can affect how the native executable is generated.  These are provided in `application.properties` the same as any other config property."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:648
msgid "The properties are shown below:"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/building-native-image.adoc:651
#, no-wrap
msgid "What's next?"
msgstr "下一步做什么？"

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:656
msgid "This guide covered the creation of a native (binary) executable for your application.  It provides an application exhibiting a swift startup time and consuming less memory.  However, there is much more."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/building-native-image.adoc:657
msgid "We recommend continuing the journey with the link:deploying-to-kubernetes[deployment to Kubernetes and OpenShift]."
msgstr ""
