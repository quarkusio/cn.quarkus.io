# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:6
#, no-wrap
msgid "Building Quarkus apps with Gradle"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:14
msgid "Quarkus Gradle support is considered preview.  You can use Gradle to create Quarkus projects as outlined in our guides. If you go beyond there will be cases where the Gradle tasks https://github.com/quarkusio/quarkus/issues/5101[does not behave as expected].  This is just a caution, and we recommend if you like Gradle you try it out and give us feedback."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:16
#, no-wrap
msgid "Creating a new project"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:19
msgid "The easiest way to scaffold a Gradle project, is currently to use the Quarkus Maven plugin like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:29
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=my-groupId \\\n"
"    -DprojectArtifactId=my-artifactId \\\n"
"    -DprojectVersion=my-version \\\n"
"    -DclassName=\"org.my.group.MyResource\" \\\n"
"    -Dextensions=\"resteasy,resteasy-jackson\" \\\n"
"    -DbuildTool=gradle\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:33
msgid "If you just launch `mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create` the Maven plugin asks for user inputs. You can disable (and use default values) this interactive mode by passing `-B` to the Maven command."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:37
msgid "Quarkus project scaffolding automatically installs the Gradle wrapper (`./gradlew`) in your project."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:39
msgid "If you prefer to use a standalone Gradle installation, please use Gradle {gradle-version}."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:42
msgid "The following table lists the attributes you can pass to the `create` command:"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:46
#, no-wrap
msgid "Attribute"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:47
#, no-wrap
msgid "Default Value"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:49
#, no-wrap
msgid "Description"
msgstr "描述"

#. type: Table
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:50
#, no-wrap
msgid "`projectGroupId`"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:51
#, no-wrap
msgid "`org.acme.sample`"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:53
#, no-wrap
msgid "The group id of the created project"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:54
#, no-wrap
msgid "`projectArtifactId`"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:55
#, no-wrap
msgid "_mandatory_"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:57
#, no-wrap
msgid "The artifact id of the created project. Not passing it triggers the interactive mode."
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:58
#, no-wrap
msgid "`projectVersion`"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:59
#, no-wrap
msgid "`1.0.0-SNAPSHOT`"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:61
#, no-wrap
msgid "The version of the created project"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:62
#, no-wrap
msgid "`className`"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:63
#, no-wrap
msgid "_Not created if omitted_"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:65
#, no-wrap
msgid "The fully qualified name of the generated resource"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:66
#, no-wrap
msgid "`path`"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:67
#, no-wrap
msgid "`/hello`"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:69
#, no-wrap
msgid "The resource path, only relevant if `className` is set."
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:70
#, no-wrap
msgid "`extensions`"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:71
#, no-wrap
msgid "_[]_"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:73
#, no-wrap
msgid "The list of extensions to add to the project (comma-separated)"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:77
msgid "If you decide to generate a REST resource (using the `className` attribute), the endpoint is exposed at: `http://localhost:8080/$path`.  If you use the default `path`, the URL is: http://localhost:8080/hello."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:80
msgid "The project is either generated in the current directory or in a directory named after the passed artifactId.  If the current directory is empty, the project is generated in-place."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:83
msgid "A pair of Dockerfiles for native and jvm mode are also generated in `src/main/docker`.  Instructions to build the image and run the container are written in those Dockerfiles."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:85
#, no-wrap
msgid "Custom test configuration profile in JVM mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:90
msgid "By default, Quarkus tests in JVM mode are run using the `test` configuration profile. If you are not familiar with Quarkus configuration profiles, everything you need to know is explained in the link:config#configuration-profiles[Configuration Profiles Documentation]."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:94
msgid "It is however possible to use a custom configuration profile for your tests with the Gradle build configuration shown below.  This can be useful if you need for example to run some tests using a specific database which is not your default testing database."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:100
#, no-wrap
msgid ""
"test {\n"
"    systemProperty \"quarkus.test.profile\", \"foo\" <1>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:103
msgid "or, if you use the Gradle Kotlin DSL:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:109
#, no-wrap
msgid ""
"tasks.test {\n"
"    systemProperty(\"quarkus.test.profile\", \"foo\") <1>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:112
msgid "The `foo` configuration profile will be used to run the tests."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:117
msgid "It is not possible to use a custom test configuration profile in native mode for now. Native tests are always run using the `prod` profile."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:119
#, no-wrap
msgid "Dealing with extensions"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:122
msgid "From inside a Quarkus project, you can obtain a list of the available extensions with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:126
#, no-wrap
msgid "./gradlew listExtensions\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:129
msgid "You can enable an extension using:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:133
#, no-wrap
msgid "./gradlew addExtension --extensions=\"hibernate-validator\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:136
msgid "Extensions are passed using a comma-separated list."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:141
msgid "The extension name is the GAV name of the extension: e.g. `io.quarkus:quarkus-agroal`.  But you can pass a partial name and Quarkus will do its best to find the right extension.  For example, `agroal`, `Agroal` or `agro` will expand to `io.quarkus:quarkus-agroal`.  If no extension is found or if more than one extensions match, you will see a red check mark ❌ in the command result."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:154
#, no-wrap
msgid ""
"$ ./gradlew addExtension --extensions=\"jdbc,agroal,non-exist-ent\"\n"
"[...]\n"
"❌ Multiple extensions matching 'jdbc'\n"
"     * io.quarkus:quarkus-jdbc-h2\n"
"     * io.quarkus:quarkus-jdbc-mariadb\n"
"     * io.quarkus:quarkus-jdbc-postgresql\n"
"     Be more specific e.g using the exact name or the full gav.\n"
"✅ Adding extension io.quarkus:quarkus-agroal\n"
"❌ Cannot find a dependency matching 'non-exist-ent', maybe a typo?\n"
"[...]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:157
msgid "You can install all extensions which match a globbing pattern:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:161
#, no-wrap
msgid "./gradlew addExtension --extensions=\"hibernate*\"\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:163
#, no-wrap
msgid "Development mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:167
msgid "Quarkus comes with a built-in development mode.  Run your application with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:171
#, no-wrap
msgid "./gradlew quarkusDev\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:176
msgid "You can then update the application sources, resources and configurations.  The changes are automatically reflected in your running application.  This is great to do development spanning UI and database as you see changes reflected immediately."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:183
msgid "`quarkusDev` enables hot deployment with background compilation, which means that when you modify your Java files or your resource files and refresh your browser these changes will automatically take effect.  This works too for resource files like the configuration property file.  The act of refreshing the browser triggers a scan of the workspace, and if any changes are detected the Java files are compiled, and the application is redeployed, then your request is serviced by the redeployed application. If there are any issues with compilation or deployment an error page will let you know."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:185
msgid "Hit `CTRL+C` to stop the application."
msgstr "使用 `CTRL+C` 来停止应用程序。"

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:187
msgid "You can change the working directory the development environment runs on:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:193
#, no-wrap
msgid ""
"quarkusDev {\n"
"    workingDir = rootProject.projectDir\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:198
msgid "By default, the `quarkusDev` task uses `compileJava` compiler options. These can be overridden by setting the `compilerArgs` property in the task."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:203
msgid "By default, `quarkusDev` sets the debug host to `localhost` (for security reasons). If you need to change this, for example to enable debugging on all hosts, you can use the `-DdebugHost` option like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:207
#, no-wrap
msgid "./gradlew quarkusDev -DdebugHost=0.0.0.0\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:210
#, no-wrap
msgid "Remote Development Mode"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:214
msgid "It is possible to use development mode remotely, so that you can run Quarkus in a container environment (such as OpenShift)  and have changes made to your local files become immediately visible."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:216
msgid "This allows you to develop in the same environment you will actually run your app in, and with access to the same services."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:218
msgid "Do not use this in production. This should only be used in a development environment. You should not run production applications in dev mode."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:220
msgid "To do this you must have the `quarkus-undertow-websockets` extension installed:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:224
#, no-wrap
msgid "./gradlew addExtension --extensions=\"undertow-websockets\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:227
msgid "You must also have the following config properties set:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:229
msgid "`quarkus.live-reload.password`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:230
msgid "`quarkus.live-reload.url`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:233
msgid "These can be set via `application.properties`, or any other way (e.g. system properties, environment vars etc). The password must be set on both the local and remote processes, while the url only needs to be set on the local host."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:235
msgid "Start Quarkus in dev mode on the remote host. Now you need to connect your local agent to the remote host:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:239
#, no-wrap
msgid "./gradlew quarkusRemoteDev -Dquarkus.live-reload.url=http://my-remote-host:8080\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:243
msgid "Now every time you refresh the browser you should see any changes you have made locally immediately visible in the remote app."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:244
#, no-wrap
msgid "Debugging"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:247
msgid "In development mode, Quarkus starts by default with debug mode enabled, listening to port `5005` without suspending the JVM."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:249
msgid "This behavior can be changed by giving the `debug` system property one of the following values:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:251
msgid "`false` - the JVM will start with debug mode disabled"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:252
msgid "`true` - The JVM is started in debug mode and will be listening on port `5005`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:253
msgid "`client` - the JVM will start in client mode and attempt to connect to `localhost:5005`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:254
msgid "`{port}` - The JVM is started in debug mode and will be listening on `{port}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:256
msgid "An additional system property `suspend` can be used to suspend the JVM, when launched in debug mode. `suspend` supports the following values:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:258
msgid "`y` or `true` - The debug mode JVM launch is suspended"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:259
msgid "`n` or `false` - The debug mode JVM is started without suspending"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:263
msgid "You can also run a Quarkus application in debug mode with a suspended JVM using `./gradlew quarkusDev -Dsuspend -Ddebug` which is a shorthand for `./gradlew quarkusDev -Dsuspend=true -Ddebug=true`."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:265
msgid "Then, attach your debugger to `localhost:5005`."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:267
#, no-wrap
msgid "Import in your IDE"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:271
msgid "Once you have a <<project-creation, project generated>>, you can import it in your favorite IDE.  The only requirement is the ability to import a Gradle project."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:273
#, no-wrap
msgid "**Eclipse**\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:278
msgid "In Eclipse, click on: `File -> Import`.  In the wizard, select: `Gradle -> Existing Gradle Project`.  On the next screen, select the root location of the project.  The next screen list the found modules; select the generated project and click on `Finish`. Done!"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:280
msgid "In a separated terminal, run `./gradlew quarkusDev`, and enjoy a highly productive environment."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:282
#, no-wrap
msgid "**IntelliJ**\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:284
msgid "In IntelliJ:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:286
msgid "From inside IntelliJ select `File -> New -> Project From Existing Sources...` or, if you are on the welcome dialog, select `Import project`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:287
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:299
msgid "Select the project root"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:288
msgid "Select `Import project from external model` and `Gradle`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:289
msgid "Next a few times (review the different options if needed)"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:290
msgid "On the last screen click on Finish"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:292
msgid "In a separated terminal or in the embedded terminal, run `./gradlew quarkusDev`. Enjoy!"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:294
#, no-wrap
msgid "**Apache NetBeans**\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:296
msgid "In NetBeans:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:298
msgid "Select `File -> Open Project`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:300
msgid "Click on `Open Project`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:302
msgid "In a separated terminal or the embedded terminal, go to the project root and run `./gradlew quarkusDev`. Enjoy!"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:304
#, no-wrap
msgid "**Visual Studio Code**\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:306
msgid "Open the project directory in VS Code. If you have installed the Java Extension Pack (grouping a set of Java extensions), the project is loaded as a Gradle project."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:307
#, no-wrap
msgid "Building a native executable"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:310
msgid "Native executables make Quarkus applications ideal for containers and serverless workloads."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:312
msgid "Make sure to have `GRAALVM_HOME` configured and pointing to GraalVM version {graalvm-version} (Make sure to use a Java 11 version of GraalVM)."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:315
msgid "Create a native executable using: `./gradlew build -Dquarkus.package.type=native`.  A native executable will be present in `build/`."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:320
msgid "The `buildNative` task has been deprecated in favor of `build -Dquarkus.package.type=native`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:324
msgid "Native related properties can either be added in `application.properties` file, as command line arguments or in the `quarkusBuild` task.  Configuring the `quarkusBuild` task can be done as following:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:333
#, no-wrap
msgid ""
"quarkusBuild {\n"
"    nativeArgs {\n"
"        containerBuild = true <1>\n"
"        buildImage = \"quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor}\" <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:336
msgid "or if you are using the Gradle Kotlin DSL:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:346
#, no-wrap
msgid ""
"tasks.quarkusBuild {\n"
"    nativeArgs {\n"
"        \"container-build\" to true <1>\n"
"        \"buildImage\" to \"quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor}\" <2>\n"
"        \"quarkus.native.java-home\" to \"/opt/java-11/\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:349
msgid "Set `quarkus.native.containerBuild` property to `true`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:350
msgid "Set `quarkus.native.buildImage` property to `quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor}`"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:356
msgid "When using the Gradle Groovy DSL, property keys must follow lower camel case notation.  e.g. `container-build` is not valid, and should be replaced by `containerBuild`.  This limitation does not apply to the Gradle Kotlin DSL."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:358
#, no-wrap
msgid "Build a container friendly executable"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:362
msgid "The native executable will be specific to your operating system.  To create an executable that will run in a container, use the following:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:366
#, no-wrap
msgid "./gradlew build -Dquarkus.package.type=native -Dquarkus.native.container-build=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:371
msgid "The produced executable will be a 64 bit Linux executable, so depending on your operating system it may no longer be runnable.  However, it's not an issue as we are going to copy it to a Docker container.  Note that in this case the build itself runs in a Docker container too, so you don't need to have GraalVM installed locally."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:375
msgid "By default, the native executable will be generated using the `quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor}` Docker image."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:378
msgid "If you want to build a native executable with a different Docker image (for instance to use a different GraalVM version), use the `-Dquarkus.native.builder-image=<image name>` build argument."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:381
msgid "The list of the available Docker images can be found on https://quay.io/repository/quarkus/ubi-quarkus-native-image?tab=tags[quay.io].  Be aware that a given Quarkus version might not be compatible with all the images available."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:383
#, no-wrap
msgid "Running native tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:386
msgid "Run the native tests using:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:390
#, no-wrap
msgid "./gradlew testNative\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:393
msgid "This task depends on `quarkusBuild`, so it will generate the native image before running the tests."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:394
#, no-wrap
msgid "Building Uber-Jars"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:397
msgid "Quarkus Gradle plugin supports the generation of Uber-Jars by specifying an `--uber-jar` argument as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:401
#, no-wrap
msgid "./gradlew quarkusBuild --uber-jar\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:404
msgid "When building an Uber-Jar you can specify entries that you want to exclude from the generated jar by using the `--ignored-entry` argument:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:408
#, no-wrap
msgid "./gradlew quarkusBuild --uber-jar --ignored-entry=META-INF/file1.txt\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:411
msgid "The entries are relative to the root of the generated Uber-Jar. You can specify multiple entries by adding extra `--ignored-entry` arguments."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:413
#, no-wrap
msgid "Working with multi-module projects"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:416
msgid "By default, Quarkus will not discover CDI beans inside another module."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:419
msgid "The best way to enable CDI bean discovery for a module in a multi-module project would be to include a `META-INF/beans.xml` file, unless it is the main application module already configured with the quarkus-maven-plugin, in which case it will indexed automatically."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:421
msgid "Alternatively, there is some unofficial link:https://plugins.gradle.org/search?term=jandex[Gradle Jandex plugins] that can be used instead of the `META-INF/beans.xml` file."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:423
msgid "More information on this topic can be found on the link:cdi-reference#bean_discovery[Bean Discovery] section of the CDI guide."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:424
#, no-wrap
msgid "Building with `./gradlew build`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/gradle-tooling.adoc:426
msgid "Starting from 1.1.0.Final, `./gradlew build` will no longer build the native image. Add `-Dquarkus.package.type=native` build argument explicitly as explained above if needed."
msgstr ""
