# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.11/guides/config-reference.adoc:6
#, no-wrap
msgid "Quarkus - Configuration Reference Guide"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:20
msgid "In this reference guide we're going to describe various aspects of Quarkus configuration.  A Quarkus application and Quarkus itself (core and extensions) are both configured via the same mechanism that leverages the https://microprofile.io/project/eclipse/microprofile-config[MicroProfile Config] API.  Quarkus configuration is based on https://github.com/smallrye/smallrye-config[SmallRye Config], an implementation of the MicroProfile Config specification.  All of the standard features are supported.  Moreover, there are several additional features which are made available by the SmallRye Config project as well as by Quarkus itself."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:22
msgid "If you're looking for information how to make a Quarkus extension configurable then see the <<writing-extensions.adoc#configuration,Writing Your Own Extension>> guide."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/config-reference.adoc:24
#, no-wrap
msgid "Configuration Sources"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:27
msgid "By default, Quarkus reads configuration properties from several sources (in decreasing priority):"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:29
msgid "<<system_properties,System properties>>"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:30
msgid "<<environment_variables,Environment variables>>"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:31
msgid "<<env_file,File named `.env`>> placed in the current working directory"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:32
msgid "<<pwd_config_application_file,`application.properties` file placed in the `$PWD/config/` directory>>"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:33
msgid "<<application_properties_file,An application configuration file>>, i.e. `src/main/resources/application.properties`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:35
#: upstream/_versions/1.11/guides/config-reference.adoc:535
#, no-wrap
msgid "System properties"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:38
msgid "for a runner jar: `java -Dquarkus.datasource.password=youshallnotpass -jar target/myapp-runner.jar`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:39
msgid "for a native executable: `./target/myapp-runner -Dquarkus.datasource.password=youshallnotpass`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:41
#: upstream/_versions/1.11/guides/config-reference.adoc:536
#, no-wrap
msgid "Environment variables"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:44
msgid "for a runner jar: `export QUARKUS_DATASOURCE_PASSWORD=youshallnotpass ; java -jar target/myapp-runner.jar`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:45
msgid "for a native executable: `export QUARKUS_DATASOURCE_PASSWORD=youshallnotpass ; ./target/myapp-runner`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:47
msgid "Environment variables names are following the conversion rules of link:https://github.com/eclipse/microprofile-config/blob/master/spec/src/main/asciidoc/configsources.asciidoc#default-configsources[Eclipse MicroProfile Config]."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/config-reference.adoc:49
#, no-wrap
msgid "File named `.env` placed in the current working directory"
msgstr ""

#. type: Block title
#: upstream/_versions/1.11/guides/config-reference.adoc:51
#, no-wrap
msgid "Example `.env` file"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:55
#, no-wrap
msgid "QUARKUS_DATASOURCE_PASSWORD=youshallnotpass <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:57
msgid "The name `QUARKUS_DATASOURCE_PASSWORD` is converted using the same rules as for <<environment_variables>>."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:59
msgid "For dev mode, this file can be placed in the root of the project, but it is advised to **not** check it in to version control."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:61
msgid "Environment variables without a configuration profile defined in `.env` file will overwrite all its related profiles in `application.properties`, e.g. `%test.application.value` is overwritten by `APPLICATION_VALUE` in `.env` file."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/config-reference.adoc:63
#, no-wrap
msgid "An `application.properties` file placed in `$PWD/config/`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:69
msgid "By placing an `application.properties` file inside a directory named `config` which resides in the directory where the application runs, any runtime properties defined in that file will override the default configuration.  Furthermore any runtime properties added to this file that were not part of the original `application.properties` file _will also_ be taken into account.  This works in the same way for runner jar and the native executable."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:72
msgid "The `config/application.properties` feature is available in development mode as well. To make use of it, `config/application.properties` needs to be placed inside the build tool's output directory (`target` for Maven and `build/classes/java/main` for Gradle).  Keep in mind however that any cleaning operation from the build tool like `mvn clean` or `gradle clean` will remove the `config` directory as well."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/config-reference.adoc:74
#, no-wrap
msgid "An application configuration file"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:77
msgid "This is the main application configuration file located in `src/main/resources/application.properties`."
msgstr ""

#. type: Block title
#: upstream/_versions/1.11/guides/config-reference.adoc:78
#, no-wrap
msgid "Example `application.properties` file"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:83
#, no-wrap
msgid ""
"greeting.message=hello <1>\n"
"quarkus.http.port=9090 <2>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:85
msgid "This is a user-defined configuration property."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:86
msgid "This is a configuration property consumed by the `quarkus-vertx-http` extension."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:88
msgid "Quarkus supports the use of <<using_property_expressions,property expressions>> in the `application.properties` file."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/config-reference.adoc:89
#, no-wrap
msgid "Injecting configuration properties"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:92
msgid "Quarkus uses https://microprofile.io/project/eclipse/microprofile-config[MicroProfile Config] annotations to inject the configuration properties in the application."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:97
#: upstream/_versions/1.11/guides/config-reference.adoc:109
#, no-wrap
msgid ""
"@ConfigProperty(name = \"greeting.message\") <1>\n"
"String message;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:101
msgid "You can use `@Inject @ConfigProperty` or just `@ConfigProperty`.  The `@Inject` annotation is not necessary for members annotated with `@ConfigProperty`.  This behavior differs from https://microprofile.io/project/eclipse/microprofile-config[MicroProfile Config]."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:103
msgid "If the application attempts to inject a configuration property that is not set, an error is thrown, thus allowing you to quickly know when your configuration is complete."
msgstr ""

#. type: Block title
#: upstream/_versions/1.11/guides/config-reference.adoc:104
#, no-wrap
msgid "More `@ConfigProperty` Examples"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:112
#, no-wrap
msgid ""
"@ConfigProperty(name = \"greeting.suffix\", defaultValue=\"!\") <2>\n"
"String suffix;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:115
#, no-wrap
msgid ""
"@ConfigProperty(name = \"greeting.name\")\n"
"Optional<String> name; <3>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:117
msgid "If you do not provide a value for this property, the application startup fails with `javax.enterprise.inject.spi.DeploymentException: No config value of type [class java.lang.String] exists for: greeting.message`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:118
msgid "The default value is injected if the configuration does not provide a value for `greeting.suffix`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:119
msgid "This property is optional - an empty `Optional` is injected if the configuration does not provide a value for `greeting.name`."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/config-reference.adoc:120
#, no-wrap
msgid "Programmatically access the configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:124
msgid "You can also access the configuration programmatically.  It can be handy to achieve dynamic lookup, or retrieve configured values from classes that are neither CDI beans or JAX-RS resources."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:126
msgid "You can access the configuration programmatically using `org.eclipse.microprofile.config.ConfigProvider.getConfig()` such as in:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:131
#, no-wrap
msgid ""
"String databaseName = ConfigProvider.getConfig().getValue(\"database.name\", String.class);\n"
"Optional<String> maybeDatabaseName = ConfigProvider.getConfig().getOptionalValue(\"database.name\", String.class);\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/config-reference.adoc:134
#, no-wrap
msgid "Using @ConfigProperties"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:138
msgid "As an alternative to injecting multiple related configuration values in the way that was shown in the previous example, users can also use the `@io.quarkus.arc.config.ConfigProperties` annotation to group these properties together."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:140
msgid "For the greeting properties above, a `GreetingConfiguration` class could be created like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:144
#: upstream/_versions/1.11/guides/config-reference.adoc:196
#: upstream/_versions/1.11/guides/config-reference.adoc:605
#: upstream/_versions/1.11/guides/config-reference.adoc:627
#: upstream/_versions/1.11/guides/config-reference.adoc:677
#, no-wrap
msgid "package org.acme.config;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:147
#, no-wrap
msgid ""
"import io.quarkus.arc.config.ConfigProperties;\n"
"import java.util.Optional;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:150
#, no-wrap
msgid ""
"@ConfigProperties(prefix = \"greeting\") <1>\n"
"public class GreetingConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:154
#, no-wrap
msgid ""
"    private String message;\n"
"    private String suffix = \"!\"; <2>\n"
"    private Optional<String> name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:158
#, no-wrap
msgid ""
"    public String getMessage() {\n"
"        return message;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:162
#, no-wrap
msgid ""
"    public void setMessage(String message) {\n"
"        this.message = message;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:166
#, no-wrap
msgid ""
"    public String getSuffix() {\n"
"        return suffix;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:170
#, no-wrap
msgid ""
"    public void setSuffix(String suffix) {\n"
"        this.suffix = suffix;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:174
#, no-wrap
msgid ""
"    public Optional<String> getName() {\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:179
#, no-wrap
msgid ""
"    public void setName(Optional<String> name) {\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:181
msgid "`prefix` is optional. If not set then the prefix to be used will be determined by the class name. In this case it would still be `greeting` (since the `Configuration` suffix is removed). If the class were named `GreetingExtraConfiguration` then the resulting default prefix would be `greeting-extra`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:182
msgid "`!` will be the default value if `greeting.suffix` is not set."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:184
msgid "This class could then be injected into the `GreetingResource` using the familiar CDI `@Inject` annotation like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:189
#, no-wrap
msgid ""
"@Inject\n"
"GreetingConfiguration greetingConfiguration;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:192
msgid "Another alternative style provided by Quarkus is to create `GreetingConfiguration` as an interface like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:200
#, no-wrap
msgid ""
"import io.quarkus.arc.config.ConfigProperties;\n"
"import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
"import java.util.Optional;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:203
#, no-wrap
msgid ""
"@ConfigProperties(prefix = \"greeting\")\n"
"public interface GreetingConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:206
#, no-wrap
msgid ""
"    @ConfigProperty(name = \"message\") <1>\n"
"    String message();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:209
#, no-wrap
msgid ""
"    @ConfigProperty(defaultValue = \"!\")\n"
"    String getSuffix(); <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:212
#, no-wrap
msgid ""
"    Optional<String> getName(); <3>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:214
msgid "The `@ConfigProperty` annotation is needed because the name of the configuration property that the method corresponds to doesn't follow the getter method naming conventions."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:215
msgid "In this case since `name` was not set, the corresponding property will be `greeting.suffix`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:216
msgid "It is unnecessary to specify the `@ConfigProperty` annotation because the method name follows the getter method naming conventions (`greeting.name` being the corresponding property) and no default value is needed."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:219
msgid "When using `@ConfigProperties` on a class or an interface, if the value of one of its fields is not provided, the application startup will fail and a `javax.enterprise.inject.spi.DeploymentException` indicating the missing value information will be thrown.  This does not apply to `Optional` fields and fields with a default value."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/config-reference.adoc:220
#, no-wrap
msgid "Additional notes on @ConfigProperties"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:224
msgid "When using a regular class annotated with `@ConfigProperties` the class doesn't necessarily have to declare getters and setters.  Having simple public non-final fields is valid as well."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:227
msgid "Furthermore, the configuration classes support nested object configuration. Suppose there was a need to have an extra layer of greeting configuration named `content` that would contain a few fields. This could be achieved like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:232
#: upstream/_versions/1.11/guides/config-reference.adoc:262
#: upstream/_versions/1.11/guides/config-reference.adoc:288
#, no-wrap
msgid ""
"@ConfigProperties(prefix = \"greeting\")\n"
"public class GreetingConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:237
#, no-wrap
msgid ""
"    public String message;\n"
"    public String suffix = \"!\";\n"
"    public Optional<String> name;\n"
"    public ContentConfig content; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:243
#, no-wrap
msgid ""
"    public static class ContentConfig {\n"
"        public Integer prizeAmount;\n"
"        public List<String> recipients;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:245
msgid "The name of the field (not the class name) will determine the name of the properties that are bound to the object."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:247
msgid "Setting the properties would occur in the normal manner, for example in `application.properties` one could have:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:254
#, no-wrap
msgid ""
"greeting.message = hello\n"
"greeting.name = quarkus\n"
"greeting.content.prize-amount=10\n"
"greeting.content.recipients=Jane,John\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:257
msgid "Furthermore, classes annotated with `@ConfigProperties` can be annotated with Bean Validation annotations similar to the following example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:266
#: upstream/_versions/1.11/guides/config-reference.adoc:292
#, no-wrap
msgid ""
"    @Size(min = 20)\n"
"    public String message;\n"
"    public String suffix = \"!\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:268
#: upstream/_versions/1.11/guides/config-reference.adoc:294
#: upstream/_versions/1.11/guides/config-reference.adoc:309
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:271
msgid "For validation to work, the `quarkus-hibernate-validator` extension needs to be present."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:273
msgid "If the validation fails with the given configuration, the application will fail to start and indicate the corresponding validation errors in the log."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:276
msgid "In the case of an interface being annotated with `@ConfigProperties`, the interface is allowed to extend other interfaces and methods from the entire interface hierarchy are used to bind properties."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/config-reference.adoc:277
#, no-wrap
msgid "Using same ConfigProperties with different prefixes"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:282
msgid "Quarkus also supports the use of the same `@ConfigProperties` object with different prefixes for each injection point using the `io.quarkus.arc.config.@ConfigPrefix` annotation.  Say for example that `GreetingConfiguration` from above needs to be used for both the `greeting` prefix and the `other` prefix.  In that case the code would look like so:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:284
msgid "`GreetingConfiguration.java`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:297
msgid "`SomeBean.java`"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:301
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class SomeBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:304
#, no-wrap
msgid ""
"    @Inject <1>\n"
"    GreetingConfiguration greetingConfiguration;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:307
#, no-wrap
msgid ""
"    @ConfigPrefix(\"other\") <2>\n"
"    GreetingConfiguration otherConfiguration;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:311
msgid "At this injection point `greetingConfiguration` will use the `greeting` prefix since that is what has been defined on `@ConfigProperties`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:312
msgid "At this injection point `otherConfiguration` will use the `other` prefix from `@ConfigPrefix` instead of the `greeting` prefix. Notice that in this case `@Inject` is not required."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/config-reference.adoc:313
#, no-wrap
msgid "Using a list of objects"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:316
msgid "In certain cases it might be necessary to support complex configuration structures that utilize a list of objects as shown in the following example:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:318
msgid "`ComplexConfiguration.java`"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:327
#, no-wrap
msgid ""
"@ConfigProperties(prefix = \"complex\")\n"
"public class ComplexConfiguration {\n"
"    public String name;\n"
"    public String user;\n"
"    public String password;\n"
"    public List<Nested> inputs;\n"
"    public List<Nested> outputs;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:333
#, no-wrap
msgid ""
"    public static class Nested {\n"
"        public String user;\n"
"        public String password;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:336
msgid "Support for such use cases is only available when using YAML configuration with the `quarkus-config-yaml` extension. A corresponding example YAML configuration could be:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:338
msgid "`application.yaml`"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:354
#, no-wrap
msgid ""
"complex:\n"
"  name: defaultName\n"
"  user: defaultUser\n"
"  password: defaultPassword\n"
"  inputs:\n"
"    - user: user\n"
"      password: secret\n"
"    - user: otheruser\n"
"      password: secret2\n"
"  outputs:\n"
"    - user: someuser\n"
"      password: asecret\n"
"    - user: someotheruser\n"
"      password: anothersecret\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:357
msgid "A limitation of such configuration is that the types used as the generic types of the lists need to be classes and not interfaces."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/config-reference.adoc:359
#, no-wrap
msgid "Configuration Profiles"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:363
msgid "Quarkus supports the notion of configuration profiles.  These allow you to have multiple configurations in the same file and select between them via a profile name."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:365
msgid "The syntax for this is `%{profile}.config.key=value`. For example if I have the following:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:370
#, no-wrap
msgid ""
"quarkus.http.port=9090\n"
"%dev.quarkus.http.port=8181\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:373
msgid "The Quarkus HTTP port will be 9090, unless the `dev` profile is active, in which case it will be 8181."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:375
msgid "To use profiles in the `.env` file, you can follow a `_{PROFILE}_CONFIG_KEY=value` pattern. An equivalent of the above example in an `.env` file would be:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:380
#, no-wrap
msgid ""
"QUARKUS_HTTP_PORT=9090\n"
"_DEV_QUARKUS_HTTP_PORT=8181\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:384
msgid "By default, Quarkus has three profiles, although it is possible to use as many as you like.  The default profiles are:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:386
#, no-wrap
msgid "*dev* - Activated when in development mode (i.e. `quarkus:dev`)\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:387
#, no-wrap
msgid "*test* - Activated when running tests\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:388
#, no-wrap
msgid "*prod* - The default profile when not running in development or test mode\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:393
msgid "There are two ways to set a custom profile, either via the `quarkus.profile` system property or the `QUARKUS_PROFILE` environment variable. If both are set the system property takes precedence. Note that it is not necessary to define the names of these profiles anywhere, all that is necessary is to create a config property with the profile name, and then set the current profile to that name. For example if I want a `staging` profile with a different HTTP port I can add the following to `application.properties`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:398
#, no-wrap
msgid ""
"quarkus.http.port=9090\n"
"%staging.quarkus.http.port=9999\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:401
msgid "And then set the `QUARKUS_PROFILE` environment variable to `staging` to activate my profile."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/config-reference.adoc:405
msgid "The proper way to check the active profile programmatically is to use the `getActiveProfile` method of `io.quarkus.runtime.configuration.ProfileManager`."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/config-reference.adoc:407
msgid "Using `@ConfigProperty(\"quarkus.profile\")` will *not* work properly."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/config-reference.adoc:409
#, no-wrap
msgid "Default Runtime Profile"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:413
msgid "The default Quarkus application runtime profile is set to the profile used to build the application.  For example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:417
#, no-wrap
msgid ""
"./mvnw package -Pnative -Dquarkus.profile=prod-aws\n"
"./target/my-app-1.0-runner // <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:419
msgid "The command will run with the `prod-aws` profile. This can be overridden using the `quarkus.profile` system property."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/config-reference.adoc:422
#, no-wrap
msgid "Using Property Expressions"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:425
msgid "Quarkus supports the use of property expressions in the `application.properties` file."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:429
msgid "These expressions are resolved when the property is read.  So if your configuration property is a build time configuration property, the property expression will be resolved at build time.  If your configuration property is overridable at runtime, the property expression will be resolved at runtime."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:431
msgid "You can use property expressions both for the Quarkus configuration or for your own configuration properties."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:433
msgid "Property expressions are defined this way: `${my-property-expression}`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:435
msgid "For example, having the following property:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:439
#: upstream/_versions/1.11/guides/config-reference.adoc:486
#, no-wrap
msgid "remote.host=quarkus.io\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:441
msgid "and another property defined as:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:445
#, no-wrap
msgid "callable.url=https://${remote.host}/\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:448
msgid "will result in the value of the `callable.url` property being set to:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:452
#, no-wrap
msgid "callable.url=https://quarkus.io/\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:455
msgid "Another example would be defining different database servers depending on the profile used:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:460
#, no-wrap
msgid ""
"%dev.quarkus.datasource.jdbc.url=jdbc:mysql://localhost:3306/mydatabase?useSSL=false\n"
"quarkus.datasource.jdbc.url=jdbc:mysql://remotehost:3306/mydatabase?useSSL=false\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:463
msgid "can be simplified by having:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:468
#, no-wrap
msgid ""
"%dev.application.server=localhost\n"
"application.server=remotehost\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:470
#, no-wrap
msgid "quarkus.datasource.jdbc.url=jdbc:mysql://${application.server}:3306/mydatabase?useSSL=false\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:474
msgid "It does result in one more line in this example but the value of `application.server` can be reused in other properties, diminishing the possibility of typos and providing more flexibility in property definitions."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/config-reference.adoc:477
#, no-wrap
msgid "Combining Property Expressions and Environment Variables"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:480
msgid "Quarkus also supports the combination of both property expressions and environment variables."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:482
msgid "Let's assume you have the following property defined in `application.properties`:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:489
msgid "You can combine environment variables and property expressions by having a property defined as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:493
#, no-wrap
msgid "application.host=${HOST:${remote.host}}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:496
msgid "This will expand the `HOST` environment variable and use the value of the property `remote.host` as the default value if `HOST` is not set."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:499
msgid "For the purpose of this section we used the property `remote.host` we defined previously.  It has to be noted that the value could have been a fixed one such as in:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:503
#, no-wrap
msgid "application.host=${HOST:localhost}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:506
msgid "which will result in `localhost` as the default value if `HOST` is not set."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/config-reference.adoc:508
#, no-wrap
msgid "Configuring Quarkus"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:513
msgid "Quarkus itself is configured via the same mechanism as your application. Quarkus reserves the `quarkus.` namespace for its own configuration and the configuration of all of its extensions. For example to configure the HTTP server port you can set `quarkus.http.port` in `application.properties`. All the Quarkus configuration properties are link:all-config[documented and searchable]."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/config-reference.adoc:518
msgid "As mentioned above, properties prefixed with `quarkus.` are effectively reserved for configuring Quarkus itself and its extensions.  Therefore `quarkus.` should **never** be used as prefix for application specific properties."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/config-reference.adoc:520
msgid "In the previous examples using `quarkus.message` instead of `greeting.message` would result in unexpected behavior."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:525
msgid "Quarkus does much of its configuration and bootstrap at build time and some configuration properties are read and used during the build.  These properties are _fixed at build time_ and it's not possible to change them at runtime.  You always need to repackage your application in order to reflect changes of such properties."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:527
msgid "The properties fixed at build time are marked with a lock icon (icon:lock[]) in the link:all-config[list of all configuration options]."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:533
msgid "However, some extensions do define properties that can be _overriden at runtime_.  A canonical example is the database URL, username and password which are only known specifically in your target environment.  This is a tradeoff as the more runtime properties are available, the less build time prework Quarkus can do.  The list of runtime properties is therefore lean.  You can override these runtime properties with the following mechanisms (in decreasing priority) using:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:537
msgid "An environment file named `.env` placed in the current working directory"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:538
msgid "A configuration file placed in `$PWD/config/application.properties`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:540
msgid "See <<configuration_sources>> for more details."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/config-reference.adoc:541
#, no-wrap
msgid "Generating configuration for your application"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:545
msgid "It is also possible to generate an example `application.properties` with all known configuration properties, to make it easy to see what Quarkus configuration options are available. To do this, run:"
msgstr ""

#. type: Block title
#: upstream/_versions/1.11/guides/config-reference.adoc:548
#, no-wrap
msgid "/mvnw quarkus:generate-config"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:554
msgid "This will create a `src/main/resources/application.properties.example` file that contains all the config options exposed via the extensions you currently have installed. These options are commented out, and have their default value when applicable. For example this HTTP port config entry will appear as:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:562
msgid "# # The HTTP port # #quarkus.http.port=8080"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:566
msgid "Rather than generating an example config file, you can also add these to you actual config file by setting the `-Dfile` parameter:"
msgstr ""

#. type: Block title
#: upstream/_versions/1.11/guides/config-reference.adoc:569
#, no-wrap
msgid "/mvnw quarkus:generate-config -Dfile=application.properties"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:574
msgid "If a config option is already present (commented or not) it will not be added, so it is safe to run this after adding an additional extension to see what additional options have been added."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/config-reference.adoc:575
#, no-wrap
msgid "Clearing properties"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:580
msgid "Run time properties which are optional, and which have had values set at build time or which have a default value, may be explicitly cleared by assigning an empty string to the property.  Note that this will _only_ affect runtime properties, and will _only_ work with properties whose values are not required."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:583
msgid "The property may be cleared by setting the corresponding `application.properties` property, setting the corresponding system property, or setting the corresponding environment variable."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/config-reference.adoc:585
#, no-wrap
msgid "Custom Configuration"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/config-reference.adoc:587
#, no-wrap
msgid "Custom configuration sources"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:594
msgid "You can also introduce custom configuration sources in the standard MicroProfile Config manner.  To do this, you must provide a class which implements either `org.eclipse.microprofile.config.spi.ConfigSource` or `org.eclipse.microprofile.config.spi.ConfigSourceProvider`.  Create a https://docs.oracle.com/javase/8/docs/api/java/util/ServiceLoader.html[service file] for the class and it will be detected and installed at application startup."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/config-reference.adoc:595
#, no-wrap
msgid "Custom configuration converters"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:599
msgid "You can also use your custom types for configuration values. This can be done by implementing `org.eclipse.microprofile.config.spi.Converter<T>` and adding its fully qualified class name in the `META-INF/services/org.eclipse.microprofile.config.spi.Converter` file."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:601
msgid "Let us assume you have a custom type like this one:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:607
#, no-wrap
msgid "public class MicroProfileCustomValue {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:609
#, no-wrap
msgid "    private final int number;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:613
#, no-wrap
msgid ""
"    public MicroProfileCustomValue(int number) {\n"
"        this.number = number;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:618
#, no-wrap
msgid ""
"    public int getNumber() {\n"
"        return number;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:622
msgid "The corresponding converter will look like the one below. Please note that your custom converter class must be `public` and must have a `public` no-argument constructor. It also must not be `abstract`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:629
#, no-wrap
msgid "import org.eclipse.microprofile.config.spi.Converter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:631
#, no-wrap
msgid "public class MicroProfileCustomValueConverter implements Converter<MicroProfileCustomValue> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:637
#, no-wrap
msgid ""
"    @Override\n"
"    public MicroProfileCustomValue convert(String value) {\n"
"        return new MicroProfileCustomValue(Integer.parseInt(value));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:641
msgid "Then you need to include the fully qualified class name of the converter in a service file `META-INF/services/org.eclipse.microprofile.config.spi.Converter`.  If you have more converters, simply add their class names in this file as well. One fully qualified class name per line, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:647
#, no-wrap
msgid ""
"org.acme.config.MicroProfileCustomValueConverter\n"
"org.acme.config.SomeOtherConverter\n"
"org.acme.config.YetAnotherConverter\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:651
msgid "Please note that `SomeOtherConverter` and `YetAnotherConverter` were added just for demonstration purposes. If you include in this file classes which are not available at runtime, the converters loading will fail."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:653
msgid "After this is done, you can use your custom type as a configuration value:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:658
#, no-wrap
msgid ""
"@ConfigProperty(name = \"configuration.value.name\")\n"
"MicroProfileCustomValue value;\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/1.11/guides/config-reference.adoc:660
#, no-wrap
msgid "Converter priority"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:666
msgid "In some cases, you may want to use a custom converter to convert a type which is already converted by a different converter. In such cases, you can use the `javax.annotation.Priority` annotation to change converters precedence and make your custom converter of higher priority than the other in the list."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:670
msgid "By default, if no `@Priority` can be found on a converter, it's registered with a priority of 100 and all Quarkus core converters are registered with a priority of 200, so depending on which converter you would like to replace, you need to set a higher value."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:673
msgid "To demonstrate the idea let us implement a custom converter which will take precedence over `MicroProfileCustomValueConverter` implemented in the previous example."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:680
#, no-wrap
msgid ""
"import javax.annotation.Priority;\n"
"import org.eclipse.microprofile.config.spi.Converter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:683
#, no-wrap
msgid ""
"@Priority(150)\n"
"public class MyCustomConverter implements Converter<MicroProfileCustomValue> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:686
#, no-wrap
msgid ""
"    @Override\n"
"    public MicroProfileCustomValue convert(String value) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:693
#, no-wrap
msgid ""
"        final int secretNumber;\n"
"        if (value.startsFrom(\"OBF:\")) {\n"
"            secretNumber = Integer.parseInt(SecretDecoder.decode(value));\n"
"        } else {\n"
"            secretNumber = Integer.parseInt(value);\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:697
#, no-wrap
msgid ""
"        return new MicroProfileCustomValue(secretNumber);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:702
msgid "Since it converts the same value type (namely `MicroProfileCustomValue`) and has a priority of 150, it will be used instead of a `MicroProfileCustomValueConverter` which has a default priority of 100."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:704
msgid "This new converter also needs to be listed in a service file, i.e. `META-INF/services/org.eclipse.microprofile.config.spi.Converter`."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/config-reference.adoc:706
#, no-wrap
msgid "YAML for Configuration"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/config-reference.adoc:708
#, no-wrap
msgid "Add YAML Config Support"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:713
msgid "You might want to use YAML over properties for configuration.  Since link:https://github.com/smallrye/smallrye-config[SmallRye Config] brings support for YAML configuration, Quarkus supports this as well."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:715
msgid "First you will need to add the Config YAML extension to your `pom.xml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:722
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-config-yaml</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:725
msgid "Or you can alternatively run this command in the directory containing your Quarkus project:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:729
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"config-yaml\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:733
msgid "Now Quarkus can read YAML configuration files.  The config directories and priorities are the same as before."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:737
msgid "Quarkus will choose an `application.yaml` over an `application.properties`.  YAML files are just an alternative way to configure your application.  You should decide and keep one configuration type to avoid errors."
msgstr ""

#. type: Title ====
#: upstream/_versions/1.11/guides/config-reference.adoc:738
#, no-wrap
msgid "Configuration Examples"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:749
#, no-wrap
msgid ""
"# YAML supports comments\n"
"quarkus:\n"
"  datasource:\n"
"    db-kind: postgresql\n"
"    jdbc:\n"
"      url: jdbc:postgresql://localhost:5432/some-database\n"
"    username: quarkus\n"
"    password: quarkus\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:755
#, no-wrap
msgid ""
"# REST Client configuration property\n"
"org:\n"
"  acme:\n"
"    restclient:\n"
"      CountriesService/mp-rest/url: https://restcountries.eu/rest\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:762
#, no-wrap
msgid ""
"# For configuration property names that use quotes, do not split the string inside the quotes.\n"
"quarkus:\n"
"  log:\n"
"    category:\n"
"      \"io.quarkus.category\":\n"
"        level: INFO\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/config-reference.adoc:767
msgid "Quarkus also supports using `application.yml` as the name of the YAML file. The same rules apply for this file as for `application.yaml`."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/config-reference.adoc:769
#, no-wrap
msgid "Profile dependent configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:773
msgid "Providing profile dependent configuration with YAML is done like with properties.  Just add the `%profile` wrapped in quotation marks before defining the key-value pairs:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:784
#, no-wrap
msgid ""
"\"%dev\":\n"
"  quarkus:\n"
"    datasource:\n"
"      db-kind: postgresql\n"
"      jdbc:\n"
"        url: jdbc:postgresql://localhost:5432/some-database\n"
"      username: quarkus\n"
"      password: quarkus\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/config-reference.adoc:786
#, no-wrap
msgid "Configuration key conflicts"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:792
msgid "The MicroProfile Configuration specification defines configuration keys as an arbitrary `.`-delimited string.  However, structured formats like YAML naively only support a subset of the possible configuration namespace.  For example, consider the two configuration properties `quarkus.http.cors` and `quarkus.http.cors.methods`.  One property is the prefix of another, so it may not be immediately evident how to specify both keys in your YAML configuration."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:794
msgid "This is solved by using a `null` key (normally represented by `~`) for any YAML property which is a prefix of another one.  Here's an example:"
msgstr ""

#. type: Block title
#: upstream/_versions/1.11/guides/config-reference.adoc:795
#, no-wrap
msgid "An example YAML configuration resolving prefix-related key name conflicts"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/config-reference.adoc:803
#, no-wrap
msgid ""
"quarkus:\n"
"  http:\n"
"    cors:\n"
"      ~: true\n"
"      methods: GET,PUT,POST\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:807
msgid "In general, `null` YAML keys are not included in assembly of the configuration property name, allowing them to be used to any level for disambiguating configuration keys."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/config-reference.adoc:808
#, no-wrap
msgid "More info on how to configure"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:811
msgid "Quarkus relies on SmallRye Config and inherits its features."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:813
msgid "SmallRye Config provides:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:815
msgid "Additional Config Sources"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:816
msgid "Additional Converters"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:817
msgid "Interceptors for configuration value resolution"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:818
msgid "Relocate Configuration Properties"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:819
msgid "Fallback Configuration Properties"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:820
msgid "Logging"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:821
msgid "Hide Secrets"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/config-reference.adoc:823
msgid "For more information, please check the link:https://smallrye.io/docs/smallrye-config/index.html[SmallRye Config documentation]."
msgstr ""
