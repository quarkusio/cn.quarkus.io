# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.11/guides/maven-tooling.adoc:6
#, no-wrap
msgid "Quarkus - Building applications with Maven"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/maven-tooling.adoc:11
#, no-wrap
msgid "Creating a new project"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:14
msgid "With Maven, you can scaffold a new project with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/maven-tooling.adoc:22
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=my-groupId \\\n"
"    -DprojectArtifactId=my-artifactId \\\n"
"    -DprojectVersion=my-version \\\n"
"    -DclassName=\"org.my.group.MyResource\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:26
msgid "If you just launch `mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create` the Maven plugin asks for user inputs. You can disable (and use default values) this interactive mode by passing `-B` to the Maven command."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:28
msgid "The following table lists the attributes you can pass to the `create` command:"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/maven-tooling.adoc:32
#, no-wrap
msgid "Attribute"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/maven-tooling.adoc:33
#, no-wrap
msgid "Default Value"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/maven-tooling.adoc:35
#, no-wrap
msgid "Description"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/maven-tooling.adoc:36
#, no-wrap
msgid "`projectGroupId`"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/maven-tooling.adoc:37
#, no-wrap
msgid "`org.acme.sample`"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/maven-tooling.adoc:39
#, no-wrap
msgid "The group id of the created project"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/maven-tooling.adoc:40
#, no-wrap
msgid "`projectArtifactId`"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/maven-tooling.adoc:41
#, no-wrap
msgid "_mandatory_"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/maven-tooling.adoc:43
#, no-wrap
msgid "The artifact id of the created project. Not passing it triggers the interactive mode."
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/maven-tooling.adoc:44
#, no-wrap
msgid "`projectVersion`"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/maven-tooling.adoc:45
#, no-wrap
msgid "`1.0.0-SNAPSHOT`"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/maven-tooling.adoc:47
#, no-wrap
msgid "The version of the created project"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/maven-tooling.adoc:48
#, no-wrap
msgid "`platformGroupId`"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/maven-tooling.adoc:49
#, no-wrap
msgid "`io.quarkus`"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/maven-tooling.adoc:51
#, no-wrap
msgid "The group id of the target platform. Given that all the existing platforms are coming from `io.quarkus` this one won't practically be used explicitly. But it's still an option."
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/maven-tooling.adoc:52
#, no-wrap
msgid "`platformArtifactId`"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/maven-tooling.adoc:53
#, no-wrap
msgid "`quarkus-universe-bom`"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/maven-tooling.adoc:55
#, no-wrap
msgid "The artifact id of the target platform BOM. It should be `quarkus-bom` in order to use the locally built Quarkus."
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/maven-tooling.adoc:56
#, no-wrap
msgid "`platformVersion`"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/maven-tooling.adoc:57
#, no-wrap
msgid "If it's not specified, the latest one will be resolved."
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/maven-tooling.adoc:59
#, no-wrap
msgid "The version of the platform you want the project to use. It can also accept a version range, in which case the latest from the specified range will be used."
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/maven-tooling.adoc:60
#, no-wrap
msgid "`className`"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/maven-tooling.adoc:61
#, no-wrap
msgid "_Not created if omitted_"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/maven-tooling.adoc:63
#, no-wrap
msgid "The fully qualified name of the generated resource"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/maven-tooling.adoc:64
#, no-wrap
msgid "`path`"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/maven-tooling.adoc:65
#, no-wrap
msgid "`/hello`"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/maven-tooling.adoc:67
#, no-wrap
msgid "The resource path, only relevant if `className` is set."
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/maven-tooling.adoc:68
#, no-wrap
msgid "`extensions`"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/maven-tooling.adoc:69
#, no-wrap
msgid "_[]_"
msgstr ""

#. type: Table
#: upstream/_versions/1.11/guides/maven-tooling.adoc:71
#, no-wrap
msgid "The list of extensions to add to the project (comma-separated)"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:74
msgid "By default, the command will target the latest version of `quarkus-universe-bom` (unless specific coordinates have been specified). If you run offline however, it will look for the latest locally available and if `quarkus-universe-bom` (satisfying the default version range which is currently up to 2.0) is not available locally, it will fallback to the bundled platform based on `quarkus-bom` (the version will match the version of the plugin)."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:77
msgid "If you decide to generate a REST resource (using the `className` attribute), the endpoint is exposed at: `http://localhost:8080/$path`.  If you use the default `path`, the URL is: http://localhost:8080/hello."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:80
msgid "The project is generated in a directory named after the passed artifactId.  If the directory already exists, the generation fails."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:83
msgid "A pair of Dockerfiles for native and jvm mode are also generated in `src/main/docker`.  Instructions to build the image and run the container are written in those Dockerfiles."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/maven-tooling.adoc:84
#, no-wrap
msgid "Dealing with extensions"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:87
msgid "From inside a Quarkus project, you can obtain a list of the available extensions with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/maven-tooling.adoc:91
#, no-wrap
msgid "./mvnw quarkus:list-extensions\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:94
msgid "You can enable an extension using:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/maven-tooling.adoc:98
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"hibernate-validator\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:101
msgid "Extensions are passed using a comma-separated list."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:106
msgid "The extension name is the GAV name of the extension: e.g. `io.quarkus:quarkus-agroal`.  But you can pass a partial name and Quarkus will do its best to find the right extension.  For example, `agroal`, `Agroal` or `agro` will expand to `io.quarkus:quarkus-agroal`.  If no extension is found or if more than one extensions match, you will see a red check mark ❌ in the command result."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/maven-tooling.adoc:119
#, no-wrap
msgid ""
"$ ./mvnw quarkus:add-extensions -Dextensions=jdbc,agroal,non-exist-ent\n"
"[...]\n"
"❌ Multiple extensions matching 'jdbc'\n"
"     * io.quarkus:quarkus-jdbc-h2\n"
"     * io.quarkus:quarkus-jdbc-mariadb\n"
"     * io.quarkus:quarkus-jdbc-postgresql\n"
"     Be more specific e.g using the exact name or the full gav.\n"
"✅ Adding extension io.quarkus:quarkus-agroal\n"
"❌ Cannot find a dependency matching 'non-exist-ent', maybe a typo?\n"
"[...]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:122
msgid "You can install all extensions which match a globbing pattern :"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/maven-tooling.adoc:126
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"hibernate-*\"\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/maven-tooling.adoc:128
#, no-wrap
msgid "Development mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:132
msgid "Quarkus comes with a built-in development mode.  Run your application with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/maven-tooling.adoc:136
#, no-wrap
msgid "./mvnw compile quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:141
msgid "You can then update the application sources, resources and configurations.  The changes are automatically reflected in your running application.  This is great to do development spanning UI and database as you see changes reflected immediately."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:149
msgid "`quarkus:dev` enables hot deployment with background compilation, which means that when you modify your Java files or your resource files and refresh your browser these changes will automatically take effect.  This works too for resource files like the configuration property file.  The act of refreshing the browser triggers a scan of the workspace, and if any changes are detected the Java files are compiled, and the application is redeployed, then your request is serviced by the redeployed application. If there are any issues with compilation or deployment an error page will let you know."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:151
msgid "Hit `CTRL+C` to stop the application."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/maven-tooling.adoc:155
msgid "By default, `quarkus:dev` sets the debug host to `localhost` (for security reasons). If you need to change this, for example to enable debugging on all hosts, you can use the `-DdebugHost` option like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/maven-tooling.adoc:159
#, no-wrap
msgid "./mvnw compile quarkus:dev -DdebugHost=0.0.0.0\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/maven-tooling.adoc:162
#, no-wrap
msgid "Remote Development Mode"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/maven-tooling.adoc:166
msgid "It is possible to use development mode remotely, so that you can run Quarkus in a container environment (such as OpenShift)  and have changes made to your local files become immediately visible."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/maven-tooling.adoc:168
msgid "This allows you to develop in the same environment you will actually run your app in, and with access to the same services."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/maven-tooling.adoc:170
msgid "Do not use this in production. This should only be used in a development environment. You should not run production application in dev mode."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/maven-tooling.adoc:172
msgid "To do this you must build a mutable application, using the `mutable-jar` format. Set the following properties in `application.xml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/maven-tooling.adoc:178
#, no-wrap
msgid ""
"quarkus.package.type=mutable-jar <1>\n"
"quarkus.live-reload.password=changeit <2>\n"
"quarkus.live-reload.url=http://my.cluster.host.com:8080 <3>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:182
msgid "This tells Quarkus to use the mutable-jar format. Mutable applications also include the deployment time parts of Quarkus, so they take up a bit more disk space. If run normally they start just as fast and use the same memory as an immutable application, however they can also be started in dev mode."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:183
msgid "The password that is used to secure communication between the remote side and the local side."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:185
msgid "The URL that your app is going to be running in dev mode at. This is only needed on the local side, so you may want to leave it out of the properties file and specify it as a system property on the command line."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:190
msgid "Before you start Quarkus on the remote host set the environment variable `QUARKUS_LAUNCH_DEVMODE=true`. If you are on bare metal you can just set this via the `export QUARKUS_LAUNCH_DEVMODE=true` command, if you are running using docker start the image with `-e QUARKUS_LAUNCH_DEVMODE=true`. When the application starts you should now see the following line in the logs: `Profile dev activated. Live Coding activated`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:194
msgid "The remote side does not need to include Maven or any other development tools. The normal `fast-jar` Dockerfile that is generated with a new Quarkus application is all you need. If you are using bare metal launch the Quarkus runner jar, do not attempt to run normal devmode."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:196
msgid "Now you need to connect your local agent to the remote host, using the `remote-dev` command:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/maven-tooling.adoc:200
#, no-wrap
msgid "./mvnw quarkus:remote-dev -Dquarkus.live-reload.url=http://my-remote-host:8080\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:205
msgid "Now every time you refresh the browser you should see any changes you have made locally immediately visible in the remote app. This is done via a HTTP based long polling transport, that will synchronize your local workspace and the remote application via HTTP calls."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:209
msgid "If you do not want to use the HTTP feature then you can simply run the `remote-dev` command without specifying the URL.  In this mode the command will continuously rebuild the local application, so you can use an external tool such as odo or rsync to sync to the remote application."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:214
msgid "It is recommended you use SSL when using remote dev mode, however even if you are using an unencrypted connection your password is never sent directly over the wire. For the initial connection request the password is hashed with the initial state data, and subsequent requests hash it with a random session id generated by the server and any body contents for POST requests, and the path for DELETE requests, as well as an incrementing counter to prevent replay attacks."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/maven-tooling.adoc:215
#, no-wrap
msgid "Configuring Development Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:219
msgid "By default, the Maven plugin picks up compiler flags to pass to `javac` from `maven-compiler-plugin`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:226
msgid "If you need to customize the compiler flags used in development mode, add a `configuration` section to the `plugin` block and set the `compilerArgs` property just as you would when configuring `maven-compiler-plugin`.  You can also set `source`, `target`, and `jvmArgs`.  For example, to pass `--enable-preview` to both the JVM and `javac`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/maven-tooling.adoc:233
#, no-wrap
msgid ""
"<plugin>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-maven-plugin</artifactId>\n"
"  <version>${quarkus-plugin.version}</version>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/maven-tooling.adoc:242
#, no-wrap
msgid ""
"  <configuration>\n"
"    <source>${maven.compiler.source}</source>\n"
"    <target>${maven.compiler.target}</target>\n"
"    <compilerArgs>\n"
"      <arg>--enable-preview</arg>\n"
"    </compilerArgs>\n"
"    <jvmArgs>--enable-preview</jvmArgs>\n"
"  </configuration>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/maven-tooling.adoc:245
#, no-wrap
msgid ""
"  ...\n"
"</plugin>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/maven-tooling.adoc:248
#, no-wrap
msgid "Debugging"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:251
msgid "In development mode, Quarkus starts by default with debug mode enabled, listening to port `5005` without suspending the JVM."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:253
msgid "This behavior can be changed by giving the `debug` system property one of the following values:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:255
msgid "`false` - the JVM will start with debug mode disabled"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:256
msgid "`true` - The JVM is started in debug mode and will be listening on port `5005`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:257
msgid "`client` - the JVM will start in client mode and attempt to connect to `localhost:5005`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:258
msgid "`{port}` - The JVM is started in debug mode and will be listening on `{port}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:260
msgid "An additional system property `suspend` can be used to suspend the JVM, when launched in debug mode. `suspend` supports the following values:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:262
msgid "`y` or `true` - The debug mode JVM launch is suspended"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:263
msgid "`n` or `false` - The debug mode JVM is started without suspending"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/maven-tooling.adoc:268
msgid "You can also run a Quarkus application in debug mode with a suspended JVM using `./mvnw compile quarkus:dev -Dsuspend` which is a shorthand for `./mvnw compile quarkus:dev -Dsuspend=true`."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/maven-tooling.adoc:270
msgid "Then, attach your debugger to `localhost:5005`."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/maven-tooling.adoc:272
#, no-wrap
msgid "Import in your IDE"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:276
msgid "Once you have a <<project-creation, project generated>>, you can import it in your favorite IDE.  The only requirement is the ability to import a Maven project."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:278
#, no-wrap
msgid "**Eclipse**\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:283
msgid "In Eclipse, click on: `File -> Import`.  In the wizard, select: `Maven -> Existing Maven Project`.  On the next screen, select the root location of the project.  The next screen list the found modules; select the generated project and click on `Finish`. Done!"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:285
msgid "In a separated terminal, run `./mvnw compile quarkus:dev`, and enjoy a highly productive environment."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:287
#, no-wrap
msgid "**IntelliJ**\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:289
msgid "In IntelliJ:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:291
msgid "From inside IntelliJ select `File -> New -> Project From Existing Sources...` or, if you are on the welcome dialog, select `Import project`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:292
#: upstream/_versions/1.11/guides/maven-tooling.adoc:304
msgid "Select the project root"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:293
msgid "Select `Import project from external model` and `Maven`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:294
msgid "Next a few times (review the different options if needed)"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:295
msgid "On the last screen click on Finish"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:297
msgid "In a separated terminal or in the embedded terminal, run `./mvnw compile quarkus:dev`. Enjoy!"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:299
#, no-wrap
msgid "**Apache NetBeans**\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:301
msgid "In NetBeans:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:303
msgid "Select `File -> Open Project`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:305
msgid "Click on `Open Project`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:307
msgid "In a separated terminal or the embedded terminal, go to the project root and run `./mvnw compile quarkus:dev`. Enjoy!"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:309
#, no-wrap
msgid "**Visual Studio Code**\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:311
msgid "Open the project directory in VS Code. If you have installed the Java Extension Pack (grouping a set of Java extensions), the project is loaded as a Maven project."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/maven-tooling.adoc:312
#, no-wrap
msgid "Logging Quarkus application build classpath tree"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:317
msgid "Usually, dependencies of an application (which is a Maven project) could be displayed using `mvn dependency:tree` command. In case of a Quarkus application, however, this command will list only the runtime dependencies of the application.  Given that the Quarkus build process adds deployment dependencies of the extensions used in the application to the original application classpath, it could be useful to know which dependencies and which versions end up on the build classpath.  Luckily, the `quarkus-bootstrap` Maven plugin includes the `build-tree` goal which displays the build dependency tree for the application."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:319
msgid "To be able to use it, the following plugin configuration has to be added to the `pom.xml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/maven-tooling.adoc:327
#, no-wrap
msgid ""
"            <plugin>\n"
"                <groupId>io.quarkus</groupId>\n"
"                <artifactId>quarkus-bootstrap-maven-plugin</artifactId>\n"
"                <version>${quarkus-plugin.version}</version>\n"
"            </plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:330
msgid "Now you should be able to execute `./mvnw quarkus-bootstrap:build-tree` on your project and see something like:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/maven-tooling.adoc:342
#, no-wrap
msgid ""
"[INFO] --- quarkus-bootstrap-maven-plugin:{quarkus-version}:build-tree (default-cli) @ getting-started ---\n"
"[INFO] org.acme:getting-started:jar:1.0.0-SNAPSHOT\n"
"[INFO] └─ io.quarkus:quarkus-resteasy-deployment:jar:{quarkus-version} (compile)\n"
"[INFO]    ├─ io.quarkus:quarkus-resteasy-server-common-deployment:jar:{quarkus-version} (compile)\n"
"[INFO]    │  ├─ io.quarkus:quarkus-core-deployment:jar:{quarkus-version} (compile)\n"
"[INFO]    │  │  ├─ commons-beanutils:commons-beanutils:jar:1.9.3 (compile)\n"
"[INFO]    │  │  │  ├─ commons-logging:commons-logging:jar:1.2 (compile)\n"
"[INFO]    │  │  │  └─ commons-collections:commons-collections:jar:3.2.2 (compile)\n"
"...\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/maven-tooling.adoc:344
#, no-wrap
msgid "Building a native executable"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:347
msgid "Native executables make Quarkus applications ideal for containers and serverless workloads."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:350
msgid "Make sure to have `GRAALVM_HOME` configured and pointing to GraalVM version {graalvm-version} (Make sure to use a Java 11 version of GraalVM).  Verify that your `pom.xml` has the proper `native` profile (see <<build-tool-maven>>)."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:353
msgid "Create a native executable using: `./mvnw package -Pnative`.  A native executable will be present in `target/`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:355
msgid "To run Integration Tests on the native executable, make sure to have the proper Maven plugin configured (see <<build-tool-maven>>) and launch the `verify` goal."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/maven-tooling.adoc:383
#, no-wrap
msgid ""
"$ ./mvnw verify -Pnative\n"
"...\n"
"[quarkus-quickstart-runner:50955]     universe:     391.96 ms\n"
"[quarkus-quickstart-runner:50955]      (parse):     904.37 ms\n"
"[quarkus-quickstart-runner:50955]     (inline):   1,143.32 ms\n"
"[quarkus-quickstart-runner:50955]    (compile):   6,228.44 ms\n"
"[quarkus-quickstart-runner:50955]      compile:   9,130.58 ms\n"
"[quarkus-quickstart-runner:50955]        image:   2,101.42 ms\n"
"[quarkus-quickstart-runner:50955]        write:     803.18 ms\n"
"[quarkus-quickstart-runner:50955]      [total]:  33,520.15 ms\n"
"[INFO]\n"
"[INFO] --- maven-failsafe-plugin:2.22.0:integration-test (default) @ quarkus-quickstart-native ---\n"
"[INFO]\n"
"[INFO] -------------------------------------------------------\n"
"[INFO]  T E S T S\n"
"[INFO] -------------------------------------------------------\n"
"[INFO] Running org.acme.quickstart.GreetingResourceIT\n"
"Executing [/Users/starksm/Dev/JBoss/Quarkus/starksm64-quarkus-quickstarts/getting-started-native/target/quarkus-quickstart-runner, -Dquarkus.http.port=8081, -Dtest.url=http://localhost:8081, -Dquarkus.log.file.path=target/quarkus.log]\n"
"2019-02-28 16:52:42,020 INFO  [io.quarkus] (main) Quarkus started in 0.007s. Listening on: http://localhost:8080\n"
"2019-02-28 16:52:42,021 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy]\n"
"[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.081 s - in org.acme.quickstart.GreetingResourceIT\n"
"[INFO]\n"
"[INFO] Results:\n"
"[INFO]\n"
"[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/maven-tooling.adoc:385
#, no-wrap
msgid "...\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/maven-tooling.adoc:387
#, no-wrap
msgid "Build a container friendly executable"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:391
msgid "The native executable will be specific to your operating system.  To create an executable that will run in a container, use the following:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/maven-tooling.adoc:395
#, no-wrap
msgid "./mvnw package -Dnative -Dquarkus.native.container-build=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:400
msgid "The produced executable will be a 64 bit Linux executable, so depending on your operating system it may no longer be runnable.  However, it's not an issue as we are going to copy it to a Docker container.  Note that in this case the build itself runs in a Docker container too, so you don't need to have GraalVM installed locally."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/maven-tooling.adoc:404
msgid "By default, the native executable will be generated using the `quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor}` Docker image."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/maven-tooling.adoc:407
msgid "If you want to build a native executable with a different Docker image (for instance to use a different GraalVM version), use the `-Dquarkus.native.builder-image=<image name>` build argument."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/maven-tooling.adoc:410
msgid "The list of the available Docker images can be found on https://quay.io/repository/quarkus/ubi-quarkus-native-image?tab=tags[quay.io].  Be aware that a given Quarkus version might not be compatible with all the images available."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:413
msgid "You can follow the link:building-native-image[Build a native executable guide] as well as link:deploying-to-kubernetes[Deploying Application to Kubernetes and OpenShift] for more information."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/maven-tooling.adoc:415
#, no-wrap
msgid "Maven configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:418
msgid "If you have not used <<project-creation,project scaffolding>>, add the following elements in your `pom.xml`"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/maven-tooling.adoc:432
#, no-wrap
msgid ""
"<dependencyManagement>\n"
"    <dependencies>\n"
"        <dependency> <1>\n"
"            <groupId>io.quarkus</groupId>\n"
"            <artifactId>quarkus-universe-bom</artifactId>\n"
"            <version>${quarkus.platform.version}</version>\n"
"            <type>pom</type>\n"
"            <scope>import</scope>\n"
"        </dependency>\n"
"    </dependencies>\n"
"</dependencyManagement>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/maven-tooling.adoc:463
#, no-wrap
msgid ""
"<build>\n"
"    <plugins>\n"
"        <plugin> <2>\n"
"            <groupId>io.quarkus</groupId>\n"
"            <artifactId>quarkus-maven-plugin</artifactId>\n"
"            <version>${quarkus-plugin.version}</version>\n"
"            <extensions>true</extensions>\n"
"            <executions>\n"
"                <execution>\n"
"                    <goals>\n"
"                        <goal>build</goal>\n"
"                        <goal>generate-code</goal>\n"
"                        <goal>generate-code-tests</goal>\n"
"                    </goals>\n"
"                </execution>\n"
"            </executions>\n"
"        </plugin>\n"
"        <plugin> <3>\n"
"            <groupId>org.apache.maven.plugins</groupId>\n"
"            <artifactId>maven-surefire-plugin</artifactId>\n"
"            <version>${surefire-plugin.version}</version>\n"
"            <configuration>\n"
"                <systemPropertyVariables>\n"
"                    <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"                    <maven.home>${maven.home}</maven.home>\n"
"                </systemPropertyVariables>\n"
"            </configuration>\n"
"        </plugin>\n"
"    </plugins>\n"
"</build>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/maven-tooling.adoc:496
#, no-wrap
msgid ""
"<profiles>\n"
"    <profile> <4>\n"
"        <id>native</id>\n"
"        <properties> <5>\n"
"            <quarkus.package.type>native</quarkus.package.type>\n"
"        </properties>\n"
"        <build>\n"
"            <plugins>\n"
"                <plugin> <6>\n"
"                    <groupId>org.apache.maven.plugins</groupId>\n"
"                    <artifactId>maven-failsafe-plugin</artifactId>\n"
"                    <version>${surefire-plugin.version}</version>\n"
"                    <executions>\n"
"                        <execution>\n"
"                            <goals>\n"
"                                <goal>integration-test</goal>\n"
"                                <goal>verify</goal>\n"
"                            </goals>\n"
"                            <configuration>\n"
"                                <systemPropertyVariables>\n"
"                                    <native.image.path>${project.build.directory}/${project.build.finalName}-runner</native.image.path>\n"
"                                    <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"                                    <maven.home>${maven.home}</maven.home>\n"
"                                </systemPropertyVariables>\n"
"                            </configuration>\n"
"                        </execution>\n"
"                    </executions>\n"
"                </plugin>\n"
"            </plugins>\n"
"        </build>\n"
"    </profile>\n"
"</profiles>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:499
msgid "Optionally use a BOM file to omit the version of the different Quarkus dependencies."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:500
msgid "Use the Quarkus Maven plugin that will hook into the build process."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:502
msgid "Add system properties to `maven-surefire-plugin`. + `maven.home` is only required if you have custom configuration in `${maven.home}/conf/settings.xml`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:503
msgid "Use a specific `native` profile for native executable building."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:504
msgid "Enable the `native` package type. The build will therefore produce a native executable."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:505
msgid "If you want to test your native executable with Integration Tests, add the following plugin configuration. Test names `*IT` and annotated `@NativeImageTest` will be run against the native executable. See the link:building-native-image[Native executable guide] for more info."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/maven-tooling.adoc:507
#, no-wrap
msgid "Uber-Jar Creation"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:511
msgid "Quarkus Maven plugin supports the generation of Uber-Jars by specifying a `quarkus.package.type=uber-jar` configuration option in your `application.properties` (or `<quarkus.package.type>uber-jar</quarkus.package.type>` in your `pom.xml`)."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:513
msgid "The original jar will still be present in the `target` directory but it will be renamed to contain the `.original` suffix."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:516
msgid "When building an Uber-Jar you can specify entries that you want to exclude from the generated jar by using the `quarkus.package.ignored-entries` configuration option, this takes a comma separated list of entries to ignore."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:518
msgid "Uber-Jar creation by default excludes link:https://docs.oracle.com/javase/tutorial/deployment/jar/intro.html[signature files] that might be present in the dependencies of the application."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:520
msgid "Uber-Jar's final name is configurable via a Maven's build settings `finalName` option."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/maven-tooling.adoc:522
#, no-wrap
msgid "Working with multi-module projects"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:525
msgid "By default, Quarkus will not discover CDI beans inside another module."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:528
msgid "The best way to enable CDI bean discovery for a module in a multi-module project would be to include the `jandex-maven-plugin`, unless it is the main application module already configured with the quarkus-maven-plugin, in which case it will indexed automatically."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/maven-tooling.adoc:548
#, no-wrap
msgid ""
"<build>\n"
"  <plugins>\n"
"    <plugin>\n"
"      <groupId>org.jboss.jandex</groupId>\n"
"      <artifactId>jandex-maven-plugin</artifactId>\n"
"      <version>1.0.7</version>\n"
"      <executions>\n"
"        <execution>\n"
"          <id>make-index</id>\n"
"          <goals>\n"
"            <goal>jandex</goal>\n"
"          </goals>\n"
"        </execution>\n"
"      </executions>\n"
"    </plugin>\n"
"  </plugins>\n"
"</build>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:551
msgid "More information on this topic can be found on the link:cdi-reference#bean_discovery[Bean Discovery] section of the CDI guide."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/maven-tooling.adoc:553
#, no-wrap
msgid "Configuring the Project Output"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:557
msgid "There are a several configuration options that will define what the output of your project build will be.  These are provided in `application.properties` the same as any other config property."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:559
msgid "The properties are shown below:"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/maven-tooling.adoc:563
#, no-wrap
msgid "Custom test configuration profile in JVM mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:568
msgid "By default, Quarkus tests in JVM mode are run using the `test` configuration profile. If you are not familiar with Quarkus configuration profiles, everything you need to know is explained in the link:config#configuration-profiles[Configuration Profiles Documentation]."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:572
msgid "It is however possible to use a custom configuration profile for your tests with the Maven Surefire and Maven Failsafe configurations shown below. This can be useful if you need for example to run some tests using a specific database which is not your default testing database."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/maven-tooling.adoc:607
#, no-wrap
msgid ""
"<project>\n"
"  [...]\n"
"  <build>\n"
"    <plugins>\n"
"      <plugin>\n"
"        <groupId>org.apache.maven.plugins</groupId>\n"
"        <artifactId>maven-surefire-plugin</artifactId>\n"
"        <version>${surefire-plugin.version}</version>\n"
"        <configuration>\n"
"          <systemPropertyVariables>\n"
"            <quarkus.test.profile>foo</quarkus.test.profile> <1>\n"
"            <buildDirectory>${project.build.directory}</buildDirectory>\n"
"            [...]\n"
"          </systemPropertyVariables>\n"
"        </configuration>\n"
"      </plugin>\n"
"      <plugin>\n"
"        <groupId>org.apache.maven.plugins</groupId>\n"
"        <artifactId>maven-failsafe-plugin</artifactId>\n"
"        <version>${failsafe-plugin.version}</version>\n"
"        <configuration>\n"
"          <systemPropertyVariables>\n"
"            <quarkus.test.profile>foo</quarkus.test.profile> <1>\n"
"            <buildDirectory>${project.build.directory}</buildDirectory>\n"
"            [...]\n"
"          </systemPropertyVariables>\n"
"        </configuration>\n"
"      </plugin>\n"
"    </plugins>\n"
"  </build>\n"
"  [...]\n"
"</project>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/maven-tooling.adoc:610
msgid "The `foo` configuration profile will be used to run the tests."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/maven-tooling.adoc:615
msgid "It is not possible to use a custom test configuration profile in native mode for now. Native tests are always run using the `prod` profile."
msgstr ""
