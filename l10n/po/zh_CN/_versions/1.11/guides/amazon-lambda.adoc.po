# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:6
#, no-wrap
msgid "Quarkus - Amazon Lambda"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:13
msgid "The `quarkus-amazon-lambda` extension allows you to use Quarkus to build your AWS Lambdas.  Your lambdas can use injection annotations from CDI or Spring and other Quarkus facilities as you need them."
msgstr "`quarkus-amazon-lambda` 扩展允许你使用Quarkus来构建你的AWS Lambdas。你的Lambdas可以根据需要使用来自CDI或Spring的注入注解，以及其他Quarkus设施。"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:16
msgid "Quarkus lambdas can be deployed using the Amazon Java Runtime, or you can build a native executable and use Amazon's Custom Runtime if you want a smaller memory footprint and faster cold boot startup time."
msgstr "Quarkus lambdas可以使用Amazon Java Runtime进行部署，如果你想要更小的内存占用和更快的冷启动启动时间，你也可以构建一个本地可执行文件，并使用Amazon的Custom Runtime。"

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:19
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:22
msgid "To complete this guide, you need:"
msgstr "要完成这个指南，你需要："

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:24
msgid "less than 30 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:25
msgid "JDK 11 (AWS requires JDK 1.8 or 11)"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:26
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:27
msgid "https://aws.amazon.com[An Amazon AWS account]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:28
msgid "https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html[AWS CLI]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:29
msgid "https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI], for local testing"
msgstr "link:https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI] ，用于本地测试"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:31
msgid "For Gradle projects please <<gradle,see below>>, or for further reference consult the guide in the link:gradle-tooling[Gradle setup page]."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:32
#, no-wrap
msgid "Getting Started"
msgstr "入门指南"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:35
msgid "This guide walks you through generating an example Java project via a maven archetype and deploying it to AWS."
msgstr "本指南将指导你通过一个maven原型生成一个Java项目的例子，并将其部署到AWS。"

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:36
#, no-wrap
msgid "Installing AWS bits"
msgstr "安装AWS位"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:40
msgid "Installing all the AWS bits is probably the most difficult thing about this guide.  Make sure that you follow all the steps for installing AWS CLI."
msgstr "安装所有AWS位可能是本指南中最困难的事情。请确保你遵循安装AWS CLI的所有步骤。"

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:41
#, no-wrap
msgid "Creating the Maven Deployment Project"
msgstr "创建Maven部署项目"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:44
msgid "Create the Quarkus AWS Lambda maven project using our Maven Archetype."
msgstr "使用我们的Maven Archetype创建Quarkus AWS Lambda maven项目。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:52
#, no-wrap
msgid ""
"mvn archetype:generate \\\n"
"       -DarchetypeGroupId=io.quarkus \\\n"
"       -DarchetypeArtifactId=quarkus-amazon-lambda-archetype \\\n"
"       -DarchetypeVersion={quarkus-version}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:58
msgid "If you prefer to use Gradle, you can quickly and easily generate a Gradle project via https://code.quarkus.io/[code.quarkus.io] adding the `quarkus-amazon-lambda` extension as a dependency."
msgstr "如果你喜欢使用Gradle，你可以通过 link:https://code.quarkus.io/[code.quarkus.io] 将 `quarkus-amazon-lambda` 扩展添加为依赖项，来快速而轻松地生成一个Gradle项目。"

#. type: delimited block =
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:60
msgid "Copy the build.gradle, gradle.properties and settings.gradle into the above generated Maven archetype project, to follow along with this guide."
msgstr "将build.gradle、gradle.properties和settings.gradle复制到上述生成的Maven archetype项目中，以按照本指南进行操作。"

#. type: delimited block =
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:62
msgid "Execute: gradle wrapper to setup the gradle wrapper (recommended)."
msgstr "执行：gradle wrapper来设置gradle wrapper（推荐）。"

#. type: delimited block =
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:64
msgid "The dependency for `quarkus-test-amazon-lambda` will also need to be added to your build.gradle."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:66
msgid "For full Gradle details <<gradle, see below>>."
msgstr "关于Gradle的全部细节，link:#gradle[请见下文] 。"

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:69
#, no-wrap
msgid "Choose Your Lambda"
msgstr "选择你的Lambda"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:74
msgid "The `quarkus-amazon-lambda` extension scans your project for a class that directly implements the Amazon `RequestHandler<?, ?>` or `RequestStreamHandler` interface.  It must find a class in your project that implements this interface or it will throw a build time failure.  If it finds more than one handler class, a build time exception will also be thrown."
msgstr "`quarkus-amazon-lambda` 扩展会为直接实现亚马逊 `RequestHandler<?, ?>` 或 `RequestStreamHandler` 接口的类扫描你的项目。它必须在你的项目中找到一个实现该接口的类，否则它将抛出一个构建时间失败。如果它发现一个以上的处理程序类，也会抛出一个构建时间异常。"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:78
msgid "Sometimes, though, you might have a few related lambdas that share code and creating multiple maven modules is just an overhead you don't want to do.  The `quarkus-amazon-lambda` extension allows you to bundle multiple lambdas in one project and use configuration or an environment variable to pick the handler you want to deploy."
msgstr "但有时，你可能会有几个共享代码的相关lambdas，创建多个maven模块是你不想做的开销。 `quarkus-amazon-lambda` 扩展允许你在一个项目中捆绑多个lambdas，并使用配置或环境变量来选择你要部署的处理程序。"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:81
msgid "The generated project has three lambdas within it.  Two that implement the `RequestHandler<?, ?>` interface, and one that implements the `RequestStreamHandler` interface. One that is used and two that are unused.  If you open up `src/main/resources/application.properties` you'll see this:"
msgstr "生成的项目里有三个lambdas。两个实现 `RequestHandler<?, ?>` 接口，一个实现 `RequestStreamHandler` 接口。使用了一个，另两个未使用。如果你打开 `src/main/resources/application.properties` ，你会看到："

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:85
#, no-wrap
msgid "quarkus.lambda.handler=test\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:89
msgid "The `quarkus.lambda.handler` property tells Quarkus which lambda handler to deploy. This can be overridden with an environment variable too."
msgstr "`quarkus.lambda.handler` 属性告诉Quarkus要部署哪个lambda处理程序。这也可以用一个环境变量来覆盖。"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:91
msgid "If you look at the three generated handler classes in the project, you'll see that they are `@Named` differently."
msgstr "如果你查看项目中生成的三个处理程序类，你会发现它们的 `@Named` 不同。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:97
#, no-wrap
msgid ""
"@Named(\"test\")\n"
"public class TestLambda implements RequestHandler<InputObject, OutputObject> {\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:101
#, no-wrap
msgid ""
"@Named(\"unused\")\n"
"public class UnusedLambda implements RequestHandler<InputObject, OutputObject> {\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:105
#, no-wrap
msgid ""
"@Named(\"stream\")\n"
"public class StreamLambda implements RequestStreamHandler {\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:108
msgid "The CDI name of the handler class must match the value specified within the `quarkus.lambda.handler` property."
msgstr "处理程序类的CDI名称必须与 `quarkus.lambda.handler` 属性中指定的值匹配。"

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:110
#, no-wrap
msgid "Deploy to AWS Lambda Java Runtime"
msgstr "部署到AWS Lambda Java Runtime"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:114
msgid "There are a few steps to get your lambda running on AWS.  The generated maven project contains a helpful script to create, update, delete, and invoke your lambdas for pure Java and native deployments."
msgstr "有几个步骤可以让lambda在AWS上运行。生成的maven项目包含一个有用的脚本，来为纯Java和原生部署创建、更新、删除和调用你的lambda。"

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:115
#, no-wrap
msgid "Build and Deploy"
msgstr "构建和部署"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:118
msgid "Build the project using maven."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:122
#, no-wrap
msgid "./mvnw clean package\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:125
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:254
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:269
msgid "or, if using Gradle:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:127
#, no-wrap
msgid "./gradlew clean assemble\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:130
msgid "This will compile and package your code."
msgstr "这将对你的代码进行编译和打包。"

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:131
#, no-wrap
msgid "Create an Execution Role"
msgstr "创建一个执行角色"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:137
msgid "View the https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-awscli.html[Getting Started Guide] for deploying a lambda with AWS CLI.  Specifically, make sure you have created an `Execution Role`.  You will need to define a `LAMBDA_ROLE_ARN` environment variable in your profile or console window, Alternatively, you can edit the `manage.sh` script that is generated by the build and put the role value directly there:"
msgstr "查看使用AWS CLI部署lambda的 link:https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-awscli.html[入门指南] 。具体来说，确保你已经创建了一个 `Execution Role` 。你需要在你的配置文件或控制台窗口中定义一个 `LAMBDA_ROLE_ARN` 环境变量，或者，你可以编辑由构建生成的 `manage.sh` 脚本，并把角色值直接放在那里："

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:141
#, no-wrap
msgid "LAMBDA_ROLE_ARN=\"arn:aws:iam::1234567890:role/lambda-role\"\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:143
#, no-wrap
msgid "Extra Build Generated Files"
msgstr "构建额外生成的文件"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:147
msgid "After you run the build, there are a few extra files generated by the `quarkus-amazon-lambda` extension.  These files are in the the build directory: `target/` for maven, `build/` for gradle."
msgstr "运行构建后，有几个由 `quarkus-amazon-lambda` 扩展额外生成的文件。对于maven，这些文件位于构建目录：`target/` 中，对于gradle，则位于 `build/` 中。"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:149
msgid "`function.zip` - lambda deployment file"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:150
msgid "`manage.sh` - wrapper around aws lambda cli calls"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:151
msgid "`bootstrap-example.sh` - example bootstrap script for native deployments"
msgstr " `bootstrap-example.sh` - 用于原生部署的bootstrap脚本示例"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:152
msgid "`sam.jvm.yaml` - (optional) for use with sam cli and local testing"
msgstr " `sam.jvm.yaml` - (可选)用于sam cli和本地测试"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:153
msgid "`sam.native.yaml` - (optional) for use with sam cli and native local testing"
msgstr " `sam.native.yaml` - (可选)，用于Sam cli和原生本地测试"

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:154
#, no-wrap
msgid "Create the function"
msgstr "创建函数"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:159
msgid "The `target/manage.sh` script is for managing your lambda using the AWS Lambda Java runtime.  This script is provided only for your convenience. Examine the output of the `manage.sh` script if you want to learn what aws commands are executed to create, delete, and update your lambdas."
msgstr "`target/manage.sh` 脚本是用于使用AWS Lambda Java runtime管理你的lambda。此脚本只是为了方便你而提供。如果你想了解执行哪些aws命令来创建、删除和更新你的lambdas，请检查 `manage.sh` 脚本的输出。"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:161
msgid "`manage.sh` supports four operation: `create`, `delete`, `update`, and `invoke`."
msgstr "`manage.sh` 支持四种操作： `create`， `delete`， `update` 和 `invoke` 。"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:165
msgid "To verify your setup, that you have the AWS CLI installed, executed aws configure for the AWS access keys, and setup the `LAMBDA_ROLE_ARN` environment variable (as described above), please execute `manage.sh` without any parameters.  A usage statement will be printed to guide you accordingly."
msgstr "为了验证你的设置，是否安装了AWS CLI，是否为AWS访问密钥执行了aws configure，是否设置了 `LAMBDA_ROLE_ARN` 环境变量（如上所述），请执行不带任何参数的 `manage.sh` 。将会打印出一个使用说明，来对你进行相应的指导。"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:167
msgid "If using Gradle, the path to the binaries in the `manage.sh` must be changed from `target` to `build`"
msgstr "如果使用Gradle， `manage.sh` 中二进制文件的路径必须从 `target` 变为 `build` "

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:169
msgid "To see the `usage` statement, and validate AWS configuration:"
msgstr "要查看  `用法`  声明，并验证AWS配置："

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:172
#, no-wrap
msgid "sh target/manage.sh\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:175
msgid "You can `create` your function using the following command:"
msgstr "你可以使用以下命令 `创建` 你的函数："

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:179
#, no-wrap
msgid "sh target/manage.sh create\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:182
msgid "or if you do not have `LAMBDA_ROLE_ARN` already defined in this shell:"
msgstr "或者如果在这个shell中没有定义 `LAMBDA_ROLE_ARN` ："

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:186
#, no-wrap
msgid "LAMBDA_ROLE_ARN=\"arn:aws:iam::1234567890:role/lambda-role\" sh target/manage.sh create\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:190
msgid "Do not change the handler switch.  This must be hardcoded to `io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest`.  This handler bootstraps Quarkus and wraps your actual handler so that injection can be performed."
msgstr "不要改变处理程序的开关。这必须被硬编码为 `io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest` 。这个处理程序引导Quarkus，并包装你实际的处理程序，以便可以执行注入。"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:193
msgid "If there are any problems creating the function, you must delete it with the `delete` function before re-running the `create` command."
msgstr "如果在创建函数时有任何问题，你必须在重新运行 `create` 命令之前使用 `delete` 函数来删除它。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:197
#, no-wrap
msgid "sh target/manage.sh delete\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:200
msgid "Commands may also be stacked:"
msgstr "命令也可以是叠加的："

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:203
#, no-wrap
msgid "sh target/manage.sh delete create\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:205
#, no-wrap
msgid "Invoke the Lambda"
msgstr "调用Lambda"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:208
msgid "Use the `invoke` command to invoke your function."
msgstr "使用 `invoke` 命令来调用你的函数。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:212
#, no-wrap
msgid "sh target/manage.sh invoke\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:216
msgid "The example lambda takes input passed in via the `--payload` switch which points to a json file in the root directory of the project."
msgstr "这个lambda示例接受通过 `--payload` 开关传入的输入，该开关指向项目根目录中的一个json文件。"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:218
msgid "The lambda can also be invoked locally with the SAM CLI like this:"
msgstr "这个lambda也可以使用SAM CLI在本地调用，如："

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:222
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:439
#, no-wrap
msgid "sam local invoke --template target/sam.jvm.yaml --event payload.json\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:225
msgid "If you are working with your native image build, simply replace the template name with the native version:"
msgstr "如果你正在使用原生镜像构建，只需将模板名称替换为原生版本："

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:229
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:446
#, no-wrap
msgid "sam local invoke --template target/sam.native.yaml --event payload.json\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:231
#, no-wrap
msgid "Update the Lambda"
msgstr "更新Lambda"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:235
msgid "You can update the Java code as you see fit.  Once you've rebuilt, you can redeploy your lambda by executing the `update` command."
msgstr "你可以在你认为合适的时候更新Java代码。一旦你重建了，你可以通过执行 `update` 命令来重新部署你的lambda。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:239
#, no-wrap
msgid "sh target/manage.sh update\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:241
#, no-wrap
msgid "Deploy to AWS Lambda Custom (native) Runtime"
msgstr "部署到AWS Lambda Custom (native) Runtime"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:245
msgid "If you want a lower memory footprint and faster initialization times for your lambda, you can compile your Java code to a native executable.  Just make sure to rebuild your project with the `-Pnative` switch."
msgstr "如果你想让你的lambda有更低的内存占用和更快的初始化时间，你可以把你的Java代码编译成本地可执行文件。只是确保要用 `-Pnative` 开关重建你的项目。"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:247
msgid "For Linux hosts execute:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:251
#, no-wrap
msgid "mvn package -Pnative\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:257
#, no-wrap
msgid "./gradlew build -Dquarkus.package.type=native\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:262
msgid "If you are building on a non-Linux system, you will need to also pass in a property instructing quarkus to use a docker build as Amazon Lambda requires linux binaries.  You can do this by passing this property to your Maven build: `-Dnative-image.docker-build=true`, or for Gradle: `--docker-build=true`.  This requires you to have docker installed locally, however."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:266
#, no-wrap
msgid "./mvnw clean install -Pnative -Dnative-image.docker-build=true\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:272
#, no-wrap
msgid "./gradlew build -Dquarkus.package.type=native -Dquarkus.native.container-build=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:277
msgid "Either of these commands will compile and create a native executable image.  It also generates a zip file `target/function.zip`.  This zip file contains your native executable image renamed to `bootstrap`.  This is a requirement of the AWS Lambda Custom (Provided) Runtime."
msgstr "这两个命令中的任何一个都会编译并创建一个本地可执行镜像。它还会生成一个zip文件 `target/function.zip` 。这个zip文件包含已重命名为 `bootstrap` 的本地可执行镜像，。这是AWS Lambda Custom (Provided) Runtime的要求。"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:280
msgid "The instructions here are exactly as above with one change: you'll need to add `native` as the first parameter to the `manage.sh` script:"
msgstr "这里的说明与上面的完全一样，但有一个变化：你需要将 `native` 作为第一个参数添加到 `manage.sh` 脚本中："

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:284
#, no-wrap
msgid "sh target/manage.sh native create\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:289
msgid "As above, commands can be stacked.  The only requirement is that `native` be the first parameter should you wish to work with native image builds.  The script will take care of the rest of the details necessary to manage your native image function deployments."
msgstr "如上所述，命令可以叠加。如果你想使用原生镜像构建，唯一的要求是 `native` 是第一个参数。该脚本将处理管理你原生镜像功能部署所需的其余细节。"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:292
msgid "Examine the output of the `manage.sh` script if you want to learn what aws commands are executed to create, delete, and update your lambdas."
msgstr "如果你想了解执行了哪些aws命令来创建、删除和更新lambdas，请检查 `manage.sh` 脚本的输出。"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:295
msgid "One thing to note about the create command for native is that the `aws lambda create-function` call must set a specific environment variable:"
msgstr "对于原生的创建命令，需要注意的一点是， `aws lambda create-function` 调用必须设置一个特定的环境变量："

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:299
#, no-wrap
msgid "--environment 'Variables={DISABLE_SIGNAL_HANDLERS=true}'\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:301
#, no-wrap
msgid "Examine the POM and Gradle build"
msgstr "检查POM和Gradle构建"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:305
msgid "There is nothing special about the POM other than the inclusion of the `quarkus-amazon-lambda` and `quarkus-test-amazon-lambda` extensions as a dependencies.  The extension automatically generates everything you might need for your lambda deployment."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:308
msgid "In previous versions of this extension you had to set up your pom or gradle to zip up your executable for native deployments, but this is not the case anymore."
msgstr "在这个扩展的前几个版本中，你必须设置你的pom或gradle来为原生部署压缩你的可执行文件，但现在不再是这样了。"

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:310
#, no-wrap
msgid "Gradle build"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:315
msgid "Similarly for Gradle projects, you also just have to add the `quarkus-amazon-lambda` and `quarkus-test-amazon-lambda` dependencies.  The extension automatically generates everything you might need for your lambda deployment."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:317
msgid "Example Gradle dependencies:"
msgstr "Gradle依赖项示例："

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:324
#, no-wrap
msgid ""
"dependencies {\n"
"    implementation enforcedPlatform(\"${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}\")\n"
"    implementation 'io.quarkus:quarkus-resteasy'\n"
"    implementation 'io.quarkus:quarkus-amazon-lambda'\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:326
#, no-wrap
msgid "    testimplementation  \"io.quarkus:quarkus-test-amazon-lambda\"\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:330
#, no-wrap
msgid ""
"    testImplementation 'io.quarkus:quarkus-junit5'\n"
"    testImplementation 'io.rest-assured:rest-assured'\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:333
#, no-wrap
msgid "Integration Testing"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:337
msgid "The Quarkus Amazon Lambda extension has a matching test framework that provides functionality to execute standard JUnit tests on your AWS Lambda function, via the integration layer that Quarkus provides.  This is true for both JVM and native modes.  It provides similar functionality to the SAM CLI, without the overhead of Docker."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:340
msgid "To illustrate, the project generated by the Maven archetype, generates a JUnit test for the `RequestHandler<?, ?>` implementation, which is shown below.  The test replicates the execution environment, for the function that is selected for invocation, as described <<choose, above>>."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:342
msgid "To use the integration tests in your project there is a required property, in `src/test/resources/application.properties`. If not included, the integration tests will be in a constant loop."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:346
#, no-wrap
msgid "quarkus.lambda.enable-polling-jvm-mode=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:350
msgid "If you are following along with the example Maven archetype project for AWS Lambda in this guide, it includes the required property `quarkus.lambda.enable-polling-jvm-mode=true` in the test `application.properties`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:355
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class LambdaHandlerTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:361
#, no-wrap
msgid ""
"    @Test\n"
"    public void testSimpleLambdaSuccess() throws Exception {\n"
"        InputObject in = new InputObject();\n"
"        in.setGreeting(\"Hello\");\n"
"        in.setName(\"Stu\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:363
#, no-wrap
msgid "        OutputObject out = LambdaClient.invoke(OutputObject.class, in);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:368
#, no-wrap
msgid ""
"        Assertions.assertEquals(\"Hello Stu\", out.getResult());\n"
"        Assertions.assertTrue(out.getRequestId().matches(\"aws-request-\\\\d\"), \"Expected requestId as 'aws-request-<number>'\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:372
msgid "Similarly, if you are using a `RequestStreamHandler` implementation, you can add a matching JUnit test, like below, which aligns to the generated `StreamLambda` class in the generated project."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:375
msgid "Obviously, these two types of tests are mutually exclusive.  You must have a test that corresponds to the implemented AWS Lambda interfaces, whether `RequestHandler<?, ?>` or `RequestStreamHandler`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:378
msgid "Two versions of the Test for `RequestStreamHandler` are presented below.  You can use either, depending on the needs of your Unit test.  The first is obviously simpler and quicker.  Using Java streams can require more coding."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:383
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class LambdaStreamHandlerTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:385
#, no-wrap
msgid "    private static Logger LOG = Logger.getLogger(LambdaStreamHandlerTest.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:391
#, no-wrap
msgid ""
"    @Test\n"
"    public void testSimpleLambdaSuccess() throws Exception {\n"
"        String out = LambdaClient.invoke(String.class, \"lowercase\");\n"
"        Assertions.assertEquals(\"LOWERCASE\", out);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:398
#, no-wrap
msgid ""
"    @Test\n"
"    public void testInputStreamSuccess() {\n"
"        try {\n"
"            String input = \"{ \\\"name\\\": \\\"Bill\\\", \\\"greeting\\\": \\\"hello\\\"}\";\n"
"            InputStream inputStream = new ByteArrayInputStream(input.getBytes());\n"
"            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:400
#, no-wrap
msgid "            LambdaClient.invoke(inputStream, outputStream);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:407
#, no-wrap
msgid ""
"            ByteArrayInputStream out = new ByteArrayInputStream(outputStream.toByteArray());\n"
"            StringBuilder response = new StringBuilder();\n"
"            int i = 0;\n"
"            while ((i = out.read()) != -1) {\n"
"                response.append((char)i);\n"
"            }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:413
#, no-wrap
msgid ""
"            Assertions.assertTrue(response.toString().contains(\"BILL\"));\n"
"        } catch (Exception e) {\n"
"            Assertions.fail(e.getMessage());\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:415
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:418
msgid "If your code uses CDI injection, this too will be executed, along with mocking functionality, see the link:getting-started-testing[Test Guide] for more details."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:420
msgid "To add JUnit functionality for native tests, add the `@NativeImageTest` annotation to a subclass of your test class, which will execute against your native image, and can be leveraged in an IDE."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:422
#, no-wrap
msgid "Testing with the SAM CLI"
msgstr "使用SAM CLI进行测试"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:428
msgid "The https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI] allows you to run your lambdas locally on your laptop in a simulated Lambda environment.  This requires https://www.docker.com/products/docker-desktop[docker] to be installed.  This is an optional approach should you choose to take advantage of it.  Otherwise, the Quarkus JUnit integration should be sufficient for most of your needs."
msgstr "link:https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI] 允许你在模拟的Lambda环境中在你的笔记本电脑上本地运行lambdas。这需要安装 link:https://www.docker.com/products/docker-desktop[docker] 。如果你选择使用它，这是一个可选的方法。否则，Quarkus的JUnit集成应该足以满足你的大部分需求。"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:430
msgid "A starter template has been generated for both JVM and native execution modes."
msgstr "已经为JVM和原生执行模式生成了一个启动模板。"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:433
msgid "Run the following SAM CLI command to locally test your lambda function, passing the appropriate SAM `template`.  The `event` parameter takes any JSON file, in this case the sample `payload.json`."
msgstr "运行下面的SAM CLI命令来本地测试你的lambda函数，传递合适的SAM `模板` 。 `event` 参数使用任何JSON文件，在本例中是样本 `payload.json` 。"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:435
msgid "If using Gradle, the path to the binaries in the YAML templates must be changed from `target` to `build`"
msgstr "如果使用Gradle，YAML模板中的二进制文件的路径必须从 `target` 改为 `build` "

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:442
msgid "The native image can also be locally tested using the `sam.native.yaml` template:"
msgstr "本地镜像也可以使用  `sam.native.yaml`  模板进行本地测试："

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:448
#, no-wrap
msgid "Modifying `function.zip`"
msgstr "修改 `function.zip` "

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:453
msgid "The are times where you may have to add some additions to the `function.zip` lambda deployment that is generated by the build.  To do this create a `zip.jvm` or `zip.native` directory within `src/main`.  Create `zip.jvm/` if you are doing a pure Java lambda.  `zip.native/` if you are doing a native deployment."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:455
msgid "Any you files and directories you create under your zip directory will be included within `function.zip`"
msgstr "你在zip目录下创建的任何文件和目录都将包括在 `function.zip` 内"

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:456
#, no-wrap
msgid "Custom `bootstrap` script"
msgstr "自定义 `bootstrap` 脚本"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:462
msgid "There are times you may want to set a specific system properties or other arguments when lambda invokes your native quarkus lambda deployment.  If you include a `bootstrap` script file within `zip.native`, the quarkus extension will automatically rename the executable to `runner` within `function.zip` and set the unix mode of the `bootstrap` script to executable."
msgstr "有些时候你可能想在lambda调用你的原生quarkus lambda部署时设置特定的系统属性或其他参数。如果你在 `zip.native` 中包含一个 `bootstrap` 脚本文件，quarkus 扩展会在 `function.zip` 中自动将可执行文件重命名为 `runner` ，并将 `bootstrap` 脚本的 unix 模式设置为可执行。"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:464
msgid "The native executable must be referenced as `runner` if you include a custom `bootstrap` script."
msgstr "如果你包含一个自定义的 `bootstrap` 脚本，那么本地可执行文件必须被引用为 `runner` 。"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:466
msgid "The extension generates an example script within `target/bootstrap-example.sh`."
msgstr "扩展会在 `target/bootstrap-example.sh` 中生成了一个示例脚本。"

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:467
#, no-wrap
msgid "Tracing with AWS XRay and GraalVM"
msgstr "使用AWS XRay和GraalVM进行追踪"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:472
msgid "If you are building native images, and want to use https://aws.amazon.com/xray[AWS X-Ray Tracing] with your lambda you will need to include `quarkus-amazon-lambda-xray` as a dependency in your pom.  The AWS X-Ray library is not fully compatible with GraalVM so we had to do some integration work to make this work."
msgstr "如果你正在构建原生镜像，并希望在你的lambda中使用 link:https://aws.amazon.com/xray[AWS X-Ray Tracing] ，那么你将需要在你的pom中包含 `quarkus-amazon-lambda-xray` 来作为一个依赖项。AWS X-Ray库与GraalVM并不完全兼容，因此我们不得不做一些整合工作来使其正常运行。"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:474
msgid "In addition, remember to enable the AWS X-Ray tracing parameter in `manage.sh`, in the `cmd_create()` function.  This can also be set in the AWS Management Console."
msgstr "此外，记得在 `manage.sh` ， `cmd_create()` 函数中启用AWS X-Ray追踪参数。这也可以在AWS管理控制台中进行设置。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:477
#, no-wrap
msgid "    --tracing-config Mode=Active\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:480
msgid "For the sam template files, add the following to the YAML function Properties."
msgstr "对于Sam模板文件，将以下内容添加到YAML函数属性中。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:483
#, no-wrap
msgid "    Tracing: Active\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:487
msgid "AWS X-Ray does add many classes to your distribution, do ensure you are using at least the 256MB AWS Lambda memory size.  This is explicitly set in `manage.sh` `cmd_create()`. Whilst the native image potentially can always use a lower memory setting, it would be recommended to keep the setting the same, especially to help compare performance."
msgstr "AWS X-Ray确实在你的发行版中添加了许多类，确保你至少使用了256MB的AWS Lambda内存大小。这在 `manage.sh` `cmd_create()` 中进行了明确的设置。虽然原生镜像可能总是使用较低的内存设置，但建议保持设置不变，特别是为了帮助比较性能。"

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:489
#, no-wrap
msgid "Using HTTPS or SSL/TLS"
msgstr "使用HTTPS或SSL/TLS"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:494
msgid "If your code makes HTTPS calls, such as to a micro-service (or AWS service), you will need to add configuration to the native image, as GraalVM will only include the dependencies when explicitly declared.  Quarkus, by default enables this functionality on extensions that implicitly require it.  For further information, please consult the link:native-and-ssl[Quarkus SSL guide]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:496
msgid "Open src/main/resources/application.properties and add the following line to enable SSL in your native image."
msgstr "打开src/main/resources/application.properties，并在你的原生镜像中添加以下行来启用SSL。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:500
#, no-wrap
msgid "quarkus.ssl.native=true\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:503
#, no-wrap
msgid "Using the AWS Java SDK v2"
msgstr "使用AWS Java SDK v2"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:506
msgid "Quarkus now has extensions for DynamoDB, S3, SNS and SQS (more coming). Please check those guides on how to use the various AWS Services with Quarkus, as opposed to wiring manually like below."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:509
msgid "With minimal integration, it is possible to leverage the AWS Java SDK v2, which can be used to invoke services such as SQS, SNS, S3 and DynamoDB."
msgstr "通过最小的整合，可以利用AWS Java SDK v2，其可以用来调用诸如SQS、SNS、S3和DynamoDB等服务。"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:512
msgid "For native image, however the URL Connection client must be preferred over the Apache HTTP Client when using synchronous mode, due to issues in the GraalVM compilation (at present)."
msgstr "然而，对于原生镜像，由于GraalVM编译中的问题（目前），在使用同步模式时，URL Connection客户端必须优先于Apache HTTP客户端。"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:514
msgid "Add `quarkus-jaxb` as a dependency in your Maven `pom.xml`, or Gradle `build.gradle` file."
msgstr "把 `quarkus-jaxb` 作为一个依赖项添加到你的Maven `pom.xml` ，或Gradle `build.gradle` 文件中。"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:517
msgid "You must also force your AWS service client for SQS, SNS, S3 et al, to use the URL Connection client, which connects to AWS services over HTTPS, hence the inclusion of the SSL enabled property, as described in the <<https>> section above."
msgstr "你还必须强制你的SQS、SNS、S3等AWS服务客户端使用URL Connection客户端，其通过HTTPS连接到AWS服务，因此包含启用了SSL的属性，如上面 link:#https[[https]] 部分中所述。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:523
#, no-wrap
msgid ""
"// select the appropriate client, in this case SQS, and\n"
"// insert your region, instead of XXXX, which also improves startup time over the default client\n"
"  client = SqsClient.builder().region(Region.XXXX).httpClient(software.amazon.awssdk.http.urlconnection.UrlConnectionHttpClient.builder().build()).build();\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:526
msgid "For Maven, add the following to your `pom.xml`."
msgstr "对于Maven，在你的 `pom.xml` 中添加以下内容。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:533
#, no-wrap
msgid ""
"    <properties>\n"
"        <aws.sdk2.version>2.10.69</aws.sdk2.version>\n"
"    </properties>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:536
#, no-wrap
msgid ""
"    <dependencyManagement>\n"
"        <dependencies>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:544
#, no-wrap
msgid ""
"            <dependency>\n"
"                <groupId>software.amazon.awssdk</groupId>\n"
"                <artifactId>bom</artifactId>\n"
"                <version>${aws.sdk2.version}</version>\n"
"                <type>pom</type>\n"
"                <scope>import</scope>\n"
"            </dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:548
#, no-wrap
msgid ""
"        </dependencies>\n"
"    </dependencyManagement>\n"
"    <dependencies>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:553
#, no-wrap
msgid ""
"        <dependency>\n"
"            <groupId>software.amazon.awssdk</groupId>\n"
"            <artifactId>url-connection-client</artifactId>\n"
"        </dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:564
#, no-wrap
msgid ""
"        <dependency>\n"
"            <groupId>software.amazon.awssdk</groupId>\n"
"            <artifactId>apache-client</artifactId>\n"
"            <exclusions>\n"
"                <exclusion>\n"
"                    <groupId>commons-logging</groupId>\n"
"                    <artifactId>commons-logging</artifactId>\n"
"                </exclusion>\n"
"            </exclusions>\n"
"        </dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:585
#, no-wrap
msgid ""
"        <dependency>\n"
"            <groupId>software.amazon.awssdk</groupId>\n"
"            <!-- sqs/sns/s3 etc -->\n"
"            <artifactId>sqs</artifactId>\n"
"            <exclusions>\n"
"                <!-- exclude the apache-client and netty client -->\n"
"                <exclusion>\n"
"                    <groupId>software.amazon.awssdk</groupId>\n"
"                    <artifactId>apache-client</artifactId>\n"
"                </exclusion>\n"
"                <exclusion>\n"
"                    <groupId>software.amazon.awssdk</groupId>\n"
"                    <artifactId>netty-nio-client</artifactId>\n"
"                </exclusion>\n"
"                <exclusion>\n"
"                    <groupId>commons-logging</groupId>\n"
"                    <artifactId>commons-logging</artifactId>\n"
"                </exclusion>\n"
"            </exclusions>\n"
"        </dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:592
#, no-wrap
msgid ""
"        <dependency>\n"
"            <groupId>org.jboss.logging</groupId>\n"
"            <artifactId>commons-logging-jboss-logging</artifactId>\n"
"            <version>1.0.0.Final</version>\n"
"        </dependency>\n"
"    </dependencies>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:596
msgid "if you see `java.security.InvalidAlgorithmParameterException: the trustAnchors parameter must be non-empty` or similar SSL error, due to the current status of GraalVM, there is some additional work to bundle the `function.zip`, as below.  For more information, please see the link:native-and-ssl[Quarkus Native SSL Guide]."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:597
#, no-wrap
msgid "Additional requirements for client SSL"
msgstr "对客户端SSL的额外要求"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:600
msgid "The native executable requires some additional steps to enable client ssl that S3 and other aws libraries need."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:602
msgid "A custom `bootstrap` script"
msgstr "一个自定义的 `bootstrap` 脚本"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:603
msgid "`libsunec.so` must be added to `function.zip`"
msgstr "必须将 `libsunec.so` 添加到 `function.zip` 中"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:604
msgid "`cacerts` must be added to `function.zip`"
msgstr "必须将 `cacerts` 添加到 `function.zip` 中"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:607
msgid "To do this, first create a directory `src/main/zip.native/` with your build.  Next create a shell script file called `bootstrap` within `src/main/zip.native/`, like below. An example is create automatically in your build folder (target or build), called `bootstrap-example.sh`"
msgstr "要做到这一点，首先使用你的构建创建一个目录 `src/main/zip.native/` 。接下来在 `src/main/zip.native/` 中创建一个名为 `bootstrap` 的shell脚本文件，如下所示。例如，在你的构建文件夹（target或 build）中自动创建一个名为 `bootstrap-example.sh` 的文件"

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:611
#, no-wrap
msgid "#!/usr/bin/env bash\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:613
#, no-wrap
msgid "./runner -Djava.library.path=./ -Djavax.net.ssl.trustStore=./cacerts\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:616
msgid "Additional set `-Djavax.net.ssl.trustStorePassword=changeit` if your `cacerts` file is password protected."
msgstr "如果你的 `cacerts` 文件有密码保护，则额外设置 `-Djavax.net.ssl.trustStorePassword=changeit` 。"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:618
msgid "Next you must copy some files from your GraalVM distribution into `src/main/zip.native/`."
msgstr "接下来，你必须将GraalVM发行版中的一些文件复制到 `src/main/zip.native/` 。"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:620
msgid "GraalVM versions can have different paths for these files, and whether you using the Java 8 or 11 version. Adjust accordingly."
msgstr "对于这些文件，GraalVM版本可能有不同的路径，不论你使用的是Java 8还是11版本。请做相应的调整。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:625
#, no-wrap
msgid ""
"cp $GRAALVM_HOME/lib/libsunec.so $PROJECT_DIR/src/main/zip.native/\n"
"cp $GRAALVM_HOME/lib/security/cacerts $PROJECT_DIR/src/main/zip.native/\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:628
msgid "Now when you run the native build all these files will be included within `function.zip`"
msgstr "现在，当你运行原生构建时，所有这些文件都将包含在 `function.zip` 中"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:630
msgid "If you are using a Docker image to build, then you must extract these files from this image."
msgstr "如果你使用Docker镜像来进行构建，那么你必须从这个镜像中提取这些文件。"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:632
msgid "To extract the required ssl, you must start up a Docker container in the background, and attach to that container to copy the artifacts."
msgstr "要提取所需的ssl，你必须在后台启动一个Docker容器，并附加到该容器来复制工件。"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:634
msgid "First, let's start the GraalVM container, noting the container id output."
msgstr "首先，让我们启动GraalVM容器，注意容器ID的输出。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:637
#, no-wrap
msgid "docker run -it -d --entrypoint bash quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:640
#, no-wrap
msgid ""
"# This will output a container id, like 6304eea6179522aff69acb38eca90bedfd4b970a5475aa37ccda3585bc2abdde\n"
"# Note this value as we will need it for the commands below\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:643
msgid "First, libsunec.so, the C library used for the SSL implementation:"
msgstr "首先是libsunec.so，用于SSL实现的C库："

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:647
#, no-wrap
msgid "docker cp {container-id-from-above}:/opt/graalvm/lib/libsunec.so src/main/zip.native/\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:650
msgid "Second, cacerts, the certificate store.  You may need to periodically obtain an updated copy, also."
msgstr "第二是cacerts，证书库。你可能还需要定期获取更新的副本。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:653
#, no-wrap
msgid "docker cp {container-id-from-above}:/opt/graalvm/lib/security/cacerts src/main/zip.native/\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:656
msgid "Your final archive will look like this:"
msgstr "你的最终档案将看起来像这样："

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:659
#, no-wrap
msgid "jar tvf target/function.zip\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:664
#, no-wrap
msgid ""
"    bootstrap\n"
"    runner\n"
"    cacerts\n"
"    libsunec.so\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:666
#, no-wrap
msgid "Amazon Alexa Integration"
msgstr "亚马逊Alexa整合"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:669
msgid "To use Alexa with Quarkus native, please add the following extension."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:676
#, no-wrap
msgid ""
"        <dependency>\n"
"            <groupId>io.quarkus</groupId>\n"
"            <artifactId>quarkus-amazon-alexa</artifactId>\n"
"        </dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:679
msgid "Create your Alexa handler, as normal, by sub-classing the abstract `com.amazon.ask.SkillStreamHandler`, and add your request handler implementation."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-lambda.adoc:680
msgid "That's all there is to it!"
msgstr ""
