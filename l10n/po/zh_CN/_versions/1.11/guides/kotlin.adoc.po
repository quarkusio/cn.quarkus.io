# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.11/guides/kotlin.adoc:6
#, no-wrap
msgid "Quarkus - Using Kotlin"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:12
msgid "https://kotlinlang.org/[Kotlin] is a very popular programming language that targets the JVM (amongst other environments). Kotlin has experienced a surge in popularity the last few years making it the most popular JVM language, except for Java of course."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:14
msgid "Quarkus provides first class support for using Kotlin as will be explained in this guide."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/kotlin.adoc:17
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:20
msgid "To complete this guide, you need:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:22
msgid "less than 10 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:23
msgid "an IDE"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:24
msgid "JDK 1.8+ installed with `JAVA_HOME` configured appropriately"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:25
msgid "Apache Maven {maven-version}"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:27
msgid "NB: For Gradle project setup please see below, and for further reference consult the guide in the link:gradle-tooling[Gradle setup page]."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/kotlin.adoc:28
#, no-wrap
msgid "Creating the Maven project"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:31
msgid "First, we need a new Kotlin project. This can be done using the following command:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:41
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=rest-kotlin-quickstart \\\n"
"    -DclassName=\"org.acme.rest.GreetingResource\" \\\n"
"    -Dpath=\"/greeting\" \\\n"
"    -Dextensions=\"resteasy,kotlin,resteasy-jackson\"\n"
"cd rest-kotlin-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:46
msgid "When adding `kotlin` to the extensions list, the Maven plugin will generate a project that is properly configured to work with Kotlin. Furthermore the `org.acme.rest.GreetingResource` class is implemented as Kotlin source code (as is the case with the generated tests).  The addition of `resteasy-jackson` in the extension list results in importing the RESTEasy/JAX-RS and Jackson extensions."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:48
msgid "`GreetingResource.kt` looks like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:52
#: upstream/_versions/1.11/guides/kotlin.adoc:74
#, no-wrap
msgid "package org.acme.rest\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:57
#, no-wrap
msgid ""
"import javax.ws.rs.GET\n"
"import javax.ws.rs.Path\n"
"import javax.ws.rs.Produces\n"
"import javax.ws.rs.core.MediaType\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:60
#: upstream/_versions/1.11/guides/kotlin.adoc:88
#, no-wrap
msgid ""
"@Path(\"/greeting\")\n"
"class GreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:65
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    fun hello() = \"hello\"\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/kotlin.adoc:67
#, no-wrap
msgid "Update code"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:70
msgid "In order to show a more practical example of Kotlin usage we will add a simple link:https://kotlinlang.org/docs/reference/data-classes.html[data class] called `Greeting.kt` like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:76
#, no-wrap
msgid "data class Greeting(val message: String = \"\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:79
msgid "We also update the `GreetingResource.kt` like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:85
#, no-wrap
msgid ""
"import javax.ws.rs.GET\n"
"import javax.ws.rs.Path\n"
"import javax.ws.rs.core.MediaType\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:92
#, no-wrap
msgid ""
"    @GET\n"
"    fun hello() = Greeting(\"hello\")\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:95
msgid "With these changes in place the `/greeting` endpoint will reply with a JSON object instead of a simple String."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:97
msgid "To make the test pass, we also need to update `GreetingResourceTest.kt` like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:102
#, no-wrap
msgid ""
"@QuarkusTest\n"
"class GreetingResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:111
#, no-wrap
msgid ""
"    @Test\n"
"    fun testHelloEndpoint() {\n"
"        given()\n"
"          .`when`().get(\"/greeting\")\n"
"          .then()\n"
"             .statusCode(200)\n"
"             .body(\"message\", equalTo(\"hello\"))\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:113
#: upstream/_versions/1.11/guides/kotlin.adoc:343
#: upstream/_versions/1.11/guides/kotlin.adoc:359
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/kotlin.adoc:115
#, no-wrap
msgid "Important Maven configuration points"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:118
msgid "The generated `pom.xml` contains the following modifications compared to its counterpart when Kotlin is not selected:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:120
#: upstream/_versions/1.11/guides/kotlin.adoc:183
msgid "The `quarkus-kotlin` artifact is added to the dependencies. This artifact provides support for Kotlin in the live reload mode (more about this later on)"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:121
#: upstream/_versions/1.11/guides/kotlin.adoc:184
msgid "The `kotlin-stdlib-jdk8` is also added as a dependency."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:122
msgid "Maven's `sourceDirectory` and `testSourceDirectory` build properties are configured to point to Kotlin sources (`src/main/kotlin` and `src/test/kotlin` respectively)"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:123
msgid "The `kotlin-maven-plugin` is configured as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:148
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>kotlin-maven-plugin</artifactId>\n"
"    <groupId>org.jetbrains.kotlin</groupId>\n"
"    <version>${kotlin.version}</version>\n"
"    <executions>\n"
"        <execution>\n"
"            <id>compile</id>\n"
"            <goals>\n"
"                <goal>compile</goal>\n"
"            </goals>\n"
"        </execution>\n"
"        <execution>\n"
"            <id>test-compile</id>\n"
"            <goals>\n"
"                <goal>test-compile</goal>\n"
"            </goals>\n"
"        </execution>\n"
"    </executions>\n"
"    <configuration>\n"
"        <compilerPlugins>\n"
"            <plugin>all-open</plugin>\n"
"        </compilerPlugins>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:154
#, no-wrap
msgid ""
"        <pluginOptions>\n"
"            <!-- Each annotation is placed on its own line -->\n"
"            <option>all-open:annotation=javax.ws.rs.Path</option>\n"
"        </pluginOptions>\n"
"    </configuration>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:163
#, no-wrap
msgid ""
"    <dependencies>\n"
"        <dependency>\n"
"            <groupId>org.jetbrains.kotlin</groupId>\n"
"            <artifactId>kotlin-maven-allopen</artifactId>\n"
"            <version>${kotlin.version}</version>\n"
"        </dependency>\n"
"    </dependencies>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:167
msgid "The important thing to note is the use of the https://kotlinlang.org/docs/reference/compiler-plugins.html#all-open-compiler-plugin[all-open] Kotlin compiler plugin.  In order to understand why this plugin is needed, first we need to note that by default all the classes generated from the Kotlin compiler are marked as `final`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:169
msgid "Having `final` classes however does not work well with various frameworks that need to create https://docs.oracle.com/javase/8/docs/technotes/guides/reflection/proxy.html[Dynamic Proxies]."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:172
msgid "Thus, the `all-open` Kotlin compiler plugin allows us to configure the compiler to *not* mark as `final` classes that have certain annotations. In the snippet above, we have specified that classes annotated with `javax.ws.rs.Path` should not be `final`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:175
msgid "If your application contains classes annotated with `javax.enterprise.context.ApplicationScoped` for example, then `<option>all-open:annotation=javax.enterprise.context.ApplicationScoped</option>` needs to be added as well. Same goes for any class that needs to have a dynamic proxy created at runtime."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:177
msgid "Future versions of Quarkus will configure the Kotlin compiler plugin in a way that will make it unnecessary to alter this configuration."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/kotlin.adoc:178
#, no-wrap
msgid "Important Gradle configuration points"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:181
msgid "Similar to the Maven configuration, when using Gradle, the following modifications are required when Kotlin is selected:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:185
msgid "The Kotlin plugin is activated, which implicitly adds `sourceDirectory` and `testSourceDirectory` build properties to point to Kotlin sources (`src/main/kotlin` and `src/test/kotlin` respectively)"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:186
msgid "The all-open Kotlin plugin tells the compiler not to mark as final, those classes with the annotations highlighted (customize as required)"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:187
msgid "When using native-image, the use of http (or https) protocol(s) must be declared"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:188
msgid "An example configuration follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:194
#, no-wrap
msgid ""
"plugins {\n"
"    id 'java'\n"
"    id 'io.quarkus' version '{quarkus-version}' // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:198
#, no-wrap
msgid ""
"    id \"org.jetbrains.kotlin.jvm\" version \"{kotlin-version}\" // <2>\n"
"    id \"org.jetbrains.kotlin.plugin.allopen\" version \"{kotlin-version}\" // <2>\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:202
#: upstream/_versions/1.11/guides/kotlin.adoc:264
#, no-wrap
msgid ""
"repositories {\n"
"    mavenCentral()\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:205
#, no-wrap
msgid ""
"group = '...' // set your group\n"
"version = '1.0.0-SNAPSHOT'\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:208
#, no-wrap
msgid ""
"dependencies { \n"
"    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:{kotlin-version}'\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:214
#, no-wrap
msgid ""
"    // <3>\n"
"    implementation enforcedPlatform('io.quarkus:quarkus-bom:{quarkus-version}')\n"
"    implementation 'io.quarkus:quarkus-resteasy'\n"
"    implementation 'io.quarkus:quarkus-resteasy-jackson'\n"
"    implementation 'io.quarkus:quarkus-kotlin'\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:218
#, no-wrap
msgid ""
"    testImplementation 'io.quarkus:quarkus-junit5'\n"
"    testImplementation 'io.rest-assured:rest-assured'\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:221
#, no-wrap
msgid ""
"sourceCompatibility = '1.8'\n"
"targetCompatibility = '1.8'\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:226
#, no-wrap
msgid ""
"test {\n"
"    useJUnitPlatform()\n"
"    exclude '**/Native*'\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:230
#, no-wrap
msgid ""
"buildNative {\n"
"    enableHttpUrlHandler = true\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:236
#: upstream/_versions/1.11/guides/kotlin.adoc:289
#, no-wrap
msgid ""
"allOpen { // <4>\n"
"    annotation(\"javax.ws.rs.Path\")\n"
"    annotation(\"javax.enterprise.context.ApplicationScoped\")\n"
"    annotation(\"io.quarkus.test.junit.QuarkusTest\")\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:239
#: upstream/_versions/1.11/guides/kotlin.adoc:307
msgid "The Quarkus plugin needs to be applied."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:240
#: upstream/_versions/1.11/guides/kotlin.adoc:308
msgid "The Kotlin plugin version needs to be specified."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:241
#: upstream/_versions/1.11/guides/kotlin.adoc:309
msgid "We include the Quarkus BOM using Gradle's link:https://docs.gradle.org/5.4.1/userguide/managing_transitive_dependencies.html#sec:bom_import[relevant syntax]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:242
#: upstream/_versions/1.11/guides/kotlin.adoc:310
msgid "The all-open configuration required, as per Maven guide above"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:244
msgid "or, if you use the Gradle Kotlin DSL:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:249
#, no-wrap
msgid ""
"import io.quarkus.gradle.tasks.QuarkusNative\n"
"import org.jetbrains.kotlin.gradle.tasks.KotlinCompile\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:252
#, no-wrap
msgid ""
"group = \"...\"\n"
"version = \"1.0.0-SNAPSHOT\"\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:256
#, no-wrap
msgid ""
"plugins {\n"
"    java\n"
"    id(\"io.quarkus\") version \"{quarkus-version}\" // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:260
#, no-wrap
msgid ""
"    kotlin(\"jvm\") version \"{kotlin-version}\" // <2>\n"
"    id(\"org.jetbrains.kotlin.plugin.allopen\") version \"{kotlin-version}\" // <2>\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:267
#, no-wrap
msgid ""
"dependencies {\n"
"    implementation(kotlin(\"stdlib-jdk8\"))\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:273
#, no-wrap
msgid ""
"    // <3>\n"
"    implementation(enforcedPlatform(\"io.quarkus:quarkus-bom:${quarkusVersion}\"))\n"
"    implementation(\"io.quarkus:quarkus-kotlin\")\n"
"    implementation(\"io.quarkus:quarkus-resteasy\")\n"
"    implementation(\"io.quarkus:quarkus-resteasy-jackson\")\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:277
#, no-wrap
msgid ""
"    testImplementation(\"io.quarkus:quarkus-junit5\")\n"
"    testImplementation(\"io.rest-assured:rest-assured\")\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:283
#, no-wrap
msgid ""
"tasks {\n"
"    named<QuarkusNative>(\"buildNative\") {\n"
"        setEnableHttpUrlHandler(true)\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:294
#, no-wrap
msgid ""
"java {\n"
"    sourceCompatibility = JavaVersion.VERSION_1_8\n"
"    targetCompatibility = JavaVersion.VERSION_1_8\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:299
#, no-wrap
msgid ""
"val compileKotlin: KotlinCompile by tasks\n"
"compileKotlin.kotlinOptions {\n"
"    jvmTarget = \"1.8\"\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:304
#, no-wrap
msgid ""
"val compileTestKotlin: KotlinCompile by tasks\n"
"compileTestKotlin.kotlinOptions {\n"
"    jvmTarget = \"1.8\"\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/kotlin.adoc:311
#, no-wrap
msgid "CDI @Inject with Kotlin"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:315
msgid "Kotlin reflection annotation processing differs from Java.  You may experience an error when using CDI @Inject such as: \"kotlin.UninitializedPropertyAccessException: lateinit property xxx has not been initialized\""
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:317
msgid "In the example below, this can be easily solved by adapting the annotation, adding @field: Default, to handle the lack of a @Target on the Kotlin reflection annotation definition."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:319
msgid "Alternatively, prefer the use of constructor injection which works without modification of the Java examples."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:326
#, no-wrap
msgid ""
"import javax.inject.Inject\n"
"import javax.enterprise.inject.Default\n"
"import javax.enterprise.context.ApplicationScoped\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:332
#, no-wrap
msgid ""
"import javax.ws.rs.GET\n"
"import javax.ws.rs.Path\n"
"import javax.ws.rs.PathParam\n"
"import javax.ws.rs.Produces\n"
"import javax.ws.rs.core.MediaType\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:337
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class GreetingService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:341
#, no-wrap
msgid ""
"    fun greeting(name: String): String {\n"
"        return \"hello $name\"\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:346
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"class GreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:350
#, no-wrap
msgid ""
"    @Inject\n"
"    @field: Default // <1> \n"
"    lateinit var service: GreetingService\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:357
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"/greeting/{name}\")\n"
"    fun greeting(@PathParam(\"name\") name: String): String {\n"
"        return service.greeting(name)\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:361
msgid "Kotlin requires a @field: xxx qualifier as it has no @Target on the annotation definition. Add @field: xxx in this example. @Default is used as the qualifier, explicitly specifying the use of the default bean."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/kotlin.adoc:364
#, no-wrap
msgid "Live reload"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:368
msgid "Quarkus provides support for live reloading changes made to source code. This support is also available to Kotlin, meaning that developers can update their Kotlin source code and immediately see their changes reflected."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:370
msgid "To see this feature in action, first execute: `./mvnw compile quarkus:dev`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:372
msgid "When executing an HTTP GET request against `http://localhost:8080/greeting`, you see a JSON message with the value `hello` as its `message` field."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:374
msgid "Now using your favorite editor or IDE, update `GreetingResource.kt` and change the `hello` method to the following:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/kotlin.adoc:378
#, no-wrap
msgid "fun hello() = Greeting(\"hi\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:381
msgid "When you now execute an HTTP GET request against `http://localhost:8080/greeting`, you should see a JSON message with the value `hi` as its `message` field."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:383
msgid "One thing to note is that the live reload feature is not available when making changes to both Java and Kotlin source that have dependencies on each other. We hope to alleviate this limitation in the future."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/kotlin.adoc:384
#, no-wrap
msgid "Packaging the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:387
msgid "As usual, the application can be packaged using `./mvnw clean package` and executed using the `-runner.jar` file. You can also build the native executable using `./mvnw package -Pnative`, or `./gradlew buildNative`."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/kotlin.adoc:388
#, no-wrap
msgid "Kotlin and Jackson"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/kotlin.adoc:391
msgid "If the `com.fasterxml.jackson.module:jackson-module-kotlin` dependency and the `quarkus-jackson` extension (or the `quarkus-resteasy-extension`) have been added to project, then Quarkus automatically registers the `KotlinModule` to the `ObjectMapper` bean (see link:rest-json#jackson[this] guide for more details)."
msgstr ""
