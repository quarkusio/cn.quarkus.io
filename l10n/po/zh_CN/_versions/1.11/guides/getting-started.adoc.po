# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.11/guides/getting-started.adoc:6
#, no-wrap
msgid "Quarkus - Creating Your First Application"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:23
msgid "Learn how to create a Hello World Quarkus app.  This guide covers:"
msgstr "学习如何创建一个Hello World Quarkus应用程序。本指南包括："

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:25
msgid "Bootstrapping an application"
msgstr "创建一个应用程序"

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:26
msgid "Creating a JAX-RS endpoint"
msgstr "创建一个JAX-RS端点"

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:27
msgid "Injecting beans"
msgstr "注入beans"

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:28
msgid "Functional tests"
msgstr "功能测试"

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:29
msgid "Packaging of the application"
msgstr "应用程序打包"

#. type: Title ==
#: upstream/_versions/1.11/guides/getting-started.adoc:30
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:33
msgid "To complete this guide, you need:"
msgstr "要完成这个指南，你需要："

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:35
msgid "less than 15 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:36
msgid "an IDE"
msgstr "一个编辑器"

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:37
msgid "JDK 8 or 11+ installed with `JAVA_HOME` configured appropriately"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:38
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Block title
#: upstream/_versions/1.11/guides/getting-started.adoc:40
#, no-wrap
msgid "Verify Maven is using the Java you expect"
msgstr "验证Maven是否使用了你期望的Java版本"

#. type: delimited block =
#: upstream/_versions/1.11/guides/getting-started.adoc:45
msgid "If you have multiple JDK's installed it is not certain Maven will pick up the expected java and you could end up with unexpected results.  You can verify which JDK Maven uses by running `mvn --version`."
msgstr "如果你安装了多个JDK，那么Maven不一定能找到预期的java，你可能会得到意想不到的结果。你可以通过运行 `mvn --version` ，验证Maven使用哪个JDK。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_versions/1.11/guides/getting-started.adoc:48
#: upstream/_versions/1.11/guides/getting-started.adoc:53
#, no-wrap
msgid "Architecture"
msgstr "应用结构"

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:52
msgid "In this guide, we create a straightforward application serving a `hello` endpoint. To demonstrate dependency injection, this endpoint uses a `greeting` bean."
msgstr "在本指南中，我们创建了一个简单的应用程序，为 `hello` 端点提供服务。为了演示依赖性注入，这个端点使用了一个 `greeting` bean。"

#. type: Target for macro image
#: upstream/_versions/1.11/guides/getting-started.adoc:53
#, no-wrap
msgid "getting-started-architecture.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:56
msgid "This guide also covers the testing of the endpoint."
msgstr "本指南还包括对终端的测试。"

#. type: Title ==
#: upstream/_versions/1.11/guides/getting-started.adoc:57
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:60
msgid "We recommend that you follow the instructions from <<bootstrapping-the-project,Bootstrapping project>> and onwards to create the application step by step."
msgstr "我们建议你按照从 link:#bootstrapping-the-project[构建项目] 开始的指示，一步一步地创建应用程序。"

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:62
msgid "However, you can go right to the completed example."
msgstr "然而，你可以直接进入完成的例子。"

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:64
msgid "Download an {quickstarts-archive-url}[archive] or clone the git repository:"
msgstr "下载一个 {quickstarts-archive-url}[存档] 或克隆git仓库："

#. type: delimited block -
#: upstream/_versions/1.11/guides/getting-started.adoc:68
#, no-wrap
msgid "git clone {quickstarts-clone-url}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:71
msgid "The solution is located in the `getting-started` {quickstarts-tree-url}/getting-started[directory]."
msgstr "该解决方案位于 `getting-started` {quickstarts-tree-url}/getting-started[目录] 中。"

#. type: Title ==
#: upstream/_versions/1.11/guides/getting-started.adoc:72
#, no-wrap
msgid "Bootstrapping the project"
msgstr "创建项目"

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:75
msgid "The easiest way to create a new Quarkus project is to open a terminal and run the following command:"
msgstr "创建一个新的Quarkus项目最简单的方法是打开终端并运行以下命令："

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:77
msgid "For Linux & MacOS users"
msgstr "针对Linux和MacOS用户"

#. type: delimited block -
#: upstream/_versions/1.11/guides/getting-started.adoc:86
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=getting-started \\\n"
"    -DclassName=\"org.acme.getting.started.GreetingResource\" \\\n"
"    -Dpath=\"/hello\"\n"
"cd getting-started\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:89
msgid "For Windows users"
msgstr "对于Windows用户"

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:91
msgid "If using cmd , (don't use backward slash `\\`)"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/getting-started.adoc:95
#, no-wrap
msgid "mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create -DprojectGroupId=org.acme -DprojectArtifactId=getting-started -DclassName=\"org.acme.getting.started.GreetingResource\" -Dpath=\"/hello\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:98
msgid "If using Powershell , wrap `-D` parameters in double quotes"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/getting-started.adoc:102
#, no-wrap
msgid "mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \"-DprojectGroupId=org.acme\" \"-DprojectArtifactId=getting-started\" \"-DclassName=org.acme.getting.started.GreetingResource\" \"-Dpath=/hello\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:105
msgid "It generates the following in `./getting-started`:"
msgstr "它在 `./getting-started` 中产生了以下内容："

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:107
msgid "the Maven structure"
msgstr "Maven的结构"

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:108
msgid "an `org.acme.getting.started.GreetingResource` resource exposed on `/hello`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:109
msgid "an associated unit test"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:110
msgid "a landing page that is accessible on `http://localhost:8080` after starting the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:111
msgid "example `Dockerfile` files for both `native` and `jvm` modes in `src/main/docker`"
msgstr "示例 `Dockerfile` 文件，用于 `native` 和 `jvm` 两种模式，在 `src/main/docker` "

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:112
msgid "the application configuration file"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:116
msgid "Once generated, look at the `pom.xml`.  You will find the import of the Quarkus BOM, allowing you to omit the version on the different Quarkus dependencies.  In addition, you can see the `quarkus-maven-plugin` responsible of the packaging of the application and also providing the development mode."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/getting-started.adoc:130
#, no-wrap
msgid ""
"<dependencyManagement>\n"
"    <dependencies>\n"
"        <dependency>\n"
"            <groupId>io.quarkus</groupId>\n"
"            <artifactId>quarkus-universe-bom</artifactId>\n"
"            <version>${quarkus.platform.version}</version>\n"
"            <type>pom</type>\n"
"            <scope>import</scope>\n"
"        </dependency>\n"
"    </dependencies>\n"
"</dependencyManagement>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/getting-started.adoc:150
#, no-wrap
msgid ""
"<build>\n"
"    <plugins>\n"
"        <plugin>\n"
"            <groupId>io.quarkus</groupId>\n"
"            <artifactId>quarkus-maven-plugin</artifactId>\n"
"            <version>${quarkus-plugin.version}</version>\n"
"            <extensions>true</extensions>\n"
"            <executions>\n"
"                <execution>\n"
"                    <goals>\n"
"                        <goal>build</goal>\n"
"                        <goal>generate-code</goal>\n"
"                        <goal>generate-code-tests</goal>\n"
"                    </goals>\n"
"                </execution>\n"
"            </executions>\n"
"        </plugin>\n"
"    </plugins>\n"
"</build>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:153
msgid "If we focus on the dependencies section, you can see the extension allowing the development of REST applications:"
msgstr "如果我们把重点放在依赖关系部分，你可以看到允许开发REST应用程序的扩展："

#. type: delimited block -
#: upstream/_versions/1.11/guides/getting-started.adoc:160
#, no-wrap
msgid ""
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-resteasy</artifactId>\n"
"    </dependency>\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/getting-started.adoc:162
#, no-wrap
msgid "The JAX-RS resources"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:165
msgid "During the project creation, the `src/main/java/org/acme/getting/started/GreetingResource.java` file has been created with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/getting-started.adoc:169
#: upstream/_versions/1.11/guides/getting-started.adoc:254
#: upstream/_versions/1.11/guides/getting-started.adoc:272
#: upstream/_versions/1.11/guides/getting-started.adoc:372
#, no-wrap
msgid "package org.acme.getting.started;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/getting-started.adoc:174
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/getting-started.adoc:177
#: upstream/_versions/1.11/guides/getting-started.adoc:283
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class GreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/getting-started.adoc:184
#: upstream/_versions/1.11/guides/getting-started.adoc:300
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"hello\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:187
msgid "It's a very simple REST endpoint, returning \"hello\" to requests on \"/hello\"."
msgstr ""

#. type: Block title
#: upstream/_versions/1.11/guides/getting-started.adoc:189
#, no-wrap
msgid "Differences with vanilla JAX-RS"
msgstr "与vanilla JAX-RS的区别"

#. type: delimited block =
#: upstream/_versions/1.11/guides/getting-started.adoc:193
msgid "With Quarkus, there is no need to create an `Application` class. It's supported, but not required. In addition, only one instance of the resource is created and not one per request. You can configure this using the different `*Scoped` annotations (`ApplicationScoped`, `RequestScoped`, etc)."
msgstr "使用Quarkus，不需要创建一个 `Application` 类。它支持这么做，但不是必须的。此外，只有一个资源的实例被创建，而不是每个请求一个。你可以使用不同的 `*Scoped` 注解（ `ApplicationScoped` , `RequestScoped` , 等等）来配置。"

#. type: Title ==
#: upstream/_versions/1.11/guides/getting-started.adoc:195
#, no-wrap
msgid "Running the application"
msgstr "运行应用程序"

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:199
msgid "Now we are ready to run our application.  Use: `./mvnw compile quarkus:dev`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/getting-started.adoc:221
#, no-wrap
msgid ""
"$ ./mvnw compile quarkus:dev\n"
"[INFO] --------------------< org.acme:getting-started >---------------------\n"
"[INFO] Building getting-started 1.0.0-SNAPSHOT\n"
"[INFO] --------------------------------[ jar ]---------------------------------\n"
"[INFO]\n"
"[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ getting-started ---\n"
"[INFO] Using 'UTF-8' encoding to copy filtered resources.\n"
"[INFO] skip non existing resourceDirectory /Users/starksm/Dev/JBoss/Quarkus/starksm64-quarkus-quickstarts/getting-started/src/main/resources\n"
"[INFO]\n"
"[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ getting-started ---\n"
"[INFO] Changes detected - recompiling the module!\n"
"[INFO] Compiling 2 source files to /Users/starksm/Dev/JBoss/Quarkus/starksm64-quarkus-quickstarts/getting-started/target/classes\n"
"[INFO]\n"
"[INFO] --- quarkus-maven-plugin:<version>:dev (default-cli) @ getting-started ---\n"
"Listening for transport dt_socket at address: 5005\n"
"2019-02-28 17:05:22,347 INFO  [io.qua.dep.QuarkusAugmentor] (main) Beginning quarkus augmentation\n"
"2019-02-28 17:05:22,635 INFO  [io.qua.dep.QuarkusAugmentor] (main) Quarkus augmentation completed in 288ms\n"
"2019-02-28 17:05:22,770 INFO  [io.quarkus] (main) Quarkus started in 0.668s. Listening on: http://localhost:8080\n"
"2019-02-28 17:05:22,771 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:224
msgid "Once started, you can request the provided endpoint:"
msgstr "一旦启动，你可以发送请求到提供服务的端点。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/getting-started.adoc:229
#, no-wrap
msgid ""
"$ curl -w \"\\n\" http://localhost:8080/hello\n"
"hello\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:232
msgid "Hit `CTRL+C` to stop the application, or keep it running and enjoy the blazing fast hot-reload."
msgstr "点击 `CTRL+C` ，停止应用程序，或保持运行，享受极快的热重载。"

#. type: Block title
#: upstream/_versions/1.11/guides/getting-started.adoc:234
#, no-wrap
msgid "Automatically add newline with `curl -w \"\\n\"`"
msgstr "自动添加换行符 `curl -w \"\\n\"` "

#. type: delimited block =
#: upstream/_versions/1.11/guides/getting-started.adoc:237
msgid "We are using `curl -w \"\\n\"` in this example to avoid your terminal printing a '%' or put both result and next command prompt on the same line."
msgstr "我们在这个例子中使用 `curl -w \"\\n\"` ，以避免你的终端打印出'%'或把结果和下一个命令提示符放在同一行。"

#. type: Title ==
#: upstream/_versions/1.11/guides/getting-started.adoc:239
#, no-wrap
msgid "Using injection"
msgstr "使用注入法"

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:243
msgid "Dependency injection in Quarkus is based on ArC which is a CDI-based dependency injection solution tailored for Quarkus' architecture.  If you're new to CDI then we recommend you to read the link:cdi[Introduction to CDI] guide."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:245
msgid "Quarkus only implements a subset of the CDI features and comes with non-standard features and specific APIS, you can learn more about it in the link:cdi-reference[Contexts and Dependency Injection guide]."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:247
msgid "ArC comes as a dependency of `quarkus-resteasy` so you already have it handy."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:250
msgid "Let's modify the application and add a companion bean.  Create the `src/main/java/org/acme/getting/started/GreetingService.java` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/getting-started.adoc:256
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/getting-started.adoc:259
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class GreetingService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/getting-started.adoc:263
#, no-wrap
msgid ""
"    public String greeting(String name) {\n"
"        return \"hello \" + name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/getting-started.adoc:265
#: upstream/_versions/1.11/guides/getting-started.adoc:405
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:268
msgid "Edit the `GreetingResource` class to inject the `GreetingService` and create a new endpoint using it:"
msgstr "编辑 `GreetingResource` 类，注入 `GreetingService` ，并使用它创建一个新的端点:"

#. type: delimited block -
#: upstream/_versions/1.11/guides/getting-started.adoc:278
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/getting-started.adoc:280
#, no-wrap
msgid "import org.jboss.resteasy.annotations.jaxrs.PathParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/getting-started.adoc:286
#, no-wrap
msgid ""
"    @Inject\n"
"    GreetingService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/getting-started.adoc:293
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"/greeting/{name}\")\n"
"    public String greeting(@PathParam String name) {\n"
"        return service.greeting(name);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:304
msgid "If you stopped the application, restart the application with `./mvnw compile quarkus:dev`.  Then check that the endpoint returns `hello quarkus` as expected:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/getting-started.adoc:309
#, no-wrap
msgid ""
"$ curl -w \"\\n\" http://localhost:8080/hello/greeting/quarkus\n"
"hello quarkus\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/getting-started.adoc:313
#, no-wrap
msgid "Development Mode"
msgstr "开发模式"

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:321
msgid "`quarkus:dev` runs Quarkus in development mode. This enables hot deployment with background compilation, which means that when you modify your Java files and/or your resource files and refresh your browser, these changes will automatically take effect.  This works too for resource files like the configuration property file.  Refreshing the browser triggers a scan of the workspace, and if any changes are detected, the Java files are recompiled and the application is redeployed; your request is then serviced by the redeployed application. If there are any issues with compilation or deployment an error page will let you know."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:324
msgid "This will also listen for a debugger on port `5005`. If you want to wait for the debugger to attach before running you can pass `-Dsuspend` on the command line. If you don't want the debugger at all you can use `-Ddebug=false`."
msgstr "这也将在端口 `5005` 上监听调试器。如果你想在运行前等待调试器的连接，你可以在命令行中传递 `-Dsuspend` 。如果你根本不想要调试器，你可以使用 `-Ddebug=false` 。"

#. type: Title ==
#: upstream/_versions/1.11/guides/getting-started.adoc:325
#, no-wrap
msgid "Testing"
msgstr "测试"

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:328
msgid "All right, so far so good, but wouldn't it be better with a few tests, just in case."
msgstr "好吧，到目前为止还不错。为了以防万一， 我们需要再做一些测试。"

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:330
msgid "In the generated `pom.xml` file, you can see 2 test dependencies:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/getting-started.adoc:343
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.rest-assured</groupId>\n"
"    <artifactId>rest-assured</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:348
msgid "Quarkus supports https://junit.org/junit5/[Junit 5] tests.  Because of this, the version of the https://maven.apache.org/surefire/maven-surefire-plugin/[Surefire Maven Plugin] must be set, as the default version does not support Junit 5:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/getting-started.adoc:361
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-surefire-plugin</artifactId>\n"
"    <version>${surefire-plugin.version}</version>\n"
"    <configuration>\n"
"       <systemPropertyVariables>\n"
"          <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"          <maven.home>${maven.home}</maven.home>\n"
"       </systemPropertyVariables>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:365
msgid "We also set the `java.util.logging` system property to make sure tests will use the correct logmanager and `maven.home` to ensure that custom configuration from `${maven.home}/conf/settings.xml` is applied (if any)."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:368
msgid "The generated project contains a simple test.  Edit the `src/test/java/org/acme/getting/started/GreetingResourceTest.java` to match the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/getting-started.adoc:375
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/getting-started.adoc:377
#, no-wrap
msgid "import java.util.UUID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/getting-started.adoc:380
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/getting-started.adoc:383
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class GreetingResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/getting-started.adoc:392
#, no-wrap
msgid ""
"    @Test    // <1>\n"
"    public void testHelloEndpoint() {\n"
"        given()\n"
"          .when().get(\"/hello\")\n"
"          .then()\n"
"             .statusCode(200)    // <2>\n"
"             .body(is(\"hello\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/getting-started.adoc:403
#, no-wrap
msgid ""
"    @Test\n"
"    public void testGreetingEndpoint() {\n"
"        String uuid = UUID.randomUUID().toString();\n"
"        given()\n"
"          .pathParam(\"name\", uuid)\n"
"          .when().get(\"/hello/greeting/{name}\")\n"
"          .then()\n"
"            .statusCode(200)\n"
"            .body(is(\"hello \" + uuid));\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:407
msgid "By using the `QuarkusTest` runner, you instruct JUnit to start the application before the tests."
msgstr "通过使用 `QuarkusTest` runner，你指示JUnit在测试前启动应用程序。"

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:408
msgid "Check the HTTP response status code and content"
msgstr "检查HTTP回应状态代码和内容"

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:410
msgid "These tests use http://rest-assured.io/[RestAssured], but feel free to use your favorite library."
msgstr "这些测试使用 link:http://rest-assured.io/[RestAssured] ，但也可以随意使用你最喜欢的库。"

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:412
msgid "You can run these using Maven:"
msgstr "你可以用Maven来运行这些："

#. type: delimited block -
#: upstream/_versions/1.11/guides/getting-started.adoc:416
#, no-wrap
msgid "./mvnw test\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:419
msgid "You can also run the test from your IDE directly (be sure you stopped the application first)."
msgstr "你也可以直接从你的IDE中运行测试（要确保你先停止了应用程序）。"

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:425
msgid "By default, tests will run on port `8081` so as not to conflict with the running application. We automatically configure RestAssured to use this port. If you want to use a different client you should use the `@TestHTTPResource` annotation to directly inject the URL of the tested application into a field on the test class. This field can be of the type `String`, `URL` or `URI`. This annotation can also be given a value for the test path. For example, if I want to test a Servlet mapped to `/myservlet` I would just add the following to my test:"
msgstr "默认情况下，测试将在端口 `8081` 上运行，以便不与正在运行的应用程序冲突。我们自动将RestAssured配置为使用该端口。如果你想使用不同的客户端，你应该使用 `@TestHTTPResource` 注释，直接将测试应用程序的URL注入到测试类的一个字段中。这个字段的类型可以是 `String` , `URL` 或 `URI` 。这个注解也可以给测试路径一个值。例如，如果我想测试一个映射到 `/myservlet` 的Servlet，只需在测试中添加以下内容："

#. type: delimited block -
#: upstream/_versions/1.11/guides/getting-started.adoc:431
#, no-wrap
msgid ""
"@TestHTTPResource(\"/myservlet\")\n"
"URL testUrl;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:435
msgid "The test port can be controlled via the `quarkus.http.test-port` config property. Quarkus also creates a system property called `test.url` that is set to the base test URL for situations where you cannot use injection."
msgstr "测试端口可以通过 `quarkus.http.test-port` 配置属性来控制。Quarkus还创建了一个名为 `test.url` 的系统属性，在不能使用注入的情况下被设置为基本测试URL。"

#. type: Title ==
#: upstream/_versions/1.11/guides/getting-started.adoc:436
#, no-wrap
msgid "Working with multi-module project or external modules"
msgstr "与多模块项目或外部模块一起工作"

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:440
msgid "Quarkus heavily utilizes https://github.com/wildfly/jandex[Jandex] at build time, to discover various classes or annotations. One immediately recognizable application of this, is CDI bean discovery.  As a result, most of the Quarkus extensions will not work properly if this build time discovery isn't properly setup."
msgstr "Quarkus在构建时大量使用 link:https://github.com/wildfly/jandex[Jandex] ，以发现各种类或注解。其中一个应用就是可以发现并识别CDI Bean。因此，如果没有在构建时正确设置，大多数Quarkus扩展将无法正常工作。"

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:442
msgid "This index is created by default on the project on which Quarkus is configured for, thanks to our Maven and Gradle plugins."
msgstr "通过使用Maven和Gradle插件，这个索引在Quarkus的项目上的默认配置是自动创建。"

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:445
msgid "However, when working with a multi-module project, be sure to read the `Working with multi-module projects` section of the link:maven-tooling#multi-module-maven[Maven] or link:gradle-tooling#multi-module-maven[Gradle] guides."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:449
msgid "If you plan to use external modules (for example, an external library for all your domain objects), you will need to make these modules known to the indexing process either by adding the Jandex plugin (if you can modify them)  or via the `quarkus.index-dependency` property inside your `application.properties` (useful in cases where you can't modify the module)."
msgstr "如果你计划使用外部模块（例如，一个用于你所有领域对象的外部库），你将需要通过添加Jandex插件（如果你能修改它们）或通过 `application.properties` 里的属性`quarkus.index-dependency` （在你不能修改模块的情况下很有用）使这些模块为索引过程所知。"

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:451
msgid "Be sure to read the link:cdi-reference#bean_discovery[Bean Discovery] section of the CDI guide for more information."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/getting-started.adoc:452
#, no-wrap
msgid "Packaging and run the application"
msgstr "应用程序打包和运行"

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:456
msgid "The application is packaged using `./mvnw package`.  It produces 2 jar files in `/target`:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:459
msgid "`getting-started-1.0.0-SNAPSHOT.jar` - containing just the classes and resources of the projects, it's the regular artifact produced by the Maven build;"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:461
msgid "`getting-started-1.0.0-SNAPSHOT-runner.jar` - being an executable _jar_. Be aware that it's not an _über-jar_ as the dependencies are copied into the `target/lib` directory."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:463
msgid "You can run the application using: `java -jar target/getting-started-1.0.0-SNAPSHOT-runner.jar`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:466
msgid "The `Class-Path` entry of the `MANIFEST.MF` from the _runner jar_ explicitly lists the jars from the `lib` directory.  So if you want to deploy your application somewhere, you need to copy the _runner_ jar as well as the _lib_ directory."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:468
msgid "Before running the application, don't forget to stop the hot reload mode (hit `CTRL+C`), or you will have a port conflict."
msgstr "在运行应用程序之前，不要忘记停止热重载模式（使用 `CTRL+C` ），否则你会有一个端口冲突。"

#. type: Title ==
#: upstream/_versions/1.11/guides/getting-started.adoc:470
#, no-wrap
msgid "Configuring the banner"
msgstr "配置banner"

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:475
msgid "By default when a Quarkus application starts (in regular or dev mode), it will display an ASCII art banner. The banner can be disabled by setting `quarkus.banner.enabled=false` in `application.properties`, by setting the `-Dquarkus.banner.enabled=false` Java System Property, or by setting the `QUARKUS_BANNER_ENABLED` environment variable to `false`.  Furthermore, users can supply a custom banner by placing the banner file in `src/main/resources` and configuring `quarkus.banner.path=name-of-file` in `application.properties`."
msgstr "默认情况下，当Quarkus应用程序启动时（在常规或开发模式下），它将显示一个ASCII。通过在 `application.properties` 中设置 `quarkus.banner.enabled=false` ，通过设置 `-Dquarkus.banner.enabled=false` Java系统属性，或者通过将 `QUARKUS_BANNER_ENABLED` 环境变量设置为 `false` ，可以禁用该横幅。此外，用户可以通过将横幅文件放在 `src/main/resources` ，并在 `application.properties` 中配置 `quarkus.banner.path=name-of-file` ，从而提供一个自定义的横幅。"

#. type: Title ==
#: upstream/_versions/1.11/guides/getting-started.adoc:476
#, no-wrap
msgid "What's next?"
msgstr "下一步做什么？"

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:482
msgid "This guide covered the creation of an application using Quarkus.  However, there is much more.  We recommend continuing the journey with the link:building-native-image[building a native executable guide], where you learn about creating a native executable and packaging it in a container.  If you are interested in reactive, we recommend the link:getting-started-reactive[Getting started with reactive guide], where you can see how to implement reactive applications with Quarkus."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:484
msgid "In addition, the link:tooling[tooling guide] document explains how to:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:486
msgid "scaffold a project in a single command line"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:487
msgid "enable the _development mode_ (hot reload)"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:488
msgid "import the project in your favorite IDE"
msgstr "在你喜欢的编辑器里面导入项目"

#. type: Plain text
#: upstream/_versions/1.11/guides/getting-started.adoc:488
msgid "and more"
msgstr ""
