# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:6
#, no-wrap
msgid "Quarkus - Amazon SQS Client"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:16
msgid "Amazon Simple Queue Service (SQS) is a fully managed message queuing service.  Using SQS, you can send, store, and receive messages between software components at any volume, without losing messages or requiring other services to be available.  SQS offers two types of message queues. Standard queues offer maximum throughput, best-effort ordering and at-least-once delivery.  SQS FIFO queues are designed to guarantee that messages are processes exactly once, on the exact order that they were sent."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:18
msgid "You can find more information about SQS at https://aws.amazon.com/sqs/[the Amazon SQS website]."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:21
msgid "The SQS extension is based on https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/welcome.html[AWS Java SDK 2.x].  It's a major rewrite of the 1.x code base that offers two programming models (Blocking & Async)."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:25
msgid "The Quarkus extension supports two programming models:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:27
msgid "Blocking access using URL Connection HTTP client (by default) or the Apache HTTP Client"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:28
msgid "https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/basics-async.html[Asynchronous programming] based on JDK's `CompletableFuture` objects and the Netty HTTP client."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:30
msgid "In this guide, we see how you can get your REST services to use SQS locally and on AWS."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:31
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:34
msgid "To complete this guide, you need:"
msgstr "要完成这个指南，你需要："

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:36
msgid "JDK 1.8+ installed with `JAVA_HOME` configured appropriately"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:37
msgid "an IDE"
msgstr "一个编辑器"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:38
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:39
msgid "An AWS Account to access the SQS service"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:40
msgid "Docker for your system to run SQS locally for testing purposes"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:41
#, no-wrap
msgid "Set up SQS locally"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:44
msgid "The easiest way to start working with SQS is to run a local instance as a container."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:48
#, no-wrap
msgid "docker run --rm --name local-sqs -p 8010:4576 -e SERVICES=sqs -e START_WEB=0 -d localstack/localstack:0.11.1\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:50
msgid "This starts a SQS instance that is accessible on port `8010`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:52
msgid "Create an AWS profile for your local instance using AWS CLI:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:59
#, no-wrap
msgid ""
"$ aws configure --profile localstack\n"
"AWS Access Key ID [None]: test-key\n"
"AWS Secret Access Key [None]: test-secret\n"
"Default region name [None]: us-east-1\n"
"Default output format [None]:\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:61
#, no-wrap
msgid "Create a SQS queue"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:64
msgid "Create a SQS queue using AWS CLI and store in `QUEUE_URL` environment variable."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:68
#, no-wrap
msgid "QUEUE_URL=`aws sqs create-queue --queue-name=ColliderQueue --profile localstack --endpoint-url=http://localhost:8010`\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:71
msgid "Or, if you want to use your SQS queue on your AWS account create a queue using your default profile"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:74
#, no-wrap
msgid "QUEUE_URL=`aws sqs create-queue --queue-name=ColliderQueue`\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:76
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:79
msgid "The application built here allows shooting an elementary particles (quarks) into a `ColliderQueue` queue of the AWS SQS.  Additionally, we create a resource that allows receiving those quarks from the `ColliderQueue` queue in the order they were sent."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:82
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:84
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:86
msgid "The solution is located in the `amazon-sqs-quickstart` {quickstarts-tree-url}/amazon-sqs-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:87
#, no-wrap
msgid "Creating the Maven project"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:90
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:100
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=amazon-sqs-quickstart \\\n"
"    -DclassName=\"org.acme.sqs.QuarksCannonSyncResource\" \\\n"
"    -Dpath=\"/sync-cannon\" \\\n"
"    -Dextensions=\"resteasy,resteasy-jackson,amazon-sqs,resteasy-mutiny\"\n"
"cd amazon-sqs-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:104
msgid "This command generates a Maven structure importing the RESTEasy/JAX-RS, Mutiny and Amazon SQS Client extensions.  After this, the `amazon-sqs` extension has been added to your `pom.xml` as well as the Mutiny support for RESTEasy."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:105
#, no-wrap
msgid "Creating JSON REST service"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:108
msgid "In this example, we will create an application that sends quarks via the queue. The example application will demonstrate the two programming models supported by the extension."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:110
msgid "First, let's create the `Quark` bean as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:114
#, no-wrap
msgid "package org.acme.sqs.model;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:117
#, no-wrap
msgid ""
"import io.quarkus.runtime.annotations.RegisterForReflection;\n"
"import java.util.Objects;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:120
#, no-wrap
msgid ""
"@RegisterForReflection\n"
"public class Quark {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:123
#, no-wrap
msgid ""
"    private String flavor;\n"
"    private String spin;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:126
#, no-wrap
msgid ""
"    public Quark() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:130
#, no-wrap
msgid ""
"    public String getFlavor() {\n"
"        return flavor;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:134
#, no-wrap
msgid ""
"    public void setFlavor(String flavor) {\n"
"        this.flavor = flavor;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:138
#, no-wrap
msgid ""
"    public String getSpin() {\n"
"        return spin;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:142
#, no-wrap
msgid ""
"    public void setSpin(String spin) {\n"
"        this.spin = spin;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:148
#, no-wrap
msgid ""
"    @Override\n"
"    public boolean equals(Object obj) {\n"
"        if (!(obj instanceof Quark)) {\n"
"            return false;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:150
#, no-wrap
msgid "        Quark other = (Quark) obj;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:153
#, no-wrap
msgid ""
"        return Objects.equals(other.flavor, this.flavor);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:159
#, no-wrap
msgid ""
"    @Override\n"
"    public int hashCode() {\n"
"        return Objects.hash(this.flavor);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:161
msgid "Then, create a `org.acme.sqs.QuarksCannonSyncResource` that will provide an API to shoot quarks into the SQS queue using the synchronous client."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:165
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:214
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:340
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:391
#, no-wrap
msgid "package org.acme.sqs;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:180
#, no-wrap
msgid ""
"import com.fasterxml.jackson.databind.ObjectMapper;\n"
"import com.fasterxml.jackson.databind.ObjectWriter;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import javax.ws.rs.core.Response;\n"
"import org.acme.sqs.model.Quark;\n"
"import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
"import org.jboss.logging.Logger;\n"
"import software.amazon.awssdk.services.sqs.SqsClient;\n"
"import software.amazon.awssdk.services.sqs.model.SendMessageResponse;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:184
#, no-wrap
msgid ""
"@Path(\"/sync/cannon\")\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"public class QuarksCannonSyncResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:186
#, no-wrap
msgid "    private static final Logger LOGGER = Logger.getLogger(QuarksCannonSyncResource.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:189
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:238
#, no-wrap
msgid ""
"    @Inject\n"
"    SqsClient sqs;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:192
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:241
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:369
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:420
#, no-wrap
msgid ""
"    @ConfigProperty(name = \"queue.url\")\n"
"    String queueUrl;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:194
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:371
#, no-wrap
msgid "    static ObjectWriter QUARK_WRITER = new ObjectMapper().writerFor(Quark.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:205
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/shoot\")\n"
"    @Consumes(MediaType.APPLICATION_JSON)\n"
"    public Response sendMessage(Quark quark) throws Exception {\n"
"        String message = QUARK_WRITER.writeValueAsString(quark);\n"
"        SendMessageResponse response = sqs.sendMessage(m -> m.queueUrl(queueUrl).messageBody(message));\n"
"        LOGGER.infov(\"Fired Quark[{0}, {1}}]\", quark.getFlavor(), quark.getSpin());\n"
"        return Response.ok().entity(response.messageId()).build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:208
msgid "Because of the fact messages sent to the queue must be a `String`, we're using Jackson's `ObjectWriter` in order to serialize our `Quark` objects into a `String`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:210
msgid "Now, create the `org.acme.QuarksShieldSyncResource` REST resources that provides an endpoint to read the messages from the `ColliderQueue` queue."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:230
#, no-wrap
msgid ""
"import com.fasterxml.jackson.databind.ObjectMapper;\n"
"import com.fasterxml.jackson.databind.ObjectReader;\n"
"import java.util.List;\n"
"import java.util.stream.Collectors;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import org.acme.sqs.model.Quark;\n"
"import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
"import org.jboss.logging.Logger;\n"
"import software.amazon.awssdk.services.sqs.SqsClient;\n"
"import software.amazon.awssdk.services.sqs.model.Message;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:233
#, no-wrap
msgid ""
"@Path(\"/sync/shield\")\n"
"public class QuarksShieldSyncResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:235
#, no-wrap
msgid "    private static final Logger LOGGER = Logger.getLogger(QuarksShieldSyncResource.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:243
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:422
#, no-wrap
msgid "    static ObjectReader QUARK_READER = new ObjectMapper().readerFor(Quark.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:247
#, no-wrap
msgid ""
"    @GET\n"
"    public List<Quark> receive() {\n"
"        List<Message> messages = sqs.receiveMessage(m -> m.maxNumberOfMessages(10).queueUrl(queueUrl)).messages();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:253
#, no-wrap
msgid ""
"        return messages.stream()\n"
"            .map(Message::body)\n"
"            .map(this::toQuark)\n"
"            .collect(Collectors.toList());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:265
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:442
#, no-wrap
msgid ""
"    private Quark toQuark(String message) {\n"
"        Quark quark = null;\n"
"        try {\n"
"            quark = QUARK_READER.readValue(message);\n"
"        } catch (Exception e) {\n"
"            LOGGER.error(\"Error decoding message\", e);\n"
"            throw new RuntimeException(e);\n"
"        }\n"
"        return quark;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:268
msgid "We are using here a Jackson's `ObjectReader` in order to deserialize queue messages into our `Quark` POJOs."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:269
#, no-wrap
msgid "Configuring SQS clients"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:274
msgid "Both SQS clients (sync and async) are configurable via the `application.properties` file that can be provided in the `src/main/resources` directory.  Additionally, you need to add to the classpath a proper implementation of the sync client. By default the extension uses the URL connection HTTP client, so you need to add a URL connection client dependency to the `pom.xml` file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:281
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>software.amazon.awssdk</groupId>\n"
"    <artifactId>url-connection-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:284
msgid "If you want to use Apache HTTP client instead, configure it as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:287
#, no-wrap
msgid "quarkus.sqs.sync-client.type=apache\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:290
msgid "And add the following dependency to the application `pom.xml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:296
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>software.amazon.awssdk</groupId>\n"
"    <artifactId>apache-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:299
msgid "If you're going to use a local SQS instance, configure it as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:303
#, no-wrap
msgid "quarkus.sqs.endpoint-override=http://localhost:8010\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:308
#, no-wrap
msgid ""
"quarkus.sqs.aws.region=us-east-1\n"
"quarkus.sqs.aws.credentials.type=static\n"
"quarkus.sqs.aws.credentials.static-provider.access-key-id=test-key\n"
"quarkus.sqs.aws.credentials.static-provider.secret-access-key=test-secret\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:311
msgid "`quarkus.sqs.aws.region` - It's required by the client, but since you're using a local SQS instance use `us-east-1` as it's a default region of localstack's SQS."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:312
msgid "`quarkus.sqs.aws.credentials.type` - Set `static` credentials provider with any values for `access-key-id` and `secret-access-key`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:313
msgid "`quarkus.sqs.endpoint-override` - Override the SQS client to use a local instance instead of an AWS service"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:316
msgid "If you want to work with an AWS account, you can simply remove or comment out all SQS related properties. By default, the SQS client extension will use the `default` credentials provider chain that looks for credentials in this order:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:320
msgid "And the region from your AWS CLI profile will be used."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:321
#, no-wrap
msgid "Next steps"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:323
#, no-wrap
msgid "Packaging"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:327
msgid "Packaging your application is as simple as `./mvnw clean package`.  It can be run with `java -Dqueue.url=$QUEUE_URL -jar target/amazon-sqs-quickstart-1.0.0-SNAPSHOT-runner.jar`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:330
msgid "With GraalVM installed, you can also create a native executable binary: `./mvnw clean package -Dnative`.  Depending on your system, that will take some time."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:331
#, no-wrap
msgid "Going asynchronous"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:334
msgid "Thanks to the AWS SDK v2.x used by the Quarkus extension, you can use the asynchronous programming model out of the box."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:336
msgid "Create a `org.acme.sqs.QuarksCannonAsyncResource` REST resource that will be similar to our `QuarksCannonSyncResource` but using an asynchronous programming model."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:356
#, no-wrap
msgid ""
"import com.fasterxml.jackson.databind.ObjectMapper;\n"
"import com.fasterxml.jackson.databind.ObjectWriter;\n"
"import io.smallrye.mutiny.Uni;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import javax.ws.rs.core.Response;\n"
"import org.acme.sqs.model.Quark;\n"
"import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
"import org.jboss.logging.Logger;\n"
"import software.amazon.awssdk.services.sqs.SqsAsyncClient;\n"
"import software.amazon.awssdk.services.sqs.model.SendMessageResponse;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:361
#, no-wrap
msgid ""
"@Path(\"/async/cannon\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public class QuarksCannonAsyncResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:363
#, no-wrap
msgid "    private static final Logger LOGGER = Logger.getLogger(QuarksCannonAsyncResource.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:366
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:417
#, no-wrap
msgid ""
"    @Inject\n"
"    SqsAsyncClient sqs;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:384
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/shoot\")\n"
"    @Consumes(MediaType.APPLICATION_JSON)\n"
"    public Uni<Response> sendMessage(Quark quark) throws Exception {\n"
"        String message = QUARK_WRITER.writeValueAsString(quark);\n"
"        return Uni.createFrom()\n"
"            .completionStage(sqs.sendMessage(m -> m.queueUrl(queueUrl).messageBody(message)))\n"
"            .onItem().invoke(item -> LOGGER.infov(\"Fired Quark[{0}, {1}}]\", quark.getFlavor(), quark.getSpin()))\n"
"            .onItem().transform(SendMessageResponse::messageId)\n"
"            .onItem().transform(id -> Response.ok().entity(id).build());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:386
msgid "We create `Uni` instances from the `CompletionStage` objects returned by the asynchronous SQS client, and then transform the emitted item."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:388
msgid "And the corresponding async receiver of the queue messages `org.acme.sqs.QuarksShieldAsyncResource`"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:409
#, no-wrap
msgid ""
"import com.fasterxml.jackson.databind.ObjectMapper;\n"
"import com.fasterxml.jackson.databind.ObjectReader;\n"
"import io.smallrye.mutiny.Uni;\n"
"import java.util.List;\n"
"import java.util.stream.Collectors;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import org.acme.sqs.model.Quark;\n"
"import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
"import org.jboss.logging.Logger;\n"
"import software.amazon.awssdk.services.sqs.SqsAsyncClient;\n"
"import software.amazon.awssdk.services.sqs.model.Message;\n"
"import software.amazon.awssdk.services.sqs.model.ReceiveMessageResponse;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:412
#, no-wrap
msgid ""
"@Path(\"/async/shield\")\n"
"public class QuarksShieldAsyncResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:414
#, no-wrap
msgid "    private static final Logger LOGGER = Logger.getLogger(QuarksShieldAsyncResource.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:430
#, no-wrap
msgid ""
"    @GET\n"
"    public Uni<List<Quark>> receive() {\n"
"        return Uni.createFrom()\n"
"            .completionStage(sqs.receiveMessage(m -> m.maxNumberOfMessages(10).queueUrl(queueUrl)))\n"
"            .onItem().transform(ReceiveMessageResponse::messages)\n"
"            .onItem().transform(m -> m.stream().map(Message::body).map(this::toQuark).collect(Collectors.toList()));\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:445
msgid "And we need to add the Netty HTTP client dependency to the `pom.xml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:452
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>software.amazon.awssdk</groupId>\n"
"    <artifactId>netty-nio-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/amazon-sqs.adoc:454
#, no-wrap
msgid "Configuration Reference"
msgstr "配置参考"
