# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.11/guides/security-authorization.adoc:6
#, no-wrap
msgid "Quarkus - Authorization of Web Endpoints"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-authorization.adoc:12
msgid "Quarkus has an integrated pluggable web security layer. If security is enabled all HTTP requests will have a permission check performed to make sure they are allowed to continue."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-authorization.adoc:15
msgid "Configuration authorization checks are executed before any annotation-based authorization check is done, so both checks have to pass for a request to be allowed."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-authorization.adoc:16
#, no-wrap
msgid "Authorization using Configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-authorization.adoc:20
msgid "The default implementation allows you to define permissions using config in `application.properties`. An example config is shown below:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-authorization.adoc:24
#, no-wrap
msgid "quarkus.http.auth.policy.role-policy1.roles-allowed=user,admin                      <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-authorization.adoc:27
#, no-wrap
msgid ""
"quarkus.http.auth.permission.roles1.paths=/roles-secured/*,/other/*,/api/*          <2>\n"
"quarkus.http.auth.permission.roles1.policy=role-policy1\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-authorization.adoc:31
#, no-wrap
msgid ""
"quarkus.http.auth.permission.permit1.paths=/public/*                                <3>\n"
"quarkus.http.auth.permission.permit1.policy=permit\n"
"quarkus.http.auth.permission.permit1.methods=GET\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-authorization.adoc:34
#, no-wrap
msgid ""
"quarkus.http.auth.permission.deny1.paths=/forbidden                                 <4>\n"
"quarkus.http.auth.permission.deny1.policy=deny\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-authorization.adoc:36
msgid "This defines a role based policy that allows users with the `user` and `admin` roles. This is referenced by later rules."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-authorization.adoc:37
msgid "This is a permission set that references the previously defined policy. `roles1` is an arbitrary name, you can call the permission sets whatever you want."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-authorization.adoc:38
msgid "This permission references the default `permit` built-in policy to allow `GET` methods to `/public`. This is actually a no-op in this example, as this request would have been allowed anyway."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-authorization.adoc:39
msgid "This permission references the built-in `deny` policy for `/forbidden`. This is an exact path match as it does not end with `*`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-authorization.adoc:43
msgid "Permissions are defined in config using permission sets. These are arbitrarily named permission grouping. Each permission set must specify a policy that is used to control access. There are three built-in policies: `deny`, `permit` and `authenticated`, which respectively permits all, denies all and only allows authenticated users."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-authorization.adoc:46
msgid "It is also possible to define role based policies, as shown in the example. These policies will only allow users with the specified roles to access the resources."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/security-authorization.adoc:47
#, no-wrap
msgid "Matching on paths, methods"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-authorization.adoc:51
msgid "Permission sets can also specify paths and methods as a comma separated list. If a path ends with `*` then it is considered to be a wildcard match and will match all sub paths, otherwise it is an exact match and will only match that specific path:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-authorization.adoc:57
#, no-wrap
msgid ""
"quarkus.http.auth.permission.permit1.paths=/public/*,/css/*,/js/*,/robots.txt\n"
"quarkus.http.auth.permission.permit1.policy=permit\n"
"quarkus.http.auth.permission.permit1.methods=GET,HEAD\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/security-authorization.adoc:59
#, no-wrap
msgid "Matching path but not method"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-authorization.adoc:63
msgid "If a request would match one or more permission sets based on the path, but does not match any due to method requirements then the request is rejected."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-authorization.adoc:66
msgid "Given the above permission set, `GET /public/foo` would match both the path and method and thus be allowed, whereas `POST /public/foo` would match the path but not the method and would thus be rejected."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/security-authorization.adoc:67
#, no-wrap
msgid "Matching multiple paths: longest path wins"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-authorization.adoc:71
msgid "Matching is always done on a longest path wins basis, less specific permission sets are not considered if a more specific one has been matched:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-authorization.adoc:77
#: upstream/_versions/1.11/guides/security-authorization.adoc:114
#, no-wrap
msgid ""
"quarkus.http.auth.permission.permit1.paths=/public/*\n"
"quarkus.http.auth.permission.permit1.policy=permit\n"
"quarkus.http.auth.permission.permit1.methods=GET,HEAD\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-authorization.adoc:80
#, no-wrap
msgid ""
"quarkus.http.auth.permission.deny1.paths=/public/forbidden-folder/*\n"
"quarkus.http.auth.permission.deny1.policy=deny\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-authorization.adoc:85
msgid "Given the above permission set, `GET /public/forbidden-folder/foo` would match both permission sets' paths, but because it matches the `deny1` permission set's path on a longer match, `deny1` will be chosen and the request will be rejected."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-authorization.adoc:87
msgid "[NOTE]"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/security-authorization.adoc:90
msgid "Subpath permissions always win against the root path permissions as explained above in the `deny1` versus `permit1` permission example.  Here is another example showing a subpath permission allowing a public resource access with the root path permission requiring the authorization:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-authorization.adoc:96
#, no-wrap
msgid ""
"quarkus.http.auth.policy.user-policy.roles-allowed=user\n"
"quarkus.http.auth.permission.roles.paths=/api/*\n"
"quarkus.http.auth.permission.roles.policy=user-policy\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-authorization.adoc:99
#, no-wrap
msgid ""
"quarkus.http.auth.permission.public.paths=/api/noauth/*\n"
"quarkus.http.auth.permission.public.policy=permit\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/security-authorization.adoc:102
#, no-wrap
msgid "Matching multiple paths: most specific method wins"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/security-authorization.adoc:108
msgid "If a path is registered with multiple permission sets then any permission sets that specify a HTTP method will take precedence and permissions sets without a method will not be considered (assuming of course the method matches). In this instance, the permission sets without methods will only come into effect if the request method does not match any of the sets with method permissions."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-authorization.adoc:117
#, no-wrap
msgid ""
"quarkus.http.auth.permission.deny1.paths=/public/*\n"
"quarkus.http.auth.permission.deny1.policy=deny\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-authorization.adoc:123
msgid "Given the above permission set, `GET /public/foo` would match both permission sets' paths, but because it matches the `permit1` permission set's explicit method, `permit1` will be chosen and the request will be accepted. `PUT /public/foo` on the other hand, will not match the method permissions of `permit1` and so `deny1` will be activated and reject the request."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/security-authorization.adoc:124
#, no-wrap
msgid "Matching multiple paths and methods: both win"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-authorization.adoc:129
msgid "If multiple permission sets specify the same path and method (or multiple have no method) then both permissions have to allow access for the request to proceed. Note that for this to happen both have to either have specified the method, or have no method, method specific matches take precedence as stated above:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-authorization.adoc:134
#, no-wrap
msgid ""
"quarkus.http.auth.policy.user-policy1.roles-allowed=user\n"
"quarkus.http.auth.policy.admin-policy1.roles-allowed=admin\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-authorization.adoc:137
#, no-wrap
msgid ""
"quarkus.http.auth.permission.roles1.paths=/api/*,/restricted/*\n"
"quarkus.http.auth.permission.roles1.policy=user-policy1\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-authorization.adoc:140
#, no-wrap
msgid ""
"quarkus.http.auth.permission.roles2.paths=/api/*,/admin/*\n"
"quarkus.http.auth.permission.roles2.policy=admin-policy1\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-authorization.adoc:144
msgid "Given the above permission set, `GET /api/foo` would match both permission sets' paths, so would require both the `user` and `admin` roles."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/security-authorization.adoc:145
#, no-wrap
msgid "Configuration Properties to Deny access"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-authorization.adoc:148
msgid "There are two configuration settings that alter the RBAC Deny behavior:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-authorization.adoc:151
msgid "`quarkus.security.jaxrs.deny-unannotated-endpoints=true|false` - if set to true, the access will be denied for all JAX-RS endpoints by default.  That is if the security annotations do not define the access control. Defaults to `false`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-authorization.adoc:154
msgid "`quarkus.security.deny-unannotated-members=true|false` - if set to true, the access will be denied to all CDI methods and JAX-RS endpoints that do not have security annotations but are defined in classes that contain methods with security annotations. Defaults to `false`."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/security-authorization.adoc:155
#, no-wrap
msgid "Disabling permissions "
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-authorization.adoc:158
msgid "Permissions can be disabled at build time with an `enabled` property for each declared permission, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-authorization.adoc:165
#, no-wrap
msgid ""
"quarkus.http.auth.permission.permit1.enabled=false\n"
"quarkus.http.auth.permission.permit1.paths=/public/*,/css/*,/js/*,/robots.txt\n"
"quarkus.http.auth.permission.permit1.policy=permit\n"
"quarkus.http.auth.permission.permit1.methods=GET,HEAD\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-authorization.adoc:168
msgid "and enabled at runtime with a system property or environment variable, for example: `-Dquarkus.http.auth.permission.permit1.enabled=true`."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-authorization.adoc:170
#, no-wrap
msgid "Authorization using Annotations"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-authorization.adoc:177
msgid "Quarkus comes with built-in security to allow for Role-Based Access Control (link:https://en.wikipedia.org/wiki/Role-based_access_control[RBAC])  based on the common security annotations `@RolesAllowed`, `@DenyAll`, `@PermitAll` on REST endpoints and CDI beans.  An example of an endpoint that makes use of both JAX-RS and Common Security annotations to describe and secure its endpoints is given in <<subject-example>>. Quarkus also provides the `io.quarkus.security.Authenticated` annotation that will permit any authenticated user to access the resource (equivalent to `@RolesAllowed(\"**\")`)."
msgstr ""

#. type: Block title
#: upstream/_versions/1.11/guides/security-authorization.adoc:179
#, no-wrap
msgid "SubjectExposingResource Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-authorization.adoc:183
#, no-wrap
msgid "import java.security.Principal;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-authorization.adoc:191
#, no-wrap
msgid ""
"import javax.annotation.security.DenyAll;\n"
"import javax.annotation.security.PermitAll;\n"
"import javax.annotation.security.RolesAllowed;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.core.Context;\n"
"import javax.ws.rs.core.SecurityContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-authorization.adoc:194
#, no-wrap
msgid ""
"@Path(\"subject\")\n"
"public class SubjectExposingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-authorization.adoc:203
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"secured\")\n"
"    @RolesAllowed(\"Tester\") <1>\n"
"    public String getSubjectSecured(@Context SecurityContext sec) {\n"
"        Principal user = sec.getUserPrincipal(); <2>\n"
"        String name = user != null ? user.getName() : \"anonymous\";\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-authorization.adoc:212
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"unsecured\")\n"
"    @PermitAll <3>\n"
"    public String getSubjectUnsecured(@Context SecurityContext sec) {\n"
"        Principal user = sec.getUserPrincipal(); <4>\n"
"        String name = user != null ? user.getName() : \"anonymous\";\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-authorization.adoc:222
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"denied\")\n"
"    @DenyAll <5>\n"
"    public String getSubjectDenied(@Context SecurityContext sec) {\n"
"        Principal user = sec.getUserPrincipal();\n"
"        String name = user != null ? user.getName() : \"anonymous\";\n"
"        return name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-authorization.adoc:224
msgid "This `/subject/secured` endpoint requires an authenticated user that has been granted the role \"Tester\" through the use of the `@RolesAllowed(\"Tester\")` annotation."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-authorization.adoc:225
msgid "The endpoint obtains the user principal from the JAX-RS `SecurityContext`. This will be non-null for a secured endpoint."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-authorization.adoc:226
msgid "The `/subject/unsecured` endpoint allows for unauthenticated access by specifying the `@PermitAll` annotation."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-authorization.adoc:227
msgid "This call to obtain the user principal will return null if the caller is unauthenticated, non-null if the caller is authenticated."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-authorization.adoc:228
msgid "The `/subject/denied` endpoint disallows any access regardless of whether the call is authenticated by specifying the `@DenyAll` annotation."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/security-authorization.adoc:229
#, no-wrap
msgid "References"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/security-authorization.adoc:231
msgid "link:security[Quarkus Security]"
msgstr ""
