# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/mongodb.adoc:6
#, no-wrap
msgid "Using the MongoDB Client"
msgstr "使用MongoDB客户端"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:10
msgid "MongoDB is a well known NoSQL Database that is widely used."
msgstr "MongoDB是一个众所周知的NoSQL数据库，被广泛使用。"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:12
msgid "In this guide, we see how you can get your REST services to use the MongoDB database."
msgstr "在本指南中，我们看到如何让你的REST服务使用MongoDB数据库。"

#. type: Title ==
#: upstream/_versions/2.2/guides/mongodb.adoc:13
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:16
msgid "To complete this guide, you need:"
msgstr "要完成这个指南，你需要："

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:18
msgid "less than 15 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:19
msgid "an IDE"
msgstr "一个编辑器"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:20
msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
msgstr "安装JDK 11以上版本并正确配置了 `JAVA_HOME`"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:21
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:22
msgid "MongoDB installed or Docker installed"
msgstr "安装了MongoDB或安装了Docker"

#. type: Title ==
#: upstream/_versions/2.2/guides/mongodb.adoc:23
#, no-wrap
msgid "Architecture"
msgstr "应用结构"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:26
msgid "The application built in this guide is quite simple: the user can add elements in a list using a form and the list is updated."
msgstr "本指南中构建的应用程序非常简单：用户可以使用一个表单在列表中添加元素并更新列表。"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:28
msgid "All the information between the browser and the server is formatted as JSON."
msgstr "浏览器和服务器之间的所有信息都被格式化为JSON。"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:30
msgid "The elements are stored in MongoDB."
msgstr "这些元素被存储在MongoDB中。"

#. type: Title ==
#: upstream/_versions/2.2/guides/mongodb.adoc:31
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:35
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:37
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:39
msgid "The solution is located in the `mongodb-quickstart` {quickstarts-tree-url}/mongodb-quickstart[directory]."
msgstr "该解决方案位于 `mongodb-quickstart` {quickstarts-tree-url}/mongodb-quickstart[目录]中。"

#. type: Title ==
#: upstream/_versions/2.2/guides/mongodb.adoc:40
#, no-wrap
msgid "Creating the Maven project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:43
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:53
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=mongodb-quickstart \\\n"
"    -DclassName=\"org.acme.mongodb.FruitResource\" \\\n"
"    -Dpath=\"/fruits\" \\\n"
"    -Dextensions=\"resteasy,resteasy-jackson,mongodb-client,resteasy-mutiny,context-propagation\"\n"
"cd mongodb-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:57
msgid "This command generates a Maven structure importing the RESTEasy/JAX-RS, Jackson, Mutiny, Context Propagation and MongoDB Client extensions.  After this, the quarkus-mongodb-client extension has been added to your `pom.xml`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:60
msgid "If you already have your Quarkus project configured, you can add the `mongodb-client` extension to your project by running the following command in your project base directory:"
msgstr "如果你已经配置了你的Quarkus项目，你可以通过在你的项目基础目录下运行以下命令，将 `mongodb-client` 扩展添加到你的项目中："

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:64
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"mongodb-client\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:67
msgid "This will add the following to your `pom.xml`:"
msgstr "这将在你的 `pom.xml` 中添加以下内容："

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:74
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-mongodb-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/mongodb.adoc:76
#, no-wrap
msgid "Creating your first JSON REST service"
msgstr "创建你的第一个JSON REST服务"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:79
msgid "In this example, we will create an application to manage a list of fruits."
msgstr "在这个例子中，我们将创建一个应用程序来管理fruit列表。"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:81
msgid "First, let's create the `Fruit` bean as follows:"
msgstr "首先，让我们创建 `Fruit` 实体类，如下所示："

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:85
#: upstream/_versions/2.2/guides/mongodb.adoc:151
#: upstream/_versions/2.2/guides/mongodb.adoc:349
#: upstream/_versions/2.2/guides/mongodb.adoc:393
#: upstream/_versions/2.2/guides/mongodb.adoc:539
#, no-wrap
msgid "package org.acme.mongodb;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:87
#, no-wrap
msgid "import java.util.Objects;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:89
#, no-wrap
msgid "public class Fruit {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:93
#, no-wrap
msgid ""
"    private String name;\n"
"    private String description;\n"
"    private String id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:96
#, no-wrap
msgid ""
"    public Fruit() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:101
#, no-wrap
msgid ""
"    public Fruit(String name, String description) {\n"
"        this.name = name;\n"
"        this.description = description;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:105
#, no-wrap
msgid ""
"    public String getName() {\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:109
#, no-wrap
msgid ""
"    public void setName(String name) {\n"
"        this.name = name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:113
#, no-wrap
msgid ""
"    public String getDescription() {\n"
"        return description;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:117
#, no-wrap
msgid ""
"    public void setDescription(String description) {\n"
"        this.description = description;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:123
#, no-wrap
msgid ""
"    @Override\n"
"    public boolean equals(Object obj) {\n"
"        if (!(obj instanceof Fruit)) {\n"
"            return false;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:125
#, no-wrap
msgid "        Fruit other = (Fruit) obj;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:128
#, no-wrap
msgid ""
"        return Objects.equals(other.name, this.name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:133
#, no-wrap
msgid ""
"    @Override\n"
"    public int hashCode() {\n"
"        return Objects.hash(this.name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:137
#, no-wrap
msgid ""
"    public void setId(String id) {\n"
"        this.id = id;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:142
#, no-wrap
msgid ""
"    public String getId() {\n"
"        return id;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:145
msgid "Nothing fancy. One important thing to note is that having a default constructor is required by the JSON serialization layer."
msgstr "这非常的简单。需要注意的一件事是， JSON 序列化层需要具有默认构造函数。"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:147
msgid "Now create a `org.acme.mongodb.FruitService` that will be the business layer of our application and store/load the fruits from the mongoDB database."
msgstr "现在创建一个 `org.acme.mongodb.FruitService` ，它将是我们应用程序的业务层，并从mongoDB数据库 store/load fruits。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:156
#, no-wrap
msgid ""
"import com.mongodb.client.MongoClient;\n"
"import com.mongodb.client.MongoCollection;\n"
"import com.mongodb.client.MongoCursor;\n"
"import org.bson.Document;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:161
#: upstream/_versions/2.2/guides/mongodb.adoc:548
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.inject.Inject;\n"
"import java.util.ArrayList;\n"
"import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:164
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class FruitService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:166
#: upstream/_versions/2.2/guides/mongodb.adoc:553
#, no-wrap
msgid "    @Inject MongoClient mongoClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:170
#, no-wrap
msgid ""
"    public List<Fruit> list(){\n"
"        List<Fruit> list = new ArrayList<>();\n"
"        MongoCursor<Document> cursor = getCollection().find().iterator();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:184
#, no-wrap
msgid ""
"        try {\n"
"            while (cursor.hasNext()) {\n"
"                Document document = cursor.next();\n"
"                Fruit fruit = new Fruit();\n"
"                fruit.setName(document.getString(\"name\"));\n"
"                fruit.setDescription(document.getString(\"description\"));\n"
"                list.add(fruit);\n"
"            }\n"
"        } finally {\n"
"            cursor.close();\n"
"        }\n"
"        return list;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:191
#, no-wrap
msgid ""
"    public void add(Fruit fruit){\n"
"        Document document = new Document()\n"
"                .append(\"name\", fruit.getName())\n"
"                .append(\"description\", fruit.getDescription());\n"
"        getCollection().insertOne(document);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:196
#, no-wrap
msgid ""
"    private MongoCollection getCollection(){\n"
"        return mongoClient.getDatabase(\"fruit\").getCollection(\"fruit\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:199
msgid "Now, edit the `org.acme.mongodb.FruitResource` class as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:204
#, no-wrap
msgid ""
"@Path(\"/fruits\")\n"
"public class FruitResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:206
#, no-wrap
msgid "    @Inject FruitService fruitService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:211
#, no-wrap
msgid ""
"    @GET\n"
"    public List<Fruit> list() {\n"
"        return fruitService.list();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:218
#, no-wrap
msgid ""
"    @POST\n"
"    public List<Fruit> add(Fruit fruit) {\n"
"        fruitService.add(fruit);\n"
"        return list();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:221
msgid "The implementation is pretty straightforward and you just need to define your endpoints using the JAX-RS annotations and use the `FruitService` to list/add new fruits."
msgstr "实现起来非常简单，你只需要使用JAX-RS注解来定义你的端点，并使用 `FruitService` 来list/add新的fruits。"

#. type: Title ==
#: upstream/_versions/2.2/guides/mongodb.adoc:222
#, no-wrap
msgid "Configuring the MongoDB database"
msgstr "配置MongoDB数据库"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:224
msgid "The main property to configure is the URL to access to MongoDB, almost all configuration can be included in the connection URI so we advise you to do so, you can find more information in the MongoDB documentation: https://docs.mongodb.com/manual/reference/connection-string/"
msgstr "要配置的主要属性是访问MongoDB的URL，几乎所有的配置都可以包含在连接URI中，所以我们建议你这样做，你可以在MongoDB文档中找到更多信息 https://docs.mongodb.com/manual/reference/connection-string/ "

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:226
msgid "A sample configuration should look like this:"
msgstr "示例配置应如下所示："

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:231
#, no-wrap
msgid ""
"# configure the mongoDB client for a replica set of two nodes\n"
"quarkus.mongodb.connection-string = mongodb://mongo1:27017,mongo2:27017\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:234
msgid "In this example, we are using a single instance running on localhost:"
msgstr "在此示例中，我们在 localhost 上运行的单个实例："

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:239
#, no-wrap
msgid ""
"# configure the mongoDB client for a single instance on localhost\n"
"quarkus.mongodb.connection-string = mongodb://localhost:27017\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:242
msgid "If you need more configuration properties, there is a full list at the end of this guide."
msgstr "如果你需要更多的配置属性，在本指南的末尾有一个完整的列表。"

#. type: Title ===
#: upstream/_versions/2.2/guides/mongodb.adoc:244
#, no-wrap
msgid "Dev Services (Configuration Free Databases)"
msgstr "开发服务（免配置数据库）。"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:249
msgid "Quarkus supports a feature called Dev Services that allows you to create various datasources without any config. In the case of MongoDB this support extends to the default MongoDB connection.  What that means practically, is that if you have not configured `quarkus.mongodb.connection-string` Quarkus will automatically start a MongoDB container when running tests or dev-mode, and automatically configure the connection."
msgstr "Quarkus支持一种叫做Dev Services的功能，它允许你在没有任何配置的情况下创建各种数据源。在MongoDB的情况下，这种支持延伸到默认的MongoDB连接。也就是说，如果你没有配置 `quarkus.mongodb.connection-string` ，Quarkus会在运行测试或开发模式时自动启动一个MongoDB容器，并自动配置连接。"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:252
msgid "When running the production version of the application, the MongoDB connection need to be configured as normal, so if you want to include a production database config in your `application.properties` and continue to use Dev Services we recommend that you use the `%prod.` profile to define your MongoDB settings."
msgstr "当运行应用程序的生产版本时，MongoDB连接需要正常配置，如果您希望在 `application.properties` 中包含生产数据库配置并继续使用开发服务，我们建议你使用 `%prod.` 配置文件来定义你的MongoDB设置。"

#. type: Title ==
#: upstream/_versions/2.2/guides/mongodb.adoc:255
#, no-wrap
msgid "Multiple MongoDB Clients"
msgstr "多个MongoDB客户端"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:259
msgid "MongoDB allows you to configure multiple clients.  Using several clients works the same way as having a single client."
msgstr "MongoDB允许你配置多个客户端。使用多个客户端的方式与拥有一个客户端的方式相同。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:263
#, no-wrap
msgid "quarkus.mongodb.connection-string = mongodb://login:pass@mongo1:27017/database\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:266
#, no-wrap
msgid ""
"quarkus.mongodb.users.connection-string = mongodb://mongo2:27017/userdb\n"
"quarkus.mongodb.inventory.connection-string = mongodb://mongo3:27017/invdb,mongo4:27017/invdb\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:271
msgid "Notice there's an extra bit in the key (the `users` and `inventory` segments).  The syntax is as follows: `quarkus.mongodb.[optional name.][mongo connection property]`.  If the name is omitted, it configures the default client."
msgstr "注意在键中有一个额外的位（ `users` 和 `inventory` 段）。语法如下： `quarkus.mongodb.[optional name.][mongo connection property]` 。如果省略了名称，则配置默认的客户端。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/mongodb.adoc:278
msgid "The use of multiple MongoDB clients enables multi-tenancy for MongoDB by allowing to connect to multiple MongoDB clusters. + If you want to connect to multiple databases inside the same cluster, multiple clients are **not** necessary as a single client is able to access all databases in the same cluster (like a JDBC connection is able to access to multiple schemas inside the same database)."
msgstr "多个 MongoDB 客户端的使用通过允许连接到多个 MongoDB 集群来实现 MongoDB 的多租户。+ 如果你想连接同一集群内的多个数据库，则 **不** 需要使用多个客户端，因为单个客户端能够访问同一集群内的所有数据库（就像JDBC连接能够访问同一数据库内的多个模式）。"

#. type: Title ===
#: upstream/_versions/2.2/guides/mongodb.adoc:280
#, no-wrap
msgid "Named Mongo client Injection"
msgstr "以Mongo客户端的名字进行注入"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:284
msgid "When using multiple clients, each `MongoClient`, you can select the client to inject using the `io.quarkus.mongodb.MongoClientName` qualifier.  Using the above properties to configure three different clients, you can also inject each one as follows:"
msgstr "当使用多个客户端时，每个 `MongoClient` ，你可以使用 `io.quarkus.mongodb.MongoClientName` 修饰语选择要注入的客户端。使用上述属性来配置三个不同的客户端，你也可以按以下方式来注入每个客户端："

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:289
#, no-wrap
msgid ""
"@Inject\n"
"MongoClient defaultMongoClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:293
#, no-wrap
msgid ""
"@Inject\n"
"@MongoClientName(\"users\")\n"
"MongoClient mongoClient1;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:297
#, no-wrap
msgid ""
"@Inject\n"
"@MongoClientName(\"inventory\")\n"
"ReactiveMongoClient mongoClient2;\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/mongodb.adoc:299
#, no-wrap
msgid "Running a MongoDB Database"
msgstr "运行MongoDB数据库"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:301
msgid "As by default, `MongoClient` is configured to access a local MongoDB database on port 27017 (the default MongoDB port), if you have a local running database on this port, there is nothing more to do before being able to test it!"
msgstr "在默认情况下， `MongoClient` 被配置为在27017端口（默认的MongoDB端口）上访问本地的MongoDB数据库，如果你在这个端口上有一个本地运行的数据库，那么在能够测试之前，不需要做其他操作！"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:303
msgid "If you want to use Docker to run a MongoDB database, you can use the following command to launch one:"
msgstr "如果你想使用Docker来运行MongoDB数据库，你可以使用以下命令来启动一个数据库："

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:306
#, no-wrap
msgid "docker run -ti --rm -p 27017:27017 mongo:4.0\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/mongodb.adoc:311
msgid "If you use <<dev-services,Dev Services>>, launching the container manually is not necessary!"
msgstr "如果你使用 link:#dev-services[开发服务] ，则不需要手动启动容器！"

#. type: Title ==
#: upstream/_versions/2.2/guides/mongodb.adoc:314
#, no-wrap
msgid "Creating a frontend"
msgstr "创建一个网页"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:319
msgid "Now let's add a simple web page to interact with our `FruitResource`.  Quarkus automatically serves static resources located under the `META-INF/resources` directory.  In the `src/main/resources/META-INF/resources` directory, add a `fruits.html` file with the content from this {quickstarts-blob-url}/mongodb-quickstart/src/main/resources/META-INF/resources/fruits.html[fruits.html] file in it."
msgstr "现在让我们添加一个简单的网页来与我们的 `FruitResource` 进行交互。Quarkus会自动提供位于 `META-INF/resources` 目录下的静态资源。在 `src/main/resources/META-INF/resources` 目录中，添加一个 `fruits.html` 文件，其中包含这个 {quickstarts-blob-url}/mongodb-quickstart/src/main/resources/META-INF/resources/fruits.html[fruits.html] 文件的内容。"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:321
msgid "You can now interact with your REST service:"
msgstr "现在你可以与你的REST服务进行交互："

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:323
msgid "start Quarkus with `./mvnw compile quarkus:dev`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:324
msgid "open a browser to `http://localhost:8080/fruits.html`"
msgstr "打开浏览器访问 `<a href=\"http://localhost:8080/fruits.html\" class=\"bare\">http://localhost:8080/fruits.html</a>` "

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:325
msgid "add new fruits to the list via the form"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/mongodb.adoc:327
#, no-wrap
msgid "Reactive MongoDB Client"
msgstr "响应式MongoDB客户端"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:331
msgid "A reactive MongoDB Client is included in Quarkus.  Using it is as easy as using the classic MongoDB Client.  You can rewrite the previous example to use it like the following."
msgstr "Quarkus中包含一个响应式MongoDB客户端。使用它就像使用经典的MongoDB客户端一样简单。你可以重写前面的例子来使用它，如下所示："

#. type: Block title
#: upstream/_versions/2.2/guides/mongodb.adoc:333
#, no-wrap
msgid "Deprecation"
msgstr "弃用"

#. type: delimited block =
#: upstream/_versions/2.2/guides/mongodb.adoc:337
msgid "The `io.quarkus.mongodb.ReactiveMongoClient` client is deprecated and will be removed in the future.  It is recommended to switch to the `io.quarkus.mongodb.reactive.ReactiveMongoClient` client providing the `Mutiny` API."
msgstr "`io.quarkus.mongodb.ReactiveMongoClient` 客户端已被废弃，并将在未来被删除。建议切换到提供 `Mutiny` API的 `io.quarkus.mongodb.reactive.ReactiveMongoClient` 客户端。"

#. type: Block title
#: upstream/_versions/2.2/guides/mongodb.adoc:340
#, no-wrap
msgid "Mutiny"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/mongodb.adoc:344
msgid "The MongoDB reactive client uses Mutiny reactive types.  If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "MongoDB的响应式客户端使用Mutiny响应式类型。如果你不熟悉Mutiny，请查看 link:mutiny-primer.html[Mutiny - 一个直观的响应式编程库] 。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:354
#, no-wrap
msgid ""
"import io.quarkus.mongodb.reactive.ReactiveMongoClient;\n"
"import io.quarkus.mongodb.reactive.ReactiveMongoCollection;\n"
"import io.smallrye.mutiny.Uni;\n"
"import org.bson.Document;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:358
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.inject.Inject;\n"
"import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:361
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class ReactiveFruitService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:364
#, no-wrap
msgid ""
"    @Inject\n"
"    ReactiveMongoClient mongoClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:374
#, no-wrap
msgid ""
"    public Uni<List<Fruit>> list() {\n"
"        return getCollection().find()\n"
"                .map(doc -> {\n"
"                    Fruit fruit = new Fruit();\n"
"                    fruit.setName(doc.getString(\"name\"));\n"
"                    fruit.setDescription(doc.getString(\"description\"));\n"
"                    return fruit;\n"
"                }).collect().asList();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:382
#, no-wrap
msgid ""
"    public Uni<Void> add(Fruit fruit) {\n"
"        Document document = new Document()\n"
"                .append(\"name\", fruit.getName())\n"
"                .append(\"description\", fruit.getDescription());\n"
"        return getCollection().insertOne(document)\n"
"                .onItem().ignore().andContinueWithNull();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:387
#, no-wrap
msgid ""
"    private ReactiveMongoCollection<Document> getCollection() {\n"
"        return mongoClient.getDatabase(\"fruit\").getCollection(\"fruit\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:395
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:397
#, no-wrap
msgid "import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:405
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:410
#, no-wrap
msgid ""
"@Path(\"/reactive_fruits\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public class ReactiveFruitResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:413
#, no-wrap
msgid ""
"    @Inject\n"
"    ReactiveFruitService fruitService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:418
#, no-wrap
msgid ""
"    @GET\n"
"    public Uni<List<Fruit>> list() {\n"
"        return fruitService.list();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:425
#, no-wrap
msgid ""
"    @POST\n"
"    public Uni<List<Fruit>> add(Fruit fruit) {\n"
"        return fruitService.add(fruit)\n"
"                .onItem().ignore().andSwitchTo(this::list);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/mongodb.adoc:427
#, no-wrap
msgid "Simplifying MongoDB Client usage using BSON codec"
msgstr "使用BSON编解码器简化MongoDB客户端的使用"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:430
msgid "By using a Bson `Codec`, the MongoDB Client will take care of the transformation of your domain object to/from a MongoDB `Document` automatically."
msgstr "通过使用Bson `Codec` ，MongoDB 客户端将自动处理您的域对象与 MongoDB `Document` 的相互转化。"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:434
msgid "First you need to create a Bson `Codec` that will tell Bson how to transform your entity to/from a MongoDB `Document`.  Here we use a `CollectibleCodec` as our object is retrievable from the database (it has a MongoDB identifier), if not we would have used a `Codec` instead.  More information in the codec documentation: https://mongodb.github.io/mongo-java-driver/3.10/bson/codecs."
msgstr "首先你需要创建一个Bson `Codec` ，它将告诉Bson如何将你的实体与MongoDB `Document` 的相互转化。这里我们使用一个 `CollectibleCodec` ，因为我们的对象可以从数据库中检索到（它有一个MongoDB标识符），如果不是这样，我们会使用一个 `Codec` 。更多信息见编解码器文档 https://mongodb.github.io/mongo-java-driver/3.10/bson/codecs"

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:438
#: upstream/_versions/2.2/guides/mongodb.adoc:512
#, no-wrap
msgid "package org.acme.mongodb.codec;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:450
#, no-wrap
msgid ""
"import com.mongodb.MongoClientSettings;\n"
"import org.acme.mongodb.Fruit;\n"
"import org.bson.Document;\n"
"import org.bson.BsonWriter;\n"
"import org.bson.BsonValue;\n"
"import org.bson.BsonReader;\n"
"import org.bson.BsonString;\n"
"import org.bson.codecs.Codec;\n"
"import org.bson.codecs.CollectibleCodec;\n"
"import org.bson.codecs.DecoderContext;\n"
"import org.bson.codecs.EncoderContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:452
#, no-wrap
msgid "import java.util.UUID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:454
#, no-wrap
msgid "public class FruitCodec implements CollectibleCodec<Fruit> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:456
#, no-wrap
msgid "    private final Codec<Document> documentCodec;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:460
#, no-wrap
msgid ""
"    public FruitCodec() {\n"
"        this.documentCodec = MongoClientSettings.getDefaultCodecRegistry().get(Document.class);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:468
#, no-wrap
msgid ""
"    @Override\n"
"    public void encode(BsonWriter writer, Fruit fruit, EncoderContext encoderContext) {\n"
"        Document doc = new Document();\n"
"        doc.put(\"name\", fruit.getName());\n"
"        doc.put(\"description\", fruit.getDescription());\n"
"        documentCodec.encode(writer, doc, encoderContext);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:473
#, no-wrap
msgid ""
"    @Override\n"
"    public Class<Fruit> getEncoderClass() {\n"
"        return Fruit.class;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:481
#, no-wrap
msgid ""
"    @Override\n"
"    public Fruit generateIdIfAbsentFromDocument(Fruit document) {\n"
"        if (!documentHasId(document)) {\n"
"            document.setId(UUID.randomUUID().toString());\n"
"        }\n"
"        return document;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:486
#, no-wrap
msgid ""
"    @Override\n"
"    public boolean documentHasId(Fruit document) {\n"
"        return document.getId() != null;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:491
#, no-wrap
msgid ""
"    @Override\n"
"    public BsonValue getDocumentId(Fruit document) {\n"
"        return new BsonString(document.getId());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:504
#, no-wrap
msgid ""
"    @Override\n"
"    public Fruit decode(BsonReader reader, DecoderContext decoderContext) {\n"
"        Document document = documentCodec.decode(reader, decoderContext);\n"
"        Fruit fruit = new Fruit();\n"
"        if (document.getString(\"id\") != null) {\n"
"            fruit.setId(document.getString(\"id\"));\n"
"        }\n"
"        fruit.setName(document.getString(\"name\"));\n"
"        fruit.setDescription(document.getString(\"description\"));\n"
"        return fruit;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:508
msgid "Then you need to create a `CodecProvider` to link this `Codec` to the `Fruit` class."
msgstr "然后你需要创建一个 `CodecProvider` 来把这个 `Codec` 链接到 `Fruit` 类。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:517
#, no-wrap
msgid ""
"import org.acme.mongodb.Fruit;\n"
"import org.bson.codecs.Codec;\n"
"import org.bson.codecs.configuration.CodecProvider;\n"
"import org.bson.codecs.configuration.CodecRegistry;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:526
#, no-wrap
msgid ""
"public class FruitCodecProvider implements CodecProvider {\n"
"    @Override\n"
"    public <T> Codec<T> get(Class<T> clazz, CodecRegistry registry) {\n"
"        if (clazz == Fruit.class) {\n"
"            return (Codec<T>) new FruitCodec();\n"
"        }\n"
"        return null;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:528
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:531
msgid "Quarkus takes care of registering the `CodecProvider` for you."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:533
msgid "Finally, when getting the `MongoCollection` from the database you can use directly the `Fruit` class instead of the `Document` one, the codec will automatically map the `Document` to/from your `Fruit` class."
msgstr "最后，当从数据库中获取 `MongoCollection` 时，你可以直接使用 `Fruit` 类，而不是 `Document` ，编解码器会自动将 `Document` 与 `Fruit` 类相互映射（从 `Fruit` 类映射 `Document` 或者将 `Document` 映射到 `Fruit` 类）。"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:535
msgid "Here is an example of using a `MongoCollection` with the `FruitCodec`."
msgstr "这是一个将 `MongoCollection` 与 `FruitCodec` 一起使用的示例。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:543
#, no-wrap
msgid ""
"import com.mongodb.client.MongoClient;\n"
"import com.mongodb.client.MongoCollection;\n"
"import com.mongodb.client.MongoCursor;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:551
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CodecFruitService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:557
#, no-wrap
msgid ""
"    public List<Fruit> list(){\n"
"        List<Fruit> list = new ArrayList<>();\n"
"        MongoCursor<Fruit> cursor = getCollection().find().iterator();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:567
#, no-wrap
msgid ""
"        try {\n"
"            while (cursor.hasNext()) {\n"
"                list.add(cursor.next());\n"
"            }\n"
"        } finally {\n"
"            cursor.close();\n"
"        }\n"
"        return list;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:571
#, no-wrap
msgid ""
"    public void add(Fruit fruit){\n"
"        getCollection().insertOne(fruit);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:576
#, no-wrap
msgid ""
"    private MongoCollection<Fruit> getCollection(){\n"
"        return mongoClient.getDatabase(\"fruit\").getCollection(\"fruit\", Fruit.class);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/mongodb.adoc:578
#, no-wrap
msgid "The POJO Codec"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:582
msgid "The link:http://mongodb.github.io/mongo-java-driver/3.12/bson/pojos[POJO Codec] provides a set of annotations that enable the customization of the way a POJO is mapped to a MongoDB collection and this codec is initialized automatically by Quarkus"
msgstr "link:http://mongodb.github.io/mongo-java-driver/3.12/bson/pojos[POJO编解码器] 提供了一组注解，可以自定义POJO映射到MongoDB集合的方式，该编解码器由Quarkus自动初始化。"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:585
msgid "One of these annotations is the `@BsonDiscriminator` annotation that allows to storage multiple Java types in a single MongoDB collection by adding a discriminator field inside the document. It can be useful when working with abstract types or interfaces."
msgstr "其中一个注解是 `@BsonDiscriminator` ，它允许通过在文档中添加一个判别字段来在单个MongoDB集合中存储多个Java类型。在处理抽象类型或接口时，它可能很有用。"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:587
msgid "Quarkus will automatically register all the classes annotated with `@BsonDiscriminator` with the POJO codec."
msgstr "Quarkus 将使用 POJO codec自动注册所有使用 `@BsonDiscriminator` 的类。"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:591
msgid "The POJO Codec have enhanced generic support via `PropertyCodecProvider`, Quarkus will automatically register any `PropertyCodecProvider` with the POJO Codec.  When building native executables and using generic types, you might need to register the type arguments for reflection."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/mongodb.adoc:592
#, no-wrap
msgid "Simplifying MongoDB with Panache"
msgstr "用Panache简化MongoDB"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:595
msgid "The link:mongodb-panache[MongoDB with Panache] extension facilitates the usage of MongoDB by providing active record style entities (and repositories) like you have in link:hibernate-orm-panache.html[Hibernate ORM with Panache] and focuses on making your entities trivial and fun to write in Quarkus."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/mongodb.adoc:596
#, no-wrap
msgid "Connection Health Check"
msgstr "连接健康检查"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:600
msgid "If you are using the `quarkus-smallrye-health` extension, `quarkus-mongodb-client` will automatically add a readiness health check to validate the connection to the cluster."
msgstr "如果你使用 `quarkus-smallrye-health` 扩展， `quarkus-mongodb-client` 将自动添加就绪状态检查，以验证与集群的连接。"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:602
msgid "So when you access the `/q/health/ready` endpoint of your application you will have information about the connection validation status."
msgstr "因此，当你访问应用程序的 `/q/health/ready` 端点时，可获得有关于连接验证状态的信息。"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:604
msgid "This behavior can be disabled by setting the `quarkus.mongodb.health.enabled` property to `false` in your `application.properties`."
msgstr "可以通过在 `application.properties` 中将 `quarkus.mongodb.health.enabled` 属性设置为 `false` 来禁用此行为。"

#. type: Title ==
#: upstream/_versions/2.2/guides/mongodb.adoc:605
#, no-wrap
msgid "Metrics"
msgstr "指标"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:609
msgid "If you are using the `quarkus-micrometer` or `quarkus-smallrye-metrics` extension, `quarkus-mongodb-client` can provide metrics about the connection pools.  This behavior must first be enabled by setting the `quarkus.mongodb.metrics.enabled` property to `true` in your `application.properties`."
msgstr "如果你使用 `quarkus-micrometer` 或 `quarkus-smallrye-metrics` 扩展， `quarkus-mongodb-client` 可以提供关于连接池的指标。这种行为必须首先通过在你的 `application.properties` 中设置 `quarkus.mongodb.metrics.enabled` 属性为 `true` 来启用。"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:612
msgid "So when you access the `/q/metrics` endpoint of your application you will have information about the connection pool status.  When using link:smallrye-metrics[SmallRye Metrics], connection pool metrics will be available under the `vendor` scope."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/mongodb.adoc:613
#, no-wrap
msgid "Tracing"
msgstr "跟踪"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:617
msgid "If you are using the `quarkus-smallrye-opentracing` extension, `quarkus-mongodb-client` can register traces about the commands executed.  This behavior must be enabled by setting the `quarkus.mongodb.tracing.enabled` property to `true` in your `application.properties` and adding the dependency `io.opentracing.contrib:opentracing-mongo-common` to your pom.xml (for more info read the link:opentracing#mongodb-client[OpenTracing - MongoDB client] section)."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:619
msgid "Read the link:opentracing[OpenTracing] guide, for how to configure OpenTracing and how to use the Jaeger tracer."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/mongodb.adoc:620
#, no-wrap
msgid "Testing helpers"
msgstr "测试助手"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:623
msgid "To start a MongoDB database for your unit tests, Quarkus provides two `QuarkusTestResourceLifecycleManager` that relies on link:https://github.com/flapdoodle-oss/de.flapdoodle.embed.mongo[Flapdoodle embedded MongoDB]."
msgstr "为了给你的单元测试启动MongoDB数据库，Quarkus提供了两个 `QuarkusTestResourceLifecycleManager` 依赖于 link:https://github.com/flapdoodle-oss/de.flapdoodle.embed.mongo[Flapdoodle嵌入式MongoDB] 。"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:625
msgid "`io.quarkus.test.mongodb.MongoTestResource` will start a single instance on port 27017."
msgstr "`io.quarkus.test.mongodb.MongoTestResource` 将在27017端口启动一个单一的实例。"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:626
msgid "`io.quarkus.test.mongodb.MongoReplicaSetTestResource` will start a replicaset with two instances, one on port 27017 and the other on port 27018."
msgstr "`io.quarkus.test.mongodb.MongoReplicaSetTestResource` 将启动一个有两个实例的复制集，一个在27017端口，另一个在27018端口。"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:628
msgid "To use them, you need to add the `io.quarkus:quarkus-test-mongodb` dependency to your pom.xml."
msgstr "要使用它们，你需要在你的pom.xml中添加 `io.quarkus:quarkus-test-mongodb` 依赖。"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:630
msgid "For more information about the usage of a `QuarkusTestResourceLifecycleManager` please read link:getting-started-testing#quarkus-test-resource[Quarkus test resource]."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/mongodb.adoc:631
#, no-wrap
msgid "The legacy client"
msgstr "旧客户端"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:635
msgid "We don't include the legacy MongoDB client by default. It contains the now retired MongoDB Java API (DB, DBCollection,... )  and the `com.mongodb.MongoClient` that is now superseded by `com.mongodb.client.MongoClient`."
msgstr "我们默认不包括旧版的MongoDB客户端。它包含现已废弃的MongoDB Java API（DB、DBCollection......）以及现已被 `com.mongodb.client.MongoClient` 所取代的 `com.mongodb.MongoClient` 。"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:637
msgid "If you want to use the legacy API, you need to add the following dependency to your `pom.xml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:644
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>org.mongodb</groupId>\n"
"    <artifactId>mongodb-driver-legacy</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/mongodb.adoc:646
#, no-wrap
msgid "Building a native executable"
msgstr "构建一个本地可执行文件"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:649
msgid "You can use the MongoDB client in a native executable."
msgstr "你可以在一个本地可执行文件中使用MongoDB客户端。"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:651
msgid "If you want to use SSL/TLS encryption, you need to add these properties in your `application.properties`:"
msgstr "如果你想使用SSL/TLS加密，你需要在你的 `application.properties` 中添加这些属性："

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb.adoc:656
#, no-wrap
msgid ""
"quarkus.mongodb.tls=true\n"
"quarkus.mongodb.tls-insecure=true # only if TLS certificate cannot be validated\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:659
msgid "You can then build a native executable with the usual command `./mvnw package -Pnative`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:661
msgid "Running it is as simple as executing `./target/mongodb-quickstart-1.0.0-SNAPSHOT-runner`."
msgstr "运行它就像执行 `./target/mongodb-quickstart-1.0.0-SNAPSHOT-runner` 一样简单。"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:663
msgid "You can then point your browser to `http://localhost:8080/fruits.html` and use your application."
msgstr "然后你可以使用的浏览器访问 `<a href=\"http://localhost:8080/fruits.html\" class=\"bare\">http://localhost:8080/fruits.html</a>` 来使用你的应用程序。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/mongodb.adoc:667
msgid "Currently, Quarkus doesn't support the `mongodb+srv` protocol in native mode."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/mongodb.adoc:669
msgid "link:https://docs.mongodb.com/manual/core/security-client-side-encryption/[Client-Side Field Level Encryption] is also not supported in native mode."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/mongodb.adoc:677
msgid "If you encounter the following error when running your application in native mode: + `Failed to encode 'MyObject'. Encoding 'myVariable' errored with: Can't find a codec for class org.acme.MyVariable.` + This means that the `org.acme.MyVariable` class is not known to GraalVM, the remedy is to add the `@RegisterForReflection` annotation to your `MyVariable class`.  More details about the `@RegisterForReflection` annotation can be found on the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr "如果你在本地模式下运行你的应用程序时遇到以下错误。+ `Failed to encode 'MyObject'. Encoding 'myVariable' errored with: Can’t find a codec for class org.acme.MyVariable.` + 这意味着GeralVM不知道 `org.acme.MyVariable` 类，补救措施是将 `@RegisterForReflection` 注解添加到你的 `MyVariable class` 。关于 `@RegisterForReflection` 注解的更多细节可以在 link:writing-native-applications-tips.html#registerForReflection[本地应用程序提示] 页面找到。"

#. type: Title ==
#: upstream/_versions/2.2/guides/mongodb.adoc:679
#, no-wrap
msgid "Conclusion"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb.adoc:682
msgid "Accessing a MongoDB database from a MongoDB Client is easy with Quarkus as it provides configuration and native support for it."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/mongodb.adoc:683
#, no-wrap
msgid "Configuration Reference"
msgstr "配置参考"
