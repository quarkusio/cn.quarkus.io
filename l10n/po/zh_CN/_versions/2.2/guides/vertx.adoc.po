# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/vertx.adoc:6
#, no-wrap
msgid "Using Eclipse Vert.x API from a Quarkus Application"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:12
msgid "https://vertx.io[Vert.x] is a toolkit for building reactive applications.  As described in the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture], Quarkus uses Vert.x underneath."
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_versions/2.2/guides/vertx.adoc:13
#, no-wrap
msgid "Quarkus Reactive Core"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/2.2/guides/vertx.adoc:13
#, no-wrap
msgid "quarkus-reactive-core.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:16
msgid "Quarkus applications can access and use the Vert.x APIs."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:18
msgid "This guide presents how you can build a Quarkus application using:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:20
msgid "the managed instance of Vert.x"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:21
msgid "the Vert.x event bus"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:22
msgid "the Vert.x Web Client"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:25
msgid "It's an introductory guide.  The xref:vertx-reference.adoc[Vert.x reference guide] covers more advanced features such as verticles, and native transports."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/vertx.adoc:26
#, no-wrap
msgid "Architecture"
msgstr "应用结构"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:29
msgid "We are going to build a simple application exposing four HTTP endpoints:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:31
msgid "`/vertx/lorem` returns the content from a small file"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:32
msgid "`/vertx/book` returns the content from a large file (a book)"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:33
msgid "`/vertx/hello` uses the Vert.x event bus to produce the response"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:34
msgid "`/vertx/web` uses the Vert.x Web Client to retrieve data from Wikipedia"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_versions/2.2/guides/vertx.adoc:35
#, no-wrap
msgid "Architecture of the Vert.x guide"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/2.2/guides/vertx.adoc:35
#, no-wrap
msgid "quarkus-vertx-guide-architecture.png"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/vertx.adoc:37
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:41
msgid "We recommend that you follow the instructions in the following sections and create the application step by step.  However, you can go right to the completed example."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:43
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:45
msgid "The solution is located in the `vertx-quickstart` {quickstarts-tree-url}/vertx-quickstart[directory]."
msgstr ""

#. type: Block title
#: upstream/_versions/2.2/guides/vertx.adoc:47
#, no-wrap
msgid "Mutiny"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/vertx.adoc:51
msgid "This guide uses the Mutiny API.  If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive, reactive programming library]."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/vertx.adoc:54
#, no-wrap
msgid "Bootstrapping the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:58
msgid "Click on https://code.quarkus.io/?a=quarkus-getting-started-vertx&nc=true&e=resteasy-reactive-jackson&e=vertx[this link] to configure your application.  It selected a few extensions:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:60
msgid "`resteasy-reactive-jackson`, which also brings `resteasy reactive`. We are going to use it to expose our HTTP endpoints."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:61
msgid "`vertx`, which provides access to the underlying managed Vert.x"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:64
msgid "Click on the `Generate your application` button, download the zip file and unzip it.  Then, open the project in your favorite IDE."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:66
msgid "If you open the generated `pom.xml` file, you can see the selected extensions:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:77
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-resteasy-reactive-jackson</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-vertx</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:80
msgid "While you are in the `pom.xml`, add the following dependency:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:87
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.smallrye.reactive</groupId>\n"
"  <artifactId>smallrye-mutiny-vertx-web-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:90
msgid "This dependency provides the Vert.x Web Client, which we will be using to implement the `/web` endpoint."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/vertx.adoc:92
#, no-wrap
msgid "Accessing the managed Vert.x instance"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:96
msgid "Create the `src/main/java/org/acme/VertxResource.java` file.  It will contain our HTTP endpoints."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:98
msgid "In this file, copy the following code:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:102
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:104
#, no-wrap
msgid "import io.vertx.mutiny.core.Vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:107
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:110
#, no-wrap
msgid ""
"@Path(\"/vertx\")                        // <1>\n"
"public class VertxResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:112
#, no-wrap
msgid "    private final Vertx vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:118
#, no-wrap
msgid ""
"    @Inject                             // <2>\n"
"    public VertxResource(Vertx vertx) { // <3>\n"
"        this.vertx = vertx;             // <4>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:120
msgid "Declare the root HTTP path."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:121
msgid "We use constructor injection to receive the managed Vert.x instance. Field injection works too."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:122
msgid "Receives the Vert.x instance as a constructor parameter"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:123
msgid "Store the managed Vert.x instance into a field."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:125
msgid "With this, we can start implementing the endpoints."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/vertx.adoc:126
#, no-wrap
msgid "Using Vert.x Core API"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:131
msgid "The injected Vert.x instance provides a set of APIs you can use.  The one we are going to use in this section is the Vert.x File System.  It provides a non-blocking API to access files."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:134
msgid "In the `src/main/resource` directory, create a `lorem.txt` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:138
#, no-wrap
msgid "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:141
msgid "Then, in the `VertxResource` file add the following method:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:150
#, no-wrap
msgid ""
"@GET                                                                    // <1>\n"
"@Path(\"/lorem\")\n"
"public Uni<String> readShortFile() {                                    // <2>\n"
"    return vertx.fileSystem().readFile(\"lorem.txt\")                     // <3>\n"
"            .onItem().transform(content -> content.toString(\"UTF-8\"));  // <4>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:152
msgid "This endpoint handles HTTP `GET` request on path `/lorem` (so the full path will be `vertx/lorem`)"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:153
msgid "As the Vert.x API is asynchronous, our method returns a `Uni`. The content is written into the HTTP response when the asynchronous operation represented by the Uni completes."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:154
msgid "We use the Vert.x file system API to read the created file"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:155
msgid "Once the file is read, the content is stored in an in-memory buffer.  We transform this buffer into a String."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:157
msgid "In a terminal, navigate to the root of the project and run:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:162
#, no-wrap
msgid "> ./mvnw quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:165
msgid "In another terminal, run:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:169
#, no-wrap
msgid "> curl http://localhost:8080/vertx/lorem\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:172
msgid "You should see the content of the file printed in the console."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:174
msgid "Quarkus provides other ways to serve static files. This is an example made for the guide."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/vertx.adoc:175
#, no-wrap
msgid "Using Vert.x stream capability"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:179
msgid "Reading a file and storing the content in memory works for small files, but not big ones.  In this section, we will see how you can use Vert.x streaming capability."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:183
msgid "First, download https://www.gutenberg.org/files/2600/2600-0.txt[War and Peace] and store it in `src/main/resources/book.txt`.  It's a 3.2 Mb file, which, while not being huge, illustrates the purpose of streams.  This time, we will not accumulate the file's content in memory and write it in one batch, but read it chunk by chunk and write these chunks into the HTTP response one by one."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:185
msgid "So, you should have the following files in your project:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:206
#, no-wrap
msgid ""
".\n"
"├── mvnw\n"
"├── mvnw.cmd\n"
"├── pom.xml\n"
"├── README.md\n"
"├── src\n"
"│  └── main\n"
"│     ├── docker\n"
"│     │  ├── ...\n"
"│     ├── java\n"
"│     │  └── org\n"
"│     │     └── acme\n"
"│     │        └── VertxResource.java\n"
"│     └── resources\n"
"│        ├── application.properties\n"
"│        ├── book.txt\n"
"│        └── lorem.txt\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:209
msgid "Add the following method to the `VertxResource` class:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:222
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/book\")\n"
"public Multi<String> readLargeFile() {                              // <1>\n"
"    return vertx.fileSystem().open(\"book.txt\",                      // <2>\n"
"                    new OpenOptions().setRead(true)\n"
"            )\n"
"            .onItem().transformToMulti(file -> file.toMulti())       // <3>\n"
"            .onItem().transform(content -> content.toString(\"UTF-8\") // <4>\n"
"                    + \"\\n------------\\n\");                           // <5>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:224
msgid "This time, we return a Multi as we want to stream the chunks"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:225
msgid "We open the file using the `open` method. It returns a `Uni<AsyncFile>`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:226
msgid "When the file is opened, we retrieve a `Multi` which will contain the chunks."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:227
msgid "For each chunk, we produce a String"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:228
msgid "To visually see the chunks in the response, we append a separator"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:230
msgid "Then, in a terminal, run:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:234
#, no-wrap
msgid "> curl http://localhost:8080/vertx/book\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:238
msgid "It should retrieve the book content.  In the output you should see the separator like:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:243
#, no-wrap
msgid ""
"...\n"
"The little princess had also left the tea table and followed Hélène.\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:245
#, no-wrap
msgid "“Wait a moment, I’ll get my work.... Now then, what\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:250
#, no-wrap
msgid ""
" are you\n"
"thinking of?” she went on, turning to Prince Hippolyte. “Fetch me my\n"
"workbag.”\n"
"...\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/vertx.adoc:252
#, no-wrap
msgid "Using the event bus"
msgstr "使用事件总线"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:262
msgid "One of the core features of Vert.x is the https://vertx.io/docs/vertx-core/java/#event_bus[event bus].  It provides a message-based backbone to your application.  So, you can have components interacting using asynchronous message passing, and so decouple your components.  You can send a message to a single consumer, or dispatch to multiple consumers, or implement a request-reply interaction, where you send a message (request) and expect a response.  This is what we are going to use in this section.  Our `VertxResource` will send a message containing a name to the `greetings` address.  Another component will receive the message and produce the \"hello $name\" response.  The `VertxResource` will receive the response and return it as the HTTP response."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:264
msgid "So, first, let's extend our `VertxResource` class with the following code:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:267
#: upstream/_versions/2.2/guides/vertx.adoc:337
msgid "[source, java]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:270
#, no-wrap
msgid ""
"@Inject\n"
"EventBus bus;                                                   // <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:277
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/hello\")\n"
"public Uni<String> hello(@QueryParam(\"name\") String name) {     // <2>\n"
"    return bus.<String>request(\"greetings\", name)               // <3>\n"
"            .onItem().transform(response -> response.body());   // <4>\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:282
#, no-wrap
msgid ""
"1. Inject the event bus. Alternatively you can use `vertx.eventBus()`.\n"
"2. We receive a _name_ as a query parameter\n"
"3. We use the `request` method to initiate the request-reply interaction. We send the name to the \"greetings\" address.\n"
"4. When the response is received, we extract the body and return it as the HTTP response\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:285
#, no-wrap
msgid ""
"Now, we need the other side: the component receiving the name and replying.\n"
"Create the `src/main/java/org/acme/GreetingService.java` file with the following content:\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:287
#: upstream/_versions/2.2/guides/vertx.adoc:354
#, no-wrap
msgid "[source, java]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:289
msgid "package org.acme;"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:291
msgid "import io.quarkus.vertx.ConsumeEvent;"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:293
msgid "import javax.enterprise.context.ApplicationScoped;"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:296
#, no-wrap
msgid ""
"@ApplicationScoped                          // <1>\n"
"public class GreetingService {\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:302
#, no-wrap
msgid ""
"    @ConsumeEvent(\"greetings\")              // <2>\n"
"    public String hello(String name) {      // <3>\n"
"        return \"Hello \" + name;             // <4>\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:307
#, no-wrap
msgid ""
"1. Declaring a CDI Bean in the Application scope. Quarkus will create a single instance of this class.\n"
"2. Use the `@ConsumeEvent` annotation to declare a consumer. It is possible to use the Vert.x API directly too. TODO LINK REF\n"
"3. Receive the message payload as a method parameter. The returned object will be the reply.\n"
"4. Return the response. This response is sent back to the `VertxResource` class\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:310
#, no-wrap
msgid ""
"Let's try this.\n"
"In a terminal, run:\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:313
#: upstream/_versions/2.2/guides/vertx.adoc:374
#, no-wrap
msgid "[source, bash]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:315
msgid "curl \"http://localhost:8080/vertx/hello?name=bob\""
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:318
#, no-wrap
msgid "You should get the expected `Hello bob` message back.\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/vertx.adoc:319
#, no-wrap
msgid "Using Vert.x Clients"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:325
msgid "So far, we have used the Vert.x Core API.  Vert.x offers much more.  It provides a vast ecosystem.  In this section, we will see how you can use the Vert.x Web Client, a reactive HTTP client."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:329
msgid "Note that some Quarkus extensions are wrapping Vert.x clients and manage them for you.  That's the case for the reactive data sources, Redis, mail...  That's not the case with the Web Client."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:332
msgid "Remember, at the beginning of the guide, we added the `smallrye-mutiny-vertx-web-client` dependency to our `pom.xml` file.  It's now time to use it."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:335
msgid "First, we need to create an instance of `WebClient`.  Extend the `VertxResource` class with the `client` field and the creation of the web client in the constructor:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:340
#, no-wrap
msgid ""
"private final Vertx vertx;\n"
"private final WebClient client;            // <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:346
#, no-wrap
msgid ""
"@Inject\n"
"public VertxResource(Vertx vertx) {\n"
"    this.vertx = vertx;\n"
"    this.client = WebClient.create(vertx); // <2>\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:349
#, no-wrap
msgid ""
"1. Store the `WebClient`, so we will be able to use it in our HTTP endpoint\n"
"2. Create the `WebClient`. Be sure to use the `io.vertx.mutiny.ext.web.client.WebClient` class\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:352
#, no-wrap
msgid ""
"Let's now implement a new HTTP endpoint that queries the Wikipedia API to retrieve the pages about Quarkus in the different languages.\n"
"Add the following method to the `VertxResource` class:\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:356
msgid "private static final String URL = \"https://en.wikipedia.org/w/api.php?action=parse&page=Quarkus&format=json&prop=langlinks\";"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:365
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/web\")\n"
"public Uni<JsonArray> retrieveDataFromWikipedia() {                     // <1>\n"
"    return client.getAbs(URL).send()                                    // <2>\n"
"            .onItem().transform(HttpResponse::bodyAsJsonObject)         // <3>\n"
"            .onItem().transform(json -> json.getJsonObject(\"parse\")     // <4>\n"
"                                        .getJsonArray(\"langlinks\"));\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:370
#, no-wrap
msgid ""
"1. This endpoint returns a JSON Array. Vert.x provides a convenient way to manipulate JSON Object and Array. More details about these in xref:vertx-reference.adoc#using-vert-x-json[the reference guide].\n"
"2. Send a `GET` request to the Wikipedia API\n"
"3. Once the response is received, extract it as a JSON Object\n"
"4. Extract the `langlinks` array from the response.\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:372
#, no-wrap
msgid "Then, invoke the endpoint using:\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vertx.adoc:376
msgid "curl http://localhost:8080/vertx/web"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:380
#, no-wrap
msgid "The response indicates that, in addition to the English page, there are a German and a French page about Quarkus on wikipedia.\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/vertx.adoc:381
#, no-wrap
msgid "Going further"
msgstr "进一步探索"

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:386
msgid "This guide introduced how you can use Vert.x APIs from a Quarkus application.  It's just a brief overview.  If you want to know more, check the xref:vertx-reference.adoc[reference guide about Vert.x in Quarkus]."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:390
msgid "As we have seen, the event bus is the connecting tissue of Vert.x applications.  Quarkus integrates it so different beans can interact with asynchronous messages.  This part is covered in the link:reactive-event-bus[event bus documentation]."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vertx.adoc:391
msgid "Learn how to implement highly performant, low-overhead database applications on Quarkus with the link:reactive-sql-clients[Reactive SQL Clients]."
msgstr ""
