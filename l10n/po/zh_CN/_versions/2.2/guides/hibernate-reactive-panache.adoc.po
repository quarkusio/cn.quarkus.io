# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:6
#, no-wrap
msgid "Simplified Hibernate Reactive with Panache"
msgstr "简化的Hibernate 响应式与Panache"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:15
msgid "link:http://hibernate.org/reactive/[Hibernate Reactive] is the only reactive JPA implementation and offers you the full breadth of an Object Relational Mapper allowing you to access your database over reactive drivers.  It makes complex mappings possible, but it does not make simple and common mappings trivial.  Hibernate Reactive with Panache focuses on making your entities trivial and fun to write in Quarkus."
msgstr "link:http://hibernate.org/reactive/[Hibernate Reactive] 是唯一的响应式JPA实现，提供了全方位的对象关系映射（Object Relational Mapper，简称ORM）支持，支持通过响应式驱动访问数据库。它使复杂的映射成为可能，它支持编写复杂的映射，但编写简单常用的映射却不够简便。Hibernate Reactive Panache专注于简化ORM实体，让你的Quarkus开发有趣。"

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:16
#, no-wrap
msgid "First: an example"
msgstr "第一：一个例子"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:19
msgid "What we're doing in Panache is allow you to write your Hibernate Reactive entities like this:"
msgstr "Panache允许这样编写Hibernate Reactive实体："

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:27
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:133
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:215
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:31
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:219
#, no-wrap
msgid ""
"    public static Uni<Person> findByName(String name){\n"
"        return find(\"name\", name).firstResult();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:35
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:223
#, no-wrap
msgid ""
"    public static Uni<List<Person>> findAlive(){\n"
"        return list(\"status\", Status.Alive);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:40
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:228
#, no-wrap
msgid ""
"    public static Uni<Long> deleteStefs(){\n"
"        return delete(\"name\", \"Stef\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:44
msgid "You have noticed how much more compact and readable the code is? Does this look interesting? Read on!"
msgstr "你有注意到代码的紧凑性和可读性大大提高了吗？看起来很有趣吧？请继续阅读!"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:46
msgid "the `list()` method might be surprising at first. It takes fragments of HQL (JP-QL) queries and contextualizes the rest. That makes for very concise but yet readable code."
msgstr " `list()` 方法一开始可能会让人吃惊。它只需要接收HQL（JP-QL）查询语句的片段，并对查询语句其余部分进行上下文推断处理。这使得代码非常简明，但也不失可读性。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:49
msgid "what was described above is essentially the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[active record pattern], sometimes just called the entity pattern.  Hibernate with Panache also allows for the use of the more classical link:https://martinfowler.com/eaaCatalog/repository.html[repository pattern] via `PanacheRepository`."
msgstr "上面所描述的编码模式本质上是 link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[Active Record模式] ，有时也称为实体模式。Panache也支持通过 `PanacheRepository` 使用更经典的 link:https://martinfowler.com/eaaCatalog/repository.html[Repository模式] 。"

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:50
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:54
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:56
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:58
msgid "The solution is located in the `hibernate-reactive-panache-quickstart` {quickstarts-tree-url}/hibernate-reactive-panache-quickstart[directory]."
msgstr "该解决方案位于 `hibernate-reactive-panache-quickstart` {quickstarts-tree-url}/hibernate-reactive-panache-quickstart[目录] 中。"

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:60
#, no-wrap
msgid "Setting up and configuring Hibernate Reactive with Panache"
msgstr "在Hibernate Reactive中配置Panache"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:63
msgid "To get started:"
msgstr "起步："

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:65
msgid "add your settings in `{config-file}`"
msgstr "在 `{config-file}` 中添加你的设置。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:66
msgid "annotate your entities with `@Entity`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:67
msgid "make your entities extend `PanacheEntity` (optional if you are using the repository pattern)"
msgstr "实体类改为继承 `PanacheEntity` 类（使用Repository模式时为可选操作）。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:69
msgid "Follow the link:hibernate-orm#setting-up-and-configuring-hibernate-orm[Hibernate set-up guide for all configuration]."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:71
msgid "In your `pom.xml`, add the following dependencies:"
msgstr "在你的 `pom.xml` 文件中添加以下依赖项："

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:73
msgid "the Hibernate Reactive with Panache extension"
msgstr "Hibernate Reactive with Panache扩展"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:74
msgid "your reactive driver extension (`quarkus-reactive-pg-client`, `quarkus-reactive-mysql-client`, `quarkus-reactive-db2-client`, ...)"
msgstr "响应式驱动扩展 ( `quarkus-reactive-pg-client` , `quarkus-reactive-mysql-client` , `quarkus-reactive-db2-client` , ...)"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:83
#, no-wrap
msgid ""
"<dependencies>\n"
"    <!-- Hibernate Reactive specific dependencies -->\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-hibernate-reactive-panache</artifactId>\n"
"    </dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:90
#, no-wrap
msgid ""
"    <!-- JDBC driver dependencies -->\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-reactive-pg-client</artifactId>\n"
"    </dependency>\n"
"</dependencies>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:93
msgid "Then add the relevant configuration properties in `{config-file}`."
msgstr "然后在 `{config-file}` 中添加相关的配置属性。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:101
#, no-wrap
msgid ""
"# configure your datasource\n"
"quarkus.datasource.db-kind = postgresql\n"
"quarkus.datasource.username = sarah\n"
"quarkus.datasource.password = connor\n"
"quarkus.datasource.reactive.url = vertx-reactive:postgresql://localhost:5432/mydatabase\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:104
#, no-wrap
msgid ""
"# drop and create the database at startup (use `update` to only update the schema)\n"
"quarkus.hibernate-orm.database.generation = drop-and-create\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:106
#, no-wrap
msgid "Solution 1: using the active record pattern"
msgstr "解决方案1：使用active record（活动记录）模式"

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:108
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:233
#, no-wrap
msgid "Defining your entity"
msgstr "定义你的实体"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:112
msgid "To define a Panache entity, simply extend `PanacheEntity`, annotate it with `@Entity` and add your columns as public fields:"
msgstr "要定义一个Panache实体类，只需继承 `PanacheEntity` ，增加 `@Entity` 注解，并将数据库列作为公共字段添加到实体类："

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:121
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:125
msgid "You can put all your JPA column annotations on the public fields. If you need a field to not be persisted, use the `@Transient` annotation on it. If you need to write accessors, you can:"
msgstr "这些公共字段可以添加任何JPA列注解。如果你不想持久化某个字段，给它增加 `@Transient` 注解即可。如果你需要编写访问器，可以："

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:138
#, no-wrap
msgid ""
"    // return name as uppercase in the model\n"
"    public String getName(){\n"
"        return name.toUpperCase();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:144
#, no-wrap
msgid ""
"    // store all names in lowercase in the DB\n"
"    public void setName(String name){\n"
"        this.name = name.toLowerCase();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:149
msgid "And thanks to our field access rewrite, when your users read `person.name` they will actually call your `getName()` accessor, and similarly for field writes and the setter.  This allows for proper encapsulation at runtime as all fields calls will be replaced by the corresponding getter/setter calls."
msgstr "而且由于我们的字段访问重写，当你的用户读取 `person.name` ，他们实际上会调用你的 `getName()` 方法，类似的还有字段写入和设置器。这允许在运行时进行适当的封装，因为所有字段的调用都将被相应的getter/setter调用所取代。"

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:150
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:316
#, no-wrap
msgid "Most useful operations"
msgstr "最有用的操作"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:153
msgid "Once you have written your entity, here are the most common operations you will be able to perform:"
msgstr "编写实体后，可以执行以下最常见的操作："

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:161
#, no-wrap
msgid ""
"// creating a person\n"
"Person person = new Person();\n"
"person.name = \"Stef\";\n"
"person.birth = LocalDate.of(1910, Month.FEBRUARY, 1);\n"
"person.status = Status.Alive;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:164
#, no-wrap
msgid ""
"// persist it\n"
"Uni<Void> persistOperation = person.persist();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:167
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:333
#, no-wrap
msgid ""
"// note that once persisted, you don't need to explicitly save your entity: all\n"
"// modifications are automatically persisted on transaction commit.\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:173
#, no-wrap
msgid ""
"// check if it's persistent\n"
"if(person.isPersistent()){\n"
"    // delete it\n"
"    Uni<Void> deleteOperation = person.delete();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:176
#, no-wrap
msgid ""
"// getting a list of all Person entities\n"
"Uni<List<Person>> allPersons = Person.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:179
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"Uni<Person> personById = Person.findById(23L);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:182
#, no-wrap
msgid ""
"// finding all living persons\n"
"Uni<List<Person>> livingPersons = Person.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:185
#, no-wrap
msgid ""
"// counting all persons\n"
"Uni<Long> countAll = Person.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:188
#, no-wrap
msgid ""
"// counting all living persons\n"
"Uni<Long> countAlive = Person.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:191
#, no-wrap
msgid ""
"// delete all living persons\n"
"Uni<Long> deleteAliveOperation = Person.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:194
#, no-wrap
msgid ""
"// delete all persons\n"
"Uni<Long> deleteAllOperation = Person.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:197
#, no-wrap
msgid ""
"// delete by id\n"
"Uni<Boolean> deleteByIdOperation = Person.deleteById(23L);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:200
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"Uni<Integer> updateOperation = Person.update(\"name = 'Mortal' where status = ?1\", Status.Alive);\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:202
#, no-wrap
msgid "Adding entity methods"
msgstr "添加实体方法"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:207
msgid "Add custom queries on your entities inside the entities themselves.  That way, you and your co-workers can find them easily, and queries are co-located with the object they operate on.  Adding them as static methods in your entity class is the Panache Active Record way."
msgstr "在实体本身内部的实体上添加自定义查询。这样，您和您的同事可以轻松找到它们，并且查询与他们操作的对象位于同一位置。将它们作为静态方法添加到实体类中是 Panache Active Record 方式。"

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:230
#, no-wrap
msgid "Solution 2: using the repository pattern"
msgstr "解决方案2：使用资源库模式"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:236
msgid "When using the repository pattern, you can define your entities as regular JPA entities."
msgstr "使用Repository模式时，可以将实体类定义为普通的JPA实体。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:245
#, no-wrap
msgid ""
"@Entity\n"
"public class Person {\n"
"    @Id @GeneratedValue private Long id;\n"
"    private String name;\n"
"    private LocalDate birth;\n"
"    private Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:271
#, no-wrap
msgid ""
"    public Long getId(){\n"
"        return id;\n"
"    }\n"
"    public void setId(Long id){\n"
"        this.id = id;\n"
"    }\n"
"    public String getName() {\n"
"        return name;\n"
"    }\n"
"    public void setName(String name) {\n"
"        this.name = name;\n"
"    }\n"
"    public LocalDate getBirth() {\n"
"        return birth;\n"
"    }\n"
"    public void setBirth(LocalDate birth) {\n"
"        this.birth = birth;\n"
"    }\n"
"    public Status getStatus() {\n"
"        return status;\n"
"    }\n"
"    public void setStatus(Status status) {\n"
"        this.status = status;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:275
msgid "If you don't want to bother defining getters/setters for your entities, you can make them extend `PanacheEntityBase` and Quarkus will generate them for you. You can even extend `PanacheEntity` and take advantage of the default ID it provides."
msgstr "如果你不想自己定义实体的getter和setter方法，可以让实体类继承 `PanacheEntityBase` ，Quarkus将自动生成getter和setter方法。你也可以继承 `PanacheEntity` ，相比 `PanacheEntityBase` ，其优势是它还提供默认的ID字段。"

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:276
#, no-wrap
msgid "Defining your repository"
msgstr "定义你的存储库"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:280
msgid "When using Repositories, you get the exact same convenient methods as with the active record pattern, injected in your Repository, by making them implements `PanacheRepository`:"
msgstr "使用 Repository 模式时，通过实现 `PanacheRepository` 接口，你可以使用与Active Record模式下完全相同的便捷方法："

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:285
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheRepository<Person> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:287
#, no-wrap
msgid "   // put your custom logic here as instance methods\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:291
#, no-wrap
msgid ""
"   public Uni<Person> findByName(String name){\n"
"       return find(\"name\", name).firstResult();\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:295
#, no-wrap
msgid ""
"   public Uni<List<Person>> findAlive(){\n"
"       return list(\"status\", Status.Alive);\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:300
#, no-wrap
msgid ""
"   public Uni<Long> deleteStefs(){\n"
"       return delete(\"name\", \"Stef\");\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:304
msgid "All the operations that are defined on `PanacheEntityBase` are available on your repository, so using it is exactly the same as using the active record pattern, except you need to inject it:"
msgstr "`PanacheEntityBase` 中定义的所有方法都可以在你的Repository类上使用，所以它使用起来与Active Record模式完全一样，只是你需要注入Repository类的实例："

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:309
#, no-wrap
msgid ""
"@Inject\n"
"PersonRepository personRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:314
#, no-wrap
msgid ""
"@GET\n"
"public Uni<Long> count(){\n"
"    return personRepository.count();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:319
msgid "Once you have written your repository, here are the most common operations you will be able to perform:"
msgstr "编写存储库后，您可以执行以下最常见的操作："

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:327
#, no-wrap
msgid ""
"// creating a person\n"
"Person person = new Person();\n"
"person.setName(\"Stef\");\n"
"person.setBirth(LocalDate.of(1910, Month.FEBRUARY, 1));\n"
"person.setStatus(Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:330
#, no-wrap
msgid ""
"// persist it\n"
"Uni<Void> persistOperation = personRepository.persist(person);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:339
#, no-wrap
msgid ""
"// check if it's persistent\n"
"if(personRepository.isPersistent(person)){\n"
"    // delete it\n"
"    Uni<Void> deleteOperation = personRepository.delete(person);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:342
#, no-wrap
msgid ""
"// getting a list of all Person entities\n"
"Uni<List<Person>> allPersons = personRepository.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:345
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"Uni<Person> personById = personRepository.findById(23L);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:348
#, no-wrap
msgid ""
"// finding all living persons\n"
"Uni<List<Person>> livingPersons = personRepository.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:351
#, no-wrap
msgid ""
"// counting all persons\n"
"Uni<Long> countAll = personRepository.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:354
#, no-wrap
msgid ""
"// counting all living persons\n"
"Uni<Long> countAlive = personRepository.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:357
#, no-wrap
msgid ""
"// delete all living persons\n"
"Uni<Long> deleteLivingOperation = personRepository.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:360
#, no-wrap
msgid ""
"// delete all persons\n"
"Uni<Long> deleteAllOperation = personRepository.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:363
#, no-wrap
msgid ""
"// delete by id\n"
"Uni<Boolean> deleteByIdOperation = personRepository.deleteById(23L);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:366
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"Uni<Integer> updateOperation = personRepository.update(\"name = 'Mortal' where status = ?1\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:371
msgid "The rest of the documentation show usages based on the active record pattern only, but keep in mind that they can be performed with the repository pattern as well.  The repository pattern examples have been omitted for brevity."
msgstr "其余的文档只展示了基于活动记录模式的用法，但请记住，这些用法也可以用资源库模式来执行。为了简洁起见，已省略存储库模式示例。"

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:372
#, no-wrap
msgid "Advanced Query"
msgstr "高级查询"

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:374
#, no-wrap
msgid "Paging"
msgstr "分页"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:378
msgid "You should only use the `list` methods if your table contains small enough data sets. For larger data sets you can use the `find` method equivalents, which return a `PanacheQuery` on which you can do paging:"
msgstr "如果你的表数据量很小，你应该只用到 `list` 方法。对于较大的数据集，你可以使用对应的 `find` 方法，它返回一个 `PanacheQuery` ，可以对其进行分页查询操作："

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:383
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:419
#, no-wrap
msgid ""
"// create a query for all living persons\n"
"PanacheQuery<Person> livingPersons = Person.find(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:386
#, no-wrap
msgid ""
"// make it use pages of 25 entries at a time\n"
"livingPersons.page(Page.ofSize(25));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:389
#, no-wrap
msgid ""
"// get the first page\n"
"Uni<List<Person>> firstPage = livingPersons.list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:392
#, no-wrap
msgid ""
"// get the second page\n"
"Uni<List<Person>> secondPage = livingPersons.nextPage().list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:395
#, no-wrap
msgid ""
"// get page 7\n"
"Uni<List<Person>> page7 = livingPersons.page(Page.of(7, 25)).list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:398
#, no-wrap
msgid ""
"// get the number of pages\n"
"Uni<Integer> numberOfPages = livingPersons.pageCount();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:401
#, no-wrap
msgid ""
"// get the total number of entities returned by this query without paging\n"
"Uni<Long> count = livingPersons.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:407
#, no-wrap
msgid ""
"// and you can chain methods of course\n"
"Uni<List<Person>> persons = Person.find(\"status\", Status.Alive)\n"
"        .page(Page.ofSize(25))\n"
"        .nextPage()\n"
"        .list();\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:410
msgid "The `PanacheQuery` type has many other methods to deal with paging and returning streams."
msgstr "`PanacheQuery` 类型有许多其他方法来处理分页和返回流。"

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:411
#, no-wrap
msgid "Using a range instead of pages"
msgstr "使用range而不是pages"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:414
msgid "`PanacheQuery` also allows range-based queries."
msgstr "`PanacheQuery` 也允许基于范围的查询。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:422
#, no-wrap
msgid ""
"// make it use a range: start at index 0 until index 24 (inclusive).\n"
"livingPersons.range(0, 24);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:425
#, no-wrap
msgid ""
"// get the range\n"
"Uni<List<Person>> firstRange = livingPersons.list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:428
#, no-wrap
msgid ""
"// to get the next range, you need to call range again\n"
"Uni<List<Person>> secondRange = livingPersons.range(25, 49).list();\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:434
msgid "You cannot mix ranges and pages: if you use a range, all methods that depend on having a current page will throw an `UnsupportedOperationException`; you can switch back to paging using `page(Page)` or `page(int, int)`."
msgstr "你不能混合使用ranges和pages：如果你使用range，所有依赖于拥有当前页面的方法将抛出一个 `UnsupportedOperationException` ；你可以使用 `page(Page)` 或 `page(int, int)` 切换回分页。"

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:436
#, no-wrap
msgid "Sorting"
msgstr "排序"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:439
msgid "All methods accepting a query string also accept the following simplified query form:"
msgstr "所有接收查询字符串的方法也能接收以下简化形式的查询："

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:443
#, no-wrap
msgid "Uni<List<Person>> persons = Person.list(\"order by name,birth\");\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:446
msgid "But these methods also accept an optional `Sort` parameter, which allows your to abstract your sorting:"
msgstr "这些方法也可以接收一个 `Sort` 参数，它是对排序的抽象封装："

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:450
#, no-wrap
msgid "Uni<List<Person>> persons = Person.list(Sort.by(\"name\").and(\"birth\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:453
#, no-wrap
msgid ""
"// and with more restrictions\n"
"Uni<List<Person>> persons = Person.list(\"status\", Sort.by(\"name\").and(\"birth\"), Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:456
msgid "The `Sort` class has plenty of methods for adding columns and specifying sort direction."
msgstr "`Sort` 类有很多方法用于添加列和指定排序方向。"

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:457
#, no-wrap
msgid "Simplified queries"
msgstr "简化查询"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:461
msgid "Normally, HQL queries are of this form: `from EntityName [where ...] [order by ...]`, with optional elements at the end."
msgstr "通常情况下，HQL查询语句是这种形式： `from EntityName [where ...​] [order by ...​]` ，结尾处有可选元素。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:463
msgid "If your select query does not start with `from`, we support the following additional forms:"
msgstr "如果你的查询语句不是以 `from` 开始，我们还支持以下的形式："

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:465
msgid "`order by ...` which will expand to `from EntityName order by ...`"
msgstr "`order by ...` 语句会被扩展为： `from EntityName order by ...` "

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:466
msgid "`<singleColumnName>` (and single parameter) which will expand to `from EntityName where <singleColumnName> = ?`"
msgstr "`<singleColumnName>` (带单个参数）语句会被扩展为： `from EntityName where <singleColumnName> = ?` "

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:467
msgid "`<query>` will expand to `from EntityName where <query>`"
msgstr "`<query>` 语句会被扩展为： `from EntityName where <query>` "

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:469
msgid "If your update query does not start with `update`, we support the following additional forms:"
msgstr "如果你的更新语句不是以 `update` 开始，我们还支持以下的形式："

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:471
msgid "`from EntityName ...` which will expand to `update from EntityName ...`"
msgstr "`from EntityName ...​` 语句会被扩展为： `update from EntityName ...​` "

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:472
msgid "`set? <singleColumnName>` (and single parameter) which will expand to `update from EntityName set <singleColumnName> = ?`"
msgstr "`set? <singleColumnName>` (带单个参数）语句会被扩展为： `update from EntityName set <singleColumnName> = ?` "

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:473
msgid "`set? <update-query>` will expand to `update from EntityName set <update-query>`"
msgstr "`set? <update-query>` 语句会被扩展为： `update from EntityName set <update-query>` "

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:475
msgid "If your delete query does not start with `delete`, we support the following additional forms:"
msgstr "如果你的删除语句不是以 `delete` 开始，我们还支持以下的形式："

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:477
msgid "`from EntityName ...` which will expand to `delete from EntityName ...`"
msgstr "`from EntityName ...​` 语句会被扩展为： `delete from EntityName ...​` "

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:478
msgid "`<singleColumnName>` (and single parameter) which will expand to `delete from EntityName where <singleColumnName> = ?`"
msgstr " `<singleColumnName>` (带单个参数）语句会被扩展为： `delete from EntityName where <singleColumnName> = ?` "

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:479
msgid "`<query>` will expand to `delete from EntityName where <query>`"
msgstr "`<query>` 语句会被扩展为： `delete from EntityName where <query>` "

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:482
msgid "You can also write your queries in plain link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#hql[HQL]:"
msgstr "你也可以用普通的 link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#hql[HQL] 编写查询语句："

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:487
#, no-wrap
msgid ""
"Order.find(\"select distinct o from Order o left join fetch o.lineItems\");\n"
"Order.update(\"update from Person set name = 'Mortal' where status = ?\", Status.Alive);\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:489
#, no-wrap
msgid "Named queries"
msgstr "命名查询"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:492
msgid "You can reference a named query instead of a (simplified) HQL query by prefixing its name with the '#' character."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:501
#, no-wrap
msgid ""
"@Entity\n"
"@NamedQuery(name = \"Person.getByName\", query = \"from Person where name = :name\")\n"
"public class Person extends PanacheEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:506
#, no-wrap
msgid ""
"    public static Uni<Person> findByName(String name){\n"
"        return find(\"#Person.getByName\", name).firstResult();\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:512
msgid "Named queries can only be defined inside your JPA entity classes (being the Panache entity class, or the repository parameterized type), or on one of its super classes."
msgstr "命名查询只能在JPA实体类（必须是Panache实体类，或Repository类的参数化类型）内定义，或在它的父类中定义。"

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:514
#, no-wrap
msgid "Query parameters"
msgstr "查询参数"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:517
msgid "You can pass query parameters by index (1-based) as shown below:"
msgstr "你可以通过索引（从1开始）传递查询参数，如下所示："

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:521
#, no-wrap
msgid "Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:524
msgid "Or by name using a `Map`:"
msgstr "或者使用 `Map` ，按名字来命名："

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:531
#, no-wrap
msgid ""
"Map<String, Object> params = new HashMap<>();\n"
"params.put(\"name\", \"stef\");\n"
"params.put(\"status\", Status.Alive);\n"
"Person.find(\"name = :name and status = :status\", params);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:534
msgid "Or using the convenience class `Parameters` either as is or to build a `Map`:"
msgstr "或者使用方便的类 `Parameters` ，既可以是原样，也可以是建立一个 `Map` 。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:540
#, no-wrap
msgid ""
"// generate a Map\n"
"Person.find(\"name = :name and status = :status\",\n"
"         Parameters.with(\"name\", \"stef\").and(\"status\", Status.Alive).map());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:544
#, no-wrap
msgid ""
"// use it as-is\n"
"Person.find(\"name = :name and status = :status\",\n"
"         Parameters.with(\"name\", \"stef\").and(\"status\", Status.Alive));\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:547
msgid "Every query operation accepts passing parameters by index (`Object...`), or by name (`Map<String,Object>` or `Parameters`)."
msgstr "每个查询操作都接受按索引（ `Object...` ）或按名称（ `Map<String,Object>` 或 `Parameters` ）传递参数。"

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:548
#, no-wrap
msgid "Query projection"
msgstr "查询映射"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:551
msgid "Query projection can be done with the `project(Class)` method on the `PanacheQuery` object that is returned by the `find()` methods."
msgstr "查询映射可以使用 `find()` 方法返回的 `PanacheQuery` 对象上的 `project(Class)` 方法来完成。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:553
msgid "You can use it to restrict which fields will be returned by the database."
msgstr "你可以用投影限制数据库返回哪些字段。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:557
msgid "Hibernate will use **DTO projection** and generate a SELECT clause with the attributes from the projection class.  This is also called **dynamic instantiation** or **constructor expression**, more info can be found on the Hibernate guide: link:https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#hql-select-clause[hql select clause]"
msgstr "Hibernate会使用 *DTO投影* ，并根据投影的类的属性生成SELECT子句。这也被称为 *动态实例化* 或 *构造器表达* ，更多信息可以在Hibernate指南中找到： link:https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#hql-select-clause[HQL select子句]"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:560
msgid "The projection class needs to be a valid Java Bean and have a constructor that contains all its attributes, this constructor will be used to instantiate the projection DTO instead of using the entity class. This must be the only constructor of the class."
msgstr "投影类必须是有效的Java Bean，并且拥有一个包含所有属性的构造方法，这个构造方法用于实例化投影DTO，而不是使用实体类。这个构造方法必须是唯一的构造方法。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:564
#, no-wrap
msgid "import io.quarkus.runtime.annotations.RegisterForReflection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:568
#, no-wrap
msgid ""
"@RegisterForReflection // <1>\n"
"public class PersonName {\n"
"    public final String name; // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:573
#, no-wrap
msgid ""
"    public PersonName(String name){ // <3>\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:576
#, no-wrap
msgid ""
"// only 'name' will be loaded from the database\n"
"PanacheQuery<PersonName> query = Person.find(\"status\", Status.Alive).project(PersonName.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:579
msgid "The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation. More details about the `@RegisterForReflection` annotation can be found on the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr "`@RegisterForReflection` 注解用于指导Quarkus在native编译过程中保留该类和其成员。关于 `@RegisterForReflection` 注解的更多细节可以在 link:writing-native-applications-tips.html#registerForReflection[native应用程序提示] 页面找到。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:580
msgid "We use public fields here, but you can use private fields and getters/setters if you prefer."
msgstr "在这里我们使用public的字段，你也可以使用private字段和对应的getter/setter方法。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:581
msgid "This constructor will be used by Hibernate, and it must have a matching constructor with all the class attributes as parameters."
msgstr "Hibernate会用到这个构造方法，它必须有一个匹配的构造函数，所有的类属性都是参数。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:588
msgid "The implementation of the `project(Class)` method uses the constructor's parameter names to build the select clause of the query, so the compiler must be configured to store parameter names inside the compiled class.  This is enabled by default if you are using the Quarkus Maven archetype. If you are not using it, add the property `<maven.compiler.parameters>true</maven.compiler.parameters>` to your pom.xml."
msgstr "在 `project(Class)` 方法的实现中，使用构造函数的参数名来构建查询的select子句，所以编译器必须配置为在编译的类中保留参数名。如果是使用Quarkus Maven archetype创建的项目，该功能默认是启用的。如果你没有使用，请在你的 `pom.xml` 中添加该属性 `<maven.compiler.parameters>true</maven.compiler.parameters>` 。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:591
msgid "If in the DTO projection object you have a field from a referenced entity, you can use the `@ProjectedFieldName` annotation to provide the path for the SELECT statement."
msgstr "如果DTO投影对象中有来自引用的实体字段，可以使用 `@ProjectedFieldName` 注解指定SELECT语句使用的查询路径。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:601
#, no-wrap
msgid ""
"@Entity\n"
"public class Dog extends PanacheEntity {\n"
"    public String name;\n"
"    public String race;\n"
"    @ManyToOne\n"
"    public Person owner;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:606
#, no-wrap
msgid ""
"@RegisterForReflection\n"
"public class DogDto {\n"
"    public String name;\n"
"    public String ownerName;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:612
#, no-wrap
msgid ""
"    public DogDto(String name, @ProjectedFieldName(\"owner.name\") String ownerName) {  // <1>\n"
"        this.name = name;\n"
"        this.ownerName = ownerName;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:614
#, no-wrap
msgid "PanacheQuery<DogDto> query = Dog.findAll().project(DogDto.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:617
msgid "The `ownerName` DTO constructor's parameter will be loaded from the `owner.name` HQL property."
msgstr "DTO构造器的 `ownerName` 参数将从 `owner.name` HQL属性加载。"

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:618
#, no-wrap
msgid "Multiple Persistence Units"
msgstr "多个持久化单元"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:621
msgid "Hibernate Reactive in Quarkus currently does not support multiple persistence units."
msgstr "Quarkus中的Hibernate Reactive目前不支持多个持久化单元。"

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:622
#, no-wrap
msgid "Transactions"
msgstr "事务"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:628
msgid "Make sure to wrap methods modifying your database (e.g. `entity.persist()`) within a transaction. Marking a CDI bean method `@ReactiveTransactional` will do that for you and make that method a transaction boundary. Alternatively, you can use `Panache.withTransaction()` for the same effect. We recommend doing so at your application entry point boundaries like your REST endpoint controllers."
msgstr "请确保修改数据库的方法（例如： `entity.persist()` ）处于同一个事务中。给一个CDI bean方法增加 `@ReactiveTransactional` 注解，可以确保该方法即事务边界。另外，你也可以使用 `Panache.withTransaction()` 来达到同样的效果。我们建议在应用端点的边界这样做，比如REST端点的Controller。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:632
msgid "You cannot use `@Transactional` with Hibernate Reactive for your transactions: you must use `@ReactiveTransactional`, and your annotated method must return a `Uni` to be non-blocking. Otherwise it needs be called from a non-`VertxThread` thread and will become blocking."
msgstr "在Hibernate Reactive中，不能对事务使用 `@Transactional` 注解，必须使用 `@ReactiveTransactional` ，而且被注解的方法必须返回一个 `Uni` ，才能保证方法是非阻塞的。否则，Quarkus会用一个非 `VertxThread` 的线程调用这个方法，并使它阻塞。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:638
msgid "JPA batches changes you make to your entities and sends changes (it's called flush) at the end of the transaction or before a query.  This is usually a good thing as it's more efficient.  But if you want to check optimistic locking failures, do object validation right away or generally want to get immediate feedback, you can force the flush operation by calling `entity.flush()` or even use `entity.persistAndFlush()` to make it a single method call. This will allow you to catch any `PersistenceException` that could occur when JPA send those changes to the database.  Remember, this is less efficient so don't abuse it.  And your transaction still has to be committed."
msgstr "JPA将实体的变更进行批量处理，并在事务结束时或查询前发送批量变更（这被称为flush）。这通常更有效率。但是当你想检查乐观锁的失败，即时进行对象验证，或者想得到即时的反馈，你可以通过调用 `entity.flush()` 或 `entity.persistAndFlush()` 强制执行flush。JPA向数据库发送这些变更时可能会抛出 `PersistenceException` ，你可以捕捉这些异常。记住，这样做的效率较低，所以不要滥用它。而且你的事务仍然需要提交。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:640
msgid "Here is an example of the usage of the flush method to allow making a specific action in case of `PersistenceException`:"
msgstr "下面是一个使用 flush 方法的例子，它在捕获到 `PersistenceException` 异常时执行指定操作："

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:654
#, no-wrap
msgid ""
"@ReactiveTransactional\n"
"public Uni<Void> create(Person person){\n"
"    //Here I use the persistAndFlush() shorthand method on a Panache repository to persist to database then flush the changes.\n"
"    return person.persistAndFlush()\n"
"            .onFailure(PersistenceException.class)\n"
"            .recoverWithItem(() -> {\n"
"                LOG.error(\"Unable to create the parameter\", pe);\n"
"                //in case of error, I save it to disk\n"
"                diskPersister.save(person);\n"
"                return null;\n"
"            });\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:656
#, no-wrap
msgid "Lock management"
msgstr "锁管理"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:659
msgid "Panache provides direct support for database locking with your entity/repository, using `findById(Object, LockModeType)` or `find().withLock(LockModeType)`."
msgstr "Panache支持在实体类/Repository类中直接使用数据库的锁，可使用 `findById(Object, LockModeType)` 或 `find().withLock(LockModeType)` 方法。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:661
msgid "The following examples are for the active record pattern, but the same can be used with repositories."
msgstr "下面的例子是针对Active Record模式的，但同样可以应用于Repository模式。"

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:662
#, no-wrap
msgid "First: Locking using findById()."
msgstr "第一：通过findById()方法使用数据库锁。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:667
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:685
#, no-wrap
msgid "public class PersonEndpoint {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:678
#, no-wrap
msgid ""
"    @GET\n"
"    public Uni<Person> findByIdForUpdate(Long id){\n"
"        return Panache.withTransaction(() -> {\n"
"            return Person.<Person>findById(id, LockModeType.PESSIMISTIC_WRITE)\n"
"                    .invoke(person -> {\n"
"                        //do something useful, the lock will be released when the transaction ends.\n"
"                    });\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:680
#, no-wrap
msgid "Second: Locking in a find()."
msgstr "第二：通过find()方法使用数据库锁。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:695
#, no-wrap
msgid ""
"    @GET\n"
"    public Uni<Person> findByNameForUpdate(String name){\n"
"        return Panache.withTransaction(() -> {\n"
"            return Person.<Person>find(\"name\", name).withLock(LockModeType.PESSIMISTIC_WRITE).firstResult()\n"
"                    .invoke(person -> {\n"
"                        //do something useful, the lock will be released when the transaction ends.\n"
"                    });\n"
"        });\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:697
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:700
msgid "Be careful that locks are released when the transaction ends, so the method that invokes the lock query must be called within a transaction."
msgstr "请注意，事务结束时锁会被释放，所以带锁查询的方法必须在事务中调用。"

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:701
#, no-wrap
msgid "Custom IDs"
msgstr "自定义ID"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:705
msgid "IDs are often a touchy subject, and not everyone's up for letting them handled by the framework, once again we have you covered."
msgstr "ID往往是一个敏感的话题，并不是所有人都愿意让框架来处理，因此我们提供了相应的配置。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:708
msgid "You can specify your own ID strategy by extending `PanacheEntityBase` instead of `PanacheEntity`. Then you just declare whatever ID you want as a public field:"
msgstr "你可以通过继承 `PanacheEntityBase` ，而非 `PanacheEntity` ，来指定你自己的ID策略。然后只要把你想要的ID字段声明为public字段："

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:713
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntityBase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:722
#, no-wrap
msgid ""
"    @Id\n"
"    @SequenceGenerator(\n"
"            name = \"personSequence\",\n"
"            sequenceName = \"person_id_seq\",\n"
"            allocationSize = 1,\n"
"            initialValue = 4)\n"
"    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"personSequence\")\n"
"    public Integer id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:725
#, no-wrap
msgid ""
"    //...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:729
msgid "If you're using repositories, then you will want to extend `PanacheRepositoryBase` instead of `PanacheRepository` and specify your ID type as an extra type parameter:"
msgstr "如果你使用Repository模式，那么要继承 `PanacheRepositoryBase` ，而非 `PanacheRepository` ，并将ID字段类型作为额外的类型参数："

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:736
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheRepositoryBase<Person,Integer> {\n"
"    //...\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:738
#, no-wrap
msgid "Mocking"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:740
#, no-wrap
msgid "Using the active record pattern"
msgstr "使用Active Record模式"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:745
msgid "If you are using the active record pattern you cannot use Mockito directly as it does not support mocking static methods, but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static methods, including your own."
msgstr "如果你使用了Active Record模式，那么不能直接使用Mockito，因为它不支持Mock静态方法。你可以使用 `quarkus-panache-mock` 模块，它允许你使用Mockito来模拟所有静态方法，包括你自己编写的。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:747
msgid "Add this dependency to your `pom.xml`:"
msgstr "将此依赖添加到你的 `pom.xml` 中 ："

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:755
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-panache-mock</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:759
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:868
msgid "Given this simple entity:"
msgstr "提供这个简单的实体："

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:764
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntity {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:766
#, no-wrap
msgid "    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:771
#, no-wrap
msgid ""
"    public static Uni<List<Person>> findOrdered() {\n"
"        return find(\"ORDER BY name\").list();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:774
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:895
msgid "You can write your mocking test like this:"
msgstr "你可以像这样写你的模拟测试。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:779
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheFunctionalityTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:783
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheMocking() {\n"
"        PanacheMock.mock(Person.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:786
#, no-wrap
msgid ""
"        // Mocked classes always return a default value\n"
"        Assertions.assertEquals(0, Person.count().await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:790
#, no-wrap
msgid ""
"        // Now let's specify the return value\n"
"        Mockito.when(Person.count()).thenReturn(Uni.createFrom().item(23l));\n"
"        Assertions.assertEquals(23, Person.count().await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:794
#, no-wrap
msgid ""
"        // Now let's change the return value\n"
"        Mockito.when(Person.count()).thenReturn(Uni.createFrom().item(42l));\n"
"        Assertions.assertEquals(42, Person.count().await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:798
#, no-wrap
msgid ""
"        // Now let's call the original method\n"
"        Mockito.when(Person.count()).thenCallRealMethod();\n"
"        Assertions.assertEquals(0, Person.count().await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:801
#, no-wrap
msgid ""
"        // Check that we called it 4 times\n"
"        PanacheMock.verify(Person.class, Mockito.times(4)).count();// <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:807
#, no-wrap
msgid ""
"        // Mock only with specific parameters\n"
"        Person p = new Person();\n"
"        Mockito.when(Person.findById(12l)).thenReturn(Uni.createFrom().item(p));\n"
"        Assertions.assertSame(p, Person.findById(12l).await().indefinitely());\n"
"        Assertions.assertNull(Person.findById(42l).await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:815
#, no-wrap
msgid ""
"        // Mock throwing\n"
"        Mockito.when(Person.findById(12l)).thenThrow(new WebApplicationException());\n"
"        try {\n"
"            Person.findById(12l);\n"
"            Assertions.fail();\n"
"        } catch (WebApplicationException x) {\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:819
#, no-wrap
msgid ""
"        // We can even mock your custom methods\n"
"        Mockito.when(Person.findOrdered()).thenReturn(Uni.createFrom().item(Collections.emptyList()));\n"
"        Assertions.assertTrue(Person.findOrdered().await().indefinitely().isEmpty());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:825
#, no-wrap
msgid ""
"        PanacheMock.verify(Person.class).findOrdered();\n"
"        PanacheMock.verify(Person.class, Mockito.atLeastOnce()).findById(Mockito.any());\n"
"        PanacheMock.verifyNoMoreInteractions(Person.class);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:828
msgid "Be sure to call your `verify` and `do*` methods on `PanacheMock` rather than `Mockito`, otherwise you won't know what mock object to pass."
msgstr "请确保是在 `PanacheMock` 上调用 `verify` 和 `do*` 方法，而不是在 `Mockito` 上调用，否则无法传递mock对象。"

#. type: Title ====
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:829
#, no-wrap
msgid "Mocking `Mutiny.Session` and entity instance methods"
msgstr "模拟 `Mutiny.Session` , 及实体类的实例方法"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:832
msgid "If you need to mock entity instance methods, such as `persist()` you can do it by mocking the Hibernate Reactive `Mutiny.Session` object:"
msgstr "如果你需要模拟实体类的实例方法，比如 `persist()` ，可以通过模拟Hibernate Reactive的 `Mutiny.Session` 对象来实现："

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:837
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheMockingTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:840
#, no-wrap
msgid ""
"    @InjectMock\n"
"    Mutiny.Session session;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:847
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheSessionMocking() {\n"
"        Person p = new Person();\n"
"        // mocked via Mutiny.Session mocking\n"
"        p.persist().await().indefinitely();\n"
"        Assertions.assertNull(p.id);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:851
#, no-wrap
msgid ""
"        Mockito.verify(session, Mockito.times(1)).persist(Mockito.any());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:853
#, no-wrap
msgid "Using the repository pattern"
msgstr "使用资源库模式"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:857
msgid "If you are using the repository pattern you can use Mockito directly, using the `quarkus-junit5-mockito` module, which makes mocking beans much easier:"
msgstr "如果你使用存储库模式，你可以直接使用Mockito，使用 `quarkus-junit5-mockito` 模块，这使得模拟Bean变得更加容易："

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:865
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5-mockito</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:873
#, no-wrap
msgid ""
"@Entity\n"
"public class Person {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:877
#, no-wrap
msgid ""
"    @Id\n"
"    @GeneratedValue\n"
"    public Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:880
#, no-wrap
msgid ""
"    public String name;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:883
msgid "And this repository:"
msgstr "还有这个储存库："

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:892
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheRepository<Person> {\n"
"    public Uni<List<Person>> findOrdered() {\n"
"        return find(\"ORDER BY name\").list();\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:902
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheFunctionalityTest {\n"
"    @InjectMock\n"
"    PersonRepository personRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:907
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheRepositoryMocking() throws Throwable {\n"
"        // Mocked classes always return a default value\n"
"        Assertions.assertEquals(0, mockablePersonRepository.count().await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:911
#, no-wrap
msgid ""
"        // Now let's specify the return value\n"
"        Mockito.when(mockablePersonRepository.count()).thenReturn(Uni.createFrom().item(23l));\n"
"        Assertions.assertEquals(23, mockablePersonRepository.count().await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:915
#, no-wrap
msgid ""
"        // Now let's change the return value\n"
"        Mockito.when(mockablePersonRepository.count()).thenReturn(Uni.createFrom().item(42l));\n"
"        Assertions.assertEquals(42, mockablePersonRepository.count().await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:919
#, no-wrap
msgid ""
"        // Now let's call the original method\n"
"        Mockito.when(mockablePersonRepository.count()).thenCallRealMethod();\n"
"        Assertions.assertEquals(0, mockablePersonRepository.count().await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:922
#, no-wrap
msgid ""
"        // Check that we called it 4 times\n"
"        Mockito.verify(mockablePersonRepository, Mockito.times(4)).count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:928
#, no-wrap
msgid ""
"        // Mock only with specific parameters\n"
"        Person p = new Person();\n"
"        Mockito.when(mockablePersonRepository.findById(12l)).thenReturn(Uni.createFrom().item(p));\n"
"        Assertions.assertSame(p, mockablePersonRepository.findById(12l).await().indefinitely());\n"
"        Assertions.assertNull(mockablePersonRepository.findById(42l).await().indefinitely());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:936
#, no-wrap
msgid ""
"        // Mock throwing\n"
"        Mockito.when(mockablePersonRepository.findById(12l)).thenThrow(new WebApplicationException());\n"
"        try {\n"
"            mockablePersonRepository.findById(12l);\n"
"            Assertions.fail();\n"
"        } catch (WebApplicationException x) {\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:940
#, no-wrap
msgid ""
"        // We can even mock your custom methods\n"
"        Mockito.when(mockablePersonRepository.findOrdered()).thenReturn(Uni.createFrom().item(Collections.emptyList()));\n"
"        Assertions.assertTrue(mockablePersonRepository.findOrdered().await().indefinitely().isEmpty());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:947
#, no-wrap
msgid ""
"        Mockito.verify(mockablePersonRepository).findOrdered();\n"
"        Mockito.verify(mockablePersonRepository, Mockito.atLeastOnce()).findById(Mockito.any());\n"
"        Mockito.verify(mockablePersonRepository).persist(Mockito.<Person> any());\n"
"        Mockito.verifyNoMoreInteractions(mockablePersonRepository);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:949
#, no-wrap
msgid "How and why we simplify Hibernate Reactive mappings"
msgstr "我们为什么简化Hibernate Reactive映射？怎么做到的？"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:953
msgid "When it comes to writing Hibernate Reactive entities, there are a number of annoying things that users have grown used to reluctantly deal with, such as:"
msgstr "在编写Hibernate Reactive实体类时，用户已经习惯了被迫处理许多烦人的事情，例如："

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:956
msgid "Duplicating ID logic: most entities need an ID, most people don't care how it's set, because it's not really relevant to your model."
msgstr "重复ID逻辑：大多数实体需要一个ID，大多数人并不关心它是如何设置的，因为它与你的模型并不真正相关。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:959
msgid "Dumb getters and setters: since Java lacks support for properties in the language, we have to create fields, then generate getters and setters for those fields, even if they don't actually do anything more than read/write the fields."
msgstr "繁琐的 getters 和 setters：由于Java语言中缺乏对属性的支持，我们必须创建字段，然后为这些字段getters 和 setters，即使它们除了read/write字段外实际上没有做任何事情。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:965
msgid "Traditional EE patterns advise to split entity definition (the model) from the operations you can do on them (DAOs, Repositories), but really that requires an unnatural split between the state and its operations even though we would never do something like that for regular objects in the Object Oriented architecture, where state and methods are in the same class. Moreover, this requires two classes per entity, and requires injection of the DAO or Repository where you need to do entity operations, which breaks your edit flow and requires you to get out of the code you're writing to set up an injection point before coming back to use it."
msgstr "传统的EE模式建议将实体定义（模型）与你可以对其进行的操作（DAO、Repositories）分开，但实际上这需要在状态和其操作之间进行不自然的分割，尽管在面向对象的架构中，我们永远不会对普通对象做这样的事情，因为状态和方法是在同一个类中。此外，这需要每个实体有两个类，并且需要在你需要进行实体操作的地方注入DAO或Repository，这就破坏了你的编辑流程，需要你从正在编写的代码中跳出来，建立一个注入点，然后再回来使用它。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:967
msgid "Hibernate queries are super powerful, but overly verbose for common operations, requiring you to write queries even when you don't need all the parts."
msgstr "Hibernate查询功能很强大，但对于普通操作来说过于冗长，即使是简单操作也要求写完整的HQL语句。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:969
msgid "Hibernate is very general-purpose, but does not make it trivial to do trivial operations that make up 90% of our model usage."
msgstr "Hibernate很通用，但对于模型里90%的琐碎操作，编写起来并不简单。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:971
msgid "With Panache, we took an opinionated approach to tackle all these problems:"
msgstr "通过Panache，我们采取了一种有主见的方法来解决所有这些问题："

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:974
msgid "Make your entities extend `PanacheEntity`: it has an ID field that is auto-generated. If you require a custom ID strategy, you can extend `PanacheEntityBase` instead and handle the ID yourself."
msgstr "让你的实体类继承 `PanacheEntity` ：它有一个自动生成的ID字段。如果你需要自定义ID策略，可以继承 `PanacheEntityBase` ，而不用自己处理ID。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:977
msgid "Use public fields. Get rid of dumb getter and setters. Under the hood, we will generate all getters and setters that are missing, and rewrite every access to these fields to use the accessor methods. This way you can still write _useful_ accessors when you need them, which will be used even though your entity users still use field accesses."
msgstr "使用公共字段。摆脱繁琐的getter和setters。在后台，我们将生成所有缺失的getter和setter，并重写对这些字段的每个访问，以使用访问器方法。这样，当你需要时，你仍然可以写出 _有用的_ 访问器，即使你的实体用户仍然使用字段访问，也会被使用。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:980
msgid "With the active record pattern: put all your entity logic in static methods in your entity class and don't create DAOs.  Your entity superclass comes with lots of super useful static methods, and you can add your own in your entity class.  Users can just start using your entity `Person` by typing `Person.` and getting completion for all the operations in a single place."
msgstr "使用活动记录模式：把你所有的实体逻辑放在实体类的静态方法中，不要创建DAO。你的实体超类带有很多超级有用的静态方法，你也可以在你的实体类中添加你自己的静态方法。用户可以通过输入 `Person.` ，开始使用你的实体 `Person` ，并在一个地方获得所有操作的完成。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:983
msgid "Don't write parts of the query that you don't need: write `Person.find(\"order by name\")` or `Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive)` or even better `Person.find(\"name\", \"stef\")`."
msgstr "不要写多余的查询语句：可以写 `Person.find(\"order by name\")` 或 `Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive)` ，甚至更好的 `Person.find(\"name\", \"stef\")` 。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:985
msgid "That's all there is to it: with Panache, Hibernate Reactive has never looked so trim and neat."
msgstr "以上就是它的全部内容：有了Panache，Hibernate Reactive看起来变得如此轻量和整洁。"

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:986
#, no-wrap
msgid "Defining entities in external projects or jars"
msgstr "在外部项目或jar中定义实体"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:989
msgid "Hibernate Reactive with Panache relies on compile-time bytecode enhancements to your entities."
msgstr "Hibernate Reactive Panache依赖于编译时对实体类的字节码增强。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:995
msgid "It attempts to identify archives with Panache entities (and consumers of Panache entities)  by the presence of the marker file `META-INF/panache-archive.marker`. Panache includes an annotation processor that will automatically create this file in archives that depend on Panache (even indirectly). If you have disabled annotation processors you may need to create this file manually in some cases."
msgstr "Panache通过判断是否存在标记文件 `META-INF/panache-archive.marker` 来识别jar包是否包含 Panache 实体类（及 Panache 实体类的调用方）。Panache 包含一个注解处理器，它会自动在依赖 Panache（包括间接依赖Panache）的jar包中创建此文件。如果在某些情况下你禁用了注解处理器，可能需要手动创建此文件。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:999
msgid "If you include the jpa-modelgen annotation processor this will exclude the Panache annotation processor by default. If you do this you should either create the marker file yourself, or add the `quarkus-panache-common` as well, as shown below:"
msgstr "如果你的项目包含 jpa-modelgen 注解处理器，则默认情况下会排除 Panache 注解处理器。这种情况下，你应该自己创建标记文件，或者添加 `quarkus-panache-common` 插件，如下所示："

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-reactive-panache.adoc:1020
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-compiler-plugin</artifactId>\n"
"    <version>${compiler-plugin.version}</version>\n"
"    <configuration>\n"
"      <annotationProcessorPaths>\n"
"        <annotationProcessorPath>\n"
"          <groupId>org.hibernate</groupId>\n"
"          <artifactId>hibernate-jpamodelgen</artifactId>\n"
"          <version>${hibernate.version}</version>\n"
"        </annotationProcessorPath>\n"
"        <annotationProcessorPath>\n"
"          <groupId>io.quarkus</groupId>\n"
"          <artifactId>quarkus-panache-common</artifactId>\n"
"          <version>${quarkus.platform.version}</version>\n"
"        </annotationProcessorPath>\n"
"      </annotationProcessorPaths>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""
