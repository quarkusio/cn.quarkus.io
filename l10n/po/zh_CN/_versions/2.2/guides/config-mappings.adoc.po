# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/config-mappings.adoc:6
#, no-wrap
msgid "Mapping configuration to objects"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:17
msgid "With config mappings it is possible to group multiple configuration properties in a single interface that share the same prefix."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/config-mappings.adoc:19
#, no-wrap
msgid "`@ConfigMapping`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:23
msgid "A config mapping requires an interface with minimal metadata configuration and annotated with the `@io.smallrye.config.ConfigMapping` annotation."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:29
#, no-wrap
msgid ""
"@ConfigMapping(prefix = \"server\")\n"
"interface Server {\n"
"    String host();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:32
#: upstream/_versions/2.2/guides/config-mappings.adoc:118
#: upstream/_versions/2.2/guides/config-mappings.adoc:147
#, no-wrap
msgid ""
"    int port();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:37
msgid "The `Server` interface is able to map configuration properties with the name `server.host` into the `Server.host()` method and `server.port` into `Server.port()` method. The configuration property name to look up is built from the prefix, and the method name with `.` (dot) as the separator."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:40
msgid "If a mapping fails to match a configuration property a `NoSuchElementException` is thrown, unless the mapped element is an `Optional`."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/config-mappings.adoc:41
#, no-wrap
msgid "Retrieval"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:44
msgid "A config mapping interface can be injected into any CDI aware bean:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:50
#, no-wrap
msgid ""
"class BusinessBean {\n"
"    @Inject\n"
"    Server server;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:55
#, no-wrap
msgid ""
"    public void businessMethod() {\n"
"        String host = server.host();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:59
msgid "In non-CDI contexts, use the API `io.smallrye.config.SmallRyeConfig#getConfigMapping` to retrieve the config mapping instance:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:64
#, no-wrap
msgid ""
"SmallRyeConfig config = ConfigProvider.getConfig().unwrap(SmallRyeConfig.class);\n"
"Server server = config.getConfigMapping(Server.class);\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/config-mappings.adoc:66
#, no-wrap
msgid "Nested groups"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:69
msgid "A nested mapping provides a way to subgroup other config properties:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:75
#: upstream/_versions/2.2/guides/config-mappings.adoc:369
#, no-wrap
msgid ""
"@ConfigMapping(prefix = \"server\")\n"
"public interface Server {\n"
"    String host();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:77
#: upstream/_versions/2.2/guides/config-mappings.adoc:371
#, no-wrap
msgid "    int port();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:79
#, no-wrap
msgid "    Log log();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:82
#, no-wrap
msgid ""
"    interface Log {\n"
"        boolean enabled();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:84
#, no-wrap
msgid "        String suffix();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:88
#, no-wrap
msgid ""
"        boolean rotate();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Block title
#: upstream/_versions/2.2/guides/config-mappings.adoc:90
#: upstream/_versions/2.2/guides/config-mappings.adoc:120
#: upstream/_versions/2.2/guides/config-mappings.adoc:153
#: upstream/_versions/2.2/guides/config-mappings.adoc:179
#: upstream/_versions/2.2/guides/config-mappings.adoc:198
#: upstream/_versions/2.2/guides/config-mappings.adoc:257
#: upstream/_versions/2.2/guides/config-mappings.adoc:311
#: upstream/_versions/2.2/guides/config-mappings.adoc:345
#: upstream/_versions/2.2/guides/config-mappings.adoc:376
#: upstream/_versions/2.2/guides/config-mappings.adoc:645
#, no-wrap
msgid "application.properties"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:98
#, no-wrap
msgid ""
"server.host=localhost\n"
"server.port=8080\n"
"server.log.enabled=true\n"
"server.log.suffix=.log\n"
"server.log.rotate=false\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:101
msgid "The method name of a mapping group acts as sub-namespace to the configurations properties."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/config-mappings.adoc:102
#, no-wrap
msgid "Overriding property names"
msgstr ""

#. type: Title ====
#: upstream/_versions/2.2/guides/config-mappings.adoc:104
#, no-wrap
msgid "`@WithName`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:108
msgid "If a method name, or a property name do not match with each other, the `@WithName` annotation can override the method name mapping and use the name supplied in the annotation:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:115
#, no-wrap
msgid ""
"@ConfigMapping(prefix = \"server\")\n"
"interface Server {\n"
"    @WithName(\"name\")\n"
"    String host();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:125
#, no-wrap
msgid ""
"server.name=localhost\n"
"server.port=8080\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/2.2/guides/config-mappings.adoc:127
#, no-wrap
msgid "`@WithParentName`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:131
msgid "The `@WithParent` annotation allows to configurations mapping to inherit its container name, simplifying the configuration property name required to match the mapping:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:137
#, no-wrap
msgid ""
"interface Server {\n"
"    @WithParentName\n"
"    ServerHostAndPort hostAndPort();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:141
#, no-wrap
msgid ""
"    @WithParentName\n"
"    ServerInfo info();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:144
#, no-wrap
msgid ""
"interface ServerHostAndPort {\n"
"    String host();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:151
#, no-wrap
msgid ""
"interface ServerInfo {\n"
"    String name();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:159
#, no-wrap
msgid ""
"server.host=localhost\n"
"server.port=8080\n"
"server.name=konoha\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:164
msgid "Without the `@WithParentName` the method `name()` requires the configuration property `server.info.name`. Because we use `@WithParentName`, the `info()` mapping will inherit the parent name from `Server` and `name()` maps to `server.name` instead."
msgstr ""

#. type: Title ====
#: upstream/_versions/2.2/guides/config-mappings.adoc:165
#, no-wrap
msgid "NamingStrategy"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:168
msgid "Method names in camelCase map to kebab-case property names:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:174
#, no-wrap
msgid ""
"@ConfigMapping(prefix = \"server\")\n"
"interface Server {\n"
"    String theHost();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:177
#: upstream/_versions/2.2/guides/config-mappings.adoc:196
#, no-wrap
msgid ""
"    int thePort();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:184
#, no-wrap
msgid ""
"server.the-host=localhost\n"
"server.the-port=8080\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:187
msgid "The mapping strategy can be adjusted by setting `namingStrategy` value in the `@ConfigMapping` annotation:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:193
#, no-wrap
msgid ""
"@ConfigMapping(prefix = \"server\", namingStrategy = ConfigMapping.NamingStrategy.VERBATIM)\n"
"public interface ServerVerbatimNamingStrategy {\n"
"    String theHost();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:203
#, no-wrap
msgid ""
"server.theHost=localhost\n"
"server.thePort=8080\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:206
msgid "The `@ConfigMapping` annotation support the following naming stategies:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:208
msgid "`KEBAB_CASE` (default) - The method name is derived by replacing case changes with a dash to map the configuration property."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:209
msgid "`VERBATIM` - The method name is used as is to map the configuration property."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:210
msgid "`SNAKE_CASE` - The method name is derived by replacing case changes with an underscore to map the configuration property."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/config-mappings.adoc:211
#, no-wrap
msgid "Conversions"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:214
msgid "A config mapping class support automatic conversions of all types available for conversion in `Config`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:221
#, no-wrap
msgid ""
"@ConfigMapping\n"
"public interface SomeTypes {\n"
"    @WithName(\"int\")\n"
"    int intPrimitive();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:224
#, no-wrap
msgid ""
"    @WithName(\"int\")\n"
"    Integer intWrapper();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:227
#, no-wrap
msgid ""
"    @WithName(\"long\")\n"
"    long longPrimitive();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:230
#, no-wrap
msgid ""
"    @WithName(\"long\")\n"
"    Long longWrapper();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:233
#, no-wrap
msgid ""
"    @WithName(\"float\")\n"
"    float floatPrimitive();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:236
#, no-wrap
msgid ""
"    @WithName(\"float\")\n"
"    Float floatWrapper();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:239
#, no-wrap
msgid ""
"    @WithName(\"double\")\n"
"    double doublePrimitive();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:242
#, no-wrap
msgid ""
"    @WithName(\"double\")\n"
"    Double doubleWrapper();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:245
#, no-wrap
msgid ""
"    @WithName(\"char\")\n"
"    char charPrimitive();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:248
#, no-wrap
msgid ""
"    @WithName(\"char\")\n"
"    Character charWrapper();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:251
#, no-wrap
msgid ""
"    @WithName(\"boolean\")\n"
"    boolean booleanPrimitive();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:255
#, no-wrap
msgid ""
"    @WithName(\"boolean\")\n"
"    Boolean booleanWrapper();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:266
#, no-wrap
msgid ""
"int=9\n"
"long=9999999999\n"
"float=99.9\n"
"double=99.99\n"
"char=c\n"
"boolean=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:269
msgid "This is also valid for `Optional` and friends:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:275
#, no-wrap
msgid ""
"@ConfigMapping\n"
"public interface Optionals {\n"
"    Optional<Server> server();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:277
#, no-wrap
msgid "    Optional<String> optional();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:280
#, no-wrap
msgid ""
"    @WithName(\"optional.int\")\n"
"    OptionalInt optionalInt();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:283
#, no-wrap
msgid ""
"    interface Server {\n"
"        String host();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:287
#, no-wrap
msgid ""
"        int port();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:290
msgid "In this case, the mapping won't fail if there are not configuration properties to match the mapping."
msgstr ""

#. type: Title ====
#: upstream/_versions/2.2/guides/config-mappings.adoc:291
#, no-wrap
msgid "`@WithConverter`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:294
msgid "The `@WithConverter` annotation provides a way to set a `Converter` to use in a specific mapping:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:302
#, no-wrap
msgid ""
"@ConfigMapping\n"
"public interface Converters {\n"
"    @WithConverter(FooBarConverter.class)\n"
"    String foo();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:309
#, no-wrap
msgid ""
"public static class FooBarConverter implements Converter<String> {\n"
"    @Override\n"
"    public String convert(final String value) {\n"
"        return \"bar\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:315
#, no-wrap
msgid "foo=foo\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:318
msgid "A call to `Converters.foo()` results in the value `bar`."
msgstr ""

#. type: Title ====
#: upstream/_versions/2.2/guides/config-mappings.adoc:319
#, no-wrap
msgid "Collections"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:322
msgid "A config mapping is also able to map collections types `List` and `Set`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:328
#, no-wrap
msgid ""
"@ConfigMapping(prefix = \"server\")\n"
"public interface ServerCollections {\n"
"    Set<Environment> environments();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:331
#, no-wrap
msgid ""
"    interface Environment {\n"
"        String name();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:333
#, no-wrap
msgid "        List<App> apps();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:336
#, no-wrap
msgid ""
"        interface App {\n"
"            String name();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:338
#, no-wrap
msgid "            List<String> services();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:343
#, no-wrap
msgid ""
"            Optional<List<String>> databases();\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:354
#, no-wrap
msgid ""
"server.environments[0].name=dev\n"
"server.environments[0].apps[0].name=rest\n"
"server.environments[0].apps[0].services=bookstore,registration\n"
"server.environments[0].apps[0].databases=pg,h2\n"
"server.environments[0].apps[1].name=batch\n"
"server.environments[0].apps[1].services=stock,warehouse\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:359
msgid "The `List` or `Set` mappings can use xref:config-reference.adoc#indexed-properties[indexed properties] to map configuration values in mapping groups. For collection with simple element types like `String`, their configuration value is a comma separated string."
msgstr ""

#. type: Title ====
#: upstream/_versions/2.2/guides/config-mappings.adoc:360
#, no-wrap
msgid "Maps"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:363
msgid "A config mapping is also able to map a `Map`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:374
#, no-wrap
msgid ""
"    Map<String, String> form();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:384
#, no-wrap
msgid ""
"server.host=localhost\n"
"server.port=8080\n"
"server.form.login-page=login.html\n"
"server.form.error-page=error.html\n"
"server.form.landing-page=index.html\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:388
msgid "The configuration property needs to specify an additional name to act as the key. In this case the `form()` `Map` will contain three elements with the keys `login-page`, `error-page` and `landing-page`."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/config-mappings.adoc:389
#, no-wrap
msgid "Defaults"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:393
msgid "The `@WithDefault` annotation allows to set a default property into a mapping (and prevent and error if the configuration value is not available in any `ConfigSource`):"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:399
#, no-wrap
msgid ""
"public interface Defaults {\n"
"    @WithDefault(\"foo\")\n"
"    String foo();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:403
#, no-wrap
msgid ""
"    @WithDefault(\"bar\")\n"
"    String bar();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:407
msgid "No configuration properties required. The `Defaults.foo()` will return the value `foo` and `Defaults.bar()` will return thevalue `bar`."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/config-mappings.adoc:408
#, no-wrap
msgid "Validation"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:412
msgid "A config mapping may combine annotations from https://beanvalidation.org[Bean Validation] to validate configuration values:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:419
#, no-wrap
msgid ""
"@ConfigMapping(prefix = \"server\")\n"
"interface Server {\n"
"    @Size(min = 2, max = 20)\n"
"    String host();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:423
#, no-wrap
msgid ""
"    @Max(10000)\n"
"    int port();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:426
#: upstream/_versions/2.2/guides/config-mappings.adoc:669
msgid "For validation to work, the `quarkus-hibernate-validator` extension is required."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/config-mappings.adoc:427
#, no-wrap
msgid "Mocking"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:431
msgid "A mapping interface implementation is not a proxy, so it cannot be mocked directly with `@InjectMock` like other CDI beans. One trick is to make it proxyable with a producer method:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:437
#, no-wrap
msgid ""
"public class ServerMockProducer {\n"
"    @Inject\n"
"    Config config;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:445
#, no-wrap
msgid ""
"    @Produces\n"
"    @ApplicationScoped\n"
"    @io.quarkus.test.Mock\n"
"    Server server() {\n"
"        return config.unwrap(SmallRyeConfig.class).getConfigMapping(Server.class);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:448
msgid "The `Server` can be injected as a mock into a Quarkus test class with `@InjectMock`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:455
#, no-wrap
msgid ""
"@QuarkusTest\n"
"class ServerMockTest {\n"
"    @Inject\n"
"    Server server;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:462
#, no-wrap
msgid ""
"    @Test\n"
"    void localhost() {\n"
"        Mockito.when(server.host()).thenReturn(\"localhost\");\n"
"        assertEquals(\"localhost\", server.host());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:465
msgid "The mock is just an empty shell without any actual configuration values."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:468
msgid "If the goal is to only mock certain configuration values and retain the original configuration, the mocking instance requires a spy:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:475
#, no-wrap
msgid ""
"@ConfigMapping(prefix = \"app\")\n"
"public interface AppConfig {\n"
"    @WithDefault(\"app\")\n"
"    String name();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:477
#, no-wrap
msgid "    Info info();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:485
#, no-wrap
msgid ""
"    interface Info {\n"
"        @WithDefault(\"alias\")\n"
"        String alias();\n"
"        @WithDefault(\"10\")\n"
"        Integer count();\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:489
#, no-wrap
msgid ""
"public static class AppConfigProducer {\n"
"    @Inject\n"
"    Config config;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:501
#, no-wrap
msgid ""
"    @Produces\n"
"    @ApplicationScoped\n"
"    @io.quarkus.test.Mock\n"
"    AppConfig appConfig() {\n"
"        AppConfig appConfig = config.unwrap(SmallRyeConfig.class).getConfigMapping(AppConfig.class);\n"
"        AppConfig appConfigSpy = Mockito.spy(appConfig);\n"
"        AppConfig.Info infoSpy = Mockito.spy(appConfig.info());\n"
"        Mockito.when(appConfigSpy.info()).thenReturn(infoSpy);\n"
"        return appConfigSpy;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:504
msgid "The `AppConfig` can be injected as a mock into a Quarkus test class with `@Inject`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:511
#, no-wrap
msgid ""
"@QuarkusTest\n"
"class AppConfigTest {\n"
"    @Inject\n"
"    AppConfig appConfig;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:516
#, no-wrap
msgid ""
"    @Test\n"
"    void localhost() {\n"
"        Mockito.when(appConfig.name()).thenReturn(\"mocked-app\");\n"
"        assertEquals(\"mocked-app\", server.host());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:521
#, no-wrap
msgid ""
"        Mockito.when(appConfig.info().alias()).thenReturn(\"mocked-alias\");\n"
"        assertEquals(\"mocked-alias\", server.info().alias());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:524
msgid "Nested elements need to be spied individually by Mockito."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/config-mappings.adoc:526
#, no-wrap
msgid "[.line-through]#`@ConfigProperties`# (Deprecated)"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:529
msgid "This feature will be removed soon, please update your code base and use `@ConfigMapping` instead."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:532
msgid "The `@io.quarkus.arc.config.ConfigProperties` annotation is able to group multiple related configuration values in its own class:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:536
#: upstream/_versions/2.2/guides/config-mappings.adoc:590
#, no-wrap
msgid "package org.acme.config;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:539
#, no-wrap
msgid ""
"import io.quarkus.arc.config.ConfigProperties;\n"
"import java.util.Optional;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:542
#, no-wrap
msgid ""
"@ConfigProperties(prefix = \"greeting\") <1>\n"
"public class GreetingConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:546
#, no-wrap
msgid ""
"    private String message;\n"
"    private String suffix = \"!\"; <2>\n"
"    private Optional<String> name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:550
#, no-wrap
msgid ""
"    public String getMessage() {\n"
"        return message;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:554
#, no-wrap
msgid ""
"    public void setMessage(String message) {\n"
"        this.message = message;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:558
#, no-wrap
msgid ""
"    public String getSuffix() {\n"
"        return suffix;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:562
#, no-wrap
msgid ""
"    public void setSuffix(String suffix) {\n"
"        this.suffix = suffix;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:566
#, no-wrap
msgid ""
"    public Optional<String> getName() {\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:571
#, no-wrap
msgid ""
"    public void setName(Optional<String> name) {\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:575
msgid "`prefix` is optional. If not set then the prefix to be used will be determined by the class name. In this case it would still be `greeting` (since the `Configuration` suffix is removed). If the class were named `GreetingExtraConfiguration` then the resulting default prefix would be `greeting-extra`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:576
msgid "`!` will be the default value if `greeting.suffix` is not set."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:578
msgid "Inject the `GreetingResource` with CDI `@Inject`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:583
#, no-wrap
msgid ""
"@Inject\n"
"GreetingConfiguration greetingConfiguration;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:586
msgid "Another alternative style provided by Quarkus is to create `GreetingConfiguration` as an interface:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:594
#, no-wrap
msgid ""
"import io.quarkus.arc.config.ConfigProperties;\n"
"import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
"import java.util.Optional;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:597
#, no-wrap
msgid ""
"@ConfigProperties(prefix = \"greeting\")\n"
"public interface GreetingConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:600
#, no-wrap
msgid ""
"    @ConfigProperty(name = \"message\") <1>\n"
"    String message();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:603
#, no-wrap
msgid ""
"    @ConfigProperty(defaultValue = \"!\")\n"
"    String getSuffix(); <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:606
#, no-wrap
msgid ""
"    Optional<String> getName(); <3>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:609
msgid "The `@ConfigProperty` annotation is needed because the name of the configuration property that the method corresponds does not follow the getter method naming conventions."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:610
msgid "In this case since `name` is not set, the corresponding property will be `greeting.suffix`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:612
msgid "It is unnecessary to specify the `@ConfigProperty` annotation because the method name follows the getter method naming conventions (`greeting.name` being the corresponding property) and no default value is required."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:616
msgid "When using `@ConfigProperties` on a class or an interface, if the value of one of its fields is not provided, the application startup will fail, and a `javax.enterprise.inject.spi.DeploymentException` will be thrown. This does not apply to `Optional` fields and fields with a default value."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/config-mappings.adoc:617
#, no-wrap
msgid "Additional notes on @ConfigProperties"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:621
msgid "When using a regular class annotated with `@ConfigProperties` the class doesn't necessarily have to declare getters and setters. Having simple public non-final fields is valid as well."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:624
msgid "Furthermore, the configuration classes support nested object configuration. Suppose there was a need to have an extra layer of greeting configuration named `content` that would contain a few fields:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:629
#: upstream/_versions/2.2/guides/config-mappings.adoc:660
#: upstream/_versions/2.2/guides/config-mappings.adoc:680
#, no-wrap
msgid ""
"@ConfigProperties(prefix = \"greeting\")\n"
"public class GreetingConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:634
#, no-wrap
msgid ""
"    public String message;\n"
"    public String suffix = \"!\";\n"
"    public Optional<String> name;\n"
"    public ContentConfig content; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:640
#, no-wrap
msgid ""
"    public static class ContentConfig {\n"
"        public Integer prizeAmount;\n"
"        public List<String> recipients;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:642
msgid "The name of the field (not the class name) will determine the name of the properties that are bound to the object."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:644
msgid "Setting the properties would occur in the normal manner:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:652
#, no-wrap
msgid ""
"greeting.message = hello\n"
"greeting.name = quarkus\n"
"greeting.content.prize-amount=10\n"
"greeting.content.recipients=Jane,John\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:655
msgid "Furthermore, classes annotated with `@ConfigProperties` can be annotated with Bean Validation annotations:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:664
#: upstream/_versions/2.2/guides/config-mappings.adoc:684
#, no-wrap
msgid ""
"    @Size(min = 20)\n"
"    public String message;\n"
"    public String suffix = \"!\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:666
#: upstream/_versions/2.2/guides/config-mappings.adoc:686
#: upstream/_versions/2.2/guides/config-mappings.adoc:700
#: upstream/_versions/2.2/guides/config-mappings.adoc:738
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/config-mappings.adoc:670
#, no-wrap
msgid "Using same ConfigProperties with different prefixes"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:675
msgid "Quarkus also supports the use of the same `@ConfigProperties` object with different prefixes for each injection point using the `io.quarkus.arc.config.@ConfigPrefix` annotation. If `GreetingConfiguration` from above needs to be used for both the `greeting` prefix and the `other` prefix:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:692
#: upstream/_versions/2.2/guides/config-mappings.adoc:733
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class SomeBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:695
#, no-wrap
msgid ""
"    @Inject <1>\n"
"    GreetingConfiguration greetingConfiguration;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:698
#, no-wrap
msgid ""
"    @ConfigPrefix(\"other\") <2>\n"
"    GreetingConfiguration otherConfiguration;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:703
msgid "At this injection point `greetingConfiguration` will use the `greeting` prefix since that is what has been defined on `@ConfigProperties`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:705
msgid "At this injection point `otherConfiguration` will use the `other` prefix from `@ConfigPrefix` instead of the `greeting` prefix. Notice that in this case `@Inject` is not required."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/config-mappings.adoc:706
#, no-wrap
msgid "Combining ConfigProperties with build time conditions"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:711
msgid "Quarkus allows you to define conditions evaluated at build time (`@IfBuildProfile`, `@UnlessBuildProfile`, `@IfBuildProperty` and `@UnlessBuildProperty`) to enable or not the annotations `@ConfigProperties` and `@ConfigPrefix` which gives you a very flexible way to map your configuration."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:715
msgid "Let's assume that the configuration of a service is mapped thanks to a `@ConfigProperties` and you don't need this part of the configuration for your tests as it will be mocked, in that case you can define a build time condition like in the next example:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:717
msgid "`ServiceConfiguration.java`"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:725
#, no-wrap
msgid ""
"@UnlessBuildProfile(\"test\") <1>\n"
"@ConfigProperties\n"
"public class ServiceConfiguration {\n"
"    public String user;\n"
"    public String password;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:727
msgid "The annotation `@ConfigProperties` is considered if and only if the active profile is not `test`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:729
msgid "`SomeBean.java`"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/config-mappings.adoc:736
#, no-wrap
msgid ""
"    @Inject\n"
"    Instance<ServiceConfiguration> serviceConfiguration; <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/config-mappings.adoc:740
msgid "As the configuration of the service could be missing, we need to use `Instance<ServiceConfiguration>` as type at the injection point."
msgstr ""
