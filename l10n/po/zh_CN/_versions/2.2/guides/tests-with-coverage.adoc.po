# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:7
#, no-wrap
msgid "Measuring the coverage of your tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:23
msgid "Learn how to measure the test coverage of your application. This guide covers:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:25
msgid "Measuring the coverage of your Unit Tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:26
msgid "Measuring the coverage of your Integration Tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:27
msgid "Separating the execution of your Unit Tests and Integration Tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:28
msgid "Consolidating the coverage for all your tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:30
msgid "Please note that code coverage is not supported in native mode."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:31
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:34
msgid "To complete this guide, you need:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:36
msgid "less than 15 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:37
msgid "an IDE"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:38
msgid "JDK 11+ installed with JAVA_HOME configured appropriately"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:39
msgid "Apache Maven {maven-version}"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:40
msgid "Having completed the link:getting-started-testing[Testing your application guide]"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:41
#, no-wrap
msgid "Architecture"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:45
msgid "The application built in this guide is just a JAX-RS endpoint (hello world) that relies on dependency injection to use a service.  The service will be tested with JUnit 5 and the endpoint will be annotated via a `@QuarkusTest` annotation."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:46
#, no-wrap
msgid "Solution"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:50
msgid "We recommend that you follow the instructions in the next sections and create the application step by step. However, you can go right to the completed example.  Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:52
msgid "The solution is located in the `tests-with-coverage-quickstart` {quickstarts-tree-url}/tests-with-coverage-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:53
#, no-wrap
msgid "Starting from a simple project and two tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:56
msgid "Let's start from an empty application created with the Quarkus Maven plugin:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:63
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=tests-with-coverage-quickstart\n"
"cd tests-with-coverage-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:66
msgid "Now we'll be adding all the elements necessary to have an application that is properly covered with tests."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:68
msgid "First, an application serving a hello endpoint:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:72
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:110
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:128
#, no-wrap
msgid "package org.acme.testcoverage;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:79
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.PathParam;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:82
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class GreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:84
#, no-wrap
msgid "    private final GreetingService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:89
#, no-wrap
msgid ""
"    @Inject\n"
"    public GreetingResource(GreetingService service) {\n"
"        this.service = service;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:96
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"/greeting/{name}\")\n"
"    public String greeting(@PathParam(\"name\") String name) {\n"
"        return service.greeting(name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:103
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"hello\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:106
msgid "This endpoint uses a greeting service:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:112
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:115
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class GreetingService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:119
#, no-wrap
msgid ""
"    public String greeting(String name) {\n"
"        return \"hello \" + name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:121
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:124
msgid "The project will also need a test:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:132
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.junit.jupiter.api.Tag;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:134
#, no-wrap
msgid "import java.util.UUID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:137
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:140
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class GreetingResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:149
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHelloEndpoint() {\n"
"        given()\n"
"          .when().get(\"/hello\")\n"
"          .then()\n"
"             .statusCode(200)\n"
"             .body(is(\"hello\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:161
#, no-wrap
msgid ""
"    @Test\n"
"    public void testGreetingEndpoint() {\n"
"        String uuid = UUID.randomUUID().toString();\n"
"        given()\n"
"          .pathParam(\"name\", uuid)\n"
"          .when().get(\"/hello/greeting/{name}\")\n"
"          .then()\n"
"            .statusCode(200)\n"
"            .body(is(\"hello \" + uuid));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:163
#, no-wrap
msgid "Setting up Jacoco"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:166
msgid "Now we need to add Jacoco to our project. To do this we need to add the following to the `pom.xml` dependencies section:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:174
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-jacoco</artifactId>\n"
"  <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:178
msgid "This Quarkus extension takes care of everything that would usually be done via the Jacoco maven plugin, so no additional config is required."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:181
msgid "Using both the extension and the plugin requires special configuration, if you add both you will get lots of errors about classes already being instrumented. The configuration needed is detailed below."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:182
#, no-wrap
msgid "Running the tests with coverage"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:186
msgid "Run `mvn verify`, the tests will be run and the results will end up in `target/jacoco-reports`. This is all that is needed, the `quarkus-jacoco` extension allows Jacoco to just work out of the box."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:188
msgid "There are some config options that affect this:"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:191
#, no-wrap
msgid "Coverage for tests not using @QuarkusTest"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:195
msgid "The Quarkus automatic Jacoco config will only work for tests that are annotated with `@QuarkusTest`. If you want to check the coverage of other tests as well then you will need to fall back to the Jacoco maven plugin."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:197
msgid "In addition to including the `quarkus-jacoco` extension in your pom you will need the following config:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:231
#, no-wrap
msgid ""
"<project>\n"
"    <build>\n"
"        <plugins>\n"
"            ...\n"
"          <plugin>\n"
"            <groupId>org.jacoco</groupId>\n"
"            <artifactId>jacoco-maven-plugin</artifactId>\n"
"            <executions>\n"
"              <execution>\n"
"                <id>default-prepare-agent</id>\n"
"                <goals>\n"
"                  <goal>prepare-agent</goal>\n"
"                </goals>\n"
"                <configuration>\n"
"                  <exclClassLoaders>*QuarkusClassLoader</exclClassLoaders>  <1>\n"
"                </configuration>\n"
"              </execution>\n"
"              <execution>\n"
"                <id>default-prepare-agent-integration</id> <2>\n"
"                <goals>\n"
"                  <goal>prepare-agent-integration</goal>\n"
"                </goals>\n"
"                <configuration>\n"
"                  <exclClassLoaders>*QuarkusClassLoader</exclClassLoaders>\n"
"                </configuration>\n"
"              </execution>\n"
"            </executions>\n"
"          </plugin>\n"
"        </plugins>\n"
"    </build>\n"
"</project>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:233
msgid "This config tells it to ignore `@QuarkusTest` related classes, as they are loaded by `QuarkusClassLoader`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:234
msgid "This is only needed if you are using Failsafe to run integration tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:237
msgid "This config will only work if at least one `@QuarkusTest` is being run. If you are not using `@QuarkusTest` then you can simply use the Jacoco plugin in the standard manner with no additional config."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:238
#, no-wrap
msgid "Coverage for Integration Tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:241
msgid "To get code coverage data from integration tests, Jacoco needs to be configured, and your `@QuarkusIntegrationTest` classes must be run using a jar package,"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:244
msgid "In the `pom.xml`, you can add the following plugin configuration for Jacoco. This will append integration test data into the same destination file as unit tests, re-build the jacoco report after the integration tests are complete, and thus produce a comprehensive code-coverage report."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:282
#, no-wrap
msgid ""
"<build>\n"
"    ...\n"
"    <plugins>\n"
"        ...\n"
"        <plugin>\n"
"            <groupId>org.jacoco</groupId>\n"
"            <artifactId>jacoco-maven-plugin</artifactId>\n"
"            <executions>\n"
"                <execution>\n"
"                    <id>default-prepare-agent-integration</id>\n"
"                    <goals>\n"
"                        <goal>prepare-agent-integration</goal>\n"
"                    </goals>\n"
"                    <configuration>\n"
"                        <destFile>${project.build.directory}/jacoco-quarkus.exec</destFile>\n"
"                        <append>true</append>\n"
"                        <exclClassLoaders>*QuarkusClassLoader</exclClassLoaders>\n"
"                    </configuration>\n"
"                </execution>\n"
"                <execution>\n"
"                    <id>report-it</id>\n"
"                    <phase>post-integration-test</phase>\n"
"                    <goals>\n"
"                        <goal>report</goal>\n"
"                    </goals>\n"
"                    <configuration>\n"
"                        <dataFile>${project.build.directory}/jacoco-quarkus.exec</dataFile>\n"
"                        <outputDirectory>${project.build.directory}/jacoco-report</outputDirectory>\n"
"                    </configuration>\n"
"                </execution>\n"
"            </executions>\n"
"        </plugin>\n"
"        ...\n"
"    </plugins>\n"
"    ...\n"
"</build>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:285
msgid "In order to run the integration tests as a jar with the Jacoco agent, add the following to your `pom.xml`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:314
#, no-wrap
msgid ""
"<build>\n"
"    ...\n"
"    <plugins>\n"
"        ...\n"
"        <plugin>\n"
"            <artifactId>maven-failsafe-plugin</artifactId>\n"
"            <version>${surefire-plugin.version}</version>\n"
"            <executions>\n"
"                <execution>\n"
"                    <goals>\n"
"                        <goal>integration-test</goal>\n"
"                        <goal>verify</goal>\n"
"                    </goals>\n"
"                    <configuration>\n"
"                        <systemPropertyVariables>\n"
"                            <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"                            <maven.home>${maven.home}</maven.home>\n"
"                            <quarkus.test.arg-line>${argLine}</quarkus.test.arg-line>\n"
"                        </systemPropertyVariables>\n"
"                    </configuration>\n"
"                </execution>\n"
"            </executions>\n"
"        </plugin>\n"
"        ...\n"
"    </plugins>\n"
"    ...\n"
"</build>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:318
msgid "Sharing the same value for `quarkus.test.arg-line` might break integration test runs that test different types of Quarkus artifacts. In such cases, the use of maven profiles is advised."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:319
#, no-wrap
msgid "Setting coverage thresholds for the Maven build"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:322
msgid "You can set thresholds for code coverage using the Jacoco Maven plugin. Note the element `<dataFile>${project.build.directory}/jacoco-quarkus.exec</dataFile>`. You must set it matching your choice for `quarkus.jacoco.data-file`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:367
#, no-wrap
msgid ""
"<build>\n"
"    ...\n"
"    <plugins>\n"
"        ...\n"
"        <plugin>\n"
"            <groupId>org.jacoco</groupId>\n"
"            <artifactId>jacoco-maven-plugin</artifactId>\n"
"            <version>${jacoco.version}</version>\n"
"            <executions>\n"
"                <execution>\n"
"                    <id>jacoco-check</id>\n"
"                    <goals>\n"
"                        <goal>check</goal>\n"
"                    </goals>\n"
"                    <phase>test</phase>\n"
"                    <configuration>\n"
"                        <dataFile>${project.build.directory}/jacoco-quarkus.exec</dataFile>\n"
"                        <rules>\n"
"                            <rule>\n"
"                                <element>BUNDLE</element>\n"
"                                <limits>\n"
"                                    <limit>\n"
"                                        <counter>LINE</counter>\n"
"                                        <value>COVEREDRATIO</value>\n"
"                                        <minimum>0.8</minimum>\n"
"                                    </limit>\n"
"                                    <limit>\n"
"                                        <counter>BRANCH</counter>\n"
"                                        <value>COVEREDRATIO</value>\n"
"                                        <minimum>0.72</minimum>\n"
"                                    </limit>\n"
"                                </limits>\n"
"                            </rule>\n"
"                        </rules>\n"
"                    </configuration>\n"
"                </execution>\n"
"            </executions>\n"
"        </plugin>\n"
"        ...\n"
"    </plugins>\n"
"    ...\n"
"</build>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:369
#, no-wrap
msgid "Conclusion"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/tests-with-coverage.adoc:372
msgid "You now have all the information you need to study the coverage of your tests! But remember, some code that is not covered is certainly not well tested. But some code that is covered is not necessarily *well* tested. Make sure to write good tests!"
msgstr ""
