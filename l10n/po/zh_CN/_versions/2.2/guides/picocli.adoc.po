# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/picocli.adoc:6
#, no-wrap
msgid "Command Mode with Picocli"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/picocli.adoc:12
msgid "https://picocli.info/[Picocli] is an open source tool for creating rich command line applications."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/picocli.adoc:14
msgid "Quarkus provides support for using Picocli. This guide contains examples of `picocli` extension usage."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/picocli.adoc:18
msgid "If you are not familiar with the Quarkus Command Mode, consider reading the link:command-mode-reference[Command Mode reference guide] first."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/picocli.adoc:19
#, no-wrap
msgid "Configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/picocli.adoc:23
msgid "Once you have your Quarkus project configured you can add the `picocli` extension to your project by running the following command in your project base directory."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:27
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"picocli\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/picocli.adoc:30
msgid "This will add the following to your `pom.xml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:37
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-picocli</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/picocli.adoc:39
#, no-wrap
msgid "Simple command line application"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/picocli.adoc:42
msgid "Simple PicocliApplication with only one `Command` can be created as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:46
#: upstream/_versions/2.2/guides/picocli.adoc:106
#: upstream/_versions/2.2/guides/picocli.adoc:141
#: upstream/_versions/2.2/guides/picocli.adoc:247
#, no-wrap
msgid "package com.acme.picocli;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:48
#, no-wrap
msgid "import picocli.CommandLine;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:51
#, no-wrap
msgid ""
"import javax.enterprise.context.Dependent;\n"
"import javax.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:54
#, no-wrap
msgid ""
"@CommandLine.Command // <1>\n"
"public class HelloCommand implements Runnable {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:57
#, no-wrap
msgid ""
"    @CommandLine.Option(names = {\"-n\", \"--name\"}, description = \"Who will we greet?\", defaultValue = \"World\")\n"
"    String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:59
#, no-wrap
msgid "    private final GreetingService greetingService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:63
#, no-wrap
msgid ""
"    public HelloCommand(GreetingService greetingService) { // <2>\n"
"        this.greetingService = greetingService;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:69
#, no-wrap
msgid ""
"    @Override\n"
"    public void run() {\n"
"        greetingService.sayHello(name);\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:76
#, no-wrap
msgid ""
"@Dependent\n"
"class GreetingService {\n"
"    void sayHello(String name) {\n"
"        System.out.println(\"Hello \" + name + \"!\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/picocli.adoc:78
msgid "If there is only one class annotated with `picocli.CommandLine.Command` it will be used as entry point to Picocli CommandLine."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/picocli.adoc:79
msgid "All classes annotated with `picocli.CommandLine.Command` are registered as CDI beans."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/picocli.adoc:83
msgid "Beans with `@CommandLine.Command` should not use proxied scopes (e.g. do not use `@ApplicationScope`)  because Picocli will not be able set field values in such beans. This extension will register classes with `@CommandLine.Command` annotation using `@Depended` scope. If you need to use proxied scope, then annotate setter and not field, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:89
#, no-wrap
msgid ""
"@CommandLine.Command\n"
"@ApplicationScoped\n"
"public class EntryCommand {\n"
"    private String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:94
#, no-wrap
msgid ""
"    @CommandLine.Option(names = \"-n\")\n"
"    public void setName(String name) {\n"
"        this.name = name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:96
#: upstream/_versions/2.2/guides/picocli.adoc:196
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/picocli.adoc:98
#, no-wrap
msgid "Command line application with multiple Commands"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/picocli.adoc:102
msgid "When multiple classes have the `picocli.CommandLine.Command` annotation, then one of them needs to be also annotated with `io.quarkus.picocli.runtime.annotations.TopCommand`.  This can be overwritten with the `quarkus.picocli.top-command` property."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:109
#, no-wrap
msgid ""
"import io.quarkus.picocli.runtime.annotations.TopCommand;\n"
"import picocli.CommandLine;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:114
#, no-wrap
msgid ""
"@TopCommand\n"
"@CommandLine.Command(mixinStandardHelpOptions = true, subcommands = {HelloCommand.class, GoodByeCommand.class})\n"
"public class EntryCommand {\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:117
#, no-wrap
msgid ""
"@CommandLine.Command(name = \"hello\", description = \"Greet World!\")\n"
"class HelloCommand implements Runnable {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:123
#, no-wrap
msgid ""
"    @Override\n"
"    public void run() {\n"
"        System.out.println(\"Hello World!\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:126
#, no-wrap
msgid ""
"@CommandLine.Command(name = \"goodbye\", description = \"Say goodbye to World!\")\n"
"class GoodByeCommand implements Runnable {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:132
#, no-wrap
msgid ""
"    @Override\n"
"    public void run() {\n"
"        System.out.println(\"Goodbye World!\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/picocli.adoc:134
#, no-wrap
msgid "Customizing Picocli CommandLine instance"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/picocli.adoc:137
msgid "You can customize CommandLine classes used by the `picocli` extension by producing your own bean instance:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:145
#, no-wrap
msgid ""
"import io.quarkus.picocli.runtime.PicocliCommandLineFactory;\n"
"import io.quarkus.picocli.runtime.annotations.TopCommand;\n"
"import picocli.CommandLine;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:148
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.enterprise.inject.Produces;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:154
#, no-wrap
msgid ""
"@TopCommand\n"
"@CommandLine.Command\n"
"public class EntryCommand implements Runnable {\n"
"    @CommandLine.Spec\n"
"    CommandLine.Model.CommandSpec spec;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:160
#, no-wrap
msgid ""
"    @Override\n"
"    public void run() {\n"
"        System.out.println(\"My name is: \" + spec.name());\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:163
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class CustomConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:169
#, no-wrap
msgid ""
"    @Produces\n"
"    CommandLine customCommandLine(PicocliCommandLineFactory factory) { // <1>\n"
"        return factory.create().setCommandName(\"CustomizedName\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/picocli.adoc:171
msgid "`PicocliCommandLineFactory` will create an instance of CommandLine with `TopCommand` and `CommandLine.IFactory` injected."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/picocli.adoc:172
#, no-wrap
msgid "Different entry command for each profile"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/picocli.adoc:175
msgid "It is possible to create different entry command for each profile, using `@IfBuildProfile`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:180
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class Config {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:187
#, no-wrap
msgid ""
"    @Produces\n"
"    @TopCommand\n"
"    @IfBuildProfile(\"dev\")\n"
"    public Object devCommand() {\n"
"        return DevCommand.class; // <1>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:194
#, no-wrap
msgid ""
"    @Produces\n"
"    @TopCommand\n"
"    @IfBuildProfile(\"prod\")\n"
"    public Object prodCommand() {\n"
"        return new ProdCommand(\"Configured by me!\");\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/picocli.adoc:198
msgid "You can return instance of `java.lang.Class` here. In such case `CommandLine` will try to instantiate this class using `CommandLine.IFactory`."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/picocli.adoc:199
#, no-wrap
msgid "Configure CDI Beans with parsed arguments"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/picocli.adoc:204
msgid "You can use `Event<CommandLine.ParseResult>` or just `CommandLine.ParseResult` to configure CDI beans based on arguments parsed by Picocli.  This event will be generated in `QuarkusApplication` class created by this extension. If you are providing your own `@QuarkusMain` this event will not be raised.  `CommandLine.ParseResult` is created from default `CommandLine` bean."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:209
#, no-wrap
msgid ""
"@CommandLine.Command\n"
"public class EntryCommand implements Runnable {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:212
#, no-wrap
msgid ""
"    @CommandLine.Option(names = \"-c\", description = \"JDBC connection string\")\n"
"    String connectionString;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:215
#, no-wrap
msgid ""
"    @Inject\n"
"    DataSource dataSource;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:225
#, no-wrap
msgid ""
"    @Override\n"
"    public void run() {\n"
"        try (Connection c = dataSource.getConnection()) {\n"
"            // Do something\n"
"        } catch (SQLException throwables) {\n"
"            // Handle error\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:228
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class DatasourceConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:237
#, no-wrap
msgid ""
"    @Produces\n"
"    @ApplicationScoped // <1>\n"
"    DataSource dataSource(CommandLine.ParseResult parseResult) {\n"
"        PGSimpleDataSource ds = new PGSimpleDataSource();\n"
"        ds.setURL(parseResult.matchedOption(\"c\").getValue().toString());\n"
"        return ds;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/picocli.adoc:239
msgid "`@ApplicationScoped` used for lazy initialization"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/picocli.adoc:240
#, no-wrap
msgid "Providing own QuarkusMain"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/picocli.adoc:243
msgid "You can also provide your own application entry point annotated with `QuarkusMain` (as described in link:command-mode-reference[Command Mode reference guide])."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:251
#, no-wrap
msgid ""
"import io.quarkus.runtime.QuarkusApplication;\n"
"import io.quarkus.runtime.annotations.QuarkusMain;\n"
"import picocli.CommandLine;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:253
#, no-wrap
msgid "import javax.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:259
#, no-wrap
msgid ""
"@QuarkusMain\n"
"@CommandLine.Command(name = \"demo\", mixinStandardHelpOptions = true)\n"
"public class ExampleApp implements Runnable, QuarkusApplication {\n"
"    @Inject\n"
"    CommandLine.IFactory factory; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:264
#, no-wrap
msgid ""
"    @Override\n"
"    public void run() {\n"
"        // business logic\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:270
#, no-wrap
msgid ""
"    @Override\n"
"    public int run(String... args) throws Exception {\n"
"        return new CommandLine(this, factory).execute(args);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/picocli.adoc:272
msgid "Quarkus-compatible `CommandLine.IFactory` bean created by `picocli` extension."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/picocli.adoc:273
#, no-wrap
msgid "Native mode support"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/picocli.adoc:276
msgid "This extension uses the Quarkus standard build steps mechanism to support GraalVM Native images. In the exceptional case that incompatible changes in a future picocli release cause any issue, the following configuration can be used to fall back to the annotation processor from the picocli project as a temporary workaround:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:283
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>info.picocli</groupId>\n"
"  <artifactId>picocli-codegen</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/picocli.adoc:286
msgid "For Gradle, you need to add the following in `dependencies` section of the `build.gradle` file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/picocli.adoc:291
#, no-wrap
msgid ""
"annotationProcessor enforcedPlatform(\"${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}\")\n"
"annotationProcessor 'info.picocli:picocli-codegen'\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/picocli.adoc:293
#, no-wrap
msgid "Development Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/picocli.adoc:296
msgid "In the development mode, i.e. when running `mvn quarkus:dev`, the application is executed and restarted every time the `Space bar` key is pressed. You can also pass arguments to your command line app via the `quarkus.args` system property, e.g. `mvn quarkus:dev -Dquarkus.args='--help'` and `mvn quarkus:dev -Dquarkus.args='-c -w --val 1'`."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/picocli.adoc:297
#, no-wrap
msgid "Configuration Reference"
msgstr ""
