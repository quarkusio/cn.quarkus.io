# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/mailer-reference.adoc:6
#, no-wrap
msgid "Mailer Reference Guide"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:12
msgid "This guide is the companion from the xref:mailer.adoc[Mailer Getting Started Guide].  It explains in more details the configuration and usage of the Quarkus Mailer."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/mailer-reference.adoc:13
#, no-wrap
msgid "Mailer extension"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:16
msgid "To use the mailer, you need to add the `quarkus-mailer` extension."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:18
msgid "You can add the extension to your project using:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mailer-reference.adoc:22
#, no-wrap
msgid "> ./mvnw quarkus:add-extensions -Dextensions=\"mailer\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:25
msgid "Or just add the following dependency to your project:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mailer-reference.adoc:32
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-mailer</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/mailer-reference.adoc:35
#, no-wrap
msgid "Accessing the mailer"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:38
msgid "You can inject the mailer in your application using:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mailer-reference.adoc:43
#, no-wrap
msgid ""
"@Inject\n"
"Mailer mailer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mailer-reference.adoc:46
#, no-wrap
msgid ""
"@Inject\n"
"ReactiveMailer reactiveMailer;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:49
msgid "There are 2 APIs:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:51
msgid "`io.quarkus.mailer.Mailer` provides the imperative (blocking and synchronous) API;"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:52
msgid "`io.quarkus.mailer.reactive.ReactiveMailer` provides the reactive (non-blocking and asynchronous) API"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:54
msgid "The two APIs are equivalent feature-wise. Actually the `Mailer` implementation is built on top of the `ReactiveMailer` implementation."
msgstr ""

#. type: Block title
#: upstream/_versions/2.2/guides/mailer-reference.adoc:56
#, no-wrap
msgid "Deprecation"
msgstr "弃用"

#. type: delimited block =
#: upstream/_versions/2.2/guides/mailer-reference.adoc:59
msgid "`io.quarkus.mailer.ReactiveMailer` is deprecated in favor of `io.quarkus.mailer.reactive.ReactiveMailer`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:62
msgid "To send a simple email, proceed as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mailer-reference.adoc:69
#, no-wrap
msgid ""
"// Imperative API:\n"
"mailer.send(Mail.withText(\"to@acme.org\", \"A simple email from quarkus\", \"This is my body.\"));\n"
"// Reactive API:\n"
"Uni<Void> stage = reactiveMailer.send(Mail.withText(\"to@acme.org\", \"A reactive email from quarkus\", \"This is my body.\"));\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:72
msgid "For example, you can use the `Mailer` in an HTTP endpoint as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mailer-reference.adoc:80
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/imperative\")\n"
"public void sendASimpleEmail() {\n"
"    mailer.send(Mail.withText(\"to@acme.org\", \"A simple email from quarkus\", \"This is my body\"));\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mailer-reference.adoc:87
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/reactive\")\n"
"public Uni<Void> sendASimpleEmailAsync() {\n"
"    return reactiveMailer.send(\n"
"            Mail.withText(\"to@acme.org\", \"A reactive email from quarkus\", \"This is my body\"));\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/mailer-reference.adoc:89
#, no-wrap
msgid "Creating Mail objects"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:95
msgid "The mailer lets you send `io.quarkus.mailer.Mail` objects.  You can create new `io.quarkus.mailer.Mail` instances from the constructor or from the `Mail.withText` and `Mail.withHtml` helper methods.  The `Mail` instance lets you add recipients (to, cc, or bcc), set the subject, headers, sender (from) address..."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:97
msgid "You can also send several `Mail` objects in one call:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mailer-reference.adoc:101
#, no-wrap
msgid "mailer.send(mail1, mail2, mail3);\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/mailer-reference.adoc:104
#, no-wrap
msgid "Sending attachments"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:107
msgid "To send attachments, just use the `addAttachment` methods on the `io.quarkus.mailer.Mail` instance:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mailer-reference.adoc:121
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/attachment\")\n"
"public void sendEmailWithAttachment() {\n"
"        mailer.send(Mail.withText(\"clement.escoffier@gmail.com\", \"An email from quarkus with attachment\",\n"
"                \"This is my body\")\n"
"                .addAttachment(\"my-file-1.txt\",\n"
"                        \"content of my file\".getBytes(), \"text/plain\")\n"
"                .addAttachment(\"my-file-2.txt\",\n"
"                        new File(\"my-file.txt\"), \"text/plain\")\n"
"        );\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:125
msgid "Attachments can be created from raw bytes (as shown in the snippet) or files.  Note that files are resolved from the working directory of the application."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/mailer-reference.adoc:127
#, no-wrap
msgid "Sending HTML emails with inlined attachments"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:132
msgid "When sending HTML emails, you can add inlined attachments.  For example, you can send an image with your email, and this image will be displayed in the mail content.  If you put the image file into the `META-INF/resources` folder, you should specify the full path to the file, _e.g._ `META-INF/resources/quarkus-logo.png` otherwise Quarkus will look for the file in the root directory."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mailer-reference.adoc:146
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/html\")\n"
"public void sendingHTML() {\n"
"    String body = \"<strong>Hello!</strong>\" + \"\\n\" +\n"
"        \"<p>Here is an image for you: <img src=\\\"cid:my-image@quarkus.io\\\"/></p>\" +\n"
"        \"<p>Regards</p>\";\n"
"    mailer.send(Mail.withHtml(\"to@acme.org\", \"An email in HTML\", body)\n"
"        .addInlineAttachment(\"quarkus-logo.png\",\n"
"            new File(\"quarkus-logo.png\"),\n"
"            \"image/png\", \"<my-image@quarkus.io>\"));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:152
msgid "Note the _content-id_ format and reference.  By spec, when you create the inline attachment, the content-id must be structured as follows: `<id@domain>`.  If you don't wrap your content-id between `<>`, it is automatically wrapped for you.  When you want to reference your attachment, for instance in the `src` attribute, use `cid:id@domain` (without the `<` and `>`)."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/mailer-reference.adoc:154
#, no-wrap
msgid "Message Body Based on Qute Templates"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:157
msgid "It's possible to inject a mail template, where the message body is created automatically using link:qute[Qute templates]."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mailer-reference.adoc:162
#, no-wrap
msgid ""
"@Path(\"\")\n"
"public class MailingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mailer-reference.adoc:167
#, no-wrap
msgid ""
"    @CheckedTemplate\n"
"    static class Templates {\n"
"        public static native MailTemplateInstance hello(String name); // <1>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mailer-reference.adoc:178
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/mail\")\n"
"    public Uni<Void> send() {\n"
"        // the template looks like: Hello {name}! // <2>\n"
"        return Templates.hello(\"John\")\n"
"           .to(\"to@acme.org\")  // <3>\n"
"           .subject(\"Hello from Qute template\")\n"
"           .send(); // <4>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:181
msgid "By convention, the enclosing class name and method names are used to locate the template. In this particular case, we will use the `src/main/resources/templates/MailingResource/hello.html` and `src/main/resources/templates/MailingResource/hello.txt` templates to create the message body."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:182
#: upstream/_versions/2.2/guides/mailer-reference.adoc:209
msgid "Set the data used in the template."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:183
#: upstream/_versions/2.2/guides/mailer-reference.adoc:208
msgid "Create a mail template instance and set the recipient."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:184
#: upstream/_versions/2.2/guides/mailer-reference.adoc:210
msgid "`MailTemplate.send()` triggers the rendering and, once finished, sends the e-mail via a `Mailer` instance."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:187
msgid "Injected mail templates are validated during build.  The build fails if there is no matching template in `src/main/resources/templates`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:189
msgid "You can also do this without type-safe templates:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mailer-reference.adoc:195
#, no-wrap
msgid ""
"@Inject\n"
"@Location(\"hello\")\n"
"MailTemplate hello; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mailer-reference.adoc:204
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/mail\")\n"
"public Uni<Void> send() {\n"
"    return hello.to(\"to@acme.org\") // <2>\n"
"       .subject(\"Hello from Qute template\")\n"
"       .data(\"name\", \"John\") // <3>\n"
"       .send() // <4>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:207
msgid "If there is no `@Location` qualifier provided, the field name is used to locate the template.  Otherwise, search for the template as the specified location. In this particular case, we will use the `src/main/resources/templates/hello.html` and `src/main/resources/templates/hello.txt` templates to create the message body."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/mailer-reference.adoc:212
#, no-wrap
msgid "Execution model"
msgstr "执行模型"

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:216
msgid "The reactive mailer is non-blocking, and the results are provided on an I/O thread.  See the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture documentation] for further details on this topic."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:219
msgid "The non-reactive mailer blocks until the messages are sent to the SMTP server.  Note that does not mean that the message is delivered, just that it's been sent successfully to the SMTP server, which will be responsible for the delivery."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/mailer-reference.adoc:221
#, no-wrap
msgid "Testing email sending"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:226
msgid "Because it is very inconvenient to send emails during development and testing, you can set the `quarkus.mailer.mock` boolean configuration to `true` to prevent the actual sending of emails but instead print them on stdout and collect them in a `MockMailbox` bean instead.  This is the default if you are running Quarkus in `DEV` or `TEST` mode."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:228
msgid "You can then write tests to verify that your emails were sent, for example, by a REST endpoint:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mailer-reference.adoc:233
#, no-wrap
msgid ""
"@QuarkusTest\n"
"class MailTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mailer-reference.adoc:235
#, no-wrap
msgid "    private static final String TO = \"foo@quarkus.io\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mailer-reference.adoc:238
#, no-wrap
msgid ""
"    @Inject\n"
"    MockMailbox mailbox;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mailer-reference.adoc:243
#, no-wrap
msgid ""
"    @BeforeEach\n"
"    void init() {\n"
"        mailbox.clear();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mailer-reference.adoc:253
#, no-wrap
msgid ""
"    @Test\n"
"    void testTextMail() throws MessagingException, IOException {\n"
"        // call a REST endpoint that sends email\n"
"        given()\n"
"        .when()\n"
"        .get(\"/send-email\")\n"
"        .then()\n"
"           .statusCode(202)\n"
"           .body(is(\"OK\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mailer-reference.adoc:260
#, no-wrap
msgid ""
"        // verify that it was sent\n"
"        List<Mail> sent = mailbox.getMessagesSentTo(TO);\n"
"        assertThat(sent).hasSize(1);\n"
"        Mail actual = sent.get(0);\n"
"        assertThat(actual.getText()).contains(\"Wake up!\");\n"
"        assertThat(actual.getSubject()).isEqualTo(\"Alarm!\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mailer-reference.adoc:264
#, no-wrap
msgid ""
"        assertThat(mailbox.getTotalMessagesSent()).isEqualTo(6);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/mailer-reference.adoc:266
#, no-wrap
msgid "Using the underlying Vert.x Mail Client"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:270
msgid "The Quarkus Mailer is implemented on top of the https://vertx.io/docs/vertx-mail-client/java/[Vert.x Mail Client], providing an asynchronous and non-blocking way to send emails.  If you need fine control on how the mail is sent, for instance if you need to retrieve the message ids, you can inject the underlying client, and use it directly:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mailer-reference.adoc:274
#, no-wrap
msgid "@Inject MailClient client;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:277
msgid "Three API flavors are exposed:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:279
msgid "the Mutiny client (`io.vertx.mutiny.ext.mail.MailClient`)"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:280
msgid "the bare client (`io.vertx.ext.mail.MailClient`)"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:282
msgid "Check the link:vertx[Using Vert.x guide] for further details about these different APIs and how to select the most suitable for you."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:285
msgid "The retrieved `MailClient` is configured using the configuration key presented above.  You can also create your own instance, and pass your own configuration."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/mailer-reference.adoc:287
#, no-wrap
msgid "Gmail specific configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:290
msgid "If you want to use the Gmail SMTP server, first create a dedicated password in `Google Account > Security > App passwords` or go to https://myaccount.google.com/apppasswords."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/mailer-reference.adoc:294
msgid "You need to switch on 2-Step Verification at https://myaccount.google.com/security in order to access the App passwords page."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:297
msgid "When done, you can configure your Quarkus application by adding the following properties to your `application.properties`:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:299
msgid "With TLS:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mailer-reference.adoc:309
#, no-wrap
msgid ""
"quarkus.mailer.auth-methods=DIGEST-MD5 CRAM-SHA256 CRAM-SHA1 CRAM-MD5 PLAIN LOGIN\n"
"quarkus.mailer.from=YOUREMAIL@gmail.com\n"
"quarkus.mailer.host=smtp.gmail.com\n"
"quarkus.mailer.port=587\n"
"quarkus.mailer.start-tls=REQUIRED\n"
"quarkus.mailer.username=YOUREMAIL@gmail.com\n"
"quarkus.mailer.password=YOURGENERATEDAPPLICATIONPASSWORD\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:312
msgid "Or with SSL:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mailer-reference.adoc:322
#, no-wrap
msgid ""
"quarkus.mailer.auth-methods=DIGEST-MD5 CRAM-SHA256 CRAM-SHA1 CRAM-MD5 PLAIN LOGIN\n"
"quarkus.mailer.from=YOUREMAIL@gmail.com\n"
"quarkus.mailer.host=smtp.gmail.com\n"
"quarkus.mailer.port=465\n"
"quarkus.mailer.ssl=true\n"
"quarkus.mailer.username=YOUREMAIL@gmail.com\n"
"quarkus.mailer.password=YOURGENERATEDAPPLICATIONPASSWORD\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/mailer-reference.adoc:328
msgid "The `quarkus.mailer.auth-methods` configuration option is needed for the Quarkus mailer to support password authentication with Gmail.  By default both the mailer and Gmail default to `XOAUTH2` which requires registering an application, getting tokens, etc."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/mailer-reference.adoc:330
#, no-wrap
msgid "Using SSL with native executables"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:334
msgid "Note that if you enable SSL for the mailer and you want to build a native executable, you will need to enable the SSL support.  Please refer to the link:native-and-ssl[Using SSL With Native Executables] guide for more information."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/mailer-reference.adoc:335
#, no-wrap
msgid "Configuring the SMTP credentials"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:341
msgid "It is recommended to encrypt any sensitive data, such as the `quarkus.mailer.password`.  One approach is to save the value into a secure store like HashiCorp Vault, and refer to it from the configuration.  Assuming for instance that Vault contains key `mail-password` at path `myapps/myapp/myconfig`, then the mailer extension can be simply configured as:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mailer-reference.adoc:347
#, no-wrap
msgid ""
"...\n"
"# path within the kv secret engine where is located the application sensitive configuration\n"
"quarkus.vault.secret-config-kv-path=myapps/myapp/myconfig\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mailer-reference.adoc:350
#, no-wrap
msgid ""
"...\n"
"quarkus.mailer.password=${mail-password}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:353
msgid "Please note that the password value is evaluated only once, at startup time. If `mail-password` was changed in Vault, the only way to get the new value would be to restart the application."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:356
msgid "For more information about the Mailer configuration please refer to the <<configuration-reference, Configuration Reference>>."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/mailer-reference.adoc:357
#, no-wrap
msgid "Configuring a trust store"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:360
msgid "If your SMTP requires a trust store, you can configure the trust store as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mailer-reference.adoc:369
#, no-wrap
msgid ""
"quarkus.mailer.host=...\n"
"quarkus.mailer.port=...\n"
"quarkus.mailer.ssl=true\n"
"quarkus.mailer.trust-store.paths=truststore.jks # the path to your trust store\n"
"quarkus.mailer.trust-store.password=secret # the trust store password if any\n"
"quarkus.mailer.trust-store.type=JKS # the type of trust store if it can't be deduced from the file extension\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:374
msgid "Quarkus mailer supports JKS, PCKS#12 and PEM trust stores.  For PEM, you can configure multiple files.  For JKS and PCKS#12, you can configure the password if any."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:377
msgid "`quarkus.mailer.trust-store.type` is optional and allows configuring the type of trust store (among `JKS`, `PEM` and `PCKS`).  When not set, Quarkus tries to deduce the type from the file name."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mailer-reference.adoc:379
msgid "You can also configure `quarkus.mailer.trust-all=true` to bypass the verification."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/mailer-reference.adoc:381
#, no-wrap
msgid "Mailer Configuration Reference"
msgstr ""
