# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:6
#, no-wrap
msgid "Using OpenID Connect (OIDC) to Protect Web Applications using Authorization Code Flow."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:12
msgid "This guide demonstrates how to use Quarkus OpenID Connect (OIDC) Extension to protect your Quarkus HTTP endpoints using OpenId Connect Authorization Code Flow supported by OpenId Connect compliant Authorization Servers such as https://www.keycloak.org/about.html[Keycloak]."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:14
msgid "The extension allows to easily authenticate the users of your web application by redirecting them to the OpenID Connect Provider (e.g.: Keycloak) to login and, once the authentication is complete, return them back with the code confirming the successful authentication. The extension will request ID and access tokens from the OpenID Connect Provider using an authorization code grant and verify these tokens in order to authorize an access to the application."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:16
msgid "Please read the link:security-openid-connect[Using OpenID Connect to Protect Service Applications] guide if you need to protect your applications using Bearer Token Authorization."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:18
msgid "Please read the link:security-openid-connect-multitenancy[Using OpenID Connect Multi-Tenancy] guide how to support multiple tenants."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:19
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:22
msgid "To complete this guide, you need:"
msgstr "要完成这个指南，你需要："

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:24
msgid "less than 15 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:25
msgid "an IDE"
msgstr "一个编辑器"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:26
msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
msgstr "安装JDK 11以上版本并正确配置了 `JAVA_HOME`"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:27
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:28
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:29
msgid "Docker"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:30
#, no-wrap
msgid "Architecture"
msgstr "应用结构"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:33
msgid "In this example, we build a very simple web application with a single page:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:35
msgid "`/index.html`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:37
msgid "This page is protected and can only be accessed by authenticated users."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:38
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:42
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:44
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:46
msgid "The solution is located in the `security-openid-connect-web-authentication-quickstart` {quickstarts-tree-url}/security-openid-connect-web-authentication-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:47
#, no-wrap
msgid "Creating the Maven Project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:50
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:59
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=security-openid-connect-web-authentication-quickstart \\\n"
"    -Dextensions=\"resteasy,oidc\" \\\n"
"    -DnoExamples\n"
"cd security-openid-connect-web-authentication-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:63
msgid "If you already have your Quarkus project configured, you can add the `oidc` extension to your project by running the following command in your project base directory:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:67
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"oidc\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:70
msgid "This will add the following to your `pom.xml`:"
msgstr "这将在你的 `pom.xml` 中添加以下内容："

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:77
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:79
#, no-wrap
msgid "Writing the application"
msgstr "编写应用程序"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:82
msgid "Let's write a simple JAX-RS resource which has all the tokens returned in the authorization code grant response injected:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:86
#, no-wrap
msgid "package org.acme.security.openid.connect.web.authentication;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:90
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:92
#, no-wrap
msgid "import org.eclipse.microprofile.jwt.JsonWebToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:95
#, no-wrap
msgid ""
"import io.quarkus.oidc.IdToken;\n"
"import io.quarkus.oidc.RefreshToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:98
#, no-wrap
msgid ""
"@Path(\"/tokens\")\n"
"public class TokenResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:105
#, no-wrap
msgid ""
"    /**\n"
"     * Injection point for the ID Token issued by the OpenID Connect Provider\n"
"     */\n"
"    @Inject\n"
"    @IdToken\n"
"    JsonWebToken idToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:111
#, no-wrap
msgid ""
"    /**\n"
"     * Injection point for the Access Token issued by the OpenID Connect Provider\n"
"     */\n"
"    @Inject\n"
"    JsonWebToken accessToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:117
#, no-wrap
msgid ""
"    /**\n"
"     * Injection point for the Refresh Token issued by the OpenID Connect Provider\n"
"     */\n"
"    @Inject\n"
"    RefreshToken refreshToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:129
#, no-wrap
msgid ""
"    /**\n"
"     * Returns the tokens available to the application. This endpoint exists only for demonstration purposes, you should not\n"
"     * expose these tokens in a real application.\n"
"     *\n"
"     * @return a map containing the tokens available to the application\n"
"     */\n"
"    @GET\n"
"    public String getTokens() {\n"
"        StringBuilder response = new StringBuilder().append(\"<html>\")\n"
"                .append(\"<body>\")\n"
"                .append(\"<ul>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:131
#, no-wrap
msgid "        Object userName = this.idToken.getClaim(\"preferred_username\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:135
#, no-wrap
msgid ""
"        if (userName != null) {\n"
"            response.append(\"<li>username: \").append(userName.toString()).append(\"</li>\");\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:137
#, no-wrap
msgid "        Object scopes = this.accessToken.getClaim(\"scope\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:141
#, no-wrap
msgid ""
"        if (scopes != null) {\n"
"            response.append(\"<li>scopes: \").append(scopes.toString()).append(\"</li>\");\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:143
#, no-wrap
msgid "        response.append(\"<li>refresh_token: \").append(refreshToken.getToken() != null).append(\"</li>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:147
#, no-wrap
msgid ""
"        return response.append(\"</ul>\").append(\"</body>\").append(\"</html>\").toString();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:150
msgid "This endpoint has ID, access and refresh tokens injected. It returns a `preferred_username` claim from the ID token, a `scope` claim from the access token and also a refresh token availability status."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:152
msgid "Note that you do not have to inject the tokens - it is only required if the endpoint needs to use the ID token to interact with the currently authenticated user or use the access token to access a downstream service on behalf of this user."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:154
msgid "Please see <<access_id_and_access_tokens,Access ID and Access Tokens>> section below for more information."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:155
#, no-wrap
msgid "Configuring the application"
msgstr "配置该应用程序"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:158
msgid "The OpenID Connect extension allows you to define the configuration using the `application.properties` file which should be located at the `src/main/resources` directory."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:159
#, no-wrap
msgid "Configuring using the application.properties file"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:168
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
"quarkus.oidc.client-id=frontend\n"
"quarkus.oidc.application-type=web-app\n"
"quarkus.http.auth.permission.authenticated.paths=/*\n"
"quarkus.http.auth.permission.authenticated.policy=authenticated\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:171
msgid "This is the simplest configuration you can have when enabling authentication to your application."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:173
msgid "The `quarkus.oidc.client-id` property references the `client_id` issued by the OpenID Connect Provider and, in this case, the application is a public client (no client secret is defined)."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:175
msgid "The `quarkus.oidc.application-type` property is set to `web-app` in order to tell Quarkus that you want to enable the OpenID Connect Authorization Code Flow, so that your users are redirected to the OpenID Connect Provider to authenticate."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:178
msgid "For last, the `quarkus.http.auth.permission.authenticated` permission is set to tell Quarkus about the paths you want to protect. In this case, all paths are being protected by a policy that ensures that only `authenticated` users are allowed to access. For more details check link:security-authorization[Security Authorization Guide]."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:179
#, no-wrap
msgid "Configuring CORS"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:182
msgid "If you plan to consume this application from another application running on a different domain, you will need to configure CORS (Cross-Origin Resource Sharing). Please read the link:http-reference#cors-filter[HTTP CORS documentation] for more details."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:183
#, no-wrap
msgid "Starting and Configuring the Keycloak Server"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:186
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:190
#, no-wrap
msgid "docker run --name keycloak -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin -p 8180:8080 {keycloak-docker-image}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:193
msgid "You should be able to access your Keycloak Server at http://localhost:8180/auth[localhost:8180/auth]."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:195
msgid "Log in as the `admin` user to access the Keycloak Administration Console. Username should be `admin` and password `admin`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:197
msgid "Import the {quickstarts-tree-url}/security-openid-connect-web-authentication-quickstart/config/quarkus-realm.json[realm configuration file] to create a new realm. For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:198
#, no-wrap
msgid "Running and Using the Application"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:200
#, no-wrap
msgid "Running in Developer Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:203
msgid "To run the microservice in dev mode, use `./mvnw clean compile quarkus:dev`."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:204
#, no-wrap
msgid "Running in JVM Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:207
msgid "When you're done playing with \"dev-mode\" you can run it as a standard Java application."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:209
msgid "First compile it:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:213
#, no-wrap
msgid "./mvnw package\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:216
msgid "Then run it:"
msgstr "然后运行："

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:220
#, no-wrap
msgid "java -jar target/quarkus-app/quarkus-run.jar\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:222
#, no-wrap
msgid "Running in Native Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:225
msgid "This same demo can be compiled into native code: no modifications required."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:229
msgid "This implies that you no longer need to install a JVM on your production environment, as the runtime technology is included in the produced binary, and optimized to run with minimal resource overhead."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:232
msgid "Compilation will take a bit longer, so this step is disabled by default; let's build again by enabling the `native` profile:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:236
#, no-wrap
msgid "./mvnw package -Pnative\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:239
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:243
#, no-wrap
msgid "./target/security-openid-connect-web-authentication-quickstart-runner\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:245
#, no-wrap
msgid "Testing the Application"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:248
msgid "To test the application, you should open your browser and access the following URL:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:250
msgid "http://localhost:8080[http://localhost:8080]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:252
msgid "If everything is working as expected, you should be redirected to the Keycloak server to authenticate."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:254
msgid "In order to authenticate to the application you should type the following credentials when at the Keycloak login page:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:256
msgid "Username: *alice*"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:257
msgid "Password: *alice*"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:259
msgid "After clicking the `Login` button you should be redirected back to the application."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:260
#, no-wrap
msgid "Redirection"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:263
msgid "When the user is redirected to the OpenID Connect Provider to authenticate, the redirect URL includes a `redirect_uri` query parameter which indicates to the Provider where the user has to be redirected to once the authentication has been completed."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:265
msgid "Quarkus will set this parameter to the current request URL by default. For example, if the user is trying to access a Quarkus service endpoint at `http://localhost:8080/service/1` then the `redirect_uri` parameter will be set to `http://localhost:8080/service/1`. Similarly, if the request URL is `http://localhost:8080/service/2` then the `redirect_uri` parameter will be set to `http://localhost:8080/service/2`, etc."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:268
msgid "OpenID Connect Providers may be configured to require the `redirect_uri` parameter to have the same value (eg. `http://localhost:8080/service/callback`) for all the redirect URLs.  In such cases a `quarkus.oidc.authentication.redirect-path` property has to be set, for example, `quarkus.oidc.authentication.redirect-path=/service/callback`, and Quarkus will set the `redirect_uri` parameter to an absolute URL such as `http://localhost:8080/service/callback` which will be the same regardless of the current request URL."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:270
msgid "If `quarkus.oidc.authentication.redirect-path` is set but the original request URL has to be restored after the user has been redirected back to a callback URL such as `http://localhost:8080/service/callback` then a `quarkus.oidc.authentication.restore-path-after-redirect` property has to be set to `true` which will restore the request URL such as `http://localhost:8080/service/1`, etc."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:272
#, no-wrap
msgid "Dealing with Cookies"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:275
msgid "The OIDC adapter uses cookies to keep the session, code flow and post logout state."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:277
msgid "`quarkus.oidc.authentication.cookie-path` property is used to ensure the cookies are visible especially when you access the protected resources with overlapping or different roots, for example:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:279
msgid "`/index.html` and `/web-app/service`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:280
msgid "`/web-app/service1` and `/web-app/service2`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:281
msgid "`/web-app1/service` and `/web-app2/service`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:283
msgid "`quarkus.oidc.authentication.cookie-path` is set to `/` by default but can be narrowed to the more specific root path such as `/web-app`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:286
msgid "You can also set a `quarkus.oidc.authentication.cookie-path-header` property if the cookie path needs to be set dynamically.  For example, setting `quarkus.oidc.authentication.cookie-path-header=X-Forwarded-Prefix` means that the value of HTTP `X-Forwarded-Prefix` header will be used to set a cookie path."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:288
msgid "If `quarkus.oidc.authentication.cookie-path-header` is set but no configured HTTP header is available in the current request then the `quarkus.oidc.authentication.cookie-path` will be checked."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:290
msgid "If your application is deployed across multiple domains, make sure to set a `quarkus.oidc.authentication.cookie-domain` property for the session cookie be visible to all protected Quarkus services, for example, if you have 2 services deployed at:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:292
msgid "https://whatever.wherever.company.net/"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:293
msgid "https://another.address.company.net/"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:295
msgid "then the `quarkus.oidc.authentication.cookie-domain` property must be set to `company.net`."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:296
#, no-wrap
msgid "Logout"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:299
msgid "By default the logout is based on the expiration time of the ID Token issued by the OpenID Connect Provider. When the ID Token expires, the current user session at the Quarkus endpoint is invalidated and the user is redirected to the OpenID Connect Provider again to authenticate. If the session at the OpenID Connect Provider is still active, users are automatically re-authenticated without having to provide their credentials again."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:301
msgid "The current user session may be automatically extended by enabling a `quarkus.oidc.token.refresh-expired` property. If it is set to `true` then when the current ID Token expires a Refresh Token Grant will be used to refresh ID Token as well as Access and Refresh Tokens."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:302
#, no-wrap
msgid "User-Initiated Logout"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:306
msgid "Users can request a logout by sending a request to the Quarkus endpoint logout path set with a `quarkus.oidc.logout.path` property.  For example, if the endpoint address is `https://application.com/webapp` and the `quarkus.oidc.logout.path` is set to \"/logout\" then the logout request has to be sent to `https://application.com/webapp/logout`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:308
msgid "This logout request will start an https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout] and the user will be redirected to the OpenID Connect Provider to logout where a user may be asked to confirm the logout is indeed intended."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:310
msgid "The user will be returned to the endpoint post logout page once the logout has been completed if the `quarkus.oidc.logout.post-logout-path` property is set. For example, if the endpoint address is `https://application.com/webapp` and the `quarkus.oidc.logout.post-logout-path` is set to \"/signin\" then the user will be returned to `https://application.com/webapp/signin` (note this URI must be registered as a valid `post_logout_redirect_uri` in the OpenID Connect Provider)."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:312
msgid "If the `quarkus.oidc.logout.post-logout-path` is set then a `q_post_logout` cookie will be created and a matching `state` query parameter will be added to the logout redirect URI and the OpenID Connect Provider will return this `state` once the logout has been completed. It is recommended for the Quarkus `web-app` applications to check that a `state` query parameter matches the value of the `q_post_logout` cookie which can be done for example in a JAX-RS filter."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:314
msgid "Note that a cookie name will vary when using link:security-openid-connect-multitenancy[OpenID Connect Multi-Tenancy]. For example, it will be named `q_post_logout_tenant_1` for a tenant with a `tenant_1` id, etc."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:316
msgid "Here is an example of how to configure an RP initiated logout flow:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:322
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
"quarkus.oidc.client-id=frontend\n"
"quarkus.oidc.application-type=web-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:325
#, no-wrap
msgid ""
"quarkus.oidc.tenant-logout.logout.path=/logout\n"
"quarkus.oidc.tenant-logout.logout.post-logout-path=/postlogout\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:329
#, no-wrap
msgid ""
"# Only the authenticated users can initiate a logout:\n"
"quarkus.http.auth.permission.authenticated.paths=/logout\n"
"quarkus.http.auth.permission.authenticated.policy=authenticated\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:333
#, no-wrap
msgid ""
"# Logged out users should be returned to the /welcome.html site which will offer an option to re-login:\n"
"quarkus.http.auth.permission.authenticated.paths=/welcome.html\n"
"quarkus.http.auth.permission.authenticated.policy=permit\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:337
msgid "You may also need to set `quarkus.oidc.authentication.cookie-path` to a path value common to all of the application resources which is `/` in this example.  See <<oidc-cookies, Dealing with Cookies>> for more information."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:339
#, no-wrap
msgid "Accessing ID and Access Tokens"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:342
msgid "OIDC Code Authentication Mechanism acquires three tokens during the authorization code flow: https://openid.net/specs/openid-connect-core-1_0.html#IDToken[IDToken], Access Token and Refresh Token."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:345
msgid "ID Token is always a JWT token and is used to represent a user authentication with the JWT claims.  One can access ID Token claims by injecting `JsonWebToken` with an `IdToken` qualifier:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:352
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import io.quarkus.oidc.IdToken;\n"
"import io.quarkus.security.Authenticated;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:356
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:380
#, no-wrap
msgid ""
"@Path(\"/web-app\")\n"
"@Authenticated\n"
"public class ProtectedResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:360
#, no-wrap
msgid ""
"    @Inject\n"
"    @IdToken\n"
"    JsonWebToken idToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:366
#, no-wrap
msgid ""
"    @GET\n"
"    public String getUserName() {\n"
"        return idToken.getName();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:369
msgid "Access Token is usually used by the OIDC `web-app` application to access other endpoints on behalf of the currently logged in user. The raw access token can be accessed as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:376
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import io.quarkus.oidc.AccessTokenCredential;\n"
"import io.quarkus.security.Authenticated;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:383
#, no-wrap
msgid ""
"    @Inject\n"
"    JsonWebToken accessToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:387
#, no-wrap
msgid ""
"    // or\n"
"    // @Inject\n"
"    // AccessTokenCredential accessTokenCredential;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:393
#, no-wrap
msgid ""
"    @GET\n"
"    public String getReservationOnBehalfOfUser() {\n"
"        String rawAccessToken = accessToken.getRawToken();\n"
"        //or\n"
"        //String rawAccessToken = accessTokenCredential.getToken();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:398
#, no-wrap
msgid ""
"        // Use the raw access token to access a remote endpoint\n"
"        return getReservationfromRemoteEndpoint(rawAccesstoken);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:401
msgid "Note that `AccessTokenCredential` will have to be used if the Access Token issued to the Quarkus `web-app` application is opaque (binary) and can not be parsed to `JsonWebToken`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:403
msgid "Injection of the `JsonWebToken` and `AccessTokenCredential` is supported in both `@RequestScoped` and `@ApplicationScoped` contexts."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:405
msgid "RefreshToken is only used to refresh the current ID and access tokens as part of its link:#session_management[session management] process."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:407
#, no-wrap
msgid "User Info"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:410
msgid "If IdToken does not provide enough information about the currently authenticated user then you can set a `quarkus.oidc.user-info-required=true` property for a https://openid.net/specs/openid-connect-core-1_0.html#UserInfo[UserInfo] JSON object from the OIDC userinfo endpoint to be requested."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:412
msgid "A request will be sent to the OpenId Provider UserInfo endpoint using the access token returned with the authorization code grant response and an `io.quarkus.oidc.UserInfo` (a simple `javax.json.JsonObject` wrapper) object will be created. `io.quarkus.oidc.UserInfo` can be either injected or accessed as a SecurityIdentity `userinfo` attribute."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:414
#, no-wrap
msgid "Configuration Metadata"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:417
msgid "The current tenant's discovered link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenId Connect Configuration Metadata] is represented by `io.quarkus.oidc.OidcConfigurationMetadata` and can be either injected or accessed as a `SecurityIdentity` `configuration-metadata` attribute."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:419
msgid "The default tenant's `OidcConfigurationMetadata` is injected if the endpoint is public."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:421
#, no-wrap
msgid "Token Claims And SecurityIdentity Roles"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:424
msgid "The way the roles are mapped to the SecurityIdentity roles from the verified tokens is identical to how it is done for the link:security-openid-connect#token-claims-and-securityidentity-roles[bearer tokens] with the only difference being is that https://openid.net/specs/openid-connect-core-1_0.html#IDToken[ID Token] is used as a source of the roles by default."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:426
msgid "Note if you use Keycloak then you should set a Microprofile JWT client scope for ID token to contain a `groups` claim, please see the https://www.keycloak.org/docs/latest/server_admin/#protocol[Keycloak Server Administration Guide] for more information."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:428
msgid "If only the access token contains the roles and this access token is not meant to be propagated to the downstream endpoints then set `quarkus.oidc.roles.source=accesstoken`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:430
msgid "If UserInfo is the source of the roles then set `quarkus.oidc.authentication.user-info-required=true` and `quarkus.oidc.roles.source=userinfo`, and if needed, `quarkus.oidc.roles.role-claim-path`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:432
msgid "Additionally a custom `SecurityIdentityAugmentor` can also be used to add the roles as documented link:security#security-identity-customization[here]."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:434
#, no-wrap
msgid "Token Verification And Introspection"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:437
msgid "Please see link:security-openid-connect#token-verification-introspection for details about how the tokens are verified and introspected."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:439
msgid "Note that in case of `web-app` applications only `IdToken` is verified by default since the access token is not used by default to access the current Quarkus `web-app` endpoint and instead meant to be propagated to the services expecting this access token, for example, to the OpenId Connect Provider's UserInfo endpoint, etc. However if you expect the access token to contain the roles required to access the current Quarkus endpoint (`quarkus.oidc.roles.source=accesstoken`) then it will also be verified."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:441
#, no-wrap
msgid "Session Management"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:444
msgid "If you have a link:security-openid-connect#single-page-applications[Single Page Application for Service Applications] where your OpenId Connect Provider script such as `keycloak.js` is managing an authoriization code flow then that script will also control the SPA authentication session lifespan."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:446
msgid "If you work with a Quarkus OIDC `web-app` application then it is Quarkus OIDC Code Authentication mechanism which is managing the user session lifespan."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:448
msgid "The session age is calculated by adding the lifespan value of the current IDToken and the values of the `quarkus.oidc.authentication.session-age-extension` and `quarkus.oidc.token.lifespan-grace` properties. Of the last two properties only `quarkus.oidc.authentication.session-age-extension` should be used to significantly extend the session lifespan if required since `quarkus.oidc.token.lifespan-grace` is only meant for taking some small clock skews into consideration."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:450
msgid "When the currently authenticated user returns to the protected Quarkus endpoint and the ID token associated with the session cookie has expired then, by default, the user will be auto-redirected to the OIDC Authorization endpoint to re-authenticate. Most likely the OIDC provider will challenge the user again though not necessarily if the session between the user and this OIDC provider is still active which may happen if it is configured to last longer than the ID token."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:452
msgid "If the `quarkus.oidc.token.refresh-expired` then the expired ID token (as well as the access token) will be refreshed using the refresh token returned with the authorization code grant response. This refresh token may also be recycled (refreshed) itself as part of this process. As a result the new session cookie will be created and the session will be extended."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:454
msgid "Note, `quarkus.oidc.authentication.session-age-extension` can be important when dealing with expired ID tokens, when the user is not very active. In such cases, if the ID token expires, then the session cookie may not be returned back to the Quarkus endpoint during the next user request and Quarkus will assume it is the first authentication request. Therefore using `quarkus.oidc.authentication.session-age-extension` is important if you need to have even the expired ID tokens refreshed."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:456
msgid "You can also complement refreshing the expired ID tokens by proactively refreshing the valid ID tokens which are about to be expired within the `quarkus.oidc.token.refresh-token-time-skew` value. If, during the current user request, it is calculated that the current ID token will expire within this `quarkus.oidc.token.refresh-token-time-skew` then it will be refreshed and the new session cookie will be created. This property should be set to a value which is less than the ID token lifespan; the closer it is to this lifespan value the more often the ID token will be refreshed."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:458
msgid "You can have this process further optimized by having a simple JavaScript function periodically emulating the user activity by pinging your Quarkus endpoint thus minimizing the window during which the user may have to be re-authenticated."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:460
msgid "Note this user session can not be extended forever - the returning user with the expired ID token will have to re-authenticate at the OIDC provider endpoint once the refresh token has expired."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:461
#, no-wrap
msgid "TokenStateManager"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:464
msgid "OIDC `CodeAuthenticationMechanism` is using the default `io.quarkus.oidc.TokenStateManager` interface implementation to keep the ID, access and refresh tokens returned in the authorization code or refresh grant responses in a session cookie. It makes Quarkus OIDC endpoints completely stateless."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:466
msgid "Note that some endpoints do not require the access token. An access token is only required if the endpoint needs to retrieve `UserInfo` or access the downstream service with this access token or use the roles associated with the access token (the roles in the ID token are checked by default). In such cases you can set either `quarkus.oidc.token-state-manager.strategy=id-refresh-token` (keep ID and refresh tokens only) or `quarkus.oidc.token-state-manager.strategy=id-token` (keep ID token only)."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:469
msgid "If the ID, access and refresh tokens are JWT tokens then combining all of them (if the strategy is the default `keep-all-tokens`) or only ID and refresh tokens (if the strategy is `id-refresh-token`) may produce a session cookie value larger than 4KB and the browsers may not be able to keep this cookie.  In such cases, you can use `quarkus.oidc.token-state-manager.split-tokens=true` to have a unique session token per each of these tokens."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:471
msgid "Register your own `io.quarkus.oidc.TokenStateManager' implementation as an `@ApplicationScoped` CDI bean if you need to customize the way the tokens are associated with the session cookie. For example, you may want to keep the tokens in a database and have only a database pointer stored in a session cookie. Note though that it may present some challenges in making the tokens available across multiple microservices nodes."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:473
msgid "Here is a simple example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:477
#, no-wrap
msgid "package io.quarkus.oidc.test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:480
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:488
#, no-wrap
msgid ""
"import io.quarkus.arc.AlternativePriority;\n"
"import io.quarkus.oidc.AuthorizationCodeTokens;\n"
"import io.quarkus.oidc.OidcTenantConfig;\n"
"import io.quarkus.oidc.TokenStateManager;\n"
"import io.quarkus.oidc.runtime.DefaultTokenStateManager;\n"
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:492
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@AlternativePriority(1)\n"
"public class CustomTokenStateManager implements TokenStateManager {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:495
#, no-wrap
msgid ""
"    @Inject\n"
"    DefaultTokenStateManager tokenStateManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:502
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<String> createTokenState(RoutingContext routingContext, OidcTenantConfig oidcConfig,\n"
"            AuthorizationCodeTokens sessionContent, TokenStateManager.CreateTokenStateRequestContext requestContext) {\n"
"        return tokenStateManager.createTokenState(routingContext, oidcConfig, sessionContent, requestContext)\n"
"                .map(t -> (t + \"|custom\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:512
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<AuthorizationCodeTokens> getTokens(RoutingContext routingContext, OidcTenantConfig oidcConfig,\n"
"            String tokenState, TokenStateManager.GetTokensRequestContext requestContext) {\n"
"        if (!tokenState.endsWith(\"|custom\")) {\n"
"            throw new IllegalStateException();\n"
"        }\n"
"        String defaultState = tokenState.substring(0, tokenState.length() - 7);\n"
"        return tokenStateManager.getTokens(routingContext, oidcConfig, defaultState, requestContext);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:523
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<Void> deleteTokens(RoutingContext routingContext, OidcTenantConfig oidcConfig, String tokenState,\n"
"            TokenStateManager.DeleteTokensRequestContext requestContext) {\n"
"        if (!tokenState.endsWith(\"|custom\")) {\n"
"            throw new IllegalStateException();\n"
"        }\n"
"        String defaultState = tokenState.substring(0, tokenState.length() - 7);\n"
"        return tokenStateManager.deleteTokens(routingContext, oidcConfig, defaultState, requestContext);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:525
#, no-wrap
msgid "Listening to important authentication events"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:528
msgid "One can register `@ApplicationScoped` bean which will observe important OIDC authentication events. The listener will be updated when a user has logged in for the first time or re-authenticated, as well as when the session has been refreshed. More events may be reported in the future. For example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:533
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.enterprise.event.Observes;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:538
#, no-wrap
msgid ""
"import io.quarkus.oidc.IdTokenCredential;\n"
"import io.quarkus.oidc.SecurityEvent;\n"
"import io.quarkus.security.identity.AuthenticationRequestContext;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:541
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class SecurityEventListener {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:548
#, no-wrap
msgid ""
"    public void event(@Observes SecurityEvent event) {\n"
"        String tenantId = event.getSecurityIdentity().getAttribute(\"tenant-id\");\n"
"        RoutingContext vertxContext = event.getSecurityIdentity().getCredential(IdTokenCredential.class).getRoutingContext();\n"
"        vertxContext.put(\"listener-message\", String.format(\"event:%s,tenantId:%s\", event.getEventType().name(), tenantId));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:550
#, no-wrap
msgid "Single Page Applications"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:553
msgid "Please check if implementing SPAs the way it is suggested in the link:security-openid-connect#single-page-applications[Single Page Applications for Service Applications] section can meet your requirements."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:555
msgid "If you prefer to use SPA and JavaScript API such as `Fetch` or `XMLHttpRequest`(XHR) with Quarkus web applications, please be aware that OpenID Connect Providers may not support CORS for Authorization endpoints where the users are authenticated after a redirect from Quarkus. This will lead to authentication failures if the Quarkus application and the OpenID Connect Provider are hosted on the different HTTP domains/ports."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:557
msgid "In such cases, set the `quarkus.oidc.authentication.java-script-auto-redirect` property to `false` which will instruct Quarkus to return a `499` status code and `WWW-Authenticate` header with the `OIDC` value. The browser script also needs to be updated to set `X-Requested-With` header with the `JavaScript` value and reload the last requested page in case of `499`, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:562
#, no-wrap
msgid ""
"Future<void> callQuarkusService() async {\n"
"    Map<String, String> headers = Map.fromEntries([MapEntry(\"X-Requested-With\", \"JavaScript\")]);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:571
#, no-wrap
msgid ""
"    await http\n"
"        .get(\"https://localhost:443/serviceCall\")\n"
"        .then((response) {\n"
"            if (response.statusCode == 499) {\n"
"                window.location.assign(\"https://localhost.com:443/serviceCall\");\n"
"            }\n"
"         });\n"
"  }\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:573
#, no-wrap
msgid "Cloud Services"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:575
#, no-wrap
msgid "Google Cloud"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:578
msgid "You can have Quarkus OIDC `web-app` applications access **Google Cloud services** such as **BigQuery** on behalf of the currently authenticated users who have enabled OpenID Connect (Authorization Code Flow) permissions to such services in their Google Developer Consoles."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:581
msgid "It is super easy to do with https://github.com/quarkiverse[Quarkiverse] https://github.com/quarkiverse/quarkiverse-google-cloud-services[Google Cloud Services], only add the https://github.com/quarkiverse/quarkiverse-google-cloud-services/releases/latest[latest tag] service dependency, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:589
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.quarkiverse.googlecloudservices</groupId>\n"
"  <artifactId>quarkus-google-cloud-bigquery</artifactId>\n"
"  <version>${quarkiverse.googlecloudservices.version}</version>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:592
msgid "and configure Google OIDC properties:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:600
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=https://accounts.google.com\n"
"quarkus.oidc.application-type=web-app\n"
"quarkus.oidc.client-id={GOOGLE_CLIENT_ID}\n"
"quarkus.oidc.credentials.secret={GOOGLE_CLIENT_SECRET}\n"
"quarkus.oidc.token.issuer=https://accounts.google.com\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:602
#, no-wrap
msgid "Provider Endpoint configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:605
msgid "OIDC `web-app` application needs to know OpenId Connect provider's authorization, token, `JsonWebKey` (JWK) set and possibly `UserInfo`, introspection and end session (RP-initiated logout) endpoint addresses."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:607
msgid "By default they are discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc.auth-server-url`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:609
msgid "Alternatively, if the discovery endpoint is not available or you would like to save on the discovery endpoint roundtrip, you can disable the discovery and configure them with relative path values, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:626
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
"quarkus.oidc.discovery-enabled=false\n"
"# Authorization endpoint: http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/auth\n"
"quarkus.oidc.authorization-path=/protocol/openid-connect/auth\n"
"# Token endpoint: http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/token\n"
"quarkus.oidc.token-path=/protocol/openid-connect/token\n"
"# JWK set endpoint: http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/certs\n"
"quarkus.oidc.jwks-path=/protocol/openid-connect/certs\n"
"# UserInfo endoint: http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/userinfo\n"
"quarkus.oidc.user-info-path=/protocol/openid-connect/userinfo\n"
"# Token Introspection endoint: http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/token/introspect\n"
"quarkus.oidc.introspection-path=/protocol/openid-connect/token/introspect\n"
"# End session endoint: http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/logout\n"
"quarkus.oidc.end-session-path=/protocol/openid-connect/logout\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:629
#, no-wrap
msgid "JSON Web Token Claim Verification"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:633
msgid "Please see link:security-openid-connect#jwt-claim-verification[JSON Web Token Claim verification] section about the claim verification, including the `iss` (issuer) claim.  It applies to ID tokens but also to access tokens in a JWT format if the `web-app` application has requested the access token verification."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:634
#, no-wrap
msgid "Token Propagation"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:636
msgid "Please see link:security-openid-connect-client#token-propagation[Token Propagation] section about the Authorization Code Flow access token propagation to the downstream services."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:638
#, no-wrap
msgid "Oidc Provider Client Authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:641
msgid "`quarkus.oidc.runtime.OidcProviderClient` is used when a remote request to an OpenId Connect Provider has to be done. It has to authenticate to the OpenId Connect Provider when the authorization code has to be exchanged for the ID, access and refresh tokens, when the ID and access tokens have to be refreshed or introspected."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:643
msgid "All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:645
msgid "`client_secret_basic`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:651
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.secret=mysecret\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:654
msgid "or"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:660
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.client-secret.value=mysecret\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:663
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:697
msgid "or with the secret retrieved from a link:credentials-provider[CredentialsProvider]:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:668
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:702
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:673
#, no-wrap
msgid ""
"# This is a key which will be used to retrieve a secret from the map of credentails returned from CredentialsProvider\n"
"quarkus.oidc.credentials.client-secret.provider.key=mysecret-key\n"
"# Set it only if more than one CredentialsProvider can be registered\n"
"quarkus.oidc.credentials.client-secret.provider.name=oidc-credentials-provider\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:676
msgid "`client_secret_post`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:683
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.client-secret.value=mysecret\n"
"quarkus.oidc.credentials.client-secret.method=post\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:686
msgid "`client_secret_jwt`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:694
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
"# This is a token key identifier 'kid' header - set it if your OpenId Connect provider requires it,\n"
"quarkus.oidc.credentials.jwt.token-key-id=mykey\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:707
#, no-wrap
msgid ""
"# This is a key which will be used to retrieve a secret from the map of credentails returned from CredentialsProvider\n"
"quarkus.oidc.credentials.jwt.secret-provider.key=mysecret-key\n"
"# Set it only if more than one CredentialsProvider can be registered\n"
"quarkus.oidc.credentials.jwt.secret-provider.name=oidc-credentials-provider\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:710
msgid "`private_key_jwt` with the PEM key file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:718
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.jwt.key-file=privateKey.pem\n"
"# This is a token key identifier 'kid' header - set it if your OpenId Connect provider requires it\n"
"quarkus.oidc.credentials.jwt.token-key-id=mykey\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:721
msgid "`private_key_jwt` with the key store file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:734
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.jwt.key-store-file=keystore.jks\n"
"quarkus.oidc.credentials.jwt.key-store-password=mypassword\n"
"quarkus.oidc.credentials.jwt.key-password=mykeypassword\n"
"# Private key alias inside the keystore\n"
"quarkus.oidc.credentials.jwt.key-id=mykey\n"
"# This is a token key identifier 'kid' header - set it if your OpenId Connect provider requires it,\n"
"# Note it can be different to the `quarkus.oidc.credentials.jwt.key-id` value\n"
"quarkus.oidc.credentials.jwt.token-key-id=mykey\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:737
msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that no client secret goes over the wire."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:739
#, no-wrap
msgid "Testing"
msgstr "测试"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:742
msgid "Start by adding the following dependencies to your test project:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:761
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>net.sourceforge.htmlunit</groupId>\n"
"    <artifactId>htmlunit</artifactId>\n"
"    <exclusions>\n"
"        <exclusion>\n"
"            <groupId>org.eclipse.jetty</groupId>\n"
"            <artifactId>*</artifactId>\n"
"       </exclusion>\n"
"    </exclusions>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:764
#, no-wrap
msgid "Wiremock"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:767
msgid "Add the following dependency:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:775
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-oidc-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:778
msgid "Prepare the REST test endpoints, set `application.properties`, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:786
#, no-wrap
msgid ""
"# keycloak.url is set by OidcWiremockTestResource\n"
"quarkus.oidc.auth-server-url=${keycloak.url}/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-web-app\n"
"quarkus.oidc.credentials.secret=secret\n"
"quarkus.oidc.application-type=web-app\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:789
msgid "and finally write the test code, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:793
#, no-wrap
msgid "import static org.junit.jupiter.api.Assertions.assertEquals;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:795
#, no-wrap
msgid "import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:800
#, no-wrap
msgid ""
"import com.gargoylesoftware.htmlunit.SilentCssErrorHandler;\n"
"import com.gargoylesoftware.htmlunit.WebClient;\n"
"import com.gargoylesoftware.htmlunit.html.HtmlForm;\n"
"import com.gargoylesoftware.htmlunit.html.HtmlPage;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:804
#, no-wrap
msgid ""
"import io.quarkus.test.common.QuarkusTestResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.oidc.server.OidcWiremockTestResource;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:808
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(OidcWiremockTestResource.class)\n"
"public class CodeFlowAuthorizationTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:814
#, no-wrap
msgid ""
"    @Test\n"
"    public void testCodeFlow() throws Exception {\n"
"        try (final WebClient webClient = createWebClient()) {\n"
"            // the test REST endpoint listens on '/code-flow'\n"
"            HtmlPage page = webClient.getPage(\"http://localhost:8081/code-flow\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:819
#, no-wrap
msgid ""
"            HtmlForm form = page.getFormByName(\"form\");\n"
"            // user 'alice' has the 'user' role\n"
"            form.getInputByName(\"username\").type(\"alice\");\n"
"            form.getInputByName(\"password\").type(\"alice\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:821
#, no-wrap
msgid "            page = form.getInputByValue(\"login\").click();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:825
#, no-wrap
msgid ""
"            assertEquals(\"alice\", page.getBody().asText());\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:832
#, no-wrap
msgid ""
"    private WebClient createWebClient() {\n"
"        WebClient webClient = new WebClient();\n"
"        webClient.setCssErrorHandler(new SilentCssErrorHandler());\n"
"        return webClient;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:835
msgid "`OidcWiremockTestResource` recognizes `alice` and `admin` users. The user `alice` has the `user` role only by default - it can be customized with a `quarkus.test.oidc.token.user-roles` system property. The user `admin` has the `user` and `admin` roles by default - it can be customized with a `quarkus.test.oidc.token.admin-roles` system property."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:837
msgid "Additionally, `OidcWiremockTestResource` set token issuer and audience to `https://service.example.com` which can be customized with `quarkus.test.oidc.token.issuer` and `quarkus.test.oidc.token.audience` system properties."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:839
msgid "`OidcWiremockTestResource` can be used to emulate all OpenId Connect providers."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:841
#, no-wrap
msgid "Keycloak"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:844
msgid "If you work with Keycloak then you can test against a live Keycloak instance by adding the following dependency:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:852
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-keycloak-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:855
msgid "and configure `maven.surefire.plugin` as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:871
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-surefire-plugin</artifactId>\n"
"    <configuration>\n"
"        <systemPropertyVariables>\n"
"            <!-- or, alternativey, configure 'keycloak.version' -->\n"
"            <keycloak.docker.image>${keycloak.docker.image}</keycloak.docker.image>\n"
"            <!--\n"
"              Disable HTTPS if required:\n"
"              <keycloak.use.https>false</keycloak.use.https>\n"
"            -->\n"
"        </systemPropertyVariables>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:874
msgid "(and similarly `maven.failsafe.plugin` when testing in native image)."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:877
msgid "And now set the configuration and write the test code the same way as it is described in the <<integration-testing-wiremock, Wiremock>> section above.  The only difference is the name of `QuarkusTestResource`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:881
#, no-wrap
msgid "import io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:886
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(KeycloakTestResourceLifecycleManager.class)\n"
"public class CodeFlowAuthorizationTest {\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:889
msgid "`KeycloakTestResourceLifecycleManager` registers `alice` and `admin` users. The user `alice` has the `user` role only by default - it can be customized with a `keycloak.token.user-roles` system property. The user `admin` has the `user` and `admin` roles by default - it can be customized with a `keycloak.token.admin-roles` system property."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:892
msgid "By default, `KeycloakTestResourceLifecycleManager` uses HTTPS to initialize a Keycloak instance which can be disabled with `keycloak.use.https=false`.  Default realm name is `quarkus` and client id - `quarkus-web-app` - set `keycloak.realm` and `keycloak.web-app.client` system properties to customize the values if needed."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:894
#, no-wrap
msgid "TestSecurity annotation"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:897
msgid "Please see link:security-openid-connect#integration-testing-security-annotation[Use TestingSecurity with injected JsonWebToken] section for more information about using `@TestSecurity` and `@OidcSecurity` annotations for testing the `web-app` application endpoint code which depends on the injected ID and access `JsonWebToken` as well as `UserInfo` and `OidcConfigurationMetadata`."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:898
#, no-wrap
msgid "How to check the errors in the logs"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:901
msgid "Please enable `io.quarkus.oidc.runtime.OidcProvider` `TRACE` level logging to see more details about the token verification errors:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:906
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcProvider\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcProvider\".min-level=TRACE\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:909
msgid "Please enable `io.quarkus.oidc.runtime.OidcRecorder` `TRACE` level logging to see more details about the OidcProvider client initialization errors:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:914
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcRecorder\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcRecorder\".min-level=TRACE\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:916
#, no-wrap
msgid "Running behind a reverse proxy"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:919
msgid "OIDC authentication mechanism can be affected if your Quarkus application is running behind a reverse proxy/gateway/firewall when HTTP `Host` header may be reset to the internal IP address, HTTPS connection may be terminated, etc. For example, an authorization code flow `redirect_uri` parameter may be set to the internal host instead of the expected external one."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:921
msgid "In such cases configuring Quarkus to recognize the original headers forwarded by the proxy will be required, see link:http-reference#reverse-proxy[Running behind a reverse proxy] Vert.x documentation section for more information."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:923
msgid "For example, if your Quarkus endpoint runs in a cluster behind Kubernetes Ingress then a redirect from the OpenId Connect Provider back to this endpoint may not work since the calcuated `redirect_uri` parameter may point to the internal endpoint address. This problem can be resolved with the following configuration:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:930
#, no-wrap
msgid ""
"quarkus.http.proxy.proxy-address-forwarding=true\n"
"quarkus.http.proxy.allow-forwarded=false\n"
"quarkus.http.proxy.enable-forwarded-host=true\n"
"quarkus.http.proxy.forwarded-host-header=X-ORIGINAL-HOST\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:933
msgid "where `X-ORIGINAL-HOST` is set by Kubernetes Ingress to represent the external endpoint address."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:935
msgid "`quarkus.oidc.authentication.force-redirect-https-scheme` property may also be used when the Quarkus application is running behind a SSL terminating reverse proxy."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:936
#, no-wrap
msgid "External and Internal Access to OpenId Connect Provider"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:940
msgid "Note that the OpenId Connect Provider externally accessible authorization, logout and other endpoints may have different HTTP(S) URLs compared to the URLs auto-discovered or configured relative to `quarkus.oidc.auth-server-url` internal URL.  In such cases an issuer verification failure may be reported by the endpoint and redirects to the externally accessible Connect Provider endpoints may fail."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:943
msgid "In such cases, if you work with Keycloak then please start it with a `KEYCLOAK_FRONTEND_URL` system property set to the externally accessible base URL.  If you work with other Openid Connect providers then please check your provider's documentation."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:944
#, no-wrap
msgid "Customize authentication requests"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:947
msgid "By default, only the `response_type` (set to `code`), `scope` (set to 'openid'), `client_id`, `redirect_uri` and `state` properties are passed as HTTP query parameters to the OpenId Connect provider's authorization endpoint when the user is redirected to it to authenticate."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:949
msgid "You can add more properties to it with `quarkus.oidc.authentication.extra-params`. For example, some OpenId Connect providers may choose to return the authorization code as part of the redirect URI's fragment which would break the authentication process - it can be fixed as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:953
#, no-wrap
msgid "quarkus.oidc.authentication.extra-params.response_mode=query\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:955
#, no-wrap
msgid "Configuration Reference"
msgstr "配置参考"

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:959
#, no-wrap
msgid "References"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:962
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:963
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:964
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:965
msgid "link:security-openid-connect-client[Quarkus - Using OpenID Connect and OAuth2 Client and Filters to manage access tokens]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:966
msgid "link:security-openid-connect-dev-services[Dev Services for OpenId Connect]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect-web-authentication.adoc:966
msgid "link:security[Quarkus Security]"
msgstr ""
