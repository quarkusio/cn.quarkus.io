# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:6
#, no-wrap
msgid "Using Hibernate ORM and JPA"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:13
msgid "Hibernate ORM is the de facto standard JPA implementation and offers you the full breadth of an Object Relational Mapper.  It works beautifully in Quarkus."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:14
#, no-wrap
msgid "Solution"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:18
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:20
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:22
msgid "The solution is located in the `hibernate-orm-quickstart` {quickstarts-tree-url}/hibernate-orm-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:23
#, no-wrap
msgid "Setting up and configuring Hibernate ORM"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:26
msgid "When using Hibernate ORM in Quarkus, you don't need to have a `persistence.xml` resource to configure it."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:29
msgid "Using such a classic configuration file is an option, but unnecessary unless you have specific advanced needs; so we'll see first how Hibernate ORM can be configured without a `persistence.xml` resource."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:31
msgid "In Quarkus, you just need to:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:33
msgid "add your configuration settings in `{config-file}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:34
msgid "annotate your entities with `@Entity` and any other mapping annotation as usual"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:36
msgid "Other configuration needs have been automated: Quarkus will make some opinionated choices and educated guesses."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:38
msgid "Add the following dependencies to your project:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:40
msgid "the Hibernate ORM extension: `io.quarkus:quarkus-hibernate-orm`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:41
msgid "your JDBC driver extension; the following options are available:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:42
msgid "`quarkus-jdbc-db2` for link:https://www.ibm.com/products/db2-database[IBM DB2]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:43
msgid "`quarkus-jdbc-derby` for link:https://db.apache.org/derby/[Apache Derby]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:44
msgid "`quarkus-jdbc-h2` for link:https://www.h2database.com/html/main.html[H2]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:45
msgid "`quarkus-jdbc-mariadb` for link:https://mariadb.com/[MariaDB]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:46
msgid "`quarkus-jdbc-mssql` for link:https://www.microsoft.com/en-gb/sql-server/[Microsoft SQL Server]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:47
msgid "`quarkus-jdbc-mysql` for link:https://www.mysql.com/[MySQL]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:48
msgid "`quarkus-jdbc-oracle` for link:https://www.oracle.com/database/[Oracle Database]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:49
msgid "`quarkus-jdbc-postgresql` for link:https://www.postgresql.org/[PostgreSQL]"
msgstr ""

#. type: Block title
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:52
#, no-wrap
msgid "Example dependencies using Maven"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:60
#, no-wrap
msgid ""
"<dependencies>\n"
"    <!-- Hibernate ORM specific dependencies -->\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-hibernate-orm</artifactId>\n"
"    </dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:67
#, no-wrap
msgid ""
"    <!-- JDBC driver dependencies -->\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-jdbc-postgresql</artifactId>\n"
"    </dependency>\n"
"</dependencies>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:71
msgid "Annotate your persistent objects with `@Entity`, then add the relevant configuration properties in `{config-file}`."
msgstr ""

#. type: Block title
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:73
#, no-wrap
msgid "Example `{config-file}`"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:80
#, no-wrap
msgid ""
"# datasource configuration\n"
"quarkus.datasource.db-kind = postgresql\n"
"quarkus.datasource.username = hibernate\n"
"quarkus.datasource.password = hibernate\n"
"quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/hibernate_db\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:83
#, no-wrap
msgid ""
"# drop and create the database at startup (use `update` to only update the schema)\n"
"quarkus.hibernate-orm.database.generation=drop-and-create\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:87
msgid "Note that these configuration properties are not the same ones as in your typical Hibernate ORM configuration file.  They will often map to Hibernate ORM configuration properties but could have different names and don't necessarily map 1:1 to each other."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:89
msgid "Also, Quarkus will set many Hibernate ORM configuration settings automatically, and will often use more modern defaults."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:91
msgid "Please see below section <<hibernate-configuration-properties, Hibernate ORM configuration properties>> for the list of properties you can set in `{config-file}`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:93
msgid "An `EntityManagerFactory` will be created based on the Quarkus `datasource` configuration as long as the Hibernate ORM extension is listed among your project dependencies."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:95
msgid "The dialect will be selected based on the JDBC driver - unless you set one explicitly."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:97
msgid "You can then happily inject your `EntityManager`:"
msgstr ""

#. type: Block title
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:99
#, no-wrap
msgid "Example application bean using Hibernate"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:105
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class SantaClausService {\n"
"    @Inject\n"
"    EntityManager em; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:113
#, no-wrap
msgid ""
"    @Transactional <2>\n"
"    public void createGift(String giftDescription) {\n"
"        Gift gift = new Gift();\n"
"        gift.setName(giftDescription);\n"
"        em.persist(gift);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:116
msgid "Inject your entity manager and have fun"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:117
msgid "Mark your CDI bean method as `@Transactional` and the `EntityManager` will enlist and flush at commit."
msgstr ""

#. type: Block title
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:119
#, no-wrap
msgid "Example Entity"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:125
#, no-wrap
msgid ""
"@Entity\n"
"public class Gift {\n"
"    private Long id;\n"
"    private String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:132
#, no-wrap
msgid ""
"    @Id\n"
"    @SequenceGenerator(name = \"giftSeq\", sequenceName = \"gift_id_seq\", allocationSize = 1, initialValue = 1)\n"
"    @GeneratedValue(generator = \"giftSeq\")\n"
"    public Long getId() {\n"
"        return id;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:136
#, no-wrap
msgid ""
"    public void setId(Long id) {\n"
"        this.id = id;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:140
#, no-wrap
msgid ""
"    public String getName() {\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:145
#, no-wrap
msgid ""
"    public void setName(String name) {\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:150
msgid "To load SQL statements when Hibernate ORM starts, add an `import.sql` file to the root of your resources directory.  This script can contain any SQL DML statements.  Make sure to terminate each statement with a semicolon."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:152
msgid "This is useful to have a data set ready for your tests or demos."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:156
msgid "Make sure to wrap methods modifying your database (e.g. `entity.persist()`) within a transaction. Marking a CDI bean method `@Transactional` will do that for you and make that method a transaction boundary. We recommend doing so at your application entry point boundaries like your REST endpoint controllers."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:158
#, no-wrap
msgid "Hibernate ORM configuration properties"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:161
msgid "There are various optional properties useful to refine your `EntityManagerFactory` or guide guesses of Quarkus."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:163
msgid "There are no required properties, as long as a default datasource is configured."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:166
msgid "When no property is set, Quarkus can typically infer everything it needs to setup Hibernate ORM and will have it use the default datasource."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:168
msgid "The configuration properties listed here allow you to override such defaults, and customize and tune various aspects."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:176
msgid "Do not mix `persistence.xml` and `quarkus.hibernate-orm.*` properties in `{config-file}`.  Quarkus will raise an exception.  Make up your mind on which approach you want to use."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:181
msgid "Want to start a PostgreSQL server on the side with Docker?"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:187
#, no-wrap
msgid ""
"docker run --rm=true --name postgres-quarkus-hibernate -e POSTGRES_USER=hibernate \\\n"
"           -e POSTGRES_PASSWORD=hibernate -e POSTGRES_DB=hibernate_db \\\n"
"           -p 5432:5432 postgres:13.1\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:190
msgid "This will start a non-durable empty database: ideal for a quick experiment!"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:193
#, no-wrap
msgid "Multiple persistence units"
msgstr ""

#. type: Title ====
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:195
#, no-wrap
msgid "Setting up multiple persistence units"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:198
msgid "It is possible to define multiple persistence units using the Quarkus configuration properties."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:201
msgid "The properties at the root of the `quarkus.hibernate-orm.` namespace define the default persistence unit.  For instance, the following snippet defines a default datasource and a default persistence unit:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:206
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=h2\n"
"quarkus.datasource.jdbc.url=jdbc:h2:mem:default;DB_CLOSE_DELAY=-1\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:209
#, no-wrap
msgid ""
"quarkus.hibernate-orm.dialect=org.hibernate.dialect.H2Dialect\n"
"quarkus.hibernate-orm.database.generation=drop-and-create\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:212
msgid "Using a map based approach, it is possible to define named persistence units:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:217
#, no-wrap
msgid ""
"quarkus.datasource.\"users\".db-kind=h2 <1>\n"
"quarkus.datasource.\"users\".jdbc.url=jdbc:h2:mem:users;DB_CLOSE_DELAY=-1\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:220
#, no-wrap
msgid ""
"quarkus.datasource.\"inventory\".db-kind=h2 <2>\n"
"quarkus.datasource.\"inventory\".jdbc.url=jdbc:h2:mem:inventory;DB_CLOSE_DELAY=-1\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:224
#, no-wrap
msgid ""
"quarkus.hibernate-orm.\"users\".database.generation=drop-and-create <3>\n"
"quarkus.hibernate-orm.\"users\".datasource=users <4>\n"
"quarkus.hibernate-orm.\"users\".packages=org.acme.model.user <5>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:228
#, no-wrap
msgid ""
"quarkus.hibernate-orm.\"inventory\".database.generation=drop-and-create <6>\n"
"quarkus.hibernate-orm.\"inventory\".datasource=inventory\n"
"quarkus.hibernate-orm.\"inventory\".packages=org.acme.model.inventory\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:230
msgid "Define a datasource named `users`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:231
msgid "Define a datasource named `inventory`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:232
msgid "Define a persistence unit called `users`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:233
msgid "Define the datasource used by the persistence unit."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:234
msgid "This configuration property is important but we will discuss it a bit later."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:235
msgid "Define a persistence unit called `inventory` pointing to the `inventory` datasource."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:239
msgid "You can mix the default datasource and named datasources or only have one or the other."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:247
msgid "The default persistence unit points to the default datasource by default.  For named persistence units, the `datasource` property is mandatory.  You can point your persistence unit to the default datasource by setting it to `<default>` (which is the internal name of the default datasource)."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:249
msgid "It is perfectly valid to have several persistence units pointing to the same datasource."
msgstr ""

#. type: Title ====
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:252
#, no-wrap
msgid "Attaching model classes to persistence units"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:255
msgid "There are two ways to attach model classes to persistence units, and they should not be mixed:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:257
msgid "Via the `packages` configuration property;"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:258
msgid "Via the `@io.quarkus.hibernate.orm.PersistenceUnit` package-level annotation."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:260
msgid "If both are mixed, the annotations are ignored and only the `packages` configuration properties are taken into account."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:262
msgid "Using the `packages` configuration property is simple:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:267
#, no-wrap
msgid ""
"quarkus.hibernate-orm.database.generation=drop-and-create\n"
"quarkus.hibernate-orm.packages=org.acme.model.defaultpu\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:271
#, no-wrap
msgid ""
"quarkus.hibernate-orm.\"users\".database.generation=drop-and-create\n"
"quarkus.hibernate-orm.\"users\".datasource=users\n"
"quarkus.hibernate-orm.\"users\".packages=org.acme.model.user\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:274
msgid "This configuration snippet will create two persistence units:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:276
msgid "The default one which will contain all the model classes under the `org.acme.model.defaultpu` package, subpackages included."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:277
msgid "A named `users` persistence unit which will contain all the model classes under the `org.acme.model.user` package, subpackages included."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:279
msgid "You can attach several packages to a persistence unit:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:283
#, no-wrap
msgid "quarkus.hibernate-orm.\"users\".packages=org.acme.model.shared,org.acme.model.user\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:286
msgid "All the model classes under the `org.acme.model.shared` and `org.acme.model.user` packages will be attached to the `users` persistence unit."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:288
msgid "It is also supported to attach a given model class to several persistence units."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:294
msgid "Model classes need to be consistently added to a given persistence unit.  That meant that all dependent model classes of a given entity (mapped super classes, embeddables...) are required to be attached to the persistence unit.  As we are dealing with the persistence unit at the package level, it should be simple enough."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:299
msgid "Panache entities can be attached to only one persistence unit."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:302
msgid "For entities attached to several persistence units, you cannot use Panache.  You can mix the two approaches though and mix Panache entities and traditional entities where multiple persistence units are required."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:305
msgid "If you have a use case for that and clever ideas about how to implement it without cluttering the simplified Panache approach, contact us on the link:{quarkus-mailing-list-index}[quarkus-dev mailing list]."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:309
msgid "The second approach to attach model classes to a persistence unit is to use package-level `@io.quarkus.hibernate.orm.PersistenceUnit` annotations.  Again, the two approaches cannot be mixed."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:311
msgid "To obtain a configuration similar to the one above with the `packages` configuration property, create a `package-info.java` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:316
#, no-wrap
msgid ""
"@PersistenceUnit(\"users\") <1>\n"
"package org.acme.model.user;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:318
#, no-wrap
msgid "import io.quarkus.hibernate.orm.PersistenceUnit;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:320
msgid "Be careful, use the `@io.quarkus.hibernate.orm.PersistenceUnit` annotation, not the JPA one."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:325
msgid "We only support defining the `@PersistenceUnit` for model classes at the package level, using the `@PersistenceUnit` annotation at the class level is not supported in this case."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:328
msgid "Note that, similarly to what we do with the configuration property, we take into account the annotated package but also all its subpackages."
msgstr ""

#. type: Title ====
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:329
#, no-wrap
msgid "CDI integration"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:332
msgid "If you are familiar with using Hibernate ORM in Quarkus, you probably already have injected the `EntityManager` using CDI:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:337
#, no-wrap
msgid ""
"@Inject\n"
"EntityManager entityManager;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:340
msgid "This will inject the `EntityManager` of the default persistence unit."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:342
msgid "Injecting the `EntityManager` of a named persistence unit (`users` in our example) is as simple as:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:348
#, no-wrap
msgid ""
"@Inject\n"
"@PersistenceUnit(\"users\") <1>\n"
"EntityManager entityManager;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:350
msgid "Here again, we use the same `@io.quarkus.hibernate.orm.PersistenceUnit` annotation."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:352
msgid "You can inject the `EntityManagerFactory` of a named persistence unit using the exact same mechanism:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:358
#, no-wrap
msgid ""
"@Inject\n"
"@PersistenceUnit(\"users\")\n"
"EntityManagerFactory entityManagerFactory;\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:361
#, no-wrap
msgid "Setting up and configuring Hibernate ORM with a `persistence.xml`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:365
msgid "Alternatively, you can use a `META-INF/persistence.xml` to set up Hibernate ORM.  This is useful for:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:367
msgid "migrating existing code"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:368
msgid "when you have relatively complex settings requiring the full flexibility of the configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:369
msgid "or if you like it the good old way"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:374
msgid "If you have a `persistence.xml`, then you cannot use the `quarkus.hibernate-orm.*` properties and only persistence units defined in `persistence.xml` will be taken into account."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:378
msgid "Your `pom.xml` dependencies as well as your Java code would be identical to the precedent example. The only difference is that you would specify your Hibernate ORM configuration in `META-INF/persistence.xml`:"
msgstr ""

#. type: Block title
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:380
#, no-wrap
msgid "Example persistence.xml resource"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:387
#, no-wrap
msgid ""
"<persistence xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\"\n"
"             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
"             xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence\n"
"             http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\"\n"
"             version=\"2.1\">\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:389
#, no-wrap
msgid "    <persistence-unit name=\"CustomerPU\" transaction-type=\"JTA\">\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:391
#, no-wrap
msgid "        <description>My customer entities</description>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:395
#, no-wrap
msgid ""
"        <properties>\n"
"            <!-- Connection specific -->\n"
"            <property name=\"hibernate.dialect\" value=\"org.hibernate.dialect.PostgreSQL95Dialect\"/>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:398
#, no-wrap
msgid ""
"            <property name=\"hibernate.show_sql\" value=\"true\"/>\n"
"            <property name=\"hibernate.format_sql\" value=\"true\"/>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:404
#, no-wrap
msgid ""
"            <!--\n"
"                Optimistically create the tables;\n"
"                will cause background errors being logged if they already exist,\n"
"                but is practical to retain existing data across runs (or create as needed) -->\n"
"            <property name=\"javax.persistence.schema-generation.database.action\" value=\"drop-and-create\"/>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:407
#, no-wrap
msgid ""
"            <property name=\"javax.persistence.validation.mode\" value=\"NONE\"/>\n"
"        </properties>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:410
#, no-wrap
msgid ""
"    </persistence-unit>\n"
"</persistence>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:414
msgid "When using the `persistence.xml` configuration you are configuring Hibernate ORM directly, so in this case the appropriate reference is the link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#configurations[documentation on hibernate.org]."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:417
msgid "Please remember these are not the same property names as the ones used in the Quarkus `{config-file}`, nor will the same defaults be applied."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:419
#, no-wrap
msgid "XML mapping"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:425
msgid "Hibernate ORM in Quarkus supports XML mapping.  You can add mapping files following the https://jakarta.ee/specifications/persistence/3.0/jakarta-persistence-spec-3.0.html#a16944[`orm.xml` format (JPA)] or the http://hibernate.org/dtd/hibernate-mapping-3.0.dtd[`hbm.xml` format (specific to Hibernate ORM, deprecated)]:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:427
msgid "in `application.properties` through the (build-time) link:#quarkus-hibernate-orm_quarkus.hibernate-orm.mapping-files[`quarkus.hibernate-orm.mapping-files`] property."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:428
msgid "in <<persistence-xml,`persistence.xml`>> through the `<mapping-file>` element."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:430
msgid "XML mapping files are parsed at build time."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:434
msgid "The file `META-INF/orm.xml` will always be included by default, if it exists in the classpath."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:436
msgid "If that is not what you want, use `quarkus.hibernate-orm.mapping-files = no-file` or `<mapping-file>no-file</mapping-file>`."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:438
#, no-wrap
msgid "Defining entities in external projects or jars"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:442
msgid "Hibernate ORM in Quarkus relies on compile-time bytecode enhancements to your entities. If you define your entities in the same project where you build your Quarkus application, everything will work fine."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:445
msgid "If the entities come from external projects or jars, you can make sure that your jar is treated like a Quarkus application library by adding an empty `META-INF/beans.xml` file."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:447
msgid "This will allow Quarkus to index and enhance your entities as if they were inside the current project."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:449
#, no-wrap
msgid "Hibernate ORM in development mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:452
msgid "Quarkus development mode is really useful for applications that mix front end or services and database access."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:454
msgid "There are a few common approaches to make the best of it."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:456
msgid "The first choice is to use `quarkus.hibernate-orm.database.generation=drop-and-create` in conjunction with `import.sql`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:461
msgid "That way for every change to your app and in particular to your entities, the database schema will be properly recreated and your data fixture (stored in `import.sql`) will be used to repopulate it from scratch.  This is best to perfectly control your environment and works magic with Quarkus live reload mode: your entity changes or any change to your `import.sql` is immediately picked up and the schema updated without restarting the application!"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:466
msgid "By default in `dev` and `test` modes, Hibernate ORM, upon boot, will read and execute the SQL statements in the `/import.sql` file (if present).  You can change the file name by changing the property `quarkus.hibernate-orm.sql-load-script` in `application.properties`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:476
msgid "The second approach is to use `quarkus.hibernate-orm.database.generation=update`.  This approach is best when you do many entity changes but still need to work on a copy of the production data or if you want to reproduce a bug that is based on specific database entries.  `update` is a best effort from Hibernate ORM and will fail in specific situations including altering your database structure which could lead to data loss.  For example if you change structures which violate a foreign key constraint, Hibernate ORM might have to bail out.  But for development, these limitations are acceptable."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:480
msgid "The third approach is to use `quarkus.hibernate-orm.database.generation=none`.  This approach is best when you are working on a copy of the production data but want to fully control the schema evolution.  Or if you use a database schema migration tool like link:flyway[Flyway]."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:483
msgid "With this approach when making changes to an entity, make sure to adapt the database schema accordingly; you could also use `validate` to have Hibernate verify the schema matches its expectations."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:485
msgid "Do not use `quarkus.hibernate-orm.database.generation` `drop-and-create` and `update` in your production environment."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:491
msgid "These approaches become really powerful when combined with Quarkus configuration profiles.  You can define different link:config#configuration-profiles[configuration profiles] to select different behaviors depending on your environment.  This is great because you can define different combinations of Hibernate ORM properties matching the development style you currently need."
msgstr ""

#. type: Block title
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:493
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:528
#, no-wrap
msgid "application.properties"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:497
#, no-wrap
msgid ""
"%dev.quarkus.hibernate-orm.database.generation = drop-and-create\n"
"%dev.quarkus.hibernate-orm.sql-load-script = import-dev.sql\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:500
#, no-wrap
msgid ""
"%dev-with-data.quarkus.hibernate-orm.database.generation = update\n"
"%dev-with-data.quarkus.hibernate-orm.sql-load-script = no-file\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:503
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:532
#, no-wrap
msgid ""
"%prod.quarkus.hibernate-orm.database.generation = none\n"
"%prod.quarkus.hibernate-orm.sql-load-script = no-file\n"
msgstr ""

#. type: Block title
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:506
#, no-wrap
msgid "Start \"dev mode\" using a custom profile via Maven"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:509
#, no-wrap
msgid "./mvnw compile quarkus:dev -Dquarkus.profile=dev-with-data\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:511
#, no-wrap
msgid "Hibernate ORM in production mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:515
msgid "Quarkus comes with default profiles (`dev`, `test` and `prod`).  And you can add your own custom profiles to describe various environments (`staging`, `prod-us`, etc)."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:517
msgid "The Hibernate ORM Quarkus extension sets some default configurations differently in dev and test modes than in other environments."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:519
msgid "`quarkus.hibernate-orm.sql-load-script` is set to `no-file` for all profiles except the `dev` and `test` ones."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:523
msgid "You can override it in your `application.properties` explicitly (e.g. `%prod.quarkus.hibernate-orm.sql-load-script = import.sql`)  but we wanted you to avoid overriding your database by accident in prod :)"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:526
msgid "Speaking of, make sure to not drop your database schema in production! Add the following in your properties file."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:535
#, no-wrap
msgid "Caching"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:538
msgid "Applications that frequently read the same entities can see their performance improved when the Hibernate ORM second-level cache is enabled."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:539
#, no-wrap
msgid "Caching of entities"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:542
msgid "To enable second-level cache, mark the entities that you want cached with `@javax.persistence.Cacheable`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:551
#, no-wrap
msgid ""
"@Entity\n"
"@Cacheable\n"
"public class Country {\n"
"    int dialInCode;\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:554
msgid "When an entity is annotated with `@Cacheable`, all its field values are cached except for collections and relations to other entities."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:556
msgid "This means the entity can be loaded without querying the database, but be careful as it implies the loaded entity might not reflect recent changes in the database."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:557
#, no-wrap
msgid "Caching of collections and relations"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:560
msgid "Collections and relations need to be individually annotated to be cached; in this case the Hibernate specific `@org.hibernate.annotations.Cache` should be used, which requires also to specify the `CacheConcurrencyStrategy`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:564
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:569
#, no-wrap
msgid ""
"@Entity\n"
"@Cacheable\n"
"public class Country {\n"
"    // ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:573
#, no-wrap
msgid ""
"    @OneToMany\n"
"    @Cache(usage = CacheConcurrencyStrategy.READ_ONLY)\n"
"    List<City> cities;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:576
#, no-wrap
msgid ""
"    // ...\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:578
#, no-wrap
msgid "Caching of queries"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:581
msgid "Queries can also benefit from second-level caching. Cached query results can be returned immediately to the caller, avoiding to run the query on the database."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:583
msgid "Be careful as this implies the results might not reflect recent changes."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:585
msgid "To cache a query, mark it as cacheable on the `Query` instance:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:590
#, no-wrap
msgid ""
"Query query = ...\n"
"query.setHint(\"org.hibernate.cacheable\", Boolean.TRUE);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:593
msgid "If you have a `NamedQuery` then you can enable caching directly on its definition, which will usually be on an entity:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:602
#, no-wrap
msgid ""
"@Entity\n"
"@NamedQuery(name = \"Fruits.findAll\",\n"
"      query = \"SELECT f FROM Fruit f ORDER BY f.name\",\n"
"      hints = @QueryHint(name = \"org.hibernate.cacheable\", value = \"true\") )\n"
"public class Fruit {\n"
"   ...\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:605
msgid "That's all! Caching technology is already integrated and enabled by default in Quarkus, so it's enough to set which ones are safe to be cached."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:606
#, no-wrap
msgid "Tuning of Cache Regions"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:609
msgid "Caches store the data in separate regions to isolate different portions of data; such regions are assigned a name, which is useful for configuring each region independently, or to monitor their statistics."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:611
msgid "By default entities are cached in regions named after their fully qualified name, e.g. `org.acme.Country`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:613
msgid "Collections are cached in regions named after the fully qualified name of their owner entity and collection field name, separated by `#` character, e.g. `org.acme.Country#cities`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:615
msgid "All cached queries are by default kept in a single region dedicated to them called `default-query-results-region`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:617
msgid "All regions are bounded by size and time by default. The defaults are `10000` max entries, and `100` seconds as maximum idle time."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:619
msgid "The size of each region can be customized via the `quarkus.hibernate-orm.cache.\"<region_name>\".memory.object-count` property (Replace _<region_name>_ with the actual region name)."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:621
msgid "To set the maximum idle time, provide the duration (see note on duration's format below) via the `quarkus.hibernate-orm.cache.\"<region_name>\".expiration.max-idle` property (Replace _<region_name>_ with the actual region name)."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:625
msgid "The double quotes are mandatory if your region name contains a dot. For instance:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:629
#, no-wrap
msgid "quarkus.hibernate-orm.cache.\"org.acme.MyEntity\".memory.object-count=1000\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:635
#, no-wrap
msgid "Limitations of Caching"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:638
msgid "The caching technology provided within Quarkus is currently quite rudimentary and limited."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:640
msgid "The team thought it was better to have _some_ caching capability to start with, than having nothing; you can expect better caching solution to be integrated in future releases, and any help and feedback in this area is very welcome."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:644
msgid "These caches are kept locally, so they are not invalidated or updated when changes are made to the persistent store by other applications."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:646
msgid "Also, when running multiple copies of the same application (in a cluster, for example on Kubernetes/OpenShift), caches in separate copies of the application aren't synchronized."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:648
msgid "For these reasons, enabling caching is only suitable when certain assumptions can be made: we strongly recommend that only entities, collections and queries which never change are cached. Or at most, that when indeed such an entity is mutated and allowed to be read out of date (stale) this has no impact on the expectations of the application."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:650
msgid "Following this advice guarantees applications get the best performance out of the second-level cache and yet avoid unexpected behaviour."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:655
#, no-wrap
msgid ""
"On top of immutable data, in certain contexts it might be acceptable to enable caching also on mutable data; this could be a necessary tradeoff on selected\n"
" entities which are read frequently and for which some degree of staleness is acceptable; this \" acceptable degree of staleness\" can be tuned by setting eviction properties.\n"
" This is however not recommended and should be done with extreme care, as it might\n"
" produce unexpected and unforeseen effects on the data.\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:657
msgid "Rather than enabling caching on mutable data, ideally a better solution would be to use a clustered cache; however at this time Quarkus doesn't provide any such implementation: feel free to get in touch and let this need known so that the team can take this into account."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:660
msgid "Finally, the second-level cache can be disabled globally by setting `hibernate.cache.use_second_level_cache` to `false`; this is a setting that needs to be specified in the `persistence.xml` configuration file."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:662
msgid "When second-level cache is disabled, all cache annotations are ignored and all queries are run ignoring caches; this is generally useful only to diagnose issues."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:664
#, no-wrap
msgid "Hibernate Envers"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:666
msgid "The Envers extension to Hibernate ORM aims to provide an easy auditing / versioning solution for entity classes."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:668
msgid "In Quarkus, Envers has a dedicated Quarkus Extension `io.quarkus:quarkus-hibernate-envers`; you just need to add this to your project to start using it."
msgstr ""

#. type: Block title
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:670
#, no-wrap
msgid "Additional dependency to enable Hibernate Envers"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:677
#, no-wrap
msgid ""
"    <!-- Add the Hibernate Envers extension -->\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-hibernate-envers</artifactId>\n"
"    </dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:680
msgid "At this point the extension does not expose additional configuration properties."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:682
msgid "For more information about Hibernate Envers, see link:https://hibernate.org/orm/envers/[hibernate.org/orm/envers/]."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:684
#, no-wrap
msgid "Metrics"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:689
msgid "Either link:micrometer[Micrometer] or link:microprofile-metrics[SmallRye Metrics] are capable of exposing metrics that Hibernate ORM collects at runtime. To enable exposure of Hibernate metrics on the `/q/metrics` endpoint, make sure your project depends on a metrics extension and set the configuration property `quarkus.hibernate-orm.metrics.enabled` to `true`.  When using link:microprofile-metrics[SmallRye Metrics], metrics will be available under the `vendor` scope."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:690
#, no-wrap
msgid "Limitations and other things you should know"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:694
msgid "Quarkus does not modify the libraries it uses; this rule applies to Hibernate ORM as well: when using this extension you will mostly have the same experience as using the original library."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:698
msgid "But while they share the same code, Quarkus does configure some components automatically and injects custom implementations for some extension points; this should be transparent and useful but if you're an expert of Hibernate you might want to know what is being done."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:699
#, no-wrap
msgid "Automatic build time enhancement"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:703
msgid "Hibernate ORM can use build time enhanced entities; normally this is not mandatory but it's useful and will have your applications perform better."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:706
msgid "Typically you would need to adapt your build scripts to include the Hibernate Enhancement plugins; in Quarkus this is not necessary as the enhancement step is integrated in the build and analysis of the Quarkus application."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:711
msgid "Due to the usage of enhancement, using the `clone()` method on entities is currently not supported as it will also clone some enhancement-specific fields that are specific to the entity."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:713
msgid "This limitation might be removed in the future."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:715
#, no-wrap
msgid "Automatic integration"
msgstr ""

#. type: Labeled list
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:717
#, no-wrap
msgid "Transaction Manager integration"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:721
msgid "You don't need to set this up, Quarkus automatically injects the reference to the Narayana Transaction Manager.  The dependency is included automatically as a transitive dependency of the Hibernate ORM extension.  All configuration is optional; for more details see link:transaction[Using Transactions in Quarkus]."
msgstr ""

#. type: Labeled list
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:722
#, no-wrap
msgid "Connection pool"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:726
msgid "Don't need to choose one either. Quarkus automatically includes the Agroal connection pool; just configure your datasource as in the above examples and it will setup Hibernate ORM to use Agroal.  More details about this connection pool can be found in link:datasource[Quarkus - Datasources]."
msgstr ""

#. type: Labeled list
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:727
#, no-wrap
msgid "Second Level Cache"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:730
msgid "as explained above in section <<caching,Caching>>, you don't need to pick an implementation.  A suitable implementation based on technologies from link:https://infinispan.org/[Infinispan] and link:https://github.com/ben-manes/caffeine[Caffeine] is included as a transitive dependency of the Hibernate ORM extension, and automatically integrated during the build."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:731
#, no-wrap
msgid "Limitations"
msgstr ""

#. type: Labeled list
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:733
#, no-wrap
msgid "XML mapping with duplicate files in the classpath"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:735
msgid "<<xml-mapping,XML mapping>> files are expected to have a unique path."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:740
msgid "In practice, it's only possible to have duplicate XML mapping files in the classpath in very specific scenarios.  For example, if two JARs include a `META-INF/orm.xml` file (with the exact same path, but in different JARs), then the mapping file path `META-INF/orm.xml` can only be referenced from a `persistence.xml` **in the same JAR as the `META-INF/orm.xml` file**."
msgstr ""

#. type: Labeled list
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:741
#, no-wrap
msgid "JMX"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:746
msgid "Management beans are not working in GraalVM native images; therefore Hibernate's capability to register statistics and management operations with the JMX bean is disabled when compiling into a native image.  This limitation is likely permanent, as it's not a goal for native images to implement support for JMX. All such metrics can be accessed in other ways."
msgstr ""

#. type: Labeled list
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:747
#, no-wrap
msgid "JACC Integration"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:750
msgid "Hibernate ORM's capability to integrate with JACC is disabled when building GraalVM native images, as JACC is not available - nor useful - in native mode."
msgstr ""

#. type: Labeled list
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:751
#, no-wrap
msgid "Binding the Session to ThreadLocal context"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:756
msgid "Essentially using the `ThreadLocalSessionContext` helper of Hibernate ORM is not implemented.  The team believes this isn't a big deal as it's trivial to inject the Session via CDI instead, or handling the binding into a ThreadLocal yourself, making this a legacy feature.  This limitation might be resolved in the future, if someone opens a ticket for it and provides a reasonable use case to justify the need."
msgstr ""

#. type: Labeled list
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:757
#, no-wrap
msgid "JPA Callbacks"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:760
msgid "Annotations allowing for application callbacks on entity lifecycle events defined by JPA such as `@javax.persistence.PostUpdate`, `@javax.persistence.PostLoad`, `@javax.persistence.PostPersist`, etc... are currently not processed.  This limitation could be resolved in a future version, depending on user demand."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:761
#, no-wrap
msgid "Other notable differences"
msgstr ""

#. type: Labeled list
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:763
#, no-wrap
msgid "Format of `import.sql`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:767
msgid "When importing a `import.sql` to setup your database, keep in mind that Quarkus reconfigures Hibernate ORM so to require a semicolon (';') to terminate each statement.  The default in Hibernate is to have a statement per line, without requiring a terminator other than newline: remember to convert your scripts to use the ';' terminator character if you're reusing existing scripts.  This is useful so to allow multi-line statements and human friendly formatting."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:768
#, no-wrap
msgid "Simplifying Hibernate ORM with Panache"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:771
msgid "The link:hibernate-orm-panache[Hibernate ORM with Panache] extension facilitates the usage of Hibernate ORM by providing active record style entities (and repositories) and focuses on making your entities trivial and fun to write in Quarkus."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:772
#, no-wrap
msgid "Configure your datasource"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:776
msgid "Datasource configuration is extremely simple, but is covered in a different guide as technically it's implemented by the Agroal connection pool extension for Quarkus."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:778
msgid "Jump over to link:datasource[Quarkus - Datasources] for all details."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:780
#, no-wrap
msgid "Multitenancy"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:783
msgid "\"The term multitenancy, in general, is applied to software development to indicate an architecture in which a single running instance of an application simultaneously serves multiple clients (tenants). This is highly common in SaaS solutions. Isolating information (data, customizations, etc.) pertaining to the various tenants is a particular challenge in these systems. This includes the data owned by each tenant stored in the database\" (link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#multitenacy[Hibernate User Guide])."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:785
msgid "Quarkus currently supports the link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#multitenacy-separate-database[separate database] and the link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#multitenacy-separate-schema[separate schema] approach."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:787
msgid "To see multitenancy in action, you can check out the {quickstarts-tree-url}/hibernate-orm-multi-tenancy-quickstart[hibernate-orm-multi-tenancy-quickstart] quickstart."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:788
#, no-wrap
msgid "Writing the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:791
msgid "Let's start by implementing the `/{tenant}` endpoint. As you can see from the source code below it is just a regular JAX-RS resource:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:799
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.inject.Inject;\n"
"import javax.persistence.EntityManager;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:803
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@Path(\"/{tenant}\")\n"
"public class FruitResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:806
#, no-wrap
msgid ""
"    @Inject\n"
"    EntityManager entityManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:813
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"fruits\")\n"
"    public Fruit[] getFruits() {\n"
"        return entityManager.createNamedQuery(\"Fruits.findAll\", Fruit.class)\n"
"                .getResultList().toArray(new Fruit[0]);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:815
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:851
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:875
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:818
msgid "In order to resolve the tenant from incoming requests and map it to a specific tenant configuration, you need to create an implementation for the `io.quarkus.hibernate.orm.runtime.tenant.TenantResolver` interface."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:822
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:863
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:825
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:887
#, no-wrap
msgid ""
"import io.quarkus.hibernate.orm.runtime.tenant.TenantResolver;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:828
#, no-wrap
msgid ""
"@RequestScoped <1>\n"
"public class CustomTenantResolver implements TenantResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:831
#, no-wrap
msgid ""
"    @Inject\n"
"    RoutingContext context;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:836
#, no-wrap
msgid ""
"    @Override\n"
"    public String getDefaultTenantId() {\n"
"        return \"base\";\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:841
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolveTenantId() {\n"
"        String path = context.request().path();\n"
"        String[] parts = path.split(\"/\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:846
#, no-wrap
msgid ""
"        if (parts.length == 0) {\n"
"            // resolve to default tenant config\n"
"            return getDefaultTenantId();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:849
#, no-wrap
msgid ""
"        return parts[1];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:853
msgid "The bean is made `@RequestScoped` as the tenant resolution depends on the incoming request."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:855
msgid "From the implementation above, tenants are resolved from the request path so that in case no tenant could be inferred, the default tenant identifier is returned."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:859
msgid "If <<multiple-persistence-units,named persistence units>> are used, you need to qualify the `TenantResolver` with the persistence unit name:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:867
#, no-wrap
msgid ""
"import io.quarkus.hibernate.orm.PersistenceUnit;\n"
"import io.quarkus.hibernate.orm.runtime.tenant.TenantResolver;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:871
#, no-wrap
msgid ""
"@PersistenceUnit(\"name-of-persistence-unit\") <1>\n"
"@RequestScoped\n"
"public class CustomTenantResolver implements TenantResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:873
#, no-wrap
msgid "   // ...\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:877
msgid "Make sure to use the `@io.quarkus.hibernate.orm.PersistenceUnit` annotation, not the JPA one."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:882
msgid "If you also use link:security-openid-connect-multitenancy[OIDC multitenancy] and both OIDC and Hibernate ORM tenant IDs are the same and must be extracted from the Vert.x `RoutingContext` then you can pass the tenant id from the OIDC Tenant Resolver to the Hibernate ORM Tenant Resolver as a `RoutingContext` attribute, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:890
#, no-wrap
msgid ""
"@RequestScoped\n"
"public class CustomTenantResolver implements TenantResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:900
#, no-wrap
msgid ""
"    @Inject\n"
"    RoutingContext context;\n"
"    ...\n"
"    @Override\n"
"    public String resolveTenantId() {\n"
"        // OIDC TenantResolver has already calculated the tenant id and saved it as a RoutingContext `tenantId` attribute:\n"
"        return context.get(\"tenantId\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:903
#, no-wrap
msgid "Configuring the application"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:908
msgid "In general it is not possible to use the Hibernate ORM database generation feature in conjunction with a multitenancy setup.  Therefore you have to disable it and you need to make sure that the tables are created per schema.  The following setup will use the link:flyway[Flyway] extension to achieve this goal."
msgstr ""

#. type: Title ====
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:909
#, no-wrap
msgid "SCHEMA approach"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:913
msgid "The same data source will be used for all tenants and a schema has to be created for every tenant inside that data source.  CAUTION: Some databases like MariaDB/MySQL do not support database schemas. In these cases you have to use the DATABASE approach below."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:918
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:973
#, no-wrap
msgid ""
"# Disable generation\n"
"quarkus.hibernate-orm.database.generation=none\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:923
#, no-wrap
msgid ""
"# Enable SCHEMA approach and use default datasource\n"
"quarkus.hibernate-orm.multitenant=SCHEMA\n"
"# You could use a non-default datasource by using the following setting \n"
"# quarkus.hibernate-orm.multitenant-schema-datasource=other\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:929
#, no-wrap
msgid ""
"# The default data source used for all tenant schemas\n"
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.datasource.username=quarkus_test\n"
"quarkus.datasource.password=quarkus_test\n"
"quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/quarkus_test\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:934
#, no-wrap
msgid ""
"# Enable Flyway configuration to create schemas\n"
"quarkus.flyway.schemas=base,mycompany\n"
"quarkus.flyway.locations=classpath:schema\n"
"quarkus.flyway.migrate-at-start=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:937
msgid "Here is an example of the Flyway SQL (`V1.0.0__create_fruits.sql`) to be created in the configured folder `src/main/resources/schema`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:950
#, no-wrap
msgid ""
"CREATE SEQUENCE base.known_fruits_id_seq;\n"
"SELECT setval('base.\"known_fruits_id_seq\"', 3);\n"
"CREATE TABLE base.known_fruits\n"
"(\n"
"  id   INT,\n"
"  name VARCHAR(40)\n"
");\n"
"INSERT INTO base.known_fruits(id, name) VALUES (1, 'Cherry');\n"
"INSERT INTO base.known_fruits(id, name) VALUES (2, 'Apple');\n"
"INSERT INTO base.known_fruits(id, name) VALUES (3, 'Banana');\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:961
#, no-wrap
msgid ""
"CREATE SEQUENCE mycompany.known_fruits_id_seq;\n"
"SELECT setval('mycompany.\"known_fruits_id_seq\"', 3);\n"
"CREATE TABLE mycompany.known_fruits\n"
"(\n"
"  id   INT,\n"
"  name VARCHAR(40)\n"
");\n"
"INSERT INTO mycompany.known_fruits(id, name) VALUES (1, 'Avocado');\n"
"INSERT INTO mycompany.known_fruits(id, name) VALUES (2, 'Apricots');\n"
"INSERT INTO mycompany.known_fruits(id, name) VALUES (3, 'Blackberries');\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:965
#, no-wrap
msgid "DATABASE approach"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:968
msgid "For every tenant you need to create a named data source with the same identifier that is returned by the `TenantResolver`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:976
#, no-wrap
msgid ""
"# Enable DATABASE approach\n"
"quarkus.hibernate-orm.multitenant=DATABASE\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:982
#, no-wrap
msgid ""
"# Default tenant 'base'\n"
"quarkus.datasource.base.db-kind=postgresql\n"
"quarkus.datasource.base.username=quarkus_test\n"
"quarkus.datasource.base.password=quarkus_test\n"
"quarkus.datasource.base.jdbc.url=jdbc:postgresql://localhost:5432/quarkus_test\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:988
#, no-wrap
msgid ""
"# Tenant 'mycompany'\n"
"quarkus.datasource.mycompany.db-kind=postgresql\n"
"quarkus.datasource.mycompany.username=mycompany\n"
"quarkus.datasource.mycompany.password=mycompany\n"
"quarkus.datasource.mycompany.jdbc.url=jdbc:postgresql://localhost:5433/mycompany\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:992
#, no-wrap
msgid ""
"# Flyway configuration for the default datasource\n"
"quarkus.flyway.locations=classpath:database/default\n"
"quarkus.flyway.migrate-at-start=true\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:996
#, no-wrap
msgid ""
"# Flyway configuration for the mycompany datasource\n"
"quarkus.flyway.mycompany.locations=classpath:database/mycompany\n"
"quarkus.flyway.mycompany.migrate-at-start=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:999
msgid "Following are examples of the Flyway SQL files to be created in the configured folder `src/main/resources/database`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:1001
msgid "Default schema (`src/main/resources/database/default/V1.0.0__create_fruits.sql`):"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:1014
#, no-wrap
msgid ""
"CREATE SEQUENCE known_fruits_id_seq;\n"
"SELECT setval('known_fruits_id_seq', 3);\n"
"CREATE TABLE known_fruits\n"
"(\n"
"  id   INT,\n"
"  name VARCHAR(40)\n"
");\n"
"INSERT INTO known_fruits(id, name) VALUES (1, 'Cherry');\n"
"INSERT INTO known_fruits(id, name) VALUES (2, 'Apple');\n"
"INSERT INTO known_fruits(id, name) VALUES (3, 'Banana');\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:1017
msgid "Mycompany schema (`src/main/resources/database/mycompany/V1.0.0__create_fruits.sql`):"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:1030
#, no-wrap
msgid ""
"CREATE SEQUENCE known_fruits_id_seq;\n"
"SELECT setval('known_fruits_id_seq', 3);\n"
"CREATE TABLE known_fruits\n"
"(\n"
"  id   INT,\n"
"  name VARCHAR(40)\n"
");\n"
"INSERT INTO known_fruits(id, name) VALUES (1, 'Avocado');\n"
"INSERT INTO known_fruits(id, name) VALUES (2, 'Apricots');\n"
"INSERT INTO known_fruits(id, name) VALUES (3, 'Blackberries');\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:1032
#, no-wrap
msgid "Programmatically Resolving Tenants Connections"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:1034
msgid "If you need a more dynamic configuration for the different tenants you want to support and don't want to end up with multiple entries in your configuration file, you can use the `io.quarkus.hibernate.orm.runtime.tenant.TenantConnectionResolver` interface to implement your own logic for retrieving a connection. Creating an application scoped bean that implements this interface will replace the current Quarkus default implementation `io.quarkus.hibernate.orm.runtime.tenant.DataSourceTenantConnectionResolver`. Your custom connection resolver would allow for example to read tenant information from a database and create a connection per tenant at runtime based on it."
msgstr ""
