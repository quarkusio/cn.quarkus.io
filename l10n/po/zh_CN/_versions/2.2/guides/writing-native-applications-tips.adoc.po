# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:6
#, no-wrap
msgid "Tips for writing native applications"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:11
msgid "This guide contains various tips and tricks for getting around problems that might arise when attempting to run Java applications as native executables."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:13
msgid "Note that we differentiate two contexts where the solution applied might be different:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:15
msgid "in the context of an application, you will rely on configuring the `native-image` configuration by tweaking your `pom.xml`;"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:16
msgid "in the context of an extension, Quarkus offers a lot of infrastructure to simplify all of this."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:18
msgid "Please refer to the appropriate section depending on your context."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:19
#, no-wrap
msgid "Supporting native in your application"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:22
msgid "GraalVM imposes a number of constraints and making your application a native executable might require a few tweaks."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:23
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:381
#, no-wrap
msgid "Including resources"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:27
msgid "By default, when building a native executable, GraalVM will not include any of the resources that are on the classpath into the native executable it creates.  Resources that are meant to be part of the native executable need to be configured explicitly."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:29
msgid "Quarkus automatically includes the resources present in `META-INF/resources` (the web resources) but, outside of this directory, you are on your own."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:34
msgid "Note that you need to be extremely careful here as anything in `META-INF/resources` will be exposed as static web resources.  So this directory is not a shortcut for \"let's automatically include these resources in the native executable\" and should only be used for static web resources."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:36
msgid "Other resources should be declared explicitly."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:40
msgid "To include more resources in the native executable, the easiest way is to use the `quarkus.native.resources.includes` configuration property, and its counterpart to exclude resources `quarkus.native.resources.excludes`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:42
msgid "Both configuration properties support glob patterns."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:44
msgid "For instance, having the following properties in your `application.properties`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:49
#, no-wrap
msgid ""
"quarkus.native.resources.includes=foo/**,bar/**/*.txt\n"
"quarkus.native.resources.excludes=foo/private/**\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:52
msgid "will include:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:54
msgid "all files in the `foo/` directory and its subdirectories except for files in `foo/private/` and its subdirectories,"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:55
msgid "all text files in the `bar/` directory and its subdirectories."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:58
msgid "If globs are not sufficiently precise for your use case and you need to rely on regular expressions or if you prefer relying on the GraalVM infrastructure, you can also create a `resources-config.json` (the most common location is within `src/main/resources`) JSON file defining which resources should be included:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:71
#, no-wrap
msgid ""
"{\n"
"  \"resources\": [\n"
"    {\n"
"      \"pattern\": \".*\\\\.xml$\"\n"
"    },\n"
"    {\n"
"      \"pattern\": \".*\\\\.json$\"\n"
"    }\n"
"  ]\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:75
msgid "The patterns are valid Java regexps.  Here we include all the XML files and JSON files into the native executable."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:79
msgid "You can find more information about this topic in https://github.com/oracle/graal/blob/master/docs/reference-manual/native-image/Resources.md[the GraalVM documentation]."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:82
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:251
msgid "The final order of business is to make the configuration file known to the `native-image` executable by adding the proper configuration to `application.properties`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:86
#, no-wrap
msgid "quarkus.native.additional-build-args =-H:ResourceConfigurationFiles=resources-config.json\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:90
msgid "In the previous snippet we were able to simply use `resources-config.json` instead of specifying the entire path of the file simply because it was added to `src/main/resources`.  If the file had been added to another directory, the proper file path would have had to be specified manually."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:94
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:263
msgid "Multiple options may be separated by a comma. For example, one could use:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:100
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:269
#, no-wrap
msgid ""
"quarkus.native.additional-build-args =\\\n"
"    -H:ResourceConfigurationFiles=resources-config.json,\\\n"
"    -H:ReflectionConfigurationFiles=reflection-config.json\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:103
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:272
msgid "in order to ensure that various resources are included and additional reflection is registered."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:106
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:275
msgid "If for some reason adding the aforementioned configuration to `application.properties` is not desirable, it is possible to configure the build tool to effectively perform the same operation."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:108
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:277
msgid "When using Maven, we could use the following configuration:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:120
#, no-wrap
msgid ""
"<profiles>\n"
"    <profile>\n"
"        <id>native</id>\n"
"        <properties>\n"
"            <quarkus.package.type>native</quarkus.package.type>\n"
"            <quarkus.native.additional-build-args>-H:ResourceConfigurationFiles=resources-config.json</quarkus.native.additional-build-args>\n"
"        </properties>\n"
"    </profile>\n"
"</profiles>\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:122
#, no-wrap
msgid "Registering for reflection"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:126
msgid "When building a native executable, GraalVM operates with a closed world assumption.  It analyzes the call tree and removes all the classes/methods/fields that are not used directly."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:129
msgid "The elements used via reflection are not part of the call tree so they are dead code eliminated (if not called directly in other cases).  To include these elements in your native executable, you need to register them for reflection explicitly."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:131
msgid "This is a very common case as JSON libraries typically use reflection to serialize the objects to JSON:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:137
#, no-wrap
msgid ""
"    public class Person {\n"
"        private String first;\n"
"        private String last;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:141
#, no-wrap
msgid ""
"        public String getFirst() {\n"
"            return first;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:145
#, no-wrap
msgid ""
"        public void setFirst(String first) {\n"
"            this.first = first;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:149
#, no-wrap
msgid ""
"        public String getLast() {\n"
"            return last;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:154
#, no-wrap
msgid ""
"        public void setValue(String last) {\n"
"            this.last = last;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:159
#, no-wrap
msgid ""
"    @Path(\"/person\")\n"
"    @Produces(MediaType.APPLICATION_JSON)\n"
"    @Consumes(MediaType.APPLICATION_JSON)\n"
"    public class PersonResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:161
#, no-wrap
msgid "        private final Jsonb jsonb;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:165
#, no-wrap
msgid ""
"        public PersonResource() {\n"
"            jsonb = JsonbBuilder.create(new JsonbConfig());\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:171
#, no-wrap
msgid ""
"        @GET\n"
"        public Response list() {\n"
"            return Response.ok(jsonb.fromJson(\"{\\\"first\\\":  \\\"foo\\\", \\\"last\\\":  \\\"bar\\\"}\", Person.class)).build();\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:174
msgid "If we were to use the code above, we would get an exception like the following when using the native executable:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:178
#, no-wrap
msgid "Exception handling request to /person: org.jboss.resteasy.spi.UnhandledException: javax.json.bind.JsonbException: Can't create instance of a class: class org.acme.jsonb.Person, No default constructor found\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:181
msgid "or if you are using Jackson:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:185
#, no-wrap
msgid "com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.acme.jsonb.Person and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:188
msgid "An even nastier possible outcome could be for no exception to be thrown, but instead the JSON result would be completely empty."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:190
msgid "There are two different ways to fix this type of issues."
msgstr ""

#. type: Title ====
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:192
#, no-wrap
msgid "Using the @RegisterForReflection annotation"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:195
msgid "The easiest way to register a class for reflection is to use the `@RegisterForReflection` annotation:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:201
#, no-wrap
msgid ""
"@RegisterForReflection\n"
"public class MyClass {\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:204
msgid "If your class is in a third-party jar, you can do it by using an empty class that will host the `@RegisterForReflection` for it."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:210
#, no-wrap
msgid ""
"@RegisterForReflection(targets={ MyClassRequiringReflection.class, MySecondClassRequiringReflection.class})\n"
"public class MyReflectionConfiguration {\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:213
msgid "Note that `MyClassRequiringReflection` and `MySecondClassRequiringReflection` will be registered for reflection but not `MyReflectionConfiguration`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:215
msgid "This feature is handy when using third-party libraries using object mapping features (such as Jackson or GSON):"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:220
#, no-wrap
msgid ""
"@RegisterForReflection(targets = {User.class, UserImpl.class})\n"
"public class MyReflectionConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:222
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:374
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:395
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:417
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:441
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:224
#, no-wrap
msgid "Using a configuration file"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:227
msgid "You can use a configuration file to register classes for reflection."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:229
msgid "As an example, in order to register all methods of class `com.acme.MyClass` for reflection, we create `reflection-config.json` (the most common location is within `src/main/resources`)"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:243
#, no-wrap
msgid ""
"[\n"
"  {\n"
"    \"name\" : \"com.acme.MyClass\",\n"
"    \"allDeclaredConstructors\" : true,\n"
"    \"allPublicConstructors\" : true,\n"
"    \"allDeclaredMethods\" : true,\n"
"    \"allPublicMethods\" : true,\n"
"    \"allDeclaredFields\" : true,\n"
"    \"allPublicFields\" : true\n"
"  }\n"
"]\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:248
msgid "For more details on the format of this file, please refer to https://github.com/oracle/graal/blob/master/docs/reference-manual/native-image/Reflection.md[the GraalVM documentation]."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:255
#, no-wrap
msgid "quarkus.native.additional-build-args =-H:ReflectionConfigurationFiles=reflection-config.json\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:259
msgid "In the previous snippet we were able to simply use `reflection-config.json` instead of specifying the entire path of the file simply because it was added to `src/main/resources`.  If the file had been added to another directory, the proper file path would have had to be specified manually."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:289
#, no-wrap
msgid ""
"<profiles>\n"
"    <profile>\n"
"        <id>native</id>\n"
"        <properties>\n"
"            <quarkus.package.type>native</quarkus.package.type>\n"
"            <quarkus.native.additional-build-args>-H:ReflectionConfigurationFiles=reflection-config.json</quarkus.native.additional-build-args>\n"
"        </properties>\n"
"    </profile>\n"
"</profiles>\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:291
#, no-wrap
msgid "Delaying class initialization"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:294
msgid "By default, Quarkus initializes all classes at build time."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:297
msgid "There are cases where the initialization of certain classes is done in a static block needs to be postponed to runtime.  Typically omitting such configuration would result in a runtime exception like the following:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:304
#, no-wrap
msgid ""
"Error: No instances are allowed in the image heap for a class that is initialized or reinitialized at image runtime: sun.security.provider.NativePRNG\n"
"Trace: object java.security.SecureRandom\n"
"method com.amazonaws.services.s3.model.CryptoConfiguration.<init>(CryptoMode)\n"
"Call path from entry point to com.amazonaws.services.s3.model.CryptoConfiguration.<init>(CryptoMode):\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:307
msgid "If you need to delay the initialization of a class, you can use the `--initialize-at-run-time=<package or class>` configuration knob."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:309
msgid "It should be added to the `native-image` configuration using the `quarkus.native.additional-build-args` configuration property as shown in the examples above."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:313
msgid "You can find more information about all this in https://github.com/oracle/graal/blob/master/docs/reference-manual/native-image/ClassInitialization.md[the GraalVM documentation]."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:319
msgid "When multiple classes or packages need to be specified via the `quarkus.native.additional-build-args` configuration property, the `,` symbol needs to be escaped.  An example of this is the following:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:323
#, no-wrap
msgid "quarkus.native.additional-build-args=--initialize-at-run-time=com.example.SomeClass\\\\,org.acme.SomeOtherClass\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:326
msgid "and in the case of using the Maven configuration instead of `application.properties`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:330
#, no-wrap
msgid "<quarkus.native.additional-build-args>--initialize-at-run-time=com.example.SomeClass\\,org.acme.SomeOtherClass</quarkus.native.additional-build-args>\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:333
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:426
#, no-wrap
msgid "Managing Proxy Classes"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:336
msgid "While writing native application you'll need to define proxy classes at image build time by specifying the list of interfaces that they implement."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:338
msgid "In such a situation, the error you might encounter is:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:342
#, no-wrap
msgid "com.oracle.svm.core.jdk.UnsupportedFeatureError: Proxy class defined by interfaces [interface org.apache.http.conn.HttpClientConnectionManager, interface org.apache.http.pool.ConnPoolControl, interface com.amazonaws.http.conn.Wrapped] not found. Generating proxy classes at runtime is not supported. Proxy classes need to be defined at image build time by specifying the list of interfaces that they implement. To define proxy classes use -H:DynamicProxyConfigurationFiles=<comma-separated-config-files> and -H:DynamicProxyConfigurationResources=<comma-separated-config-resources> options.\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:346
msgid "Solving this issue requires adding the `-H:DynamicProxyConfigurationResources=<comma-separated-config-resources>` option and to provide a dynamic proxy configuration file.  You can find all the information about the format of this file in https://github.com/oracle/graal/blob/master/docs/reference-manual/native-image/DynamicProxy.md#manual-configuration[the GraalVM documentation]."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:348
#, no-wrap
msgid "Supporting native in a Quarkus extension"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:351
msgid "Supporting native in a Quarkus extension is even easier as Quarkus provides a lot of tools to simplify all this."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:355
msgid "Everything described here will only work in the context of Quarkus extensions, it won't work in an application."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:357
#, no-wrap
msgid "Register reflection"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:360
msgid "Quarkus makes registration of reflection in an extension a breeze by using `ReflectiveClassBuildItem`, thus eliminating the need for a JSON configuration file."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:362
msgid "To register a class for reflection, one would need to create a Quarkus processor class and add a build step that registers reflection:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:366
#, no-wrap
msgid "public class SaxParserProcessor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:372
#, no-wrap
msgid ""
"    @BuildStep\n"
"    ReflectiveClassBuildItem reflection() {\n"
"        // since we only need reflection to the constructor of the class, we can specify `false` for both the methods and the fields arguments.\n"
"        return new ReflectiveClassBuildItem(false, false, \"com.sun.org.apache.xerces.internal.parsers.SAXParser\");\n"
"    }\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:379
msgid "More information about reflection in GraalVM can be found https://github.com/oracle/graal/blob/master/docs/reference-manual/native-image/Reflection.md[here]."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:384
msgid "In the context of an extension, Quarkus eliminates the need for a JSON configuration file by allowing extension authors to specify a `NativeImageResourceBuildItem`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:388
#, no-wrap
msgid "public class ResourcesProcessor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:393
#, no-wrap
msgid ""
"    @BuildStep\n"
"    NativeImageResourceBuildItem nativeImageResourceBuildItem() {\n"
"        return new NativeImageResourceBuildItem(\"META-INF/extra.properties\");\n"
"    }\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:400
msgid "For more information about GraalVM resource handling in native executables please refer to https://github.com/oracle/graal/blob/master/docs/reference-manual/native-image/Resources.md[the GraalVM documentation]."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:403
#, no-wrap
msgid "Delay class initialization"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:406
msgid "Quarkus simplifies things by allowing extensions authors to simply register a `RuntimeInitializedClassBuildItem`. A simple example of doing so could be:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:410
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:433
#, no-wrap
msgid "public class S3Processor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:415
#, no-wrap
msgid ""
"    @BuildStep\n"
"    RuntimeInitializedClassBuildItem cryptoConfiguration() {\n"
"        return new RuntimeInitializedClassBuildItem(CryptoConfiguration.class.getCanonicalName());\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:420
msgid "Using such a construct means that a `--initialize-at-run-time` option will automatically be added to the `native-image` command line."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:424
msgid "For more information about `--initialize-at-run-time`, please read https://github.com/oracle/graal/blob/master/docs/reference-manual/native-image/ClassInitialization.md[the GraalVM documentation]."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:429
msgid "Very similarly, Quarkus allows extensions authors to register a `NativeImageProxyDefinitionBuildItem`. An example of doing so is:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:439
#, no-wrap
msgid ""
"    @BuildStep\n"
"    NativeImageProxyDefinitionBuildItem httpProxies() {\n"
"        return new NativeImageProxyDefinitionBuildItem(\"org.apache.http.conn.HttpClientConnectionManager\",\n"
"                \"org.apache.http.pool.ConnPoolControl\", \"com.amazonaws.http.conn.Wrapped\");\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:444
msgid "Using such a construct means that a `-H:DynamicProxyConfigurationResources` option will automatically be added to the `native-image` command line."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:448
msgid "For more information about Proxy Classes you can read https://github.com/oracle/graal/blob/master/docs/reference-manual/native-image/DynamicProxy.md[the GraalVM documentation]."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:450
#, no-wrap
msgid "Logging with Native Image"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:453
msgid "If you are using dependencies that require logging components such as Apache Commons Logging or Log4j and are experiencing a `ClassNotFoundException` when building the native executable, you can resolve this by excluding the logging library and adding the corresponding JBoss Logging adapter."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-native-applications-tips.adoc:454
msgid "For more details please refer to the link:logging#logging-adapters[Logging guide]."
msgstr ""
