# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-05-12 15:59+0000\n"
"PO-Revision-Date: 2022-05-31 00:28+0800\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/building-native-image.adoc:6
#, no-wrap
msgid "Building a Native Executable"
msgstr "构建一个原生可执行文件"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:11
msgid "This guide covers:"
msgstr "本指南包括："

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:13
msgid "Compiling the application to a native executable"
msgstr "将应用程序编译为原生可执行文件"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:14
msgid "Packaging the native executable in a container"
msgstr "将原生可执行文件打包到一个容器中"

#. type: Title ==
#: upstream/_versions/2.2/guides/building-native-image.adoc:15
#: upstream/_versions/2.2/guides/building-native-image.adoc:702
#, no-wrap
msgid "Debugging native executable"
msgstr "调试原生可执行文件"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:17
msgid "This guide takes as input the application developed in the link:getting-started[Getting Started Guide]."
msgstr "本指南以 link:getting-started[入门指南]中开发的应用程序作为输入。"

#. type: Title ==
#: upstream/_versions/2.2/guides/building-native-image.adoc:18
#, no-wrap
msgid "GraalVM"
msgstr "GraalVM"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:24
msgid "Building a native executable requires using a distribution of GraalVM.  There are three distributions: Oracle GraalVM Community Edition (CE), Oracle GraalVM Enterprise Edition (EE) and Mandrel.  The differences between the Oracle and Mandrel distributions are as follows:"
msgstr "构建一个原生可执行文件需要使用GraalVM的发行版。有三个发行版：Oracle GraalVM社区版（CE）、Oracle GraalVM企业版（EE）和Mandrel。Oracle和Mandrel发行版之间的区别如下："

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:27
msgid "Mandrel is a downstream distribution of the Oracle GraalVM CE.  Mandrel's main goal is to provide a way to build native executables specifically designed to support Quarkus."
msgstr "Mandrel是Oracle GraalVM CE的一个下游发行版。Mandrel的主要目标是提供一种方法来构建专门为支持Quarkus而设计的原生可执行文件。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:36
msgid "Mandrel releases are built from a code base derived from the upstream Oracle GraalVM CE code base, with only minor changes but some significant exclusions that are not necessary for Quarkus native apps.  They support the same capabilities to build native executables as Oracle GraalVM CE, with no significant changes to functionality.  Notably, they do not include support for polyglot programming.  The reason for these exclusions is to provide a better level of support for the majority of Quarkus users.  These exclusions also mean Mandrel offers a considerable reduction in its distribution size when compared with Oracle GraalVM CE/EE."
msgstr "Mandrel版本的代码库来自于上游的Oracle GraalVM CE代码库，只做了一些小的改动，但也有一些重要的对于Quarkus本地应用程序来说是没有必要的排除项。它们支持与Oracle GraalVM CE相同的构建原生可执行文件的能力，在功能上没有重大变化。值得注意的是，它们不包括对多语言编程的支持。之所以排除这些功能，是为了给大多数Quarkus用户提供更好的支持水平。与Oracle GraalVM CE/EE相比，这些不包括的内容也意味着Mandrel发布的软件包大小大大减小。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:41
msgid "Mandrel is built slightly differently to Oracle GraalVM CE, using the standard OpenJDK project.  This means that it does not profit from a few small enhancements that Oracle have added to the version of OpenJDK used to build their own GraalVM downloads.  This enhancements are omitted because upstream OpenJDK does not manage them, and cannot vouch for.  This is particularly important when it comes to conformance and security."
msgstr "Mandrel的构建方式与Oracle GraalVM CE略有不同，它使用的是标准的OpenJDK项目。这意味着它不能从Oracle对用于构建他们自己的GraalVM下载的OpenJDK版本添加的一些小的增强功能中获益。这些增强功能被省略了，因为上游的OpenJDK并不管理它们，也无法担保。在涉及到一致性和安全性时，这一点尤其重要。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:50
msgid "Mandrel is currently only recommended for building native executables that target Linux containerized environments.  This means that Mandrel users should use containers to build their native executables.  If you are building native executables for macOS or Windows target platforms, you should consider using Oracle GraalVM instead, because Mandrel does not currently target these platforms.  Building native executables directly on bare metal Linux is possible, with details available in the https://github.com/graalvm/mandrel/blob/default/README.md[Mandrel README] and https://github.com/graalvm/mandrel/releases[Mandrel releases]."
msgstr "Mandrel目前只推荐用于构建针对Linux容器化环境的原生可执行文件。这意味着Mandrel用户应该使用容器来构建他们的原生可执行文件。如果你正在为macOS或Windows目标平台构建原生可执行文件，你应该考虑使用Oracle GraalVM，因为Mandrel目前并不针对这些平台。直接在裸金属Linux上构建原生可执行文件是可能的，详细信息请参见 https://github.com/graalvm/mandrel/blob/default/README.md[Mandrel README] 和 https://github.com/graalvm/mandrel/releases[Mandrel releases]。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:52
msgid "The prerequisites vary slightly depending on whether you are using Oracle GraalVM CE/EE or Mandrel."
msgstr "前提条件依据您使用的是Oracle GraalVM CE/EE还是Mandrel略有不同。"

#. type: Block title
#: upstream/_versions/2.2/guides/building-native-image.adoc:54
#, no-wrap
msgid "Install the Java 11 version of GraalVM"
msgstr "安装Java 11版本的GraalVM"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:58
msgid "While Oracle GraalVM is available for both Java 8 and Java 11 (Mandrel only supports Java 11), Quarkus only works with the Java 11 version.  If you use the Oracle distribution, make sure to install the Java 11 version."
msgstr "Oracle GraalVM在Java 8和Java 11上都可以使用(Mandrel只支持Java 11)，而Quarkus只支持Java 11版本。如果您使用Oracle发行版，请确保安装Java 11版本。"

#. type: Title ==
#: upstream/_versions/2.2/guides/building-native-image.adoc:60
#, no-wrap
msgid "Prerequisites for Mandrel"
msgstr "Mandrel先决条件"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:63
msgid "To complete this guide using Mandrel, you need:"
msgstr "要使用Mandrel完成本指南，你需要："

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:65
#: upstream/_versions/2.2/guides/building-native-image.adoc:78
msgid "less than 15 minutes"
msgstr "不到15分钟"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:66
#: upstream/_versions/2.2/guides/building-native-image.adoc:79
msgid "an IDE"
msgstr "一个编辑器"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:67
#: upstream/_versions/2.2/guides/building-native-image.adoc:80
msgid "JDK 11 installed with `JAVA_HOME` configured appropriately"
msgstr "JDK 11安装时适当配置了 `JAVA_HOME`"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:68
#: upstream/_versions/2.2/guides/building-native-image.adoc:83
msgid "A working container runtime (Docker, podman)"
msgstr "一个工作的容器运行时（Docker 或 podman）"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:69
#: upstream/_versions/2.2/guides/building-native-image.adoc:84
msgid "The code of the application developed in the link:getting-started[Getting Started Guide]."
msgstr "应用程序开发的代码在 link:getting-started[入门指南]。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:72
msgid "Skip to <<#container-runtime,this section>> to continue with the guide for Mandrel, and follow the Mandrel-specific instructions in that section."
msgstr "跳转到 <<#container-runtime,this section>> 继续指导Mandrel，并遵循该节中特定于Mandrel的说明。"

#. type: Title ==
#: upstream/_versions/2.2/guides/building-native-image.adoc:73
#, no-wrap
msgid "Prerequisites for Oracle GraalVM CE/EE"
msgstr "Oracle GraalVM CE/EE 的前提条件"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:76
msgid "To complete this guide, you need:"
msgstr "要完成这个指南，你需要："

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:81
msgid "A xref:configuring-c-development[working C development environment]"
msgstr "一个 xref:configuring-c-development[C语言工作开发环境]"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:82
msgid "GraalVM version {graalvm-version} (be sure to install the Java 11 support) installed and xref:configuring-graalvm[configured appropriately]"
msgstr "GraalVM的版本 {graalvm-version} （确保安装了Java 11支持）已安装并且 xref:configuring-graalvm[配置适当]"

#. type: Block title
#: upstream/_versions/2.2/guides/building-native-image.adoc:85
#, no-wrap
msgid "Supporting native compilation in C"
msgstr "支持C语言的原生编译"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:90
msgid "What does having a working C developer environment mean?"
msgstr "拥有一个C语言工作开发者环境意味着什么？"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:92
msgid "On Linux, you will need GCC, and the glibc and zlib headers. Examples for common distributions:"
msgstr "在Linux上，你将需要GCC，以及glibc和zlib头文件。常见发行版的例子："

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:99
#, no-wrap
msgid ""
"# dnf (rpm-based)\n"
"sudo dnf install gcc glibc-devel zlib-devel libstdc++-static\n"
"# Debian-based distributions:\n"
"sudo apt-get install build-essential libz-dev zlib1g-dev\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:101
msgid "XCode provides the required dependencies on macOS:"
msgstr "XCode在macOS上提供了必要的依赖性："

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:105
#, no-wrap
msgid "xcode-select --install\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:107
msgid "On Windows, you will need to install the https://aka.ms/vs/15/release/vs_buildtools.exe[Visual Studio 2017 Visual C++ Build Tools]"
msgstr "在Windows上，你将需要安装 https://aka.ms/vs/15/release/vs_buildtools.exe[Visual Studio 2017 Visual C++构建工具]"

#. type: Title ===
#: upstream/_versions/2.2/guides/building-native-image.adoc:110
#, no-wrap
msgid "Configuring GraalVM"
msgstr "配置GraalVM"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:115
msgid "If you cannot install GraalVM, you can use a multi-stage Docker build to run Maven inside a Docker container that embeds GraalVM. There is an explanation of how to do this at the end of this guide."
msgstr "如果你无法安装GraalVM，你可以使用多阶段Docker构建在嵌入GraalVM的Docker容器内运行Maven。本指南最后有关于如何操作的解释。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:118
msgid "Version {graalvm-version} is required. Using the community edition is enough."
msgstr "版本 {graalvm-version} 是必需的。使用社区版就可以了。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:120
msgid "Install GraalVM (pick the java 11 version) if you haven't already. You have a few options for this:"
msgstr "如果还没有安装GraalVM（选择java 11版本），您有几个选择："

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:121
msgid "Use platform-specific install tools like https://github.com/graalvm/homebrew-tap[homebrew], https://sdkman.io/jdks#Oracle[sdkman], or https://github.com/ScoopInstaller/Java[scoop]."
msgstr "使用平台特定的安装工具，如 https://github.com/graalvm/homebrew-tap[homebrew]，https://sdkman.io/jdks#Oracle[sdkman]，或 https://github.com/ScoopInstaller/Java[scoop]。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:123
msgid "Download the appropriate Community Edition archive from <https://github.com/graalvm/graalvm-ce-builds/releases>, and unpack it like you would any other JDK.  Make sure to download and install at Java 11 version."
msgstr "从 <https://github.com/graalvm/graalvm-ce-builds/releases>下载适当的社区版归档文件，然后像解包其他JDK一样解包。确保Java 11版本已经下载并安装。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:124
msgid "Configure the runtime environment. Set `GRAALVM_HOME` environment variable to the GraalVM installation directory, for example:"
msgstr "配置运行环境。例如将 `GRAALVM_HOME` 环境变量设置为GraalVM的安装目录，例如："

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:128
#, no-wrap
msgid "export GRAALVM_HOME=$HOME/Development/graalvm/\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:131
msgid "On macOS, point the variable to the `Home` sub-directory:"
msgstr "在macOS中，将变量指向 `Home` 子目录："

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:135
#, no-wrap
msgid "export GRAALVM_HOME=$HOME/Development/graalvm/Contents/Home/\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:138
msgid "On Windows, you will have to go through the Control Panel to set your environment variables."
msgstr "在Windows上，您将不得不通过控制面板来设置你的环境变量。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:142
msgid "Installing via scoop will do this for you."
msgstr "通过scoop安装将为你做到这一点。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:144
msgid "Install the `native-image` tool using `gu install`:"
msgstr "使用 `gu install` 安装 `native-image` 工具："

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:148
#, no-wrap
msgid "${GRAALVM_HOME}/bin/gu install native-image\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:151
msgid "Some previous releases of GraalVM included the `native-image` tool by default.  This is no longer the case; it must be installed as a second step after GraalVM itself is installed. Note: there is an outstanding issue xref:graal-and-catalina[using GraalVM with macOS Catalina]."
msgstr "GraalVM以前的一些版本默认包括 `native-image` 工具。现在已经不是这样了，它必须在安装完GraalVM本身后作为第二步来安装。注意：一个已知的问题 xref:graal-and-catalina[在MacOS Catalina上使用GraalVM]。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:152
msgid "(Optional) Set the `JAVA_HOME` environment variable to the GraalVM installation directory."
msgstr "(可选）将 `JAVA_HOME` 环境变量设置为GraalVM的安装目录。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:156
#, no-wrap
msgid "export JAVA_HOME=${GRAALVM_HOME}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:158
msgid "(Optional) Add the GraalVM `bin` directory to the path"
msgstr "(可选）将GraalVM `bin` 目录添加到路径中"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:162
#, no-wrap
msgid "export PATH=${GRAALVM_HOME}/bin:$PATH\n"
msgstr ""

#. type: Block title
#: upstream/_versions/2.2/guides/building-native-image.adoc:165
#, no-wrap
msgid "Issues using GraalVM with macOS Catalina"
msgstr "在MacOS Catalina上使用GraalVM的问题"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:169
msgid "GraalVM binaries are not (yet) notarized for macOS Catalina as reported in this https://github.com/oracle/graal/issues/1724[GraalVM issue]. This means that you may see the following error when using `gu`:"
msgstr "GraalVM的二进制文件（尚未）对macOS Catalina进行认证，正如这个 https://github.com/oracle/graal/issues/1724[GralVM问题]中所报告的那样。这意味着您在使用 `gu` 时可能会看到以下错误："

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:173
#, no-wrap
msgid "“gu” cannot be opened because the developer cannot be verified\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:176
msgid "Use the following command to recursively delete the `com.apple.quarantine` extended attribute on the GraalVM install directory as a workaround:"
msgstr "使用以下命令递归删除GraalVM安装目录上的 `com.apple.quarantine` 扩展属性，作为一种解决方法："

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:180
#, no-wrap
msgid "xattr -r -d com.apple.quarantine ${GRAALVM_HOME}/../..\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/building-native-image.adoc:183
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:186
msgid "We recommend that you follow the instructions in the next sections and package the application step by step. However, you can go right to the completed example."
msgstr "我们建议您按照下面几节的说明，一步一步地打包应用。不过您还可以直接进入完成的例子。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:188
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:190
msgid "The solution is located in the `getting-started` directory."
msgstr "该解决方案位于 `getting-started` 目录中。"

#. type: Title ==
#: upstream/_versions/2.2/guides/building-native-image.adoc:191
#, no-wrap
msgid "Producing a native executable"
msgstr "制作一个原生可执行文件"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:194
msgid "The native executable for our application will contain the application code, required libraries, Java APIs, and a reduced version of a VM. The smaller VM base improves the startup time of the application and produces a minimal disk footprint."
msgstr "我们应用程序的原生可执行文件将包含应用程序代码、所需的库、Java API和一个缩小版的虚拟机。较小的虚拟机基础提高了应用程序的启动时间和最小的磁盘占用。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:196
msgid "image:native-executable-process.png[Creating a native executable]"
msgstr "image:native-executable-process.png[创建原生可执行文件]"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:198
msgid "If you have generated the application from the previous tutorial, you can find in the `pom.xml` the following _profile_:"
msgstr "如果你已经从前面的教程中生成了应用程序，你可以在 `pom.xml` ，找到以下 _profile_："

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:209
#, no-wrap
msgid ""
"<profiles>\n"
"    <profile>\n"
"        <id>native</id>\n"
"        <properties>\n"
"            <quarkus.package.type>native</quarkus.package.type>\n"
"        </properties>\n"
"    </profile>\n"
"</profiles>\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:215
msgid "You can provide custom options for the `native-image` command using the `<quarkus.native.additional-build-args>` property.  Multiple options may be separated by a comma."
msgstr "你可以使用 `<quarkus.native.additional-build-args>` 属性为 `native-image` 命令提供自定义选项。多个选项可以用逗号隔开。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:217
msgid "Another possibility is to include the `quarkus.native.additional-build-args` configuration property in your `application.properties`."
msgstr "另一种做法是在你的 `application.properties` ，填写 `quarkus.native.additional-build-args` 配置属性。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:219
msgid "You can find more information about how to configure the native image building process in the <<configuration-reference>> section below."
msgstr "你可以在下面的 <<configuration-reference>> 部分找到关于如何配置原生镜像构建过程的更多信息。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:224
msgid "We use a profile because, you will see very soon, packaging the native executable takes a _few_ minutes. You could just pass -Dquarkus.package.type=native as a property on the command line, however it is better to use a profile as this allows native image tests to also be run."
msgstr "我们使用profile是因为，你很快就会看到，打包原生可执行文件需要 _few_ 分钟。你可以在命令行中把 -Dquarkus.package.type=native 作为一个属性，但是最好是使用一个profile，因为这可以使原生镜像测试也被运行。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:226
msgid "Create a native executable using: `./mvnw package -Pnative`."
msgstr "使用： `./mvnw package -Pnative` 创建一个原生可执行文件。"

#. type: Block title
#: upstream/_versions/2.2/guides/building-native-image.adoc:229
#, no-wrap
msgid "Issues with packaging on Windows"
msgstr "在Windows上打包的问题"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:234
msgid "The Microsoft Native Tools for Visual Studio must first be initialized before packaging. You can do this by starting the `x64 Native Tools Command Prompt` that was installed with the Visual Studio Build Tools. At `x64 Native Tools Command Prompt` you can navigate to your project folder and run `mvnw package -Pnative`."
msgstr "在打包之前，必须首先初始化 Microsoft Native Tools for Visual Studio。你可以通过启动与Visual Studio Build Tools 一起安装的 `x64 Native Tools Command Prompt` 来做到这一点。在 `x64 Native Tools Command Prompt` ，你可以导航到你的项目文件夹并运行 `mvnw package -Pnative` 。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:236
msgid "Another solution is to write a script to do this for you:"
msgstr "另一个解决方案是写一个脚本来为您做这件事："

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:240
#, no-wrap
msgid "cmd /c 'call \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Auxiliary\\Build\\vcvars64.bat\" && mvn package -Pnative'\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:245
msgid "In addition to the regular files, the build also produces `target/getting-started-1.0.0-SNAPSHOT-runner`.  You can run it using: `./target/getting-started-1.0.0-SNAPSHOT-runner`."
msgstr "除了常规文件外，该构建还产生了 `target/getting-started-1.0.0-SNAPSHOT-runner` 。你可以用以下方式运行它： `./target/getting-started-1.0.0-SNAPSHOT-runner` 。"

#. type: Title ==
#: upstream/_versions/2.2/guides/building-native-image.adoc:246
#, no-wrap
msgid "Testing the native executable"
msgstr "测试原生可执行文件"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:249
msgid "Producing a native executable can lead to a few issues, and so it's also a good idea to run some tests against the application running in the native file."
msgstr "制作一个原生可执行文件可能会导致一些问题，因此，针对在原生文件中运行的应用程序运行一些测试也是一个好主意。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:251
msgid "In the `pom.xml` file, the `native` profile contains:"
msgstr "在 `pom.xml` 文件中， `native` 配置文件包含："

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:274
#, no-wrap
msgid ""
"<plugin>\n"
"    <groupId>org.apache.maven.plugins</groupId>\n"
"    <artifactId>maven-failsafe-plugin</artifactId>\n"
"    <version>${surefire-plugin.version}</version>\n"
"    <executions>\n"
"        <execution>\n"
"            <goals>\n"
"                <goal>integration-test</goal>\n"
"                <goal>verify</goal>\n"
"            </goals>\n"
"            <configuration>\n"
"                <systemPropertyVariables>\n"
"                    <native.image.path>${project.build.directory}/${project.build.finalName}-runner</native.image.path>\n"
"                    <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"                    <maven.home>${maven.home}</maven.home>\n"
"                </systemPropertyVariables>\n"
"            </configuration>\n"
"        </execution>\n"
"    </executions>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:277
msgid "This instructs the failsafe-maven-plugin to run integration-test and indicates the location of the produced native executable."
msgstr "这指示 failsafe-maven-plugin 运行集成测试，并指出生成的原生可执行文件的位置。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:279
msgid "Then, open the `src/test/java/org/acme/quickstart/NativeGreetingResourceIT.java`. It contains:"
msgstr "然后，打开 `src/test/java/org/acme/quickstart/NativeGreetingResourceIT.java` 。它包含了："

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:283
#, no-wrap
msgid "package org.acme.quickstart;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:286
#, no-wrap
msgid "import io.quarkus.test.junit.NativeImageTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:289
#, no-wrap
msgid ""
"@NativeImageTest // <1>\n"
"public class NativeGreetingResourceIT extends GreetingResourceTest { // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:291
#, no-wrap
msgid "    // Run the same tests\n"
msgstr "    // 运行相同测试\n"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:293
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:296
msgid "Use another test runner that starts the application from the native file before the tests.  The executable is retrieved using the `native.image.path` system property configured in the _Failsafe Maven Plugin_."
msgstr "使用另一个测试运行器，在测试前从原生文件启动应用程序。使用 _Failsafe Maven Plugin_ 中配置的 `native.image.path` 系统属性检索该可执行文件。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:297
msgid "We extend our previous tests, but you can also implement your tests"
msgstr "我们扩展了之前的测试，但您也可以实现自己的测试"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:299
msgid "To see the `NativeGreetingResourceIT` run against the native executable, use `./mvnw verify -Pnative`:"
msgstr "要查看针对原生可执行文件运行 `NativeGreetingResourceIT` ，请用 `./mvnw verify -Pnative`："

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:323
#, no-wrap
msgid ""
"$ ./mvnw verify -Pnative\n"
"...\n"
"[getting-started-1.0.0-SNAPSHOT-runner:18820]     universe:     587.26 ms\n"
"[getting-started-1.0.0-SNAPSHOT-runner:18820]      (parse):   2,247.59 ms\n"
"[getting-started-1.0.0-SNAPSHOT-runner:18820]     (inline):   1,985.70 ms\n"
"[getting-started-1.0.0-SNAPSHOT-runner:18820]    (compile):  14,922.77 ms\n"
"[getting-started-1.0.0-SNAPSHOT-runner:18820]      compile:  20,361.28 ms\n"
"[getting-started-1.0.0-SNAPSHOT-runner:18820]        image:   2,228.30 ms\n"
"[getting-started-1.0.0-SNAPSHOT-runner:18820]        write:     364.35 ms\n"
"[getting-started-1.0.0-SNAPSHOT-runner:18820]      [total]:  52,777.76 ms\n"
"[INFO]\n"
"[INFO] --- maven-failsafe-plugin:2.22.1:integration-test (default) @ getting-started ---\n"
"[INFO]\n"
"[INFO] -------------------------------------------------------\n"
"[INFO]  T E S T S\n"
"[INFO] -------------------------------------------------------\n"
"[INFO] Running org.acme.quickstart.NativeGreetingResourceIT\n"
"Executing [/data/home/gsmet/git/quarkus-quickstarts/getting-started/target/getting-started-1.0.0-SNAPSHOT-runner, -Dquarkus.http.port=8081, -Dtest.url=http://localhost:8081, -Dquarkus.log.file.path=build/quarkus.log]\n"
"2019-04-15 11:33:20,348 INFO  [io.quarkus] (main) Quarkus 999-SNAPSHOT started in 0.002s. Listening on: http://[::]:8081\n"
"2019-04-15 11:33:20,348 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy]\n"
"[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.387 s - in org.acme.quickstart.NativeGreetingResourceIT\n"
"...\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:330
msgid "By default, Quarkus waits for 60 seconds for the native image to start before automatically failing the native tests. This duration can be changed using the `quarkus.test.wait-time` system property. For example, to increase the duration to 300 seconds, use: `./mvnw verify -Pnative -Dquarkus.test.wait-time=300`."
msgstr "默认情况下，Quarkus会等待60秒的时间来启动原生镜像，然后本地测试自动失败。这个持续时间可以使用 `quarkus.test.wait-time` 系统属性来改变。例如，要增加持续时间到300秒，使用： `./mvnw verify -Pnative -Dquarkus.test.wait-time=300` 。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:336
msgid "In the future, `@NativeImageTest` will be deprecated in favor of `@QuarkusIntegrationTest` which provides a superset of the testing capabilities of `@NativeImageTest`. More information about `@QuarkusIntegrationTest` can be found in the link:getting-started-testing#quarkus-integration-test[Testing Guide]."
msgstr "在未来， `@NativeImageTest` 将被弃用，取而代之的是`@QuarkusIntegrationTest` ，它提供了 `@NativeImageTest` 的测试能力的超集。关于 `@QuarkusIntegrationTest` 的更多信息可以在 link:getting-started-testing#quarkus-integration-test[测试指南]中找到。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:344
msgid "By default, native tests runs using the `prod` profile.  This can be overridden using the `quarkus.test.native-image-profile` property.  For example, in your `application.properties` file, add: `quarkus.test.native-image-profile=test`.  Alternatively, you can run your tests with: `./mvnw verify -Pnative -Dquarkus.test.native-image-profile=test`.  However, don't forget that when the native executable is built the `prod` profile is enabled.  So, the profile you enable this way must be compatible with the produced executable."
msgstr "默认情况下，原生测试使用 `prod` 配置文件运行。这可以用 `quarkus.test.native-image-profile` 属性来覆盖。例如，在你的 `application.properties` 文件中，添加： `quarkus.test.native-image-profile=test` 。或者，你可以用以下方式运行你的测试。 `./mvnw verify -Pnative -Dquarkus.test.native-image-profile=test` 。然而，不要忘记当原生可执行文件被构建时， `prod` 配置文件被启用。因此，你通过这种方式启用的配置文件必须与生成的可执行文件兼容。"

#. type: Title ===
#: upstream/_versions/2.2/guides/building-native-image.adoc:345
#, no-wrap
msgid "Excluding tests when running as a native executable"
msgstr "作为原生可执行文件运行时排除测试"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:350
msgid "When running tests this way, the only things that actually run natively are you application endpoints, which you can only test via HTTP calls. Your test code does not actually run natively, so if you are testing code that does not call your HTTP endpoints, it's probably not a good idea to run them as part of native tests."
msgstr "当以这种方式运行测试时，唯一真正在本地运行的是你的应用程序端点，你只能通过HTTP调用来测试。你的测试代码实际上并不在本地运行，所以如果你测试的代码不调用你的HTTP端点，把它们作为本地测试的一部分运行可能不是一个好主意。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:353
msgid "If you share your test class between JVM and native executions like we advise above, you can mark certain tests with the `@DisabledOnNativeImage` annotation in order to only run them on the JVM."
msgstr "如果你像我们上面建议的那样，在JVM和原生执行之间共享你的测试类，你可以用 `@DisabledOnNativeImage` 注解标记某些测试，以便只在JVM上运行。"

#. type: Title ===
#: upstream/_versions/2.2/guides/building-native-image.adoc:355
#, no-wrap
msgid "Testing an existing native executable"
msgstr "测试一个现有的原生可执行文件"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:360
msgid "It is also possible to re-run the tests against a native executable that has already been built. To do this run `./mvnw test-compile failsafe:integration-test`. This will discover the existing native image and run the tests against it using failsafe."
msgstr "也可以针对已经建立的原生可执行文件重新运行测试。要做到这一点，运行 `./mvnw test-compile failsafe:integration-test` 。这将发现现有的原生镜像，并使用故障安全系统对其运行测试。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:363
msgid "If the process cannot find the native image for some reason, or you want to test a native image that is no longer in the target directory you can specify the executable with the `-Dnative.image.path=` system property."
msgstr "如果进程由于某种原因找不到原生镜像，或者你想测试一个已经不在目标目录中的原生镜像，你可以用 `-Dnative.image.path=` 系统属性指定可执行文件。"

#. type: Title ==
#: upstream/_versions/2.2/guides/building-native-image.adoc:365
#, no-wrap
msgid "Creating a Linux executable without GraalVM installed"
msgstr "在没有安装GraalVM的情况下创建一个Linux可执行文件"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:369
msgid "Before going further, be sure to have a working container runtime (Docker, podman) environment. If you use Docker on Windows you should share your project's drive at Docker Desktop file share settings and restart Docker Desktop."
msgstr "在进一步行动之前，请确保有一个工作的容器运行环境（Docker或podman）。如果你在Windows上使用Docker，你应该在Docker Desktop文件共享设置中共享你的项目的驱动器，并重新启动Docker Desktop。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:373
msgid "Quite often one only needs to create a native Linux executable for their Quarkus application (for example in order to run in a containerized environment) and would like to avoid the trouble of installing the proper GraalVM version in order to accomplish this task (for example, in CI environments it's common practice to install as little software as possible)."
msgstr "很多时候，人们只需要为他们的Quarkus应用程序创建一个原生Linux可执行文件（例如，为了在容器化环境中运行），并希望避免安装适当的GraalVM版本来完成这项麻烦任务（例如，在CI环境中，通常的做法是尽可能少地安装软件）。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:376
msgid "To this end, Quarkus provides a very convenient way of creating a native Linux executable by leveraging a container runtime such as Docker or podman.  The easiest way of accomplishing this task is to execute:"
msgstr "为此，Quarkus提供了一个非常方便的方法，通过利用容器运行时（如Docker或podman）来创建一个原生Linux可执行文件。完成这项任务的最简单方法是执行："

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:380
#, no-wrap
msgid "./mvnw package -Pnative -Dquarkus.native.container-build=true\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:386
msgid "By default Quarkus automatically detects the container runtime.  If you want to explicitely select the container runtime, you can do it with:"
msgstr "在默认情况下，Quarkus会自动检测容器的运行时。如果你想明确地选择容器的运行时，你可以通过以下方式实现："

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:392
#, no-wrap
msgid ""
"# Docker\n"
"./mvnw package -Pnative -Dquarkus.native.container-build=true -Dquarkus.native.container-runtime=docker\n"
"# Podman\n"
"./mvnw package -Pnative -Dquarkus.native.container-build=true -Dquarkus.native.container-runtime=podman\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:396
msgid "These are normal Quarkus config properties, so if you always want to build in a container it is recommended you add these to your `application.properties` in order to avoid specifying them every time."
msgstr "这些是标准的Quarkus配置属性，所以如果你总是想在容器中构建，建议你把这些添加到你的 `application.properties` ，以避免每次都指定它们。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:401
msgid "If you see the following invalid path error for your application JAR when trying to create a native executable using a container build, even though your JAR was built successfully, you're most likely using a remote daemon for your container runtime."
msgstr "如果你在试图使用容器构建创建原生可执行文件时，尽管你的JAR已经成功构建，仍看到应用程序JAR出现以下无效路径错误，您很可能为容器运行时使用了一个远程守护进程。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:404
#, no-wrap
msgid ""
"Error: Invalid Path entry getting-started-1.0.0-SNAPSHOT-runner.jar\n"
"Caused by: java.nio.file.NoSuchFileException: /project/getting-started-1.0.0-SNAPSHOT-runner.jar\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:406
msgid "In this case, use the parameter `-Dquarkus.native.remote-container-build=true` instead of `-Dquarkus.native.container-build=true`."
msgstr "在这种情况下，使用参数 `-Dquarkus.native.remote-container-build=true` ，而不是 `-Dquarkus.native.container-build=true` 。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:408
msgid "The reason for this is that the local build driver invoked through `-Dquarkus.native.container-build=true` uses volume mounts to make the JAR available in the build container, but volume mounts do not work with remote daemons. The remote container build driver copies the necessary files instead of mounting them. Note that even though the remote driver also works with local daemons, the local driver should be preferred in the local case because mounting is usually more performant than copying."
msgstr "原因是通过 `-Dquarkus.native.container-build=true` 调用的本地构建驱动程序使用卷挂载来使 JAR 在构建容器中可用，但卷挂载对远程守护程序不起作用。远程容器构建驱动程序复制必要的文件，而不是挂载它们。请注意，即使远程驱动程序也能与本地守护进程一起工作，但在本地情况下，本地驱动程序应该是首选，因为挂载通常比复制性能更高。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:413
msgid "Building with Mandrel requires a custom builder image parameter to be passed additionally:"
msgstr "使用Mandrel构建需要额外传递一个自定义的构建器镜像参数："

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:416
#, no-wrap
msgid "./mvnw package -Pnative -Dquarkus.native.container-build=true -Dquarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-mandrel:{mandrel-flavor}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:424
msgid "Please note that the above command points to a floating tag.  It is highly recommended to use the floating tag, so that your builder image remains up-to-date and secure.  If you absolutely must, you may hard-code to a specific tag (see https://quay.io/repository/quarkus/ubi-quarkus-mandrel?tab=tags[here] for available tags), but be aware that you won't get security updates that way and it's unsupported."
msgstr "请注意，上述命令指向的是一个浮动标签。我们强烈建议你使用浮动标签，这样你的构建器镜像就能保持最新和安全。如果你一定要硬编码到一个特定的标签（参见 https://quay.io/repository/quarkus/ubi-quarkus-mandrel?tab=tags[这里] 的可用标签），但要注意，你不会得到安全更新，而且这不被支持。"

#. type: Title ==
#: upstream/_versions/2.2/guides/building-native-image.adoc:426
#, no-wrap
msgid "Creating a container"
msgstr "创建一个容器"

#. type: Title ===
#: upstream/_versions/2.2/guides/building-native-image.adoc:428
#, no-wrap
msgid "Using the container-image extensions"
msgstr "使用容器-镜像扩展"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:431
msgid "By far the easiest way to create a container-image from your Quarkus application is to leverage one of the container-image extensions."
msgstr "到目前为止，从你的Quarkus应用程序中创建一个容器镜像的最简单方法是利用容器镜像扩展。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:433
msgid "If one of those extensions is present, then creating a container image for the native executable is essentially a matter of executing a single command:"
msgstr "如果这些扩展之一是存在的，那么为原生可执行文件创建一个容器镜像基本上就是执行一个命令的问题："

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:437
#, no-wrap
msgid "./mvnw package -Pnative -Dquarkus.native.container-build=true -Dquarkus.container-image.build=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:440
msgid "`quarkus.native.container-build=true` allows for creating a Linux executable without GraalVM being installed (and is only necessary if you don't have GraalVM installed locally or your local operating system is not Linux)"
msgstr " `quarkus.native.container-build=true` 允许在不安装GralVM的情况下创建一个Linux可执行文件（只有在你没有安装GralVM或者你的本地操作系统不是Linux的情况下才需要）"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:441
msgid "`quarkus.container-image.build=true` instructs Quarkus to create a container-image using the final application artifact (which is the native executable in this case)"
msgstr "`quarkus.container-image.build=true` 指示Quarkus使用最终的应用程序工件（在本例中是原生可执行文件）创建一个容器镜像"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:443
msgid "See the link:container-image[Container Image guide] for more details."
msgstr "更多细节见 link:container-image[容器镜像指南] 。"

#. type: Title ===
#: upstream/_versions/2.2/guides/building-native-image.adoc:444
#, no-wrap
msgid "Manually"
msgstr "手工"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:448
msgid "You can run the application in a container using the JAR produced by the Quarkus Maven Plugin.  However, in this section we focus on creating a container image using the produced native executable."
msgstr "你可以使用Quarkus Maven插件生成的JAR在容器中运行该应用程序。然而，在本节中我们将重点讨论使用生成的原生可执行文件创建一个容器镜像。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:450
msgid "image:containerization-process.png[Containerization Process]"
msgstr "image:containerization-process.png[容器化过程]"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:454
msgid "When using a local GraalVM installation, the native executable targets your local operating system (Linux, macOS, Windows etc).  However, as a container may not use the same _executable_ format as the one produced by your operating system, we will instruct the Maven build to produce an executable by leveraging a container runtime (as described in <<#container-runtime,this section>>):"
msgstr "使用本地GraalVM安装时，原生可执行文件的目标是您的本地操作系统（Linux、macOS、Windows等）。然而，由于容器可能不使用与操作系统相同的 _executable_ 格式，我们将指示Maven构建通过利用容器运行时（ 如 <<#container-runtime,this section>> 所述）来生成可执行文件："

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:458
msgid "The produced executable will be a 64 bit Linux executable, so depending on your operating system it may no longer be runnable.  However, it's not an issue as we are going to copy it to a container.  The project generation has provided a `Dockerfile.native` in the `src/main/docker` directory with the following content:"
msgstr "产生的可执行文件将是一个64位的Linux可执行文件，所以取决于您的操作系统，它可能不再能够运行。然而，这不是一个问题，因为我们要把它复制到一个容器中。生成的项目在 `src/main/docker` 目录中提供了一个 `Dockerfile.native` ，内容如下："

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:467
#, no-wrap
msgid ""
"FROM registry.access.redhat.com/ubi8/ubi-minimal\n"
"WORKDIR /work/\n"
"COPY target/*-runner /work/application\n"
"RUN chmod 775 /work\n"
"EXPOSE 8080\n"
"CMD [\"./application\", \"-Dquarkus.http.host=0.0.0.0\"]\n"
msgstr ""

#. type: Block title
#: upstream/_versions/2.2/guides/building-native-image.adoc:470
#, no-wrap
msgid "Ubi?"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:475
msgid "The provided `Dockerfiles` use https://access.redhat.com/containers/?tab=overview#/registry.access.redhat.com/ubi8/ubi[UBI] (Universal Base Image) as parent image.  This base image has been tailored to work perfectly in containers.  The `Dockerfiles` use the https://access.redhat.com/containers/#/registry.access.redhat.com/ubi8/ubi-minimal[_minimal_ version] of the base image to reduce the size of the produced image."
msgstr "提供的 `Dockerfiles` 使用 https://access.redhat.com/containers/?tab=overview#/registry.access.redhat.com/ubi8/ubi[UBI]（通用基础镜像）作为父镜像。这个基础镜像经过量身定做，可以在容器中完美工作。 `Dockerfiles` 使用基础镜像的 https://access.redhat.com/containers/#/registry.access.redhat.com/ubi8/ubi-minimal[_minimal_ version]来减小生成镜像的大小。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:477
msgid "You can read more about UBI on:"
msgstr "您可以在以下网站阅读更多关于UBI的信息："

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:479
msgid "https://access.redhat.com/containers/?tab=overview#/registry.access.redhat.com/ubi8/ubi[the UBI image page]"
msgstr "https://access.redhat.com/containers/?tab=overview#/registry.access.redhat.com/ubi8/ubi[UBI镜像页面]"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:480
msgid "https://access.redhat.com/containers/#/registry.access.redhat.com/ubi8/ubi-minimal[the _UBI-minimal_ image page]"
msgstr "https://access.redhat.com/containers/#/registry.access.redhat.com/ubi8/ubi-minimal[ _UBI-minimal_ image 页面]"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:481
msgid "https://access.redhat.com/containers/?tab=tags#/registry.access.redhat.com/ubi8/ubi-minimal[the list of _UBI-minimal_ tags]"
msgstr "https://access.redhat.com/containers/?tab=tags#/registry.access.redhat.com/ubi8/ubi-minimal[ _UBI-minimal_ 标签列表]"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:484
msgid "Then, if you didn't delete the generated native executable, you can build the docker image with:"
msgstr "然后，如果你没有删除生成的原生可执行文件，可以用以下方法构建docker镜像："

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:488
#, no-wrap
msgid "docker build -f src/main/docker/Dockerfile.native -t quarkus-quickstart/getting-started .\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:491
msgid "And finally, run it with:"
msgstr "最后，用以下方式运行："

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:495
#: upstream/_versions/2.2/guides/building-native-image.adoc:590
#, no-wrap
msgid "docker run -i --rm -p 8080:8080 quarkus-quickstart/getting-started\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/building-native-image.adoc:498
#, no-wrap
msgid "Using a multi-stage Docker build"
msgstr "使用多阶段的Docker构建"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:502
msgid "The previous section showed you how to build a native executable using Maven or Gradle, but it requires you to have created the native executable first.  In addition, this native executable must be a Linux 64 bits executable."
msgstr "上一节向你展示了如何使用Maven或Gradle构建原生可执行文件，但这需要你先创建原生可执行文件。此外，这个原生可执行文件必须是Linux 64位可执行文件。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:505
msgid "You may want to build the native executable directly in a container without having a final container containing the build tools.  That approach is possible with a multi-stage Docker build:"
msgstr "你可能想直接在一个容器中构建原生可执行文件，而不需要一个包含构建工具的最终容器。这种方法可以通过多阶段的Docker构建来实现："

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:507
msgid "The first stage builds the native executable using Maven or Gradle"
msgstr "第一阶段使用Maven或Gradle构建原生可执行文件"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:508
msgid "The second stage is a minimal image copying the produced native executable"
msgstr "第二阶段是复制产生了原生可执行文件的最小镜像"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:510
msgid "Such a multi-stage build can be achieved as follows:"
msgstr "这样的多阶段构建可以通过以下方式实现："

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:512
msgid "Sample Dockerfile for building with Maven:"
msgstr "用Maven构建的Docker文件例子："

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:524
#, no-wrap
msgid ""
"## Stage 1 : build with maven builder image with native capabilities\n"
"FROM quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor} AS build\n"
"COPY pom.xml /code/\n"
"COPY mvnw /code/mvnw\n"
"COPY .mvn /code/.mvn\n"
"USER quarkus\n"
"WORKDIR /code\n"
"RUN ./mvnw -B org.apache.maven.plugins:maven-dependency-plugin:3.1.2:go-offline\n"
"COPY src /code/src\n"
"RUN ./mvnw package -Pnative\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:529
#, no-wrap
msgid ""
"## Stage 2 : create the docker final image\n"
"FROM registry.access.redhat.com/ubi8/ubi-minimal:8.4\n"
"WORKDIR /work/\n"
"COPY --from=build /code/target/*-runner /work/application\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:535
#, no-wrap
msgid ""
"# set up permissions for user `1001`\n"
"RUN chmod 775 /work /work/application \\\n"
"  && chown -R 1001 /work \\\n"
"  && chmod -R \"g+rwX\" /work \\\n"
"  && chown -R 1001:root /work\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:538
#, no-wrap
msgid ""
"EXPOSE 8080\n"
"USER 1001\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:540
#: upstream/_versions/2.2/guides/building-native-image.adoc:619
#, no-wrap
msgid "CMD [\"./application\", \"-Dquarkus.http.host=0.0.0.0\"]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:546
msgid "This multi-stage Docker build copies the Maven wrapper from the host machine.  The Maven wrapper (or the Gradle wrapper) is a convenient way to provide a specific version of Maven/Gradle.  It avoids having to create a base image with Maven and Gradle.  To provision the Maven Wrapper in your project, use: `mvn -N io.takari:maven:0.7.7:wrapper`."
msgstr "这种多阶段Docker构建从主机上复制Maven包装器。Maven包装器（或Gradle包装器）是提供特定版本Maven/Gradle的一种便捷方式。它避免了用Maven和Gradle创建一个基础镜像。要在项目中配置Maven包装器，请使用： `mvn -N io.takari:maven:0.7.7:wrapper`。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:548
msgid "Save this file in `src/main/docker/Dockerfile.multistage` as it is not included in the getting started quickstart."
msgstr "将此文件保存在 `src/main/docker/Dockerfile.multistage` ，因为它不包括在开始快速入门中。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:550
msgid "Sample Dockerfile for building with Gradle:"
msgstr "用Gradle构建的Docker文件例子："

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:563
#, no-wrap
msgid ""
"## Stage 1 : build with maven builder image with native capabilities\n"
"FROM quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor} AS build\n"
"COPY gradlew /code/gradlew\n"
"COPY gradle /code/gradle\n"
"COPY build.gradle /code/\n"
"COPY settings.gradle /code/\n"
"COPY gradle.properties /code/\n"
"USER quarkus\n"
"WORKDIR /code\n"
"COPY src /code/src\n"
"RUN gradle -b /code/build.gradle buildNative\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:571
#, no-wrap
msgid ""
"## Stage 2 : create the docker final image\n"
"FROM registry.access.redhat.com/ubi8/ubi-minimal\n"
"WORKDIR /work/\n"
"COPY --from=build /code/build/*-runner /work/application\n"
"RUN chmod 775 /work\n"
"EXPOSE 8080\n"
"CMD [\"./application\", \"-Dquarkus.http.host=0.0.0.0\"]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:574
msgid "If you are using Gradle in your project, you can use this sample Dockerfile.  Save it in `src/main/docker/Dockerfile.multistage`."
msgstr "如果在项目中使用Gradle，你可以使用这个Docker文件例子。将其保存在 `src/main/docker/Dockerfile.multistage` 。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:578
msgid "Before launching our Docker build, we need to update the default `.dockerignore` file as it filters everything except the `target` directory. As we plan to build inside a container, we need to copy the `src` directory. Thus, edit your `.dockerignore` and update the content."
msgstr "在启动我们的Docker构建之前，我们需要更新默认的 `.dockerignore` 文件，因为它过滤了除 `target` 目录之外的所有内容。由于我们计划在容器内构建，我们需要复制 `src` 目录。因此，编辑你的 `.dockerignore` ，并更新内容。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:583
#, no-wrap
msgid "docker build -f src/main/docker/Dockerfile.multistage -t quarkus-quickstart/getting-started .\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:586
msgid "And, finally, run it with:"
msgstr "最后，用以下方式运行："

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:595
msgid "If you need SSL support in your native executable, you can easily include the necessary libraries in your Docker image."
msgstr "如果你的原生可执行文件需要SSL支持，你可以轻松地在Docker镜像中包含必要的库。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:597
msgid "Please see link:native-and-ssl#working-with-containers[our Using SSL With Native Executables guide] for more information."
msgstr "更多信息请参见 link:native-and-ssl#working-with-containers[我们的使用SSL与原生可执行文件指南] 。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:601
msgid "To use Mandrel instead of GraalVM CE, update the `FROM` clause to: `FROM quay.io/quarkus/ubi-quarkus-mandrel:$TAG AS build`.  `$TAG` can be found on the https://quay.io/repository/quarkus/ubi-quarkus-mandrel?tab=tags[Quarkus Mandrel Images Tags page]."
msgstr "要使用Mandrel而不是GraalVM CE，请将 `FROM` 子句更新为: `FROM quay.io/quarkus/ubi-quarkus-mandrel:$TAG AS build` 。 `$TAG` 可以在 https://quay.io/repository/quarkus/ubi-quarkus-mandrel?tab=tags[Quarkus Mandrel镜像标签页]上找到。"

#. type: Title ===
#: upstream/_versions/2.2/guides/building-native-image.adoc:602
#, no-wrap
msgid "Using a distroless base image"
msgstr "使用无发行版基础镜像"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:606
msgid "If you are looking for small container images, the https://github.com/GoogleContainerTools/distroless[distroless] approach reduces the size of the base layer.  The idea behind _distroless_ is the usage of a single and minimal base image containing all the requirements, and sometimes even the application itself."
msgstr "如果你正在寻找小型的容器镜像，https://github.com/GoogleContainerTools/distroless[无发行] 的方法可以减少基础层的大小。 _distroless_ 背后的想法是使用一个单一和最小的基础镜像包含所有的需求，有时甚至是应用程序本身。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:609
msgid "Quarkus provides a distroless base image that you can use in your `Dockerfile`.  You only need to copy your application, and you are done:"
msgstr "Quarkus提供了一个无发行版的基础镜像，可以用于你的 `Dockerfile` 。你只需要复制你的应用程序，就可以了："

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:614
#, no-wrap
msgid ""
"FROM quay.io/quarkus/quarkus-distroless-image:1.0\n"
"COPY target/*-runner /application\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:617
#, no-wrap
msgid ""
"EXPOSE 8080\n"
"USER nonroot\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:622
msgid "Projects generated with https://code.quarkus.io already have this Dockerfile in the `src/main/docker` directory."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:626
msgid "Quarkus provides the `quay.io/quarkus/quarkus-distroless-image:1.0` image.  It contains the required packages to run a native executable and is only **9Mb**.  Just add your application on top of this image, and you will get a tiny container image."
msgstr "Quarkus提供了 `quay.io/quarkus/quarkus-distroless-image:1.0` 镜像。它包含了运行原生可执行文件所需的软件包，并且只有 *9Mb* 。只要在这个镜像上添加你的应用程序，你就会得到一个很小的容器镜像。"

#. type: Title ===
#: upstream/_versions/2.2/guides/building-native-image.adoc:627
#, no-wrap
msgid "Separating Java and native image compilation"
msgstr "Java和原生镜像分开编译"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:633
msgid "In certain circumstances, you may want to build the native image in a separate step.  For example, in a CI/CD pipeline, you may want to have one step to generate the source that will be used for the native image generation and another step to use these sources to actually build the native executable.  For this use case, you can set the `quarkus.package.type=native-sources`.  This will execute the java compilation as if you would have started native compilation (`-Pnative`), but stops before triggering the actual call to GraalVM's `native-image`."
msgstr "在某些情况下，你可能想在一个单独的步骤中构建本地镜像。例如，在CI/CD管道中，你可能希望有一个步骤来生成用于原生镜像的源，另一个步骤是使用这些源来实际构建原生可执行文件。对于这种用例，你可以设置 `quarkus.package.type=native-sources` 。这将执行java编译，就像你已经开始原生编译一样（ `-Pnative` ），但在触发对GraalVM的 `native-image` 的实际调用之前停止。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:637
#, no-wrap
msgid "$ ./mvnw clean package -Dquarkus.package.type=native-sources\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:640
msgid "After compilation has finished, you find the build artifact in `target/native-sources`:"
msgstr "编译完成后，你可以在 `target/native-sources` 找到构建工件："

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:646
#, no-wrap
msgid ""
"$ cd target/native-sources\n"
"$ ls\n"
"native-image.args  getting-started-1.0.0-SNAPSHOT-runner.jar lib\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:651
msgid "From the output above one can see that, in addition to the produced jar file and the associated lib directory, a text file named `native-image.args` was created.  This file holds all parameters (including the name of the JAR to compile) to pass along to GraalVM's `native-image` command.  If you have GraalVM installed, you can start the native compilation by executing:"
msgstr "从上面的输出可以看出，除了生成的jar文件和相关的lib目录外，还创建了一个名为 `native-image.args` 的文本文件。这个文件包含了所有的参数（包括要编译的JAR的名字），以及传递给GraalVM的 `native-image` 命令。如果你已经安装了GraalVM，你可以通过执行以下命令开始本地编译："

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:662
#, no-wrap
msgid ""
"$ cd target/native-source\n"
"$ native-image $(cat native-image.args)\n"
"...\n"
"$ ls\n"
"native-image.args\n"
"getting-started-1.0.0-SNAPSHOT-runner\n"
"getting-started-1.0.0-SNAPSHOT-runner.build_artifacts.txt\n"
"getting-started-1.0.0-SNAPSHOT-runner.jar\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:665
msgid "The process for Gradle is analogous."
msgstr "Gradle的过程是类似的。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:667
msgid "Running the build process in a container is also possible:"
msgstr "在一个容器中运行构建过程也是可能的："

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:679
#, no-wrap
msgid ""
"cd target/native-image\n"
"docker run \\\n"
"  -it \\\n"
"  --rm \\\n"
"  --v $(pwd):/work <1>\n"
"  -w /work <2>\n"
"  --entrypoint bin/sh \\\n"
"  quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor} \\ <3>\n"
"  -c \"native-image $(cat native-image.args) -J-Xmx4g\" <4>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:682
msgid "Mount the host's directory `target/native-image` to the container's `/work`. Thus, the generated binary will also be written to this directory."
msgstr "将主机的目录 `target/native-image` 挂载到容器的 `/work` 。因此，生成的二进制文件也将被写入这个目录。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:683
msgid "Switch the working directory to `/work`, which we have mounted in <1>."
msgstr "将工作目录切换到 `/work` ，我们已经在<1>中挂载了这个目录。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:684
msgid "Use the `quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor}` docker image introduced in <<#multistage-docker,Using a multi-stage Docker build>> to build the native image."
msgstr "使用 <<#multistage-docker,Using a multi-stage Docker build>> 中介绍的 `quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor}` docker镜像来构建原生镜像。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:685
msgid "Call `native-image` with the content of file `native-image.args` as arguments. We also supply an additional argument to limit the process's maximum memory to 4 Gigabytes (this may vary depending on the project being built and the machine building it)."
msgstr "以文件 `native-image.args` 的内容为参数调用 `native-image` 。我们还提供了一个额外的参数，将进程的最大内存限制在4G字节（这可能取决于正在构建的项目和构建它的机器）。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:690
msgid "If you are running on a Windows machine, please keep in mind that the binary was created within a Linux docker container.  Hence, the binary will not be executable on the host Windows machine."
msgstr "如果你是在Windows机器上运行，请记住，二进制文件是在Linux docker容器中创建的。因此，二进制文件在Windows主机上是无法执行的。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:693
msgid "A high level overview of what the various steps of a CI/CD pipeline would look is the following:"
msgstr "以下是对CI/CD管道的各个步骤的高度概述："

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:695
msgid "Register the output of the step executing `./mvnw ...` command (i.e. directory `target/native-image`) as a build artifact,"
msgstr "将执行 `./mvnw …​` 命令的步骤的输出（即目录 `target/native-image` ）注册为构建工件，"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:696
msgid "Require this artifact in the step executing the `native-image ...` command, and"
msgstr "在执行 `native-image …​` 命令的步骤中需要这个工件，并且"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:697
msgid "Register the output of the step executing the `native-image ...` command (i.e. files matching `target/*runner`) as build artifact."
msgstr "将执行 `native-image …​` 命令的步骤的输出（即匹配 `target/*runner` 的文件）注册为构建工件。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:699
msgid "The environment executing step `1` only needs Java and Maven (or Gradle) installed, while the environment executing step `3` only needs a GraalVM installation (including the `native-image` feature)."
msgstr "执行步骤 `1` 的环境只需要安装Java和Maven（或Gradle），而执行步骤 `3` 的环境只需要安装GralVM（包括 `native-image` 功能）。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:701
msgid "Depending on what the final desired output of the CI/CD pipeline is, the generated binary might then be used to create a container image."
msgstr "根据CI/CD管道的最终期望输出，生成的二进制文件可能被用来创建一个容器镜像。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:708
msgid "Starting with Oracle GraalVM 20.2 or Mandrel 20.1, debug symbols for native executables can be generated for Linux environments (Windows support is still under development).  These symbols can be used to debug native executables with tools such as `gdb`."
msgstr "从Oracle GraalVM 20.2或Mandrel 20.1开始，可以为Linux环境生成本地可执行文件的调试符号（Windows支持仍在开发中）。这些符号可用于用工具调试本地可执行文件，如 `gdb` 。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:712
msgid "To generate debug symbols, add `-Dquarkus.native.debug.enabled=true` flag when generating the native executable.  You will find the debug symbols for the native executable in a `.debug` file next to the native executable."
msgstr "要生成调试符号，在生成原生可执行文件时添加 `-Dquarkus.native.debug.enabled=true` 标志。你将在原生可执行文件旁边的 `.debug` 文件中找到原生可执行文件的调试符号。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:717
msgid "The generation of the `.debug` file depends on `objcopy`.  On common Linux distributions and macOS you will need to install the `binutils` package:"
msgstr "`.debug` 文件的生成取决于 `objcopy` 。在常见的Linux发行版和macOS上，你将需要安装 `binutils` 包："

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:727
#, no-wrap
msgid ""
"# dnf (rpm-based)\n"
"sudo dnf install binutils\n"
"# Debian-based distributions\n"
"sudo apt-get install binutils\n"
"# macOS\n"
"brew install binutils\n"
"export PATH=/usr/local/opt/binutils/bin:$PATH\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:730
msgid "When `objcopy` is not available debug symbols are embedded in the executable."
msgstr "当被嵌入到可执行文件中的 `objcopy` 调试符号不可用时。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:738
msgid "Aside from debug symbols, setting `-Dquarkus.native.debug.enabled=true` flag generates a cache of source files for any JDK runtime classes, GraalVM classes and application classes resolved during native executable generation.  This source cache is useful for native debugging tools, to establish the link between the symbols and matching source code.  It provides a convenient way of making just the necessary sources available to the debugger/IDE when debugging a native executable."
msgstr "除了调试符号外，设置 `-Dquarkus.native.debug.enabled=true` 标志会生成一个源文件缓存，用于生成原生可执行文件时解决的任何JDK运行时类、GraalVM类和应用程序类。这个源码缓存对原生调试工具很有用，可以在符号和匹配的源代码之间建立联系。在调试本原生执行文件时，它提供了一种方便的方法，使调试器/IDE仅能获得必要的源文件。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:744
msgid "Sources for third party jar dependencies, including Quarkus source code, are not added to the source cache by default.  To include those, make sure you invoke `mvn dependency:sources` first.  This step is required in order to pull the sources for these dependencies, and get them included in the source cache."
msgstr "第三方jar依赖的源，包括Quarkus源代码，默认情况下不会被添加到源缓存中。要包括这些，请确保你先调用 `mvn dependency:sources` 。这一步是必须的，以便拉出这些依赖的源代码，并将其包含在源代码缓存中。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:746
msgid "The source cache is located in the `target/sources` folder."
msgstr "源缓存位于 `target/sources` 文件夹中。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:750
msgid "If running `gdb` from a different directory than `target`, then the sources can be loaded by running:"
msgstr "如果从与 `target` 不同的目录下运行 `gdb` ，那么可以通过运行源代码加载："

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:754
#, no-wrap
msgid "directory path/to/target\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:757
msgid "in the `gdb` prompt."
msgstr "在 `gdb` 提示中。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:759
msgid "Or start `gdb` with:"
msgstr "或这样运行 `gdb` 命令："

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:763
#, no-wrap
msgid "gdb -ex 'directory path/to/target' path/to/target/{project.name}-{project.version}-runner\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:766
msgid "e.g.,"
msgstr "比如："

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:769
#, no-wrap
msgid "gdb -ex 'directory ./target' ./target/getting-started-1.0.0-SNAPSHOT-runner\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/building-native-image.adoc:773
#, no-wrap
msgid "Configuring the Native Executable"
msgstr "配置原生可执行文件"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:777
msgid "There are a lot of different configuration options that can affect how the native executable is generated.  These are provided in `application.properties` the same as any other config property."
msgstr "有很多不同的配置选项可以影响原生可执行文件的生成方式。这些都是在 `application.properties` ，与其他配置属性相同。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:779
msgid "The properties are shown below:"
msgstr "这些属性显示如下："

#. type: Title ==
#: upstream/_versions/2.2/guides/building-native-image.adoc:782
#, no-wrap
msgid "What's next?"
msgstr "下一步做什么？"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:787
msgid "This guide covered the creation of a native (binary) executable for your application.  It provides an application exhibiting a swift startup time and consuming less memory.  However, there is much more."
msgstr "本指南介绍了如何为应用程序创建原生(二进制)可执行文件。它提供了一个具备快速启动时间和消耗更少内存的应用程序。然而，还有更多。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:788
msgid "We recommend continuing the journey with the link:deploying-to-kubernetes[deployment to Kubernetes and OpenShift]."
msgstr "我们建议继续阅读 link:deploying-to-kubernetes[部署到Kubernetes和OpenShift]。"
