# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/spring-di.adoc:6
#, no-wrap
msgid "Quarkus Extension for Spring DI API"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:11
msgid "While users are encouraged to use CDI annotations for injection, Quarkus provides a compatibility layer for Spring dependency injection in the form of the `spring-di` extension."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:13
msgid "This guide explains how a Quarkus application can leverage the well known Dependency Injection annotations included in the Spring Framework."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/spring-di.adoc:14
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:17
msgid "To complete this guide, you need:"
msgstr "要完成这个指南，你需要："

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:19
msgid "less than 15 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:20
msgid "an IDE"
msgstr "一个编辑器"

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:21
msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
msgstr "安装JDK 11以上版本并正确配置了 `JAVA_HOME`"

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:22
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Title ==
#: upstream/_versions/2.2/guides/spring-di.adoc:24
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:28
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:30
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:32
msgid "The solution is located in the `spring-di-quickstart` {quickstarts-tree-url}/spring-di-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/spring-di.adoc:33
#, no-wrap
msgid "Creating the Maven project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:36
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:46
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=spring-di-quickstart \\\n"
"    -DclassName=\"org.acme.spring.di.GreeterResource\" \\\n"
"    -Dpath=\"/greeting\" \\\n"
"    -Dextensions=\"resteasy,spring-di\"\n"
"cd spring-di-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:49
msgid "This command generates a Maven project with a REST endpoint and imports the `spring-di` extension."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:52
msgid "If you already have your Quarkus project configured, you can add the `spring-di` extension to your project by running the following command in your project base directory:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:56
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"spring-di\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:59
msgid "This will add the following to your `pom.xml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:66
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-spring-di</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/spring-di.adoc:68
#, no-wrap
msgid "Add beans using Spring annotations"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:71
msgid "Let's proceed to create some beans using various Spring annotations."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:74
msgid "First we will create a `StringFunction` interface that some of our beans will implement and which will be injected into another bean later on.  Create a `src/main/java/org/acme/spring/di/StringFunction.java` file and set the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:78
#: upstream/_versions/2.2/guides/spring-di.adoc:93
#: upstream/_versions/2.2/guides/spring-di.adoc:116
#: upstream/_versions/2.2/guides/spring-di.adoc:144
#: upstream/_versions/2.2/guides/spring-di.adoc:166
#: upstream/_versions/2.2/guides/spring-di.adoc:210
#, no-wrap
msgid "package org.acme.spring.di;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:80
#, no-wrap
msgid "import java.util.function.Function;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:82
#, no-wrap
msgid "public interface StringFunction extends Function<String, String> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:84
#: upstream/_versions/2.2/guides/spring-di.adoc:259
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:89
msgid "With the interface in place, we will add an `AppConfiguration` class which will use the Spring's Java Config style for defining a bean.  It will be used to create a `StringFunction` bean that will capitalize the text passed as parameter.  Create a `src/main/java/org/acme/spring/di/AppConfiguration.java` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:96
#, no-wrap
msgid ""
"import org.springframework.context.annotation.Bean;\n"
"import org.springframework.context.annotation.Configuration;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:99
#, no-wrap
msgid ""
"@Configuration\n"
"public class AppConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:105
#, no-wrap
msgid ""
"    @Bean(name = \"capitalizeFunction\")\n"
"    public StringFunction capitalizer() {\n"
"        return String::toUpperCase;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:108
msgid "As a Spring developer, you might be tempted to add the `@ComponentScan` annotation in order to define specific packages to scan for additional beans. Do note that `@ComponentScan` is entirely unnecessary since Quarkus performs link:cdi-reference#bean_discovery[bean discovery] only in `annotated` mode with no visibility boundaries. Moreover, note that the bean discovery in Quarkus happens at build time.  In the same vein, Quarkus does not support the Spring `@Import` annotation."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:112
msgid "Now we define another bean that will implement `StringFunction` using Spring's stereotype annotation style.  This bean will effectively be a no-op bean that simply returns the input as is.  Create a `src/main/java/org/acme/spring/di/NoOpSingleStringFunction.java` file and set the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:118
#, no-wrap
msgid "import org.springframework.stereotype.Component;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:121
#, no-wrap
msgid ""
"@Component(\"noopFunction\")\n"
"public class NoOpSingleStringFunction implements StringFunction {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:127
#, no-wrap
msgid ""
"    @Override\n"
"    public String apply(String s) {\n"
"        return s;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:131
msgid "Quarkus also provides support for injecting configuration values using Spring's `@Value` annotation.  To see that in action, first edit the `src/main/resources/application.properties` with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:136
#, no-wrap
msgid ""
"# Your configuration properties\n"
"greeting.message = hello\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:139
msgid "Next create a new Spring bean in `src/main/java/org/acme/spring/di/MessageProducer.java` with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:147
#, no-wrap
msgid ""
"import org.springframework.beans.factory.annotation.Value;\n"
"import org.springframework.stereotype.Service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:150
#, no-wrap
msgid ""
"@Service\n"
"public class MessageProducer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:153
#, no-wrap
msgid ""
"    @Value(\"${greeting.message}\")\n"
"    String message;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:158
#, no-wrap
msgid ""
"    public String getPrefix() {\n"
"        return message;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:162
msgid "The final bean we will create ties together all the previous beans.  Create a `src/main/java/org/acme/spring/di/GreeterBean.java` file and copy the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:171
#, no-wrap
msgid ""
"import org.springframework.beans.factory.annotation.Autowired;\n"
"import org.springframework.beans.factory.annotation.Qualifier;\n"
"import org.springframework.beans.factory.annotation.Value;\n"
"import org.springframework.stereotype.Component;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:174
#, no-wrap
msgid ""
"@Component\n"
"public class GreeterBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:176
#, no-wrap
msgid "    private final MessageProducer messageProducer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:180
#, no-wrap
msgid ""
"    @Autowired\n"
"    @Qualifier(\"noopFunction\")\n"
"    StringFunction noopStringFunction;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:184
#, no-wrap
msgid ""
"    @Autowired\n"
"    @Qualifier(\"capitalizeFunction\")\n"
"    StringFunction capitalizerStringFunction;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:187
#, no-wrap
msgid ""
"    @Value(\"${greeting.suffix:!}\")\n"
"    String suffix;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:191
#, no-wrap
msgid ""
"    public GreeterBean(MessageProducer messageProducer) {\n"
"        this.messageProducer = messageProducer;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:197
#, no-wrap
msgid ""
"    public String greet(String name) {\n"
"        final String initialValue = messageProducer.getPrefix() + \" \" + name + suffix;\n"
"        return noopStringFunction.andThen(capitalizerStringFunction).apply(initialValue);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:201
msgid "In the code above, we see that both field injection and constructor injection are being used (note that constructor injection does not need the `@Autowired` annotation since there is a single constructor).  Furthermore, the `@Value` annotation on `suffix` has also a default value defined, which in this case will be used since we have not defined `greeting.suffix` in `application.properties`."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/spring-di.adoc:203
#, no-wrap
msgid "Update the JAX-RS resource"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:206
msgid "Open the `src/main/java/org/acme/spring/di/GreeterResource.java` file and update it with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:212
#, no-wrap
msgid "import org.springframework.beans.factory.annotation.Autowired;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:217
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:220
#, no-wrap
msgid ""
"@Path(\"/greeting\")\n"
"public class GreeterResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:223
#, no-wrap
msgid ""
"    @Autowired\n"
"    GreeterBean greeterBean;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:230
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return greeterBean.greet(\"world\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/spring-di.adoc:232
#, no-wrap
msgid "Update the test"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:236
msgid "We also need to update the functional test to reflect the changes made to the endpoint.  Edit the `src/test/java/org/acme/spring/di/GreetingResourceTest.java` file and change the content of the `testHelloEndpoint` method to:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:242
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:245
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:248
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class GreetingResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:257
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHelloEndpoint() {\n"
"        given()\n"
"            .when().get(\"/greeting\")\n"
"            .then()\n"
"                .statusCode(200)\n"
"                .body(is(\"HELLO WORLD!\"));\n"
"    }\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/spring-di.adoc:261
#, no-wrap
msgid "Package and run the application"
msgstr "打包并运行该应用程序"

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:265
msgid "Run the application with: `./mvnw compile quarkus:dev`.  Open your browser to http://localhost:8080/greeting."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:267
msgid "The result should be: `HELLO WORLD!`."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/spring-di.adoc:268
#, no-wrap
msgid "Run the application as a native"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:271
msgid "You can of course create a native image using instructions similar to link:building-native-image[this] guide."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/spring-di.adoc:272
#, no-wrap
msgid "Important Technical Note"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:280
msgid "Please note that the Spring support in Quarkus does not start a Spring Application Context nor are any Spring infrastructure classes run.  Spring classes and annotations are only used for reading metadata and / or are used as user code method return types or parameter types.  What that means for end users, is that adding arbitrary Spring libraries will not have any effect. Moreover Spring infrastructure classes (like `org.springframework.beans.factory.config.BeanPostProcessor` , `org.springframework.context.ApplicationContext` for example) will not be executed.  Regarding the dependency injection in particular, Quarkus uses a Dependency Injection mechanism (called ArC) based on the https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0] specification. If you want to learn more about it we recommend you to read the link:cdi[Quarkus introduction to CDI] and the link:cdi-reference#arc-configuration-reference[CDI reference guide] The various Spring Boot test features are not supported by Quarkus. For testing purposes, please, check the link:getting-started-testing[Quarkus testing guide]."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/spring-di.adoc:281
#, no-wrap
msgid "Conversion Table"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:284
msgid "The following table shows how Spring DI annotations can be converted to CDI and / or MicroProfile annotations."
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:286
#, no-wrap
msgid "Spring"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:286
#, no-wrap
msgid "CDI / MicroProfile"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:288
#, no-wrap
msgid "Comments"
msgstr "备注"

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:289
#, no-wrap
msgid "@Autowired"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:290
#, no-wrap
msgid "@Inject"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:293
#, no-wrap
msgid "@Qualifier"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:294
#, no-wrap
msgid "@Named"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:297
#, no-wrap
msgid "@Value"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:298
#, no-wrap
msgid "@ConfigProperty"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:300
#, no-wrap
msgid "@ConfigProperty doesn't support an expression language the way @Value does, but makes the typical use cases much easier to handle"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:301
#, no-wrap
msgid "@Component"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:302
#: upstream/_versions/2.2/guides/spring-di.adoc:306
#: upstream/_versions/2.2/guides/spring-di.adoc:310
#, no-wrap
msgid "@Singleton"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:304
#: upstream/_versions/2.2/guides/spring-di.adoc:308
#: upstream/_versions/2.2/guides/spring-di.adoc:312
#, no-wrap
msgid "By default Spring stereotype annotations are singleton beans"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:305
#, no-wrap
msgid "@Service"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:309
#, no-wrap
msgid "@Repository"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:313
#, no-wrap
msgid "@Configuration"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:314
#, no-wrap
msgid "@ApplicationScoped"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:316
#, no-wrap
msgid "In CDI a producer bean isn't limited to the application scope, it could just as well be @Singleton or @Dependent"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:317
#, no-wrap
msgid "@Bean"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:318
#, no-wrap
msgid "@Produces"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:321
#, no-wrap
msgid "@Scope"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:324
#, no-wrap
msgid "Doesn't have a one-to-one mapping to a CDI annotation. Depending on the value of @Scope, one of the @Singleton, @ApplicationScoped, @SessionScoped, @RequestScoped, @Dependent could be used"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:325
#, no-wrap
msgid "@ComponentScan"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:328
#, no-wrap
msgid "Doesn't have a one-to-one mapping to a CDI annotation. It is not used in Quarkus because Quarkus does all classpath scanning at build time."
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:329
#, no-wrap
msgid "@Import"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:331
#, no-wrap
msgid "Doesn't have a one-to-one mapping to a CDI annotation."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/spring-di.adoc:333
#, no-wrap
msgid "More Spring guides"
msgstr "更多 Spring 指南"

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:336
msgid "Quarkus has more Spring compatibility features. See the following guides for more details:"
msgstr "Quarkus拥有更多的Spring兼容特性。获取更多细节请参阅以下指南:"

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:338
msgid "link:spring-web[Quarkus - Extension for Spring Web]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:339
msgid "link:spring-data-jpa[Quarkus - Extension for Spring Data JPA]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:340
msgid "link:spring-data-rest[Quarkus - Extension for Spring Data REST]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:341
msgid "link:spring-security[Quarkus - Extension for Spring Security]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:342
msgid "link:spring-cloud-config-client[Quarkus - Reading properties from Spring Cloud Config Server]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:343
msgid "link:spring-boot-properties[Quarkus - Extension for Spring Boot properties]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:344
msgid "link:spring-cache[Quarkus - Extension for Spring Cache]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:344
msgid "link:spring-scheduled[Quarkus - Extension for Spring Scheduled]"
msgstr ""
