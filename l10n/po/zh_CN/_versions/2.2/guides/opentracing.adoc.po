# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/opentracing.adoc:6
#, no-wrap
msgid "Using OpenTracing"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:12
msgid "This guide explains how your Quarkus application can utilize OpenTracing to provide distributed tracing for interactive web applications."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/opentracing.adoc:13
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:16
msgid "To complete this guide, you need:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:18
msgid "less than 15 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:19
msgid "an IDE"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:20
msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:21
msgid "Apache Maven {maven-version}"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:22
msgid "Docker"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/opentracing.adoc:25
#, no-wrap
msgid "Architecture"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:28
msgid "In this guide, we create a straightforward REST application to demonstrate distributed tracing."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/opentracing.adoc:29
#, no-wrap
msgid "Solution"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:33
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can skip right to the completed example."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:35
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:37
msgid "The solution is located in the `opentracing-quickstart` {quickstarts-tree-url}/opentracing-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/opentracing.adoc:38
#, no-wrap
msgid "Creating the Maven project"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:41
msgid "First, we need a new project. Create a new project with the following command:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/opentracing.adoc:51
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=opentracing-quickstart \\\n"
"    -DclassName=\"org.acme.opentracing.TracedResource\" \\\n"
"    -Dpath=\"/hello\" \\\n"
"    -Dextensions=\"resteasy,quarkus-smallrye-opentracing\"\n"
"cd opentracing-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:55
msgid "This command generates the Maven project with a REST endpoint and imports the `smallrye-opentracing` extension, which includes the OpenTracing support and the default https://www.jaegertracing.io/[Jaeger] tracer."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:58
msgid "If you already have your Quarkus project configured, you can add the `smallrye-opentracing` extension to your project by running the following command in your project base directory:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/opentracing.adoc:62
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"smallrye-opentracing\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:65
msgid "This will add the following to your `pom.xml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/opentracing.adoc:72
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-opentracing</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/opentracing.adoc:74
#, no-wrap
msgid "Examine the JAX-RS resource"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:77
msgid "Open the `src/main/java/org/acme/opentracing/TracedResource.java` file and see the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/opentracing.adoc:81
#, no-wrap
msgid "package org.acme.opentracing;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/opentracing.adoc:87
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/opentracing.adoc:90
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class TracedResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/opentracing.adoc:92
#, no-wrap
msgid "    private static final Logger LOG = Logger.getLogger(TracedResource.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/opentracing.adoc:100
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        LOG.info(\"hello\"); // <1>\n"
"        return \"hello\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:103
msgid "The log event carries OpenTracing information as well. In order to print OpenTracing information to the console output, the console log handler with the required OpenTracing event's keys needs to be defined in the `application.properties` file."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:108
msgid "Notice that there is no tracing specific code included in the application. By default, requests sent to this endpoint will be traced without any code changes being required. It is also possible to enhance the tracing information.  This can be achieved by https://github.com/smallrye/smallrye-opentracing/[SmallRye OpenTracing] an implementation of https://github.com/eclipse/microprofile-opentracing/[MicroProfile OpenTracing]."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/opentracing.adoc:109
#, no-wrap
msgid "Create the configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:112
msgid "There are two ways to configure the Jaeger tracer within the application."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:114
msgid "The first approach is by providing the properties within the `src/main/resources/application.properties` file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/opentracing.adoc:121
#, no-wrap
msgid ""
"quarkus.jaeger.service-name=myservice // <1>\n"
"quarkus.jaeger.sampler-type=const // <2>\n"
"quarkus.jaeger.sampler-param=1 // <3>\n"
"quarkus.log.console.format=%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n // <4>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:124
msgid "If the `quarkus.jaeger.service-name` property (or `JAEGER_SERVICE_NAME` environment variable) is not provided then a \"no-op\" tracer will be configured, resulting in no tracing data being reported to the backend."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:125
msgid "Setup a sampler, that uses a constant sampling strategy."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:126
msgid "Sample all requests. Set sampler-param to somewhere between 0 and 1, e.g. 0.50, if you do not wish to sample all requests."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:127
msgid "Add trace IDs into log message."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:129
msgid "The second approach is to supply the properties as https://www.jaegertracing.io/docs/latest/client-features/[environment variables]. These can be specified as `jvm.args` as shown in the following section."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/opentracing.adoc:130
#, no-wrap
msgid "Run the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:133
msgid "The first step is to start the tracing system to collect and display the captured traces:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/opentracing.adoc:137
#, no-wrap
msgid "docker run -p 5775:5775/udp -p 6831:6831/udp -p 6832:6832/udp -p 5778:5778 -p 16686:16686 -p 14268:14268 jaegertracing/all-in-one:latest\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:140
msgid "Now we are ready to run our application. If using `application.properties` to configure the tracer:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/opentracing.adoc:144
#, no-wrap
msgid "./mvnw compile quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:147
msgid "or if configuring the tracer via environment variables:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/opentracing.adoc:151
#, no-wrap
msgid "./mvnw compile quarkus:dev -Djvm.args=\"-DJAEGER_SERVICE_NAME=myservice -DJAEGER_SAMPLER_TYPE=const -DJAEGER_SAMPLER_PARAM=1\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:154
msgid "Once both the application and tracing system are started, you can make a request to the provided endpoint:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/opentracing.adoc:159
#, no-wrap
msgid ""
"$ curl http://localhost:8080/hello\n"
"hello\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:161
msgid "When the first request has been submitted, the Jaeger tracer within the app will be initialized:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/opentracing.adoc:166
#, no-wrap
msgid ""
"2019-10-16 09:35:23,464 INFO  [io.jae.Configuration] (executor-thread-1) Initialized tracer=JaegerTracer(version=Java-0.34.0, serviceName=myservice, reporter=RemoteReporter(sender=UdpSender(), closeEnqueueTimeout=1000), sampler=ConstSampler(decision=true, tags={sampler.type=const, sampler.param=true}), tags={hostname=localhost.localdomain, jaeger.version=Java-0.34.0, ip=127.0.0.1}, zipkinSharedRpcSpan=false, expandExceptionLogs=false, useTraceId128Bit=false)\n"
"13:20:11 INFO  traceId=1336b2b0a76a96a3, parentId=0, spanId=1336b2b0a76a96a3, sampled=true [or.ac.qu.TracedResource] (executor-thread-63) hello\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:169
msgid "Then visit the http://localhost:16686[Jaeger UI] to see the tracing information."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:171
msgid "Hit `CTRL+C` to stop the application."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/opentracing.adoc:172
#, no-wrap
msgid "Tracing additional methods"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:176
msgid "REST endpoints are automatically traced.  If you need to trace additional methods, you can add the `org.eclipse.microprofile.opentracing.Traced` annotation to CDI bean classes or their non-private methods."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:178
msgid "This can be useful to trace incoming requests from non-REST calls (like request coming from a message) or to create spans inside a trace."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:180
msgid "Here is an example of a `FrancophoneService` which methods are traced."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/opentracing.adoc:184
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/opentracing.adoc:186
#, no-wrap
msgid "import org.eclipse.microprofile.opentracing.Traced;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/opentracing.adoc:190
#, no-wrap
msgid ""
"@Traced\n"
"@ApplicationScoped\n"
"public class FrancophoneService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/opentracing.adoc:195
#, no-wrap
msgid ""
"    public String bonjour() {\n"
"        return \"bonjour\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:198
msgid "The best way to add OpenTracing capability to reactive messaging based applications is by adding the `Traced` annotation to all incoming methods."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/opentracing.adoc:199
#, no-wrap
msgid "Additional instrumentation"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:202
msgid "The https://github.com/opentracing-contrib[OpenTracing API Contributions project] offers additional instrumentation that can be used to add tracing to a large variety of technologies/components."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:204
msgid "The instrumentation documented in this section has been tested with Quarkus and works in both standard and native mode."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/opentracing.adoc:205
#, no-wrap
msgid "JDBC"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:208
msgid "The https://github.com/opentracing-contrib/java-jdbc[JDBC instrumentation] will add a span for each JDBC queries done by your application, to enable it, add the following dependency to your pom.xml:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/opentracing.adoc:215
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.opentracing.contrib</groupId>\n"
"    <artifactId>opentracing-jdbc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:218
msgid "As it uses a dedicated JDBC driver, you must configure your datasource and Hibernate to use it."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/opentracing.adoc:228
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=postgresql\n"
"# add ':tracing' to your database URL\n"
"quarkus.datasource.jdbc.url=jdbc:tracing:postgresql://localhost:5432/mydatabase\n"
"# use the 'TracingDriver' instead of the one for your database\n"
"quarkus.datasource.jdbc.driver=io.opentracing.contrib.jdbc.TracingDriver\n"
"# configure Hibernate dialect\n"
"quarkus.hibernate-orm.dialect=org.hibernate.dialect.PostgreSQLDialect\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/opentracing.adoc:231
#, no-wrap
msgid "Kafka"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:234
msgid "The https://github.com/opentracing-contrib/java-kafka-client[Kafka instrumentation] will add a span for each message sent to or received from a Kafka topic. To enable it, add the following dependency to your pom.xml:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/opentracing.adoc:241
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.opentracing.contrib</groupId>\n"
"    <artifactId>opentracing-kafka-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:244
msgid "It contains OpenTracing interceptors that must be registered on Kafka producers and consumers."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:246
msgid "If you followed the link:kafka[Kafka guide], the interceptors can be added on the `generated-price` and the `prices` channels as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/opentracing.adoc:254
#, no-wrap
msgid ""
"# Configure the Kafka sink (we write to it)\n"
"mp.messaging.outgoing.generated-price.connector=smallrye-kafka\n"
"mp.messaging.outgoing.generated-price.topic=prices\n"
"mp.messaging.outgoing.generated-price.value.serializer=org.apache.kafka.common.serialization.IntegerSerializer\n"
"mp.messaging.outgoing.generated-price.interceptor.classes=io.opentracing.contrib.kafka.TracingProducerInterceptor\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/opentracing.adoc:259
#, no-wrap
msgid ""
"# Configure the Kafka source (we read from it)\n"
"mp.messaging.incoming.prices.connector=smallrye-kafka\n"
"mp.messaging.incoming.prices.value.deserializer=org.apache.kafka.common.serialization.IntegerDeserializer\n"
"mp.messaging.incoming.prices.interceptor.classes=io.opentracing.contrib.kafka.TracingConsumerInterceptor\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:262
msgid "`interceptor.classes` accept a list of classes separated by a comma."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/opentracing.adoc:264
#, no-wrap
msgid "MongoDB client"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:267
msgid "The https://github.com/opentracing-contrib/java-mongo-driver[Mongo Driver instrumentation] will add a span for each command executed by your application. To enable it, add the following dependency to your pom.xml:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/opentracing.adoc:274
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.opentracing.contrib</groupId>\n"
"    <artifactId>opentracing-mongo-common</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:278
msgid "It contains the OpenTracing CommandListener that will be registered on the configuration of the mongo client.  Following the link:mongodb[MongoDB guide], the command listener will be registered defining the config property as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/opentracing.adoc:283
#, no-wrap
msgid ""
"# Enable tracing commands in mongodb client \n"
"quarkus.mongodb.tracing.enabled=true\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/opentracing.adoc:285
#, no-wrap
msgid "Zipkin compatibility mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:288
msgid "To enable it, add the following dependency to your pom.xml:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/opentracing.adoc:295
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.jaegertracing</groupId>\n"
"    <artifactId>jaeger-zipkin</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/opentracing.adoc:299
msgid "It contains the dependencies to convert the request to zipkin format.  The zipkin compatibility mode will be activated after defining the config property as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/opentracing.adoc:304
#, no-wrap
msgid ""
"# Enable zipkin compatibility mode \n"
"quarkus.jaeger.zipkin.compatibility-mode=true \n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/opentracing.adoc:307
#, no-wrap
msgid "Jaeger Configuration Reference"
msgstr ""
