# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/vault-datasource.adoc:6
#, no-wrap
msgid "Using HashiCorp Vault with Databases"
msgstr "在数据库中使用HashiCorp Vault"

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:17
msgid "The most common use case when working with Vault is to keep confidential the database connection credentials.  There are several approaches that are supported in Quarkus, with different levels of sophistication and security:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:19
msgid "Property fetched from the KV Secret Engine using the Vault MicroProfile Config Source"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:20
msgid "Quarkus Credentials Provider"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:21
msgid "Vault Dynamic DB Credentials"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:24
msgid "This guide aims at providing examples for each of those approaches. We will reuse the application implemented in the {base-guide} and enhance it with a simple persistence use case."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/vault-datasource.adoc:27
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:30
msgid "To complete this guide, you need:"
msgstr "要完成这个指南，你需要："

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:32
msgid "to complete the {base-guide}"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:33
msgid "roughly 20 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:34
msgid "an IDE"
msgstr "一个编辑器"

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:35
msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
msgstr "安装JDK 11以上版本并正确配置了 `JAVA_HOME`"

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:36
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:37
msgid "Docker installed"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/vault-datasource.adoc:38
#, no-wrap
msgid "Application"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:42
msgid "We assume the {base-guide} application has been developed, a Vault container is running, and the root token is known.  In this section we are going to start a PostgreSQL database, and add a persistence service in the application."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:44
msgid "Add the _Hibernate_ and _PostgreSQL_ extensions to the application:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vault-datasource.adoc:46
#, no-wrap
msgid "mvn quarkus:add-extension -Dextensions=\"io.quarkus:quarkus-hibernate-orm,io.quarkus:quarkus-jdbc-postgresql\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:49
msgid "Create a simple service:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vault-datasource.adoc:54
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class SantaClausService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vault-datasource.adoc:57
#, no-wrap
msgid ""
"    @Inject\n"
"    EntityManager em;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vault-datasource.adoc:63
#, no-wrap
msgid ""
"    @Transactional\n"
"    public List<Gift> getGifts() {\n"
"        return (List<Gift>) em.createQuery(\"select g from Gift g\").getResultList();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:66
msgid "With its `Gift` entity:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vault-datasource.adoc:71
#, no-wrap
msgid ""
"@Entity\n"
"public class Gift {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vault-datasource.adoc:74
#, no-wrap
msgid ""
"    private Long id;\n"
"    private String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vault-datasource.adoc:80
#, no-wrap
msgid ""
"    @Id\n"
"    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator=\"giftSeq\")\n"
"    public Long getId() {\n"
"        return id;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vault-datasource.adoc:84
#, no-wrap
msgid ""
"    public void setId(Long id) {\n"
"        this.id = id;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vault-datasource.adoc:88
#, no-wrap
msgid ""
"    public String getName() {\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vault-datasource.adoc:93
#, no-wrap
msgid ""
"    public void setName(String name) {\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:96
msgid "Finally, add a new endpoint in `GreetingResource`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vault-datasource.adoc:101
#, no-wrap
msgid ""
"@Inject\n"
"SantaClausService santaClausService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vault-datasource.adoc:108
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/gift-count\")\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"public int geGiftCount() {\n"
"    return santaClausService.getGifts().size();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:111
msgid "Start a PostgreSQL database:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vault-datasource.adoc:115
#, no-wrap
msgid "docker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 --name postgres-quarkus-hibernate -e POSTGRES_USER=sarah -e POSTGRES_PASSWORD=connor -e POSTGRES_DB=mydatabase -p 5432:5432 postgres:10.5\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:118
msgid "Now we are ready to configure Vault and Quarkus to be able to connect to this database from the application."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/vault-datasource.adoc:119
#, no-wrap
msgid "Vault MicroProfile Config Source"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:123
msgid "The simplest approach is to write the database password in the KV secret engine under the path that is fetched from the Vault Config Source."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:125
msgid "Open a new shell, `docker exec` in the Vault container and set the root token:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vault-datasource.adoc:129
#, no-wrap
msgid ""
"docker exec -it dev-vault sh\n"
"export VAULT_TOKEN={root-token}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:133
msgid "Add a `dbpassword` property in the `config` path of the KV secret engine, beside the original `a-private-key` property:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vault-datasource.adoc:136
#, no-wrap
msgid "vault kv put secret/myapps/vault-quickstart/config a-private-key=123456 dbpassword=connor\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:139
msgid "Add the following configuration in Quarkus to use the value of property `dbpassword` as our database password:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vault-datasource.adoc:146
#, no-wrap
msgid ""
"# configure your datasource\n"
"quarkus.datasource.db-kind = postgresql\n"
"quarkus.datasource.username = sarah\n"
"quarkus.datasource.password = ${dbpassword}\n"
"quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/mydatabase\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vault-datasource.adoc:149
#, no-wrap
msgid ""
"# drop and create the database at startup (use `update` to only update the schema)\n"
"quarkus.hibernate-orm.database.generation=drop-and-create\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:152
msgid "Compile and start the application:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vault-datasource.adoc:156
#, no-wrap
msgid ""
"./mvnw package\n"
"java -jar target/quarkus-app/quarkus-run.jar\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:159
msgid "Test it with the `gift-count` endpoint:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vault-datasource.adoc:163
#, no-wrap
msgid "curl http://localhost:8080/hello/gift-count\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:166
msgid "You should see:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vault-datasource.adoc:170
#, no-wrap
msgid "0\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:179
msgid "This approach is certainly the simplest of all. It has also the big advantage of working with any subsystem that requires a secret information in the configuration (i.e. not just _Agroal_).  The only drawback is that the password will never be fetched again from Vault after the initial property loading.  This means that if the db password was changed while running, the application would have to be restarted after Vault has been updated with the new password.  This contrasts with the credentials provider approach, which fetches the password from Vault every time a connection creation is attempted."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/vault-datasource.adoc:180
#, no-wrap
msgid "Credentials Provider"
msgstr "证书提供者"

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:187
msgid "In this approach we introduce a new abstraction called the _Credentials Provider_ that acts as an intermediary component between the Agroal datasource and Vault. The additional configuration required is small, and it has the major advantage of handling gracefully database password change while the application is running, without any restart. Since all new connections go through the _Credentials Provider_ to fetch their password, we make sure we have a fresh value every time."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:189
msgid "Create a new path (different than the `config` path) in Vault where the database password will be added:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vault-datasource.adoc:193
#, no-wrap
msgid "vault kv put secret/myapps/vault-quickstart/db password=connor\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:197
msgid "Since we allowed read access on `secret/myapps/vault-quickstart/*` subpaths in the policy, there is nothing else we have to do to allow the application to read it."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:200
msgid "When fetching credentials from Vault that are intended to be used by the Agroal connection pool, we need first to create a named Vault credentials provider in the {config-file}:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vault-datasource.adoc:204
#, no-wrap
msgid "quarkus.vault.credentials-provider.mydatabase.kv-path=myapps/vault-quickstart/db\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:208
msgid "This defines a credentials provider `mydatabase` that will fetch the password from key `password` at path `myapps/vault-quickstart/db`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:211
msgid "The credentials provider can now be used in the datasource configuration, in place of the `password` property:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vault-datasource.adoc:219
#, no-wrap
msgid ""
"# configure your datasource\n"
"quarkus.datasource.db-kind = postgresql\n"
"quarkus.datasource.username = sarah\n"
"quarkus.datasource.credentials-provider = mydatabase\n"
"quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/mydatabase\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:222
msgid "Recompile, start and test the `gift-count` endpoint. You should see `0` again."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/vault-datasource.adoc:223
#, no-wrap
msgid "Dynamic Database Credentials"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:229
msgid "The two previous approaches work well and are very popular. However they rely on a well known user configured in the application (i.e. the database user), and the security comes from the confidentiality of the password.  If the password was stolen, we would have to change it in the database and in Vault. Regulary rotating passwords is actually a very good practice to limit (in time) the impact of getting the password stolen."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:233
msgid "A more sophisticated approach consists in letting Vault create and retire database accounts on a regular basis.  This is supported in Vault with the https://www.vaultproject.io/docs/secrets/databases[Database secret engine]. A number of databases are supported, such as https://www.vaultproject.io/docs/secrets/databases/postgresql[PostgreSQL]."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:237
msgid "First we need to enable the `database` secret engine, configure the `postgresql-database-plugin` and create the database role `mydbrole` (replace `10.0.0.3` by the actual host that is running the PostgreSQL container; for simplicity we disabled _TLS_ between Vault and the PostgreSQL database):"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vault-datasource.adoc:240
#, no-wrap
msgid "vault secrets enable database\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vault-datasource.adoc:247
#, no-wrap
msgid ""
"vault write database/config/mydb \\\n"
"    plugin_name=postgresql-database-plugin \\\n"
"    allowed_roles=mydbrole \\\n"
"    connection_url=postgresql://{{username}}:{{password}}@10.0.0.3:5432/mydatabase?sslmode=disable \\\n"
"    username=sarah \\\n"
"    password=connor\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vault-datasource.adoc:253
#, no-wrap
msgid ""
"cat <<EOF > vault-postgres-creation.sql\n"
"CREATE ROLE \"{{name}}\" WITH LOGIN PASSWORD '{{password}}' VALID UNTIL '{{expiration}}';\n"
"GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO \"{{name}}\";\n"
"GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public to \"{{name}}\";\n"
"EOF\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vault-datasource.adoc:260
#, no-wrap
msgid ""
"vault write database/roles/mydbrole \\\n"
"    db_name=mydb creation_statements=@vault-postgres-creation.sql \\\n"
"    default_ttl=1h \\\n"
"    max_ttl=24h \\\n"
"    revocation_statements=\"ALTER ROLE \\\"{{name}}\\\" NOLOGIN;\" \\\n"
"    renew_statements=\"ALTER ROLE \\\"{{name}}\\\" VALID UNTIL '{{expiration}}';\"\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/vault-datasource.adoc:266
msgid "For this use case, user `sarah` configured above needs to be a PostgreSQL super user with the capability to create users."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:269
msgid "Then we need to give a read capability to the Quarkus application on path `database/creds/mydbrole`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vault-datasource.adoc:279
#, no-wrap
msgid ""
"cat <<EOF | vault policy write vault-quickstart-policy -\n"
"path \"secret/data/myapps/vault-quickstart/*\" {\n"
"  capabilities = [\"read\"]\n"
"}\n"
"path \"database/creds/mydbrole\" {\n"
"  capabilities = [ \"read\" ]\n"
"}\n"
"EOF\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:283
msgid "Now that Vault knows how to create users in PostgreSQL, we juste need to change the `mydatabase` credentials provider to use a `database-credentials-role`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vault-datasource.adoc:286
#, no-wrap
msgid "quarkus.vault.credentials-provider.mydatabase.database-credentials-role=mydbrole\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/vault-datasource.adoc:295
msgid "When using `quarkus.hibernate-orm.database.generation=drop-create`, objects get created with the applicative user. Since a user will be created every time the applications starts, database objects will be created with the first created user, then we will attempt to drop them on the second run with a different user that is not the owner. As expected this will fail. As a result, it is recommended to use `quarkus.hibernate-orm.database.generation=update` in this section."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:298
msgid "Recompile with `./mvnw package`, start and test the `gift-count` endpoint. You should see `0` again."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:300
msgid "Notice in the logs:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vault-datasource.adoc:303
#, no-wrap
msgid "2020-04-22 14:29:48,522 DEBUG [io.qua.vau.run.VaultDbManager] (Agroal_682171661) generated mydbrole credentials: {leaseId: database/creds/mydbrole/L6PxoI68gZDeVPXP0RAA4c0a, renewable: true, leaseDuration: 60s, valid_until: Wed Apr 22 14:30:48 CEST 2020, username: v-userpass-mydbrole-HeOMJCmy9coEnO2my2AR-1587558588, password:***}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:307
msgid "If you connect to the PostgreSQL database, and list all users configured on `mydatabase`, you will see the `sarah` super user, but also the technical users dynamically created by Vault:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vault-datasource.adoc:310
#, no-wrap
msgid ""
"docker exec -it postgres-quarkus-hibernate bash\n"
"psql mydatabase sarah\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/vault-datasource.adoc:319
#, no-wrap
msgid ""
"mydatabase=# \\du\n"
"                                                        List of roles\n"
"                      Role name                      |                         Attributes                         | Member of\n"
"-----------------------------------------------------+------------------------------------------------------------+-----------\n"
" sarah                                               | Superuser, Create role, Create DB, Replication, Bypass RLS | {}\n"
" v-userpass-mydbrole-HeOMJCmy9coEnO2my2AR-1587558588 | Password valid until 2020-04-22 12:30:53+00                | {}\n"
" v-userpass-mydbrole-N2ITbBXxoqMQ3A3cZL88-1587558572 | Cannot login                                              +| {}\n"
"                                                     | Password valid until 2020-04-22 12:30:37+00                |\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:322
msgid "As you can see 2 users have been created:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:324
msgid "`v-userpass-mydbrole-N2ITbBXxoqMQ3A3cZL88-1587558572` that has expired, which was created while we were executing the tests."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:325
msgid "`v-userpass-mydbrole-HeOMJCmy9coEnO2my2AR-1587558588` that is valid until `12:30:53`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/vault-datasource.adoc:328
msgid "As expected, users have been created dynamically by Vault, with expiration dates, allowing a rotation to occur, without breaking existing connections, allowing a greater level of security than the traditional _password_ based approaches."
msgstr ""
