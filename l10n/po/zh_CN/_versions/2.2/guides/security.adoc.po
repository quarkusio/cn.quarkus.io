# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/security.adoc:6
#, no-wrap
msgid "Security Architecture and Guides"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:11
msgid "Quarkus Security provides the architecture, multiple authentication and authorization mechanisms, and other tools for the developers to build a production-quality security for their Quarkus applications."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:13
msgid "This document provides a brief overview of Quarkus Security and links to the individual guides."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security.adoc:14
#, no-wrap
msgid "Architecture"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:17
msgid "`HttpAuthenticationMechanism` is the main entry into Quarkus HTTP Security."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:20
msgid "Quarkus Security Manager uses `HttpAuthenticationMechanism` to extract the authentication credentials from the HTTP request and delegates to `IdentityProvider` to complete the conversion of these credentials to `SecurityIdentity`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:22
msgid "For example, the credentials may be coming with the HTTP `Authorization` header, client HTTPS certificates or cookies."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:24
msgid "`IdentityProvider` verifies the authentication credentials and maps them to `SecurityIdentity` which contains the username, roles, the original authentication credentials, and other attributes."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:26
msgid "For every authenticated resource, you can inject a `SecurityIdentity` instance to get the authenticated identity information."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:29
msgid "In some other contexts you may have other parallel representations of the same information (or parts of it) such as `SecurityContext` for JAX-RS or `JsonWebToken` for JWT."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security.adoc:30
#, no-wrap
msgid "Authentication mechanisms"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:33
msgid "Quarkus supports several sources to load authentication information from."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/security.adoc:34
#, no-wrap
msgid "Basic and Form Authentication Mechanisms"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:38
msgid "Basic and Form HTTP-based authentication mechanisms are the core authentication mechanisms supported in Quarkus.  Please see link:security-built-in-authentication#basic-auth[Basic HTTP Authentication] and link:security-built-in-authentication#form-auth[Form HTTP Authentication] for more information."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/security.adoc:39
#, no-wrap
msgid "Mutual TLS Authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:42
msgid "Quarkus provides Mutual TLS authentication so that you can authenticate users based on their X.509 certificates."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:44
msgid "Please see link:security-built-in-authentication#mutual-tls[Mutual TLS Authentication] for more information."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/security.adoc:45
#, no-wrap
msgid "OpenId Connect"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:48
msgid "`quarkus-oidc` extension provides a reactive, interoperable, multi-tenant enabled OpenId Connect adapter which supports `Bearer Token` and `Authorization Code Flow` authentication mechanisms."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:51
msgid "`Bearer Token` mechanism extracts the token from HTTP `Authorization` header.  `Authorization Code Flow` mechanism uses OpenId Connect Authorization Code flow. It redirects the user to IDP to authenticate and completes the authentication process after the user has been redirected back to Quarkus by exchanging the provided code grant for ID, access and refresh tokens."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:53
msgid "ID and access `JWT` tokens are verified with the refreshable `JWK` key set but both JWT and opaque (binary) tokens can be introspected remotely."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:55
msgid "See the link:security-openid-connect[Using OpenID Connect to Protect Service Applications] guide for more information about `Bearer Token` authentication mechanism."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:57
msgid "See the link:security-openid-connect-web-authentication[Using OpenID Connect to Protect Web Application] guide for more information about `Authorization Code Flow` authentication mechanism."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/security.adoc:61
msgid "Both `quarkus-oidc` `Bearer` and `Authorization Code Flow` Authentication mechanisms use <<smallrye-jwt, SmallRye JWT>> to represent JWT tokens as Microprofile JWT `org.eclipse.microprofile.jwt.JsonWebToken`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:64
msgid "See link:security-openid-connect-multitenancy[Using OpenID Connect Multi-Tenancy] for more information about multiple tenants which can support `Bearer` or `Authorization Code Flow` authentication mechanism and configured statically or dynamically."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/security.adoc:69
msgid "If you would like to have Quarkus OIDC extension enabled at runtime then set `quarkus.oidc.tenant-enabled=false` at build time and re-enable it at runtime using a system property.  See also link:security-openid-connect-multitenancy#disable-tenant[Disabling Tenant Configurations] for more information about managing the individual tenant configurations in the multi-tenant OIDC deployments."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:72
msgid "If you use Keycloak and Bearer tokens then also see the link:security-keycloak-authorization[Using Keycloak to Centralize Authorization] guide."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/security.adoc:76
msgid "If you need to configure Keycloak programmatically then consider using https://www.keycloak.org/docs/latest/server_development/#admin-rest-api[Keycloak Admin REST API] with the help of the `quarkus-keycloak-admin-client` extension."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/security.adoc:78
#, no-wrap
msgid "OpenId Connect Client and Filters"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:81
msgid "`quarkus-oidc-client` extension provides `OidcClient` for acquiring and refreshing access tokens from OpenId Connect and OAuth2 providers which support `client-credentials`, `password` and `refresh_token` token grants."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:83
msgid "`quarkus-oidc-client-filter` extension depends on the `quarkus-oidc-client` extension and provides JAX-RS `OidcClientRequestFilter` which sets the access token acquired by `OidcClient` as an HTTP `Authorization` header's `Bearer` scheme value. This filter can be registered with MP RestClient implementations injected into the current Quarkus endpoint but it is not related to the authentication requirements of this service endpoint. For example, it can be a public endpoint or it can be protected with MTLS - the important point is that this Quarkus endpoint does not have to be protected itself with the Quarkus OpenId Connect adapter."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:85
msgid "`quarkus-oidc-token-propagation` extension depends on the `quarkus-oidc` extension and provides JAX-RS `TokenCredentialRequestFilter` which sets the OpenId Connect Bearer or Authorization Code Flow access token as an HTTP `Authorization` header's `Bearer` scheme value. This filter can be registered with MP RestClient implementations injected into the current Quarkus endpoint and the Quarkus endpoint must be protected itself with the Quarkus OpenId Connect adapter. This filter can be used to propagate the access token to the downstream services."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:87
msgid "See the link:security-openid-connect-client[Using OpenID Connect and OAuth2 Client] guide for more information."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/security.adoc:89
#, no-wrap
msgid "SmallRye JWT"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:92
msgid "`quarkus-smallrye-jwt` provides Microprofile JWT 1.1.1 implementation and many more options to verify signed and encrypted `JWT` tokens and represent them as `org.eclipse.microprofile.jwt.JsonWebToken`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:94
msgid "It provides an alternative to `quarkus-oidc` Bearer Token Authentication Mechanism. It can currently verify only `JWT` tokens using the PEM keys or refreshable `JWK` key set."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:96
msgid "Additionally it provides `JWT Generation API` for creating `signed`, `inner-signed` and/or `encrypted` `JWT` tokens with ease."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:98
msgid "See the link:security-jwt[Using SmallRye JWT] guide for more information."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/security.adoc:99
#, no-wrap
msgid "OAuth2"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:102
msgid "`quarkus-elytron-security-oauth2` provides an alternative to `quarkus-oidc` Bearer Token Authentication Mechanism. It is based on `Elytron` and is primarily meant for introspecting the opaque tokens remotely."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:104
msgid "See the link:security-oauth2[Using OAuth2] guide for more information."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/security.adoc:105
#, no-wrap
msgid "Choosing between OpenId Connect, SmallRye JWT and OAuth2 extensions"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:108
msgid "`quarkus-oidc` extension requires an OpenId Connect provider such as Keycloak which can be used to verify the Bearer tokens or authenticate the end users with the Authorization Code flow. In both cases `quarkus-oidc` requires a connection to this OpenId Connect provider."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:110
msgid "`quarkus-oidc` is the only option when the user authentication via Authorization Code flow or supporting multiple tenants is required. It can also request a UserInfo using both Authorization Code Flow and Bearer access tokens."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:112
msgid "When the Bearer tokens have to be verified then `quarkus-oidc`, `quarkus-smallrye-jwt` and `quarkus-elytron-security-oauth2` can be used."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:114
msgid "If you have Bearer tokens in a JWT format then all these 3 extensions can be used. Both `quarkus-oidc` and `quarkus-smallrye-jwt` support refreshing the JsonWebKey (JWK) set when the OpenId Connect provider rotates the keys, therefore `quarkus-oidc` or `quarkus-smallrye-jwt` should be used for verifying JWT tokens if the remote token introspection has to be avoided or not supported by the providers."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:116
msgid "`quarkus-smallrye-jwt` does not support the remote introspection of the opaque tokens or even JWT tokens - it always relies on the locally available keys - possibly fetched from the OpenId Connect provider. So if you need to introspect the JWT tokens remotely then both `quarkus-oidc` and `quarkus-elytron-security-oauth2` will work. Both extensions also support the verification of the opaque/binary tokens via the remote introspection."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:118
msgid "`quarkus-oidc` and `quarkus-smallrye-jwt` can have both JWT and opaque tokens injected into the endpoint code - the injected JWT tokens may offer a richer information about the user. All extensions can have the tokens injected as `Principal`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:120
msgid "`quarkus-smallrye-jwt` supports more key formats than `quarkus-oidc`. The latter will only use the JWK-formatted keys which are part of a JWK set. The former - can also work with PEM keys."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:122
msgid "`quarkus-smallrye-jwt` can handle locally not only signed but also inner-signed-and-encrypted or only encrypted tokens. In fact `quarkus-oidc` and `quarkus-elytron-security-oauth2` can verify such tokens too but only by treating them as opaque tokens and verifying them via the remote introspection."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:124
msgid "`quarkus-elytron-security-oauth2` is the best choice if you need a light weight library for the remote introspection of either opaque or JWT tokens."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:126
msgid "Note that a choice of using the opaque versus JWT token format is often driven by the architectural considerations. Opaque tokens are usually much shorter than JWT tokens but they require maintaining most of the token associated state in the provider database - the opaque tokens are effectively the database pointers. JWT tokens are significantly longer than the opaque tokens - but the providers are effectively delegating storing most of the token associated state to the client by storing it as the token claims and either signing and/or encrypting them."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:128
msgid "Below is a summary of the options."
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/security.adoc:130
#, no-wrap
msgid "quarkus-oidc"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/security.adoc:130
#, no-wrap
msgid "quarkus-smallrye-jwt"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/security.adoc:132
#, no-wrap
msgid "quarkus-elytron-security-oauth2"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/security.adoc:133
#, no-wrap
msgid "Bearer JWT verification is required"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/security.adoc:134
#, no-wrap
msgid "Local Verification or Introspection"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/security.adoc:135
#: upstream/_versions/2.2/guides/security.adoc:175
#, no-wrap
msgid "Local Verification"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/security.adoc:136
#: upstream/_versions/2.2/guides/security.adoc:138
#: upstream/_versions/2.2/guides/security.adoc:140
#: upstream/_versions/2.2/guides/security.adoc:174
#: upstream/_versions/2.2/guides/security.adoc:176
#, no-wrap
msgid "Introspection"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/security.adoc:137
#, no-wrap
msgid "Bearer Opaque Token verification is required"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/security.adoc:139
#: upstream/_versions/2.2/guides/security.adoc:144
#: upstream/_versions/2.2/guides/security.adoc:152
#: upstream/_versions/2.2/guides/security.adoc:155
#: upstream/_versions/2.2/guides/security.adoc:156
#: upstream/_versions/2.2/guides/security.adoc:159
#: upstream/_versions/2.2/guides/security.adoc:160
#: upstream/_versions/2.2/guides/security.adoc:163
#: upstream/_versions/2.2/guides/security.adoc:164
#: upstream/_versions/2.2/guides/security.adoc:166
#: upstream/_versions/2.2/guides/security.adoc:168
#: upstream/_versions/2.2/guides/security.adoc:170
#: upstream/_versions/2.2/guides/security.adoc:172
#: upstream/_versions/2.2/guides/security.adoc:178
#: upstream/_versions/2.2/guides/security.adoc:180
#: upstream/_versions/2.2/guides/security.adoc:182
#: upstream/_versions/2.2/guides/security.adoc:184
#, no-wrap
msgid "No"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/security.adoc:141
#, no-wrap
msgid "Refreshing JsonWebKey set for verifying JWT tokens"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/security.adoc:142
#: upstream/_versions/2.2/guides/security.adoc:143
#: upstream/_versions/2.2/guides/security.adoc:146
#: upstream/_versions/2.2/guides/security.adoc:147
#: upstream/_versions/2.2/guides/security.adoc:148
#: upstream/_versions/2.2/guides/security.adoc:150
#: upstream/_versions/2.2/guides/security.adoc:151
#: upstream/_versions/2.2/guides/security.adoc:154
#: upstream/_versions/2.2/guides/security.adoc:158
#: upstream/_versions/2.2/guides/security.adoc:162
#: upstream/_versions/2.2/guides/security.adoc:167
#: upstream/_versions/2.2/guides/security.adoc:183
#, no-wrap
msgid "Yes"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/security.adoc:145
#, no-wrap
msgid "Represent token as Principal"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/security.adoc:149
#, no-wrap
msgid "Inject JWT as MP JWT JsonWebToken"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/security.adoc:153
#, no-wrap
msgid "Authorization Code Flow"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/security.adoc:157
#, no-wrap
msgid "Multi-tenancy"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/security.adoc:161
#, no-wrap
msgid "UserInfo support"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/security.adoc:165
#, no-wrap
msgid "Pem Key format support"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/security.adoc:169
#, no-wrap
msgid "SecretKey support"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/security.adoc:171
#, no-wrap
msgid "In JsonWebKey format"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/security.adoc:173
#, no-wrap
msgid "InnerSigned/Encrypted or Encrypted tokens"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/security.adoc:177
#, no-wrap
msgid "Custom Token Verificition"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/security.adoc:179
#, no-wrap
msgid "With Injected JWTParser"
msgstr ""

#. type: Table
#: upstream/_versions/2.2/guides/security.adoc:181
#, no-wrap
msgid "Accept JWT as cookie"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/security.adoc:186
#, no-wrap
msgid "LDAP"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:189
msgid "Please see the link:security-ldap[Authenticate with LDAP] guide for more information about LDAP authentication mechanism."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security.adoc:191
#, no-wrap
msgid "Identity Providers"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:194
msgid "`IdentityProvider` converts the authentication credentials provided by `HttpAuthenticationMechanism` to `SecurityIdentity`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:197
msgid "Some extensions such as `OIDC`, `OAuth2`, `SmallRye JWT`, `LDAP` have the inlined `IdentityProvider` implementations which are specific to the supported authentication flow.  For example, `quarkus-oidc` uses its own `IdentityProvider` to convert a token to `SecurityIdentity`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:199
msgid "If you use `Basic` or `Form` HTTP-based authentication then you have to add an `IdentityProvider` which can convert a user name and password to `SecurityIdentity`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:202
msgid "See link:security-jpa[JPA IdentityProvider] and link:security-jdbc[JDBC IdentityProvider] for more information.  You can also use link:security-testing#configuring-user-information[User Properties IdentityProvider] for testing."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security.adoc:203
#, no-wrap
msgid "Combining Authentication Mechanisms"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:207
msgid "One can combine multiple authentication mechanisms if they get the authentication credentials from the different sources.  For example, combining built-in `Basic` and `quarkus-oidc` `Bearer` authentication mechanisms is allowed, but combining `quarkus-oidc` `Bearer` and `smallrye-jwt` authentication mechanisms is not allowed because both will attempt to verify the token extracted from the HTTP `Authorization Bearer` scheme."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/security.adoc:208
#, no-wrap
msgid "Path Specific Authentication Mechanism"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:211
msgid "You can enforce that only a single authentication mechanism is selected for a given request path, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security.adoc:215
#, no-wrap
msgid ""
"quarkus.http.auth.permission.basic-or-bearer.paths=/service\n"
"quarkus.http.auth.permission.basic-or-bearer.policy=authenticated\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security.adoc:219
#, no-wrap
msgid ""
"quarkus.http.auth.permission.basic.paths=/basic-only\n"
"quarkus.http.auth.permission.basic.policy=authenticated\n"
"quarkus.http.auth.permission.basic.auth-mechanism=basic\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security.adoc:223
#, no-wrap
msgid ""
"quarkus.http.auth.permission.bearer.paths=/bearer-only\n"
"quarkus.http.auth.permission.bearer.policy=authenticated\n"
"quarkus.http.auth.permission.bearer.auth-mechanism=bearer\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:226
msgid "The value of the `auth-mechanism` property must match the authentication scheme supported by HttpAuthenticationMechanism such as `basic` or `bearer` or `form`, etc."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security.adoc:227
#, no-wrap
msgid "Proactive Authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:231
msgid "By default, Quarkus does what we call proactive authentication. This means that if an incoming request has a credential then that request will always be authenticated (even if the target page does not require authentication)."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:233
msgid "See link:security-built-in-authentication#proactive-authentication[Proactive Authentication] for more information."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security.adoc:234
#, no-wrap
msgid "Authorization"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:237
msgid "See link:security-authorization[Security Authorization] for more information about Role Based Access Control and other authorization options."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security.adoc:238
#, no-wrap
msgid "Customization and other useful tips"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:241
msgid "Quarkus Security is highly customizable. One can register custom ``HttpAuthenticationMechanism``s, ``IdentityProvider``s and ``SecurityidentityAugmentor``s."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:243
msgid "See link:security-customization[Security Customization] for more information about customizing Quarkus Security and other useful tips about the reactive security, registering the security providers, etc."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security.adoc:244
#, no-wrap
msgid "Secure connections with SSL"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:247
msgid "See the link:http-reference#ssl[Supporting secure connections with SSL] guide for more information."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security.adoc:248
#, no-wrap
msgid "Cross-Origin Resource Sharing"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:251
msgid "If you plan to make your Quarkus application accessible to another application running on a different domain, you will need to configure CORS (Cross-Origin Resource Sharing). Please read the link:http-reference#cors-filter[HTTP CORS documentation] for more information."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security.adoc:252
#, no-wrap
msgid "SameSite cookies"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:255
msgid "Please see link:http-reference.adoc#same-site-cookie[SameSite cookies] for information about adding a https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite[SameSite] cookie property to any of the cookies set by a Quarkus endpoint."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security.adoc:256
#, no-wrap
msgid "Testing"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:259
msgid "See link:security-testing[Security Testing] for more information about testing Quarkus Security."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security.adoc:260
#, no-wrap
msgid "Secret Engines"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/security.adoc:261
#, no-wrap
msgid "Vault"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:263
msgid "Quarkus provides a very comprehensive HashiCorp Vault support, please see the link:vault[Quarkus and HashiCorp Vault] documentation for more information."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security.adoc:264
#, no-wrap
msgid "National Vulnerability Database"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:269
msgid "Most of Quarkus tags have been registered in link:https://nvd.nist.gov[National Vulnerability Database] (NVD) using a Common Platform Enumeration (CPE) name format.  All registered Quarkus CPE names can be found using link:https://nvd.nist.gov/products/cpe/search/results?namingFormat=2.3&keyword=quarkus[this search query].  If a Quarkus tag represented by the given CPE name entry is affected by some CVE then you'll be able to follow a provided link to that CVE."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:272
msgid "We will be asking the NVD CPE team to update the list as well as link Quarkus CPE name entries with the related CVEs on a regular basis.  If you work with the link:https://jeremylong.github.io/DependencyCheck/dependency-check-maven/[OWASP Dependency Check Plugin] which is using NVD feeds to detect the vulnerabilities at the application build time and see a false positive reported then please re-open link:https://github.com/quarkusio/quarkus/issues/2611[this issue] and provide the details."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security.adoc:273
msgid "Note link:https://jeremylong.github.io/DependencyCheck/dependency-check-maven/[OWASP Dependency Check Plugin] `6.2.0` or later should be used with Quarkus."
msgstr ""
