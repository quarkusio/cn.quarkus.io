# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:6
#, no-wrap
msgid "SmallRye Fault Tolerance"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:15
msgid "One of the challenges brought by the distributed nature of microservices is that communication with external systems is inherently unreliable. This increases demand on resiliency of applications. To simplify making more resilient applications, Quarkus provides https://github.com/smallrye/smallrye-fault-tolerance/[SmallRye Fault Tolerance] an implementation of the https://github.com/eclipse/microprofile-fault-tolerance/[MicroProfile Fault Tolerance] specification."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:18
msgid "In this guide, we demonstrate usage of MicroProfile Fault Tolerance annotations such as `@Timeout`, `@Fallback`, `@Retry` and `@CircuitBreaker`."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:19
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:22
msgid "To complete this guide, you need:"
msgstr "要完成这个指南，你需要："

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:24
msgid "less than 15 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:25
msgid "an IDE"
msgstr "一个编辑器"

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:26
msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
msgstr "安装JDK 11以上版本并正确配置了 `JAVA_HOME`"

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:27
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:28
#, no-wrap
msgid "The Scenario"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:32
msgid "The application built in this guide simulates a simple backend for a gourmet coffee e-shop. It implements a REST endpoint providing information about coffee samples we have on store."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:35
msgid "Let's imagine, although it's not implemented as such, that some of the methods in our endpoint require communication to external services like a database or an external microservice, which introduces a factor of unreliability."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:36
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:40
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:42
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:44
msgid "The solution is located in the `microprofile-fault-tolerance-quickstart` {quickstarts-tree-url}/microprofile-fault-tolerance-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:45
#, no-wrap
msgid "Creating the Maven Project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:48
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:58
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=microprofile-fault-tolerance-quickstart \\\n"
"    -DclassName=\"org.acme.microprofile.faulttolerance.CoffeeResource\" \\\n"
"    -Dpath=\"/coffee\" \\\n"
"    -Dextensions=\"resteasy,smallrye-fault-tolerance,resteasy-jackson\"\n"
"cd microprofile-fault-tolerance-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:61
msgid "This command generates a Maven structure, importing the extensions for RESTEasy/JAX-RS and SmallRye Fault Tolerance."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:64
msgid "If you already have your Quarkus project configured, you can add the `smallrye-fault-tolerance` extension to your project by running the following command in your project base directory:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:68
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:493
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"smallrye-fault-tolerance\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:71
msgid "This will add the following to your `pom.xml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:78
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:502
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-fault-tolerance</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:80
#, no-wrap
msgid "Preparing an Application: REST Endpoint and CDI Bean"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:84
msgid "In this section we create a skeleton of our application, so that we have something that we can extend and to which we can add fault tolerance features later on."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:86
msgid "First, create a simple entity representing a coffee sample in our store:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:90
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:115
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:160
#, no-wrap
msgid "package org.acme.microprofile.faulttolerance;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:92
#, no-wrap
msgid "public class Coffee {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:97
#, no-wrap
msgid ""
"    public Integer id;\n"
"    public String name;\n"
"    public String countryOfOrigin;\n"
"    public Integer price;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:100
#, no-wrap
msgid ""
"    public Coffee() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:108
#, no-wrap
msgid ""
"    public Coffee(Integer id, String name, String countryOfOrigin, Integer price) {\n"
"        this.id = id;\n"
"        this.name = name;\n"
"        this.countryOfOrigin = countryOfOrigin;\n"
"        this.price = price;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:111
msgid "Let's continue with a simple CDI bean, that would work as a repository of our coffee samples."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:123
#, no-wrap
msgid ""
"import java.util.ArrayList;\n"
"import java.util.Collections;\n"
"import java.util.HashMap;\n"
"import java.util.List;\n"
"import java.util.Map;\n"
"import java.util.stream.Collectors;\n"
"import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:126
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CoffeeRepositoryService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:128
#, no-wrap
msgid "    private Map<Integer, Coffee> coffeeList = new HashMap<>();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:134
#, no-wrap
msgid ""
"    public CoffeeRepositoryService() {\n"
"        coffeeList.put(1, new Coffee(1, \"Fernandez Espresso\", \"Colombia\", 23));\n"
"        coffeeList.put(2, new Coffee(2, \"La Scala Whole Beans\", \"Bolivia\", 18));\n"
"        coffeeList.put(3, new Coffee(3, \"Dak Lak Filter\", \"Vietnam\", 25));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:138
#, no-wrap
msgid ""
"    public List<Coffee> getAllCoffees() {\n"
"        return new ArrayList<>(coffeeList.values());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:142
#, no-wrap
msgid ""
"    public Coffee getCoffeeById(Integer id) {\n"
"        return coffeeList.get(id);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:153
#, no-wrap
msgid ""
"    public List<Coffee> getRecommendations(Integer id) {\n"
"        if (id == null) {\n"
"            return Collections.emptyList();\n"
"        }\n"
"        return coffeeList.values().stream()\n"
"                .filter(coffee -> !id.equals(coffee.id))\n"
"                .limit(2)\n"
"                .collect(Collectors.toList());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:156
msgid "Finally, edit the `org.acme.microprofile.faulttolerance.CoffeeResource` class as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:167
#, no-wrap
msgid ""
"import java.util.List;\n"
"import java.util.Random;\n"
"import java.util.concurrent.atomic.AtomicLong;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:169
#, no-wrap
msgid "import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:172
#, no-wrap
msgid ""
"@Path(\"/coffee\")\n"
"public class CoffeeResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:174
#, no-wrap
msgid "    private static final Logger LOGGER = Logger.getLogger(CoffeeResource.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:177
#, no-wrap
msgid ""
"    @Inject\n"
"    CoffeeRepositoryService coffeeRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:179
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:375
#, no-wrap
msgid "    private AtomicLong counter = new AtomicLong(0);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:183
#, no-wrap
msgid ""
"    @GET\n"
"    public List<Coffee> coffees() {\n"
"        final Long invocationNumber = counter.getAndIncrement();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:185
#, no-wrap
msgid "        maybeFail(String.format(\"CoffeeResource#coffees() invocation #%d failed\", invocationNumber));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:189
#, no-wrap
msgid ""
"        LOGGER.infof(\"CoffeeResource#coffees() invocation #%d returning successfully\", invocationNumber);\n"
"        return coffeeRepository.getAllCoffees();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:197
#, no-wrap
msgid ""
"    private void maybeFail(String failureLogMessage) {\n"
"        if (new Random().nextBoolean()) {\n"
"            LOGGER.error(failureLogMessage);\n"
"            throw new RuntimeException(\"Resource failure.\");\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:202
msgid "At this point, we expose a single REST method that will show a list of coffee samples in a JSON format. Note that we introduced some fault making code in our `CoffeeResource#maybeFail()` method, which is going to cause failures in the `CoffeeResource#coffees()` endpoint method in about 50 % of requests."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:204
msgid "Why not check that our application works? Run the Quarkus development server with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:208
#, no-wrap
msgid "./mvnw compile quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:213
msgid "and open `http://localhost:8080/coffee` in your browser. Make couple of requests (remember, some of them we expect to fail). At least some of the requests should show us the list of our coffee samples in JSON, the rest will fail with a `RuntimeException` thrown in `CoffeeResource#maybeFail()`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:215
msgid "Congratulations, you've just made a working (although somewhat unreliable) Quarkus application!"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:216
#, no-wrap
msgid "Adding Resiliency: Retries"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:220
msgid "Let the Quarkus development server running and in your IDE add the `@Retry` annotation to the `CoffeeResource#coffees()` method as follows and save the file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:225
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:460
#, no-wrap
msgid ""
"import org.eclipse.microprofile.faulttolerance.Retry;\n"
"...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:235
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:470
#, no-wrap
msgid ""
"public class CoffeeResource {\n"
"    ...\n"
"    @GET\n"
"    @Retry(maxRetries = 4)\n"
"    public List<Coffee> coffees() {\n"
"        ...\n"
"    }\n"
"    ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:239
msgid "Hit refresh in your browser. The Quarkus development server will automatically detect the changes and recompile the app for you, so there's no need to restart it."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:243
msgid "You can hit refresh couple more times. Practically all requests should now be succeeding. The `CoffeeResource#coffees()` method is still in fact failing in about 50 % of time, but every time it happens, the platform will automatically retry the call!"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:246
msgid "To see that that the failures still happen, check the output of the development server. The log messages should be similar to these:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:254
#, no-wrap
msgid ""
"2019-03-06 12:17:41,725 INFO  [org.acm.fau.CoffeeResource] (XNIO-1 task-1) CoffeeResource#coffees() invocation #5 returning successfully\n"
"2019-03-06 12:17:44,187 INFO  [org.acm.fau.CoffeeResource] (XNIO-1 task-1) CoffeeResource#coffees() invocation #6 returning successfully\n"
"2019-03-06 12:17:45,166 ERROR [org.acm.fau.CoffeeResource] (XNIO-1 task-1) CoffeeResource#coffees() invocation #7 failed\n"
"2019-03-06 12:17:45,172 ERROR [org.acm.fau.CoffeeResource] (XNIO-1 task-1) CoffeeResource#coffees() invocation #8 failed\n"
"2019-03-06 12:17:45,176 INFO  [org.acm.fau.CoffeeResource] (XNIO-1 task-1) CoffeeResource#coffees() invocation #9 returning successfully\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:259
msgid "You can see that every time an invocation fails, it's immediately followed by another invocation, until one succeeds.  Since we allowed 4 retries, it would require 5 invocations to fail in a row, in order for the user to be actually exposed to a failure. Which is fairly unlikely to happen."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:260
#, no-wrap
msgid "Adding Resiliency: Timeouts"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:263
msgid "So what else have we got in MicroProfile Fault Tolerance? Let's look into timeouts."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:266
msgid "Add following two methods to our `CoffeeResource` endpoint. Again, no need to restart the server, just paste the code and save the file."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:280
#, no-wrap
msgid ""
"import org.jboss.resteasy.annotations.jaxrs.PathParam;\n"
"import org.eclipse.microprofile.faulttolerance.Timeout;\n"
"...\n"
"public class CoffeeResource {\n"
"    ...\n"
"    @GET\n"
"    @Path(\"/{id}/recommendations\")\n"
"    @Timeout(250)\n"
"    public List<Coffee> recommendations(@PathParam int id) {\n"
"        long started = System.currentTimeMillis();\n"
"        final long invocationNumber = counter.getAndIncrement();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:291
#, no-wrap
msgid ""
"        try {\n"
"            randomDelay();\n"
"            LOGGER.infof(\"CoffeeResource#recommendations() invocation #%d returning successfully\", invocationNumber);\n"
"            return coffeeRepository.getRecommendations(id);\n"
"        } catch (InterruptedException e) {\n"
"            LOGGER.errorf(\"CoffeeResource#recommendations() invocation #%d timed out after %d ms\",\n"
"                    invocationNumber, System.currentTimeMillis() - started);\n"
"            return null;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:296
#, no-wrap
msgid ""
"    private void randomDelay() throws InterruptedException {\n"
"        Thread.sleep(new Random().nextInt(500));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:302
msgid "We added some new functionality. We want to be able to recommend some related coffees based on a coffee that a user is currently looking at. It's not a critical functionality, it's a nice-to-have. When the system is overloaded and the logic behind obtaining recommendations takes too long to execute, we would rather time out and render the UI without recommendations."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:305
msgid "Note that the timeout was configured to 250 ms, and a random artificial delay between 0 to 500 ms was introduced into the `CoffeeResource#recommendations()` method."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:307
msgid "In your browser, go to `http://localhost:8080/coffee/2/recommendations` and hit refresh a couple of times."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:310
msgid "You should see some requests time out with `org.eclipse.microprofile.faulttolerance.exceptions.TimeoutException`.  Requests that do not time out should show two recommended coffee samples in JSON."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:311
#, no-wrap
msgid "Adding Resiliency: Fallbacks"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:315
msgid "Let's make our recommendations feature even better by providing a fallback (and presumably faster) way of getting related coffees."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:318
msgid "Add a fallback method to `CoffeeResource` and a `@Fallback` annotation to `CoffeeResource#recommendations()` method as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:330
#, no-wrap
msgid ""
"import java.util.Collections;\n"
"import org.eclipse.microprofile.faulttolerance.Fallback;\n"
"...\n"
"public class CoffeeResource {\n"
"    ...\n"
"    @Fallback(fallbackMethod = \"fallbackRecommendations\")\n"
"    public List<Coffee> recommendations(@PathParam int id) {\n"
"        ...\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:338
#, no-wrap
msgid ""
"    public List<Coffee> fallbackRecommendations(int id) {\n"
"        LOGGER.info(\"Falling back to RecommendationResource#fallbackRecommendations()\");\n"
"        // safe bet, return something that everybody likes\n"
"        return Collections.singletonList(coffeeRepository.getCoffeeById(1));\n"
"    }\n"
"    ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:344
msgid "Hit refresh several times on `http://localhost:8080/coffee/2/recommendations`.  The `TimeoutException` should not appear anymore. Instead, in case of a timeout, the page will display a single recommendation that we hardcoded in our fallback method `fallbackRecommendations()`, rather than two recommendations returned by the original method."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:346
msgid "Check the server output to see that fallback is really happening:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:352
#, no-wrap
msgid ""
"2020-01-09 13:21:34,250 INFO  [org.acm.fau.CoffeeResource] (executor-thread-1) CoffeeResource#recommendations() invocation #1 returning successfully\n"
"2020-01-09 13:21:36,354 ERROR [org.acm.fau.CoffeeResource] (executor-thread-1) CoffeeResource#recommendations() invocation #2 timed out after 250 ms\n"
"2020-01-09 13:21:36,355 INFO  [org.acm.fau.CoffeeResource] (executor-thread-1) Falling back to RecommendationResource#fallbackRecommendations()\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:355
msgid "The fallback method is required to have the same parameters as the original method."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:356
#, no-wrap
msgid "Adding Resiliency: Circuit Breaker"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:362
msgid "A circuit breaker is useful for limiting number of failures happening in the system, when part of the system becomes temporarily unstable. The circuit breaker records successful and failed invocations of a method, and when the ratio of failed invocations reaches the specified threshold, the circuit breaker _opens_ and blocks all further invocations of that method for a given time."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:364
msgid "Add the following code into the `CoffeeRepositoryService` bean, so that we can demonstrate a circuit breaker in action:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:370
#, no-wrap
msgid ""
"import java.util.concurrent.atomic.AtomicLong;\n"
"import org.eclipse.microprofile.faulttolerance.CircuitBreaker;\n"
"...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:373
#, no-wrap
msgid ""
"public class CoffeeRepositoryService {\n"
"    ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:381
#, no-wrap
msgid ""
"    @CircuitBreaker(requestVolumeThreshold = 4)\n"
"    public Integer getAvailability(Coffee coffee) {\n"
"        maybeFail();\n"
"        return new Random().nextInt(30);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:390
#, no-wrap
msgid ""
"    private void maybeFail() {\n"
"        // introduce some artificial failures\n"
"        final Long invocationNumber = counter.getAndIncrement();\n"
"        if (invocationNumber % 4 > 1) { // alternate 2 successful and 2 failing invocations\n"
"            throw new RuntimeException(\"Service failed.\");\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:393
msgid "And inject the code below into the `CoffeeResource` endpoint:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:402
#, no-wrap
msgid ""
"public class CoffeeResource {\n"
"    ...\n"
"    @Path(\"/{id}/availability\")\n"
"    @GET\n"
"    public Response availability(@PathParam int id) {\n"
"        final Long invocationNumber = counter.getAndIncrement();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:408
#, no-wrap
msgid ""
"        Coffee coffee = coffeeRepository.getCoffeeById(id);\n"
"        // check that coffee with given id exists, return 404 if not\n"
"        if (coffee == null) {\n"
"            return Response.status(Response.Status.NOT_FOUND).build();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:424
#, no-wrap
msgid ""
"        try {\n"
"            Integer availability = coffeeRepository.getAvailability(coffee);\n"
"            LOGGER.infof(\"CoffeeResource#availability() invocation #%d returning successfully\", invocationNumber);\n"
"            return Response.ok(availability).build();\n"
"        } catch (RuntimeException e) {\n"
"            String message = e.getClass().getSimpleName() + \": \" + e.getMessage();\n"
"            LOGGER.errorf(\"CoffeeResource#availability() invocation #%d failed: %s\", invocationNumber, message);\n"
"            return Response.status(Response.Status.INTERNAL_SERVER_ERROR)\n"
"                    .entity(message)\n"
"                    .type(MediaType.TEXT_PLAIN_TYPE)\n"
"                    .build();\n"
"        }\n"
"    }\n"
"    ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:428
msgid "We added another functionality - the application can return the amount of remaining packages of given coffee on our store (just a random number)."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:431
msgid "This time an artificial failure was introduced in the CDI bean: the `CoffeeRepositoryService#getAvailability()` method is going to alternate between two successful and two failed invocations."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:435
msgid "We also added a `@CircuitBreaker` annotation with `requestVolumeThreshold = 4`. `CircuitBreaker.failureRatio` is by default 0.5, and `CircuitBreaker.delay` is by default 5 seconds. That means that a circuit breaker will open when 2 of the last 4 invocations failed and it will stay open for 5 seconds."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:437
msgid "To test this out, do the following:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:439
msgid "Go to `http://localhost:8080/coffee/2/availability` in your browser. You should see a number being returned."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:440
msgid "Hit refresh, this second request should again be successful and return a number."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:442
msgid "Refresh two more times. Both times you should see text \"RuntimeException: Service failed.\", which is the exception thrown by `CoffeeRepositoryService#getAvailability()`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:445
msgid "Refresh a couple more times. Unless you waited too long, you should again see exception, but this time it's \"CircuitBreakerOpenException: getAvailability\". This exception indicates that the circuit breaker opened and the `CoffeeRepositoryService#getAvailability()` method is not being called anymore."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:447
msgid "Give it 5 seconds during which circuit breaker should close and you should be able to make two successful requests again."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:448
#, no-wrap
msgid "Runtime configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:451
msgid "You can override the annotations parameters at runtime inside your `application.properties` file."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:453
msgid "If we take the retry example that we already saw:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:457
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:473
msgid "We can override the `maxRetries` parameter with 6 retries instead of 4 by the following configuration item:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:476
#, no-wrap
msgid "org.acme.CoffeeResource/coffees/Retry/maxRetries=6\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:480
msgid "The format is `fully-qualified-class-name/method-name/annotation-name/property-name=value`.  You can also configure a property for all the annotation via `annotation-name/property-name=value`."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:481
#, no-wrap
msgid "Conclusion"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:485
msgid "SmallRye Fault Tolerance allows to improve resiliency of your application, without having an impact on the complexity of our business logic."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:487
msgid "All that is needed to enable the fault tolerance features in Quarkus is:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:489
msgid "adding the `smallrye-fault-tolerance` Quarkus extension to your project using the `quarkus-maven-plugin`:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:495
msgid "or simply adding the following Maven dependency:"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:504
#, no-wrap
msgid "Additional resources"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:508
msgid "SmallRye Fault Tolerance has more features than shown here.  Please check the link:https://smallrye.io/docs/smallrye-fault-tolerance/5.2.0/index.html[SmallRye Fault Tolerance documentation] to learn about them."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:510
msgid "In Quarkus, you can use the SmallRye Fault Tolerance optional features out of the box."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:512
msgid "Support for Mutiny is present, so your asynchronous methods can return `Uni` in addition to `CompletionStage`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:514
msgid "MicroProfile Context Propagation is integrated with Fault Tolerance, so existing contexts are automatically propagated to your asynchronous methods."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:519
msgid "This also applies to the CDI request context: if it is active on the original thread, it is propagated to the new thread, but if it's not, then the new thread won't have it either.  This is contrary to MicroProfile Fault Tolerance specification, which states that the request context must be active during the `@Asynchronous` method invocation."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:522
msgid "We believe that in presence of MicroProfile Context Propagation, this requirement should not apply.  The entire point of context propagation is to make sure the new thread has the same contexts as the original thread."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:525
msgid "Non-compatible mode is enabled by default, so methods that return `CompletionStage` (or `Uni`) have asynchronous fault tolerance applied without any `@Asynchronous`, `@Blocking` or `@NonBlocking` annotation."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:530
msgid "This mode is not compatible with the MicroProfile Fault Tolerance specification, albeit the incompatibility is very small.  To restore full compatibility, add this configuration property:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-fault-tolerance.adoc:534
#, no-wrap
msgid "smallrye.faulttolerance.mp-compatibility=true\n"
msgstr ""
