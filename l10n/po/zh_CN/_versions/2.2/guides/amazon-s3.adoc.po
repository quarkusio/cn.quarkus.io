# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/amazon-s3.adoc:6
#, no-wrap
msgid "Amazon S3 Client"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:14
msgid "Amazon S3 is an object storage service. It can be employed to store any type of object which allows for uses like storage for Internet applications, backup and recovery, disaster recovery, data archives, data lakes for analytics, any hybrid cloud storage.  This extension provides functionality that allows the client to communicate with the service when running in Quarkus.  You can find more information about S3 at https://aws.amazon.com/s3/[the Amazon S3 website]."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:17
msgid "The S3 extension is based on https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/welcome.html[AWS Java SDK 2.x].  It's a major rewrite of the 1.x code base that offers two programming models (Blocking & Async)."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:19
msgid "The Quarkus extension supports two programming models:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:21
msgid "Blocking access using URL Connection HTTP client (by default) or the Apache HTTP Client"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:22
msgid "https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/basics-async.html[Asynchronous programming] based on JDK's `CompletableFuture` objects and the Netty HTTP client."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:24
msgid "In this guide, we see how you can get your REST services to use S3 locally and on AWS."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/amazon-s3.adoc:25
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:28
msgid "To complete this guide, you need:"
msgstr "要完成这个指南，你需要："

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:30
msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
msgstr "安装JDK 11以上版本并正确配置了 `JAVA_HOME`"

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:31
msgid "an IDE"
msgstr "一个编辑器"

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:32
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:33
msgid "https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html[AWS Command line interface]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:34
msgid "An AWS Account to access the S3 service. Before you can use the AWS SDKs with Amazon S3, you must get an AWS access key ID and secret access key."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:35
msgid "Optionally, Docker for your system to run S3 locally for testing purposes"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/amazon-s3.adoc:36
#, no-wrap
msgid "Provision S3 locally"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:39
msgid "The easiest way to start working with S3 is to run a local instance as a container."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:43
#, no-wrap
msgid "docker run -it --publish 8008:4566 -e SERVICES=s3 -e START_WEB=0 localstack/localstack:0.11.5\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:45
msgid "This starts a S3 instance that is accessible on port `8008`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:48
msgid "Versions of localstack newer than v0.11.5 require port `4566` instead of port `4572`. See this https://github.com/localstack/localstack/issues/2983[GitHub issue] for details on this change."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:50
msgid "Create an AWS profile for your local instance using AWS CLI:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:57
#, no-wrap
msgid ""
"$ aws configure --profile localstack\n"
"AWS Access Key ID [None]: test-key\n"
"AWS Secret Access Key [None]: test-secret\n"
"Default region name [None]: us-east-1\n"
"Default output format [None]:\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/amazon-s3.adoc:59
#, no-wrap
msgid "Create a S3 bucket"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:62
msgid "Create a S3 bucket using AWS CLI"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:66
#, no-wrap
msgid "aws s3 mb s3://quarkus.s3.quickstart --profile localstack --endpoint-url=http://localhost:8008\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/amazon-s3.adoc:68
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:71
msgid "The application built here allows to manage files stored in Amazon S3."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:74
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:76
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:78
msgid "The solution is located in the `amazon-s3-quickstart` {quickstarts-tree-url}/amazon-s3-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/amazon-s3.adoc:79
#, no-wrap
msgid "Creating the Maven project"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:82
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:92
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=amazon-s3-quickstart \\\n"
"    -DclassName=\"org.acme.s3.S3SyncClientResource\" \\\n"
"    -Dpath=\"/s3\" \\\n"
"    -Dextensions=\"resteasy,resteasy-jackson,amazon-s3\"\n"
"cd amazon-s3-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:96
msgid "This command generates a Maven structure importing the RESTEasy/JAX-RS and S3 Client extensions.  After this, the `amazon-s3` extension has been added to your `pom.xml`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:98
msgid "Then, we'll add the following dependency to support `multipart/form-data` requests:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:105
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-multipart</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:108
msgid "The default setting for `quarkus.http.limits.max-body-size` is 10240K. This may limit your ability to upload multipart files larger than the default. If you want to upload larger files, you will need to set this limit explicitly."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/amazon-s3.adoc:109
#, no-wrap
msgid "Setting up the model"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:112
msgid "In this example, we will create an application to manage a list of files. The example application will demonstrate the two programming models supported by the extension."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:115
msgid "Because the primary goal of our application is to upload a file into the S3 bucket, we need to setup the model we will be using to define the `multipart/form-data` payload, in the form of a `MultipartBody` POJO."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:117
msgid "Create a `org.acme.s3.FormData` class as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:121
#: upstream/_versions/2.2/guides/amazon-s3.adoc:157
#: upstream/_versions/2.2/guides/amazon-s3.adoc:208
#: upstream/_versions/2.2/guides/amazon-s3.adoc:267
#: upstream/_versions/2.2/guides/amazon-s3.adoc:449
#, no-wrap
msgid "package org.acme.s3;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:123
#, no-wrap
msgid "import java.io.InputStream;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:126
#, no-wrap
msgid ""
"import javax.ws.rs.FormParam;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:128
#, no-wrap
msgid "import org.jboss.resteasy.annotations.providers.multipart.PartType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:130
#, no-wrap
msgid "public class FormData {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:134
#, no-wrap
msgid ""
"    @FormParam(\"file\")\n"
"    @PartType(MediaType.APPLICATION_OCTET_STREAM)\n"
"    public InputStream data;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:138
#, no-wrap
msgid ""
"    @FormParam(\"filename\")\n"
"    @PartType(MediaType.TEXT_PLAIN)\n"
"    public String fileName;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:142
#, no-wrap
msgid ""
"    @FormParam(\"mimetype\")\n"
"    @PartType(MediaType.TEXT_PLAIN)\n"
"    public String mimeType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:144
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:147
msgid "The class defines three fields:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:149
msgid "`data` that fill capture stream of uploaded bytes from the client"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:150
msgid "`fileName` that captures a filename as provided by the submited form"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:151
msgid "`mimeType` content type of the uploaded file"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:153
msgid "In the second step let's create a bean that will represent a file in a Amazon S3 bucket as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:159
#, no-wrap
msgid "import software.amazon.awssdk.services.s3.model.S3Object;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:162
#, no-wrap
msgid ""
"public class FileObject {\n"
"    private String objectKey;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:164
#, no-wrap
msgid "    private Long size;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:167
#, no-wrap
msgid ""
"    public FileObject() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:176
#, no-wrap
msgid ""
"    public static FileObject from(S3Object s3Object) {\n"
"        FileObject file = new FileObject();\n"
"        if (s3Object != null) {\n"
"            file.setObjectKey(s3Object.key());\n"
"            file.setSize(s3Object.size());\n"
"        }\n"
"        return file;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:180
#, no-wrap
msgid ""
"    public String getObjectKey() {\n"
"        return objectKey;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:184
#, no-wrap
msgid ""
"    public Long getSize() {\n"
"        return size;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:189
#, no-wrap
msgid ""
"    public FileObject setObjectKey(String objectKey) {\n"
"        this.objectKey = objectKey;\n"
"        return this;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:195
#, no-wrap
msgid ""
"    public FileObject setSize(Long size) {\n"
"        this.size = size;\n"
"        return this;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:199
msgid "Nothing fancy. One important thing to note is that having a default constructor is required by the JSON serialization layer. The static `from` method creates a bean based on the `S3Object` object provided by the S3 client response when listing all the objects in a bucket."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/amazon-s3.adoc:200
#, no-wrap
msgid "Create JAX-RS resource"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:204
msgid "Now create a `org.acme.s3.CommonResource` that will consist of methods to prepare S3 request to get object from a S3 bucket, or to put file into a S3 bucket.  Note a configuration property `bucket.name` is defined here as the request method required name of the S3 bucket."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:215
#, no-wrap
msgid ""
"import java.io.File;\n"
"import java.io.InputStream;\n"
"import java.nio.file.Files;\n"
"import java.nio.file.StandardCopyOption;\n"
"import java.util.Date;\n"
"import java.util.UUID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:217
#, no-wrap
msgid "import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:220
#, no-wrap
msgid ""
"import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n"
"import software.amazon.awssdk.services.s3.model.PutObjectRequest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:223
#, no-wrap
msgid ""
"abstract public class CommonResource {\n"
"    private final static String TEMP_DIR = System.getProperty(\"java.io.tmpdir\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:226
#, no-wrap
msgid ""
"    @ConfigProperty(name = \"bucket.name\")\n"
"    String bucketName;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:234
#, no-wrap
msgid ""
"    protected PutObjectRequest buildPutRequest(FormData formData) {\n"
"        return PutObjectRequest.builder()\n"
"                .bucket(bucketName)\n"
"                .key(formData.fileName)\n"
"                .contentType(formData.mimeType)\n"
"                .build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:241
#, no-wrap
msgid ""
"    protected GetObjectRequest buildGetRequest(String objectKey) {\n"
"        return GetObjectRequest.builder()\n"
"                .bucket(bucketName)\n"
"                .key(objectKey)\n"
"                .build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:247
#, no-wrap
msgid ""
"    protected File tempFilePath() {\n"
"        return new File(TEMP_DIR, new StringBuilder().append(\"s3AsyncDownloadedTemp\")\n"
"                .append((new Date()).getTime()).append(UUID.randomUUID())\n"
"                .append(\".\").append(\".tmp\").toString());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:256
#, no-wrap
msgid ""
"    protected File uploadToTemp(InputStream data) {\n"
"        File tempPath;\n"
"        try {\n"
"            tempPath = File.createTempFile(\"uploadS3Tmp\", \".tmp\");\n"
"            Files.copy(data, tempPath.toPath(), StandardCopyOption.REPLACE_EXISTING);\n"
"        } catch (Exception ex) {\n"
"            throw new RuntimeException(ex);\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:260
#, no-wrap
msgid ""
"        return tempPath;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:263
msgid "Then, create a `org.acme.s3.S3SyncClientResource` that will provides an API to upload/download files as well as to list all the files in a bucket."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:272
#, no-wrap
msgid ""
"import java.io.ByteArrayOutputStream;\n"
"import java.util.Comparator;\n"
"import java.util.List;\n"
"import java.util.stream.Collectors;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:284
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import javax.ws.rs.core.Response;\n"
"import javax.ws.rs.core.Response.ResponseBuilder;\n"
"import javax.ws.rs.core.Response.Status;\n"
"import javax.ws.rs.core.StreamingOutput;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:287
#: upstream/_versions/2.2/guides/amazon-s3.adoc:467
#, no-wrap
msgid ""
"import org.jboss.resteasy.annotations.jaxrs.PathParam;\n"
"import org.jboss.resteasy.annotations.providers.multipart.MultipartForm;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:295
#, no-wrap
msgid ""
"import software.amazon.awssdk.core.sync.RequestBody;\n"
"import software.amazon.awssdk.core.sync.ResponseTransformer;\n"
"import software.amazon.awssdk.services.s3.S3Client;\n"
"import software.amazon.awssdk.services.s3.model.GetObjectResponse;\n"
"import software.amazon.awssdk.services.s3.model.ListObjectsRequest;\n"
"import software.amazon.awssdk.services.s3.model.PutObjectResponse;\n"
"import software.amazon.awssdk.services.s3.model.S3Object;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:300
#, no-wrap
msgid ""
"@Path(\"/s3\")\n"
"public class S3SyncClientResource extends CommonResource {\n"
"    @Inject\n"
"    S3Client s3;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:305
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"upload\")\n"
"    @Consumes(MediaType.MULTIPART_FORM_DATA)\n"
"    public Response uploadFile(@MultipartForm FormData formData) throws Exception {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:309
#, no-wrap
msgid ""
"        if (formData.fileName == null || formData.fileName.isEmpty()) {\n"
"            return Response.status(Status.BAD_REQUEST).build();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:313
#, no-wrap
msgid ""
"        if (formData.mimeType == null || formData.mimeType.isEmpty()) {\n"
"            return Response.status(Status.BAD_REQUEST).build();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:322
#, no-wrap
msgid ""
"        PutObjectResponse putResponse = s3.putObject(buildPutRequest(formData),\n"
"                RequestBody.fromFile(uploadToTemp(formData.data)));\n"
"        if (putResponse != null) {\n"
"            return Response.ok().status(Status.CREATED).build();\n"
"        } else {\n"
"            return Response.serverError().build();\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:329
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"download/{objectKey}\")\n"
"    @Produces(MediaType.APPLICATION_OCTET_STREAM)\n"
"    public Response downloadFile(@PathParam(\"objectKey\") String objectKey) {\n"
"        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n"
"        GetObjectResponse object = s3.getObject(buildGetRequest(objectKey), ResponseTransformer.toOutputStream(baos));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:335
#, no-wrap
msgid ""
"        ResponseBuilder response = Response.ok((StreamingOutput) output -> baos.writeTo(output));\n"
"        response.header(\"Content-Disposition\", \"attachment;filename=\" + objectKey);\n"
"        response.header(\"Content-Type\", object.contentType());\n"
"        return response.build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:339
#, no-wrap
msgid ""
"    @GET\n"
"    public List<FileObject> listFiles() {\n"
"        ListObjectsRequest listRequest = ListObjectsRequest.builder().bucket(bucketName).build();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:345
#, no-wrap
msgid ""
"        //HEAD S3 objects to get metadata\n"
"        return s3.listObjects(listRequest).contents().stream().sorted(Comparator.comparing(S3Object::lastModified).reversed())\n"
"                .map(FileObject::from).collect(Collectors.toList());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/amazon-s3.adoc:347
#, no-wrap
msgid "Configuring S3 clients"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:350
msgid "Both S3 clients (sync and async) are configurable via the `application.properties` file that can be provided in the `src/main/resources` directory."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:353
msgid "You need to add to the classpath a proper implementation of the sync client. By default the extension uses the URL connection HTTP client, so add a URL connection client dependency to the `pom.xml` file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:360
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>software.amazon.awssdk</groupId>\n"
"    <artifactId>url-connection-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:363
msgid "If you want to use Apache HTTP client instead, configure it as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:366
#, no-wrap
msgid "quarkus.s3.sync-client.type=apache\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:369
msgid "And add following dependency to the application `pom.xml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:379
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>software.amazon.awssdk</groupId>\n"
"    <artifactId>apache-client</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-apache-httpclient</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:382
msgid "For asynchronous client refer to <<Going asynchronous>> for more information."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:385
msgid "If you're going to use a local S3 instance, configure it as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:389
#, no-wrap
msgid "quarkus.s3.endpoint-override=http://localhost:8008\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:394
#, no-wrap
msgid ""
"quarkus.s3.aws.region=us-east-1\n"
"quarkus.s3.aws.credentials.type=static\n"
"quarkus.s3.aws.credentials.static-provider.access-key-id=test-key\n"
"quarkus.s3.aws.credentials.static-provider.secret-access-key=test-secret\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:396
#, no-wrap
msgid "bucket.name=quarkus.s3.quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:399
msgid "`quarkus.s3.aws.region` - It's required by the client, but since you're using a local S3 instance you can pick any valid AWS region."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:400
msgid "`quarkus.s3.aws.credentials.type` - Set `static` credentials provider with any values for `access-key-id` and `secret-access-key`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:401
msgid "`quarkus.s3.endpoint-override` - Override the S3 client to use a local instance instead of an AWS service"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:402
msgid "`bucket.name` - Name of the S3 bucket"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:404
msgid "If you want to work with an AWS account, you'd need to set it with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:407
#, no-wrap
msgid "bucket.name=<your-bucket-name>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:410
#, no-wrap
msgid ""
"quarkus.s3.aws.region=<YOUR_REGION>\n"
"quarkus.s3.aws.credentials.type=default\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:413
msgid "`bucket.name` - name of the S3 bucket on your AWS account."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:414
msgid "`quarkus.s3.aws.region` you should set it to the region where your S3 bucket was created,"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:415
msgid "`quarkus.s3.aws.credentials.type` - use the `default` credentials provider chain that looks for credentials in this order:"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/amazon-s3.adoc:418
#, no-wrap
msgid "Creating a frontend"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:423
msgid "Now let's add a simple web page to interact with our `S3SyncClientResource`.  Quarkus automatically serves static resources located under the `META-INF/resources` directory.  In the `src/main/resources/META-INF/resources` directory, add a `s3.html` file with the content from this {quickstarts-blob-url}/amazon-s3-quickstart/src/main/resources/META-INF/resources/s3.html[s3.html] file in it."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:425
msgid "You can now interact with your REST service:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:427
msgid "start Quarkus with `./mvnw compile quarkus:dev`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:428
msgid "open a browser to `http://localhost:8080/s3.html`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:429
msgid "upload new file to the current S3 bucket via the form and see the list of files in the bucket"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/amazon-s3.adoc:430
#, no-wrap
msgid "Next steps"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/amazon-s3.adoc:432
#, no-wrap
msgid "Packaging"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:436
msgid "Packaging your application is as simple as `./mvnw clean package`.  It can be run with `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:439
msgid "With GraalVM installed, you can also create a native executable binary: `./mvnw clean package -Dnative`.  Depending on your system, that will take some time."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/amazon-s3.adoc:440
#, no-wrap
msgid "Going asynchronous"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:443
msgid "Thanks to the AWS SDK v2.x used by the Quarkus extension, you can use the asynchronous programming model out of the box."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:445
msgid "Create a `org.acme.s3.S3AsyncClientResource` that will be similar to our `S3SyncClientResource` but using an asynchronous programming model."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:454
#, no-wrap
msgid ""
"import java.io.File;\n"
"import java.util.Comparator;\n"
"import java.util.List;\n"
"import java.util.stream.Collectors;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:464
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import javax.ws.rs.core.Response;\n"
"import javax.ws.rs.core.Response.Status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:475
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import software.amazon.awssdk.core.async.AsyncRequestBody;\n"
"import software.amazon.awssdk.core.async.AsyncResponseTransformer;\n"
"import software.amazon.awssdk.services.s3.S3AsyncClient;\n"
"import software.amazon.awssdk.services.s3.model.ListObjectsRequest;\n"
"import software.amazon.awssdk.services.s3.model.ListObjectsResponse;\n"
"import software.amazon.awssdk.services.s3.model.S3Object;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:480
#, no-wrap
msgid ""
"@Path(\"/async-s3\")\n"
"public class S3AsyncClientResource extends CommonResource {\n"
"    @Inject\n"
"    S3AsyncClient s3;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:485
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"upload\")\n"
"    @Consumes(MediaType.MULTIPART_FORM_DATA)\n"
"    public Uni<Response> uploadFile(@MultipartForm FormData formData) throws Exception {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:489
#, no-wrap
msgid ""
"        if (formData.fileName == null || formData.fileName.isEmpty()) {\n"
"            return Uni.createFrom().item(Response.status(Status.BAD_REQUEST).build());\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:493
#, no-wrap
msgid ""
"        if (formData.mimeType == null || formData.mimeType.isEmpty()) {\n"
"            return Uni.createFrom().item(Response.status(Status.BAD_REQUEST).build());\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:504
#, no-wrap
msgid ""
"        return Uni.createFrom()\n"
"                .completionStage(() -> {\n"
"                    return s3.putObject(buildPutRequest(formData), AsyncRequestBody.fromFile(uploadToTemp(formData.data)));\n"
"                })\n"
"                .onItem().ignore().andSwitchTo(Uni.createFrom().item(Response.created(null).build()))\n"
"                .onFailure().recoverWithItem(th -> {\n"
"                    th.printStackTrace();\n"
"                    return Response.serverError().build();\n"
"                });\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:510
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"download/{objectKey}\")\n"
"    @Produces(MediaType.APPLICATION_OCTET_STREAM)\n"
"    public Uni<Response> downloadFile(@PathParam(\"objectKey\") String objectKey) throws Exception {\n"
"        File tempFile = tempFilePath();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:518
#, no-wrap
msgid ""
"        return Uni.createFrom()\n"
"                .completionStage(() -> s3.getObject(buildGetRequest(objectKey), AsyncResponseTransformer.toFile(tempFile)))\n"
"                .onItem()\n"
"                .transform(object -> Response.ok(tempFile)\n"
"                        .header(\"Content-Disposition\", \"attachment;filename=\" + objectKey)\n"
"                        .header(\"Content-Type\", object.contentType()).build());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:524
#, no-wrap
msgid ""
"    @GET\n"
"    public Uni<List<FileObject>> listFiles() {\n"
"        ListObjectsRequest listRequest = ListObjectsRequest.builder()\n"
"                .bucket(bucketName)\n"
"                .build();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:528
#, no-wrap
msgid ""
"        return Uni.createFrom().completionStage(() -> s3.listObjects(listRequest))\n"
"                .onItem().transform(result -> toFileItems(result));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:535
#, no-wrap
msgid ""
"    private List<FileObject> toFileItems(ListObjectsResponse objects) {\n"
"        return objects.contents().stream()\n"
"                .sorted(Comparator.comparing(S3Object::lastModified).reversed())\n"
"                .map(FileObject::from).collect(Collectors.toList());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:538
msgid "You need the RESTEasy Mutiny support for asynchronous programming. Add the dependency to the `pom.xml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:545
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-mutiny</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:548
msgid "Or you can alternatively run this command in your project base directory:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:552
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"resteasy-mutiny\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/amazon-s3.adoc:555
msgid "And add the Netty HTTP client dependency to the `pom.xml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/amazon-s3.adoc:562
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>software.amazon.awssdk</groupId>\n"
"    <artifactId>netty-nio-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/amazon-s3.adoc:564
#, no-wrap
msgid "Configuration Reference"
msgstr "配置参考"
