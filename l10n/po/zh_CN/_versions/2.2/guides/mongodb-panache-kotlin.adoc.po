# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:6
#, no-wrap
msgid "Simplified MongoDB with Panache and Kotlin"
msgstr "用Panache和Kotlin简化MongoDB"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:15
msgid "MongoDB is a well known NoSQL Database that is widely used. MongoDB with Panache offers a new layer atop this familiar framework.  This guide will not dive in to the specifics of either as those are already covered in the link:mongodb-panache[MongoDB with Panache guide].  In this guide, we'll cover the Kotlin specific changes needed to use MongoDB with Panache in your Kotlin-based Quarkus applications."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:16
#, no-wrap
msgid "First: an example"
msgstr "第一：一个例子"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:21
msgid "As we saw in the MongoDB with Panache guide, it allows us to extend the functionality in our entities and repositories (also known as DAOs) with some automatically provided functionality.  When using Kotlin, the approach is very similar to what we see in the Java version with a slight change or two.  To Panache-enable your entity, you would define it something like:"
msgstr "正如我们在MongoDB with Panache指南中所看到的，它允许我们用一些自动提供的功能来扩展我们实体和存储库（也称为DAO）中的功能。在使用Kotlin时，该方法与我们在Java版本中看到的非常相似，只是有一两个微小的变化。为了使你的实体具有Panache功能，你可以这样定义它："

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:29
#, no-wrap
msgid ""
"class Person: PanacheMongoEntity {\n"
"    lateinit var name: String\n"
"    lateinit var birth: LocalDate\n"
"    lateinit var status: Status\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:34
msgid "As you can see our entities remain simple.  There is, however, a slight difference from the Java version.  The Kotlin language doesn't support the notion of static methods in quite the same way as Java does.  Instead, we must use a https://kotlinlang.org/docs/tutorials/kotlin-for-py/objects-and-companion-objects.html#companion-objects[companion object]:"
msgstr "如你所见，我们的实体仍然很简单。然而，与Java版本有一点不同。Kotlin语言并不像Java那样支持静态方法的概念。相反，我们必须使用一个 link:https://kotlinlang.org/docs/tutorials/kotlin-for-py/objects-and-companion-objects.html#companion-objects[companion object（同伴对象）] ："

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:43
#, no-wrap
msgid ""
"class Person : PanacheMongoEntity() {\n"
"    companion object: PanacheMongoCompanion<Person> {  // <1>\n"
"        fun findByName(name: String) = find(\"name\", name).firstResult()\n"
"        fun findAlive() = list(\"status\", Status.Alive)\n"
"        fun deleteStefs() = delete(\"name\", \"Stef\")\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:48
#, no-wrap
msgid ""
"    lateinit var name: String  // <2>\n"
"    lateinit var birth: LocalDate\n"
"    lateinit var status: Status\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:51
msgid "The companion object holds all the methods not related to a specific instance allowing for general management and querying bound to a specific type."
msgstr "companion object持有所有与特定实例无关的方法，允许进行一般管理和与特定类型绑定的查询。"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:54
msgid "Here there are options, but we've chosen the `lateinit` approach.  This allows us to declare these fields as non-null knowing they will be properly assigned either by the constructor (not shown) or by the MongoDB POJO codec loading data from the database."
msgstr "这里有一些选项，但我们选择了 `lateinit` 的方法。这允许我们将这些字段声明为非空，因为我们知道它们会被构造函数（未显示）或从数据库加载数据的MongoDB POJO编解码器正确分配。"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:58
msgid "These types differ from the Java types mentioned in those tutorials.  For Kotlin support, all the Panache types will be found in the `io.quarkus.mongodb.panache.kotlin` package.  This subpackage allows for the distinction between the Java and Kotlin variants and allows for both to be used unambiguously in a single project."
msgstr "这些类型与那些教程中提到的Java类型不同。对于Kotlin支持，所有的Panache类型将在 `io.quarkus.mongodb.panache.kotlin` 包中都可以找到。这个子包允许区分Java和Kotlin变体，并允许在一个项目中明确地使用这两种类型。"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:62
msgid "In the Kotlin version, we've simply moved the bulk of the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[`active record pattern`] functionality to the `companion object`.  Apart from this slight change, we can then work with our types in ways that map easily from the Java side of world."
msgstr "在Kotlin版本中，我们只是把大部分的功能 link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[`active record pattern`] 转移到了 `companion object` 。除了这个细微的变化，我们还可以从 Java 方面轻松映射的方式来处理我们的类型。"

#. type: Title ==
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:64
#, no-wrap
msgid "Using the repository pattern"
msgstr "使用资源库模式"

#. type: Title ===
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:67
#, no-wrap
msgid "Defining your entity"
msgstr "定义你的实体"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:70
msgid "When using the repository pattern, you can define your entities as regular POJO."
msgstr "当使用存储库模式时，你可以将你的实体定义为普通的POJO。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:78
#, no-wrap
msgid ""
"class Person {\n"
"    var id: ObjectId? = null; // used by MongoDB for the _id field\n"
"    lateinit var name: String\n"
"    lateinit var birth: LocalDate\n"
"    lateinit var status: Status\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:80
#, no-wrap
msgid "Defining your repository"
msgstr "定义你的存储库"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:84
msgid "When using Repositories, you get the exact same convenient methods as with the active record pattern, injected in your Repository, by making them implement `PanacheMongoRepository`:"
msgstr "当使用 Repositories 时，你可以得到与活动记录模式完全相同的方便方法，注入到你的 Repository 中，通过它们实现 `PanacheMongoRepository` 。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:93
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class PersonRepository: PanacheMongoRepository<Person> {\n"
"     fun findByName(name: String) = find(\"name\", name).firstResult()\n"
"     fun findAlive() = list(\"status\", Status.Alive)\n"
"     fun deleteStefs() = delete(\"name\", \"Stef\")\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:97
msgid "All the operations that are defined on `PanacheMongoEntityBase` are available on your repository, so using it is exactly the same as using the active record pattern, except you need to inject it:"
msgstr "所有在 `PanacheMongoEntityBase` 上定义的操作都可以在你的版本库上使用，所以使用它与使用active record（活动记录）模式完全一样，只是你需要注入它。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:102
#, no-wrap
msgid ""
"@Inject\n"
"lateinit var personRepository: PersonRepository\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:105
#, no-wrap
msgid ""
"@GET\n"
"fun count() = personRepository.count()\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:107
#, no-wrap
msgid "Most useful operations"
msgstr "最有用的操作"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:110
msgid "Once you have written your repository, here are the most common operations you will be able to perform:"
msgstr "编写存储库后，您可以执行以下最常见的操作："

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:118
#, no-wrap
msgid ""
"// creating a person\n"
"var person = Person()\n"
"person.name = \"Stef\"\n"
"person.birth = LocalDate.of(1910, Month.FEBRUARY, 1)\n"
"person.status = Status.Alive\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:121
#, no-wrap
msgid ""
"// persist it: if you keep the default ObjectId ID field, it will be populated by the MongoDB driver\n"
"personRepository.persist(person)\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:123
#, no-wrap
msgid "person.status = Status.Dead;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:126
#, no-wrap
msgid ""
"// Your must call update() in order to send your entity modifications to MongoDB\n"
"personRepository.update(person);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:130
#, no-wrap
msgid ""
"// delete it\n"
"personRepository.delete(person);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:133
#, no-wrap
msgid ""
"// getting a list of all Person entities\n"
"val allPersons = personRepository.listAll()\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:138
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"// here we build a new ObjectId but you can also retrieve it from the existing entity after being persisted\n"
"ObjectId personId = new ObjectId(idAsString);\n"
"person = personRepository.findById(personId) ?: throw Exception(\"No person with that ID\")\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:141
#, no-wrap
msgid ""
"// finding all living persons\n"
"val livingPersons = personRepository.list(\"status\", Status.Alive)\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:144
#, no-wrap
msgid ""
"// counting all persons\n"
"val countAll = personRepository.count()\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:147
#, no-wrap
msgid ""
"// counting all living persons\n"
"val countAlive = personRepository.count(\"status\", Status.Alive)\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:150
#, no-wrap
msgid ""
"// delete all living persons\n"
"personRepository.delete(\"status\", Status.Alive)\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:153
#, no-wrap
msgid ""
"// delete all persons\n"
"personRepository.deleteAll()\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:156
#, no-wrap
msgid ""
"// delete by id\n"
"val deleted = personRepository.deleteById(personId)\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:159
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"personRepository.update(\"name = 'Mortal' where status = ?1\", Status.Alive)\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:163
msgid "All `list` methods have equivalent `stream` versions."
msgstr "所有 `list` 方法都有相对应的 `stream` 版本。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:170
#, no-wrap
msgid ""
"val persons = personRepository.streamAll();\n"
"val namesButEmmanuels = persons\n"
"    .map { it.name.toLowerCase() }\n"
"    .filter { it != \"emmanuel\" }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:176
msgid "For more examples, please consult the link:mongodb-panache[Java version] for complete details.  Both APIs are the same and work identically except for some Kotlin-specific tweaks to make things feel more natural to Kotlin developers.  These tweaks include things like better use of nullability and the lack of `Optional` on API methods."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:177
#, no-wrap
msgid "Setting up and configuring MongoDB with Panache"
msgstr "使用 Panache 设置和配置 MongoDB"

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:182
msgid "To get started using MongoDB with Panache with Kotlin, you can, generally, follow the steps laid out in the Java tutorial.  The biggest change to configuring your project is the Quarkus artifact to include.  You can, of course, keep the Java version if you need but if all you need are the Kotlin APIs then include the following dependency instead:"
msgstr "要开始使用带有 Kotlin 的 Panache 的 MongoDB，您通常可以按照 Java 教程中列出的步骤进行操作。配置项目的最大变化是要包含的 Quarkus 工件。当然，如果需要，您可以保留 Java 版本，但如果您只需要 Kotlin API，那么请包含以下依赖项："

#. type: delimited block -
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:191
#, no-wrap
msgid ""
"<dependencies>\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-mongodb-panache-kotlin</artifactId>  // <1>\n"
"    </dependency>\n"
"</dependencies>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/mongodb-panache-kotlin.adoc:193
msgid "Note the addition of `-kotlin` on the end.  Generally you'll only need this version but if your project will be using both Java and Kotlin code, you can safely include both artifacts."
msgstr "注意最后添加了 `-kotlin` 。通常你只需要这个版本，但如果你的项目将同时使用 Java 和 Kotlin 代码，你可以安全地包含这两个工件。"
