# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/optaplanner.adoc:6
#, no-wrap
msgid "OptaPlanner - Using AI to optimize a schedule with OptaPlanner"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:13
msgid "This guide walks you through the process of creating a Quarkus application with https://www.optaplanner.org/[OptaPlanner]'s constraint solving Artificial Intelligence (AI)."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/optaplanner.adoc:14
#, no-wrap
msgid "What you will build"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:17
msgid "You will build a REST application that optimizes a school timetable for students and teachers:"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/2.2/guides/optaplanner.adoc:18
#, no-wrap
msgid "optaplanner-time-table-app-screenshot.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:22
msgid "Your service will assign `Lesson` instances to `Timeslot` and `Room` instances automatically by using AI to adhere to hard and soft scheduling _constraints_, such as the following examples:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:24
msgid "A room can have at most one lesson at the same time."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:25
msgid "A teacher can teach at most one lesson at the same time."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:26
msgid "A student can attend at most one lesson at the same time."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:27
msgid "A teacher prefers to teach all lessons in the same room."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:28
msgid "A teacher prefers to teach sequential lessons and dislikes gaps between lessons."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:29
msgid "A student dislikes sequential lessons on the same subject."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:36
msgid "Mathematically speaking, school timetabling is an _NP-hard_ problem.  This means it is difficult to scale.  Simply brute force iterating through all possible combinations takes millions of years for a non-trivial dataset, even on a supercomputer.  Luckily, AI constraint solvers such as OptaPlanner have advanced algorithms that deliver a near-optimal solution in a reasonable amount of time."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/optaplanner.adoc:38
#, no-wrap
msgid "Solution"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:42
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:44
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:46
msgid "The solution is located in {quickstarts-tree-url}/optaplanner-quickstart[the `optaplanner-quickstart` directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/optaplanner.adoc:47
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:50
msgid "To complete this guide, you need:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:52
msgid "about 30 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:53
msgid "an IDE"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:54
msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:55
msgid "Apache Maven {maven-version} or Gradle 4+"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/optaplanner.adoc:56
#, no-wrap
msgid "The build file and the dependencies"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:60
msgid "Use https://code.quarkus.io/[code.quarkus.io] to generate an application with the following extensions, for Maven or Gradle:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:62
msgid "RESTEasy JAX-RS (`quarkus-resteasy`)"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:63
msgid "RESTEasy Jackson (`quarkus-resteasy-jackson`)"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:64
msgid "OptaPlanner (`optaplanner-quarkus`)"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:65
msgid "OptaPlanner Jackson (`optaplanner-quarkus-jackson`)"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:67
msgid "Alternatively, generate it from the command line with Maven:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:76
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=optaplanner-quickstart \\\n"
"    -Dextensions=\"resteasy,resteasy-jackson,optaplanner-quarkus,optaplanner-quarkus-jackson\" \\\n"
"    -DnoExamples\n"
"cd optaplanner-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:79
msgid "In Maven, your `pom.xml` file contains these dependencies:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:117
#, no-wrap
msgid ""
"  <dependencyManagement>\n"
"    <dependencies>\n"
"      <dependency>\n"
"        <groupId>io.quarkus.platform</groupId>\n"
"        <artifactId>quarkus-bom</artifactId>\n"
"        <version>{quarkus-version}</version>\n"
"        <type>pom</type>\n"
"        <scope>import</scope>\n"
"      </dependency>\n"
"      <dependency>\n"
"        <groupId>io.quarkus.platform</groupId>\n"
"        <artifactId>quarkus-optaplanner-bom</artifactId>\n"
"        <version>{quarkus-version}</version>\n"
"        <type>pom</type>\n"
"        <scope>import</scope>\n"
"      </dependency>\n"
"    </dependencies>\n"
"  </dependencyManagement>\n"
"  <dependencies>\n"
"    <dependency>\n"
"      <groupId>io.quarkus</groupId>\n"
"      <artifactId>quarkus-resteasy</artifactId>\n"
"    </dependency>\n"
"    <dependency>\n"
"      <groupId>io.quarkus</groupId>\n"
"      <artifactId>quarkus-resteasy-jackson</artifactId>\n"
"    </dependency>\n"
"    <dependency>\n"
"      <groupId>org.optaplanner</groupId>\n"
"      <artifactId>optaplanner-quarkus</artifactId>\n"
"    </dependency>\n"
"    <dependency>\n"
"      <groupId>org.optaplanner</groupId>\n"
"      <artifactId>optaplanner-quarkus-jackson</artifactId>\n"
"    </dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:124
#, no-wrap
msgid ""
"    <dependency>\n"
"      <groupId>io.quarkus</groupId>\n"
"      <artifactId>quarkus-junit5</artifactId>\n"
"      <scope>test</scope>\n"
"    </dependency>\n"
"  </dependencies>\n"
msgstr ""

#
#
#. On the other hand, in Gradle, your `build.gradle` file contains these dependencies:
#. [source,groovy,subs=attributes+]
#. ----
#. dependencies {
#.     implementation enforcedPlatform("io.quarkus.platform:quarkus-bom:{quarkus-version}")
#.     implementation enforcedPlatform("io.quarkus.platform:quarkus-optaplanner-bom:{quarkus-version}")
#.     implementation 'io.quarkus:quarkus-resteasy'
#.     implementation 'io.quarkus:quarkus-resteasy-jackson'
#.     implementation 'org.optaplanner:optaplanner-quarkus'
#.     implementation 'org.optaplanner:optaplanner-quarkus-jackson'
#.     testImplementation 'io.quarkus:quarkus-junit5'
#. }
#. ----
#. type: Title ==
#: upstream/_versions/2.2/guides/optaplanner.adoc:142
#, no-wrap
msgid "Model the domain objects"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:146
msgid "Your goal is to assign each lesson to a time slot and a room.  You will create these classes:"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/2.2/guides/optaplanner.adoc:147
#, no-wrap
msgid "optaplanner-time-table-class-diagram-pure.png"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/optaplanner.adoc:149
#, no-wrap
msgid "Timeslot"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:155
msgid "The `Timeslot` class represents a time interval when lessons are taught, for example, `Monday 10:30 - 11:30` or `Tuesday 13:30 - 14:30`.  For simplicity's sake, all time slots have the same duration and there are no time slots during lunch or other breaks."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:158
msgid "A time slot has no date, because a high school schedule just repeats every week.  So there is no need for https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/index.html#continuousPlanning[continuous planning]."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:160
msgid "Create the `src/main/java/org/acme/optaplanner/domain/Timeslot.java` class:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:164
#: upstream/_versions/2.2/guides/optaplanner.adoc:221
#: upstream/_versions/2.2/guides/optaplanner.adoc:276
#: upstream/_versions/2.2/guides/optaplanner.adoc:513
#, no-wrap
msgid "package org.acme.optaplanner.domain;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:167
#: upstream/_versions/2.2/guides/optaplanner.adoc:753
#, no-wrap
msgid ""
"import java.time.DayOfWeek;\n"
"import java.time.LocalTime;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:169
#, no-wrap
msgid "public class Timeslot {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:173
#, no-wrap
msgid ""
"    private DayOfWeek dayOfWeek;\n"
"    private LocalTime startTime;\n"
"    private LocalTime endTime;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:176
#, no-wrap
msgid ""
"    public Timeslot() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:182
#, no-wrap
msgid ""
"    public Timeslot(DayOfWeek dayOfWeek, LocalTime startTime, LocalTime endTime) {\n"
"        this.dayOfWeek = dayOfWeek;\n"
"        this.startTime = startTime;\n"
"        this.endTime = endTime;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:186
#, no-wrap
msgid ""
"    public DayOfWeek getDayOfWeek() {\n"
"        return dayOfWeek;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:190
#, no-wrap
msgid ""
"    public LocalTime getStartTime() {\n"
"        return startTime;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:194
#, no-wrap
msgid ""
"    public LocalTime getEndTime() {\n"
"        return endTime;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:199
#, no-wrap
msgid ""
"    @Override\n"
"    public String toString() {\n"
"        return dayOfWeek + \" \" + startTime;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:201
#: upstream/_versions/2.2/guides/optaplanner.adoc:243
#: upstream/_versions/2.2/guides/optaplanner.adoc:344
#: upstream/_versions/2.2/guides/optaplanner.adoc:418
#: upstream/_versions/2.2/guides/optaplanner.adoc:491
#: upstream/_versions/2.2/guides/optaplanner.adoc:564
#: upstream/_versions/2.2/guides/optaplanner.adoc:657
#: upstream/_versions/2.2/guides/optaplanner.adoc:795
#: upstream/_versions/2.2/guides/optaplanner.adoc:885
#: upstream/_versions/2.2/guides/optaplanner.adoc:1039
#: upstream/_versions/2.2/guides/optaplanner.adoc:1099
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:205
msgid "Because no `Timeslot` instances change during solving, a `Timeslot` is called a _problem fact_.  Such classes do not require any OptaPlanner specific annotations."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:208
msgid "Notice the `toString()` method keeps the output short, so it is easier to read OptaPlanner's `DEBUG` or `TRACE` log, as shown later."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/optaplanner.adoc:209
#, no-wrap
msgid "Room"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:215
msgid "The `Room` class represents a location where lessons are taught, for example, `Room A` or `Room B`.  For simplicity's sake, all rooms are without capacity limits and they can accommodate all lessons."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:217
msgid "Create the `src/main/java/org/acme/optaplanner/domain/Room.java` class:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:223
#, no-wrap
msgid "public class Room {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:225
#, no-wrap
msgid "    private String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:228
#, no-wrap
msgid ""
"    public Room() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:232
#, no-wrap
msgid ""
"    public Room(String name) {\n"
"        this.name = name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:236
#, no-wrap
msgid ""
"    public String getName() {\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:241
#, no-wrap
msgid ""
"    @Override\n"
"    public String toString() {\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:246
msgid "`Room` instances do not change during solving, so `Room` is also a _problem fact_."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/optaplanner.adoc:247
#, no-wrap
msgid "Lesson"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:255
msgid "During a lesson, represented by the `Lesson` class, a teacher teaches a subject to a group of students, for example, `Math by A.Turing for 9th grade` or `Chemistry by M.Curie for 10th grade`.  If a subject is taught multiple times per week by the same teacher to the same student group, there are multiple `Lesson` instances that are only distinguishable by `id`.  For example, the 9th grade has six math lessons a week."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:259
msgid "During solving, OptaPlanner changes the `timeslot` and `room` fields of the `Lesson` class, to assign each lesson to a time slot and a room.  Because OptaPlanner changes these fields, `Lesson` is a _planning entity_:"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/2.2/guides/optaplanner.adoc:260
#, no-wrap
msgid "optaplanner-time-table-class-diagram-annotated.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:270
msgid "Most of the fields in the previous diagram contain input data, except for the orange fields: A lesson's `timeslot` and `room` fields are unassigned (`null`) in the input data and assigned (not `null`) in the output data.  OptaPlanner changes these fields during solving.  Such fields are called planning variables.  In order for OptaPlanner to recognize them, both the `timeslot` and `room` fields require an `@PlanningVariable` annotation.  Their containing class, `Lesson`, requires an `@PlanningEntity` annotation."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:272
msgid "Create the `src/main/java/org/acme/optaplanner/domain/Lesson.java` class:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:280
#, no-wrap
msgid ""
"import org.optaplanner.core.api.domain.entity.PlanningEntity;\n"
"import org.optaplanner.core.api.domain.lookup.PlanningId;\n"
"import org.optaplanner.core.api.domain.variable.PlanningVariable;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:283
#, no-wrap
msgid ""
"@PlanningEntity\n"
"public class Lesson {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:286
#, no-wrap
msgid ""
"    @PlanningId\n"
"    private Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:290
#, no-wrap
msgid ""
"    private String subject;\n"
"    private String teacher;\n"
"    private String studentGroup;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:295
#, no-wrap
msgid ""
"    @PlanningVariable(valueRangeProviderRefs = \"timeslotRange\")\n"
"    private Timeslot timeslot;\n"
"    @PlanningVariable(valueRangeProviderRefs = \"roomRange\")\n"
"    private Room room;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:298
#, no-wrap
msgid ""
"    public Lesson() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:305
#, no-wrap
msgid ""
"    public Lesson(Long id, String subject, String teacher, String studentGroup) {\n"
"        this.id = id;\n"
"        this.subject = subject;\n"
"        this.teacher = teacher;\n"
"        this.studentGroup = studentGroup;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:309
#, no-wrap
msgid ""
"    public Long getId() {\n"
"        return id;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:313
#, no-wrap
msgid ""
"    public String getSubject() {\n"
"        return subject;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:317
#, no-wrap
msgid ""
"    public String getTeacher() {\n"
"        return teacher;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:321
#, no-wrap
msgid ""
"    public String getStudentGroup() {\n"
"        return studentGroup;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:325
#, no-wrap
msgid ""
"    public Timeslot getTimeslot() {\n"
"        return timeslot;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:329
#, no-wrap
msgid ""
"    public void setTimeslot(Timeslot timeslot) {\n"
"        this.timeslot = timeslot;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:333
#, no-wrap
msgid ""
"    public Room getRoom() {\n"
"        return room;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:337
#, no-wrap
msgid ""
"    public void setRoom(Room room) {\n"
"        this.room = room;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:342
#, no-wrap
msgid ""
"    @Override\n"
"    public String toString() {\n"
"        return subject + \"(\" + id + \")\";\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:349
msgid "The `Lesson` class has an `@PlanningEntity` annotation, so OptaPlanner knows that this class changes during solving because it contains one or more planning variables."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:355
msgid "The `timeslot` field has an `@PlanningVariable` annotation, so OptaPlanner knows that it can change its value.  In order to find potential `Timeslot` instances to assign to this field, OptaPlanner uses the `valueRangeProviderRefs` property to connect to a value range provider (explained later) that provides a `List<Timeslot>` to pick from."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:357
msgid "The `room` field also has an `@PlanningVariable` annotation, for the same reasons."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/optaplanner.adoc:364
msgid "Determining the `@PlanningVariable` fields for an arbitrary constraint solving use case is often challenging the first time.  Read https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/index.html#domainModelingGuide[the domain modeling guidelines] to avoid common pitfalls."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/optaplanner.adoc:366
#, no-wrap
msgid "Define the constraints and calculate the score"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:372
msgid "A _score_ represents the quality of a specific solution.  The higher the better.  OptaPlanner looks for the best solution, which is the solution with the highest score found in the available time.  It might be the _optimal_ solution."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:375
msgid "Because this use case has hard and soft constraints, use the `HardSoftScore` class to represent the score:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:377
msgid "Hard constraints must not be broken. For example: _A room can have at most one lesson at the same time._"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:378
msgid "Soft constraints should not be broken. For example: _A teacher prefers to teach in a single room._"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:382
msgid "Hard constraints are weighted against other hard constraints.  Soft constraints are weighted too, against other soft constraints.  *Hard constraints always outweigh soft constraints*, regardless of their respective weights."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:384
msgid "To calculate the score, you could implement an `EasyScoreCalculator` class:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:388
#, no-wrap
msgid "public class TimeTableEasyScoreCalculator implements EasyScoreCalculator<TimeTable, HardSoftScore> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:416
#, no-wrap
msgid ""
"    @Override\n"
"    public HardSoftScore calculateScore(TimeTable timeTable) {\n"
"        List<Lesson> lessonList = timeTable.getLessonList();\n"
"        int hardScore = 0;\n"
"        for (Lesson a : lessonList) {\n"
"            for (Lesson b : lessonList) {\n"
"                if (a.getTimeslot() != null && a.getTimeslot().equals(b.getTimeslot())\n"
"                        && a.getId() < b.getId()) {\n"
"                    // A room can accommodate at most one lesson at the same time.\n"
"                    if (a.getRoom() != null && a.getRoom().equals(b.getRoom())) {\n"
"                        hardScore--;\n"
"                    }\n"
"                    // A teacher can teach at most one lesson at the same time.\n"
"                    if (a.getTeacher().equals(b.getTeacher())) {\n"
"                        hardScore--;\n"
"                    }\n"
"                    // A student can attend at most one lesson at the same time.\n"
"                    if (a.getStudentGroup().equals(b.getStudentGroup())) {\n"
"                        hardScore--;\n"
"                    }\n"
"                }\n"
"            }\n"
"        }\n"
"        int softScore = 0;\n"
"        // Soft constraints are only implemented in the optaplanner-quickstarts code\n"
"        return HardSoftScore.of(hardScore, softScore);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:423
msgid "Unfortunately **that does not scale well**, because it is non-incremental: every time a lesson is assigned to a different time slot or room, all lessons are re-evaluated to calculate the new score."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:427
msgid "Instead, create a `src/main/java/org/acme/optaplanner/solver/TimeTableConstraintProvider.java` class to perform incremental score calculation.  It uses OptaPlanner's ConstraintStream API which is inspired by Java Streams and SQL:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:431
#: upstream/_versions/2.2/guides/optaplanner.adoc:750
#, no-wrap
msgid "package org.acme.optaplanner.solver;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:438
#, no-wrap
msgid ""
"import org.acme.optaplanner.domain.Lesson;\n"
"import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;\n"
"import org.optaplanner.core.api.score.stream.Constraint;\n"
"import org.optaplanner.core.api.score.stream.ConstraintFactory;\n"
"import org.optaplanner.core.api.score.stream.ConstraintProvider;\n"
"import org.optaplanner.core.api.score.stream.Joiners;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:440
#, no-wrap
msgid "public class TimeTableConstraintProvider implements ConstraintProvider {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:451
#, no-wrap
msgid ""
"    @Override\n"
"    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n"
"        return new Constraint[] {\n"
"                // Hard constraints\n"
"                roomConflict(constraintFactory),\n"
"                teacherConflict(constraintFactory),\n"
"                studentGroupConflict(constraintFactory),\n"
"                // Soft constraints are only implemented in the optaplanner-quickstarts code\n"
"        };\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:454
#, no-wrap
msgid ""
"    private Constraint roomConflict(ConstraintFactory constraintFactory) {\n"
"        // A room can accommodate at most one lesson at the same time.\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:469
#, no-wrap
msgid ""
"        // Select a lesson ...\n"
"        return constraintFactory\n"
"                .from(Lesson.class)\n"
"                // ... and pair it with another lesson ...\n"
"                .join(Lesson.class,\n"
"                        // ... in the same timeslot ...\n"
"                        Joiners.equal(Lesson::getTimeslot),\n"
"                        // ... in the same room ...\n"
"                        Joiners.equal(Lesson::getRoom),\n"
"                        // ... and the pair is unique (different id, no reverse pairs) ...\n"
"                        Joiners.lessThan(Lesson::getId))\n"
"                // ... then penalize each pair with a hard weight.\n"
"                .penalize(\"Room conflict\", HardSoftScore.ONE_HARD);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:479
#, no-wrap
msgid ""
"    private Constraint teacherConflict(ConstraintFactory constraintFactory) {\n"
"        // A teacher can teach at most one lesson at the same time.\n"
"        return constraintFactory.from(Lesson.class)\n"
"                .join(Lesson.class,\n"
"                        Joiners.equal(Lesson::getTimeslot),\n"
"                        Joiners.equal(Lesson::getTeacher),\n"
"                        Joiners.lessThan(Lesson::getId))\n"
"                .penalize(\"Teacher conflict\", HardSoftScore.ONE_HARD);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:489
#, no-wrap
msgid ""
"    private Constraint studentGroupConflict(ConstraintFactory constraintFactory) {\n"
"        // A student can attend at most one lesson at the same time.\n"
"        return constraintFactory.from(Lesson.class)\n"
"                .join(Lesson.class,\n"
"                        Joiners.equal(Lesson::getTimeslot),\n"
"                        Joiners.equal(Lesson::getStudentGroup),\n"
"                        Joiners.lessThan(Lesson::getId))\n"
"                .penalize(\"Student group conflict\", HardSoftScore.ONE_HARD);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:494
msgid "The `ConstraintProvider` scales an order of magnitude better than the `EasyScoreCalculator`: __O__(n) instead of __O__(n²)."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/optaplanner.adoc:495
#, no-wrap
msgid "Gather the domain objects in a planning solution"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:500
msgid "A `TimeTable` wraps all `Timeslot`, `Room`, and `Lesson` instances of a single dataset.  Furthermore, because it contains all lessons, each with a specific planning variable state, it is a _planning solution_ and it has a score:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:503
msgid "If lessons are still unassigned, then it is an _uninitialized_ solution, for example, a solution with the score `-4init/0hard/0soft`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:505
msgid "If it breaks hard constraints, then it is an _infeasible_ solution, for example, a solution with the score `-2hard/-3soft`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:507
msgid "If it adheres to all hard constraints, then it is a _feasible_ solution, for example, a solution with the score `0hard/-7soft`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:509
msgid "Create the `src/main/java/org/acme/optaplanner/domain/TimeTable.java` class:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:515
#, no-wrap
msgid "import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:522
#, no-wrap
msgid ""
"import org.optaplanner.core.api.domain.solution.PlanningEntityCollectionProperty;\n"
"import org.optaplanner.core.api.domain.solution.PlanningScore;\n"
"import org.optaplanner.core.api.domain.solution.PlanningSolution;\n"
"import org.optaplanner.core.api.domain.solution.ProblemFactCollectionProperty;\n"
"import org.optaplanner.core.api.domain.valuerange.ValueRangeProvider;\n"
"import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:525
#, no-wrap
msgid ""
"@PlanningSolution\n"
"public class TimeTable {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:534
#, no-wrap
msgid ""
"    @ValueRangeProvider(id = \"timeslotRange\")\n"
"    @ProblemFactCollectionProperty\n"
"    private List<Timeslot> timeslotList;\n"
"    @ValueRangeProvider(id = \"roomRange\")\n"
"    @ProblemFactCollectionProperty\n"
"    private List<Room> roomList;\n"
"    @PlanningEntityCollectionProperty\n"
"    private List<Lesson> lessonList;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:537
#, no-wrap
msgid ""
"    @PlanningScore\n"
"    private HardSoftScore score;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:540
#, no-wrap
msgid ""
"    public TimeTable() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:546
#, no-wrap
msgid ""
"    public TimeTable(List<Timeslot> timeslotList, List<Room> roomList, List<Lesson> lessonList) {\n"
"        this.timeslotList = timeslotList;\n"
"        this.roomList = roomList;\n"
"        this.lessonList = lessonList;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:550
#, no-wrap
msgid ""
"    public List<Timeslot> getTimeslotList() {\n"
"        return timeslotList;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:554
#, no-wrap
msgid ""
"    public List<Room> getRoomList() {\n"
"        return roomList;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:558
#, no-wrap
msgid ""
"    public List<Lesson> getLessonList() {\n"
"        return lessonList;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:562
#, no-wrap
msgid ""
"    public HardSoftScore getScore() {\n"
"        return score;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:568
msgid "The `TimeTable` class has an `@PlanningSolution` annotation, so OptaPlanner knows that this class contains all of the input and output data."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:570
msgid "Specifically, this class is the input of the problem:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:572
msgid "A `timeslotList` field with all time slots"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:573
#: upstream/_versions/2.2/guides/optaplanner.adoc:575
msgid "This is a list of problem facts, because they do not change during solving."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:574
msgid "A `roomList` field with all rooms"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:576
msgid "A `lessonList` field with all lessons"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:577
msgid "This is a list of planning entities, because they change during solving."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:578
msgid "Of each `Lesson`:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:580
msgid "The values of the `timeslot` and `room` fields are typically still `null`, so unassigned.  They are planning variables."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:582
msgid "The other fields, such as `subject`, `teacher` and `studentGroup`, are filled in.  These fields are problem properties."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:584
msgid "However, this class is also the output of the solution:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:586
msgid "A `lessonList` field for which each `Lesson` instance has non-null `timeslot` and `room` fields after solving"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:587
msgid "A `score` field that represents the quality of the output solution, for example, `0hard/-5soft`"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/optaplanner.adoc:588
#, no-wrap
msgid "The value range providers"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:594
msgid "The `timeslotList` field is a value range provider.  It holds the `Timeslot` instances which OptaPlanner can pick from to assign to the `timeslot` field of `Lesson` instances.  The `timeslotList` field has an `@ValueRangeProvider` annotation to connect the `@PlanningVariable` with the `@ValueRangeProvider`, by matching the value of the `id` property with the value of the `valueRangeProviderRefs` property of the `@PlanningVariable` annotation in the `Lesson` class."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:596
msgid "Following the same logic, the `roomList` field also has an `@ValueRangeProvider` annotation."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/optaplanner.adoc:597
#, no-wrap
msgid "The problem fact and planning entity properties"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:602
msgid "Furthermore, OptaPlanner needs to know which `Lesson` instances it can change as well as how to retrieve the `Timeslot` and `Room` instances used for score calculation by your `TimeTableConstraintProvider`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:605
msgid "The `timeslotList` and `roomList` fields have an `@ProblemFactCollectionProperty` annotation, so your `TimeTableConstraintProvider` can select _from_ those instances."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:609
msgid "The `lessonList` has an `@PlanningEntityCollectionProperty` annotation, so OptaPlanner can change them during solving and your `TimeTableConstraintProvider` can select _from_ those too."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/optaplanner.adoc:610
#, no-wrap
msgid "Create the solver service"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:617
msgid "Now you are ready to put everything together and create a REST service.  But solving planning problems on REST threads causes HTTP timeout issues.  Therefore, the Quarkus extension injects a `SolverManager` instance, which runs solvers in a separate thread pool and can solve multiple datasets in parallel."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:619
msgid "Create the `src/main/java/org/acme/optaplanner/rest/TimeTableResource.java` class:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:623
#: upstream/_versions/2.2/guides/optaplanner.adoc:816
#: upstream/_versions/2.2/guides/optaplanner.adoc:958
#: upstream/_versions/2.2/guides/optaplanner.adoc:1059
#, no-wrap
msgid "package org.acme.optaplanner.rest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:629
#, no-wrap
msgid ""
"import java.util.UUID;\n"
"import java.util.concurrent.ExecutionException;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:633
#, no-wrap
msgid ""
"import org.acme.optaplanner.domain.TimeTable;\n"
"import org.optaplanner.core.api.solver.SolverJob;\n"
"import org.optaplanner.core.api.solver.SolverManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:636
#: upstream/_versions/2.2/guides/optaplanner.adoc:977
#, no-wrap
msgid ""
"@Path(\"/timeTable\")\n"
"public class TimeTableResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:639
#, no-wrap
msgid ""
"    @Inject\n"
"    SolverManager<TimeTable, UUID> solverManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:655
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/solve\")\n"
"    public TimeTable solve(TimeTable problem) {\n"
"        UUID problemId = UUID.randomUUID();\n"
"        // Submit the problem to start solving\n"
"        SolverJob<TimeTable, UUID> solverJob = solverManager.solve(problemId, problem);\n"
"        TimeTable solution;\n"
"        try {\n"
"            // Wait until the solving ends\n"
"            solution = solverJob.getFinalBestSolution();\n"
"        } catch (InterruptedException | ExecutionException e) {\n"
"            throw new IllegalStateException(\"Solving failed.\", e);\n"
"        }\n"
"        return solution;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:662
msgid "For simplicity's sake, this initial implementation waits for the solver to finish, which can still cause an HTTP timeout.  The _complete_ implementation avoids HTTP timeouts much more elegantly."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/optaplanner.adoc:663
#, no-wrap
msgid "Set the termination time"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:668
msgid "Without a termination setting or a termination event, the solver runs forever.  To avoid that, limit the solving time to five seconds.  That is short enough to avoid the HTTP timeout."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:670
msgid "Create the `src/main/resources/application.properties` file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:676
#, no-wrap
msgid ""
"# The solver runs only for 5 seconds to avoid a HTTP timeout in this simple implementation.\n"
"# It's recommended to run for at least 5 minutes (\"5m\") otherwise.\n"
"quarkus.optaplanner.solver.termination.spent-limit=5s\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/optaplanner.adoc:679
#, no-wrap
msgid "Run the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:682
msgid "First start the application:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:686
#, no-wrap
msgid "$ ./mvnw compile quarkus:dev\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/optaplanner.adoc:688
#, no-wrap
msgid "Try the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:693
msgid "Now that the application is running, you can test the REST service.  You can use any REST client you wish.  The following example uses the Linux command `curl` to send a POST request:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:697
#, no-wrap
msgid "$ curl -i -X POST http://localhost:8080/timeTable/solve -H \"Content-Type:application/json\" -d '{\"timeslotList\":[{\"dayOfWeek\":\"MONDAY\",\"startTime\":\"08:30:00\",\"endTime\":\"09:30:00\"},{\"dayOfWeek\":\"MONDAY\",\"startTime\":\"09:30:00\",\"endTime\":\"10:30:00\"}],\"roomList\":[{\"name\":\"Room A\"},{\"name\":\"Room B\"}],\"lessonList\":[{\"id\":1,\"subject\":\"Math\",\"teacher\":\"A. Turing\",\"studentGroup\":\"9th grade\"},{\"id\":2,\"subject\":\"Chemistry\",\"teacher\":\"M. Curie\",\"studentGroup\":\"9th grade\"},{\"id\":3,\"subject\":\"French\",\"teacher\":\"M. Curie\",\"studentGroup\":\"10th grade\"},{\"id\":4,\"subject\":\"History\",\"teacher\":\"I. Jones\",\"studentGroup\":\"10th grade\"}]}'\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:701
msgid "After about five seconds, according to the termination spent time defined in your `application.properties`, the service returns an output similar to the following example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:707
#, no-wrap
msgid ""
"HTTP/1.1 200\n"
"Content-Type: application/json\n"
"...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:709
#, no-wrap
msgid "{\"timeslotList\":...,\"roomList\":...,\"lessonList\":[{\"id\":1,\"subject\":\"Math\",\"teacher\":\"A. Turing\",\"studentGroup\":\"9th grade\",\"timeslot\":{\"dayOfWeek\":\"MONDAY\",\"startTime\":\"08:30:00\",\"endTime\":\"09:30:00\"},\"room\":{\"name\":\"Room A\"}},{\"id\":2,\"subject\":\"Chemistry\",\"teacher\":\"M. Curie\",\"studentGroup\":\"9th grade\",\"timeslot\":{\"dayOfWeek\":\"MONDAY\",\"startTime\":\"09:30:00\",\"endTime\":\"10:30:00\"},\"room\":{\"name\":\"Room A\"}},{\"id\":3,\"subject\":\"French\",\"teacher\":\"M. Curie\",\"studentGroup\":\"10th grade\",\"timeslot\":{\"dayOfWeek\":\"MONDAY\",\"startTime\":\"08:30:00\",\"endTime\":\"09:30:00\"},\"room\":{\"name\":\"Room B\"}},{\"id\":4,\"subject\":\"History\",\"teacher\":\"I. Jones\",\"studentGroup\":\"10th grade\",\"timeslot\":{\"dayOfWeek\":\"MONDAY\",\"startTime\":\"09:30:00\",\"endTime\":\"10:30:00\"},\"room\":{\"name\":\"Room B\"}}],\"score\":\"0hard/0soft\"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:714
msgid "Notice that your application assigned all four lessons to one of the two time slots and one of the two rooms.  Also notice that it conforms to all hard constraints.  For example, M. Curie's two lessons are in different time slots."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:716
msgid "On the server side, the `info` log show what OptaPlanner did in those five seconds:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:723
#, no-wrap
msgid ""
"... Solving started: time spent (33), best score (-8init/0hard/0soft), environment mode (REPRODUCIBLE), random (JDK with seed 0).\n"
"... Construction Heuristic phase (0) ended: time spent (73), best score (0hard/0soft), score calculation speed (459/sec), step total (4).\n"
"... Local Search phase (1) ended: time spent (5000), best score (0hard/0soft), score calculation speed (28949/sec), step total (28398).\n"
"... Solving ended: time spent (5000), best score (0hard/0soft), score calculation speed (28524/sec), phase total (2), environment mode (REPRODUCIBLE).\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/optaplanner.adoc:725
#, no-wrap
msgid "Test the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:728
msgid "A good application includes test coverage."
msgstr ""

#. type: Title ====
#: upstream/_versions/2.2/guides/optaplanner.adoc:729
#, no-wrap
msgid "Test the constraints"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:734
msgid "To test each constraint in isolation, use a `ConstraintVerifier` in unit tests.  It tests each constraint's corner cases in isolation from the other tests, which lowers maintenance when adding a new constraint with proper test coverage."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:736
msgid "Add a `optaplanner-test` dependency in your `pom.xml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:743
#, no-wrap
msgid ""
"    <dependency>\n"
"      <groupId>org.optaplanner</groupId>\n"
"      <artifactId>optaplanner-test</artifactId>\n"
"      <scope>test</scope>\n"
"    </dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:746
msgid "Create the `src/test/java/org/acme/optaplanner/solver/TimeTableConstraintProviderTest.java` class:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:755
#: upstream/_versions/2.2/guides/optaplanner.adoc:823
#: upstream/_versions/2.2/guides/optaplanner.adoc:1061
#, no-wrap
msgid "import javax.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:763
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.acme.optaplanner.domain.Lesson;\n"
"import org.acme.optaplanner.domain.Room;\n"
"import org.acme.optaplanner.domain.TimeTable;\n"
"import org.acme.optaplanner.domain.Timeslot;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.optaplanner.test.api.score.stream.ConstraintVerifier;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:766
#, no-wrap
msgid ""
"@QuarkusTest\n"
"class TimeTableConstraintProviderTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:770
#, no-wrap
msgid ""
"    private static final Room ROOM = new Room(\"Room1\");\n"
"    private static final Timeslot TIMESLOT1 = new Timeslot(DayOfWeek.MONDAY, LocalTime.of(9,0), LocalTime.NOON);\n"
"    private static final Timeslot TIMESLOT2 = new Timeslot(DayOfWeek.TUESDAY, LocalTime.of(9,0), LocalTime.NOON);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:773
#, no-wrap
msgid ""
"    @Inject\n"
"    ConstraintVerifier<TimeTableConstraintProvider, TimeTable> constraintVerifier;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:779
#, no-wrap
msgid ""
"    @Test\n"
"    void roomConflict() {\n"
"        Lesson firstLesson = new Lesson(1, \"Subject1\", \"Teacher1\", \"Group1\");\n"
"        Lesson conflictingLesson = new Lesson(2, \"Subject2\", \"Teacher2\", \"Group2\");\n"
"        Lesson nonConflictingLesson = new Lesson(3, \"Subject3\", \"Teacher3\", \"Group3\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:782
#, no-wrap
msgid ""
"        firstLesson.setRoom(ROOM);\n"
"        firstLesson.setTimeslot(TIMESLOT1);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:785
#, no-wrap
msgid ""
"        conflictingLesson.setRoom(ROOM);\n"
"        conflictingLesson.setTimeslot(TIMESLOT1);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:788
#, no-wrap
msgid ""
"        nonConflictingLesson.setRoom(ROOM);\n"
"        nonConflictingLesson.setTimeslot(TIMESLOT2);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:793
#, no-wrap
msgid ""
"        constraintVerifier.verifyThat(TimeTableConstraintProvider::roomConflict)\n"
"                .given(firstLesson, conflictingLesson, nonConflictingLesson)\n"
"                .penalizesBy(1);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:801
msgid "This test verifies that the constraint `TimeTableConstraintProvider::roomConflict`, when given three lessons in the same room, where two lessons have the same timeslot, it penalizes with a match weight of `1`.  So with a constraint weight of `10hard` it would reduce the score by `-10hard`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:806
msgid "Notice how `ConstraintVerifier` ignores the constraint weight during testing - even if those constraint weights are hard coded in the `ConstraintProvider` - because constraints weights change regularly before going into production.  This way, constraint weight tweaking does not break the unit tests."
msgstr ""

#. type: Title ====
#: upstream/_versions/2.2/guides/optaplanner.adoc:807
#, no-wrap
msgid "Test the solver"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:810
msgid "In a JUnit test, generate a test dataset and send it to the `TimeTableResource` to solve."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:812
msgid "Create the `src/test/java/org/acme/optaplanner/rest/TimeTableResourceTest.java` class:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:821
#, no-wrap
msgid ""
"import java.time.DayOfWeek;\n"
"import java.time.LocalTime;\n"
"import java.util.ArrayList;\n"
"import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:832
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.acme.optaplanner.domain.Room;\n"
"import org.acme.optaplanner.domain.Timeslot;\n"
"import org.acme.optaplanner.domain.Lesson;\n"
"import org.acme.optaplanner.domain.TimeTable;\n"
"import org.acme.optaplanner.rest.TimeTableResource;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.junit.jupiter.api.Timeout;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:836
#: upstream/_versions/2.2/guides/optaplanner.adoc:1072
#, no-wrap
msgid ""
"import static org.junit.jupiter.api.Assertions.assertFalse;\n"
"import static org.junit.jupiter.api.Assertions.assertNotNull;\n"
"import static org.junit.jupiter.api.Assertions.assertTrue;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:839
#: upstream/_versions/2.2/guides/optaplanner.adoc:1075
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class TimeTableResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:842
#: upstream/_versions/2.2/guides/optaplanner.adoc:1078
#, no-wrap
msgid ""
"    @Inject\n"
"    TimeTableResource timeTableResource;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:855
#, no-wrap
msgid ""
"    @Test\n"
"    @Timeout(600_000)\n"
"    public void solve() {\n"
"        TimeTable problem = generateProblem();\n"
"        TimeTable solution = timeTableResource.solve(problem);\n"
"        assertFalse(solution.getLessonList().isEmpty());\n"
"        for (Lesson lesson : solution.getLessonList()) {\n"
"            assertNotNull(lesson.getTimeslot());\n"
"            assertNotNull(lesson.getRoom());\n"
"        }\n"
"        assertTrue(solution.getScore().isFeasible());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:863
#, no-wrap
msgid ""
"    private TimeTable generateProblem() {\n"
"        List<Timeslot> timeslotList = new ArrayList<>();\n"
"        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(8, 30), LocalTime.of(9, 30)));\n"
"        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(9, 30), LocalTime.of(10, 30)));\n"
"        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(10, 30), LocalTime.of(11, 30)));\n"
"        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(13, 30), LocalTime.of(14, 30)));\n"
"        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(14, 30), LocalTime.of(15, 30)));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:868
#, no-wrap
msgid ""
"        List<Room> roomList = new ArrayList<>();\n"
"        roomList.add(new Room(\"Room A\"));\n"
"        roomList.add(new Room(\"Room B\"));\n"
"        roomList.add(new Room(\"Room C\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:875
#, no-wrap
msgid ""
"        List<Lesson> lessonList = new ArrayList<>();\n"
"        lessonList.add(new Lesson(101L, \"Math\", \"B. May\", \"9th grade\"));\n"
"        lessonList.add(new Lesson(102L, \"Physics\", \"M. Curie\", \"9th grade\"));\n"
"        lessonList.add(new Lesson(103L, \"Geography\", \"M. Polo\", \"9th grade\"));\n"
"        lessonList.add(new Lesson(104L, \"English\", \"I. Jones\", \"9th grade\"));\n"
"        lessonList.add(new Lesson(105L, \"Spanish\", \"P. Cruz\", \"9th grade\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:883
#, no-wrap
msgid ""
"        lessonList.add(new Lesson(201L, \"Math\", \"B. May\", \"10th grade\"));\n"
"        lessonList.add(new Lesson(202L, \"Chemistry\", \"M. Curie\", \"10th grade\"));\n"
"        lessonList.add(new Lesson(203L, \"History\", \"I. Jones\", \"10th grade\"));\n"
"        lessonList.add(new Lesson(204L, \"English\", \"P. Cruz\", \"10th grade\"));\n"
"        lessonList.add(new Lesson(205L, \"French\", \"M. Curie\", \"10th grade\"));\n"
"        return new TimeTable(timeslotList, roomList, lessonList);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:889
msgid "This test verifies that after solving, all lessons are assigned to a time slot and a room.  It also verifies that it found a feasible solution (no hard constraints broken)."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:891
msgid "Add test properties to the `src/main/resources/application.properties` file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:895
#, no-wrap
msgid "quarkus.optaplanner.solver.termination.spent-limit=5s\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:899
#, no-wrap
msgid ""
"# Effectively disable spent-time termination in favor of the best-score-limit\n"
"%test.quarkus.optaplanner.solver.termination.spent-limit=1h\n"
"%test.quarkus.optaplanner.solver.termination.best-score-limit=0hard/*soft\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:907
msgid "Normally, the solver finds a feasible solution in less than 200 milliseconds.  Notice how the `application.properties` overwrites the solver termination during tests to terminate as soon as a feasible solution (`0hard/*soft`) is found.  This avoids hard coding a solver time, because the unit test might run on arbitrary hardware.  This approach ensures that the test runs long enough to find a feasible solution, even on slow machines.  But it does not run a millisecond longer than it strictly must, even on fast machines."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/optaplanner.adoc:908
#, no-wrap
msgid "Logging"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:913
msgid "When adding constraints in your `ConstraintProvider`, keep an eye on the _score calculation speed_ in the `info` log, after solving for the same amount of time, to assess the performance impact:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:917
#, no-wrap
msgid "... Solving ended: ..., score calculation speed (29455/sec), ...\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:921
msgid "To understand how OptaPlanner is solving your problem internally, change the logging in the `application.properties` file or with a `-D` system property:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:925
#, no-wrap
msgid "quarkus.log.category.\"org.optaplanner\".level=debug\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:928
msgid "Use `debug` logging to show every _step_:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:935
#, no-wrap
msgid ""
"... Solving started: time spent (67), best score (-20init/0hard/0soft), environment mode (REPRODUCIBLE), random (JDK with seed 0).\n"
"...     CH step (0), time spent (128), score (-18init/0hard/0soft), selected move count (15), picked move ([Math(101) {null -> Room A}, Math(101) {null -> MONDAY 08:30}]).\n"
"...     CH step (1), time spent (145), score (-16init/0hard/0soft), selected move count (15), picked move ([Physics(102) {null -> Room A}, Physics(102) {null -> MONDAY 09:30}]).\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:938
msgid "Use `trace` logging to show every _step_ and every _move_ per step."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/optaplanner.adoc:939
#, no-wrap
msgid "Summary"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:943
msgid "Congratulations! You have just developed a Quarkus application with https://www.optaplanner.org/[OptaPlanner]!"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/optaplanner.adoc:944
#, no-wrap
msgid "Further improvements: Database and UI integration"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:947
msgid "Now try adding database and UI integration:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:949
msgid "Store `Timeslot`, `Room`, and `Lesson` in the database with link:hibernate-orm-panache[Hibernate and Panache]."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:951
msgid "link:rest-json[Expose them through REST]."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:954
msgid "Adjust the `TimeTableResource` to read and write a `TimeTable` instance in a single transaction and use those accordingly:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:964
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.transaction.Transactional;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:974
#, no-wrap
msgid ""
"import io.quarkus.panache.common.Sort;\n"
"import org.acme.optaplanner.domain.Lesson;\n"
"import org.acme.optaplanner.domain.Room;\n"
"import org.acme.optaplanner.domain.TimeTable;\n"
"import org.acme.optaplanner.domain.Timeslot;\n"
"import org.optaplanner.core.api.score.ScoreManager;\n"
"import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;\n"
"import org.optaplanner.core.api.solver.SolverManager;\n"
"import org.optaplanner.core.api.solver.SolverStatus;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:979
#, no-wrap
msgid "    public static final Long SINGLETON_TIME_TABLE_ID = 1L;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:984
#, no-wrap
msgid ""
"    @Inject\n"
"    SolverManager<TimeTable, Long> solverManager;\n"
"    @Inject\n"
"    ScoreManager<TimeTable, HardSoftScore> scoreManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:996
#, no-wrap
msgid ""
"    // To try, open http://localhost:8080/timeTable\n"
"    @GET\n"
"    public TimeTable getTimeTable() {\n"
"        // Get the solver status before loading the solution\n"
"        // to avoid the race condition that the solver terminates between them\n"
"        SolverStatus solverStatus = getSolverStatus();\n"
"        TimeTable solution = findById(SINGLETON_TIME_TABLE_ID);\n"
"        scoreManager.updateScore(solution); // Sets the score\n"
"        solution.setSolverStatus(solverStatus);\n"
"        return solution;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:1004
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/solve\")\n"
"    public void solve() {\n"
"        solverManager.solveAndListen(SINGLETON_TIME_TABLE_ID,\n"
"                this::findById,\n"
"                this::save);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:1008
#, no-wrap
msgid ""
"    public SolverStatus getSolverStatus() {\n"
"        return solverManager.getSolverStatus(SINGLETON_TIME_TABLE_ID);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:1014
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/stopSolving\")\n"
"    public void stopSolving() {\n"
"        solverManager.terminateEarly(SINGLETON_TIME_TABLE_ID);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:1027
#, no-wrap
msgid ""
"    @Transactional\n"
"    protected TimeTable findById(Long id) {\n"
"        if (!SINGLETON_TIME_TABLE_ID.equals(id)) {\n"
"            throw new IllegalStateException(\"There is no timeTable with id (\" + id + \").\");\n"
"        }\n"
"        // Occurs in a single transaction, so each initialized lesson references the same timeslot/room instance\n"
"        // that is contained by the timeTable's timeslotList/roomList.\n"
"        return new TimeTable(\n"
"                Timeslot.listAll(Sort.by(\"dayOfWeek\").and(\"startTime\").and(\"endTime\").and(\"id\")),\n"
"                Room.listAll(Sort.by(\"name\").and(\"id\")),\n"
"                Lesson.listAll(Sort.by(\"subject\").and(\"teacher\").and(\"studentGroup\").and(\"id\")));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:1037
#, no-wrap
msgid ""
"    @Transactional\n"
"    protected void save(TimeTable timeTable) {\n"
"        for (Lesson lesson : timeTable.getLessonList()) {\n"
"            // TODO this is awfully naive: optimistic locking causes issues if called by the SolverManager\n"
"            Lesson attachedLesson = Lesson.findById(lesson.getId());\n"
"            attachedLesson.setTimeslot(lesson.getTimeslot());\n"
"            attachedLesson.setRoom(lesson.getRoom());\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:1043
msgid "For simplicity's sake, this code handles only one `TimeTable` instance, but it is straightforward to enable multi-tenancy and handle multiple `TimeTable` instances of different high schools in parallel."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:1047
msgid "The `getTimeTable()` method returns the latest timetable from the database.  It uses the `ScoreManager` (which is automatically injected)  to calculate the score of that timetable, so the UI can show the score."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:1052
msgid "The `solve()` method starts a job to solve the current timetable and store the time slot and room assignments in the database.  It uses the `SolverManager.solveAndListen()` method to listen to intermediate best solutions and update the database accordingly.  This enables the UI to show progress while the backend is still solving."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:1055
msgid "Adjust the `TimeTableResourceTest` instance accordingly, now that the `solve()` method returns immediately.  Poll for the latest solution until the solver finishes solving:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:1068
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.acme.optaplanner.domain.Lesson;\n"
"import org.acme.optaplanner.domain.TimeTable;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.junit.jupiter.api.Timeout;\n"
"import org.optaplanner.core.api.solver.SolverStatus;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/optaplanner.adoc:1097
#, no-wrap
msgid ""
"    @Test\n"
"    @Timeout(600_000)\n"
"    public void solveDemoDataUntilFeasible() throws InterruptedException {\n"
"        timeTableResource.solve();\n"
"        TimeTable timeTable = timeTableResource.getTimeTable();\n"
"        while (timeTable.getSolverStatus() != SolverStatus.NOT_SOLVING) {\n"
"            // Quick polling (not a Test Thread Sleep anti-pattern)\n"
"            // Test is still fast on fast machines and doesn't randomly fail on slow machines.\n"
"            Thread.sleep(20L);\n"
"            timeTable = timeTableResource.getTimeTable();\n"
"        }\n"
"        assertFalse(timeTable.getLessonList().isEmpty());\n"
"        for (Lesson lesson : timeTable.getLessonList()) {\n"
"            assertNotNull(lesson.getTimeslot());\n"
"            assertNotNull(lesson.getRoom());\n"
"        }\n"
"        assertTrue(timeTable.getScore().isFeasible());\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:1102
msgid "Build an attractive web UI on top of these REST methods to visualize the timetable."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/optaplanner.adoc:1103
msgid "Take a look at {quickstarts-tree-url}/optaplanner-quickstart[the quickstart source code] to see how this all turns out."
msgstr ""
