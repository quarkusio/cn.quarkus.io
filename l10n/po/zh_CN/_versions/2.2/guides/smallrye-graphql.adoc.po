# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:6
#, no-wrap
msgid "SmallRye GraphQL"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:12
msgid "This guide demonstrates how your Quarkus application can use https://github.com/smallrye/smallrye-graphql/[SmallRye GraphQL], an implementation of the https://github.com/eclipse/microprofile-graphql/[MicroProfile GraphQL] specification."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:14
msgid "As the https://www.graphql.org/[GraphQL] specification website states:"
msgstr ""

#. type: quote
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:20
msgid "GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data.  GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools."
msgstr ""

#. type: quote
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:23
#, no-wrap
msgid ""
"**GraphQL** was originally developed by **Facebook** in 2012 and has been\n"
"an open standard since 2015.\n"
msgstr ""

#. type: quote
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:26
msgid "GraphQL is not a replacement for REST API specification but merely an alternative. Unlike REST, GraphQL API's have the ability to benefit the client by:"
msgstr ""

#. type: Labeled list
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:27
#, no-wrap
msgid "Preventing Over-fetching and Under-fetching"
msgstr ""

#. type: quote
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:33
msgid "REST API's are server-driven fixed data responses that cannot be determined by the client. Although the client does not require all the fields the client must retrieve all the data hence `Over-fetching`. A client may also require multiple REST API calls according to the first call (HATEOAS) to retrieve all the data that is required thereby `Under-fetching`."
msgstr ""

#. type: Labeled list
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:34
#, no-wrap
msgid "API Evolution"
msgstr ""

#. type: quote
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:38
msgid "Since GraphQL API's returns data that are requested by the client adding additional fields and capabilities to existing API will not create breaking changes to existing clients."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:39
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: quote
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:42
msgid "To complete this guide, you need:"
msgstr ""

#. type: quote
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:44
msgid "less than 15 minutes"
msgstr ""

#. type: quote
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:45
msgid "an IDE"
msgstr ""

#. type: quote
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:46
msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
msgstr ""

#. type: quote
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:47
msgid "Apache Maven {maven-version}"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:48
#, no-wrap
msgid "Architecture"
msgstr ""

#. type: quote
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:52
msgid "In this guide, we build a simple GraphQL application that exposes a GraphQL API at `/graphql`."
msgstr ""

#. type: quote
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:54
msgid "This example was inspired by a popular GraphQL API."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:55
#, no-wrap
msgid "Solution"
msgstr ""

#. type: quote
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:59
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr ""

#. type: quote
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:61
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: quote
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:63
msgid "The solution is located in the `microprofile-graphql-quickstart` {quickstarts-tree-url}/microprofile-graphql-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:64
#, no-wrap
msgid "Creating the Maven Project"
msgstr ""

#. type: quote
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:67
msgid "First, we need a new project. Create a new project with the following command:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:76
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=microprofile-graphql-quickstart \\\n"
"    -DclassName=\"org.acme.microprofile.graphql.FilmResource\" \\\n"
"    -Dextensions=\"resteasy,graphql\"\n"
"cd microprofile-graphql-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:79
msgid "This command generates a Maven project, importing the `smallrye-graphql` extension."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:82
msgid "If you already have your Quarkus project configured, you can add the `smallrye-graphql` extension to your project by running the following command in your project base directory:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:86
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"graphql\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:89
msgid "This will add the following to your `pom.xml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:96
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-graphql</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:98
#, no-wrap
msgid "Preparing an Application: GraphQL API"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:101
msgid "In this section we will start creating the GraphQL API."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:103
msgid "First, create the following entities representing a film from a galaxy far far away:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:107
#, no-wrap
msgid "package org.acme.microprofile.graphql;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:109
#, no-wrap
msgid "public class Film {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:114
#, no-wrap
msgid ""
"    public String title;\n"
"    public Integer episodeID;\n"
"    public String director;\n"
"    public LocalDate releaseDate;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:116
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:128
#, no-wrap
msgid "}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:118
#, no-wrap
msgid "public class Hero {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:126
#, no-wrap
msgid ""
"    public String name;\n"
"    public String surname;\n"
"    public Double height;\n"
"    public Integer mass;\n"
"    public Boolean darkSide;\n"
"    public LightSaber lightSaber;\n"
"    public List<Integer> episodeIds = new ArrayList<>();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:132
#, no-wrap
msgid ""
"enum LightSaber {\n"
"    RED, BLUE, GREEN\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:135
msgid "For readability we use classes with public fields, but classes with private fields with public getters and setters will also work."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:138
msgid "The classes we have just created describe the GraphQL schema which is a set of possible data (objects, fields, relationships) that a client can access."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:140
msgid "Let's continue with an example CDI bean, that would work as a repository:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:145
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class GalaxyService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:147
#, no-wrap
msgid "    private List<Hero> heroes = new ArrayList<>();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:149
#, no-wrap
msgid "    private List<Film> films = new ArrayList<>();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:151
#, no-wrap
msgid "    public GalaxyService() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:157
#, no-wrap
msgid ""
"        Film aNewHope = new Film();\n"
"        aNewHope.title = \"A New Hope\";\n"
"        aNewHope.releaseDate = LocalDate.of(1977, Month.MAY, 25);\n"
"        aNewHope.episodeID = 4;\n"
"        aNewHope.director = \"George Lucas\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:163
#, no-wrap
msgid ""
"        Film theEmpireStrikesBack = new Film();\n"
"        theEmpireStrikesBack.title = \"The Empire Strikes Back\";\n"
"        theEmpireStrikesBack.releaseDate = LocalDate.of(1980, Month.MAY, 21);\n"
"        theEmpireStrikesBack.episodeID = 5;\n"
"        theEmpireStrikesBack.director = \"George Lucas\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:169
#, no-wrap
msgid ""
"        Film returnOfTheJedi = new Film();\n"
"        returnOfTheJedi.title = \"Return Of The Jedi\";\n"
"        returnOfTheJedi.releaseDate = LocalDate.of(1983, Month.MAY, 25);\n"
"        returnOfTheJedi.episodeID = 6;\n"
"        returnOfTheJedi.director = \"George Lucas\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:173
#, no-wrap
msgid ""
"        films.add(aNewHope);\n"
"        films.add(theEmpireStrikesBack);\n"
"        films.add(returnOfTheJedi);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:182
#, no-wrap
msgid ""
"        Hero luke = new Hero();\n"
"        luke.name = \"Luke\";\n"
"        luke.surname = \"Skywalker\";\n"
"        luke.height = 1.7;\n"
"        luke.mass = 73;\n"
"        luke.lightSaber = LightSaber.GREEN;\n"
"        luke.darkSide = false;\n"
"        luke.episodeIds.addAll(Arrays.asList(4, 5, 6));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:190
#, no-wrap
msgid ""
"        Hero leia = new Hero();\n"
"        leia.name = \"Leia\";\n"
"        leia.surname = \"Organa\";\n"
"        leia.height = 1.5;\n"
"        leia.mass = 51;\n"
"        leia.darkSide = false;\n"
"        leia.episodeIds.addAll(Arrays.asList(4, 5, 6));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:200
#, no-wrap
msgid ""
"        Hero vader = new Hero();\n"
"        vader.name = \"Darth\";\n"
"        vader.surname = \"Vader\";\n"
"        vader.height = 1.9;\n"
"        vader.mass = 89;\n"
"        vader.darkSide = true;\n"
"        vader.lightSaber = LightSaber.RED;\n"
"        vader.episodeIds.addAll(Arrays.asList(4, 5, 6));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:204
#, no-wrap
msgid ""
"        heroes.add(luke);\n"
"        heroes.add(leia);\n"
"        heroes.add(vader);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:206
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:210
#, no-wrap
msgid ""
"    public List<Film> getAllFilms() {\n"
"        return films;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:214
#, no-wrap
msgid ""
"    public Film getFilm(int id) {\n"
"        return films.get(id);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:220
#, no-wrap
msgid ""
"    public List<Hero> getHeroesByFilm(Film film) {\n"
"        return heroes.stream()\n"
"                .filter(hero -> hero.episodeIds.contains(film.episodeID))\n"
"                .collect(Collectors.toList());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:224
#, no-wrap
msgid ""
"    public void addHero(Hero hero) {\n"
"        heroes.add(hero);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:228
#, no-wrap
msgid ""
"    public Hero deleteHero(int id) {\n"
"        return heroes.remove(id);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:235
#, no-wrap
msgid ""
"    public List<Hero> getHeroesBySurname(String surname) {\n"
"        return heroes.stream()\n"
"                .filter(hero -> hero.surname.equals(surname))\n"
"                .collect(Collectors.toList());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:238
msgid "Now, let's create our first GraphQL API."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:240
msgid "Edit the `org.acme.microprofile.graphql.FilmResource` class as following:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:245
#, no-wrap
msgid ""
"@GraphQLApi // <1>\n"
"public class FilmResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:248
#, no-wrap
msgid ""
"    @Inject\n"
"    GalaxyService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:255
#, no-wrap
msgid ""
"    @Query(\"allFilms\") // <2>\n"
"    @Description(\"Get all Films from a galaxy far far away\") // <3>\n"
"    public List<Film> getAllFilms() {\n"
"        return service.getAllFilms();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:258
msgid "`@GraphQLApi` annotation indicates that the CDI bean will be a GraphQL endpoint"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:259
msgid "`@Query` annotation defines that this method will be queryable with the name `allFilms`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:260
msgid "Documentation of the queryable method"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:263
msgid "The value of the `@Query` annotation is optional and would implicitly be defaulted to the method name if absent."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:265
msgid "This way we have created our first queryable API which we will later expand."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:266
#, no-wrap
msgid "Launch"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:269
msgid "Launch the quarkus app:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:272
#, no-wrap
msgid "./mvnw compile quarkus:dev\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:274
#, no-wrap
msgid "Introspect"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:277
msgid "The full schema of the GraphQL API can be retrieved by calling the following:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:281
#, no-wrap
msgid "curl http://localhost:8080/graphql/schema.graphql\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:284
msgid "The server will return the complete schema of the GraphQL API."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:286
#, no-wrap
msgid "GraphiQL UI"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:289
msgid "Experimental - not included in the MicroProfile specification"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:291
msgid "GraphiQL UI is a great tool permitting easy interaction with your GraphQL APIs."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:294
msgid "The Quarkus `smallrye-graphql` extension ships with `GraphiQL` and enables it by default in `dev` and `test` modes, but it can also be explicitly configured for `production` mode as well."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:296
msgid "GraphiQL can be accessed from http://localhost:8080/q/graphql-ui/ ."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:298
msgid "image:graphql-ui-screenshot01.png[alt=GraphQL UI]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:300
msgid "Have a look at the link:security-authorization[Authorization of Web Endpoints] Guide on how to add/remove security for the GraphQL UI."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:301
#, no-wrap
msgid "Query the GraphQL API"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:304
msgid "Now visit the GraphiQL page that has been deployed in `dev` mode."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:306
msgid "Enter the following query to GraphiQL and press the `play` button:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:317
#, no-wrap
msgid ""
"query allFilms {\n"
"  allFilms {\n"
"    title\n"
"    director\n"
"    releaseDate\n"
"    episodeID\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:323
msgid "Since our query contains all the fields in the `Film` class we will retrieve all the fields in our response. Since GraphQL API responses are client determined, the client can choose which fields it will require."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:327
msgid "Let's assume that our client only requires `title` and `releaseDate` making the previous call to the API `Over-fetching` of unnecessary data."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:329
msgid "Enter the following query into GraphiQL and hit the `play` button:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:338
#, no-wrap
msgid ""
"query allFilms {\n"
"  allFilms {\n"
"    title\n"
"    releaseDate\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:342
msgid "Notice in the response we have only retrieved the required fields.  Therefore, we have prevented `Over-fetching`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:345
msgid "Let's continue to expand our GraphQL API by adding the following to the `FilmResource` class."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:353
#, no-wrap
msgid ""
"    @Query\n"
"    @Description(\"Get a Films from a galaxy far far away\")\n"
"    public Film getFilm(@Name(\"filmId\") int id) {\n"
"        return service.getFilm(id);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:358
msgid "Notice how we have excluded the value in the `@Query` annotation.  Therefore, the name of the query is implicitly set as the method name excluding the `get`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:361
msgid "This query will allow the client to retrieve the film by id, and the `@Name` annotation on the parameter changes the parameter name to `filmId` rather than the default `id` that it would be if you omit the `@Name` annotation."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:363
msgid "Enter the following into `GraphiQL` and make a request."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:374
#, no-wrap
msgid ""
"query getFilm {\n"
"  film(filmId: 1) {\n"
"    title\n"
"    director\n"
"    releaseDate\n"
"    episodeID\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:379
msgid "The `film` query method requested fields can be determined as such in our previous example. This way we can retrieve individual film information."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:383
msgid "However, say our client requires both films with filmId `0` and `1`.  In a REST API the client would have to make two calls to the API.  Therefore, the client would be `Under-fetching`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:385
msgid "In GraphQL it is possible to make multiple queries at once."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:387
msgid "Enter the following into GraphiQL to retrieve two films:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:404
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:511
#, no-wrap
msgid ""
"query getFilms {\n"
"  film0: film(filmId: 0) {\n"
"    title\n"
"    director\n"
"    releaseDate\n"
"    episodeID\n"
"  }\n"
"  film1: film(filmId: 1) {\n"
"    title\n"
"    director\n"
"    releaseDate\n"
"    episodeID\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:407
msgid "This enabled the client to fetch the required data in a single request."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:408
#, no-wrap
msgid "Expanding the API"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:412
msgid "Until now, we have created a GraphQL API to retrieve film data.  We now want to enable the clients to retrieve the `Hero` data of the `Film`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:414
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:520
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:630
msgid "Add the following to our `FilmResource` class:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:420
#, no-wrap
msgid ""
"    public List<Hero> heroes(@Source Film film) { // <1>\n"
"        return service.getHeroesByFilm(film);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:423
msgid "Enable `List<Hero>` data to be added to queries that respond with `Film`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:427
msgid "By adding this method we have effectively changed the schema of the GraphQL API.  Although the schema has changed the previous queries will still work.  Since we only expanded the API to be able to retrieve the `Hero` data of the `Film`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:429
msgid "Enter the following into GraphiQL to retrieve the film and hero data."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:447
#, no-wrap
msgid ""
"query getFilmHeroes {\n"
"  film(filmId: 1) {\n"
"    title\n"
"    director\n"
"    releaseDate\n"
"    episodeID\n"
"    heroes {\n"
"      name\n"
"      height\n"
"      mass\n"
"      darkSide\n"
"      lightSaber\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:450
msgid "The response now includes the heroes of the film."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:451
#, no-wrap
msgid "Batching"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:455
msgid "When you are exposing a `Collection` return like our `getAllFilms`, you might want to use the batch form of the above, to more efficiently fetch the heroes:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:461
#, no-wrap
msgid ""
"    public List<List<Hero>> heroes(@Source List<Film> films) { // <1>\n"
"        // Here fetch all hero lists\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:464
msgid "Here receive the films as a batch, allowing you to fetch the corresponding heroes."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:465
#, no-wrap
msgid "Reactive"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:468
msgid "Queries can be made reactive by using `Uni`, or `CompletionStage` as a return type, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:476
#, no-wrap
msgid ""
"    @Query\n"
"    @Description(\"Get a Films from a galaxy far far away\")\n"
"    public Uni<Film> getFilm(int filmId) {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:479
msgid "Due to the underlying library, graphql-java, `Uni` is creating a `CompletionStage` under the hood."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:481
msgid "Or you can use `CompletionStage`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:489
#, no-wrap
msgid ""
"    @Query\n"
"    @Description(\"Get a Films from a galaxy far far away\")\n"
"    public CompletionStage<Film> getFilm(int filmId) {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:492
msgid "Using `Uni` or `CompletionStage` means that when a request contains more than one query, they will be executed concurrently."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:494
msgid "For instance, the query below will fetch `film0` and `film1` concurrently:"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:513
#, no-wrap
msgid "Mutations"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:516
msgid "Mutations are used when data is created, updated or deleted."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:518
msgid "Let's now add the ability to add and delete heroes to our GraphQL API."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:528
#, no-wrap
msgid ""
"    @Mutation\n"
"    public Hero createHero(Hero hero) {\n"
"        service.addHero(hero);\n"
"        return hero;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:533
#, no-wrap
msgid ""
"    @Mutation\n"
"    public Hero deleteHero(int id) {\n"
"        return service.deleteHero(id);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:536
msgid "Enter the following into `GraphiQL` to insert a `Hero`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:554
#, no-wrap
msgid ""
"mutation addHero {\n"
"  createHero(hero: {\n"
"      name: \"Han\",\n"
"      surname: \"Solo\"\n"
"      height: 1.85\n"
"      mass: 80\n"
"      darkSide: false\n"
"      episodeIds: [4, 5, 6]\n"
"  \t}\n"
"  )\n"
"  {\n"
"    name\n"
"    surname\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:557
msgid "By using this mutation we have created a `Hero` entity in our service."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:562
msgid "Notice how in the response we have retrieved the `name` and `surname` of the created Hero. This is because we selected to retrieve these fields in the response within the `{ }` in the mutation query.  This can easily be a server side generated field that the client may require."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:564
msgid "Let's now try deleting an entry:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:573
#, no-wrap
msgid ""
"mutation DeleteHero {\n"
"  deleteHero(id :3){\n"
"    name\n"
"    surname\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:577
msgid "Similar to the `createHero` mutation method we also retrieve the `name` and `surname` of the hero we have deleted which is defined in `{ }`."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:578
#, no-wrap
msgid "Subscriptions"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:581
msgid "Subscriptions allows you to subscribe to a query. It allows you to receive events."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:583
msgid "Subscription is currently still considered experimental."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:585
msgid "Example: We want to know when new Heroes are being created:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:590
#, no-wrap
msgid "    BroadcastProcessor<Hero> processor = BroadcastProcessor.create(); // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:597
#, no-wrap
msgid ""
"    @Mutation\n"
"    public Hero createHero(Hero hero) {\n"
"        service.addHero(hero);\n"
"        processor.onNext(hero); // <2>\n"
"        return hero;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:602
#, no-wrap
msgid ""
"    @Subscription\n"
"    public Multi<Hero> heroCreated(){\n"
"        return processor; // <3>\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:606
msgid "The `Multi` processor that will broadcast any new Heros"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:607
msgid "When adding a new Hero, also broadcast it"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:608
msgid "Make the stream available in the schema and as a WebSocket during runtime"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:611
msgid "Any client that now connect to the `/graphql` WebSocket connection will receive events on new Heroes being created:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:621
#, no-wrap
msgid ""
"subscription ListenForNewHeroes {\n"
"  heroCreated {\n"
"    name\n"
"    surname\n"
"  }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:624
#, no-wrap
msgid "Creating Queries by fields"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:628
msgid "Queries can also be done on individual fields. For example, let's create a method to query heroes by their last name."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:637
#, no-wrap
msgid ""
"    @Query\n"
"    public List<Hero> getHeroesWithSurname(@DefaultValue(\"Skywalker\") String surname) {\n"
"        return service.getHeroesBySurname(surname);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:641
msgid "By using the `@DefaultValue` annotation we have determined that the surname value will be `Skywalker` when the parameter is not provided."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:643
msgid "Test the following queries with GraphiQL:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:660
#, no-wrap
msgid ""
"query heroWithDefaultSurname {\n"
"  heroesWithSurname{\n"
"    name\n"
"    surname\n"
"    lightSaber\n"
"  }\n"
"}\n"
"query heroWithSurnames {\n"
"  heroesWithSurname(surname: \"Vader\") {\n"
"    name\n"
"    surname\n"
"    lightSaber\n"
"  }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:662
#, no-wrap
msgid "Context"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:665
msgid "You can get information about the GraphQL request anywhere in your code, using this experimental, SmallRye specific feature:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:670
#, no-wrap
msgid ""
"@Inject\n"
"Context context;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:673
msgid "or as a parameter in your method if you are in the `GraphQLApi` class, for instance:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:681
#, no-wrap
msgid ""
"    @Query\n"
"    @Description(\"Get a Films from a galaxy far far away\")\n"
"    public Film getFilm(Context context, int filmId) {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:684
msgid "The context object allows you to get:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:686
msgid "the original request (Query/Mutation)"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:687
msgid "the arguments"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:688
msgid "the path"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:689
msgid "the selected fields"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:690
msgid "any variables"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:692
msgid "This allows you to optimize the downstream queries to the datastore."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:694
msgid "See the https://javadoc.io/doc/io.smallrye/smallrye-graphql-api/latest/io/smallrye/graphql/api/Context.html[JavaDoc] for more details."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:695
#, no-wrap
msgid "GraphQL-Java"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:698
msgid "This context object also allows you to fall down to the underlying https://www.graphql-java.com/[graphql-java] features by using the leaky abstraction:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:702
#, no-wrap
msgid "DataFetchingEnvironment dfe = context.unwrap(DataFetchingEnvironment.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:705
msgid "You can also get access to the underlying `graphql-java` during schema generation, to add your own features directly:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:709
#, no-wrap
msgid "public GraphQLSchema.Builder addMyOwnEnum(@Observes GraphQLSchema.Builder builder) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:716
#, no-wrap
msgid ""
"    // Here add your own features directly, example adding an Enum\n"
"    GraphQLEnumType myOwnEnum = GraphQLEnumType.newEnum()\n"
"            .name(\"SomeEnum\")\n"
"            .description(\"Adding some enum type\")\n"
"            .value(\"value1\")\n"
"            .value(\"value2\").build();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:719
#, no-wrap
msgid ""
"    return builder.additionalType(myOwnEnum);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:722
msgid "By using the `@Observer` you can add anything to the Schema builder."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:724
msgid "For the Observer to work, you need to enable events. In `application.properties`, add the following: `quarkus.smallrye-graphql.events.enabled=true`."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:725
#, no-wrap
msgid "Map to Scalar"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:729
msgid "Another SmallRye specific experimental feature, allows you to map an existing scalar (that is mapped by the implementation to a certain Java type) to another type, or to map complex object, that would typically create a `Type` or `Input` in GraphQL, to an existing scalar."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:730
#, no-wrap
msgid "Mapping an existing Scalar to another type:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:735
#, no-wrap
msgid "public class Movie {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:738
#, no-wrap
msgid ""
"    @ToScalar(Scalar.Int.class)\n"
"    Long idLongThatShouldChangeToInt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:741
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:756
#, no-wrap
msgid ""
"    // ....\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:744
msgid "Above will map the `Long` java type to an `Int` Scalar type, rather than the https://download.eclipse.org/microprofile/microprofile-graphql-1.0/microprofile-graphql.html#scalars[default] `BigInteger`."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:745
#, no-wrap
msgid "Mapping a complex object to a Scalar type:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:750
#, no-wrap
msgid "public class Person {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:753
#, no-wrap
msgid ""
"    @ToScalar(Scalar.String.class)\n"
"    Phone phone;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:759
msgid "This will, rather than creating a `Type` or `Input` in GraphQL, map to a String scalar."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:763
msgid "To be able to do the above, the `Phone` object needs to have a constructor that takes a String (or `Int` / `Date` / etc.), or have a setter method for the String (or `Int` / `Date` / etc.), or have a `fromString` (or `fromInt` / `fromDate` - depending on the Scalar type) static method."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:765
msgid "For example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:769
#, no-wrap
msgid "public class Phone {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:771
#, no-wrap
msgid "    private String number;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:773
#, no-wrap
msgid "    // Getters and setters....\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:780
#, no-wrap
msgid ""
"    public static Phone fromString(String number) {\n"
"        Phone phone = new Phone();\n"
"        phone.setNumber(number);\n"
"        return phone;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:783
msgid "See more about the `@ToScalar` feature in the https://javadoc.io/static/io.smallrye/smallrye-graphql-api/1.0.6/index.html?io/smallrye/graphql/api/ToScalar.html[JavaDoc]."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:784
#, no-wrap
msgid "Error code"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:787
msgid "You can add an error code on the error output in the GraphQL response by using the (SmallRye specific) `@ErrorCode`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:794
#, no-wrap
msgid ""
"@ErrorCode(\"some-business-error-code\")\n"
"public class SomeBusinessException extends RuntimeException {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:797
msgid "When `SomeBusinessException` occurs, the error output will contain the Error code:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:824
#, no-wrap
msgid ""
"{\n"
"    \"errors\": [\n"
"        {\n"
"            \"message\": \"Unexpected failure in the system. Jarvis is working to fix it.\",\n"
"            \"locations\": [\n"
"                {\n"
"                    \"line\": 2,\n"
"                    \"column\": 3\n"
"                }\n"
"            ],\n"
"            \"path\": [\n"
"                \"annotatedCustomBusinessException\"\n"
"            ],\n"
"            \"extensions\": {\n"
"                \"exception\": \"io.smallrye.graphql.test.apps.error.api.ErrorApi$AnnotatedCustomBusinessException\",\n"
"                \"classification\": \"DataFetchingException\",\n"
"                \"code\": \"some-business-error-code\" <1>\n"
"            }\n"
"        }\n"
"    ],\n"
"    \"data\": {\n"
"        ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:827
msgid "The error code"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:828
#, no-wrap
msgid "Additional Notes"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:834
msgid "If you are using the `smallrye-graphql` extension and the `micrometer` metrics extension is present and metrics are enabled, you may encounter a `java.lang.NoClassDefFoundError` as some versions of the `smallrye-graphql` extension have runtime requirements on the Microprofile Metrics API.  Add the following Microprofile Metrics API dependency to resolve the issue:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:841
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>org.eclipse.microprofile.metrics</groupId>\n"
"  <artifactId>microprofile-metrics-api</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:843
#, no-wrap
msgid "Conclusion"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:847
msgid "SmallRye GraphQL enables clients to retrieve the exact data that is required preventing `Over-fetching` and `Under-fetching`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:850
msgid "The GraphQL API can be expanded without breaking previous queries enabling easy API `evolution`."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-graphql.adoc:852
#, no-wrap
msgid "Configuration Reference"
msgstr ""
