# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/smallrye-health.adoc:6
#, no-wrap
msgid "SmallRye Health"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:12
msgid "This guide demonstrates how your Quarkus application can use https://github.com/smallrye/smallrye-health/[SmallRye Health] an implementation of the https://github.com/eclipse/microprofile-health/[MicroProfile Health] specification."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:17
msgid "SmallRye Health allows applications to provide information about their state to external viewers which is typically useful in cloud environments where automated processes must be able to determine whether the application should be discarded or restarted."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-health.adoc:18
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:21
msgid "To complete this guide, you need:"
msgstr "要完成这个指南，你需要："

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:23
msgid "less than 15 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:24
msgid "an IDE"
msgstr "一个编辑器"

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:25
msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
msgstr "安装JDK 11以上版本并正确配置了 `JAVA_HOME`"

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:26
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-health.adoc:27
#, no-wrap
msgid "Architecture"
msgstr "应用结构"

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:32
msgid "In this guide, we build a simple REST application that exposes MicroProfile Health functionalities at the `/q/health/live` and `/q/health/ready` endpoints according to the specification."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-health.adoc:33
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:37
msgid "We recommend that you follow the instructions in the next sections and create the application step by step. However, you can go right to the completed example."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:40
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:43
msgid "The solution is located in the `microprofile-health-quickstart` {quickstarts-tree-url}/microprofile-health-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-health.adoc:44
#, no-wrap
msgid "Creating the Maven Project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:47
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-health.adoc:55
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=microprofile-health-quickstart \\\n"
"    -Dextensions=\"smallrye-health\"\n"
"cd microprofile-health-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:58
msgid "This command generates a Maven project, importing the `smallrye-health` extension."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:61
msgid "If you already have your Quarkus project configured, you can add the `smallrye-health` extension to your project by running the following command in your project base directory:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-health.adoc:65
#: upstream/_versions/2.2/guides/smallrye-health.adoc:393
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"smallrye-health\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:68
msgid "This will add the following to your `pom.xml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-health.adoc:75
#: upstream/_versions/2.2/guides/smallrye-health.adoc:402
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-health</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-health.adoc:77
#, no-wrap
msgid "Running the health check"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:80
msgid "Importing the `smallrye-health` extension directly exposes three REST endpoints:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:82
msgid "`/q/health/live` - The application is up and running."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:83
msgid "`/q/health/ready` - The application is ready to serve requests."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:84
msgid "`/q/health` - Accumulating all health check procedures in the application."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:86
msgid "To check that the `smallrye-health` extension is working as expected:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:88
msgid "start your Quarkus application with `./mvnw compile quarkus:dev`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:90
msgid "access the `http://localhost:8080/q/health/live` endpoint using your browser or `curl http://localhost:8080/q/health/live`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:92
msgid "All of the health REST endpoints return a simple JSON object with two fields:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:94
msgid "`status` -- the overall result of all the health check procedures"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:95
msgid "`checks` -- an array of individual checks"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:99
msgid "The general `status` of the health check is computed as a logical AND of all the declared health check procedures. The `checks` array is empty as we have not specified any health check procedure yet so let's define some."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-health.adoc:100
#, no-wrap
msgid "Creating your first health check"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:103
msgid "In this section, we create our first simple health check procedure."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:105
msgid "Create the `org.acme.microprofile.health.SimpleHealthCheck` class:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-health.adoc:109
#: upstream/_versions/2.2/guides/smallrye-health.adoc:163
#: upstream/_versions/2.2/guides/smallrye-health.adoc:209
#: upstream/_versions/2.2/guides/smallrye-health.adoc:280
#, no-wrap
msgid "package org.acme.microprofile.health;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-health.adoc:113
#, no-wrap
msgid ""
"import org.eclipse.microprofile.health.HealthCheck;\n"
"import org.eclipse.microprofile.health.HealthCheckResponse;\n"
"import org.eclipse.microprofile.health.Liveness;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-health.adoc:115
#: upstream/_versions/2.2/guides/smallrye-health.adoc:169
#: upstream/_versions/2.2/guides/smallrye-health.adoc:217
#: upstream/_versions/2.2/guides/smallrye-health.adoc:286
#: upstream/_versions/2.2/guides/smallrye-health.adoc:344
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-health.adoc:119
#, no-wrap
msgid ""
"@Liveness\n"
"@ApplicationScoped <1> <2>\n"
"public class SimpleHealthCheck implements HealthCheck {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-health.adoc:125
#, no-wrap
msgid ""
"    @Override\n"
"    public HealthCheckResponse call() {\n"
"        return HealthCheckResponse.up(\"Simple health check\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:127
msgid "It's recommended to annotate the health check class with `@ApplicationScoped` or the `@Singleton` scope so that a single bean instance is used for all health check requests."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:128
msgid "If a bean class annotated with one of the health check annotations declares no scope then the `@Singleton` scope is used automatically."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:130
msgid "As you can see, the health check procedures are defined as CDI beans that implement the `HealthCheck` interface and are annotated with one of the health check qualifiers, such as:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:132
msgid "`@Liveness` - the liveness check accessible at `/q/health/live`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:133
msgid "`@Readiness` - the readiness check accessible at `/q/health/ready`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:137
msgid "`HealthCheck` is a functional interface whose single method `call` returns a `HealthCheckResponse` object which can be easily constructed by the fluent builder API shown in the example."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:143
msgid "As we have started our Quarkus application in dev mode simply repeat the request to `http://localhost:8080/q/health/live` by refreshing your browser window or by using `curl http://localhost:8080/q/health/live`. Because we defined our health check to be a liveness procedure (with `@Liveness` qualifier) the new health check procedure is now present in the `checks` array."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:146
msgid "Congratulations! You've created your first Quarkus health check procedure. Let's continue by exploring what else can be done with SmallRye Health."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-health.adoc:147
#, no-wrap
msgid "Adding a readiness health check procedure"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:153
msgid "In the previous section, we created a simple liveness health check procedure which states whether our application is running or not. In this section, we will create a readiness health check which will be able to state whether our application is able to process requests."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:157
msgid "We will create another health check procedure that simulates a connection to an external service provider such as a database. For starters, we will always return the response indicating the application is ready."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:159
msgid "Create `org.acme.microprofile.health.DatabaseConnectionHealthCheck` class:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-health.adoc:167
#, no-wrap
msgid ""
"import org.eclipse.microprofile.health.HealthCheck;\n"
"import org.eclipse.microprofile.health.HealthCheckResponse;\n"
"import org.eclipse.microprofile.health.Readiness;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-health.adoc:173
#: upstream/_versions/2.2/guides/smallrye-health.adoc:221
#, no-wrap
msgid ""
"@Readiness\n"
"@ApplicationScoped\n"
"public class DatabaseConnectionHealthCheck implements HealthCheck {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-health.adoc:179
#, no-wrap
msgid ""
"    @Override\n"
"    public HealthCheckResponse call() {\n"
"        return HealthCheckResponse.up(\"Database connection health check\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:189
msgid "If you now rerun the health check at `http://localhost:8080/q/health/live` the `checks` array will contain only the previously defined `SimpleHealthCheck` as it is the only check defined with the `@Liveness` qualifier. However, if you access `http://localhost:8080/q/health/ready` (in the browser or with `curl http://localhost:8080/q/health/ready`) you will see only the `Database connection health check` as it is the only health check defined with the `@Readiness` qualifier as the readiness health check procedure."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:191
msgid "If you access `http://localhost:8080/q/health` you will get back both checks."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:196
msgid "More information about which health check procedures should be used in which situation is detailed in the MicroProfile Health specification. Generally, the liveness procedures determine whether the application should be restarted while readiness procedures determine whether it makes sense to contact the application with requests."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-health.adoc:197
#, no-wrap
msgid "Negative health check procedures"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:203
msgid "In this section, we extend our `Database connection health check` with the option of stating that our application is not ready to process requests as the underlying database connection cannot be established. For simplicity reasons, we only determine whether the database is accessible or not by a configuration property."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:205
msgid "Update the `org.acme.microprofile.health.DatabaseConnectionHealthCheck` class:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-health.adoc:215
#, no-wrap
msgid ""
"import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
"import org.eclipse.microprofile.health.HealthCheck;\n"
"import org.eclipse.microprofile.health.HealthCheckResponse;\n"
"import org.eclipse.microprofile.health.HealthCheckResponseBuilder;\n"
"import org.eclipse.microprofile.health.Readiness;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-health.adoc:224
#, no-wrap
msgid ""
"    @ConfigProperty(name = \"database.up\", defaultValue = \"false\")\n"
"    private boolean databaseUp;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-health.adoc:227
#, no-wrap
msgid ""
"    @Override\n"
"    public HealthCheckResponse call() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-health.adoc:229
#, no-wrap
msgid "        HealthCheckResponseBuilder responseBuilder = HealthCheckResponse.named(\"Database connection health check\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-health.adoc:237
#, no-wrap
msgid ""
"        try {\n"
"            simulateDatabaseConnectionVerification();\n"
"            responseBuilder.up();\n"
"        } catch (IllegalStateException e) {\n"
"            // cannot access the database\n"
"            responseBuilder.down();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-health.adoc:240
#, no-wrap
msgid ""
"        return responseBuilder.build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-health.adoc:247
#, no-wrap
msgid ""
"    private void simulateDatabaseConnectionVerification() {\n"
"        if (!databaseUp) {\n"
"            throw new IllegalStateException(\"Cannot contact database\");\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:254
msgid "Until now we used a simplified method of building a `HealthCheckResponse` through the `HealthCheckResponse#up(String)` (there is also `HealthCheckResponse#down(String)`) which will directly build the response object.  From now on, we utilize the full builder capabilities provided by the `HealthCheckResponseBuilder` class."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:259
msgid "If you now rerun the readiness health check (at `http://localhost:8080/q/health/ready`)  the overall `status` should be DOWN. You can also check the liveness check at `http://localhost:8080/q/health/live` which will return the overall `status` UP because it isn't influenced by the readiness checks."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:263
msgid "As we shouldn't leave this application with a readiness check in a DOWN state and because we are running Quarkus in dev mode you can add `database.up=true` in `src/main/resources/application.properties` and rerun the readiness health check again"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:264
msgid "it should be up again."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-health.adoc:266
#, no-wrap
msgid "Adding user-specific data to the health check response"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:274
msgid "In previous sections, we saw how to create simple health checks with only the minimal attributes, namely, the health check name and its status (UP or DOWN). However, the MicroProfile Health specification also provides a way for the applications to supply arbitrary data in the form of key-value pairs sent to the consuming end. This can be done by using the `withData(key, value)` method of the health check response builder API."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:276
msgid "Let's create a new health check procedure `org.acme.microprofile.health.DataHealthCheck`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-health.adoc:284
#, no-wrap
msgid ""
"import org.eclipse.microprofile.health.Liveness;\n"
"import org.eclipse.microprofile.health.HealthCheck;\n"
"import org.eclipse.microprofile.health.HealthCheckResponse;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-health.adoc:290
#, no-wrap
msgid ""
"@Liveness\n"
"@ApplicationScoped\n"
"public class DataHealthCheck implements HealthCheck {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-health.adoc:300
#, no-wrap
msgid ""
"    @Override\n"
"    public HealthCheckResponse call() {\n"
"        return HealthCheckResponse.named(\"Health check with data\")\n"
"                .up()\n"
"                .withData(\"foo\", \"fooValue\")\n"
"                .withData(\"bar\", \"barValue\")\n"
"                .build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:306
msgid "If you rerun the liveness health check procedure by accessing the `/q/health/live` endpoint you can see that the new health check `Health check with data` is present in the `checks` array. This check contains a new attribute called `data` which is a JSON object consisting of the properties we have defined in our health check procedure."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:309
msgid "This functionality is specifically useful in failure scenarios where you can pass the error along with the health check response."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-health.adoc:321
#, no-wrap
msgid ""
"        try {\n"
"            simulateDatabaseConnectionVerification();\n"
"            responseBuilder.up();\n"
"        } catch (IllegalStateException e) {\n"
"            // cannot access the database\n"
"            responseBuilder.down()\n"
"                    .withData(\"error\", e.getMessage()); // pass the exception message\n"
"        }\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-health.adoc:323
#, no-wrap
msgid "Context propagation into the health check invocations"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:326
msgid "For the perfomance reasons the context (e.g., CDI or security context) is not propagated into each health check invocation. However, if you need to enable this functionality you can set the config property `quarkus.smallrye-health.context-propagation=true` to allow the context propagation into every health check call."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-health.adoc:327
#, no-wrap
msgid "Reactive health checks"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:330
msgid "MicroProfile Health currently doesn't support returning reactive types, but SmallRye Health does."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:333
msgid "If you want to provide a reactive health check, you can implement the `io.smallrye.health.api.AsyncHealthCheck` interface instead of the `org.eclipse.microprofile.health.HealthCheck` one.  The `io.smallrye.health.api.AsyncHealthCheck` interface allows you to return a `Uni<HealthCheckResponse>`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:335
msgid "The following example shows a reactive liveness check:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-health.adoc:339
#, no-wrap
msgid "import io.smallrye.health.api.AsyncHealthCheck;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-health.adoc:342
#, no-wrap
msgid ""
"import org.eclipse.microprofile.health.Liveness;\n"
"import org.eclipse.microprofile.health.HealthCheckResponse;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-health.adoc:348
#, no-wrap
msgid ""
"@Liveness\n"
"@ApplicationScoped\n"
"public class LivenessAsync implements AsyncHealthCheck {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/smallrye-health.adoc:355
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<HealthCheckResponse> call() {\n"
"        return Uni.createFrom().item(HealthCheckResponse.up(\"liveness-reactive\"))\n"
"                .onItem().delayIt().by(Duration.ofMillis(10));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-health.adoc:357
#, no-wrap
msgid "Extension health checks"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:360
msgid "Some extension may provide default health checks, including the extension will automatically register its health checks."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:363
msgid "For example, `quarkus-agroal` that is used to manage Quarkus datasource(s) automatically register a readiness health check that will validate each datasources: link:datasource#datasource-health-check[Datasource Health Check]."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:365
msgid "You can disable extension health check via the property `quarkus.health.extensions.enabled` so none will be automatically registered."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-health.adoc:367
#, no-wrap
msgid "Health UI "
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:370
msgid "Experimental - not included in the MicroProfile specification"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:372
msgid "`health-ui` allows you to see your Health Checks in a Web GUI."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:374
msgid "The Quarkus `smallrye-health` extension ships with `health-ui` and enables it by default in dev and test modes, but it can also be explicitly configured for production mode as well."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:376
msgid "`health-ui` can be accessed from http://localhost:8080/q/health-ui/ ."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:378
msgid "image:health-ui-screenshot01.png[alt=Health UI]"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-health.adoc:379
#, no-wrap
msgid "Conclusion"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:385
msgid "SmallRye Health provides a way for your application to distribute information about its healthiness state to state whether or not it is able to function properly.  Liveness checks are utilized to tell whether the application should be restarted and readiness checks are used to tell whether the application is able to process requests."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:387
msgid "All that is needed to enable the SmallRye Health features in Quarkus is:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:390
msgid "adding the `smallrye-health` Quarkus extension to your project using the `quarkus-maven-plugin`: +"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/smallrye-health.adoc:396
msgid "or simply adding the following Maven dependency: +"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/smallrye-health.adoc:404
#, no-wrap
msgid "Configuration Reference"
msgstr "配置参考"
