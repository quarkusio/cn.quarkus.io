# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:6
#, no-wrap
msgid "Funqy Amazon Lambda Binding"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:12
msgid "The guide walks through quickstart code to show you how you can deploy Funqy functions to Amazon Lambda."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:15
msgid "Funqy functions can be deployed using the AWS Lambda Java Runtime, or you can build a native executable and use Lambda Custom Runtime if you want a smaller memory footprint and faster cold boot startup time."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:18
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:21
msgid "To complete this guide, you need:"
msgstr "要完成这个指南，你需要："

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:23
msgid "less than 30 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:24
msgid "Read about link:funqy[Funqy Basics].  This is a short read!"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:25
msgid "JDK 11 (AWS requires JDK 1.8 or 11)"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:26
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:27
msgid "https://aws.amazon.com[An Amazon AWS account]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:28
msgid "https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html[AWS CLI]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:29
msgid "https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI], for local testing"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:31
msgid "Funqy Amazon Lambdas build off of our link:amazon-lambda[Quarkus Amazon Lambda support]."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:32
#, no-wrap
msgid "Installing AWS bits"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:36
msgid "Installing all the AWS bits is probably the most difficult thing about this guide.  Make sure that you follow all the steps for installing AWS CLI."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:37
#, no-wrap
msgid "The Quickstart"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:40
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:42
msgid "The solution is located in the `funqy-amazon-lambda-quickstart` {quickstarts-tree-url}/funqy-quickstarts/funqy-amazon-lambda-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:43
#, no-wrap
msgid "The Code"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:47
msgid "There is nothing special about the code and more importantly nothing AWS specific.  Funqy functions can be deployed to many different environments and AWS Lambda is one of them.  The Java code is actually the same exact code as the {quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart[funqy-http-quickstart]."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:49
#, no-wrap
msgid "Choose Your Function"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:53
msgid "Only one Funqy function can be exported per Amazon Lambda deployment.  If you have multiple functions defined within your project, then you will need to choose the function within your Quarkus `application.properties`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:57
#, no-wrap
msgid "quarkus.funqy.export=greet\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:60
msgid "You can see how the quickstart has done it within its own {quickstarts-tree-url}/funqy-quickstarts/funqy-amazon-lambda-quickstart/src/main/resources/application.properties[application.properties]."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:62
msgid "Alternatively, you can set the `QUARKUS_FUNQY_EXPORT` environment variable when you create the Amazon Lambda using the `aws` cli."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:63
#, no-wrap
msgid "Deploy to AWS Lambda Java Runtime"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:68
msgid "There are a few steps to get your Funqy function running on AWS Lambda.  The quickstart maven project generates a helpful script to create, update, delete, and invoke your functions for pure Java and native deployments.  This script is generated at build time."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:69
#, no-wrap
msgid "Build and Deploy"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:72
msgid "Build the project using maven."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:76
#, no-wrap
msgid "./mvnw clean package\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:79
msgid "This will compile and package your code."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:80
#, no-wrap
msgid "Create an Execution Role"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:86
msgid "View the https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-awscli.html[Getting Started Guide] for deploying a lambda with AWS CLI.  Specifically, make sure you have created an `Execution Role`.  You will need to define a `LAMBDA_ROLE_ARN` environment variable in your profile or console window, Alternatively, you can edit the `manage.sh` script that is generated by the build and put the role value directly there:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:90
#, no-wrap
msgid "LAMBDA_ROLE_ARN=\"arn:aws:iam::1234567890:role/lambda-role\"\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:92
#, no-wrap
msgid "Extra Build Generated Files"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:96
msgid "After you run the build, there are a few extra files generated by the `quarkus-funqy-amazon-lambda` extension.  These files are in the the build directory: `target/` for maven, `build/` for gradle."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:98
msgid "`function.zip` - lambda deployment file"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:99
msgid "`manage.sh` - wrapper around aws lambda cli calls"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:100
msgid "`bootstrap-example.sh` - example bootstrap script for native deployments"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:101
msgid "`sam.jvm.yaml` - (optional) for use with sam cli and local testing"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:102
msgid "`sam.native.yaml` - (optional) for use with sam cli and native local testing"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:103
#, no-wrap
msgid "Create the function"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:108
msgid "The `target/manage.sh` script is for managing your Funqy function using the AWS Lambda Java runtime.  This script is provided only for your convenience. Examine the output of the `manage.sh` script if you want to learn what aws commands are executed to create, delete, and update your functions."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:110
msgid "`manage.sh` supports four operation: `create`, `delete`, `update`, and `invoke`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:114
msgid "To verify your setup, that you have the AWS CLI installed, executed aws configure for the AWS access keys, and setup the `LAMBDA_ROLE_ARN` environment variable (as described above), please execute `manage.sh` without any parameters.  A usage statement will be printed to guide you accordingly."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:116
msgid "To see the `usage` statement, and validate AWS configuration:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:119
#, no-wrap
msgid "sh target/manage.sh\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:122
msgid "You can `create` your function using the following command:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:126
#, no-wrap
msgid "sh target/manage.sh create\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:129
msgid "or if you do not have `LAMBDA_ROLE_ARN` already defined in this shell:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:133
#, no-wrap
msgid "LAMBDA_ROLE_ARN=\"arn:aws:iam::1234567890:role/lambda-role\" sh target/manage.sh create\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:137
msgid "Do not change the handler switch.  This must be hardcoded to `io.quarkus.funqy.lambda.FunqyStreamHandler::handleRequest`.  This special handler is Funqy's integration point with AWS Lambda."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:140
msgid "If there are any problems creating the function, you must delete it with the `delete` function before re-running the `create` command."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:144
#, no-wrap
msgid "sh target/manage.sh delete\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:147
msgid "Commands may also be stacked:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:150
#, no-wrap
msgid "sh target/manage.sh delete create\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:152
#, no-wrap
msgid "Invoke the function"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:155
msgid "Use the `invoke` command to invoke your function."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:159
#, no-wrap
msgid "sh target/manage.sh invoke\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:163
msgid "The example function takes input passed in via the `--payload` switch which points to a json file in the root directory of the project."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:165
msgid "The function can also be invoked locally with the SAM CLI like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:169
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:285
#, no-wrap
msgid "sam local invoke --template target/sam.jvm.yaml --event payload.json\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:172
msgid "If you are working with your native image build, simply replace the template name with the native version:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:176
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:292
#, no-wrap
msgid "sam local invoke --template target/sam.native.yaml --event payload.json\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:178
#, no-wrap
msgid "Update the function"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:182
msgid "You can update the Java code as you see fit.  Once you've rebuilt, you can redeploy your function by executing the `update` command."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:186
#, no-wrap
msgid "sh target/manage.sh update\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:188
#, no-wrap
msgid "Deploy to AWS Lambda Custom (native) Runtime"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:192
msgid "If you want a lower memory footprint and faster initialization times for your Funqy function, you can compile your Java code to a native executable.  Just make sure to rebuild your project with the `-Pnative` switch."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:194
msgid "For Linux hosts execute:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:198
#, no-wrap
msgid "mvn package -Pnative\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:203
msgid "If you are building on a non-Linux system, you will need to also pass in a property instructing Quarkus to use a docker build as Amazon Lambda requires linux binaries.  You can do this by passing this property to your Maven build: `-Dnative-image.docker-build=true`, or for Gradle: `--docker-build=true`.  This requires you to have docker installed locally, however."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:207
#, no-wrap
msgid "./mvnw clean install -Pnative -Dnative-image.docker-build=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:212
msgid "Either of these commands will compile and create a native executable image.  It also generates a zip file `target/function.zip`.  This zip file contains your native executable image renamed to `bootstrap`.  This is a requirement of the AWS Lambda Custom (Provided) Runtime."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:215
msgid "The instructions here are exactly as above with one change: you'll need to add `native` as the first parameter to the `manage.sh` script:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:219
#, no-wrap
msgid "sh target/manage.sh native create\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:224
msgid "As above, commands can be stacked.  The only requirement is that `native` be the first parameter should you wish to work with native image builds.  The script will take care of the rest of the details necessary to manage your native image function deployments."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:227
msgid "Examine the output of the `manage.sh` script if you want to learn what aws commands are executed to create, delete, and update your functions."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:230
msgid "One thing to note about the create command for native is that the `aws lambda create-function` call must set a specific environment variable:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:234
#, no-wrap
msgid "--environment 'Variables={DISABLE_SIGNAL_HANDLERS=true}'\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:236
#, no-wrap
msgid "Examine the POM"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:240
msgid "There is nothing special about the POM other than the inclusion of the `quarkus-funqy-amazon-lambda` and `quarkus-test-amazon-lambda` extensions as a dependencies.  The extension automatically generates everything you might need for your lambda deployment."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:241
#, no-wrap
msgid "Integration Testing"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:246
msgid "Funqy Amazon Lambda support leverages the Quarkus AWS Lambda test framework so that you can unit tests your Funqy functions.  This is true for both JVM and native modes.  This test framework provides similar functionality to the SAM CLI, without the overhead of Docker."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:249
msgid "If you open up {quickstarts-tree-url}/funqy-quickstarts/funqy-amazon-lambda-quickstart/src/test/java/org/acme/funqy/FunqyTest.java[FunqyTest.java] you'll see that the test replicates the AWS execution environment."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:253
#, no-wrap
msgid "package org.acme.funqy;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:258
#, no-wrap
msgid ""
"import io.quarkus.amazon.lambda.test.LambdaClient;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.junit.jupiter.api.Assertions;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:268
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class FunqyTest {\n"
"    @Test\n"
"    public void testSimpleLambdaSuccess() throws Exception {\n"
"        Friend friend = new Friend(\"Bill\");\n"
"        Greeting out = LambdaClient.invoke(Greeting.class, friend);\n"
"        Assertions.assertEquals(\"Hello Bill\", out.getMessage());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:270
#, no-wrap
msgid "Testing with the SAM CLI"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:276
msgid "The https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI] allows you to run your functions locally on your laptop in a simulated Lambda environment.  This requires https://www.docker.com/products/docker-desktop[docker] to be installed.  This is an optional approach should you choose to take advantage of it.  Otherwise, the Quarkus JUnit integration should be sufficient for most of your needs."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:278
msgid "A starter template has been generated for both JVM and native execution modes."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:281
msgid "Run the following SAM CLI command to locally test your function, passing the appropriate SAM `template`.  The `event` parameter takes any JSON file, in this case the sample `payload.json`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:288
msgid "The native image can also be locally tested using the `sam.native.yaml` template:"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:294
#, no-wrap
msgid "Modifying `function.zip`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:299
msgid "There are times where you may have to add additional entries to the `function.zip` lambda deployment that is generated by the build.  To do this create a `zip.jvm` or `zip.native` directory within `src/main`.  Create `zip.jvm/` if you are doing a pure Java.  `zip.native/` if you are doing a native deployment."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:301
msgid "Any you files and directories you create under your zip directory will be included within `function.zip`"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:302
#, no-wrap
msgid "Custom `bootstrap` script"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:308
msgid "There are times you may want to set specific system properties or other arguments when lambda invokes your native Funqy deployment.  If you include a `bootstrap` script file within `zip.native`, the Funqy extension will automatically rename the executable to `runner` within `function.zip` and set the unix mode of the `bootstrap` script to executable."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:310
msgid "The native executable must be referenced as `runner` if you include a custom `bootstrap` script."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:311
msgid "The extension generates an example script within `target/bootstrap-example.sh`."
msgstr ""
