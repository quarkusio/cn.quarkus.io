# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:6
#, no-wrap
msgid "Using the REST Client Reactive"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:12
msgid "This guide explains how to use the REST Client Reactive in order to interact with REST APIs.  REST Client Reactive is a non-blocking counterpart of the RESTEasy REST Client."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:15
msgid "If your application uses a client and exposes REST endpoints, please use link:resteasy-reactive[RESTEasy Reactive] for the server part."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:16
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:19
msgid "To complete this guide, you need:"
msgstr "要完成这个指南，你需要："

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:21
msgid "less than 15 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:22
msgid "an IDE"
msgstr "一个编辑器"

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:23
msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
msgstr "安装JDK 11以上版本并正确配置了 `JAVA_HOME`"

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:24
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Title ==
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:25
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:29
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:31
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:33
msgid "The solution is located in the `rest-client-reactive-quickstart` {quickstarts-tree-url}/rest-client-reactive-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:34
#, no-wrap
msgid "Creating the Maven project"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:37
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:47
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=rest-client-reactive-quickstart \\\n"
"    -DclassName=\"org.acme.rest.client.CountriesResource\" \\\n"
"    -Dpath=\"/country\" \\\n"
"    -Dextensions=\"resteasy-reactive-jackson,rest-client-reactive-jackson\"\n"
"cd rest-client-reactive-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:50
msgid "This command generates the Maven project with a REST endpoint and imports:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:52
msgid "the `resteasy-reactive-jackson` extension for the REST server support. Use `resteasy-reactive` instead if you do not wish to use Jackson;"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:53
msgid "the `rest-client-reactive-jackson` extension for the REST client support. Use `rest-client-reactive` instead if you do not wish to use Jackson"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:56
msgid "If you already have your Quarkus project configured, you can add the `rest-client-reactive-jackson` extension to your project by running the following command in your project base directory:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:60
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"rest-client-reactive-jackson\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:63
msgid "This will add the following to your `pom.xml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:70
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-rest-client-reactive-jackson</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:72
#, no-wrap
msgid "Setting up the model"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:76
msgid "In this guide we will be demonstrating how to consume part of the REST API supplied by the link:https://restcountries.eu[restcountries.eu] service.  Our first order of business is to setup the model we will be using, in the form of a `Country` POJO."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:78
msgid "Create a `src/main/java/org/acme/rest/client/Country.java` file and set the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:82
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:110
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:167
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:229
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:269
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:289
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:331
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:370
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:401
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:461
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:489
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:551
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:581
#, no-wrap
msgid "package org.acme.rest.client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:84
#, no-wrap
msgid "import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:86
#, no-wrap
msgid "public class Country {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:91
#, no-wrap
msgid ""
"    public String name;\n"
"    public String alpha2Code;\n"
"    public String capital;\n"
"    public List<Currency> currencies;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:98
#, no-wrap
msgid ""
"    public static class Currency {\n"
"        public String code;\n"
"        public String name;\n"
"        public String symbol;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:102
msgid "The model above is only a subset of the fields provided by the service (thus the `@JsonIgnoreProperties` annotation), but it suffices for the purposes of this guide."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:103
#, no-wrap
msgid "Create the interface"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:106
msgid "Using the REST Client Reactive is as simple as creating an interface using the proper JAX-RS and MicroProfile annotations. In our case the interface should be created at `src/main/java/org/acme/rest/client/CountriesService.java` and have the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:112
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:169
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:372
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:553
#, no-wrap
msgid "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:118
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.PathParam;\n"
"import javax.ws.rs.Produces;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:122
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:179
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:475
#, no-wrap
msgid ""
"@Path(\"/v2\")\n"
"@RegisterRestClient\n"
"public interface CountriesService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:127
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/name/{countryName}\")\n"
"    Set<Country> getByName(String countryName);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:131
msgid "The `getByName` method gives our code the ability to query a country by name from the REST Countries API.  The client will handle all the networking and marshalling leaving our code clean of such technical details."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:135
msgid "No `@PathParam` annotation is necessary on `countryName` as the name of the parameter matches the value used in the `@Path` annotation"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:138
msgid "The purpose of the annotations in the code above is the following:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:141
msgid "`@RegisterRestClient` allows Quarkus to know that this interface is meant to be available for CDI injection as a REST Client"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:142
msgid "`@Path`, `@GET` and `@PathParam` are the standard JAX-RS annotations used to define how to access the service"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:143
msgid "`@Produces` defines the expected content-type"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:148
msgid "When the `quarkus-rest-client-reactive-jackson` extension is installed, Quarkus will use the `application/json` media type by default for most return values, unless the media type is explicitly set via `@Produces` or `@Consumes` annotations."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:151
msgid "If you don't rely on the JSON default, it is heavily recommended to annotate your endpoints with the `@Produces` and `@Consumes` annotations to define precisely the expected content-types.  It will allow to narrow down the number of JAX-RS providers (which can be seen as converters) included in the native executable."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:157
msgid "The `getByName` method above is a blocking call. It should not be invoked on the event loop.  The <<async-support>> section describes how to make non-blocking calls."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:159
#, no-wrap
msgid "Query Parameters"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:163
msgid "If the GET request requires query parameters you can leverage the `@QueryParam(\"parameter-name\")` annotation instead of (or in addition to) the `@PathParam`. Path and query parameters can be combined, as required, as illustrated in the example below."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:175
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:275
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.PathParam;\n"
"import javax.ws.rs.QueryParam;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:184
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:283
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/name/{region}\")\n"
"    Set<Country> getByRegion(String region, @QueryParam(\"city\") String city);\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:187
#, no-wrap
msgid "Create the configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:191
msgid "In order to determine the base URL to which REST calls will be made, the REST Client uses configuration from `application.properties`.  The name of the property needs to follow a certain convention which is best displayed in the following code:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:196
#, no-wrap
msgid ""
"# Your configuration properties\n"
"org.acme.rest.client.CountriesService/mp-rest/url=https://restcountries.eu/rest # // <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:200
msgid "Having this configuration means that all requests performed using `org.acme.rest.client.CountriesService` will use `https://restcountries.eu/rest` as the base URL.  Using the configuration above, calling the `getByName` method of `CountriesService` with a value of `France` would result in an HTTP GET request being made to `https://restcountries.eu/rest/v2/name/France`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:202
msgid "Note that `org.acme.rest.client.CountriesService` _must_ match the fully qualified name of the `CountriesService` interface we created in the previous section."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:204
msgid "To facilitate the configuration, you can use the `@RegisterRestClient` `configKey` property that allows to use different configuration root than the fully qualified name of your interface."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:212
#, no-wrap
msgid ""
"@RegisterRestClient(configKey=\"country-api\")\n"
"public interface CountriesService {\n"
"    [...]\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:219
#, no-wrap
msgid ""
"# Your configuration properties\n"
"country-api/mp-rest/url=https://restcountries.eu/rest\n"
"country-api/mp-rest/scope=javax.inject.Singleton\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:221
#, no-wrap
msgid "Update the JAX-RS resource"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:224
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:397
msgid "Open the `src/main/java/org/acme/rest/client/CountriesResource.java` file and update it with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:233
#, no-wrap
msgid ""
"import io.smallrye.common.annotation.Blocking;\n"
"import org.eclipse.microprofile.rest.client.inject.RestClient;\n"
"import org.jboss.resteasy.reactive.RestPath;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:237
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:240
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:302
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:413
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:502
#, no-wrap
msgid ""
"@Path(\"/country\")\n"
"public class CountriesResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:243
#, no-wrap
msgid ""
"    @RestClient // <1>\n"
"    CountriesService countriesService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:252
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/name/{name}\")\n"
"    @Blocking // <2>\n"
"    public Set<Country> name(String name) {\n"
"        return countriesService.getByName(name);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:255
msgid "There are two interesting parts in this listing:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:257
msgid "the client stub is injected with the `@RestClient` annotation instead of the usual CDI `@Inject`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:258
msgid "the call we are making with the client is blocking, hence we need the `@Blocking` annotation on the REST endpoint"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:259
#, no-wrap
msgid "Programmatic client creation with RestClientBuilder"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:263
msgid "Instead of annotating the client with `@RegisterRestClient`, and injecting a client with `@RestClient`, you can also create REST Client programmatically.  You do that with `RestClientBuilder`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:265
msgid "With this approach the client interface could look as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:278
#, no-wrap
msgid ""
"@Path(\"/v2\")\n"
"public interface CountriesService {\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:286
msgid "And the service as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:292
#, no-wrap
msgid ""
"import io.smallrye.common.annotation.Blocking;\n"
"import org.jboss.resteasy.reactive.RestPath;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:297
#, no-wrap
msgid ""
"import javax.annotation.PostConstruct;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:299
#, no-wrap
msgid "import org.eclipse.microprofile.rest.client.RestClientBuilder;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:304
#, no-wrap
msgid "    private CountriesService countriesService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:311
#, no-wrap
msgid ""
"    @PostConstruct\n"
"    public void setUp(){\n"
"        countriesService = RestClientBuilder.newBuilder()\n"
"            .baseUrl(\"https://restcountries.eu/rest\")\n"
"            .build(CountriesService.class);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:319
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/name/{name}\")\n"
"    @Blocking\n"
"    public Set<Country> name(String name) {\n"
"        return countriesService.getByName(name);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:322
#, no-wrap
msgid "Update the test"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:326
msgid "Next, we need to update the functional test to reflect the changes made to the endpoint.  Edit the `src/test/java/org/acme/rest/client/CountriesResourceTest.java` file and change the content of the `testCountryNameEndpoint` method to:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:334
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:337
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:340
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class CountriesResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:354
#, no-wrap
msgid ""
"    @Test\n"
"    public void testCountryNameEndpoint() {\n"
"        given()\n"
"          .when().get(\"/country/name/greece\")\n"
"          .then()\n"
"             .statusCode(200)\n"
"             .body(\"$.size()\", is(1),\n"
"                     \"[0].alpha2Code\", is(\"GR\"),\n"
"                     \"[0].capital\", is(\"Athens\"),\n"
"                     \"[0].currencies.size()\", is(1),\n"
"                     \"[0].currencies[0].name\", is(\"Euro\")\n"
"             );\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:356
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:359
msgid "The code above uses link:http://rest-assured.io/[REST Assured]'s link:https://github.com/rest-assured/rest-assured/wiki/GettingStarted#jsonpath[json-path] capabilities."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:362
#, no-wrap
msgid "Async Support"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:366
msgid "To get the full power of the reactive nature of the client, you can use the non-blocking flavor of REST Client Reactive extension, which comes with support for `CompletionStage` and `Uni`.  Let's see it in action by adding a `getByNameAsync` method in our `CountriesService` REST interface. The code should look like:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:379
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:471
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.PathParam;\n"
"import javax.ws.rs.Produces;\n"
"import java.util.Set;\n"
"import java.util.concurrent.CompletionStage;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:383
#, no-wrap
msgid ""
"@Path(\"/v2\")\n"
"@RegisterRestClient(configKey=\"country-api\")\n"
"public interface CountriesService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:387
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/name/{name}\")\n"
"    Set<Country> getByName(String name);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:394
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/name/{name}\")\n"
"    @Produces(\"application/json\")\n"
"    CompletionStage<Set<Country>> getByNameAsync(String name);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:404
#, no-wrap
msgid ""
"import io.smallrye.common.annotation.Blocking;\n"
"import org.eclipse.microprofile.rest.client.inject.RestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:410
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:499
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.PathParam;\n"
"import java.util.Set;\n"
"import java.util.concurrent.CompletionStage;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:416
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:505
#, no-wrap
msgid ""
"    @RestClient\n"
"    CountriesService countriesService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:424
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/name/{name}\")\n"
"    @Blocking\n"
"    public Set<Country> name(String name) {\n"
"        return countriesService.getByName(name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:431
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/name-async/{name}\")\n"
"    public CompletionStage<Set<Country>> nameAsync(String name) {\n"
"        return countriesService.getByNameAsync(name);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:436
msgid "Please note that since the invocation is now non-blocking, we don't need the `@Blocking` annotation anymore on the endpoint.  This means that the `nameAsync` method will be invoked on the event loop, i.e. will not get offloaded to a worker pool thread and thus reducing hardware resource utilization."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:439
msgid "To test asynchronous methods, add the test method below in `CountriesResourceTest`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:454
#, no-wrap
msgid ""
"@Test\n"
"public void testCountryNameAsyncEndpoint() {\n"
"    given()\n"
"    .when().get(\"/country/name-async/greece\")\n"
"    .then()\n"
"        .statusCode(200)\n"
"        .body(\"$.size()\", is(1),\n"
"             \"[0].alpha2Code\", is(\"GR\"),\n"
"             \"[0].capital\", is(\"Athens\"),\n"
"             \"[0].currencies.size()\", is(1),\n"
"             \"[0].currencies[0].name\", is(\"Euro\")\n"
"        );\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:457
msgid "The `Uni` version is very similar:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:464
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import org.jboss.resteasy.annotations.jaxrs.PathParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:477
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:508
#, no-wrap
msgid "    // ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:482
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/name/{name}\")\n"
"    Uni<Set<Country>> getByNameAsUni(String name);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:485
msgid "The `CountriesResource` becomes:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:493
#, no-wrap
msgid ""
"import io.smallrye.common.annotation.Blocking;\n"
"import io.smallrye.mutiny.Uni;\n"
"import org.eclipse.microprofile.rest.client.inject.RestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:515
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/name-uni/{name}\")\n"
"    public Uni<Set<Country>> nameUni(String name) {\n"
"        return countriesService.getByNameAsUni(name);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Block title
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:518
#, no-wrap
msgid "Mutiny"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:522
msgid "The previous snippet uses Mutiny reactive types.  If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:526
msgid "When returning a `Uni`, every _subscription_ invokes the remote service.  It means you can re-send the request by re-subscribing on the `Uni`, or use a `retry` as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:531
#, no-wrap
msgid "@RestClient CountriesResource service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:533
#, no-wrap
msgid "// ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:536
#, no-wrap
msgid ""
"service.nameAsync(\"Greece\")\n"
"   .onFailure().retry().atMost(10);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:542
msgid "If you use a `CompletionStage`, you would need to call the service's method to retry.  This difference comes from the laziness aspect of Mutiny and its subscription protocol.  More details about this can be found in https://smallrye.io/smallrye-mutiny/#_uni_and_multi[the Mutiny documentation]."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:543
#, no-wrap
msgid "Custom headers support"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:545
msgid "The MicroProfile REST client allows amending request headers by registering a `ClientHeadersFactory` with the `@RegisterClientHeaders` annotation."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:547
msgid "Let's see it in action by adding a `@RegisterClientHeaders` annotation pointing to a `RequestUUIDHeaderFactory` class in our `CountriesService` REST interface:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:560
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.PathParam;\n"
"import javax.ws.rs.Produces;\n"
"import java.util.concurrent.CompletionStage;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:565
#, no-wrap
msgid ""
"@Path(\"/v2\")\n"
"@RegisterRestClient\n"
"@RegisterClientHeaders(RequestUUIDHeaderFactory.class)\n"
"public interface CountriesService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:569
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/name/{name}\")\n"
"    Set<Country> getByName(@PathParam(\"name\") String name);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:574
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/name/{name}\")\n"
"    CompletionStage<Set<Country>> getByNameAsync(@PathParam(\"name\") String name);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:577
msgid "And the `RequestUUIDHeaderFactory` would look like:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:583
#, no-wrap
msgid "import org.eclipse.microprofile.rest.client.ext.ClientHeadersFactory;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:588
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.ws.rs.core.MultivaluedHashMap;\n"
"import javax.ws.rs.core.MultivaluedMap;\n"
"import java.util.UUID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:591
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class RequestUUIDHeaderFactory implements ClientHeadersFactory {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:599
#, no-wrap
msgid ""
"    @Override\n"
"    public MultivaluedMap<String, String> update(MultivaluedMap<String, String> incomingHeaders, MultivaluedMap<String, String> clientOutgoingHeaders) {\n"
"        MultivaluedMap<String, String> result = new MultivaluedHashMap<>();\n"
"        result.add(\"X-request-uuid\", UUID.randomUUID().toString());\n"
"        return result;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:603
msgid "As you see in the example above, you can make your `ClientHeadersFactory` implementation a CDI bean by annotating it with a scope-defining annotation, such as `@Singleton`, `@ApplicationScoped`, etc."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:604
#, no-wrap
msgid "Default header factory"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:606
msgid "You can also use `@RegisterClientHeaders` annotation without any custom factory specified. In that case the `DefaultClientHeadersFactoryImpl` factory will be used and all headers listed in `org.eclipse.microprofile.rest.client.propagateHeaders` configuration property will be amended. Individual header names are comma-separated."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:613
#, no-wrap
msgid ""
"@Path(\"/v2\")\n"
"@RegisterRestClient\n"
"@RegisterClientHeaders\n"
"public interface CountriesService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:618
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/name/{name}\")\n"
"    @Produces(\"application/json\")\n"
"    Set<Country> getByName(@PathParam(\"name\") String name);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:624
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/name/{name}\")\n"
"    @Produces(\"application/json\")\n"
"    CompletionStage<Set<Country>> getByNameAsync(@PathParam(\"name\") String name);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:629
#, no-wrap
msgid "org.eclipse.microprofile.rest.client.propagateHeaders=Authorization,Proxy-Authorization\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:631
#, no-wrap
msgid "Multipart Form support"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:634
msgid "Rest Client Reactive allows sending data as multipart forms. This way you can for example send files efficiently."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:637
msgid "To send data as a multipart form, you need to create a class that would encapsulate all the fields to be sent, e.g."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:644
#, no-wrap
msgid ""
"class FormDto {\n"
"    @FormParam(\"file\")\n"
"    @PartType(MediaType.APPLICATION_OCTET_STREAM)\n"
"    public File file;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:649
#, no-wrap
msgid ""
"    @FormParam(\"otherField\")\n"
"    @PartType(MediaType.TEXT_PLAIN)\n"
"    public String textProperty;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:652
msgid "The method that sends a form needs to specify multipart form data as the consumed media type, e.g."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:659
#, no-wrap
msgid ""
"    @POST\n"
"    @Consumes(MediaType.MULTIPART_FORM_DATA)\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"/binary\")\n"
"    String sendMultipart(@MultipartForm FormDto data);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:664
msgid "Fields specified as `File`, `Path`, `byte[]` or `Buffer` are sent as files; as binary files for `@PartType(MediaType.APPLICATION_OCTET_STREAM)`, as text files for other content types.  Other fields are sent as form attributes."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:674
msgid "There are a few modes in which the form data can be encoded. By default, Rest Client Reactive uses RFC1738.  You can override it by specifying the mode either on the client level, by setting `io.quarkus.rest.client.multipart-post-encoder-mode` RestBuilder property to the selected value of `HttpPostRequestEncoder.EncoderMode` or by specfying `quarkus.rest.client.multipart-post-encoder-mode` in your `application.properties`. Please note that the latter works only for clients created with the `@RegisterRestClient` annotation.  All the available modes are described in the link:https://netty.io/4.1/api/io/netty/handler/codec/http/multipart/HttpPostRequestEncoder.EncoderMode.html[Netty documentation]"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:676
#, no-wrap
msgid "Package and run the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:680
msgid "Run the application with: `./mvnw compile quarkus:dev`.  Open your browser to http://localhost:8080/country/name/greece."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:682
msgid "You should see a JSON object containing some basic information about Greece."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:685
msgid "As usual, the application can be packaged using `./mvnw clean package` and executed using the `target/quarkus-app/quarkus-run.jar` file.  You can also generate the native executable with `./mvnw clean package -Pnative`."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:686
#, no-wrap
msgid "Using a Mock HTTP Server for tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:691
msgid "For tests, you can easily mock the HTTP server with Wiremock.  The link:rest-client#using-a-mock-http-server-for-tests[Wiremock section of the Quarkus - Using the REST Client] describes how to set it up in detail."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:692
#, no-wrap
msgid "Known limitations"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:695
msgid "While the REST Client Reactive extension aims to be a drop-in replacement for the REST Client extension, there are some differences and limitations:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:698
msgid "the default scope of the client for the new extension is `@ApplicationScoped` while the `quarkus-rest-client` defaults to `@Dependent` To change this behavior, set the `quarkus.rest.client.scope` property to the fully qualified scope name."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:699
msgid "it is not possible to set `HostnameVerifier` or `SSLContext`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:700
msgid "a few things that don't make sense for a non-blocking implementations, such as setting the `ExecutorService`, don't work"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:703
#, no-wrap
msgid "Further reading"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/rest-client-reactive.adoc:705
msgid "link:https://download.eclipse.org/microprofile/microprofile-rest-client-2.0/microprofile-rest-client-spec-2.0.html[MicroProfile Rest Client specification]"
msgstr ""
