# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:6
#, no-wrap
msgid "Using OpenID Connect (OIDC) to Protect Service Applications using Bearer Token Authorization"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:12
msgid "This guide demonstrates how to use Quarkus OpenID Connect (OIDC) Extension to protect your JAX-RS applications using Bearer Token Authorization where Bearer Tokens are issued by OpenId Connect and OAuth 2.0 compliant Authorization Servers such as https://www.keycloak.org/about.html[Keycloak]."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:14
msgid "Bearer Token Authorization is the process of authorizing HTTP requests based on the existence and validity of a Bearer Token which provides valuable information to determine the subject of the call as well as whether or not an HTTP resource can be accessed."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:16
msgid "Please read the link:security-openid-connect-web-authentication[Using OpenID Connect to Protect Web Applications] guide if you need to authenticate and authorize the users using OpenId Connect Authorization Code Flow."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:18
msgid "If you use Keycloak and Bearer tokens then also see the link:security-keycloak-authorization[Using Keycloak to Centralize Authorization] guide."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:20
msgid "Please read the link:security-openid-connect-multitenancy[Using OpenID Connect Multi-Tenancy] guide how to support multiple tenants."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:21
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:24
msgid "To complete this guide, you need:"
msgstr "要完成这个指南，你需要："

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:26
msgid "less than 15 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:27
msgid "an IDE"
msgstr "一个编辑器"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:28
msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
msgstr "安装JDK 11以上版本并正确配置了 `JAVA_HOME`"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:29
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:30
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:31
msgid "Docker"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:32
#, no-wrap
msgid "Architecture"
msgstr "应用结构"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:35
msgid "In this example, we build a very simple microservice which offers three endpoints:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:37
msgid "`/api/users/me`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:38
msgid "`/api/admin`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:40
msgid "These endpoints are protected and can only be accessed if a client is sending a bearer token along with the request, which must be valid (e.g.: signature, expiration and audience) and trusted by the microservice."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:42
msgid "The bearer token is issued by a Keycloak Server and represents the subject to which the token was issued for. For being an OAuth 2.0 Authorization Server, the token also references the client acting on behalf of the user."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:44
msgid "The `/api/users/me` endpoint can be accessed by any user with a valid token. As a response, it returns a JSON document with details about the user where these details are obtained from the information carried on the token."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:46
msgid "The `/api/admin` endpoint is protected with RBAC (Role-Based Access Control) where only users granted with the `admin` role can access. At this endpoint, we use the `@RolesAllowed` annotation to declaratively enforce the access constraint."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:47
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:51
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:53
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:55
msgid "The solution is located in the `security-openid-connect-quickstart` {quickstarts-tree-url}/security-openid-connect-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:56
#, no-wrap
msgid "Creating the Maven Project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:59
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:68
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=security-openid-connect-quickstart \\\n"
"    -Dextensions=\"resteasy,oidc,resteasy-jackson\" \\\n"
"    -DnoExamples\n"
"cd security-openid-connect-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:72
msgid "This command generates a Maven project, importing the `keycloak` extension which is an implementation of a Keycloak Adapter for Quarkus applications and provides all the necessary capabilities to integrate with a Keycloak Server and perform bearer token authorization."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:75
msgid "If you already have your Quarkus project configured, you can add the `oidc` extension to your project by running the following command in your project base directory:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:79
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"oidc\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:82
msgid "This will add the following to your `pom.xml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:89
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:91
#, no-wrap
msgid "Writing the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:94
msgid "Let's start by implementing the `/api/users/me` endpoint. As you can see from the source code below it is just a regular JAX-RS resource:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:98
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:141
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:169
#, no-wrap
msgid "package org.acme.security.openid.connect;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:103
#, no-wrap
msgid ""
"import javax.annotation.security.RolesAllowed;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:106
#, no-wrap
msgid ""
"import org.jboss.resteasy.annotations.cache.NoCache;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:109
#, no-wrap
msgid ""
"@Path(\"/api/users\")\n"
"public class UsersResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:112
#, no-wrap
msgid ""
"    @Inject\n"
"    SecurityIdentity securityIdentity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:120
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/me\")\n"
"    @RolesAllowed(\"user\")\n"
"    @NoCache\n"
"    public User me() {\n"
"        return new User(securityIdentity);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:122
#, no-wrap
msgid "    public static class User {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:124
#, no-wrap
msgid "        private final String userName;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:128
#, no-wrap
msgid ""
"        User(SecurityIdentity securityIdentity) {\n"
"            this.userName = securityIdentity.getPrincipal().getName();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:134
#, no-wrap
msgid ""
"        public String getUserName() {\n"
"            return userName;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:137
msgid "The source code for the `/api/admin` endpoint is also very simple. The main difference here is that we are using a `@RolesAllowed` annotation to make sure that only users granted with the `admin` role can access the endpoint:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:147
#, no-wrap
msgid ""
"import javax.annotation.security.RolesAllowed;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:150
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:180
#, no-wrap
msgid ""
"@Path(\"/api/admin\")\n"
"public class AdminResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:158
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"admin\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String admin() {\n"
"        return \"granted\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:161
msgid "Injection of the `SecurityIdentity` is supported in both `@RequestScoped` and `@ApplicationScoped` contexts."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:162
#, no-wrap
msgid "Accessing JWT claims"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:165
msgid "If you need to access `JsonWebToken` claims, you may simply inject the token itself:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:177
#, no-wrap
msgid ""
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import javax.inject.Inject;\n"
"import javax.annotation.security.RolesAllowed;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:183
#, no-wrap
msgid ""
"    @Inject\n"
"    JsonWebToken jwt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:191
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"admin\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String admin() {\n"
"        return \"Access for subject \" + jwt.getSubject() + \" is granted\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:194
msgid "Injection of the `JsonWebToken` is supported in both `@RequestScoped` and `@ApplicationScoped` contexts."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:195
#, no-wrap
msgid "Configuring the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:198
msgid "The OpenID Connect extension allows you to define the adapter configuration using the `application.properties` file which should be located at the `src/main/resources` directory."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:199
#, no-wrap
msgid "Configuring using the application.properties file"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:204
msgid "Example configuration:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:209
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
"quarkus.oidc.client-id=backend-service\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:211
#, no-wrap
msgid "Configuring CORS"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:214
msgid "If you plan to consume this application from another application running on a different domain, you will need to configure CORS (Cross-Origin Resource Sharing). Please read the link:http-reference#cors-filter[HTTP CORS documentation] for more details."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:215
#, no-wrap
msgid "Starting and Configuring the Keycloak Server"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:218
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:222
#, no-wrap
msgid "docker run --name keycloak -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin -p 8180:8080 {keycloak-docker-image}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:225
msgid "You should be able to access your Keycloak Server at http://localhost:8180/auth[localhost:8180/auth]."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:227
msgid "Log in as the `admin` user to access the Keycloak Administration Console. Username should be `admin` and password `admin`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:229
msgid "Import the {quickstarts-tree-url}/security-openid-connect-quickstart/config/quarkus-realm.json[realm configuration file] to create a new realm. For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:232
msgid "If you want to use the Keycloak Admin Client to configure your server from your application you need to include the `quarkus-keycloak-admin-client` extension."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:233
#, no-wrap
msgid "Running and Using the Application"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:235
#, no-wrap
msgid "Running in Developer Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:238
msgid "To run the microservice in dev mode, use `./mvnw clean compile quarkus:dev`."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:239
#, no-wrap
msgid "Running in JVM Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:242
msgid "When you're done playing with \"dev-mode\" you can run it as a standard Java application."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:244
msgid "First compile it:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:248
#, no-wrap
msgid "./mvnw package\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:251
msgid "Then run it:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:255
#, no-wrap
msgid "java -jar target/quarkus-app/quarkus-run.jar\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:257
#, no-wrap
msgid "Running in Native Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:260
msgid "This same demo can be compiled into native code: no modifications required."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:264
msgid "This implies that you no longer need to install a JVM on your production environment, as the runtime technology is included in the produced binary, and optimized to run with minimal resource overhead."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:267
msgid "Compilation will take a bit longer, so this step is disabled by default; let's build again by enabling the `native` profile:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:271
#, no-wrap
msgid "./mvnw package -Pnative\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:274
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:278
#, no-wrap
msgid "./target/security-openid-connect-quickstart-runner\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:280
#, no-wrap
msgid "Testing the Application"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:285
msgid "The application is using bearer token authorization and the first thing to do is obtain an access token from the Keycloak Server in order to access the application resources:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:294
#, no-wrap
msgid ""
"export access_token=$(\\\n"
"    curl -X POST http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/token \\\n"
"    --user backend-service:secret \\\n"
"    -H 'content-type: application/x-www-form-urlencoded' \\\n"
"    -d 'username=alice&password=alice&grant_type=password' | jq --raw-output '.access_token' \\\n"
" )\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:297
msgid "The example above obtains an access token for user `alice`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:301
msgid "Any user is allowed to access the `http://localhost:8080/api/users/me` endpoint which basically returns a JSON payload with details about the user."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:307
#, no-wrap
msgid ""
"curl -v -X GET \\\n"
"  http://localhost:8080/api/users/me \\\n"
"  -H \"Authorization: Bearer \"$access_token\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:312
#, no-wrap
msgid ""
"The `http://localhost:8080/api/admin` endpoint can only be accessed by users with the `admin` role. If you try to access this endpoint with the\n"
" previously issued access token, you should get a `403` response\n"
" from the server.\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:318
#, no-wrap
msgid ""
"curl -v -X GET \\\n"
"   http://localhost:8080/api/admin \\\n"
"   -H \"Authorization: Bearer \"$access_token\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:321
msgid "In order to access the admin endpoint you should obtain a token for the `admin` user:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:330
#, no-wrap
msgid ""
"export access_token=$(\\\n"
"    curl -X POST http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/token \\\n"
"    --user backend-service:secret \\\n"
"    -H 'content-type: application/x-www-form-urlencoded' \\\n"
"    -d 'username=admin&password=admin&grant_type=password' | jq --raw-output '.access_token' \\\n"
" )\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:333
#, no-wrap
msgid "User Info"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:338
msgid "Set `quarkus.oidc.user-info-required=true` if a UserInfo JSON object from the OIDC userinfo endpoint has to be requested.  A request will be sent to the OpenId Provider UserInfo endpoint and an `io.quarkus.oidc.UserInfo` (a simple `javax.json.JsonObject` wrapper) object will be created.  `io.quarkus.oidc.UserInfo` can be either injected or accessed as a SecurityIdentity `userinfo` attribute."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:340
#, no-wrap
msgid "Configuration Metadata"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:343
msgid "The current tenant's discovered link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenId Connect Configuration Metadata] is represented by `io.quarkus.oidc.OidcConfigurationMetadata` and can be either injected or accessed as a `SecurityIdentity` `configuration-metadata` attribute."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:345
msgid "The default tenant's `OidcConfigurationMetadata` is injected if the endpoint is public."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:346
#, no-wrap
msgid "Token Claims And SecurityIdentity Roles"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:349
msgid "SecurityIdentity roles can be mapped from the verified JWT access tokens as follows:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:352
msgid "If `quarkus.oidc.roles.role-claim-path` property is set and a matching array or string claim is found then the roles are extracted from this claim.  For example, `customroles`, `customroles/array`, `scope`, `\"http://namespace-qualified-custom-claim\"/roles`, `\"http://namespace-qualified-roles\"`, etc."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:353
msgid "If `groups` claim is available then its value is used"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:355
msgid "If `realm_access/roles` or `resource_access/client_id/roles` (where `client_id` is the value of the `quarkus.oidc.client-id` property) claim is available then its value is used.  This check supports the tokens issued by Keycloak"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:357
msgid "If the token is opaque (binary) then a `scope` property from the remote token introspection response will be used."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:359
msgid "If UserInfo is the source of the roles then set `quarkus.oidc.authentication.user-info-required=true` and `quarkus.oidc.roles.source=userinfo`, and if needed, `quarkus.oidc.roles.role-claim-path`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:361
msgid "Additionally a custom `SecurityIdentityAugmentor` can also be used to add the roles as documented link:security#security-identity-customization[here]."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:363
#, no-wrap
msgid "Token Verification And Introspection "
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:368
msgid "If the token is a JWT token then, by default, it will be verified with a `JsonWebKey` (JWK) key from a local `JsonWebKeySet` retrieved from the OpenId Connect Provider's JWK endpoint. The token's key identifier `kid` header value will be used to find the matching JWK key.  If no matching `JWK` is available locally then `JsonWebKeySet` will be refreshed by fetching the current key set from the JWK endpoint. The `JsonWebKeySet` refresh can be repeated again only after the `quarkus.oidc.token.forced-jwk-refresh-interval` (default is 10 minutes) expires.  If no matching `JWK` is available after the refresh then the JWT token will be sent to the OpenId Connect Provider's token introspection endpoint."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:370
msgid "If the token is opaque (it can be a binary token or an encrypted JWT token) then it will always be sent to the OpenId Connect Provider's token introspection endpoint."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:372
msgid "If you work with JWT tokens only and expect that a matching `JsonWebKey` will always be available (possibly after a key set refresh) then you should disable the token introspection:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:377
#, no-wrap
msgid ""
"quarkus.oidc.token.allow-jwt-introspection=false\n"
"quarkus.oidc.token.allow-opaque-token-introspection=false\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:380
msgid "However, there could be cases where JWT tokens must be verified via the introspection only. It can be forced by configuring an introspection endpoint address only, for example, in case of Keycloak you can do it like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:387
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
"quarkus.oidc.discovery-enabled=false\n"
"# Token Introspection endoint: http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens/introspect\n"
"quarkus.oidc.introspection-path=/protocol/openid-connect/tokens/introspect\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:390
msgid "Note that `io.quarkus.oidc.TokenIntrospection` (a simple `javax.json.JsonObject` wrapper) object will be created and can be either injected or accessed as a SecurityIdentity `introspection` attribute if either JWT or opaque token has been successfully introspected."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:392
#, no-wrap
msgid "Single Page Applications"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:396
msgid "Single Page Application (SPA) typically uses `XMLHttpRequest`(XHR) and the Java Script utility code provided by the OpenId Connect provider to acquire a bearer token and use it to access Quarkus `service` applications."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:398
msgid "For example, here is how you can use `keycloak.js` to authenticate the users and refresh the expired tokens from the SPA:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:437
#, no-wrap
msgid ""
"<html>\n"
"<head>\n"
"    <title>keycloak-spa</title>\n"
"    <script src=\"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\"></script>\n"
"    <script src=\"http://localhost:8180/auth/js/keycloak.js\"></script>\n"
"    <script>\n"
"        var keycloak = new Keycloak();\n"
"        keycloak.init({onLoad: 'login-required'}).success(function () {\n"
"            console.log('User is now authenticated.');\n"
"        }).error(function () {\n"
"            window.location.reload();\n"
"        });\n"
"        function makeAjaxRequest() {\n"
"            axios.get(\"/api/hello\", {\n"
"                headers: {\n"
"                    'Authorization': 'Bearer ' + keycloak.token\n"
"                }\n"
"            })\n"
"            .then( function (response) {\n"
"                console.log(\"Response: \", response.status);\n"
"            }).catch(function (error) {\n"
"                console.log('refreshing');\n"
"                keycloak.updateToken(5).then(function () {\n"
"                    console.log('Token refreshed');\n"
"                }).catch(function () {\n"
"                    console.log('Failed to refresh token');\n"
"                    window.location.reload();\n"
"                });\n"
"            });\n"
"    }\n"
"    </script>\n"
"</head>\n"
"<body>\n"
"    <button onclick=\"makeAjaxRequest()\">Request</button>\n"
"</body>\n"
"</html>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:439
#, no-wrap
msgid "Provider Endpoint configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:442
msgid "OIDC `service` application needs to know OpenId Connect provider's token, `JsonWebKey` (JWK) set and possibly `UserInfo` and introspection endpoint addresses."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:444
msgid "By default they are discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc.auth-server-url`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:446
msgid "Alternatively, if the discovery endpoint is not available or you would like to save on the discovery endpoint roundtrip, you can disable the discovery and configure them with relative path values, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:459
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
"quarkus.oidc.discovery-enabled=false\n"
"# Token endpoint: http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/token\n"
"quarkus.oidc.token-path=/protocol/openid-connect/token\n"
"# JWK set endpoint: http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/certs\n"
"quarkus.oidc.jwks-path=/protocol/openid-connect/certs\n"
"# UserInfo endoint: http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/userinfo\n"
"quarkus.oidc.user-info-path=/protocol/openid-connect/userinfo\n"
"# Token Introspection endoint: http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens/introspect\n"
"quarkus.oidc.introspection-path=/protocol/openid-connect/tokens/introspect\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:462
#, no-wrap
msgid "JSON Web Token Claim Verification"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:465
msgid "Once the bearer JWT token's signature has been verified and its `expires at` (`exp`) claim has been checked, the `iss` (`issuer`) claim value is verified next."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:468
msgid "By default, the `iss` claim value is compared to the `issuer` property which may have been discovered in the well-known provider configuration.  But if `quarkus.oidc.token.issuer` property is set then the `iss` claim value is compared to it instead."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:470
msgid "In some cases, this `iss` claim verification may not work. For example, if the discovered `issuer` property contains an internal HTTP/IP address while the token `iss` claim value contains an external HTTP/IP address. Or when a discovered `issuer` property contains the template tenant variable but the token `iss` claim value has the complete tenant-specific issuer value."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:472
msgid "In such cases you may want to consider skipping the issuer verification by setting `quarkus.oidc.token.issuer=any`. Please note that it is not recommended and should be avoided unless no other options are available:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:474
msgid "If you work with Keycloak and observe the issuer verification errors due to the different host addresses then configure Keycloak with a `KEYCLOAK_FRONTEND_URL` property to ensure the same host address is used."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:475
msgid "If the `iss` property is tenant specific in a multi-tenant deployment then you can use the `SecurityIdentity` `tenant-id` attribute to check the issuer is correct in the endpoint itself or the custom JAX-RS filter, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:482
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.container.ContainerRequestContext;\n"
"import javax.ws.rs.container.ContainerRequestFilter;\n"
"import javax.ws.rs.ext.Provider;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:486
#, no-wrap
msgid ""
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import io.quarkus.oidc.OidcConfigurationMetadata;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:491
#, no-wrap
msgid ""
"@Provider\n"
"public class IssuerValidator implements ContainerRequestFilter {\n"
"    @Inject\n"
"    OidcConfigurationMetadata configMetadata;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:494
#, no-wrap
msgid ""
"    @Inject JsonWebToken jwt;\n"
"    @Inject SecurityIdentity identity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:502
#, no-wrap
msgid ""
"    public void filter(ContainerRequestContext requestContext) {\n"
"        String issuer = configMetadata.getIssuer().replace(\"{tenant-id}\", identity.getAttribute(\"tenant-id\"));\n"
"        if (!issuer.equals(jwt.getIssuer())) {\n"
"            requestContext.abortWith(Response.status(401).build());\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:505
msgid "Note it is also recommended to use `quarkus.oidc.token.audience` property to verify the token `aud` (`audience`) claim value."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:506
#, no-wrap
msgid "Token Propagation"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:509
msgid "Please see link:security-openid-connect-client#token-propagation[Token Propagation] section about the Bearer access token propagation to the downstream services."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:511
#, no-wrap
msgid "Oidc Provider Client Authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:514
msgid "`quarkus.oidc.runtime.OidcProviderClient` is used when a remote request to an OpenId Connect Provider has to be done. If the bearer token has to be introspected then `OidcProviderClient` has to authenticate to the OpenId Connect Provider. Please see link:security-openid-connect-web-authentication#oidc-provider-client-authentication[OidcProviderClient Authentication] for more information about all the supported authentication options."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:516
#, no-wrap
msgid "Testing"
msgstr "测试"

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:519
msgid "Start by adding the following dependencies to your test project:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:532
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.rest-assured</groupId>\n"
"    <artifactId>rest-assured</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:535
#, no-wrap
msgid "Wiremock"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:538
msgid "Add the following dependencies to your test project:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:546
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-oidc-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:549
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:641
msgid "Prepare the REST test endpoint, set `application.properties`, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:558
#, no-wrap
msgid ""
"# keycloak.url is set by OidcWiremockTestResource\n"
"quarkus.oidc.auth-server-url=${keycloak.url}/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-service-app\n"
"quarkus.oidc.application-type=service\n"
"# required to sign the tokens\n"
"smallrye.jwt.sign.key.location=privateKey.jwk\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:561
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:652
msgid "and finally write the test code, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:565
#, no-wrap
msgid "import static org.hamcrest.Matchers.equalTo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:568
#, no-wrap
msgid ""
"import java.util.Arrays;\n"
"import java.util.HashSet;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:571
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:660
#, no-wrap
msgid ""
"import org.hamcrest.Matchers;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:577
#, no-wrap
msgid ""
"import io.quarkus.test.common.QuarkusTestResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.oidc.server.OidcWiremockTestResource;\n"
"import io.restassured.RestAssured;\n"
"import io.smallrye.jwt.build.Jwt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:581
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(OidcWiremockTestResource.class)\n"
"public class BearerTokenAuthorizationTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:591
#, no-wrap
msgid ""
"    @Test\n"
"    public void testBearerToken() {\n"
"        RestAssured.given().auth().oauth2(getAccessToken(\"alice\", new HashSet<>(Arrays.asList(\"user\"))))\n"
"            .when().get(\"/api/users/preferredUserName\")\n"
"            .then()\n"
"            .statusCode(200)\n"
"            // the test endpoint returns the name extracted from the injected SecurityIdentity Principal\n"
"            .body(\"userName\", equalTo(\"alice\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:600
#, no-wrap
msgid ""
"    private String getAccessToken(String userName, Set<String> groups) {\n"
"        return Jwt.preferredUserName(userName)\n"
"                .groups(groups)\n"
"                .issuer(\"https://server.example.com\")\n"
"                .audience(\"https://service.example.com\")\n"
"                .sign();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:604
msgid "Testing your `quarkus-oidc` `service` application with `OidcWiremockTestResource` provides the best coverage as even the communication channel is tested against the Wiremock HTTP stubs.  `OidcWiremockTestResource` will be enhanced going forward to support more complex Bearer token test scenarios."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:606
#, no-wrap
msgid "Keycloak"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:609
msgid "If you work with Keycloak then you can test against a live Keycloak instance by adding the following dependency:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:617
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-keycloak-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:620
msgid "and configure `maven.surefire.plugin` as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:636
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-surefire-plugin</artifactId>\n"
"    <configuration>\n"
"        <systemPropertyVariables>\n"
"            <!-- or, alternativey, configure 'keycloak.version' -->\n"
"            <keycloak.docker.image>${keycloak.docker.image}</keycloak.docker.image>\n"
"            <!--\n"
"              Disable HTTPS if required:\n"
"              <keycloak.use.https>false</keycloak.use.https>\n"
"            -->\n"
"        </systemPropertyVariables>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:639
msgid "(and similarly `maven.failsafe.plugin` when testing in native image)."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:649
#, no-wrap
msgid ""
"# keycloak.url is set by KeycloakTestResourceLifecycleManager\n"
"quarkus.oidc.auth-server-url=${keycloak.url}/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-service-app\n"
"quarkus.oidc.credentials=secret\n"
"quarkus.oidc.application-type=service\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:657
#, no-wrap
msgid ""
"import static io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager.getAccessToken;\n"
"import static org.hamcrest.Matchers.equalTo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:665
#, no-wrap
msgid ""
"import io.quarkus.test.common.QuarkusTestResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager;\n"
"import io.restassured.RestAssured;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:669
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(KeycloakTestResourceLifecycleManager.class)\n"
"public class BearerTokenAuthorizationTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:679
#, no-wrap
msgid ""
"    @Test\n"
"    public void testBearerToken() {\n"
"        RestAssured.given().auth().oauth2(getAccessToken(\"alice\"))))\n"
"            .when().get(\"/api/users/preferredUserName\")\n"
"            .then()\n"
"            .statusCode(200)\n"
"            // the test endpoint returns the name extracted from the injected SecurityIdentity Principal\n"
"            .body(\"userName\", equalTo(\"alice\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:681
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:762
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:834
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:684
msgid "`KeycloakTestResourceLifecycleManager` registers `alice` and `admin` users. The user `alice` has the `user` role only by default - it can be customized with a `keycloak.token.user-roles` system property. The user `admin` has the `user` and `admin` roles by default - it can be customized with a `keycloak.token.admin-roles` system property."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:687
msgid "By default, `KeycloakTestResourceLifecycleManager` uses HTTPS to initialize a Keycloak instance which can be disabled with `keycloak.use.https=false`.  Default realm name is `quarkus` and client id - `quarkus-service-app` - set `keycloak.realm` and `keycloak.service.client` system properties to customize the values if needed."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:689
#, no-wrap
msgid "Local Public Key"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:692
msgid "You can also use a local inlined public key for testing your `quarkus-oidc` `service` applications:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:697
#, no-wrap
msgid ""
"quarkus.oidc.client-id=test\n"
"quarkus.oidc.public-key=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlivFI8qB4D0y2jy0CfEqFyy46R0o7S8TKpsx5xbHKoU1VWg6QkQm+ntyIv1p4kE1sPEQO73+HY8+Bzs75XwRTYL1BmR1w8J5hmjVWjc6R2BTBGAYRPFRhor3kpM6ni2SPmNNhurEAHw7TaqszP5eUF/F9+KEBWkwVta+PZ37bwqSE4sCb1soZFrVz/UT/LF4tYpuVYt3YbqToZ3pZOZ9AX2o1GCG3xwOjkc4x0W7ezbQZdC9iftPxVHR8irOijJRRjcPDtA6vPKpzLl6CyYnsIYPd99ltwxTHjr3npfv/3Lw50bAkbT4HeLFxTx4flEoZLKO/g0bAoV2uqBhkA9xnQIDAQAB\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:699
#, no-wrap
msgid "smallrye.jwt.sign.key.location=/privateKey.pem\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:702
msgid "copy `privateKey.pem` from the `integration-tests/oidc-tenancy` in the `main` Quarkus repository and use a test code similar to the one in the `Wiremock` section above to generate JWT tokens. You can use your own test keys if preferred."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:704
msgid "This approach provides a more limited coverage compared to the Wiremock approach - for example, the remote communication code is not covered."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:706
#, no-wrap
msgid "TestSecurity annotation"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:709
msgid "You can use `@TestSecurity` and `@OidcSecurity` annotations for testing the `service` application endpoint code which depends on the injected `JsonWebToken` as well as `UserInfo` and `OidcConfigurationMetadata`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:711
msgid "Add the following dependency:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:718
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-security-oidc</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:721
msgid "and write a test code like this one:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:735
#, no-wrap
msgid ""
"import static org.hamcrest.Matchers.is;\n"
"import org.junit.jupiter.api.Test;\n"
"import io.quarkus.test.common.http.TestHTTPEndpoint;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.security.TestSecurity;\n"
"import io.quarkus.test.security.oidc.Claim;\n"
"import io.quarkus.test.security.oidc.ConfigMetadata;\n"
"import io.quarkus.test.security.oidc.OidcSecurity;\n"
"import io.quarkus.test.security.oidc.OidcConfigurationMetadata;\n"
"import io.quarkus.test.security.oidc.UserInfo;\n"
"import io.restassured.RestAssured;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:739
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:820
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@TestHTTPEndpoint(ProtectedResource.class)\n"
"public class TestSecurityAuthTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:746
#, no-wrap
msgid ""
"    @Test\n"
"    @TestSecurity(user = \"userOidc\", roles = \"viewer\")\n"
"    public void testOidc() {\n"
"        RestAssured.when().get(\"test-security-oidc\").then()\n"
"                .body(is(\"userOidc:viewer\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:760
#, no-wrap
msgid ""
"    @Test\n"
"    @TestSecurity(user = \"userOidc\", roles = \"viewer\")\n"
"    @OidcSecurity(claims = {\n"
"            @Claim(key = \"email\", value = \"user@gmail.com\")\n"
"    }, userinfo = {\n"
"            @UserInfo(key = \"sub\", value = \"subject\")\n"
"    }, config = {\n"
"            @ConfigMetadata(key = \"issuer\", value = \"issuer\")\n"
"    })\n"
"    public void testOidcWithClaimsUserInfoAndMetadata() {\n"
"        RestAssured.when().get(\"test-security-oidc-claims-userinfo-metadata\").then()\n"
"                .body(is(\"userOidc:viewer:user@gmail.com:subject:issuer\"));\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:765
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:837
msgid "where `ProtectedResource` class may look like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:771
#, no-wrap
msgid ""
"import io.quarkus.oidc.OidcConfigurationMetadata;\n"
"import io.quarkus.oidc.UserInfo;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:775
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:846
#, no-wrap
msgid ""
"@Path(\"/service\")\n"
"@Authenticated\n"
"public class ProtectedResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:782
#, no-wrap
msgid ""
"    @Inject\n"
"    JsonWebToken accessToken;\n"
"    @Inject\n"
"    UserInfo userInfo;\n"
"    @Inject\n"
"    OidcConfigurationMetadata configMetadata;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:788
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"test-security-oidc\")\n"
"    public String testSecurityOidc() {\n"
"        return accessToken.getName() + \":\" + accessToken.getGroups().iterator().next();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:798
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"test-security-oidc-claims-userinfo-metadata\")\n"
"    public String testSecurityOidcWithClaimsUserInfoMetadata() {\n"
"        return accessToken.getName() + \":\" + accessToken.getGroups().iterator().next()\n"
"                + \":\" + accessToken.getClaim(\"email\")\n"
"                + \":\" + userInfo.getString(\"sub\")\n"
"                + \":\" + configMetadata.get(\"issuer\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:803
msgid "Note that `@TestSecurity` annotation must always be used and its `user` property is returned as `JsonWebToken.getName()` and `roles` property - as `JsonWebToken.getGroups()`.  `@OidcSecurity` annotation is optional and can be used to set the additional token claims, as well as `UserInfo` and `OidcConfigurationMetadata` properties.  Additionally, if `quarkus.oidc.token.issuer` property is configured then it will be used as an `OidcConfigurationMetadata` `issuer` property value."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:805
msgid "If you work with the opaque tokens then you can test them as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:816
#, no-wrap
msgid ""
"import static org.hamcrest.Matchers.is;\n"
"import org.junit.jupiter.api.Test;\n"
"import io.quarkus.test.common.http.TestHTTPEndpoint;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.security.TestSecurity;\n"
"import io.quarkus.test.security.oidc.OidcSecurity;\n"
"import io.quarkus.test.security.oidc.TokenIntrospection;\n"
"import io.restassured.RestAssured;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:832
#, no-wrap
msgid ""
"    @Test\n"
"    @TestSecurity(user = \"userOidc\", roles = \"viewer\")\n"
"    @OidcSecurity(introspectionRequired = true,\n"
"        introspection = {\n"
"            @TokenIntrospection(key = \"email\", value = \"user@gmail.com\")\n"
"        }\n"
"    )\n"
"    public void testOidcWithClaimsUserInfoAndMetadata() {\n"
"        RestAssured.when().get(\"test-security-oidc-claims-userinfo-metadata\").then()\n"
"                .body(is(\"userOidc:viewer:userOidc:viewer\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:842
#, no-wrap
msgid ""
"import io.quarkus.oidc.TokenIntrospection;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:851
#, no-wrap
msgid ""
"    @Inject\n"
"    SecurityIdentity securityIdentity;\n"
"    @Inject\n"
"    TokenIntrospection introspection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:861
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"test-security-oidc-opaque-token\")\n"
"    public String testSecurityOidcOpaqueToken() {\n"
"        return securityIdentity.getPrincipal().getName() + \":\" + securityIdentity.getRoles().iterator().next()\n"
"            + \":\" + introspection.getString(\"username\")\n"
"            + \":\" + introspection.getString(\"scope\")\n"
"            + \":\" + introspection.getString(\"email\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:864
msgid "Note that `@TestSecurity` `user` and `roles` attributes are availabe as `TokenIntrospection` `username` and `scope` properties and you can use `io.quarkus.test.security.oidc.TokenIntrospection` to add the additional introspection response properties such as an `email`, etc."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:865
#, no-wrap
msgid "How to check the errors in the logs"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:868
msgid "Please enable `io.quarkus.oidc.runtime.OidcProvider` `TRACE` level logging to see more details about the token verification errors:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:873
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcProvider\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcProvider\".min-level=TRACE\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:876
msgid "Please enable `io.quarkus.oidc.runtime.OidcRecorder` `TRACE` level logging to see more details about the OidcProvider client initialization errors:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:881
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcRecorder\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcRecorder\".min-level=TRACE\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:883
#, no-wrap
msgid "External and Internal Access to OpenId Connect Provider"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:886
msgid "Note that the OpenId Connect Provider externally accessible token and other endpoints may have different HTTP(S) URLs compared to the URLs auto-discovered or configured relative to `quarkus.oidc.auth-server-url` internal URL. For example, if your SPA acquires a token from an external token endpoint address and sends it to Quarkus as a Bearer token then an issuer verification failure may be reported by the endpoint."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:889
msgid "In such cases, if you work with Keycloak then please start it with a `KEYCLOAK_FRONTEND_URL` system property set to the externally accessible base URL.  If you work with other Openid Connect providers then please check your provider's documentation."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:890
#, no-wrap
msgid "How to use 'client-id' property"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:893
msgid "`quarkus.oidc.client-id` property identifies an OpenId Connect Client which requested the current bearer token. It can be an SPA application running in a browser or a Quarkus `web-app` confidential client application propagating the access token to the Quarkus `service` application."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:896
msgid "This property is required if the `service` application is expected to introspect the tokens remotely - which is always the case for the opaque tokens.  This property is optional if the local Json Web Key token verification only is used."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:898
msgid "Nonetheless, setting this propery is encouraged even if the endpoint does not require an access to the remote introspection endpoint. The reasons behind it that `client-id`, if set, can be used to verify the token audience and will also be included in the logs when the token verification fails for the better traceability of the tokens issued to specific clients to be analyzed over a longer period of time."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:900
msgid "For example, if your OpenId Connect provider sets a token audience then the following configuration pattern is recommended:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:907
#, no-wrap
msgid ""
"# Set client-id\n"
"quarkus.oidc.client-id=quarkus-app\n"
"# Token audience claim must contain 'quarkus-app'\n"
"quarkus.oidc.token.audience=${quarkus.oidc.client-id}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:910
msgid "If you set `quarkus.oidc.client-id` but your endpoint does not require a remote access to one of OpenId Connect Provider endpoints (introspection, token acquisition, etc) then do not set a client secret with the `quarkus.oidc.credentials` or similar properties as it will not be used."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:912
msgid "Note Quarkus `web-app` applications always require `quarkus.oidc.client-id` property."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:914
#, no-wrap
msgid "References"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:917
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:918
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:919
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:920
msgid "link:security-openid-connect-client[Quarkus - Using OpenID Connect and OAuth2 Client and Filters to manage access tokens]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:921
msgid "link:security-openid-connect-dev-services[Dev Services for OpenId Connect]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/security-openid-connect.adoc:921
msgid "link:security[Quarkus Security]"
msgstr ""
