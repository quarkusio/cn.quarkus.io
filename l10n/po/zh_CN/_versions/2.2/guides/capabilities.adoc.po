# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/capabilities.adoc:6
#, no-wrap
msgid "Extension Capabilities"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/capabilities.adoc:11
msgid "Quarkus extensions may declare in their descriptors (`META-INF/quarkus-extension.properties` found in the runtime extension JAR artifact) that they provide certain capabilities. A capability represents a technical aspect, e.g. an implementation of some functionality or a specification. Each capability has a name which should follow the Java package naming convetion, e.g. `io.quarkus.rest`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/capabilities.adoc:13
msgid "Only a single provider of any given capability is allowed in an application. If more than one provider of a capability is detected, the application build will fail with the corresponding error message."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/capabilities.adoc:15
msgid "At build time all the capabilities found in the application will be aggregated in an instance of the `io.quarkus.deployment.Capabilities` build item that extension build steps can inject to check whether a given capability is available or not."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/capabilities.adoc:16
#, no-wrap
msgid "Declaring capabilities"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/capabilities.adoc:19
msgid "The `quarkus-bootstrap-maven-plugin:extension-descriptor` Maven goal, that generates the extension descriptor, allows to declare provided capabilities in the following way:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/capabilities.adoc:31
#, no-wrap
msgid ""
"<plugin>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-bootstrap-maven-plugin</artifactId>\n"
"    <configuration>\n"
"        <capabilities>\n"
"            <provides>io.quarkus.rest</provides>\n"
"            <provides>io.quarkus.resteasy</provides>\n"
"        </capabilities>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/capabilities.adoc:34
msgid "In this case, the extension is declaring two capabilities."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/capabilities.adoc:35
#, no-wrap
msgid "Declaring conditional capabilities"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/capabilities.adoc:38
msgid "A capability may be provided only if a certain condition is satisfied, e.g. if a certain configuration option is enabled or based on some other condition. This could be expressed in the following way:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/capabilities.adoc:52
#, no-wrap
msgid ""
"<plugin>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-bootstrap-maven-plugin</artifactId>\n"
"    <configuration>\n"
"        <capabilities>\n"
"            <providesIf> <1>\n"
"                <positive>io.quarkus.container.image.openshift.deployment.OpenshiftBuild</positive> <2>\n"
"                <name>io.quarkus.container.image.openshift</name> <3>\n"
"            </providesIf>\n"
"        </capabilities>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/capabilities.adoc:54
msgid "declaration of a conditional capability"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/capabilities.adoc:55
msgid "condition that must be resolved to `true` by a class implementing `java.util.function.BooleanSupplier`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/capabilities.adoc:56
msgid "provided capability name"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/capabilities.adoc:58
msgid "`providesIf` allows listing multiple `<positive>` as well as `<negative>` elements."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/capabilities.adoc:60
msgid "In this case, `io.quarkus.container.image.openshift.deployment.OpenshiftBuild` should be included in one of the extension deployment dependencies and implement `java.util.function.BooleanSupplier`. At build time, the Quarkus bootstrap will create an instance of it and register `io.quarkus.container.image.openshift` capability only if its `getAsBoolean()` method returns true."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/capabilities.adoc:62
msgid "An implementation of the `OpenshiftBuild` could look like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/capabilities.adoc:65
#, no-wrap
msgid "import java.util.function.BooleanSupplier;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/capabilities.adoc:67
#, no-wrap
msgid "import io.quarkus.container.image.deployment.ContainerImageConfig;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/capabilities.adoc:69
#, no-wrap
msgid "public class OpenshiftBuild implements BooleanSupplier {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/capabilities.adoc:71
#, no-wrap
msgid "    private ContainerImageConfig containerImageConfig;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/capabilities.adoc:75
#, no-wrap
msgid ""
"    OpenshiftBuild(ContainerImageConfig containerImageConfig) {\n"
"        this.containerImageConfig = containerImageConfig;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/capabilities.adoc:81
#, no-wrap
msgid ""
"    @Override\n"
"    public boolean getAsBoolean() {\n"
"        return containerImageConfig.builder.map(b -> b.equals(OpenshiftProcessor.OPENSHIFT)).orElse(true);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/capabilities.adoc:83
#, no-wrap
msgid "CapabilityBuildItem"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/capabilities.adoc:86
msgid "Each provided capability will be represented with an instance of `io.quarkus.deployment.builditem.CapabilityBuildItem` at build time. Theoretically, `CapabilityBuildItem`'s could be produced by extension build steps directly, bypassing the corresponding declaration in the extension descriptors. However, this way of providing capabilities should be avoided, unless there is a very good reason not to declare a capability in the descriptor."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/capabilities.adoc:88
msgid "Capabilities produced from extension build steps aren't available for the Quarkus dev tools. As a consequences, such capabilities can not be taken into account when analyzing extension compatibility during project creation or when adding new extensions to a project."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/capabilities.adoc:89
#, no-wrap
msgid "Querying capabilities"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/capabilities.adoc:92
msgid "All the capabilities found in an application will be aggregated during the build in an instance of `io.quarkus.deployment.Capabilities` build item, which can be injected by extension build steps to check whether a certain capability is present or not. E.g."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/capabilities.adoc:104
#, no-wrap
msgid ""
"    @BuildStep\n"
"    HealthBuildItem addHealthCheck(Capabilities capabilities, DataSourcesBuildTimeConfig dataSourcesBuildTimeConfig) {\n"
"        if (capabilities.isPresent(Capability.SMALLRYE_HEALTH)) {\n"
"            return new HealthBuildItem(\"io.quarkus.agroal.runtime.health.DataSourceHealthCheck\",\n"
"                    dataSourcesBuildTimeConfig.healthEnabled);\n"
"        } else {\n"
"            return null;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/capabilities.adoc:106
#, no-wrap
msgid "Capability prefixes"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/capabilities.adoc:109
msgid "Like a capability name, a capability prefix is a dot-separated string that is composed of either the first capability name element or a dot-separated sequence of the capability name elements starting from the first one. E.g. for capability `io.quarkus.resteasy.json.jackson` the following prefixes will be registered:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/capabilities.adoc:111
msgid "`io`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/capabilities.adoc:112
msgid "`io.quarkus`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/capabilities.adoc:113
msgid "`io.quarkus.resteasy`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/capabilities.adoc:114
msgid "`io.quarkus.resteasy.json`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/capabilities.adoc:116
msgid "`Capabilities.isCapabilityWithPrefixPresent(prefix)` could be used to check whether a capability with a given prefix is present."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/capabilities.adoc:118
msgid "Given that only a single provider of a given capability is allowed in an application, capability prefixes allow expressing a certain common aspect among different but somewhat related capabilities. E.g. there could be extensions providing the following capabilities:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/capabilities.adoc:120
msgid "`io.quarkus.resteasy.json.jackson`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/capabilities.adoc:121
msgid "`io.quarkus.resteasy.json.jackson.client`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/capabilities.adoc:122
msgid "`io.quarkus.resteasy.json.jsonb`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/capabilities.adoc:123
msgid "`io.quarkus.resteasy.json.jsonb.client`"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/capabilities.adoc:124
msgid "Including any one of those extensions in an application will enable the RESTEasy JSON serializer. In case a build step needs to check whether the RESTEasy JSON serializer is already enabled in an application, instead of checking whether any of those capabilities is present, it could simply check whether an extension with prefix `io.quarkus.resteasy.json` is present."
msgstr ""
