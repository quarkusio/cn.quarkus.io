msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Simplified Hibernate Reactive with Panache"
msgstr "简化的Hibernate 响应式与Panache"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"link:https://hibernate.org/reactive/[Hibernate Reactive] is the only reactive Jakarta Persistence (formerly known as JPA) implementation and offers you the full\n"
"breadth of an Object Relational Mapper allowing you to access your database over reactive drivers.\n"
"It makes complex mappings possible, but it does not make simple and common mappings trivial.\n"
"Hibernate Reactive with Panache focuses on making your entities trivial and fun to write in Quarkus."
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"Hibernate Reactive is not a replacement for xref:hibernate-orm-panache.adoc[Hibernate ORM] or the future of Hibernate ORM.\n"
"It is a different stack tailored for reactive use cases where you need high-concurrency."
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"Furthermore, using Quarkus REST (formerly RESTEasy Reactive), our default REST layer, does not require the use of Hibernate Reactive.\n"
"It is perfectly valid to use Quarkus REST with Hibernate ORM,\n"
"and if you do not need high-concurrency, or are not accustomed to the reactive paradigm, it is recommended to use Hibernate ORM."
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "First: an example"
msgstr "第一：一个例子"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "What we're doing in Panache allows you to write your Hibernate Reactive entities like this:"
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"You have noticed how much more compact and readable the code is?\n"
"Does this look interesting? Read on!"
msgstr "你有注意到代码的紧凑性和可读性大大提高了吗？看起来很有趣吧？请继续阅读!"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "The `list()` method might be surprising at first. It takes fragments of HQL (JP-QL) queries and contextualizes the rest. That makes for very concise but yet readable code."
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"What was described above is essentially the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[active record pattern], sometimes just called the entity pattern.\n"
"Hibernate with Panache also allows for the use of the more classical link:https://martinfowler.com/eaaCatalog/repository.html[repository pattern] via `PanacheRepository`."
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Solution"
msgstr "解决方案"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "The solution is located in the `hibernate-reactive-panache-quickstart` link:{quickstarts-tree-url}/hibernate-reactive-panache-quickstart[directory]."
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Setting up and configuring Hibernate Reactive with Panache"
msgstr "在Hibernate Reactive中配置Panache"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "To get started:"
msgstr "起步："

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "add your settings in `{config-file}`"
msgstr "在 `{config-file}` 中添加你的设置。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "annotate your entities with `@Entity`"
msgstr "给实体类增加 `@Entity` 注解"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "make your entities extend `PanacheEntity` (optional if you are using the repository pattern)"
msgstr "实体类改为继承 `PanacheEntity` 类（使用Repository模式时为可选操作）。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Follow the xref:hibernate-orm.adoc#setting-up-and-configuring-hibernate-orm[Hibernate set-up guide for all configuration]."
msgstr "按照 link:hibernate-orm.html#setting-up-and-configuring-hibernate-orm[Hibernate 设置指南] 进行其他配置。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "In your `pom.xml`, add the following dependencies:"
msgstr "在你的 `pom.xml` 文件中添加以下依赖项："

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "the Hibernate Reactive with Panache extension"
msgstr "Hibernate Reactive with Panache扩展"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "your reactive driver extension (`quarkus-reactive-pg-client`, `quarkus-reactive-mysql-client`, `quarkus-reactive-db2-client`, ...)"
msgstr "响应式驱动扩展 ( `quarkus-reactive-pg-client` , `quarkus-reactive-mysql-client` , `quarkus-reactive-db2-client` , ...)"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "For instance:"
msgstr "比如："

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Then add the relevant configuration properties in `{config-file}`."
msgstr "然后在 `{config-file}` 中添加相关的配置属性。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Solution 1: using the active record pattern"
msgstr "解决方案1：使用active record（活动记录）模式"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Defining your entity"
msgstr "定义你的实体"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"To define a Panache entity, simply extend `PanacheEntity`, annotate it with `@Entity` and add your\n"
"columns as public fields:"
msgstr "要定义一个Panache实体类，只需继承 `PanacheEntity` ，增加 `@Entity` 注解，并将数据库列作为公共字段添加到实体类："

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"You can put all your Jakarta Persistence column annotations on the public fields. If you need a field to not be persisted, use the\n"
"`@Transient` annotation on it. If you need to write accessors, you can:"
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"And thanks to our field access rewrite, when your users read `person.name` they will actually call your `getName()` accessor,\n"
"and similarly for field writes and the setter.\n"
"This allows for proper encapsulation at runtime as all fields calls will be replaced by the corresponding getter/setter calls."
msgstr "而且由于我们的字段访问重写，当你的用户读取 `person.name` ，他们实际上会调用你的 `getName()` 方法，类似的还有字段写入和设置器。这允许在运行时进行适当的封装，因为所有字段的调用都将被相应的getter/setter调用所取代。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Most useful operations"
msgstr "最有用的操作"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Once you have written your entity, here are the most common operations you will be able to perform:"
msgstr "编写实体后，可以执行以下最常见的操作："

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Adding entity methods"
msgstr "添加实体方法"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"Add custom queries on your entities inside the entities themselves.\n"
"That way, you and your co-workers can find them easily, and queries are co-located with the object they operate on.\n"
"Adding them as static methods in your entity class is the Panache Active Record way."
msgstr "在实体本身内部的实体上添加自定义查询。这样，您和您的同事可以轻松找到它们，并且查询与他们操作的对象位于同一位置。将它们作为静态方法添加到实体类中是 Panache Active Record 方式。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Solution 2: using the repository pattern"
msgstr "解决方案2：使用资源库模式"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "When using the repository pattern, you can define your entities as regular Jakarta Persistence entities."
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"If you don't want to bother defining getters/setters for your entities, you can make them extend `PanacheEntityBase` and\n"
"Quarkus will generate them for you. You can even extend `PanacheEntity` and take advantage of the default ID it provides."
msgstr "如果你不想自己定义实体的getter和setter方法，可以让实体类继承 `PanacheEntityBase` ，Quarkus将自动生成getter和setter方法。你也可以继承 `PanacheEntity` ，相比 `PanacheEntityBase` ，其优势是它还提供默认的ID字段。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Defining your repository"
msgstr "定义你的存储库"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"When using Repositories, you get the exact same convenient methods as with the active record pattern, injected in your Repository,\n"
"by making them implements `PanacheRepository`:"
msgstr "使用 Repository 模式时，通过实现 `PanacheRepository` 接口，你可以使用与Active Record模式下完全相同的便捷方法："

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"All the operations that are defined on `PanacheEntityBase` are available on your repository, so using it\n"
"is exactly the same as using the active record pattern, except you need to inject it:"
msgstr "`PanacheEntityBase` 中定义的所有方法都可以在你的Repository类上使用，所以它使用起来与Active Record模式完全一样，只是你需要注入Repository类的实例："

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Once you have written your repository, here are the most common operations you will be able to perform:"
msgstr "编写存储库后，您可以执行以下最常见的操作："

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"The rest of the documentation show usages based on the active record pattern only,\n"
"but keep in mind that they can be performed with the repository pattern as well.\n"
"The repository pattern examples have been omitted for brevity."
msgstr "其余的文档只展示了基于活动记录模式的用法，但请记住，这些用法也可以用资源库模式来执行。为了简洁起见，已省略存储库模式示例。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Advanced Query"
msgstr "高级查询"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Paging"
msgstr "分页"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"You should only use the `list` methods if your table contains small enough data sets. For larger data\n"
"sets you can use the `find` method equivalents, which return a `PanacheQuery` on which you can do paging:"
msgstr "如果你的表数据量很小，你应该只用到 `list` 方法。对于较大的数据集，你可以使用对应的 `find` 方法，它返回一个 `PanacheQuery` ，可以对其进行分页查询操作："

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "The `PanacheQuery` type has many other methods to deal with paging and returning streams."
msgstr "`PanacheQuery` 类型有许多其他方法来处理分页和返回流。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Using a range instead of pages"
msgstr "使用range而不是pages"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "`PanacheQuery` also allows range-based queries."
msgstr "`PanacheQuery` 也允许基于范围的查询。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"You cannot mix ranges and pages: if you use a range, all methods that depend on having a current page will throw an `UnsupportedOperationException`;\n"
"you can switch back to paging using `page(Page)` or `page(int, int)`."
msgstr "你不能混合使用ranges和pages：如果你使用range，所有依赖于拥有当前页面的方法将抛出一个 `UnsupportedOperationException` ；你可以使用 `page(Page)` 或 `page(int, int)` 切换回分页。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Sorting"
msgstr "排序"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "All methods accepting a query string also accept the following simplified query form:"
msgstr "所有接收查询字符串的方法也能接收以下简化形式的查询："

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "But these methods also accept an optional `Sort` parameter, which allows you to abstract your sorting:"
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "The `Sort` class has plenty of methods for adding columns and specifying sort direction or the null precedence."
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Simplified queries"
msgstr "简化查询"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"Normally, HQL queries are of this form: `from EntityName [where ...] [order by ...]`, with optional elements\n"
"at the end."
msgstr "通常情况下，HQL查询语句是这种形式： `from EntityName [where ...​] [order by ...​]` ，结尾处有可选元素。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "If your select query does not start with `from`, `select` or `with`, we support the following additional forms:"
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "`order by ...` which will expand to `from EntityName order by ...`"
msgstr "`order by ...` 语句会被扩展为： `from EntityName order by ...` "

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "`<singleAttribute>` (and single parameter) which will expand to `from EntityName where <singleAttribute> = ?`"
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "`where <query>` will expand to `from EntityName where <query>`"
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "`<query>` will expand to `from EntityName where <query>`"
msgstr "`<query>` 语句会被扩展为： `from EntityName where <query>` "

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "If your update query does not start with `update`, we support the following additional forms:"
msgstr "如果你的更新语句不是以 `update` 开始，我们还支持以下的形式："

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "`from EntityName ...` which will expand to `update EntityName ...`"
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "`set? <singleAttribute>` (and single parameter) which will expand to `update EntityName set <singleAttribute> = ?`"
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "`set? <update-query>` will expand to `update EntityName set <update-query>`"
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "If your delete query does not start with `delete`, we support the following additional forms:"
msgstr "如果你的删除语句不是以 `delete` 开始，我们还支持以下的形式："

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "`from EntityName ...` which will expand to `delete from EntityName ...`"
msgstr "`from EntityName ...​` 语句会被扩展为： `delete from EntityName ...​` "

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "`<singleAttribute>` (and single parameter) which will expand to `delete from EntityName where <singleAttribute> = ?`"
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "`<query>` will expand to `delete from EntityName where <query>`"
msgstr "`<query>` 语句会被扩展为： `delete from EntityName where <query>` "

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"You can also write your queries in plain\n"
"link:{hibernate-orm-docs-url}#hql[HQL]:"
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Named queries"
msgstr "命名查询"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "You can reference a named query instead of a (simplified) HQL query by prefixing its name with the '#' character. You can also use named queries for count, update and delete queries."
msgstr "除了上述的简化HQL查询以外，你还可以定义一个命名查询，然后通过'#'字符加命名来（在HQL中）引用它。在计数、更新和删除查询中也可以使用命名查询。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"Named queries can only be defined inside your Jakarta Persistence entity classes,\n"
"or on one of their super classes."
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Query parameters"
msgstr "查询参数"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "You can pass query parameters by index (1-based) as shown below:"
msgstr "你可以通过索引（从1开始）传递查询参数，如下所示："

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Or by name using a `Map`:"
msgstr "或者使用 `Map` ，按名字来命名："

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Or using the convenience class `Parameters` either as is or to build a `Map`:"
msgstr "或者使用方便的类 `Parameters` ，既可以是原样，也可以是建立一个 `Map` 。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Every query operation accepts passing parameters by index (`Object...`), or by name (`Map<String,Object>` or `Parameters`)."
msgstr "每个查询操作都接受按索引（ `Object...` ）或按名称（ `Map<String,Object>` 或 `Parameters` ）传递参数。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Query projection"
msgstr "查询映射"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Query projection can be done with the `project(Class)` method on the `PanacheQuery` object that is returned by the `find()` methods."
msgstr "查询映射可以使用 `find()` 方法返回的 `PanacheQuery` 对象上的 `project(Class)` 方法来完成。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "You can use it to restrict which fields will be returned by the database."
msgstr "你可以用投影限制数据库返回哪些字段。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"Hibernate will use **DTO projection** and generate a SELECT clause with the attributes from the projection class.\n"
"This is also called **dynamic instantiation** or **constructor expression**, more info can be found on the Hibernate guide:\n"
"link:{hibernate-orm-docs-url}#hql-select-clause[hql select clause]"
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"The projection class needs to be a valid Java Bean and have a constructor that contains all its attributes, this constructor will be used to\n"
"instantiate the projection DTO instead of using the entity class. This must be the only constructor of the class."
msgstr "投影类必须是有效的Java Bean，并且拥有一个包含所有属性的构造方法，这个构造方法用于实例化投影DTO，而不是使用实体类。这个构造方法必须是唯一的构造方法。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation. More details about the `@RegisterForReflection` annotation can be found on  the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr "`@RegisterForReflection` 注解用于指导Quarkus在native编译过程中保留该类和其成员。关于 `@RegisterForReflection` 注解的更多细节可以在 link:writing-native-applications-tips.html#registerForReflection[native应用程序提示] 页面找到。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "We use public fields here, but you can use private fields and getters/setters if you prefer."
msgstr "在这里我们使用public的字段，你也可以使用private字段和对应的getter/setter方法。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "This constructor will be used by Hibernate, and it must have a matching constructor with all the class attributes as parameters."
msgstr "Hibernate会用到这个构造方法，它必须有一个匹配的构造函数，所有的类属性都是参数。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"The implementation of the `project(Class)` method uses the constructor's parameter names to build the select clause of the query,\n"
"so the compiler must be configured to store parameter names inside the compiled class.\n"
"This is enabled by default if you are using the Quarkus Maven archetype. If you are not using it, add the property `<maven.compiler.parameters>true</maven.compiler.parameters>` to your pom.xml."
msgstr "在 `project(Class)` 方法的实现中，使用构造函数的参数名来构建查询的select子句，所以编译器必须配置为在编译的类中保留参数名。如果是使用Quarkus Maven archetype创建的项目，该功能默认是启用的。如果你没有使用，请在你的 `pom.xml` 中添加该属性 `<maven.compiler.parameters>true</maven.compiler.parameters>` 。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "If in the DTO projection object you have a field from a referenced entity, you can use the `@ProjectedFieldName` annotation to provide the path for the SELECT statement."
msgstr "如果DTO投影对象中有来自引用的实体字段，可以使用 `@ProjectedFieldName` 注解指定SELECT语句使用的查询路径。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "The `ownerName` DTO constructor's parameter will be loaded from the `owner.name` HQL property."
msgstr "DTO构造器的 `ownerName` 参数将从 `owner.name` HQL属性加载。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "In case you want to project an entity in a class with nested classes, you can use the `@NestedProjectedClass` annotation on those nested classes."
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"This annotation can be used when you want to project `@Embedded` entity or `@ManyToOne`, `@OneToOne` relation.\n"
"It does not support `@OneToMany` or `@ManyToMany` relation."
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"It is also possible to specify a HQL query with a select clause. In this case, the projection class must have a constructor\n"
"matching the values returned by the select clause:"
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Hibernate Reactive will use this constructor. When the query has a select clause, it is possible to have multiple constructors."
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "It is not possible to have a HQL `select new` query and `.project(Class)` at the same time - you need to pick one approach."
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "For example, this will fail:"
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Multiple Persistence Units"
msgstr "多个持久化单元"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Hibernate Reactive in Quarkus currently does not support multiple persistence units."
msgstr "Quarkus中的Hibernate Reactive目前不支持多个持久化单元。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Sessions and Transactions"
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"First of all, most of the methods of a Panache entity must be invoked within the scope of a reactive `Mutiny.Session`.\n"
"In some cases, the session is opened automatically on demand.\n"
"For example, if a Panache entity method is invoked in a Jakarta REST resource method in an application that includes the `quarkus-rest` extension.\n"
"For other cases, there are both a declarative and a programmatic way to ensure the session is opened.\n"
"You can annotate a CDI business method that returns `Uni` with the `@WithSession` annotation.\n"
"The method will be intercepted and the returned `Uni` will be triggered within a scope of a reactive session.\n"
"Alternatively, you can use the `Panache.withSession()` method to achieve the same effect."
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Note that a Panache entity may not be used from a blocking thread. See also xref:getting-started-reactive.adoc[Getting Started With Reactive] guide that explains the basics of reactive principles in Quarkus."
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"Also make sure to wrap methods that modify the database or involve multiple queries (e.g. `entity.persist()`) within a transaction.\n"
"You can annotate a CDI business method that returns `Uni` with the `@WithTransaction` annotation.\n"
"The method will be intercepted and the returned `Uni` is triggered within a transaction boundary.\n"
"Alternatively, you can use the `Panache.withTransaction()` method for the same effect."
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "You cannot use the `@Transactional` annotation with Hibernate Reactive for your transactions: you must use `@WithTransaction`, and your annotated method must return a `Uni` to be non-blocking."
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"Hibernate Reactive batches changes you make to your entities and sends changes (it is called flush) at the end of the transaction or before a query.\n"
"This is usually a good thing as it is more efficient.\n"
"But if you want to check optimistic locking failures, do object validation right away or generally want to get immediate feedback, you can force the flush operation by calling `entity.flush()` or even use `entity.persistAndFlush()` to make it a single method call. This will allow you to catch any `PersistenceException` that could occur when Hibernate Reactive send those changes to the database.\n"
"Remember, this is less efficient so don't abuse it.\n"
"And your transaction still has to be committed."
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Here is an example of the usage of the flush method to allow making a specific action in case of `PersistenceException`:"
msgstr "下面是一个使用 flush 方法的例子，它在捕获到 `PersistenceException` 异常时执行指定操作："

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"The `@WithTransaction` annotation will also work for testing.\n"
"This means that changes done during the test will be propagated to the database.\n"
"If you want any changes made to be rolled back at the end of\n"
"the test you can use the `io.quarkus.test.TestReactiveTransaction` annotation.\n"
"This will run the test method in a transaction, but roll it back once the test method is complete to revert any database changes."
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Lock management"
msgstr "锁管理"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Panache provides direct support for database locking with your entity/repository, using `findById(Object, LockModeType)` or `find().withLock(LockModeType)`."
msgstr "Panache支持在实体类/Repository类中直接使用数据库的锁，可使用 `findById(Object, LockModeType)` 或 `find().withLock(LockModeType)` 方法。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "The following examples are for the active record pattern, but the same can be used with repositories."
msgstr "下面的例子是针对Active Record模式的，但同样可以应用于Repository模式。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "First: Locking using findById()."
msgstr "第一：通过findById()方法使用数据库锁。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Second: Locking in a find()."
msgstr "第二：通过find()方法使用数据库锁。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Be careful that locks are released when the transaction ends, so the method that invokes the lock query must be called within a transaction."
msgstr "请注意，事务结束时锁会被释放，所以带锁查询的方法必须在事务中调用。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Custom IDs"
msgstr "自定义ID"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"IDs are often a touchy subject, and not everyone's up for letting them handled by the framework, once again we\n"
"have you covered."
msgstr "ID往往是一个敏感的话题，并不是所有人都愿意让框架来处理，因此我们提供了相应的配置。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"You can specify your own ID strategy by extending `PanacheEntityBase` instead of `PanacheEntity`. Then\n"
"you just declare whatever ID you want as a public field:"
msgstr "你可以通过继承 `PanacheEntityBase` ，而非 `PanacheEntity` ，来指定你自己的ID策略。然后只要把你想要的ID字段声明为public字段："

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"If you're using repositories, then you will want to extend `PanacheRepositoryBase` instead of `PanacheRepository`\n"
"and specify your ID type as an extra type parameter:"
msgstr "如果你使用Repository模式，那么要继承 `PanacheRepositoryBase` ，而非 `PanacheRepository` ，并将ID字段类型作为额外的类型参数："

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Testing"
msgstr "测试"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Testing reactive Panache entities in a `@QuarkusTest` is slightly more complicated than testing regular Panache entities due to the asynchronous nature of the APIs and the fact that all operations need to run on a Vert.x event loop."
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"The `quarkus-test-vertx` dependency provides the `@io.quarkus.test.vertx.RunOnVertxContext` annotation and the `io.quarkus.test.vertx.UniAsserter` class which are intended precisely for this purpose.\n"
"The usage is described in the xref:hibernate-reactive.adoc#testing[Hibernate Reactive] guide."
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"Moreover, the `quarkus-test-hibernate-reactive-panache` dependency provides the `io.quarkus.test.hibernate.reactive.panache.TransactionalUniAsserter` that can be injected as a method parameter of a test method annotated with `@RunOnVertxContext`.\n"
"The `TransactionalUniAsserter` is a `io.quarkus.test.vertx.UniAsserterInterceptor` that wraps each assert method within a separate reactive transaction."
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "`TransactionalUniAsserter` Example"
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "The first reactive transaction is used to persist the entity."
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "The second reactive transaction is used to count the entities."
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "The third reactive transaction is used to delete all entities."
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Of course, you can also define a custom `UniAsserterInterceptor` to wrap the injected `UniAsserter` and customize the behavior."
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Mocking"
msgstr "Mock模拟测试"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Using the active record pattern"
msgstr "使用Active Record模式"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"If you are using the active record pattern you cannot use Mockito directly as it does not support mocking static methods,\n"
"but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static\n"
"methods, including your own."
msgstr "如果你使用了Active Record模式，那么不能直接使用Mockito，因为它不支持Mock静态方法。你可以使用 `quarkus-panache-mock` 模块，它允许你使用Mockito来模拟所有静态方法，包括你自己编写的。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Add this dependency to your build file:"
msgstr "将以下依赖性添加到你的构建文件中："

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Given this simple entity:"
msgstr "提供这个简单的实体："

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "You can write your mocking test like this:"
msgstr "你可以像这样写你的模拟测试。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Make sure the test method is run on the Vert.x event loop."
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "The injected `UniAsserter` argument is used to make assertions."
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"Be sure to call your `verify` and `do*` methods on `PanacheMock` rather than `Mockito`, otherwise you won't know\n"
"what mock object to pass."
msgstr "请确保是在 `PanacheMock` 上调用 `verify` 和 `do*` 方法，而不是在 `Mockito` 上调用，否则无法传递mock对象。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Using the repository pattern"
msgstr "使用资源库模式"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"If you are using the repository pattern you can use Mockito directly, using the `quarkus-junit5-mockito` module,\n"
"which makes mocking beans much easier:"
msgstr "如果你使用存储库模式，你可以直接使用Mockito，使用 `quarkus-junit5-mockito` 模块，这使得模拟Bean变得更加容易："

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "And this repository:"
msgstr "还有这个储存库："

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "How and why we simplify Hibernate Reactive mappings"
msgstr "我们为什么简化Hibernate Reactive映射？怎么做到的？"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"When it comes to writing Hibernate Reactive entities, there are a number of annoying things that users have grown used to\n"
"reluctantly deal with, such as:"
msgstr "在编写Hibernate Reactive实体类时，用户已经习惯了被迫处理许多烦人的事情，例如："

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"Duplicating ID logic: most entities need an ID, most people don't care how it is set, because it is not really\n"
"relevant to your model."
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"Dumb getters and setters: since Java lacks support for properties in the language, we have to create fields,\n"
"then generate getters and setters for those fields, even if they don't actually do anything more than read/write\n"
"the fields."
msgstr "繁琐的 getters 和 setters：由于Java语言中缺乏对属性的支持，我们必须创建字段，然后为这些字段getters 和 setters，即使它们除了read/write字段外实际上没有做任何事情。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"Traditional EE patterns advise to split entity definition (the model) from the operations you can do on them\n"
"(DAOs, Repositories), but really that requires an unnatural split between the state and its operations even though\n"
"we would never do something like that for regular objects in the Object-Oriented architecture, where state and methods\n"
"are in the same class. Moreover, this requires two classes per entity, and requires injection of the DAO or Repository\n"
"where you need to do entity operations, which breaks your edit flow and requires you to get out of the code you're\n"
"writing to set up an injection point before coming back to use it."
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"Hibernate queries are super powerful, but overly verbose for common operations, requiring you to write queries even\n"
"when you don't need all the parts."
msgstr "Hibernate查询功能很强大，但对于普通操作来说过于冗长，即使是简单操作也要求写完整的HQL语句。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"Hibernate is very general-purpose, but does not make it trivial to do trivial operations that make up 90% of our\n"
"model usage."
msgstr "Hibernate很通用，但对于模型里90%的琐碎操作，编写起来并不简单。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "With Panache, we took an opinionated approach to tackle all these problems:"
msgstr "通过Panache，我们采取了一种有主见的方法来解决所有这些问题："

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"Make your entities extend `PanacheEntity`: it has an ID field that is auto-generated. If you require\n"
"a custom ID strategy, you can extend `PanacheEntityBase` instead and handle the ID yourself."
msgstr "让你的实体类继承 `PanacheEntity` ：它有一个自动生成的ID字段。如果你需要自定义ID策略，可以继承 `PanacheEntityBase` ，而不用自己处理ID。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"Use public fields. Get rid of dumb getter and setters. Under the hood, we will generate all getters and setters\n"
"that are missing, and rewrite every access to these fields to use the accessor methods. This way you can still\n"
"write _useful_ accessors when you need them, which will be used even though your entity users still use field accesses."
msgstr "使用公共字段。摆脱繁琐的getter和setters。在后台，我们将生成所有缺失的getter和setter，并重写对这些字段的每个访问，以使用访问器方法。这样，当你需要时，你仍然可以写出 _有用的_ 访问器，即使你的实体用户仍然使用字段访问，也会被使用。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"With the active record pattern: put all your entity logic in static methods in your entity class and don't create DAOs.\n"
"Your entity superclass comes with lots of super useful static methods, and you can add your own in your entity class.\n"
"Users can just start using your entity `Person` by typing `Person.` and getting completion for all the operations in a single place."
msgstr "使用活动记录模式：把你所有的实体逻辑放在实体类的静态方法中，不要创建DAO。你的实体超类带有很多超级有用的静态方法，你也可以在你的实体类中添加你自己的静态方法。用户可以通过输入 `Person.` ，开始使用你的实体 `Person` ，并在一个地方获得所有操作的完成。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"Don't write parts of the query that you don't need: write `Person.find(\"order by name\")` or\n"
"`Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive)` or even better\n"
"`Person.find(\"name\", \"stef\")`."
msgstr "不要写多余的查询语句：可以写 `Person.find(\"order by name\")` 或 `Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive)` ，甚至更好的 `Person.find(\"name\", \"stef\")` 。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "That's all there is to it: with Panache, Hibernate Reactive has never looked so trim and neat."
msgstr "以上就是它的全部内容：有了Panache，Hibernate Reactive看起来变得如此轻量和整洁。"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "Defining entities in external projects or jars"
msgstr "在外部项目或jar中定义实体"

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"Hibernate Reactive with Panache relies on compile-time bytecode enhancements to your entities. If you define your entities in the\n"
"same project where you build your Quarkus application, everything will work fine."
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid ""
"If the entities come from external projects\n"
"or jars, you can make sure that your jar is treated like a Quarkus application library by adding an empty `META-INF/beans.xml` file."
msgstr ""

#: _versions/3.20/guides/hibernate-reactive-panache.adoc
msgid "This will allow Quarkus to index and enhance your entities as if they were inside the current project."
msgstr ""
