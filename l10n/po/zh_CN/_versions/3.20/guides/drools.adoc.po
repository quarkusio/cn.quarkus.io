msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "Defining and executing business rules with Drools"
msgstr "使用 Drools 定义和执行业务规则"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid ""
"This guide demonstrates how your Quarkus application can use https://www.drools.org[Drools] to add intelligent automation\n"
"and power it up with the Drools rule engine."
msgstr "本指南演示了 Quarkus 应用程序如何使用 link:https://www.drools.org[Drools] 添加智能自动化，并通过 Drools 规则引擎为其提供动力。"

#: _versions/3.20/guides/drools.adoc
msgid "Prerequisites"
msgstr "先决条件"

#: _versions/3.20/guides/drools.adoc
msgid "Introduction"
msgstr "简介"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "https://www.drools.org[Drools] is a set of projects focusing on intelligent automation and decision management, most notably providing a forward-chaining and backward-chaining inference-based rule engine, DMN decisions engine and other projects. A rule engine is a fundamental building block to create an expert system which, in artificial intelligence, is a computer system that emulates the decision-making ability of a human expert. You can read more information on the https://www.drools.org[Drools website]."
msgstr "link:https://www.drools.org[Drools] 是一组专注于智能自动化和决策管理的项目，主要提供基于推理的前向链和后向链规则引擎、DMN 决策引擎和其他项目。规则引擎是创建专家系统的基本构件，在人工智能领域，专家系统是一个模拟人类专家决策能力的计算机系统。您可以在 link:https://www.drools.org[Drools 网站] 上了解更多信息。"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "Drools allows defining rules with 2 different programming styles: one more traditional based on the concepts of a KieBase acting as a repository of business rules and a KieSession storing and evaluating the runtime data against them, and the other using a Rule Unit as a single abstraction that encapsulates the definitions of both a set of rules and the facts against which those rules will be matched."
msgstr "Drools 允许使用两种不同的编程风格来定义规则：一种是基于 KieBase（作为业务规则的存储库）和 KieSession（存储和评估运行时数据）概念的传统编程风格；另一种是使用规则单元（Rule Unit）作为单一抽象概念，封装了一组规则的定义和匹配这些规则的事实。"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "Both these styles are fully supported in the Drools Quarkus extension and this document explains how to use both, outlining the pros and cons of each one."
msgstr "Drools Quarkus 扩展完全支持这两种风格，本文档将解释如何使用这两种风格，并概述每种风格的优缺点。"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "Integrating the traditional Drools programming model with Quarkus"
msgstr "将传统的 Drools 编程模型与 Quarkus 相集成"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "This first example demonstrates how to define a set of rules using the traditional Drools style and how to expose their evaluation inside a REST endpoint through Quarkus."
msgstr "第一个示例演示了如何使用传统的 Drools 风格定义一组规则，以及如何通过 Quarkus 在 REST 端点中公开对这些规则的评估。"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "The domain model of this sample project is made only by two classes, a loan application"
msgstr "该示例项目的领域模型仅由两个类组成，即贷款申请"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "and the applicant who requested it"
msgstr "以及提出申请的申请人"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "The rules set is made of business decisions to approve or reject an application plus one last rule collecting all the approved applications into a list."
msgstr "规则集由批准或拒绝申请的业务决定和最后一条规则组成，将所有已批准的申请收集到一个列表中。"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "The goal that we want to achieve is putting the evaluation of these rules in a microservice, exposing them in a REST endpoint developed with Quarkus. To do so it is enough to add the Drools Quarkus extension among the dependencies of your project."
msgstr "我们要实现的目标是将这些规则的评估放在一个微服务中，并通过使用 Quarkus 开发的 REST 端点进行公开。为此，只需在项目的依赖项中添加 Drools Quarkus 扩展即可。"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "and at this point it is possible to obtain a reference to the KieSession evaluating the formerly defined rules and use it in a REST endpoint as it follows:"
msgstr "此时就可以根据之前定义的规则获取 KieSession 的引用，并在 REST 端点中使用它，如下所示："

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "where an implementation of the `KieRuntimeBuilder` interface is automatically generated and made injectable for you by the Drools extension and allows to obtain with a single statement an instance of any KieBases and KieSessions defined in your Drools project."
msgstr "其中，Drools 扩展程序会自动生成 `KieRuntimeBuilder` 接口的实现并为您注入，您只需使用一条语句就可以获得 Drools 项目中定义的任何 KieBases 和 KieSessions 的实例。"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "Here the `LoanAppDto` is a simple POJO used to submit multiple loan application to the same KieSession"
msgstr "`LoanAppDto` 是一个简单的 POJO，用于向同一个 KieSession 提交多个贷款申请"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "thus trying for example to invoke that endpoint with a set of loan applications"
msgstr "因此，举例来说，尝试用一组贷款申请来调用该端点"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "the rule engine will evaluate them against the business rules we have configured before, returning the only one that in this case can be approved according to them"
msgstr "规则引擎将根据我们之前配置的业务规则对它们进行评估，并返回在这种情况下唯一可以根据这些规则获得批准的规则"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "Moving to the rule unit programming model"
msgstr "转向规则单元编程模式"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "A rule unit is a new concept introduced in Drools encapsulating both a set of rules and the facts against which those rules will be matched. It comes with a second abstraction called data source, defining the sources through which the facts are inserted, acting in practice as typed entry-points. There are two types of data sources:"
msgstr "规则单元是 Drools 中引入的一个新概念，它封装了一组规则和与这些规则进行匹配的事实。它的第二个抽象概念是数据源，定义了插入事实的数据源，在实践中起到了类型化入口点的作用。数据源有两种类型："

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "DataStream: an append-only data source"
msgstr "DataStream：仅用于追加的数据源"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "subscribers only receive new (and possibly past) messages"
msgstr "订阅者只接收新的（也可能是过去的）信息"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "cannot update/remove"
msgstr "无法更新/删除"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "stream may also be hot/cold in “reactive streams” terminology"
msgstr "在 \"反应流 \"术语中，流也可能是热流/冷流"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "DataStore: data source for modifiable data"
msgstr "数据存储：可修改数据的数据源"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "subscribers may act upon the data store, by acting upon the fact handle"
msgstr "用户可根据事实句柄对数据存储采取行动"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "In order to use rule units in our quarkus application it is necessary to add a second dependency."
msgstr "为了在我们的 quarkus 应用程序中使用规则单元，有必要添加第二个依赖项。"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "In essence a rule unit is made of 2 strictly related parts: the definition of the fact to be evaluated and the set of rules evaluating them. The first part is implemented with a POJO, that for the loan example could be something like the following:"
msgstr "从本质上讲，一个规则单元由两个严格相关的部分组成：待评估事实的定义和评估这些事实的规则集。第一部分通过 POJO 实现，贷款示例中的 POJO 可以如下所示："

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "Here instead of using the `LoanAppDto` that we introduced to marshall/unmarshall the JSON requests we are binding directly the class representing the rule unit. The two relevant differences are that it implements the `RuleUnitData` interface and uses a `DataStore` instead of a plain `List` containing the loan applications to be approved. The first is just a marker interface to notify the engine that this class is part of a rule unit definition. The use of a `DataStore` is necessary to let the rule engine to react accordingly to the changes by firing new rules and triggering other rules. In the example, the consequences of the rules modify the approved property of the loan applications. Conversely, the `maxAmount` value can be considered a configuration parameter of the rule unit and left as it is: it will automatically be processed during the rules evaluation with the same semantic of a global, and automatically set from the value passed by the JSON request as in the first example, so you will still be allowed to use it in your rules."
msgstr "在这里，我们没有使用 `LoanAppDto` 来 marshall/unmarshall JSON 请求，而是直接绑定了代表规则单元的类。两个相关的不同之处在于它实现了 `RuleUnitData` 接口，并使用了 `DataStore` 而不是包含待审批贷款申请的普通 `List` 。第一个接口只是一个标记接口，用于通知引擎该类是规则单元定义的一部分。使用 `DataStore` 是必要的，这样规则引擎才能通过启动新规则和触发其他规则对变化做出相应的反应。在本例中，规则的后果是修改贷款申请的批准属性。反之， `maxAmount` 值可视为规则单元的配置参数，并保持原样：它将在规则评估过程中以与全局相同的语义自动处理，并根据第一个示例中 JSON 请求传递的值自动设置，因此您仍可在规则中使用它。"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "The second part of the rule unit is the drl file containing the rules belonging to this unit."
msgstr "规则单元的第二部分是包含该单元所属规则的 drl 文件。"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "This rules file must declare the same package and a unit with the same name of the Java class implementing the `RuleUnitData` interface in order to state that they belong to the same rule unit."
msgstr "该规则文件必须声明与实现 `RuleUnitData` 接口的 Java 类名称相同的包和单元，以便说明它们属于同一个规则单元。"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "This file has also been rewritten using the new OOPath notation: as anticipated, here the data source acts as a typed entry-point and the oopath expression has its name as root while the constraints are in square brackets, like in the following example."
msgstr "该文件也使用新的 OOPath 符号进行了重写：正如预期的那样，数据源在这里充当了类型化入口点的角色，而 oopath 表达式则将其名称作为根，约束条件则放在方括号中，就像下面的示例一样。"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "Alternatively you can still use the old DRL syntax, specifying the name of the data source as an entry-point, with the drawback that in this case you need to specify again the type of the matched object, even if the engine can infer it from the type of the datasource, as it follows."
msgstr "另外，您还可以使用旧的 DRL 语法，指定数据源的名称作为入口点，但缺点是在这种情况下，即使引擎可以从数据源的类型中推断出匹配对象的类型，您也需要再次指定匹配对象的类型，如下所示。"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "Finally note that the last rule collecting all the approved loan applications into a global `List` has been replaced by a query simply retrieving them. One of the advantages in using a rule unit is that it clearly defines the context of computation, in other terms the facts to be passed in input to the rule evaluation. Similarly, the query defines what is the output expected by this evaluation."
msgstr "最后要注意的是，最后一条将所有已批准的贷款申请收集到全局 `List` 的规则已被简单检索这些申请的查询所取代。使用规则单元的优势之一是它明确定义了计算的上下文，换句话说，就是规则评估输入时要传递的事实。同样，查询也定义了规则评估的预期输出。"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "This clear definition of the computation boundaries allows Drools to also automatically generate a class executing the query and returning its results, together with a REST endpoint taking the rule unit as input, passing it to the former query executor and returning its as output."
msgstr "这种对计算边界的清晰定义使 Drools 还能自动生成一个执行查询并返回结果的类，以及一个将规则单元作为输入、将其传递给前查询执行器并将其作为输出返回的 REST 端点。"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "You can have as many query as you want and for each of them it will be generated a different REST endpoint with the same name of the query transformed from camel case (like `FindApproved`) to dash separated (like `find-approved`)."
msgstr "您可以拥有任意多个查询，每个查询都将生成一个不同的 REST 端点，查询名称也将从驼峰形（如 `FindApproved` ）转换为破折号分隔（如 `find-approved` ）。"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "A more comprehensive example"
msgstr "一个更全面的例子"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "In this more comprehensive and complete example, we will augment a basic Quarkus application with a few simple rules to infer potential issues with the status of a home automation setup."
msgstr "在这个更全面、更完整的示例中，我们将用一些简单的规则来增强基本的 Quarkus 应用程序，从而推断出家庭自动化设置状态的潜在问题。"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "We will define a Drools Rule Unit and the rules in the DRL format."
msgstr "我们将定义一个 Drools 规则单元和 DRL 格式的规则。"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "We will wire the Rule Unit into a standard Quarkus CDI bean, for use in the Quarkus application (for instance, wiring MQTT messages from Kafka, etc.)."
msgstr "我们将把规则单元连接到标准的 Quarkus CDI Bean 中，以便在 Quarkus 应用程序中使用（例如，连接来自 Kafka 的 MQTT 消息等）。"

#: _versions/3.20/guides/drools.adoc
msgid "To complete this guide, you need:"
msgstr "要完成这个指南，你需要："

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "less than 15 minutes"
msgstr "不到 15 分钟"

#: _versions/3.20/guides/drools.adoc
msgid "an IDE"
msgstr "一个编辑器"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "JDK 17+ installed with `JAVA_HOME` configured appropriately"
msgstr "安装了 JDK 17+ 并适当配置了 `JAVA_HOME` "

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "Apache Maven 3.9.3+"
msgstr "Apache Maven 3.9.3+"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "Docker"
msgstr "Docker"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "link:{https://quarkus.io/guides/building-native-image}[GraalVM installed] if you want to run in native mode"
msgstr "如果要以本地模式运行，请 link:{https://quarkus.io/guides/building-native-image}[安装 GraalVM]"

#: _versions/3.20/guides/drools.adoc
msgid "Creating the Maven Project"
msgstr "创建Maven项目"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid ""
"First, we need a new Quarkus project.\n"
"To create a new Quarkus project, you can reference the link:{https://quarkus.io/guides/maven-tooling}[Quarkus and Maven Guide]"
msgstr "首先，我们需要一个新的 Quarkus 项目。要创建一个新的 Quarkus 项目，可以参考《 link:{https://quarkus.io/guides/maven-tooling}[Quarkus 和 Maven 指南] 》。"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "When you have your Quarkus project configured, you can add the Drools Quarkus extensions to your project by adding the following dependencies to your `pom.xml`:"
msgstr "配置好 Quarkus 项目后，可以通过在 `pom.xml` 中添加以下依赖项，将 Drools Quarkus 扩展添加到项目中："

#: _versions/3.20/guides/drools.adoc
msgid "Writing the application"
msgstr "编写应用程序"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "Let's start from the application domain model."
msgstr "让我们从应用领域模型开始。"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "This application goal is to infer potential issues with the status of a home automation setup, so we create the necessary domain models to represent status of sensors, devices and other things inside the house."
msgstr "该应用的目标是推断出家庭自动化设置状态的潜在问题，因此我们创建了必要的领域模型来表示传感器、设备和屋内其他事物的状态。"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "Light device domain model:"
msgstr "光设备领域模型："

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "CCTV security camera domain model:"
msgstr "CCTV 安全摄像机领域模型："

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "Smartphone detected in WiFi domain model:"
msgstr "在 WiFi 领域模型中检测到智能手机："

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "Alert class to hold information of the potential detected problems:"
msgstr "警报类，用于保存检测到的潜在问题的信息："

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "Next, we create a rule file `rules.drl` inside the `src/main/resources/org/drools/quarkus/quickstart/test` folder of the Quarkus project."
msgstr "接下来，我们在 Quarkus 项目的 `src/main/resources/org/drools/quarkus/quickstart/test` 文件夹中创建一个规则文件 `rules.drl` 。"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "In this file there are some example rules to decide whether the overall status of the house is deemed inappropriate, triggering the necessary `Alert` (s)."
msgstr "该文件中有一些示例规则，用于决定房屋的整体状况是否被视为不合适，从而触发必要的 `Alert` (s)。"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "Rule Unit a central paradigm introduced in Drools 8 that helps users to encapsulate the set of rules and the facts against which those rules will be matched; you can read more information in the https://www.drools.org/learn/documentation.html[Drools documentation]."
msgstr "规则单元（Rule Unit）是 Drools 8 中引入的一个核心范例，它可以帮助用户封装规则集和与规则匹配的事实；您可以在 link:https://www.drools.org/learn/documentation.html[Drools 文档] 中阅读更多信息。"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "The facts will be inserted into a `DataStore`, a type-safe entry point. To make everything work, we need to define both the RuleUnit and the DataStore."
msgstr "事实将被插入 `DataStore` ，这是一个类型安全的入口点。为了使一切正常，我们需要定义 RuleUnit 和 DataStore。"

#: _versions/3.20/guides/drools.adoc
msgid "Testing the Application"
msgstr "测试应用程序"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "We can create a standard Quarkus and JUnit test to check the behaviour of the Rule Unit and the defined rules, accordingly to a certain set of scenarios."
msgstr "我们可以创建一个标准的 Quarkus 和 JUnit 测试，根据特定的场景检查规则单元和已定义规则的行为。"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "Wiring the Rule Unit with Quarkus CDI beans"
msgstr "用 Quarkus CDI 豆为规则装置接线"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "We can now wire the Rule Unit into a standard Quarkus CDI bean, for general use in the Quarkus application."
msgstr "现在，我们可以将规则单元连接到标准的 Quarkus CDI Bean 中，以便在 Quarkus 应用程序中使用。"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "For example, this might later be helpful to wire device status reporting through MQTT via Kafka, using the appropriate Quarkus extensions."
msgstr "例如，使用适当的 Quarkus 扩展，通过 MQTT 和 Kafka 对设备状态报告进行布线，以后可能会有所帮助。"

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "We create a simple CDI bean to abstract away the Rule Unit API usage with:"
msgstr "我们创建一个简单的 CDI Bean 来抽象规则单元 API 的用法："

#: _versions/3.20/guides/drools.adoc
#, fuzzy
msgid "The same test scenarios can be refactored using this CDI bean accordingly."
msgstr "同样的测试场景也可以使用此 CDI Bean 进行相应的重构。"
