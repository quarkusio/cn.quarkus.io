# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-12-06 10:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _guides/grpc-service-implementation.adoc
#, fuzzy, no-wrap
msgid "Implementing a gRPC Service"
msgstr "实现一个gRPC服务"

#. type: Plain text
#: _guides/grpc-service-implementation.adoc
#, fuzzy
msgid "gRPC service implementations exposed as CDI beans are automatically registered and served by quarkus-grpc."
msgstr "作为CDI Bean暴露的gRPC服务实现被quarkus-grpc自动注册和服务。"

#: _guides/grpc-service-implementation.adoc
msgid ""
"Implementing a gRPC service requires the gRPC classes to be generated.\n"
"Place your `proto` files in `src/main/proto` and run `mvn compile`."
msgstr ""

#. type: Title ==
#: _guides/grpc-service-implementation.adoc
#, fuzzy, no-wrap
msgid "Generated Code"
msgstr "生成的代码"

#. type: Plain text
#: _guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Quarkus generates a few implementation classes for services declared in the `proto` file:"
msgstr "Quarkus为在 `proto` 文件中声明的服务生成了一些实现类。"

#. type: Plain text
#: _guides/grpc-service-implementation.adoc
#, fuzzy
msgid "A _service interface_ using the Mutiny API"
msgstr "一个使用Mutiny API的 _服务_ 接口"

#. type: Plain text
#: _guides/grpc-service-implementation.adoc
#, fuzzy
msgid "the class name is `${JAVA_PACKAGE}.${NAME_OF_THE_SERVICE}`"
msgstr "该类的名称是 `${JAVA_PACKAGE}.${NAME_OF_THE_SERVICE}` "

#. type: Plain text
#: _guides/grpc-service-implementation.adoc
#, fuzzy
msgid "An _implementation base_ class using the gRPC API"
msgstr "一个使用gRPC API的 _实现基类_ "

#. type: Plain text
#: _guides/grpc-service-implementation.adoc
#, fuzzy
msgid "the class name is structured as follows: `${JAVA_PACKAGE}.${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase`"
msgstr "该类名称的结构如下。 `${JAVA_PACKAGE}.${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase` "

#. type: Plain text
#: _guides/grpc-service-implementation.adoc
#, fuzzy
msgid "For example, if you use the following `proto` file snippet:"
msgstr "例如，如果你使用以下 `proto` 文件片段。"

#. type: Plain text
#: _guides/grpc-service-implementation.adoc
#, fuzzy
msgid "`hello` is the java package for the generated classes."
msgstr " `hello` 是生成类的java包。"

#. type: Plain text
#: _guides/grpc-service-implementation.adoc
#, fuzzy
msgid "`Greeter` is the service name."
msgstr " `Greeter` 是服务名称。"

#. type: Plain text
#: _guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Then the service interface is `hello.Greeter` and the implementation base is the abstract static nested class: `hello.GreeterGrpc.GreeterImplBase`."
msgstr "然后，服务接口是 `hello.Greeter` ，实现基础是抽象的静态嵌套类： `hello.GreeterGrpc.GreeterImplBase` 。"

#. type: Plain text
#: _guides/grpc-service-implementation.adoc
#, fuzzy
msgid "You'll need to implement the _service interface_ or extend the _base class_ with your service implementation bean as described in the following sections."
msgstr "你需要实现 _服务接口_ 或用你的服务实现Bean扩展 _基类_ ，如以下章节所述。"

#. type: Title ==
#: _guides/grpc-service-implementation.adoc
#, fuzzy, no-wrap
msgid "Implementing a Service with the Mutiny API"
msgstr "用Mutiny API实现一个服务"

#: _guides/grpc-service-implementation.adoc
msgid ""
"To implement a gRPC service using the Mutiny API, create a class that implements the service interface.\n"
"Then, implement the methods defined in the service interface.\n"
"If you don't want to implement a service method just throw an `java.lang.UnsupportedOperationException` from the method body (the exception will be automatically converted to the appropriate gRPC exception).\n"
"Finally, implement the service and add the `@GrpcService` annotation:"
msgstr ""

#. type: Plain text
#: _guides/grpc-service-implementation.adoc
#, fuzzy
msgid "A gRPC service implementation bean must be annotated with the `@GrpcService` annotation and should not declare any other CDI qualifier. All gRPC services have the `jakarta.inject.Singleton` scope. Additionally, the request context is always active during a service call."
msgstr "gRPC服务的实现Bean必须被注解为 `@GrpcService` 注解，并且不应该声明任何其他CDI限定符。所有 gRPC 服务都有 `javax.inject.Singleton` 范围。此外，在服务调用期间，请求上下文总是处于活动状态。"

#. type: Plain text
#: _guides/grpc-service-implementation.adoc
#, fuzzy
msgid "`hello.Greeter` is the generated service interface."
msgstr " `hello.Greeter` 是生成的服务接口。"

#. type: Plain text
#: _guides/grpc-service-implementation.adoc
#, fuzzy
msgid "The service implementation bean can also extend the Mutiny implementation base, where the class name is structured as follows: `Mutiny${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase`."
msgstr "服务实现Bean也可以扩展Mutiny的实现基础，其中类名的结构如下。 `Mutiny${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase` ."

#. type: Title ==
#: _guides/grpc-service-implementation.adoc
#, fuzzy, no-wrap
msgid "Implementing a Service with the default gRPC API"
msgstr "用默认的gRPC API实现一个服务"

#: _guides/grpc-service-implementation.adoc
msgid ""
"To implement a gRPC service using the default gRPC API, create a class that extends the default implementation base.\n"
"Then, override the methods defined in the service interface.\n"
"Finally, implement the service and add the `@GrpcService` annotation:"
msgstr ""

#. type: Title ==
#: _guides/grpc-service-implementation.adoc
#, fuzzy, no-wrap
msgid "Blocking Service Implementation"
msgstr "封锁服务的实施"

#: _guides/grpc-service-implementation.adoc
msgid ""
"By default, all the methods from a gRPC service run on the event loop.\n"
"As a consequence, you must **not** block.\n"
"If your service logic must block, annotate the method with `io.smallrye.common.annotation.Blocking`:"
msgstr ""

#. type: Title ==
#: _guides/grpc-service-implementation.adoc
#, fuzzy, no-wrap
msgid "Handling Streams"
msgstr "处理流"

#. type: Plain text
#: _guides/grpc-service-implementation.adoc
#, fuzzy
msgid "gRPC allows receiving and returning streams:"
msgstr "gRPC允许接收和返回数据流。"

#. type: Plain text
#: _guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Using Mutiny, you can implement these as follows:"
msgstr "使用Mutiny，你可以按以下方式实现这些。"

#. type: Title ==
#: _guides/grpc-service-implementation.adoc
#, fuzzy, no-wrap
msgid "Health Check"
msgstr "健康检查"

#. type: Plain text
#: _guides/grpc-service-implementation.adoc
#, fuzzy
msgid "For the implemented services, Quarkus gRPC exposes health information in the following format:"
msgstr "对于已实现的服务，Quarkus gRPC以下列格式公开健康信息。"

#: _guides/grpc-service-implementation.adoc
msgid ""
"Clients can specify the fully qualified service name to get the health status of a specific service\n"
"or skip specifying the service name to get the general status of the gRPC server."
msgstr ""

#: _guides/grpc-service-implementation.adoc
msgid ""
"For more details, check out the\n"
"https://github.com/grpc/grpc/blob/v1.28.1/doc/health-checking.md[gRPC documentation]"
msgstr ""

#: _guides/grpc-service-implementation.adoc
msgid ""
"Additionally, if Quarkus SmallRye Health is added to the application, a readiness check for\n"
"the state of the gRPC services will be added to the MicroProfile Health endpoint response, that is `/q/health`."
msgstr ""

#. type: Title ==
#: _guides/grpc-service-implementation.adoc
#, fuzzy, no-wrap
msgid "Reflection Service"
msgstr "反思服务"

#: _guides/grpc-service-implementation.adoc
msgid ""
"Quarkus gRPC Server implements the https://github.com/grpc/grpc/blob/master/doc/server-reflection.md[reflection service].\n"
"This service allows tools like https://github.com/fullstorydev/grpcurl[grpcurl] or https://github.com/gusaul/grpcox[grpcox] to interact with your services."
msgstr ""

#: _guides/grpc-service-implementation.adoc
msgid ""
"The reflection service is enabled by default in _dev_ mode.\n"
"In test or production mode, you need to enable it explicitly by setting `quarkus.grpc.server.enable-reflection-service` to `true`."
msgstr ""

#. type: Plain text
#: _guides/grpc-service-implementation.adoc
msgid "Quarkus exposes both the reflection service `v1` and `v1alpha`."
msgstr ""

#. type: Title ==
#: _guides/grpc-service-implementation.adoc
#, fuzzy, no-wrap
msgid "Scaling"
msgstr "缩放"

#. type: Plain text
#: _guides/grpc-service-implementation.adoc
#, fuzzy
msgid "By default, quarkus-grpc starts a single gRPC server running on a single event loop."
msgstr "默认情况下，quarkus-grpc启动一个单一的gRPC服务器，在一个事件循环上运行。"

#. type: Plain text
#: _guides/grpc-service-implementation.adoc
#, fuzzy
msgid "If you wish to scale your server, you can set the number of server instances by setting `quarkus.grpc.server.instances`."
msgstr "如果你想扩展你的服务器，你可以通过设置 `quarkus.grpc.server.instances` ，设定服务器实例的数量。"

#. type: Title ==
#: _guides/grpc-service-implementation.adoc
#, fuzzy, no-wrap
msgid "Server Configuration"
msgstr "服务器配置"

#: _guides/grpc-service-implementation.adoc
msgid ""
"When you disable `quarkus.grpc.server.use-separate-server`, you are then using the new Vert.x gRPC server implementation\n"
"which uses the existing HTTP server. Which means that the server port is now `8080` (or the port configured with `quarkus.http.port`).\n"
"Also, most of the other configuration properties are no longer applied, since it's the HTTP server that should already be properly configured."
msgstr ""

#. type: Plain text
#: _guides/grpc-service-implementation.adoc
#, fuzzy
msgid "When you enable `quarkus.grpc.server.xds.enabled`, it's the xDS that should handle most of the configuration above."
msgstr "当你启用 `quarkus.grpc.server.xds.enabled` ，是xDS应该处理上面的大部分配置。"

#. type: Title ==
#: _guides/grpc-service-implementation.adoc
#, fuzzy, no-wrap
msgid "Example of Configuration"
msgstr "配置实例"

#. type: Title ===
#: _guides/grpc-service-implementation.adoc
#, fuzzy, no-wrap
msgid "Enabling TLS"
msgstr "启用TLS"

#. type: Plain text
#: _guides/grpc-service-implementation.adoc
#, fuzzy
msgid "To enable TLS, use the following configuration."
msgstr "要启用TLS，请使用以下配置。"

#: _guides/grpc-service-implementation.adoc
msgid ""
"Note that all paths in the configuration may either specify a resource on the classpath\n"
"(typically from `src/main/resources` or its subfolder) or an external file."
msgstr ""

#. type: Plain text
#: _guides/grpc-service-implementation.adoc
#, fuzzy
msgid "When SSL/TLS is configured, `plain-text` is automatically disabled."
msgstr "当配置了SSL/TLS时， `plain-text` 自动被禁用。"

#. type: Title ===
#: _guides/grpc-service-implementation.adoc
#, fuzzy, no-wrap
msgid "TLS with Mutual Auth"
msgstr "带有相互授权的TLS"

#. type: Plain text
#: _guides/grpc-service-implementation.adoc
#, fuzzy
msgid "To use TLS with mutual authentication, use the following configuration:"
msgstr "要使用相互认证的TLS，请使用以下配置。"

#. type: Title ==
#: _guides/grpc-service-implementation.adoc
#, fuzzy, no-wrap
msgid "Server Interceptors"
msgstr "服务器拦截器"

#. type: Plain text
#: _guides/grpc-service-implementation.adoc
#, fuzzy
msgid "gRPC server interceptors let you perform logic, such as authentication, before your service is invoked."
msgstr "gRPC服务器拦截器让你在服务被调用之前执行逻辑，如认证。"

#. type: Plain text
#: _guides/grpc-service-implementation.adoc
#, fuzzy
msgid "You can implement a gRPC server interceptor by creating an `@ApplicationScoped` bean implementing `io.grpc.ServerInterceptor`:"
msgstr "你可以通过创建一个实现 `@ApplicationScoped` bean的 `io.grpc.ServerInterceptor` ，来实现一个gRPC服务器拦截器。"

#. type: Plain text
#: _guides/grpc-service-implementation.adoc
msgid "It's also possible to annotate a producer method as a global interceptor:"
msgstr ""

#. type: Plain text
#: _guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Check the https://grpc.github.io/grpc-java/javadoc/io/grpc/ServerInterceptor.html[ServerInterceptor JavaDoc] to properly implement your interceptor."
msgstr "查看 link:https://grpc.github.io/grpc-java/javadoc/io/grpc/ServerInterceptor.html[ServerInterceptor JavaDoc] ，正确实现你的拦截器。"

#: _guides/grpc-service-implementation.adoc
msgid ""
"To apply an interceptor to all exposed services, annotate it with `@io.quarkus.grpc.GlobalInterceptor`.\n"
"To apply an interceptor to a single service, register it on the service with `@io.quarkus.grpc.RegisterInterceptor`:"
msgstr ""

#: _guides/grpc-service-implementation.adoc
msgid ""
"When you have multiple server interceptors, you can order them by implementing the `jakarta.enterprise.inject.spi.Prioritized` interface. Please note that all the global interceptors are invoked before the service-specific\n"
"interceptors."
msgstr ""

#: _guides/grpc-service-implementation.adoc
msgid ""
"Interceptors with the highest priority are called first.\n"
"The default priority, used if the interceptor does not implement the `Prioritized` interface, is `0`."
msgstr ""

#. type: Title ==
#: _guides/grpc-service-implementation.adoc
#, fuzzy, no-wrap
msgid "Testing your services"
msgstr "测试你的服务"

#: _guides/grpc-service-implementation.adoc
msgid ""
"The easiest way to test a gRPC service is to use a gRPC client as described\n"
"in xref:grpc-service-consumption.adoc[Consuming a gRPC Service]."
msgstr ""

#: _guides/grpc-service-implementation.adoc
msgid ""
"Please note that in the case of using a client to test an exposed service that does not use TLS,\n"
"there is no need to provide any configuration. E.g. to test the `HelloService`\n"
"defined above, one could create the following test:"
msgstr ""

#. type: Title ==
#: _guides/grpc-service-implementation.adoc
#, fuzzy, no-wrap
msgid "Trying out your services manually"
msgstr "手动尝试你的服务"

#: _guides/grpc-service-implementation.adoc
msgid ""
"In the dev mode, you can try out your gRPC services in the Quarkus Dev UI.\n"
"Just go to http://localhost:8080/q/dev-ui and click on _Services_ under the gRPC tile."
msgstr ""

#. type: Plain text
#: _guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Please note that your application needs to expose the \"normal\" HTTP port for the Dev UI to be accessible. If your application does not expose any HTTP endpoints, you can create a dedicated profile with a dependency on `quarkus-vertx-http`:"
msgstr "请注意，你的应用程序需要暴露 \"正常 \"的HTTP端口，以使Dev UI能够被访问。如果你的应用程序没有暴露任何HTTP端点，你可以创建一个依赖 `quarkus-vertx-http` 的专用配置文件。"

#. type: Plain text
#: _guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Having it, you can run the dev mode with: `mvn quarkus:dev -Pdevelopment`."
msgstr "有了它，你就可以在开发模式下运行。 `mvn quarkus:dev -Pdevelopment` ."

#. type: Plain text
#: _guides/grpc-service-implementation.adoc
#, fuzzy
msgid "If you use Gradle, you can simply add a dependency for the `quarkusDev` task:"
msgstr "如果你使用Gradle，你可以简单的为 `quarkusDev` 任务添加一个依赖关系。"

#. type: Title ==
#: _guides/grpc-service-implementation.adoc
#, fuzzy, no-wrap
msgid "gRPC Server metrics"
msgstr "gRPC服务器度量"

#. type: Title ===
#: _guides/grpc-service-implementation.adoc
#, fuzzy, no-wrap
msgid "Enabling metrics collection"
msgstr "启用指标收集"

#: _guides/grpc-service-implementation.adoc
msgid ""
"gRPC server metrics are automatically enabled when the application also uses the xref:telemetry-micrometer.adoc[`quarkus-micrometer`] extension.\n"
"Micrometer collects the metrics of all the gRPC services implemented by the application."
msgstr ""

#. type: Plain text
#: _guides/grpc-service-implementation.adoc
#, fuzzy
msgid "As an example, if you export the metrics to Prometheus, you will get:"
msgstr "举例来说，如果你把指标导出到Prometheus，你会得到。"

#. type: Plain text
#: _guides/grpc-service-implementation.adoc
#, fuzzy
msgid "The service name, method and type can be found in the _tags_."
msgstr "服务名称、方法和类型可以在 _标签_ 中找到。"

#. type: Title ===
#: _guides/grpc-service-implementation.adoc
#, fuzzy, no-wrap
msgid "Disabling metrics collection"
msgstr "禁用指标收集"

#. type: Plain text
#: _guides/grpc-service-implementation.adoc
msgid "To disable the gRPC server metrics when `quarkus-micrometer` is used, add the following property to the application configuration:"
msgstr ""

#. type: Title ===
#: _guides/grpc-service-implementation.adoc
#, no-wrap
msgid "Use virtual threads"
msgstr ""

#. type: Plain text
#: _guides/grpc-service-implementation.adoc
msgid "To use virtual threads in your gRPC service implementation, check the dedicated xref:./grpc-virtual-threads.adoc[guide]."
msgstr ""
