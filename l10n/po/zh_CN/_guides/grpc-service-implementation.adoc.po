# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/grpc-service-implementation.adoc:6
#, fuzzy, no-wrap
msgid "Implementing a gRPC Service"
msgstr "实现一个gRPC服务"

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:11
#, fuzzy
msgid "gRPC service implementations exposed as CDI beans are automatically registered and served by quarkus-grpc."
msgstr "作为CDI Bean暴露的gRPC服务实现被quarkus-grpc自动注册和服务。"

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:14
#, fuzzy
msgid "Implementing a gRPC service requires the gRPC classes to be generated.  Place your `proto` files in `src/main/proto` and run `mvn compile`."
msgstr "实现一个gRPC服务需要生成gRPC类。将你的 `proto` 文件放在 `src/main/proto` ，然后运行 `mvn compile` 。"

#. type: Title ==
#: upstream/_guides/grpc-service-implementation.adoc:15
#, fuzzy, no-wrap
msgid "Generated Code"
msgstr "生成的代码"

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:18
#, fuzzy
msgid "Quarkus generates a few implementation classes for services declared in the `proto` file:"
msgstr "Quarkus为在 `proto` 文件中声明的服务生成了一些实现类。"

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:20
#, fuzzy
msgid "A _service interface_ using the Mutiny API"
msgstr "一个使用Mutiny API的 _服务_ 接口"

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:21
#, fuzzy
msgid "the class name is `${JAVA_PACKAGE}.${NAME_OF_THE_SERVICE}`"
msgstr "该类的名称是 `${JAVA_PACKAGE}.${NAME_OF_THE_SERVICE}` "

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:22
#, fuzzy
msgid "An _implementation base_ class using the gRPC API"
msgstr "一个使用gRPC API的 _实现基类_ "

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:23
#, fuzzy
msgid "the class name is structured as follows: `${JAVA_PACKAGE}.${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase`"
msgstr "该类名称的结构如下。 `${JAVA_PACKAGE}.${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase` "

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:25
#, fuzzy
msgid "For example, if you use the following `proto` file snippet:"
msgstr "例如，如果你使用以下 `proto` 文件片段。"

#. type: delimited block -
#: upstream/_guides/grpc-service-implementation.adoc:29
#, no-wrap
msgid "option java_package = \"hello\"; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-implementation.adoc:33
#, no-wrap
msgid ""
"service Greeter { <2>\n"
"    rpc SayHello (HelloRequest) returns (HelloReply) {}\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:35
#, fuzzy
msgid "`hello` is the java package for the generated classes."
msgstr " `hello` 是生成类的java包。"

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:36
#, fuzzy
msgid "`Greeter` is the service name."
msgstr " `Greeter` 是服务名称。"

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:38
#, fuzzy
msgid "Then the service interface is `hello.Greeter` and the implementation base is the abstract static nested class: `hello.GreeterGrpc.GreeterImplBase`."
msgstr "然后，服务接口是 `hello.Greeter` ，实现基础是抽象的静态嵌套类： `hello.GreeterGrpc.GreeterImplBase` 。"

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:40
#, fuzzy
msgid "You'll need to implement the _service interface_ or extend the _base class_ with your service implementation bean as described in the following sections."
msgstr "你需要实现 _服务接口_ 或用你的服务实现Bean扩展 _基类_ ，如以下章节所述。"

#. type: Title ==
#: upstream/_guides/grpc-service-implementation.adoc:41
#, fuzzy, no-wrap
msgid "Implementing a Service with the Mutiny API"
msgstr "用Mutiny API实现一个服务"

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:47
#, fuzzy
msgid "To implement a gRPC service using the Mutiny API, create a class that implements the service interface.  Then, implement the methods defined in the service interface.  If you don't want to implement a service method just throw an `java.lang.UnsupportedOperationException` from the method body (the exception will be automatically converted to the appropriate gRPC exception).  Finally, implement the service and add the `@GrpcService` annotation:"
msgstr "要使用Mutiny API实现一个gRPC服务，创建一个实现服务接口的类。然后，实现服务接口中定义的方法。如果你不想实现一个服务方法，只需从方法主体中抛出一个 `java.lang.UnsupportedOperationException` （该异常将被自动转换为适当的gRPC异常）。最后，实现服务并添加 `@GrpcService` 注解。"

#. type: delimited block -
#: upstream/_guides/grpc-service-implementation.adoc:52
#, no-wrap
msgid ""
"import io.quarkus.grpc.GrpcService;\n"
"import hello.Greeter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-implementation.adoc:55
#, no-wrap
msgid ""
"@GrpcService <1>\n"
"public class HelloService implements Greeter { <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-implementation.adoc:63
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<HelloReply> sayHello(HelloRequest request) {\n"
"        return Uni.createFrom().item(() ->\n"
"                HelloReply.newBuilder().setMessage(\"Hello \" + request.getName()).build()\n"
"        );\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:65
#, fuzzy
msgid "A gRPC service implementation bean must be annotated with the `@GrpcService` annotation and should not declare any other CDI qualifier. All gRPC services have the `javax.inject.Singleton` scope. Additionally, the request context is always active during a service call."
msgstr "gRPC服务的实现Bean必须被注解为 `@GrpcService` 注解，并且不应该声明任何其他CDI限定符。所有 gRPC 服务都有 `javax.inject.Singleton` 范围。此外，在服务调用期间，请求上下文总是处于活动状态。"

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:66
#, fuzzy
msgid "`hello.Greeter` is the generated service interface."
msgstr " `hello.Greeter` 是生成的服务接口。"

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:68
#, fuzzy
msgid "The service implementation bean can also extend the Mutiny implementation base, where the class name is structured as follows: `Mutiny${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase`."
msgstr "服务实现Bean也可以扩展Mutiny的实现基础，其中类名的结构如下。 `Mutiny${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase` ."

#. type: Title ==
#: upstream/_guides/grpc-service-implementation.adoc:69
#, fuzzy, no-wrap
msgid "Implementing a Service with the default gRPC API"
msgstr "用默认的gRPC API实现一个服务"

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:74
#, fuzzy
msgid "To implement a gRPC service using the default gRPC API, create a class that extends the default implementation base.  Then, override the methods defined in the service interface.  Finally, implement the service and add the `@GrpcService` annotation:"
msgstr "要使用默认的gRPC API实现gRPC服务，请创建一个扩展了默认实现基的类。然后，重写服务接口中定义的方法。最后，实现该服务并添加 `@GrpcService` 注解。"

#. type: delimited block -
#: upstream/_guides/grpc-service-implementation.adoc:78
#: upstream/_guides/grpc-service-implementation.adoc:125
#, no-wrap
msgid "import io.quarkus.grpc.GrpcService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-implementation.adoc:81
#, no-wrap
msgid ""
"@GrpcService\n"
"public class HelloService extends GreeterGrpc.GreeterImplBase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-implementation.adoc:90
#, no-wrap
msgid ""
"    @Override\n"
"    public void sayHello(HelloRequest request, StreamObserver<HelloReply> responseObserver) {\n"
"        String name = request.getName();\n"
"        String message = \"Hello \" + name;\n"
"        responseObserver.onNext(HelloReply.newBuilder().setMessage(message).build());\n"
"        responseObserver.onCompleted();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/grpc-service-implementation.adoc:92
#, fuzzy, no-wrap
msgid "Blocking Service Implementation"
msgstr "封锁服务的实施"

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:97
#, fuzzy
msgid "By default, all the methods from a gRPC service run on the event loop.  As a consequence, you must **not** block.  If your service logic must block, annotate the method with `io.smallrye.common.annotation.Blocking`:"
msgstr "默认情况下，来自gRPC服务的所有方法都在事件循环中运行。因此，你必须 *不* 阻塞。如果你的服务逻辑必须阻断，请用 `io.smallrye.common.annotation.Blocking` 来注释该方法。"

#. type: delimited block -
#: upstream/_guides/grpc-service-implementation.adoc:105
#, no-wrap
msgid ""
"@Override\n"
"@Blocking\n"
"public Uni<HelloReply> sayHelloBlocking(HelloRequest request) {\n"
"    // Do something blocking before returning the Uni\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/grpc-service-implementation.adoc:107
#, fuzzy, no-wrap
msgid "Handling Streams"
msgstr "处理流"

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:110
#, fuzzy
msgid "gRPC allows receiving and returning streams:"
msgstr "gRPC允许接收和返回数据流。"

#. type: delimited block -
#: upstream/_guides/grpc-service-implementation.adoc:118
#, no-wrap
msgid ""
"service Streaming {\n"
"    rpc Source(Empty) returns (stream Item) {} // Returns a stream\n"
"    rpc Sink(stream Item) returns (Empty) {}   // Reads a stream\n"
"    rpc Pipe(stream Item) returns (stream Item) {}  // Reads a streams and return a streams\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:121
#, fuzzy
msgid "Using Mutiny, you can implement these as follows:"
msgstr "使用Mutiny，你可以按以下方式实现这些。"

#. type: delimited block -
#: upstream/_guides/grpc-service-implementation.adoc:128
#, no-wrap
msgid ""
"@GrpcService\n"
"public class StreamingService implements Streaming {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-implementation.adoc:136
#, no-wrap
msgid ""
"    @Override\n"
"    public Multi<Item> source(Empty request) {\n"
"        // Just returns a stream emitting an item every 2ms and stopping after 10 items.\n"
"        return Multi.createFrom().ticks().every(Duration.ofMillis(2))\n"
"                .select().first(10)\n"
"                .map(l -> Item.newBuilder().setValue(Long.toString(l)).build());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-implementation.adoc:146
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<Empty> sink(Multi<Item> request) {\n"
"        // Reads the incoming streams, consume all the items.\n"
"        return request\n"
"                .map(Item::getValue)\n"
"                .map(Long::parseLong)\n"
"                .collect().last()\n"
"                .map(l -> Empty.newBuilder().build());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-implementation.adoc:158
#, no-wrap
msgid ""
"    @Override\n"
"    public Multi<Item> pipe(Multi<Item> request) {\n"
"        // Reads the incoming stream, compute a sum and return the cumulative results\n"
"        // in the outbound stream.\n"
"        return request\n"
"                .map(Item::getValue)\n"
"                .map(Long::parseLong)\n"
"                .onItem().scan(() -> 0L, Long::sum)\n"
"                .onItem().transform(l -> Item.newBuilder().setValue(Long.toString(l)).build());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/grpc-service-implementation.adoc:160
#, fuzzy, no-wrap
msgid "Health Check"
msgstr "健康检查"

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:162
#, fuzzy
msgid "For the implemented services, Quarkus gRPC exposes health information in the following format:"
msgstr "对于已实现的服务，Quarkus gRPC以下列格式公开健康信息。"

#. type: delimited block -
#: upstream/_guides/grpc-service-implementation.adoc:165
#, no-wrap
msgid "syntax = \"proto3\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-implementation.adoc:167
#, no-wrap
msgid "package grpc.health.v1;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-implementation.adoc:171
#, no-wrap
msgid ""
"message HealthCheckRequest {\n"
"  string service = 1;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-implementation.adoc:180
#, no-wrap
msgid ""
"message HealthCheckResponse {\n"
"  enum ServingStatus {\n"
"    UNKNOWN = 0;\n"
"    SERVING = 1;\n"
"    NOT_SERVING = 2;\n"
"  }\n"
"  ServingStatus status = 1;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-implementation.adoc:183
#, no-wrap
msgid ""
"service Health {\n"
"  rpc Check(HealthCheckRequest) returns (HealthCheckResponse);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-implementation.adoc:186
#, no-wrap
msgid ""
"  rpc Watch(HealthCheckRequest) returns (stream HealthCheckResponse);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:190
#, fuzzy
msgid "Clients can specify the fully qualified service name to get the health status of a specific service or skip specifying the service name to get the general status of the gRPC server."
msgstr "客户可以指定完全合格的服务名称以获得特定服务的健康状态，或者跳过指定服务名称以获得gRPC服务器的一般状态。"

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:193
#, fuzzy
msgid "For more details, check out the https://github.com/grpc/grpc/blob/v1.28.1/doc/health-checking.md[gRPC documentation]"
msgstr "更多细节，请查看 link:https://github.com/grpc/grpc/blob/v1.28.1/doc/health-checking.md[gRPC文档]"

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:196
#, fuzzy
msgid "Additionally, if Quarkus SmallRye Health is added to the application, a readiness check for the state of the gRPC services will be added to the MicroProfile Health endpoint response, that is `/q/health`."
msgstr "此外，如果Quarkus SmallRye Health被添加到应用程序中，那么对gRPC服务状态的准备度检查将被添加到MicroProfile Health端点响应中，即 `/q/health` 。"

#. type: Title ==
#: upstream/_guides/grpc-service-implementation.adoc:197
#, fuzzy, no-wrap
msgid "Reflection Service"
msgstr "反思服务"

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:201
#, fuzzy
msgid "Quarkus gRPC Server implements the https://github.com/grpc/grpc/blob/master/doc/server-reflection.md[reflection service].  This service allows tools like https://github.com/fullstorydev/grpcurl[grpcurl] or https://github.com/gusaul/grpcox[grpcox] to interact with your services."
msgstr "Quarkus gRPC服务器实现了 link:https://github.com/grpc/grpc/blob/master/doc/server-reflection.md[反射服务] 。这个服务允许 link:https://github.com/fullstorydev/grpcurl[grpcurl] 或 link:https://github.com/gusaul/grpcox[grpcox] 等工具与你的服务进行交互。"

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:204
#, fuzzy
msgid "The reflection service is enabled by default in _dev_ mode.  In test or production mode, you need to enable it explicitly by setting `quarkus.grpc.server.enable-reflection-service` to `true`."
msgstr "在 _开发_ 模式下，反射服务是默认启用的。在测试或生产模式下，你需要通过设置 `quarkus.grpc.server.enable-reflection-service` 到 `true` 来明确启用它。"

#. type: Title ==
#: upstream/_guides/grpc-service-implementation.adoc:205
#, fuzzy, no-wrap
msgid "Scaling"
msgstr "缩放"

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:207
#, fuzzy
msgid "By default, quarkus-grpc starts a single gRPC server running on a single event loop."
msgstr "默认情况下，quarkus-grpc启动一个单一的gRPC服务器，在一个事件循环上运行。"

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:209
#, fuzzy
msgid "If you wish to scale your server, you can set the number of server instances by setting `quarkus.grpc.server.instances`."
msgstr "如果你想扩展你的服务器，你可以通过设置 `quarkus.grpc.server.instances` ，设定服务器实例的数量。"

#. type: Title ==
#: upstream/_guides/grpc-service-implementation.adoc:210
#, fuzzy, no-wrap
msgid "Server Configuration"
msgstr "服务器配置"

#. type: Title ==
#: upstream/_guides/grpc-service-implementation.adoc:214
#, fuzzy, no-wrap
msgid "Example of Configuration"
msgstr "配置实例"

#. type: Title ===
#: upstream/_guides/grpc-service-implementation.adoc:216
#, fuzzy, no-wrap
msgid "Enabling TLS"
msgstr "启用TLS"

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:219
#, fuzzy
msgid "To enable TLS, use the following configuration."
msgstr "要启用TLS，请使用以下配置。"

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:222
#, fuzzy
msgid "Note that all paths in the configuration may either specify a resource on the classpath (typically from `src/main/resources` or its subfolder) or an external file."
msgstr "注意，配置中的所有路径可以指定classpath上的资源（通常来自 `src/main/resources` 或其子文件夹）或外部文件。"

#. type: delimited block -
#: upstream/_guides/grpc-service-implementation.adoc:227
#, no-wrap
msgid ""
"quarkus.grpc.server.ssl.certificate=tls/server.pem\n"
"quarkus.grpc.server.ssl.key=tls/server.key\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:230
#, fuzzy
msgid "When SSL/TLS is configured, `plain-text` is automatically disabled."
msgstr "当配置了SSL/TLS时， `plain-text` 自动被禁用。"

#. type: Title ===
#: upstream/_guides/grpc-service-implementation.adoc:231
#, fuzzy, no-wrap
msgid "TLS with Mutual Auth"
msgstr "带有相互授权的TLS"

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:234
#, fuzzy
msgid "To use TLS with mutual authentication, use the following configuration:"
msgstr "要使用相互认证的TLS，请使用以下配置。"

#. type: delimited block -
#: upstream/_guides/grpc-service-implementation.adoc:242
#, no-wrap
msgid ""
"quarkus.grpc.server.ssl.certificate=tls/server.pem\n"
"quarkus.grpc.server.ssl.key=tls/server.key\n"
"quarkus.grpc.server.ssl.trust-store=tls/ca.jks\n"
"quarkus.grpc.server.ssl.trust-store-password=*****\n"
"quarkus.grpc.server.ssl.client-auth=REQUIRED\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/grpc-service-implementation.adoc:244
#, fuzzy, no-wrap
msgid "Server Interceptors"
msgstr "服务器拦截器"

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:247
#, fuzzy
msgid "gRPC server interceptors let you perform logic, such as authentication, before your service is invoked."
msgstr "gRPC服务器拦截器让你在服务被调用之前执行逻辑，如认证。"

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:249
#, fuzzy
msgid "You can implement a gRPC server interceptor by creating an `@ApplicationScoped` bean implementing `io.grpc.ServerInterceptor`:"
msgstr "你可以通过创建一个实现 `@ApplicationScoped` bean的 `io.grpc.ServerInterceptor` ，来实现一个gRPC服务器拦截器。"

#. type: delimited block -
#: upstream/_guides/grpc-service-implementation.adoc:255
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"// add @GlobalInterceptor for interceptors meant to be invoked for every service\n"
"public class MyInterceptor implements ServerInterceptor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-implementation.adoc:262
#, no-wrap
msgid ""
"    @Override\n"
"    public <ReqT, RespT> ServerCall.Listener<ReqT> interceptCall(ServerCall<ReqT, RespT> serverCall,\n"
"            Metadata metadata, ServerCallHandler<ReqT, RespT> serverCallHandler) {\n"
"        // ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:265
#, fuzzy
msgid "Check the https://grpc.github.io/grpc-java/javadoc/io/grpc/ServerInterceptor.html[ServerInterceptor JavaDoc] to properly implement your interceptor."
msgstr "查看 link:https://grpc.github.io/grpc-java/javadoc/io/grpc/ServerInterceptor.html[ServerInterceptor JavaDoc] ，正确实现你的拦截器。"

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:268
#, fuzzy
msgid "To apply an interceptor to all exposed services, annotate it with `@io.quarkus.grpc.GlobalInterceptor`.  To apply an interceptor to a single service, register it on the service with `@io.quarkus.grpc.RegisterInterceptor`:"
msgstr "要将一个拦截器应用于所有暴露的服务，用 `@io.quarkus.grpc.GlobalInterceptor` 来注释它。要将拦截器应用于单个服务，用 `@io.quarkus.grpc.RegisterInterceptor` 在服务上注册它。"

#. type: delimited block -
#: upstream/_guides/grpc-service-implementation.adoc:272
#, no-wrap
msgid ""
"import io.quarkus.grpc.GrpcService;\n"
"import io.quarkus.grpc.RegisterInterceptor;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-implementation.adoc:278
#, no-wrap
msgid ""
"@GrpcService\n"
"@RegisterInterceptor(MyInterceptor.class)\n"
"public class StreamingService implements Streaming {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:282
#, fuzzy
msgid "When you have multiple server interceptors, you can order them by implementing the `javax.enterprise.inject.spi.Prioritized` interface. Please note that all the global interceptors are invoked before the service-specific interceptors."
msgstr "当你有多个服务器拦截器时，你可以通过实现 `javax.enterprise.inject.spi.Prioritized` 接口对它们进行排序。请注意，所有全局拦截器都会在特定服务拦截器之前被调用。"

#. type: delimited block -
#: upstream/_guides/grpc-service-implementation.adoc:287
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyInterceptor implements ServerInterceptor, Prioritized {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-implementation.adoc:293
#, no-wrap
msgid ""
"    @Override\n"
"    public <ReqT, RespT> ServerCall.Listener<ReqT> interceptCall(ServerCall<ReqT, RespT> serverCall,\n"
"            Metadata metadata, ServerCallHandler<ReqT, RespT> serverCallHandler) {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-implementation.adoc:299
#, no-wrap
msgid ""
"    @Override\n"
"    public int getPriority() {\n"
"        return 10;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:303
#, fuzzy
msgid "Interceptors with the highest priority are called first.  The default priority, used if the interceptor does not implement the `Prioritized` interface, is `0`."
msgstr "优先级最高的拦截器会被首先调用。如果拦截器没有实现 `Prioritized` 接口，那么默认的优先级是 `0` 。"

#. type: Title ==
#: upstream/_guides/grpc-service-implementation.adoc:305
#, fuzzy, no-wrap
msgid "Testing your services"
msgstr "测试你的服务"

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:309
#, fuzzy
msgid "The easiest way to test a gRPC service is to use a gRPC client as described in xref:grpc-service-consumption.adoc[Consuming a gRPC Service]."
msgstr "测试gRPC服务的最简单方法是使用gRPC客户端，如 link:grpc-service-consumption.html[Consuming a gRPC Service] 中所述。"

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:313
#, fuzzy
msgid "Please note that in the case of using a client to test an exposed service that does not use TLS, there is no need to provide any configuration. E.g. to test the `HelloService` defined above, one could create the following test:"
msgstr "请注意，在使用客户端测试不使用TLS的暴露服务的情况下，不需要提供任何配置。例如，为了测试上面定义的 `HelloService` ，可以创建以下测试。"

#. type: delimited block -
#: upstream/_guides/grpc-service-implementation.adoc:317
#, no-wrap
msgid "public class HelloServiceTest implements Greeter {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-implementation.adoc:320
#, no-wrap
msgid ""
"    @GrpcClient\n"
"    Greeter client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-implementation.adoc:329
#, no-wrap
msgid ""
"    @Test\n"
"    void shouldReturnHello() {\n"
"        CompletableFuture<String> message = new CompletableFuture<>();\n"
"        client.sayHello(HelloRequest.newBuilder().setName(\"Quarkus\").build())\n"
"                .subscribe().with(reply -> message.complete(reply.getMessage()));\n"
"        assertThat(message.get(5, TimeUnit.SECONDS)).isEqualTo(\"Hello Quarkus\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/grpc-service-implementation.adoc:331
#, fuzzy, no-wrap
msgid "Trying out your services manually"
msgstr "手动尝试你的服务"

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:334
#, fuzzy
msgid "In the dev mode, you can try out your gRPC services in the Quarkus Dev UI.  Just go to http://localhost:8080/q/dev and click on _Services_ under the gRPC tile."
msgstr "在开发模式下，你可以在Quarkus Dev UI中试用你的gRPC服务。只要进入 http://localhost:8080/q/dev ，点击gRPC瓦片下的 _服务_ 。"

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:336
#, fuzzy
msgid "Please note that your application needs to expose the \"normal\" HTTP port for the Dev UI to be accessible. If your application does not expose any HTTP endpoints, you can create a dedicated profile with a dependency on `quarkus-vertx-http`:"
msgstr "请注意，你的应用程序需要暴露 \"正常 \"的HTTP端口，以使Dev UI能够被访问。如果你的应用程序没有暴露任何HTTP端点，你可以创建一个依赖 `quarkus-vertx-http` 的专用配置文件。"

#. type: delimited block -
#: upstream/_guides/grpc-service-implementation.adoc:349
#, no-wrap
msgid ""
"    <profiles>\n"
"        <profile>\n"
"            <id>development</id>\n"
"            <dependencies>\n"
"                <dependency>\n"
"                    <groupId>io.quarkus</groupId>\n"
"                    <artifactId>quarkus-vertx-http</artifactId>\n"
"                </dependency>\n"
"            </dependencies>\n"
"        </profiles>\n"
"    </profile>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:351
#, fuzzy
msgid "Having it, you can run the dev mode with: `mvn quarkus:dev -Pdevelopment`."
msgstr "有了它，你就可以在开发模式下运行。 `mvn quarkus:dev -Pdevelopment` ."

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:353
#, fuzzy
msgid "If you use Gradle, you can simply add a dependency for the `quarkusDev` task:"
msgstr "如果你使用Gradle，你可以简单的为 `quarkusDev` 任务添加一个依赖关系。"

#. type: delimited block -
#: upstream/_guides/grpc-service-implementation.adoc:359
#, no-wrap
msgid ""
"dependencies {\n"
"    quarkusDev 'io.quarkus:quarkus-vertx-http'\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/grpc-service-implementation.adoc:361
#, fuzzy, no-wrap
msgid "gRPC Server metrics"
msgstr "gRPC服务器度量"

#. type: Title ===
#: upstream/_guides/grpc-service-implementation.adoc:363
#, fuzzy, no-wrap
msgid "Enabling metrics collection"
msgstr "启用指标收集"

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:367
msgid "gRPC server metrics are automatically enabled when the application also uses the xref:micrometer.adoc[`quarkus-micrometer`] extension.  Micrometer collects the metrics of all the gRPC services implemented by the application."
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:369
msgid "As an example, if you export the metrics to Prometheus, you will get:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-implementation.adoc:385
#, no-wrap
msgid ""
"# HELP grpc_server_responses_sent_messages_total The total number of responses sent\n"
"# TYPE grpc_server_responses_sent_messages_total counter\n"
"grpc_server_responses_sent_messages_total{method=\"SayHello\",methodType=\"UNARY\",service=\"helloworld.Greeter\",} 6.0\n"
"# HELP grpc_server_processing_duration_seconds The total time taken for the server to complete the call\n"
"# TYPE grpc_server_processing_duration_seconds summary\n"
"grpc_server_processing_duration_seconds_count{method=\"SayHello\",methodType=\"UNARY\",service=\"helloworld.Greeter\",statusCode=\"OK\",} 6.0\n"
"grpc_server_processing_duration_seconds_sum{method=\"SayHello\",methodType=\"UNARY\",service=\"helloworld.Greeter\",statusCode=\"OK\",} 0.016216771\n"
"# HELP grpc_server_processing_duration_seconds_max The total time taken for the server to complete the call\n"
"# TYPE grpc_server_processing_duration_seconds_max gauge\n"
"grpc_server_processing_duration_seconds_max{method=\"SayHello\",methodType=\"UNARY\",service=\"helloworld.Greeter\",statusCode=\"OK\",} 0.007985236\n"
"# HELP grpc_server_requests_received_messages_total The total number of requests received\n"
"# TYPE grpc_server_requests_received_messages_total counter\n"
"grpc_server_requests_received_messages_total{method=\"SayHello\",methodType=\"UNARY\",service=\"helloworld.Greeter\",} 6.0\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:388
msgid "The service name, method and type can be found in the _tags_."
msgstr ""

#. type: Title ===
#: upstream/_guides/grpc-service-implementation.adoc:389
#, no-wrap
msgid "Disabling metrics collection"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-service-implementation.adoc:392
msgid "To disable the gRPC server metrics when `quarkus-micrometer` is used, add the following property to the application configuration:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-implementation.adoc:396
#, no-wrap
msgid "quarkus.micrometer.binder.grpc-server.enabled=false\n"
msgstr ""
