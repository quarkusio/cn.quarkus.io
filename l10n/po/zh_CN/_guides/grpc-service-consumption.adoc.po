# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/grpc-service-consumption.adoc:6
#, fuzzy, no-wrap
msgid "Consuming a gRPC Service"
msgstr "消耗一个gRPC服务"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:11
#, fuzzy
msgid "gRPC clients can be injected in your application code."
msgstr "gRPC客户端可以被注入到你的应用代码中。"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:14
#, fuzzy
msgid "Consuming gRPC services requires the gRPC classes to be generated.  Place your `proto` files in `src/main/proto` and run `mvn compile`."
msgstr "消费gRPC服务需要生成gRPC类。将你的 `proto` 文件放在 `src/main/proto` ，然后运行 `mvn compile` 。"

#. type: Title ==
#: upstream/_guides/grpc-service-consumption.adoc:15
#, fuzzy, no-wrap
msgid "Stubs and Injection"
msgstr "存根和注入"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:19
#, fuzzy
msgid "gRPC generation provides several stubs, providing different ways to consume a gRPC service.  You can inject:"
msgstr "gRPC生成提供了几个存根，提供了消费gRPC服务的不同方式。你可以注入。"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:21
#, fuzzy
msgid "a service interface using the Mutiny API,"
msgstr "一个使用Mutiny API的服务接口。"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:22
#, fuzzy
msgid "a blocking stub using the gRPC API,"
msgstr "一个使用gRPC API的阻塞式存根。"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:23
#, fuzzy
msgid "a reactive stub based on Mutiny,"
msgstr "一个基于Mutiny的反应式存根。"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:24
#, fuzzy
msgid "the gRPC `io.grpc.Channel`, that lets you create other types of stubs."
msgstr "gRPC `io.grpc.Channel` ，它可以让你创建其他类型的存根。"

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:28
#: upstream/_guides/grpc-service-consumption.adoc:106
#, no-wrap
msgid "import io.quarkus.grpc.GrpcClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:32
#, no-wrap
msgid ""
"import hello.Greeter;\n"
"import hello.GreeterGrpc.GreeterBlockingStub;\n"
"import hello.MutinyGreeterGrpc.MutinyGreeterStub;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:34
#, no-wrap
msgid "class MyBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:38
#, no-wrap
msgid ""
"   // A service interface using the Mutiny API\n"
"   @GrpcClient(\"helloService\")                   // <1>\n"
"   Greeter greeter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:42
#, no-wrap
msgid ""
"   // A reactive stub based on Mutiny\n"
"   @GrpcClient(\"helloService\")\n"
"   MutinyGreeterGrpc.MutinyGreeterStub mutiny;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:46
#, no-wrap
msgid ""
"   // A blocking stub using the gRPC API\n"
"   @GrpcClient\n"
"   GreeterGrpc.GreeterBlockingStub helloService; // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:49
#, no-wrap
msgid ""
"   @GrpcClient(\"hello-service\")\n"
"   Channel channel;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:51
#: upstream/_guides/grpc-service-consumption.adoc:197
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:53
#, fuzzy
msgid "A gRPC client injection point must be annotated with the `@GrpcClient` qualifier. This qualifier can be used to specify the name that is used to configure the underlying gRPC client. For example, if you set it to `hello-service`, configuring the host of the service is done using the `quarkus.grpc.clients.**hello-service**.host`."
msgstr "一个gRPC客户端注入点必须用 `@GrpcClient` 修饰语来注释。这个限定词可以用来指定用于配置底层gRPC客户端的名称。例如，如果你把它设置为 `hello-service` ，那么配置服务的主机是用 `quarkus.grpc.clients. *hello-service* .host` ."

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:54
#, fuzzy
msgid "If the name is not specified via the `GrpcClient#value()` then the field name is used instead, e.g. `helloService` in this particular case."
msgstr "如果名称没有通过 `GrpcClient#value()` ，那么将使用字段名代替，例如在这个特定情况下， `helloService` 。"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:57
#, fuzzy
msgid "The stub class names are derived from the service name used in your `proto` file.  For example, if you use `Greeter` as a service name as in:"
msgstr "存根类的名称是由你的 `proto` 文件中使用的服务名称衍生出来的。例如，如果你使用 `Greeter` 作为服务名称，如。"

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:61
#, no-wrap
msgid "option java_package = \"hello\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:65
#, no-wrap
msgid ""
"service Greeter {\n"
"    rpc SayHello (HelloRequest) returns (HelloReply) {}\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:68
#, fuzzy
msgid "Then the service interface name is: `hello.Greeter`, the Mutiny stub name is: `hello.MutinyGreeterGrpc.MutinyGreeterStub` and the blocking stub name is: `hello.GreeterGrpc.GreeterBlockingStub`."
msgstr "那么服务接口的名称是。 `hello.Greeter` ，Mutiny存根的名字是： `hello.MutinyGreeterGrpc.MutinyGreeterStub` ，阻塞存根的名字是： `hello.GreeterGrpc.GreeterBlockingStub` 。"

#. type: Title ==
#: upstream/_guides/grpc-service-consumption.adoc:69
#, fuzzy, no-wrap
msgid "Examples"
msgstr "实例"

#. type: Title ===
#: upstream/_guides/grpc-service-consumption.adoc:71
#, fuzzy, no-wrap
msgid "Service Interface"
msgstr "服务接口"

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:77
#, no-wrap
msgid ""
"import io.quarkus.grpc.GrpcClient;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:79
#: upstream/_guides/grpc-service-consumption.adoc:329
#, no-wrap
msgid "import hello.Greeter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:84
#: upstream/_guides/grpc-service-consumption.adoc:113
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:87
#: upstream/_guides/grpc-service-consumption.adoc:116
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class ExampleResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:90
#, no-wrap
msgid ""
"   @GrpcClient <1>\n"
"   Greeter hello;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:98
#, no-wrap
msgid ""
"   @GET\n"
"   @Path(\"/mutiny/{name}\")\n"
"   public Uni<String> helloMutiny(String name) {\n"
"      return hello.sayHello(HelloRequest.newBuilder().setName(name).build())\n"
"            .onItem().transform(HelloReply::getMessage);\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:100
#, fuzzy
msgid "The service name is derived from the injection point - the field name is used. The `quarkus.grpc.clients.hello.host` property must be set."
msgstr "服务名称来自于注入点--使用的是字段名。 `quarkus.grpc.clients.hello.host` 属性必须被设置。"

#. type: Title ===
#: upstream/_guides/grpc-service-consumption.adoc:101
#, fuzzy, no-wrap
msgid "Blocking Stub"
msgstr "封锁存根"

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:108
#, no-wrap
msgid "import hello.GreeterGrpc.GreeterBlockingStub;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:119
#, no-wrap
msgid ""
"   @GrpcClient(\"hello\") <1>\n"
"   GreeterGrpc.GreeterBlockingStub blockingHelloService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:126
#, no-wrap
msgid ""
"   @GET\n"
"   @Path(\"/blocking/{name}\")\n"
"   public String helloBlocking(String name) {\n"
"      return blockingHelloService.sayHello(HelloRequest.newBuilder().setName(name).build()).getMessage();\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:128
#, fuzzy
msgid "The `quarkus.grpc.clients.hello.host` property must be set."
msgstr " `quarkus.grpc.clients.hello.host` 属性必须被设置。"

#. type: Title ===
#: upstream/_guides/grpc-service-consumption.adoc:129
#, fuzzy, no-wrap
msgid "Handling streams"
msgstr "处理数据流"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:132
#, fuzzy
msgid "gRPC allows sending and receiving streams:"
msgstr "gRPC允许发送和接收流。"

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:140
#, no-wrap
msgid ""
"service Streaming {\n"
"    rpc Source(Empty) returns (stream Item) {} // Returns a stream\n"
"    rpc Sink(stream Item) returns (Empty) {}   // Reads a stream\n"
"    rpc Pipe(stream Item) returns (stream Item) {}  // Reads a streams and return a streams\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:143
#, fuzzy
msgid "Using the Mutiny stub, you can interact with these as follows:"
msgstr "使用Mutiny存根，你可以与这些互动，如下所示。"

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:147
#, no-wrap
msgid "package io.quarkus.grpc.example.streaming;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:152
#, no-wrap
msgid ""
"import io.grpc.examples.streaming.Empty;\n"
"import io.grpc.examples.streaming.Item;\n"
"import io.grpc.examples.streaming.MutinyStreamingGrpc;\n"
"import io.quarkus.grpc.GrpcClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:155
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Multi;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:161
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:165
#, no-wrap
msgid ""
"@Path(\"/streaming\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"public class StreamingEndpoint {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:168
#, no-wrap
msgid ""
"    @GrpcClient\n"
"    MutinyStreamingGrpc.MutinyStreamingStub streaming;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:175
#, no-wrap
msgid ""
"    @GET\n"
"    public Multi<String> invokeSource() {\n"
"        // Retrieve a stream\n"
"        return streaming.source(Empty.newBuilder().build())\n"
"                .onItem().transform(Item::getValue);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:185
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"sink/{max}\")\n"
"    public Uni<Void> invokeSink(int max) {\n"
"        // Send a stream and wait for completion\n"
"        Multi<Item> inputs = Multi.createFrom().range(0, max)\n"
"                .map(i -> Integer.toString(i))\n"
"                .map(i -> Item.newBuilder().setValue(i).build());\n"
"        return streaming.sink(inputs).onItem().ignore().andContinueWithNull();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:195
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/{max}\")\n"
"    public Multi<String> invokePipe(int max) {\n"
"        // Send a stream and retrieve a stream\n"
"        Multi<Item> inputs = Multi.createFrom().range(0, max)\n"
"                .map(i -> Integer.toString(i))\n"
"                .map(i -> Item.newBuilder().setValue(i).build());\n"
"        return streaming.pipe(inputs).onItem().transform(Item::getValue);\n"
"    }\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/grpc-service-consumption.adoc:200
#, fuzzy, no-wrap
msgid "Client configuration"
msgstr "客户端配置"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:203
#, fuzzy
msgid "For each gRPC service you inject in your application, you can configure the following attributes:"
msgstr "对于你在应用程序中注入的每个gRPC服务，你可以配置以下属性。"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:207
#, fuzzy
msgid "The `client-name` is the name set in the `@GrpcClient` or derived from the injection point if not explicitly defined."
msgstr " `client-name` 是在 `@GrpcClient` 中设置的名称，如果没有明确定义，则从注入点派生。"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:210
#, fuzzy
msgid "The following examples uses _hello_ as the client name.  Don't forget to replace it with the name you used in in the `@GrpcClient` annotation."
msgstr "下面的例子使用 _hello_ 作为客户端的名字。不要忘记用你在 `@GrpcClient` 注释中使用的名字来替换它。"

#. type: Title ===
#: upstream/_guides/grpc-service-consumption.adoc:211
#, fuzzy, no-wrap
msgid "Enabling TLS"
msgstr "启用TLS"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:216
#, fuzzy
msgid "To enable TLS, use the following configuration.  Note that all paths in the configuration may either specify a resource on the classpath (typically from `src/main/resources` or its subfolder) or an external file."
msgstr "要启用TLS，请使用以下配置。注意，配置中的所有路径可以指定classpath上的资源（通常来自 `src/main/resources` 或其子文件夹）或外部文件。"

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:220
#, no-wrap
msgid "quarkus.grpc.clients.hello.host=localhost\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:223
#, no-wrap
msgid ""
"# either a path to a classpath resource or to a file:\n"
"quarkus.grpc.clients.hello.ssl.trust-store=tls/ca.pem\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:226
#, fuzzy
msgid "When SSL/TLS is configured, `plain-text` is automatically disabled."
msgstr "当配置了SSL/TLS时， `plain-text` 自动被禁用。"

#. type: Title ===
#: upstream/_guides/grpc-service-consumption.adoc:227
#, fuzzy, no-wrap
msgid "TLS with Mutual Auth"
msgstr "带有相互授权的TLS"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:230
#, fuzzy
msgid "To use TLS with mutual authentication, use the following configuration:"
msgstr "要使用相互认证的TLS，请使用以下配置。"

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:235
#, no-wrap
msgid ""
"quarkus.grpc.clients.hello.host=localhost\n"
"quarkus.grpc.clients.hello.plain-text=false\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:240
#, no-wrap
msgid ""
"# all the following may use either a path to a classpath resource or to a file:\n"
"quarkus.grpc.clients.hello.ssl.certificate=tls/client.pem\n"
"quarkus.grpc.clients.hello.ssl.key=tls/client.key\n"
"quarkus.grpc.clients.hello.ssl.trust-store=tls/ca.pem\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/grpc-service-consumption.adoc:242
#, fuzzy, no-wrap
msgid "Client Deadlines"
msgstr "客户的最后期限"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:246
#, fuzzy
msgid "It's always reasonable to set a deadline (timeout) for a gRPC client, i.e. to specify a duration of time after which the RPC times out and the client receives the status error `DEADLINE_EXCEEDED`.  You can specify the deadline via the `quarkus.grpc.clients.\"service-name\".deadline` configuration property, e.g.:"
msgstr "为gRPC客户端设置一个截止日期（超时）总是合理的，也就是说，指定一个时间段，在这个时间段之后，RPC超时，客户端会收到状态错误 `DEADLINE_EXCEEDED` 。你可以通过 `quarkus.grpc.clients.\"service-name\".deadline` 配置属性指定最后期限，例如。"

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:251
#, no-wrap
msgid ""
"quarkus.grpc.clients.hello.host=localhost\n"
"quarkus.grpc.clients.hello.deadline=2s <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:253
#, fuzzy
msgid "Set the deadline for all injected clients."
msgstr "为所有被注入的客户设定最后期限。"

#. type: Title ==
#: upstream/_guides/grpc-service-consumption.adoc:254
#, fuzzy, no-wrap
msgid "gRPC Headers"
msgstr "gRPC头文件"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:257
#, fuzzy
msgid "Similarly to HTTP, alongside the message, gRPC calls can carry headers.  Headers can be useful e.g. for authentication."
msgstr "与HTTP类似，在消息的旁边，gRPC调用可以携带头文件。头信息可以很有用，例如用于认证。"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:259
#, fuzzy
msgid "To set headers for a gRPC call, create a client with headers attached and then perform the call on this client:"
msgstr "要为gRPC调用设置头信息，需要创建一个附带头信息的客户端，然后在这个客户端上执行调用。"

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:262
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:270
#, no-wrap
msgid ""
"import examples.Greeter;\n"
"import examples.HelloReply;\n"
"import examples.HelloRequest;\n"
"import io.grpc.Metadata;\n"
"import io.quarkus.grpc.GrpcClient;\n"
"import io.quarkus.grpc.GrpcClientUtils;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:275
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyService {\n"
"    @GrpcClient\n"
"    Greeter client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:281
#, no-wrap
msgid ""
"    public Uni<HelloReply> doTheCall() {\n"
"        Metadata extraHeaders = new Metadata();\n"
"        if (headers) {\n"
"            extraHeaders.put(\"my-header\", \"my-interface-value\");\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:283
#, no-wrap
msgid "        Greeter alteredClient = GrpcClientUtils.attachHeaders(client, extraHeaders); // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:287
#, no-wrap
msgid ""
"        return alteredClient.sayHello(HelloRequest.newBuilder().setName(name).build()); // <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:289
#, fuzzy
msgid "Alter the client to make calls with the `extraHeaders` attached"
msgstr "修改客户端，使之与 `extraHeaders` ，进行通话。"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:290
#, fuzzy
msgid "Perform the call with the altered client. The original client remains unmodified"
msgstr "用改变后的客户端进行呼叫。原先的客户端保持未修改的状态"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:292
#, fuzzy
msgid "`GrpcClientUtils` work with all flavors of clients."
msgstr " `GrpcClientUtils` 与各种类型的客户合作。"

#. type: Title ==
#: upstream/_guides/grpc-service-consumption.adoc:293
#, fuzzy, no-wrap
msgid "Client Interceptors"
msgstr "客户端拦截器"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:299
#, fuzzy
msgid "A gRPC client interceptor can be implemented by a CDI bean that also implements the `io.grpc.ClientInterceptor` interface.  You can annotate an injected client with `@io.quarkus.grpc.RegisterClientInterceptor` to register the specified interceptor for the particular client instance.  The `@RegisterClientInterceptor` annotation is repeatable.  Alternatively, if you want to apply the interceptor to any injected client then annotate the interceptor bean with `@io.quarkus.grpc.GlobalInterceptor`."
msgstr "gRPC客户端拦截器可以由也实现了 `io.grpc.ClientInterceptor` 接口的CDI bean实现。你可以用 `@io.quarkus.grpc.RegisterClientInterceptor` 注释注入的客户端，以便为特定的客户端实例注册指定的拦截器。 `@RegisterClientInterceptor` 注解是可重复的。另外，如果你想把拦截器应用于任何注入的客户端，那么就用 `@io.quarkus.grpc.GlobalInterceptor` 注释拦截器bean。"

#. type: Block title
#: upstream/_guides/grpc-service-consumption.adoc:300
#, fuzzy, no-wrap
msgid "Global Client Interceptor Example"
msgstr "全局客户拦截器实例"

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:304
#, no-wrap
msgid "import io.quarkus.grpc.GlobalInterceptor;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:306
#, no-wrap
msgid "import io.grpc.ClientInterceptor;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:310
#, no-wrap
msgid ""
"@GlobalInterceptor <1>\n"
"@ApplicationScoped\n"
"public class MyInterceptor implements ClientInterceptor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:317
#, no-wrap
msgid ""
"    @Override\n"
"    public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(MethodDescriptor<ReqT, RespT> method,\n"
"            CallOptions callOptions, Channel next) {\n"
"       // ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:319
#, fuzzy
msgid "This interceptor is applied to all injected gRPC clients."
msgstr "这个拦截器适用于所有注入的gRPC客户端。"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:321
#, fuzzy
msgid "Check the https://grpc.github.io/grpc-java/javadoc/io/grpc/ClientInterceptor.html[ClientInterceptor JavaDoc] to properly implement your interceptor."
msgstr "查看 link:https://grpc.github.io/grpc-java/javadoc/io/grpc/ClientInterceptor.html[ClientInterceptor JavaDoc] ，正确实现你的拦截器。"

#. type: Block title
#: upstream/_guides/grpc-service-consumption.adoc:322
#, fuzzy, no-wrap
msgid "`@RegisterClientInterceptor` Example"
msgstr " `@RegisterClientInterceptor` 例子"

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:327
#, no-wrap
msgid ""
"import io.quarkus.grpc.GrpcClient;\n"
"import io.quarkus.grpc.RegisterClientInterceptor;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:332
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class MyBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:337
#, no-wrap
msgid ""
"    @RegisterClientInterceptor(MySpecialInterceptor.class) <1>\n"
"    @GrpcClient(\"helloService\")\n"
"    Greeter greeter;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:339
#, fuzzy
msgid "Registers the `MySpecialInterceptor` for this particular client."
msgstr "为这个特定的客户注册 `MySpecialInterceptor` 。"

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:341
msgid "When you have multiple client interceptors, you can order them by implementing the `javax.enterprise.inject.spi.Prioritized` interface:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:346
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyInterceptor implements ClientInterceptor, Prioritized {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:352
#, no-wrap
msgid ""
"    @Override\n"
"    public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(MethodDescriptor<ReqT, RespT> method,\n"
"            CallOptions callOptions, Channel next) {\n"
"       // ...\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:358
#, no-wrap
msgid ""
"    @Override\n"
"    public int getPriority() {\n"
"        return 10;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:362
msgid "Interceptors with the highest priority are called first.  The default priority, used if the interceptor does not implement the `Prioritized` interface, is `0`."
msgstr ""

#. type: Title ==
#: upstream/_guides/grpc-service-consumption.adoc:363
#, no-wrap
msgid "gRPC Client metrics"
msgstr ""

#. type: Title ===
#: upstream/_guides/grpc-service-consumption.adoc:365
#, no-wrap
msgid "Enabling metrics collection"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:369
msgid "gRPC client metrics are automatically enabled when the application also uses the xref:micrometer.adoc[`quarkus-micrometer`] extension.  Micrometer collects the metrics of all the gRPC clients used by the application."
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:371
msgid "As an example, if you export the metrics to Prometheus, you will get:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:387
#, no-wrap
msgid ""
"# HELP grpc_client_responses_received_messages_total The total number of responses received\n"
"# TYPE grpc_client_responses_received_messages_total counter\n"
"grpc_client_responses_received_messages_total{method=\"SayHello\",methodType=\"UNARY\",service=\"helloworld.Greeter\",} 6.0\n"
"# HELP grpc_client_requests_sent_messages_total The total number of requests sent\n"
"# TYPE grpc_client_requests_sent_messages_total counter\n"
"grpc_client_requests_sent_messages_total{method=\"SayHello\",methodType=\"UNARY\",service=\"helloworld.Greeter\",} 6.0\n"
"# HELP grpc_client_processing_duration_seconds The total time taken for the client to complete the call, including network delay\n"
"# TYPE grpc_client_processing_duration_seconds summary\n"
"grpc_client_processing_duration_seconds_count{method=\"SayHello\",methodType=\"UNARY\",service=\"helloworld.Greeter\",statusCode=\"OK\",} 6.0\n"
"grpc_client_processing_duration_seconds_sum{method=\"SayHello\",methodType=\"UNARY\",service=\"helloworld.Greeter\",statusCode=\"OK\",} 0.167411625\n"
"# HELP grpc_client_processing_duration_seconds_max The total time taken for the client to complete the call, including network delay\n"
"# TYPE grpc_client_processing_duration_seconds_max gauge\n"
"grpc_client_processing_duration_seconds_max{method=\"SayHello\",methodType=\"UNARY\",service=\"helloworld.Greeter\",statusCode=\"OK\",} 0.136478028\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:390
msgid "The service name, method and type can be found in the _tags_."
msgstr ""

#. type: Title ===
#: upstream/_guides/grpc-service-consumption.adoc:391
#, no-wrap
msgid "Disabling metrics collection"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-service-consumption.adoc:394
msgid "To disable the gRPC client metrics when `quarkus-micrometer` is used, add the following property to the application configuration:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-service-consumption.adoc:398
#, no-wrap
msgid "quarkus.micrometer.binder.grpc-client.enabled=false\n"
msgstr ""
