msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _guides/observability-devservices.adoc
#, fuzzy
msgid "Observability Dev Services"
msgstr "可观察性开发服务"

#: _guides/observability-devservices.adoc
#, fuzzy
msgid "We are already familiar with xref:dev-services.adoc[Dev Service] concept, but in the case of Observability we need a way to orchestrate and connect more than a single dev service, usually a whole stack of them; e.g. a metrics agent periodically scraping application for metrics, pushing them into timeseries database, and Grafana feeding graphs of this timeseries data."
msgstr "我们已经熟悉 xref:dev-services.adoc[开发服务] 的概念，但在 Observability 的情况下，我们需要一种方法来协调和连接不止一个开发服务，通常是一整套开发服务；例如，一个度量代理定期刮查应用程序的度量值，并将其推送到时间序列数据库，然后 Grafana 将这些时间序列数据绘制成图表。"

#: _guides/observability-devservices.adoc
#, fuzzy
msgid "With this in mind, we added a new concept of Dev Resource, an adapter between Dev Service concept and https://testcontainers.com/[Testcontainers]. And since we now have fine-grained services - with the Dev Resource per container, we can take this even further, allowing the user to choose the way to use this new Dev Resource concept:"
msgstr "有鉴于此，我们添加了一个新的 Dev Resource 概念，它是 Dev Service 概念和 link:https://testcontainers.com/[Testcontainers] 之间的适配器。由于我们现在有了细粒度的服务--每个容器都有 Dev Resource，因此我们可以更进一步，允许用户选择使用这一新的 Dev Resource 概念的方式："

#: _guides/observability-devservices.adoc
#, fuzzy
msgid "Each Dev Resource implementation is an `@QuarkusTestResourceLifecycleManager` implementation as well"
msgstr "每个开发资源实施也是一个 `@QuarkusTestResourceLifecycleManager` 实施"

#: _guides/observability-devservices.adoc
#, fuzzy
msgid "leave it to Dev Services to pick-up various Dev Resources from classpath, and apply xref:dev-services.adoc[Dev Service] concept to it"
msgstr "让开发服务从类路径中获取各种开发资源，并将 xref:dev-services.adoc[开发服务] 概念应用于其中"

#: _guides/observability-devservices.adoc
#, fuzzy
msgid "explicitly disable Dev Services and enable Dev Resources and use less-heavy concept of starting and stopping Dev Resources"
msgstr "明确禁用开发服务，启用开发资源，并使用较轻的启动和停止开发资源的概念"

#: _guides/observability-devservices.adoc
#, fuzzy
msgid "explicitly disable both Dev Services and Dev Resources, and use Quarkus' `@QuarkusTestResource` testing concept (see Note)"
msgstr "明确禁用开发服务和开发资源，并使用 Quarkus 的 `@QuarkusTestResource` 测试概念（参见注释）"

#: _guides/observability-devservices.adoc
#, fuzzy
msgid "You can either add Observability extension dependency along with needed Dev Resources dependencies, or you use existing `sinks` - pom.xml files which add Observability extension dependency along with other required dependencies for certain technology stacks; e.g. `victoriametrics` sink would have `quarkus-observability-devresource-victoriametrics` and `quarkus-victoriametrics-client` dependencies already included in the `pom.xml`."
msgstr "您可以在添加所需的开发资源依赖项的同时添加 Observability 扩展依赖项，也可以使用现有的 `sinks` - pom.xml 文件，这些文件在添加 Observability 扩展依赖项的同时也添加了某些技术栈所需的其他依赖项；例如， `victoriametrics` sink 的 `pom.xml` 中已经包含 `quarkus-observability-devresource-victoriametrics` 和 `quarkus-victoriametrics-client` 依赖项。"

#: _guides/observability-devservices.adoc
#, fuzzy
msgid "Make sure you set the `scope` of these sink dependencies to `provided`, otherwise libraries such as Testcontainers will end-up in your app's production libraries:"
msgstr "请确保将这些汇依赖项的 `scope` 设置为 `provided` ，否则 Testcontainers 等库最终会出现在应用程序的生产库中："

#: _guides/observability-devservices.adoc
#, fuzzy
msgid "Let's see how all of this looks in practice, with the usual `all-in-one` Grafana usage, in the form of https://github.com/grafana/docker-otel-lgtm[OTel-LGTM] Docker image."
msgstr "让我们通过 `all-in-one` Grafana 的常规用法，以 link:https://github.com/grafana/docker-otel-lgtm[OTel-LGTM] Docker 镜像的形式来看看所有这些在实践中是如何体现的。"

#: _guides/observability-devservices.adoc
#, fuzzy
msgid "xref:observability-devservices-lgtm.adoc[Getting Started with Grafana-OTel-LGTM]"
msgstr "xref:observability-devservices-lgtm.adoc[开始使用 Grafana-OTel-LGTM]"
