# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-05-25 16:16+0000\n"
"PO-Revision-Date: 2022-06-01 22:08+0800\n"
"Last-Translator: stop <authabc@163.com>\n"
"Language-Team: \n"
"Language: zh\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/vertx.adoc:6
#, no-wrap
msgid "Using Eclipse Vert.x API from a Quarkus Application"
msgstr "在Quarkus应用程序中使用Eclipse Vert.x API"

#. type: Plain text
#: upstream/_guides/vertx.adoc:12
msgid "https://vertx.io[Vert.x] is a toolkit for building reactive applications.  As described in the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture], Quarkus uses Vert.x underneath."
msgstr "link:https://vertx.io[Vert.x] 是一个用于构建响应式应用程序的工具集。正如 link:quarkus-reactive-architecture.html[Quarkus响应式架构] 中所描述的，下面，Quarkus将使用Vert.x。"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/vertx.adoc:13
#, no-wrap
msgid "Quarkus Reactive Core"
msgstr "Quarkus 响应式核心"

#. type: Target for macro image
#: upstream/_guides/vertx.adoc:13
#, no-wrap
msgid "quarkus-reactive-core.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:16
msgid "Quarkus applications can access and use the Vert.x APIs."
msgstr "Quarkus应用程序能够访问和使用Vert.x APIs。"

#. type: Plain text
#: upstream/_guides/vertx.adoc:18
msgid "This guide presents how you can build a Quarkus application using:"
msgstr "该指南介绍如何使用以下方法构建 Quarkus 应用程序:"

#. type: Plain text
#: upstream/_guides/vertx.adoc:20
msgid "the managed instance of Vert.x"
msgstr "被管理的 Vert.x 实例"

#. type: Plain text
#: upstream/_guides/vertx.adoc:21
msgid "the Vert.x event bus"
msgstr "Vert.x 事件总线"

#. type: Plain text
#: upstream/_guides/vertx.adoc:22
msgid "the Vert.x Web Client"
msgstr "Vert.x 网络客户端"

#. type: Plain text
#: upstream/_guides/vertx.adoc:25
msgid "It's an introductory guide.  The xref:vertx-reference.adoc[Vert.x reference guide] covers more advanced features such as verticles, and native transports."
msgstr "这是一项介绍性的指南。 link:vertx-reference.html[Vert.x参考指南] 涵盖了更多的高级功能，例如 verticles 和 本地传输 (native transports) 。"

#. type: Title ==
#: upstream/_guides/vertx.adoc:26
#, no-wrap
msgid "Architecture"
msgstr "架构"

#. type: Plain text
#: upstream/_guides/vertx.adoc:29
msgid "We are going to build a simple application exposing four HTTP endpoints:"
msgstr "我们将构建一个简单应用程序 它包含四个暴露出的端点:"

#. type: Plain text
#: upstream/_guides/vertx.adoc:31
msgid "`/vertx/lorem` returns the content from a small file"
msgstr "`/vertx/lorem` 返回一个小文件的内容"

#. type: Plain text
#: upstream/_guides/vertx.adoc:32
msgid "`/vertx/book` returns the content from a large file (a book)"
msgstr "`/vertx/book` 返回一个大文件的内容（一本书）"

#. type: Plain text
#: upstream/_guides/vertx.adoc:33
msgid "`/vertx/hello` uses the Vert.x event bus to produce the response"
msgstr "`/vertx/hello` 使用Vert.x事件总线来生成响应"

#. type: Plain text
#: upstream/_guides/vertx.adoc:34
msgid "`/vertx/web` uses the Vert.x Web Client to retrieve data from Wikipedia"
msgstr "`/vertx/web` 使用Vert.x Web客户端从维基百科中检索数据"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/vertx.adoc:35
#, no-wrap
msgid "Architecture of the Vert.x guide"
msgstr "Vert.x指南架构"

#. type: Target for macro image
#: upstream/_guides/vertx.adoc:35
#, no-wrap
msgid "quarkus-vertx-guide-architecture.png"
msgstr ""

#. type: Title ==
#: upstream/_guides/vertx.adoc:37
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_guides/vertx.adoc:41
msgid "We recommend that you follow the instructions in the following sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议你按照下一节的说明逐步创建应用程序。然而，你也可以直接转到已完成的示例。"

#. type: Plain text
#: upstream/_guides/vertx.adoc:43
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或者下载一个 {quickstarts-archive-url}[存档]。"

#. type: Plain text
#: upstream/_guides/vertx.adoc:45
msgid "The solution is located in the `vertx-quickstart` {quickstarts-tree-url}/vertx-quickstart[directory]."
msgstr "该解决方案位于 `vertx-quickstart` {quickstarts-tree-url}/vertx-quickstart[目录]中。"

#. type: Block title
#: upstream/_guides/vertx.adoc:47
#, no-wrap
msgid "Mutiny"
msgstr ""

#. type: delimited block =
#: upstream/_guides/vertx.adoc:51
msgid "This guide uses the Mutiny API.  If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive, reactive programming library]."
msgstr "该指南使用Mutiny API。如果你不熟悉Mutiny，请查看 link:mutiny-primer.html[Mutiny - 一个直观的、响应式的编程库] 。"

#. type: Title ==
#: upstream/_guides/vertx.adoc:54
#, no-wrap
msgid "Bootstrapping the application"
msgstr "引导启动该应用程序"

#. type: Plain text
#: upstream/_guides/vertx.adoc:58
msgid "Click on https://code.quarkus.io/?a=quarkus-getting-started-vertx&nc=true&e=resteasy-reactive-jackson&e=vertx[this link] to configure your application.  It selected a few extensions:"
msgstr "点击 link:https://code.quarkus.io/?a=quarkus-getting-started-vertx&nc=true&e=resteasy-reactive-jackson&e=vertx[这个链接] 来配置你的应用程序。它选择了几个扩展:"

#. type: Plain text
#: upstream/_guides/vertx.adoc:60
msgid "`resteasy-reactive-jackson`, which also brings `resteasy-reactive`. We are going to use it to expose our HTTP endpoints."
msgstr "`resteasy-reactive-jackson` ，它也带来了 `resteasy-reactive` 。我们将使用它来暴露出我们的HTTP端点。"

#. type: Plain text
#: upstream/_guides/vertx.adoc:61
msgid "`vertx`, which provides access to the underlying managed Vert.x"
msgstr "`vertx` ，它提供了对底层管理的Vert.x的访问"

#. type: Plain text
#: upstream/_guides/vertx.adoc:64
msgid "Click on the `Generate your application` button, download the zip file and unzip it.  Then, open the project in your favorite IDE."
msgstr "点击 `生成你的应用程序` 按钮，下载压缩文件并解压。然后，在你喜欢的编辑器中打开该项目。"

#. type: Plain text
#: upstream/_guides/vertx.adoc:66
msgid "If you open the generated build file, you can see the selected extensions:"
msgstr "如果你打开生成的构建文件，你可以看到以下选定的扩展:"

#. type: Block title
#: upstream/_guides/vertx.adoc:68 upstream/_guides/vertx.adoc:90
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:78
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-resteasy-reactive-jackson</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-vertx</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/vertx.adoc:81 upstream/_guides/vertx.adoc:99
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:85
#, no-wrap
msgid ""
"implementation(\"io.quarkus:quarkus-resteasy-reactive-jackson\")\n"
"implementation(\"io.quarkus:quarkus-vertx\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:88
msgid "While you are in your build file, add the following dependency:"
msgstr "在你的构建文件中，添加以下依赖项:"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:96
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.smallrye.reactive</groupId>\n"
"  <artifactId>smallrye-mutiny-vertx-web-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:102
#, no-wrap
msgid "implementation(\"io.smallrye.reactive:smallrye-mutiny-vertx-web-client\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:105
msgid "This dependency provides the Vert.x Web Client, which we will be using to implement the `/web` endpoint."
msgstr "该依赖项提供了Vert.x Web客户端，我们将用它来实现 `/web` 端点。"

#. type: Title ==
#: upstream/_guides/vertx.adoc:107
#, no-wrap
msgid "Accessing the managed Vert.x instance"
msgstr "访问被管理的Vert.x实例"

#. type: Plain text
#: upstream/_guides/vertx.adoc:111
msgid "Create the `src/main/java/org/acme/VertxResource.java` file.  It will contain our HTTP endpoints."
msgstr "创建 `src/main/java/org/acme/VertxResource.java` 文件。它将包含我们的HTTP端点。"

#. type: Plain text
#: upstream/_guides/vertx.adoc:113
msgid "In this file, copy the following code:"
msgstr "在该文件中，拷贝以下代码:"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:117
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:119
#, no-wrap
msgid "import io.vertx.mutiny.core.Vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:122
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:125
#, no-wrap
msgid ""
"@Path(\"/vertx\")                        // <1>\n"
"public class VertxResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:127
#, no-wrap
msgid "    private final Vertx vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:133
#, no-wrap
msgid ""
"    @Inject                             // <2>\n"
"    public VertxResource(Vertx vertx) { // <3>\n"
"        this.vertx = vertx;             // <4>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:135
msgid "Declare the root HTTP path."
msgstr "声明HTTP根路径。"

#. type: Plain text
#: upstream/_guides/vertx.adoc:136
msgid "We use constructor injection to receive the managed Vert.x instance. Field injection works too."
msgstr "我们使用构造函数注入的方式来接收被管理的Vert.x实例。当然 字段注入也被允许。"

#. type: Plain text
#: upstream/_guides/vertx.adoc:137
msgid "Receives the Vert.x instance as a constructor parameter"
msgstr "接收Vert.x实例作为构造函数的参数"

#. type: Plain text
#: upstream/_guides/vertx.adoc:138
msgid "Store the managed Vert.x instance into a field."
msgstr "将被管理的Vert.x实例存储到一个字段当中。"

#. type: Plain text
#: upstream/_guides/vertx.adoc:140
msgid "With this, we can start implementing the endpoints."
msgstr "有了这些，我们就可以开始实现端点了。"

#. type: Title ==
#: upstream/_guides/vertx.adoc:141
#, no-wrap
msgid "Using Vert.x Core API"
msgstr "使用Vert.x核心API"

#. type: Plain text
#: upstream/_guides/vertx.adoc:146
msgid "The injected Vert.x instance provides a set of APIs you can use.  The one we are going to use in this section is the Vert.x File System.  It provides a non-blocking API to access files."
msgstr "被注入的Vert.x实例提供了一组你可以使用的API。我们在本节中要使用的是Vert.x文件系统。它提供了一个非阻塞的API来访问文件。"

#. type: Plain text
#: upstream/_guides/vertx.adoc:149
msgid "In the `src/main/resource` directory, create a `lorem.txt` file with the following content:"
msgstr "在 `src/main/resource` 目录中，创建一个包含以下内容的 `lorem.txt` 文件:"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:153
#, no-wrap
msgid "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:156
msgid "Then, in the `VertxResource` file add the following method:"
msgstr "接着，在 `VertxResource` 文件中添加以下方法:"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:165
#, no-wrap
msgid ""
"@GET                                                                                   // <1>\n"
"@Path(\"/lorem\")\n"
"public Uni<String> readShortFile() {                                                   // <2>\n"
"    return vertx.fileSystem().readFile(\"lorem.txt\")                                    // <3>\n"
"            .onItem().transform(content -> content.toString(StandardCharsets.UTF_8));  // <4>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:167
msgid "This endpoint handles HTTP `GET` request on path `/lorem` (so the full path will be `vertx/lorem`)"
msgstr "该端点处理路径 `/lorem` 上的 HTTP `GET` 请求（因此完整路径是 `vertx/lorem` ）"

#. type: Plain text
#: upstream/_guides/vertx.adoc:168
msgid "As the Vert.x API is asynchronous, our method returns a `Uni`. The content is written into the HTTP response when the asynchronous operation represented by the Uni completes."
msgstr "由于Vert.x API是异步的，我们的方法返回一个 `Uni` 对象 。当Uni所代表的异步操作完成后，内容将会被写入HTTP响应中。"

#. type: Plain text
#: upstream/_guides/vertx.adoc:169
msgid "We use the Vert.x file system API to read the created file"
msgstr "我们使用Vert.x文件系统API来读取创建的文件"

#. type: Plain text
#: upstream/_guides/vertx.adoc:170
msgid "Once the file is read, the content is stored in an in-memory buffer.  We transform this buffer into a String."
msgstr "一旦文件被读取，其内容就被存储在一个内存缓冲区内。我们将这个缓冲区的内容转换为一个字符串。"

#. type: Plain text
#: upstream/_guides/vertx.adoc:172
msgid "In a terminal, navigate to the root of the project and run:"
msgstr "在终端中，切换到项目根目录下 运行以下命令:"

#. type: Plain text
#: upstream/_guides/vertx.adoc:176
msgid "In another terminal, run:"
msgstr "在另外一个终端中，运行:"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:180
#, no-wrap
msgid "> curl http://localhost:8080/vertx/lorem\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:183
msgid "You should see the content of the file printed in the console."
msgstr "你应该会在控制台中看到打印的文件内容。"

#. type: Plain text
#: upstream/_guides/vertx.adoc:185
msgid "Quarkus provides other ways to serve static files. This is an example made for the guide."
msgstr "Quarkus提供了其他方式来处理静态文件。这是专为该指南制作的一个例子。"

#. type: Title ==
#: upstream/_guides/vertx.adoc:186
#, no-wrap
msgid "Using Vert.x stream capability"
msgstr "使用Vert.x流的功能"

#. type: Plain text
#: upstream/_guides/vertx.adoc:190
msgid "Reading a file and storing the content in memory works for small files, but not big ones.  In this section, we will see how you can use Vert.x streaming capability."
msgstr "读取文件并将内容存储在内存中适用于小文件，但不适用于大文件。在本节中，我们将带领你了解如何使用 Vert.x 流功能。"

#. type: Plain text
#: upstream/_guides/vertx.adoc:194
msgid "First, download https://www.gutenberg.org/files/2600/2600-0.txt[War and Peace] and store it in `src/main/resources/book.txt`.  It's a 3.2 Mb file, which, while not being huge, illustrates the purpose of streams.  This time, we will not accumulate the file's content in memory and write it in one batch, but read it chunk by chunk and write these chunks into the HTTP response one by one."
msgstr "首先，下载 link:https://www.gutenberg.org/files/2600/2600-0.txt[《战争与和平] 》，并将其存储在 `src/main/resources/book.txt` 。这是一个3.2Mb的文件，虽然不是很大，但说明了流的用途。这一次，我们将不会把文件的内容堆积在内存中并一次性写入，而是逐块读取，并把这些块逐一写入到HTTP响应中。"

#. type: Plain text
#: upstream/_guides/vertx.adoc:196
msgid "So, you should have the following files in your project:"
msgstr "因此，你的项目中应该包含以下文件:"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:217
#, no-wrap
msgid ""
".\n"
"├── mvnw\n"
"├── mvnw.cmd\n"
"├── pom.xml\n"
"├── README.md\n"
"├── src\n"
"│  └── main\n"
"│     ├── docker\n"
"│     │  ├── ...\n"
"│     ├── java\n"
"│     │  └── org\n"
"│     │     └── acme\n"
"│     │        └── VertxResource.java\n"
"│     └── resources\n"
"│        ├── application.properties\n"
"│        ├── book.txt\n"
"│        └── lorem.txt\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:220
msgid "Add the following method to the `VertxResource` class:"
msgstr "将以下方法添加到 `VertxResource` 类中:"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:233
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/book\")\n"
"public Multi<String> readLargeFile() {                                               // <1>\n"
"    return vertx.fileSystem().open(\"book.txt\",                                       // <2>\n"
"                    new OpenOptions().setRead(true)\n"
"            )\n"
"            .onItem().transformToMulti(file -> file.toMulti())                       // <3>\n"
"            .onItem().transform(content -> content.toString(StandardCharsets.UTF_8) // <4>\n"
"                    + \"\\n------------\\n\");                                           // <5>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:235
msgid "This time, we return a Multi as we want to stream the chunks"
msgstr "这一次，我们返回一个Multi类型的对象，因为我们想要流式地处理这些块"

#. type: Plain text
#: upstream/_guides/vertx.adoc:236
msgid "We open the file using the `open` method. It returns a `Uni<AsyncFile>`"
msgstr "我们使用 `open` 方法打开该文件。它返回一个 `Uni<AsyncFile>` 类型的对象"

#. type: Plain text
#: upstream/_guides/vertx.adoc:237
msgid "When the file is opened, we retrieve a `Multi` which will contain the chunks."
msgstr "当文件被打开时，我们获得到一个 `Multi` ，它包含了块的内容。"

#. type: Plain text
#: upstream/_guides/vertx.adoc:238
msgid "For each chunk, we produce a String"
msgstr "对于每个块，我们生成一个字符串"

#. type: Plain text
#: upstream/_guides/vertx.adoc:239
msgid "To visually see the chunks in the response, we append a separator"
msgstr "为了直观地看到响应中的分块，我们添加了一个分隔符"

#. type: Plain text
#: upstream/_guides/vertx.adoc:241
msgid "Then, in a terminal, run:"
msgstr "接着，在终端中，运行以下命令:"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:245
#, no-wrap
msgid "> curl http://localhost:8080/vertx/book\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:249
msgid "It should retrieve the book content.  In the output you should see the separator like:"
msgstr "它应该获取到书籍的内容。在输出中，你应该会看到像这样包含分隔符的内容:"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:254
#, no-wrap
msgid ""
"...\n"
"The little princess had also left the tea table and followed Hélène.\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:256
#, no-wrap
msgid "“Wait a moment, I’ll get my work.... Now then, what\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:261
#, no-wrap
msgid ""
" are you\n"
"thinking of?” she went on, turning to Prince Hippolyte. “Fetch me my\n"
"workbag.”\n"
"...\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/vertx.adoc:263
#, no-wrap
msgid "Using the event bus"
msgstr "使用事件总线"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:273
msgid "One of the core features of Vert.x is the https://vertx.io/docs/vertx-core/java/#event_bus[event bus].  It provides a message-based backbone to your application.  So, you can have components interacting using asynchronous message passing, and so decouple your components.  You can send a message to a single consumer, or dispatch to multiple consumers, or implement a request-reply interaction, where you send a message (request) and expect a response.  This is what we are going to use in this section.  Our `VertxResource` will send a message containing a name to the `greetings` address.  Another component will receive the message and produce the \"hello $name\" response.  The `VertxResource` will receive the response and return it as the HTTP response."
msgstr "Vert.x 的核心特点之一是 https://vertx.io/docs/vertx-core/java/#event_bus[事件总线]。它为你的应用程序提供了基于消息的主干。因此，你可以使用异步消息传递的方式在组件之间进行交互，并且将你的组件解耦。您可以向单个消费者发送消息，或分派给多个消费者，亦或是实现请求-响应的交互，在其中发送消息（请求）并期许响应。这是我们将在本节中使用的内容。我们的 `VertxResource`  将向问候地址发送一条包含姓名的消息。另一个组件将会接收到这条消息并生成 \"hello $name\" 的响应。 `VertxResource` 将收到响应并将其作为 HTTP 响应进行返回。"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:275
msgid "So, first, let's extend our `VertxResource` class with the following code:"
msgstr "因此，首先，让我们使用以下代码来扩展我们的 `VertxResource` 类:"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:278 upstream/_guides/vertx.adoc:348
msgid "[source, java]"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:281
#, no-wrap
msgid ""
"@Inject\n"
"EventBus bus;                                                   // <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:288
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/hello\")\n"
"public Uni<String> hello(@QueryParam(\"name\") String name) {     // <2>\n"
"    return bus.<String>request(\"greetings\", name)               // <3>\n"
"            .onItem().transform(response -> response.body());   // <4>\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:293
#, no-wrap
msgid ""
"<1> Inject the event bus. Alternatively you can use `vertx.eventBus()`.\n"
"<2> We receive a _name_ as a query parameter\n"
"<3> We use the `request` method to initiate the request-reply interaction. We send the name to the \"greetings\" address.\n"
"<4> When the response is received, we extract the body and return it as the HTTP response\n"
msgstr ""
"<1> 注入事件总线。或者你可以使用 `vertx.eventBus()` \n"
"<2> 我们接收到一个姓名作为查询参数 \n"
"<3> 我们使用 `request` 方法来发起请求-回复的交互。我们将姓名发送到 \"greetings\" 地址 \n"
"<4> 收到响应后，我们提取正文并将其作为 HTTP 响应进行返回 \n"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:296
#, no-wrap
msgid ""
"Now, we need the other side: the component receiving the name and replying.\n"
"Create the `src/main/java/org/acme/GreetingService.java` file with the following content:\n"
msgstr ""
"现在，我们需要另一侧: 接收姓名并回复的组件。\n"
"使用以下内容创建 `src/main/java/org/acme/GreetingService.java` 文件:\n"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:298 upstream/_guides/vertx.adoc:365
#, no-wrap
msgid "[source, java]\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:300
msgid "package org.acme;"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:302
msgid "import io.quarkus.vertx.ConsumeEvent;"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:304
msgid "import javax.enterprise.context.ApplicationScoped;"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:307
#, no-wrap
msgid ""
"@ApplicationScoped                          // <1>\n"
"public class GreetingService {\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:313
#, no-wrap
msgid ""
"    @ConsumeEvent(\"greetings\")              // <2>\n"
"    public String hello(String name) {      // <3>\n"
"        return \"Hello \" + name;             // <4>\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:318
#, no-wrap
msgid ""
"<1> Declaring a CDI Bean in the Application scope. Quarkus will create a single instance of this class.\n"
"<2> Use the `@ConsumeEvent` annotation to declare a consumer. It is possible to use the Vert.x API https://vertx.io/docs/vertx-core/java/#_acknowledging_messages_sending_replies[directly] too.\n"
"<3> Receive the message payload as a method parameter. The returned object will be the reply.\n"
"<4> Return the response. This response is sent back to the `VertxResource` class\n"
msgstr ""
"<1> 以 Application scope 声明一个 CDI Bean。 Quarkus 将会为此类创建一个单实例对象。\n"
"<2> 使用 `@ConsumeEvent` 注解声明一个消费者. 你也可以直接使用 Vert.x API https://vertx.io/docs/vertx-core/java/#_acknowledging_messages_sending_replies[directly] 。\n"
"<3> 接收消息负载作为方法的参数。返回的对象将会被作为回复。\n"
"<4> 返回该响应。该响应将会被发送回 `VertxResource` 类\n"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:321
#, no-wrap
msgid ""
"Let's try this.\n"
"In a terminal, run:\n"
msgstr ""
"让我们试试这个。\n"
"在终端中，运行以下命令:\n"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:324 upstream/_guides/vertx.adoc:385
#, no-wrap
msgid "[source, bash]\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:326
msgid "curl \"http://localhost:8080/vertx/hello?name=bob\""
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:329
#, no-wrap
msgid "You should get the expected `Hello bob` message back.\n"
msgstr "你应该会收到预期的 `Hello bob` 消息。\n"

#. type: Title ==
#: upstream/_guides/vertx.adoc:330
#, no-wrap
msgid "Using Vert.x Clients"
msgstr "使用Vert.x客户端"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:336
msgid "So far, we have used the Vert.x Core API.  Vert.x offers much more.  It provides a vast ecosystem.  In this section, we will see how you can use the Vert.x Web Client, a reactive HTTP client."
msgstr "到目前为止，我们已经使用了 Vert.x 核心 API。 Vert.x 提供的不仅仅是这些。它提供了一个广阔的生态系统。在本节中，我们将会带你了解如何使用 Vert.x Web 客户端 - 一个响应式 HTTP 客户端。"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:340
msgid "Note that some Quarkus extensions are wrapping Vert.x clients and manage them for you.  That's the case for the reactive data sources, Redis, mail...  That's not the case with the Web Client."
msgstr "注意，部分 Quarkus 扩展正在封装 Vert.x 客户端并为您管理它们。如响应式数据源、Redis、邮件等...  但Web 客户端，并不在此行列之内。"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:343
msgid "Remember, at the beginning of the guide, we added the `smallrye-mutiny-vertx-web-client` dependency to our `pom.xml` file.  It's now time to use it."
msgstr "请记住，在本指南的开头，我们将 `smallrye-mutiny-vertx-web-client` 作为依赖项添加到了我们的 pom.xml 文件中。现在，是时候使用它了。"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:346
msgid "First, we need to create an instance of `WebClient`.  Extend the `VertxResource` class with the `client` field and the creation of the web client in the constructor:"
msgstr "首先，我们需要创建一个 `WebClient` 的实例。使用 client 字段扩展 `VertxResource` 类并在构造函数中创建 Web 客户端:"

#. type: Plain text
#: upstream/_guides/vertx.adoc:351
#, no-wrap
msgid ""
"private final Vertx vertx;\n"
"private final WebClient client;            // <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:357
#, no-wrap
msgid ""
"@Inject\n"
"public VertxResource(Vertx vertx) {\n"
"    this.vertx = vertx;\n"
"    this.client = WebClient.create(vertx); // <2>\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:360
#, no-wrap
msgid ""
"<1> Store the `WebClient`, so we will be able to use it in our HTTP endpoint\n"
"<2> Create the `WebClient`. Be sure to use the `io.vertx.mutiny.ext.web.client.WebClient` class\n"
msgstr ""
"<1> 存储 `WebClient`，以便我们在 HTTP 端点中使用它\n"
"<2> 创建 `WebClient`。确保使用 `io.vertx.mutiny.ext.web.client.WebClient` 类\n"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:363
#, no-wrap
msgid ""
"Let's now implement a new HTTP endpoint that queries the Wikipedia API to retrieve the pages about Quarkus in the different languages.\n"
"Add the following method to the `VertxResource` class:\n"
msgstr ""
"现在，让我们实现一个新的 HTTP 端点，它通过查询 Wikipedia API 以检索不同语言有关 Quarkus 的页面。\n"
"将以下方法添加到 `VertxResource` 类中:\n"

#. type: Plain text
#: upstream/_guides/vertx.adoc:367
msgid "private static final String URL = \"https://en.wikipedia.org/w/api.php?action=parse&page=Quarkus&format=json&prop=langlinks\";"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:376
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/web\")\n"
"public Uni<JsonArray> retrieveDataFromWikipedia() {                     // <1>\n"
"    return client.getAbs(URL).send()                                    // <2>\n"
"            .onItem().transform(HttpResponse::bodyAsJsonObject)         // <3>\n"
"            .onItem().transform(json -> json.getJsonObject(\"parse\")     // <4>\n"
"                                        .getJsonArray(\"langlinks\"));\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:381
#, no-wrap
msgid ""
"<1> This endpoint returns a JSON Array. Vert.x provides a convenient way to manipulate JSON Object and Array. More details about these in xref:vertx-reference.adoc#using-vert-x-json[the reference guide].\n"
"<2> Send a `GET` request to the Wikipedia API\n"
"<3> Once the response is received, extract it as a JSON Object\n"
"<4> Extract the `langlinks` array from the response.\n"
msgstr ""
"<1> 该端点返回一个 JSON 数组。Vert.x 提供了一种便捷的方式来操作 JSON 对象和数组。 有关这些的更多详细信息，请参阅 xref:vertx-reference.adoc#using-vert-x-json[参考指南] \n"
"<2> 向 Wikipedia API 发送 `GET` 请求 \n"
"<3> 收到响应后，将其提取为 JSON 对象 \n"
"<4> 从响应中提取 `langlinks` 数组 \n"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:383
#, no-wrap
msgid "Then, invoke the endpoint using:\n"
msgstr "接着，使用以下命令请求该端点:\n"

#. type: Plain text
#: upstream/_guides/vertx.adoc:387
msgid "curl http://localhost:8080/vertx/web"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:391
#, no-wrap
msgid "The response indicates that, in addition to the English page, there are a German and a French page about Quarkus on wikipedia.\n"
msgstr "该响应表明，除了英文页面，维基百科上还有关于 Quarkus 的德文和法文页面。\n"

#. type: Title ==
#: upstream/_guides/vertx.adoc:392
#, no-wrap
msgid "Going further"
msgstr "进一步探索"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:397
msgid "This guide introduced how you can use Vert.x APIs from a Quarkus application.  It's just a brief overview.  If you want to know more, check the xref:vertx-reference.adoc[reference guide about Vert.x in Quarkus]."
msgstr "本指南介绍了如何在 Quarkus 应用程序中使用 Vert.x API。这只是一个简短的概述。如果你想了解更多信息，请查看 xref:vertx-reference.adoc[Quarkus 中有关 Vert.x 的参考指南]。"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:401
msgid "As we have seen, the event bus is the connecting tissue of Vert.x applications.  Quarkus integrates it so different beans can interact with asynchronous messages.  This part is covered in the xref:reactive-event-bus.adoc[event bus documentation]."
msgstr "正如我们所见，事件总线是 Vert.x 应用程序之间的连接桥梁。 Quarkus 集成了它，因此不同的bean之间能够以异步消息的方式进行交互。这部分内容包含在 xref:reactive-event-bus.adoc[事件总线文档] 中。"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:402
msgid "Learn how to implement highly performant, low-overhead database applications on Quarkus with the xref:reactive-sql-clients.adoc[Reactive SQL Clients]."
msgstr "了解如何使用 xref:reactive-sql-clients.adoc[响应式SQL客户端] 在 Quarkus 上实现高性能、低开销的数据库应用程序。"
