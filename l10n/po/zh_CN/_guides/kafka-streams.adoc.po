# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-25 13:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _guides/kafka-streams.adoc
#, no-wrap
msgid "Using Apache Kafka Streams"
msgstr "使用Apache Kafka Streams"

#. type: Plain text
#: _guides/kafka-streams.adoc
msgid "This guide demonstrates how your Quarkus application can utilize the Apache Kafka Streams API to implement stream processing applications based on Apache Kafka."
msgstr "本指南展示了你的Quarkus应用如何利用Apache Kafka Streams API来实现基于Apache Kafka的流处理应用。"

#. type: Title ==
#: _guides/kafka-streams.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "It is recommended, that you have read the link:{quickstarts-tree-url}/kafka-quickstart[Kafka quickstart] before."
msgstr "建议你之前阅读过{quickstarts-tree-url}/kafka-quickstart[Kafka快速入门]。"

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"The Quarkus extension for Kafka Streams allows for very fast turnaround times during development by supporting the Quarkus Dev Mode (e.g. via `./mvnw compile quarkus:dev`).\n"
"After changing the code of your Kafka Streams topology, the application will automatically be reloaded when the next input message arrives."
msgstr "用于 Kafka Streams 的 Quarkus 扩展通过支持 Quarkus Dev Mode（例如通过 `./mvnw compile quarkus:dev` ），可以在开发过程中实现非常快的周转时间。更改 Kafka Streams 拓扑代码后，应用程序将在下一条输入消息到达时自动重新加载。"

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"A recommended development set-up is to have some producer which creates test messages on the processed topic(s) in fixed intervals, e.g. every second and observe the streaming application's output topic(s) using a tool such as `kafkacat`.\n"
"Using the dev mode, you'll instantly see messages on the output topic(s) as produced by the latest version of your streaming application when saving."
msgstr "推荐的开发设置是使用一些生产者，以固定间隔（如每秒）在处理过的主题上创建测试消息，并使用 `kafkacat` 等工具观察流应用程序的输出主题。使用开发模式，您可以在保存时立即看到最新版本的流媒体应用程序在输出主题上生成的消息。"

#. type: delimited block =
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "For the best development experience, we recommend applying the following configuration settings to your Kafka broker:"
msgstr "为了获得最佳的开发体验，我们建议将以下配置设置应用于你的Kafka代理。"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "Also specify the following settings in your Quarkus `application.properties`:"
msgstr "同时在你的Quarkus `application.properties` 中指定以下设置。"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "Together, these settings will ensure that the application can very quickly reconnect to the broker after being restarted in dev mode."
msgstr "这些设置将确保应用程序在开发模式下被重新启动后能非常迅速地重新连接到代理服务器。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: _guides/kafka-streams.adoc
#, no-wrap
msgid "Architecture"
msgstr "应用结构"

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"In this guide, we are going to generate (random) temperature values in one component (named `generator`).\n"
"These values are associated to given weather stations and are written in a Kafka topic (`temperature-values`).\n"
"Another topic (`weather-stations`) contains just the main data about the weather stations themselves (id and name)."
msgstr "在本指南中，我们将在一个组件（名为 `generator` ）中生成（随机）温度值。这些值与给定的气象站相关联，并写入 Kafka 主题 ( `temperature-values` ) 中。另一个主题 ( `weather-stations` ) 只包含气象站本身的主要数据（id 和名称）。"

#. type: delimited block =
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "A second component (`aggregator`) reads from the two Kafka topics and processes them in a streaming pipeline:"
msgstr "第二个组件( `aggregator` )从两个Kafka主题中读取并在一个流式管道中处理它们。"

#. type: delimited block =
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "the two topics are joined on weather station id"
msgstr "这两个主题在气象站的ID上是连在一起的"

#. type: delimited block =
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "per weather station the min, max and average temperature is determined"
msgstr "确定每个气象站的最低、最高和平均温度"

#. type: delimited block =
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "this aggregated data is written out to a third topic (`temperatures-aggregated`)"
msgstr "这个汇总的数据被写入第三个主题 ( `temperatures-aggregated` )"

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"The data can be examined by inspecting the output topic.\n"
"By exposing a Kafka Streams https://kafka.apache.org/22/documentation/streams/developer-guide/interactive-queries.html[interactive query],\n"
"the latest result for each weather station can alternatively be obtained via a simple REST query."
msgstr "可以通过检查输出主题来检查数据。通过公开 Kafka Streams link:https://kafka.apache.org/22/documentation/streams/developer-guide/interactive-queries.html[交互式查询] ，也可以通过简单的 REST 查询获得每个气象站的最新结果。"

#. type: delimited block =
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "The overall architecture looks like so:"
msgstr "整体架构看起来是这样的。"

#. type: Title ==
#: _guides/kafka-streams.adoc
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#: _guides/kafka-streams.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#. type: delimited block =
#: _guides/kafka-streams.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: delimited block =
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "The solution is located in the `kafka-streams-quickstart` link:{quickstarts-tree-url}/kafka-streams-quickstart[directory]."
msgstr "该解决方案位于 `kafka-streams-quickstart` {quickstarts-tree-url}/kafka-streams-quickstart[目录]中。"

#. type: Title ==
#: _guides/kafka-streams.adoc
#, fuzzy, no-wrap
msgid "Creating the Producer Maven Project"
msgstr "创建生产者Maven项目"

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"First, we need a new project with the temperature value producer.\n"
"Create a new project with the following command:"
msgstr "首先，我们需要一个带有温度值制作器的新项目。使用以下命令创建一个新项目："

#. type: delimited block =
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "This command generates a Maven project, importing the Reactive Messaging and Kafka connector extensions."
msgstr "该命令生成了一个Maven项目，导入了Reactive Messaging和Kafka连接器扩展。"

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"If you already have your Quarkus project configured, you can add the `smallrye-reactive-messaging-kafka` extension\n"
"to your project by running the following command in your project base directory:"
msgstr "如果已经配置了 Quarkus 项目，可以在项目基本目录下运行以下命令，将 `smallrye-reactive-messaging-kafka` 扩展添加到项目中："

#. type: delimited block =
#: _guides/kafka-streams.adoc
msgid "This will add the following to your build file:"
msgstr "这会将以下内容添加到你的构建文件中:"

#. type: Block title
#: _guides/kafka-streams.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _guides/kafka-streams.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ===
#: _guides/kafka-streams.adoc
#, fuzzy, no-wrap
msgid "The Temperature Value Producer"
msgstr "温度值生产者"

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"Create the `producer/src/main/java/org/acme/kafka/streams/producer/generator/ValuesGenerator.java` file,\n"
"with the following content:"
msgstr "创建 `producer/src/main/java/org/acme/kafka/streams/producer/generator/ValuesGenerator.java` 文件，内容如下："

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "Instruct Reactive Messaging to dispatch the items from the returned `Multi` to `temperature-values`."
msgstr "指示Reactive Messaging从返回的 `Multi` ，将项目分派到 `temperature-values` 。"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "The method returns a Mutiny _stream_ (`Multi`) emitting a random temperature value every 0.5 seconds."
msgstr "该方法返回一个Mutiny _流_ ( `Multi` )，每0.5秒发出一个随机温度值。"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "Instruct Reactive Messaging to dispatch the items from the returned `Multi` (static list of weather stations) to `weather-stations`."
msgstr "指示Reactive Messaging将返回的 `Multi` （气象站的静态列表）中的项目分派到 `weather-stations` 。"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "The two methods each return a _reactive stream_ whose items are sent to the streams named `temperature-values` and `weather-stations`, respectively."
msgstr "这两个方法分别返回一个 _反应式流_ ，其项目被发送到名为 `temperature-values` 和 `weather-stations` 的流。"

#. type: Title ===
#: _guides/kafka-streams.adoc
#, fuzzy, no-wrap
msgid "Topic Configuration"
msgstr "主题配置"

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"The two channels are mapped to Kafka topics using the Quarkus configuration file `application.properties`.\n"
"For that, add the following to the file `producer/src/main/resources/application.properties`:"
msgstr "这两个通道通过 Quarkus 配置文件 `application.properties` 映射到 Kafka 主题。为此，请在文件 `producer/src/main/resources/application.properties` 中添加以下内容："

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"This configures the Kafka bootstrap server, the two topics and the corresponding (de-)serializers.\n"
"More details about the different configuration options are available on the https://kafka.apache.org/documentation/#producerconfigs[Producer configuration] and https://kafka.apache.org/documentation/#consumerconfigs[Consumer configuration] section from the Kafka documentation."
msgstr "这将配置 Kafka 引导服务器、两个主题和相应的（去）序列化器。有关不同配置选项的更多详情，请参阅 Kafka 文档中的 \" link:https://kafka.apache.org/documentation/#producerconfigs[生产者配置\"（Producer configuration] ）和 \" link:https://kafka.apache.org/documentation/#consumerconfigs[消费者配置\"（Consumer] link:https://kafka.apache.org/documentation/#producerconfigs[configuration] ）部分。"

#. type: Title ==
#: _guides/kafka-streams.adoc
#, fuzzy, no-wrap
msgid "Creating the Aggregator Maven Project"
msgstr "创建聚合器Maven项目"

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"With the producer application in place, it's time to implement the actual aggregator application,\n"
"which will run the Kafka Streams pipeline.\n"
"Create another project like so:"
msgstr "生产者应用程序就位后，就该实现实际的聚合器应用程序了，它将运行 Kafka Streams 管道。像这样创建另一个项目："

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "This creates the `aggregator` project with the Quarkus extension for Kafka Streams and with the Jackson support for RESTEasy Reactive."
msgstr "这就创建了 `aggregator` ，该项目带有Quarkus对Kafka流的扩展，以及Jackson对RESTEasy Reactive的支持。"

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"If you already have your Quarkus project configured, you can add the `kafka-streams` extension\n"
"to your project by running the following command in your project base directory:"
msgstr "如果已经配置了 Quarkus 项目，可以在项目基本目录下运行以下命令，将 `kafka-streams` 扩展添加到项目中："

#. type: Plain text
#: _guides/kafka-streams.adoc
msgid "This will add the following to your `pom.xml`:"
msgstr "这将在你的 `pom.xml` 中添加以下内容："

#. type: Title ===
#: _guides/kafka-streams.adoc
#, fuzzy, no-wrap
msgid "The Pipeline Implementation"
msgstr "管道的实施"

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"Let's begin the implementation of the stream processing application by creating\n"
"a few value objects for representing temperature measurements, weather stations and for keeping track of aggregated values."
msgstr "首先，让我们创建几个值对象来表示温度测量值、气象站和跟踪汇总值，从而开始流处理应用程序的实施。"

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"First, create the file `aggregator/src/main/java/org/acme/kafka/streams/aggregator/model/WeatherStation.java`,\n"
"representing a weather station, with the following content:"
msgstr "首先，创建代表气象站的文件 `aggregator/src/main/java/org/acme/kafka/streams/aggregator/model/WeatherStation.java` ，内容如下："

#: _guides/kafka-streams.adoc
msgid "The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation. More details about the `@RegisterForReflection` annotation can be found on  the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr "`@RegisterForReflection` 注解用于指导Quarkus在native编译过程中保留该类和其成员。关于 `@RegisterForReflection` 注解的更多细节可以在 link:writing-native-applications-tips.html#registerForReflection[native应用程序提示] 页面找到。"

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"Then the file `aggregator/src/main/java/org/acme/kafka/streams/aggregator/model/TemperatureMeasurement.java`,\n"
"representing temperature measurements for a given station:"
msgstr "然后是 `aggregator/src/main/java/org/acme/kafka/streams/aggregator/model/TemperatureMeasurement.java` 文件，代表某一站点的温度测量值："

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"And finally `aggregator/src/main/java/org/acme/kafka/streams/aggregator/model/Aggregation.java`,\n"
"which will be used to keep track of the aggregated values while the events are processed in the streaming pipeline:"
msgstr "最后是 `aggregator/src/main/java/org/acme/kafka/streams/aggregator/model/Aggregation.java` ，用于在流式流水线处理事件时跟踪汇总值："

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"Next, let's create the actual streaming query implementation itself in the `aggregator/src/main/java/org/acme/kafka/streams/aggregator/streams/TopologyProducer.java` file.\n"
"All we need to do for that is to declare a CDI producer method which returns the Kafka Streams `Topology`;\n"
"the Quarkus extension will take care of configuring, starting and stopping the actual Kafka Streams engine."
msgstr "接下来，让我们在 `aggregator/src/main/java/org/acme/kafka/streams/aggregator/streams/TopologyProducer.java` 文件中创建实际的流查询实现。为此，我们只需声明一个 CDI 生产者方法，返回 Kafka Streams `Topology` ；Quarkus 扩展将负责配置、启动和停止实际的 Kafka Streams 引擎。"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "The `weather-stations` table is read into a `GlobalKTable`, representing the current state of each weather station"
msgstr " `weather-stations` 表被读入一个 `GlobalKTable` ，代表每个气象站的当前状态"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "The `temperature-values` topic is read into a `KStream`; whenever a new message arrives to this topic, the pipeline will be processed for this measurement"
msgstr " `temperature-values` 主题被读入一个 `KStream` ；每当有新的消息到达这个主题，管道就会对这个测量进行处理。"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "The message from the `temperature-values` topic is joined with the corresponding weather station, using the topic's key (weather station id); the join result contains the data from the measurement and associated weather station message"
msgstr "来自 `temperature-values` 主题的信息与相应的气象站连接，使用主题的键（气象站ID）；连接结果包含来自测量和相关气象站信息的数据"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "The values are grouped by message key (the weather station id)"
msgstr "这些值按信息键（气象站的ID）进行分组"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "Within each group, all the measurements of that station are aggregated, by keeping track of minimum and maximum values and calculating the average value of all measurements of that station (see the `Aggregation` type)"
msgstr "在每个组内，该站的所有测量值被汇总，通过跟踪最小值和最大值，并计算该站所有测量值的平均值（见 `Aggregation` ）。"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "The results of the pipeline are written out to the `temperatures-aggregated` topic"
msgstr "管线的结果被写出来， `temperatures-aggregated` 主题"

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"The Kafka Streams extension is configured via the Quarkus configuration file `application.properties`.\n"
"Create the file `aggregator/src/main/resources/application.properties` with the following contents:"
msgstr "Kafka Streams 扩展通过 Quarkus 配置文件 `application.properties` 进行配置。创建包含以下内容的文件 `aggregator/src/main/resources/application.properties` ："

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"The options with the `quarkus.kafka-streams` prefix can be changed dynamically at application startup,\n"
"e.g. via environment variables or system properties.\n"
"`bootstrap-servers` and `application-server` are mapped to the Kafka Streams properties `bootstrap.servers` and `application.server`, respectively.\n"
"`topics` is specific to Quarkus: the application will wait for all the given topics to exist before launching the Kafka Streams engine.\n"
"This is to done to gracefully await the creation of topics that don't yet exist at application startup time."
msgstr "带有 `quarkus.kafka-streams` 前缀的选项可以在应用程序启动时动态更改，例如通过环境变量或系统属性。 `bootstrap-servers` 和 `application-server` 分别映射到 Kafka Streams 属性 `bootstrap.servers` 和 `application.server` 。 `topics` 是 Quarkus 特有的：在启动 Kafka Streams 引擎之前，应用程序会等待所有给定的主题都已存在。这样做是为了在应用程序启动时优雅地等待尚未存在的主题的创建。"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "Alternatively, you can use `kafka.bootstrap.servers` instead of `quarkus.kafka-streams.bootstrap-servers` as you did in the _generator_ project above."
msgstr "另外，你也可以像上面的 _生成器_ 项目中那样，使用 `kafka.bootstrap.servers` ，而不是 `quarkus.kafka-streams.bootstrap-servers` 。"

#: _guides/kafka-streams.adoc
#, fuzzy
msgid "Once you are ready to promote your application into production, consider changing the above configuration values. While `cache.max.bytes.buffering=10240` will move your records faster through the topology, the default value of `10485760` is more throughput-friendly. Also condider increasing `metadata.max.age.ms` from `500`, which will update cluster metadata quickly, but will generate a lot of redundant requests, to a value closer to the default of `300000`. A `commit.interval.ms` of `1000` is good for exactly-once processing, but might generate excessive load for  the default at-least-once processing with the default value of `30000`."
msgstr "一旦准备好将应用程序投入生产，请考虑更改上述配置值。虽然 `cache.max.bytes.buffering=10240` 会使记录在拓扑中移动得更快，但默认值 `10485760` 对吞吐量更有利。此外，还可考虑将 `metadata.max.age.ms` 从 `500` （可快速更新群集元数据，但会产生大量冗余请求）提高到更接近于默认值 `300000` 的值。 `commit.interval.ms` 为 `1000` 有利于精确一次处理，但对于默认值为 `30000` 的默认至少一次处理，可能会产生过多负载。"

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"All the properties within the `kafka-streams` namespace are passed through as-is to the Kafka Streams engine.\n"
"Changing their values requires a rebuild of the application."
msgstr "`kafka-streams` 命名空间中的所有属性都会按原样传递给 Kafka Streams 引擎。更改它们的值需要重新构建应用程序。"

#. type: Title ==
#: _guides/kafka-streams.adoc
#, fuzzy, no-wrap
msgid "Building and Running the Applications"
msgstr "构建和运行应用程序"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "We now can build the `producer` and `aggregator` applications:"
msgstr "我们现在可以建立 `producer` 和 `aggregator` 应用程序。"

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"Instead of running them directly on the host machine using the Quarkus dev mode,\n"
"we're going to package them into container images and launch them via Docker Compose.\n"
"This is done in order to demonstrate scaling the `aggregator` aggregation to multiple nodes later on."
msgstr "我们将不使用 Quarkus 开发模式直接在主机上运行它们，而是把它们打包成容器镜像，然后通过 Docker Compose 启动它们。这样做是为了演示稍后如何将 `aggregator` 聚合扩展到多个节点。"

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"The `Dockerfile` created by Quarkus by default needs one adjustment for the `aggregator` application in order to run the Kafka Streams pipeline.\n"
"To do so, edit the file `aggregator/src/main/docker/Dockerfile.jvm` and replace the line `FROM fabric8/java-alpine-openjdk8-jre` with `FROM fabric8/java-centos-openjdk8-jdk`."
msgstr "Quarkus 默认创建的 `Dockerfile` 需要对 `aggregator` 应用程序进行一次调整，以便运行 Kafka Streams 管道。为此，请编辑文件 `aggregator/src/main/docker/Dockerfile.jvm` ，将 `FROM fabric8/java-alpine-openjdk8-jre` 行替换为 `FROM fabric8/java-centos-openjdk8-jdk` 。"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "Next create a Docker Compose file (`docker-compose.yaml`) for spinning up the two applications as well as Apache Kafka and ZooKeeper like so:"
msgstr "接下来创建一个Docker Compose文件（ `docker-compose.yaml` ），用于启动两个应用程序以及Apache Kafka和ZooKeeper，像这样。"

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"To launch all the containers, building the `producer` and `aggregator` container images,\n"
"run `docker-compose up --build`."
msgstr "要启动所有容器，构建 `producer` 和 `aggregator` 容器映像，请运行 `docker-compose up --build` 。"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "Instead of `QUARKUS_KAFKA_STREAMS_BOOTSTRAP_SERVERS`, you can use `KAFKA_BOOTSTRAP_SERVERS`."
msgstr "代替 `QUARKUS_KAFKA_STREAMS_BOOTSTRAP_SERVERS` ，你可以使用 `KAFKA_BOOTSTRAP_SERVERS` 。"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "You should see log statements from the `producer` application about messages being sent to the \"temperature-values\" topic."
msgstr "你应该看到来自 `producer` 应用程序的日志声明，关于被发送到 \"temperature-values \"主题的消息。"

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"Now run an instance of the _debezium/tooling_ image, attaching to the same network all the other containers run in.\n"
"This image provides several useful tools such as _kafkacat_ and _httpie_:"
msgstr "现在运行一个 _debezium/tooling_ 映像实例，连接到所有其他容器运行的同一网络。该镜像提供了一些有用的工具，如 _kafkacat_ 和 _httpie_ ："

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "Within the tooling container, run _kafkacat_ to examine the results of the streaming pipeline:"
msgstr "在工具容器中，运行 _kafkacat_ 来检查流媒体管道的结果。"

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"You should see new values arrive as the producer continues to emit temperature measurements,\n"
"each value on the outbound topic showing the minimum, maximum and average temperature values of the represented weather station."
msgstr "随着生成器不断发送温度测量值，您应该会看到新的值出现，出站主题上的每个值都会显示所代表气象站的最低、最高和平均温度值。"

#. type: Title ==
#: _guides/kafka-streams.adoc
#, fuzzy, no-wrap
msgid "Interactive Queries"
msgstr "互动查询"

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"Subscribing to the `temperatures-aggregated` topic is a great way to react to any new temperature values.\n"
"It's a bit wasteful though if you're just interested in the latest aggregated value for a given weather station.\n"
"This is where Kafka Streams interactive queries shine:\n"
"they let you directly query the underlying state store of the pipeline for the value associated to a given key.\n"
"By exposing a simple REST endpoint which queries the state store,\n"
"the latest aggregation result can be retrieved without having to subscribe to any Kafka topic."
msgstr "订阅 `temperatures-aggregated` 主题是对任何新温度值做出反应的好方法。不过，如果你只对某个气象站的最新汇总值感兴趣，那就有点浪费了。这正是 Kafka Streams 交互式查询的优势所在：它可以让你直接查询管道的底层状态存储，获取与给定键相关联的值。通过公开一个简单的 REST 端点来查询状态存储，就可以检索到最新的聚合结果，而无需订阅任何 Kafka 主题。"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "Let's begin by creating a new class `InteractiveQueries` in the file `aggregator/src/main/java/org/acme/kafka/streams/aggregator/streams/InteractiveQueries.java`:"
msgstr "让我们首先在文件 `aggregator/src/main/java/org/acme/kafka/streams/aggregator/streams/InteractiveQueries.java` 中创建一个新的类 `InteractiveQueries` 。"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "one more method to the `KafkaStreamsPipeline` class which obtains the current state for a given key:"
msgstr " `KafkaStreamsPipeline` 类中又多了一个方法，可以获得给定键的当前状态。"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "A value for the given station id was found, so that value will be returned"
msgstr "找到了一个给定车站ID的值，所以该值将被返回。"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "No value was found, either because a non-existing station was queried or no measurement exists yet for the given station"
msgstr "没有发现任何值，要么是因为查询的是一个不存在的站，要么是因为该站还没有测量值存在。"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "Also create the method's return type in the file `aggregator/src/main/java/org/acme/kafka/streams/aggregator/streams/GetWeatherStationDataResult.java`:"
msgstr "同时在文件 `aggregator/src/main/java/org/acme/kafka/streams/aggregator/streams/GetWeatherStationDataResult.java` 中创建该方法的返回类型。"

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"Also create `aggregator/src/main/java/org/acme/kafka/streams/aggregator/model/WeatherStationData.java`,\n"
"which represents the actual aggregation result for a weather station:"
msgstr "同时创建 `aggregator/src/main/java/org/acme/kafka/streams/aggregator/model/WeatherStationData.java` ，表示气象站的实际汇总结果："

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"We now can add a simple REST endpoint (`aggregator/src/main/java/org/acme/kafka/streams/aggregator/rest/WeatherStationEndpoint.java`),\n"
"which invokes `getWeatherStationData()` and returns the data to the client:"
msgstr "现在我们可以添加一个简单的 REST 端点 ( `aggregator/src/main/java/org/acme/kafka/streams/aggregator/rest/WeatherStationEndpoint.java` )，它可以调用 `getWeatherStationData()` 并将数据返回给客户端："

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "Depending on whether a value was obtained, either return that value or a 404 response"
msgstr "根据是否获得了一个值，要么返回该值，要么返回一个404响应"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "With this code in place, it's time to rebuild the application and the `aggregator` service in Docker Compose:"
msgstr "有了这些代码，现在是时候在Docker Compose中重建应用程序和 `aggregator` 服务了。"

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"This will rebuild the `aggregator` container and restart its service.\n"
"Once that's done, you can invoke the service's REST API to obtain the temperature data for one of the existing stations.\n"
"To do so, you can use `httpie` in the tooling container launched before:"
msgstr "这将重建 `aggregator` 容器并重启其服务。完成后，您就可以调用该服务的 REST API 来获取其中一个现有站点的温度数据。为此，您可以在之前启动的工具容器中使用 `httpie` ："

#. type: Title ==
#: _guides/kafka-streams.adoc
#, fuzzy, no-wrap
msgid "Scaling Out"
msgstr "扩大规模"

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"A very interesting trait of Kafka Streams applications is that they can be scaled out,\n"
"i.e. the load and state can be distributed amongst multiple application instances running the same pipeline.\n"
"Each node will then contain a subset of the aggregation results,\n"
"but Kafka Streams provides you with https://kafka.apache.org/22/documentation/streams/developer-guide/interactive-queries.html#querying-remote-state-stores-for-the-entire-app[an API] to obtain the information which node is hosting a given key.\n"
"The application can then either fetch the data directly from the other instance, or simply point the client to the location of that other node."
msgstr "Kafka Streams 应用程序有一个非常有趣的特点，那就是它们可以扩展，也就是说，负载和状态可以分配给运行同一管道的多个应用程序实例。每个节点都将包含聚合结果的一个子集，但 Kafka Streams 为您提供了 link:https://kafka.apache.org/22/documentation/streams/developer-guide/interactive-queries.html#querying-remote-state-stores-for-the-entire-app[一个应用程序接口（API] ），用于获取哪个节点正在托管给定密钥的信息。然后，应用程序可以直接从其他实例获取数据，或者直接将客户端指向其他节点的位置。"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "Launching multiple instances of the `aggregator` application will make look the overall architecture like so:"
msgstr "启动 `aggregator` 应用程序的多个实例将使整体架构看起来像这样。"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "The `InteractiveQueries` class must be adjusted slightly for this distributed architecture:"
msgstr " `InteractiveQueries` 类必须为这种分布式结构稍作调整。"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "The streams metadata for the given weather station id is obtained"
msgstr "获得给定气象站ID的数据流元数据"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "The given key (weather station id) is maintained by the local application node, i.e. it can answer the query itself"
msgstr "给定的密钥（气象站ID）由本地应用节点维护，即它可以自己回答查询。"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "The given key is maintained by another application node; in this case the information about that node (host and port) will be returned"
msgstr "给定的密钥是由另一个应用节点维护的；在这种情况下，关于该节点的信息（主机和端口）将被返回。"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "The `getMetaData()` method is added to provide callers with a list of all the nodes in the application cluster."
msgstr "增加了 `getMetaData()` 方法，向调用者提供应用程序集群中所有节点的列表。"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "The `GetWeatherStationDataResult` type must be adjusted accordingly:"
msgstr " `GetWeatherStationDataResult` 类型必须进行相应的调整。"

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"Also, the return type for `getMetaData()` must be defined\n"
"(`aggregator/src/main/java/org/acme/kafka/streams/aggregator/streams/PipelineMetadata.java`):"
msgstr "此外，必须定义 `getMetaData()` 的返回类型 ( `aggregator/src/main/java/org/acme/kafka/streams/aggregator/streams/PipelineMetadata.java` )："

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "Lastly, the REST endpoint class must be updated:"
msgstr "最后，必须更新REST端点类。"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "The data was found locally, so return it"
msgstr "数据是在本地找到的，所以返回它"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "The data is maintained by another node, so reply with a redirect (HTTP status code 303) if the data for the given key is stored on one of the other nodes."
msgstr "该数据是由另一个节点维护的，因此，如果给定的键的数据存储在其他节点之一，则回复重定向（HTTP状态代码303）。"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "No data was found for the given weather station id"
msgstr "没有找到指定气象站ID的数据"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "Exposes information about all the hosts forming the application cluster"
msgstr "暴露出构成应用集群的所有主机的信息"

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"Now stop the `aggregator` service again and rebuild it.\n"
"Then let's spin up three instances of it:"
msgstr "现在再次停止 `aggregator` 服务并重建它。然后启动三个实例："

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"When invoking the REST API on any of the three instances, it might either be\n"
"that the aggregation for the requested weather station id is stored locally on the node receiving the query,\n"
"or it could be stored on one of the other two nodes."
msgstr "在这三个实例中的任何一个上调用 REST API 时，所请求的气象站 ID 的聚合信息可能存储在接收查询的节点上，也可能存储在另外两个节点中的一个上。"

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"As the load balancer of Docker Compose will distribute requests to the `aggregator` service in a round-robin fashion,\n"
"we'll invoke the actual nodes directly.\n"
"The application exposes information about all the host names via REST:"
msgstr "由于 Docker Compose 的负载平衡器会以循环方式将请求分发到 `aggregator` 服务，因此我们将直接调用实际节点。应用程序通过 REST 公开所有主机名的信息："

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"Retrieve the data from one of the three hosts shown in the response\n"
"(your actual host names will differ):"
msgstr "从响应中显示的三个主机中的一个读取数据（实际主机名会有所不同）："

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "If that node holds the data for key \"1\", you'll get a response like this:"
msgstr "如果该节点持有键 \"1 \"的数据，你会得到这样的响应。"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "Otherwise, the service will send a redirect:"
msgstr "否则，该服务将发送一个重定向。"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "You can also have _httpie_ automatically follow the redirect by passing the `--follow option`:"
msgstr "你也可以通过传递 `--follow option` ，让 _httpie_ 自动跟随重定向。"

#. type: Title ==
#: _guides/kafka-streams.adoc
#, fuzzy, no-wrap
msgid "Running Natively"
msgstr "自然运行"

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"The Quarkus extension for Kafka Streams enables the execution of stream processing applications\n"
"natively via GraalVM without further configuration."
msgstr "针对 Kafka Streams 的 Quarkus 扩展可通过 GraalVM 本机执行流处理应用程序，无需进一步配置。"

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"To run both the `producer` and `aggregator` applications in native mode,\n"
"the Maven builds can be executed using `-Dnative`:"
msgstr "要以本地模式运行 `producer` 和 `aggregator` 应用程序，可使用 `-Dnative` 执行 Maven 构建："

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "Now create an environment variable named `QUARKUS_MODE` and with value set to \"native\":"
msgstr "现在创建一个名为 `QUARKUS_MODE` 的环境变量，其值设置为 \"native\"。"

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"This is used by the Docker Compose file to use the correct `Dockerfile` when building the `producer` and `aggregator` images.\n"
"The Kafka Streams application can work with less than 50 MB RSS in native mode.\n"
"To do so, add the `Xmx` option to the program invocation in `aggregator/src/main/docker/Dockerfile.native`:"
msgstr "在构建 `producer` 和 `aggregator` 映像时，Docker Compose 文件会使用该值来使用正确的 `Dockerfile` 。在本机模式下，Kafka Streams 应用程序可以使用小于 50 MB 的 RSS。为此，请在 `aggregator/src/main/docker/Dockerfile.native` 中的程序调用中添加 `Xmx` 选项："

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"Now start Docker Compose as described above\n"
"(don't forget to rebuild the container images)."
msgstr "现在按上述方法启动 Docker Compose（别忘了重建容器镜像）。"

#. type: Title ==
#: _guides/kafka-streams.adoc
#, fuzzy, no-wrap
msgid "Kafka Streams Health Checks"
msgstr "Kafka流的健康检查"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "If you are using the `quarkus-smallrye-health` extension, `quarkus-kafka-streams` will automatically add:"
msgstr "如果你使用的是 `quarkus-smallrye-health` ， `quarkus-kafka-streams` ，会自动添加。"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "a readiness health check to validate that all topics declared in the `quarkus.kafka-streams.topics` property are created,"
msgstr "一个准备就绪的健康检查，以验证所有在 `quarkus.kafka-streams.topics` 属性中声明的主题都被创建。"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "a liveness health check based on the Kafka Streams state."
msgstr "一个基于Kafka流状态的有效性健康检查。"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "So when you access the `/q/health` endpoint of your application you will have information about the state of the Kafka Streams and the available and/or missing topics."
msgstr "因此，当你访问你的应用程序的 `/q/health` 端点时，你将获得关于Kafka流的状态以及可用和/或缺失的主题的信息。"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "This is an example of when the status is `DOWN`:"
msgstr "这是在状态为 `DOWN` 的情况下的一个例子。"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "Liveness health check. Also available at `/q/health/live` endpoint."
msgstr "活性健康检查。也可在 `/q/health/live` 端点。"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "Readiness health check. Also available at `/q/health/ready` endpoint."
msgstr "准备就绪的健康检查。也可在 `/q/health/ready` 端点。"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "So as you can see, the status is `DOWN` as soon as one of the `quarkus.kafka-streams.topics` is missing or the Kafka Streams `state` is not `RUNNING`."
msgstr "所以你可以看到，只要其中一个 `quarkus.kafka-streams.topics` ，或者Kafka Streams `state` 没有 `RUNNING` ，状态就是 `DOWN` 。"

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"If no topics are available, the `available_topics` key will not be present in the `data` field of the `Kafka Streams topics health check`.\n"
"As well as if no topics are missing, the `missing_topics` key will not be present in the `data` field of the `Kafka Streams topics health check`."
msgstr "如果没有主题， `Kafka Streams topics health check` 的 `data` 字段中就不会出现 `available_topics` 关键字。如果没有主题， `Kafka Streams topics health check` 的 `data` 字段中也不会出现 `missing_topics` 关键字。"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "You can of course disable the health check of the `quarkus-kafka-streams` extension by setting the `quarkus.kafka-streams.health.enabled` property to `false` in your `application.properties`."
msgstr "当然，你可以通过在你的 `application.properties` 中设置 `quarkus.kafka-streams.health.enabled` 属性为 `false` ，来禁用 `quarkus-kafka-streams` 扩展的健康检查。"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "Obviously you can create your liveness and readiness probes based on the respective endpoints `/q/health/live` and `/q/health/ready`."
msgstr "显然，你可以根据各自的端点 `/q/health/live` 和 `/q/health/ready` 来创建你的有效性和准备性探测。"

#. type: Title ===
#: _guides/kafka-streams.adoc
#, fuzzy, no-wrap
msgid "Liveness health check"
msgstr "活性健康检查"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "Here is an example of the liveness check:"
msgstr "下面是一个有效性检查的例子："

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "The `state` is coming from the `KafkaStreams.State` enum."
msgstr "`state` 来自 `KafkaStreams.State` 枚举。"

#. type: Title ===
#: _guides/kafka-streams.adoc
#, fuzzy, no-wrap
msgid "Readiness health check"
msgstr "准备状态健康检查"

#. type: Plain text
#: _guides/kafka-streams.adoc
#, fuzzy
msgid "Here is an example of the readiness check:"
msgstr "下面是准备状态检查的示例："

#. type: Title ==
#: _guides/kafka-streams.adoc
#, fuzzy, no-wrap
msgid "Going Further"
msgstr "更进一步"

#: _guides/kafka-streams.adoc
#, fuzzy
msgid ""
"This guide has shown how you can build stream processing applications using Quarkus and the Kafka Streams APIs,\n"
"both in JVM and native modes.\n"
"For running your KStreams application in production, you could also add health checks and metrics for the data pipeline.\n"
"Refer to the Quarkus guides on xref:telemetry-micrometer.adoc[Micrometer], xref:smallrye-metrics.adoc[SmallRye Metrics], and xref:smallrye-health.adoc[SmallRye Health] to learn more."
msgstr "本指南介绍了如何在 JVM 和本地模式下使用 Quarkus 和 Kafka Streams API 构建流处理应用程序。为了在生产中运行 KStreams 应用程序，你还可以为数据管道添加健康检查和指标。如需了解更多信息，请参阅有关 xref:telemetry-micrometer.adoc[Micrometer] 、 xref:smallrye-metrics.adoc[SmallRye Metrics] 和 xref:smallrye-health.adoc[SmallRye Health] 的 Quarkus 指南。"

#. type: Title ==
#: _guides/kafka-streams.adoc
#, no-wrap
msgid "Configuration Reference"
msgstr "配置参考"

#: _guides/kafka-streams.adoc
#, fuzzy
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr "<span class=\"icicon\"><i class=\"fa fa-lock\" title=\"在构建时固定\"></i></span>在构建时固定的配置属性 - 所有其他配置属性都可在运行时重写 <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
