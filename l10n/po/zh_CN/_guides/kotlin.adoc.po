# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-05-17 15:04+0000\n"
"PO-Revision-Date: 2022-06-02 17:04+0800\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: zh\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/kotlin.adoc:6
#, no-wrap
msgid "Using Kotlin"
msgstr "使用Kotlin"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:12
msgid "https://kotlinlang.org/[Kotlin] is a very popular programming language that targets the JVM (amongst other environments). Kotlin has experienced a surge in popularity the last few years making it the most popular JVM language, except for Java of course."
msgstr "link:https://kotlinlang.org/[Kotlin] 是一种非常流行的基于JVM的编程语言（在其他环境中）。在过去的几年里，Kotlin的受欢迎程度激增，使其成为最受欢迎的JVM语言，当然，除了Java之外。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:14
msgid "Quarkus provides first class support for using Kotlin as will be explained in this guide."
msgstr "Quarkus为使用Kotlin提供了一流的支持，本指南将对此进行讲解。"

#. type: Title ==
#: upstream/_guides/kotlin.adoc:17
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: delimited block =
#: upstream/_guides/kotlin.adoc:25
msgid "If building with Mandrel, make sure to use version Mandrel 22.1 or above, for example `ubi-quarkus-mandrel:22.1-java17`.  With older versions, you might encounter errors when trying to deserialize JSON documents that have null or missing fields, similar to the errors mentioned in the <<kotlin-jackson>> section."
msgstr "如果用Mandrel构建，确保使用Mandrel 22.1或以上的版本，例如 `ubi-quarkus-mandrel:22.1-java17` 。对于旧版本，当您试图反序列化有空字段或缺失字段的JSON文档时，可能会遇到错误，类似于 link:#kotlin-jackson<<kotlin-jackson>> 部分提到的错误。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:28
msgid "NB: For Gradle project setup please see below, and for further reference consult the guide in the xref:gradle-tooling.adoc[Gradle setup page]."
msgstr "注意：关于Gradle项目的设置，请见下文，如需进一步参考，请查阅 link:gradle-tooling.html[Gradle设置页面] 的指南。"

#. type: Title ==
#: upstream/_guides/kotlin.adoc:29
#, no-wrap
msgid "Creating the Maven project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:32
msgid "First, we need a new Kotlin project. This can be done using the following command:"
msgstr "首先，我们需要一个新的Kotlin项目。这可以通过以下命令来完成："

#. type: Plain text
#: upstream/_guides/kotlin.adoc:41
msgid "When adding `kotlin` to the extensions list, the Maven plugin will generate a project that is properly configured to work with Kotlin. Furthermore the `org.acme.ReactiveGreetingResource` class is implemented as Kotlin source code (as is the case with the generated tests).  The addition of `resteasy-reactive-jackson` in the extension list results in importing the RESTEasy Reactive and Jackson extensions."
msgstr "将 `kotlin` 添加到扩展列表后，Maven插件将生成一个经过正确配置的项目，以便与Kotlin一起工作。此外， `org.acme.ReactiveGreetingResource` 类会通过kotlin代码来进行实现（与生成的测试一样）。在扩展列表中添加 `resteasy-reactive-jackson` ，就会导入RESTEasy Reactive和Jackson扩展。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:43
msgid "`ReactiveGreetingResource.kt` looks like this:"
msgstr "`ReactiveGreetingResource.kt` 看起来像这样："

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:47
#, no-wrap
msgid "package org.acme\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:52 upstream/_guides/kotlin.adoc:502
#: upstream/_guides/kotlin.adoc:542
#, no-wrap
msgid ""
"import javax.ws.rs.GET\n"
"import javax.ws.rs.Path\n"
"import javax.ws.rs.Produces\n"
"import javax.ws.rs.core.MediaType\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:55
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"class ReactiveGreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:60
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    fun hello() = \"Hello from RESTEasy Reactive\"\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/kotlin.adoc:62
#, no-wrap
msgid "Update code"
msgstr "更新代码"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:65
msgid "In order to show a more practical example of Kotlin usage we will add a simple link:https://kotlinlang.org/docs/reference/data-classes.html[data class] called `Greeting.kt` like so:"
msgstr "为了展示一个更实际的Kotlin使用例子，我们将像这样添加一个简单的 link:https://kotlinlang.org/docs/reference/data-classes.html[数据类] ，叫做 `Greeting.kt` ："

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:69
#, no-wrap
msgid "package org.acme.rest\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:71
#, no-wrap
msgid "data class Greeting(val message: String = \"\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kotlin.adoc:74
msgid "We also update the `ReactiveGreetingResource.kt` like so:"
msgstr "我们还要这样更新 `ReactiveGreetingResource.kt` ："

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:80
#, no-wrap
msgid ""
"import javax.ws.rs.GET\n"
"import javax.ws.rs.Path\n"
"import javax.ws.rs.core.MediaType\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:83
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"class GreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:87
#, no-wrap
msgid ""
"    @GET\n"
"    fun hello() = Greeting(\"hello\")\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kotlin.adoc:90
msgid "With these changes in place the `/hello` endpoint will reply with a JSON object instead of a simple String."
msgstr "经过这些更改， `/hello` 端点将用一个JSON对象而不是一个简单的字符串来响应请求。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:92
msgid "To make the test pass, we also need to update `ReactiveGreetingResourceTest.kt` like so:"
msgstr "为了使测试通过，我们还需要像这样更新 `ReactiveGreetingResourceTest.kt` :"

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:96
#, no-wrap
msgid "import org.hamcrest.Matchers.equalTo\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:99
#, no-wrap
msgid ""
"@QuarkusTest\n"
"class ReactiveGreetingResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:108
#, no-wrap
msgid ""
"    @Test\n"
"    fun testHelloEndpoint() {\n"
"        given()\n"
"          .`when`().get(\"/hello\")\n"
"          .then()\n"
"             .statusCode(200)\n"
"             .body(\"message\", equalTo(\"hello\"))\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:110 upstream/_guides/kotlin.adoc:513
#: upstream/_guides/kotlin.adoc:529 upstream/_guides/kotlin.adoc:563
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/kotlin.adoc:112
#, no-wrap
msgid "Important Maven configuration points"
msgstr "Maven配置要点"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:115
msgid "The generated `pom.xml` contains the following modifications compared to its counterpart when Kotlin is not selected:"
msgstr "与不选择Kotlin时的对应内容相比，这次生成的 `pom.xml` 包含以下修改："

#. type: Plain text
#: upstream/_guides/kotlin.adoc:117 upstream/_guides/kotlin.adoc:180
msgid "The `quarkus-kotlin` artifact is added to the dependencies. This artifact provides support for Kotlin in the live reload mode (more about this later on)"
msgstr "`quarkus-kotlin` 会被添加到依赖项中。这个依赖提供了对实时重载模式下的Kotlin的支持（后面会有更多关于这个的介绍）"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:118 upstream/_guides/kotlin.adoc:181
msgid "The `kotlin-stdlib-jdk8` is also added as a dependency."
msgstr "`kotlin-stdlib-jdk8` 也作为依赖被添加进来。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:119
msgid "Maven's `sourceDirectory` and `testSourceDirectory` build properties are configured to point to Kotlin sources (`src/main/kotlin` and `src/test/kotlin` respectively)"
msgstr "Maven的 `sourceDirectory` 和 `testSourceDirectory` 构建属性被配置为指向Kotlin代码(分别是： `src/main/kotlin` 和 `src/test/kotlin` )"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:120
msgid "The `kotlin-maven-plugin` is configured as follows:"
msgstr "`kotlin-maven-plugin` ，其配置如下。 "

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:145
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>kotlin-maven-plugin</artifactId>\n"
"    <groupId>org.jetbrains.kotlin</groupId>\n"
"    <version>${kotlin.version}</version>\n"
"    <executions>\n"
"        <execution>\n"
"            <id>compile</id>\n"
"            <goals>\n"
"                <goal>compile</goal>\n"
"            </goals>\n"
"        </execution>\n"
"        <execution>\n"
"            <id>test-compile</id>\n"
"            <goals>\n"
"                <goal>test-compile</goal>\n"
"            </goals>\n"
"        </execution>\n"
"    </executions>\n"
"    <configuration>\n"
"        <compilerPlugins>\n"
"            <plugin>all-open</plugin>\n"
"        </compilerPlugins>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:151
#, no-wrap
msgid ""
"        <pluginOptions>\n"
"            <!-- Each annotation is placed on its own line -->\n"
"            <option>all-open:annotation=javax.ws.rs.Path</option>\n"
"        </pluginOptions>\n"
"    </configuration>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:160
#, no-wrap
msgid ""
"    <dependencies>\n"
"        <dependency>\n"
"            <groupId>org.jetbrains.kotlin</groupId>\n"
"            <artifactId>kotlin-maven-allopen</artifactId>\n"
"            <version>${kotlin.version}</version>\n"
"        </dependency>\n"
"    </dependencies>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kotlin.adoc:164
msgid "The important thing to note is the use of the https://kotlinlang.org/docs/reference/compiler-plugins.html#all-open-compiler-plugin[all-open] Kotlin compiler plugin.  In order to understand why this plugin is needed, first we need to note that by default all the classes generated from the Kotlin compiler are marked as `final`."
msgstr "需要注意的是，这里使用了 link:https://kotlinlang.org/docs/reference/compiler-plugins.html#all-open-compiler-plugin[all-open] 的Kotlin编译器插件。为了理解为什么需要这个插件，首先我们需要注意：在默认情况下，所有从Kotlin编译器生成的类都被标记为 `final` 。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:166
msgid "Having `final` classes however does not work well with various frameworks that need to create https://docs.oracle.com/javase/8/docs/technotes/guides/reflection/proxy.html[Dynamic Proxies]."
msgstr "然而，拥有 `final` 类并不能很好地与需要创建 link:https://docs.oracle.com/javase/8/docs/technotes/guides/reflection/proxy.html[动态代理] 的各种框架配合使用。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:169
msgid "Thus, the `all-open` Kotlin compiler plugin allows us to configure the compiler to *not* mark as `final` classes that have certain annotations. In the snippet above, we have specified that classes annotated with `javax.ws.rs.Path` should not be `final`."
msgstr "因此， `all-open` Kotlin编译器插件允许我们对编译器进行配置，使其 *不* 将有某些注解的类标记为 `final` 。在上面的片段中，我们已经指定了带有 `javax.ws.rs.Path` 注解的类不应该是 `final` 的 。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:172
msgid "If your application contains classes annotated with `javax.enterprise.context.ApplicationScoped` for example, then `<option>all-open:annotation=javax.enterprise.context.ApplicationScoped</option>` needs to be added as well. Same goes for any class that needs to have a dynamic proxy created at runtime."
msgstr "例如，如果您的应用程序包含了带有 `javax.enterprise.context.ApplicationScoped` 注解的类，那么也需要添加 `<option>all-open:annotation=javax.enterprise.context.ApplicationScoped</option>` 。任何需要在运行时创建动态代理的类也是如此。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:174
msgid "Future versions of Quarkus will configure the Kotlin compiler plugin in a way that will make it unnecessary to alter this configuration."
msgstr "Quarkus的未来版本将以无需更改此配置文件的方式来配置Kotlin编译器插件。"

#. type: Title ==
#: upstream/_guides/kotlin.adoc:175
#, no-wrap
msgid "Important Gradle configuration points"
msgstr "Gradle配置要点"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:178
msgid "Similar to the Maven configuration, when using Gradle, the following modifications are required when Kotlin is selected:"
msgstr "与Maven的配置类似，在使用Gradle时，如果选择了Kotlin，则需要做以下修改："

#. type: Plain text
#: upstream/_guides/kotlin.adoc:182
msgid "The Kotlin plugin is activated, which implicitly adds `sourceDirectory` and `testSourceDirectory` build properties to point to Kotlin sources (`src/main/kotlin` and `src/test/kotlin` respectively)"
msgstr "Kotlin插件被激活，它隐含地添加了 `sourceDirectory` 和 `testSourceDirectory` 构建属性，以指向Kotlin代码(分别是 `src/main/kotlin` 和 `src/test/kotlin` )"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:183
msgid "The all-open Kotlin plugin tells the compiler not to mark as final, those classes with the annotations highlighted (customize as required)"
msgstr "all-open Kotlin插件告诉编译器不要把那些有注解的类标记为final类（可以按需自定义） "

#. type: Plain text
#: upstream/_guides/kotlin.adoc:184
msgid "When using native-image, the use of http (or https) protocol(s) must be declared"
msgstr "当使用native-image时，必须声明使用http（或https）协议"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:185
msgid "An example configuration follows:"
msgstr "下面是一个配置实例："

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:191
#, no-wrap
msgid ""
"plugins {\n"
"    id 'java'\n"
"    id 'io.quarkus' \n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:195
#, no-wrap
msgid ""
"    id \"org.jetbrains.kotlin.jvm\" version \"{kotlin-version}\" // <1>\n"
"    id \"org.jetbrains.kotlin.plugin.allopen\" version \"{kotlin-version}\" // <1>\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:200 upstream/_guides/kotlin.adoc:255
#: upstream/_guides/kotlin.adoc:268
#, no-wrap
msgid ""
"repositories {\n"
"    mavenLocal()\n"
"    mavenCentral()\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:203
#, no-wrap
msgid ""
"dependencies { \n"
"    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:{kotlin-version}'\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:205
#, no-wrap
msgid "   implementation enforcedPlatform(\"${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}\")\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:209
#, no-wrap
msgid ""
"    implementation 'io.quarkus:quarkus-resteasy-reactive'\n"
"    implementation 'io.quarkus:quarkus-resteasy-reactive-jackson'\n"
"    implementation 'io.quarkus:quarkus-kotlin'\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:213
#, no-wrap
msgid ""
"    testImplementation 'io.quarkus:quarkus-junit5'\n"
"    testImplementation 'io.rest-assured:rest-assured'\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:216
#, no-wrap
msgid ""
"group = '...' // set your group\n"
"version = '1.0.0-SNAPSHOT'\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:221 upstream/_guides/kotlin.adoc:289
#, no-wrap
msgid ""
"java {\n"
"    sourceCompatibility = JavaVersion.VERSION_11\n"
"    targetCompatibility = JavaVersion.VERSION_11\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:227 upstream/_guides/kotlin.adoc:295
#, no-wrap
msgid ""
"allOpen { // <2>\n"
"    annotation(\"javax.ws.rs.Path\")\n"
"    annotation(\"javax.enterprise.context.ApplicationScoped\")\n"
"    annotation(\"io.quarkus.test.junit.QuarkusTest\")\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:232
#, no-wrap
msgid ""
"compileKotlin {\n"
"    kotlinOptions.jvmTarget = JavaVersion.VERSION_11\n"
"    kotlinOptions.javaParameters = true\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:236
#, no-wrap
msgid ""
"compileTestKotlin {\n"
"    kotlinOptions.jvmTarget = JavaVersion.VERSION_11\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kotlin.adoc:239 upstream/_guides/kotlin.adoc:304
msgid "The Kotlin plugin version needs to be specified."
msgstr "需要指定Kotlin插件的版本。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:240 upstream/_guides/kotlin.adoc:305
msgid "The all-open configuration required, as per Maven guide above"
msgstr "按照上面的Maven指南，需要配置all-open插件"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:242
msgid "or, if you use the Gradle Kotlin DSL:"
msgstr "或者，如果您使用Gradle Kotlin DSL:"

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:250
#, no-wrap
msgid ""
"plugins {\n"
"    kotlin(\"jvm\") version \"{kotlin-version}\" // <1>\n"
"    kotlin(\"plugin.allopen\") version \"{kotlin-version}\"\n"
"    id(\"io.quarkus\")\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:259
#, no-wrap
msgid ""
"val quarkusPlatformGroupId: String by project\n"
"val quarkusPlatformArtifactId: String by project\n"
"val quarkusPlatformVersion: String by project\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:262
#, no-wrap
msgid ""
"group = \"...\"\n"
"version = \"1.0.0-SNAPSHOT\"\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:271
#, no-wrap
msgid ""
"dependencies {\n"
"    implementation(kotlin(\"stdlib-jdk8\"))\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:273
#, no-wrap
msgid "    implementation(enforcedPlatform(\"${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}\"))\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:277
#, no-wrap
msgid ""
"    implementation(\"io.quarkus:quarkus-kotlin\")\n"
"    implementation(\"io.quarkus:quarkus-resteasy-reactive\")\n"
"    implementation(\"io.quarkus:quarkus-resteasy-reactive-jackson\")\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:281
#, no-wrap
msgid ""
"    testImplementation(\"io.quarkus:quarkus-junit5\")\n"
"    testImplementation(\"io.rest-assured:rest-assured\")\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:284
#, no-wrap
msgid ""
"group = '...' // set your group\n"
"version = \"1.0.0-SNAPSHOT\"\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:300
#, no-wrap
msgid ""
"tasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile> {\n"
"    kotlinOptions.jvmTarget = JavaVersion.VERSION_11.toString()\n"
"    kotlinOptions.javaParameters = true\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/kotlin.adoc:308
#, no-wrap
msgid "Live reload"
msgstr "实时重载"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:312
msgid "Quarkus provides support for live reloading changes made to source code. This support is also available to Kotlin, meaning that developers can update their Kotlin source code and immediately see their changes reflected."
msgstr "Quarkus提供了对源代码的实时重载修改的支持。这种支持也适用于Kotlin，这意味着开发者可以更新他们的Kotlin源代码，并立即看到代码更改带来的反馈。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:314
msgid "To see this feature in action, first execute:"
msgstr "要体验到这个功能的作用，首先要执行："

#. type: Plain text
#: upstream/_guides/kotlin.adoc:318
msgid "When executing an HTTP GET request against `http://localhost:8080/hello`, you see a JSON message with the value `hello` as its `message` field."
msgstr "当执行一个对 `http://localhost:8080/hello`  的HTTP GET请求时，您会看到一个JSON消息，其 `message` 字段的值是 `hello` 。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:320
msgid "Now using your favorite editor or IDE, update `ReactiveGreetingResource.kt` and change the `hello` method to the following:"
msgstr "现在使用您喜欢的编辑器或IDE，更新 `ReactiveGreetingResource.kt` ，并将 `hello` 方法改为如下："

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:324
#, no-wrap
msgid "fun hello() = Greeting(\"hi\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kotlin.adoc:327
msgid "When you now execute an HTTP GET request against `http://localhost:8080/hello`, you should see a JSON message with the value `hi` as its `message` field."
msgstr "当您现在执行一个对 `http://localhost:8080/hello` 的HTTP GET请求时，您应该会看到一个JSON消息，其 `message` 字段的值是 `hi` 。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:329
msgid "One thing to note is that the live reload feature is not available when making changes to both Java and Kotlin source that have dependencies on each other. We hope to alleviate this limitation in the future."
msgstr "有一点需要注意的是，当对相互有依赖关系的Java和Kotlin源代码进行修改时，实时重载功能是不可用的。我们希望在未来能缓解这一限制。"

#. type: Title ===
#: upstream/_guides/kotlin.adoc:331
#, no-wrap
msgid "Configuring live reload compiler"
msgstr "配置实时重载编译器"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:334
msgid "If you need to customize the compiler flags used by `kotlinc` in development mode, you can configure them in the quarkus plugin:"
msgstr "如果您需要定制 `kotlinc` 在开发模式下使用的编译标志（compiler flags），您可以在quarkus插件中配置它们。 "

#. type: Block title
#: upstream/_guides/kotlin.adoc:336
#, no-wrap
msgid "Maven"
msgstr "Maven"

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:342
#, no-wrap
msgid ""
"<plugin>\n"
"  <groupId>${quarkus.platform.group-id}</groupId>\n"
"  <artifactId>quarkus-maven-plugin</artifactId>\n"
"  <version>${quarkus.platform.version}</version>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:355
#, no-wrap
msgid ""
"  <configuration>\n"
"    <source>${maven.compiler.source}</source>\n"
"    <target>${maven.compiler.target}</target>\n"
"    <compilerOptions>\n"
"      <compiler>\n"
"        <name>kotlin</name>\n"
"        <args>\n"
"          <arg>-Werror</arg>\n"
"        </args>\n"
"      </compiler>\n"
"    </compilerOptions>\n"
"  </configuration>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:358
#, no-wrap
msgid ""
"  ...\n"
"</plugin>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/kotlin.adoc:360
#, no-wrap
msgid "Gradle (Groovy DSL)"
msgstr "Gradle (Groovy DSL)"

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:367
#, no-wrap
msgid ""
"quarkusDev {\n"
"    compilerOptions {\n"
"        compiler(\"kotlin\").args(['-Werror'])\n"
"    }\n"
"}\n"
msgstr ""

#. type: Block title
#: upstream/_guides/kotlin.adoc:370
#, no-wrap
msgid "Gradle (Kotlin DSL)"
msgstr "或者，如果您使用Gradle Kotlin DSL。"

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:377
#, no-wrap
msgid ""
"tasks.quarkusDev {\n"
"     compilerOptions {\n"
"        compiler(\"kotlin\").args([\"-Werror\"])\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/kotlin.adoc:379
#, no-wrap
msgid "Packaging the application"
msgstr "打包应用"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:382
msgid "As usual, the application can be packaged using:"
msgstr "像往常一样，该应用程序可以用以下方式打包："

#. type: Plain text
#: upstream/_guides/kotlin.adoc:386
msgid "and executed with `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr "并可以使用 `java -jar target/quarkus-app/quarkus-run.jar`  来执行。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:388
msgid "You can also build the native executable using:"
msgstr "您也可以用以下方法构建原生(native)可执行文件："

#. type: Title ==
#: upstream/_guides/kotlin.adoc:392
#, no-wrap
msgid "Kotlin and Jackson"
msgstr "Kotlin和Jackson"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:396
msgid "If the `com.fasterxml.jackson.module:jackson-module-kotlin` dependency and the `quarkus-jackson` extension (or one of the `quarkus-resteasy-jackson` or `quarkus-resteasy-reactive-jackson` extensions) have been added to the project, then Quarkus automatically registers the `KotlinModule` to the `ObjectMapper` bean (see xref:rest-json.adoc#jackson[this] guide for more details)."
msgstr "如果 `com.fasterxml.jackson.module:jackson-module-kotlin` 依赖和 `quarkus-jackson` 扩展（或 `quarkus-resteasy-jackson` 或 `quarkus-resteasy-reactive-jackson` 其中之一）已经被添加到项目中，那么 Quarkus 会自动将 `KotlinModule` 注册到 `ObjectMapper` Bean 中（更多细节请参见 link:rest-json.html#jackson[这篇指南] ）。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:398
msgid "When using Kotlin data classes with `native-image` you may experience serialization errors that do not occur with the `JVM` version, despite the Kotlin Jackson Module being registered. This is especially so if you have a more complex JSON hierarchy, where an issue on a lower node causes a serialization failure. The error message displayed is a catch-all and typically displays an issue with the root object, which may not necessarily be the case."
msgstr "当使用Kotlin数据类与 `native-image`  时，尽管Kotlin Jackson模块已被注册，但您可能会遇到JVM版本中不会出现的序列化错误。特别是如果您有一个更复杂的JSON层次结构，低层节点上的问题导致序列化失败。显示的错误消息是一条全面的错误消息，其通常会显示根对象引发了这个问题，但情况可能并非如此。"

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:402
#, no-wrap
msgid "com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot construct instance of `Address` (no Creators, like default construct, exist): cannot deserialize from Object value (no delegate- or property-based Creator)\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kotlin.adoc:405
msgid "To ensure full-compability with `native-image`, it is recommended to apply the Jackson `@field:JsonProperty(\"fieldName\")` annotation, and set a nullable default, as illustrated below. You can automate the generation of Kotlin data classes for your sample JSON using Intellij plugins (such as JSON to Kotlin Class), and easily enable the Jackson annotation and select nullable parameters as part of the auto-code generation."
msgstr "为了确保与 `native-image` 的完全兼容性，建议使用Jackson `@field:JsonProperty(\"fieldName\")` 注解，并设置一个空默认值，如下图所示。您可以使用Intellij插件（如JSON to Kotlin Class）为您的样例JSON自动生成Kotlin数据类，并轻松启用Jackson注解和选择并选择可为空的参数，作为自动代码生成的一部分。"

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:409
#, no-wrap
msgid "import com.fasterxml.jackson.annotation.JsonProperty\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:414
#, no-wrap
msgid ""
"data class Response(\n"
"\t@field:JsonProperty(\"chart\")\n"
"\tval chart: ChartData? = null\n"
")\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:418
#, no-wrap
msgid ""
"data class ChartData(\n"
"\t@field:JsonProperty(\"result\")\n"
"\tval result: List<ResultItem?>? = null,\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:422
#, no-wrap
msgid ""
"\t@field:JsonProperty(\"error\")\n"
"\tval error: Any? = null\n"
")\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:426
#, no-wrap
msgid ""
"data class ResultItem(\n"
"\t@field:JsonProperty(\"meta\")\n"
"\tval meta: Meta? = null,\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:429
#, no-wrap
msgid ""
"\t@field:JsonProperty(\"indicators\")\n"
"\tval indicators: IndicatorItems? = null,\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:433
#, no-wrap
msgid ""
"\t@field:JsonProperty(\"timestamp\")\n"
"\tval timestamp: List<Int?>? = null\n"
")\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:435 upstream/_guides/kotlin.adoc:447
#, no-wrap
msgid "...\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/kotlin.adoc:437
#, no-wrap
msgid "Kotlin and the Kubernetes Client"
msgstr "Kotlin和Kubernetes客户端"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:440
msgid "When working with the `quarkus-kubernetes` extension and have Kotlin classes bound to CustomResource definitions (like you do for building operators), you need to be aware that the underlying Fabric8 Kubernetes Client uses its own static Jackson `ObjectMapper` s, which can be configured as follows with the `KotlinModule`:"
msgstr "当使用 `quarkus-kubernetes` 扩展并让Kotlin类绑定到CustomResource定义时（就像您在构建operator时一样），您需要注意底层的Fabric8 Kubernetes客户端使用它自己的静态Jackson `ObjectMapper` 对象，您可以这样为其配置 `KotlinModule` ："

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:445
#, no-wrap
msgid ""
"import io.fabric8.kubernetes.client.utils.Serialization\n"
"import com.fasterxml.jackson.module.kotlin.KotlinModule\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:450
#, no-wrap
msgid ""
"Serialization.jsonMapper().registerModule(KotlinModule())\n"
"Serialization.yamlMapper().registerModule(KotlinModule())\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kotlin.adoc:453
msgid "_Please test this carefully on compilation to native images and fallback to Java-compatible Jackson bindings if you experience problems._"
msgstr "_请在编译到native-image时仔细测试，如果遇到问题，请退回到与Java兼容的Jackson binding。_"

#. type: Title ==
#: upstream/_guides/kotlin.adoc:454
#, no-wrap
msgid "Coroutines support"
msgstr "Coroutines 支持"

#. type: Title ===
#: upstream/_guides/kotlin.adoc:456
#, no-wrap
msgid "Extensions"
msgstr "扩展"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:459
msgid "The following extensions provide support for Kotlin Coroutines by allowing the use of Kotlin's `suspend` keyword on method signatures."
msgstr "以下扩展通过允许在方法签名上使用Kotlin的 `suspend` 关键字，为Kotlin Coroutines提供支持。"

#. type: Table
#: upstream/_guides/kotlin.adoc:461
#, no-wrap
msgid "Extension"
msgstr "扩展"

#. type: Table
#: upstream/_guides/kotlin.adoc:463
#, no-wrap
msgid "Comments"
msgstr "备注"

#. type: Table
#: upstream/_guides/kotlin.adoc:464
#, no-wrap
msgid "`quarkus-resteasy-reactive`"
msgstr "`quarkus-resteasy-reactive`"

#. type: Table
#: upstream/_guides/kotlin.adoc:466
#, no-wrap
msgid "Support is provided for JAX-RS Resource Methods"
msgstr "为JAX-RS Resource方法提供支持"

#. type: Table
#: upstream/_guides/kotlin.adoc:467
#, no-wrap
msgid "`quarkus-rest-client-reactive`"
msgstr "`quarkus-rest-client-reactive`"

#. type: Table
#: upstream/_guides/kotlin.adoc:469
#, no-wrap
msgid "Support is provided for REST Client interface methods"
msgstr "为REST客户端接口方法提供支持"

#. type: Table
#: upstream/_guides/kotlin.adoc:470
#, no-wrap
msgid "`quarkus-smallrye-reactive-messaging`"
msgstr "`quarkus-smallrye-reactive-messaging`"

#. type: Table
#: upstream/_guides/kotlin.adoc:472
#, no-wrap
msgid "Support is provided for Reactive messaging methods"
msgstr "提供对响应式信息传递方法的支持"

#. type: Table
#: upstream/_guides/kotlin.adoc:473
#, no-wrap
msgid "`quarkus-scheduler`"
msgstr "`quarkus-scheduler`"

#. type: Table
#: upstream/_guides/kotlin.adoc:475
#, no-wrap
msgid "Support is provided for scheduler methods"
msgstr "为调度器方法提供支持"

#. type: Table
#: upstream/_guides/kotlin.adoc:476
#, no-wrap
msgid "`quarkus-smallrye-fault-tolerance`"
msgstr "`quarkus-smallrye-fault-tolerance`"

#. type: Table
#: upstream/_guides/kotlin.adoc:478
#, no-wrap
msgid "Support is provided for the declarative annotation-based API"
msgstr "对基于声明性注解的API提供支持"

#. type: Title ===
#: upstream/_guides/kotlin.adoc:480
#, no-wrap
msgid "Kotlin coroutines and Mutiny"
msgstr "Kotlin coroutines和Mutiny"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:484
msgid "Kotlin coroutines provide an imperative programming model that actually gets executed in an asynchronous, reactive manner.  To simplify the interoperability between Mutiny and Kotlin there is the module `io.smallrye.reactive:mutiny-kotlin`, described link:https://smallrye.io/smallrye-mutiny/guides/kotlin[here]."
msgstr "Kotlin coroutines提供了一个命令式的编程模型，实际上是以异步、响应式的方式执行。这里提供了一个模块 `io.smallrye.reactive:mutiny-kotlin` ，以简化Mutiny和Kotlin之间的互操作性 ，link:https://smallrye.io/smallrye-mutiny/guides/kotlin[在此] 描述。"

#. type: Title ==
#: upstream/_guides/kotlin.adoc:485
#, no-wrap
msgid "CDI @Inject with Kotlin"
msgstr "使用Kotlin的CDI @Inject"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:489
msgid "Kotlin reflection annotation processing differs from Java.  You may experience an error when using CDI @Inject such as: \"kotlin.UninitializedPropertyAccessException: lateinit property xxx has not been initialized\""
msgstr "Kotlin的反射注解处理与Java不同。在使用CDI @Inject时，您可能会遇到错误，比如。\"kotlin.UninitializedPropertyAccessException: lateinit property xxx has not been initialized\""

#. type: Plain text
#: upstream/_guides/kotlin.adoc:491
msgid "In the example below, this can be easily solved by adapting the annotation, adding @field: Default, to handle the lack of a @Target on the Kotlin reflection annotation definition."
msgstr "在下面的示例中，通过调整注解，添加@field:Default来处理Kotlin反射注解定义中缺少@Target，就可以很容易地解决这一问题。"

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:497
#, no-wrap
msgid ""
"import javax.inject.Inject\n"
"import javax.enterprise.inject.Default\n"
"import javax.enterprise.context.ApplicationScoped\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:507
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class GreetingService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:511
#, no-wrap
msgid ""
"    fun greeting(name: String): String {\n"
"        return \"hello $name\"\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:516
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"class ReactiveGreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:520
#, no-wrap
msgid ""
"    @Inject\n"
"    @field: Default // <1> \n"
"    lateinit var service: GreetingService\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:527 upstream/_guides/kotlin.adoc:561
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"/hello/{name}\")\n"
"    fun greeting(name: String): String {\n"
"        return service.greeting(name)\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kotlin.adoc:531
msgid "Kotlin requires a @field: xxx qualifier as it has no @Target on the annotation definition. Add @field: xxx in this example. @Default is used as the qualifier, explicitly specifying the use of the default bean."
msgstr "Kotlin需要一个@field:xxx 限定符，因为它在注解定义上没有@Target。在此示例中添加@field: xxx 。@Default作为限定符，显式指定使用默认bean。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:533
msgid "Alternatively, prefer the use of constructor injection which works without modification of the Java examples, increases testability and complies best to a Kotlin programming style."
msgstr "或者，更喜欢使用构造函数注入，它可以在不修改Java示例的情况下工作，提高可测试性，并且最符合Kotlin编程风格。"

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:537
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:549
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class GreetingService {\n"
"    fun greeting(name: String): String {\n"
"        return \"hello $name\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:554
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"class ReactiveGreetingResource(\n"
"    private val service: GreetingService\n"
") {\n"
msgstr ""
