# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/kotlin.adoc:6
#, fuzzy, no-wrap
msgid "Using Kotlin"
msgstr "使用Kotlin"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:12
#, fuzzy
msgid "https://kotlinlang.org/[Kotlin] is a very popular programming language that targets the JVM (amongst other environments). Kotlin has experienced a surge in popularity the last few years making it the most popular JVM language, except for Java of course."
msgstr "link:https://kotlinlang.org/[Kotlin] 是一种非常流行的编程语言，以JVM为目标（在其他环境中）。在过去的几年里，Kotlin的受欢迎程度激增，使其成为最受欢迎的JVM语言，当然，除了Java之外。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:14
#, fuzzy
msgid "Quarkus provides first class support for using Kotlin as will be explained in this guide."
msgstr "Quarkus为使用Kotlin提供了一流的支持，这将在本指南中解释。"

#. type: Title ==
#: upstream/_guides/kotlin.adoc:17
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:22
#, fuzzy
msgid "NB: For Gradle project setup please see below, and for further reference consult the guide in the xref:gradle-tooling.adoc[Gradle setup page]."
msgstr "注意：关于Gradle项目的设置，请见下文，如需进一步参考，请查阅 link:gradle-tooling.html[Gradle设置页面] 的指南。"

#. type: Title ==
#: upstream/_guides/kotlin.adoc:23
#, fuzzy, no-wrap
msgid "Creating the Maven project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:26
#, fuzzy
msgid "First, we need a new Kotlin project. This can be done using the following command:"
msgstr "首先，我们需要一个新的Kotlin项目。这可以通过以下命令来完成。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:35
#, fuzzy
msgid "When adding `kotlin` to the extensions list, the Maven plugin will generate a project that is properly configured to work with Kotlin. Furthermore the `org.acme.ReactiveGreetingResource` class is implemented as Kotlin source code (as is the case with the generated tests).  The addition of `resteasy-reactive-jackson` in the extension list results in importing the RESTEasy Reactive and Jackson extensions."
msgstr "将 `kotlin` 添加到扩展列表后，Maven插件将生成一个经过正确配置的项目，以便与Kotlin一起工作。此外， `org.acme.ReactiveGreetingResource` 类被实现为Kotlin源代码（与生成的测试一样）。在扩展列表中添加 `resteasy-reactive-jackson` ，会导入RESTEasy Reactive和Jackson扩展。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:37
#, fuzzy
msgid "`ReactiveGreetingResource.kt` looks like this:"
msgstr " `ReactiveGreetingResource.kt` 看起来像这样。"

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:41
#, no-wrap
msgid "package org.acme\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:46 upstream/_guides/kotlin.adoc:446
#: upstream/_guides/kotlin.adoc:486
#, no-wrap
msgid ""
"import javax.ws.rs.GET\n"
"import javax.ws.rs.Path\n"
"import javax.ws.rs.Produces\n"
"import javax.ws.rs.core.MediaType\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:49
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"class ReactiveGreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:54
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    fun hello() = \"Hello from RESTEasy Reactive\"\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/kotlin.adoc:56
#, fuzzy, no-wrap
msgid "Update code"
msgstr "更新代码"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:59
#, fuzzy
msgid "In order to show a more practical example of Kotlin usage we will add a simple link:https://kotlinlang.org/docs/reference/data-classes.html[data class] called `Greeting.kt` like so:"
msgstr "为了展示一个更实际的Kotlin使用例子，我们将像这样添加一个简单的 link:https://kotlinlang.org/docs/reference/data-classes.html[数据类] ，叫做 `Greeting.kt` 。"

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:63
#, no-wrap
msgid "package org.acme.rest\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:65
#, no-wrap
msgid "data class Greeting(val message: String = \"\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kotlin.adoc:68
#, fuzzy
msgid "We also update the `ReactiveGreetingResource.kt` like so:"
msgstr "我们还像这样更新 `ReactiveGreetingResource.kt` 。"

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:74
#, no-wrap
msgid ""
"import javax.ws.rs.GET\n"
"import javax.ws.rs.Path\n"
"import javax.ws.rs.core.MediaType\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:77
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"class GreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:81
#, no-wrap
msgid ""
"    @GET\n"
"    fun hello() = Greeting(\"hello\")\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kotlin.adoc:84
#, fuzzy
msgid "With these changes in place the `/hello` endpoint will reply with a JSON object instead of a simple String."
msgstr "有了这些变化， `/hello` 端点将用一个JSON对象而不是一个简单的字符串来回复。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:86
#, fuzzy
msgid "To make the test pass, we also need to update `ReactiveGreetingResourceTest.kt` like so:"
msgstr "为了使测试通过，我们还需要像这样更新 `ReactiveGreetingResourceTest.kt` 。"

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:90
#, no-wrap
msgid "import org.hamcrest.Matchers.equalTo\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:93
#, no-wrap
msgid ""
"@QuarkusTest\n"
"class ReactiveGreetingResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:102
#, no-wrap
msgid ""
"    @Test\n"
"    fun testHelloEndpoint() {\n"
"        given()\n"
"          .`when`().get(\"/hello\")\n"
"          .then()\n"
"             .statusCode(200)\n"
"             .body(\"message\", equalTo(\"hello\"))\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:104 upstream/_guides/kotlin.adoc:457
#: upstream/_guides/kotlin.adoc:473 upstream/_guides/kotlin.adoc:507
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/kotlin.adoc:106
#, fuzzy, no-wrap
msgid "Important Maven configuration points"
msgstr "重要的Maven配置点"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:109
#, fuzzy
msgid "The generated `pom.xml` contains the following modifications compared to its counterpart when Kotlin is not selected:"
msgstr "与不选择Kotlin时的对应内容相比，生成的 `pom.xml` ，包含以下修改。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:111 upstream/_guides/kotlin.adoc:174
#, fuzzy
msgid "The `quarkus-kotlin` artifact is added to the dependencies. This artifact provides support for Kotlin in the live reload mode (more about this later on)"
msgstr " `quarkus-kotlin` artifact被添加到依赖项中。这个工件提供了对实时重载模式下的Kotlin的支持（后面会有更多关于这个的介绍）"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:112 upstream/_guides/kotlin.adoc:175
#, fuzzy
msgid "The `kotlin-stdlib-jdk8` is also added as a dependency."
msgstr " `kotlin-stdlib-jdk8` 也被添加为一个依赖项。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:113
#, fuzzy
msgid "Maven's `sourceDirectory` and `testSourceDirectory` build properties are configured to point to Kotlin sources (`src/main/kotlin` and `src/test/kotlin` respectively)"
msgstr "Maven的 `sourceDirectory` 和 `testSourceDirectory` 构建属性被配置为指向Kotlin源( `src/main/kotlin` 和 `src/test/kotlin` )"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:114
#, fuzzy
msgid "The `kotlin-maven-plugin` is configured as follows:"
msgstr " `kotlin-maven-plugin` ，其配置如下。"

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:139
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>kotlin-maven-plugin</artifactId>\n"
"    <groupId>org.jetbrains.kotlin</groupId>\n"
"    <version>${kotlin.version}</version>\n"
"    <executions>\n"
"        <execution>\n"
"            <id>compile</id>\n"
"            <goals>\n"
"                <goal>compile</goal>\n"
"            </goals>\n"
"        </execution>\n"
"        <execution>\n"
"            <id>test-compile</id>\n"
"            <goals>\n"
"                <goal>test-compile</goal>\n"
"            </goals>\n"
"        </execution>\n"
"    </executions>\n"
"    <configuration>\n"
"        <compilerPlugins>\n"
"            <plugin>all-open</plugin>\n"
"        </compilerPlugins>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:145
#, no-wrap
msgid ""
"        <pluginOptions>\n"
"            <!-- Each annotation is placed on its own line -->\n"
"            <option>all-open:annotation=javax.ws.rs.Path</option>\n"
"        </pluginOptions>\n"
"    </configuration>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:154
#, no-wrap
msgid ""
"    <dependencies>\n"
"        <dependency>\n"
"            <groupId>org.jetbrains.kotlin</groupId>\n"
"            <artifactId>kotlin-maven-allopen</artifactId>\n"
"            <version>${kotlin.version}</version>\n"
"        </dependency>\n"
"    </dependencies>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kotlin.adoc:158
#, fuzzy
msgid "The important thing to note is the use of the https://kotlinlang.org/docs/reference/compiler-plugins.html#all-open-compiler-plugin[all-open] Kotlin compiler plugin.  In order to understand why this plugin is needed, first we need to note that by default all the classes generated from the Kotlin compiler are marked as `final`."
msgstr "需要注意的是，使用 link:https://kotlinlang.org/docs/reference/compiler-plugins.html#all-open-compiler-plugin[全开放] 的Kotlin编译器插件。为了理解为什么需要这个插件，首先我们需要注意，默认情况下，所有从Kotlin编译器生成的类都被标记为 `final` 。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:160
#, fuzzy
msgid "Having `final` classes however does not work well with various frameworks that need to create https://docs.oracle.com/javase/8/docs/technotes/guides/reflection/proxy.html[Dynamic Proxies]."
msgstr "然而，拥有 `final` 类并不能很好地与需要创建 link:https://docs.oracle.com/javase/8/docs/technotes/guides/reflection/proxy.html[动态] 代理的各种框架合作。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:163
#, fuzzy
msgid "Thus, the `all-open` Kotlin compiler plugin allows us to configure the compiler to *not* mark as `final` classes that have certain annotations. In the snippet above, we have specified that classes annotated with `javax.ws.rs.Path` should not be `final`."
msgstr "因此， `all-open` Kotlin编译器插件允许我们对编译器进行配置，使其 *不* 将有某些注释的类标记为 `final` 。在上面的片段中，我们已经指定了用 `javax.ws.rs.Path` 注释的类不应该是 `final` 。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:166
#, fuzzy
msgid "If your application contains classes annotated with `javax.enterprise.context.ApplicationScoped` for example, then `<option>all-open:annotation=javax.enterprise.context.ApplicationScoped</option>` needs to be added as well. Same goes for any class that needs to have a dynamic proxy created at runtime."
msgstr "例如，如果你的应用程序包含了用 `javax.enterprise.context.ApplicationScoped` 注释的类，那么也需要添加 `<option>all-open:annotation=javax.enterprise.context.ApplicationScoped</option>` 。任何需要在运行时创建动态代理的类也是如此。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:168
#, fuzzy
msgid "Future versions of Quarkus will configure the Kotlin compiler plugin in a way that will make it unnecessary to alter this configuration."
msgstr "Quarkus的未来版本将以一种方式配置Kotlin编译器插件，从而使其不需要改变这种配置。"

#. type: Title ==
#: upstream/_guides/kotlin.adoc:169
#, fuzzy, no-wrap
msgid "Important Gradle configuration points"
msgstr "重要的Gradle配置点"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:172
#, fuzzy
msgid "Similar to the Maven configuration, when using Gradle, the following modifications are required when Kotlin is selected:"
msgstr "与Maven的配置类似，在使用Gradle时，如果选择了Kotlin，则需要做以下修改。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:176
#, fuzzy
msgid "The Kotlin plugin is activated, which implicitly adds `sourceDirectory` and `testSourceDirectory` build properties to point to Kotlin sources (`src/main/kotlin` and `src/test/kotlin` respectively)"
msgstr "Kotlin插件被激活，它隐含地添加了 `sourceDirectory` 和 `testSourceDirectory` 构建属性，以指向Kotlin源( `src/main/kotlin` 和 `src/test/kotlin` )"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:177
#, fuzzy
msgid "The all-open Kotlin plugin tells the compiler not to mark as final, those classes with the annotations highlighted (customize as required)"
msgstr "全开放的Kotlin插件告诉编译器不要把那些有注解的类标记为最终类（根据需要自定义）。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:178
#, fuzzy
msgid "When using native-image, the use of http (or https) protocol(s) must be declared"
msgstr "当使用native-image时，必须声明使用http（或https）协议（s）。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:179
#, fuzzy
msgid "An example configuration follows:"
msgstr "下面是一个配置实例。"

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:185
#, no-wrap
msgid ""
"plugins {\n"
"    id 'java'\n"
"    id 'io.quarkus' \n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:189
#, no-wrap
msgid ""
"    id \"org.jetbrains.kotlin.jvm\" version \"{kotlin-version}\" // <1>\n"
"    id \"org.jetbrains.kotlin.plugin.allopen\" version \"{kotlin-version}\" // <1>\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:194 upstream/_guides/kotlin.adoc:249
#: upstream/_guides/kotlin.adoc:262
#, no-wrap
msgid ""
"repositories {\n"
"    mavenLocal()\n"
"    mavenCentral()\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:197
#, no-wrap
msgid ""
"dependencies { \n"
"    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:{kotlin-version}'\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:199
#, no-wrap
msgid "   implementation enforcedPlatform(\"${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}\")\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:203
#, no-wrap
msgid ""
"    implementation 'io.quarkus:quarkus-resteasy-reactive'\n"
"    implementation 'io.quarkus:quarkus-resteasy-reactive-jackson'\n"
"    implementation 'io.quarkus:quarkus-kotlin'\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:207
#, no-wrap
msgid ""
"    testImplementation 'io.quarkus:quarkus-junit5'\n"
"    testImplementation 'io.rest-assured:rest-assured'\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:210
#, no-wrap
msgid ""
"group = '...' // set your group\n"
"version = '1.0.0-SNAPSHOT'\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:215 upstream/_guides/kotlin.adoc:283
#, no-wrap
msgid ""
"java {\n"
"    sourceCompatibility = JavaVersion.VERSION_11\n"
"    targetCompatibility = JavaVersion.VERSION_11\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:221 upstream/_guides/kotlin.adoc:289
#, no-wrap
msgid ""
"allOpen { // <2>\n"
"    annotation(\"javax.ws.rs.Path\")\n"
"    annotation(\"javax.enterprise.context.ApplicationScoped\")\n"
"    annotation(\"io.quarkus.test.junit.QuarkusTest\")\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:226
#, no-wrap
msgid ""
"compileKotlin {\n"
"    kotlinOptions.jvmTarget = JavaVersion.VERSION_11\n"
"    kotlinOptions.javaParameters = true\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:230
#, no-wrap
msgid ""
"compileTestKotlin {\n"
"    kotlinOptions.jvmTarget = JavaVersion.VERSION_11\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kotlin.adoc:233 upstream/_guides/kotlin.adoc:298
#, fuzzy
msgid "The Kotlin plugin version needs to be specified."
msgstr "需要指定Kotlin插件的版本。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:234 upstream/_guides/kotlin.adoc:299
#, fuzzy
msgid "The all-open configuration required, as per Maven guide above"
msgstr "按照上面的Maven指南，需要全开放的配置"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:236
#, fuzzy
msgid "or, if you use the Gradle Kotlin DSL:"
msgstr "或者，如果你使用Gradle Kotlin DSL。"

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:244
#, no-wrap
msgid ""
"plugins {\n"
"    kotlin(\"jvm\") version \"{kotlin-version}\" // <1>\n"
"    kotlin(\"plugin.allopen\") version \"{kotlin-version}\"\n"
"    id(\"io.quarkus\")\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:253
#, no-wrap
msgid ""
"val quarkusPlatformGroupId: String by project\n"
"val quarkusPlatformArtifactId: String by project\n"
"val quarkusPlatformVersion: String by project\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:256
#, no-wrap
msgid ""
"group = \"...\"\n"
"version = \"1.0.0-SNAPSHOT\"\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:265
#, no-wrap
msgid ""
"dependencies {\n"
"    implementation(kotlin(\"stdlib-jdk8\"))\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:267
#, no-wrap
msgid "    implementation(enforcedPlatform(\"${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}\"))\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:271
#, no-wrap
msgid ""
"    implementation(\"io.quarkus:quarkus-kotlin\")\n"
"    implementation(\"io.quarkus:quarkus-resteasy-reactive\")\n"
"    implementation(\"io.quarkus:quarkus-resteasy-reactive-jackson\")\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:275
#, no-wrap
msgid ""
"    testImplementation(\"io.quarkus:quarkus-junit5\")\n"
"    testImplementation(\"io.rest-assured:rest-assured\")\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:278
#, no-wrap
msgid ""
"group = '...' // set your group\n"
"version = \"1.0.0-SNAPSHOT\"\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:294
#, no-wrap
msgid ""
"tasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile> {\n"
"    kotlinOptions.jvmTarget = JavaVersion.VERSION_11.toString()\n"
"    kotlinOptions.javaParameters = true\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/kotlin.adoc:302
#, fuzzy, no-wrap
msgid "Live reload"
msgstr "实时重装"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:306
#, fuzzy
msgid "Quarkus provides support for live reloading changes made to source code. This support is also available to Kotlin, meaning that developers can update their Kotlin source code and immediately see their changes reflected."
msgstr "Quarkus提供了对源代码的实时重载修改的支持。这种支持也适用于Kotlin，这意味着开发者可以更新他们的Kotlin源代码，并立即看到他们的变化得到反映。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:308
#, fuzzy
msgid "To see this feature in action, first execute:"
msgstr "要看到这个功能的作用，首先要执行。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:312
#, fuzzy
msgid "When executing an HTTP GET request against `http://localhost:8080/hello`, you see a JSON message with the value `hello` as its `message` field."
msgstr "当执行一个HTTP GET请求时，针对 `<a href=\"http://localhost:8080/hello\" class=\"bare\">http://localhost:8080/hello</a>` 的请求时，你会看到一个JSON消息，其 `message` 字段的值是 `hello` 。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:314
#, fuzzy
msgid "Now using your favorite editor or IDE, update `ReactiveGreetingResource.kt` and change the `hello` method to the following:"
msgstr "现在使用你最喜欢的编辑器或IDE，更新 `ReactiveGreetingResource.kt` ，并将 `hello` 方法改为如下。"

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:318
#, no-wrap
msgid "fun hello() = Greeting(\"hi\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kotlin.adoc:321
#, fuzzy
msgid "When you now execute an HTTP GET request against `http://localhost:8080/hello`, you should see a JSON message with the value `hi` as its `message` field."
msgstr "当你现在执行一个HTTP GET请求时，你应该看到一个JSON消息，其字段为。 `<a href=\"http://localhost:8080/hello\" class=\"bare\">http://localhost:8080/hello</a>` 的请求时，你应该看到一个JSON消息，其 `message` 字段的值是 `hi` 。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:323
#, fuzzy
msgid "One thing to note is that the live reload feature is not available when making changes to both Java and Kotlin source that have dependencies on each other. We hope to alleviate this limitation in the future."
msgstr "有一点需要注意的是，当对相互有依赖关系的Java和Kotlin源代码进行修改时，实时重载功能是不可用的。我们希望在未来能缓解这一限制。"

#. type: Title ==
#: upstream/_guides/kotlin.adoc:324
#, fuzzy, no-wrap
msgid "Packaging the application"
msgstr "包装应用程序"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:327
#, fuzzy
msgid "As usual, the application can be packaged using:"
msgstr "像往常一样，该应用程序可以用以下方式打包。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:331
#, fuzzy
msgid "and executed with `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr "并以 `java -jar target/quarkus-app/quarkus-run.jar` 。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:333
#, fuzzy
msgid "You can also build the native executable using:"
msgstr "你也可以用以下方法构建本地可执行文件。"

#. type: Title ==
#: upstream/_guides/kotlin.adoc:336
#, fuzzy, no-wrap
msgid "Kotlin and Jackson"
msgstr "Kotlin和Jackson"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:340
#, fuzzy
msgid "If the `com.fasterxml.jackson.module:jackson-module-kotlin` dependency and the `quarkus-jackson` extension (or one of the `quarkus-resteasy-jackson` or `quarkus-resteasy-reactive-jackson` extensions) have been added to the project, then Quarkus automatically registers the `KotlinModule` to the `ObjectMapper` bean (see xref:rest-json.adoc#jackson[this] guide for more details)."
msgstr "如果 `com.fasterxml.jackson.module:jackson-module-kotlin` 依赖关系和 `quarkus-jackson` 扩展（或 `quarkus-resteasy-jackson` 或 `quarkus-resteasy-reactive-jackson` 扩展之一）已经被添加到项目中，那么 Quarkus 会自动将 `KotlinModule` 注册到 `ObjectMapper` Bean 中（更多细节请参见 link:rest-json.html#jackson[本] 指南）。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:342
#, fuzzy
msgid "When using Kotlin data classes with `native-image` you may experience serialization errors that do not occur with the `JVM` version, despite the Kotlin Jackson Module being registered. This is especially so if you have a more complex JSON hierarchy, where an issue on a lower node causes a serialization failure. The error message displayed is a catch-all and typically displays an issue with the root object, which may not necessarily be the case."
msgstr "当使用Kotlin数据类与 `native-image` ，你可能会遇到序列化错误，尽管Kotlin Jackson模块已被注册，但在 `JVM` 版本中不会出现。如果你有一个更复杂的JSON层次结构，其中较低节点上的问题会导致序列化失败，那就更是如此。显示的错误信息是一个全面的，通常显示根对象的问题，但情况不一定如此。"

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:346
#, no-wrap
msgid "com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot construct instance of `Address` (no Creators, like default construct, exist): cannot deserialize from Object value (no delegate- or property-based Creator)\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kotlin.adoc:349
#, fuzzy
msgid "To ensure full-compability with `native-image`, it is recommended to apply the Jackson `@field:JsonProperty(\"fieldName\")` annotation, and set a nullable default, as illustrated below. You can automate the generation of Kotlin data classes for your sample JSON using Intellij plugins (such as JSON to Kotlin Class), and easily enable the Jackson annotation and select nullable parameters as part of the auto-code generation."
msgstr "为了确保与 `native-image` 的完全兼容性，建议应用Jackson `@field:JsonProperty(\"fieldName\")` 注解，并设置一个nullable默认值，如下图所示。你可以使用Intellij插件（如JSON to Kotlin Class）为你的样本JSON自动生成Kotlin数据类，并轻松启用Jackson注解和选择可忽略的参数作为自动代码生成的一部分。"

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:353
#, no-wrap
msgid "import com.fasterxml.jackson.annotation.JsonProperty\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:358
#, no-wrap
msgid ""
"data class Response(\n"
"\t@field:JsonProperty(\"chart\")\n"
"\tval chart: ChartData? = null\n"
")\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:362
#, no-wrap
msgid ""
"data class ChartData(\n"
"\t@field:JsonProperty(\"result\")\n"
"\tval result: List<ResultItem?>? = null,\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:366
#, no-wrap
msgid ""
"\t@field:JsonProperty(\"error\")\n"
"\tval error: Any? = null\n"
")\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:370
#, no-wrap
msgid ""
"data class ResultItem(\n"
"\t@field:JsonProperty(\"meta\")\n"
"\tval meta: Meta? = null,\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:373
#, no-wrap
msgid ""
"\t@field:JsonProperty(\"indicators\")\n"
"\tval indicators: IndicatorItems? = null,\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:377
#, no-wrap
msgid ""
"\t@field:JsonProperty(\"timestamp\")\n"
"\tval timestamp: List<Int?>? = null\n"
")\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:379 upstream/_guides/kotlin.adoc:391
#, no-wrap
msgid "...\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/kotlin.adoc:381
#, fuzzy, no-wrap
msgid "Kotlin and the Kubernetes Client"
msgstr "Kotlin和Kubernetes客户端"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:384
#, fuzzy
msgid "When working with the `quarkus-kubernetes` extension and have Kotlin classes bound to CustomResource definitions (like you do for building operators), you need to be aware that the underlying Fabric8 Kubernetes Client uses its own static Jackson `ObjectMapper` s, which can be configured as follows with the `KotlinModule`:"
msgstr "当使用 `quarkus-kubernetes` 扩展并让Kotlin类绑定到CustomResource定义时（就像你在构建操作符时一样），你需要注意底层的Fabric8 Kubernetes客户端使用它自己的静态Jackson `ObjectMapper` s，这可以通过 `KotlinModule` 。"

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:389
#, no-wrap
msgid ""
"import io.fabric8.kubernetes.client.utils.Serialization\n"
"import com.fasterxml.jackson.module.kotlin.KotlinModule\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:394
#, no-wrap
msgid ""
"Serialization.jsonMapper().registerModule(KotlinModule())\n"
"Serialization.yamlMapper().registerModule(KotlinModule())\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kotlin.adoc:397
#, fuzzy
msgid "_Please test this carefully on compilation to native images and fallback to Java-compatible Jackson bindings if you experience problems._"
msgstr " _请在编译到本地图像时仔细测试，如果遇到问题，请退回到与Java兼容的杰克逊绑定。_ "

#. type: Title ==
#: upstream/_guides/kotlin.adoc:398
#, fuzzy, no-wrap
msgid "Coroutines support"
msgstr "支持 Coroutines"

#. type: Title ===
#: upstream/_guides/kotlin.adoc:400
#, fuzzy, no-wrap
msgid "Extensions"
msgstr "延伸"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:403
#, fuzzy
msgid "The following extensions provide support for Kotlin Coroutines by allowing the use of Kotlin's `suspend` keyword on method signatures."
msgstr "以下扩展通过允许在方法签名上使用Kotlin的 `suspend` 关键字，为Kotlin Coroutines提供支持。"

#. type: Table
#: upstream/_guides/kotlin.adoc:405
#, fuzzy, no-wrap
msgid "Extension"
msgstr "延伸"

#. type: Table
#: upstream/_guides/kotlin.adoc:407
#, fuzzy, no-wrap
msgid "Comments"
msgstr "评论"

#. type: Table
#: upstream/_guides/kotlin.adoc:408
#, fuzzy, no-wrap
msgid "`quarkus-resteasy-reactive`"
msgstr " `quarkus-resteasy-reactive` "

#. type: Table
#: upstream/_guides/kotlin.adoc:410
#, fuzzy, no-wrap
msgid "Support is provided for JAX-RS Resource Methods"
msgstr "为JAX-RS资源方法提供支持"

#. type: Table
#: upstream/_guides/kotlin.adoc:411
#, fuzzy, no-wrap
msgid "`quarkus-rest-client-reactive`"
msgstr " `quarkus-rest-client-reactive` "

#. type: Table
#: upstream/_guides/kotlin.adoc:413
#, fuzzy, no-wrap
msgid "Support is provided for REST Client interface methods"
msgstr "为REST客户端接口方法提供支持"

#. type: Table
#: upstream/_guides/kotlin.adoc:414
#, fuzzy, no-wrap
msgid "`quarkus-smallrye-reactive-messaging`"
msgstr " `quarkus-smallrye-reactive-messaging` "

#. type: Table
#: upstream/_guides/kotlin.adoc:416
#, fuzzy, no-wrap
msgid "Support is provided for Reactive messaging methods"
msgstr "提供对反应式信息传递方法的支持"

#. type: Table
#: upstream/_guides/kotlin.adoc:417
#, fuzzy, no-wrap
msgid "`quarkus-scheduler`"
msgstr " `quarkus-scheduler` "

#. type: Table
#: upstream/_guides/kotlin.adoc:419
#, fuzzy, no-wrap
msgid "Support is provided for scheduler methods"
msgstr "为调度器方法提供支持"

#. type: Table
#: upstream/_guides/kotlin.adoc:420
#, fuzzy, no-wrap
msgid "`quarkus-smallrye-fault-tolerance`"
msgstr " `quarkus-smallrye-fault-tolerance` "

#. type: Table
#: upstream/_guides/kotlin.adoc:422
#, fuzzy, no-wrap
msgid "Support is provided for the declarative annotation-based API"
msgstr "对基于声明性注释的API提供支持"

#. type: Title ===
#: upstream/_guides/kotlin.adoc:424
#, fuzzy, no-wrap
msgid "Kotlin coroutines and Mutiny"
msgstr "Kotlin coroutines和Mutiny"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:428
#, fuzzy
msgid "Kotlin coroutines provide an imperative programming model that actually gets executed in an asynchronous, reactive manner.  To simplify the interoperability between Mutiny and Kotlin there is the module `io.smallrye.reactive:mutiny-kotlin`, described link:https://smallrye.io/smallrye-mutiny/guides/kotlin[here]."
msgstr "Kotlin coroutines提供了一个命令式的编程模型，实际上是以异步、反应式的方式执行。为了简化Mutiny和Kotlin之间的互操作性，有一个模块 `io.smallrye.reactive:mutiny-kotlin` ， link:https://smallrye.io/smallrye-mutiny/guides/kotlin[在此] 描述。"

#. type: Title ==
#: upstream/_guides/kotlin.adoc:429
#, no-wrap
msgid "CDI @Inject with Kotlin"
msgstr ""

#. type: Plain text
#: upstream/_guides/kotlin.adoc:433
msgid "Kotlin reflection annotation processing differs from Java.  You may experience an error when using CDI @Inject such as: \"kotlin.UninitializedPropertyAccessException: lateinit property xxx has not been initialized\""
msgstr ""

#. type: Plain text
#: upstream/_guides/kotlin.adoc:435
msgid "In the example below, this can be easily solved by adapting the annotation, adding @field: Default, to handle the lack of a @Target on the Kotlin reflection annotation definition."
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:441
#, no-wrap
msgid ""
"import javax.inject.Inject\n"
"import javax.enterprise.inject.Default\n"
"import javax.enterprise.context.ApplicationScoped\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:451
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class GreetingService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:455
#, no-wrap
msgid ""
"    fun greeting(name: String): String {\n"
"        return \"hello $name\"\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:460
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"class ReactiveGreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:464
#, no-wrap
msgid ""
"    @Inject\n"
"    @field: Default // <1> \n"
"    lateinit var service: GreetingService\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:471 upstream/_guides/kotlin.adoc:505
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"/hello/{name}\")\n"
"    fun greeting(name: String): String {\n"
"        return service.greeting(name)\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kotlin.adoc:475
msgid "Kotlin requires a @field: xxx qualifier as it has no @Target on the annotation definition. Add @field: xxx in this example. @Default is used as the qualifier, explicitly specifying the use of the default bean."
msgstr ""

#. type: Plain text
#: upstream/_guides/kotlin.adoc:477
msgid "Alternatively, prefer the use of constructor injection which works without modification of the Java examples, increases testability and complies best to a Kotlin programming style."
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:481
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:493
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class GreetingService {\n"
"    fun greeting(name: String): String {\n"
"        return \"hello $name\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:498
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"class ReactiveGreetingResource(\n"
"    private val service: GreetingService\n"
") {\n"
msgstr ""
