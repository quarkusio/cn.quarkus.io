# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security-customization.adoc:6
#, fuzzy, no-wrap
msgid "Security Tips and Tricks"
msgstr "安全技巧和窍门"

#. type: Title ==
#: upstream/_guides/security-customization.adoc:10
#, fuzzy, no-wrap
msgid "Quarkus Security Dependency"
msgstr "Quarkus安全依赖性"

#. type: Plain text
#: upstream/_guides/security-customization.adoc:13
#, fuzzy
msgid "`io.quarkus:quarkus-security` module contains the core Quarkus security classes."
msgstr " `io.quarkus:quarkus-security` 模块包含Quarkus的核心安全类。"

#. type: Plain text
#: upstream/_guides/security-customization.adoc:16
#, fuzzy
msgid "In most cases, it does not have to be added directly to your project's build file as it is already provided by all of the security extensions.  However, if you need to write your own custom security code (for example, register a <<jaxrs-security-context, Custom JAX-RS SecurityContext>>) or use <<bouncy-castle, BouncyCastle>> libraries, then please make sure it is included:"
msgstr "在大多数情况下，它不需要直接添加到您项目的构建文件中，因为所有的安全扩展都已经提供了它。但是，如果你需要编写自己的自定义安全代码（例如，注册一个 link:#jaxrs-security-context[自定义JAX-RS SecurityContext] ）或使用 link:#bouncy-castle[BouncyCastle] 库，那么请确保它被包含在内。"

#. type: Block title
#: upstream/_guides/security-customization.adoc:18
#: upstream/_guides/security-customization.adoc:340
#: upstream/_guides/security-customization.adoc:375
#: upstream/_guides/security-customization.adoc:403
#: upstream/_guides/security-customization.adoc:454
#: upstream/_guides/security-customization.adoc:526
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:24
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-security</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/security-customization.adoc:27
#: upstream/_guides/security-customization.adoc:349
#: upstream/_guides/security-customization.adoc:384
#: upstream/_guides/security-customization.adoc:412
#: upstream/_guides/security-customization.adoc:468
#: upstream/_guides/security-customization.adoc:535
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:30
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-security\")\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-customization.adoc:32
#, fuzzy, no-wrap
msgid "HttpAuthenticationMechanism Customization"
msgstr "HttpAuthenticationMechanism定制"

#. type: Plain text
#: upstream/_guides/security-customization.adoc:36
#, fuzzy
msgid "One can customize `HttpAuthenticationMechanism` by registering a CDI implementation bean.  In the example below the custom authenticator delegates to `JWTAuthMechanism` provided by `quarkus-smallrye-jwt`:"
msgstr "人们可以通过注册一个CDI实现bean来定制 `HttpAuthenticationMechanism` 。在下面的例子中，自定义认证器委托给由 `quarkus-smallrye-jwt` 提供的 `JWTAuthMechanism` 。"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:43
#, no-wrap
msgid ""
"@Alternative\n"
"@Priority(1)\n"
"@ApplicationScoped\n"
"public class CustomAwareJWTAuthMechanism implements HttpAuthenticationMechanism {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:45
#: upstream/_guides/security-customization.adoc:91
#, no-wrap
msgid "\tprivate static final Logger LOG = LoggerFactory.getLogger(CustomAwareJWTAuthMechanism.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:48
#, no-wrap
msgid ""
"\t@Inject\n"
"\tJWTAuthMechanism delegate;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:54
#, no-wrap
msgid ""
"\t@Override\n"
"\tpublic Uni<SecurityIdentity> authenticate(RoutingContext context, IdentityProviderManager identityProviderManager) {\n"
"\t    // do some custom action and delegate\t\n"
"            return delegate.authenticate(context, identityProviderManager);\n"
"\t}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:59
#, no-wrap
msgid ""
"\t@Override\n"
"\tpublic Uni<ChallengeData> getChallenge(RoutingContext context) {\n"
"\t\treturn delegate.getChallenge(context);\n"
"\t}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:64
#, no-wrap
msgid ""
"\t@Override\n"
"\tpublic Set<Class<? extends AuthenticationRequest>> getCredentialTypes() {\n"
"\t\treturn delegate.getCredentialTypes();\n"
"\t}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:69
#, no-wrap
msgid ""
"\t@Override\n"
"\tpublic Uni<HttpCredentialTransport> getCredentialTransport() {\n"
"\t\treturn delegate.getCredentialTransport();\n"
"\t}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:71
#: upstream/_guides/security-customization.adoc:127
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-customization.adoc:73
#, fuzzy, no-wrap
msgid "Dealing with more than one HttpAuthenticationMechanism"
msgstr "处理多于一个的HttpAuthenticationMechanism"

#. type: Plain text
#: upstream/_guides/security-customization.adoc:76
#, fuzzy
msgid "More than one `HttpAuthenticationMechanism` can be combined, for example, the built-in `Basic` or `JWT` mechanism provided by `quarkus-smallrye-jwt` has to be used to verify the service clients credentials passed as the HTTP `Authorization` `Basic` or `Bearer` scheme values while the `Authorization Code` mechanism provided by `quarkus-oidc` has to be used to authenticate the users with `Keycloak` or other `OpenId Connect` providers."
msgstr "可以结合多个 `HttpAuthenticationMechanism` ，例如，由 `quarkus-smallrye-jwt` 提供的内置 `Basic` 或 `JWT` 机制必须用于验证作为HTTP `Authorization` `Basic` 或 `Bearer` 方案值传递的服务客户证书，而由 `quarkus-oidc` 提供的 `Authorization Code` 机制必须用于验证用户与 `Keycloak` 或其他 `OpenId Connect` 供应商的关系。"

#. type: Plain text
#: upstream/_guides/security-customization.adoc:78
#, fuzzy
msgid "In such cases the mechanisms are asked to verify the credentials in turn until a `SecurityIdentity` is created. The mechanisms are sorted in the descending order using their priority. `Basic` authentication mechanism has the highest priority of `2000`, followed by the `Authorization Code` one with the priority of `1001`, with all other mechanisms provided by Quarkus having the priority of `1000`."
msgstr "在这种情况下，各机制被要求依次验证证书，直到创建一个 `SecurityIdentity` 。这些机制按其优先级从高到低排序。 `Basic` 认证机制的最高优先级是 `2000` ，其次是 `Authorization Code` ，其优先级是 `1001` ，Quarkus 提供的所有其他机制的优先级是 `1000` 。"

#. type: Plain text
#: upstream/_guides/security-customization.adoc:80
#, fuzzy
msgid "If no credentials are provided then the mechanism specific challenge is created, for example, `401` status is returned by either `Basic` or `JWT` mechanisms, URL redirecting the user to the `OpenId Connect` provider is returned by `quarkus-oidc`, etc."
msgstr "如果没有提供凭证，那么将创建特定机制的挑战，例如， `401` 状态由 `Basic` 或 `JWT` 机制返回，将用户重定向到 `OpenId Connect` 提供商的 URL 由 `quarkus-oidc` 返回，等等。"

#. type: Plain text
#: upstream/_guides/security-customization.adoc:82
#, fuzzy
msgid "So if `Basic` and `Authorization Code` mechanisms are combined then `401` will be returned if no credentials are provided and if `JWT` and `Authorization Code` mechanisms are combined then a redirect URL will be returned."
msgstr "因此，如果 `Basic` 和 `Authorization Code` 机制结合起来，那么如果没有提供凭证，将返回 `401` ，如果 `JWT` 和 `Authorization Code` 机制结合起来，将返回一个重定向 URL。"

#. type: Plain text
#: upstream/_guides/security-customization.adoc:84
#, fuzzy
msgid "In some cases such a default logic of selecting the challenge is exactly what is required by a given application but sometimes it may not meet the requirements. In such cases (or indeed in other similar cases where you'd like to change the order in which the mechanisms are asked to handle the current authentication or challenge request), you can create a custom mechanism and choose which mechanism should create a challenge, for example:"
msgstr "在某些情况下，这种选择挑战的默认逻辑正是特定应用所需要的，但有时它可能不符合要求。在这种情况下（或者确实在其他类似的情况下，你想改变要求机制处理当前认证或挑战请求的顺序），你可以创建一个自定义机制，并选择哪个机制应该创建一个挑战，比如说。"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:89
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomAwareJWTAuthMechanism implements HttpAuthenticationMechanism {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:94
#, no-wrap
msgid ""
"\t@Inject\n"
"\tJWTAuthMechanism jwt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:97
#, no-wrap
msgid ""
"        @Inject\n"
"\tOidcAuthenticationMechanism oidc;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:102
#, no-wrap
msgid ""
"\t@Override\n"
"\tpublic Uni<SecurityIdentity> authenticate(RoutingContext context, IdentityProviderManager identityProviderManager) {\n"
"\t    return selectBetweenJwtAndOidc(context).authenticate(context, identityProviderManager);\n"
"\t}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:107
#, no-wrap
msgid ""
"\t@Override\n"
"\tpublic Uni<ChallengeData> getChallenge(RoutingContext context) {\n"
"\t\treturn selectBetweenJwtAndOidcChallenge(context).getChallenge(context);\n"
"\t}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:112
#, no-wrap
msgid ""
"\t@Override\n"
"\tpublic Set<Class<? extends AuthenticationRequest>> getCredentialTypes() {\n"
"\t\treturn selectBetweenJwtAndOidc(context).getCredentialTypes();\n"
"\t}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:117
#, no-wrap
msgid ""
"\t@Override\n"
"\tpublic HttpCredentialTransport getCredentialTransport(RoutingContext context) {\n"
"\t\treturn selectBetweenJwtAndOidc(context).getCredentialTransport();\n"
"\t}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:121
#, no-wrap
msgid ""
"        private HttpAuthenticationMechanism selectBetweenJwtAndOidc(RoutingContext context) {\n"
"            ....\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:125
#, no-wrap
msgid ""
"        private HttpAuthenticationMechanism selectBetweenJwtAndOidcChallenge(RoutingContext context) {\n"
"            // for example, if no `Authorization` header is available and no `code` parameter is provided - use `jwt` to create a challenge\n"
"        }\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-customization.adoc:130
#, fuzzy, no-wrap
msgid "Security Identity Customization"
msgstr "安全身份定制"

#. type: Plain text
#: upstream/_guides/security-customization.adoc:133
#, fuzzy
msgid "Internally, the identity providers create and update an instance of the `io.quarkus.security.identity.SecurityIdentity` class which holds the principal, roles, credentials which were used to authenticate the client (user) and other security attributes. An easy option to customize `SecurityIdentity` is to register a custom `SecurityIdentityAugmentor`. For example, the augmentor below adds an addition role:"
msgstr "在内部，身份提供者创建和更新 `io.quarkus.security.identity.SecurityIdentity` 类的一个实例，该实例持有委托人、角色、用于验证客户（用户）的凭证和其他安全属性。定制 `SecurityIdentity` 的一个简单选择是注册一个自定义的 `SecurityIdentityAugmentor` 。例如，下面的增强器增加了一个额外的角色。"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:141
#, no-wrap
msgid ""
"import io.quarkus.security.identity.AuthenticationRequestContext;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
"import io.quarkus.security.identity.SecurityIdentityAugmentor;\n"
"import io.quarkus.security.runtime.QuarkusSecurityIdentity;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:144
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import java.util.function.Supplier;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:147
#: upstream/_guides/security-customization.adoc:189
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class RolesAugmentor implements SecurityIdentityAugmentor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:151
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<SecurityIdentity> augment(SecurityIdentity identity, AuthenticationRequestContext context) {\n"
"        return Uni.createFrom().item(build(identity));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:155
#, no-wrap
msgid ""
"        // Do 'return context.runBlocking(build(identity));'\n"
"        // if a blocking call is required to customize the identity\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:162
#, no-wrap
msgid ""
"    private Supplier<SecurityIdentity> build(SecurityIdentity identity) {\n"
"        if(identity.isAnonymous()) {\n"
"            return () -> identity;\n"
"        } else {\n"
"            // create a new builder and copy principal, attributes, credentials and roles from the original identity\n"
"            QuarkusSecurityIdentity.Builder builder = QuarkusSecurityIdentity.builder(identity);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:169
#, no-wrap
msgid ""
"            // add custom role source here\n"
"            builder.addRole(\"dummy\");\n"
"            return builder::build;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-customization.adoc:172
#, fuzzy
msgid "Here is another example showing how to use the client certificate available in the current xref:security-built-in-authentication.adoc#mutual-tls[Mutual TLS] request to add more roles:"
msgstr "这里是另一个例子，显示了如何使用当前 link:security-built-in-authentication.html#mutual-tls[相互TLS] 请求中可用的客户证书来添加更多的角色。"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:182
#, no-wrap
msgid ""
"import java.security.cert.X509Certificate;\n"
"import io.quarkus.security.credential.CertificateCredential;\n"
"import io.quarkus.security.identity.AuthenticationRequestContext;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
"import io.quarkus.security.identity.SecurityIdentityAugmentor;\n"
"import io.quarkus.security.runtime.QuarkusSecurityIdentity;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:186
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import java.util.function.Supplier;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:194
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<SecurityIdentity> augment(SecurityIdentity identity, AuthenticationRequestContext context) {\n"
"        return Uni.createFrom().item(build(identity));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:198
#, no-wrap
msgid ""
"    private Supplier<SecurityIdentity> build(SecurityIdentity identity) {\n"
"        // create a new builder and copy principal, attributes, credentials and roles from the original identity\n"
"        QuarkusSecurityIdentity.Builder builder = QuarkusSecurityIdentity.builder(identity);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:205
#, no-wrap
msgid ""
"        CertificateCredential certificate = identity.getCredential(CertificateCredential.class);\n"
"        if (certificate != null) {\n"
"            builder.addRoles(extractRoles(certificate.getCertificate()));\n"
"        }\n"
"        return builder::build;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:208
#, no-wrap
msgid ""
"    private Set<String> extractRoles(X509Certificate certificate) {\n"
"        String name = certificate.getSubjectX500Principal().getName();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:219
#, no-wrap
msgid ""
"        switch (name) {\n"
"            case \"CN=client\":\n"
"                return Collections.singleton(\"user\");\n"
"            case \"CN=guest-client\":\n"
"                return Collections.singleton(\"guest\");\n"
"            default:\n"
"                return Collections.emptySet();\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-customization.adoc:225
#, fuzzy
msgid "If more than one custom `SecurityIdentityAugmentor` is registered then they will be considered equal candidates and invoked in random order.  You can enforce the order by implementing a default `SecurityIdentityAugmentor#priority` method. Augmentors with higher priorities will be invoked first."
msgstr "如果注册了一个以上的自定义 `SecurityIdentityAugmentor` ，那么它们将被认为是同等的候选者，并按随机顺序调用。你可以通过实现一个默认的 `SecurityIdentityAugmentor#priority` 方法来强制执行这个顺序。具有较高优先级的增强器将被首先调用。"

#. type: Title ==
#: upstream/_guides/security-customization.adoc:228
#, fuzzy, no-wrap
msgid "Custom JAX-RS SecurityContext"
msgstr "自定义JAX-RS安全上下文"

#. type: Plain text
#: upstream/_guides/security-customization.adoc:231
#, fuzzy
msgid "If you use JAX-RS `ContainerRequestFilter` to set a custom JAX-RS `SecurityContext` then make sure `ContainerRequestFilter` runs in the JAX-RS pre-match phase by adding a `@PreMatching` annotation to it for this custom security context to be linked with Quarkus `SecurityIdentity`, for example:"
msgstr "如果你使用 JAX-RS `ContainerRequestFilter` 来设置一个自定义的 JAX-RS `SecurityContext` ，那么请确保 `ContainerRequestFilter` 在 JAX-RS 预匹配阶段运行，为这个自定义的安全上下文添加一个 `@PreMatching` 注释，以便与 Quarkus `SecurityIdentity` 链接，例如。"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:235
#, no-wrap
msgid "import java.security.Principal;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:241
#, no-wrap
msgid ""
"import javax.ws.rs.container.ContainerRequestContext;\n"
"import javax.ws.rs.container.ContainerRequestFilter;\n"
"import javax.ws.rs.container.PreMatching;\n"
"import javax.ws.rs.core.SecurityContext;\n"
"import javax.ws.rs.ext.Provider;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:260
#, no-wrap
msgid ""
"@Provider\n"
"@PreMatching\n"
"public class SecurityOverrideFilter implements ContainerRequestFilter {\n"
"    @Override\n"
"    public void filter(ContainerRequestContext requestContext) throws IOException {\n"
"        String user = requestContext.getHeaders().getFirst(\"User\");\n"
"        String role = requestContext.getHeaders().getFirst(\"Role\");\n"
"        if (user != null && role != null) {\n"
"            requestContext.setSecurityContext(new SecurityContext() {\n"
"                @Override\n"
"                public Principal getUserPrincipal() {\n"
"                    return new Principal() {\n"
"                        @Override\n"
"                        public String getName() {\n"
"                            return user;\n"
"                        }\n"
"                    };\n"
"                }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:265
#, no-wrap
msgid ""
"                @Override\n"
"                public boolean isUserInRole(String r) {\n"
"                    return role.equals(r);\n"
"                }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:270
#, no-wrap
msgid ""
"                @Override\n"
"                public boolean isSecure() {\n"
"                    return false;\n"
"                }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:277
#, no-wrap
msgid ""
"                @Override\n"
"                public String getAuthenticationScheme() {\n"
"                    return \"basic\";\n"
"                }\n"
"            });\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:280
#, no-wrap
msgid ""
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-customization.adoc:282
#, fuzzy, no-wrap
msgid "Disabling Authorization"
msgstr "禁用授权"

#. type: Plain text
#: upstream/_guides/security-customization.adoc:285
#, fuzzy
msgid "If you have a good reason to disable the authorization then you can register a custom `AuthorizationController`:"
msgstr "如果你有一个很好的理由来禁用授权，那么你可以注册一个自定义的 `AuthorizationController` 。"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:294
#, no-wrap
msgid ""
"@Alternative\n"
"@Priority(Interceptor.Priority.LIBRARY_AFTER)\n"
"@ApplicationScoped\n"
"public class DisabledAuthController extends AuthorizationController {\n"
"    @ConfigProperty(name = \"disable.authorization\", defaultValue = \"false\")\n"
"    boolean disableAuthorization;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:300
#, no-wrap
msgid ""
"    @Override\n"
"    public boolean isAuthorizationEnabled() {\n"
"        return !disableAuthorization;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-customization.adoc:303
#, fuzzy
msgid "For manual testing Quarkus provides a convenient config property to disable authorization in dev mode. This property has the exact same effect as the custom `AuthorizationController` shown above, but is only available in dev mode:"
msgstr "对于手动测试，Quarkus提供了一个方便的配置属性，在开发模式下禁用授权。这个属性与上面显示的自定义 `AuthorizationController` ，效果完全相同，但只在开发模式下可用。"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:307
#, no-wrap
msgid "quarkus.security.auth.enabled-in-dev-mode=false\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-customization.adoc:310
#, fuzzy
msgid "Please also see xref:security-testing.adoc#testing-security[TestingSecurity Annotation] section on how to disable the security checks using `TestSecurity` annotation."
msgstr "关于如何使用 `TestSecurity` 注释禁用安全检查，也请参见 link:security-testing.html#testing-security[TestingSecurity Annotation] 部分。"

#. type: Title ==
#: upstream/_guides/security-customization.adoc:311
#, fuzzy, no-wrap
msgid "Registering Security Providers"
msgstr "注册安全供应商"

#. type: Title ===
#: upstream/_guides/security-customization.adoc:313
#, fuzzy, no-wrap
msgid "Default providers"
msgstr "默认供应商"

#. type: Plain text
#: upstream/_guides/security-customization.adoc:319
#, fuzzy
msgid "When running in native mode, the default behavior for GraalVM native executable generation is to only include the main \"SUN\" provider unless you have enabled SSL, in which case all security providers are registered. If you are not using SSL, then you can selectively register security providers by name using the `quarkus.security.security-providers` property. The following example illustrates configuration to register the \"SunRsaSign\" and \"SunJCE\" security providers:"
msgstr "在本地模式下运行时，GraalVM本地可执行文件生成的默认行为是只包括主要的 \"SUN \"提供者，除非你启用了SSL，在这种情况下，所有的安全提供者都被注册。如果你不使用SSL，那么你可以使用 `quarkus.security.security-providers` 属性按名称选择性地注册安全提供者。下面的例子说明了注册 \"SunRsaSign \"和 \"SunJCE \"安全提供者的配置。"

#. type: Block title
#: upstream/_guides/security-customization.adoc:320
#, fuzzy, no-wrap
msgid "Example Security Providers Configuration"
msgstr "安全供应商配置示例"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:324
#, no-wrap
msgid "quarkus.security.security-providers=SunRsaSign,SunJCE\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-customization.adoc:327
#, fuzzy, no-wrap
msgid "BouncyCastle"
msgstr "蹦蹦跳跳的城堡"

#. type: Plain text
#: upstream/_guides/security-customization.adoc:330
#, fuzzy
msgid "If you need to register an `org.bouncycastle.jce.provider.BouncyCastleProvider` JCE provider then please set a `BC` provider name:"
msgstr "如果你需要注册一个 `org.bouncycastle.jce.provider.BouncyCastleProvider` JCE供应商，那么请设置一个 `BC` 供应商名称。"

#. type: Block title
#: upstream/_guides/security-customization.adoc:331
#, fuzzy, no-wrap
msgid "Example Security Providers BouncyCastle Configuration"
msgstr "安全供应商BouncyCastle配置示例"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:335
#, no-wrap
msgid "quarkus.security.security-providers=BC\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-customization.adoc:338
#, fuzzy
msgid "and add the BouncyCastle provider dependency:"
msgstr "并添加BouncyCastle提供商的依赖关系。"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:346
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>org.bouncycastle</groupId>\n"
"    <artifactId>bcprov-jdk15on</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:352
#, no-wrap
msgid "implementation(\"org.bouncycastle:bcprov-jdk15on\")\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-customization.adoc:355
#, fuzzy, no-wrap
msgid "BouncyCastle JSSE"
msgstr "BouncyCastle JSSE"

#. type: Plain text
#: upstream/_guides/security-customization.adoc:358
#, fuzzy
msgid "If you need to register an `org.bouncycastle.jsse.provider.BouncyCastleJsseProvider` JSSE provider and use it instead of the default SunJSSE provider then please set a `BCJSSE` provider name:"
msgstr "如果你需要注册一个 `org.bouncycastle.jsse.provider.BouncyCastleJsseProvider` JSSE提供者并使用它来代替默认的SunJSSE提供者，那么请设置一个 `BCJSSE` 提供者的名字。"

#. type: Block title
#: upstream/_guides/security-customization.adoc:359
#, fuzzy, no-wrap
msgid "Example Security Providers BouncyCastle JSSE Configuration"
msgstr "安全供应商实例 BouncyCastle JSSE配置"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:363
#, no-wrap
msgid "quarkus.security.security-providers=BCJSSE\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:365
#: upstream/_guides/security-customization.adoc:440
#, no-wrap
msgid "quarkus.http.ssl.client-auth=REQUIRED\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:370
#, no-wrap
msgid ""
"quarkus.http.ssl.certificate.key-store-file=server-keystore.jks\n"
"quarkus.http.ssl.certificate.key-store-password=password\n"
"quarkus.http.ssl.certificate.trust-store-file=server-truststore.jks\n"
"quarkus.http.ssl.certificate.trust-store-password=password\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-customization.adoc:373
#, fuzzy
msgid "and add the BouncyCastle TLS dependency:"
msgstr "并添加BouncyCastle TLS依赖项。"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:381
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>org.bouncycastle</groupId>\n"
"    <artifactId>bctls-jdk15on</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:387
#, no-wrap
msgid "implementation(\"org.bouncycastle:bctls-jdk15on\")\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-customization.adoc:390
#, fuzzy, no-wrap
msgid "BouncyCastle FIPS"
msgstr "BouncyCastle FIPS"

#. type: Plain text
#: upstream/_guides/security-customization.adoc:393
#, fuzzy
msgid "If you need to register an `org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider` JCE provider then please set a `BCFIPS` provider name:"
msgstr "如果你需要注册一个 `org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider` JCE供应商，那么请设置一个 `BCFIPS` 供应商名称。"

#. type: Block title
#: upstream/_guides/security-customization.adoc:394
#, fuzzy, no-wrap
msgid "Example Security Providers BouncyCastle FIPS Configuration"
msgstr "安全供应商实例 BouncyCastle FIPS配置"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:398
#, no-wrap
msgid "quarkus.security.security-providers=BCFIPS\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-customization.adoc:401
#, fuzzy
msgid "and add the BouncyCastle FIPS provider dependency:"
msgstr "并添加 BouncyCastle FIPS 提供者依赖关系。"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:409
#: upstream/_guides/security-customization.adoc:465
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>org.bouncycastle</groupId>\n"
"    <artifactId>bc-fips</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:415
#, no-wrap
msgid "implementation(\"org.bouncycastle:bc-fips\")\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-customization.adoc:420
#, fuzzy
msgid "`BCFIPS` provider option is supported in native image but the algorithm self-tests which rely on `java.security.SecureRandom` to verify the generated keys have been removed for these tests to pass. The following classes have been affected:"
msgstr " `BCFIPS` 提供者选项在本地图像中得到支持，但依靠 来验证生成的密钥的算法自我测试已被删除，以便这些测试能够通过。以下类别受到了影响。 `java.security.SecureRandom` "

#. type: delimited block =
#: upstream/_guides/security-customization.adoc:421
#, fuzzy
msgid "`org.bouncycastle.crypto.general.DSA`"
msgstr " `org.bouncycastle.crypto.general.DSA` "

#. type: delimited block =
#: upstream/_guides/security-customization.adoc:422
#, fuzzy
msgid "`org.bouncycastle.crypto.general.DSTU4145`"
msgstr " `org.bouncycastle.crypto.general.DSTU4145` "

#. type: delimited block =
#: upstream/_guides/security-customization.adoc:423
#, fuzzy
msgid "`org.bouncycastle.crypto.general.ECGOST3410`"
msgstr " `org.bouncycastle.crypto.general.ECGOST3410` "

#. type: delimited block =
#: upstream/_guides/security-customization.adoc:424
#, fuzzy
msgid "`org.bouncycastle.crypto.general.GOST3410`"
msgstr " `org.bouncycastle.crypto.general.GOST3410` "

#. type: delimited block =
#: upstream/_guides/security-customization.adoc:425
#, fuzzy
msgid "`org.bouncycastle.crypto.fips.FipsDSA`"
msgstr " `org.bouncycastle.crypto.fips.FipsDSA` "

#. type: delimited block =
#: upstream/_guides/security-customization.adoc:426
#, fuzzy
msgid "`org.bouncycastle.crypto.fips.FipsEC`"
msgstr " `org.bouncycastle.crypto.fips.FipsEC` "

#. type: delimited block =
#: upstream/_guides/security-customization.adoc:427
#, fuzzy
msgid "`org.bouncycastle.crypto.fips.FipsRSA`"
msgstr " `org.bouncycastle.crypto.fips.FipsRSA` "

#. type: Title ===
#: upstream/_guides/security-customization.adoc:430
#, fuzzy, no-wrap
msgid "BouncyCastle JSSE FIPS"
msgstr "BouncyCastle JSSE FIPS"

#. type: Plain text
#: upstream/_guides/security-customization.adoc:433
#, fuzzy
msgid "If you need to register an `org.bouncycastle.jsse.provider.BouncyCastleJsseProvider` JSSE provider and use it in combination with `org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider` instead of the default SunJSSE provider then please set a `BCFIPSJSSE` provider name:"
msgstr "如果你需要注册一个 `org.bouncycastle.jsse.provider.BouncyCastleJsseProvider` JSSE提供者，并将其与 `org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider` ，而不是默认的SunJSSE提供者结合使用，那么请设置一个 `BCFIPSJSSE` 提供者名称。"

#. type: Block title
#: upstream/_guides/security-customization.adoc:434
#, fuzzy, no-wrap
msgid "Example Security Providers BouncyCastle FIPS JSSE Configuration"
msgstr "安全供应商BouncyCastle FIPS JSSE配置示例"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:438
#, no-wrap
msgid "quarkus.security.security-providers=BCFIPSJSSE\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:449
#, no-wrap
msgid ""
"quarkus.http.ssl.certificate.key-store-file=server-keystore.jks\n"
"quarkus.http.ssl.certificate.key-store-password=password\n"
"quarkus.http.ssl.certificate.key-store-file-type=BCFKS\n"
"quarkus.http.ssl.certificate.key-store-provider=BCFIPS\n"
"quarkus.http.ssl.certificate.trust-store-file=server-truststore.jks\n"
"quarkus.http.ssl.certificate.trust-store-password=password\n"
"quarkus.http.ssl.certificate.trust-store-file-type=BCFKS\n"
"quarkus.http.ssl.certificate.trust-store-provider=BCFIPS\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-customization.adoc:452
#, fuzzy
msgid "and the BouncyCastle TLS dependency optimized for using the BouncyCastle FIPS provider:"
msgstr "以及为使用 BouncyCastle FIPS 提供者而优化的 BouncyCastle TLS 依赖性。"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:460
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>org.bouncycastle</groupId>\n"
"  <artifactId>bctls-fips</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:472
#, no-wrap
msgid ""
"implementation(\"org.bouncycastle:bctls-fips\")\n"
"implementation(\"org.bouncycastle:bc-fips\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-customization.adoc:476
#, fuzzy
msgid "Note that the keystore and truststore type and provider are set to `BCFKS` and `BCFIPS`.  One can generate a keystore with this type and provider like this:"
msgstr "注意，钥匙库和信任库的类型和提供者被设置为 `BCFKS` 和 `BCFIPS` 。人们可以像这样用这种类型和提供者生成一个钥匙库。"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:480
#, no-wrap
msgid "keytool -genkey -alias server -keyalg RSA -keystore server-keystore.jks -keysize 2048 -keypass password -provider org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider -providerpath $PATH_TO_BC_FIPS_JAR -storetype BCFKS\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-customization.adoc:485
#, fuzzy
msgid "`BCFIPSJSSE` provider option is currently not supported in native image."
msgstr " `BCFIPSJSSE` 提供者选项目前在本地图像中不被支持。"

#. type: Title ===
#: upstream/_guides/security-customization.adoc:488
#, fuzzy, no-wrap
msgid "SunPKCS11"
msgstr "阳光PKCS11"

#. type: Plain text
#: upstream/_guides/security-customization.adoc:491
#, fuzzy
msgid "`SunPKCS11` provider provides a bridge to specific `PKCS#11` implementations such as cryptographic smartcards and other Hardware Security Modules, Network Security Services in FIPS mode, etc."
msgstr " `SunPKCS11` 提供者提供了与特定 实现的桥梁，如加密智能卡和其他硬件安全模块、FIPS模式的网络安全服务等。 `PKCS#11` "

#. type: Plain text
#: upstream/_guides/security-customization.adoc:493
#, fuzzy
msgid "Typically, in order to work with `SunPKCS11`, one needs to install a `PKCS#11` implementation, generate a configuration which usually refers to a shared library, token slot, etc and write the following Java code:"
msgstr "通常，为了使用 `SunPKCS11` ，需要安装一个 `PKCS#11` 实现，生成一个配置，通常指的是共享库、令牌槽等，然后编写以下Java代码。"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:498
#, no-wrap
msgid ""
"import java.security.Provider;\n"
"import java.security.Security;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:500
#, no-wrap
msgid "String configuration = \"pkcs11.cfg\"\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:506
#, no-wrap
msgid ""
"Provider sunPkcs11 = Security.getProvider(\"SunPKCS11\");\n"
"Provider pkcsImplementation = sunPkcs11.configure(configuration);\n"
"// or prepare configuration in the code or read it from the file such as \"pkcs11.cfg\" and do\n"
"// sunPkcs11.configure(\"--\" + configuration);\n"
"Security.addProvider(pkcsImplementation);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-customization.adoc:509
#, fuzzy
msgid "In Quarkus you can achieve the same at the configuration level only without having to modify the code, for example:"
msgstr "在Quarkus中，你可以只在配置层面实现同样的功能，而不必修改代码，例如。"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:514
#, no-wrap
msgid ""
"quarkus.security.security-providers=SunPKCS11\n"
"quarkus.security.security-provider-config.SunPKCS11=pkcs11.cfg\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-customization.adoc:519
#, fuzzy
msgid "Note that while accessing the `SunPKCS11` bridge provider is supported in native image, configuring `SunPKCS11` is currently not supported in native image at the Quarkus level."
msgstr "请注意，虽然在本机图像中支持访问 `SunPKCS11` 桥接器，但在Quarkus层面上，本机图像目前不支持配置 `SunPKCS11` 。"

#. type: Title ==
#: upstream/_guides/security-customization.adoc:521
#, fuzzy, no-wrap
msgid "Reactive Security"
msgstr "反应性安全"

#. type: Plain text
#: upstream/_guides/security-customization.adoc:524
#, fuzzy
msgid "If you are going to use security in a reactive environment, you will likely need SmallRye Context Propagation:"
msgstr "如果你要在一个反应式环境中使用安全，你很可能需要SmallRye Context Propagation。"

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:532
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-context-propagation</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-customization.adoc:538
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-smallrye-context-propagation\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-customization.adoc:544
msgid "This will allow you to propagate the identity throughout the reactive callbacks. You also need to make sure you are using an executor that is capable of propagating the identity (e.g. no `CompletableFuture.supplyAsync`), to make sure that Quarkus can propagate it. For more information see the xref:context-propagation.adoc[Context Propagation Guide]."
msgstr ""

#. type: Title ==
#: upstream/_guides/security-customization.adoc:545
#, no-wrap
msgid "References"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-customization.adoc:547
msgid "xref:security.adoc[Quarkus Security]"
msgstr ""
