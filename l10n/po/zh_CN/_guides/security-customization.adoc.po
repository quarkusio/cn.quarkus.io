# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-25 13:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _guides/security-customization.adoc
#, fuzzy, no-wrap
msgid "Security Tips and Tricks"
msgstr "安全技巧和窍门"

#. type: Title ==
#: _guides/security-customization.adoc
#, fuzzy, no-wrap
msgid "Quarkus Security Dependency"
msgstr "Quarkus安全依赖性"

#. type: Plain text
#: _guides/security-customization.adoc
#, fuzzy
msgid "`io.quarkus:quarkus-security` module contains the core Quarkus Security classes."
msgstr " `io.quarkus:quarkus-security` 模块包含Quarkus的核心安全类。"

#: _guides/security-customization.adoc
#, fuzzy
msgid ""
"In most cases, it does not have to be added directly to your project's build file as it is already provided by all the security extensions.\n"
"However, if you need to write your own custom security code (for example, register a <<jaxrs-security-context,Custom Jakarta REST SecurityContext>>) or use <<bouncy-castle,BouncyCastle>> libraries, then please make sure it is included:"
msgstr "在大多数情况下，无需将其直接添加到项目的构建文件中，因为所有安全扩展都已提供了该功能。但是，如果您需要编写自己的自定义安全代码（例如，注册 xref:jaxrs-security-context[自定义 Jakarta REST SecurityContext] ）或使用 xref:bouncy-castle[BouncyCastle] 库，则请确保将其包含在内："

#. type: Block title
#: _guides/security-customization.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _guides/security-customization.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: _guides/security-customization.adoc
#, fuzzy, no-wrap
msgid "HttpAuthenticationMechanism Customization"
msgstr "HttpAuthenticationMechanism定制"

#: _guides/security-customization.adoc
#, fuzzy
msgid ""
"One can customize `HttpAuthenticationMechanism` by registering a CDI implementation bean.\n"
"In the example below the custom authenticator delegates to `JWTAuthMechanism` provided by `quarkus-smallrye-jwt`:"
msgstr "用户可以通过注册一个 CDI 实现 bean 来定制 `HttpAuthenticationMechanism` 。在下面的示例中，自定义身份验证器委托给 `quarkus-smallrye-jwt` 提供的 `JWTAuthMechanism` ："

#: _guides/security-customization.adoc
#, fuzzy
msgid ""
"The `HttpAuthenticationMechanism` should transform incoming HTTP request with suitable authentication credentials\n"
"into an `io.quarkus.security.identity.request.AuthenticationRequest` instance and delegate the authentication to the `io.quarkus.security.identity.IdentityProviderManager`.\n"
"Leaving authentication to the ``io.quarkus.security.identity.IdentityProvider``s gives you more options for credentials verifications,\n"
"as well as convenient way to perform blocking tasks.\n"
"Nevertheless, the `io.quarkus.security.identity.IdentityProvider` can be omitted and the `HttpAuthenticationMechanism` is free to authenticate request on its own in trivial use cases."
msgstr "`HttpAuthenticationMechanism` 应将带有适当认证凭据的 HTTP 请求转换为 `io.quarkus.security.identity.request.AuthenticationRequest` 实例，并将认证工作委托给 `io.quarkus.security.identity.IdentityProviderManager` 。将认证工作交给 `io.quarkus.security.identity.IdentityProvider` 可以为凭据验证提供更多选择，也可以方便地执行阻塞任务。不过， `io.quarkus.security.identity.IdentityProvider` 也可以省略， `HttpAuthenticationMechanism` 可在琐碎的使用情况下自行对请求进行身份验证。"

#. type: Title ==
#: _guides/security-customization.adoc
#, fuzzy, no-wrap
msgid "Dealing with more than one HttpAuthenticationMechanism"
msgstr "处理多于一个的HttpAuthenticationMechanism"

#. type: Plain text
#: _guides/security-customization.adoc
#, fuzzy
msgid "More than one `HttpAuthenticationMechanism` can be combined, for example, the built-in `Basic` or `JWT` mechanism provided by `quarkus-smallrye-jwt` has to be used to verify the service clients credentials passed as the HTTP `Authorization` `Basic` or `Bearer` scheme values while the `Authorization Code` mechanism provided by `quarkus-oidc` has to be used to authenticate the users with Keycloak or other OpenID Connect providers."
msgstr "可以结合多个 `HttpAuthenticationMechanism` ，例如，由 `quarkus-smallrye-jwt` 提供的内置 `Basic` 或 `JWT` 机制必须用于验证作为HTTP `Authorization` `Basic` 或 `Bearer` 方案值传递的服务客户证书，而由 `quarkus-oidc` 提供的 `Authorization Code` 机制必须用于验证用户与 `Keycloak` 或其他 `OpenId Connect` 供应商的关系。"

#. type: Plain text
#: _guides/security-customization.adoc
#, fuzzy
msgid "In such cases the mechanisms are asked to verify the credentials in turn until a `SecurityIdentity` is created. The mechanisms are sorted in the descending order using their priority. `Basic` authentication mechanism has the highest priority of `2000`, followed by the `Authorization Code` one with the priority of `1001`, with all other mechanisms provided by Quarkus having the priority of `1000`."
msgstr "在这种情况下，各机制被要求依次验证证书，直到创建一个 `SecurityIdentity` 。这些机制按其优先级从高到低排序。 `Basic` 认证机制的最高优先级是 `2000` ，其次是 `Authorization Code` ，其优先级是 `1001` ，Quarkus 提供的所有其他机制的优先级是 `1000` 。"

#. type: Plain text
#: _guides/security-customization.adoc
#, fuzzy
msgid "If no credentials are provided then the mechanism specific challenge is created, for example, `401` status is returned by either `Basic` or `JWT` mechanisms, URL redirecting the user to the OpenID Connect provider is returned by `quarkus-oidc`, etc."
msgstr "如果没有提供凭证，那么将创建特定机制的挑战，例如， `401` 状态由 `Basic` 或 `JWT` 机制返回，将用户重定向到 `OpenId Connect` 提供商的 URL 由 `quarkus-oidc` 返回，等等。"

#. type: Plain text
#: _guides/security-customization.adoc
#, fuzzy
msgid "So if `Basic` and `Authorization Code` mechanisms are combined then `401` will be returned if no credentials are provided and if `JWT` and `Authorization Code` mechanisms are combined then a redirect URL will be returned."
msgstr "因此，如果 `Basic` 和 `Authorization Code` 机制结合起来，那么如果没有提供凭证，将返回 `401` ，如果 `JWT` 和 `Authorization Code` 机制结合起来，将返回一个重定向 URL。"

#. type: Plain text
#: _guides/security-customization.adoc
#, fuzzy
msgid "In some cases such a default logic of selecting the challenge is exactly what is required by a given application, but sometimes it may not meet the requirements. In such cases (or indeed in other similar cases where you'd like to change the order in which the mechanisms are asked to handle the current authentication or challenge request), you can create a custom mechanism and choose which mechanism should create a challenge, for example:"
msgstr "在某些情况下，这种选择挑战的默认逻辑正是特定应用所需要的，但有时它可能不符合要求。在这种情况下（或者确实在其他类似的情况下，你想改变要求机制处理当前认证或挑战请求的顺序），你可以创建一个自定义机制，并选择哪个机制应该创建一个挑战，比如说。"

#. type: Plain text
#: _guides/security-customization.adoc
#, fuzzy
msgid "Declaring the mechanism an alternative bean ensures this mechanism is used rather than `OidcAuthenticationMechanism` and `JWTAuthMechanism`."
msgstr "将该机制声明为替代豆，可以确保使用该机制而不是 `OidcAuthenticationMechanism` 和 `JWTAuthMechanism` 。"

#. type: Title ==
#: _guides/security-customization.adoc
#, fuzzy, no-wrap
msgid "Security Identity Customization"
msgstr "安全身份定制"

#. type: Plain text
#: _guides/security-customization.adoc
#, fuzzy
msgid "Internally, the identity providers create and update an instance of the `io.quarkus.security.identity.SecurityIdentity` class which holds the principal, roles, credentials which were used to authenticate the client (user) and other security attributes. An easy option to customize `SecurityIdentity` is to register a custom `SecurityIdentityAugmentor`. For example, the augmentor below adds an addition role:"
msgstr "在内部，身份提供者创建和更新 `io.quarkus.security.identity.SecurityIdentity` 类的一个实例，该实例持有委托人、角色、用于验证客户（用户）的凭证和其他安全属性。定制 `SecurityIdentity` 的一个简单选择是注册一个自定义的 `SecurityIdentityAugmentor` 。例如，下面的增强器增加了一个额外的角色。"

#: _guides/security-customization.adoc
#, fuzzy
msgid "Here is another example showing how to use the client certificate available in the current xref:security-authentication-mechanisms.adoc#mutual-tls[mutual TLS (mTLS) authentication] request to add more roles:"
msgstr "下面是另一个示例，展示了如何使用当前 xref:security-authentication-mechanisms.adoc#mutual-tls[相互 TLS（mTLS）身份验证] 请求中可用的客户证书来添加更多角色："

#: _guides/security-customization.adoc
#, fuzzy
msgid ""
"If more than one custom `SecurityIdentityAugmentor` is registered then they will be considered equal candidates and invoked in random order.\n"
"You can enforce the order by implementing a default `SecurityIdentityAugmentor#priority` method. Augmentors with higher priorities will be invoked first."
msgstr "如果注册了多个自定义 `SecurityIdentityAugmentor` ，那么它们将被视为同等候选，并以随机顺序调用。您可以通过实施默认的 `SecurityIdentityAugmentor#priority` 方法来强制执行顺序。优先级较高的增强程序将首先被调用。"

#: _guides/security-customization.adoc
#, fuzzy
msgid ""
"By default, the request context is not activated when augmenting the security identity, this means that if you want to use for example Hibernate\n"
"that mandates a request context, you will have a `jakarta.enterprise.context.ContextNotActiveException`."
msgstr "默认情况下，在增强安全身份时不会激活请求上下文，这意味着如果你想使用强制要求使用请求上下文的 Hibernate 等，你将需要 `jakarta.enterprise.context.ContextNotActiveException` 。"

#: _guides/security-customization.adoc
msgid "Please also review the xref:security-proactive-authentication.adoc#cdi-request-context-activation[Activating the CDI request context] section of the \"Proactive authentication\" guide."
msgstr ""

#. type: Plain text
#: _guides/security-customization.adoc
#, fuzzy
msgid "The solution is to activate the request context, the following example shows how to get the roles from an Hibernate with Panache `UserRoleEntity`."
msgstr "解决办法是激活请求上下文，下面的例子显示了如何从Hibernate与Panache `UserRoleEntity` 中获取角色。"

#: _guides/security-customization.adoc
#, fuzzy
msgid ""
"The CDI request context activation shown in the example above does not help you to access the `RoutingContext` when the proactive authentication is enabled.\n"
"The following example illustrates how you can access the `RoutingContext` from the `SecurityIdentityAugmentor`:"
msgstr "当启用主动身份验证时，上例所示的 CDI 请求上下文激活无法帮助您访问 `RoutingContext` 。下面的示例说明了如何从 `SecurityIdentityAugmentor` 访问 `RoutingContext` ："

#: _guides/security-customization.adoc
#, fuzzy
msgid "The `RoutingContext` is not be available when the `SecurityIdentity` is augmented after HTTP request has completed."
msgstr "在 HTTP 请求完成后对 `SecurityIdentity` 进行增强时， `RoutingContext` 将不可用。"

#: _guides/security-customization.adoc
#, fuzzy
msgid ""
"If you implemented a custom `HttpAuthenticationMechanism`, then you need to add the `RoutingContext` to the authentication\n"
"request attributes with the `io.quarkus.vertx.http.runtime.security.HttpSecurityUtils.setRoutingContextAttribute` method call.\n"
"Otherwise, the `RoutingContext` will not be available during augmentation."
msgstr "如果实施了自定义 `HttpAuthenticationMechanism` ，则需要通过 `io.quarkus.vertx.http.runtime.security.HttpSecurityUtils.setRoutingContextAttribute` 方法调用将 `RoutingContext` 添加到身份验证请求属性中。否则，在增强过程中将无法使用 `RoutingContext` 。"

#. type: Title ==
#: _guides/security-customization.adoc
#, fuzzy, no-wrap
msgid "Custom Jakarta REST SecurityContext"
msgstr "自定义JAX-RS安全上下文"

#. type: Plain text
#: _guides/security-customization.adoc
#, fuzzy
msgid "If you use Jakarta REST `ContainerRequestFilter` to set a custom Jakarta REST `SecurityContext` then make sure `ContainerRequestFilter` runs in the Jakarta REST pre-match phase by adding a `@PreMatching` annotation to it for this custom security context to be linked with Quarkus `SecurityIdentity`, for example:"
msgstr "如果你使用 JAX-RS `ContainerRequestFilter` 来设置一个自定义的 JAX-RS `SecurityContext` ，那么请确保 `ContainerRequestFilter` 在 JAX-RS 预匹配阶段运行，为这个自定义的安全上下文添加一个 `@PreMatching` 注释，以便与 Quarkus `SecurityIdentity` 链接，例如。"

#. type: Title ==
#: _guides/security-customization.adoc
#, fuzzy, no-wrap
msgid "Disabling Authorization"
msgstr "禁用授权"

#. type: Plain text
#: _guides/security-customization.adoc
#, fuzzy
msgid "If you have a good reason to disable the authorization then you can register a custom `AuthorizationController`:"
msgstr "如果你有一个很好的理由来禁用授权，那么你可以注册一个自定义的 `AuthorizationController` 。"

#. type: Plain text
#: _guides/security-customization.adoc
#, fuzzy
msgid "For manual testing Quarkus provides a convenient config property to disable authorization in dev mode. This property has the exact same effect as the custom `AuthorizationController` shown above, but is only available in dev mode:"
msgstr "对于手动测试，Quarkus提供了一个方便的配置属性，在开发模式下禁用授权。这个属性与上面显示的自定义 `AuthorizationController` ，效果完全相同，但只在开发模式下可用。"

#. type: Plain text
#: _guides/security-customization.adoc
#, fuzzy
msgid "Please also see xref:security-testing.adoc#testing-security[TestingSecurity Annotation] section on how to disable the security checks using `TestSecurity` annotation."
msgstr "关于如何使用 `TestSecurity` 注释禁用安全检查，也请参见 link:security-testing.html#testing-security[TestingSecurity Annotation] 部分。"

#. type: Title ==
#: _guides/security-customization.adoc
#, fuzzy, no-wrap
msgid "Registering Security Providers"
msgstr "注册安全供应商"

#. type: Title ===
#: _guides/security-customization.adoc
#, fuzzy, no-wrap
msgid "Default providers"
msgstr "默认供应商"

#: _guides/security-customization.adoc
#, fuzzy
msgid ""
"When running in native mode, the default behavior for GraalVM native executable generation is to only include the main \"SUN\" provider\n"
"unless you have enabled SSL, in which case all security providers are registered. If you are not using SSL, then you can selectively\n"
"register security providers by name using the `quarkus.security.security-providers` property. The following example illustrates\n"
"configuration to register the \"SunRsaSign\" and \"SunJCE\" security providers:"
msgstr "在本地模式下运行时，GraalVM 本地可执行文件生成的默认行为是只包含主 \"SUN \"提供程序，除非您启用了 SSL，在这种情况下，所有安全提供程序都会注册。如果不使用 SSL，则可以使用 `quarkus.security.security-providers` 属性按名称有选择地注册安全提供程序。下面的示例说明了注册 \"SunRsaSign \"和 \"SunJCE \"安全提供程序的配置："

#. type: Block title
#: _guides/security-customization.adoc
#, fuzzy, no-wrap
msgid "Example Security Providers Configuration"
msgstr "安全供应商配置示例"

#. type: Title ===
#: _guides/security-customization.adoc
#, fuzzy, no-wrap
msgid "BouncyCastle"
msgstr "蹦蹦跳跳的城堡"

#. type: Plain text
#: _guides/security-customization.adoc
#, fuzzy
msgid "If you need to register an `org.bouncycastle.jce.provider.BouncyCastleProvider` JCE provider then please set a `BC` provider name:"
msgstr "如果你需要注册一个 `org.bouncycastle.jce.provider.BouncyCastleProvider` JCE供应商，那么请设置一个 `BC` 供应商名称。"

#. type: Block title
#: _guides/security-customization.adoc
#, fuzzy, no-wrap
msgid "Example Security Providers BouncyCastle Configuration"
msgstr "安全供应商BouncyCastle配置示例"

#. type: Plain text
#: _guides/security-customization.adoc
#, fuzzy
msgid "and add the BouncyCastle provider dependency:"
msgstr "并添加BouncyCastle提供商的依赖关系。"

#. type: Title ===
#: _guides/security-customization.adoc
#, fuzzy, no-wrap
msgid "BouncyCastle JSSE"
msgstr "BouncyCastle JSSE"

#. type: Plain text
#: _guides/security-customization.adoc
#, fuzzy
msgid "If you need to register an `org.bouncycastle.jsse.provider.BouncyCastleJsseProvider` JSSE provider and use it instead of the default SunJSSE provider then please set a `BCJSSE` provider name:"
msgstr "如果你需要注册一个 `org.bouncycastle.jsse.provider.BouncyCastleJsseProvider` JSSE提供者并使用它来代替默认的SunJSSE提供者，那么请设置一个 `BCJSSE` 提供者的名字。"

#. type: Block title
#: _guides/security-customization.adoc
#, fuzzy, no-wrap
msgid "Example Security Providers BouncyCastle JSSE Configuration"
msgstr "安全供应商实例 BouncyCastle JSSE配置"

#. type: Plain text
#: _guides/security-customization.adoc
#, fuzzy
msgid "and add the BouncyCastle TLS dependency:"
msgstr "并添加BouncyCastle TLS依赖项。"

#. type: Title ===
#: _guides/security-customization.adoc
#, fuzzy, no-wrap
msgid "BouncyCastle FIPS"
msgstr "BouncyCastle FIPS"

#. type: Plain text
#: _guides/security-customization.adoc
#, fuzzy
msgid "If you need to register an `org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider` JCE provider then please set a `BCFIPS` provider name:"
msgstr "如果你需要注册一个 `org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider` JCE供应商，那么请设置一个 `BCFIPS` 供应商名称。"

#. type: Block title
#: _guides/security-customization.adoc
#, fuzzy, no-wrap
msgid "Example Security Providers BouncyCastle FIPS Configuration"
msgstr "安全供应商实例 BouncyCastle FIPS配置"

#. type: Plain text
#: _guides/security-customization.adoc
#, fuzzy
msgid "and add the BouncyCastle FIPS provider dependency:"
msgstr "并添加 BouncyCastle FIPS 提供者依赖关系。"

#: _guides/security-customization.adoc
#, fuzzy
msgid ""
"`BCFIPS` provider option is supported in native image but the algorithm self-tests which rely on `java.security.SecureRandom` to verify the generated keys have been removed for these tests to pass. The following classes have been affected:\n"
"- `org.bouncycastle.crypto.general.DSA`\n"
"- `org.bouncycastle.crypto.general.DSTU4145`\n"
"- `org.bouncycastle.crypto.general.ECGOST3410`\n"
"- `org.bouncycastle.crypto.general.GOST3410`\n"
"- `org.bouncycastle.crypto.fips.FipsDSA`\n"
"- `org.bouncycastle.crypto.fips.FipsEC`\n"
"- `org.bouncycastle.crypto.fips.FipsRSA`"
msgstr "`BCFIPS` 本机镜像支持提供者选项，但已删除了依赖 验证生成密钥的算法自测试，以使这些测试通过。受影响的类如下： - - - - - - - - - - - - - - - - - - `java.security.SecureRandom` `org.bouncycastle.crypto.general.DSA` `org.bouncycastle.crypto.general.DSTU4145` `org.bouncycastle.crypto.general.ECGOST3410` `org.bouncycastle.crypto.general.GOST3410` `org.bouncycastle.crypto.fips.FipsDSA` `org.bouncycastle.crypto.fips.FipsEC` `org.bouncycastle.crypto.fips.FipsRSA`"

#. type: Title ===
#: _guides/security-customization.adoc
#, fuzzy, no-wrap
msgid "BouncyCastle JSSE FIPS"
msgstr "BouncyCastle JSSE FIPS"

#. type: Plain text
#: _guides/security-customization.adoc
#, fuzzy
msgid "If you need to register an `org.bouncycastle.jsse.provider.BouncyCastleJsseProvider` JSSE provider and use it in combination with `org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider` instead of the default SunJSSE provider then please set a `BCFIPSJSSE` provider name:"
msgstr "如果你需要注册一个 `org.bouncycastle.jsse.provider.BouncyCastleJsseProvider` JSSE提供者，并将其与 `org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider` ，而不是默认的SunJSSE提供者结合使用，那么请设置一个 `BCFIPSJSSE` 提供者名称。"

#. type: Block title
#: _guides/security-customization.adoc
#, fuzzy, no-wrap
msgid "Example Security Providers BouncyCastle FIPS JSSE Configuration"
msgstr "安全供应商BouncyCastle FIPS JSSE配置示例"

#. type: Plain text
#: _guides/security-customization.adoc
#, fuzzy
msgid "and the BouncyCastle TLS dependency optimized for using the BouncyCastle FIPS provider:"
msgstr "以及为使用 BouncyCastle FIPS 提供者而优化的 BouncyCastle TLS 依赖性。"

#: _guides/security-customization.adoc
#, fuzzy
msgid ""
"Note that the keystore and truststore type and provider are set to `BCFKS` and `BCFIPS`.\n"
"One can generate a keystore with this type and provider like this:"
msgstr "请注意，密钥存储和信任存储的类型和提供程序已设置为 `BCFKS` 和 `BCFIPS` 。我们可以用这种类型和提供程序生成一个这样的密钥存储："

#. type: delimited block =
#: _guides/security-customization.adoc
#, fuzzy
msgid "`BCFIPSJSSE` provider option is currently not supported in native image."
msgstr " `BCFIPSJSSE` 提供者选项目前在本地图像中不被支持。"

#. type: Title ===
#: _guides/security-customization.adoc
#, fuzzy, no-wrap
msgid "SunPKCS11"
msgstr "阳光PKCS11"

#. type: Plain text
#: _guides/security-customization.adoc
#, fuzzy
msgid "`SunPKCS11` provider provides a bridge to specific `PKCS#11` implementations such as cryptographic smartcards and other Hardware Security Modules, Network Security Services in FIPS mode, etc."
msgstr " `SunPKCS11` 提供者提供了与特定 实现的桥梁，如加密智能卡和其他硬件安全模块、FIPS模式的网络安全服务等。 `PKCS#11` "

#. type: Plain text
#: _guides/security-customization.adoc
#, fuzzy
msgid "Typically, in order to work with `SunPKCS11`, one needs to install a `PKCS#11` implementation, generate a configuration which usually refers to a shared library, token slot, etc and write the following Java code:"
msgstr "通常，为了使用 `SunPKCS11` ，需要安装一个 `PKCS#11` 实现，生成一个配置，通常指的是共享库、令牌槽等，然后编写以下Java代码。"

#. type: Plain text
#: _guides/security-customization.adoc
#, fuzzy
msgid "In Quarkus you can achieve the same at the configuration level only without having to modify the code, for example:"
msgstr "在Quarkus中，你可以只在配置层面实现同样的功能，而不必修改代码，例如。"

#. type: delimited block =
#: _guides/security-customization.adoc
#, fuzzy
msgid "Note that while accessing the `SunPKCS11` bridge provider is supported in native image, configuring `SunPKCS11` is currently not supported in native image at the Quarkus level."
msgstr "请注意，虽然在本机图像中支持访问 `SunPKCS11` 桥接器，但在Quarkus层面上，本机图像目前不支持配置 `SunPKCS11` 。"

#. type: Title ==
#: _guides/security-customization.adoc
#, fuzzy, no-wrap
msgid "Reactive Security"
msgstr "反应性安全"

#. type: Plain text
#: _guides/security-customization.adoc
#, fuzzy
msgid "If you are going to use security in a reactive environment, you will likely need SmallRye Context Propagation:"
msgstr "如果你要在一个反应式环境中使用安全，你很可能需要SmallRye Context Propagation。"

#: _guides/security-customization.adoc
#, fuzzy
msgid ""
"This will allow you to propagate the identity throughout the reactive callbacks. You also need to make sure you\n"
"are using an executor that is capable of propagating the identity (e.g. no `CompletableFuture.supplyAsync`),\n"
"to make sure that Quarkus can propagate it. For more information see the\n"
"xref:context-propagation.adoc[Context Propagation Guide]."
msgstr "这将允许你在整个反应回调中传播身份。你还需要确保你使用的执行器能够传播身份（例如，没有 `CompletableFuture.supplyAsync` ），以确保 Quarkus 能够传播身份。更多信息，请参阅 \" xref:context-propagation.adoc[上下文传播指南] \"。"

#: _guides/security-customization.adoc
#, fuzzy
msgid "Observe security events"
msgstr "观察安全事件"

#: _guides/security-customization.adoc
#, fuzzy
msgid ""
"Quarkus beans can use xref:cdi.adoc#events-and-observers[CDI observers] to consume authentication and authorization security events.\n"
"The observers can be either synchronous or asynchronous."
msgstr "Quarkus Bean 可以使用 xref:cdi.adoc#events-and-observers[CDI 观察器] 来消费身份验证和授权安全事件。观察者可以是同步的，也可以是异步的。"

#: _guides/security-customization.adoc
#, fuzzy
msgid "List of supported security events"
msgstr "支持的安全事件列表"

#: _guides/security-customization.adoc
#, fuzzy
msgid "`io.quarkus.security.spi.runtime.AuthenticationFailureEvent`"
msgstr "`io.quarkus.security.spi.runtime.AuthenticationFailureEvent`"

#: _guides/security-customization.adoc
#, fuzzy
msgid "`io.quarkus.security.spi.runtime.AuthenticationSuccessEvent`"
msgstr "`io.quarkus.security.spi.runtime.AuthenticationSuccessEvent`"

#: _guides/security-customization.adoc
#, fuzzy
msgid "`io.quarkus.security.spi.runtime.AuthorizationFailureEvent`"
msgstr "`io.quarkus.security.spi.runtime.AuthorizationFailureEvent`"

#: _guides/security-customization.adoc
#, fuzzy
msgid "`io.quarkus.security.spi.runtime.AuthorizationSuccessEvent`"
msgstr "`io.quarkus.security.spi.runtime.AuthorizationSuccessEvent`"

#: _guides/security-customization.adoc
#, fuzzy
msgid "`io.quarkus.oidc.SecurityEvent`"
msgstr "`io.quarkus.oidc.SecurityEvent`"

#: _guides/security-customization.adoc
#, fuzzy
msgid "`io.quarkus.vertx.http.runtime.security.FormAuthenticationEvent`"
msgstr "`io.quarkus.vertx.http.runtime.security.FormAuthenticationEvent`"

#: _guides/security-customization.adoc
#, fuzzy
msgid ""
"For more information about security events specific to the Quarkus OpenID Connect extension, please see\n"
"the xref:security-oidc-code-flow-authentication.adoc#listen-to-authentication-events[Listening to important authentication events]\n"
"section of the OIDC code flow mechanism for protecting web applications guide."
msgstr "有关 Quarkus OpenID Connect 扩展的特定安全事件的更多信息，请参阅《保护网络应用程序的 OIDC 代码流机制》指南中的 \" xref:security-oidc-code-flow-authentication.adoc#listen-to-authentication-events[监听重要身份验证事件] \"部分。"

#: _guides/security-customization.adoc
#, fuzzy
msgid ""
"This observer consumes all the `AuthenticationSuccessEvent` events asynchronously, which means that HTTP request processing will continue regardless on the event processing.\n"
"Depending on the application, that can be a lot of the `AuthenticationSuccessEvent` events.\n"
"For that reason, asynchronous processing can have positive effect on performance."
msgstr "该观察者异步消耗所有 `AuthenticationSuccessEvent` 事件，这意味着无论事件处理如何，HTTP 请求处理都将继续。根据应用程序的不同，这可能是大量的 `AuthenticationSuccessEvent` 事件。因此，异步处理会对性能产生积极影响。"

#: _guides/security-customization.adoc
#, fuzzy
msgid "Common code for all supported security event types is possible because they all implement the `io.quarkus.security.spi.runtime.SecurityEvent` interface."
msgstr "由于所有支持的安全事件类型都实现了 `io.quarkus.security.spi.runtime.SecurityEvent` 接口，因此可以为它们编写通用代码。"

#. type: Title ==
#: _guides/security-customization.adoc
#, no-wrap
msgid "References"
msgstr "参考文献"

#. type: Plain text
#: _guides/security-customization.adoc
#, fuzzy
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus 安全概述]"

#. type: Plain text
#: _guides/security-customization.adoc
#, fuzzy
msgid "xref:security-architecture.adoc[Quarkus Security architecture]"
msgstr "link:security-architecture.html[Quarkus安全架构]"

#. type: Plain text
#: _guides/security-customization.adoc
#, fuzzy
msgid "xref:security-authentication-mechanisms.adoc#other-supported-authentication-mechanisms[Authentication mechanisms in Quarkus]"
msgstr "xref:security-authentication-mechanisms.adoc#other-supported-authentication-mechanisms[夸克认证机制]"

#. type: Plain text
#: _guides/security-customization.adoc
#, fuzzy
msgid "xref:security-identity-providers.adoc[Identity providers]"
msgstr "xref:security-identity-providers.adoc[身份供应商]"
