# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-25 13:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _guides/funqy.adoc
#, fuzzy, no-wrap
msgid "Funqy"
msgstr "趣多多"

#: _guides/funqy.adoc
msgid ""
"Quarkus Funqy is part of Quarkus's serverless strategy and aims to provide a portable Java API to write functions\n"
"deployable to various FaaS environments like AWS Lambda, Azure Functions, Google Cloud Functions, Knative, and Knative Events (Cloud Events).\n"
"It is also usable as a standalone service."
msgstr ""

#: _guides/funqy.adoc
msgid ""
"Because Funqy is an abstraction that spans multiple different cloud/function providers\n"
"and protocols it has to be a very simple API and thus, might not have all the features you are used\n"
"to in other remoting abstractions.  A nice side effect though is that Funqy is as optimized and\n"
"as small as possible.  This means that because Funqy sacrifices a little on flexibility, you'll\n"
"get a framework that has little to no overhead."
msgstr ""

#. type: Title ==
#: _guides/funqy.adoc
#, fuzzy, no-wrap
msgid "Funqy Basics"
msgstr "基础知识"

#: _guides/funqy.adoc
msgid ""
"The Funqy API is simple.  Annotate a method with `@Funq`.  This method may only have one optional input parameter\n"
"and may or may not return a response."
msgstr ""

#: _guides/funqy.adoc
msgid ""
"Java classes can also be used as input and output and must follow the Java bean convention and have\n"
"a default constructor.  The Java type that is declared as the parameter or return type is the type that will be\n"
"expected by the Funqy runtime.  Funqy does type introspection at build time to speed up boot time, so any derived types\n"
"will not be noticed by the Funqy marshalling layer at runtime."
msgstr ""

#. type: Plain text
#: _guides/funqy.adoc
#, fuzzy
msgid "Here's an example of using a POJO as input and output types."
msgstr "下面是一个使用POJO作为输入和输出类型的例子。"

#. type: Title ==
#: _guides/funqy.adoc
#, fuzzy, no-wrap
msgid "Async Reactive Types"
msgstr "异步反应式类型"

#: _guides/funqy.adoc
msgid ""
"Funqy supports the https://smallrye.io/smallrye-mutiny[SmallRye Mutiny] `Uni` reactive type as a return type.  The only requirement is that\n"
"the `Uni` must fill out the generic type."
msgstr ""

#. type: Title ==
#: _guides/funqy.adoc
#, fuzzy, no-wrap
msgid "Function Names"
msgstr "功能名称"

#: _guides/funqy.adoc
msgid ""
"The function name defaults to the method name and is case-sensitive.  If you want your function referenced by a different name,\n"
"parameterize the `@Funq` annotation as follows:"
msgstr ""

#. type: Title ==
#: _guides/funqy.adoc
#, fuzzy, no-wrap
msgid "Funqy DI"
msgstr "Funqy DI"

#: _guides/funqy.adoc
msgid ""
"Each Funqy Java class is a Quarkus Arc component and supports dependency injection through\n"
"CDI or Spring DI.  Spring DI requires including the `quarkus-spring-di` dependency in your build."
msgstr ""

#. type: Plain text
#: _guides/funqy.adoc
#, fuzzy
msgid "The default object lifecycle for a Funqy class is `@Dependent`."
msgstr "Funqy类的默认对象生命周期是 `@Dependent` 。"

#. type: Title ==
#: _guides/funqy.adoc
#, fuzzy, no-wrap
msgid "Context injection"
msgstr "语境注入"

#: _guides/funqy.adoc
msgid ""
"The Funqy API will usually not allow you to inject or use abstractions that\n"
"are specific to a protocol (i.e. HTTP) or function API (i.e. AWS Lambda).  There are\n"
"exceptions to the rule though, and you may be able to inject\n"
"contextual information that is specific to the environment you are deploying in."
msgstr ""

#. type: Plain text
#: _guides/funqy.adoc
#, fuzzy
msgid "We do not recommend injecting contextual information specific to a runtime.  Keep your functions portable."
msgstr "我们不建议注入特定于运行时的上下文信息。保持你的函数的可移植性。"

#: _guides/funqy.adoc
msgid ""
"Contextual information is injected via the `@Context` annotation which can be used on a function parameter\n"
"or a class field.  A good example is the `io.quarkus.funqy.knative.events.CloudEvent` interface that comes with our Funqy\n"
"Knative Cloud Events integration:"
msgstr ""

#. type: Title ==
#: _guides/funqy.adoc
#, fuzzy, no-wrap
msgid "Should I Use Funqy?"
msgstr "我应该使用Funqy吗？"

#: _guides/funqy.adoc
msgid ""
"REST over HTTP has become a very common way to write services over the past decade.  While Funqy\n"
"has an HTTP binding it is not a replacement for REST.  Because Funqy has to work across a variety\n"
"of protocols and function cloud platforms, it is very minimalistic and constrained.  For example, if you\n"
"use Funqy you lose the ability to link (think URIs) to the data your functions spit out.  You also\n"
"lose the ability to leverage cool HTTP features like `cache-control` and conditional GETs.  Many\n"
"developers will be ok with that as many won't be using these REST/HTTP features or styles. You'll\n"
"have to make the decision on what camp you are in.  Quarkus does support REST integration (through Jakarta REST,\n"
" Spring MVC, Vert.x Web, and Servlet) with\n"
"various cloud/function providers, but there are some disadvantages of using that approach as well.  For example,\n"
"if you want to do xref:aws-lambda-http.adoc[HTTP with AWS Lambda], this requires you to use the AWS API Gateway which may\n"
"slow down deployment and cold start time or even cost you more."
msgstr ""

#: _guides/funqy.adoc
msgid ""
"The purpose of Funqy is to allow you to write cross-provider functions so that you can move\n"
"off of your current function provider if, for instance, they start charging you a lot more for their\n"
"service.  Another reason you might not want to use Funqy is if you need access specific APIs of the\n"
"target function environment.  For example, developers often want access to the AWS Context on\n"
"Lambda.  In this case, we tell them they may be better off using the xref:aws-lambda.adoc[Quarkus AWS Lambda] integration instead."
msgstr ""
