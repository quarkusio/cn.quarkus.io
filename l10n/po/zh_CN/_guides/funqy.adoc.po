# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/funqy.adoc:6
#, fuzzy, no-wrap
msgid "Funqy"
msgstr "趣多多"

#. type: Plain text
#: upstream/_guides/funqy.adoc:14
#, fuzzy
msgid "Quarkus Funqy is part of Quarkus's serverless strategy and aims to provide a portable Java API to write functions deployable to various FaaS environments like AWS Lambda, Azure Functions, Google Cloud Functions, Knative, and Knative Events (Cloud Events).  It is also usable as a standalone service."
msgstr "Quarkus Funqy是Quarkus无服务器战略的一部分，旨在提供一个可移植的Java API来编写可部署到各种FaaS环境的函数，如AWS Lambda、Azure Functions、Google Cloud Functions、Knative和Knative Events（云事件）。它也可以作为一个独立的服务使用。"

#. type: Plain text
#: upstream/_guides/funqy.adoc:20
#, fuzzy
msgid "Because Funqy is an abstraction that spans multiple different cloud/function providers and protocols it has to be a very simple API and thus, might not have all the features you are used to in other remoting abstractions.  A nice side effect though is that Funqy is as optimized and as small as possible.  This means that because Funqy sacrifices a little bit on flexibility, you'll get a framework that has little to no overhead."
msgstr "因为Funqy是一个跨越多个不同的云/功能提供商和协议的抽象，它必须是一个非常简单的API，因此，可能不具备你在其他远程抽象中所习惯的所有功能。不过，一个很好的副作用是，Funqy尽可能地优化，尽可能地小。这意味着，由于Funqy在灵活性上做了一点牺牲，你将得到一个几乎没有开销的框架。"

#. type: Title ==
#: upstream/_guides/funqy.adoc:21
#, fuzzy, no-wrap
msgid "Funqy Basics"
msgstr "基础知识"

#. type: Plain text
#: upstream/_guides/funqy.adoc:25
#, fuzzy
msgid "The Funqy API is simple.  Annotate a method with `@Funq`.  This method may only have one optional input parameter and may or may not return a response."
msgstr "Funqy的API很简单。用 `@Funq` 来注解一个方法。这个方法可能只有一个可选的输入参数，可能会也可能不会返回一个响应。"

#. type: delimited block -
#: upstream/_guides/funqy.adoc:29 upstream/_guides/funqy.adoc:99
#: upstream/_guides/funqy.adoc:119
#, no-wrap
msgid "import io.quarkus.funqy.Funq;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:36
#, no-wrap
msgid ""
"public class GreetingFunction {\n"
"    @Funq\n"
"    public String greet(String name) {\n"
"       return \"Hello \" + name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy.adoc:42
#, fuzzy
msgid "Java classes can also be used as input and output and must follow the Java bean convention and have a default constructor.  The Java type that is declared as the parameter or return type is the type that will be expected by the Funqy runtime.  Funqy does type introspection at build time to speed up boot time, so any derived types will not be noticed by the Funqy marshalling layer at runtime."
msgstr "Java类也可以被用作输入和输出，并且必须遵循Java Bean的惯例，并且有一个默认的构造函数。被声明为参数或返回类型的Java类型是Funqy运行时所期望的类型。Funqy在构建时进行类型自省，以加快启动时间，所以任何派生类型在运行时都不会被Funqy的marshalling层发现。"

#. type: Plain text
#: upstream/_guides/funqy.adoc:44
#, fuzzy
msgid "Here's an example of using a POJO as input and output types."
msgstr "下面是一个使用POJO作为输入和输出类型的例子。"

#. type: delimited block -
#: upstream/_guides/funqy.adoc:50
#, no-wrap
msgid ""
"public class GreetingFunction {\n"
"    public static class Friend {\n"
"        String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:54
#, no-wrap
msgid ""
"        public String getName() { return name; }\n"
"        public void setName(String name) { this.name = name; }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:57
#, no-wrap
msgid ""
"    public static class Greeting {\n"
"        String msg;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:60
#, no-wrap
msgid ""
"        public Greeting() {}\n"
"        public Greeting(String msg) { this.msg = msg }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:64
#, no-wrap
msgid ""
"        public String getMessage() { return msg; }\n"
"        public void setMessage(String msg) { this.msg = msg; }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:70
#, no-wrap
msgid ""
"    @Funq\n"
"    public Greeting greet(Friend friend) {\n"
"       return new Greeting(\"Hello \" + friend.getName());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/funqy.adoc:72
#, fuzzy, no-wrap
msgid "Async Reactive Types"
msgstr "异步反应式类型"

#. type: Plain text
#: upstream/_guides/funqy.adoc:76
#, fuzzy
msgid "Funqy supports the https://smallrye.io/smallrye-mutiny[Smallrye Mutiny] `Uni` reactive type as a return type.  The only requirement is that the `Uni` must fill out the generic type."
msgstr "Funqy支持 link:https://smallrye.io/smallrye-mutiny[Smallrye Mutiny] `Uni` 反应型作为返回类型。唯一的要求是， `Uni` 必须填写通用类型。"

#. type: delimited block -
#: upstream/_guides/funqy.adoc:81
#, no-wrap
msgid ""
"import io.quarkus.funqy.Funq;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:83 upstream/_guides/funqy.adoc:101
#: upstream/_guides/funqy.adoc:158
#, no-wrap
msgid "public class GreetingFunction {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:89
#, no-wrap
msgid ""
"    @Funq\n"
"    public Uni<Greeting> reactiveGreeting(String name) {\n"
"       ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/funqy.adoc:91
#, fuzzy, no-wrap
msgid "Function Names"
msgstr "功能名称"

#. type: Plain text
#: upstream/_guides/funqy.adoc:95
#, fuzzy
msgid "The function name defaults to the method name and is case sensitive.  If you want your function referenced by a different name, parameterize the `@Funq` annotation as follows:"
msgstr "函数名默认为方法名，并且区分大小写。如果你想让你的函数用不同的名字来引用，请将 `@Funq` 注解参数化，如下所示。"

#. type: delimited block -
#: upstream/_guides/funqy.adoc:107
#, no-wrap
msgid ""
"    @Funq(\"HelloWorld\")\n"
"    public String greet(String name) {\n"
"       return \"Hello \" + name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/funqy.adoc:109
#, fuzzy, no-wrap
msgid "Funqy DI"
msgstr "Funqy DI"

#. type: Plain text
#: upstream/_guides/funqy.adoc:113
#, fuzzy
msgid "Each Funqy Java class is a Quarkus Arc component and supports dependency injection through CDI or Spring DI.  Spring DI requires including the `quarkus-spring-di` dependency in your build."
msgstr "每个Funqy Java类都是Quarkus Arc组件，支持通过CDI或Spring DI进行依赖注入。Spring DI需要在你的构建中包括 `quarkus-spring-di` 依赖性。"

#. type: Plain text
#: upstream/_guides/funqy.adoc:115
#, fuzzy
msgid "The default object lifecycle for a Funqy class is `@Dependent`."
msgstr "Funqy类的默认对象生命周期是 `@Dependent` 。"

#. type: delimited block -
#: upstream/_guides/funqy.adoc:122
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:125
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class GreetingFunction {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:128
#, no-wrap
msgid ""
"    @Inject\n"
"    GreetingService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:136
#, no-wrap
msgid ""
"    @Funq\n"
"    public Greeting greet(Friend friend) {\n"
"        Greeting greeting = new Greeting();\n"
"        greeting.setMessage(service.greet(friend.getName()));\n"
"        return greeting;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/funqy.adoc:138
#, fuzzy, no-wrap
msgid "Context injection"
msgstr "语境注入"

#. type: Plain text
#: upstream/_guides/funqy.adoc:144
#, fuzzy
msgid "The Funqy API will usually not allow you to inject or use abstractions that are specific to a protocol (i.e. HTTP) or function API (i.e. AWS Lambda).  There are exceptions to the rule though and you may be able to inject contextual information that is specific to the environment you are deploying in."
msgstr "Funqy API通常不允许你注入或使用特定于协议（如HTTP）或功能API（如AWS Lambda）的抽象信息。但也有例外，你可以注入特定于你部署的环境的上下文信息。"

#. type: Plain text
#: upstream/_guides/funqy.adoc:146
#, fuzzy
msgid "We do not recommend injecting contextual information specific to a runtime.  Keep your functions portable."
msgstr "我们不建议注入特定于运行时的上下文信息。保持你的函数的可移植性。"

#. type: Plain text
#: upstream/_guides/funqy.adoc:150
#, fuzzy
msgid "Contextual information is injected via the `@Context` annotation which can be used on a function parameter or a class field.  A good example is the `io.quarkus.funqy.knative.events.CloudEvent` interface that comes with our Funqy Knative Cloud Events integration:"
msgstr "上下文信息是通过 `@Context` 注解注入的，它可以用于一个函数参数或一个类字段。一个很好的例子是我们的Funqy Knative云事件集成所附带的 `io.quarkus.funqy.knative.events.CloudEvent` 接口。"

#. type: delimited block -
#: upstream/_guides/funqy.adoc:156
#, no-wrap
msgid ""
"import io.quarkus.funqy.Funq;\n"
"import io.quarkus.funqy.Context;\n"
"import io.quarkus.funqy.knative.events.CloudEvent;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:162
#, no-wrap
msgid ""
"    @Funq\n"
"    public Greeting greet(Friend friend, @Context CloudEvent eventInfo) {\n"
"        System.out.println(\"Received greeting request from: \" eventInfo.getSource());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:168
#, no-wrap
msgid ""
"        Greeting greeting = new Greeting();\n"
"        greeting.setMessage(\"Hello \" + friend.getName()));\n"
"        return greeting;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/funqy.adoc:170
#, fuzzy, no-wrap
msgid "Should I Use Funqy?"
msgstr "我应该使用Funqy吗？"

#. type: Plain text
#: upstream/_guides/funqy.adoc:183
#, fuzzy, no-wrap
msgid ""
"REST over HTTP has become a very common way to write services over the past decade.  While Funqy\n"
"has an HTTP binding it is not a replacement for REST.  Because Funqy has to work across a variety\n"
"of protocols and function cloud platforms, it is very minimalistic and constrained.  For example, if you\n"
"use Funqy you lose the ability to link (think URIs) to the data your functions spit out.  You also\n"
"lose the ability to leverage cool HTTP features like `cache-control` and conditional GETs.  Many\n"
"developers will be ok with that as many won't be using these REST/HTTP features or styles. You'll\n"
"have to make the decision on what camp you are in.  Quarkus does support REST integration (through JAX-RS,\n"
" Spring MVC, Vert.x Web, and Servlet) with\n"
"various cloud/function providers, but there are some disadvantages of using that approach as well.  For example,\n"
"if you want to do xref:amazon-lambda-http.adoc[HTTP with AWS Lambda], this requires you to use the AWS API Gateway which may\n"
"slow down deployment and cold start time or even cost you more.\n"
msgstr "在过去的十年中，REST在HTTP上已经成为一种非常普遍的编写服务的方式。虽然Funqy有一个HTTP绑定，但它不是REST的替代品。因为Funqy必须在各种协议和功能云平台上工作，所以它是非常简约和受限制的。例如，如果你使用Funqy，你就失去了链接（想想URI）到你的函数吐出的数据的能力。你也失去了利用很酷的HTTP功能的能力，如 `cache-control` 和有条件的GETs。许多开发者对此并不介意，因为许多人不会使用这些REST/HTTP功能或样式。你将不得不决定你在哪个阵营中。Quarkus确实支持REST集成（通过JAX-RS、Spring MVC、Vert.x Web和Servlet）与各种云/功能提供商，但使用这种方法也有一些缺点。例如，如果你想 link:amazon-lambda-http.html[用AWS Lambda] 做 link:amazon-lambda-http.html[HTTP] ，这需要你使用AWS API网关，这可能会减慢部署和冷启动时间，甚至花费更多。"

#. type: Plain text
#: upstream/_guides/funqy.adoc:189
msgid "The purpose of Funqy is to allow you to write cross-provider functions so that you can move off of your current function provider if, for instance, they start charging you a lot more for their service.  Another reason you might not want to use Funqy is if you need access specific APIs of the target function environment.  For example, developers often want access to the AWS Context on Lambda.  In this case, we tell them they may be better off using the xref:amazon-lambda.adoc[Quarkus Amazon Lambda] integration instead."
msgstr ""
