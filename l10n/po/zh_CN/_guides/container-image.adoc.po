# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-11-29 11:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _guides/container-image.adoc
#, fuzzy, no-wrap
msgid "Container Images"
msgstr "容器图像"

#. type: Plain text
#: _guides/container-image.adoc
#, fuzzy
msgid "Quarkus provides extensions for building (and pushing) container images. Currently, it supports:"
msgstr "Quarkus提供了用于构建（和推送）容器镜像的扩展。目前它支持。"

#. type: Plain text
#: _guides/container-image.adoc
msgid "xref:jib[Jib]"
msgstr ""

#. type: Plain text
#: _guides/container-image.adoc
#, fuzzy
msgid "xref:docker[Docker]"
msgstr "link:#docker[码头]"

#. type: Plain text
#: _guides/container-image.adoc
msgid "xref:openshift[OpenShift]"
msgstr ""

#. type: Plain text
#: _guides/container-image.adoc
#, fuzzy
msgid "xref:buildpack[Buildpack]"
msgstr "link:#buildpack[建站包]"

#. type: Title ==
#: _guides/container-image.adoc
#, fuzzy, no-wrap
msgid "Container Image extensions"
msgstr "容器图像扩展"

#. type: Title ===
#: _guides/container-image.adoc
#, fuzzy, no-wrap
msgid "Jib"
msgstr "Jib"

#: _guides/container-image.adoc
msgid ""
"The extension `quarkus-container-image-jib` is powered by https://github.com/GoogleContainerTools/jib[Jib] for performing container image builds.\n"
"The major benefit of using Jib with Quarkus is that all the dependencies (everything found under `target/lib`) are cached in a different layer than the actual application making rebuilds really fast and small (when it comes to pushing).\n"
"Another important benefit of using this extension is that it provides the ability to create a container image without having to have any dedicated client side tooling (like Docker) or running daemon processes (like the Docker daemon)\n"
"when all that is needed is the ability to push to a container image registry."
msgstr ""

#. type: Plain text
#: _guides/container-image.adoc
#, fuzzy
msgid "To use this feature, add the following extension to your project:"
msgstr "要使用这个功能，请在你的项目中添加以下扩展。"

#: _guides/container-image.adoc
msgid ""
"In situations where all that is needed to build a container image and no push to a registry is necessary (essentially by having set `quarkus.container-image.build=true` and left `quarkus.container-image.push` unset - it defaults to `false`), then this extension creates a container image and registers\n"
"it with the Docker daemon. This means that although Docker isn't used to build the image, it is nevertheless necessary. Also note that using this mode, the built container image *will*\n"
"show up when executing `docker images`."
msgstr ""

#. type: Title ====
#: _guides/container-image.adoc
#, fuzzy, no-wrap
msgid "Including extra files"
msgstr "包括额外的文件"

#: _guides/container-image.adoc
msgid ""
"There are cases when additional files (other than ones produced by the Quarkus build) need to be added to a container image.\n"
"To support these cases, Quarkus copies any file under `src/main/jib` into the built container image (which is essentially the same\n"
"idea that the Jib Maven and Gradle plugins support).\n"
"For example, the presence of `src/main/jib/foo/bar` would result in  `/foo/bar` being added into the container filesystem."
msgstr ""

#. type: Title ====
#: _guides/container-image.adoc
#, fuzzy, no-wrap
msgid "JVM Debugging"
msgstr "JVM调试"

#. type: Plain text
#: _guides/container-image.adoc
#, fuzzy
msgid "There are cases where the built container image may need to have Java debugging conditionally enabled at runtime."
msgstr "有些情况下，构建的容器镜像可能需要在运行时有条件地启用Java调试。"

#: _guides/container-image.adoc
msgid ""
"When the base image has not been changed (and therefore `ubi8/openjdk-11-runtime`,  `ubi8/openjdk-17-runtime`, or `ubi8/openjdk-21-runtime` is used), then the `quarkus.jib.jvm-arguments` configuration property can be used in order to\n"
"make the JVM listen on the debug port at startup."
msgstr ""

#. type: Plain text
#: _guides/container-image.adoc
#, fuzzy
msgid "The exact configuration is:"
msgstr "确切的配置是。"

#. type: Plain text
#: _guides/container-image.adoc
#, fuzzy
msgid "Other base images might provide launch scripts that enable debugging when an environment variable is set, in which case you would set than environment variable when launching the container."
msgstr "其他的基础镜像可能会提供启动脚本，当环境变量被设置后就可以进行调试，在这种情况下，你会在启动容器时设置比环境变量。"

#. type: Title ====
#: _guides/container-image.adoc
#, fuzzy, no-wrap
msgid "Custom Entrypoint"
msgstr "自定义入口点"

#. type: Plain text
#: _guides/container-image.adoc
#, fuzzy
msgid "The `quarkus.jib.jvm-entrypoint` configuration property can be used to completely override the container entry point and can thus be used to either hard code the JVM debug configuration or point to a script that handles the details."
msgstr "最后， `quarkus.jib.jvm-entrypoint` 配置属性可用于完全覆盖容器入口点，因此可用于硬编码JVM调试配置或指向一个处理细节的脚本。"

#: _guides/container-image.adoc
msgid "For example, if the base images `ubi8/openjdk-11-runtime`, `ubi8/openjdk-17-runtime` or  `ubi8/openjdk-21-runtime` are used to build the container, the entry point can be hard-coded on the application properties file."
msgstr ""

#. type: Block title
#: _guides/container-image.adoc
#, fuzzy, no-wrap
msgid "Example application.properties"
msgstr "示例application.properties"

#. type: Plain text
#: _guides/container-image.adoc
#, fuzzy
msgid "Or a custom start-up script can be created and referenced on the properties file. This approach works better if there's a need to set application params using environment variables:"
msgstr "或者可以创建一个自定义的启动脚本并在属性文件上引用。如果需要使用环境变量来设置应用程序参数，这种方法效果更好。"

#. type: Block title
#: _guides/container-image.adoc
#, fuzzy, no-wrap
msgid "Example src/main/jib/home/jboss/run-java.sh"
msgstr "例子 src/main/jib/home/jboss/run-java.sh"

#. type: Plain text
#: _guides/container-image.adoc
#, fuzzy
msgid "`/home/jboss` is the WORKDIR for all quarkus binaries in the base images `ubi8/openjdk-11-runtime`, `ubi8/openjdk-17-runtime` and `ubi8/openjdk-21-runtime` (https://catalog.redhat.com/software/containers/ubi8/openjdk-17/618bdbf34ae3739687568813?container-tabs=dockerfile[Dockerfile for ubi8/openjdk-17-runtime, window=\"_blank\"])"
msgstr " `/home/jboss` 是基本镜像 和 `ubi8/openjdk-11-runtime` `ubi8/openjdk-17-runtime` link:https://catalog.redhat.com/software/containers/ubi8/openjdk-17/618bdbf34ae3739687568813?container-tabs=dockerfile[（ubi8/openjdk-17-runtime的Docker文件, target=\"_blank\"] ）中所有quarkus二进制文件的WORKDIR。"

#. type: Title ====
#: _guides/container-image.adoc
#, fuzzy, no-wrap
msgid "Multi-module projects and layering"
msgstr "多模块项目和分层"

#: _guides/container-image.adoc
msgid ""
"When building a multi-module project containing a Quarkus application as one module and various supporting project dependencies as other modules,\n"
"Quarkus supports placing these supporting modules in a separate container image layer from the rest of the application dependencies, with the expectation\n"
"that these supporting modules will change more frequently than the regular application dependencies - thus making a rebuild faster if the\n"
"application dependencies have not changed."
msgstr ""

#: _guides/container-image.adoc
msgid ""
"To enable this feature, the property `quarkus.bootstrap.workspace-discovery` needs to be set to `true` either as a system property\n"
"when invoking the build tool, either as a build tool property. Setting this property in `application.properties` will **not** work because\n"
"this property needs to be known very early on in the build process."
msgstr ""

#. type: Title ====
#: _guides/container-image.adoc
#, fuzzy, no-wrap
msgid "AppCDS"
msgstr "呼叫中心"

#: _guides/container-image.adoc
msgid ""
"Quarkus supports generating and including an link:https://docs.oracle.com/en/java/javase/17/docs/specs/man/java.html#application-class-data-sharing[Application Class Data Sharing] archive when generating a container image using Jib.\n"
"See the xref:appcds.adoc[AppCDS documentation] for more details."
msgstr ""

#. type: Title ===
#: _guides/container-image.adoc
#, fuzzy, no-wrap
msgid "Docker"
msgstr "码头"

#. type: Plain text
#: _guides/container-image.adoc
#, fuzzy
msgid "The extension `quarkus-container-image-docker` is using the Docker binary and the generated Dockerfiles under `src/main/docker` in order to perform Docker builds."
msgstr "扩展 `quarkus-container-image-docker` ，在 `src/main/docker` ，使用Docker二进制文件和生成的Dockerfiles，以便进行Docker构建。"

#. type: Plain text
#: _guides/container-image.adoc
#, fuzzy
msgid "To use this feature, add the following extension to your project."
msgstr "要使用这个功能，请在你的项目中添加以下扩展。"

#. type: Plain text
#: _guides/container-image.adoc
#, fuzzy
msgid "The `quarkus-container-image-docker` extension is capable of https://docs.docker.com/buildx/working-with-buildx/#build-multi-platform-images/[creating multi-platform (or multi-arch)] images using https://docs.docker.com/engine/reference/commandline/buildx_build/[`docker buildx build`]. See the `quarkus.docker.buildx.*` configuration items in the xref:DockerOptions[Docker Options] section below."
msgstr " `quarkus-container-image-docker` 扩展能够 link:https://docs.docker.com/buildx/working-with-buildx/#build-multi-platform-images/[创建多平台（或多架构] ）图像，使用 link:https://docs.docker.com/engine/reference/commandline/buildx_build/[`docker buildx build`] .见下面 link:#DockerOptions[Docker选项] 部分的 `quarkus.docker.buildx.*` 配置项。"

#. type: Plain text
#: _guides/container-image.adoc
#, fuzzy
msgid "`docker buildx build` ONLY supports https://docs.docker.com/engine/reference/commandline/buildx_build/#load[loading the result of a build] to `docker images` when building for a single platform. Therefore, if you specify more than one argument in the `quarkus.docker.buildx.platform` property, the resulting images will not be loaded into `docker images`. If `quarkus.docker.buildx.platform` is omitted or if only a single platform is specified, it will then be loaded into `docker images`."
msgstr " `docker buildx build` 当为单一平台构建时，只支持 link:https://docs.docker.com/engine/reference/commandline/buildx_build/#load[将构建的结果加载] 到 。因此，如果你在 属性中指定了一个以上的参数，产生的图像将不会被加载到 。如果省略了 ，或者只指定了一个平台，那么它就会被加载到 。 `docker images` `quarkus.docker.buildx.platform` `docker images` `quarkus.docker.buildx.platform` `docker images` "

#. type: Title ===
#: _guides/container-image.adoc
#, no-wrap
msgid "OpenShift"
msgstr ""

#: _guides/container-image.adoc
msgid ""
"The extension `quarkus-container-image-openshift` is using OpenShift binary builds in order to perform container builds inside the OpenShift cluster.\n"
"The idea behind the binary build is that you just upload the artifact and its dependencies to the cluster and during the build they will be merged to a builder image (defaults to `fabric8/s2i-java`)."
msgstr ""

#. type: Plain text
#: _guides/container-image.adoc
#, fuzzy
msgid "The benefit of this approach, is that it can be combined with OpenShift's `DeploymentConfig` that makes it easy to roll out changes to the cluster."
msgstr "这种方法的好处是，它可以与OpenShift的 `DeploymentConfig` ，这使得它很容易向集群推出变化。"

#: _guides/container-image.adoc
msgid ""
"OpenShift builds require creating a `BuildConfig` and two `ImageStream` resources, one for the builder image and one for the output image.\n"
"The creation of such objects is being taken care of by the Quarkus Kubernetes extension."
msgstr ""

#. type: Title ===
#: _guides/container-image.adoc
#, fuzzy, no-wrap
msgid "Buildpack"
msgstr "建站包"

#: _guides/container-image.adoc
msgid ""
"The extension `quarkus-container-image-buildpack` is using buildpacks in order to perform container image builds.\n"
"Under the hood buildpacks will use a Docker daemon for the actual build.\n"
"While buildpacks support alternatives to Docker, this extension will only work with Docker."
msgstr ""

#. type: Plain text
#: _guides/container-image.adoc
#, fuzzy
msgid "Additionally, the user will have to configure which build image to use (no default image is provided). For example:"
msgstr "此外，用户将不得不配置使用哪种构建图像（没有提供默认图像）。比如说。"

#. type: Plain text
#: _guides/container-image.adoc
#, fuzzy
msgid "or for native:"
msgstr "或为本地人。"

#. type: Plain text
#: _guides/container-image.adoc
#, fuzzy
msgid "When using the buildpack container image extension it is strongly advised to avoid adding `quarkus.container-image.build=true` in your properties configuration as it might trigger nesting builds within builds. It's preferable to pass it as an option to the build command instead."
msgstr "当使用 buildpack 容器镜像扩展时，强烈建议避免在你的属性配置中添加 `quarkus.container-image.build=true` ，因为它可能会触发构建中的嵌套构建。最好是把它作为一个选项传递给构建命令。"

#. type: Title ==
#: _guides/container-image.adoc
#, fuzzy, no-wrap
msgid "Building"
msgstr "建筑物"

#. type: Plain text
#: _guides/container-image.adoc
#, fuzzy
msgid "To build a container image for your project, `quarkus.container-image.build=true` needs to be set using any of the ways that Quarkus supports."
msgstr "为了给你的项目建立一个容器镜像， `quarkus.container-image.build=true` ，需要使用Quarkus支持的任何一种方式进行设置。"

#. type: Plain text
#: _guides/container-image.adoc
#, fuzzy
msgid "If you ever want to build a native container image and already have an existing native image you can set `-Dquarkus.native.reuse-existing=true` and the native image build will not be re-run."
msgstr "如果你想构建一个本地容器镜像，并且已经有一个现有的本地镜像，你可以设置 `-Dquarkus.native.reuse-existing=true` ，本地镜像的构建将不会被重新运行。"

#. type: Title ==
#: _guides/container-image.adoc
#, fuzzy, no-wrap
msgid "Using @QuarkusIntegrationTest"
msgstr "使用@QuarkusIntegrationTest"

#. type: Plain text
#: _guides/container-image.adoc
#, fuzzy
msgid "To run tests on the resulting image, `quarkus.container-image.build=true` needs to be set using any of the ways that Quarkus supports."
msgstr "为了在生成的图像上运行测试， `quarkus.container-image.build=true` ，需要使用Quarkus支持的任何一种方式进行设置。"

#. type: Block title
#: _guides/container-image.adoc
#, no-wrap
msgid "Maven"
msgstr "Maven"

#. type: Block title
#: _guides/container-image.adoc
#, no-wrap
msgid "Gradle"
msgstr "Gradle"

#. type: Title ==
#: _guides/container-image.adoc
#, fuzzy, no-wrap
msgid "Pushing"
msgstr "推进"

#. type: Plain text
#: _guides/container-image.adoc
#, fuzzy
msgid "To push a container image for your project, `quarkus.container-image.push=true` needs to be set using any of the ways that Quarkus supports."
msgstr "为了给你的项目推送一个容器镜像， `quarkus.container-image.push=true` ，需要使用Quarkus支持的任何一种方式进行设置。"

#. type: Plain text
#: _guides/container-image.adoc
#, fuzzy
msgid "If no registry is set (using `quarkus.container-image.registry`) then `docker.io` will be used as the default."
msgstr "如果没有设置注册表（使用 `quarkus.container-image.registry` ），那么 `docker.io` 将被作为默认值使用。"

#. type: Title ==
#: _guides/container-image.adoc
#, fuzzy, no-wrap
msgid "Selecting among multiple extensions"
msgstr "在多个分机中进行选择"

#. type: Plain text
#: _guides/container-image.adoc
#, fuzzy
msgid "It does not make sense to use multiple extension as part of the same build. When multiple container image extensions are present, an error will be raised to inform the user. The user can either remove the unneeded extensions or select one using `application.properties`."
msgstr "使用多个扩展作为同一构建的一部分是没有意义的。当出现多个容器镜像扩展时，会出现一个错误来通知用户。用户可以删除不需要的扩展或使用 `application.properties` 。"

#. type: Plain text
#: _guides/container-image.adoc
#, fuzzy
msgid "For example, if both `container-image-docker` and `container-image-openshift` are present and the user needs to use `container-image-docker`:"
msgstr "例如，如果 `container-image-docker` 和 `container-image-s2i` 都存在，而用户需要使用 `container-image-docker` 。"

#. type: Title ==
#: _guides/container-image.adoc
#, no-wrap
msgid "Integrating with `systemd-notify`"
msgstr ""

#. type: Plain text
#: _guides/container-image.adoc
msgid "If you are building a container image in order to deploy your Quarkus application as a Linux service with Podman and Systemd, you might want to consider including the https://quarkiverse.github.io/quarkiverse-docs/quarkus-systemd-notify/dev/index.html[Quarkus Systemd Notify Extension] as part of your application, with:"
msgstr ""

#. type: Title ==
#: _guides/container-image.adoc
#, fuzzy, no-wrap
msgid "Customizing"
msgstr "定制"

#. type: Plain text
#: _guides/container-image.adoc
#, fuzzy
msgid "The following properties can be used to customize the container image build process."
msgstr "以下属性可用于定制容器镜像构建过程。"

#. type: Title ===
#: _guides/container-image.adoc
#, fuzzy, no-wrap
msgid "Container Image Options"
msgstr "容器图像选项"

#: _guides/container-image.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""

#. type: Title ====
#: _guides/container-image.adoc
#, fuzzy, no-wrap
msgid "Using CI Environments"
msgstr "使用CI环境"

#: _guides/container-image.adoc
msgid ""
"Various CI environments provide a ready to use container-image registry which can be combined with the container-image Quarkus extensions in order to\n"
"effortlessly create and push a Quarkus application to said registry."
msgstr ""

#: _guides/container-image.adoc
msgid ""
"For example, https://gitlab.com/[GitLab] provides such a registry and in the provided CI environment,\n"
"makes available the `CI_REGISTRY_IMAGE` environment variable\n"
"(see GitLab's https://docs.gitlab.com/ee/ci/variables/[documentation]) for more information), which can be used in Quarkus like so:"
msgstr ""

#. type: Plain text
#: _guides/container-image.adoc
#, fuzzy
msgid "See xref:config-reference.adoc#with-environment-variables[this] for more information on how to combine properties with environment variables."
msgstr "关于如何将属性与环境变量结合起来的更多信息， link:config.html#combine-property-env-var[见此] 。"

#. type: Title ===
#: _guides/container-image.adoc
#, fuzzy, no-wrap
msgid "Jib Options"
msgstr "悬臂选项"

#. type: Plain text
#: _guides/container-image.adoc
msgid "In addition to the generic container image options, the `container-image-jib` also provides the following options:"
msgstr ""

#: _guides/container-image.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-1\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""

#. type: Title ===
#: _guides/container-image.adoc
#, no-wrap
msgid "Docker Options"
msgstr ""

#. type: Plain text
#: _guides/container-image.adoc
msgid "In addition to the generic container image options, the `container-image-docker` also provides the following options:"
msgstr ""

#: _guides/container-image.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-2\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""

#. type: Title ===
#: _guides/container-image.adoc
#, fuzzy, no-wrap
msgid "OpenShift  Options"
msgstr "悬臂选项"

#. type: Plain text
#: _guides/container-image.adoc
msgid "In addition to the generic container image options, the `container-image-openshift` also provides the following options:"
msgstr ""

#: _guides/container-image.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-3\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""
