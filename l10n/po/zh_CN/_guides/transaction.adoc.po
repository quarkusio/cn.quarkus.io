# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: 2022-06-06 00:44+0800\n"
"Last-Translator: Zheng Feng <zh.feng@gmail.com>\n"
"Language-Team: \n"
"Language: zh\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/transaction.adoc:6
#, no-wrap
msgid "Using Transactions in Quarkus"
msgstr "在Quarkus中使用事务"

#. type: Plain text
#: upstream/_guides/transaction.adoc:14
msgid "Quarkus comes with a Transaction Manager and uses it to coordinate and expose transactions to your applications.  Each extension dealing with persistence will integrate with it for you.  And you will explicitly interact with transactions via CDI.  This guide will walk you through all that."
msgstr "Quarkus自带一个事务管理器，并使用它来协调和暴露事务给你的应用程序。每个处理持久性的扩展都会与它集成。而且你将通过CDI明确地与事务进行交互。本指南将指导你完成这一切。"

#. type: Title ==
#: upstream/_guides/transaction.adoc:15
#, no-wrap
msgid "Setting it up"
msgstr "设置它"

#. type: Plain text
#: upstream/_guides/transaction.adoc:19
msgid "You don't need to worry about setting it up most of the time as extensions needing it will simply add it as a dependency.  Hibernate ORM for example will include the transaction manager and set it up properly."
msgstr "在大多数情况下，你不需要担心设置它，因为需要它的扩展会简单地把它作为一个依赖项加入。例如，Hibernate ORM将包括事务管理器并对其进行正确设置。"

#. type: Plain text
#: upstream/_guides/transaction.adoc:22
msgid "You might need to add it as a dependency explicitly if you are using transactions directly without Hibernate ORM for example.  Add the following to your build file:"
msgstr "如果你不使用Hibernate ORM而直接使用事务，你可能需要明确地将其作为一个依赖项加入，例如。在你的构建文件中添加以下内容："

#. type: Block title
#: upstream/_guides/transaction.adoc:24
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/transaction.adoc:30
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-narayana-jta</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/transaction.adoc:33
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/transaction.adoc:36
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-narayana-jta\")\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/transaction.adoc:38
#, no-wrap
msgid "Starting and stopping transactions: defining your boundaries"
msgstr "开始和停止事务：确定你的事务边界"

#. type: Plain text
#: upstream/_guides/transaction.adoc:42
msgid "You can define your transaction boundaries either declarativly with `@Transactional` or programmatically with `QuarkusTransaction`. You can also use the JTA `UserTransaction` API directly, however this is less user friendly than `QuarkusTransaction`."
msgstr "你可以用 `@Transactional` ，或者用 `QuarkusTransaction` ，以编程方式定义你的事务边界。你也可以直接使用JTA的 `UserTransaction` API，但是没有 `QuarkusTransaction` 好用。"

#. type: Title ===
#: upstream/_guides/transaction.adoc:43
#, no-wrap
msgid "Declarative approach"
msgstr "声明式方法"

#. type: Plain text
#: upstream/_guides/transaction.adoc:46
msgid "The easiest way to define your transaction boundaries is to use the `@Transactional` annotation on your entry method (`javax.transaction.Transactional`)."
msgstr "定义你的事务边界的最简单的方法是在你的入口方法上使用 `@Transactional` 注释( `javax.transaction.Transactional` )。"

#. type: delimited block -
#: upstream/_guides/transaction.adoc:51 upstream/_guides/transaction.adoc:99
#: upstream/_guides/transaction.adoc:253
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class SantaClausService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/transaction.adoc:54
#, no-wrap
msgid ""
"    @Inject ChildDAO childDAO;\n"
"    @Inject SantaClausDAO santaDAO;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/transaction.adoc:67
#, no-wrap
msgid ""
"    @Transactional // <1>\n"
"    public void getAGiftFromSanta(Child child, String giftDescription) {\n"
"        // some transaction work\n"
"        Gift gift = childDAO.addToGiftList(child, giftDescription);\n"
"        if (gift == null) {\n"
"            throw new OMGGiftNotRecognizedException(); // <2>\n"
"        }\n"
"        else {\n"
"            santaDAO.addToSantaTodoList(gift);\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/transaction.adoc:70
msgid "This annotation defines your transaction boundaries and will wrap this call within a transaction."
msgstr "这个注解定义了你的事务边界，并将把这个调用包含在一个事务中。"

#. type: Plain text
#: upstream/_guides/transaction.adoc:71
msgid "A `RuntimeException` crossing the transaction boundaries will rollback the transaction."
msgstr "一个 `RuntimeException` ，越过事务边界，将回滚交易。"

#. type: Plain text
#: upstream/_guides/transaction.adoc:74
msgid "`@Transactional` can be used to control transaction boundaries on any CDI bean at the method level or at the class level to ensure every method is transactional.  That includes REST endpoints."
msgstr "`@Transactional` 可以用来在方法层或类层控制任何CDI bean的事务边界，以确保每个方法都是事务性的。这包括REST端点。"

#. type: Plain text
#: upstream/_guides/transaction.adoc:76
msgid "You can control whether and how the transaction is started with parameters on `@Transactional`:"
msgstr "你可以通过 `@Transactional` 上的参数来控制是否以及如何启动事务："

#. type: Plain text
#: upstream/_guides/transaction.adoc:78
msgid "`@Transactional(REQUIRED)` (default): starts a transaction if none was started, stays with the existing one otherwise."
msgstr "`@Transactional(REQUIRED)` (默认）：如果当前没有事务，则启动一个事务，否则保持现有的事务。"

#. type: Plain text
#: upstream/_guides/transaction.adoc:79
msgid "`@Transactional(REQUIRES_NEW)`: starts a transaction if none was started ; if an existing one was started, suspends it and starts a new one for the boundary of that method."
msgstr "`@Transactional(REQUIRES_NEW)` ：如果当前没有事务，则启动一个事务；如果已经启动了一个事务，则暂停该事务，并从该方法的边界开始重新启动一个新事务。"

#. type: Plain text
#: upstream/_guides/transaction.adoc:80
msgid "`@Transactional(MANDATORY)`: fails if no transaction was started ; works within the existing transaction otherwise."
msgstr "`@Transactional(MANDATORY)` ：如果没有启动任何事务，则失败；否则在现有事务中工作。"

#. type: Plain text
#: upstream/_guides/transaction.adoc:81
msgid "`@Transactional(SUPPORTS)`: if a transaction was started, joins it ; otherwise works with no transaction."
msgstr "`@Transactional(SUPPORTS)` :如果一个事务已经开始，则加入它；否则在没有事务的情况下工作。"

#. type: Plain text
#: upstream/_guides/transaction.adoc:82
msgid "`@Transactional(NOT_SUPPORTED)`: if a transaction was started, suspends it and works with no transaction for the boundary of the method ; otherwise works with no transaction."
msgstr "`@Transactional(NOT_SUPPORTED)` 暂停事务：如果一个事务已经开始，则暂停事务，并在方法的边界内不使用事务；否则不使用事务。"

#. type: Plain text
#: upstream/_guides/transaction.adoc:83
msgid "`@Transactional(NEVER)`: if a transaction was started, raises an exception ; otherwise works with no transaction."
msgstr "`@Transactional(NEVER)` :如果一个事务被启动，引发一个异常；否则在没有事务的情况下工作。"

#. type: Plain text
#: upstream/_guides/transaction.adoc:87
msgid "`REQUIRED` or `NOT_SUPPORTED` are probably the most useful ones.  This is how you decide whether a method is to be running within or outside a transaction.  Make sure to check the JavaDoc for the precise semantic."
msgstr "`REQUIRED` 或 `NOT_SUPPORTED` 可能是最有用的。它们决定一个方法是在事务内还是事务外运行。请确保查看JavaDoc以了解准确的语义。"

#. type: Plain text
#: upstream/_guides/transaction.adoc:91
msgid "The transaction context is propagated to all calls nested in the `@Transactional` method as you would expect (in this example `childDAO.addToGiftList()` and `santaDAO.addToSantaTodoList()`).  The transaction will commit unless a runtime exception crosses the method boundary.  You can override whether an exception forces the rollback or not by using `@Transactional(dontRollbackOn=SomeException.class)` (or `rollbackOn`)."
msgstr "正如你所期望的那样，事务上下文被传播并嵌套在 `@Transactional` 方法中的所有调用（在这个例子中 `childDAO.addToGiftList()` 和 `santaDAO.addToSantaTodoList()` ）。除非有运行时异常穿越方法边界，否则事务将会提交。你可以通过使用 `@Transactional(dontRollbackOn=SomeException.class)` （或 `rollbackOn` ）来覆盖异常是否强制回滚。"

#. type: Plain text
#: upstream/_guides/transaction.adoc:94
msgid "You can also programmatically ask for a transaction to be marked for rollback.  Inject a `TransactionManager` for this."
msgstr "你也可以使用编程方式要求一个事务被标记为回滚。为此需要注入 `TransactionManager` 。"

#. type: delimited block -
#: upstream/_guides/transaction.adoc:103
#, no-wrap
msgid ""
"    @Inject TransactionManager tm; // <1>\n"
"    @Inject ChildDAO childDAO;\n"
"    @Inject SantaClausDAO santaDAO;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/transaction.adoc:116
#, no-wrap
msgid ""
"    @Transactional\n"
"    public void getAGiftFromSanta(Child child, String giftDescription) {\n"
"        // some transaction work\n"
"        Gift gift = childDAO.addToGiftList(child, giftDescription);\n"
"        if (gift == null) {\n"
"            tm.setRollbackOnly(); // <2>\n"
"        }\n"
"        else {\n"
"            santaDAO.addToSantaTodoList(gift);\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/transaction.adoc:119
msgid "Inject the `TransactionManager` to be able to activate `setRollbackOnly` semantic."
msgstr "注入 `TransactionManager` ，能够激活 `setRollbackOnly` 语义。"

#. type: Plain text
#: upstream/_guides/transaction.adoc:120
msgid "Programmatically decide to set the transaction for rollback."
msgstr "以编程方式决定将该事务设置为回滚。"

#. type: Title ===
#: upstream/_guides/transaction.adoc:122
#, no-wrap
msgid "Transaction Configuration"
msgstr "事务配置"

#. type: Plain text
#: upstream/_guides/transaction.adoc:125
msgid "Advanced configuration of the transaction is possible with the use of the `@TransactionConfiguration` annotation that is set in addition to the standard `@Transactional` annotation on your entry method or at the class level."
msgstr "除了在你的入口方法上或在类的层面上设置标准的 `@Transactional` 注解之外，事务的高级配置还可以通过使用 `@TransactionConfiguration` 注解来实现。"

#. type: Plain text
#: upstream/_guides/transaction.adoc:127
msgid "The `@TransactionConfiguration` annotation allows to set a timeout property, in seconds, that applies to transactions created within the annotated method."
msgstr "`@TransactionConfiguration` 注解允许设置一个超时属性，以秒为单位，适用于在注解方法中创建的事务。"

#. type: Plain text
#: upstream/_guides/transaction.adoc:130
msgid "This annotation may only be placed on the top level method delineating the transaction.  Annotated nested methods once a transaction has started will throw an exception."
msgstr "这个注释只能放在划定事务的顶层方法上。一旦事务开始，被注解的嵌套方法将抛出一个异常。"

#. type: Plain text
#: upstream/_guides/transaction.adoc:133
msgid "If defined on a class, it is equivalent to defining it on all the methods of the class marked with `@Transactional`.  The configuration defined on a method takes precedence over the configuration defined on a class."
msgstr "如果在一个类上定义，就相当于在该类所有标有 `@Transactional` 的方法上定义了它。在方法上定义的配置优先于在类上定义的配置。"

#. type: Title ===
#: upstream/_guides/transaction.adoc:134
#, no-wrap
msgid "Reactive extensions"
msgstr "响应性扩展"

#. type: Plain text
#: upstream/_guides/transaction.adoc:137
msgid "If your `@Transactional`-annotated method returns a reactive value, such as:"
msgstr "如果你的 `@Transactional` -注释的方法返回一个响应性的值，例如："

#. type: Plain text
#: upstream/_guides/transaction.adoc:139
msgid "`CompletionStage` (from the JDK)"
msgstr "`CompletionStage` (来自JDK)"

#. type: Plain text
#: upstream/_guides/transaction.adoc:140
msgid "`Publisher` (from Reactive-Streams)"
msgstr "`Publisher` (来自Reactive-Streams)"

#. type: Plain text
#: upstream/_guides/transaction.adoc:141
msgid "Any type which can be converted to one of the two previous types using Reactive Type Converters"
msgstr "任何可以使用响应式类型转换器转换为前两种类型之一的类型"

#. type: Plain text
#: upstream/_guides/transaction.adoc:146
msgid "then the behaviour is a bit different, because the transaction will not be terminated until the returned reactive value is terminated. In effect, the returned reactive value will be listened to and if it terminates exceptionally the transaction will be marked for rollback, and will be committed or rolled-back only at termination of the reactive value."
msgstr "那么行为就有点不同了，因为在返回的响应式值终止之前，事务不会被终止。实际上，返回的响应式值将被监听，如果它意外终止，事务将被标记为回滚，并且只有在响应式值终止时才会提交或回滚。"

#. type: Plain text
#: upstream/_guides/transaction.adoc:149
msgid "This allows your reactive methods to keep on working on the transaction asynchronously until their work is really done, and not just until the reactive method returns."
msgstr "这允许你的响应式方法以异步方式继续在事务上工作，直到他们的工作真正完成，而不仅仅是当响应式方法返回时。"

#. type: Plain text
#: upstream/_guides/transaction.adoc:152
msgid "If you need to propagate your transaction context across your reactive pipeline, please see the xref:context-propagation.adoc[Context Propagation guide]."
msgstr "如果你需要在你的响应式管道中传播你的事务上下文，请看 link:context-propagation.html[上下文传播指南] 。"

#. type: Title ===
#: upstream/_guides/transaction.adoc:153
#, no-wrap
msgid "Programmatic Approach"
msgstr "编程实现方法"

#. type: Plain text
#: upstream/_guides/transaction.adoc:158
msgid "You can use static methods on `QuarkusTransaction` to define transaction boundaries. This provides two different options, a functional approach that allows you to run a lambda within the scope of a transaction, or by using explicit `begin`, `commit` and `rollback` methods."
msgstr "你可以使用 `QuarkusTransaction` 上的静态方法来定义事务边界。这提供了两种不同的选择，一种是允许你在事务范围内运行lambda的函数式方法，或者通过使用显式的 `begin` 、 `commit` 和 `rollback` 方法。"

#. type: delimited block -
#: upstream/_guides/transaction.adoc:163
#, no-wrap
msgid ""
"import io.quarkus.narayana.jta.QuarkusTransaction;\n"
"import io.quarkus.narayana.jta.RunOptions;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/transaction.adoc:165
#, no-wrap
msgid "public class TransactionExample {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/transaction.adoc:170
#, no-wrap
msgid ""
"    public void beginExample() {\n"
"        QuarkusTransaction.begin();\n"
"        //do work\n"
"        QuarkusTransaction.commit();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/transaction.adoc:176
#, no-wrap
msgid ""
"        QuarkusTransaction.begin(QuarkusTransaction.beginOptions()\n"
"                .timeout(10));\n"
"        //do work\n"
"        QuarkusTransaction.rollback();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/transaction.adoc:181
#, no-wrap
msgid ""
"    public void lambdaExample() {\n"
"        QuarkusTransaction.run(() -> {\n"
"            //do work\n"
"        });\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/transaction.adoc:197
#, no-wrap
msgid ""
"        int result = QuarkusTransaction.call(QuarkusTransaction.runOptions()\n"
"                .timeout(10)\n"
"                .exceptionHandler((throwable) -> {\n"
"                    if (throwable instanceof SomeException) {\n"
"                        return RunOptions.ExceptionResult.COMMIT;\n"
"                    }\n"
"                    return RunOptions.ExceptionResult.ROLLBACK;\n"
"                })\n"
"                .semantic(RunOptions.Semantic.SUSPEND_EXISTING), () -> {\n"
"            //do work\n"
"            return 0;\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/transaction.adoc:204
msgid "The above example shows a few different ways the API can be used. The first method simply calls begin, does some work and commits it.  This created transaction is tied to the CDI request scope, so if it is still active when the request scope is destroyed then it will be automatically rolled back. This removes the need to explicitly catch exceptions and call `rollback`, and acts as a safety net against inadvertent transaction leaks, however it does mean that this can only be used when the request scope is active. The second example in the method calls begin with a timeout option, and then rolls back the transaction."
msgstr "上面的例子显示了几种不同的API使用方法。第一个方法是简单地调用begin，做一些工作并提交。这个创建的事务是与CDI请求范围相联系的，所以如果它在请求范围被破坏时仍处于活动状态，那么它将被自动回滚。这样就不需要明确地捕捉异常和调用 `rollback` ，并作为一个安全措施来防止无意中的事务泄露，然而这也意味着这只能在请求范围处于活动状态时使用。方法调用中的第二个例子以一个超时选项开始，然后回滚事务。"

#. type: Plain text
#: upstream/_guides/transaction.adoc:208
msgid "The second example shows the use of lambda scoped transactions, the first just runs a `Runnable` within a transaction, the second, runs `Callable` with some specific options. In particular the `exceptionHandler` method can be used to control if the transaction is rolled back or not on exception, and the `semantic` method controls the behaviour if an existing transaction is already started."
msgstr "第二个例子展示了lambda范围内事务的使用，第一个例子只是在一个事务中运行 `Runnable` ，第二个例子，运行 `Callable` ，并带有一些特定的选项。特别是 `exceptionHandler` 方法可以用来控制事务是否在异常情况下回滚，而 `semantic` 方法可以控制现有事务已经开始时的行为。"

#. type: Plain text
#: upstream/_guides/transaction.adoc:210
msgid "The following semantics are supported:"
msgstr "支持以下语义："

#. type: Labeled list
#: upstream/_guides/transaction.adoc:212
#, no-wrap
msgid "DISALLOW_EXISTING"
msgstr "DISALLOW_EXISTING"

#. type: Plain text
#: upstream/_guides/transaction.adoc:216
msgid "If a transaction is already associated with the current thread a `QuarkusTransactionException` will be thrown, otherwise a new transaction is started, and follows all the normal lifecycle rules."
msgstr "如果一个事务已经与当前线程相关联，将抛出一个 `QuarkusTransactionException` ，否则将启动一个新的事务，并遵循所有正常的生命周期规则。"

#. type: Labeled list
#: upstream/_guides/transaction.adoc:217
#, no-wrap
msgid "JOIN_EXISTING"
msgstr "JOIN_EXISTING"

#. type: Plain text
#: upstream/_guides/transaction.adoc:226
msgid "If no transaction is active then a new transaction will be started, and committed when the method ends.  If an exception is thrown the exception handler registered by `#exceptionHandler(Function)` will be called to decide if the TX should be committed or rolled back.  If an existing transaction is active then the method is run in the context of the existing transaction. If an exception is thrown the exception handler will be called, however a result of `ExceptionResult#ROLLBACK` will result in the TX marked as rollback only, while a result of `ExceptionResult#COMMIT` will result in no action being taken."
msgstr "如果没有活动的事务，那么一个新的事务将被启动，并在方法结束时提交。如果一个异常被抛出，由 `#exceptionHandler(Function)` 注册的异常处理程序将被调用，以决定TX是否应该被提交或回滚。如果一个现有的事务处于活动状态，那么该方法将在现有事务的背景下运行。如果抛出一个异常，将调用异常处理程序，但是 `ExceptionResult#ROLLBACK` 的结果将导致TX被标记为回滚，而 `ExceptionResult#COMMIT` 的结果将导致不采取任何行动。"

#. type: Labeled list
#: upstream/_guides/transaction.adoc:227
#, no-wrap
msgid "REQUIRE_NEW"
msgstr "REQUIRE_NEW"

#. type: Plain text
#: upstream/_guides/transaction.adoc:234
msgid "This is the default semantic.  If an existing transaction is already associated with the current thread then the transaction is suspended, and resumed once the current transaction is complete.  A new transaction is started after the existing transaction is suspended, and follows all the normal lifecycle rules."
msgstr "这是默认的语义。如果一个现有的事务已经与当前线程相关联，那么该事务将被暂停，并在当前事务完成后恢复。一个新的事务在现有事务被暂停后开始，并遵循所有正常的生命周期规则。"

#. type: Labeled list
#: upstream/_guides/transaction.adoc:235
#, no-wrap
msgid "SUSPEND_EXISTING"
msgstr "SUSPEND_EXISTING"

#. type: Plain text
#: upstream/_guides/transaction.adoc:242
msgid "If no transaction is active then this semantic is basically a no-op.  If a transaction is active then it is suspended, and resumed after the task is run.  The exception handler will never be consulted when this semantic is in use, specifying both an exception handler and this semantic is considered an error.  This semantic allows for code to easily be run outside the scope of a transaction."
msgstr "如果没有事务处于活动状态，那么这个语义基本上就是一个无用功。如果一个事务处于活动状态，那么它就会被暂停，并在任务运行之后恢复。在使用这种语义的时候，将永远不会查询异常处理程序，同时指定异常处理程序和这种语义被认为是一个错误。这种语义允许在事务的范围之外轻松地运行代码。"

#. type: Title ===
#: upstream/_guides/transaction.adoc:245
#, no-wrap
msgid "Legacy API approach"
msgstr "传统的API方法"

#. type: Plain text
#: upstream/_guides/transaction.adoc:248
msgid "The less easy way is to inject a `UserTransaction` and use the various transaction demarcation methods."
msgstr "不太容易的方法是注入一个 `UserTransaction` ，并使用各种事务处理方法。"

#. type: delimited block -
#: upstream/_guides/transaction.adoc:257
#, no-wrap
msgid ""
"    @Inject ChildDAO childDAO;\n"
"    @Inject SantaClausDAO santaDAO;\n"
"    @Inject UserTransaction transaction;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/transaction.adoc:272
#, no-wrap
msgid ""
"    public void getAGiftFromSanta(Child child, String giftDescription) {\n"
"        // some transaction work\n"
"        try {\n"
"            transaction.begin();\n"
"            Gift gift = childDAO.addToGiftList(child, giftDescription);\n"
"            santaDAO.addToSantaTodoList(gift);\n"
"            transaction.commit();\n"
"        }\n"
"        catch(SomeException e) {\n"
"            // do something on Tx failure\n"
"            transaction.rollback();\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/transaction.adoc:277
msgid "You cannot use `UserTransaction` in a method having a transaction started by a `@Transactional` call."
msgstr "你不能在一个由 `@Transactional` 控制事务启动的方法中使用 `UserTransaction` 。"

#. type: Title ==
#: upstream/_guides/transaction.adoc:279
#, no-wrap
msgid "Configuring the transaction timeout"
msgstr "配置事务超时"

#. type: Plain text
#: upstream/_guides/transaction.adoc:281
msgid "You can configure the default transaction timeout, the timeout that applies to all transactions managed by the transaction manager, via the property `quarkus.transaction-manager.default-transaction-timeout`, specified as a duration."
msgstr "你可以通过属性 `quarkus.transaction-manager.default-transaction-timeout` 来配置默认的事务超时，即适用于由事务管理器管理的所有事务的超时，指定为一个持续时间。"

#. type: Plain text
#: upstream/_guides/transaction.adoc:285
msgid "The default value is 60 seconds."
msgstr "默认值是60秒。"

#. type: Title ==
#: upstream/_guides/transaction.adoc:286
#, no-wrap
msgid "Configuring transaction node name identifier"
msgstr "配置事务节点名称标识符"

#. type: Plain text
#: upstream/_guides/transaction.adoc:290
msgid "Narayana, as the underlying transaction manager, has a concept of a unique node identifier.  This is important if you consider using XA transactions that involve multiple resources."
msgstr "Narayana作为底层事务管理器，有一个唯一节点标识符的概念。如果你考虑使用涉及多个资源的XA事务，这就很重要了。"

#. type: Plain text
#: upstream/_guides/transaction.adoc:296
msgid "The node name identifier plays a crucial part in the identification of a transaction.  The node name identifier is forged into the transaction id when the transaction is created.  Based on the node name identifier, the transaction manager is capable of recognizing the XA transaction counterparts created in database or JMS broker. The identifier makes possible for the transaction manager to roll back the transaction counterparts during recovery."
msgstr "节点名称标识符在交易的识别中起着至关重要的作用。当交易被创建时，节点名称标识符被做为成交易ID的一部分。基于节点名称标识符，事务管理器能够识别在数据库或JMS代理中创建的XA事务对应物。该标识符使事务管理器有可能在恢复期间回滚事务对应方。"

#. type: Plain text
#: upstream/_guides/transaction.adoc:299
msgid "The node name identifier needs to be unique per transaction manager deployment.  And the node identifier needs to be stable over the transaction manager restarts."
msgstr "节点名称标识符需要在每个事务管理器部署中是唯一的。而且节点标识符需要在事务管理器重新启动时保持不变。"

#. type: Plain text
#: upstream/_guides/transaction.adoc:301
msgid "The node name identifier may be configured via the property `quarkus.transaction-manager.node-name`."
msgstr "节点名称标识符可以通过属性 `quarkus.transaction-manager.node-name` 进行配置。"

#. type: Title ==
#: upstream/_guides/transaction.adoc:302
#, no-wrap
msgid "Why always having a transaction manager?"
msgstr "为什么总是有一个事务处理器？"

#. type: Labeled list
#: upstream/_guides/transaction.adoc:304
#, no-wrap
msgid "Does it work everywhere I want to?"
msgstr "它能在我希望的所有地方工作吗？"

#. type: Plain text
#: upstream/_guides/transaction.adoc:311
msgid "Yep, it works in your Quarkus application, in your IDE, in your tests, because all of these are Quarkus applications.  JTA has some bad press for some people.  I don't know why.  Let's just say that this is not your grandpa's JTA implementation.  What we have is perfectly embeddable and lean."
msgstr "是的，它在你的Quarkus应用程序中，在你的IDE中，在你的测试中都可以使用，因为这些都是Quarkus应用程序。JTA对一些人来说有一些不好的影响。我不知道为什么。我们只能说，这不是老旧的JTA实现。我们所拥有的是完美的可嵌入的和精简的实现。"

#. type: Labeled list
#: upstream/_guides/transaction.adoc:312
#, no-wrap
msgid "Does it do 2 Phase Commit and slow down my app?"
msgstr "两阶段提交是否会减慢了我的应用程序？"

#. type: Plain text
#: upstream/_guides/transaction.adoc:316
msgid "No, this is an old folk tale.  Let's assume it essentially comes for free and let you scale to more complex cases involving several datasources as needed."
msgstr "不，这是一个古老的民间故事。让我们假设它基本上是免费的，让你根据需要扩展到涉及几个数据源的更复杂的情况。"

#. type: Labeled list
#: upstream/_guides/transaction.adoc:317
#, no-wrap
msgid "I don't need transaction when I do read only operations, it's faster."
msgstr "当我做只读操作时，就不需要事务，这样会更快"

#. type: Plain text
#: upstream/_guides/transaction.adoc:329
msgid "Wrong. + First off, just disable the transaction by marking your transaction boundary with `@Transactional(NOT_SUPPORTED)` (or `NEVER` or `SUPPORTS` depending on the semantic you want). + Second, it's again fairy tale that not using transaction is faster.  The answer is, it depends on your DB and how many SQL SELECTs you are making.  No transaction means the DB does have a single operation transaction context anyways. + Third, when you do several SELECTs, it's better to wrap them in a single transaction because they will all be consistent with one another.  Say your DB represents your car dashboard, you can see the number of kilometers remaining and the fuel gauge level.  By reading it in one transaction, they will be consistent.  If you read one and the other from two different transactions, then they can be inconsistent.  It can be more dramatic if you read data related to rights and access management for example."
msgstr "错误。 + 首先，只要用 `@Transactional(NOT_SUPPORTED)` （或 `NEVER` 或 `SUPPORTS` ，取决于你想要的语义）标记你的事务边界，就可以禁用事务。 + 其次，不使用事务会更快，这又是另一个故事。答案是，这取决于你的数据库和你正在进行的SQL SELECT的数量。不使用事务意味着无论如何，数据库确实有一个单一的操作事务环境。 + 第三，当你做几个SELECT时，最好把它们包在一个事务中，因为它们都会保持一致性。假设你的数据库代表你的汽车仪表盘，你可以看到剩余的公里数和油表水平。通过在一个事务中读取它，它们将是一致的。如果你从两个不同的事务中读取一个和另一个，那么它们可能是不一致的。再例如，如果你读取与权限和访问管理有关的数据，结果可能会更加戏剧化。"

#. type: Labeled list
#: upstream/_guides/transaction.adoc:330
#, no-wrap
msgid "Why do you prefer JTA vs Hibernate's transaction management API"
msgstr "为什么相对Hibernate 的事务管理 API你更推荐JTA"

#. type: Plain text
#: upstream/_guides/transaction.adoc:334
msgid "Managing the transactions manually via `entityManager.getTransaction().begin()` and friends lead to a butt ugly code with tons of try catch finally that people get wrong.  Transactions are also about JMS and other database access, so one API makes more sense."
msgstr "通过 `entityManager.getTransaction().begin()` 和手动管理事务会导致一段丑陋的代码，最终人们会出错。 事务也与 JMS 和其他数据库访问有关，因此一个 API 更有意义。"

#. type: Labeled list
#: upstream/_guides/transaction.adoc:335
#, no-wrap
msgid "It's a mess because I don't know if my JPA persistence unit is using `JTA` or `Resource-level` Transaction"
msgstr "当不知道JPA persistence unit 使用的是“JTA”还是“Resource-level”事务，这可能会造成混乱"

#. type: Plain text
#: upstream/_guides/transaction.adoc:340
msgid "It's not a mess in Quarkus :)  Resource-level was introduced to support JPA in a non managed environment.  But Quarkus is both lean and a managed environment so we can safely always assume we are in JTA mode.  The end result is that the difficulties of running Hibernate ORM + CDI + a transaction manager in Java SE mode are solved by Quarkus."
msgstr "在 Quarkus 中不会引起混乱 :) 引入资源级是为了在非托管环境中支持 JPA。 但是 Quarkus 既是精益环境又是托管环境，因此我们始终可以安全地假设我们处于 JTA 模式。 最终的结果是，Quarkus 解决了在 Java SE 模式下运行 Hibernate ORM + CDI + 事务管理器的困难。"
