# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2023-11-29 11:14+0000\n"
"PO-Revision-Date: 2022-06-06 00:44+0800\n"
"Last-Translator: Zheng Feng <zh.feng@gmail.com>\n"
"Language-Team: \n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _guides/transaction.adoc
#, fuzzy, no-wrap
msgid "Using transactions in Quarkus"
msgstr "在Quarkus中使用事务"

#. type: Plain text
#: _guides/transaction.adoc
#, fuzzy
msgid "The `quarkus-narayana-jta` extension provides a Transaction Manager that coordinates and expose transactions to your applications as described in the link: https://jakarta.ee/specifications/transactions/[Jakarta Transactions] specification, formerly known as Java Transaction API (JTA)."
msgstr "`quarkus-narayana-jta` 扩展提供了一个事务管理器，用于协调并向应用程序公开事务，如链接中所述： link:https://jakarta.ee/specifications/transactions/[Jakarta 事务] 规范，以前称为 Java Transaction API ( link:https://jakarta.ee/specifications/transactions/[JTA] )。"

#. type: Plain text
#: _guides/transaction.adoc
#, fuzzy
msgid "When discussing Quarkus transactions, this guide refers to Jakarta Transactions transaction style and uses only the term _transaction_ to address them."
msgstr "在讨论 Quarkus 事务时，本指南将提及 Jakarta 事务风格，并仅使用 _事务_ 一词。"

#: _guides/transaction.adoc
#, fuzzy
msgid ""
"Also, Quarkus does not support distributed transactions.\n"
"This means that models that propagate transaction context, such as link:https://download.oracle.com/otndocs/jcp/7309-jts-1.0-spec-oth-JSpec/[Java Transaction Service] (JTS), REST-AT, WS-Atomic Transaction, and others, are not supported by the `narayana-jta` extension."
msgstr "此外，Quarkus 不支持分布式事务。这意味着 `narayana-jta` 扩展不支持传播事务上下文的模型，如 link:https://download.oracle.com/otndocs/jcp/7309-jts-1.0-spec-oth-JSpec/[Java Transaction Service] (JTS)、REST-AT、WS-Atomic Transaction 等。"

#. type: Title ==
#: _guides/transaction.adoc
#, no-wrap
msgid "Setting it up"
msgstr "设置它"

#: _guides/transaction.adoc
msgid ""
"You don't need to worry about setting it up most of the time as extensions needing it will simply add it as a dependency.\n"
"Hibernate ORM for example will include the transaction manager and set it up properly."
msgstr "在大多数情况下，你不需要担心设置它，因为需要它的扩展会简单地把它作为一个依赖项加入。例如，Hibernate ORM将包括事务管理器并对其进行正确设置。"

#: _guides/transaction.adoc
msgid ""
"You might need to add it as a dependency explicitly if you are using transactions directly without Hibernate ORM for example.\n"
"Add the following to your build file:"
msgstr "如果你不使用Hibernate ORM而直接使用事务，你可能需要明确地将其作为一个依赖项加入，例如。在你的构建文件中添加以下内容："

#. type: Block title
#: _guides/transaction.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _guides/transaction.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: _guides/transaction.adoc
#, no-wrap
msgid "Starting and stopping transactions: defining your boundaries"
msgstr "开始和停止事务：确定你的事务边界"

#: _guides/transaction.adoc
#, fuzzy
msgid ""
"You can define your transaction boundaries either declaratively with `@Transactional` or programmatically with `QuarkusTransaction`. You can also use\n"
"the JTA `UserTransaction` API directly, however this is less user-friendly than `QuarkusTransaction`."
msgstr "您可以使用 `@Transactional` 声明式地定义事务边界，也可以使用 `QuarkusTransaction` 编程式地定义事务边界。您还可以直接使用 JTA `UserTransaction` API，但它不如 `QuarkusTransaction` 那样方便用户使用。"

#. type: Title ===
#: _guides/transaction.adoc
#, no-wrap
msgid "Declarative approach"
msgstr "声明式方法"

#. type: Plain text
#: _guides/transaction.adoc
#, fuzzy
msgid "The easiest way to define your transaction boundaries is to use the `@Transactional` annotation on your entry method (`jakarta.transaction.Transactional`)."
msgstr "定义你的事务边界的最简单的方法是在你的入口方法上使用 `@Transactional` 注释( `javax.transaction.Transactional` )。"

#. type: Plain text
#: _guides/transaction.adoc
msgid "This annotation defines your transaction boundaries and will wrap this call within a transaction."
msgstr "这个注解定义了你的事务边界，并将把这个调用包含在一个事务中。"

#. type: Plain text
#: _guides/transaction.adoc
#, fuzzy
msgid "A `RuntimeException` crossing the transaction boundaries will roll back the transaction."
msgstr "一个 `RuntimeException` ，越过事务边界，将回滚交易。"

#: _guides/transaction.adoc
msgid ""
"`@Transactional` can be used to control transaction boundaries on any CDI bean at the method level or at the class level to ensure every method is transactional.\n"
"That includes REST endpoints."
msgstr "`@Transactional` 可以用来在方法层或类层控制任何CDI bean的事务边界，以确保每个方法都是事务性的。这包括REST端点。"

#. type: Plain text
#: _guides/transaction.adoc
msgid "You can control whether and how the transaction is started with parameters on `@Transactional`:"
msgstr "你可以通过 `@Transactional` 上的参数来控制是否以及如何启动事务："

#. type: Plain text
#: _guides/transaction.adoc
msgid "`@Transactional(REQUIRED)` (default): starts a transaction if none was started, stays with the existing one otherwise."
msgstr "`@Transactional(REQUIRED)` (默认）：如果当前没有事务，则启动一个事务，否则保持现有的事务。"

#. type: Plain text
#: _guides/transaction.adoc
msgid "`@Transactional(REQUIRES_NEW)`: starts a transaction if none was started ; if an existing one was started, suspends it and starts a new one for the boundary of that method."
msgstr "`@Transactional(REQUIRES_NEW)` ：如果当前没有事务，则启动一个事务；如果已经启动了一个事务，则暂停该事务，并从该方法的边界开始重新启动一个新事务。"

#. type: Plain text
#: _guides/transaction.adoc
msgid "`@Transactional(MANDATORY)`: fails if no transaction was started ; works within the existing transaction otherwise."
msgstr "`@Transactional(MANDATORY)` ：如果没有启动任何事务，则失败；否则在现有事务中工作。"

#. type: Plain text
#: _guides/transaction.adoc
msgid "`@Transactional(SUPPORTS)`: if a transaction was started, joins it ; otherwise works with no transaction."
msgstr "`@Transactional(SUPPORTS)` :如果一个事务已经开始，则加入它；否则在没有事务的情况下工作。"

#. type: Plain text
#: _guides/transaction.adoc
msgid "`@Transactional(NOT_SUPPORTED)`: if a transaction was started, suspends it and works with no transaction for the boundary of the method ; otherwise works with no transaction."
msgstr "`@Transactional(NOT_SUPPORTED)` 暂停事务：如果一个事务已经开始，则暂停事务，并在方法的边界内不使用事务；否则不使用事务。"

#. type: Plain text
#: _guides/transaction.adoc
msgid "`@Transactional(NEVER)`: if a transaction was started, raises an exception ; otherwise works with no transaction."
msgstr "`@Transactional(NEVER)` :如果一个事务被启动，引发一个异常；否则在没有事务的情况下工作。"

#: _guides/transaction.adoc
msgid ""
"`REQUIRED` or `NOT_SUPPORTED` are probably the most useful ones.\n"
"This is how you decide whether a method is to be running within or outside a transaction.\n"
"Make sure to check the JavaDoc for the precise semantic."
msgstr "`REQUIRED` 或 `NOT_SUPPORTED` 可能是最有用的。它们决定一个方法是在事务内还是事务外运行。请确保查看JavaDoc以了解准确的语义。"

#: _guides/transaction.adoc
msgid ""
"The transaction context is propagated to all calls nested in the `@Transactional` method as you would expect (in this example `childDAO.addToGiftList()` and `santaDAO.addToSantaTodoList()`).\n"
"The transaction will commit unless a runtime exception crosses the method boundary.\n"
"You can override whether an exception forces the rollback or not by using `@Transactional(dontRollbackOn=SomeException.class)` (or `rollbackOn`)."
msgstr "正如你所期望的那样，事务上下文被传播并嵌套在 `@Transactional` 方法中的所有调用（在这个例子中 `childDAO.addToGiftList()` 和 `santaDAO.addToSantaTodoList()` ）。除非有运行时异常穿越方法边界，否则事务将会提交。你可以通过使用 `@Transactional(dontRollbackOn=SomeException.class)` （或 `rollbackOn` ）来覆盖异常是否强制回滚。"

#: _guides/transaction.adoc
msgid ""
"You can also programmatically ask for a transaction to be marked for rollback.\n"
"Inject a `TransactionManager` for this."
msgstr "你也可以使用编程方式要求一个事务被标记为回滚。为此需要注入 `TransactionManager` 。"

#. type: Plain text
#: _guides/transaction.adoc
msgid "Inject the `TransactionManager` to be able to activate `setRollbackOnly` semantic."
msgstr "注入 `TransactionManager` ，能够激活 `setRollbackOnly` 语义。"

#. type: Plain text
#: _guides/transaction.adoc
msgid "Programmatically decide to set the transaction for rollback."
msgstr "以编程方式决定将该事务设置为回滚。"

#. type: Title ===
#: _guides/transaction.adoc
#, fuzzy, no-wrap
msgid "Transaction configuration"
msgstr "事务配置"

#. type: Plain text
#: _guides/transaction.adoc
msgid "Advanced configuration of the transaction is possible with the use of the `@TransactionConfiguration` annotation that is set in addition to the standard `@Transactional` annotation on your entry method or at the class level."
msgstr "除了在你的入口方法上或在类的层面上设置标准的 `@Transactional` 注解之外，事务的高级配置还可以通过使用 `@TransactionConfiguration` 注解来实现。"

#. type: Plain text
#: _guides/transaction.adoc
msgid "The `@TransactionConfiguration` annotation allows to set a timeout property, in seconds, that applies to transactions created within the annotated method."
msgstr "`@TransactionConfiguration` 注解允许设置一个超时属性，以秒为单位，适用于在注解方法中创建的事务。"

#: _guides/transaction.adoc
msgid ""
"This annotation may only be placed on the top level method delineating the transaction.\n"
"Annotated nested methods once a transaction has started will throw an exception."
msgstr "这个注释只能放在划定事务的顶层方法上。一旦事务开始，被注解的嵌套方法将抛出一个异常。"

#: _guides/transaction.adoc
msgid ""
"If defined on a class, it is equivalent to defining it on all the methods of the class marked with `@Transactional`.\n"
"The configuration defined on a method takes precedence over the configuration defined on a class."
msgstr "如果在一个类上定义，就相当于在该类所有标有 `@Transactional` 的方法上定义了它。在方法上定义的配置优先于在类上定义的配置。"

#. type: Title ===
#: _guides/transaction.adoc
#, no-wrap
msgid "Reactive extensions"
msgstr "响应性扩展"

#. type: Plain text
#: _guides/transaction.adoc
msgid "If your `@Transactional`-annotated method returns a reactive value, such as:"
msgstr "如果你的 `@Transactional` -注释的方法返回一个响应性的值，例如："

#. type: Plain text
#: _guides/transaction.adoc
msgid "`CompletionStage` (from the JDK)"
msgstr "`CompletionStage` (来自JDK)"

#. type: Plain text
#: _guides/transaction.adoc
msgid "`Publisher` (from Reactive-Streams)"
msgstr "`Publisher` (来自Reactive-Streams)"

#. type: Plain text
#: _guides/transaction.adoc
#, fuzzy
msgid "Any type that can be converted to one of the two previous types using Reactive Type Converters"
msgstr "任何可以使用响应式类型转换器转换为前两种类型之一的类型"

#: _guides/transaction.adoc
msgid ""
"then the behaviour is a bit different, because the transaction will not be terminated until the\n"
"returned reactive value is terminated. In effect, the returned reactive value will be listened to\n"
"and if it terminates exceptionally the transaction will be marked for rollback, and will be committed\n"
"or rolled-back only at termination of the reactive value."
msgstr "那么行为就有点不同了，因为在返回的响应式值终止之前，事务不会被终止。实际上，返回的响应式值将被监听，如果它意外终止，事务将被标记为回滚，并且只有在响应式值终止时才会提交或回滚。"

#: _guides/transaction.adoc
msgid ""
"This allows your reactive methods to keep on working on the transaction asynchronously until their\n"
"work is really done, and not just until the reactive method returns."
msgstr "这允许你的响应式方法以异步方式继续在事务上工作，直到他们的工作真正完成，而不仅仅是当响应式方法返回时。"

#: _guides/transaction.adoc
msgid ""
"If you need to propagate your transaction context across your reactive pipeline, please see the\n"
"xref:context-propagation.adoc[Context Propagation guide]."
msgstr "如果你需要在你的响应式管道中传播你的事务上下文，请看 link:context-propagation.html[上下文传播指南] 。"

#. type: Title ===
#: _guides/transaction.adoc
#, fuzzy, no-wrap
msgid "Programmatic approach"
msgstr "编程实现方法"

#: _guides/transaction.adoc
msgid ""
"You can use static methods on `QuarkusTransaction` to define transaction boundaries. This provides two different options,\n"
"a functional approach that allows you to run a lambda within the scope of a transaction, or by using explicit `begin`,\n"
"`commit` and `rollback` methods."
msgstr "你可以使用 `QuarkusTransaction` 上的静态方法来定义事务边界。这提供了两种不同的选择，一种是允许你在事务范围内运行lambda的函数式方法，或者通过使用显式的 `begin` 、 `commit` 和 `rollback` 方法。"

#. type: Plain text
#: _guides/transaction.adoc
#, fuzzy
msgid "The above example shows a few different ways the API can be used."
msgstr "上面的例子显示了可以使用API的几种不同方式。"

#: _guides/transaction.adoc
#, fuzzy
msgid ""
"The first method simply calls begin, does some work and commits it.\n"
"This created transaction is tied to the CDI request scope, so if it is still active when the request scope is destroyed then it will\n"
"be automatically rolled back. This removes the need to explicitly catch exceptions and call `rollback`, and acts as a safety net\n"
"against inadvertent transaction leaks, however it does mean that this can only be used when the request scope is active. The second\n"
"example in the method calls begin with a timeout option, and then rolls back the transaction."
msgstr "第一个方法只是调用 begin，执行一些工作并提交。创建的事务与 CDI 请求作用域绑定，因此如果它在请求作用域被销毁时仍处于活动状态，就会自动回滚。这样就不需要显式地捕获异常和调用 `rollback` 了，而且还可以作为一个安全网来防止无意中的事务泄漏，但这也意味着只有在请求作用域处于活动状态时才能使用。第二个示例中的方法调用以超时选项开始，然后回滚事务。"

#: _guides/transaction.adoc
#, fuzzy
msgid ""
"The second method shows the use of lambda scoped transactions with `QuarkusTransaction.runner(...)`;\n"
"the first example just runs a `Runnable` within a new transaction,\n"
"the second does the same but joining the existing transaction (if any),\n"
"and the third calls a `Callable` with some specific options.\n"
"In particular the `exceptionHandler` method can be used to control if the transaction is rolled back or not on exception."
msgstr "第二个方法展示了使用 `QuarkusTransaction.runner(…​)` 的 lambda 范围事务；第一个示例只是在一个新事务中运行 `Runnable` ，第二个示例做了同样的事情，但加入了现有事务（如果有的话），第三个示例调用了带有一些特定选项的 `Callable` 。尤其是 `exceptionHandler` 方法可以用来控制异常情况下是否回滚事务。"

#. type: Plain text
#: _guides/transaction.adoc
msgid "The following semantics are supported:"
msgstr "支持以下语义："

#. type: Labeled list
#: _guides/transaction.adoc
#, fuzzy, no-wrap
msgid "`QuarkusTransaction.disallowingExisting()`/`DISALLOW_EXISTING`"
msgstr " `QuarkusTransaction.disallowingExisting()` / `DISALLOW_EXISTING` "

#: _guides/transaction.adoc
msgid ""
"If a transaction is already associated with the current thread a `QuarkusTransactionException` will be thrown,\n"
"otherwise a new transaction is started, and follows all the normal lifecycle rules."
msgstr "如果一个事务已经与当前线程相关联，将抛出一个 `QuarkusTransactionException` ，否则将启动一个新的事务，并遵循所有正常的生命周期规则。"

#. type: Labeled list
#: _guides/transaction.adoc
#, fuzzy, no-wrap
msgid "`QuarkusTransaction.joiningExisting()`/`JOIN_EXISTING`"
msgstr " `QuarkusTransaction.joiningExisting()` / `JOIN_EXISTING` "

#: _guides/transaction.adoc
msgid ""
"If no transaction is active then a new transaction will be started, and committed when the method ends.\n"
"If an exception is thrown the exception handler registered by `#exceptionHandler(Function)` will be called to\n"
"decide if the TX should be committed or rolled back.\n"
"If an existing transaction is active then the method is run in the context of the existing transaction. If an\n"
"exception is thrown the exception handler will be called, however\n"
"a result of `ExceptionResult#ROLLBACK` will result in the TX marked as rollback only, while a result of\n"
"`ExceptionResult#COMMIT` will result in no action being taken."
msgstr "如果没有活动的事务，那么一个新的事务将被启动，并在方法结束时提交。如果一个异常被抛出，由 `#exceptionHandler(Function)` 注册的异常处理程序将被调用，以决定TX是否应该被提交或回滚。如果一个现有的事务处于活动状态，那么该方法将在现有事务的背景下运行。如果抛出一个异常，将调用异常处理程序，但是 `ExceptionResult#ROLLBACK` 的结果将导致TX被标记为回滚，而 `ExceptionResult#COMMIT` 的结果将导致不采取任何行动。"

#. type: Labeled list
#: _guides/transaction.adoc
#, fuzzy, no-wrap
msgid "`QuarkusTransaction.requiringNew()`/`REQUIRE_NEW`"
msgstr " `QuarkusTransaction.requiringNew()` / `REQUIRE_NEW` "

#: _guides/transaction.adoc
#, fuzzy
msgid ""
"If an existing transaction is already associated with the current thread then the transaction is suspended,\n"
"then a new transaction is started which follows all the normal lifecycle rules,\n"
"and when it's complete the original transaction is resumed.\n"
"Otherwise, a new transaction is started, and follows all the normal lifecycle rules."
msgstr "如果当前线程已经关联了一个现有事务，则会暂停该事务，然后启动一个新事务，该事务遵循所有正常的生命周期规则，完成后恢复原来的事务。否则，将启动一个新事务，并遵循所有正常的生命周期规则。"

#. type: Labeled list
#: _guides/transaction.adoc
#, fuzzy, no-wrap
msgid "`QuarkusTransaction.suspendingExisting()`/`SUSPEND_EXISTING`"
msgstr " `QuarkusTransaction.suspendingExisting()` / `SUSPEND_EXISTING` "

#: _guides/transaction.adoc
#, fuzzy
msgid ""
"If no transaction is active then these semantics are basically a no-op.\n"
"If a transaction is active then it is suspended, and resumed after the task is run.\n"
"The exception handler will never be consulted when these semantics are in use, specifying both an exception handler and\n"
"these semantics are considered an error.\n"
"These semantics allows for code to easily be run outside the scope of a transaction."
msgstr "如果没有处于活动状态的事务，那么这些语义基本上是无效的。如果事务处于活动状态，则会暂停，并在任务运行后恢复。在使用这些语义时，异常处理程序永远不会被查询，同时指定异常处理程序和这些语义将被视为错误。这些语义允许代码在事务范围外轻松运行。"

#. type: Title ===
#: _guides/transaction.adoc
#, no-wrap
msgid "Legacy API approach"
msgstr "传统的API方法"

#. type: Plain text
#: _guides/transaction.adoc
msgid "The less easy way is to inject a `UserTransaction` and use the various transaction demarcation methods."
msgstr "不太容易的方法是注入一个 `UserTransaction` ，并使用各种事务处理方法。"

#. type: delimited block =
#: _guides/transaction.adoc
msgid "You cannot use `UserTransaction` in a method having a transaction started by a `@Transactional` call."
msgstr "你不能在一个由 `@Transactional` 控制事务启动的方法中使用 `UserTransaction` 。"

#. type: Title ==
#: _guides/transaction.adoc
#, no-wrap
msgid "Configuring the transaction timeout"
msgstr "配置事务超时"

#. type: Plain text
#: _guides/transaction.adoc
msgid "You can configure the default transaction timeout, the timeout that applies to all transactions managed by the transaction manager, via the property `quarkus.transaction-manager.default-transaction-timeout`, specified as a duration."
msgstr "你可以通过属性 `quarkus.transaction-manager.default-transaction-timeout` 来配置默认的事务超时，即适用于由事务管理器管理的所有事务的超时，指定为一个持续时间。"

#. type: Plain text
#: _guides/transaction.adoc
msgid "The default value is 60 seconds."
msgstr "默认值是60秒。"

#. type: Title ==
#: _guides/transaction.adoc
#, no-wrap
msgid "Configuring transaction node name identifier"
msgstr "配置事务节点名称标识符"

#: _guides/transaction.adoc
msgid ""
"Narayana, as the underlying transaction manager, has a concept of a unique node identifier.\n"
"This is important if you consider using XA transactions that involve multiple resources."
msgstr "Narayana作为底层事务管理器，有一个唯一节点标识符的概念。如果你考虑使用涉及多个资源的XA事务，这就很重要了。"

#: _guides/transaction.adoc
msgid ""
"The node name identifier plays a crucial part in the identification of a transaction.\n"
"The node name identifier is forged into the transaction id when the transaction is created.\n"
"Based on the node name identifier, the transaction manager is capable of recognizing the XA transaction\n"
"counterparts created in database or JMS broker. The identifier makes possible for the transaction manager\n"
"to roll back the transaction counterparts during recovery."
msgstr "节点名称标识符在交易的识别中起着至关重要的作用。当交易被创建时，节点名称标识符被做为成交易ID的一部分。基于节点名称标识符，事务管理器能够识别在数据库或JMS代理中创建的XA事务对应物。该标识符使事务管理器有可能在恢复期间回滚事务对应方。"

#: _guides/transaction.adoc
msgid ""
"The node name identifier needs to be unique per transaction manager deployment.\n"
"And the node identifier needs to be stable over the transaction manager restarts."
msgstr "节点名称标识符需要在每个事务管理器部署中是唯一的。而且节点标识符需要在事务管理器重新启动时保持不变。"

#. type: Plain text
#: _guides/transaction.adoc
msgid "The node name identifier may be configured via the property `quarkus.transaction-manager.node-name`."
msgstr "节点名称标识符可以通过属性 `quarkus.transaction-manager.node-name` 进行配置。"

#. type: Title ==
#: _guides/transaction.adoc
#, fuzzy, no-wrap
msgid "Using `@TransactionScoped` to bind CDI beans to the transaction lifecycle"
msgstr "使用 `@TransactionScoped` ，将CDI Bean与交易生命周期绑定起来"

#: _guides/transaction.adoc
#, fuzzy
msgid ""
"You can define beans that live for as long as a transaction,\n"
"and through CDI lifecycle events perform actions when a transaction starts and ends."
msgstr "您可以定义与事务一样长的 Bean，并通过 CDI 生命周期事件在事务开始和结束时执行操作。"

#. type: Plain text
#: _guides/transaction.adoc
#, fuzzy
msgid "Just assign the transaction xref:cdi.adoc#bean-scope[scope] to such beans using the `@TransactionScoped` annotation:"
msgstr "只需使用 `@TransactionScoped` 注解将事务 link:cdi.html#bean-scope[范围] 分配给这类Bean。"

#: _guides/transaction.adoc
#, fuzzy
msgid ""
"Alternatively, if you don't necessarily need to hold state during the transaction,\n"
"and just want to react to transaction start/end events,\n"
"you can simply declare event listeners in a differently scoped bean:"
msgstr "另外，如果您不一定需要在事务期间保持状态，而只是想对事务开始/结束事件做出反应，您可以简单地在不同作用域的 Bean 中声明事件监听器："

#. type: Plain text
#: _guides/transaction.adoc
#, fuzzy
msgid "The `event` object represents the transaction ID, and defines `toString()`/`equals()`/`hashCode()` accordingly."
msgstr " `event` 对象代表交易 ID，并相应地定义了 `toString()` / `equals()` / `hashCode()` 。"

#: _guides/transaction.adoc
#, fuzzy
msgid ""
"In listener methods, you can access more information about the transaction in progress by accessing the `TransactionManager`,\n"
"which is a CDI bean and can be ``@Inject``ed."
msgstr "在监听器方法中，可以通过访问 `TransactionManager` 来获取有关正在进行的事务的更多信息， 是一个 CDI Bean，可以通过 `@Inject` 编辑。"

#. type: Title ==
#: _guides/transaction.adoc
#, fuzzy, no-wrap
msgid "Configure storing of Quarkus transaction logs in a database"
msgstr "配置事务节点名称标识符"

#. type: Plain text
#: _guides/transaction.adoc
#, fuzzy
msgid "In cloud environments where persistent storage is not available, such as when application containers are unable to use persistent volumes, you can configure the transaction management to store transaction logs in a database by using a Java Database Connectivity (JDBC) datasource."
msgstr "在无法使用持久存储的云环境中，例如应用容器无法使用持久卷时，可以通过使用 Java Database Connectivity (JDBC) 数据源，将事务管理配置为在数据库中存储事务日志。"

#: _guides/transaction.adoc
#, fuzzy
msgid ""
"However, in cloud-native apps, using a database to store transaction logs has additional requirements.\n"
"The `narayana-jta` extension, which manages these transactions, requires stable storage, a unique reusable node identifier, and a steady IP address to work correctly.\n"
"While the JDBC object store provides a stable storage, users must still plan how to meet the other two requirements."
msgstr "不过，在云原生应用程序中，使用数据库存储事务日志有额外的要求。管理这些事务的 `narayana-jta` 扩展需要稳定的存储、唯一的可重用节点标识符和稳定的 IP 地址才能正常工作。虽然 JDBC 对象存储提供了稳定的存储，但用户仍必须计划如何满足其他两个要求。"

#. type: Plain text
#: _guides/transaction.adoc
#, fuzzy
msgid "Quarkus, after you evaluate whether using a database to store transaction logs is right for you, allows the following JDBC-specific configuration of the object store included in `quarkus.transaction-manager.object-store._<property>_` properties, where _<property>_ can be:"
msgstr "在评估使用数据库存储事务日志是否合适后，Quarkus 允许对对象存储进行以下 JDBC 特定配置，这些配置包含在 `quarkus.transaction-manager.object-store. _<property>_` 属性，其中 _<property>_ 可以是："

#: _guides/transaction.adoc
#, fuzzy
msgid ""
"`type` (_string_): Configure this property to `jdbc` to enable usage of a Quarkus JDBC datasource for storing transaction logs.\n"
"The default value is `file-system`."
msgstr "`type` _(字符串_ ）：将此属性配置为 ，以启用使用 Quarkus JDBC 数据源存储事务日志。默认值为 。 `jdbc` `file-system`"

#: _guides/transaction.adoc
#, fuzzy
msgid ""
"`datasource` (_string_): Specify the name of the datasource for the transaction log storage.\n"
"If no value is provided for the `datasource` property, Quarkus uses the xref:datasource.adoc#configure-datasources[default datasource]."
msgstr "`datasource` _(字符串_ ）：指定事务日志存储的数据源名称。如果 属性未提供值，Quarkus 将使用 `datasource` xref:datasource.adoc#configure-datasources[默认数据源] 。"

#: _guides/transaction.adoc
#, fuzzy
msgid ""
"`create-table` (_boolean_): When set to `true`, the transaction log table gets automatically created if it does not already exist.\n"
"The default value is `false`."
msgstr "`create-table` _(布尔_ ）：设置为 时，如果事务日志表还不存在，则会自动创建。默认值为 。 `true` `false`"

#: _guides/transaction.adoc
#, fuzzy
msgid ""
"`drop-table` (_boolean_): When set to `true`, the tables are dropped on startup if they already exist.\n"
"The default value is `false`."
msgstr "`drop-table` _(布尔_ ）：设置为 时，如果表已经存在，则会在启动时丢弃。默认值为 。 `true` `false`"

#: _guides/transaction.adoc
#, fuzzy
msgid ""
"`table-prefix` (string): Specify the prefix for a related table name.\n"
"The default value is `quarkus_`."
msgstr "`table-prefix` (字符串）：指定相关表名的前缀。默认值为 。 `quarkus_`"

#. type: Plain text
#: _guides/transaction.adoc
#, fuzzy
msgid "For more configuration information, see the *Narayana JTA - Transaction manager* section of the Quarkus xref:all-config.adoc[All configuration options] reference."
msgstr "有关更多配置信息，请参阅 Quarkus xref:all-config.adoc[所有配置选项] 参考中的 *Narayana JTA - 事务管理器* 部分。"

#. type: Block title
#: _guides/transaction.adoc
#, fuzzy, no-wrap
msgid "Additional information:"
msgstr "其他信息："

#. type: Plain text
#: _guides/transaction.adoc
#, fuzzy
msgid "Create the transaction log table during the initial setup by setting the `create-table` property to `true`."
msgstr "在初始设置期间，通过将 `create-table` 属性设置为 `true` 来创建事务日志表。"

#. type: Plain text
#: _guides/transaction.adoc
#, fuzzy
msgid "JDBC datasources and ActiveMQ Artemis allow the enlistment and automatically register the `XAResourceRecovery`."
msgstr "JDBC 数据源和 ActiveMQ Artemis 允许加入并自动注册 `XAResourceRecovery` 。"

#. type: Plain text
#: _guides/transaction.adoc
#, fuzzy
msgid "JDBC datasources is part of `quarkus-agroal`, and it needs to use `quarkus.datasource.jdbc.transactions=XA`."
msgstr "JDBC 数据源是 `quarkus-agroal` 的一部分，它需要使用 `quarkus.datasource.jdbc.transactions=XA` 。"

#. type: Plain text
#: _guides/transaction.adoc
#, fuzzy
msgid "ActiveMQ Artemis is part of `quarkus-pooled-jms`, and it needs to use `quarkus.pooled-jms.transaction=XA`."
msgstr "ActiveMQ Artemis 是 `quarkus-pooled-jms` 的一部分，它需要使用 `quarkus.pooled-jms.transaction=XA` 。"

#. type: Plain text
#: _guides/transaction.adoc
#, fuzzy
msgid "To ensure data integrity in case of application crashes or failures, enable the transaction crash recovery with the `quarkus.transaction-manager.enable-recovery=true` configuration."
msgstr "为确保应用程序崩溃或故障时的数据完整性，请通过 `quarkus.transaction-manager.enable-recovery=true` 配置启用事务崩溃恢复功能。"

#. type: delimited block =
#: _guides/transaction.adoc
#, fuzzy
msgid "To work around the current known issue of link:https://issues.redhat.com/browse/AG-209[Agroal having a different view on running transaction checks], set the datasource transaction type for the datasource responsible for writing the transaction logs to `disabled`:"
msgstr "要解决当前已知的 link:https://issues.redhat.com/browse/AG-209[Agroal 对运行事务检查有不同看法的] 问题，可将负责写入事务日志的数据源的数据源事务类型设置为 `disabled` ："

#: _guides/transaction.adoc
#, fuzzy
msgid "quarkus.datasource.TX_LOG.jdbc.transactions=disabled"
msgstr "quarkus.datasource.TX_LOG.jdbc.transactions=disabled"

#. type: Plain text
#: _guides/transaction.adoc
#, fuzzy
msgid "This example uses TX_LOG as the datasource name."
msgstr "本例使用 TX_LOG 作为数据源名称。"

#. type: Title ==
#: _guides/transaction.adoc
#, no-wrap
msgid "Why always having a transaction manager?"
msgstr "为什么总是有一个事务处理器？"

#. type: Labeled list
#: _guides/transaction.adoc
#, no-wrap
msgid "Does it work everywhere I want to?"
msgstr "它能在我希望的所有地方工作吗？"

#: _guides/transaction.adoc
msgid ""
"Yep, it works in your Quarkus application, in your IDE, in your tests, because all of these are Quarkus applications.\n"
"JTA has some bad press for some people.\n"
"I don't know why.\n"
"Let's just say that this is not your grandpa's JTA implementation.\n"
"What we have is perfectly embeddable and lean."
msgstr "是的，它在你的Quarkus应用程序中，在你的IDE中，在你的测试中都可以使用，因为这些都是Quarkus应用程序。JTA对一些人来说有一些不好的影响。我不知道为什么。我们只能说，这不是老旧的JTA实现。我们所拥有的是完美的可嵌入的和精简的实现。"

#. type: Labeled list
#: _guides/transaction.adoc
#, no-wrap
msgid "Does it do 2 Phase Commit and slow down my app?"
msgstr "两阶段提交是否会减慢了我的应用程序？"

#: _guides/transaction.adoc
msgid ""
"No, this is an old folk tale.\n"
"Let's assume it essentially comes for free and let you scale to more complex cases involving several datasources as needed."
msgstr "不，这是一个古老的民间故事。让我们假设它基本上是免费的，让你根据需要扩展到涉及几个数据源的更复杂的情况。"

#. type: Labeled list
#: _guides/transaction.adoc
#, no-wrap
msgid "I don't need transaction when I do read only operations, it's faster."
msgstr "当我做只读操作时，就不需要事务，这样会更快"

#: _guides/transaction.adoc
#, fuzzy
msgid ""
"Wrong. +\n"
"First off, just disable the transaction by marking your transaction boundary with `@Transactional(NOT_SUPPORTED)` (or `NEVER` or `SUPPORTS` depending on the semantic you want). +\n"
"Second, it's again fairy tale that not using transaction is faster.\n"
"The answer is, it depends on your DB and how many SQL SELECTs you are making.\n"
"No transaction means the DB does have a single operation transaction context anyway. +\n"
"Third, when you do several SELECTs, it's better to wrap them in a single transaction because they will all be consistent with one another.\n"
"Say your DB represents your car dashboard, you can see the number of kilometers remaining and the fuel gauge level.\n"
"By reading it in one transaction, they will be consistent.\n"
"If you read one and the other from two different transactions, then they can be inconsistent.\n"
"It can be more dramatic if you read data related to rights and access management for example."
msgstr ""
"错。\n"
"\n"
" 首先，只需用 `@Transactional(NOT_SUPPORTED)` （或 `NEVER` 或 `SUPPORTS` ，取决于你想要的语义）标记事务边界，禁用事务即可。\n"
"\n"
" 其次，不使用事务会更快，这又是一个童话。答案是，这取决于你的数据库和你的 SQL SELECT 数量。不使用事务意味着数据库无论如何都有一个单一操作事务上下文。\n"
"\n"
" 第三，当你执行多个 SELECT 操作时，最好将它们封装在一个事务中，因为它们将彼此保持一致。假设您的数据库代表您的汽车仪表盘，您可以看到剩余的公里数和油量表的油位。通过在一个事务中读取，它们将保持一致。如果在两个不同的事务中读取一个和另一个，那么它们就会不一致。如果您读取的是与权限和访问管理相关的数据，情况可能会更糟。"

#. type: Labeled list
#: _guides/transaction.adoc
#, no-wrap
msgid "Why do you prefer JTA vs Hibernate's transaction management API"
msgstr "为什么相对Hibernate 的事务管理 API你更推荐JTA"

#: _guides/transaction.adoc
msgid ""
"Managing the transactions manually via `entityManager.getTransaction().begin()` and friends lead to a butt ugly code with tons of try catch finally that people get wrong.\n"
"Transactions are also about JMS and other database access, so one API makes more sense."
msgstr "通过 `entityManager.getTransaction().begin()` 和手动管理事务会导致一段丑陋的代码，最终人们会出错。 事务也与 JMS 和其他数据库访问有关，因此一个 API 更有意义。"

#. type: Labeled list
#: _guides/transaction.adoc
#, fuzzy, no-wrap
msgid "It's a mess because I don't know if my Jakarta Persistence persistence unit is using `JTA` or `Resource-level` Transaction"
msgstr "当不知道JPA persistence unit 使用的是“JTA”还是“Resource-level”事务，这可能会造成混乱"

#: _guides/transaction.adoc
#, fuzzy
msgid ""
"It's not a mess in Quarkus :)\n"
"Resource-level was introduced to support Jakarta Persistence in a non-managed environment.\n"
"But Quarkus is both lean and a managed environment, so we can safely always assume we are in JTA mode.\n"
"The end result is that the difficulties of running Hibernate ORM + CDI + a transaction manager in Java SE mode are solved by Quarkus."
msgstr "在 Quarkus 中并不是一团糟:)引入资源级是为了在非托管环境中支持 Jakarta Persistence。但 Quarkus 既是精益环境，也是托管环境，因此我们可以放心地假设我们处于 JTA 模式。最终，Quarkus 解决了在 Java SE 模式下运行 Hibernate ORM + CDI + 事务管理器的难题。"
