# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/jreleaser.adoc:6
#, fuzzy, no-wrap
msgid "Packaging And Releasing With JReleaser"
msgstr "使用JReleaser进行包装和发布"

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:17
#, fuzzy
msgid "This guide covers packaging and releasing CLI applications using the link:https://jreleaser.org[JReleaser] tool."
msgstr "本指南包括使用 link:https://jreleaser.org[JReleaser] 工具打包和发布CLI应用程序。"

#. type: Title ==
#: upstream/_guides/jreleaser.adoc:18
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:22
#, fuzzy
msgid "a GitHub account and a GitHub Personal Access token"
msgstr "一个GitHub账户和一个GitHub个人访问令牌"

#. type: Title ==
#: upstream/_guides/jreleaser.adoc:23
#, fuzzy, no-wrap
msgid "Bootstrapping the project"
msgstr "引导项目"

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:27
#, fuzzy
msgid "First, we need a project that defines a CLI application. We recommend using the xref:picocli.adoc[PicoCLI] extension.  This can be done using the following command:"
msgstr "首先，我们需要一个定义了CLI应用程序的项目。我们推荐使用 link:picocli.html[PicoCLI] 扩展。这可以通过以下命令来完成。"

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:33
#, fuzzy
msgid "This command initializes the file structure and the minimum set of required files in the project:"
msgstr "该命令初始化了文件结构和项目中所需要的最小文件集。"

#. type: delimited block -
#: upstream/_guides/jreleaser.adoc:53
#, no-wrap
msgid ""
".\n"
"├── README.md\n"
"├── mvnw\n"
"├── mvnw.cmd\n"
"├── pom.xml\n"
"└── src\n"
"    └── main\n"
"        ├── docker\n"
"        │   ├── Dockerfile.jvm\n"
"        │   ├── Dockerfile.legacy-jar\n"
"        │   └── Dockerfile.native\n"
"        ├── java\n"
"        │   └── org\n"
"        │       └── acme\n"
"        │           └── GreetingCommand.java\n"
"        └── resources\n"
"            └── application.properties\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:56
#, fuzzy
msgid "It will also configure the picocli extension in the `pom.xml`:"
msgstr "它还将在 `pom.xml` .NET中配置picocli扩展。"

#. type: delimited block -
#: upstream/_guides/jreleaser.adoc:63
#, no-wrap
msgid ""
"    <dependency>\n"
"      <groupId>io.quarkus</groupId>\n"
"      <artifactId>quarkus-picocli</artifactId>\n"
"    </dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/jreleaser.adoc:65
#, fuzzy, no-wrap
msgid "Preparing the project for GitHub releases"
msgstr "为GitHub发布项目做准备"

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:70
#, fuzzy
msgid "The project must be hosted at a GitHub repository before we continue. This task can be completed by logging into your GitHub account, creating a new repository, and adding the newly created sources to said repository. Choose the `main` branch as default to take advantage of conventions and thus configure less in your `pom.xml`."
msgstr "在我们继续之前，该项目必须托管在GitHub仓库。这项任务可以通过登录你的GitHub账户，创建一个新的仓库，并将新创建的源代码添加到该仓库中来完成。选择 `main` 分支作为默认，以利用惯例，从而在你的 `pom.xml` 。"

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:78
#, fuzzy
msgid "You also need a GitHub Personal Access token to be able to post a release to the repository you just created. Follow the official documentation for link:https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token[creating a personal access token].  Store the newly created token at a safe place for future reference. Next, you have the choice of configuring the token as an environment variable named `JRELEASER_GITHUB_TOKEN` so that the tool can read it. Alternatively you may store the token at a secure location of your choosing, using a `.yml`, `.toml`, `.json`, or `.properties` file. The default location is `~/.jreleaser/config[format]`. For example, using the `.yml` format this file could look like:"
msgstr "你还需要一个GitHub个人访问令牌，以便能够向你刚刚创建的仓库发布一个版本。请按照官方文档 link:https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token[创建一个个人访问令牌] 。将新创建的令牌保存在一个安全的地方，以备将来参考。接下来，你可以选择将令牌配置为一个名为 `JRELEASER_GITHUB_TOKEN` 的环境变量，这样工具就可以读取它。或者，你可以将令牌存储在你选择的安全位置，使用 `.yml` 、 `.toml` 、 `.json` 、或 `.properties` 文件。默认位置是 `~/.jreleaser/config[format]` 。例如，使用 `.yml` 格式，这个文件可以看起来像。"

#. type: Block title
#: upstream/_guides/jreleaser.adoc:80
#, fuzzy, no-wrap
msgid "~/.jreleaser/config.yml"
msgstr "~/.jreleaser/config.yml"

#. type: delimited block -
#: upstream/_guides/jreleaser.adoc:83
#, no-wrap
msgid "JRELEASER_GITHUB_TOKEN: <github-token-value>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:89
#, fuzzy
msgid "Alright. Add all sources and create a first commit. You can choose your own conventions for commit messages however you can get more bang for your buck when using JReleaser if you follow the link:https://www.conventionalcommits.org/en/v1.0.0/[Conventional Commits] specification. Make your first commit with the following message \"build: Add initial sources\"."
msgstr "好的。添加所有的源代码并创建第一次提交。你可以选择你自己的提交信息约定，但是如果你遵循 link:https://www.conventionalcommits.org/en/v1.0.0/[常规的提交] 规范，你可以在使用JReleaser时获得更多的收益。第一次提交的信息是：\"build:添加初始源代码\"。"

#. type: Title ==
#: upstream/_guides/jreleaser.adoc:90
#, fuzzy, no-wrap
msgid "Packaging as a Native Image distribution"
msgstr "作为本地图像分发的包装"

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:95
#, fuzzy
msgid "Quarkus already knows how to create a native executable using GraalVM Native Image. The default setup will create a single executable file following a naming convention. However the JReleaser tool expects a distribution that is, a conventional file structure packaged as a Zip or Tar file. The file structure must follow this layout:"
msgstr "Quarkus已经知道如何使用GraalVM Native Image来创建一个本地可执行文件。默认设置将按照命名规则创建一个单一的可执行文件。然而，JReleaser工具希望有一个分发文件，也就是以Zip或Tar文件的形式打包的传统文件结构。文件结构必须遵循这个布局。"

#. type: delimited block -
#: upstream/_guides/jreleaser.adoc:103
#, no-wrap
msgid ""
".\n"
"├── LICENSE\n"
"├── README\n"
"└── bin\n"
"    └── executable\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:107
#, fuzzy
msgid "This structure lets you add all kinds of supporting files required by the executable, such as configuration files, shell completion scripts, man pages, license, readme, and more."
msgstr "这种结构可以让你添加可执行文件所需的各种支持文件，如配置文件、shell完成脚本、手册页、许可证、readme等等。"

#. type: Title ==
#: upstream/_guides/jreleaser.adoc:108
#, fuzzy, no-wrap
msgid "Creating the distribution"
msgstr "创建分布"

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:113
#, fuzzy
msgid "We can leverage the link:http://maven.apache.org/plugins/maven-assembly-plugin/[maven-assembly-plugin] to create such a distribution. We'll also make use of the link:https://github.com/trustin/os-maven-plugin[os-maven-plugin] to properly identify the platform on which this executable can run, adding said platform to the distribution's filename."
msgstr "我们可以利用 link:http://maven.apache.org/plugins/maven-assembly-plugin/[maven-assembly-plugin] 来创建这样一个发行版。我们还将利用 link:https://github.com/trustin/os-maven-plugin[os-maven-plugin] 来正确识别该可执行文件可运行的平台，并将该平台添加到发行包的文件名中。"

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:116
#, fuzzy
msgid "First, let's add the os-maven-plugin to the `pom.xml`. This plugin works as a Maven extension and as such must be added to the `<build>` section of the file:"
msgstr "首先，让我们把os-maven-plugin添加到 `pom.xml` 。该插件作为Maven的一个扩展，因此必须添加到文件的 `<build>` 部分。"

#. type: delimited block -
#: upstream/_guides/jreleaser.adoc:128
#, no-wrap
msgid ""
"  <build>\n"
"    <extensions>\n"
"      <extension>\n"
"        <groupId>kr.motd.maven</groupId>\n"
"        <artifactId>os-maven-plugin</artifactId>\n"
"        <version>1.7.0</version>\n"
"      </extension>\n"
"    </extensions>\n"
"    <!-- ... -->\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:134
#, fuzzy
msgid "Next, native executables on Linux and macOS platforms typically do not have a file extension but Windows executables do, we need to take care of this when renaming the generated executable. We can also place the generated distributions into their own directory to avoid cluttering the `target` directory. Thus, let's add a couple of properties to the existing `<properties>` section in the `pom.xml`:"
msgstr "接下来，Linux和macOS平台上的原生可执行文件通常没有文件扩展名，但Windows的可执行文件有，我们在重命名生成的可执行文件时需要注意这一点。我们还可以把生成的发行版放到它们自己的目录中，以避免杂乱无章的 `target` 。因此，让我们在 `pom.xml` 的现有 `<properties>` 部分中添加几个属性。"

#. type: delimited block -
#: upstream/_guides/jreleaser.adoc:139
#, no-wrap
msgid ""
"<executable-suffix/>\n"
"<distribution.directory>${project.build.directory}/distributions</distribution.directory>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:146
#, fuzzy
msgid "Now we configure the maven-assembly-plugin to create a Zip and a Tar file containing the executable and any supporting files it may need to perform its job. Take special note on the name of the distribution, this is where we make use of the platform properties detected by the os-maven-plugin. This plugin is configured in its own profile with the `single` goal bound to the `package` phase. It's done this way to avoid rebuilding the distribution every single time the build is invoked, as we only needed when we're ready for a release."
msgstr "现在我们配置maven-assembly-plugin创建一个Zip文件和一个Tar文件，其中包含可执行文件和它执行任务可能需要的任何支持文件。请特别注意分发文件的名称，这是我们利用os-maven-plugin检测到的平台属性的地方。该插件被配置在自己的配置文件中， `single` 目标与 `package` 阶段绑定。这样做是为了避免每次调用构建时都要重建发行版，因为我们只在准备发布时才需要。"

#. type: delimited block -
#: upstream/_guides/jreleaser.adoc:191
#, no-wrap
msgid ""
"    <profile>\n"
"      <id>dist</id>\n"
"      <build>\n"
"        <plugins>\n"
"          <plugin>\n"
"            <groupId>org.apache.maven.plugins</groupId>\n"
"            <artifactId>maven-assembly-plugin</artifactId>\n"
"            <version>3.3.0</version>\n"
"            <configuration>\n"
"              <attach>false</attach>\n"
"              <appendAssemblyId>false</appendAssemblyId>\n"
"              <finalName>${project.artifactId}-${project.version}-${os.detected.classifier}</finalName>\n"
"              <outputDirectory>${distribution.directory}</outputDirectory>\n"
"              <workDirectory>${project.build.directory}/assembly/work</workDirectory>\n"
"              <descriptors>\n"
"                <descriptor>src/main/assembly/assembly.xml</descriptor>\n"
"              </descriptors>\n"
"            </configuration>\n"
"            <executions>\n"
"              <execution>\n"
"                <id>make-distribution</id>\n"
"                <phase>package</phase>\n"
"                <goals>\n"
"                  <goal>single</goal>\n"
"                </goals>\n"
"              </execution>\n"
"            </executions>\n"
"          </plugin>\n"
"        </plugins>\n"
"      </build>\n"
"    </profile>\n"
"    <profile>\n"
"      <id>dist-windows</id>\n"
"      <activation>\n"
"        <os>\n"
"          <family>windows</family>\n"
"        </os>\n"
"      </activation>\n"
"      <properties>\n"
"        <executable-suffix>.exe</executable-suffix>\n"
"      </properties>\n"
"    </profile>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:197
#, fuzzy
msgid "Note that two profiles are configured. The `dist` profile configures the assembly plugin, and it's configured in such a way that it must be activated explicitly by passing `-Pdist` as a command flag. On the other hand the `dist-windows` profile becomes active automatically when the build is run on a Windows platform. This second profile takes care of setting the value for the `executable-suffix` property which is required by the assembly descriptor, as shown next:"
msgstr "请注意，配置了两个配置文件。 `dist` 配置文件配置了汇编插件，它的配置方式是必须通过传递 `-Pdist` 作为命令标志来明确激活它。另一方面，当在Windows平台上运行构建时， `dist-windows` 配置文件会自动激活。这第二个配置文件负责设置 `executable-suffix` 属性的值，这是汇编描述符所要求的，如下所示。"

#. type: Block title
#: upstream/_guides/jreleaser.adoc:199
#, fuzzy, no-wrap
msgid "src/main/assembly/assembly.xml"
msgstr "src/main/assembly/assembly.xml"

#. type: delimited block -
#: upstream/_guides/jreleaser.adoc:219
#, no-wrap
msgid ""
"<assembly\n"
"        xmlns=\"pass:[http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.0]\"\n"
"        xmlns:xsi=\"pass:[http://www.w3.org/2001/XMLSchema-instance]\"\n"
"        xsi:schemaLocation=\"pass:[http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.0] pass:[http://maven.apache.org/xsd/assembly-1.1.0.xsd]\">\n"
"    <id>dist</id>\n"
"    <formats>\n"
"        <format>tar.gz</format>\n"
"        <format>zip</format>\n"
"        <format>dir</format>\n"
"    </formats>\n"
"    <files>\n"
"        <file>\n"
"            <source>${project.build.directory}/${project.artifactId}-${project.version}-runner${executable-suffix}</source>\n"
"            <outputDirectory>./bin</outputDirectory>\n"
"            <destName>${project.artifactId}${executable-suffix}</destName>\n"
"        </file>\n"
"    </files>\n"
"</assembly>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:222
#, fuzzy
msgid "These are the files created by the assembly plugin when invoking `./mvnw -Pdist package` on macOS:"
msgstr "这些是在macOS上调用 `./mvnw -Pdist package` ，由汇编插件创建的文件。"

#. type: delimited block -
#: upstream/_guides/jreleaser.adoc:233
#, no-wrap
msgid ""
"$ tree target/distributions/\n"
"target/distributions/\n"
"├── app-1.0.0-SNAPSHOT-osx-x86_64\n"
"│   └── app-1.0.0-SNAPSHOT-osx-x86_64\n"
"│       └── bin\n"
"│           └── app\n"
"├── app-1.0.0-SNAPSHOT-osx-x86_64.tar.gz\n"
"└── app-1.0.0-SNAPSHOT-osx-x86_64.zip\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:237
#, fuzzy
msgid "Feel free to update the assembly descriptor to include additional files such as LICENSE, readme, or anything else needed by the consumers of the executable. Make another commit right here with \"build: Configure distribution assembly\"."
msgstr "请随意更新汇编描述符，以包括额外的文件，如LICENSE、readme，或其他可执行文件的消费者需要的文件。在这里再做一次提交，写上 \"build:配置分布式程序集\"。"

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:239
#, fuzzy
msgid "We're ready to go to the next phase: configuring the release."
msgstr "我们已经准备好进入下一个阶段：配置发布。"

#. type: Title ==
#: upstream/_guides/jreleaser.adoc:240
#, fuzzy, no-wrap
msgid "Adding JReleaser"
msgstr "添加JReleaser"

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:245
#, fuzzy
msgid "The JReleaser tool can be invoked in many ways: as a CLI tool, as a Docker image, or as a Maven plugin. The last option is very convenient given that we are already working with Maven. Let's add yet another profile that contains the release configuration as once again we don't require this behavior to be active all the time only when we're ready to post a release:"
msgstr "JReleaser工具可以通过多种方式调用：作为CLI工具，作为Docker镜像，或者作为Maven插件。鉴于我们已经在使用Maven，最后一种选择非常方便。让我们再添加一个包含发布配置的配置文件，因为我们再一次不要求这个行为一直处于激活状态，只有在我们准备发布时才需要。"

#. type: delimited block -
#: upstream/_guides/jreleaser.adoc:260
#, no-wrap
msgid ""
"    <profile>\n"
"      <id>release</id>\n"
"      <build>\n"
"        <plugins>\n"
"          <plugin>\n"
"            <groupId>org.jreleaser</groupId>\n"
"            <artifactId>jreleaser-maven-plugin</artifactId>\n"
"            <version>{jreleaser-version}</version>\n"
"          </plugin>\n"
"        </plugins>\n"
"      </build>\n"
"    </profile>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:266
#, fuzzy
msgid "There are a few goals we can invoke at this point, we can for example ask JReleaser to print out its current configuration by invoking the `./mvnw -Prelease jreleaser:config` command. The tool will output everything that it knows about the project. We can also generate the changelog by invoking `./mvnw -Prelease jreleaser:changelog`. A file containing the changelog will be placed at `target/jreleaser/release/CHANGELOG.md` which at this point should look like this:"
msgstr "此时我们可以调用一些目标，例如我们可以通过调用 `./mvnw -Prelease jreleaser:config` 命令要求JReleaser打印出其当前配置。该工具将输出它所知道的关于这个项目的一切。我们还可以通过调用 `./mvnw -Prelease jreleaser:changelog` 来生成更新日志。一个包含变更日志的文件将被放置在 `target/jreleaser/release/CHANGELOG.md` ，此时它应该是这样的。"

#. type: Block title
#: upstream/_guides/jreleaser.adoc:268 upstream/_guides/jreleaser.adoc:299
#, fuzzy, no-wrap
msgid "target/jreleaser/release/CHANGELOG.md"
msgstr "target/jreleaser/release/CHANGELOG.md"

#. type: delimited block -
#: upstream/_guides/jreleaser.adoc:271 upstream/_guides/jreleaser.adoc:302
#, no-wrap
msgid "## Changelog\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/jreleaser.adoc:274
#, no-wrap
msgid ""
"8ef3307 build: Configure distribution assembly\n"
"5215200 build: Add initial sources\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:279
#, fuzzy
msgid "Not very exicting. But we can change this by instructing JReleaser to format the changelog according to our own conventions. You can manually specify patterns to categorize commits however if you chose to follow Conventional Commits we can instruct JReleaser to do the same. Add the following to the JReleaser plugin configuration section:"
msgstr "这不是很有吸引力。但我们可以通过指示JReleaser按照我们自己的惯例来格式化更新日志来改变这种情况。你可以手动指定模式来对提交进行分类，但是如果你选择遵循常规提交，我们可以指示JReleaser也这样做。在JReleaser插件的配置部分添加以下内容。"

#. type: delimited block -
#: upstream/_guides/jreleaser.adoc:294
#, no-wrap
msgid ""
"            <configuration>\n"
"              <jreleaser>\n"
"                <release>\n"
"                  <github>\n"
"                    <changelog>\n"
"                      <formatted>ALWAYS</formatted>\n"
"                      <preset>conventional-commits</preset>\n"
"                    </changelog>\n"
"                  </github>\n"
"                </release>\n"
"              </jreleaser>\n"
"            </configuration>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:297
#, fuzzy
msgid "Run the previous Maven command once again and inspect the generated changelog, it should now look like this:"
msgstr "再次运行之前的Maven命令，检查生成的更新日志，现在应该是这样的。"

#. type: delimited block -
#: upstream/_guides/jreleaser.adoc:306
#, no-wrap
msgid ""
"## 🛠  Build\n"
"- 8ef3307 Configure distribution assembly (Andres Almiray)\n"
"- 5215200 Add initial sources (Andres Almiray)\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/jreleaser.adoc:311
#, no-wrap
msgid ""
"## Contributors\n"
"We'd like to thank the following people for their contributions:\n"
"Andres Almiray\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:316
#, fuzzy
msgid "There are more formatting options you may apply but for now these will suffice. Let's make yet another commit right now, with \"build: Configure JReleaser plugin\" as a commit message. If you want you can generate the changelog once again and see this latest commit added to the file."
msgstr "你可以使用更多的格式化选项，但现在这些就足够了。让我们现在再做一次提交，以 \"build:配置JReleaser插件 \"作为提交信息。如果你愿意，你可以再次生成更新日志，并看到这个最新的提交被添加到文件中。"

#. type: Title ==
#: upstream/_guides/jreleaser.adoc:317
#, fuzzy, no-wrap
msgid "Adding distributions to the release"
msgstr "在发布中添加发行版本"

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:325
#, fuzzy
msgid "We've reached the point where we can configure the binary distributions. If you run the `./mvnw -Prelease jreleaser:config` command you'll notice there's no mention of any distribution files that we configured in previous steps. This is because the tool has no implicit knowledge of them, we must tell JReleaser which files we'd like to release. This decouples creation of distributions from release assets as you might like to add or remove files at your leisure. For this particular case we'll configure Zip files for both macOS and Windows, and a Tar file for Linux. These files must be added to the JReleaser plugin configuration section, like so:"
msgstr "我们已经到了可以配置二进制分发文件的地步。如果你运行 `./mvnw -Prelease jreleaser:config` 命令，你会注意到没有提到我们在前面步骤中配置的任何发行文件。这是因为该工具对它们没有隐含的知识，我们必须告诉JReleaser我们想发布哪些文件。这就把创建发布文件和发布资产分离开来，因为你可能想在你的闲暇时间添加或删除文件。在这个特定的案例中，我们将为macOS和Windows配置Zip文件，为Linux配置一个Tar文件。这些文件必须被添加到JReleaser插件配置部分，像这样。"

#. type: delimited block -
#: upstream/_guides/jreleaser.adoc:359
#, no-wrap
msgid ""
"            <configuration>\n"
"              <jreleaser>\n"
"                <release>\n"
"                  <github>\n"
"                    <changelog>\n"
"                      <formatted>ALWAYS</formatted>\n"
"                      <preset>conventional-commits</preset>\n"
"                    </changelog>\n"
"                  </github>\n"
"                </release>\n"
"                <distributions>\n"
"                  <app>\n"
"                    <type>NATIVE_IMAGE</type>\n"
"                    <artifacts>\n"
"                      <artifact>\n"
"                        <path>${distribution.directory}/{{distributionName}}-{{projectVersion}}-linux-x86_64.tar.gz</path>\n"
"                        <platform>linux-x86_64</platform>\n"
"                      </artifact>\n"
"                      <artifact>\n"
"                        <path>${distribution.directory}/{{distributionName}}-{{projectVersion}}-windows-x86_64.zip</path>\n"
"                        <platform>windows-x86_64</platform>\n"
"                      </artifact>\n"
"                      <artifact>\n"
"                        <path>${distribution.directory}/{{distributionName}}-{{projectVersion}}-osx-x86_64.zip</path>\n"
"                        <platform>osx-x86_64</platform>\n"
"                      </artifact>\n"
"                    </artifacts>\n"
"                  </app>\n"
"                </distributions>\n"
"              </jreleaser>\n"
"            </configuration>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:367
#, fuzzy
msgid "We can appreciate a distribution named `app` (same as the project's artifactId for convenience) with 3 configured artifacts.  Note the use of Maven properties and Mustache templates to define the paths. You may use explicit values if you want or rely on properties to parameterize the configuration. Maven properties resolve eagerly during build validation while Mustache templates resolve lazily during the execution of the JReleaser plugin goals. Each artifact must define a `platform` property that uniquely identifies them. If we run the `./mvnw -Prelease jreleaser:config` we'll quickly get an error as now that there's a configured distribution the plugin expects more metadata to be provided by the project:"
msgstr "我们可以欣赏到一个名为 `app` （为方便起见，与项目的artifactId相同）的分布，有3个配置好的工件。注意使用Maven属性和Mustache模板来定义路径。如果你愿意，你可以使用明确的值，或者依靠属性来对配置进行参数化。Maven属性在构建验证过程中急切地解析，而Mustache模板在执行JReleaser插件目标过程中懒散地解析。每个工件都必须定义一个 `platform` 属性，以唯一地识别它们。如果我们运行 `./mvnw -Prelease jreleaser:config` ，很快就会出现错误，因为现在已经有了配置好的分布，插件希望项目能提供更多的元数据。"

#. type: delimited block -
#: upstream/_guides/jreleaser.adoc:377
#, no-wrap
msgid ""
"[WARNING]   [validation] project.copyright must not be blank since 0.4.0. This warning will become an error in a future release.\n"
"[ERROR] == JReleaser ==\n"
"[ERROR] project.description must not be blank\n"
"[ERROR] project.website must not be blank\n"
"[ERROR] project.docsUrl must not be blank\n"
"[ERROR] project.license must not be blank\n"
"[ERROR] project.authors must not be blank\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:381
#, fuzzy
msgid "This metadata can be provided in two ways: either as part of the JReleaser plugin's configuration or using standard POM elements. If you choose the former option then the plugin's configuration may look like this:"
msgstr "这种元数据可以通过两种方式提供：要么作为JReleaser插件配置的一部分，要么使用标准的POM元素。如果你选择前一种方式，那么该插件的配置可能看起来像这样。"

#. type: delimited block -
#: upstream/_guides/jreleaser.adoc:395
#, no-wrap
msgid ""
"            <configuration>\n"
"              <jreleaser>\n"
"                <project>\n"
"                 <description>app -- Sample Quarkus CLI application</description>\n"
"                 <website>pass:[https://github.com/aalmiray/app]</website>\n"
"                 <docsUrl>pass:[https://github.com/aalmiray/app]</docsUrl>\n"
"                 <license>APACHE-2.0</license>\n"
"                 <authors>Andres Almiray</authors>\n"
"                 <copyright>2021 Kordamp</copyright>\n"
"                </project>\n"
"                <!-- ... -->\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:399
#, fuzzy
msgid "If you choose to use standard POM elements then your `pom.xml` must contain these entries at the very least, of course adapting values to your own:"
msgstr "如果你选择使用标准的POM元素，那么你的 `pom.xml` ，至少要包含这些条目，当然要根据自己的情况调整数值。"

#. type: delimited block -
#: upstream/_guides/jreleaser.adoc:419
#, no-wrap
msgid ""
"  <name>app</name>\n"
"  <description>app -- Sample Quarkus CLI application</description>\n"
"  <inceptionYear>2021</inceptionYear>\n"
"  <url>pass:[https://github.com/aalmiray/app]</url>\n"
"  <developers>\n"
"    <developer>\n"
"      <id>aalmiray</id>\n"
"      <name>Andres Almiray</name>\n"
"    </developer>\n"
"  </developers>\n"
"  <licenses>\n"
"    <license>\n"
"      <name>Apache-2.0</name>\n"
"      <url>pass:[http://www.apache.org/licenses/LICENSE-2.0.txt]</url>\n"
"      <distribution>repo</distribution>\n"
"    </license>\n"
"  </licenses>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:428
#, fuzzy
msgid "Yet, we're not still out of the woods as invoking the `./mvnw -Prelease jreleaser:config` once more will still result in another error, this time the failure relates to missing artifacts. This is because we did not assemble all required artifacts, yet the plugin expects them to be readily available. Here you have the choice to build the required artifacts on other nodes then copy them to their expected locations -- a task that can be performed running a GitHub Actions workflow on multiple nodes. Or you can instruct JReleaser to ignore some artifacts and select only those that match your current platform. Previously we showed how the distribution would look like when created on macOS, assuming we're still on that platform we have the correct artifact."
msgstr "然而，我们还没有走出困境，因为再次调用 `./mvnw -Prelease jreleaser:config` ，仍然会导致另一个错误，这次的失败与缺少工件有关。这是因为我们没有组装所有需要的工件，但该插件希望它们是现成的。在这里，你可以选择在其他节点上构建所需的工件，然后将它们复制到预期的位置--这项任务可以在多个节点上运行GitHub Actions工作流来完成。或者你可以指示JReleaser忽略一些工件，只选择那些符合你当前平台的工件。之前我们展示了在macOS上创建发行版时的样子，假设我们还在那个平台上，我们有正确的工件。"

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:433
#, fuzzy
msgid "We can instruct JReleaser to select only artifacts that match macOS at this point by invoking the `jreleaser:config` goal with an additional flag: `./mvnw -Prelease jreleaser:config -Djreleaser.select.current.platform`. This time the command will succeed and print out the model. Note that only the path for the macOS artifact has been fully resolved, leaving the other 2 paths untouched."
msgstr "我们可以通过调用带有额外标志的 `jreleaser:config` 目标来指示JReleaser在这一点上只选择与macOS匹配的工件： `./mvnw -Prelease jreleaser:config -Djreleaser.select.current.platform` 。这一次，命令将成功并打印出模型。注意，只有macOS工件的路径被完全解决了，其他两个路径没有被触及。"

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:438
#, fuzzy
msgid "Let's make one more commit here with \"build: Configure distribution artifacts\" as message. We can create a release right now, by invoking a different goal: `./mvnw -Prelease jreleaser:release -Djreleaser.select.current.platform`. This will create a Git release at the chosen repository, which includes tagging the repository, uploading the changelog, all distribution artifacts and their checksum as release assets."
msgstr "让我们在这里再做一次提交，以 \"build:配置发布工件 \"作为信息。我们现在就可以通过调用不同的目标来创建一个版本： `./mvnw -Prelease jreleaser:release -Djreleaser.select.current.platform` 。这将在选定的仓库创建一个 Git 发布，包括标记仓库、上传更新日志、所有发布工件及其校验和作为发布资产。"

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:441
#, fuzzy
msgid "But before we do that let's add one additional feature, let's create a Homebrew formula that will make it easy for macOS users to consume the binary distribution, shall we?"
msgstr "但在这之前，让我们增加一个额外的功能，让我们创建一个Homebrew公式，使macOS用户能够轻松地消费二进制发行版，好吗？"

#. type: Title ==
#: upstream/_guides/jreleaser.adoc:442
#, fuzzy, no-wrap
msgid "Configuring Homebrew as a packager"
msgstr "将Homebrew配置为一个打包器"

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:447
#, fuzzy
msgid "link:https://brew.sh/[Homebrew] is a popular choice among macOS users to install and manage binaries. Homebrew packages are at their core a Ruby file (known as a formula) that's executed on the target environment to install or upgrade a particular binary. JReleaser can create formulae from binary distributions such as the one we already have configured."
msgstr "link:https://brew.sh/[Homebrew] 是MacOS用户安装和管理二进制文件的一个流行选择。Homebrew软件包的核心是一个Ruby文件（被称为公式），在目标环境中执行，以安装或升级一个特定的二进制。JReleaser可以从二进制分布中创建公式，比如我们已经配置好的那个。"

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:449
#, fuzzy
msgid "For this to work we simply have to enable Homebrew in the JReleaser plugin configuration like so:"
msgstr "要做到这一点，我们只需在JReleaser插件的配置中启用Homebrew，像这样。"

#. type: delimited block -
#: upstream/_guides/jreleaser.adoc:474
#, no-wrap
msgid ""
"                <distributions>\n"
"                  <app>\n"
"                    <type>NATIVE_IMAGE</type>\n"
"                    <brew>\n"
"                      <active>ALWAYS</active>\n"
"                    </brew>\n"
"                    <artifacts>\n"
"                      <artifact>\n"
"                        <path>${distribution.directory}/{{distributionName}}-{{projectVersion}}-linux-x86_64.tar.gz</path>\n"
"                        <platform>linux-x86_64</platform>\n"
"                      </artifact>\n"
"                      <artifact>\n"
"                        <path>${distribution.directory}/{{distributionName}}-{{projectVersion}}-windows-x86_64.zip</path>\n"
"                        <platform>windows-x86_64</platform>\n"
"                      </artifact>\n"
"                      <artifact>\n"
"                        <path>${distribution.directory}/{{distributionName}}-{{projectVersion}}-osx-x86_64.zip</path>\n"
"                        <platform>osx-x86_64</platform>\n"
"                      </artifact>\n"
"                    </artifacts>\n"
"                  </app>\n"
"                </distributions>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:479
#, fuzzy
msgid "One last thing, it's a good practice to publish Homebrew formulae for non-snapshot releases thus change the project's version from `1.0.0-SNAPSHOT` to say `1.0.0.Alpha1` or go directly with `1.0.0` as you feel like doing. One last commit and we're done, say \"feat: Add Homebrew packager configuration\" as commit message. Alright, we're finally ready, let's post a release!"
msgstr "最后一件事，为非快照版本发布Homebrew公式是一个很好的做法，因此将项目的版本从 `1.0.0-SNAPSHOT` 改为 `1.0.0.Alpha1` 或直接用 `1.0.0` ，就像你想做的那样。最后一次提交，我们就完成了，说 \"feat:添加自制打包器配置 \"作为提交信息。好了，我们终于准备好了，让我们发布一个版本吧!"

#. type: Title ==
#: upstream/_guides/jreleaser.adoc:480
#, fuzzy, no-wrap
msgid "Creating a release"
msgstr "创建一个版本"

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:487
#, fuzzy
msgid "It's been quite the whirlwind tour of adding configuration to the `pom.xml` but that's just for getting the project ready for its first release; subsequent release require less tampering with configuration. We can create a git release and the Homebrew formula with the `jreleaser:full-release` goal but if you still have some doubts on how things may play out then you can invoke the goal in dry-run mode that is, let JReleaser perform all local operations as needed without affecting remote resources such as Git repositories. This is how it would look like:"
msgstr "在 `pom.xml` ，这是一次相当旋风式的配置添加之旅，但这只是为了让项目准备好第一次发布；后续的发布需要较少的配置篡改。我们可以用 `jreleaser:full-release` 目标创建一个git版本和Homebrew公式，但如果你对事情的发展还有一些疑问，那么你可以在干运行模式下调用目标，也就是说，让JReleaser根据需要执行所有本地操作，而不影响Git仓库等远程资源。它看起来是这样的。"

#. type: delimited block -
#: upstream/_guides/jreleaser.adoc:493
#, no-wrap
msgid ""
"# because we changed the project's version\n"
"./mvnw -Pnative,dist package\n"
"./mvnw -Prelease jreleaser:full-release -Djreleaser.select.current.platform -Djreleaser.dryrun\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/jreleaser.adoc:530
#, no-wrap
msgid ""
"[INFO] --- jreleaser-maven-plugin:{jreleaser-version}:full-release (default-cli) @ app ---\n"
"[INFO] JReleaser {jreleaser-version}\n"
"[INFO]   - basedir set to /tmp/app\n"
"[WARNING] Platform selection is in effect\n"
"[WARNING] Artifacts will be filtered by platform matching: [osx-x86_64]\n"
"[INFO] Loading variables from /Users/aalmiray/.jreleaser/config.toml\n"
"[INFO] Validating configuration\n"
"[INFO] Project version set to 1.0.0.Alpha1\n"
"[INFO] Release is not snapshot\n"
"[INFO] Timestamp is 2021-12-16T13:31:12.163687+01:00\n"
"[INFO] HEAD is at a21f3f2\n"
"[INFO] Platform is osx-x86_64\n"
"[INFO] dryrun set to true\n"
"[INFO] Generating changelog: target/jreleaser/release/CHANGELOG.md\n"
"[INFO] Calculating checksums\n"
"[INFO]   [checksum] target/distributions/app-1.0.0.Alpha1-osx-x86_64.zip.sha256\n"
"[INFO] Signing files\n"
"[INFO] Signing is not enabled. Skipping\n"
"[INFO] Uploading is not enabled. Skipping\n"
"[INFO] Releasing to https://github.com/aalmiray/app\n"
"[INFO]  - uploading app-1.0.0.Alpha1-osx-x86_64.zip\n"
"[INFO]  - uploading checksums_sha256.txt\n"
"[INFO] Preparing distributions\n"
"[INFO]   - Preparing app distribution\n"
"[INFO]     [brew] preparing app distribution\n"
"[INFO] Packaging distributions\n"
"[INFO]   - Packaging app distribution\n"
"[INFO]     [brew] packaging app distribution\n"
"[INFO] Publishing distributions\n"
"[INFO]   - Publishing app distribution\n"
"[INFO]     [brew] publishing app distribution\n"
"[INFO]     [brew] setting up repository aalmiray/homebrew-tap\n"
"[INFO] Announcing release\n"
"[INFO] Announcing is not enabled. Skipping\n"
"[INFO] Writing output properties to target/jreleaser/output.properties\n"
"[INFO] JReleaser succeeded after 1.335 s\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:533
#, fuzzy
msgid "JReleaser will perform the following tasks for us:"
msgstr "JReleaser将为我们执行以下任务。"

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:535
#, fuzzy
msgid "Generate a changelog based on all commits from the last tag (if any) to the latest commit."
msgstr "根据从最后一个标签（如果有的话）到最新提交的所有提交，生成一份更新日志。"

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:536
#, fuzzy
msgid "Calculate SHA256 (default) checksums for all input files."
msgstr "计算所有输入文件的SHA256（默认）校验和。"

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:537
#, fuzzy
msgid "Sign all files with GPG. In our case we did not configure this step thus it's skipped."
msgstr "用GPG签署所有文件。在我们的案例中，我们没有配置这个步骤，因此它被跳过了。"

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:538
#, fuzzy
msgid "Upload assets to JFrog Artifactory or AWS S3. We also skip this step as it's not configured."
msgstr "上传资产到JFrog Artifactory或AWS S3。我们也跳过这一步，因为它没有被配置。"

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:539
msgid "Create a Git release at the chosen repository, tagging it."
msgstr ""

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:540
msgid "Upload all assets, including checksums."
msgstr ""

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:541
msgid "Create a Homebrew formula, publishing to pass:[https://gitcom.com/aamiray/homebrew-tap]."
msgstr ""

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:545
msgid "Of course no remote repository was affected as we can appreciate the `-Djreleaser.dryrun` property was in effect. If you're so inclined inspect the contents of `target/jreleaser/package/app/brew/Formula/app.rb` which defines the Homebrew formula to be published. It should look something like this:"
msgstr ""

#. type: Block title
#: upstream/_guides/jreleaser.adoc:547
#, no-wrap
msgid "app.rb"
msgstr ""

#. type: delimited block -
#: upstream/_guides/jreleaser.adoc:556
#, no-wrap
msgid ""
"class App < Formula\n"
"  desc \"app -- Sample Quarkus CLI application\"\n"
"  homepage \"pass:[https://github.com/aalmiray/app]\"\n"
"  url \"pass:[https://github.com/aalmiray/app/releases/download/v1.0.0.Alpha1/app-1.0.0.Alpha1-osx-x86_64.zip]\"\n"
"  version \"1.0.0.Alpha1\"\n"
"  sha256 \"a7e8df6eef3c4c5df7357e678b3c4bc6945b926cec4178a0239660de5dba0fc4\"\n"
"  license \"Apache-2.0\"\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/jreleaser.adoc:562
#, no-wrap
msgid ""
"  def install\n"
"    libexec.install Dir[\"*\"]\n"
"    bin.install_symlink \"#{libexec}/bin/app\"\n"
"  end\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/jreleaser.adoc:568
#, no-wrap
msgid ""
"  test do\n"
"    output = shell_output(\"#{bin}/app --version\")\n"
"    assert_match \"1.0.0.Alpha1\", output\n"
"  end\n"
"end\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:572
msgid "When ready, create a release for real this time by simply removing the `-Djreleaser.dryrun` flag from the command line, then browse to your repository and look at the freshly created release."
msgstr ""

#. type: Title ==
#: upstream/_guides/jreleaser.adoc:573
#, no-wrap
msgid "Further reading"
msgstr ""

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:576
msgid "link:https://jreleaser.org/guide/latest/index.html[JReleaser] documentation."
msgstr ""

#. type: Title ==
#: upstream/_guides/jreleaser.adoc:577
#, no-wrap
msgid "Reference"
msgstr ""

#. type: Plain text
#: upstream/_guides/jreleaser.adoc:580
msgid "As a reference, these are the full contents of the `pom.xml`:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/jreleaser.adoc:824
#, no-wrap
msgid ""
"<?xml version=\"1.0\"?>\n"
"<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n"
"    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n"
"  <modelVersion>4.0.0</modelVersion>\n"
"  <groupId>org.acme</groupId>\n"
"  <artifactId>app</artifactId>\n"
"  <version>1.0.0.Alpha1</version>\n"
"  <name>app</name>\n"
"  <description>app -- Sample Quarkus CLI application</description>\n"
"  <inceptionYear>2021</inceptionYear>\n"
"  <url>https://github.com/aalmiray/app</url>\n"
"  <developers>\n"
"    <developer>\n"
"      <id>aalmiray</id>\n"
"      <name>Andres Almiray</name>\n"
"    </developer>\n"
"  </developers>\n"
"  <licenses>\n"
"    <license>\n"
"      <name>Apache-2.0</name>\n"
"      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n"
"      <distribution>repo</distribution>\n"
"    </license>\n"
"  </licenses>\n"
"  <properties>\n"
"    <executable-suffix/>\n"
"    <distribution.directory>${project.build.directory}/distributions</distribution.directory>\n"
"    <compiler-plugin.version>3.8.1</compiler-plugin.version>\n"
"    <maven.compiler.parameters>true</maven.compiler.parameters>\n"
"    <maven.compiler.source>11</maven.compiler.source>\n"
"    <maven.compiler.target>11</maven.compiler.target>\n"
"    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n"
"    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n"
"    <quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id>\n"
"    <quarkus.platform.group-id>io.quarkus.platform</quarkus.platform.group-id>\n"
"    <quarkus.platform.version>{quarkus-version}</quarkus.platform.version>\n"
"    <surefire-plugin.version>3.0.0-M5</surefire-plugin.version>\n"
"    <failsafe.useModulePath>false</failsafe.useModulePath>\n"
"  </properties>\n"
"  <dependencyManagement>\n"
"    <dependencies>\n"
"      <dependency>\n"
"        <groupId>${quarkus.platform.group-id}</groupId>\n"
"        <artifactId>${quarkus.platform.artifact-id}</artifactId>\n"
"        <version>${quarkus.platform.version}</version>\n"
"        <type>pom</type>\n"
"        <scope>import</scope>\n"
"      </dependency>\n"
"    </dependencies>\n"
"  </dependencyManagement>\n"
"  <dependencies>\n"
"    <dependency>\n"
"      <groupId>io.quarkus</groupId>\n"
"      <artifactId>quarkus-picocli</artifactId>\n"
"    </dependency>\n"
"    <dependency>\n"
"      <groupId>io.quarkus</groupId>\n"
"      <artifactId>quarkus-arc</artifactId>\n"
"    </dependency>\n"
"    <dependency>\n"
"      <groupId>io.quarkus</groupId>\n"
"      <artifactId>quarkus-junit5</artifactId>\n"
"      <scope>test</scope>\n"
"    </dependency>\n"
"  </dependencies>\n"
"  <build>\n"
"    <extensions>\n"
"      <extension>\n"
"        <groupId>kr.motd.maven</groupId>\n"
"        <artifactId>os-maven-plugin</artifactId>\n"
"        <version>1.7.0</version>\n"
"      </extension>\n"
"    </extensions>\n"
"    <plugins>\n"
"      <plugin>\n"
"        <groupId>${quarkus.platform.group-id}</groupId>\n"
"        <artifactId>quarkus-maven-plugin</artifactId>\n"
"        <version>${quarkus.platform.version}</version>\n"
"        <extensions>true</extensions>\n"
"        <executions>\n"
"          <execution>\n"
"            <goals>\n"
"              <goal>build</goal>\n"
"              <goal>generate-code</goal>\n"
"              <goal>generate-code-tests</goal>\n"
"            </goals>\n"
"          </execution>\n"
"        </executions>\n"
"      </plugin>\n"
"      <plugin>\n"
"        <artifactId>maven-compiler-plugin</artifactId>\n"
"        <version>${compiler-plugin.version}</version>\n"
"        <configuration>\n"
"          <parameters>${maven.compiler.parameters}</parameters>\n"
"        </configuration>\n"
"      </plugin>\n"
"      <plugin>\n"
"        <artifactId>maven-surefire-plugin</artifactId>\n"
"        <version>${surefire-plugin.version}</version>\n"
"        <configuration>\n"
"          <systemPropertyVariables>\n"
"            <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"            <maven.home>${maven.home}</maven.home>\n"
"          </systemPropertyVariables>\n"
"        </configuration>\n"
"      </plugin>\n"
"    </plugins>\n"
"  </build>\n"
"  <profiles>\n"
"    <profile>\n"
"      <id>native</id>\n"
"      <activation>\n"
"        <property>\n"
"          <name>native</name>\n"
"        </property>\n"
"      </activation>\n"
"      <build>\n"
"        <plugins>\n"
"          <plugin>\n"
"            <artifactId>maven-failsafe-plugin</artifactId>\n"
"            <version>${surefire-plugin.version}</version>\n"
"            <executions>\n"
"              <execution>\n"
"                <goals>\n"
"                  <goal>integration-test</goal>\n"
"                  <goal>verify</goal>\n"
"                </goals>\n"
"                <configuration>\n"
"                  <systemPropertyVariables>\n"
"                    <native.image.path>${project.build.directory}/${project.build.finalName}-runner</native.image.path>\n"
"                    <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"                    <maven.home>${maven.home}</maven.home>\n"
"                  </systemPropertyVariables>\n"
"                </configuration>\n"
"              </execution>\n"
"            </executions>\n"
"          </plugin>\n"
"        </plugins>\n"
"      </build>\n"
"      <properties>\n"
"        <quarkus.package.type>native</quarkus.package.type>\n"
"      </properties>\n"
"    </profile>\n"
"    <profile>\n"
"      <id>dist</id>\n"
"      <build>\n"
"        <plugins>\n"
"          <plugin>\n"
"            <groupId>org.apache.maven.plugins</groupId>\n"
"            <artifactId>maven-assembly-plugin</artifactId>\n"
"            <version>3.3.0</version>\n"
"            <configuration>\n"
"              <attach>false</attach>\n"
"              <appendAssemblyId>false</appendAssemblyId>\n"
"              <finalName>${project.artifactId}-${project.version}-${os.detected.classifier}</finalName>\n"
"              <outputDirectory>${distribution.directory}</outputDirectory>\n"
"              <workDirectory>${project.build.directory}/assembly/work</workDirectory>\n"
"              <descriptors>\n"
"                <descriptor>src/main/assembly/assembly.xml</descriptor>\n"
"              </descriptors>\n"
"            </configuration>\n"
"            <executions>\n"
"              <execution>\n"
"                <id>make-distribution</id>\n"
"                <phase>package</phase>\n"
"                <goals>\n"
"                  <goal>single</goal>\n"
"                </goals>\n"
"              </execution>\n"
"            </executions>\n"
"          </plugin>\n"
"        </plugins>\n"
"      </build>\n"
"    </profile>\n"
"    <profile>\n"
"      <id>dist-windows</id>\n"
"      <activation>\n"
"        <os>\n"
"          <family>windows</family>\n"
"        </os>\n"
"      </activation>\n"
"      <properties>\n"
"        <executable-suffix>.exe</executable-suffix>\n"
"      </properties>\n"
"    </profile>\n"
"    <profile>\n"
"      <id>release</id>\n"
"      <build>\n"
"        <plugins>\n"
"          <plugin>\n"
"            <groupId>org.jreleaser</groupId>\n"
"            <artifactId>jreleaser-maven-plugin</artifactId>\n"
"            <version>{jreleaser-version}</version>\n"
"            <configuration>\n"
"              <jreleaser>\n"
"                <!--project>\n"
"                 <description>app - Sample Quarkus CLI application</description>\n"
"                 <website>https://github.com/aalmiray/app</website>\n"
"                 <docsUrl>https://github.com/aalmiray/app</docsUrl>\n"
"                 <license>APACHE-2.0</license>\n"
"                 <authors>Andres Almiray</authors>\n"
"                 <copyright>2021 Kordamp</copyright>\n"
"                </project-->\n"
"                <release>\n"
"                  <github>\n"
"                    <changelog>\n"
"                      <formatted>ALWAYS</formatted>\n"
"                      <preset>conventional-commits</preset>\n"
"                    </changelog>\n"
"                  </github>\n"
"                </release>\n"
"                <distributions>\n"
"                  <app>\n"
"                    <type>NATIVE_IMAGE</type>\n"
"                    <brew>\n"
"                      <active>ALWAYS</active>\n"
"                    </brew>\n"
"                    <artifacts>\n"
"                      <artifact>\n"
"                        <path>${distribution.directory}/{{distributionName}}-{{projectVersion}}-linux-x86_64.tar.gz</path>\n"
"                        <platform>linux-x86_64</platform>\n"
"                      </artifact>\n"
"                      <artifact>\n"
"                        <path>${distribution.directory}/{{distributionName}}-{{projectVersion}}-windows-x86_64.zip</path>\n"
"                        <platform>windows-x86_64</platform>\n"
"                      </artifact>\n"
"                      <artifact>\n"
"                        <path>${distribution.directory}/{{distributionName}}-{{projectVersion}}-osx-x86_64.zip</path>\n"
"                        <platform>osx-x86_64</platform>\n"
"                      </artifact>\n"
"                    </artifacts>\n"
"                  </app>\n"
"                </distributions>\n"
"              </jreleaser>\n"
"            </configuration>\n"
"          </plugin>\n"
"        </plugins>\n"
"      </build>\n"
"    </profile>\n"
"  </profiles>\n"
"</project>\n"
msgstr ""
