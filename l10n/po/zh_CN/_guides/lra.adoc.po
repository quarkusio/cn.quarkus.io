# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/lra.adoc:6
#, fuzzy, no-wrap
msgid "Narayana LRA Participant Support"
msgstr "纳拉亚纳LRA参与者支持"

#. type: Title ==
#: upstream/_guides/lra.adoc:10
#, fuzzy, no-wrap
msgid "Introduction"
msgstr "简介"

#. type: Plain text
#: upstream/_guides/lra.adoc:14
#, fuzzy
msgid "The LRA (short for Long Running Action) participant extension is useful in microservice based designs where different services can benefit from a relaxed notion of distributed consistency."
msgstr "LRA（Long Running Action的缩写）参与者扩展在基于微服务的设计中非常有用，在这种设计中，不同的服务可以从分布式一致性的宽松概念中受益。"

#. type: Plain text
#: upstream/_guides/lra.adoc:19
#, fuzzy
msgid "The idea is for multiple services to perform different computations/actions in concert, whilst retaining the option to compensate for any actions performed during the computation.  This kind of loose coupling of services bridges the gap between strong consistency models such as JTA/XA and \"home grown\" ad hoc consistency solutions."
msgstr "这个想法是让多个服务协同执行不同的计算/操作，同时保留对计算期间执行的任何操作进行补偿的选项。这种服务的松散耦合弥合了强一致性模型（如JTA/XA）和 \"自生 \"的临时一致性解决方案之间的差距。"

#. type: Plain text
#: upstream/_guides/lra.adoc:42
#, fuzzy
msgid "The model is based on the https://github.com/eclipse/microprofile-lra/blob/master/spec/src/main/asciidoc/microprofile-lra-spec.adoc#eclipse-microprofile-lra[Eclipse MicroProfile LRA specification].  The approach is for the developer to annotate a business method with a Java annotation (https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[`@LRA`]).  When such a method is called, an LRA context is created (if one is not already present) which is passed along with subsequent JAX-RS invocations until a method is reached which also contains an `@LRA` annotation with an attribute that indicates that the LRA should be closed or cancelled. The default is for the LRA to be closed in the same method that started the LRA (which itself may have propagated the context during method execution).  The JAX-RS resource indicates that it wishes to participate in the interaction by, minimally, marking one of the methods with an https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[`@Compensate`] annotation. If the context is later cancelled then this compensate action is guaranteed to be called even in the presence of failures and is the trigger for the resource to compensate for any activities it performed in the context of the LRA. This guarantee enables services to operate reliably with the assurance of eventual consistency (when all compensation activities have ran to completion). The participant can ask to be reliably notified when the LRA it is participating in is closed by marking one of the methods with an https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[`@Complete`] annotation. In this way cancelling an LRA causes all participants to be notified via their Compensate callback and closing an LRA causes all participants to be notified via their Complete callback (if they have one).  Other annotations for controlling participants are documented in the https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[MicroProfile LRA API v1.0 javadoc]."
msgstr "该模型是基于 link:https://github.com/eclipse/microprofile-lra/blob/master/spec/src/main/asciidoc/microprofile-lra-spec.adoc#eclipse-microprofile-lra[Eclipse MicroProfile LRA规范] 。该方法是由开发者用Java注解来注解一个业务方法( link:https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[`@LRA`] ).当这样的方法被调用时，将创建一个 LRA 上下文（如果还没有的话），它将与随后的 JAX-RS 调用一起传递，直到到达一个同样包含 `@LRA` 注解的方法，该注解的属性表明 LRA 应被关闭或取消。默认情况下，LRA 将在启动 LRA 的同一方法中被关闭（该方法本身可能在方法执行期间传播了上下文）。JAX-RS 资源表示它希望参与交互，具体方法是在其中一个方法上加上 link:https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[`@Compensate`] 注解的方法之一。如果该上下文后来被取消，那么这个补偿动作将被保证调用，即使存在故障，并且是资源补偿它在 LRA 上下文中执行的任何活动的触发器。这种保证使服务能够可靠地运行，并保证最终的一致性（当所有的补偿活动都运行完成时）。参与者可以要求在它所参与的 LRA 结束时得到可靠的通知，方法是在其中一个方法上标记一个 link:https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[`@Complete`] 注释。这样，取消一个LRA会使所有参与者通过他们的Compensate回调得到通知，关闭一个LRA会使所有参与者通过他们的Complete回调（如果他们有的话）得到通知。其他控制参与者的注解在 link:https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[MicroProfile LRA API v1.0 javadoc] 中有所记载。"

#. type: Title ==
#: upstream/_guides/lra.adoc:43
#, fuzzy, no-wrap
msgid "Configuration"
msgstr "配置"

#. type: Plain text
#: upstream/_guides/lra.adoc:47
#, fuzzy
msgid "Once you have your Quarkus Maven project configured you can add the `narayana-lra` extension by running the following command in your project base directory:"
msgstr "配置好Quarkus Maven项目后，您可以在项目基本目录下运行以下命令，添加 `narayana-lra` 扩展。"

#. type: Plain text
#: upstream/_guides/lra.adoc:52
#, fuzzy
msgid "This will add the following to your build file:"
msgstr "这将在你的构建文件中添加以下内容。"

#. type: Block title
#: upstream/_guides/lra.adoc:54
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/lra.adoc:68
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-narayana-lra</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-jackson</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-rest-client-jackson</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/lra.adoc:71
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/lra.adoc:76
#, no-wrap
msgid ""
"implementation(\"io.quarkus:quarkus-narayana-lra\")\n"
"implementation(\"io.quarkus:quarkus-resteasy-jackson\")\n"
"implementation(\"io.quarkus:quarkus-rest-client-jackson\")\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/lra.adoc:82
#, fuzzy
msgid "`quarkus-narayana-lra` needs to be complemented with a server JAX-RS implementation and a REST Client implementation in order to work.  This means that users should also have either `quarkus-resteasy-jackson` and `quarkus-rest-client-jackson` or `quarkus-resteasy-reactive-jackson` and `quarkus-rest-client-reactive-jackson` dependencies in their application."
msgstr " `quarkus-narayana-lra` 需要有一个服务器JAX-RS实现和一个REST客户端实现来补充，以便工作。这意味着用户在他们的应用程序中还应该有 和 或 和 的依赖。 `quarkus-resteasy-jackson` `quarkus-rest-client-jackson` `quarkus-resteasy-reactive-jackson` `quarkus-rest-client-reactive-jackson` "

#. type: Plain text
#: upstream/_guides/lra.adoc:86
#, fuzzy
msgid "If there is a running coordinator then this is all you need in order to create new LRAs and to enlist participants with them."
msgstr "如果有一个运行中的协调员，那么这就是你所需要的，以便创建新的LRA，并与他们一起征集参与者。"

#. type: Plain text
#: upstream/_guides/lra.adoc:91
#, fuzzy
msgid "The LRA extension can be configured by updating an `application.properties` file in the `src/main/resources` directory. The only LRA specific property is `quarkus.lra.coordinator-url=<url>` which specifies the HTTP endpoint of an external coordinator, for example:"
msgstr "LRA扩展可以通过更新 `src/main/resources` 目录中的 `application.properties` 文件进行配置。唯一的LRA特定属性是 `quarkus.lra.coordinator-url=<url>` ，它指定了一个外部协调器的HTTP端点，例如。"

#. type: delimited block -
#: upstream/_guides/lra.adoc:95
#, no-wrap
msgid "quarkus.lra.coordinator-url=http://localhost:8080/lra-coordinator\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/lra.adoc:103
#, fuzzy
msgid "For a Narayana coordinator the path component of the url is normally `lra-coordinator`.  Coordinators can be obtained from `https://hub.docker.com/r/jbosstm/lra-coordinator` or you can build your own coordinator using a maven pom that includes the appropriate dependencies. A Quarkus quickstart will be provided to show how to do this or you can take a look at one of the https://github.com/jbosstm/quickstart/tree/master/rts/lra-examples/lra-coordinator[Narayana quickstarts].  Another option would be to run it managed inside a WildFly application server."
msgstr "对于Narayana协调人来说，URL的路径部分通常是 `lra-coordinator` 。协调器可以从 `<a href=\"https://hub.docker.com/r/jbosstm/lra-coordinator\" class=\"bare\">https://hub.docker.com/r/jbosstm/lra-coordinator</a>` 或使用包含适当依赖项的maven pom构建自己的协调器。我们将提供一个Quarkus快速启动程序来展示如何操作，你也可以看一下 link:https://github.com/jbosstm/quickstart/tree/master/rts/lra-examples/lra-coordinator[Narayana的快速启动] 程序。另一个选择是在WildFly应用服务器中管理运行。"

#. type: Title ==
#: upstream/_guides/lra.adoc:104
#, fuzzy, no-wrap
msgid "Handling failures"
msgstr "处理故障"

#. type: Plain text
#: upstream/_guides/lra.adoc:113
#, fuzzy
msgid "When an LRA is told to finish, i.e. when a method annotated with `@LRA(end = true, ...)` is invoked, the coordinator will instruct all services involved in the interaction to finish. If a service is unavailable (or still finishing) then the coordinator will retry periodically. It is the users responsibility to restart failed services on the same endpoint that they used when they first joined the LRA, or to tell the coordinator that they wish to be notified on new endpoints. An LRA is not deemed finished until *all* participants have acknowledged that they have finished."
msgstr "当一个LRA被告知完成时，即当一个用 `@LRA(end = true, ??)` 注释的方法被调用时，协调者将指示所有参与交互的服务完成。如果一个服务不可用（或仍在完成），那么协调者将定期重试。用户有责任在他们第一次加入LRA时使用的同一个端点上重新启动失败的服务，或者告诉协调者他们希望在新的端点上得到通知。在 *所有* 参与者都承认他们已经完成的情况下，LRA才被视为完成。"

#. type: Plain text
#: upstream/_guides/lra.adoc:121
#, fuzzy
msgid "The coordinator is responsible for reliably creating and ending LRAs and for managing participant enlistment and it therefore must be available (for example if it or the network fail then something in the environment is responsible for restarting the coordinator or for repairing the network, respectively). To fulfill this task the coordinator must have access to durable storage for its logs (via a filesystem or in a database).  At the time of writing, managing coordinators is the responsibility of the user. An \"out-of-the-box\" solution will be forthcoming."
msgstr "协调器负责可靠地创建和结束LRA，并管理参与者的招募，因此它必须是可用的（例如，如果它或网络发生故障，那么环境中的某些东西将分别负责重新启动协调器或修复网络）。为了完成这一任务，协调器必须能够为其日志提供持久的存储（通过文件系统或数据库）。在撰写本文时，管理协调器是用户的责任。一个 \"开箱即用 \"的解决方案即将问世。"

#. type: Title ==
#: upstream/_guides/lra.adoc:122
#, fuzzy, no-wrap
msgid "Examples"
msgstr "实例"

#. type: Plain text
#: upstream/_guides/lra.adoc:127
#, fuzzy
msgid "The following is a simple example of how to start an LRA and how to receive a notification when the LRA is later cancelled (the `@Compensate` annotated method is called) or closed (`@Complete` is called):"
msgstr "下面是一个简单的例子，说明如何启动一个LRA，以及当LRA后来被取消（调用 `@Compensate` 注释的方法）或关闭（调用 `@Complete` ）时如何接收通知。"

#. type: delimited block -
#: upstream/_guides/lra.adoc:147
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"@ApplicationScoped\n"
"public class SimpleLRAParticipant\n"
"{\n"
"    @LRA(LRA.Type.REQUIRES_NEW) // a new LRA is created on method entry\n"
"    @Path(\"/work\")\n"
"    @PUT\n"
"    public void doInNewLongRunningAction(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lraId)\n"
"    {\n"
"        /*\n"
"         * Perform business actions in the context of the LRA identified by the\n"
"         * value in the injected JAX-RS header. This LRA was started just before\n"
"         * the method was entered (REQUIRES_NEW) and will be closed when the\n"
"         * method finishes at which point the completeWork method below will be\n"
"         * invoked.\n"
"         */\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lra.adoc:163
#, no-wrap
msgid ""
"    @org.eclipse.microprofile.lra.annotation.Complete\n"
"    @Path(\"/complete\")\n"
"    @PUT\n"
"    public Response completeWork(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lraId,\n"
"                                 String userData)\n"
"    {\n"
"        /*\n"
"         * Free up resources allocated in the context of the LRA identified by the\n"
"         * value in the injected JAX-RS header.\n"
"         *\n"
"         * Since there is no @Status method in this class, completeWork MUST be\n"
"         * idempotent and MUST return the status.\n"
"         */\n"
"         return Response.ok(ParticipantStatus.Completed.name()).build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lra.adoc:181
#, no-wrap
msgid ""
"    @org.eclipse.microprofile.lra.annotation.Compensate\n"
"    @Path(\"/compensate\")\n"
"    @PUT\n"
"    public Response compensateWork(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lraId,\n"
"                                   String userData)\n"
"    {\n"
"        /*\n"
"         * The LRA identified by the value in the injected JAX-RS header was\n"
"         * cancelled so the business logic should compensate for any actions\n"
"         * that have been performed while running in its context.\n"
"         *\n"
"         * Since there is no @Status method in this class, compensateWork MUST be\n"
"         * idempotent and MUST return the status\n"
"         */\n"
"         return Response.ok(ParticipantStatus.Compensated.name()).build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/lra.adoc:185
#, fuzzy
msgid "The example also shows that when an LRA is present its identifier can be obtained by reading the request headers via the `@HeaderParam` JAX-RS annotation type."
msgstr "这个例子还表明，当LRA存在时，它的标识符可以通过读取请求头信息，即 `@HeaderParam` JAX-RS注解类型来获得。"

#. type: Plain text
#: upstream/_guides/lra.adoc:191
#, fuzzy
msgid "And here's an example of how to start an LRA in one resource method and close it in a different resource method using the `end` element of the `LRA` annotation. It also shows how to configure the LRA to be automatically cancelled if the business method returns the particular HTTP status codes identified in the `cancelOn` and `cancelOnFamily` elements:"
msgstr "这里有一个例子，说明如何在一个资源方法中启动LRA，并在另一个资源方法中使用 `LRA` 注释中的 `end` 元素关闭它。它还展示了如何配置LRA，使其在业务方法返回 `cancelOn` 和 `cancelOnFamily` 元素中确定的特定HTTP状态代码时自动取消。"

#. type: delimited block -
#: upstream/_guides/lra.adoc:205
#, no-wrap
msgid ""
"  @LRA(value = LRA.Type.REQUIRED, // if there is no incoming context a new one is created\n"
"       cancelOn = {\n"
"           Response.Status.INTERNAL_SERVER_ERROR // cancel on a 500 code\n"
"       },\n"
"       cancelOnFamily = {\n"
"           Response.Status.Family.CLIENT_ERROR // cancel on any 4xx code\n"
"       },\n"
"       end = false) // the LRA will continue to run when the method finishes\n"
"  @Path(\"/book\")\n"
"  @POST\n"
"  public Response bookTrip(...) { ... }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lra.adoc:211
#, no-wrap
msgid ""
"  @LRA(value = LRA.Type.MANDATORY, // requires an active context before method can be executed\n"
"       end = true) // end the LRA started by the bookTrip method\n"
"  @Path(\"/confirm\")\n"
"  @PUT\n"
"  public Booking confirmTrip(Booking booking) throws BookingException { ... }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/lra.adoc:218
msgid "The `end = false` element on the bookTrip method forces the LRA to continue running when the method finishes and the `end = true` element on the confirmTrip method forces the LRA (started by the bookTrip method) to be closed when the method finishes. Note that this end element can be placed on any JAX-RS resource (ie one service can start the LRA whilst a different service ends it). There are many more examples in the https://github.com/eclipse/microprofile-lra/blob/master/spec/src/main/asciidoc/microprofile-lra-spec.adoc#java-annotations[Microprofile LRA specification document] and in the https://github.com/eclipse/microprofile-lra/tree/master/tck/src/main/java/org/eclipse/microprofile/lra/tck[Microprofile LRA TCK]."
msgstr ""
