# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-04-26 15:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: upstream/_guides/security-jpa-concept.adoc:2
#, fuzzy, no-wrap
msgid "Quarkus Security with Jakarta Persistence"
msgstr "带有Jakarta持久性的Quarkus安全"

#. type: Plain text
#: upstream/_guides/security-jpa-concept.adoc:7
#, fuzzy
msgid "Quarkus provides a Jakarta Persistence (formerly known as JPA) identity provider, similar to the xref:security-jdbc.adoc[JDBC identity provider], suitable for use with the xref:security-basic-authentication-concept.adoc[Basic] and xref:security-authentication-mechanisms-concept.adoc#form-auth[Form-based] Quarkus Security mechanisms, which require a combination of username and password credentials."
msgstr "Quarkus提供了一个Jakarta Persistence（以前称为JPA）身份提供者，类似于 link:security-jdbc.html[JDBC身份提供者] ，适合与 link:security-authentication-mechanisms-concept.html#form-auth[基于] link:security-basic-authentication-concept.html[基本] 和 link:security-authentication-mechanisms-concept.html#form-auth[形式的] Quarkus安全机制一起使用，这需要用户名和密码证书的组合。"

#. type: Plain text
#: upstream/_guides/security-jpa-concept.adoc:9
#, fuzzy
msgid "The Jakarta Persistence `IdentityProvider` creates a `SecurityIdentity` instance, which is used during user authentication to verify and authorize access requests making your Quarkus application secure."
msgstr "Jakarta Persistence `IdentityProvider` 创建了一个 `SecurityIdentity` 实例，它在用户认证过程中被用来验证和授权访问请求，使你的Quarkus应用程序安全。"

#. type: Plain text
#: upstream/_guides/security-jpa-concept.adoc:11
#, fuzzy
msgid "For an example of practical use of Basic authentication and Jakarta Persistence, see the xref:security-basic-authentication-tutorial.adoc[Secure a Quarkus application with Basic authentication and Jakarta Persistence] tutorial."
msgstr "关于Basic认证和Jakarta Persistence的实际使用例子，请看 link:security-basic-authentication-tutorial.html[使用Basic认证和Jakarta Persistence的Quarkus应用程序安全] 教程。"

#. type: Title ==
#: upstream/_guides/security-jpa-concept.adoc:13
#, fuzzy, no-wrap
msgid "Jakarta Persistence entity specification"
msgstr "雅加达持久性实体规范"

#. type: Plain text
#: upstream/_guides/security-jpa-concept.adoc:16
#, fuzzy
msgid "Quarkus security offers a Jakarta Persistence integration to collect usernames, passwords, and roles, and store them into Jakarta Persistence database entities."
msgstr "Quarkus安全系统提供了一个Jakarta Persistence集成，以收集用户名、密码和角色，并将它们存储到Jakarta Persistence数据库实体中。"

#. type: Plain text
#: upstream/_guides/security-jpa-concept.adoc:18
#, fuzzy
msgid "The following Jakarta Persistence entity specification demonstrates how users' information needs to be stored in a Jakarta Persistence entity and properly mapped so that Quarkus can retrieve this information from a database."
msgstr "下面的Jakarta Persistence实体规范展示了用户的信息如何需要被存储在Jakarta Persistence实体中并被正确映射，以便Quarkus能够从数据库中检索这些信息。"

#. type: Plain text
#: upstream/_guides/security-jpa-concept.adoc:21
#, fuzzy
msgid "The `@UserDefinition` annotation must be present on a Jakarta Persistence entity, regardless of whether link:https://quarkus.io/guides/hibernate-orm-panache[simplified Hibernate ORM with Panache] is used or not."
msgstr " `@UserDefinition` 注解必须存在于Jakarta Persistence实体上，无论是否使用 link:https://quarkus.io/guides/hibernate-orm-panache[带有Panache的简化Hibernate ORM] 。"

#. type: Plain text
#: upstream/_guides/security-jpa-concept.adoc:23
#, fuzzy
msgid "The `@Username` and `@Password` field types are always `String`."
msgstr " `@Username` 和 `@Password` 字段类型始终是 `String` 。"

#. type: Plain text
#: upstream/_guides/security-jpa-concept.adoc:25
#, fuzzy
msgid "The `@Roles` field must either be `String`, `Collection<String>`, or a `Collection<X>`, where `X` is an entity class with a single `String` field annotated as `@RolesValue`."
msgstr " `@Roles` 字段必须是 `String` , `Collection<String>` , 或一个 `Collection<X>` , 其中 `X` 是一个实体类，其单一的 `String` 字段被注释为 `@RolesValue` 。"

#. type: Plain text
#: upstream/_guides/security-jpa-concept.adoc:27
#, fuzzy
msgid "Each `String` role element type is parsed as a comma-separated list of roles."
msgstr "每个 `String` 角色元素类型被解析为一个以逗号分隔的角色列表。"

#. type: Plain text
#: upstream/_guides/security-jpa-concept.adoc:29
#, fuzzy
msgid "The following example demonstrates storing security information by adding annotations to the `user` entity:"
msgstr "下面的例子演示了通过向 `user` 实体添加注释来存储安全信息："

#. type: delimited block -
#: upstream/_guides/security-jpa-concept.adoc:33
#, no-wrap
msgid "package org.acme.security.jpa;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa-concept.adoc:36
#, no-wrap
msgid ""
"import jakarta.persistence.Entity;\n"
"import jakarta.persistence.Table;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa-concept.adoc:43
#, no-wrap
msgid ""
"import io.quarkus.hibernate.orm.panache.PanacheEntity;\n"
"import io.quarkus.elytron.security.common.BcryptUtil;\n"
"import io.quarkus.security.jpa.Password;\n"
"import io.quarkus.security.jpa.Roles;\n"
"import io.quarkus.security.jpa.UserDefinition;\n"
"import io.quarkus.security.jpa.Username;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa-concept.adoc:54
#, no-wrap
msgid ""
"@Entity\n"
"@Table(name = \"test_user\")\n"
"@UserDefinition <1>\n"
"public class User extends PanacheEntity {\n"
"    @Username <2>\n"
"    public String username;\n"
"    @Password <3>\n"
"    public String password;\n"
"    @Roles <4>\n"
"    public String role;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa-concept.adoc:69
#, no-wrap
msgid ""
"    /**\n"
"     * Adds a new user to the database\n"
"     * @param username the username\n"
"     * @param password the unencrypted password (it will be encrypted with bcrypt)\n"
"     * @param role the comma-separated roles\n"
"     */\n"
"    public static void add(String username, String password, String role) { <5>\n"
"        User user = new User();\n"
"        user.username = username;\n"
"        user.password = BcryptUtil.bcryptHash(password);\n"
"        user.role = role;\n"
"        user.persist();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jpa-concept.adoc:73
#, fuzzy
msgid "The `security-jpa` extension initializes only if a single entity is annotated with `@UserDefinition`."
msgstr " `security-jpa` 扩展只在单个实体被注解为 `@UserDefinition` 的情况下才会初始化。"

#. type: Plain text
#: upstream/_guides/security-jpa-concept.adoc:75
#, fuzzy
msgid "The `@UserDefinition` annotation must be present on a single entity, either a regular Hibernate ORM entity or a Hibernate ORM with a Panache entity."
msgstr " `@UserDefinition` 注解必须出现在一个实体上，要么是普通的Hibernate ORM实体，要么是带有Panache实体的Hibernate ORM。"

#. type: Plain text
#: upstream/_guides/security-jpa-concept.adoc:76
#, fuzzy
msgid "Indicates the field used for the username."
msgstr "表示用户名使用的字段。"

#. type: Plain text
#: upstream/_guides/security-jpa-concept.adoc:78
#, fuzzy
msgid "Indicates the field used for the password.  By default, `security-jpa` uses bcrypt-hashed passwords, or you can configure plain text or custom passwords instead."
msgstr "表示用于密码的字段。默认情况下， `security-jpa` 使用 bcrypt-hashed 密码，或者你可以配置纯文本或自定义密码来代替。"

#. type: Plain text
#: upstream/_guides/security-jpa-concept.adoc:79
#, fuzzy
msgid "This indicates the comma-separated list of roles added to the target principal representation attributes."
msgstr "这表示以逗号分隔的添加到目标委托人表述属性中的角色列表。"

#. type: Plain text
#: upstream/_guides/security-jpa-concept.adoc:80
#, fuzzy
msgid "This method allows you to add users while hashing passwords with the proper `bcrypt` hash."
msgstr "这种方法允许你添加用户，同时用适当的 `bcrypt` 哈希值对密码进行加密。"

#. type: Title ==
#: upstream/_guides/security-jpa-concept.adoc:82
#, fuzzy, no-wrap
msgid "Jakarta Persistence entity as storage of roles"
msgstr "雅加达持久性实体作为角色的存储"

#. type: Plain text
#: upstream/_guides/security-jpa-concept.adoc:85
#, fuzzy
msgid "Use the following example to store roles inside another Jakarta Persistence entity:"
msgstr "使用下面的例子在另一个Jakarta Persistence实体内存储角色："

#. type: delimited block -
#: upstream/_guides/security-jpa-concept.adoc:94
#, no-wrap
msgid ""
"@UserDefinition\n"
"@Table(name = \"test_user\")\n"
"@Entity\n"
"public class User extends PanacheEntity {\n"
"    @Username\n"
"    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa-concept.adoc:97
#, no-wrap
msgid ""
"    @Password\n"
"    public String pass;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa-concept.adoc:102
#, no-wrap
msgid ""
"    @ManyToMany\n"
"    @Roles\n"
"    public List<Role> roles = new ArrayList<>();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa-concept.adoc:105
#, no-wrap
msgid ""
"@Entity\n"
"public class Role extends PanacheEntity {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa-concept.adoc:108
#, no-wrap
msgid ""
"    @ManyToMany(mappedBy = \"roles\")\n"
"    public List<ExternalRolesUserEntity> users;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa-concept.adoc:112
#, no-wrap
msgid ""
"    @RolesValue\n"
"    public String role;\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-jpa-concept.adoc:114
#, fuzzy, no-wrap
msgid "Password storage and hashing"
msgstr "密码存储和散列"

#. type: Plain text
#: upstream/_guides/security-jpa-concept.adoc:117
#, fuzzy
msgid "When developing applications with Quarkus, you can decide how to manage password storage and hashing. You can choose to keep the default password and hashing settings of Quarkus, or you can hash passwords manually."
msgstr "当用Quarkus开发应用程序时，你可以决定如何管理密码存储和散列。你可以选择保留Quarkus的默认密码和散列设置，或者你可以手动散列密码。"

#. type: Plain text
#: upstream/_guides/security-jpa-concept.adoc:122
#, fuzzy
msgid "With the default option, passwords are stored and hashed with https://en.wikipedia.org/wiki/Bcrypt[bcrypt] under the https://en.wikipedia.org/wiki/Crypt_(C)[Modular Crypt Format] (MCF).  While using MCF, the hashing algorithm, iteration count, and salt are stored as a part of the hashed value.  As such, we do not need dedicated columns to keep them."
msgstr "在默认选项下，密码是在 link:https://en.wikipedia.org/wiki/Crypt_©[模块化加密格式] （MCF）下用 link:https://en.wikipedia.org/wiki/Bcrypt[bcrypt] 存储和散列的。在使用MCF时，散列算法、迭代次数和盐被作为散列值的一部分来存储。因此，我们不需要专门的列来保存它们。"

#. type: delimited block =
#: upstream/_guides/security-jpa-concept.adoc:126
#, fuzzy
msgid "In cryptography, a salt is a name for random data used as an additional input to a one-way function that hashes data, a password, or a passphrase."
msgstr "在密码学中，盐是一个随机数据的名称，用作对数据、密码或口令进行加密的单向函数的额外输入。"

#. type: Plain text
#: upstream/_guides/security-jpa-concept.adoc:129
#, fuzzy
msgid "For manual password hashing, create a class that implements the `CustomPasswordProvider`as shown in the example below."
msgstr "对于手动密码散列，创建一个实现`CustomPasswordProvider`的类，如下面的例子所示。"

#. type: Plain text
#: upstream/_guides/security-jpa-concept.adoc:131
msgid "The following snippet shows how to set a custom password provider that uses the SHA256 hashing algorithm."
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa-concept.adoc:141
#, no-wrap
msgid ""
"@UserDefinition\n"
"@Table(name = \"test_user\")\n"
"@Entity\n"
"public class CustomPasswordUserEntity {\n"
"    @Id\n"
"    @GeneratedValue\n"
"    public Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa-concept.adoc:145
#, no-wrap
msgid ""
"    @Column(name = \"username\")\n"
"    @Username\n"
"    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa-concept.adoc:149
#, no-wrap
msgid ""
"    @Column(name = \"password\")\n"
"    @Password(value = PasswordType.CUSTOM, provider = CustomPasswordProvider.class)\n"
"    public String pass;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa-concept.adoc:153
#, no-wrap
msgid ""
"    @Roles\n"
"    public String role;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jpa-concept.adoc:161
#, no-wrap
msgid ""
"public class CustomPasswordProvider implements PasswordProvider {\n"
"    @Override\n"
"    public Password getPassword(String pass) {\n"
"        byte[] digest = DatatypeConverter.parseHexBinary(pass);\n"
"        return SimpleDigestPassword.createRaw(SimpleDigestPassword.ALGORITHM_SIMPLE_DIGEST_SHA_256, digest);\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-jpa-concept.adoc:167
msgid "For quick creation of a hashed password, use `String BcryptUtil.bcryptHash(String password)`, which defaults to creating a random salt and hashing in ten iterations.  This method also allows specifying the desired amount of iterations and the salt used."
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-jpa-concept.adoc:172
msgid "For applications running in a production environment, do not store passwords as plain text."
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-jpa-concept.adoc:174
msgid "However, it is possible to store passwords as plain text with the `@Password(PasswordType.CLEAR)` annotation when operating in a test environment."
msgstr ""

#. type: Title ==
#: upstream/_guides/security-jpa-concept.adoc:176
#, no-wrap
msgid "References"
msgstr "参考文献"

#. type: Plain text
#: upstream/_guides/security-jpa-concept.adoc:179
msgid "xref:security-basic-authentication-tutorial.adoc[Secure a Quarkus application with Basic authentication and Jakarta Persistence]"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jpa-concept.adoc:180
msgid "xref:security-identity-providers-concept.adoc[Identity providers]"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jpa-concept.adoc:180
msgid "xref:security-overview-concept.adoc[Quarkus Security overview]"
msgstr ""
