# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/maven-tooling.adoc:6
#, fuzzy, no-wrap
msgid "Building applications with Maven"
msgstr "用Maven构建应用程序"

#. type: Title ==
#: upstream/_guides/maven-tooling.adoc:12
#, fuzzy, no-wrap
msgid "Creating a new project"
msgstr "创建一个新的项目"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:15
#, fuzzy
msgid "You can scaffold a new Maven project with:"
msgstr "你可以用以下方法搭建一个新的Maven项目的脚手架。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:23
#, fuzzy
msgid "If you are using the CLI, you can get the list of available options with:"
msgstr "如果你使用的是CLI，你可以通过以下方式获得可用选项的列表。"

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:27
#, no-wrap
msgid "quarkus create app --help\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:30
#, fuzzy
msgid "If you are using the Maven command, the following table lists the attributes you can pass to the `create` command:"
msgstr "如果您使用的是Maven命令，下表列出了您可以传递给 `create` 命令的属性。"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:34
#, fuzzy, no-wrap
msgid "Attribute"
msgstr "属性"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:35
#: upstream/_guides/maven-tooling.adoc:885
#, fuzzy, no-wrap
msgid "Default Value"
msgstr "默认值"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:37
#: upstream/_guides/maven-tooling.adoc:887
#, fuzzy, no-wrap
msgid "Description"
msgstr "描述"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:38
#, fuzzy, no-wrap
msgid "`projectGroupId`"
msgstr " `projectGroupId` "

#. type: Table
#: upstream/_guides/maven-tooling.adoc:39
#, fuzzy, no-wrap
msgid "`org.acme.sample`"
msgstr " `org.acme.sample` "

#. type: Table
#: upstream/_guides/maven-tooling.adoc:41
#, fuzzy, no-wrap
msgid "The group id of the created project"
msgstr "所创建的项目的组ID"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:42
#, fuzzy, no-wrap
msgid "`projectArtifactId`"
msgstr " `projectArtifactId` "

#. type: Table
#: upstream/_guides/maven-tooling.adoc:43
#, fuzzy, no-wrap
msgid "_mandatory_"
msgstr " _强制性_ "

#. type: Table
#: upstream/_guides/maven-tooling.adoc:45
#, fuzzy, no-wrap
msgid "The artifact id of the created project. Not passing it triggers the interactive mode."
msgstr "创建项目的工件ID。不传递它就会触发互动模式。"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:46
#, fuzzy, no-wrap
msgid "`projectVersion`"
msgstr " `projectVersion` "

#. type: Table
#: upstream/_guides/maven-tooling.adoc:47
#, fuzzy, no-wrap
msgid "`1.0.0-SNAPSHOT`"
msgstr " `1.0.0-SNAPSHOT` "

#. type: Table
#: upstream/_guides/maven-tooling.adoc:49
#, fuzzy, no-wrap
msgid "The version of the created project"
msgstr "创建项目的版本"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:50
#, fuzzy, no-wrap
msgid "`platformGroupId`"
msgstr " `platformGroupId` "

#. type: Table
#: upstream/_guides/maven-tooling.adoc:51
#, fuzzy, no-wrap
msgid "`io.quarkus.platform`"
msgstr " `io.quarkus.platform` "

#. type: Table
#: upstream/_guides/maven-tooling.adoc:53
#, fuzzy, no-wrap
msgid "The group id of the target platform."
msgstr "目标平台的组ID。"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:54
#, fuzzy, no-wrap
msgid "`platformArtifactId`"
msgstr " `platformArtifactId` "

#. type: Table
#: upstream/_guides/maven-tooling.adoc:55
#, fuzzy, no-wrap
msgid "`quarkus-bom`"
msgstr " `quarkus-bom` "

#. type: Table
#: upstream/_guides/maven-tooling.adoc:57
#, fuzzy, no-wrap
msgid "The artifact id of the target platform BOM."
msgstr "目标平台BOM的工件ID。"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:58
#, fuzzy, no-wrap
msgid "`platformVersion`"
msgstr " `platformVersion` "

#. type: Table
#: upstream/_guides/maven-tooling.adoc:59
#, fuzzy, no-wrap
msgid "The version currently recommended by the https://quarkus.io/guides/extension-registry-user[Quarkus Extension Registry]"
msgstr "目前 link:https://quarkus.io/guides/extension-registry-user[Quarkus扩展注册处] 推荐的版本"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:61
#, fuzzy, no-wrap
msgid "The version of the platform you want the project to use. It can also accept a version range, in which case the latest from the specified range will be used."
msgstr "你希望项目使用的平台的版本。它也可以接受一个版本范围，在这种情况下，将使用指定范围内的最新版本。"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:62
#, fuzzy, no-wrap
msgid "`className`"
msgstr " `className` "

#. type: Table
#: upstream/_guides/maven-tooling.adoc:63
#, fuzzy, no-wrap
msgid "_Not created if omitted_"
msgstr " _如果省略则不创建_ "

#. type: Table
#: upstream/_guides/maven-tooling.adoc:65
#, fuzzy, no-wrap
msgid "The fully qualified name of the generated resource"
msgstr "生成的资源的完全合格名称"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:66
#, fuzzy, no-wrap
msgid "`path`"
msgstr " `path` "

#. type: Table
#: upstream/_guides/maven-tooling.adoc:67
#, fuzzy, no-wrap
msgid "`/hello`"
msgstr " `/hello` "

#. type: Table
#: upstream/_guides/maven-tooling.adoc:69
#, fuzzy, no-wrap
msgid "The resource path, only relevant if `className` is set."
msgstr "资源路径，只有在设置了 `className` 的情况下才相关。"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:70
#, fuzzy, no-wrap
msgid "`extensions`"
msgstr " `extensions` "

#. type: Table
#: upstream/_guides/maven-tooling.adoc:71
#, fuzzy, no-wrap
msgid "_[]_"
msgstr " _[]_ "

#. type: Table
#: upstream/_guides/maven-tooling.adoc:73
#, fuzzy, no-wrap
msgid "The list of extensions to add to the project (comma-separated)"
msgstr "要添加到项目中的扩展列表（以逗号分隔）。"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:74
#, fuzzy, no-wrap
msgid "`quarkusRegistryClient`"
msgstr " `quarkusRegistryClient` "

#. type: Table
#: upstream/_guides/maven-tooling.adoc:75
#, fuzzy, no-wrap
msgid "`true`"
msgstr " `true` "

#. type: Table
#: upstream/_guides/maven-tooling.adoc:77
#, fuzzy, no-wrap
msgid "Whether or not Quarkus should use the online registry to resolve extension catalogs. If this is set to false, the extension catalog will be narrowed to the defined (or default) platform BOM."
msgstr "Quarkus是否应该使用在线注册表来解决扩展目录。如果设置为false，扩展目录将被缩小到定义（或默认）的平台BOM。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:80
#, fuzzy
msgid "By default, the command will target the `io.quarkus.platform:quarkus-bom:{quarkus-version}` platform release (unless the coordinates of the desired platform release have been specified)."
msgstr "默认情况下，该命令将以 `io.quarkus.platform:quarkus-bom:{quarkus-version}` 平台发布为目标（除非已经指定了所需平台发布的坐标）。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:83
#, fuzzy
msgid "The project is generated in a directory named after the passed artifactId.  If the directory already exists, the generation fails."
msgstr "项目被生成在一个以传递的artifactId命名的目录中。如果该目录已经存在，则生成失败。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:86
#, fuzzy
msgid "A pair of Dockerfiles for native and jvm mode are also generated in `src/main/docker`.  Instructions to build the image and run the container are written in those Dockerfiles."
msgstr "一对用于本地和jvm模式的Dockerfiles也在 `src/main/docker` 。构建镜像和运行容器的说明都写在这些Dockerfiles中。"

#. type: Title ==
#: upstream/_guides/maven-tooling.adoc:87
#, fuzzy, no-wrap
msgid "Dealing with extensions"
msgstr "处理延期问题"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:90
#, fuzzy
msgid "From inside a Quarkus project, you can obtain a list of the available extensions with:"
msgstr "在Quarkus项目中，你可以通过以下方式获得一个可用的扩展列表。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:94
#, fuzzy
msgid "You can add an extension using:"
msgstr "你可以用以下方式添加一个扩展。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:99
#, fuzzy
msgid "Extensions are passed using a comma-separated list."
msgstr "使用逗号分隔的列表传递扩展。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:104
#, fuzzy
msgid "The extension name is the GAV name of the extension: e.g. `io.quarkus:quarkus-agroal`.  But you can pass a partial name and Quarkus will do its best to find the right extension.  For example, `agroal`, `Agroal` or `agro` will expand to `io.quarkus:quarkus-agroal`.  If no extension is found or if more than one extensions match, you will see a red check mark ❌ in the command result."
msgstr "扩展名是扩展名的GAV名称：例如： `io.quarkus:quarkus-agroal` 。但你可以传递一个部分名称，Quarkus将尽力找到正确的扩展名。例如， `agroal` , `Agroal` 或 `agro` 将展开为 `io.quarkus:quarkus-agroal` 。如果没有找到扩展名或有多个扩展名匹配，你将在命令结果中看到一个红色的复选标记❌。"

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:117
#, no-wrap
msgid ""
"$ ./mvnw quarkus:add-extensions -Dextensions=jdbc,agroal,non-exist-ent\n"
"[...]\n"
"❌ Multiple extensions matching 'jdbc'\n"
"     * io.quarkus:quarkus-jdbc-h2\n"
"     * io.quarkus:quarkus-jdbc-mariadb\n"
"     * io.quarkus:quarkus-jdbc-postgresql\n"
"     Be more specific e.g using the exact name or the full gav.\n"
"✅ Adding extension io.quarkus:quarkus-agroal\n"
"❌ Cannot find a dependency matching 'non-exist-ent', maybe a typo?\n"
"[...]\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:120
#, fuzzy
msgid "You can install all extensions which match a globbing pattern :"
msgstr "你可以安装所有符合globbing模式的扩展。"

#. type: Title ==
#: upstream/_guides/maven-tooling.adoc:125
#, fuzzy, no-wrap
msgid "Development mode"
msgstr "发展模式"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:129
#, fuzzy
msgid "Quarkus comes with a built-in development mode.  Run your application with:"
msgstr "Quarkus有一个内置的开发模式。用以下方式运行你的应用程序。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:135
#, fuzzy
msgid "You can then update the application sources, resources and configurations.  The changes are automatically reflected in your running application.  This is great to do development spanning UI and database as you see changes reflected immediately."
msgstr "然后你可以更新应用程序的来源、资源和配置。这些变化会自动反映在你运行的应用程序中。这对于做跨越UI和数据库的开发是非常好的，因为你可以看到变化立即反映出来。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:143
#, fuzzy
msgid "Dev mode enables hot deployment with background compilation, which means that when you modify your Java files or your resource files and refresh your browser these changes will automatically take effect.  This works too for resource files like the configuration property file.  The act of refreshing the browser triggers a scan of the workspace, and if any changes are detected the Java files are compiled, and the application is redeployed, then your request is serviced by the redeployed application. If there are any issues with compilation or deployment an error page will let you know."
msgstr "开发模式可以实现后台编译的热部署，这意味着当你修改你的Java文件或资源文件并刷新你的浏览器时，这些变化将自动生效。这也适用于资源文件，如配置属性文件。刷新浏览器的行为会触发对工作区的扫描，如果检测到任何变化，就会对Java文件进行编译，并重新部署应用程序，然后由重新部署的应用程序为您的请求提供服务。如果编译或部署有任何问题，错误页面会让你知道。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:145
#, fuzzy
msgid "Hit `CTRL+C` to stop the application."
msgstr "点击 `CTRL+C` ，停止应用程序。"

#. type: delimited block =
#: upstream/_guides/maven-tooling.adoc:149
#, fuzzy
msgid "By default, `quarkus:dev` sets the debug host to `localhost` (for security reasons). If you need to change this, for example to enable debugging on all hosts, you can use the `-DdebugHost` option like so:"
msgstr "默认情况下， `quarkus:dev` 将调试主机设置为 `localhost` （出于安全原因）。如果你需要改变这一点，例如在所有的主机上启用调试，你可以像这样使用 `-DdebugHost` 选项。"

#. type: Title ===
#: upstream/_guides/maven-tooling.adoc:155
#, fuzzy, no-wrap
msgid "Remote Development Mode"
msgstr "远程开发模式"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:159
#, fuzzy
msgid "It is possible to use development mode remotely, so that you can run Quarkus in a container environment (such as OpenShift)  and have changes made to your local files become immediately visible."
msgstr "可以远程使用开发模式，这样你就可以在容器环境（如OpenShift）中运行Quarkus，并使对本地文件的修改立即可见。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:161
#, fuzzy
msgid "This allows you to develop in the same environment you will actually run your app in, and with access to the same services."
msgstr "这允许你在与实际运行你的应用程序相同的环境中进行开发，并且可以访问相同的服务。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:163
#, fuzzy
msgid "Do not use this in production. This should only be used in a development environment. You should not run production application in dev mode."
msgstr "不要在生产中使用这个。这应该只在开发环境中使用。你不应该在开发模式下运行生产应用程序。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:165
#, fuzzy
msgid "To do this you must build a mutable application, using the `mutable-jar` format. Set the following properties in `application.properties`:"
msgstr "要做到这一点，你必须建立一个易变的应用程序，使用 `mutable-jar` 格式。在 `application.properties` 中设置以下属性。"

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:171
#, no-wrap
msgid ""
"quarkus.package.type=mutable-jar <1>\n"
"quarkus.live-reload.password=changeit <2>\n"
"quarkus.live-reload.url=http://my.cluster.host.com:8080 <3>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:175
#, fuzzy
msgid "This tells Quarkus to use the mutable-jar format. Mutable applications also include the deployment time parts of Quarkus, so they take up a bit more disk space. If run normally they start just as fast and use the same memory as an immutable application, however they can also be started in dev mode."
msgstr "这告诉Quarkus使用mutable-jar格式。可变的应用程序也包括Quarkus的部署时间部分，所以它们占用了更多的磁盘空间。如果正常运行，它们的启动速度和不可变的应用程序一样快，使用的内存也一样多，但是它们也可以在开发模式下启动。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:176
#, fuzzy
msgid "The password that is used to secure communication between the remote side and the local side."
msgstr "用于保障远程端和本地端之间通信的密码。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:178
#, fuzzy
msgid "The URL that your app is going to be running in dev mode at. This is only needed on the local side, so you may want to leave it out of the properties file and specify it as a system property on the command line."
msgstr "你的应用程序将在开发模式下运行的URL。这只在本地需要，所以你可能想把它从属性文件中删除，并在命令行中作为系统属性指定。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:180
#, fuzzy
msgid "The `mutable-jar` is then built in the same way that a regular Quarkus jar is built, i.e. by issuing:"
msgstr "然后， `mutable-jar` ，其构建方式与普通Quarkus jar的构建方式相同，即通过发布。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:185
#, fuzzy
msgid "Before you start Quarkus on the remote host set the environment variable `QUARKUS_LAUNCH_DEVMODE=true`. If you are on bare metal you can set it via the `export QUARKUS_LAUNCH_DEVMODE=true` command and then run the application with the proper `java -jar ...` command to run the application."
msgstr "在远程主机上启动Quarkus之前，请设置环境变量 `QUARKUS_LAUNCH_DEVMODE=true` 。如果你是在裸机上，你可以通过 `export QUARKUS_LAUNCH_DEVMODE=true` 命令来设置它，然后用适当的 `java -jar …​` 命令来运行应用程序。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:188
#, fuzzy
msgid "If you plan on running the application via Docker, then you'll need to add `-e QUARKUS_LAUNCH_DEVMODE=true` to the `docker run` command.  When the application starts you should now see the following line in the logs: `Profile dev activated. Live Coding activated`."
msgstr "如果你打算通过Docker运行该应用程序，那么你需要在 `docker run` 命令中添加 `-e QUARKUS_LAUNCH_DEVMODE=true` 。当应用程序启动时，你现在应该在日志中看到以下一行。 `Profile dev activated. Live Coding activated` ."

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:192
#, fuzzy
msgid "The remote side does not need to include Maven or any other development tools. The normal `fast-jar` Dockerfile that is generated with a new Quarkus application is all you need. If you are using bare metal launch the Quarkus runner jar, do not attempt to run normal devmode."
msgstr "远程端不需要包括Maven或任何其他开发工具。你只需要在新的Quarkus应用程序中生成正常的 `fast-jar` Docker文件即可。如果你使用裸机启动Quarkus runner jar，不要试图运行正常的devmode。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:194
#, fuzzy
msgid "Now you need to connect your local agent to the remote host, using the `remote-dev` command:"
msgstr "现在你需要使用 `remote-dev` 命令将你的本地代理连接到远程主机。"

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:198
#, no-wrap
msgid "./mvnw quarkus:remote-dev -Dquarkus.live-reload.url=http://my-remote-host:8080\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:203
#, fuzzy
msgid "Now every time you refresh the browser you should see any changes you have made locally immediately visible in the remote app. This is done via a HTTP based long polling transport, that will synchronize your local workspace and the remote application via HTTP calls."
msgstr "现在，每当你刷新浏览器时，你应该看到你在本地所做的任何改变在远程应用程序中立即可见。这是通过一个基于HTTP的长轮询传输完成的，它将通过HTTP调用同步你的本地工作区和远程应用程序。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:207
#, fuzzy
msgid "If you do not want to use the HTTP feature then you can simply run the `remote-dev` command without specifying the URL.  In this mode the command will continuously rebuild the local application, so you can use an external tool such as odo or rsync to sync to the remote application."
msgstr "如果你不想使用HTTP功能，那么你可以简单地运行 `remote-dev` 命令而不指定URL。在这种模式下，该命令将持续重建本地应用程序，因此你可以使用外部工具，如odo或rsync来同步到远程应用程序。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:209
#, fuzzy
msgid "All the config options are shown below:"
msgstr "所有的配置选项都显示在下面。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:216
#, fuzzy
msgid "It is recommended you use SSL when using remote dev mode, however even if you are using an unencrypted connection your password is never sent directly over the wire. For the initial connection request the password is hashed with the initial state data, and subsequent requests hash it with a random session id generated by the server and any body contents for POST requests, and the path for DELETE requests, as well as an incrementing counter to prevent replay attacks."
msgstr "建议你在使用远程开发模式时使用SSL，但是即使你使用未加密的连接，你的密码也不会直接通过电线发送。对于初始连接请求，密码与初始状态数据一起被散列，随后的请求与服务器生成的随机会话ID和任何POST请求的正文内容以及DELETE请求的路径一起散列，还有一个递增的计数器以防止重放攻击。"

#. type: Title ===
#: upstream/_guides/maven-tooling.adoc:217
#, fuzzy, no-wrap
msgid "Configuring Development Mode"
msgstr "配置开发模式"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:221
#, fuzzy
msgid "By default, the Maven plugin picks up compiler flags to pass to `javac` from `maven-compiler-plugin`."
msgstr "默认情况下，Maven插件会从 `maven-compiler-plugin` ，拾取编译器标志传递给 `javac` 。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:228
#, fuzzy
msgid "If you need to customize the compiler flags used in development mode, add a `configuration` section to the `plugin` block and set the `compilerArgs` property just as you would when configuring `maven-compiler-plugin`.  You can also set `source`, `target`, and `jvmArgs`.  For example, to pass `--enable-preview` to both the JVM and `javac`:"
msgstr "如果你需要定制开发模式下使用的编译器标志，可以在 `plugin` 块中添加一个 `configuration` 部分，并像配置 `maven-compiler-plugin` 时那样设置 `compilerArgs` 属性。你也可以设置 `source` ， `target` ，和 `jvmArgs` 。例如，要将 `--enable-preview` 同时传递给JVM和 `javac` 。"

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:235
#, no-wrap
msgid ""
"<plugin>\n"
"  <groupId>${quarkus.platform.group-id}</groupId>\n"
"  <artifactId>quarkus-maven-plugin</artifactId>\n"
"  <version>${quarkus.platform.version}</version>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:244
#, no-wrap
msgid ""
"  <configuration>\n"
"    <source>${maven.compiler.source}</source>\n"
"    <target>${maven.compiler.target}</target>\n"
"    <compilerArgs>\n"
"      <arg>--enable-preview</arg>\n"
"    </compilerArgs>\n"
"    <jvmArgs>--enable-preview</jvmArgs>\n"
"  </configuration>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:247
#, no-wrap
msgid ""
"  ...\n"
"</plugin>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/maven-tooling.adoc:250
#, fuzzy, no-wrap
msgid "Debugging"
msgstr "调试"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:253
#, fuzzy
msgid "In development mode, Quarkus starts by default with debug mode enabled, listening to port `5005` without suspending the JVM."
msgstr "在开发模式下，Quarkus启动时默认启用了调试模式，监听端口 `5005` ，无需暂停JVM。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:255
#, fuzzy
msgid "This behavior can be changed by giving the `debug` system property one of the following values:"
msgstr "这种行为可以通过赋予 `debug` 系统属性以下值之一来改变。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:257
#, fuzzy
msgid "`false` - the JVM will start with debug mode disabled"
msgstr " `false` - JVM在启动时将禁用调试模式"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:258
#, fuzzy
msgid "`true` - The JVM is started in debug mode and will be listening on port `5005`"
msgstr " `true` - JVM在调试模式下启动，并将监听端口为 `5005` "

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:259
#, fuzzy
msgid "`client` - the JVM will start in client mode and attempt to connect to `localhost:5005`"
msgstr " `client` - JVM将以客户模式启动，并尝试连接到 `localhost:5005` "

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:260
#, fuzzy
msgid "`{port}` - The JVM is started in debug mode and will be listening on `{port}`"
msgstr " `{port}` - JVM在调试模式下启动，并将监听 `{port}` "

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:262
#, fuzzy
msgid "An additional system property `suspend` can be used to suspend the JVM, when launched in debug mode. `suspend` supports the following values:"
msgstr "一个额外的系统属性 `suspend` ，可以用来暂停JVM，当以调试模式启动时。 `suspend` ，支持以下值。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:264
#, fuzzy
msgid "`y` or `true` - The debug mode JVM launch is suspended"
msgstr " `y` 或 - 调试模式的JVM启动被暂停。 `true` "

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:265
#, fuzzy
msgid "`n` or `false` - The debug mode JVM is started without suspending"
msgstr " `n` 或 - 调试模式的JVM被启动而不暂停。 `false` "

#. type: delimited block =
#: upstream/_guides/maven-tooling.adoc:270
#, fuzzy
msgid "You can also run a Quarkus application in debug mode with a suspended JVM using:"
msgstr "你也可以在调试模式下使用暂停的JVM运行Quarkus应用程序。"

#. type: delimited block =
#: upstream/_guides/maven-tooling.adoc:276
#, fuzzy
msgid "Then, attach your debugger to `localhost:5005`."
msgstr "然后，将你的调试器连接到 `localhost:5005` 。"

#. type: Title ==
#: upstream/_guides/maven-tooling.adoc:278
#, fuzzy, no-wrap
msgid "Import in your IDE"
msgstr "在你的IDE中导入"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:282
#, fuzzy
msgid "Once you have a <<project-creation, project generated>>, you can import it in your favorite IDE.  The only requirement is the ability to import a Maven project."
msgstr "一旦你 link:#project-creation[生成] 了一个 link:#project-creation[项目] ，你就可以在你喜欢的IDE中导入它。唯一的要求是能够导入一个Maven项目。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:284
#, fuzzy, no-wrap
msgid "**Eclipse**\n"
msgstr " *日蚀* "

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:289
#, fuzzy
msgid "In Eclipse, click on: `File -> Import`.  In the wizard, select: `Maven -> Existing Maven Project`.  On the next screen, select the root location of the project.  The next screen list the found modules; select the generated project and click on `Finish`. Done!"
msgstr "在Eclipse中，点击： `File → Import` 。在向导中，选择： `Maven → Existing Maven Project` 。在下一个屏幕上，选择项目的根位置。下一个屏幕列出了找到的模块；选择生成的项目并点击 `Finish` 。完成了!"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:291
#, fuzzy
msgid "In a separated terminal, run:"
msgstr "在一个分离的终端，运行。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:295
#, fuzzy
msgid "and enjoy a highly productive environment."
msgstr "并享受一个高生产力的环境。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:297
#, fuzzy, no-wrap
msgid "**IntelliJ**\n"
msgstr " *兴发xf187在线娱乐* "

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:299
#, fuzzy
msgid "In IntelliJ:"
msgstr "在IntelliJ:"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:301
#, fuzzy
msgid "From inside IntelliJ select `File -> New -> Project From Existing Sources...` or, if you are on the welcome dialog, select `Import project`."
msgstr "在IntelliJ内部选择 `File → New → Project From Existing Sources…​` ，或者，如果你在欢迎对话框中，选择 `Import project` 。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:302
#: upstream/_guides/maven-tooling.adoc:318
#, fuzzy
msgid "Select the project root"
msgstr "选择项目根部"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:303
#, fuzzy
msgid "Select `Import project from external model` and `Maven`"
msgstr "选择 `Import project from external model` 和 `Maven` "

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:304
#, fuzzy
msgid "Next a few times (review the different options if needed)"
msgstr "接下来几次（如果需要的话，审查不同的选项）"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:305
#, fuzzy
msgid "On the last screen click on Finish"
msgstr "在最后一个屏幕上点击 \"完成\"。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:307
#, fuzzy
msgid "In a separated terminal or in the embedded terminal, run:"
msgstr "在一个分离的终端或嵌入式终端中，运行。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:311
#: upstream/_guides/maven-tooling.adoc:325
#, fuzzy
msgid "Enjoy!"
msgstr "好好享受吧!"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:313
#, fuzzy, no-wrap
msgid "**Apache NetBeans**\n"
msgstr " *Apache NetBeans* "

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:315
#, fuzzy
msgid "In NetBeans:"
msgstr "在NetBeans中。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:317
#, fuzzy
msgid "Select `File -> Open Project`"
msgstr "选择 `File → Open Project` "

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:319
#, fuzzy
msgid "Click on `Open Project`"
msgstr "点击进入 `Open Project` "

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:321
#, fuzzy
msgid "In a separated terminal or the embedded terminal, go to the project root and run:"
msgstr "在一个分离的终端或嵌入式终端中，进入项目根目录并运行。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:327
#, fuzzy, no-wrap
msgid "**Visual Studio Code**\n"
msgstr " *Visual Studio代码* "

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:329
#, fuzzy
msgid "Open the project directory in VS Code. If you have installed the Java Extension Pack (grouping a set of Java extensions), the project is loaded as a Maven project."
msgstr "在VS Code中打开项目目录。如果你安装了Java扩展包（将一组Java扩展分组），该项目会作为Maven项目加载。"

#. type: Title ==
#: upstream/_guides/maven-tooling.adoc:330
#, fuzzy, no-wrap
msgid "Logging Quarkus application build classpath tree"
msgstr "记录Quarkus应用程序的构建classpath树"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:335
#, fuzzy
msgid "Usually, dependencies of an application (which is a Maven project) could be displayed using `mvn dependency:tree` command. In case of a Quarkus application, however, this command will list only the runtime dependencies of the application.  Given that the Quarkus build process adds deployment dependencies of the extensions used in the application to the original application classpath, it could be useful to know which dependencies and which versions end up on the build classpath.  Luckily, the `quarkus` Maven plugin includes the `dependency-tree` goal which displays the build dependency tree for the application."
msgstr "通常情况下，应用程序（即Maven项目）的依赖性可以通过 `mvn dependency:tree` 命令显示。但对于Quarkus应用程序来说，该命令只列出应用程序的运行时依赖项。鉴于Quarkus构建过程会将应用程序中使用的扩展的部署依赖关系添加到原始应用程序的classpath中，因此了解哪些依赖关系和哪些版本最终会出现在构建classpath中是非常有用的。幸运的是， `quarkus` Maven插件包括 `dependency-tree` 目标，显示应用程序的构建依赖树。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:337
#, fuzzy
msgid "Executing `./mvnw quarkus:dependency-tree` on your project should result in an output similar to:"
msgstr "在你的项目上执行 `./mvnw quarkus:dependency-tree` ，应该会有类似的输出结果。"

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:349
#, no-wrap
msgid ""
"[INFO] --- quarkus-maven-plugin:{quarkus-version}:dependency-tree (default-cli) @ getting-started ---\n"
"[INFO] org.acme:getting-started:jar:1.0.0-SNAPSHOT\n"
"[INFO] └─ io.quarkus:quarkus-resteasy-deployment:jar:{quarkus-version} (compile)\n"
"[INFO]    ├─ io.quarkus:quarkus-resteasy-server-common-deployment:jar:{quarkus-version} (compile)\n"
"[INFO]    │  ├─ io.quarkus:quarkus-core-deployment:jar:{quarkus-version} (compile)\n"
"[INFO]    │  │  ├─ commons-beanutils:commons-beanutils:jar:1.9.3 (compile)\n"
"[INFO]    │  │  │  ├─ commons-logging:commons-logging:jar:1.2 (compile)\n"
"[INFO]    │  │  │  └─ commons-collections:commons-collections:jar:3.2.2 (compile)\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:352
#, fuzzy
msgid "The goal accepts the following optional parameters:"
msgstr "该目标接受以下可选参数。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:354
#, fuzzy
msgid "`mode` - the default value is `prod`, i.e. the production build dependency tree. Alternatively, it accepts values `test` to display the test dependency tree and `dev` to display the dev mode dependency tree;"
msgstr " `mode` - 默认值是 ，即生产构建依赖树。另外，它还接受 ，以显示测试依赖树， ，以显示开发模式依赖树。 `prod` `test` `dev` "

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:355
#, fuzzy
msgid "`outputFile` - specifies the file to persist the dependency tree to;"
msgstr " `outputFile` - 指定文件，以便将依赖关系树持久化。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:356
#, fuzzy
msgid "`appendOutput` - the default value is `false`, indicates whether the output to the command should be appended to the file specified with the `outputFile` parameter or it should be overriden."
msgstr " `appendOutput` - 默认值为 ，表示命令的输出是否应该附加到用 参数指定的文件中，或者应该被覆盖。 `false` `outputFile` "

#. type: Title ==
#: upstream/_guides/maven-tooling.adoc:357
#, fuzzy, no-wrap
msgid "Downloading Maven artifact dependencies for offline development and testing"
msgstr "为离线开发和测试下载Maven工件的依赖性"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:362
#, fuzzy
msgid "Quarkus extension dependencies are divided into the runtime extension dependencies that end up on the application runtime classpath and the deployment (or build time) extension dependencies that are resolved by Quarkus only at application build time to create the build classpath. Application developers are expected to express dependencies only on the runtime artifacts of Quarkus extensions. As a consequence, the deployment extension dependencies aren't visible to Maven plugins that aren't aware of the Quarkus extension dependency model, such as the `maven-dependency-plugin`, `go-offline-maven-plugin`, etc. That means those plugins can not be used to pre-download all the application dependencies to be able to build and test the application later in offline mode."
msgstr "Quarkus扩展的依赖性分为运行时扩展的依赖性和部署（或构建时）扩展的依赖性，后者仅在应用程序构建时由Quarkus解决，以创建构建classpath。应用程序开发人员被期望只表达对Quarkus扩展的运行时工件的依赖。因此，对于不了解Quarkus扩展依赖模型的Maven插件（如 `maven-dependency-plugin` 、 `go-offline-maven-plugin` 等）来说，部署扩展依赖是不可见的。这意味着这些插件不能用来预先下载所有的应用程序依赖，以便以后能在离线模式下构建和测试应用程序。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:364
#, fuzzy
msgid "To enable the use-case of building and testing a Quarkus application offline, the `quarkus-maven-plugin` includes the `go-offline` goal that could be called from the command line like this:"
msgstr "为了实现离线构建和测试Quarkus应用程序的用例， `quarkus-maven-plugin` 包括 `go-offline` 目标，可以像这样从命令行调用。"

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:368
#, no-wrap
msgid "./mvnw quarkus:go-offline\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:371
#, fuzzy
msgid "This goal will resolve all the runtime, build time, test and dev mode dependencies of the application downloading them to the configured local Maven repository."
msgstr "这一目标将解决应用程序的所有运行时、构建时、测试和开发模式依赖，并将其下载到配置的本地Maven仓库。"

#. type: Title ==
#: upstream/_guides/maven-tooling.adoc:372
#, fuzzy, no-wrap
msgid "Building a native executable"
msgstr "构建一个本地可执行文件"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:375
#, fuzzy
msgid "Native executables make Quarkus applications ideal for containers and serverless workloads."
msgstr "原生可执行文件使Quarkus应用程序成为容器和无服务器工作负载的理想选择。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:378
#, fuzzy
msgid "Make sure to have `GRAALVM_HOME` configured and pointing to GraalVM version {graalvm-version} (Make sure to use a Java 11 version of GraalVM).  Verify that your `pom.xml` has the proper `native` profile (see <<build-tool-maven>>)."
msgstr "确保配置了 `GRAALVM_HOME` ，并指向GraalVM版本{graalvm-version}（确保使用Java 11版本的GraalVM）。确认你的 `pom.xml` 有适当的 `native` 配置文件（见 link:#build-tool-maven[[build-tool-maven]] ）。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:380
#, fuzzy
msgid "Create a native executable using:"
msgstr "使用以下方法创建一个本地可执行文件。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:384
#, fuzzy
msgid "A native executable will be present in `target/`."
msgstr "一个本地可执行文件将出现在 `target/` 。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:386
#, fuzzy
msgid "To run Integration Tests on the native executable, make sure to have the proper Maven plugin configured (see <<build-tool-maven>>) and launch the `verify` goal."
msgstr "要在本地可执行文件上运行集成测试，请确保配置了适当的Maven插件（见 link:#build-tool-maven[[build-tool-maven]] ），并启动 `verify` 目标。"

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:414
#, no-wrap
msgid ""
"$ ./mvnw verify -Pnative\n"
"...\n"
"[quarkus-quickstart-runner:50955]     universe:     391.96 ms\n"
"[quarkus-quickstart-runner:50955]      (parse):     904.37 ms\n"
"[quarkus-quickstart-runner:50955]     (inline):   1,143.32 ms\n"
"[quarkus-quickstart-runner:50955]    (compile):   6,228.44 ms\n"
"[quarkus-quickstart-runner:50955]      compile:   9,130.58 ms\n"
"[quarkus-quickstart-runner:50955]        image:   2,101.42 ms\n"
"[quarkus-quickstart-runner:50955]        write:     803.18 ms\n"
"[quarkus-quickstart-runner:50955]      [total]:  33,520.15 ms\n"
"[INFO]\n"
"[INFO] --- maven-failsafe-plugin:2.22.0:integration-test (default) @ quarkus-quickstart-native ---\n"
"[INFO]\n"
"[INFO] -------------------------------------------------------\n"
"[INFO]  T E S T S\n"
"[INFO] -------------------------------------------------------\n"
"[INFO] Running org.acme.quickstart.GreetingResourceIT\n"
"Executing [/Users/starksm/Dev/JBoss/Quarkus/starksm64-quarkus-quickstarts/getting-started-native/target/quarkus-quickstart-runner, -Dquarkus.http.port=8081, -Dtest.url=http://localhost:8081, -Dquarkus.log.file.path=target/quarkus.log]\n"
"2019-02-28 16:52:42,020 INFO  [io.quarkus] (main) Quarkus started in 0.007s. Listening on: http://localhost:8080\n"
"2019-02-28 16:52:42,021 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy-reactive]\n"
"[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.081 s - in org.acme.quickstart.GreetingResourceIT\n"
"[INFO]\n"
"[INFO] Results:\n"
"[INFO]\n"
"[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:416
#, no-wrap
msgid "...\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/maven-tooling.adoc:418
#, fuzzy, no-wrap
msgid "Build a container friendly executable"
msgstr "构建一个对容器友好的可执行文件"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:422
#, fuzzy
msgid "The native executable will be specific to your operating system.  To create an executable that will run in a container, use the following:"
msgstr "本机可执行文件将特定于你的操作系统。要创建一个将在容器中运行的可执行文件，请使用以下方法。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:430
#, fuzzy
msgid "The produced executable will be a 64 bit Linux executable, so depending on your operating system it may no longer be runnable.  However, it's not an issue as we are going to copy it to a Docker container.  Note that in this case the build itself runs in a Docker container too, so you don't need to have GraalVM installed locally."
msgstr "产生的可执行文件将是一个64位的Linux可执行文件，所以根据你的操作系统，它可能不再能够运行。然而，这不是一个问题，因为我们要把它复制到Docker容器中。请注意，在这种情况下，构建本身也在Docker容器中运行，所以你不需要在本地安装GraalVM。"

#. type: delimited block =
#: upstream/_guides/maven-tooling.adoc:434
#, fuzzy
msgid "By default, the native executable will be generated using the `quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor}` Docker image."
msgstr "默认情况下，本地可执行文件将使用 `quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor}` Docker镜像生成。"

#. type: delimited block =
#: upstream/_guides/maven-tooling.adoc:437
#, fuzzy
msgid "If you want to build a native executable with a different Docker image (for instance to use a different GraalVM version), use the `-Dquarkus.native.builder-image=<image name>` build argument."
msgstr "如果你想用不同的Docker镜像构建一个本地可执行文件（例如使用不同的GraalVM版本），请使用 `-Dquarkus.native.builder-image=<image name>` build参数。"

#. type: delimited block =
#: upstream/_guides/maven-tooling.adoc:440
#, fuzzy
msgid "The list of the available Docker images can be found on https://quay.io/repository/quarkus/ubi-quarkus-native-image?tab=tags[quay.io].  Be aware that a given Quarkus version might not be compatible with all the images available."
msgstr "可用的Docker镜像的列表可以在 link:https://quay.io/repository/quarkus/ubi-quarkus-native-image?tab=tags[quay.io] 上找到。请注意，一个特定的Quarkus版本可能不兼容所有可用的镜像。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:443
#, fuzzy
msgid "You can follow the xref:building-native-image.adoc[Build a native executable guide] as well as xref:deploying-to-kubernetes.adoc[Deploying Application to Kubernetes and OpenShift] for more information."
msgstr "你可以按照 link:building-native-image.html[构建本地可执行文件指南] 以及 link:deploying-to-kubernetes.html[将应用程序部署到Kubernetes和OpenShift] 来了解更多信息。"

#. type: Title ==
#: upstream/_guides/maven-tooling.adoc:445
#, fuzzy, no-wrap
msgid "Maven configuration"
msgstr "Maven配置"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:448
#, fuzzy
msgid "If you have not used <<project-creation,project scaffolding>>, add the following elements in your `pom.xml`"
msgstr "如果你没有使用过 link:#project-creation[项目脚手架] ，在你的项目中添加以下元素 `pom.xml` "

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:462
#, no-wrap
msgid ""
"<dependencyManagement>\n"
"    <dependencies>\n"
"        <dependency> <1>\n"
"            <groupId>${quarkus.platform.group-id}</groupId>\n"
"            <artifactId>quarkus-bom</artifactId>\n"
"            <version>${quarkus.platform.version}</version>\n"
"            <type>pom</type>\n"
"            <scope>import</scope>\n"
"        </dependency>\n"
"    </dependencies>\n"
"</dependencyManagement>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:493
#, no-wrap
msgid ""
"<build>\n"
"    <plugins>\n"
"        <plugin> <2>\n"
"            <groupId>${quarkus.platform.group-id}</groupId>\n"
"            <artifactId>quarkus-maven-plugin</artifactId>\n"
"            <version>${quarkus.platform.version}</version>\n"
"            <extensions>true</extensions> <3>\n"
"            <executions>\n"
"                <execution>\n"
"                    <goals>\n"
"                        <goal>build</goal>\n"
"                        <goal>generate-code</goal>\n"
"                        <goal>generate-code-tests</goal>\n"
"                    </goals>\n"
"                </execution>\n"
"            </executions>\n"
"        </plugin>\n"
"        <plugin> <4>\n"
"            <groupId>org.apache.maven.plugins</groupId>\n"
"            <artifactId>maven-surefire-plugin</artifactId>\n"
"            <version>${surefire-plugin.version}</version>\n"
"            <configuration>\n"
"                <systemPropertyVariables>\n"
"                    <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"                    <maven.home>${maven.home}</maven.home>\n"
"                </systemPropertyVariables>\n"
"            </configuration>\n"
"        </plugin>\n"
"    </plugins>\n"
"</build>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:526
#, no-wrap
msgid ""
"<profiles>\n"
"    <profile> <5>\n"
"        <id>native</id>\n"
"        <properties> <6>\n"
"            <quarkus.package.type>native</quarkus.package.type>\n"
"        </properties>\n"
"        <build>\n"
"            <plugins>\n"
"                <plugin> <7>\n"
"                    <groupId>org.apache.maven.plugins</groupId>\n"
"                    <artifactId>maven-failsafe-plugin</artifactId>\n"
"                    <version>${surefire-plugin.version}</version>\n"
"                    <executions>\n"
"                        <execution>\n"
"                            <goals>\n"
"                                <goal>integration-test</goal>\n"
"                                <goal>verify</goal>\n"
"                            </goals>\n"
"                            <configuration>\n"
"                                <systemPropertyVariables>\n"
"                                    <native.image.path>${project.build.directory}/${project.build.finalName}-runner</native.image.path>\n"
"                                    <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"                                    <maven.home>${maven.home}</maven.home>\n"
"                                </systemPropertyVariables>\n"
"                            </configuration>\n"
"                        </execution>\n"
"                    </executions>\n"
"                </plugin>\n"
"            </plugins>\n"
"        </build>\n"
"    </profile>\n"
"</profiles>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:529
#, fuzzy
msgid "Optionally use a BOM file to omit the version of the different Quarkus dependencies."
msgstr "可以选择使用BOM文件来省略不同Quarkus依赖的版本。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:530
#, fuzzy
msgid "Use the Quarkus Maven plugin that will hook into the build process."
msgstr "使用Quarkus Maven插件，该插件将与构建过程挂钩。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:531
#, fuzzy
msgid "Enabling Maven plugin extensions will register a Quarkus `MavenLifecycleParticipant` which will make sure the Quarkus classloaders used during the build are properly closed. During the `generate-code` and `generate-code-tests` goals the Quarkus application bootstrap is initialized and re-used in the `build` goal (which actually builds and packages a production application). The Quarkus classloaders will be properly closed in the `build` goal of the `quarkus-maven-plugin`. However, if the build fails in between the `generate-code` or `generate-code-tests` and `build` then the Quarkus augmentation classloader won't be properly closed, which may lead to locking of JAR files that happened to be on the classpath on Windows OS."
msgstr "启用Maven插件扩展将注册一个Quarkus `MavenLifecycleParticipant` ，这将确保构建过程中使用的Quarkus类加载器被正确关闭。在 `generate-code` 和 `generate-code-tests` 目标期间，Quarkus应用引导被初始化，并在 `build` 目标（实际构建和打包生产应用）中重新使用。在 `quarkus-maven-plugin` 的 `build` 目标中，Quarkus 类加载器将被正确关闭。然而，如果在 `generate-code` 或 `generate-code-tests` 和 `build` 之间构建失败，那么 Quarkus 增强类加载器将不会被正确关闭，这可能导致锁定恰好在 Windows 操作系统的 classpath 上的 JAR 文件。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:533
#, fuzzy
msgid "Add system properties to `maven-surefire-plugin`. + `maven.home` is only required if you have custom configuration in `${maven.home}/conf/settings.xml`."
msgstr "将系统属性添加到 `maven-surefire-plugin` 。+ `maven.home` ，只有当你在 `${maven.home}/conf/settings.xml` 中有自定义配置时才需要。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:534
#, fuzzy
msgid "Use a specific `native` profile for native executable building."
msgstr "使用一个特定的 `native` 配置文件来构建本地可执行文件。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:535
#, fuzzy
msgid "Enable the `native` package type. The build will therefore produce a native executable."
msgstr "启用 `native` 包类型。因此，构建将产生一个本地可执行文件。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:536
#, fuzzy
msgid "If you want to test your native executable with Integration Tests, add the following plugin configuration. Test names `*IT` and annotated `@NativeImageTest` or `@QuarkusIntegrationTest` will be run against the native executable. See the xref:building-native-image.adoc[Native executable guide] for more info."
msgstr "如果你想用集成测试来测试你的本地可执行文件，请添加以下插件配置。测试名称 `*IT` 和注释 `@NativeImageTest` 或 `@QuarkusIntegrationTest` 将针对本地可执行文件运行。更多信息请参见 link:building-native-image.html[本地可执行文件指南] 。"

#. type: Title ===
#: upstream/_guides/maven-tooling.adoc:538
#, fuzzy, no-wrap
msgid "Using fast-jar"
msgstr "使用快速罐"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:541
#, fuzzy
msgid "`fast-jar` is the default quarkus package type."
msgstr " `fast-jar` 是默认的quarkus包类型。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:543
#, fuzzy
msgid "The result of the build is a directory under `target` named `quarkus-app`."
msgstr "构建的结果是 `target` 下的一个目录，名为 `quarkus-app` 。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:545
#, fuzzy
msgid "You can run the application using: `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr "你可以使用以下方式运行应用程序： `java -jar target/quarkus-app/quarkus-run.jar` 。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:548
#, fuzzy
msgid "In order to successfully run the produced jar, you need to have the entire contents of the `quarkus-app` directory. If any of the files are missing, the application will not start or might not function correctly."
msgstr "为了成功运行所制作的jar，你需要拥有 `quarkus-app` 目录中的全部内容。如果缺少任何文件，应用程序将无法启动或可能无法正常运行。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:552
#, fuzzy
msgid "The `fast-jar` packaging results in creating an artifact that starts a little faster and consumes slightly less memory than a legacy Quarkus jar because it has indexed information about which dependency jar contains classes and resources. It can thus avoid the lookup into potentially every jar on the classpath that the legacy jar necessitates, when loading a class or resource."
msgstr " `fast-jar` 包装的结果是创建一个工件，它的启动速度比传统的Quarkus jar快一点，消耗的内存也少一点，因为它有关于哪个依赖jar包含类和资源的索引信息。因此，当加载一个类或资源时，它可以避免对classpath上的每一个jar进行查找，而传统的jar则需要这样做。"

#. type: Title ===
#: upstream/_guides/maven-tooling.adoc:554
#, fuzzy, no-wrap
msgid "Uber-Jar Creation"
msgstr "创作Uber-Jar"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:558
#, fuzzy
msgid "Quarkus Maven plugin supports the generation of Uber-Jars by specifying a `quarkus.package.type=uber-jar` configuration option in your `application.properties` (or `<quarkus.package.type>uber-jar</quarkus.package.type>` in your `pom.xml`)."
msgstr " `quarkus.package.type=uber-jar` `pom.xml` Quarkus Maven插件支持生成Uber-Jars，方法是在 `application.properties` （或 `<quarkus.package.type>uber-jar</quarkus.package.type>` ）中指定一个配置选项。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:560
#, fuzzy
msgid "The original jar will still be present in the `target` directory but it will be renamed to contain the `.original` suffix."
msgstr "原始的jar将仍然存在于 `target` 目录中，但它将被重新命名为包含 `.original` 的后缀。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:563
#, fuzzy
msgid "When building an Uber-Jar you can specify entries that you want to exclude from the generated jar by using the `quarkus.package.ignored-entries` configuration option, this takes a comma separated list of entries to ignore."
msgstr "当构建Uber-Jar时，你可以通过使用 `quarkus.package.ignored-entries` 配置选项来指定你想从生成的jar中排除的条目，这需要一个逗号分隔的条目列表来忽略。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:565
#, fuzzy
msgid "Uber-Jar creation by default excludes link:https://docs.oracle.com/javase/tutorial/deployment/jar/intro.html[signature files] that might be present in the dependencies of the application."
msgstr "Uber-Jar的创建默认情况下排除了可能存在于应用程序的依赖性中的 link:https://docs.oracle.com/javase/tutorial/deployment/jar/intro.html[签名文件] 。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:567
#, fuzzy
msgid "Uber-Jar's final name is configurable via a Maven's build settings `finalName` option."
msgstr "Uber-Jar的最终名称可通过Maven的构建设置 `finalName` 选项来配置。"

#. type: Title ===
#: upstream/_guides/maven-tooling.adoc:569
#, fuzzy, no-wrap
msgid "Working with multi-module projects"
msgstr "与多模块项目一起工作"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:572
#, fuzzy
msgid "By default, Quarkus will not discover CDI beans inside another module."
msgstr "默认情况下，Quarkus不会发现另一个模块中的CDI Bean。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:575
#, fuzzy
msgid "The best way to enable CDI bean discovery for a module in a multi-module project would be to include the `jandex-maven-plugin`, unless it is the main application module already configured with the quarkus-maven-plugin, in which case it will indexed automatically."
msgstr "为多模块项目中的某个模块启用CDI Bean发现的最佳方式是将 `jandex-maven-plugin` ，除非该模块是已经配置了quarkus-maven-plugin的主要应用模块，在这种情况下它会自动被索引。"

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:595
#, no-wrap
msgid ""
"<build>\n"
"  <plugins>\n"
"    <plugin>\n"
"      <groupId>org.jboss.jandex</groupId>\n"
"      <artifactId>jandex-maven-plugin</artifactId>\n"
"      <version>{jandex-maven-plugin-version}</version>\n"
"      <executions>\n"
"        <execution>\n"
"          <id>make-index</id>\n"
"          <goals>\n"
"            <goal>jandex</goal>\n"
"          </goals>\n"
"        </execution>\n"
"      </executions>\n"
"    </plugin>\n"
"  </plugins>\n"
"</build>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:598
#, fuzzy
msgid "More information on this topic can be found on the xref:cdi-reference.adoc#bean_discovery[Bean Discovery] section of the CDI guide."
msgstr "关于这个主题的更多信息可以在CDI指南的 link:cdi-reference.html#bean_discovery[Bean Discovery] 部分找到。"

#. type: Title ===
#: upstream/_guides/maven-tooling.adoc:600
#, fuzzy, no-wrap
msgid "Building with a specific configuration profile"
msgstr "用特定的配置档案进行建设"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:603
#, fuzzy
msgid "Quarkus supports xref:config-reference.adoc#profiles[configuration profiles] in order to provide a specific configuration according to the target environment."
msgstr "Quarkus支持 link:config-reference.html#profiles[配置文件] ，以便根据目标环境提供特定的配置。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:605
#, fuzzy
msgid "The profile can be provided directly in the Maven build's command thanks to the system property `quarkus.profile` with a command of type:"
msgstr "由于系统属性 `quarkus.profile` ，配置文件可以直接在Maven构建的命令中提供，而命令的类型也是如此。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:612
#, fuzzy
msgid "However it is also possible to specify the profile directly in the POM file of the project using project properties, the Quarkus Maven plugin configuration properties or system properties set in the Quarkus Maven plugin configuration."
msgstr "但也可以直接在项目的POM文件中使用项目属性、Quarkus Maven插件配置属性或Quarkus Maven插件配置中设置的系统属性来指定配置文件。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:614
#, fuzzy
msgid "In order of precedence (greater precedence first):"
msgstr "按顺序排列（优先级较高的先）。"

#. type: Block title
#: upstream/_guides/maven-tooling.adoc:615
#, fuzzy, no-wrap
msgid "1. System properties set in the Quarkus Maven plugin configuration"
msgstr " Quarkus Maven插件配置中设置的系统属性 "

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:641
#, no-wrap
msgid ""
"<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n"
"    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n"
"  ...\n"
"  <build>\n"
"    <plugins>\n"
"      ...\n"
"      <plugin>\n"
"        <groupId>${quarkus.platform.group-id}</groupId>\n"
"        <artifactId>quarkus-maven-plugin</artifactId>\n"
"        <version>${quarkus.platform.version}</version>\n"
"        <extensions>true</extensions>\n"
"        <configuration>\n"
"          <systemProperties>\n"
"            <quarkus.profile>prod-aws</quarkus.profile> <1>\n"
"          </systemProperties>\n"
"        </configuration>\n"
"     </plugin>\n"
"     ...\n"
"    </plugins>\n"
"  </build>\n"
"...\n"
"</project>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:643
#: upstream/_guides/maven-tooling.adoc:672
#: upstream/_guides/maven-tooling.adoc:688
#, fuzzy
msgid "The default configuration profile of this project is `prod-aws`."
msgstr "本项目的默认配置文件是 `prod-aws` 。"

#. type: Block title
#: upstream/_guides/maven-tooling.adoc:644
#, fuzzy, no-wrap
msgid "2. Quarkus Maven plugin configuration properties"
msgstr " Quarkus Maven插件配置属性 "

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:670
#, no-wrap
msgid ""
"<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n"
"    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n"
"  ...\n"
"  <build>\n"
"    <plugins>\n"
"      ...\n"
"      <plugin>\n"
"        <groupId>${quarkus.platform.group-id}</groupId>\n"
"        <artifactId>quarkus-maven-plugin</artifactId>\n"
"        <version>${quarkus.platform.version}</version>\n"
"        <extensions>true</extensions>\n"
"        <configuration>\n"
"          <properties>\n"
"            <quarkus.profile>prod-aws</quarkus.profile> <1>\n"
"          </properties>\n"
"        </configuration>\n"
"     </plugin>\n"
"     ...\n"
"    </plugins>\n"
"  </build>\n"
"...\n"
"</project>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/maven-tooling.adoc:673
#, fuzzy, no-wrap
msgid "3. Project properties"
msgstr " 项目属性 "

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:686
#, no-wrap
msgid ""
"<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n"
"    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n"
"  ...\n"
"  <properties>\n"
"    <quarkus.profile>prod-aws</quarkus.profile> <1>\n"
"    ...\n"
"  </properties>\n"
"...\n"
"</project>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:690
#, fuzzy
msgid "Whatever the approach is chosen, the profile can still be overridden with the `quarkus.profile` system property or the `QUARKUS_PROFILE` environment variable."
msgstr "无论选择什么方法，配置文件仍然可以用 `quarkus.profile` 系统属性或 `QUARKUS_PROFILE` 环境变量来覆盖。"

#. type: Title ===
#: upstream/_guides/maven-tooling.adoc:692
#, fuzzy, no-wrap
msgid "Building several artifacts from a single module"
msgstr "从一个模块建立几个工件"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:696
#, fuzzy
msgid "In some particular use cases, it can be interesting to build several artifacts of your application from the same module.  A typical example is when you want to build your application with different configuration profiles."
msgstr "在一些特殊的用例中，从同一个模块中构建几个应用程序的工件可能是很有趣的。一个典型的例子是当你想用不同的配置文件来构建你的应用程序。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:698
#, fuzzy
msgid "In that case, it is possible to add as many executions as needed to the Quarkus Maven plugin configuration."
msgstr "在这种情况下，可以根据需要在Quarkus Maven插件配置中添加任意数量的执行。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:700
#, fuzzy
msgid "Below is an example of a Quarkus Maven plugin configuration that will produce two builds of the same application: one using the `prod-oracle` profile and the other one using the `prod-postgresql` profile."
msgstr "下面是一个Quarkus Maven插件配置的例子，它将为同一个应用程序生成两个构建：一个使用 `prod-oracle` 配置文件，另一个使用 `prod-postgresql` 配置文件。"

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:746
#, no-wrap
msgid ""
"<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n"
"    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n"
"  ...\n"
"  <build>\n"
"    <plugins>\n"
"      ...\n"
"      <plugin>\n"
"        <groupId>${quarkus.platform.group-id}</groupId>\n"
"        <artifactId>quarkus-maven-plugin</artifactId>\n"
"        <version>${quarkus.platform.version}</version>\n"
"        <extensions>true</extensions>\n"
"        <executions>\n"
"          <execution>\n"
"            <id>oracle</id>\n"
"            <goals>\n"
"              <goal>build</goal>\n"
"            </goals>\n"
"            <configuration>\n"
"              <properties>\n"
"                <quarkus.profile>prod-oracle</quarkus.profile> <1>\n"
"                <quarkus.package.output-directory>oracle-quarkus-app</quarkus.package.output-directory> <2>\n"
"              </properties>\n"
"            </configuration>\n"
"          </execution>\n"
"          <execution>\n"
"            <id>postgresql</id>\n"
"            <goals>\n"
"              <goal>build</goal>\n"
"            </goals>\n"
"            <configuration>\n"
"              <properties>\n"
"                <quarkus.profile>prod-postgresql</quarkus.profile> <3>\n"
"                <quarkus.package.output-directory>postgresql-quarkus-app</quarkus.package.output-directory> <4>\n"
"              </properties>\n"
"            </configuration>\n"
"          </execution>\n"
"        </executions>\n"
"     </plugin>\n"
"     ...\n"
"    </plugins>\n"
"  </build>\n"
"...\n"
"</project>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:748
#, fuzzy
msgid "The default configuration profile of the first execution of the plugin is `prod-oracle`."
msgstr "第一次执行插件的默认配置配置文件是 `prod-oracle` 。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:749
#, fuzzy
msgid "The output directory of the first execution of the plugin is set to `oracle-quarkus-app` instead of `quarkus-app` to have a dedicated directory."
msgstr "第一次执行插件的输出目录被设置为 `oracle-quarkus-app` ，而不是 `quarkus-app` ，以便有一个专门的目录。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:750
#, fuzzy
msgid "The default configuration profile of the second execution of the plugin is `prod-postgresql`."
msgstr "插件第二次执行的默认配置文件是 `prod-postgresql` 。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:751
#, fuzzy
msgid "The output directory of the second execution of the plugin is set to `postgresql-quarkus-app` instead of `quarkus-app` to have a dedicated directory."
msgstr "插件第二次执行的输出目录被设置为 `postgresql-quarkus-app` ，而不是 `quarkus-app` ，以便有一个专门的目录。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:753
#, fuzzy
msgid "With the configuration above, both profile builds will be using the same dependencies, so if we added dependencies on the Oracle and PostgreSQL drivers to the application, both of the drivers will appear in both builds."
msgstr "通过上面的配置，两个配置文件的构建都将使用相同的依赖关系，所以如果我们在应用程序中添加了对Oracle和PostgreSQL驱动的依赖关系，这两个驱动都将出现在两个构建中。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:756
#, fuzzy
msgid "To isolate profile-specific dependencies from other profiles, the JDBC drivers could be added as optional dependencies to the application but configured to be included in each profile that requires them, e.g.:"
msgstr "为了将特定配置文件的依赖性与其他配置文件隔离开来，JDBC驱动程序可以作为可选的依赖性添加到应用程序中，但配置为包含在需要它们的每个配置文件中，例如。"

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:802
#, no-wrap
msgid ""
"<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n"
"    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n"
"  ...\n"
"  <dependencies>\n"
"    ...\n"
"    <dependency>\n"
"      <groupId>org.postgresql</groupId>\n"
"      <artifactId>postgresql</artifactId>\n"
"      <version>${postgresql.driver.version}</version>\n"
"      <optional>true</optional> <1>\n"
"    </dependency>\n"
"  </dependencies>\n"
"  <build>\n"
"    <plugins>\n"
"      ...\n"
"      <plugin>\n"
"        <groupId>${quarkus.platform.group-id}</groupId>\n"
"        <artifactId>quarkus-maven-plugin</artifactId>\n"
"        <version>${quarkus.platform.version}</version>\n"
"        <extensions>true</extensions>\n"
"        <executions>\n"
"          ...\n"
"          <execution>\n"
"            <id>postgresql</id>\n"
"            <goals>\n"
"              <goal>build</goal>\n"
"            </goals>\n"
"            <configuration>\n"
"              <properties>\n"
"                <quarkus.profile>prod-postgresql</quarkus.profile>\n"
"                <quarkus.package.output-directory>postgresql-quarkus-app</quarkus.package.output-directory>\n"
"                <quarkus.package.filter-optional-dependencies>true</quarkus.package.filter-optional-dependencies> <2>\n"
"                <quarkus.package.included-optional-dependencies>org.postgresql:postgresql::jar</quarkus.package.included-optional-dependencies> <3>\n"
"              </properties>\n"
"            </configuration>\n"
"          </execution>\n"
"        </executions>\n"
"     </plugin>\n"
"     ...\n"
"    </plugins>\n"
"  </build>\n"
"...\n"
"</project>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:804
#, fuzzy
msgid "The JDBC driver of PostgreSQL is defined as an optional dependency"
msgstr "PostgreSQL的JDBC驱动被定义为一个可选的依赖关系"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:805
#, fuzzy
msgid "For backward compatibility reasons, it is necessary to explicitly indicate that the optional dependencies need to be filtered."
msgstr "出于向后兼容的原因，有必要明确指出需要对可选的依赖关系进行过滤。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:806
#, fuzzy
msgid "Only the optional dependency corresponding to the JDBC driver of PostgreSQL is expected in the final artifact."
msgstr "只有对应于PostgreSQL的JDBC驱动的可选依赖被期望在最终的工件中出现。"

#. type: Title ==
#: upstream/_guides/maven-tooling.adoc:808
#, fuzzy, no-wrap
msgid "Configuring the Project Output"
msgstr "配置项目输出"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:812
#, fuzzy
msgid "There are a several configuration options that will define what the output of your project build will be.  These are provided in `application.properties` the same as any other config property."
msgstr "有几个配置选项将定义你的项目构建的输出是什么。这些都是在 `application.properties` ，和其他的配置属性一样。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:814
#, fuzzy
msgid "The properties are shown below:"
msgstr "这些属性显示如下。"

#. type: Title ===
#: upstream/_guides/maven-tooling.adoc:818
#, fuzzy, no-wrap
msgid "Custom test configuration profile in JVM mode"
msgstr "JVM模式下的自定义测试配置文件"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:823
#, fuzzy
msgid "By default, Quarkus tests in JVM mode are run using the `test` configuration profile. If you are not familiar with Quarkus configuration profiles, everything you need to know is explained in the xref:config.adoc#configuration-profiles[Configuration Profiles Documentation]."
msgstr "默认情况下，Quarkus测试在JVM模式下使用 `test` 配置文件运行。如果你不熟悉Quarkus的配置文件，你需要知道的一切都在 link:config.html#configuration-profiles[配置文件文档] 中解释。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:827
#, fuzzy
msgid "It is however possible to use a custom configuration profile for your tests with the Maven Surefire and Maven Failsafe configurations shown below. This can be useful if you need for example to run some tests using a specific database which is not your default testing database."
msgstr "然而，您可以通过下面所示的Maven Surefire和Maven Failsafe配置为您的测试使用自定义配置文件。如果您需要使用特定的数据库来运行一些测试，而这些数据库不是您的默认测试数据库，那么这就非常有用。"

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:862
#, no-wrap
msgid ""
"<project>\n"
"  [...]\n"
"  <build>\n"
"    <plugins>\n"
"      <plugin>\n"
"        <groupId>org.apache.maven.plugins</groupId>\n"
"        <artifactId>maven-surefire-plugin</artifactId>\n"
"        <version>${surefire-plugin.version}</version>\n"
"        <configuration>\n"
"          <systemPropertyVariables>\n"
"            <quarkus.test.profile>foo</quarkus.test.profile> <1>\n"
"            <buildDirectory>${project.build.directory}</buildDirectory>\n"
"            [...]\n"
"          </systemPropertyVariables>\n"
"        </configuration>\n"
"      </plugin>\n"
"      <plugin>\n"
"        <groupId>org.apache.maven.plugins</groupId>\n"
"        <artifactId>maven-failsafe-plugin</artifactId>\n"
"        <version>${failsafe-plugin.version}</version>\n"
"        <configuration>\n"
"          <systemPropertyVariables>\n"
"            <quarkus.test.profile>foo</quarkus.test.profile> <1>\n"
"            <buildDirectory>${project.build.directory}</buildDirectory>\n"
"            [...]\n"
"          </systemPropertyVariables>\n"
"        </configuration>\n"
"      </plugin>\n"
"    </plugins>\n"
"  </build>\n"
"  [...]\n"
"</project>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:865
#, fuzzy
msgid "The `foo` configuration profile will be used to run the tests."
msgstr " `foo` 配置文件将被用于运行测试。"

#. type: delimited block =
#: upstream/_guides/maven-tooling.adoc:870
#, fuzzy
msgid "It is not possible to use a custom test configuration profile in native mode for now. Native tests are always run using the `prod` profile."
msgstr "目前不可能在本地模式下使用自定义的测试配置文件。本地测试总是使用 `prod` 配置文件来运行。"

#. type: Title ===
#: upstream/_guides/maven-tooling.adoc:873
#, fuzzy, no-wrap
msgid "Bootstrap Maven properties"
msgstr "Bootstrap Maven属性"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:876
#, fuzzy
msgid "Quarkus bootstrap includes a Maven resolver implementation that is used to resolve application runtime and build time dependencies. The Quarkus Maven resolver is initialized from the same Maven command line that launched the build, test or dev mode. Typically, there is no need to add any extra configuration for it. However, there could be cases where an extra configuration option may be necessary to properly resolve application dependencies in test or dev modes, or IDEs."
msgstr "Quarkus bootstrap包含一个Maven解析器的实现，用于解决应用程序运行时和构建时的依赖关系。Quarkus Maven解析器由启动构建、测试或开发模式的同一Maven命令行初始化。一般来说，不需要为它添加任何额外的配置。然而，在某些情况下，可能需要额外的配置选项来正确解决测试或开发模式或IDE中的应用依赖。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:878
#, fuzzy
msgid "Maven test plugins (such as `surefire` and `failsafe`), for example, are not propagating build system properties to the running tests by default. Which means some of the system properties set by the Maven CLI aren't available for the Quarkus Maven resolver initialized for the tests, which may result in test dependencies being resolved using different settings than the main Maven build."
msgstr "例如，Maven测试插件（如 `surefire` 和 `failsafe` ）默认不向运行中的测试传播构建系统属性。这意味着Maven CLI设置的一些系统属性对于为测试初始化的Quarkus Maven解析器来说是不可用的，这可能导致测试依赖的解析设置与主Maven构建不同。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:880
#, fuzzy
msgid "Here is a list of system properties the Quarkus bootstrap Maven resolver checks during its initialization."
msgstr "下面是Quarkus bootstrap Maven解析器在初始化时检查的系统属性列表。"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:884
#, fuzzy, no-wrap
msgid "Property name"
msgstr "财产名称"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:888
#, fuzzy, no-wrap
msgid "`maven.home`"
msgstr " `maven.home` "

#. type: Table
#: upstream/_guides/maven-tooling.adoc:889
#, fuzzy, no-wrap
msgid "`MAVEN_HOME` envvar"
msgstr " `MAVEN_HOME` envvar"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:891
#, fuzzy, no-wrap
msgid "The Maven home dir is used to resolve the global settings file unless it was explicitly provided on the command line with the `-gs` argument"
msgstr "Maven主目录用于解析全局设置文件，除非在命令行中用 `-gs` 参数明确提供。"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:892
#, fuzzy, no-wrap
msgid "`maven.settings`"
msgstr " `maven.settings` "

#. type: Table
#: upstream/_guides/maven-tooling.adoc:893
#, fuzzy, no-wrap
msgid "`~/m2/settings.xml`"
msgstr " `~/m2/settings.xml` "

#. type: Table
#: upstream/_guides/maven-tooling.adoc:895
#, fuzzy, no-wrap
msgid "Unless the custom settings file has been provided with the `-s` argument, this property can be used to point the resolver to a custom Maven settings file"
msgstr "除非自定义设置文件与 `-s` 参数一起提供，否则该属性可用于将解析器指向自定义Maven设置文件。"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:896
#, fuzzy, no-wrap
msgid "`maven.repo.local`"
msgstr " `maven.repo.local` "

#. type: Table
#: upstream/_guides/maven-tooling.adoc:897
#, fuzzy, no-wrap
msgid "`~/m2/repository`"
msgstr " `~/m2/repository` "

#. type: Table
#: upstream/_guides/maven-tooling.adoc:899
#, fuzzy, no-wrap
msgid "This property could be used to configure a custom local Maven repository directory, if it is different from the default one and the one specified in the `settings.xml`"
msgstr "该属性可用于配置自定义的本地Maven仓库目录，如果该目录不同于默认目录和在 `settings.xml` "

#. type: Table
#: upstream/_guides/maven-tooling.adoc:900
#, fuzzy, no-wrap
msgid "`maven.top-level-basedir`"
msgstr " `maven.top-level-basedir` "

#. type: Table
#: upstream/_guides/maven-tooling.adoc:901
#, fuzzy, no-wrap
msgid "none"
msgstr "没有"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:903
#, fuzzy, no-wrap
msgid "This property may be useful to help the Maven resolver identify the top-level Maven project in the workspace. By default, the Maven resolver will be discovering a project's workspace by navigating the parent-module POM relationship. However there could be project layouts that are using an aggregator module which isn't appearing as the parent for its modules. In this case, this property will help the Quarkus Maven resolver to properly discover the workspace."
msgstr "该属性对帮助Maven解析器识别工作空间中的顶级Maven项目可能很有用。默认情况下，Maven解析器将通过浏览父模块POM关系来发现项目的工作空间。然而，可能有的项目布局使用了聚合器模块，而该模块并不作为其模块的父级模块出现。在这种情况下，该属性将帮助Quarkus Maven解析器正确发现工作区。"

#. type: Table
#: upstream/_guides/maven-tooling.adoc:904
#, fuzzy, no-wrap
msgid "`quarkus.bootstrap.effective-model-builder`"
msgstr " `quarkus.bootstrap.effective-model-builder` "

#. type: Table
#: upstream/_guides/maven-tooling.adoc:905
#, fuzzy, no-wrap
msgid "`false`"
msgstr " `false` "

#. type: Table
#: upstream/_guides/maven-tooling.adoc:907
#, fuzzy, no-wrap
msgid "By default, the Quarkus Maven resolver is reading project's POMs directly when discovering the project's layout. While in most cases it works well enough and relatively fast, reading raw POMs has its limitation. E.g. if a POM includes modules in a profile, these modules will not be discovered. This system property enables project's layout discovery based on the effective POM models, that are properly interpolated, instead of the raw ones. The reason this option is not enabled by default is it may appear to be significantly more time consuming that could increase, e.g. CI testing times. Until there is a better approach found that could be used by default, projects that require it should enable this option."
msgstr "默认情况下，Quarkus Maven解析器在发现项目的布局时直接读取项目的POMs。虽然在大多数情况下，它的效果足够好，速度也相对较快，但读取原始POM有其局限性。例如，如果一个POM包含某个配置文件中的模块，这些模块将不会被发现。这个系统属性使项目的布局发现基于有效的POM模型，这些模型被适当地插值，而不是原始的。默认情况下不启用这个选项的原因是，它可能会显得非常耗时，可能会增加例如CI测试时间。在发现有更好的方法可以默认使用之前，需要的项目应该启用这个选项。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:910
#, fuzzy
msgid "These system properties above could be added to, e.g., a `surefire` and/or `failsafe` plugin configuration as"
msgstr "上述这些系统属性可以被添加到例如 `surefire` 和/或 `failsafe` 插件配置中，作为"

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:934
#, no-wrap
msgid ""
"<project>\n"
"  [...]\n"
"  <build>\n"
"    <plugins>\n"
"      <plugin>\n"
"        <groupId>org.apache.maven.plugins</groupId>\n"
"        <artifactId>maven-surefire-plugin</artifactId>\n"
"        <version>${surefire-plugin.version}</version>\n"
"        <configuration>\n"
"          <systemPropertyVariables>\n"
"            <maven.home>${maven.hom}</maven.home> <1>\n"
"            <maven.repo.local>${settings.localRepository}</maven.repo.local> <2>\n"
"            <maven.settings>${session.request.userSettingsFile.path}</maven.settings> <3>\n"
"            <maven.top-level-basedir>${session.topLevelProject.basedir.absolutePath}</maven.top-level-basedir> <4>\n"
"            <quarkus.bootstrap.effective-model-builder>true</quarkus.bootstrap.effective-model-builder> <5>\n"
"          </systemPropertyVariables>\n"
"        </configuration>\n"
"      </plugin>\n"
"    </plugins>\n"
"  </build>\n"
"  [...]\n"
"</project>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:937
#, fuzzy
msgid "Propagate `maven.home` system property set by the Maven CLI to the tests"
msgstr "将Maven CLI设置的 `maven.home` 系统属性传播给测试。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:938
#, fuzzy
msgid "Set the Maven local repository directory for the tests"
msgstr "为测试设置Maven本地资源库目录"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:939
#, fuzzy
msgid "Set the Maven settings file the tests"
msgstr "设置测试的Maven设置文件"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:940
#, fuzzy
msgid "Point to the top-level project directory for the tests"
msgstr "指向测试的最高级别项目目录"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:941
#, fuzzy
msgid "Enable effective POM-based project layout discovery"
msgstr "实现有效的基于POM的项目布局发现"

#. type: Title ====
#: upstream/_guides/maven-tooling.adoc:942
#, fuzzy, no-wrap
msgid "Top-level vs Multi-module project directory"
msgstr "顶层与多模块项目目录"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:946
#, fuzzy
msgid "In Maven there appears to be a notion of the top-level project (that is exposed as a project property `${session.topLevelProject.basedir.absolutePath}`)  and the multi-module project directory (that is available as property `${maven.multiModuleProjectDirectory}`). These directories might not always match!"
msgstr "在Maven中，似乎有一个顶层项目（作为项目属性 `${session.topLevelProject.basedir.absolutePath}` ）和多模块项目目录（作为属性 `${maven.multiModuleProjectDirectory}` ）的概念。这些目录可能并不总是匹配"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:948
#, fuzzy
msgid "`maven.multiModuleProjectDirectory` is meant to be consulted by the Maven code itself and not something to be relied upon by user code. So, if you find it useful, use it at your own risk!"
msgstr " `maven.multiModuleProjectDirectory` 是供Maven代码本身参考的，而不是供用户代码依赖的东西。因此，如果你觉得它有用，请自行承担使用风险!"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:952
#, fuzzy
msgid "The `${maven.multiModuleProjectDirectory}` will be resolved to the first directory that contains `.mvn` directory as its child going up the workspace file system tree starting from the current directory (or the one specified with the `-f` argument) from which the `mvn` command was launched. If the `.mvn` directory was not found, however, the `${maven.multiModuleProjectDirectory}` will be pointing to the directory from which the `mvn` command was launched (or the one targeted with the `-f` argument)."
msgstr " `${maven.multiModuleProjectDirectory}` 将被解析为包含 `.mvn` 目录的第一个目录，作为其子目录，从当前目录（或用 `-f` 参数指定的目录）开始，沿着工作区文件系统树向上移动， `mvn` 命令就是从这个目录启动的。然而，如果没有找到 `.mvn` 目录， `${maven.multiModuleProjectDirectory}` 将指向启动 `mvn` 命令的目录（或者用 `-f` 参数指定的目录）。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:955
#, fuzzy
msgid "The `${session.topLevelProject.basedir.absolutePath}` will be pointing either to the directory from which the `mvn` command was launched or to the directory targeted with the `-f` argument, if it was specified."
msgstr " `${session.topLevelProject.basedir.absolutePath}` 将指向启动 `mvn` 命令的目录，或者指向 `-f` 参数的目标目录（如果指定了该目录）。"

#. type: Title ==
#: upstream/_guides/maven-tooling.adoc:957
#, fuzzy, no-wrap
msgid "Quarkus project info"
msgstr "Quarkus项目信息"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:960
#: upstream/_guides/maven-tooling.adoc:1037
#, fuzzy
msgid "This goal was introduced in Quarkus Maven plugin 2.7.0.Final and can be used in projects that are based on Quarkus version 2.0.0.Final or later."
msgstr "这一目标在Quarkus Maven插件2.7.0.Final中引入，可用于基于Quarkus 2.0.0.Final或更高版本的项目。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:963
#, fuzzy
msgid "The Quarkus Maven plugin includes a goal called `info` (currently marked as 'experimental') that logs Quarkus-specific information about the project, such as: the imported Quarkus platform BOMs and the Quarkus extensions found among the project dependencies.  In a multi-module project `quarkus:info` will assume that the current module, in which it is executed, is the main module of the application."
msgstr "Quarkus Maven插件包括一个名为 `info` （目前标记为 \"实验\"）的目标，记录项目的Quarkus特定信息，例如：导入的Quarkus平台BOM和项目依赖中发现的Quarkus扩展。在一个多模块的项目中， `quarkus:info` 将假定当前执行的模块是应用程序的主模块。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:965
#, fuzzy
msgid "The report generated by `quarkus:info` is not currently including the Quarkus Maven plugin information, however it's planned to be added in the future releases."
msgstr " `quarkus:info` 生成的报告目前不包括Quarkus Maven插件信息，但计划在未来版本中加入。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:967
#, fuzzy
msgid "Here is an example `info` output for a simple project:"
msgstr "下面是一个简单项目的 `info` 输出的例子。"

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:994
#, no-wrap
msgid ""
"[aloubyansky@localhost code-with-quarkus]$ mvn quarkus:info\n"
"[INFO] Scanning for projects...\n"
"[INFO] \n"
"[INFO] ---------------------< org.acme:code-with-quarkus >---------------------\n"
"[INFO] Building code-with-quarkus 1.0.0-SNAPSHOT\n"
"[INFO] --------------------------------[ jar ]---------------------------------\n"
"[INFO] \n"
"[INFO] --- quarkus-maven-plugin:{quarkus-version}:info (default-cli) @ code-with-quarkus ---\n"
"[WARNING] quarkus:info goal is experimental, its options and output may change in future versions\n"
"[INFO] Quarkus platform BOMs: <1>\n"
"[INFO]   io.quarkus.platform:quarkus-bom:pom:{quarkus-version}\n"
"[INFO]   io.quarkus.platform:quarkus-kogito-bom:pom:{quarkus-version}\n"
"[INFO]   io.quarkus.platform:quarkus-camel-bom:pom:{quarkus-version}\n"
"[INFO] \n"
"[INFO] Extensions from io.quarkus.platform:quarkus-bom: <2>\n"
"[INFO]   io.quarkus:quarkus-resteasy-reactive\n"
"[INFO] \n"
"[INFO] Extensions from io.quarkus.platform:quarkus-kogito-bom: <3>\n"
"[INFO]   org.kie.kogito:kogito-quarkus-decisions\n"
"[INFO] \n"
"[INFO] Extensions from io.quarkus.platform:quarkus-camel-bom: <4>\n"
"[INFO]   org.apache.camel.quarkus:camel-quarkus-rabbitmq\n"
"[INFO] \n"
"[INFO] Extensions from registry.quarkus.io: <5>\n"
"[INFO]   io.quarkiverse.prettytime:quarkus-prettytime:0.2.1\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:997
#, fuzzy
msgid "Quarkus platform BOMs imported in the project (BOMs imported by parent POMs will also be reported)"
msgstr "项目中导入的Quarkus平台BOM（由上级POM导入的BOM也将被报告）。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:998
#, fuzzy
msgid "Direct Quarkus extension dependencies managed by the `quarkus-bom`"
msgstr "直接的Quarkus扩展依赖，由 `quarkus-bom` "

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:999
#, fuzzy
msgid "Direct Quarkus extension dependencies managed by the `quarkus-kogito-bom`"
msgstr "直接的Quarkus扩展依赖，由 `quarkus-kogito-bom` "

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1000
#, fuzzy
msgid "Direct Quarkus extension dependencies managed by the `quarkus-camel-bom`"
msgstr "直接的Quarkus扩展依赖，由 `quarkus-camel-bom` "

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1001
#, fuzzy
msgid "Direct Quarkus extensions dependencies that aren't managed by Quarkus BOMs but found in the Quarkus extension registry"
msgstr "没有被Quarkus BOMs管理但在Quarkus扩展注册表中发现的直接Quarkus扩展依赖关系"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1003
#, fuzzy
msgid "`quarkus:info` will also report Quarkus extensions that aren't found in the Quarkus extension registries if those are present among the project dependencies, indicating they have an 'unknown origin'."
msgstr " `quarkus:info` 也会报告那些在Quarkus扩展注册表中找不到的Quarkus扩展，如果这些扩展出现在项目依赖中，表明它们有一个 \"未知来源\"。"

#. type: Title ===
#: upstream/_guides/maven-tooling.adoc:1005
#, fuzzy, no-wrap
msgid "Highlighing misaligned versions"
msgstr "错位的版本高高在上"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1008
#, fuzzy
msgid "`quarkus:info` will also highlight basic Quarkus dependency version misalignments, in case they are detected. For example, if we modify the project mentioned above by removing the `kogito-quarkus-decisions` extension from the dependencies and adding a `2.6.3.Final` `<version>` element to the `quarkus-resteasy-reactive` dependency that is managed by the `quarkus-bom` and then run `quarkus:info` again, we'll see something like:"
msgstr " `quarkus:info` 也会突出显示基本的 Quarkus 依赖关系版本错位，以防被发现。例如，如果我们修改上面提到的项目，从依赖关系中删除 扩展，在 依赖关系中添加一个  元素，由 管理，然后再次运行 ，我们会看到类似的情况。 `kogito-quarkus-decisions` `quarkus-resteasy-reactive` `2.6.3.Final` `<version>` `quarkus-bom` `quarkus:info` "

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:1028
#, no-wrap
msgid ""
"[INFO] --- quarkus-maven-plugin:{quarkus-version}:info (default-cli) @ code-with-quarkus ---\n"
"[WARNING] quarkus:info goal is experimental, its options and output may change in future versions\n"
"[INFO] Quarkus platform BOMs:\n"
"[INFO]   io.quarkus.platform:quarkus-bom:pom:{quarkus-version}\n"
"[INFO]   io.quarkus.platform:quarkus-kogito-bom:pom:{quarkus-version} | unnecessary <1>\n"
"[INFO]   io.quarkus.platform:quarkus-camel-bom:pom:{quarkus-version}\n"
"[INFO] \n"
"[INFO] Extensions from io.quarkus.platform:quarkus-bom:\n"
"[INFO]   io.quarkus:quarkus-resteasy-reactive:2.6.3.Final | misaligned <2>\n"
"[INFO] \n"
"[INFO] Extensions from io.quarkus.platform:quarkus-camel-bom:\n"
"[INFO]   org.apache.camel.quarkus:camel-quarkus-rabbitmq\n"
"[INFO] \n"
"[INFO] Extensions from registry.quarkus.io:\n"
"[INFO]   io.quarkiverse.prettytime:quarkus-prettytime:0.2.1\n"
"[INFO]\n"
"[WARNING] Non-recommended Quarkus platform BOM and/or extension versions were found. For more details, please, execute 'mvn quarkus:update -Drectify'\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1031
#, fuzzy
msgid "The `quarkus-kogito-bom` import is now reported as 'unnecessary' since none of the Quarkus extensions it includes are found among the project dependencies"
msgstr " `quarkus-kogito-bom` 的导入现在被报告为 \"不必要\"，因为它所包含的 Quarkus 扩展在项目依赖中没有被发现。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1032
#, fuzzy
msgid "The version `2.6.3.Final` of the `quarkus-resteasy-reactive` is now reported as being misaligned with the version managed by the Quarkus platform BOM imported in the project, which is {quarkus-version}"
msgstr " `2.6.3.Final` `quarkus-resteasy-reactive` 的版本现在被报告为与项目中导入的Quarkus平台BOM所管理的版本不一致，即{quarkus-version}。"

#. type: Title ==
#: upstream/_guides/maven-tooling.adoc:1034
#, fuzzy, no-wrap
msgid "Quarkus project update"
msgstr "Quarkus项目更新"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1039
#, fuzzy
msgid "The `quarkus:update` goal (currently marked as 'experimental') provided by the Quarkus Maven plugin can be used to check whether there are Quarkus-related updates available for a project, such as: new releases of the relevant Quarkus platform BOMs and non-platform Quarkus extensions present in the project. In a multi-module project the `update` goal is meant to be executed from the main Quarkus application module."
msgstr "Quarkus Maven插件提供的 `quarkus:update` 目标（目前标记为 \"实验性\"）可用于检查项目是否有Quarkus相关的更新，例如：相关Quarkus平台BOM的新版本以及项目中存在的非平台Quarkus扩展。在一个多模块项目中， `update` 目标是要从Quarkus的主要应用模块中执行。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1041
#, fuzzy
msgid "At this point, the `quarkus:update` goal does not actually apply the recommended updates but simply reports what they are and how to apply them manually."
msgstr "在这一点上， `quarkus:update` 目标并不实际应用推荐的更新，而只是报告它们是什么以及如何手动应用它们。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1043
#, fuzzy
msgid "The Quarkus Maven plugin version isn't currently included in the update report, however it's planned to be added in the future releases."
msgstr "Quarkus Maven插件的版本目前还没有包含在更新报告中，但计划在未来的版本中加入。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1045
#, fuzzy
msgid "The way `quarkus:update` works, first, all the direct Quarkus extension dependencies of the project are collected (those that are managed by the Quarkus platform BOMs and those that aren't but found in the Quarkus extension registries). Then the configured Quarkus extension registries (typically the `registry.quarkus.io`) will be queried for the latest recommended/supported Quarkus platform versions and non-platform Quarkus extensions compatible with them. The algorithm will then select the latest compatible combination of all the extensions found in the project, assuming such a combination actually exists. Otherwise, no updates will be suggested."
msgstr " `quarkus:update` 的工作方式，首先，项目的所有直接的Quarkus扩展依赖被收集起来（那些由Quarkus平台BOMs管理的，以及那些没有但在Quarkus扩展注册表中发现的）。然后，配置的Quarkus扩展注册表（通常是 `registry.quarkus.io` ）将被查询最新的推荐/支持的Quarkus平台版本和与之兼容的非平台Quarkus扩展。然后，该算法将选择项目中发现的所有扩展的最新兼容组合，假设这种组合确实存在。否则，将不建议更新。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1047
#, fuzzy
msgid "Assuming we have a project including Kogito, Camel and core Quarkus extensions available in the Quarkus platform based on Quarkus `2.7.1.Final`, the output of the `quarkus:update` would look like:"
msgstr "假设我们有一个包括Kogito、Camel和Quarkus平台中可用的核心Quarkus扩展的项目，基于Quarkus `2.7.1.Final` ， `quarkus:update` 的输出会是这样。"

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:1063
#, no-wrap
msgid ""
"[aloubyansky@localhost code-with-quarkus]$ mvn quarkus:update\n"
"[INFO] Scanning for projects...\n"
"[INFO] \n"
"[INFO] ---------------------< org.acme:code-with-quarkus >---------------------\n"
"[INFO] Building code-with-quarkus 1.0.0-SNAPSHOT\n"
"[INFO] --------------------------------[ jar ]---------------------------------\n"
"[INFO] \n"
"[INFO] --- quarkus-maven-plugin:{quarkus-version}:update (default-cli) @ code-with-quarkus ---\n"
"[WARNING] quarkus:update goal is experimental, its options and output might change in future versions\n"
"[INFO] \n"
"[INFO] Recommended Quarkus platform BOM updates: <1>\n"
"[INFO] Update: io.quarkus.platform:quarkus-bom:pom:2.7.1.Final -> {quarkus-version}\n"
"[INFO] Update: io.quarkus.platform:quarkus-kogito-bom:pom:2.7.1.Final -> {quarkus-version}\n"
"[INFO] Update: io.quarkus.platform:quarkus-camel-bom:pom:2.7.1.Final -> {quarkus-version}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1066
#, fuzzy
msgid "A list of currently recommended Quarkus platform BOM updates"
msgstr "目前推荐的Quarkus平台BOM更新列表"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1068
#, fuzzy
msgid "Typically, a single project property will be used to manage all the Quarkus platform BOMs but the implementation isn't currently smart enough to point that out and will report updates for each BOM individually."
msgstr "通常情况下，一个单一的项目属性将被用来管理所有Quarkus平台的BOM，但目前的实现还没有智能到指出这一点，并将单独报告每个BOM的更新。"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1070
#, fuzzy
msgid "If we modify the project to remove all the Kogito extensions from the project, change the version of the `quarkus-resteasy-reactive` extension to `2.6.3.Final` and downgrade `quarkus-prettytime` which is not included in the Quarkus platform BOMs to `0.2.0`, `quarkus:update` will report something like:"
msgstr "如果我们修改项目，从项目中删除所有的Kogito扩展，将 `quarkus-resteasy-reactive` 扩展的版本改为 `2.6.3.Final` ，并将不包括在Quarkus平台BOM中的 `quarkus-prettytime` 降级为 `0.2.0` ， `quarkus:update` 会报告类似的情况。"

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:1083
#, no-wrap
msgid ""
"[INFO] Recommended Quarkus platform BOM updates: <1>\n"
"[INFO] Update: io.quarkus.platform:quarkus-bom:pom:2.7.1.Final -> {quarkus-version}\n"
"[INFO] Update: io.quarkus.platform:quarkus-camel-bom:pom:2.7.1.Final -> {quarkus-version}\n"
"[INFO] Remove: io.quarkus.platform:quarkus-kogito-bom:pom:2.7.1.Final <2>\n"
"[INFO] \n"
"[INFO] Extensions from io.quarkus.platform:quarkus-bom:\n"
"[INFO] Update: io.quarkus:quarkus-resteasy-reactive:2.6.3.Final -> remove version (managed) <3>\n"
"[INFO] \n"
"[INFO] Extensions from registry.quarkus.io:\n"
"[INFO] Update: io.quarkiverse.prettytime:quarkus-prettytime:0.2.0 -> 0.2.1 <4>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1086
#, fuzzy
msgid "A list of the currently recommended Quarkus platform BOM updates for the project"
msgstr "目前推荐的Quarkus平台项目的BOM更新列表"

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1087
msgid "Given that the project does not include any Kogito extensions, the BOM import is recommended to be removed"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1088
msgid "An outdated version of the `quarkus-resteasy-reactive` is recommended to be removed in favor of the one managed by the `quarkus-bom`"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1089
msgid "The latest compatible version of the `quarkus-prettytime` extension"
msgstr ""

#. type: Title ===
#: upstream/_guides/maven-tooling.adoc:1090
#, no-wrap
msgid "Quarkus project rectify"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1093
msgid "As was mentioned above, `quarkus:info`, besides reporting Quarkus platform and extension versions, performs a quick version alignment check, to make sure the extension versions used in the project are compatible with the imported Quarkus platform BOMs. If misalignments are detected, the following warning message will be logged:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/maven-tooling.adoc:1097
#, no-wrap
msgid "[WARNING] Non-recommended Quarkus platform BOM and/or extension versions were found. For more details, please, execute 'mvn quarkus:update -Drectify'\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/maven-tooling.adoc:1099
msgid "When the `rectify` option is enabled, `quarkus:update`, instead of suggesting the latest recommended Quarkus version updates, will log update instructions to simply align the extension dependency versions found in the project with the currently imported Quarkus platform BOMs."
msgstr ""
