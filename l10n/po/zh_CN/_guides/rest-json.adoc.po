# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/rest-json.adoc:6
#, fuzzy, no-wrap
msgid "Writing JSON REST Services"
msgstr "编写JSON REST服务"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:11
#, fuzzy
msgid "JSON is now the _lingua franca_ between microservices."
msgstr "JSON现在是微服务之间的 _通用_ 语言。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:13
#, fuzzy
msgid "In this guide, we see how you can get your REST services to consume and produce JSON payloads."
msgstr "在本指南中，我们看到如何让你的REST服务消费和产生JSON有效载荷。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:15
#, fuzzy
msgid "there is another guide if you need a xref:rest-client-reactive.adoc[REST client] (including support for JSON)."
msgstr "如果你需要一个 link:rest-client-reactive.html[REST客户端] （包括对JSON的支持），还有一个指南。"

#. type: delimited block =
#: upstream/_guides/rest-json.adoc:20
#, fuzzy
msgid "This is an introduction to writing JSON REST services with Quarkus.  A more detailed guide about RESTEasy Reactive is available xref:resteasy-reactive.adoc[here]."
msgstr "这是一个关于用Quarkus编写JSON REST服务的介绍。 link:resteasy-reactive.html[这里] 有关于RESTEasy Reactive的更详细的指南。"

#. type: Title ==
#: upstream/_guides/rest-json.adoc:22
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: upstream/_guides/rest-json.adoc:26
#, fuzzy, no-wrap
msgid "Architecture"
msgstr "建筑学"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:29
#, fuzzy
msgid "The application built in this guide is quite simple: the user can add elements in a list using a form and the list is updated."
msgstr "本指南中构建的应用程序非常简单：用户可以使用一个表单在列表中添加元素，然后列表被更新。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:31
#, fuzzy
msgid "All the information between the browser and the server are formatted as JSON."
msgstr "浏览器和服务器之间的所有信息都被格式化为JSON。"

#. type: Title ==
#: upstream/_guides/rest-json.adoc:32
#, fuzzy, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:36
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议你按照下面几节的说明，一步一步地创建应用程序。然而，你可以直接进入已完成的例子。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:38
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库。 `git clone {quickstarts-clone-url}` ，或者下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:40
#, fuzzy
msgid "The solution is located in the `rest-json-quickstart` {quickstarts-tree-url}/rest-json-quickstart[directory]."
msgstr "该解决方案位于 `rest-json-quickstart` {quickstarts-tree-url}/rest-json-quickstart[目录]中。"

#. type: Title ==
#: upstream/_guides/rest-json.adoc:41
#, fuzzy, no-wrap
msgid "Creating the Maven project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:44
#, fuzzy
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。用以下命令创建一个新项目。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:51
#, fuzzy
msgid "This command generates a new project importing the RESTEasy Reactive/JAX-RS and https://github.com/FasterXML/jackson[Jackson] extensions, and in particular adds the following dependency:"
msgstr "该命令生成了一个导入RESTEasy Reactive/JAX-RS和 link:https://github.com/FasterXML/jackson[Jackson] 扩展的新项目，特别是添加了以下依赖项。"

#. type: Block title
#: upstream/_guides/rest-json.adoc:53 upstream/_guides/rest-json.adoc:82
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:59
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-reactive-jackson</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/rest-json.adoc:62 upstream/_guides/rest-json.adoc:91
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:65
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-resteasy-reactive-jackson\")\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/rest-json.adoc:70
#, fuzzy
msgid "To improve user experience, Quarkus registers the three Jackson https://github.com/FasterXML/jackson-modules-java8[Java 8 modules] so you don't need to do it manually."
msgstr "为了提高用户体验，Quarkus注册了三个Jackson link:https://github.com/FasterXML/jackson-modules-java8[Java 8模块] ，所以你不需要手动操作。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:73
#, fuzzy
msgid "Quarkus also supports https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] so, if you prefer JSON-B over Jackson, you can create a project relying on the RESTEasy Reactive JSON-B extension instead:"
msgstr "Quarkus也支持 link:https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] ，因此，如果你喜欢JSON-B而不是Jackson，你可以创建一个依靠RESTEasy Reactive JSON-B扩展的项目。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:80
#, fuzzy
msgid "This command generates a new project importing the RESTEasy Reactive/JAX-RS and https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] extensions, and in particular adds the following dependency:"
msgstr "该命令生成了一个导入RESTEasy Reactive/JAX-RS和 link:https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] 扩展的新项目，特别是添加了以下依赖。"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:88
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-reactive-jsonb</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:94
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-resteasy-reactive-jsonb\")\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/rest-json.adoc:99
#, fuzzy
msgid "While named \"reactive\", RESTEasy Reactive supports equally well both traditional blocking patterns and reactive patterns."
msgstr "虽然名为 \"反应式\"，但RESTEasy Reactive同样支持传统的阻塞模式和反应式模式。"

#. type: delimited block =
#: upstream/_guides/rest-json.adoc:101
#, fuzzy
msgid "For more information about RESTEasy Reactive, please refer to the xref:resteasy-reactive.adoc[dedicated guide]."
msgstr "有关RESTEasy Reactive的更多信息，请参考 link:resteasy-reactive.html[专用指南] 。"

#. type: Title ==
#: upstream/_guides/rest-json.adoc:103
#, fuzzy, no-wrap
msgid "Creating your first JSON REST service"
msgstr "创建你的第一个JSON REST服务"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:106
#, fuzzy
msgid "In this example, we will create an application to manage a list of fruits."
msgstr "在这个例子中，我们将创建一个应用程序来管理一个水果列表。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:108
#, fuzzy
msgid "First, let's create the `Fruit` bean as follows:"
msgstr "首先，让我们创建 `Fruit` bean，如下所示。"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:112 upstream/_guides/rest-json.adoc:135
#: upstream/_guides/rest-json.adoc:387 upstream/_guides/rest-json.adoc:410
#, no-wrap
msgid "package org.acme.rest.json;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:114
#, no-wrap
msgid "public class Fruit {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:117 upstream/_guides/rest-json.adoc:392
#, no-wrap
msgid ""
"    public String name;\n"
"    public String description;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:120
#, no-wrap
msgid ""
"    public Fruit() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:126
#, no-wrap
msgid ""
"    public Fruit(String name, String description) {\n"
"        this.name = name;\n"
"        this.description = description;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:129
#, fuzzy
msgid "Nothing fancy. One important thing to note is that having a default constructor is required by the JSON serialization layer."
msgstr "没有什么花哨的。需要注意的一件事是，拥有一个默认的构造函数是JSON序列化层的要求。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:131
#, fuzzy
msgid "Now, create the `org.acme.rest.json.FruitResource` class as follows:"
msgstr "现在，创建 `org.acme.rest.json.FruitResource` 类，如下所示。"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:139
#, no-wrap
msgid ""
"import java.util.Collections;\n"
"import java.util.LinkedHashMap;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:144
#, no-wrap
msgid ""
"import javax.ws.rs.DELETE;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:147
#, no-wrap
msgid ""
"@Path(\"/fruits\")\n"
"public class FruitResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:149
#, no-wrap
msgid "    private Set<Fruit> fruits = Collections.newSetFromMap(Collections.synchronizedMap(new LinkedHashMap<>()));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:154
#, no-wrap
msgid ""
"    public FruitResource() {\n"
"        fruits.add(new Fruit(\"Apple\", \"Winter fruit\"));\n"
"        fruits.add(new Fruit(\"Pineapple\", \"Tropical fruit\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:159
#, no-wrap
msgid ""
"    @GET\n"
"    public Set<Fruit> list() {\n"
"        return fruits;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:165
#, no-wrap
msgid ""
"    @POST\n"
"    public Set<Fruit> add(Fruit fruit) {\n"
"        fruits.add(fruit);\n"
"        return fruits;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:172
#, no-wrap
msgid ""
"    @DELETE\n"
"    public Set<Fruit> delete(Fruit fruit) {\n"
"        fruits.removeIf(existingFruit -> existingFruit.name.contentEquals(fruit.name));\n"
"        return fruits;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:175
#, fuzzy
msgid "The implementation is pretty straightforward and you just need to define your endpoints using the JAX-RS annotations."
msgstr "实现起来相当简单，你只需要使用JAX-RS注解来定义你的端点。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:178
#, fuzzy
msgid "The `Fruit` objects will be automatically serialized/deserialized by https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] or https://github.com/FasterXML/jackson[Jackson], depending on the extension you chose when initializing the project."
msgstr " `Fruit` 对象将被 link:https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] 或 link:https://github.com/FasterXML/jackson[Jackson] 自动序列化/反序列化，这取决于你在初始化项目时选择的扩展。"

#. type: delimited block =
#: upstream/_guides/rest-json.adoc:185
#, fuzzy
msgid "When a JSON extension is installed such as `quarkus-resteasy-reactive-jackson` or `quarkus-resteasy-reactive-jsonb`, Quarkus will use the `application/json` media type by default for most return values, unless the media type is explicitly set via `@Produces` or `@Consumes` annotations (there are some exceptions for well known types, such as `String` and `File`, which default to `text/plain` and `application/octet-stream` respectively)."
msgstr "当安装了一个JSON扩展，如 `quarkus-resteasy-reactive-jackson` 或 `quarkus-resteasy-reactive-jsonb` ，Quarkus将对大多数返回值默认使用 `application/json` 媒体类型，除非通过 `@Produces` 或 `@Consumes` 注释明确设置媒体类型（对于众所周知的类型有一些例外，如 `String` 和 `File` ，它们分别默认为 `text/plain` 和 `application/octet-stream` ）。"

#. type: Title ===
#: upstream/_guides/rest-json.adoc:188
#, fuzzy, no-wrap
msgid "Configuring JSON support"
msgstr "配置JSON支持"

#. type: Title ====
#: upstream/_guides/rest-json.adoc:190
#, fuzzy, no-wrap
msgid "Jackson"
msgstr "杰克逊"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:194
#, fuzzy
msgid "In Quarkus, the default Jackson `ObjectMapper` obtained via CDI (and consumed by the Quarkus extensions) is configured to ignore unknown properties (by disabling the `DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES` feature)."
msgstr "在Quarkus中，通过CDI获得的默认Jackson `ObjectMapper` （并由Quarkus扩展消耗）被配置为忽略未知属性（通过禁用 `DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES` 功能）。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:197
#, fuzzy
msgid "You can restore the default behavior of Jackson by setting `quarkus.jackson.fail-on-unknown-properties=true` in your `application.properties` or on a per class basis via `@JsonIgnoreProperties(ignoreUnknown = false)`."
msgstr "你可以通过在你的 `application.properties` ，或者通过 `@JsonIgnoreProperties(ignoreUnknown = false)` ，在每个班级的基础上设置 `quarkus.jackson.fail-on-unknown-properties=true` ，恢复杰克逊的默认行为。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:200
#, fuzzy
msgid "Furthermore, the `ObjectMapper` is configured to format dates and time in ISO-8601 (by disabling the `SerializationFeature.WRITE_DATES_AS_TIMESTAMPS` feature)."
msgstr "此外， `ObjectMapper` 被配置为ISO-8601的日期和时间格式（通过禁用 `SerializationFeature.WRITE_DATES_AS_TIMESTAMPS` 功能）。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:204
#, fuzzy
msgid "The default behaviour of Jackson can be restored by setting `quarkus.jackson.write-dates-as-timestamps=true` in your `application.properties`. If you want to change the format for a single field, you can use the `@JsonFormat` annotation."
msgstr "Jackson的默认行为可以通过在你的 `application.properties` 中设置 `quarkus.jackson.write-dates-as-timestamps=true` 来恢复。如果你想改变单个字段的格式，你可以使用 `@JsonFormat` 注释。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:208
#, fuzzy
msgid "Also, Quarkus makes it very easy to configure various Jackson settings via CDI beans.  The simplest (and suggested) approach is to define a CDI bean of type `io.quarkus.jackson.ObjectMapperCustomizer` inside of which any Jackson configuration can be applied."
msgstr "另外，Quarkus使通过CDI豆来配置各种Jackson设置变得非常容易。最简单的（也是建议的）方法是定义一个类型为 `io.quarkus.jackson.ObjectMapperCustomizer` 的CDI Bean，在其中可以应用任何Jackson配置。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:210
#, fuzzy
msgid "An example where a custom module needs to be registered would look like so:"
msgstr "一个需要注册自定义模块的例子是这样的。"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:216
#, no-wrap
msgid ""
"import com.fasterxml.jackson.databind.ObjectMapper;\n"
"import io.quarkus.jackson.ObjectMapperCustomizer;\n"
"import javax.inject.Singleton;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:219
#, no-wrap
msgid ""
"@Singleton\n"
"public class RegisterCustomModuleCustomizer implements ObjectMapperCustomizer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:224
#, no-wrap
msgid ""
"    public void customize(ObjectMapper mapper) {\n"
"        mapper.registerModule(new CustomModule());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:229
#, fuzzy
msgid "Users can even provide their own `ObjectMapper` bean if they so choose.  If this is done, it is very important to manually inject and apply all `io.quarkus.jackson.ObjectMapperCustomizer` beans in the CDI producer that produces `ObjectMapper`.  Failure to do so will prevent Jackson specific customizations provided by various extensions from being applied."
msgstr "如果用户选择的话，他们甚至可以提供自己的 `ObjectMapper` bean。如果这样做，在产生 `ObjectMapper` 的CDI生产者中，手动注入和应用所有 `io.quarkus.jackson.ObjectMapperCustomizer` Bean是非常重要的。如果不这样做，就会阻止各种扩展所提供的Jackson特定的自定义功能被应用。"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:234
#, no-wrap
msgid ""
"import com.fasterxml.jackson.databind.ObjectMapper;\n"
"import io.quarkus.jackson.ObjectMapperCustomizer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:237
#, no-wrap
msgid ""
"import javax.enterprise.inject.Instance;\n"
"import javax.inject.Singleton;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:239
#, no-wrap
msgid "public class CustomObjectMapper {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:244
#, no-wrap
msgid ""
"    // Replaces the CDI producer for ObjectMapper built into Quarkus\n"
"    @Singleton\n"
"    ObjectMapper objectMapper(Instance<ObjectMapperCustomizer> customizers) {\n"
"        ObjectMapper mapper = myObjectMapper(); // Custom `ObjectMapper`\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:249
#, no-wrap
msgid ""
"        // Apply all ObjectMapperCustomizer beans (incl. Quarkus)\n"
"        for (ObjectMapperCustomizer customizer : customizers) {\n"
"            customizer.customize(mapper);\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:253
#, no-wrap
msgid ""
"        return mapper;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/rest-json.adoc:255
#, fuzzy, no-wrap
msgid "JSON-B"
msgstr "JSON-B"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:258
#, fuzzy
msgid "As stated above, Quarkus provides the option of using JSON-B instead of Jackson via the use of the `quarkus-resteasy-jsonb` extension."
msgstr "如上所述，Quarkus通过使用 `quarkus-resteasy-jsonb` 扩展提供了使用JSON-B而不是Jackson的选项。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:260
#, fuzzy
msgid "Following the same approach as described in the previous section, JSON-B can be configured using a `io.quarkus.jsonb.JsonbConfigCustomizer` bean."
msgstr "按照上一节所述的相同方法，JSON-B可以使用 `io.quarkus.jsonb.JsonbConfigCustomizer` bean进行配置。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:262
#, fuzzy
msgid "If for example a custom serializer named `FooSerializer` for type `com.example.Foo` needs to be registered with JSON-B, the addition of a bean like the following would suffice:"
msgstr " `com.example.Foo` 例如，如果一个名为 `FooSerializer` 的类型的自定义序列化器需要在JSON-B中注册，添加一个像下面这样的Bean就足够了。"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:269
#, no-wrap
msgid ""
"import io.quarkus.jsonb.JsonbConfigCustomizer;\n"
"import javax.inject.Singleton;\n"
"import javax.json.bind.JsonbConfig;\n"
"import javax.json.bind.serializer.JsonbSerializer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:272
#, no-wrap
msgid ""
"@Singleton\n"
"public class FooSerializerRegistrationCustomizer implements JsonbConfigCustomizer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:277
#, no-wrap
msgid ""
"    public void customize(JsonbConfig config) {\n"
"        config.withSerializers(new FooSerializer());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:282
#, fuzzy
msgid "A more advanced option would be to directly provide a bean of `javax.json.bind.JsonbConfig` (with a `Dependent` scope) or in the extreme case to provide a bean of type `javax.json.bind.Jsonb` (with a `Singleton` scope).  If the latter approach is leveraged it is very important to manually inject and apply all `io.quarkus.jsonb.JsonbConfigCustomizer` beans in the CDI producer that produces `javax.json.bind.Jsonb`.  Failure to do so will prevent JSON-B specific customizations provided by various extensions from being applied."
msgstr "一个更高级的选择是直接提供一个 `javax.json.bind.JsonbConfig` （有一个 `Dependent` 范围）的bean，或者在极端情况下，提供一个 `javax.json.bind.Jsonb` （有一个 `Singleton` 范围）的bean。如果采用后一种方法，那么在产生 `javax.json.bind.Jsonb` 的CDI生产者中手动注入和应用所有 `io.quarkus.jsonb.JsonbConfigCustomizer` Bean是非常重要的。如果不这样做，就会阻止由各种扩展提供的JSON-B特定的自定义功能被应用。"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:286
#, no-wrap
msgid "import io.quarkus.jsonb.JsonbConfigCustomizer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:290
#, no-wrap
msgid ""
"import javax.enterprise.context.Dependent;\n"
"import javax.enterprise.inject.Instance;\n"
"import javax.json.bind.JsonbConfig;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:292
#, no-wrap
msgid "public class CustomJsonbConfig {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:297
#, no-wrap
msgid ""
"    // Replaces the CDI producer for JsonbConfig built into Quarkus\n"
"    @Dependent\n"
"    JsonbConfig jsonConfig(Instance<JsonbConfigCustomizer> customizers) {\n"
"        JsonbConfig config = myJsonbConfig(); // Custom `JsonbConfig`\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:302
#, no-wrap
msgid ""
"        // Apply all JsonbConfigCustomizer beans (incl. Quarkus)\n"
"        for (JsonbConfigCustomizer customizer : customizers) {\n"
"            customizer.customize(config);\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:306
#, no-wrap
msgid ""
"        return config;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/rest-json.adoc:309
#, fuzzy, no-wrap
msgid "Creating a frontend"
msgstr "创建一个前台"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:314
#, fuzzy
msgid "Now let's add a simple web page to interact with our `FruitResource`.  Quarkus automatically serves static resources located under the `META-INF/resources` directory.  In the `src/main/resources/META-INF/resources` directory, add a `fruits.html` file with the content from this {quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/fruits.html[fruits.html] file in it."
msgstr "现在让我们添加一个简单的网页来与我们的 `FruitResource` 。Quarkus自动提供位于 `META-INF/resources` 目录下的静态资源。在 `src/main/resources/META-INF/resources` 目录中，添加一个 `fruits.html` 文件，其中包含这个 {quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/fruits.html[水果.html] 文件的内容。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:316
#, fuzzy
msgid "You can now interact with your REST service:"
msgstr "现在你可以与你的REST服务进行交互。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:320
#, fuzzy
msgid "start Quarkus with:"
msgstr "开始Quarkus与。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:323
#, fuzzy
msgid "open a browser to `http://localhost:8080/fruits.html`"
msgstr "打开浏览器以 `<a href=\"http://localhost:8080/fruits.html\" class=\"bare\">http://localhost:8080/fruits.html</a>` "

#. type: Plain text
#: upstream/_guides/rest-json.adoc:324
#, fuzzy
msgid "add new fruits to the list via the form"
msgstr "通过表格添加新的水果到列表中"

#. type: Title ==
#: upstream/_guides/rest-json.adoc:327
#, fuzzy, no-wrap
msgid "Building a native executable"
msgstr "构建一个本地可执行文件"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:330
#, fuzzy
msgid "You can build a native executable with the usual command:"
msgstr "你可以用通常的命令建立一个本地可执行文件。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:334
#, fuzzy
msgid "Running it is as simple as executing `./target/rest-json-quickstart-1.0.0-SNAPSHOT-runner`."
msgstr "运行它就像执行 `./target/rest-json-quickstart-1.0.0-SNAPSHOT-runner` 一样简单。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:336
#, fuzzy
msgid "You can then point your browser to `http://localhost:8080/fruits.html` and use your application."
msgstr "然后你可以将你的浏览器指向 `<a href=\"http://localhost:8080/fruits.html\" class=\"bare\">http://localhost:8080/fruits.html</a>` 并使用你的应用程序。"

#. type: Title ==
#: upstream/_guides/rest-json.adoc:337
#, fuzzy, no-wrap
msgid "About serialization"
msgstr "关于序列化"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:340
#, fuzzy
msgid "JSON serialization libraries use Java reflection to get the properties of an object and serialize them."
msgstr "JSON序列化库使用Java反射来获取一个对象的属性并将其序列化。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:344
#, fuzzy
msgid "When using native executables with GraalVM, all classes that will be used with reflection need to be registered.  The good news is that Quarkus does that work for you most of the time.  So far, we haven't registered any class, not even `Fruit`, for reflection usage and everything is working fine."
msgstr "当使用GraalVM的本地可执行文件时，所有将被用于反射的类都需要被注册。好消息是，Quarkus在大多数时候都会为你做这项工作。到目前为止，我们还没有注册任何类，甚至没有 `Fruit` ，用于反射，一切都很正常。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:347
#, fuzzy
msgid "Quarkus performs some magic when it is capable of inferring the serialized types from the REST methods.  When you have the following REST method, Quarkus determines that `Fruit` will be serialized:"
msgstr "当Quarkus能够从REST方法中推断出序列化的类型时，它就会施展一些魔法。当你有以下的REST方法时，Quarkus确定 `Fruit` ，将被序列化。"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:354
#, no-wrap
msgid ""
"@GET\n"
"public List<Fruit> list() {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:358
#, fuzzy
msgid "Quarkus does that for you automatically by analyzing the REST methods at build time and that's why we didn't need any reflection registration in the first part of this guide."
msgstr "Quarkus通过在构建时分析REST方法自动为你做这些，这就是为什么我们在本指南的第一部分不需要任何反射注册。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:361
#, fuzzy
msgid "Another common pattern in the JAX-RS world is to use the `Response` object.  `Response` comes with some nice perks:"
msgstr "JAX-RS世界中另一个常见的模式是使用 `Response` 对象。 `Response` ，有一些很好的好处。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:363
#, fuzzy
msgid "you can return different entity types depending on what happens in your method (a `Legume` or an `Error` for instance);"
msgstr "你可以根据你的方法中发生的情况，返回不同的实体类型（例如，一个 `Legume` 或一个 `Error` ）。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:364
#, fuzzy
msgid "you can set the attributes of the `Response` (the status comes to mind in the case of an error)."
msgstr "你可以设置 `Response` 的属性（在出现错误的情况下，会想到状态）。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:366
#, fuzzy
msgid "Your REST method then looks like this:"
msgstr "然后你的REST方法看起来像这样。"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:373
#, no-wrap
msgid ""
"@GET\n"
"public Response list() {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:377
#, fuzzy
msgid "It is not possible for Quarkus to determine at build time the type included in the `Response` as the information is not available.  In this case, Quarkus won't be able to automatically register for reflection the required classes."
msgstr "Quarkus不可能在构建时确定 `Response` 中包含的类型，因为该信息不可用。在这种情况下，Quarkus将无法自动注册反映所需的课程。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:379
#, fuzzy
msgid "This leads us to our next section."
msgstr "这将我们引向下一节。"

#. type: Title ==
#: upstream/_guides/rest-json.adoc:380
#, fuzzy, no-wrap
msgid "Using Response"
msgstr "使用回应"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:383
#, fuzzy
msgid "Let's create the `Legume` class which will be serialized as JSON, following the same model as for our `Fruit` class:"
msgstr "让我们创建 `Legume` 类，它将被序列化为JSON，遵循与我们的 `Fruit` 类相同的模式。"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:389
#, no-wrap
msgid "public class Legume {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:395
#, no-wrap
msgid ""
"    public Legume() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:401
#, no-wrap
msgid ""
"    public Legume(String name, String description) {\n"
"        this.name = name;\n"
"        this.description = description;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:404
#, fuzzy
msgid "Now let's create a `LegumeResource` REST service with only one method which returns the list of legumes."
msgstr "现在让我们创建一个 `LegumeResource` REST服务，只有一个方法，返回豆类的列表。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:406
#, fuzzy
msgid "This method returns a `Response` and not a list of `Legume`."
msgstr "该方法返回一个 `Response` ，而不是一个 `Legume` 的列表。"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:414
#, no-wrap
msgid ""
"import java.util.Collections;\n"
"import java.util.LinkedHashSet;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:421
#, no-wrap
msgid ""
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import javax.ws.rs.core.Response;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:426
#, no-wrap
msgid ""
"@Path(\"/legumes\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public class LegumeResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:428
#, no-wrap
msgid "    private Set<Legume> legumes = Collections.synchronizedSet(new LinkedHashSet<>());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:433
#, no-wrap
msgid ""
"    public LegumeResource() {\n"
"        legumes.add(new Legume(\"Carrot\", \"Root vegetable, usually orange\"));\n"
"        legumes.add(new Legume(\"Zucchini\", \"Summer squash\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:439
#, no-wrap
msgid ""
"    @GET\n"
"    public Response list() {\n"
"        return Response.ok(legumes).build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:444
#, fuzzy
msgid "Now let's add a simple web page to display our list of legumes.  In the `src/main/resources/META-INF/resources` directory, add a `legumes.html` file with the content from this {quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/legumes.html[legumes.html] file in it."
msgstr "现在让我们添加一个简单的网页来显示我们的豆类清单。在 `src/main/resources/META-INF/resources` 目录中，添加一个 `legumes.html` 文件，其中包含这个{quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/legumes.html[legumes.html] 文件的内容。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:446
#, fuzzy
msgid "Open a browser to http://localhost:8080/legumes.html and you will see our list of legumes."
msgstr "打开浏览器 http://localhost:8080/legumes.html ，你会看到我们的豆类清单。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:448
#, fuzzy
msgid "The interesting part starts when running the application as a native executable:"
msgstr "有趣的部分从作为本地可执行文件运行应用程序时开始。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:452 upstream/_guides/rest-json.adoc:491
#, fuzzy
msgid "create the native executable with:"
msgstr "创建本地可执行文件。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:455 upstream/_guides/rest-json.adoc:494
#, fuzzy
msgid "execute it with `./target/rest-json-quickstart-1.0.0-SNAPSHOT-runner`"
msgstr "用以下方式执行它 `./target/rest-json-quickstart-1.0.0-SNAPSHOT-runner` "

#. type: Plain text
#: upstream/_guides/rest-json.adoc:456 upstream/_guides/rest-json.adoc:495
#, fuzzy
msgid "open a browser and go to http://localhost:8080/legumes.html"
msgstr "打开浏览器，进入 http://localhost:8080/legumes.html "

#. type: Plain text
#: upstream/_guides/rest-json.adoc:460
#, fuzzy
msgid "No legumes there."
msgstr "那里没有豆类。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:463
#, fuzzy
msgid "As mentioned above, the issue is that Quarkus was not able to determine the `Legume` class will require some reflection by analyzing the REST endpoints.  The JSON serialization library tries to get the list of fields of `Legume` and gets an empty list so it does not serialize the fields' data."
msgstr "如上所述，问题是Quarkus无法通过分析REST端点来确定 `Legume` 类将需要一些反射。JSON序列化库试图获取 `Legume` 的字段列表，得到的是一个空列表，所以它没有序列化字段的数据。"

#. type: delimited block =
#: upstream/_guides/rest-json.adoc:468
#, fuzzy
msgid "At the moment, when JSON-B or Jackson tries to get the list of fields of a class, if the class is not registered for reflection, no exception will be thrown.  GraalVM will simply return an empty list of fields."
msgstr "目前，当JSON-B或Jackson试图获取一个类的字段列表时，如果该类没有注册反射，则不会抛出异常。GraalVM将简单地返回一个空的字段列表。"

#. type: delimited block =
#: upstream/_guides/rest-json.adoc:470
#, fuzzy
msgid "Hopefully, this will change in the future and make the error more obvious."
msgstr "希望这在将来会有所改变，使错误更加明显。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:473
#, fuzzy
msgid "We can register `Legume` for reflection manually by adding the `@RegisterForReflection` annotation on our `Legume` class:"
msgstr "我们可以通过在我们的 `Legume` 类上添加 `@RegisterForReflection` 注解来手动注册 `Legume` 进行反射。"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:476
#, no-wrap
msgid "import io.quarkus.runtime.annotations.RegisterForReflection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:481
#, no-wrap
msgid ""
"@RegisterForReflection\n"
"public class Legume {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:484
#, fuzzy
msgid "The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation. More details about the `@RegisterForReflection` annotation can be found on the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr " `@RegisterForReflection` 注解指示Quarkus在本地编译过程中保留该类和其成员。关于 `@RegisterForReflection` 注解的更多细节可以在 link:writing-native-applications-tips.html#registerForReflection[本地应用程序提示] 页面找到。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:486
#, fuzzy
msgid "Let's do that and follow the same steps as before:"
msgstr "让我们这样做，并遵循与之前相同的步骤。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:490
#, fuzzy
msgid "hit `Ctrl+C` to stop the application"
msgstr "点击 `Ctrl+C` ，停止应用程序。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:499
#, fuzzy
msgid "This time, you can see our list of legumes."
msgstr "这一次，你可以看到我们的豆类清单。"

#. type: Title ==
#: upstream/_guides/rest-json.adoc:501
#, fuzzy, no-wrap
msgid "Being reactive"
msgstr "被动反应"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:505
#, fuzzy
msgid "You can return _reactive types_ to handle asynchronous processing.  Quarkus recommends the usage of https://smallrye.io/smallrye-mutiny[Mutiny] to write reactive and asynchronous code."
msgstr "你可以返回反应式 _类型_ 来处理异步处理。Quarkus推荐使用 link:https://smallrye.io/smallrye-mutiny[Mutiny] 来编写反应性和异步代码。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:507
#, fuzzy
msgid "RESTEasy Reactive is naturally integrated with Mutiny."
msgstr "RESTEasy Reactive与Mutiny自然整合。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:509
#, fuzzy
msgid "Your endpoints can return `Uni` or `Multi` instances:"
msgstr "你的端点可以返回 `Uni` 或 `Multi` 实例。"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:518
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/{name}\")\n"
"public Uni<Fruit> getOne(String name) {\n"
"    return findByName(name);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:523
#, no-wrap
msgid ""
"@GET\n"
"public Multi<Fruit> getAll() {\n"
"    return findAll();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:527
#, fuzzy
msgid "Use `Uni` when you have a single result.  Use `Multi` when you have multiple items that may be emitted asynchronously."
msgstr "当你有一个单一的结果时，使用 `Uni` 。当你有多个可能被异步发射的项目时，使用 `Multi` 。"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:529
msgid "You can use `Uni` and `Response` to return asynchronous HTTP responses: `Uni<Response>`."
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:531
msgid "More details about Mutiny can be found in xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr ""

#. type: Title ==
#: upstream/_guides/rest-json.adoc:532
#, no-wrap
msgid "Conclusion"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:535
msgid "Creating JSON REST services with Quarkus is easy as it relies on proven and well known technologies."
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:537
msgid "As usual, Quarkus further simplifies things under the hood when running your application as a native executable."
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:538
msgid "There is only one thing to remember: if you use `Response` and Quarkus can't determine the beans that are serialized, you need to annotate them with `@RegisterForReflection`."
msgstr ""
