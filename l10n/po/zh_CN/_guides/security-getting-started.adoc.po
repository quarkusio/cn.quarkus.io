# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-11-16 17:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security-getting-started.adoc:6
#, fuzzy, no-wrap
msgid "Secure a Quarkus application with Basic authentication"
msgstr "用基本认证保护Quarkus应用程序"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:11
#, fuzzy
msgid "Secure your Quarkus application endpoints by combining xref:security-built-in-authentication.adoc#basic-auth[Quarkus built-in basic HTTP authentication] with the JPA identity provider to enable role-based access control (RBAC).  The JPA `IdentityProvider` creates a `SecurityIdentity` instance, which is used during user authentication to verify and authorize access requests making your Quarkus application secure."
msgstr "通过将 link:security-built-in-authentication.html#basic-auth[Quarkus内置的基本HTTP认证] 与JPA身份提供者结合起来，以实现基于角色的访问控制（RBAC），从而保护你的Quarkus应用端点。JPA `IdentityProvider` 创建了一个 `SecurityIdentity` 实例，它在用户认证过程中被用来验证和授权访问请求，使你的Quarkus应用程序安全。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:13
#, fuzzy
msgid "This tutorial prepares you for implementing more advanced security mechanisms in Quarkus, for example, how to use the OpenID Connect (OIDC) authentication mechanism."
msgstr "本教程为你在Quarkus中实现更高级的安全机制做准备，例如，如何使用OpenID Connect（OIDC）认证机制。"

#. type: Title ==
#: upstream/_guides/security-getting-started.adoc:14
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: upstream/_guides/security-getting-started.adoc:18
#, fuzzy, no-wrap
msgid "What you will build"
msgstr "你将建立什么"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:21
#, fuzzy
msgid "The steps in this tutorial guide you through building an application that provides the following endpoints:"
msgstr "本教程中的步骤指导你建立一个提供以下端点的应用程序。"

#. type: Table
#: upstream/_guides/security-getting-started.adoc:24
#, fuzzy, no-wrap
msgid "Endpoint"
msgstr "端点"

#. type: Table
#: upstream/_guides/security-getting-started.adoc:25
#, no-wrap
msgid "Description"
msgstr "描述"

#. type: Table
#: upstream/_guides/security-getting-started.adoc:25
#, fuzzy, no-wrap
msgid "`/api/public`"
msgstr " `/api/public` "

#. type: Table
#: upstream/_guides/security-getting-started.adoc:26
#, fuzzy, no-wrap
msgid "The `/api/public` endpoint can be accessed anonymously."
msgstr " `/api/public` 端点可以被匿名访问。"

#. type: Table
#: upstream/_guides/security-getting-started.adoc:26
#, fuzzy, no-wrap
msgid "`/api/admin`"
msgstr " `/api/admin` "

#. type: Table
#: upstream/_guides/security-getting-started.adoc:28
#, fuzzy, no-wrap
msgid ""
"The `/api/admin` endpoint is protected with role-based access control (RBAC), and only users who have been granted the `admin` role can access it.\n"
"At this endpoint, the `@RolesAllowed` annotation is used to declaratively enforce the access constraint."
msgstr " `/api/admin` 端点受到基于角色的访问控制（RBAC）的保护，只有被授予 `admin` 角色的用户才能访问它。在这个端点， `@RolesAllowed` 注释被用来声明性地执行访问限制。"

#. type: Table
#: upstream/_guides/security-getting-started.adoc:28
#, fuzzy, no-wrap
msgid "`/api/users/me`"
msgstr " `/api/users/me` "

#. type: Table
#: upstream/_guides/security-getting-started.adoc:29
#, fuzzy, no-wrap
msgid "The `/api/users/me` endpoint is protected with RBAC and only users that have been granted the `user` role can access it. A JSON document with details about the user is returned as a response."
msgstr " `/api/users/me` 端点受到RBAC的保护，只有被授予 `user` 角色的用户才能访问它。一个包含用户详细信息的JSON文档将作为响应返回。"

#. type: delimited block =
#: upstream/_guides/security-getting-started.adoc:34
#, fuzzy
msgid "If you just want to examine the code, you can fast-forward to the completed example by using one of the following ways:"
msgstr "如果你只想检查代码，你可以通过以下方式之一快进到完成的例子。"

#. type: delimited block =
#: upstream/_guides/security-getting-started.adoc:36
#, fuzzy
msgid "Download the {quickstarts-archive-url}[archive]"
msgstr "下载{quickstarts-archive-url}[档案]。"

#. type: delimited block =
#: upstream/_guides/security-getting-started.adoc:37
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`"
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: delimited block =
#: upstream/_guides/security-getting-started.adoc:39
#, fuzzy
msgid "You can find the solution in the `security-jpa-quickstart` {quickstarts-tree-url}/security-jpa-quickstart[directory]."
msgstr "该解决方案位于 `security-jpa-quickstart` {quickstarts-tree-url}/security-jpa-quickstart[目录]中。"

#. type: Title ==
#: upstream/_guides/security-getting-started.adoc:44
#, fuzzy, no-wrap
msgid "Create a Maven project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:48
#, fuzzy
msgid "For Quarkus security to be able to map your security source to JPA entities, ensure that the Maven project that is used in this tutorial includes the `security-jpa` extension.  You can either create a new Maven project with the `security-jpa` extension or you can add the extension to an existing Maven project."
msgstr "为使Quarkus security能够将安全源映射到JPA实体，请确保本教程中使用的Maven项目包含 `security-jpa` 扩展。您可以用 `security-jpa` 扩展创建一个新的Maven项目，也可以将该扩展添加到现有的Maven项目中。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:50
#, fuzzy
msgid "To create the Maven project, use the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#. type: delimited block =
#: upstream/_guides/security-getting-started.adoc:59
#, fuzzy
msgid "xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] is used to store your user identities but you can also use xref:hibernate-orm.adoc[Hibernate ORM].  You must also add your preferred database connector library.  The instructions in this example tutorial use a PostgreSQL database for the identity store."
msgstr "link:hibernate-orm-panache.html[Hibernate ORM与Panache] 被用来存储你的用户身份，但你也可以使用 link:hibernate-orm.html[Hibernate ORM] 。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:61
#, fuzzy
msgid "To add the `security-jpa` extension to an existing Maven project, run the following command from your project base directory:"
msgstr "如果你已经配置了你的Quarkus项目，你可以通过在你的项目基础目录下运行以下命令，将 `security-jpa` 扩展到你的项目。"

#. type: Title ===
#: upstream/_guides/security-getting-started.adoc:65
#, fuzzy, no-wrap
msgid "Verification"
msgstr "验证"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:68
#, fuzzy
msgid "When you run either command, the following XML is added to your build file:"
msgstr "这会将以下内容添加到你的构建文件中:"

#. type: Block title
#: upstream/_guides/security-getting-started.adoc:70
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:76
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-security-jpa</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/security-getting-started.adoc:79
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:82
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-security-jpa\")\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-getting-started.adoc:84
#, fuzzy, no-wrap
msgid "Write the application"
msgstr "编写应用程序"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:88
#, fuzzy
msgid "Let's start by implementing the `/api/public` endpoint to allow all users access to access the application.  Add a regular JAX-RS resource to your Java source code, as outlined in the following code snippet:"
msgstr "让我们从实现 `/api/public` 端点开始。正如你从下面的源代码中看到的，它只是一个普通的JAX-RS资源。"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:92
#: upstream/_guides/security-getting-started.adoc:116
#: upstream/_guides/security-getting-started.adoc:140
#: upstream/_guides/security-getting-started.adoc:167
#: upstream/_guides/security-getting-started.adoc:250
#, no-wrap
msgid "package org.acme.security.jpa;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:98
#, no-wrap
msgid ""
"import javax.annotation.security.PermitAll;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:101
#, no-wrap
msgid ""
"@Path(\"/api/public\")\n"
"public class PublicResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:109
#, no-wrap
msgid ""
"    @GET\n"
"    @PermitAll\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String publicResource() {\n"
"        return \"public\";\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:112
#, fuzzy
msgid "The source code for the `/api/admin` endpoint is similar but instead you use a `@RolesAllowed` annotation to make sure that only users granted the `admin` role can access the endpoint.  Add a JAX-RS resource with the following `@RolesAllowed` annotation:"
msgstr " `/api/admin` 端点的源代码也非常简单。这里的主要区别是，我们使用 `@RolesAllowed` 注释来确保只有被授予 `admin` 角色的用户才能访问该端点。"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:122
#, no-wrap
msgid ""
"import javax.annotation.security.RolesAllowed;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:125
#, no-wrap
msgid ""
"@Path(\"/api/admin\")\n"
"public class AdminResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:133
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"admin\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String adminResource() {\n"
"         return \"admin\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:136
#, fuzzy
msgid "Finally, implement the `/api/users/me` endpoint. As you can see from the source code example below, we are trusting only users with the `user` role.  We are also using `SecurityContext` to get access to the currently authenticated `Principal`, and we return the user name, all of which is loaded from the database."
msgstr "最后，让我们考虑一下 `/api/users/me` 这个端点。正如你在下面的源代码中看到的，我们只信任具有 `user` 角色的用户。我们正在使用 `SecurityContext` ，以获得对当前认证的Principal的访问，并返回用户的名字。这些信息是从数据库中加载的。"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:147
#, no-wrap
msgid ""
"import javax.annotation.security.RolesAllowed;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.core.Context;\n"
"import javax.ws.rs.core.SecurityContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:150
#, no-wrap
msgid ""
"@Path(\"/api/users\")\n"
"public class UserResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:158
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"user\")\n"
"    @Path(\"/me\")\n"
"    public String me(@Context SecurityContext securityContext) {\n"
"        return securityContext.getUserPrincipal().getName();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-getting-started.adoc:160
#, fuzzy, no-wrap
msgid "Define the user entity"
msgstr "定义我们的用户实体"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:163
#, fuzzy
msgid "You can now describe how you want security information to be stored in the model by adding annotations to the `user` entity, as outlined in the following code snippet:"
msgstr "我们现在可以通过给我们的 `User` 实体添加一些注释来描述我们的安全信息是如何存储在我们的模型中的。"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:170
#, no-wrap
msgid ""
"import javax.persistence.Entity;\n"
"import javax.persistence.Table;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:177
#, no-wrap
msgid ""
"import io.quarkus.hibernate.orm.panache.PanacheEntity;\n"
"import io.quarkus.elytron.security.common.BcryptUtil;\n"
"import io.quarkus.security.jpa.Password;\n"
"import io.quarkus.security.jpa.Roles;\n"
"import io.quarkus.security.jpa.UserDefinition;\n"
"import io.quarkus.security.jpa.Username;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:188
#, no-wrap
msgid ""
"@Entity\n"
"@Table(name = \"test_user\")\n"
"@UserDefinition <1>\n"
"public class User extends PanacheEntity {\n"
"    @Username <2>\n"
"    public String username;\n"
"    @Password <3>\n"
"    public String password;\n"
"    @Roles <4>\n"
"    public String role;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:203
#, no-wrap
msgid ""
"    /**\n"
"     * Adds a new user to the database\n"
"     * @param username the username\n"
"     * @param password the unencrypted password (it will be encrypted with bcrypt)\n"
"     * @param role the comma-separated roles\n"
"     */\n"
"    public static void add(String username, String password, String role) { <5>\n"
"        User user = new User();\n"
"        user.username = username;\n"
"        user.password = BcryptUtil.bcryptHash(password);\n"
"        user.role = role;\n"
"        user.persist();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:207
#, fuzzy
msgid "The `security-jpa` extension initializes only if there is a single entity annotated with `@UserDefinition`."
msgstr "只有当有一个实体被注解为 `@UserDefinition` ， `security-jpa` 扩展才会被初始化。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:209
#, fuzzy
msgid "The `@UserDefinition` annotation must be present on a single entity and can be either a regular Hibernate ORM entity or a Hibernate ORM with Panache entity."
msgstr "这个注解必须出现在一个实体上。它可以是一个普通的Hibernate ORM实体，也可以是本例中带有Panache的Hibernate ORM实体。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:210
#, fuzzy
msgid "Indicates the field used for the user name."
msgstr "这表示用于用户名的字段。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:211
#, fuzzy
msgid "Indicates the field used for the password, which defaults to using bcrypt hashed passwords but you can also configure it for plain text or custom passwords."
msgstr "这表示用于密码的字段。这默认为使用bcrypt散列密码，但你也可以将其配置为明文密码或自定义密码。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:212
#, fuzzy
msgid "This indicates the comma-separated list of roles added to the target principal representation attributes."
msgstr "这表示以逗号分隔的添加到目标Principal representation属性中的角色列表。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:213
#, fuzzy
msgid "This method allows us to add users while hashing the password with the proper bcrypt hash."
msgstr "这种方法允许我们在添加用户的同时，用适当的bcrypt哈希值对密码进行加密。"

#. type: Title ===
#: upstream/_guides/security-getting-started.adoc:214
#, fuzzy, no-wrap
msgid "Configure the application"
msgstr "配置应用程序"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:217
#, fuzzy
msgid "Enable xref:security-built-in-authentication.adoc#basic-auth[Quarkus built-in basic HTTP authentication] by setting the `quarkus.http.auth.basic` property to `true`:"
msgstr "通过将 `quarkus.http.auth.basic` 属性设置为 `true` ，启用 link:security-built-in-authentication.html#basic-auth[Quarkus内置的基本HTTP认证] 。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:219
#, fuzzy
msgid "`quarkus.http.auth.basic`=true`"
msgstr " `quarkus.http.auth.basic` =true`。"

#. type: delimited block =
#: upstream/_guides/security-getting-started.adoc:224
#, fuzzy
msgid "When secure access is required and no other authentication mechanisms are enabled, xref:security-built-in-authentication.adoc#basic-auth[Quarkus built-in basic HTTP authentication] is the fallback authentication mechanism.  Therefore, in this tutorial, you do not need to set the property `quarkus.http.auth.basic=true`."
msgstr "当需要安全访问并且没有启用其他认证机制时， link:security-built-in-authentication.html#basic-auth[Quarkus内置的基本HTTP认证] 是后备认证机制。因此，在本教程中，你不需要设置属性 `quarkus.http.auth.basic=true` 。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:227
#, fuzzy
msgid "Configure at least one data source so that the `security-jpa` extension can access your database."
msgstr "接下来，配置数据源。 `security-jpa` 扩展需要至少一个数据源来访问你的数据库。"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:231
#, no-wrap
msgid "quarkus.http.auth.basic=true\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:236
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.datasource.username=quarkus\n"
"quarkus.datasource.password=quarkus\n"
"quarkus.datasource.jdbc.url=jdbc:postgresql:security_jpa\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:238
#: upstream/_guides/security-getting-started.adoc:300
#, no-wrap
msgid "quarkus.hibernate-orm.database.generation=drop-and-create\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:241
#, fuzzy
msgid "To initialize the database with users and roles, implement the `Startup` class, as outlined in the following code snippet:"
msgstr "为了用用户和角色来初始化数据库，实现 `Startup` 类，如下面的代码片断所述。"

#. type: delimited block =
#: upstream/_guides/security-getting-started.adoc:245
#, fuzzy
msgid "In this tutorial, a PostgreSQL database is used for the identity store. Hibernate ORM automatically creates the database schema on startup (change this in production)."
msgstr "在本教程中，身份存储使用的是PostgreSQL数据库。Hibernate ORM在启动时自动创建数据库模式（在生产中改变这一点）。"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:254
#, no-wrap
msgid ""
"import javax.enterprise.event.Observes;\n"
"import javax.inject.Singleton;\n"
"import javax.transaction.Transactional;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:256
#, no-wrap
msgid "import io.quarkus.runtime.StartupEvent;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:268
#, no-wrap
msgid ""
"@Singleton\n"
"public class Startup {\n"
"    @Transactional\n"
"    public void loadUsers(@Observes StartupEvent evt) {\n"
"        // reset and load all test users\n"
"        User.deleteAll();\n"
"        User.add(\"admin\", \"admin\", \"admin\");\n"
"        User.add(\"user\", \"user\", \"user\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:271
#, fuzzy
msgid "The application is now protected and the user identities are provided by the specified database."
msgstr "现在，该应用程序受到保护，身份由我们的数据库提供。"

#. type: delimited block =
#: upstream/_guides/security-getting-started.adoc:276
#, fuzzy
msgid "In a production environment, do not store plain text passwords.  As a result, the `security-jpa` defaults to using bcrypt-hashed passwords."
msgstr "我们善意地提醒你，你不能在生产环境中存储明文密码;-)。因此， `security-jpa` 默认为使用bcrypt-hashed密码。"

#. type: Title ==
#: upstream/_guides/security-getting-started.adoc:278
#, fuzzy, no-wrap
msgid "Test your application"
msgstr "测试应用程序"

#. type: Title ===
#: upstream/_guides/security-getting-started.adoc:280
#, fuzzy, no-wrap
msgid "Use Dev Services for PostgreSQL to test your application"
msgstr "使用PostgreSQL的开发服务"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:285
#, fuzzy
msgid "Add the integration tests before you run your application in production mode."
msgstr "在以生产模式运行你的应用程序之前，让我们添加集成测试。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:288
#, fuzzy
msgid "Use xref:https://quarkus.io/guides/dev-services#databases[Dev Services for PostgreSQL] for the integration testing of your application in JVM and native modes."
msgstr "我们推荐使用 link:https://quarkus.io/guides/dev-services.html#databases[Dev Services for PostgreSQL] 对你的应用程序在JVM和本地模式下进行集成测试。如果PostgreSQL配置属性只在生产( `prod` )模式下启用， `Dev Services for PostgreSQL` 将启动和配置一个 `PostgreSQL` 测试容器。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:291
#, fuzzy
msgid "The following properties configuration demonstrates how you can enable PostgreSQL testing to run in production (`prod`) mode only.  In this scenario, `Dev Services for PostgreSQL` launches and configures a `PostgreSQL` test container."
msgstr "下面的属性配置演示了如何使PostgreSQL测试只在生产 ( `prod` ) 模式下运行。在这种情况下， `Dev Services for PostgreSQL` 启动并配置一个 `PostgreSQL` 测试容器。"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:298
#, no-wrap
msgid ""
"%prod.quarkus.datasource.db-kind=postgresql\n"
"%prod.quarkus.datasource.username=quarkus\n"
"%prod.quarkus.datasource.password=quarkus\n"
"%prod.quarkus.datasource.jdbc.url=jdbc:postgresql:elytron_security_jpa\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:303
#, fuzzy
msgid "If you add the `%prod.` profile prefix, data source properties are not visible to `Dev Services for PostgreSQL` and are only observed by an application running in production mode."
msgstr "注意，添加 `%prod.` profile前缀的数据源属性不会使它们对 `Dev Services for PostgreSQL` ，而只是对在生产模式下运行的应用程序可见。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:305
#, fuzzy
msgid "To write the integration test, use the following code sample:"
msgstr "要编写集成测试，请使用以下代码示例。"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:309
#, no-wrap
msgid "package org.acme.elytron.security.jpa;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:313
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.get;\n"
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.core.Is.is;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:316
#, no-wrap
msgid ""
"import org.apache.http.HttpStatus;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:318
#, no-wrap
msgid "import io.quarkus.test.junit.QuarkusTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:321
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class JpaSecurityRealmTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:327
#, no-wrap
msgid ""
"    @Test\n"
"    void shouldAccessPublicWhenAnonymous() {\n"
"        get(\"/api/public\")\n"
"                .then()\n"
"                .statusCode(HttpStatus.SC_OK);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:329
#: upstream/_guides/security-getting-started.adoc:337
#: upstream/_guides/security-getting-started.adoc:348
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:335
#, no-wrap
msgid ""
"    @Test\n"
"    void shouldNotAccessAdminWhenAnonymous() {\n"
"        get(\"/api/admin\")\n"
"                .then()\n"
"                .statusCode(HttpStatus.SC_UNAUTHORIZED);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:346
#, no-wrap
msgid ""
"    @Test\n"
"    void shouldAccessAdminWhenAdminAuthenticated() {\n"
"        given()\n"
"                .auth().preemptive().basic(\"admin\", \"admin\")\n"
"                .when()\n"
"                .get(\"/api/admin\")\n"
"                .then()\n"
"                .statusCode(HttpStatus.SC_OK);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:358
#, no-wrap
msgid ""
"    @Test\n"
"    void shouldNotAccessUserWhenAdminAuthenticated() {\n"
"        given()\n"
"                .auth().preemptive().basic(\"admin\", \"admin\")\n"
"                .when()\n"
"                .get(\"/api/users/me\")\n"
"                .then()\n"
"                .statusCode(HttpStatus.SC_FORBIDDEN);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:370
#, no-wrap
msgid ""
"    @Test\n"
"    void shouldAccessUserAndGetIdentityWhenUserAuthenticated() {\n"
"        given()\n"
"                .auth().preemptive().basic(\"user\", \"user\")\n"
"                .when()\n"
"                .get(\"/api/users/me\")\n"
"                .then()\n"
"                .statusCode(HttpStatus.SC_OK)\n"
"                .body(is(\"user\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:373
#, fuzzy
msgid "As you can see in this code sample, you do not need to start the test container from the test code."
msgstr "正如你所看到的，你不需要从测试代码中启动测试容器。"

#. type: delimited block =
#: upstream/_guides/security-getting-started.adoc:379
#, fuzzy
msgid "If you start your application in dev mode, `Dev Services for PostgreSQL` launches a `PostgreSQL` `devmode` container so that you can start developing your application.  While developing your application, you can also start to add tests one by one and run them by using the xref:continuous-testing.adoc[Continuous Testing] feature.  `Dev Services for PostgreSQL` supports testing while you develop by providing a separate `PostgreSQL` test container that does not conflict with the `devmode` container."
msgstr "如果你在 `devmode` 中启动你的应用程序，那么 `Dev Services for PostgreSQL` 将启动一个 `PostgreSQL` devmode 容器，以便你专注于应用程序的开发。在开发过程中，你也可以开始一个接一个地添加测试，并使用 link:continuous-testing.html[连续测试] 功能运行它们-- `Dev Services for PostgreSQL` 将用一个单独的 `PostgreSQL` 测试容器来支持这些测试，这不会与devmode容器冲突。"

#. type: Title ===
#: upstream/_guides/security-getting-started.adoc:381
#, fuzzy, no-wrap
msgid "Use `curl` or a browser to test your application"
msgstr "使用 `curl` 或浏览器来测试你的应用程序"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:384
#, fuzzy
msgid "Use the following example to start the PostgreSQL server:"
msgstr "首先，启动一个PostgreSQL服务器。"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:389
#, no-wrap
msgid ""
"docker run --rm=true --name security-getting-started -e POSTGRES_USER=quarkus \\\n"
"           -e POSTGRES_PASSWORD=quarkus -e POSTGRES_DB=elytron_security_jpa \\\n"
"           -p 5432:5432 postgres:14.1\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-getting-started.adoc:390
#, fuzzy, no-wrap
msgid "Compile and run the application"
msgstr "编译该应用程序。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:393
#, fuzzy
msgid "Compile and run your Quarkus application by using one of the following methods:"
msgstr "通过使用以下方法之一编译并运行你的Quarkus应用程序。"

#. type: Title ====
#: upstream/_guides/security-getting-started.adoc:394
#, fuzzy, no-wrap
msgid "JVM mode"
msgstr "JVM模式"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:399
#, fuzzy
msgid "Compile the application: Run the application:"
msgstr "编译该应用程序。"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:403
#, no-wrap
msgid "java -jar target/quarkus-app/quarkus-run.jar\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-getting-started.adoc:405
#, fuzzy, no-wrap
msgid "Native mode"
msgstr "本地模式"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:408
#, fuzzy
msgid "Compile the application:"
msgstr "编译该应用程序。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:412
#, fuzzy
msgid "Run the application:"
msgstr "编写应用程序"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:415
#, no-wrap
msgid "./target/security-jpa-quickstart-runner\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-getting-started.adoc:417
#, fuzzy, no-wrap
msgid "Access and test the application security"
msgstr "访问和测试应用程序的安全性"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:421
#, fuzzy
msgid "When your application is running, you can access your application by using one of the following `curl` commands.  You can also access the same endpoint URLs by using a browser."
msgstr "当你的应用程序正在运行时，你可以通过使用以下 `curl` 命令来访问你的应用程序。你也可以通过使用浏览器来访问相同的端点URL。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:423
#: upstream/_guides/security-getting-started.adoc:434
#, fuzzy
msgid "Connect to a protected endpoint anonymously:"
msgstr "现在，让我们试着匿名地打一个受保护的资源。"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:429
#, no-wrap
msgid ""
"$ curl -i -X GET http://localhost:8080/api/public\n"
"HTTP/1.1 200 OK\n"
"Content-Length: 6\n"
"Content-Type: text/plain;charset=UTF-8\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:431
#, no-wrap
msgid "public%\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:441
#, no-wrap
msgid ""
"$ curl -i -X GET http://localhost:8080/api/admin\n"
"HTTP/1.1 401 Unauthorized\n"
"Content-Length: 14\n"
"Content-Type: text/html;charset=UTF-8\n"
"WWW-Authenticate: Basic\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:443
#, no-wrap
msgid "Not authorized%\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-getting-started.adoc:448
#, fuzzy
msgid "When you use a browser to anonymously connect to a protected resource, a basic authentication form displays prompting you to enter credentials."
msgstr "当你使用浏览器匿名连接到受保护的资源时，会显示一个基本认证表格，提示你输入凭证。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:451
#, fuzzy
msgid "Connect to a protected endpoint as an authorized user:"
msgstr "作为授权用户连接到受保护的端点。"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:458
#, no-wrap
msgid ""
"$ curl -i -X GET -u admin:admin http://localhost:8080/api/admin\n"
"HTTP/1.1 200 OK\n"
"Content-Length: 5\n"
"Content-Type: text/plain;charset=UTF-8\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:460
#, no-wrap
msgid "admin%\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-getting-started.adoc:462
#, fuzzy, no-wrap
msgid "Results"
msgstr "结果"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:466
#, fuzzy
msgid "When you provide the credentials of an authorized user, for example, `admin:admin`, the JPA security extension authenticates and loads the roles of the user.  The `admin` user is authorized to access the protected resources."
msgstr "通过提供 `admin:admin` 凭证，扩展程序验证了用户并加载了他们的角色。 `admin` 的用户被授权访问受保护的资源。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:468
msgid "If a resource is protected with `@RolesAllowed(\"user\")`, the user `admin` is not authorized to access the resource because it is not assigned to the \"user\" role, as outlined in the following shell example:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:475
#, no-wrap
msgid ""
"$ curl -i -X GET -u admin:admin http://localhost:8080/api/users/me\n"
"HTTP/1.1 403 Forbidden\n"
"Content-Length: 34\n"
"Content-Type: text/html;charset=UTF-8\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:477
#, no-wrap
msgid "Forbidden%\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:480
#, fuzzy
msgid "Finally, the user name `user` is authorized and the security context contains the principal details, for example, the user name."
msgstr "最后，使用用户 `user` ，安全上下文包含了本金的细节（比如说用户名）。"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:487
#, no-wrap
msgid ""
"$ curl -i -X GET -u user:user http://localhost:8080/api/users/me\n"
"HTTP/1.1 200 OK\n"
"Content-Length: 4\n"
"Content-Type: text/plain;charset=UTF-8\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:489
#, no-wrap
msgid "user%\n"
msgstr ""

#.  The following section needs to be moved as SMEs confirmed that it does not really fit in the new content here. In the next phase of refactoring, consider moving this section into a dedicated concept/reference topic.
#. type: Title ==
#: upstream/_guides/security-getting-started.adoc:495
#, no-wrap
msgid "Quarkus Security JPA information"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:498
#, fuzzy
msgid "Now that you have successfully run and tested the security quick start project, you are ready to explore more security features of Quarkus Security and the JPA identity store."
msgstr "现在你已经运行并测试了这个演示，请看一下关于准备JPA身份存储的更具体的信息。"

#. type: Title ===
#: upstream/_guides/security-getting-started.adoc:499
#, fuzzy, no-wrap
msgid "Supported model types"
msgstr "支持的模型类型"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:502
#, fuzzy
msgid "The `@UserDefinition` class must be a JPA entity (with Panache or not)."
msgstr " `@UserDefinition` 类必须是一个JPA实体（有无Panache）。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:503
#, fuzzy
msgid "The `@Username` and `@Password` field types must be of type `String`."
msgstr " `@Username` 和 `@Password` 字段类型必须是 `String` 类型。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:504
#, fuzzy
msgid "The `@Roles` field must either be of type `String` or `Collection<String>` or alternately a `Collection<X>` where `X` is an entity class with one `String` field annotated with the `@RolesValue` annotation."
msgstr " `@Roles` 字段必须是 `String` 或 `Collection<String>` 类型，或者是一个 `Collection<X>` ，其中 `X` 是一个实体类，有一个 `String` 字段被注解为 `@RolesValue` 。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:505
#, fuzzy
msgid "Each `String` role element type will be parsed as a comma-separated list of roles."
msgstr "每个 `String` 角色元素类型将被解析为一个以逗号分隔的角色列表。"

#. type: Title ===
#: upstream/_guides/security-getting-started.adoc:506
#, fuzzy, no-wrap
msgid "Storing roles in another entity"
msgstr "在另一个实体中存储角色"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:509
#, fuzzy
msgid "Use the following sample to store roles inside another entity:"
msgstr "你也可以在另一个实体中存储角色。"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:518
#, no-wrap
msgid ""
"@UserDefinition\n"
"@Table(name = \"test_user\")\n"
"@Entity\n"
"public class User extends PanacheEntity {\n"
"    @Username\n"
"    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:521
#, no-wrap
msgid ""
"    @Password\n"
"    public String pass;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:526
#, no-wrap
msgid ""
"    @ManyToMany\n"
"    @Roles\n"
"    public List<Role> roles = new ArrayList<>();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:529
#, no-wrap
msgid ""
"@Entity\n"
"public class Role extends PanacheEntity {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:532
#, no-wrap
msgid ""
"    @ManyToMany(mappedBy = \"roles\")\n"
"    public List<ExternalRolesUserEntity> users;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:536
#, no-wrap
msgid ""
"    @RolesValue\n"
"    public String role;\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-getting-started.adoc:538
#, fuzzy, no-wrap
msgid "Password storage and hashing"
msgstr "密码存储和散列"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:542
#, fuzzy
msgid "By default, passwords are stored and hashed by using https://en.wikipedia.org/wiki/Bcrypt[bcrypt] under the https://en.wikipedia.org/wiki/Crypt_(C)[Modular Crypt Format] (MCF)."
msgstr "默认情况下，我们认为密码是用 link:https://en.wikipedia.org/wiki/Crypt_©[模块化加密格式] （MCF）下的 link:https://en.wikipedia.org/wiki/Bcrypt[bcrypt] 进行散列存储。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:546
#, fuzzy
msgid "When you need to create a hashed password we provide the convenient `String BcryptUtil.bcryptHash(String password)` function, which defaults to creating a random salt and hashing in 10 iterations.  You can also specify the number of iterations and the salt."
msgstr "当你需要创建这样一个散列的密码时，我们提供了方便的 `String BcryptUtil.bcryptHash(String password)` ，该函数默认为创建一个随机的盐和10次迭代的散列（尽管你也可以指定迭代和盐）。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:548
#, fuzzy
msgid "When you use MCF, you don't need dedicated columns to store the hashing algorithm, the iterations count, or the salt because they are all stored in the hashed value."
msgstr "使用MCF，你不需要专门的列来存储散列算法、迭代次数或盐，因为它们都被存储在散列值中。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:550
#, fuzzy
msgid "You can also store passwords by using a different hashing algorithm, for example, `@Password(value = PasswordType.CUSTOM, provider = CustomPasswordProvider.class)`, as outlined in the following code snippet:"
msgstr "你也有可能使用不同的散列算法存储密码 `@Password(value = PasswordType.CUSTOM, provider = CustomPasswordProvider.class)` 。"

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:560
#, no-wrap
msgid ""
"@UserDefinition\n"
"@Table(name = \"test_user\")\n"
"@Entity\n"
"public class CustomPasswordUserEntity {\n"
"    @Id\n"
"    @GeneratedValue\n"
"    public Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:564
#, no-wrap
msgid ""
"    @Column(name = \"username\")\n"
"    @Username\n"
"    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:568
#, no-wrap
msgid ""
"    @Column(name = \"password\")\n"
"    @Password(value = PasswordType.CUSTOM, provider = CustomPasswordProvider.class)\n"
"    public String pass;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:572
#, no-wrap
msgid ""
"    @Roles\n"
"    public String role;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-getting-started.adoc:580
#, no-wrap
msgid ""
"public class CustomPasswordProvider implements PasswordProvider {\n"
"    @Override\n"
"    public Password getPassword(String pass) {\n"
"        byte[] digest = DatatypeConverter.parseHexBinary(pass);\n"
"        return SimpleDigestPassword.createRaw(SimpleDigestPassword.ALGORITHM_SIMPLE_DIGEST_SHA_256, digest);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:584
#, fuzzy
msgid "In a test environment, you can also store passwords in plain text by using `@Password(PasswordType.CLEAR)`.  For applications running in production, do not store passwords in plain text."
msgstr "警告：你也可以用 `@Password(PasswordType.CLEAR)` ，以明文存储密码，但我们强烈建议在生产中不要这样做。"

#. type: Title ==
#: upstream/_guides/security-getting-started.adoc:585
#, fuzzy, no-wrap
msgid "What's next"
msgstr "下一步是什么"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:589
#, fuzzy
msgid "Congratulations! You have learned how to create and test a secure Quarkus application by combining the xref:security-built-in-authentication.adoc#basic-auth[Quarkus built-in basic HTTP authentication] with the JPA identity provider."
msgstr "你已经学会了如何通过使用 link:security-built-in-authentication.html#basic-auth[基本的HTTP认证机制] 来创建和测试一个安全的Quarkus应用程序， `JPA IdentityProvider` 。"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:592
msgid "After you have completed this tutorial, explore some of the more advanced security mechanisms in Quarkus.  Use the following information to learn how you can securely use `OpenID Connect` to provide secure single sign-on access to your Quarkus endpoints:"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:594
#: upstream/_guides/security-getting-started.adoc:601
#, fuzzy
msgid "xref:security-openid-connect.adoc[Using OpenID Connect (OIDC) to Protect Service Applications using Bearer Token Authorization]"
msgstr "link:security-openid-connect.html[Quarkus - 使用OpenID连接来保护使用承载令牌授权的服务应用]"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:596
#: upstream/_guides/security-getting-started.adoc:603
#, fuzzy
msgid "xref:security-openid-connect-web-authentication.adoc[Using OpenID Connect (OIDC) to Protect Web Applications using Authorization Code Flow ]"
msgstr "link:security-openid-connect-web-authentication.html[Quarkus - 使用OpenID连接，利用授权代码流保护Web应用程序]"

#. type: Title ==
#: upstream/_guides/security-getting-started.adoc:597
#, no-wrap
msgid "References"
msgstr "参考文献"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:600
#, fuzzy
msgid "xref:security.adoc[Security Architecture and Guides]"
msgstr "link:security.html[夸库斯保安公司]"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:604
#, fuzzy
msgid "xref:hibernate-orm-panache.adoc[Simplified Hibernate ORM with Panache]"
msgstr "link:hibernate-orm-panache.html[用Panache的Hibernate ORM]"

#. type: Plain text
#: upstream/_guides/security-getting-started.adoc:604
#, fuzzy
msgid "xref:hibernate-orm.adoc[Using Hibernate ORM and JPA]"
msgstr "link:hibernate-orm-panache.html[用Panache的Hibernate ORM]"

#, fuzzy
#~ msgid "Getting Started with Quarkus Security"
#~ msgstr "开始使用Quarkus安全系统"

#, fuzzy
#~ msgid "This guide demonstartes how you can quickly create a secure Quarkus application by using xref:security-built-in-authentication.adoc#basic-auth[Basic AuthenticationMechanism] and `JPA IdentityProvider` to create `SecurityIdentity` which is authorized by the `Role Based Access Control` (RBAC) layer before the access to application is permitted."
#~ msgstr "本指南演示了如何通过使用 link:security-built-in-authentication.html#basic-auth[基本认证机制] 和 `JPA IdentityProvider` ，快速创建安全的Quarkus应用程序，在允许访问应用程序之前，通过 `Role Based Access Control` （RBAC）层的授权，创建 `SecurityIdentity` 。"

#, fuzzy
#~ msgid "Using `Basic AuthenticationMechanism` with `JPA IdentityProvider` is better than configuring the users and roles in `application.properties` therefore this guide recommends to combine `Basic AuthenticationMechanism` and `JPA IdentityProvider`. We will update this recommendation to use a reactive equivalent of the `JPA IdentityProvider` as soon as it is introduced."
#~ msgstr "将 `Basic AuthenticationMechanism` 与 `JPA IdentityProvider` 一起使用比在 `application.properties` 中配置用户和角色更好，因此本指南建议将 `Basic AuthenticationMechanism` 和 `JPA IdentityProvider` 结合起来。一旦有了 `JPA IdentityProvider` ，我们将更新这个建议，以使用一个反应式的等价物。"

#, fuzzy
#~ msgid "This guide will conclude with recommending how to learn more about Quarkus Security, and in particular about its `OpenId Connect Authentication Mechanism`."
#~ msgstr "本指南最后将推荐如何进一步了解Quarkus Security，特别是其 `OpenId Connect Authentication Mechanism` 。"

#~ msgid "Architecture"
#~ msgstr "应用结构"

#, fuzzy
#~ msgid "In this example, we build a very simple microservice which offers three endpoints:"
#~ msgstr "在这个例子中，我们建立了一个非常简单的微服务，提供三个端点。"

#, fuzzy
#~ msgid "The `/api/public` endpoint can be accessed anonymously.  The `/api/admin` endpoint is protected with RBAC (Role-Based Access Control) where only users granted with the `admin` role can access. At this endpoint, we use the `@RolesAllowed` annotation to declaratively enforce the access constraint.  The `/api/users/me` endpoint is also protected with RBAC (Role-Based Access Control) where only users granted with the `user` role can access. As a response, it returns a JSON document with details about the user."
#~ msgstr " `/api/public` 端点可以被匿名访问。 `/api/admin` 端点受到RBAC（基于角色的访问控制）的保护，只有被授予 `admin` 角色的用户可以访问。在这个端点，我们使用 `@RolesAllowed` 注释来声明性地执行访问限制。 `/api/users/me` 端点也受到RBAC（基于角色的访问控制）的保护，只有被授予 `user` 角色的用户可以访问。作为响应，它返回一个包含用户详细信息的JSON文档。"

#~ msgid "Solution"
#~ msgstr "解决方案"

#~ msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
#~ msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#, fuzzy
#~ msgid "This command generates a Maven project, importing the `security-jpa` extension which allows you to map your security source to JPA entities."
#~ msgstr "该命令生成了一个Maven项目，导入了 `security-jpa` 扩展，可以将安全源映射到JPA实体。"

#, fuzzy
#~ msgid "Don't forget to add the database connector library of choice. Here we are using PostgreSQL as identity store."
#~ msgstr "不要忘记添加选择的数据库连接器库。这里我们使用PostgreSQL作为身份存储。"

#, fuzzy
#~ msgid "First, xref:security-built-in-authentication.adoc#basic-auth[Basic HTTPAuthenticationMechanism] has to be enabled with `quarkus.http.auth.basic=true`. In fact, you do not even have to set `quarkus.http.auth.basic=true` to enable it in this demo as `Basic HTTPAuthenticationMechanism` is used as a fallback authentication mechanism when a secure access is required and no other authentication mechanisms are enabled."
#~ msgstr "首先， link:security-built-in-authentication.html#basic-auth[Basic HTTPAuthenticationMechanism] 必须通过 `quarkus.http.auth.basic=true` 。事实上，在这个演示中，你甚至不需要设置 `quarkus.http.auth.basic=true` 来启用它，因为 `Basic HTTPAuthenticationMechanism` 是在需要安全访问且没有启用其他认证机制时作为一种后备认证机制使用。"

#, fuzzy
#~ msgid "In our context, we are using PostgreSQL as identity store. The database schema is created by Hibernate ORM automatically on startup (change this in production), and we initialize the database with users and roles in the `Startup` class:"
#~ msgstr "在我们的环境中，我们使用PostgreSQL作为身份存储。数据库模式是由Hibernate ORM在启动时自动创建的（在生产中改变这一点），我们在 `Startup` 类中用用户和角色初始化数据库。"

#, fuzzy
#~ msgid "Next you can write the integration test:"
#~ msgstr "接下来你可以写集成测试。"

#, fuzzy
#~ msgid "With Curl or Browser"
#~ msgstr "用Curl或浏览器"

#, fuzzy
#~ msgid "Next, compile and run the application in either JVM or Native mode:"
#~ msgstr "接下来，在JVM或Native模式下编译和运行该应用程序。"

#~ msgid "Then run it:"
#~ msgstr "然后运行："

#, fuzzy
#~ msgid "and run it:"
#~ msgstr "并运行它。"

#, fuzzy
#~ msgid "Now you can test it with `curl` or your favourite browser.  We will use `curl` in this section but you can try to access the same endpoint URLs from the browser."
#~ msgstr "现在你可以用 `curl` 或你最喜欢的浏览器来测试它。我们将在本节中使用 `curl` ，但你可以尝试从浏览器访问相同的端点URLs。"

#, fuzzy
#~ msgid "The very first thing to check is to ensure the anonymous access works."
#~ msgstr "要检查的第一件事是确保匿名访问工作。"

#, fuzzy
#~ msgid "Note, if you are using the browser then you should see the browser displaying a Basic Authentication challenge form."
#~ msgstr "注意，如果你使用的是浏览器，那么你应该看到浏览器显示一个基本认证挑战表。"

#, fuzzy
#~ msgid "So far so good, now let's try with an allowed user."
#~ msgstr "到目前为止还不错，现在让我们用一个允许的用户试试。"

#, fuzzy
#~ msgid "The user `admin` should be forbidden to access a resource protected with `@RolesAllowed(\"user\")` because it doesn't have this role."
#~ msgstr "用户 `admin` 应该被禁止访问一个用 `@RolesAllowed(\"user\")` 保护的资源，因为它没有这个角色。"

#, fuzzy
#~ msgid "Security JPA Reference Guide "
#~ msgstr "安全JPA参考指南"

#, fuzzy
#~ msgid "Next we recommend you to see how `OpenId Connect` can be used to provide a secure, single sign on access to your Quarkus endpoints. Please follow xref:security-openid-connect.adoc[Quarkus - Using OpenID Connect to Protect Service Applications using Bearer Token Authorization] and xref:security-openid-connect-web-authentication.adoc[Quarkus - Using OpenID Connect to Protect Web Applications using Authorization Code Flow] guides."
#~ msgstr "接下来，我们建议你看看如何使用 `OpenId Connect` ，为你的Quarkus端点提供安全的单点登录访问。请关注 link:security-openid-connect.html[Quarkus - 使用OpenID连接来保护服务应用程序，使用承载令牌授权] 和 link:security-openid-connect-web-authentication.html[Quarkus - 使用OpenID连接来保护Web应用程序，使用授权代码流] 指南。"

#, fuzzy
#~ msgid "For a complete reference to Quarkus Security please read a xref:security.adoc[Quarkus Security] document."
#~ msgstr "关于Quarkus安全的完整参考，请阅读 link:security.html[Quarkus安全] 文件。"
