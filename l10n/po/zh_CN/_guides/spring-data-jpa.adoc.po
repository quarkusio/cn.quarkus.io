# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/spring-data-jpa.adoc:6
#, fuzzy, no-wrap
msgid "Extension for Spring Data API"
msgstr "春天数据API的扩展"

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:12
#, fuzzy
msgid "While users are encouraged to use Hibernate ORM with Panache for Relational Database access, Quarkus provides a compatibility layer for Spring Data JPA repositories in the form of the `spring-data-jpa` extension."
msgstr "虽然我们鼓励用户使用Hibernate ORM与Panache来访问关系型数据库，但Quarkus以 `spring-data-jpa` 扩展的形式为Spring Data JPA存储库提供了一个兼容层。"

#. type: Title ==
#: upstream/_guides/spring-data-jpa.adoc:13
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: upstream/_guides/spring-data-jpa.adoc:17
#, fuzzy, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:21
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议你按照下面几节的说明，一步一步地创建应用程序。然而，你可以直接进入已完成的例子。"

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:23
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库。 `git clone {quickstarts-clone-url}` ，或者下载一个{quickstarts-archive-url}[存档]。"

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:25
#, fuzzy
msgid "The solution is located in the `spring-data-jpa-quickstart` {quickstarts-tree-url}/spring-data-jpa-quickstart[directory]."
msgstr "该解决方案位于 `spring-data-jpa-quickstart` {quickstarts-treeurl}/spring-data-jpa-quickstart[目录]中。"

#. type: Title ==
#: upstream/_guides/spring-data-jpa.adoc:26
#, fuzzy, no-wrap
msgid "Creating the Maven project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:29
#, fuzzy
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。用以下命令创建一个新项目。"

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:35
#, fuzzy
msgid "This command generates a Maven project and imports the `spring-data-jpa` extension."
msgstr "该命令生成一个Maven项目并导入 `spring-data-jpa` 扩展。"

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:38
#, fuzzy
msgid "If you already have your Quarkus project configured, you can add the `spring-data-jpa` extension to your project by running the following command in your project base directory:"
msgstr "如果你已经配置了你的Quarkus项目，你可以通过在你的项目基础目录下运行以下命令，将 `spring-data-jpa` 扩展到你的项目。"

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:42
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"spring-data-jpa\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:45
#, fuzzy
msgid "This will add the following to your build file:"
msgstr "这将在你的构建文件中添加以下内容。"

#. type: Block title
#: upstream/_guides/spring-data-jpa.adoc:47
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:53
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-spring-data-jpa</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/spring-data-jpa.adoc:56
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:59
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-spring-data-jpa\")\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/spring-data-jpa.adoc:61
#, fuzzy, no-wrap
msgid "Define the Entity"
msgstr "定义实体"

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:64
#, fuzzy
msgid "Throughout the course of this guide, the following JPA Entity will be used:"
msgstr "在本指南的整个过程中，将使用以下JPA实体。"

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:68
#: upstream/_guides/spring-data-jpa.adoc:170
#: upstream/_guides/spring-data-jpa.adoc:193
#: upstream/_guides/spring-data-jpa.adoc:266
#: upstream/_guides/spring-data-jpa.adoc:431
#, no-wrap
msgid "package org.acme.spring.data.jpa;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:72
#, no-wrap
msgid ""
"import javax.persistence.Entity;\n"
"import javax.persistence.GeneratedValue;\n"
"import javax.persistence.Id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:75
#, no-wrap
msgid ""
"@Entity\n"
"public class Fruit {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:79
#, no-wrap
msgid ""
"    @Id\n"
"    @GeneratedValue\n"
"    private Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:81
#, no-wrap
msgid "    private String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:83
#, no-wrap
msgid "    private String color;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:87
#, no-wrap
msgid ""
"    public Fruit() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:92
#, no-wrap
msgid ""
"    public Fruit(String name, String color) {\n"
"        this.name = name;\n"
"        this.color = color;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:96
#, no-wrap
msgid ""
"    public Long getId() {\n"
"        return id;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:100
#, no-wrap
msgid ""
"    public void setId(Long id) {\n"
"        this.id = id;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:104
#, no-wrap
msgid ""
"    public String getName() {\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:108
#, no-wrap
msgid ""
"    public void setName(String name) {\n"
"        this.name = name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:112
#, no-wrap
msgid ""
"    public String getColor() {\n"
"        return color;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:117
#, no-wrap
msgid ""
"    public void setColor(String color) {\n"
"        this.color = color;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/spring-data-jpa.adoc:120
#, fuzzy, no-wrap
msgid "Configure database access properties"
msgstr "配置数据库访问属性"

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:123
#, fuzzy
msgid "Add the following properties to `application.properties` to configure access to a local PostgreSQL instance."
msgstr "添加以下属性到 `application.properties` 以配置对本地PostgreSQL实例的访问。"

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:133
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.datasource.username=quarkus_test\n"
"quarkus.datasource.password=quarkus_test\n"
"quarkus.datasource.jdbc.url=jdbc:postgresql:quarkus_test\n"
"quarkus.datasource.jdbc.max-size=8\n"
"quarkus.datasource.jdbc.min-size=2\n"
"quarkus.hibernate-orm.database.generation=drop-and-create\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:136
#, fuzzy
msgid "This configuration assumes that PostgreSQL will be running locally."
msgstr "这个配置假定PostgreSQL将在本地运行。"

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:138
#, fuzzy
msgid "A very easy way to accomplish that is by using the following Docker command:"
msgstr "实现这一目标的一个非常简单的方法是使用以下Docker命令。"

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:142
#, no-wrap
msgid "docker run -it --rm=true --name quarkus_test -e POSTGRES_USER=quarkus_test -e POSTGRES_PASSWORD=quarkus_test -e POSTGRES_DB=quarkus_test -p 5432:5432 postgres:14.1\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:145
#, fuzzy
msgid "If you plan on using a different setup, please change your `application.properties` accordingly."
msgstr "如果你计划使用不同的设置，请相应改变你的 `application.properties` 。"

#. type: Title ==
#: upstream/_guides/spring-data-jpa.adoc:146
#, fuzzy, no-wrap
msgid "Prepare the data"
msgstr "准备好数据"

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:150
#, fuzzy
msgid "To make it easier to showcase some capabilities of Spring Data JPA on Quarkus, some test data should be inserted into the database by adding the following content to a new file named `src/main/resources/import.sql`:"
msgstr "为了更容易展示Spring Data JPA在Quarkus上的一些功能，应该将一些测试数据插入数据库，在一个名为 `src/main/resources/import.sql` 的新文件中加入以下内容。"

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:158
#, no-wrap
msgid ""
"INSERT INTO fruit(id, name, color) VALUES (1, 'Cherry', 'Red');\n"
"INSERT INTO fruit(id, name, color) VALUES (2, 'Apple', 'Red');\n"
"INSERT INTO fruit(id, name, color) VALUES (3, 'Banana', 'Yellow');\n"
"INSERT INTO fruit(id, name, color) VALUES (4, 'Avocado', 'Green');\n"
"INSERT INTO fruit(id, name, color) VALUES (5, 'Strawberry', 'Red');\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:161
#, fuzzy
msgid "Hibernate ORM will execute these queries on application startup."
msgstr "Hibernate ORM将在应用程序启动时执行这些查询。"

#. type: Title ==
#: upstream/_guides/spring-data-jpa.adoc:162
#, fuzzy, no-wrap
msgid "Define the repository"
msgstr "定义存储库"

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:166
#, fuzzy
msgid "It is now time to define the repository that will be used to access `Fruit`.  In a typical Spring Data fashion create a repository like so:"
msgstr "现在是时候定义将用于访问 `Fruit` 的存储库了。以典型的Spring Data方式创建一个存储库，像这样。"

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:172
#, no-wrap
msgid "import org.springframework.data.repository.CrudRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:174
#: upstream/_guides/spring-data-jpa.adoc:465
#, no-wrap
msgid "import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:176
#, no-wrap
msgid "public interface FruitRepository extends CrudRepository<Fruit, Long> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:179
#, no-wrap
msgid ""
"    List<Fruit> findByColor(String color);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:184
#, fuzzy
msgid "The `FruitRepository` above extends Spring Data's `org.springframework.data.repository.CrudRepository` which means that all of the latter's methods are available to `FruitRepository`.  Additionally `findByColor` is defined whose purpose is to return all Fruit entities that match the specified color."
msgstr "上面的 `FruitRepository` 扩展了Spring Data的 `org.springframework.data.repository.CrudRepository` ，这意味着后者的所有方法都可用于 `FruitRepository` 。此外， `findByColor` ，其目的是返回所有符合指定颜色的水果实体。"

#. type: Title ==
#: upstream/_guides/spring-data-jpa.adoc:185
#, fuzzy, no-wrap
msgid "Update the JAX-RS resource"
msgstr "更新JAX-RS资源"

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:189
#, fuzzy
msgid "With the repository in place, the next order of business is to create the JAX-RS resource that will use the `FruitRepository`.  Create `FruitResource` with the following content:"
msgstr "有了资源库，下一步就是创建JAX-RS资源，它将使用 `FruitRepository` 。 创建 `FruitResource` ，内容如下。"

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:199
#, no-wrap
msgid ""
"import javax.ws.rs.DELETE;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.PUT;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:202
#, no-wrap
msgid ""
"import java.util.List;\n"
"import java.util.Optional;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:205
#, no-wrap
msgid ""
"@Path(\"/fruits\")\n"
"public class FruitResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:207
#, no-wrap
msgid "    private final FruitRepository fruitRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:211
#, no-wrap
msgid ""
"    public FruitResource(FruitRepository fruitRepository) {\n"
"        this.fruitRepository = fruitRepository;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:216
#, no-wrap
msgid ""
"    @GET\n"
"    public Iterable<Fruit> findAll() {\n"
"        return fruitRepository.findAll();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:223
#, no-wrap
msgid ""
"    @DELETE\n"
"    @Path(\"{id}\")\n"
"    public void delete(long id) {\n"
"        fruitRepository.deleteById(id);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:229
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/name/{name}/color/{color}\")\n"
"    public Fruit create(String name, String color) {\n"
"        return fruitRepository.save(new Fruit(name, color));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:239
#, no-wrap
msgid ""
"    @PUT\n"
"    @Path(\"/id/{id}/color/{color}\")\n"
"    public Fruit changeColor(Long id, String color) {\n"
"        Optional<Fruit> optional = fruitRepository.findById(id);\n"
"        if (optional.isPresent()) {\n"
"            Fruit fruit = optional.get();\n"
"            fruit.setColor(color);\n"
"            return fruitRepository.save(fruit);\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:242
#, no-wrap
msgid ""
"        throw new IllegalArgumentException(\"No Fruit with id \" + id + \" exists\");\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:249
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/color/{color}\")\n"
"    public List<Fruit> findByColor(String color) {\n"
"        return fruitRepository.findByColor(color);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:253
#, fuzzy
msgid "`FruitResource` now provides a few REST endpoints that can be used to perform CRUD operation on `Fruit`."
msgstr " `FruitResource` 现在提供了一些REST端点，可以用来在 。 `Fruit` "

#. type: Title ===
#: upstream/_guides/spring-data-jpa.adoc:254
#, fuzzy, no-wrap
msgid "Note on Spring Web"
msgstr "春季网络的说明"

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:258
#, fuzzy
msgid "The JAX-RS resource can also be substituted with a Spring Web controller as Quarkus supports REST endpoint definition using Spring controllers.  See the xref:spring-web.adoc[Spring Web guide] for more details."
msgstr "JAX-RS资源也可以用Spring Web控制器代替，因为Quarkus支持使用Spring控制器定义REST端点。更多细节请参见 link:spring-web.html[Spring Web指南] 。"

#. type: Title ==
#: upstream/_guides/spring-data-jpa.adoc:259
#, fuzzy, no-wrap
msgid "Update the test"
msgstr "更新测试"

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:262
#, fuzzy
msgid "To test the capabilities of `FruitRepository` proceed to update the content of `FruitResourceTest` to:"
msgstr "为了测试 `FruitRepository` 的能力，继续将 `FruitResourceTest` 的内容更新为。"

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:269
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:275
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.containsString;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
"import static org.hamcrest.CoreMatchers.notNullValue;\n"
"import static org.hamcrest.core.IsNot.not;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:278
#, no-wrap
msgid ""
"@QuarkusTest\n"
"class FruitResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:291
#, no-wrap
msgid ""
"    @Test\n"
"    void testListAllFruits() {\n"
"        //List all, should have all 3 fruits the database has initially:\n"
"        given()\n"
"                .when().get(\"/fruits\")\n"
"                .then()\n"
"                .statusCode(200)\n"
"                .body(\n"
"                        containsString(\"Cherry\"),\n"
"                        containsString(\"Apple\"),\n"
"                        containsString(\"Banana\")\n"
"                );\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:298
#, no-wrap
msgid ""
"        //Delete the Cherry:\n"
"        given()\n"
"                .when().delete(\"/fruits/1\")\n"
"                .then()\n"
"                .statusCode(204)\n"
"        ;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:309
#, no-wrap
msgid ""
"        //List all, cherry should be missing now:\n"
"        given()\n"
"                .when().get(\"/fruits\")\n"
"                .then()\n"
"                .statusCode(200)\n"
"                .body(\n"
"                        not(containsString(\"Cherry\")),\n"
"                        containsString(\"Apple\"),\n"
"                        containsString(\"Banana\")\n"
"                );\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:318
#, no-wrap
msgid ""
"        //Create a new Fruit\n"
"        given()\n"
"                .when().post(\"/fruits/name/Orange/color/Orange\")\n"
"                .then()\n"
"                .statusCode(200)\n"
"                .body(containsString(\"Orange\"))\n"
"                .body(\"id\", notNullValue())\n"
"                .extract().body().jsonPath().getString(\"id\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:330
#, no-wrap
msgid ""
"        //List all, Orange should be present now:\n"
"        given()\n"
"                .when().get(\"/fruits\")\n"
"                .then()\n"
"                .statusCode(200)\n"
"                .body(\n"
"                        not(containsString(\"Cherry\")),\n"
"                        containsString(\"Apple\"),\n"
"                        containsString(\"Orange\")\n"
"                );\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:339
#, no-wrap
msgid ""
"    @Test\n"
"    void testFindByColor() {\n"
"        //Find by color that no fruit has\n"
"        given()\n"
"                .when().get(\"/fruits/color/Black\")\n"
"                .then()\n"
"                .statusCode(200)\n"
"                .body(\"size()\", is(0));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:349
#, no-wrap
msgid ""
"        //Find by color that multiple fruits have\n"
"        given()\n"
"                .when().get(\"/fruits/color/Red\")\n"
"                .then()\n"
"                .statusCode(200)\n"
"                .body(\n"
"                        containsString(\"Apple\"),\n"
"                        containsString(\"Strawberry\")\n"
"                );\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:357
#, no-wrap
msgid ""
"        //Find by color that matches\n"
"        given()\n"
"                .when().get(\"/fruits/color/Green\")\n"
"                .then()\n"
"                .statusCode(200)\n"
"                .body(\"size()\", is(1))\n"
"                .body(containsString(\"Avocado\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:364
#, no-wrap
msgid ""
"        //Update color of Avocado\n"
"        given()\n"
"                .when().put(\"/fruits/id/4/color/Black\")\n"
"                .then()\n"
"                .statusCode(200)\n"
"                .body(containsString(\"Black\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:376
#, no-wrap
msgid ""
"        //Find by color that Avocado now has\n"
"        given()\n"
"                .when().get(\"/fruits/color/Black\")\n"
"                .then()\n"
"                .statusCode(200)\n"
"                .body(\"size()\", is(1))\n"
"                .body(\n"
"                        containsString(\"Black\"),\n"
"                        containsString(\"Avocado\")\n"
"                );\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:378
#: upstream/_guides/spring-data-jpa.adoc:490
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:381
#, fuzzy
msgid "The test can be easily run by issuing:"
msgstr "该测试可以很容易地通过发布来运行。"

#. type: Title ==
#: upstream/_guides/spring-data-jpa.adoc:384
#, fuzzy, no-wrap
msgid "Package and run the application"
msgstr "包装和运行应用程序"

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:388
#, fuzzy
msgid "Quarkus dev mode works with the defined repositories just like with any other Quarkus extension, greatly enhancing your productivity during the dev cycle.  The application can be started in dev mode as usual using:"
msgstr "Quarkus开发模式就像其他Quarkus扩展一样与定义的软件库一起工作，极大地提高了你在开发周期中的生产力。应用程序可以像往常一样在开发模式下启动，使用。"

#. type: Title ==
#: upstream/_guides/spring-data-jpa.adoc:391
#, fuzzy, no-wrap
msgid "Run the application as a native binary"
msgstr "以本地二进制文件的形式运行应用程序"

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:394
#, fuzzy
msgid "You can of course create a native executable following the instructions of the xref:building-native-image.adoc[this guide]."
msgstr "当然，你可以按照 link:building-native-image.html[本指南] 的说明创建一个本地可执行文件。"

#. type: Title ==
#: upstream/_guides/spring-data-jpa.adoc:395
#, fuzzy, no-wrap
msgid "Supported Spring Data JPA functionalities"
msgstr "支持的Spring Data JPA功能"

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:398
#, fuzzy
msgid "Quarkus currently supports a subset of Spring Data JPA's features, namely the most useful and most commonly used features."
msgstr "Quarkus目前支持Spring Data JPA的一个子集，即最有用和最常用的功能。"

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:403
#, fuzzy
msgid "An important part of this support is that all repository generation is done at build time thus ensuring that all supported features work correctly in native mode.  Moreover, developers know at build time whether or not their repository method names can be converted to proper JPQL queries.  This also means that if a method name indicates that a field should be used that is not part of the Entity, developers will get the relevant error at build time."
msgstr "这种支持的一个重要部分是，所有版本库的生成都是在构建时完成的，从而确保所有支持的功能在本地模式下正确工作。此外，开发人员在构建时就知道他们的资源库方法名是否可以转换为正确的JPQL查询。这也意味着，如果一个方法名表明应该使用一个不属于实体的字段，开发者将在构建时得到相关错误。"

#. type: Title ===
#: upstream/_guides/spring-data-jpa.adoc:404
#, fuzzy, no-wrap
msgid "What is supported"
msgstr "支持什么"

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:407
#, fuzzy
msgid "The following sections described the most important supported features of Spring Data JPA."
msgstr "下面的章节描述了Spring Data JPA最重要的支持特性。"

#. type: Title ====
#: upstream/_guides/spring-data-jpa.adoc:408
#, fuzzy, no-wrap
msgid "Automatic repository implementation generation"
msgstr "自动生成资源库实施"

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:411
#, fuzzy
msgid "Interfaces that extend any of the following Spring Data repositories are automatically implemented:"
msgstr "扩展以下任何一个Spring Data存储库的接口都会被自动实现。"

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:413
#, fuzzy
msgid "`org.springframework.data.repository.Repository`"
msgstr " `org.springframework.data.repository.Repository` "

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:414
#, fuzzy
msgid "`org.springframework.data.repository.CrudRepository`"
msgstr " `org.springframework.data.repository.CrudRepository` "

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:415
#, fuzzy
msgid "`org.springframework.data.repository.PagingAndSortingRepository`"
msgstr " `org.springframework.data.repository.PagingAndSortingRepository` "

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:416
#, fuzzy
msgid "`org.springframework.data.jpa.repository.JpaRepository`"
msgstr " `org.springframework.data.jpa.repository.JpaRepository` "

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:419
#, fuzzy
msgid "The generated repositories are also registered as beans so they can be injected into any other bean.  Furthermore the methods that update the database are automatically annotated with `@Transactional`."
msgstr "生成的资源库也被注册为Bean，因此它们可以被注入到任何其他Bean中。此外，更新数据库的方法会自动注解为 `@Transactional` 。"

#. type: Title ====
#: upstream/_guides/spring-data-jpa.adoc:420
#, fuzzy, no-wrap
msgid "Fine tuning of repository definition"
msgstr "对存储库定义进行微调"

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:424
#, fuzzy
msgid "This allows user defined repository interfaces to cherry-pick methods from any of the supported Spring Data repository interfaces without having to extend those interfaces.  This is particularly useful when for example a repository needs to use some methods from `CrudRepository` but it's undesirable to expose the full list of methods of said interface."
msgstr "这允许用户定义的版本库接口从任何支持的Spring Data版本库接口中挑选方法，而不需要扩展这些接口。例如，当存储库需要使用 `CrudRepository` 中的一些方法，但不希望公开该接口的全部方法列表时，这就特别有用。"

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:427
#, fuzzy
msgid "Assume for example that a `PersonRepository` that shouldn't extend `CrudRepository` but would like to use `save` and `findById` methods which are defined in said interface.  In such a case, `PersonRepository` would look like so:"
msgstr "例如，假设一个 `PersonRepository` ，它不应该扩展 `CrudRepository` ，但想使用 `save` 和 `findById` ，这些方法在上述接口中定义。在这种情况下， `PersonRepository` 将看起来像这样。"

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:433
#, no-wrap
msgid "import org.springframework.data.repository.Repository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:435
#, no-wrap
msgid "public interface PersonRepository extends Repository<Person, Long> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:437
#, no-wrap
msgid "    Person save(Person entity);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:440
#, no-wrap
msgid ""
"    Optional<Person> findById(Person entity);\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/spring-data-jpa.adoc:442
#, fuzzy, no-wrap
msgid "Customizing individual repositories using repository fragments"
msgstr "使用存储库片段定制单个存储库"

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:446
#, fuzzy
msgid "Repositories can be enriched with additional functionality or override the default implementation of methods of the supported Spring Data repositories.  This is best shown with an example."
msgstr "存储库可以用额外的功能来充实，或者覆盖所支持的Spring Data存储库的方法的默认实现。这最好用一个例子来说明。"

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:448
#, fuzzy
msgid "A repository fragment is defined as so:"
msgstr "存储库片段是这样定义的。"

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:452
#, no-wrap
msgid "public interface PersonFragment {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:455
#, no-wrap
msgid ""
"    // custom findAll\n"
"    List<Person> findAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:458
#, no-wrap
msgid ""
"    void makeNameUpperCase(Person person);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:461
#, fuzzy
msgid "The implementation of that fragment looks like this:"
msgstr "该片段的实现看起来像这样。"

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:467
#, no-wrap
msgid "import io.quarkus.hibernate.orm.panache.runtime.JpaOperations;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:469
#, no-wrap
msgid "public class PersonFragmentImpl implements PersonFragment {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:475
#, no-wrap
msgid ""
"    @Override\n"
"    public List<Person> findAll() {\n"
"        // do something here\n"
"        return (List<Person>) JpaOperations.findAll(Person.class).list();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:481
#, no-wrap
msgid ""
"    @Override\n"
"    public void makeNameUpperCase(Person person) {\n"
"        person.setName(person.getName().toUpperCase());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:484
#, fuzzy
msgid "Then the actual `PersonRepository` interface to be used would look like:"
msgstr "然后，实际要使用的 `PersonRepository` 接口会是这样的。"

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:488
#, no-wrap
msgid "public interface PersonRepository extends JpaRepository<Person, Long>, PersonFragment {\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/spring-data-jpa.adoc:492
#, fuzzy, no-wrap
msgid "Derived query methods"
msgstr "衍生的查询方法"

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:496
#, fuzzy
msgid "Methods of repository interfaces that follow the Spring Data conventions can be automatically implemented (unless they fall into one of the unsupported cases listed later on).  This means that methods like the following will all work:"
msgstr "遵循Spring Data约定的存储库接口的方法可以自动实现（除非它们属于后面列出的不支持的情况）。这意味着，像下面这样的方法都可以使用。"

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:500
#, no-wrap
msgid "public interface PersonRepository extends CrudRepository<Person, Long> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:502
#, no-wrap
msgid "    List<Person> findByName(String name);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:504
#, no-wrap
msgid "    Person findByNameBySsn(String ssn);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:506
#, no-wrap
msgid "    Optional<Person> findByNameBySsnIgnoreCase(String ssn);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:508
#, no-wrap
msgid "    boolean existsBookByYearOfBirthBetween(Integer start, Integer end);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:510
#, no-wrap
msgid "    List<Person> findByName(String name, Sort sort);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:512
#, no-wrap
msgid "    Page<Person> findByNameOrderByJoined(String name, Pageable pageable);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:514
#, no-wrap
msgid "    List<Person> findByNameOrderByAge(String name);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:516
#, no-wrap
msgid "    List<Person> findByNameOrderByAgeDesc(String name, Pageable pageable);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:518
#, no-wrap
msgid "    List<Person> findByAgeBetweenAndNameIsNotNull(int lowerAgeBound, int upperAgeBound);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:520
#, no-wrap
msgid "    List<Person> findByAgeGreaterThanEqualOrderByAgeAsc(int age);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:522
#, no-wrap
msgid "    List<Person> queryByJoinedIsAfter(Date date);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:524
#, no-wrap
msgid "    Collection<Person> readByActiveTrueOrderByAgeDesc();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:526
#, no-wrap
msgid "    Long countByActiveNot(boolean active);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:528
#, no-wrap
msgid "    List<Person> findTop3ByActive(boolean active, Sort sort);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:531
#, no-wrap
msgid ""
"    Stream<Person> findPersonByNameAndSurnameAllIgnoreCase(String name, String surname);\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/spring-data-jpa.adoc:533
#, fuzzy, no-wrap
msgid "User defined queries"
msgstr "用户定义的查询"

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:536
#, fuzzy
msgid "User supplied queries contained in the `@Query` annotation. For example things like the following all work:"
msgstr "用户提供的查询包含在 `@Query` 注释中。例如，像下面这样的事情都可以。"

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:540
#, no-wrap
msgid "public interface MovieRepository extends CrudRepository<Movie, Long> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:542
#, no-wrap
msgid "    Movie findFirstByOrderByDurationDesc();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:545
#, no-wrap
msgid ""
"    @Query(\"select m from Movie m where m.rating = ?1\")\n"
"    Iterator<Movie> findByRating(String rating);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:548
#, no-wrap
msgid ""
"    @Query(\"from Movie where title = ?1\")\n"
"    Movie findByTitle(String title);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:551
#, no-wrap
msgid ""
"    @Query(\"select m from Movie m where m.duration > :duration and m.rating = :rating\")\n"
"    List<Movie> withRatingAndDurationLargerThan(@Param(\"duration\") int duration, @Param(\"rating\") String rating);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:554
#, no-wrap
msgid ""
"    @Query(\"from Movie where title like concat('%', ?1, '%')\")\n"
"    List<Object[]> someFieldsWithTitleLike(String title, Sort sort);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:558
#, no-wrap
msgid ""
"    @Modifying\n"
"    @Query(\"delete from Movie where rating = :rating\")\n"
"    void deleteByRating(@Param(\"rating\") String rating);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:562
#, no-wrap
msgid ""
"    @Modifying\n"
"    @Query(\"delete from Movie where title like concat('%', ?1, '%')\")\n"
"    Long deleteByTitleLike(String title);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:566
#, no-wrap
msgid ""
"    @Modifying\n"
"    @Query(\"update Movie m set m.rating = :newName where m.rating = :oldName\")\n"
"    int changeRatingToNewName(@Param(\"newName\") String newName, @Param(\"oldName\") String oldName);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:570
#, no-wrap
msgid ""
"    @Modifying\n"
"    @Query(\"update Movie set rating = null where title =?1\")\n"
"    void setRatingToNullForTitle(String title);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:574
#, no-wrap
msgid ""
"    @Query(\"from Movie order by length(title)\")\n"
"    Slice<Movie> orderByTitleLength(Pageable pageable);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:576
#, fuzzy
msgid "All methods that are annotated with `@Modifying` will automatically be annotated with `@Transactional`."
msgstr "所有被注解为 `@Modifying` 的方法将自动被注解为 `@Transactional` 。"

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:578
#, fuzzy
msgid "In Quarkus, `@Param` is optional when parameter names have been compiled to bytecode (which is active by default in generated projects)."
msgstr "在Quarkus中，当参数名称被编译为字节码时， `@Param` 是可选的（在生成的项目中默认为激活）。"

#. type: Title ====
#: upstream/_guides/spring-data-jpa.adoc:579
#, fuzzy, no-wrap
msgid "Naming Strategies"
msgstr "命名策略"

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:582
#, fuzzy
msgid "Hibernate ORM maps property names using a physical naming strategy and an implicit naming strategy. If you wish to use Spring Boot's default naming strategies, the following properties need to be set:"
msgstr "Hibernate ORM使用物理命名策略和隐式命名策略来映射属性名称。如果你希望使用Spring Boot的默认命名策略，需要设置以下属性。"

#. type: delimited block -
#: upstream/_guides/spring-data-jpa.adoc:587
#, no-wrap
msgid ""
"quarkus.hibernate-orm.physical-naming-strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy\n"
"quarkus.hibernate-orm.implicit-naming-strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/spring-data-jpa.adoc:589
#, fuzzy, no-wrap
msgid "More examples"
msgstr "更多例子"

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:592
#, fuzzy
msgid "An extensive list of examples can be seen in the https://github.com/quarkusio/quarkus/tree/main/integration-tests/spring-data-jpa[integration tests] directory which is located inside the Quarkus source code."
msgstr "在位于Quarkus源代码内的 link:https://github.com/quarkusio/quarkus/tree/main/integration-tests/spring-data-jpa[集成测试] 目录中，可以看到大量的例子。"

#. type: Title ===
#: upstream/_guides/spring-data-jpa.adoc:593
#, fuzzy, no-wrap
msgid "What is currently unsupported"
msgstr "目前不支持的内容"

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:596
#, fuzzy
msgid "Methods of the `org.springframework.data.repository.query.QueryByExampleExecutor` interface - if any of these are invoked, a Runtime exception will be thrown."
msgstr " `org.springframework.data.repository.query.QueryByExampleExecutor` 接口的方法 - 如果这些方法中的任何一个被调用，将抛出一个运行时异常。"

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:597
#, fuzzy
msgid "QueryDSL support. No attempt will be made to generate implementations of any of the QueryDSL related repositories."
msgstr "支持QueryDSL。我们不会试图生成任何与QueryDSL相关的资源库的实现。"

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:598
#, fuzzy
msgid "Customizing the base repository for all repository interfaces in the code base."
msgstr "为代码库中的所有版本库接口定制基础版本库。"

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:600
#, fuzzy
msgid "In Spring Data JPA this is done by registering a class that extends `org.springframework.data.jpa.repository.support.SimpleJpaRepository` however in Quarkus this class is not used at all (since all the necessary plumbing is done at build time). Similar support might be added to Quarkus in the future."
msgstr "在Spring Data JPA中，这是通过注册一个扩展了 `org.springframework.data.jpa.repository.support.SimpleJpaRepository` 的类来完成的，但是在Quarkus中，这个类根本没有被使用（因为所有必要的管道都在构建时完成）。未来可能会在Quarkus中加入类似的支持。"

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:601
#, fuzzy
msgid "Using `java.util.concurrent.Future` and classes that extend it as return types of repository methods."
msgstr "使用 `java.util.concurrent.Future` 和扩展它的类作为资源库方法的返回类型。"

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:602
#, fuzzy
msgid "Native and named queries when using `@Query`"
msgstr "本机和命名查询，当使用 `@Query` "

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:604
#, fuzzy
msgid "https://github.com/spring-projects/spring-data-jpa/blob/main/src/main/asciidoc/jpa.adoc#entity-state-detection-strategies[Entity State-detection Strategies] via `EntityInformation`."
msgstr "link:https://github.com/spring-projects/spring-data-jpa/blob/main/src/main/asciidoc/jpa.adoc#entity-state-detection-strategies[实体状态检测策略] 通过 `EntityInformation` ."

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:606
#, fuzzy
msgid "The Quarkus team is exploring various alternatives to bridging the gap between the JPA and Reactive worlds."
msgstr "Quarkus团队正在探索各种替代方案，以弥合JPA和Reactive世界之间的差距。"

#. type: Title ==
#: upstream/_guides/spring-data-jpa.adoc:607
#, fuzzy, no-wrap
msgid "Important Technical Note"
msgstr "重要技术说明"

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:611
msgid "Please note that the Spring support in Quarkus does not start a Spring Application Context nor are any Spring infrastructure classes run.  Spring classes and annotations are only used for reading metadata and / or are used as user code method return types or parameter types."
msgstr ""

#. type: Title ==
#: upstream/_guides/spring-data-jpa.adoc:612
#, no-wrap
msgid "More Spring guides"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:615
msgid "Quarkus has more Spring compatibility features. See the following guides for more details:"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:617
msgid "xref:spring-di.adoc[Quarkus - Extension for Spring DI]"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:618
msgid "xref:spring-web.adoc[Quarkus - Extension for Spring Web]"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:619
msgid "xref:spring-security.adoc[Quarkus - Extension for Spring Security]"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:620
msgid "xref:spring-cloud-config-client.adoc[Quarkus - Reading properties from Spring Cloud Config Server]"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:621
msgid "xref:spring-boot-properties.adoc[Quarkus - Extension for Spring Boot properties]"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:622
msgid "xref:spring-cache.adoc[Quarkus - Extension for Spring Cache]"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:623
msgid "xref:spring-scheduled.adoc[Quarkus - Extension for Spring Scheduled]"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-data-jpa.adoc:623
msgid "xref:spring-data-rest.adoc[Quarkus - Extension for Spring Data REST]"
msgstr ""
