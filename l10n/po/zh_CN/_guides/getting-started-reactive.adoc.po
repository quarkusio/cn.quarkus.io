# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2023-10-25 13:13+0000\n"
"PO-Revision-Date: 2022-05-30 00:30+0800\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _guides/getting-started-reactive.adoc
#, no-wrap
msgid "Getting Started With Reactive"
msgstr "响应式入门"

#: _guides/getting-started-reactive.adoc
msgid ""
"_Reactive_ is a set of principles to build robust, efficient, and concurrent applications and systems.\n"
"These principles let you handle more load than traditional approaches while using the resources (CPU and memory) more efficiently while also reacting to failures gracefully."
msgstr ""

#: _guides/getting-started-reactive.adoc
msgid ""
"Quarkus is a _Reactive_ framework.\n"
"Since the beginning, _Reactive_ has been an essential tenet of the Quarkus architecture.\n"
"It includes many reactive features and offers a broad ecosystem."
msgstr ""

#: _guides/getting-started-reactive.adoc
msgid ""
"This guide is not an in-depth article about what _Reactive_ is and how Quarkus enables reactive architectures.\n"
"If you want to read more about these topics, refer to the xref:quarkus-reactive-architecture.adoc[Reactive Architecture guide], which provides an overview of the Quarkus reactive ecosystem."
msgstr ""

#: _guides/getting-started-reactive.adoc
msgid ""
"In this guide, we will get you started with some reactive features of Quarkus.\n"
"We are going to implement a simple CRUD application.\n"
"Yet, unlike in the xref:hibernate-orm-panache.adoc[Hibernate with Panache guide], it uses the reactive features of Quarkus."
msgstr ""

#. type: Plain text
#: _guides/getting-started-reactive.adoc
msgid "This guide will help you with:"
msgstr "本指南将帮助您："

#. type: Plain text
#: _guides/getting-started-reactive.adoc
msgid "Bootstrapping a reactive CRUD application with Quarkus"
msgstr "使用 Quarkus 引导响应式 CRUD 应用程序"

#. type: Plain text
#: _guides/getting-started-reactive.adoc
msgid "Using Hibernate Reactive with Panache to interact with a database in a reactive fashion"
msgstr "将 Hibernate Reactive 与 Panache 结合使用，以响应式方式与数据库进行交互"

#. type: Plain text
#: _guides/getting-started-reactive.adoc
msgid "Using RESTEasy Reactive to implement HTTP API while enforcing the reactive principle"
msgstr "使用 RESTEasy Reactive 实现 HTTP API，同时强制执行响应式原则"

#. type: Plain text
#: _guides/getting-started-reactive.adoc
msgid "Packaging and Running the application"
msgstr "打包和运行应用程序"

#. type: Title ==
#: _guides/getting-started-reactive.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#: _guides/getting-started-reactive.adoc
msgid ""
"Verify that Maven is using the Java version you expect.\n"
"If you have multiple JDKs installed, make sure Maven is using the expected one.\n"
"You can verify which JDK Maven uses by running `mvn --version.`"
msgstr ""

#. type: Title ==
#: _guides/getting-started-reactive.adoc
#, no-wrap
msgid "Imperative vs. Reactive: a question of threads"
msgstr "指令式与响应式：线程的问题"

#: _guides/getting-started-reactive.adoc
msgid ""
"As mentioned above, in this guide, we are going to implement a reactive CRUD application.\n"
"But you may wonder what the differences and benefits are in comparison to the traditional and imperative model."
msgstr ""

#: _guides/getting-started-reactive.adoc
msgid ""
"To better understand the contrast, we need to explain the difference between the reactive and imperative execution models.\n"
"It's essential to comprehend that _Reactive_ is not just a different execution model, but that distinction is necessary to understand this guide."
msgstr ""

#: _guides/getting-started-reactive.adoc
msgid ""
"In the traditional and imperative approach, frameworks assign a thread to handle the request.\n"
"So, the whole processing of the request runs on this worker thread.\n"
"This model does not scale very well.\n"
"Indeed, to handle multiple concurrent requests, you need multiple threads; and so your application concurrency is constrained by the number of threads.\n"
"In addition, these threads are blocked as soon as your code interacts with remote services.\n"
"So, it leads to inefficient usage of the resources, as you may need more threads, and each thread, as they are mapped to OS threads, has a cost in terms of memory and CPU."
msgstr ""

#: _guides/getting-started-reactive.adoc
msgid ""
"On the other side, the reactive model relies on non-blocking I/Os and a different execution model.\n"
"Non-blocking I/O provides an efficient way to deal with concurrent I/O.\n"
"A minimal amount of threads called I/O threads, can handle many concurrent I/O.\n"
"With such a model, request processing is not delegated to a worker thread but uses these I/O threads directly.It saves memory and CPU as there is no need to create worker threads to handle the requests.\n"
"It also improves the concurrency as it removes the constraint on the number of threads.\n"
"Finally, it also improves response time as it reduces the number of thread switches."
msgstr ""

#. type: Title ==
#: _guides/getting-started-reactive.adoc
#, no-wrap
msgid "From sequential to continuation style"
msgstr "从顺序到延续风格"

#: _guides/getting-started-reactive.adoc
msgid ""
"So, with the reactive execution model, the requests are processed using I/O threads.\n"
"But that's not all.\n"
"An I/O thread can handle multiple concurrent requests.\n"
"How? Here is the trick and one of the most significant differences between reactive and imperative."
msgstr ""

#: _guides/getting-started-reactive.adoc
msgid ""
"When processing a request requires interacting with a remote service, like an HTTP API or a database, it does not block the execution while waiting for the response.\n"
"Instead, it schedules the I/O operation and attaches a continuation, i.e., the request processing remaining code.\n"
"This continuation can be passed as a callback (a function invoked with the I/O outcome), or use more advanced constructs such as reactive programming or co-routines.\n"
"Regardless of how the continuation is expressed, the essential aspect is the release of the I/O thread and, as a consequence, the fact that this thread can be used to process another request.\n"
"When the scheduled I/O completes, the I/O thread executes the continuation, and the processing of the pending request continues."
msgstr ""

#: _guides/getting-started-reactive.adoc
msgid ""
"So, unlike the imperative model, where I/O blocks the execution, reactive switches to a continuation-based design, where the I/O threads are released, and continuation invoked when the I/Os complete.\n"
"As a result, the I/O thread can handle multiple concurrent requests, improving the overall concurrency of the application."
msgstr ""

#: _guides/getting-started-reactive.adoc
msgid ""
"But, there is a catch.\n"
"We need a way to write continuation-passing code.\n"
"There are many ways of doing this.\n"
"In Quarkus, we propose:"
msgstr ""

#. type: Plain text
#: _guides/getting-started-reactive.adoc
msgid "Mutiny - an intuitive and event-driven reactive programming library"
msgstr "Mutiny - 一个直观的事件驱动的响应式编程库"

#. type: Plain text
#: _guides/getting-started-reactive.adoc
msgid "Kotlin co-routines - a way to write asynchronous code in a sequential manner"
msgstr "Kotlin co-routines - 一种以顺序方式编写异步代码的方法"

#: _guides/getting-started-reactive.adoc
msgid ""
"In this guide, we will use Mutiny.\n"
"To know more about Mutiny, check the xref:mutiny-primer.adoc[Mutiny documentation]."
msgstr ""

#: _guides/getting-started-reactive.adoc
msgid ""
"Project Loom is coming to the JDK soon and proposes a virtual thread-based model.\n"
"The Quarkus architecture is ready to support Loom as soon as it's become globally available."
msgstr ""

#. type: Title ==
#: _guides/getting-started-reactive.adoc
#, no-wrap
msgid "Bootstrapping the Reactive Fruits application"
msgstr "启动响应式水果应用程序"

#. type: Plain text
#: _guides/getting-started-reactive.adoc
msgid "With this in mind, let's see how we can develop a CRUD application with Quarkus, which will use the I/O thread to handle the HTTP requests, interact with a database, process the result, and write the HTTP response; in other words: a reactive CRUD application."
msgstr "考虑到这一点，让我们看看如何使用Quarkus开发一个CRUD应用程序，它将使用I/O线程处理HTTP请求，与数据库交互，处理结果，并编写HTTP响应，换句话说：一个响应式CRUD应用程序。"

#. type: Plain text
#: _guides/getting-started-reactive.adoc
msgid "While we recommend you to follow the step-by-step instructions, you can find the final solution on https://github.com/quarkusio/quarkus-quickstarts/tree/main/hibernate-reactive-panache-quickstart."
msgstr "虽然我们建议您按照步骤操作，但您可以在 https://github.com/quarkusio/quarkus-quickstarts/tree/main/hibernate-reactive-panache-quickstart上找到最终的解决方案。"

#. type: Plain text
#: _guides/getting-started-reactive.adoc
msgid "First, go to https://code.quarkus.io[code.quarkus.io] and select the following extensions:"
msgstr "首先，访问 https://code.quarkus.io[code.quarkus.io] 并选择以下扩展："

#. type: Plain text
#: _guides/getting-started-reactive.adoc
msgid "RESTEasy Reactive Jackson"
msgstr ""

#. type: Plain text
#: _guides/getting-started-reactive.adoc
msgid "Hibernate Reactive with Panache"
msgstr ""

#. type: Plain text
#: _guides/getting-started-reactive.adoc
msgid "Reactive PostgreSQL client"
msgstr ""

#: _guides/getting-started-reactive.adoc
msgid ""
"The last extension is the reactive database driver for PostgreSQL.\n"
"Hibernate Reactive uses that driver to interact with the database without blocking the caller thread."
msgstr ""

#. type: Plain text
#: _guides/getting-started-reactive.adoc
msgid "Once selected, click on \"Generate your application\", download the zip file, unzip it and open the code in your favorite IDE."
msgstr "选中后，单击 \"Generate your application\"，下载压缩文件，解压缩并在您喜欢的IDE中打开代码。"

#. type: Title ==
#: _guides/getting-started-reactive.adoc
#, no-wrap
msgid "Reactive Panache Entity"
msgstr "响应式Panache实体"

#. type: Plain text
#: _guides/getting-started-reactive.adoc
msgid "Let's start with the `Fruit` entity.Create the `src/main/java/org/acme/hibernate/orm/panache/Fruit.java` file with the following content:"
msgstr "让我们从 `Fruit` 实体开始。创建 `src/main/java/org/acme/hibernate/orm/panache/Fruit.java` 文件，内容如下:"

#. type: Plain text
#: _guides/getting-started-reactive.adoc
msgid "Make sure you import the reactive variant of `PanacheEntity`."
msgstr "确保你导入了 `PanacheEntity` 的响应式类库。"

#: _guides/getting-started-reactive.adoc
msgid ""
"This class represents `Fruits`.\n"
"It's a straightforward entity with a single field (`name`).\n"
"Note that it uses `io.quarkus.hibernate.reactive.panache.PanacheEntity`, the reactive variant of `PanacheEntity`.\n"
"So, behind the scenes, Hibernate uses the execution model we described above.\n"
"It interacts with the database without blocking the thread.\n"
"In addition, this reactive `PanacheEntity` proposes a reactive API.\n"
"We will use this API to implement the REST endpoint."
msgstr ""

#. type: Plain text
#: _guides/getting-started-reactive.adoc
msgid "Before going further, open the `src/main/resources/application.properties` file and add:"
msgstr "在进行下一步之前，请打开 `src/main/resource/application.properties` 文件并添加下面这一段内容到该文件："

#. type: Plain text
#: _guides/getting-started-reactive.adoc
msgid "It instructs the application to use PostgreSQL for the database and to handle the database schema generation."
msgstr "它指示应用程序使用PostgreSQL数据库，并处理数据库模式的生成。"

#. type: Plain text
#: _guides/getting-started-reactive.adoc
msgid "In the same directory, create an `import.sql` file, which inserts a few fruits, so we don't start with an empty database in dev mode:"
msgstr "在同一个目录中，创建一个 `import.sql` 文件，它插入了一些水果数据，所以我们不会在dev模式中面对一个空数据库开始："

#: _guides/getting-started-reactive.adoc
msgid ""
"In a terminal, launch the application in dev mode using: `./mvnw quarkus:dev`.\n"
"Quarkus automatically starts a database instance for you and configure the application. Now we only need to implement the HTTP endpoint."
msgstr ""

#. type: Title ==
#: _guides/getting-started-reactive.adoc
#, no-wrap
msgid "Reactive Resource"
msgstr "响应式资源"

#: _guides/getting-started-reactive.adoc
msgid ""
"Because the interaction with the database is non-blocking and asynchronous, we need to use asynchronous constructs to implement our HTTP resource.\n"
"Quarkus uses Mutiny as its central reactive programming model.\n"
"So, it supports returning Mutiny types (`Uni` and `Multi`) from HTTP endpoints.\n"
"Also, our Fruit Panache entity exposes methods using these types, so we only need to implement the _glue_."
msgstr ""

#. type: Plain text
#: _guides/getting-started-reactive.adoc
msgid "Create the `src/main/java/org/acme/hibernate/orm/panache/FruitResource.java` file with the following content:"
msgstr "创建 `src/main/java/org/acme/hibernate/orm/panache/FruitResource.java` 文件，内容如下："

#: _guides/getting-started-reactive.adoc
msgid ""
"Let's start with the `getAll` method. The `getAll` method returns all the fruits stored in the database.\n"
"In the `FruitResource`, add the following code:"
msgstr ""

#. type: Plain text
#: _guides/getting-started-reactive.adoc
msgid "Open http://localhost:8080/fruits to invoke this method:"
msgstr "打开 http://localhost:8080/fruits 调用这个方法："

#: _guides/getting-started-reactive.adoc
msgid ""
"We get the expected JSON array.\n"
"RESTEasy Reactive automatically maps the list into a JSON Array, except if instructed otherwise."
msgstr ""

#: _guides/getting-started-reactive.adoc
msgid ""
"Look at the return type; it returns a `Uni` of `List<Fruit>`.\n"
"`Uni` is an asynchronous type.\n"
"It's a bit like a future.\n"
"It's a placeholder that will get its value (item) later.\n"
"When it receives the item (Mutiny says it _emits_ its item), you can attach some behavior.\n"
"That's how we express the continuation: get a uni, and when the uni emits its item, execute the rest of the processing."
msgstr ""

#: _guides/getting-started-reactive.adoc
msgid ""
"Reactive developers may wonder why we can't return a stream of fruits directly.\n"
"It tends to be a bad idea when dealing with a database.\n"
"Relational databases do not handle streaming well.\n"
"It’s a problem of protocols not designed for this use case.\n"
"So, to stream rows from the database, you need to keep a connection (and sometimes a transaction) open until all the rows are consumed.\n"
"If you have slow consumers, you break the golden rule of databases: don’t hold connections for too long.\n"
"Indeed, the number of connections is rather low, and having consumers keeping them for too long will dramatically reduce the concurrency of your application.\n"
"So, when possible, use a `Uni<List<T>>` and load the content.\n"
"If you have a large set of results, implement pagination."
msgstr ""

#. type: Plain text
#: _guides/getting-started-reactive.adoc
msgid "Let's continue our API with `getSingle`:"
msgstr "让我们用 `getSingle` 继续我们的API："

#: _guides/getting-started-reactive.adoc
msgid ""
"In this case, we use `Fruit.findById` to retrieve the fruit.\n"
"It returns a `Uni`, which will complete when the database has retrieved the row."
msgstr ""

#. type: Plain text
#: _guides/getting-started-reactive.adoc
msgid "The `create` method allows adding a new fruit to the database:"
msgstr "`create` 方法允许向数据库中添加新水果记录："

#: _guides/getting-started-reactive.adoc
msgid ""
"The code is a bit more involved.\n"
"To write to a database, we need a transaction, therefore we use `Panache.withTransaction` to obtain one (asynchronously) and proceed to call the `persist` method.\n"
"The `persist` method returns a `Uni` that emits the result of the insertion of the fruit in the database.\n"
"Once the insertion completes (which plays the role of the continuation), we create a `201 CREATED` HTTP response."
msgstr ""

#. type: Plain text
#: _guides/getting-started-reactive.adoc
msgid "If you have https://curl.se/[curl] on your machine, you can try the endpoint using:"
msgstr "如果在您的机器安装了 https://curl.se/[curl]命令，便可以尝试使用端点："

#. type: Plain text
#: _guides/getting-started-reactive.adoc
msgid "Following the same ideas, you can implement the other CRUD methods."
msgstr "遵循相同的思路，您可以实现其他CRUD方法。"

#. type: Title ==
#: _guides/getting-started-reactive.adoc
#, no-wrap
msgid "Testing and Running"
msgstr "测试和运行"

#: _guides/getting-started-reactive.adoc
msgid ""
"Testing a reactive application is similar to testing a non-reactive one: use the HTTP endpoint and verify the HTTP responses.\n"
"The fact that the application is reactive does not change anything."
msgstr ""

#. type: Plain text
#: _guides/getting-started-reactive.adoc
msgid "In https://github.com/quarkusio/quarkus-quickstarts/blob/main/hibernate-reactive-panache-quickstart/src/test/java/org/acme/hibernate/orm/panache/FruitsEndpointTest.java[FruitsEndpointTest.java] you can see how the test for the fruit application can be implemented."
msgstr "在 https://github.com/quarkusio/quarkus-quickstarts/blob/main/hibernate-reactive-panache-quickstart/src/test/java/org/acme/hibernate/orm/panache/FruitsEndpointTest.java[FruitsEndpointTest.java]中，您可以看到如何实现水果应用程序的测试。"

#. type: Plain text
#: _guides/getting-started-reactive.adoc
msgid "Packaging and running the application does not change either."
msgstr "打包和运行应用程序也不会改变。"

#. type: Plain text
#: _guides/getting-started-reactive.adoc
msgid "You can use the following command as usual:"
msgstr "您可以像往常一样使用以下命令："

#. type: Plain text
#: _guides/getting-started-reactive.adoc
msgid "or to build a native executable:"
msgstr "或者构建一个原生可执行文件："

#. type: Plain text
#: _guides/getting-started-reactive.adoc
msgid "You can also package the application in a container."
msgstr "还可以将应用程序打包在容器中。"

#. type: Plain text
#: _guides/getting-started-reactive.adoc
msgid "To run the application, don’t forget to start a database and provide the configuration to your application."
msgstr "要运行应用程序，不要忘记启动数据库并为应用程序提供配置。"

#. type: Plain text
#: _guides/getting-started-reactive.adoc
msgid "For example, you can use Docker to run your database:"
msgstr "例如，你可以使用Docker来运行你的数据库："

#. type: Plain text
#: _guides/getting-started-reactive.adoc
msgid "Then, launch the application using:"
msgstr "然后，使用以下命令启动应用程序："

#. type: Plain text
#: _guides/getting-started-reactive.adoc
msgid "Or, if you packaged your application as native executable, use:"
msgstr "或者，如果你将你的应用打包为原生可执行文件，使用："

#: _guides/getting-started-reactive.adoc
msgid ""
"The parameters passed to the application are described in the datasource guide.\n"
"There are other ways to configure the application - please check the xref:config-reference.adoc#configuration-sources[configuration guide] to have an overview of the possibilities (such as env variable, .env files and so on)."
msgstr ""

#. type: Title ==
#: _guides/getting-started-reactive.adoc
#, no-wrap
msgid "Going further"
msgstr "进一步探索"

#: _guides/getting-started-reactive.adoc
msgid ""
"This guide is a brief introduction to some reactive features offered by Quarkus.\n"
"Quarkus is a reactive framework, and so offers a lot of reactive features."
msgstr ""

#. type: Plain text
#: _guides/getting-started-reactive.adoc
msgid "If you want to continue on this topic check:"
msgstr "如果你想继续这个话题，请检查："

#. type: Plain text
#: _guides/getting-started-reactive.adoc
msgid "xref:quarkus-reactive-architecture.adoc[The Quarkus Reactive Architecture]"
msgstr "xref:quarkus-reactive-architecture.adoc[Quarkus响应式架构]"

#. type: Plain text
#: _guides/getting-started-reactive.adoc
msgid "xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]"
msgstr "xref:mutiny-primer.adoc[Mutiny - 一个直观的响应式编程库]"
