# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/getting-started.adoc:6
#, fuzzy, no-wrap
msgid "Creating Your First Application"
msgstr "创建你的第一个应用程序"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:23
#, fuzzy
msgid "Learn how to create a Hello World Quarkus app.  This guide covers:"
msgstr "学习如何创建一个Hello World Quarkus应用程序。本指南包括。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:25
#, fuzzy
msgid "Bootstrapping an application"
msgstr "引导一个应用程序"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:26
#, fuzzy
msgid "Creating a JAX-RS endpoint"
msgstr "创建一个JAX-RS端点"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:27
#, fuzzy
msgid "Injecting beans"
msgstr "注入豆子"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:28
#, fuzzy
msgid "Functional tests"
msgstr "功能测试"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:29
#, fuzzy
msgid "Packaging of the application"
msgstr "申请书的包装"

#. type: Title ==
#: upstream/_guides/getting-started.adoc:30
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Block title
#: upstream/_guides/getting-started.adoc:36
#, fuzzy, no-wrap
msgid "Verify Maven is using the Java you expect"
msgstr "验证Maven是否使用了你期望的Java"

#. type: delimited block =
#: upstream/_guides/getting-started.adoc:41
#, fuzzy
msgid "If you have multiple JDK's installed it is not certain Maven will pick up the expected java and you could end up with unexpected results.  You can verify which JDK Maven uses by running `mvn --version`."
msgstr "如果你安装了多个JDK，那么Maven不一定能找到预期的java，你可能会得到意想不到的结果。你可以通过运行 `mvn --version` ，验证Maven使用哪种JDK。"

#. type: Title ==
#: upstream/_guides/getting-started.adoc:44
#, fuzzy, no-wrap
msgid "Architecture"
msgstr "建筑学"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:48
#, fuzzy
msgid "In this guide, we create a straightforward application serving a `hello` endpoint. To demonstrate dependency injection, this endpoint uses a `greeting` bean."
msgstr "在本指南中，我们创建了一个简单的应用程序，为 `hello` 端点提供服务。为了演示依赖性注入，这个端点使用了一个 `greeting` bean。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_guides/getting-started.adoc:49
#, fuzzy, no-wrap
msgid "Architecture,"
msgstr "建筑。"

#. type: Target for macro image
#: upstream/_guides/getting-started.adoc:49
#, no-wrap
msgid "getting-started-architecture.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started.adoc:52
#, fuzzy
msgid "This guide also covers the testing of the endpoint."
msgstr "本指南还包括对终端的测试。"

#. type: Title ==
#: upstream/_guides/getting-started.adoc:53
#, fuzzy, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:56
#, fuzzy
msgid "We recommend that you follow the instructions from <<bootstrapping-the-project,Bootstrapping project>> and onwards to create the application step by step."
msgstr "我们建议你按照从 link:#bootstrapping-the-project[Bootstrapping项目] 开始的指示，一步一步地创建应用程序。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:58
#, fuzzy
msgid "However, you can go right to the completed example."
msgstr "然而，你可以直接进入完成的例子。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:60
#, fuzzy
msgid "Download an {quickstarts-archive-url}[archive] or clone the git repository:"
msgstr "下载一个{quickstarts-archive-url}[档案]或克隆git仓库。"

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:64
#, no-wrap
msgid "git clone {quickstarts-clone-url}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started.adoc:67
#, fuzzy
msgid "The solution is located in the `getting-started` {quickstarts-tree-url}/getting-started[directory]."
msgstr "该解决方案位于 `getting-started` {quickstarts-treeurl}/getting-started[目录]中。"

#. type: Title ==
#: upstream/_guides/getting-started.adoc:68
#, fuzzy, no-wrap
msgid "Bootstrapping the project"
msgstr "引导项目"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:71
#, fuzzy
msgid "The easiest way to create a new Quarkus project is to open a terminal and run the following command:"
msgstr "创建一个新的Quarkus项目最简单的方法是打开终端并运行以下命令。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:73
#, fuzzy
msgid "For Linux & MacOS users"
msgstr "针对Linux和MacOS用户"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:80
#, fuzzy
msgid "For Windows users"
msgstr "对于Windows用户"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:82
#, fuzzy
msgid "If using cmd , (don't use backward slash `\\` and put everything on the same line)"
msgstr "如果使用cmd ，（不要使用反斜线 `\\` ，并将所有内容放在同一行）"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:83
#, fuzzy
msgid "If using Powershell , wrap `-D` parameters in double quotes e.g. `\"-DprojectArtifactId=getting-started\"`"
msgstr "如果使用Powershell，用双引号包住 `-D` 参数，例如： `\"-DprojectArtifactId=getting-started\"` "

#. type: Plain text
#: upstream/_guides/getting-started.adoc:85
#, fuzzy
msgid "It generates the following in `./getting-started`:"
msgstr "它在 `./getting-started` 中产生了以下内容。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:87
#, fuzzy
msgid "the Maven structure"
msgstr "Maven的结构"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:88
#, fuzzy
msgid "an `org.acme.GreetingResource` resource exposed on `/hello`"
msgstr "一个 `org.acme.GreetingResource` 资源，暴露在 `/hello` "

#. type: Plain text
#: upstream/_guides/getting-started.adoc:89
#, fuzzy
msgid "an associated unit test"
msgstr "一个相关的单元测试"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:90
#, fuzzy
msgid "a landing page that is accessible on `http://localhost:8080` after starting the application"
msgstr "一个登陆页面，可在 `<a href=\"http://localhost:8080\" class=\"bare\">http://localhost:8080</a>` 启动应用程序后，可在"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:91
#, fuzzy
msgid "example `Dockerfile` files for both `native` and `jvm` modes in `src/main/docker`"
msgstr "示例 `Dockerfile` 文件，用于 `native` 和 `jvm` 两种模式，在 `src/main/docker` "

#. type: Plain text
#: upstream/_guides/getting-started.adoc:92
#, fuzzy
msgid "the application configuration file"
msgstr "应用程序的配置文件"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:96
#, fuzzy
msgid "Once generated, look at the `pom.xml`.  You will find the import of the Quarkus BOM, allowing you to omit the version of the different Quarkus dependencies.  In addition, you can see the `quarkus-maven-plugin` responsible of the packaging of the application and also providing the development mode."
msgstr "一旦生成，请看 `pom.xml` 。你会发现Quarkus BOM的导入，允许你省略不同Quarkus依赖的版本。此外，你可以看到 `quarkus-maven-plugin` ，负责应用程序的打包，也提供开发模式。"

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:110
#, no-wrap
msgid ""
"<dependencyManagement>\n"
"    <dependencies>\n"
"        <dependency>\n"
"            <groupId>${quarkus.platform.group-id}</groupId>\n"
"            <artifactId>quarkus-bom</artifactId>\n"
"            <version>${quarkus.platform.version}</version>\n"
"            <type>pom</type>\n"
"            <scope>import</scope>\n"
"        </dependency>\n"
"    </dependencies>\n"
"</dependencyManagement>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:130
#, no-wrap
msgid ""
"<build>\n"
"    <plugins>\n"
"        <plugin>\n"
"            <groupId>${quarkus.platform.group-id}</groupId>\n"
"            <artifactId>quarkus-maven-plugin</artifactId>\n"
"            <version>${quarkus-plugin.version}</version>\n"
"            <extensions>true</extensions>\n"
"            <executions>\n"
"                <execution>\n"
"                    <goals>\n"
"                        <goal>build</goal>\n"
"                        <goal>generate-code</goal>\n"
"                        <goal>generate-code-tests</goal>\n"
"                    </goals>\n"
"                </execution>\n"
"            </executions>\n"
"        </plugin>\n"
"    </plugins>\n"
"</build>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started.adoc:133
#, fuzzy
msgid "In a Gradle project, you would find a similar setup:"
msgstr "在Gradle项目中，你会发现一个类似的设置。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:135
#, fuzzy
msgid "the Quarkus Gradle plugin"
msgstr "Quarkus Gradle插件"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:136
#, fuzzy
msgid "an `enforcedPlatform` directive for the Quarkus BOM"
msgstr "一个 `enforcedPlatform` ，用于Quarkus BOM的指令。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:138
#, fuzzy
msgid "If we focus on the dependencies section, you can see the extension allowing the development of REST applications:"
msgstr "如果我们把重点放在依赖关系部分，你可以看到允许开发REST应用程序的扩展。"

#. type: Block title
#: upstream/_guides/getting-started.adoc:140
#: upstream/_guides/getting-started.adoc:325
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:146
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-reactive</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/getting-started.adoc:149
#: upstream/_guides/getting-started.adoc:340
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:152
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-resteasy-reactive\")\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/getting-started.adoc:154
#, fuzzy, no-wrap
msgid "The JAX-RS resources"
msgstr "JAX-RS的资源"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:157
#, fuzzy
msgid "During the project creation, the `src/main/java/org/acme/GreetingResource.java` file has been created with the following content:"
msgstr "在项目创建过程中， `src/main/java/org/acme/GreetingResource.java` 文件已被创建，其内容如下。"

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:161
#: upstream/_guides/getting-started.adoc:246
#: upstream/_guides/getting-started.adoc:264
#: upstream/_guides/getting-started.adoc:373
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:166
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:169
#: upstream/_guides/getting-started.adoc:273
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class GreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:176
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"Hello from RESTEasy Reactive\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started.adoc:179
#, fuzzy
msgid "It's a very simple REST endpoint, returning \"Hello from RESTEasy Reactive\" to requests on \"/hello\"."
msgstr "这是一个非常简单的REST端点，对\"/hello \"上的请求返回 \"来自RESTEasy Reactive的你好\"。"

#. type: Block title
#: upstream/_guides/getting-started.adoc:181
#, fuzzy, no-wrap
msgid "Differences with vanilla JAX-RS"
msgstr "与vanilla JAX-RS的区别"

#. type: delimited block =
#: upstream/_guides/getting-started.adoc:185
#, fuzzy
msgid "With Quarkus, there is no need to create an `Application` class. It's supported, but not required. In addition, only one instance of the resource is created and not one per request. You can configure this using the different `*Scoped` annotations (`ApplicationScoped`, `RequestScoped`, etc)."
msgstr "使用Quarkus，不需要创建一个 `Application` 类。它被支持，但不是必须的。此外，只有一个资源的实例被创建，而不是每个请求一个。你可以使用不同的 `*Scoped` 注释（ `ApplicationScoped` , `RequestScoped` , 等等）来配置。"

#. type: Title ==
#: upstream/_guides/getting-started.adoc:187
#, fuzzy, no-wrap
msgid "Running the application"
msgstr "运行应用程序"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:190
#, fuzzy
msgid "Now we are ready to run our application:"
msgstr "现在我们已经准备好运行我们的应用程序。"

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:213
#, no-wrap
msgid ""
"[INFO] --------------------< org.acme:getting-started >---------------------\n"
"[INFO] Building getting-started 1.0.0-SNAPSHOT\n"
"[INFO] --------------------------------[ jar ]---------------------------------\n"
"[INFO]\n"
"[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ getting-started ---\n"
"[INFO] Using 'UTF-8' encoding to copy filtered resources.\n"
"[INFO] skip non existing resourceDirectory <path>/getting-started/src/main/resources\n"
"[INFO]\n"
"[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ getting-started ---\n"
"[INFO] Changes detected - recompiling the module!\n"
"[INFO] Compiling 2 source files to <path>/getting-started/target/classes\n"
"[INFO]\n"
"[INFO] --- quarkus-maven-plugin:<version>:dev (default-cli) @ getting-started ---\n"
"Listening for transport dt_socket at address: 5005\n"
"2019-02-28 17:05:22,347 INFO  [io.qua.dep.QuarkusAugmentor] (main) Beginning quarkus augmentation\n"
"2019-02-28 17:05:22,635 INFO  [io.qua.dep.QuarkusAugmentor] (main) Quarkus augmentation completed in 288ms\n"
"2019-02-28 17:05:22,770 INFO  [io.quarkus] (main) Quarkus started in 0.668s. Listening on: http://localhost:8080\n"
"2019-02-28 17:05:22,771 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy-reactive]\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started.adoc:216
#, fuzzy
msgid "Once started, you can request the provided endpoint:"
msgstr "一旦启动，你可以请求提供的端点。"

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:221
#, no-wrap
msgid ""
"$ curl -w \"\\n\" http://localhost:8080/hello\n"
"hello\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started.adoc:224
#, fuzzy
msgid "Hit `CTRL+C` to stop the application, or keep it running and enjoy the blazing fast hot-reload."
msgstr "点击 `CTRL+C` ，停止应用程序，或保持运行，享受极快的热重载。"

#. type: Block title
#: upstream/_guides/getting-started.adoc:226
#, fuzzy, no-wrap
msgid "Automatically add newline with `curl -w \"\\n\"`"
msgstr "自动添加换行符 `curl -w \"\\n\"` "

#. type: delimited block =
#: upstream/_guides/getting-started.adoc:229
#, fuzzy
msgid "We are using `curl -w \"\\n\"` in this example to avoid your terminal printing a '%' or put both result and next command prompt on the same line."
msgstr "我们在这个例子中使用 `curl -w \"\\n\"` ，以避免你的终端打印出'%'或把结果和下一个命令提示放在同一行。"

#. type: Title ==
#: upstream/_guides/getting-started.adoc:231
#, fuzzy, no-wrap
msgid "Using injection"
msgstr "使用注射法"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:235
#, fuzzy
msgid "Dependency injection in Quarkus is based on ArC which is a CDI-based dependency injection solution tailored for Quarkus' architecture.  If you're new to CDI then we recommend you to read the xref:cdi.adoc[Introduction to CDI] guide."
msgstr "Quarkus中的依赖注入是基于ArC的，ArC是一个基于CDI的依赖注入解决方案，为Quarkus的架构量身定做。如果你是CDI的新手，那么我们推荐你阅读 link:cdi.html[CDI简介] 指南。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:237
#, fuzzy
msgid "Quarkus only implements a subset of the CDI features and comes with non-standard features and specific APIS, you can learn more about it in the xref:cdi-reference.adoc[Contexts and Dependency Injection guide]."
msgstr "Quarkus只实现了CDI功能的一个子集，并且带有非标准的功能和特定的APIS，你可以在 link:cdi-reference.html[Contexts和依赖注入指南] 中了解更多。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:239
#, fuzzy
msgid "ArC comes as a dependency of `quarkus-resteasy-reactive` so you already have it handy."
msgstr "ArC作为 `quarkus-resteasy-reactive` 的一个依赖项，所以你已经有了它。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:242
#, fuzzy
msgid "Let's modify the application and add a companion bean.  Create the `src/main/java/org/acme/GreetingService.java` file with the following content:"
msgstr "让我们修改应用程序并添加一个伴生豆。创建 `src/main/java/org/acme/GreetingService.java` 文件，内容如下。"

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:248
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:251
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class GreetingService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:255
#, no-wrap
msgid ""
"    public String greeting(String name) {\n"
"        return \"hello \" + name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:257
#: upstream/_guides/getting-started.adoc:406
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started.adoc:260
#, fuzzy
msgid "Edit the `GreetingResource` class to inject the `GreetingService` and create a new endpoint using it:"
msgstr "编辑 `GreetingResource` 类，注入 `GreetingService` ，并使用它创建一个新的端点。"

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:270
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:276
#, no-wrap
msgid ""
"    @Inject\n"
"    GreetingService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:283
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"/greeting/{name}\")\n"
"    public String greeting(String name) {\n"
"        return service.greeting(name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:290
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"hello\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started.adoc:295
#, fuzzy
msgid "If you stopped the application (keep in mind you don't have to do it, changes will be automatically deployed by our live reload feature), restart the application with:"
msgstr "如果你停止了应用程序（请记住，你不必这样做，变化将由我们的实时重载功能自动部署），用以下方法重新启动应用程序。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:299
#, fuzzy
msgid "Then check that the endpoint returns `hello quarkus` as expected:"
msgstr "然后检查端点是否按预期返回 `hello quarkus` 。"

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:304
#, no-wrap
msgid ""
"$ curl -w \"\\n\" http://localhost:8080/hello/greeting/quarkus\n"
"hello quarkus\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/getting-started.adoc:306
#, fuzzy, no-wrap
msgid "Development Mode"
msgstr "发展模式"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:314
#, fuzzy
msgid "`quarkus:dev` runs Quarkus in development mode. This enables live reload with background compilation, which means that when you modify your Java files and/or your resource files and refresh your browser, these changes will automatically take effect.  This works too for resource files like the configuration property file.  Refreshing the browser triggers a scan of the workspace, and if any changes are detected, the Java files are recompiled and the application is redeployed; your request is then serviced by the redeployed application. If there are any issues with compilation or deployment an error page will let you know."
msgstr " `quarkus:dev` 在开发模式下运行Quarkus。这使得后台编译的实时重载成为可能，这意味着当你修改你的Java文件和/或资源文件并刷新你的浏览器时，这些变化将自动生效。这也适用于资源文件，如配置属性文件。刷新浏览器会触发对工作区的扫描，如果检测到任何变化，Java文件会被重新编译，应用程序会被重新部署；然后你的请求会被重新部署的应用程序提供服务。如果编译或部署有任何问题，错误页面会让你知道。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:317
#, fuzzy
msgid "This will also listen for a debugger on port `5005`. If you want to wait for the debugger to attach before running you can pass `-Dsuspend` on the command line. If you don't want the debugger at all you can use `-Ddebug=false`."
msgstr "这也将在端口 `5005` 上监听调试器。如果你想在运行前等待调试器的连接，你可以在命令行中传递 `-Dsuspend` 。如果你根本不想要调试器，你可以使用 `-Ddebug=false` 。"

#. type: Title ==
#: upstream/_guides/getting-started.adoc:318
#, fuzzy, no-wrap
msgid "Testing"
msgstr "测试"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:321
#, fuzzy
msgid "All right, so far so good, but wouldn't it be better with a few tests, just in case."
msgstr "好吧，到目前为止还不错，但如果做一些测试，不是更好吗，以防万一。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:323
#, fuzzy
msgid "In the generated build file, you can see 2 test dependencies:"
msgstr "在生成的构建文件中，你可以看到2个测试依赖项。"

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:337
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.rest-assured</groupId>\n"
"    <artifactId>rest-assured</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:344
#, no-wrap
msgid ""
"testImplementation(\"io.quarkus:quarkus-junit5\")\n"
"testImplementation(\"io.rest-assured:rest-assured\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started.adoc:347
#, fuzzy
msgid "Quarkus supports https://junit.org/junit5/[JUnit 5] tests."
msgstr "Quarkus支持 link:https://junit.org/junit5/[JUnit 5] 测试。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:349
#, fuzzy
msgid "Because of this, in the case of Maven, the version of the https://maven.apache.org/surefire/maven-surefire-plugin/[Surefire Maven Plugin] must be set, as the default version does not support JUnit 5:"
msgstr "正因为如此，就Maven而言，必须设置 link:https://maven.apache.org/surefire/maven-surefire-plugin/[Surefire Maven插件] 的版本，因为默认版本不支持JUnit 5。"

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:362
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-surefire-plugin</artifactId>\n"
"    <version>${surefire-plugin.version}</version>\n"
"    <configuration>\n"
"       <systemPropertyVariables>\n"
"          <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"          <maven.home>${maven.home}</maven.home>\n"
"       </systemPropertyVariables>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started.adoc:366
#, fuzzy
msgid "We also set the `java.util.logging` system property to make sure tests will use the correct log manager and `maven.home` to ensure that custom configuration from `${maven.home}/conf/settings.xml` is applied (if any)."
msgstr "我们还设置了 `java.util.logging` 系统属性，以确保测试将使用正确的日志管理器和 `maven.home` ，以确保应用 `${maven.home}/conf/settings.xml` 的自定义配置（如果有的话）。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:369
#, fuzzy
msgid "The generated project contains a simple test.  Edit the `src/test/java/org/acme/GreetingResourceTest.java` to match the following content:"
msgstr "生成的项目包含一个简单的测试。编辑 `src/test/java/org/acme/GreetingResourceTest.java` ，以匹配以下内容。"

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:376
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:378
#, no-wrap
msgid "import java.util.UUID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:381
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:384
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class GreetingResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:393
#, no-wrap
msgid ""
"    @Test    // <1>\n"
"    public void testHelloEndpoint() {\n"
"        given()\n"
"          .when().get(\"/hello\")\n"
"          .then()\n"
"             .statusCode(200)    // <2>\n"
"             .body(is(\"hello\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:404
#, no-wrap
msgid ""
"    @Test\n"
"    public void testGreetingEndpoint() {\n"
"        String uuid = UUID.randomUUID().toString();\n"
"        given()\n"
"          .pathParam(\"name\", uuid)\n"
"          .when().get(\"/hello/greeting/{name}\")\n"
"          .then()\n"
"            .statusCode(200)\n"
"            .body(is(\"hello \" + uuid));\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started.adoc:408
#, fuzzy
msgid "By using the `QuarkusTest` runner, you instruct JUnit to start the application before the tests."
msgstr "通过使用 `QuarkusTest` runner，你指示JUnit在测试前启动应用程序。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:409
#, fuzzy
msgid "Check the HTTP response status code and content"
msgstr "检查HTTP响应状态代码和内容"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:411
#, fuzzy
msgid "These tests use http://rest-assured.io/[RestAssured], but feel free to use your favorite library."
msgstr "这些测试使用 link:http://rest-assured.io/[RestAssured] ，但也可以随意使用你最喜欢的库。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:413
#, fuzzy
msgid "You can run these using Maven:"
msgstr "你可以用Maven来运行这些。"

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:417
#, no-wrap
msgid "./mvnw test\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started.adoc:420
#, fuzzy
msgid "You can also run the test from your IDE directly (be sure you stopped the application first)."
msgstr "你也可以直接从你的IDE中运行测试（要确保你先停止了应用程序）。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:426
#, fuzzy
msgid "By default, tests will run on port `8081` so as not to conflict with the running application. We automatically configure RestAssured to use this port. If you want to use a different client you should use the `@TestHTTPResource` annotation to directly inject the URL of the tested application into a field on the test class. This field can be of the type `String`, `URL` or `URI`. This annotation can also be given a value for the test path. For example, if I want to test a Servlet mapped to `/myservlet` I would just add the following to my test:"
msgstr "默认情况下，测试将在端口 `8081` 上运行，以便不与正在运行的应用程序冲突。我们自动将RestAssured配置为使用该端口。如果你想使用不同的客户端，你应该使用 `@TestHTTPResource` 注释，直接将测试应用程序的URL注入到测试类的一个字段中。这个字段的类型可以是 `String` , `URL` 或 `URI` 。这个注解也可以给测试路径一个值。例如，如果我想测试一个映射到 `/myservlet` 的Servlet，我只需在我的测试中添加以下内容。"

#. type: delimited block -
#: upstream/_guides/getting-started.adoc:432
#, no-wrap
msgid ""
"@TestHTTPResource(\"/myservlet\")\n"
"URL testUrl;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started.adoc:436
#, fuzzy
msgid "The test port can be controlled via the `quarkus.http.test-port` config property. Quarkus also creates a system property called `test.url` that is set to the base test URL for situations where you cannot use injection."
msgstr "测试端口可以通过 `quarkus.http.test-port` 配置属性来控制。Quarkus还创建了一个名为 `test.url` 的系统属性，在不能使用注入的情况下被设置为基本测试URL。"

#. type: Title ==
#: upstream/_guides/getting-started.adoc:437
#, fuzzy, no-wrap
msgid "Working with multi-module project or external modules"
msgstr "与多模块项目或外部模块一起工作"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:441
#, fuzzy
msgid "Quarkus heavily utilizes https://github.com/wildfly/jandex[Jandex] at build time, to discover various classes or annotations. One immediately recognizable application of this, is CDI bean discovery.  As a result, most of the Quarkus extensions will not work properly if this build time discovery isn't properly setup."
msgstr "Quarkus在构建时大量使用 link:https://github.com/wildfly/jandex[Jandex] ，以发现各种类或注解。其中一个可以立即识别的应用是CDI Bean的发现。因此，如果没有正确设置构建时的发现，大多数Quarkus扩展将无法正常工作。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:443
#, fuzzy
msgid "This index is created by default on the project on which Quarkus is configured for, thanks to our Maven and Gradle plugins."
msgstr "由于我们的Maven和Gradle插件，这个索引是默认在配置Quarkus的项目上创建的。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:446
#, fuzzy
msgid "However, when working with a multi-module project, be sure to read the `Working with multi-module projects` section of the xref:maven-tooling.adoc#multi-module-maven[Maven] or xref:gradle-tooling.adoc#multi-module-maven[Gradle] guides."
msgstr "不过，在处理多模块项目时，请务必阅读 link:maven-tooling.html#multi-module-maven[Maven] 或 link:gradle-tooling.html#multi-module-maven[Gradle] 指南中的 `Working with multi-module projects` 部分。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:450
#, fuzzy
msgid "If you plan to use external modules (for example, an external library for all your domain objects), you will need to make these modules known to the indexing process either by adding the Jandex plugin (if you can modify them)  or via the `quarkus.index-dependency` property inside your `application.properties` (useful in cases where you can't modify the module)."
msgstr " `quarkus.index-dependency` 如果你计划使用外部模块（例如，一个用于你所有领域对象的外部库），你将需要通过添加Jandex插件（如果你能修改它们）或通过 `application.properties` 内的属性（在你不能修改模块的情况下很有用）使这些模块为索引过程所知。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:452
#, fuzzy
msgid "Be sure to read the xref:cdi-reference.adoc#bean_discovery[Bean Discovery] section of the CDI guide for more information."
msgstr "请务必阅读CDI指南中的 link:cdi-reference.html#bean_discovery[Bean Discovery] 部分以了解更多信息。"

#. type: Title ==
#: upstream/_guides/getting-started.adoc:453
#, fuzzy, no-wrap
msgid "Packaging and run the application"
msgstr "包装和运行应用程序"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:456
#, fuzzy
msgid "The application is packaged using:"
msgstr "该应用程序是用以下方式打包的。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:460
#, fuzzy
msgid "It produces several outputs in `/target`:"
msgstr "它在 `/target` ，产生几个输出。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:463
#, fuzzy
msgid "`getting-started-1.0.0-SNAPSHOT.jar` - containing just the classes and resources of the projects, it's the regular artifact produced by the Maven build - it is *not* the runnable jar;"
msgstr " `getting-started-1.0.0-SNAPSHOT.jar` - 它只包含项目的类和资源，是Maven构建时产生的常规工件--它 *不是* 可运行的jar。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:465
#, fuzzy
msgid "the `quarkus-app` directory which contains the `quarkus-run.jar` jar file - being an executable _jar_. Be aware that it's not an _über-jar_ as the dependencies are copied into subdirectories of `quarkus-app/lib/`."
msgstr " `quarkus-app` 目录，其中包含 `quarkus-run.jar` jar文件--是一个可执行的 _jar_ 。请注意，它不是 _über-jar_ ，因为依赖性被复制到 `quarkus-app/lib/` 的子目录中。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:467
#, fuzzy
msgid "You can run the application using: `java -jar target/quarkus-app/quarkus-run.jar`"
msgstr "你可以用以下方式运行该应用程序。 `java -jar target/quarkus-app/quarkus-run.jar` "

#. type: Plain text
#: upstream/_guides/getting-started.adoc:469
#, fuzzy
msgid "If you want to deploy your application somewhere (typically in a container), you need to deploy the whole `quarkus-app` directory."
msgstr "如果你想把你的应用程序部署到某个地方（通常是在一个容器中），你需要部署整个 `quarkus-app` 目录。"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:471
#, fuzzy
msgid "Before running the application, don't forget to stop the hot reload mode (hit `CTRL+C`), or you will have a port conflict."
msgstr "在运行应用程序之前，不要忘记停止热重载模式（点击 `CTRL+C` ），否则你会有一个端口冲突。"

#. type: Title ==
#: upstream/_guides/getting-started.adoc:473
#, fuzzy, no-wrap
msgid "Configuring the banner"
msgstr "配置标语"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:478
#, fuzzy
msgid "By default when a Quarkus application starts (in regular or dev mode), it will display an ASCII art banner. The banner can be disabled by setting `quarkus.banner.enabled=false` in `application.properties`, by setting the `-Dquarkus.banner.enabled=false` Java System Property, or by setting the `QUARKUS_BANNER_ENABLED` environment variable to `false`.  Furthermore, users can supply a custom banner by placing the banner file in `src/main/resources` and configuring `quarkus.banner.path=name-of-file` in `application.properties`."
msgstr "默认情况下，当Quarkus应用程序启动时（在常规或开发模式下），它将显示一个ASCII艺术横幅。通过在 `application.properties` 中设置 `quarkus.banner.enabled=false` ，通过设置 `-Dquarkus.banner.enabled=false` Java系统属性，或者通过将 `QUARKUS_BANNER_ENABLED` 环境变量设置为 `false` ，可以禁用该横幅。此外，用户可以通过将横幅文件放在 `src/main/resources` ，并在 `application.properties` 中配置 `quarkus.banner.path=name-of-file` ，从而提供一个自定义的横幅。"

#. type: Title ==
#: upstream/_guides/getting-started.adoc:479
#, fuzzy, no-wrap
msgid "What's next?"
msgstr "下一步是什么？"

#. type: Plain text
#: upstream/_guides/getting-started.adoc:485
msgid "This guide covered the creation of an application using Quarkus.  However, there is much more.  We recommend continuing the journey with the xref:building-native-image.adoc[building a native executable guide], where you learn about creating a native executable and packaging it in a container.  If you are interested in reactive, we recommend the xref:getting-started-reactive.adoc[Getting Started with Reactive guide], where you can see how to implement reactive applications with Quarkus."
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started.adoc:487
msgid "In addition, the xref:tooling.adoc[tooling guide] document explains how to:"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started.adoc:489
msgid "scaffold a project in a single command line"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started.adoc:490
msgid "enable the _development mode_ (hot reload)"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started.adoc:491
msgid "import the project in your favorite IDE"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started.adoc:491
msgid "and more"
msgstr ""
