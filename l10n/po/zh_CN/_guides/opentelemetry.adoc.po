# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/opentelemetry.adoc:6
#, fuzzy, no-wrap
msgid "Using OpenTelemetry"
msgstr "使用OpenTelemetry"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:12
#, fuzzy
msgid "This guide explains how your Quarkus application can utilize https://opentelemetry.io/[OpenTelemetry] to provide distributed tracing for interactive web applications."
msgstr "本指南解释了你的Quarkus应用程序如何利用 link:https://opentelemetry.io/[OpenTelemetry] 来为交互式Web应用程序提供分布式跟踪。"

#. type: Title ==
#: upstream/_guides/opentelemetry.adoc:13
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: upstream/_guides/opentelemetry.adoc:18
#, fuzzy, no-wrap
msgid "Architecture"
msgstr "建筑学"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:21
#, fuzzy
msgid "In this guide, we create a straightforward REST application to demonstrate distributed tracing."
msgstr "在本指南中，我们创建了一个简单的REST应用程序来演示分布式跟踪。"

#. type: Title ==
#: upstream/_guides/opentelemetry.adoc:22
#, fuzzy, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:26
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can skip right to the completed example."
msgstr "我们建议你按照下面几节的说明，一步一步地创建应用程序。不过，你可以直接跳到完成的例子。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:28
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库。 `git clone {quickstarts-clone-url}` ，或者下载一个{quickstarts-archive-url}[存档]。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:30
#, fuzzy
msgid "The solution is located in the `opentelemetry-quickstart` {quickstarts-tree-url}/opentelemetry-quickstart[directory]."
msgstr "该解决方案位于 `opentelemetry-quickstart` {quickstarts-tree-url}/opentelemetry-quickstart[目录]中。"

#. type: Title ==
#: upstream/_guides/opentelemetry.adoc:31
#, fuzzy, no-wrap
msgid "Creating the Maven project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:34
#, fuzzy
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。用以下命令创建一个新项目。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:42
#, fuzzy
msgid "This command generates the Maven project and imports the `quarkus-opentelemetry-exporter-otlp` extension, which includes the OpenTelemetry support, and a gRPC span exporter for https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/otlp.md[OTLP]."
msgstr "该命令生成Maven项目并导入 `quarkus-opentelemetry-exporter-otlp` 扩展，其中包括OpenTelemetry支持，以及 link:https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/otlp.md[OTLP] 的gRPC跨度输出器。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:45
#, fuzzy
msgid "If you already have your Quarkus project configured, you can add the `quarkus-opentelemetry-exporter-otlp` extension to your project by running the following command in your project base directory:"
msgstr "如果你已经配置了你的Quarkus项目，你可以通过在你的项目基础目录下运行以下命令，将 `quarkus-opentelemetry-exporter-otlp` 扩展到你的项目。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:50
#, fuzzy
msgid "This will add the following to your build file:"
msgstr "这将在你的构建文件中添加以下内容。"

#. type: Block title
#: upstream/_guides/opentelemetry.adoc:52
#: upstream/_guides/opentelemetry.adoc:212
#: upstream/_guides/opentelemetry.adoc:277
#: upstream/_guides/opentelemetry.adoc:294
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:58
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-opentelemetry-exporter-otlp</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/opentelemetry.adoc:61
#: upstream/_guides/opentelemetry.adoc:221
#: upstream/_guides/opentelemetry.adoc:286
#: upstream/_guides/opentelemetry.adoc:303
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:64
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-opentelemetry-exporter-otlp\")\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/opentelemetry.adoc:66
#, fuzzy, no-wrap
msgid "Examine the JAX-RS resource"
msgstr "检查JAX-RS资源"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:69
#, fuzzy
msgid "Create a `src/main/java/org/acme/opentelemetry/TracedResource.java` file with the following content:"
msgstr "创建一个 `src/main/java/org/acme/opentelemetry/TracedResource.java` 文件，内容如下。"

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:73
#, no-wrap
msgid "package org.acme.opentelemetry;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:79
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:82
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class TracedResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:84
#, no-wrap
msgid "    private static final Logger LOG = Logger.getLogger(TracedResource.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:92
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        LOG.info(\"hello\");\n"
"        return \"hello\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:96
#, fuzzy
msgid "Notice that there is no tracing specific code included in the application. By default, requests sent to this endpoint will be traced without any required code changes."
msgstr "请注意，应用程序中没有包含任何追踪的具体代码。默认情况下，发送到这个端点的请求将被追踪，不需要修改任何必要的代码。"

#. type: Title ===
#: upstream/_guides/opentelemetry.adoc:97
#, fuzzy, no-wrap
msgid "Create the configuration"
msgstr "创建配置"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:100
#, fuzzy
msgid "There are two ways to configure the OTLP gRPC Exporter within the application."
msgstr "有两种方法可以在应用程序中配置OTLP gRPC导出器。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:102
#, fuzzy
msgid "The first approach is by providing the properties within the `src/main/resources/application.properties` file:"
msgstr "第一种方法是通过在 `src/main/resources/application.properties` 文件内提供属性。"

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:108
#, no-wrap
msgid ""
"quarkus.application.name=myservice // <1>\n"
"quarkus.opentelemetry.enabled=true // <2>\n"
"quarkus.opentelemetry.tracer.exporter.otlp.endpoint=http://localhost:4317 // <3>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:110
#, no-wrap
msgid "quarkus.opentelemetry.tracer.exporter.otlp.headers=Authorization=Bearer my_secret // <4>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:113
#, fuzzy
msgid "All spans created from the application will include an OpenTelemetry `Resource` indicating the span was created by the `myservice` application. If not set, it will default to the artifact id."
msgstr "所有从应用程序创建的跨度将包括一个OpenTelemetry `Resource` ，表明该跨度是由 `myservice` 应用程序创建。如果没有设置，它将默认为工件的ID。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:114
#, fuzzy
msgid "Whether OpenTelemetry is enabled or not. The default is `true`, but shown here to indicate how it can be disabled"
msgstr "是否启用了OpenTelemetry。默认是 `true` ，但在此显示的是如何禁用它。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:115
#, fuzzy
msgid "gRPC endpoint for sending spans"
msgstr "用于发送跨度的gRPC端点"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:116
#, fuzzy
msgid "Optional gRPC headers commonly used for authentication"
msgstr "可选的gRPC头文件，通常用于认证"

#. type: Title ==
#: upstream/_guides/opentelemetry.adoc:117
#, fuzzy, no-wrap
msgid "Run the application"
msgstr "运行应用程序"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:120
#, fuzzy
msgid "The first step is to configure and start the https://opentelemetry.io/docs/collector/[OpenTelemetry Collector] to receive, process and export telemetry data to https://www.jaegertracing.io/[Jaeger] that will display the captured traces."
msgstr "第一步是配置和启动 link:https://opentelemetry.io/docs/collector/[OpenTelemetry采集器] ，以接收、处理和输出遥测数据到 link:https://www.jaegertracing.io/[Jaeger] ，显示捕获的痕迹。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:122
#, fuzzy
msgid "Configure the OpenTelemetry Collector by creating an `otel-collector-config.yaml` file:"
msgstr "通过创建一个 `otel-collector-config.yaml` 文件来配置OpenTelemetry Collector。"

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:134
#, no-wrap
msgid ""
"receivers:\n"
"  otlp:\n"
"    protocols:\n"
"      grpc:\n"
"        endpoint: otel-collector:4317\n"
"  otlp/2:\n"
"    protocols:\n"
"      grpc:\n"
"        endpoint: otel-collector:55680\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:140
#, no-wrap
msgid ""
"exporters:\n"
"  jaeger:\n"
"    endpoint: jaeger-all-in-one:14250\n"
"    tls:\n"
"      insecure: true\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:143
#, no-wrap
msgid ""
"processors:\n"
"  batch:\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:146
#, no-wrap
msgid ""
"extensions:\n"
"  health_check:\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:154
#, no-wrap
msgid ""
"service:\n"
"  extensions: [health_check]\n"
"  pipelines:\n"
"    traces:\n"
"      receivers: [otlp,otlp/2]\n"
"      processors: [batch]\n"
"      exporters: [jaeger]\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:158
#, fuzzy
msgid "Start the OpenTelemetry Collector and Jaeger system via the following `docker-compose.yml` file that you can launch via `docker-compose up -d`:"
msgstr "通过以下 `docker-compose.yml` 文件启动OpenTelemetry采集器和Jaeger系统，你可以通过 `docker-compose up -d` 。"

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:163
#, no-wrap
msgid ""
"version: \"2\"\n"
"services:\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:183
#, no-wrap
msgid ""
"  # Jaeger\n"
"  jaeger-all-in-one:\n"
"    image: jaegertracing/all-in-one:latest\n"
"    ports:\n"
"      - \"16686:16686\"\n"
"      - \"14268\"\n"
"      - \"14250\"\n"
"  # Collector\n"
"  otel-collector:\n"
"    image: otel/opentelemetry-collector:latest\n"
"    command: [\"--config=/etc/otel-collector-config.yaml\"]\n"
"    volumes:\n"
"      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml\n"
"    ports:\n"
"      - \"13133:13133\" # Health_check extension\n"
"      - \"4317:4317\"   # OTLP gRPC receiver\n"
"      - \"55680:55680\" # OTLP gRPC receiver alternative port\n"
"    depends_on:\n"
"      - jaeger-all-in-one\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:186
#, fuzzy
msgid "Now we are ready to run our application. If using `application.properties` to configure the tracer:"
msgstr "现在我们准备运行我们的应用程序。如果使用 `application.properties` 来配置追踪器。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:190
#, fuzzy
msgid "or if configuring the OTLP gRPC endpoint via JVM arguments:"
msgstr "或者如果通过JVM参数配置OTLP gRPC端点。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:196
#, fuzzy
msgid "With the OpenTelemetry Collector, Jaeger system and application running, you can make a request to the provided endpoint:"
msgstr "在OpenTelemetry收集器、Jaeger系统和应用程序运行的情况下，你可以向提供的端点发出请求。"

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:201
#, no-wrap
msgid ""
"$ curl http://localhost:8080/hello\n"
"hello\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:204
#, fuzzy
msgid "Then visit the http://localhost:16686[Jaeger UI] to see the tracing information."
msgstr "然后访问 link:http://localhost:16686[Jaeger用户界面] ，查看追踪信息。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:206
#, fuzzy
msgid "Hit `CTRL+C` to stop the application."
msgstr "点击 `CTRL+C` ，停止应用程序。"

#. type: Title ===
#: upstream/_guides/opentelemetry.adoc:207
#, fuzzy, no-wrap
msgid "JDBC"
msgstr "JDBC"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:210
#, fuzzy
msgid "The https://github.com/open-telemetry/opentelemetry-java-instrumentation/tree/main/instrumentation/jdbc/library[JDBC instrumentation] will add a span for each JDBC queries done by your application, to enable it, add the following dependency to your build file:"
msgstr "link:https://github.com/open-telemetry/opentelemetry-java-instrumentation/tree/main/instrumentation/jdbc/library[JDBC工具] 将为你的应用程序进行的每个JDBC查询添加一个跨度，要启用它，请在你的构建文件中添加以下依赖。"

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:218
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.opentelemetry.instrumentation</groupId>\n"
"    <artifactId>opentelemetry-jdbc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:224
#, no-wrap
msgid "implementation(\"io.opentelemetry.instrumentation:opentelemetry-jdbc\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:227
#, fuzzy
msgid "As it uses a dedicated JDBC driver, you must configure your datasource and Hibernate ORM to use it."
msgstr "由于它使用专用的JDBC驱动，你必须配置你的数据源和Hibernate ORM来使用它。"

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:237
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=postgresql\n"
"# add ':otel' to your database URL\n"
"quarkus.datasource.jdbc.url=jdbc:otel:postgresql://localhost:5432/mydatabase\n"
"# use the 'OpenTelemetryDriver' instead of the one for your database\n"
"quarkus.datasource.jdbc.driver=io.opentelemetry.instrumentation.jdbc.OpenTelemetryDriver\n"
"# configure Hibernate ORM dialect\n"
"quarkus.hibernate-orm.dialect=org.hibernate.dialect.PostgreSQLDialect\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/opentelemetry.adoc:239
#, fuzzy, no-wrap
msgid "Additional configuration"
msgstr "额外配置"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:242
#, fuzzy
msgid "Some use cases will require custom configuration of OpenTelemetry.  These sections will outline what is necessary to properly configure it."
msgstr "一些用例将需要对OpenTelemetry进行自定义配置。这些部分将概述正确配置它所需要的东西。"

#. type: Title ===
#: upstream/_guides/opentelemetry.adoc:243
#, fuzzy, no-wrap
msgid "ID Generator"
msgstr "身份证生成器"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:246
#, fuzzy
msgid "The OpenTelemetry extension will use by default a random https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#id-generators[ID Generator] when creating the trace and span identifier."
msgstr "在创建跟踪和跨度标识符时，OpenTelemetry扩展将默认使用一个随机的 link:https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#id-generators[ID发生器] 。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:249
#, fuzzy
msgid "Some vendor-specific protocols need a custom ID Generator, you can override the default one by creating a producer.  The OpenTelemetry extension will detect the `IdGenerator` CDI bean and will use it when configuring the tracer producer."
msgstr "一些供应商的特定协议需要一个自定义的ID生成器，你可以通过创建一个生产者来覆盖默认的ID。OpenTelemetry扩展将检测 `IdGenerator` CDI Bean，并在配置追踪器生产者时使用它。"

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:254
#: upstream/_guides/opentelemetry.adoc:354
#, no-wrap
msgid ""
"@Singleton\n"
"public class CustomConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:262
#, no-wrap
msgid ""
"    /** Creates a custom IdGenerator for OpenTelemetry */\n"
"    @Produces\n"
"    @Singleton\n"
"    public IdGenerator idGenerator() {\n"
"        return AwsXrayIdGenerator.getInstance();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/opentelemetry.adoc:264
#, fuzzy, no-wrap
msgid "Propagators"
msgstr "传播者"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:267
#, fuzzy
msgid "OpenTelemetry propagates cross-cutting concerns through https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/context/api-propagators.md[propagators] that will share an underlying `Context` for storing state and accesing data across the lifespan of a distributed transaction."
msgstr "OpenTelemetry通过 link:https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/context/api-propagators.md[传播者] 来传播跨领域的关注，这些 link:https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/context/api-propagators.md[传播者] 将共享一个底层 `Context` ，用于在分布式事务的生命周期内存储状态和访问数据。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:270
#, fuzzy
msgid "By default, the OpenTelemetry extension enables the https://www.w3.org/TR/trace-context/[W3C Trace Context] and the https://www.w3.org/TR/baggage/[W3C Baggage] propagators, you can however choose any of the supported OpenTelemetry propagators by setting the `propagators` config that is described in the <<configuration-reference>>."
msgstr "默认情况下，OpenTelemetry扩展启用了 link:https://www.w3.org/TR/trace-context/[W3C Trace Context] 和 link:https://www.w3.org/TR/baggage/[W3C Baggage] 传播器，但是你可以通过设置 link:#configuration-reference[[configuration-reference]] 中描述的 `propagators` 配置来选择任何支持的OpenTelemetry传播器。"

#. type: delimited block =
#: upstream/_guides/opentelemetry.adoc:275
#, fuzzy
msgid "The `b3`, `b3multi`, `jaeger` and `ottrace` propagators will need the https://github.com/open-telemetry/opentelemetry-java/tree/main/extensions/trace-propagators[trace-propagators] extension to be added as a dependency to your project."
msgstr " `b3` , `b3multi` , `jaeger` 和 `ottrace` 传播者将需要把 link:https://github.com/open-telemetry/opentelemetry-java/tree/main/extensions/trace-propagators[trace-propagators] 扩展作为一个依赖项添加到你的项目中。"

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:283
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.opentelemetry</groupId>\n"
"    <artifactId>opentelemetry-extension-trace-propagators</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:289
#, no-wrap
msgid "implementation(\"io.opentelemetry:opentelemetry-extension-trace-propagators\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:292
#, fuzzy
msgid "The `xray` propagator will need the https://github.com/open-telemetry/opentelemetry-java/tree/main/extensions/aws[aws] extension to be added as a dependency to your project."
msgstr " `xray` 传播者将需要将 link:https://github.com/open-telemetry/opentelemetry-java/tree/main/extensions/aws[aws] 扩展作为依赖项添加到你的项目中。"

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:300
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.opentelemetry</groupId>\n"
"    <artifactId>opentelemetry-extension-aws</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:306
#, no-wrap
msgid "implementation(\"io.opentelemetry:opentelemetry-extension-aws\")\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/opentelemetry.adoc:309
#, fuzzy, no-wrap
msgid "Resource"
msgstr "资源"

#. type: delimited block =
#: upstream/_guides/opentelemetry.adoc:312
#, fuzzy
msgid "A https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/overview.md#resources[resource] is a representation of the entity that is producing telemetry, it adds attributes to the exported trace to characterize who is producing the trace."
msgstr "link:https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/overview.md#resources[资源] 是产生遥测的实体的代表，它向输出的跟踪添加属性，以描述谁在产生跟踪。"

#. type: delimited block =
#: upstream/_guides/opentelemetry.adoc:316
#, fuzzy
msgid "You can add attributes by setting the `resource-attributes` tracer config that is described in the <<configuration-reference>>.  Since this property can be overridden at runtime, the OpenTelemetry extension will pick up its value following the order of precedence that is described in the xref:config-reference.adoc#configuration_sources[Quarkus Configuration Reference]."
msgstr "你可以通过设置 link:#configuration-reference[[configuration-reference]] 中描述的 `resource-attributes` tracer config来添加属性。由于这个属性可以在运行时被覆盖，OpenTelemetry扩展将按照 link:config-reference.html#configuration_sources[Quarkus配置参考] 中描述的优先顺序来获取其值。"

#. type: delimited block =
#: upstream/_guides/opentelemetry.adoc:319
#, fuzzy
msgid "If by any means you need to use a custom resource or one that is provided by one of the https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk-extensions[OpenTelemetry SDK Extensions] you can create multiple resource producers. The OpenTelemetry extension will detect the `Resource` CDI beans and will merge them when configuring the tracer producer."
msgstr "如果通过任何方式你需要使用自定义的资源或由 link:https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk-extensions[OpenTelemetry SDK扩展] 之一提供的资源，你可以创建多个资源生产者。OpenTelemetry扩展将检测 `Resource` CDI beans，并在配置追踪器生产者时将其合并。"

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:324
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:330
#, no-wrap
msgid ""
"    @Produces\n"
"    @ApplicationScoped\n"
"    public Resource osResource() {\n"
"        return OsResource.get();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:337
#, no-wrap
msgid ""
"    @Produces\n"
"    @ApplicationScoped\n"
"    public Resource ecsResource() {\n"
"        return EcsResource.get();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/opentelemetry.adoc:339
#, fuzzy, no-wrap
msgid "Sampler"
msgstr "采样器"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:343
#, fuzzy
msgid "A https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#sampling[sampler] decides whether a trace should be sampled and exported, controlling noise and overhead by reducing the number of sample of traces collected and sent to the collector."
msgstr "link:https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#sampling[采样器] 决定是否应该对一个轨迹进行采样和输出，通过减少收集和发送至采集器的轨迹样本数量来控制噪音和开销。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:346
#, fuzzy
msgid "You can set a https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#built-in-samplers[built-in sampler] simply by setting the desired sampler config described in the <<configuration-reference>>."
msgstr "你可以通过设置 link:#configuration-reference[[配置-参考]] 中描述的所需采样器配置来简单地设置一个 link:https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#built-in-samplers[内置的] 采样器。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:349
#, fuzzy
msgid "If you need to use a custom sampler or to use one that is provided by one of the https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk-extensions[OpenTelemetry SDK Extensions] you can create a sampler producer. The OpenTelemetry extension will detect the `Sampler` CDI bean and will use it when configuring the tracer producer."
msgstr "如果你需要使用一个自定义的采样器或使用一个由 link:https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk-extensions[OpenTelemetry SDK扩展] 提供的采样器，你可以创建一个采样器生产商。OpenTelemetry扩展将检测到 `Sampler` CDI bean，并在配置追踪器生产者时使用它。"

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:364
#, no-wrap
msgid ""
"    /** Creates a custom sampler for OpenTelemetry */\n"
"    @Produces\n"
"    @Singleton\n"
"    public Sampler sampler() {\n"
"        return JaegerRemoteSampler.builder()\n"
"        .setServiceName(\"my-service\")\n"
"        .build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/opentelemetry.adoc:366
#, fuzzy, no-wrap
msgid "Additional instrumentation"
msgstr "额外的仪器设备"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:370
#, fuzzy
msgid "Some Quarkus extensions will require additional code to ensure traces are propagated to subsequent execution.  These sections will outline what is necessary to propagate traces across process boundaries."
msgstr "一些Quarkus扩展将需要额外的代码来确保追踪被传播到后续执行中。这些部分将概述跨越进程边界传播跟踪的必要条件。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:372
#, fuzzy
msgid "The instrumentation documented in this section has been tested with Quarkus and works in both standard and native mode."
msgstr "本节中记录的仪器已经用Quarkus测试过，在标准和本地模式下都能工作。"

#. type: Title ===
#: upstream/_guides/opentelemetry.adoc:373
#, fuzzy, no-wrap
msgid "CDI"
msgstr "CDI"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:377
#, fuzzy
msgid "Annotating a method in any CDI aware bean with the `io.opentelemetry.extension.annotations.WithSpan` annotation will create a new Span and establish any required relationships with the current Trace context."
msgstr "在任何CDI感知的Bean中用 `io.opentelemetry.extension.annotations.WithSpan` 注解来注解一个方法将创建一个新的Span，并与当前Trace上下文建立任何必要的关系。"

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:380
msgid "Method parameters can be annotated with the `io.opentelemetry.extension.annotations.SpanAttribute` annotation to indicate which method parameters should be part of the Trace."
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:382
msgid "Example:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:388
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class SpanBean {\n"
"    @WithSpan\n"
"    void span() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:390
#: upstream/_guides/opentelemetry.adoc:395
#: upstream/_guides/opentelemetry.adoc:400
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:393
#, no-wrap
msgid ""
"    @WithSpan(\"name\")\n"
"    void spanName() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:398
#, no-wrap
msgid ""
"    @WithSpan(kind = SERVER)\n"
"    void spanKind() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:403
#, no-wrap
msgid ""
"    @WithSpan\n"
"    void spanArgs(@SpanAttribute(value = \"arg\") String arg) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:406
#, no-wrap
msgid ""
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/opentelemetry.adoc:408
#, no-wrap
msgid "SmallRye Reactive Messaging - Kafka"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:412
msgid "When using the SmallRye Reactive Messaging extension for Kafka, we are able to propagate the span into the Kafka Record with:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentelemetry.adoc:416
#, no-wrap
msgid "Metadata.of(TracingMetadata.withPrevious(Context.current()));\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentelemetry.adoc:420
msgid "The above creates a `Metadata` object we can add to the `Message` being produced, which retrieves the OpenTelemetry `Context` to extract the current span for propagation."
msgstr ""

#. type: Title ==
#: upstream/_guides/opentelemetry.adoc:422
#, no-wrap
msgid "OpenTelemetry Configuration Reference"
msgstr ""
