# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/rabbitmq.adoc:6
#, fuzzy, no-wrap
msgid "Getting Started to SmallRye Reactive Messaging with RabbitMQ"
msgstr "开始使用RabbitMQ的SmallRye反应式消息传递"

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:12
#, fuzzy
msgid "This guide demonstrates how your Quarkus application can utilize SmallRye Reactive Messaging to interact with RabbitMQ."
msgstr "本指南演示了您的 Quarkus 应用程序如何利用 SmallRye Reactive Messaging 来与 RabbitMQ 进行交互。"

#. type: Title ==
#: upstream/_guides/rabbitmq.adoc:15
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: upstream/_guides/rabbitmq.adoc:20
#, fuzzy, no-wrap
msgid "Architecture"
msgstr "建筑学"

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:25
#, fuzzy
msgid "In this guide, we are going to develop two applications communicating with a RabbitMQ broker.  The first application sends a _quote request_ to the RabbitMQ _quote requests_ exchange and consumes messages from the _quote_ queue.  The second application receives the _quote request_ and sends a _quote_ back."
msgstr "在本指南中，我们将开发两个与 RabbitMQ 代理通信的应用程序。第一个应用程序向 RabbitMQ _报价请求_ 交易所发送一个 _报价请求_ ，并从 _报价_ 队列中消费消息。第二个应用程序接收 _报价请求_ 并发送一个 _报价_ 回来。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_guides/rabbitmq.adoc:26
#, fuzzy, no-wrap
msgid "Architecture,"
msgstr "建筑。"

#. type: Target for macro image
#: upstream/_guides/rabbitmq.adoc:26
#, no-wrap
msgid "amqp-qs-architecture.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:31
#, fuzzy
msgid "The first application, the `producer`, will let the user request some quotes over an HTTP endpoint.  For each quote request, a random identifier is generated and returned to the user, to put the quote request on _pending_.  At the same time the generated request id is sent to the `quote-requests` exchange."
msgstr "第一个应用程序， `producer` ，将让用户通过一个HTTP端点请求一些报价。对于每一个报价请求，都会生成一个随机的标识符并返回给用户，以使报价请求处于 _等待_ 状态。同时，生成的请求ID被发送到 `quote-requests` 交易所。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_guides/rabbitmq.adoc:32
#, fuzzy, no-wrap
msgid "Producer"
msgstr "制作人"

#. type: Target for macro image
#: upstream/_guides/rabbitmq.adoc:32
#, no-wrap
msgid "amqp-qs-app-screenshot.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:35
#, fuzzy
msgid "The second application, the `processor`, in turn, will read from the `quote-requests` queue put a random price to the quote, and send it to an exchange named `quotes`."
msgstr "第二个应用程序， `processor` ，反过来，将从 `quote-requests` 队列中读取将一个随机价格放到报价中，并将其发送到一个名为 `quotes` 的交易所。"

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:38
#, fuzzy
msgid "Lastly, the `producer` will read the quotes and send them to the browser using server-sent events.  The user will therefore see the quote price updated from _pending_ to the received price in real-time."
msgstr "最后， `producer` 将读取报价并使用服务器发送的事件将其发送到浏览器。因此，用户将看到报价从 _待定_ 价格实时更新到收到的价格。"

#. type: Title ==
#: upstream/_guides/rabbitmq.adoc:39
#, fuzzy, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:43
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create applications step by step.  However, you can go right to the completed example."
msgstr "我们建议你按照下面几节的说明，一步一步地创建应用程序。然而，你可以直接进入已完成的例子。"

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:45
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库。 `git clone {quickstarts-clone-url}` ，或者下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:47
#, fuzzy
msgid "The solution is located in the `rabbitmq-quickstart` {quickstarts-tree-url}/rabbitmq-quickstart[directory]."
msgstr "该解决方案位于 `rabbitmq-quickstart` {quickstarts-tree-url}/rabbitmq-quickstart[目录]中。"

#. type: Title ==
#: upstream/_guides/rabbitmq.adoc:48
#, fuzzy, no-wrap
msgid "Creating the Maven Project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:51
#, fuzzy
msgid "First, we need to create two projects: the _producer_ and the _processor_."
msgstr "首先，我们需要创建两个项目： _生产者_ 和 _处理器_ 。"

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:53
#, fuzzy
msgid "To create the _producer_ project, in a terminal run:"
msgstr "要创建 _生产者_ 项目，在终端运行。"

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:60
#, fuzzy
msgid "This command creates the project structure and select the two Quarkus extensions we will be using:"
msgstr "这个命令创建了项目结构，并选择了我们将要使用的两个Quarkus扩展。"

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:62
#, fuzzy
msgid "The Reactive Messaging RabbitMQ connector"
msgstr "Reactive Messaging RabbitMQ连接器"

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:63
#, fuzzy
msgid "RESTEasy Reactive and it's Jackson support to handle JSON payloads"
msgstr "RESTEasy Reactive和它的杰克逊支持处理JSON有效载荷"

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:65
#, fuzzy
msgid "To create the _processor_ project, from the same directory, run:"
msgstr "要创建 _处理器_ 项目，在同一目录下，运行。"

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:72
#, fuzzy
msgid "At that point you should have the following structure:"
msgstr "在这一点上，你应该有以下结构。"

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:98
#, no-wrap
msgid ""
".\n"
"├── rabbitmq-quickstart-processor\n"
"│  ├── README.md\n"
"│  ├── mvnw\n"
"│  ├── mvnw.cmd\n"
"│  ├── pom.xml\n"
"│  └── src\n"
"│     └── main\n"
"│        ├── docker\n"
"│        ├── java\n"
"│        └── resources\n"
"│           └── application.properties\n"
"└── rabbitmq-quickstart-producer\n"
"   ├── README.md\n"
"   ├── mvnw\n"
"   ├── mvnw.cmd\n"
"   ├── pom.xml\n"
"   └── src\n"
"      └── main\n"
"         ├── docker\n"
"         ├── java\n"
"         └── resources\n"
"            └── application.properties\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:101
#, fuzzy
msgid "Open the two projects in your favorite IDE."
msgstr "在你喜欢的IDE中打开这两个项目。"

#. type: Title ==
#: upstream/_guides/rabbitmq.adoc:102
#, fuzzy, no-wrap
msgid "The Quote object"
msgstr "报价对象"

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:107
#, fuzzy
msgid "The `Quote` class will be used in both `producer` and `processor` projects.  For the sake of simplicity we will duplicate the class.  In both projects, create the `src/main/java/org/acme/rabbitmq/model/Quote.java` file, with the following content:"
msgstr " `Quote` 类将在 `producer` 和 `processor` 两个项目中使用。为了简单起见，我们将重复这个类。在两个项目中，创建 `src/main/java/org/acme/rabbitmq/model/Quote.java` 文件，内容如下。"

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:111
#, no-wrap
msgid "package org.acme.rabbitmq.model;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:113
#, no-wrap
msgid "import io.quarkus.runtime.annotations.RegisterForReflection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:116
#, no-wrap
msgid ""
"@RegisterForReflection\n"
"public class Quote {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:119
#, no-wrap
msgid ""
"    public String id;\n"
"    public int price;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:124
#, no-wrap
msgid ""
"    /**\n"
"    * Default constructor required for Jackson serializer\n"
"    */\n"
"    public Quote() { }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:129
#, no-wrap
msgid ""
"    public Quote(String id, int price) {\n"
"        this.id = id;\n"
"        this.price = price;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:138
#, no-wrap
msgid ""
"    @Override\n"
"    public String toString() {\n"
"        return \"Quote{\" +\n"
"                \"id='\" + id + '\\'' +\n"
"                \", price=\" + price +\n"
"                '}';\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:142
#, fuzzy
msgid "JSON representation of `Quote` objects will be used in messages sent to the RabbitMQ queues and also in the server-sent events sent to browser clients."
msgstr " `Quote` 对象的 JSON 表示将用于发送到 RabbitMQ 队列的消息中，也用于发送到浏览器客户端的服务器发送的事件。"

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:144
#, fuzzy
msgid "Quarkus has built-in capabilities to deal with JSON RabbitMQ messages."
msgstr "Quarkus具有处理JSON RabbitMQ消息的内置功能。"

#. type: Block title
#: upstream/_guides/rabbitmq.adoc:146
#, fuzzy, no-wrap
msgid "@RegisterForReflection"
msgstr "@RegisterForReflection"

#. type: delimited block =
#: upstream/_guides/rabbitmq.adoc:151
#, fuzzy
msgid "The `@RegisterForReflection` annotation instructs Quarkus to include the class (including fields and methods) when building the native executable.  This will be useful later when we run the applications as native executables inside containers.  Without, the native compilation would remove the fields and methods during the dead-code elimination phase."
msgstr " `@RegisterForReflection` 注释指示Quarkus在构建本地可执行文件时包含该类（包括字段和方法）。这在以后我们在容器内作为本地可执行文件运行应用程序时将会很有用。如果没有，本地编译会在消除死代码阶段删除这些字段和方法。"

#. type: Title ==
#: upstream/_guides/rabbitmq.adoc:153
#, fuzzy, no-wrap
msgid "Sending quote request"
msgstr "发出报价请求"

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:156
#, fuzzy
msgid "Inside the `producer` project locate the generated `src/main/java/org/acme/rabbitmq/producer/QuotesResource.java` file, and update the content to be:"
msgstr "在 `producer` 项目中找到生成的 `src/main/java/org/acme/rabbitmq/producer/QuotesResource.java` 文件，并将其内容更新为。"

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:160
#, no-wrap
msgid "package org.acme.rabbitmq.producer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:162
#, no-wrap
msgid "import java.util.UUID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:168
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:172
#, no-wrap
msgid ""
"import org.acme.rabbitmq.model.Quote;\n"
"import org.eclipse.microprofile.reactive.messaging.Channel;\n"
"import org.eclipse.microprofile.reactive.messaging.Emitter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:174
#, no-wrap
msgid "import io.smallrye.mutiny.Multi;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:177
#, no-wrap
msgid ""
"@Path(\"/quotes\")\n"
"public class QuotesResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:179
#, no-wrap
msgid "    @Channel(\"quote-requests\") Emitter<String> quoteRequestEmitter; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:193
#, no-wrap
msgid ""
"    /**\n"
"     * Endpoint to generate a new quote request id and send it to \"quote-requests\" channel (which\n"
"     * maps to the \"quote-requests\" RabbitMQ exchange) using the emitter.\n"
"     */\n"
"    @POST\n"
"    @Path(\"/request\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String createRequest() {\n"
"        UUID uuid = UUID.randomUUID();\n"
"        quoteRequestEmitter.send(uuid.toString()); // <2>\n"
"        return uuid.toString();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:195
#, fuzzy
msgid "Inject a Reactive Messaging `Emitter` to send messages to the `quote-requests` channel."
msgstr "注入一个Reactive Messaging `Emitter` ，向 `quote-requests` 通道发送消息。"

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:196
#, fuzzy
msgid "On a post request, generate a random UUID and send it to the RabbitMQ queue using the emitter."
msgstr "在一个post请求中，生成一个随机UUID并使用发射器将其发送到RabbitMQ队列。"

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:199
#, fuzzy
msgid "This channel is mapped to a RabbitMQ exchange using the configuration we will add to the `application.properties` file.  Open the `src/main/resource/application.properties` file and add:"
msgstr "该通道使用我们将添加到 `application.properties` 文件中的配置被映射到 RabbitMQ 交换。打开 `src/main/resource/application.properties` 文件并添加。"

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:205
#, no-wrap
msgid ""
"# Configure the outgoing RabbitMQ exchange `quote-requests`\n"
"mp.messaging.outgoing.quote-requests.connector=smallrye-rabbitmq\n"
"mp.messaging.outgoing.quote-requests.exchange.name=quote-requests\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:209
#, fuzzy
msgid "All we need to specify is the `smallrye-rabbitmq` connector.  By default, reactive messaging maps the channel name `quote-requests` to the same RabbitMQ exchange name."
msgstr "我们所需要指定的是 `smallrye-rabbitmq` 连接器。默认情况下，反应式消息传递将通道名称 `quote-requests` 映射到相同的 RabbitMQ 交换名称。"

#. type: Title ==
#: upstream/_guides/rabbitmq.adoc:210
#, fuzzy, no-wrap
msgid "Processing quote requests"
msgstr "处理报价请求"

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:214
#, fuzzy
msgid "Now let's consume the quote request and give out a price.  Inside the `processor` project, locate the `src/main/java/org/acme/rabbitmq/processor/QuoteProcessor.java` file and add the following:"
msgstr "现在让我们来消费报价请求并给出一个价格。在 `processor` 项目中，找到 `src/main/java/org/acme/rabbitmq/processor/QuoteProcessor.java` 文件并添加以下内容。"

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:218
#, no-wrap
msgid "package org.acme.rabbitmq.processor;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:220
#, no-wrap
msgid "import java.util.Random;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:222
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:226
#, no-wrap
msgid ""
"import org.acme.rabbitmq.model.Quote;\n"
"import org.eclipse.microprofile.reactive.messaging.Incoming;\n"
"import org.eclipse.microprofile.reactive.messaging.Outgoing;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:228
#, no-wrap
msgid "import io.smallrye.reactive.messaging.annotations.Blocking;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:235
#, no-wrap
msgid ""
"/**\n"
" * A bean consuming data from the \"quote-requests\" RabbitMQ queue and giving out a random quote.\n"
" * The result is pushed to the \"quotes\" RabbitMQ exchange.\n"
" */\n"
"@ApplicationScoped\n"
"public class QuoteProcessor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:237
#, no-wrap
msgid "    private Random random = new Random();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:247
#, no-wrap
msgid ""
"    @Incoming(\"requests\")       // <1>\n"
"    @Outgoing(\"quotes\")         // <2>\n"
"    @Blocking                   // <3>\n"
"    public Quote process(String quoteRequest) throws InterruptedException {\n"
"        // simulate some hard-working task\n"
"        Thread.sleep(1000);\n"
"        return new Quote(quoteRequest, random.nextInt(100));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:249
#, fuzzy
msgid "Indicates that the method consumes the items from the `requests` channel"
msgstr "表示该方法从 `requests` 通道消耗项目。"

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:250
#, fuzzy
msgid "Indicates that the objects returned by the method are sent to the `quotes` channel"
msgstr "表示方法返回的对象被发送到 `quotes` channel。"

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:251
#, fuzzy
msgid "Indicates that the processing is _blocking_ and cannot be run on the caller thread."
msgstr "表示该处理是 _阻塞的_ ，不能在调用者线程上运行。"

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:253
#, fuzzy
msgid "The `process` method is called for every RabbitMQ message from the `quote-requests` queue, and will send a `Quote` object to the `quotes` exchange."
msgstr " `process` 方法为来自 `quote-requests` 队列的每条 RabbitMQ 消息被调用，并将发送一个 `Quote` 对象到 `quotes` 交换机。"

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:256
#, fuzzy
msgid "As with the previous example we need to configure the connectors in the `application.properties` file.  Open the `src/main/resources/application.properties` file and add:"
msgstr "与前面的例子一样，我们需要在 `application.properties` 文件中配置连接器。打开 `src/main/resources/application.properties` 文件并添加。"

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:263
#, no-wrap
msgid ""
"# Configure the incoming RabbitMQ queue `quote-requests`\n"
"mp.messaging.incoming.requests.connector=smallrye-rabbitmq\n"
"mp.messaging.incoming.requests.queue.name=quote-requests\n"
"mp.messaging.incoming.requests.exchange.name=quote-requests\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:267
#, no-wrap
msgid ""
"# Configure the outgoing RabbitMQ exchange `quotes`\n"
"mp.messaging.outgoing.quotes.connector=smallrye-rabbitmq\n"
"mp.messaging.outgoing.quotes.exchange.name=quotes\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:271
#, fuzzy
msgid "Note that in this case we have one incoming and one outgoing connector configuration, each one distinctly named.  The configuration keys are structured as follows:"
msgstr "请注意，在这种情况下，我们有一个传入和一个传出的连接器配置，每个都有明确的名称。配置键的结构如下。"

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:273
#, fuzzy
msgid "`mp.messaging.[outgoing|incoming].{channel-name}.property=value`"
msgstr " `mp.messaging.[outgoing|incoming].{channel-name}.property=value` "

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:275
#, fuzzy
msgid "The `channel-name` segment must match the value set in the `@Incoming` and `@Outgoing` annotation:"
msgstr " `channel-name` 段必须与 `@Incoming` 和 `@Outgoing` 注释中设定的值相匹配。"

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:277
#, fuzzy
msgid "`quote-requests` -> RabbitMQ queue from which we read the quote requests"
msgstr " `quote-requests` → RabbitMQ队列，我们从中读取报价请求"

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:278
#, fuzzy
msgid "`quotes` -> RabbitMQ exchange in which we write the quotes"
msgstr " `quotes` → RabbitMQ 交易所，我们在其中写入报价"

#. type: Title ==
#: upstream/_guides/rabbitmq.adoc:279
#, fuzzy, no-wrap
msgid "Receiving quotes"
msgstr "接收报价"

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:283
#, fuzzy
msgid "Back to our `producer` project.  Let's modify the `QuotesResource` to consume quotes, bind it to an HTTP endpoint to send events to clients:"
msgstr "回到我们的 `producer` 项目。让我们修改 `QuotesResource` ，以消耗报价，将其绑定到一个HTTP端点，向客户发送事件。"

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:288
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Multi;\n"
"//...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:290
#, no-wrap
msgid "@Channel(\"quotes\") Multi<Quote> quotes;     // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:299
#, no-wrap
msgid ""
"/**\n"
" * Endpoint retrieving the \"quotes\" queue and sending the items to a server sent event.\n"
" */\n"
"@GET\n"
"@Produces(MediaType.SERVER_SENT_EVENTS) // <2>\n"
"public Multi<Quote> stream() {\n"
"    return quotes; // <3>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:301
#, fuzzy
msgid "Injects the `quotes` channel using the `@Channel` qualifier"
msgstr "使用 `@Channel` 修饰语注入 `quotes` 通道。"

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:302
#, fuzzy
msgid "Indicates that the content is sent using `Server Sent Events`"
msgstr "表示内容是用 `Server Sent Events` "

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:303
#, fuzzy
msgid "Returns the stream (_Reactive Stream_)"
msgstr "返回流 _（Reactive Stream_ ）。"

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:306
#, fuzzy
msgid "Again we need to configure the incoming `quotes` channel inside `producer` project.  Add the following inside `application.properties` file:"
msgstr "我们再次需要在 `producer` 项目中配置传入的 `quotes` 通道。在 `application.properties` 文件中添加以下内容。"

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:311
#, no-wrap
msgid ""
"# Configure the outgoing `quote-requests` queue\n"
"mp.messaging.outgoing.quote-requests.connector=smallrye-rabbitmq\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:314
#, no-wrap
msgid ""
"# Configure the incoming `quotes` queue\n"
"mp.messaging.incoming.quotes.connector=smallrye-rabbitmq\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/rabbitmq.adoc:316
#, fuzzy, no-wrap
msgid "The HTML page"
msgstr "HTML页面"

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:319
#, fuzzy
msgid "Final touch, the HTML page reading the converted prices using SSE."
msgstr "最后一点，HTML页面使用SSE读取转换后的价格。"

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:321
#, fuzzy
msgid "Create inside the `producer` project `src/main/resources/META-INF/resources/quotes.html` file, with the following content:"
msgstr "在 `producer` 项目内创建 `src/main/resources/META-INF/resources/quotes.html` 文件，内容如下。"

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:325
#, no-wrap
msgid "<!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Quotes</title>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:361
#, no-wrap
msgid ""
"    <link rel=\"stylesheet\" type=\"text/css\"\n"
"          href=\"https://cdnjs.cloudflare.com/ajax/libs/patternfly/3.24.0/css/patternfly.min.css\">\n"
"    <link rel=\"stylesheet\" type=\"text/css\"\n"
"          href=\"https://cdnjs.cloudflare.com/ajax/libs/patternfly/3.24.0/css/patternfly-additions.min.css\">\n"
"</head>\n"
"<body>\n"
"<div class=\"container\">\n"
"    <div class=\"card\">\n"
"        <div class=\"card-body\">\n"
"            <h2 class=\"card-title\">Quotes</h2>\n"
"            <button class=\"btn btn-info\" id=\"request-quote\">Request Quote</button>\n"
"            <div class=\"quotes\"></div>\n"
"        </div>\n"
"    </div>\n"
"</div>\n"
"</body>\n"
"<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n"
"<script>\n"
"    $(\"#request-quote\").click((event) => {\n"
"        fetch(\"/quotes/request\", {method: \"POST\"})\n"
"        .then(res => res.text())\n"
"        .then(qid => {\n"
"            var row = $(`<h4 class='col-md-12' id='${qid}'>Quote # <i>${qid}</i> | <strong>Pending</strong></h4>`);\n"
"            $(\".quotes\").append(row);\n"
"        });\n"
"    });\n"
"    var source = new EventSource(\"/quotes\");\n"
"    source.onmessage = (event) => {\n"
"      var json = JSON.parse(event.data);\n"
"      $(`#${json.id}`).html(function(index, html) {\n"
"        return html.replace(\"Pending\", `\\$\\xA0${json.price}`);\n"
"      });\n"
"    };\n"
"</script>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:365
#, fuzzy
msgid "Nothing spectacular here.  On each received quote, it updates the page."
msgstr "这里没有什么了不起的。在每次收到的报价中，它都会更新页面。"

#. type: Title ==
#: upstream/_guides/rabbitmq.adoc:366
#, fuzzy, no-wrap
msgid "Get it running"
msgstr "让它运行"

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:369
#, fuzzy
msgid "You just need to run both applications using:"
msgstr "你只需要使用运行这两个应用程序。"

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:373
#, no-wrap
msgid "> mvn -f rabbitmq-quickstart-producer quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:376
#, fuzzy
msgid "And, in a separate terminal:"
msgstr "而且，在一个单独的终端。"

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:380
#, no-wrap
msgid "> mvn -f rabbitmq-quickstart-processor quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:384
#, fuzzy
msgid "Quarkus starts a RabbitMQ broker automatically, configures the application and shares the broker instance between different applications.  See xref:rabbitmq-dev-services.adoc[Dev Services for RabbitMQ] for more details."
msgstr "Quarkus 自动启动 RabbitMQ 代理，配置应用程序并在不同的应用程序之间共享代理实例。有关详细信息，请参阅 link:rabbitmq-dev-services.html[RabbitMQ 的 Dev 服务] 。"

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:387
#, fuzzy
msgid "Open `http://localhost:8080/quotes.html` in your browser and request some quotes by clicking the button."
msgstr "打开 `<a href=\"http://localhost:8080/quotes.html\" class=\"bare\">http://localhost:8080/quotes.html</a>` 在你的浏览器中，通过点击按钮要求一些报价。"

#. type: Title ==
#: upstream/_guides/rabbitmq.adoc:388
#, fuzzy, no-wrap
msgid "Running in JVM or Native mode"
msgstr "在JVM或本地模式下运行"

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:392
#, fuzzy
msgid "When not running in dev or test mode, you will need to start your RabbitMQ broker.  You can follow the instructions from the https://hub.docker.com/_/rabbitmq[RabbitMQ Docker website] or create a `docker-compose.yaml` file with the following content:"
msgstr "在不以开发或测试模式运行时，您将需要启动您的 RabbitMQ 代理。您可以按照 link:https://hub.docker.com/_/rabbitmq[RabbitMQ Docker 网站] 的说明进行操作，或者创建一个具有以下内容的 `docker-compose.yaml` 文件。"

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:396
#, no-wrap
msgid "version: '2'\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:398
#, no-wrap
msgid "services:\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:405
#, no-wrap
msgid ""
"  rabbit:\n"
"    image: rabbitmq:3.9-management\n"
"    ports:\n"
"      - \"5672:5672\"\n"
"    networks:\n"
"      - rabbitmq-quickstart-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:418
#, no-wrap
msgid ""
"  producer:\n"
"    image: quarkus-quickstarts/rabbitmq-quickstart-producer:1.0-${QUARKUS_MODE:-jvm}\n"
"    build:\n"
"      context: rabbitmq-quickstart-producer\n"
"      dockerfile: src/main/docker/Dockerfile.${QUARKUS_MODE:-jvm}\n"
"    environment:\n"
"      RABBITMQ_HOST: rabbit\n"
"      RABBITMQ_PORT: 5672\n"
"    ports:\n"
"      - \"8080:8080\"\n"
"    networks:\n"
"      - rabbitmq-quickstart-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:429
#, no-wrap
msgid ""
"  processor:\n"
"    image: quarkus-quickstarts/rabbitmq-quickstart-processor:1.0-${QUARKUS_MODE:-jvm}\n"
"    build:\n"
"      context: rabbitmq-quickstart-processor\n"
"      dockerfile: src/main/docker/Dockerfile.${QUARKUS_MODE:-jvm}\n"
"    environment:\n"
"      RABBITMQ_HOST: rabbit\n"
"      RABBITMQ_PORT: 5672\n"
"    networks:\n"
"      - rabbitmq-quickstart-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:433
#, no-wrap
msgid ""
"networks:\n"
"  rabbitmq-quickstart-network:\n"
"    name: rabbitmq-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:437
#, fuzzy
msgid "Note how the RabbitMQ broker location is configured.  The `rabbitmq-host` and `rabbitmq-port` (`AMQP_HOST` and `AMQP_PORT` environment variables) properties configure location."
msgstr "注意 RabbitMQ 代理的位置是如何配置的。 `rabbitmq-host` 和 `rabbitmq-port` ( `AMQP_HOST` 和 `AMQP_PORT` 环境变量) 属性配置了位置。"

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:440
#, fuzzy
msgid "First, make sure you stopped the applications, and build both applications in JVM mode with:"
msgstr "首先，确保你停止了应用程序，并在JVM模式下构建两个应用程序。"

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:445
#, no-wrap
msgid ""
"> mvn -f rabbitmq-quickstart-producer clean package\n"
"> mvn -f rabbitmq-quickstart-processor clean package\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:449
#, fuzzy
msgid "Once packaged, run `docker compose up --build`.  The UI is exposed on http://localhost:8080/quotes.html"
msgstr "一旦打包完毕，运行 `docker compose up --build` 。UI暴露在 http://localhost:8080/quotes.html "

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:451
msgid "To run your applications as native, first we need to build the native executables:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:456
#, no-wrap
msgid ""
"> mvn -f rabbitmq-quickstart-producer package -Pnative  -Dquarkus.native.container-build=true\n"
"> mvn -f rabbitmq-quickstart-processor package -Pnative -Dquarkus.native.container-build=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:460
msgid "The `-Dquarkus.native.container-build=true` instructs Quarkus to build Linux 64bits native executables, who can run inside containers.  Then, run the system using:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rabbitmq.adoc:465
#, no-wrap
msgid ""
"> export QUARKUS_MODE=native\n"
"> docker compose up --build\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:468
msgid "As before, the UI is exposed on http://localhost:8080/quotes.html"
msgstr ""

#. type: Title ==
#: upstream/_guides/rabbitmq.adoc:469
#, no-wrap
msgid "Going further"
msgstr "进一步探索"

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:473
msgid "This guide has shown how you can interact with RabbitMQ using Quarkus.  It utilizes https://smallrye.io/smallrye-reactive-messaging[SmallRye Reactive Messaging] to build data streaming applications."
msgstr ""

#. type: Plain text
#: upstream/_guides/rabbitmq.adoc:475
msgid "If you did the Kafka, you have realized that it's the same code.  The only difference is the connector configuration and the JSON mapping."
msgstr ""
