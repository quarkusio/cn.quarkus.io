# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-25 13:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _guides/centralized-log-management.adoc
#, fuzzy, no-wrap
msgid "Centralized log management (Graylog, Logstash, Fluentd)"
msgstr "集中的日志管理（Graylog、Logstash、Fluentd）。"

#: _guides/centralized-log-management.adoc
#, fuzzy
msgid ""
"This guide explains how you can send your logs to a centralized log "
"management system like Graylog, Logstash (inside the Elastic Stack or ELK - "
"Elasticsearch, Logstash, Kibana) or\n"
"Fluentd (inside EFK - Elasticsearch, Fluentd, Kibana)."
msgstr ""
"本指南介绍如何将日志发送到集中式日志管理系统，如 Graylog、Logstash（Elastic Stack 或 ELK - "
"Elasticsearch、Logstash、Kibana 内）或 Fluentd（EFK - Elasticsearch、Fluentd、Kibana "
"内）。"

#: _guides/centralized-log-management.adoc
#, fuzzy
msgid ""
"This document is part of the xref:observability.adoc[Observability in "
"Quarkus reference guide] which features this and other observability related "
"components."
msgstr ""
"本文档是 xref:observability.adoc[Quarkus 中的可观察性参考指南的] 一部分，其中包含本文档和其他与可观察性相关的组件。"

#: _guides/centralized-log-management.adoc
#, fuzzy
msgid ""
"There are a lot of different ways to centralize your logs (if you are using "
"Kubernetes, the simplest way is to log to the console and ask your cluster "
"administrator to integrate a central log manager inside your cluster).\n"
"In this guide, we will expose how to send them to an external tool using "
"supported Quarkus extensions in supported standard formats like Graylog "
"Extended Log Format (GELF), Elastic Common Schema (ECS) or the OpenTelemetry "
"Log signal."
msgstr ""
"集中管理日志的方法有很多种（如果使用的是 "
"Kubernetes，最简单的方法就是登录到控制台，然后让集群管理员在集群内集成一个中央日志管理器）。在本指南中，我们将介绍如何使用受支持的标准格式（如 "
"Graylog Extended Log Format (GELF)、Elastic Common Schema (ECS) 或 "
"OpenTelemetry Log signal）中受支持的 Quarkus 扩展，将日志发送到外部工具。"

#. type: Title ==
#: _guides/centralized-log-management.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: _guides/centralized-log-management.adoc
#, fuzzy, no-wrap
msgid "Example application"
msgstr "应用实例"

#. type: Plain text
#: _guides/centralized-log-management.adoc
#, fuzzy
msgid ""
"The following examples will all be based on the same example application "
"that you can create with the following steps."
msgstr "下面的例子都将基于同一个例子的应用程序，你可以通过以下步骤创建。"

#: _guides/centralized-log-management.adoc
#, fuzzy
msgid ""
"Create an application with the REST extension. You can use the following "
"command to create it:"
msgstr "使用 REST 扩展创建应用程序。您可以使用以下命令创建应用程序："

#. type: Plain text
#: _guides/centralized-log-management.adoc
#, fuzzy
msgid ""
"For demonstration purposes, we create an endpoint that does nothing but log "
"a sentence. You don't need to do this inside your application."
msgstr "为了演示的目的，我们创建一个端点，除了记录一个句子，什么都不做。你不需要在你的应用程序中这样做。"

#: _guides/centralized-log-management.adoc
#, fuzzy
msgid ""
"Send logs to the Elastic Stack (ELK) in the ECS (Elastic Common Schema) "
"format with the Socket handler"
msgstr "使用套接字处理程序以 ECS（弹性通用模式）格式向弹性堆栈 (ELK) 发送日志"

#: _guides/centralized-log-management.adoc
#, fuzzy
msgid ""
"You can send your logs to Logstash using a TCP input in the https://www."
"elastic.co/guide/en/ecs-logging/overview/current/intro.html[ECS] format.\n"
"To achieve this, we will use the `quarkus-logging-json` extension to format "
"the logs in JSON format and the socket handler to send them to Logstash."
msgstr ""
"您可以使用 link:https://www.elastic.co/guide/en/ecs-logging/overview/current/"
"intro.html[ECS] 格式的 TCP 输入将日志发送到 Logstash。为此，我们将使用 `quarkus-logging-json` "
"扩展将日志格式化为 JSON 格式，并使用套接字处理程序将日志发送到 Logstash。"

#: _guides/centralized-log-management.adoc
#, fuzzy
msgid "Create the following file  in `$HOME/pipelines/ecs.conf`:"
msgstr "在 `$HOME/pipelines/ecs.conf` 中创建以下文件"

#: _guides/centralized-log-management.adoc
#, fuzzy
msgid "Then configure your application to log in JSON format"
msgstr "然后将应用程序配置为 JSON 格式的日志"

#. type: Block title
#: _guides/centralized-log-management.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _guides/centralized-log-management.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#: _guides/centralized-log-management.adoc
#, fuzzy
msgid ""
"and specify the host and port of your Logstash endpoint. To be ECS "
"compliant, specify the log format."
msgstr "并指定 Logstash 端点的主机和端口。要符合 ECS 标准，请指定日志格式。"

#. type: Plain text
#: _guides/centralized-log-management.adoc
#, fuzzy
msgid "Finally, launch the components that compose the Elastic Stack:"
msgstr "最后，启动组成Elastic Stack的组件。"

#. type: Plain text
#: _guides/centralized-log-management.adoc
#, fuzzy
msgid "Elasticsearch"
msgstr "Elasticsearch"

#. type: Plain text
#: _guides/centralized-log-management.adoc
#, fuzzy
msgid "Logstash"
msgstr "洛克斯塔什 (Logstash)"

#. type: Plain text
#: _guides/centralized-log-management.adoc
#, fuzzy
msgid "Kibana"
msgstr "Kibana"

#. type: Plain text
#: _guides/centralized-log-management.adoc
#, fuzzy
msgid ""
"You can do this via the following `docker-compose.yml` file that you can "
"launch via `docker-compose up -d`:"
msgstr "你可以通过以下 `docker-compose.yml` 文件来实现，你可以通过 `docker-compose up -d` :"

#. type: Plain text
#: _guides/centralized-log-management.adoc
#, fuzzy
msgid ""
"Launch your application, you should see your logs arriving inside the "
"Elastic Stack; you can use Kibana available at http://localhost:5601/ to "
"access them."
msgstr ""
"启动你的应用程序，你应该看到你的日志到达Elastic Stack内；你可以使用Kibana在 http://localhost:5601/ "
"来访问它们。"

#: _guides/centralized-log-management.adoc
#, fuzzy
msgid "Send logs to Fluentd with the Syslog handler"
msgstr "使用 Syslog 处理程序向 Fluentd 发送日志"

#: _guides/centralized-log-management.adoc
#, fuzzy
msgid ""
"You can send your logs to Fluentd using a Syslog input.\n"
"As opposed to the GELF input, the Syslog input will not render multiline "
"logs in one event."
msgstr "您可以使用 Syslog 输入将日志发送到 Fluentd。与 GELF 输入不同，Syslog 输入不会在一个事件中显示多行日志。"

#: _guides/centralized-log-management.adoc
#, fuzzy
msgid ""
"First, you need to create a Fluentd image with the Elasticsearch plugin.\n"
"You can use the following Dockerfile that should be created inside a "
"`fluentd` directory."
msgstr ""
"首先，你需要创建一个带有 Elasticsearch 插件的 Fluentd 映像。你可以使用下面的 Dockerfile，该文件应在 "
"`fluentd` 目录中创建。"

#: _guides/centralized-log-management.adoc
#, fuzzy
msgid ""
"Then, you need to create a Fluentd configuration file inside `$HOME/fluentd/"
"fluent.conf`"
msgstr "然后，您需要在 `$HOME/fluentd/fluent.conf`"

#. type: Plain text
#: _guides/centralized-log-management.adoc
#, fuzzy
msgid "Then, launch the components that compose the EFK Stack:"
msgstr "然后，启动构成EFK堆栈的组件。"

#. type: Plain text
#: _guides/centralized-log-management.adoc
#, fuzzy
msgid "Fluentd"
msgstr "荧光剂d"

#. type: Plain text
#: _guides/centralized-log-management.adoc
#, fuzzy
msgid "Finally, configure your application to send logs to EFK using Syslog:"
msgstr "最后，配置你的应用程序使用Syslog向EFK发送日志。"

#. type: Plain text
#: _guides/centralized-log-management.adoc
#, fuzzy
msgid ""
"Launch your application, you should see your logs arriving inside EFK: you "
"can use Kibana available at http://localhost:5601/ to access them."
msgstr ""
"启动你的应用程序，你应该看到你的日志到达了EFK里面：你可以使用Kibana在 http://localhost:5601/ ，来访问它们。"

#: _guides/centralized-log-management.adoc
#, fuzzy
msgid "Send logs with OpenTelemetry Logging"
msgstr "使用 OpenTelemetry 日志功能发送日志"

#: _guides/centralized-log-management.adoc
#, fuzzy
msgid ""
"OpenTelemetry Logging is able to send logs to a compatible OpenTelemetry "
"collector. Its usage is described in the guide xref:opentelemetry-logging."
"adoc[Using OpenTelemetry Logging]."
msgstr ""
"OpenTelemetry Logging 能够将日志发送到兼容的 OpenTelemetry 收集器。 xref:opentelemetry-"
"logging.adoc[使用 OpenTelemetry Logging 的] 指南中介绍了其用法。"

#: _guides/centralized-log-management.adoc
#, fuzzy
msgid "Send logs with the `logging-gelf` extension"
msgstr "使用 `logging-gelf` 扩展名发送日志"

#: _guides/centralized-log-management.adoc
#, fuzzy
msgid ""
"This extension is deprecated, we advise considering the alternatives "
"described above in this guide."
msgstr "该扩展已被弃用，建议考虑本指南中的上述替代方案。"

#: _guides/centralized-log-management.adoc
#, fuzzy
msgid ""
"The `quarkus-logging-gelf` extension will add a GELF log handler to the "
"underlying logging backend that Quarkus uses (jboss-logmanager).\n"
"By default, it is disabled, if you enable it but still use another handler "
"(by default the console handler is enabled), your logs will be sent to both "
"handlers."
msgstr ""
"`quarkus-logging-gelf` 扩展将为 Quarkus 使用的底层日志后端（jboss-logmanager）添加一个 GELF "
"日志处理程序。默认情况下，它是禁用的，如果你启用了它，但仍使用另一个处理程序（默认情况下，控制台处理程序是启用的），你的日志将同时发送到两个处理程序。"

#: _guides/centralized-log-management.adoc
#, fuzzy
msgid ""
"You can add the `logging-gelf` extension to your project by running the "
"following command in your project base directory:"
msgstr "在项目基本目录下运行以下命令，即可将 `logging-gelf` 扩展名添加到项目中："

#. type: Plain text
#: _guides/centralized-log-management.adoc
#, fuzzy
msgid "This will add the following dependency to your build file:"
msgstr "这将在你的构建文件中添加以下依赖关系。"

#: _guides/centralized-log-management.adoc
#, fuzzy
msgid ""
"Configure the GELF log handler to send logs to an external UDP endpoint on "
"port 12201:"
msgstr "配置 GELF 日志处理程序，将日志发送到端口为 12201 的外部 UDP 端点："

#. type: Title ==
#: _guides/centralized-log-management.adoc
#, fuzzy, no-wrap
msgid "Send logs to Graylog"
msgstr "发送日志到Graylog"

#: _guides/centralized-log-management.adoc
#, fuzzy
msgid "It is advised to use the Syslog handler instead."
msgstr "建议改用系统日志处理程序。"

#. type: Plain text
#: _guides/centralized-log-management.adoc
#, fuzzy
msgid ""
"To send logs to Graylog, you first need to launch the components that "
"compose the Graylog stack:"
msgstr "要向Graylog发送日志，你首先需要启动构成Graylog堆栈的组件。"

#. type: Plain text
#: _guides/centralized-log-management.adoc
#, fuzzy
msgid "MongoDB"
msgstr "梦之城_梦之城娱乐_梦之城国际娱乐_梦之城国际娱乐平台"

#. type: Plain text
#: _guides/centralized-log-management.adoc
#, fuzzy
msgid "Graylog"
msgstr "灰色日志"

#: _guides/centralized-log-management.adoc
#, fuzzy
msgid ""
"Then, you need to create a UDP input in Graylog.\n"
"You can do it from the Graylog web console (System -> Input -> Select GELF "
"UDP) available at http://localhost:9000 or via the API."
msgstr ""
"然后，您需要在 Graylog 中创建一个 UDP 输入。您可以从 http://localhost:9000 上的 Graylog 网络控制台（系统 "
"→ 输入 → 选择 GELF UDP）或通过 API 来创建。"

#. type: Plain text
#: _guides/centralized-log-management.adoc
#, fuzzy
msgid ""
"This curl example will create a new Input of type GELF UDP, it uses the "
"default login from Graylog (admin/admin)."
msgstr "这个curl例子将创建一个新的GELF UDP类型的输入，它使用Graylog的默认登录（admin/admin）。"

#. type: Plain text
#: _guides/centralized-log-management.adoc
#, fuzzy
msgid ""
"Launch your application, you should see your logs arriving inside Graylog."
msgstr "启动你的应用程序，你应该看到你的日志到达Graylog里面。"

#. type: Title ==
#: _guides/centralized-log-management.adoc
#, fuzzy, no-wrap
msgid "Send logs to Logstash / the Elastic Stack (ELK)"
msgstr "将日志发送到Logstash/Elastic Stack（ELK）。"

#: _guides/centralized-log-management.adoc
#, fuzzy
msgid ""
"It is advised to use xref:opentelemetry-logging.adoc[OpenTelemetry Logging] "
"or the Socket handler instead."
msgstr "建议改用 xref:opentelemetry-logging.adoc[OpenTelemetry 日志] 或 Socket 处理程序。"

#. type: Plain text
#: _guides/centralized-log-management.adoc
#, fuzzy
msgid ""
"Logstash comes by default with an Input plugin that can understand the GELF "
"format, we will first create a pipeline that enables this plugin."
msgstr "Logstash默认带有一个可以理解GELF格式的输入插件，我们将首先创建一个启用该插件的管道。"

#: _guides/centralized-log-management.adoc
#, fuzzy
msgid "Create the following file  in `$HOME/pipelines/gelf.conf`:"
msgstr "在 `$HOME/pipelines/gelf.conf` 中创建以下文件"

#. type: Title ==
#: _guides/centralized-log-management.adoc
#, fuzzy, no-wrap
msgid "Send logs to Fluentd (EFK)"
msgstr "发送日志到Fluentd (EFK)"

#: _guides/centralized-log-management.adoc
#, fuzzy
msgid ""
"First, you need to create a Fluentd image with the needed plugins: "
"elasticsearch and input-gelf.\n"
"You can use the following Dockerfile that should be created inside a "
"`fluentd` directory."
msgstr ""
"首先，你需要创建一个带有所需插件的 Fluentd 映像：elasticsearch 和 input-gelf。您可以使用下面的 "
"Dockerfile，该文件应在 `fluentd` 目录中创建。"

#. type: Plain text
#: _guides/centralized-log-management.adoc
#, fuzzy
msgid "You can build the image or let docker-compose build it for you."
msgstr "你可以建立镜像或让docker-compose为你建立。"

#. type: Plain text
#: _guides/centralized-log-management.adoc
#, fuzzy
msgid ""
"Then you need to create a fluentd configuration file inside `$HOME/fluentd/"
"fluent.conf`"
msgstr "然后你需要在 `$HOME/fluentd/fluent.conf` "

#. type: Plain text
#: _guides/centralized-log-management.adoc
#, fuzzy
msgid "Finally, launch the components that compose the EFK Stack:"
msgstr "最后，启动组成EFK栈的组件。"

#. type: Title ==
#: _guides/centralized-log-management.adoc
#, fuzzy, no-wrap
msgid "Elasticsearch indexing consideration"
msgstr "Elasticsearch索引的考虑"

#: _guides/centralized-log-management.adoc
#, fuzzy
msgid ""
"Be careful that, by default, Elasticsearch will automatically map unknown "
"fields (if not disabled in the index settings) by detecting their type.\n"
"This can become tricky if you use log parameters (which are included by "
"default), or if you enable MDC inclusion (disabled by default),\n"
"as the first log will define the type of the message parameter (or MDC "
"parameter) field inside the index."
msgstr ""
"请注意，默认情况下，Elasticsearch "
"会通过检测未知字段的类型自动映射未知字段（如果未在索引设置中禁用）。如果使用日志参数（默认情况下包含），或启用 MDC "
"包含（默认情况下禁用），这可能会变得很棘手，因为第一个日志将定义索引内消息参数（或 MDC 参数）字段的类型。"

#. type: Plain text
#: _guides/centralized-log-management.adoc
#, fuzzy
msgid "Imagine the following case:"
msgstr "设想一下以下情况。"

#: _guides/centralized-log-management.adoc
#, fuzzy
msgid ""
"With log message parameters enabled, the first log message sent to "
"Elasticsearch will have a `MessageParam0` parameter with an `int` type;\n"
"this will configure the index with a field of type `integer`.\n"
"When the second message will arrive to Elasticsearch, it will have a "
"`MessageParam0` parameter with the boolean value `true`, and this will "
"generate an indexing error."
msgstr ""
"启用日志消息参数后，发送到 Elasticsearch 的第一条日志消息将包含一个 `MessageParam0` 参数，其类型为 `int` "
"；这将为索引配置一个类型为 `integer` 的字段。当第二条日志信息到达 Elasticsearch 时，它将包含一个布尔值为 `true` 的 "
"`MessageParam0` 参数，这将产生索引错误。"

#: _guides/centralized-log-management.adoc
#, fuzzy
msgid ""
"To work around this limitation, you can disable sending log message "
"parameters via `logging-gelf` by configuring `quarkus.log.handler.gelf."
"include-log-message-parameters=false`,\n"
"or you can configure your Elasticsearch index to store those fields as text "
"or keyword, Elasticsearch will then automatically make the translation from "
"int/boolean to a String."
msgstr ""
"要绕过这一限制，可以通过配置 `quarkus.log.handler.gelf.include-log-message-parameters="
"false` 禁止通过 `logging-gelf` 发送日志信息参数，或者可以配置 Elasticsearch "
"索引，将这些字段存储为文本或关键字，然后 Elasticsearch 会自动将 int/boolean 转换为字符串。"

#. type: Plain text
#: _guides/centralized-log-management.adoc
#, fuzzy
msgid ""
"See the following documentation for Graylog (but the same issue exists for "
"the other central logging stacks): link:https://docs.graylog.org/en/3.2/"
"pages/configuration/elasticsearch.html#custom-index-mappings[Custom Index "
"Mappings]."
msgstr ""
"请参阅以下有关 Graylog 的文档（但其他中央日志栈也存在同样的问题）： link:https://docs.graylog.org/en/3.2/"
"pages/configuration/elasticsearch.html#custom-index-mappings[自定义索引映射] 。"

#. type: Title ==
#: _guides/centralized-log-management.adoc
#, no-wrap
msgid "Configuration Reference"
msgstr "配置参考"

#. type: Plain text
#: _guides/centralized-log-management.adoc
#, fuzzy
msgid "Configuration is done through the usual `application.properties` file."
msgstr "配置通过常用的 `application.properties` 文件完成。"

#: _guides/centralized-log-management.adoc
#, fuzzy
msgid ""
"<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></"
"i></span> Configuration property fixed at build time - All other "
"configuration properties are overridable at runtime <input type=\"search\" "
"id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""
"<span class=\"icicon\"><i class=\"fa fa-lock\" title=\"在构建时固定\"></i></"
"span>在构建时固定的配置属性 - 所有其他配置属性都可在运行时重写 <input type=\"search\" id=\"config-"
"search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"

#: _guides/centralized-log-management.adoc
#, fuzzy
msgid ""
"This extension uses the `logstash-gelf` library that allow more "
"configuration options via system properties,\n"
"you can access its documentation here: https://logging.paluch.biz/."
msgstr ""
"该扩展使用 `logstash-gelf` 库，可通过系统属性提供更多配置选项，你可以在这里访问其文档 link:https://logging."
"paluch.biz/[：https://logging.paluch.biz/。]"
