# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/centralized-log-management.adoc:6
#, fuzzy, no-wrap
msgid "Centralized log management (Graylog, Logstash, Fluentd)"
msgstr "集中的日志管理（Graylog、Logstash、Fluentd）。"

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:13
#, fuzzy
msgid "This guide explains how you can send your logs to a centralized log management system like Graylog, Logstash (inside the Elastic Stack or ELK - Elasticsearch, Logstash, Kibana) or Fluentd (inside EFK - Elasticsearch, Fluentd, Kibana)."
msgstr "本指南解释了如何将日志发送到集中式日志管理系统，如Graylog、Logstash（Elastic Stack或ELK内部--Elasticsearch、Logstash、Kibana）或Fluentd（EFK内部--Elasticsearch、Fluentd、Kibana）。"

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:16
#, fuzzy
msgid "There are a lot of different ways to centralize your logs (if you are using Kubernetes, the simplest way is to log to the console and ask you cluster administrator to integrate a central log manager inside your cluster).  In this guide, we will expose how to send them to an external tool using the `quarkus-logging-gelf` extension that can use TCP or UDP to send logs in the Graylog Extended Log Format (GELF)."
msgstr "有很多不同的方法来集中你的日志（如果你使用Kubernetes，最简单的方法是登录到控制台，并要求你的集群管理员在集群内集成一个中央日志管理器）。在本指南中，我们将介绍如何使用 `quarkus-logging-gelf` 扩展将它们发送到外部工具，该扩展可以使用TCP或UDP来发送Graylog扩展日志格式（GELF）的日志。"

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:19
#, fuzzy
msgid "The `quarkus-logging-gelf` extension will add a GELF log handler to the underlying logging backend that Quarkus uses (jboss-logmanager).  By default, it is disabled, if you enable it but still use another handler (by default the console handler is enabled), your logs will be sent to both handlers."
msgstr " `quarkus-logging-gelf` 扩展将为Quarkus使用的底层日志后端（jboss-logmanager）添加一个GELF日志处理程序。默认情况下，它是禁用的，如果你启用它，但仍然使用另一个处理程序（默认情况下，控制台处理程序被启用），你的日志将被发送到两个处理程序。"

#. type: Title ==
#: upstream/_guides/centralized-log-management.adoc:20
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: upstream/_guides/centralized-log-management.adoc:25
#, fuzzy, no-wrap
msgid "Example application"
msgstr "应用实例"

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:28
#, fuzzy
msgid "The following examples will all be based on the same example application that you can create with the following steps."
msgstr "下面的例子都将基于同一个例子的应用程序，你可以通过以下步骤创建。"

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:30
#, fuzzy
msgid "Create an application with the `quarkus-logging-gelf` extension. You can use the following command to create it:"
msgstr "创建一个具有 `quarkus-logging-gelf` 扩展名的应用程序。你可以使用以下命令来创建它。"

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:37
#, fuzzy
msgid "If you already have your Quarkus project configured, you can add the `logging-gelf` extension to your project by running the following command in your project base directory:"
msgstr "如果你已经配置了你的Quarkus项目，你可以通过在你的项目基础目录下运行以下命令，将 `logging-gelf` 扩展到你的项目。"

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:42
#, fuzzy
msgid "This will add the following dependency to your build file:"
msgstr "这将在你的构建文件中添加以下依赖关系。"

#. type: Block title
#: upstream/_guides/centralized-log-management.adoc:44
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/centralized-log-management.adoc:50
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-logging-gelf</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/centralized-log-management.adoc:53
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/centralized-log-management.adoc:56
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-logging-gelf\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:59
#, fuzzy
msgid "For demonstration purposes, we create an endpoint that does nothing but log a sentence. You don't need to do this inside your application."
msgstr "为了演示的目的，我们创建一个端点，除了记录一个句子，什么都不做。你不需要在你的应用程序中这样做。"

#. type: delimited block -
#: upstream/_guides/centralized-log-management.adoc:65
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/centralized-log-management.adoc:67
#, no-wrap
msgid "import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/centralized-log-management.adoc:72
#, no-wrap
msgid ""
"@Path(\"/gelf-logging\")\n"
"@ApplicationScoped\n"
"public class GelfLoggingResource {\n"
"    private static final Logger LOG = Logger.getLogger(GelfLoggingResource.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/centralized-log-management.adoc:77
#, no-wrap
msgid ""
"    @GET\n"
"    public void log() {\n"
"        LOG.info(\"Some useful log message\");\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/centralized-log-management.adoc:79
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:82
#, fuzzy
msgid "Configure the GELF log handler to send logs to an external UDP endpoint on the port 12201:"
msgstr "配置GELF日志处理程序，将日志发送到12201端口的外部UDP端点。"

#. type: delimited block -
#: upstream/_guides/centralized-log-management.adoc:88
#, no-wrap
msgid ""
"quarkus.log.handler.gelf.enabled=true\n"
"quarkus.log.handler.gelf.host=localhost\n"
"quarkus.log.handler.gelf.port=12201\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/centralized-log-management.adoc:90
#, fuzzy, no-wrap
msgid "Send logs to Graylog"
msgstr "发送日志到Graylog"

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:93
#, fuzzy
msgid "To send logs to Graylog, you first need to launch the components that compose the Graylog stack:"
msgstr "要向Graylog发送日志，你首先需要启动构成Graylog堆栈的组件。"

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:95
#, fuzzy
msgid "MongoDB"
msgstr "梦之城_梦之城娱乐_梦之城国际娱乐_梦之城国际娱乐平台"

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:96
#: upstream/_guides/centralized-log-management.adoc:176
#: upstream/_guides/centralized-log-management.adoc:265
#: upstream/_guides/centralized-log-management.adoc:351
#, fuzzy
msgid "Elasticsearch"
msgstr "Elasticsearch"

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:97
#, fuzzy
msgid "Graylog"
msgstr "灰色日志"

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:99
#: upstream/_guides/centralized-log-management.adoc:180
#: upstream/_guides/centralized-log-management.adoc:269
#: upstream/_guides/centralized-log-management.adoc:355
#, fuzzy
msgid "You can do this via the following `docker-compose.yml` file that you can launch via `docker-compose up -d`:"
msgstr "你可以通过以下 `docker-compose.yml` 文件来实现，你可以通过 `docker-compose up -d` :"

#. type: delimited block -
#: upstream/_guides/centralized-log-management.adoc:103
#: upstream/_guides/centralized-log-management.adoc:273
#: upstream/_guides/centralized-log-management.adoc:359
#, no-wrap
msgid "version: '3.2'\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/centralized-log-management.adoc:113
#, no-wrap
msgid ""
"services:\n"
"  elasticsearch:\n"
"    image: docker.elastic.co/elasticsearch/elasticsearch-oss:{es-version}\n"
"    ports:\n"
"      - \"9200:9200\"\n"
"    environment:\n"
"      ES_JAVA_OPTS: \"-Xms512m -Xmx512m\"\n"
"    networks:\n"
"      - graylog\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/centralized-log-management.adoc:118
#, no-wrap
msgid ""
"  mongo:\n"
"    image: mongo:4.0\n"
"    networks:\n"
"      - graylog\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/centralized-log-management.adoc:132
#, no-wrap
msgid ""
"  graylog:\n"
"    image: graylog/graylog:3.1\n"
"    ports:\n"
"      - \"9000:9000\"\n"
"      - \"12201:12201/udp\"\n"
"      - \"1514:1514\"\n"
"    environment:\n"
"      GRAYLOG_HTTP_EXTERNAL_URI: \"http://127.0.0.1:9000/\"\n"
"    networks:\n"
"      - graylog\n"
"    depends_on:\n"
"      - elasticsearch\n"
"      - mongo\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/centralized-log-management.adoc:136
#, no-wrap
msgid ""
"networks:\n"
"  graylog:\n"
"    driver: bridge\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:140
#, fuzzy
msgid "Then, you need to create a UDP input in Graylog.  You can do it from the Graylog web console (System -> Input -> Select GELF UDP) available at http://localhost:9000 or via the API."
msgstr "然后，你需要在Graylog中创建一个UDP输入。你可以从Graylog网络控制台（系统→输入→选择GELF UDP）进行，可在 http://localhost:9000 ，或通过API进行。"

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:142
#, fuzzy
msgid "This curl example will create a new Input of type GELF UDP, it uses the default login from Graylog (admin/admin)."
msgstr "这个curl例子将创建一个新的GELF UDP类型的输入，它使用Graylog的默认登录（admin/admin）。"

#. type: delimited block -
#: upstream/_guides/centralized-log-management.adoc:148
#, no-wrap
msgid ""
"curl -H \"Content-Type: application/json\" -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"X-Requested-By: curl\" -X POST -v -d \\\n"
"'{\"title\":\"udp input\",\"configuration\":{\"recv_buffer_size\":262144,\"bind_address\":\"0.0.0.0\",\"port\":12201,\"decompress_size_limit\":8388608},\"type\":\"org.graylog2.inputs.gelf.udp.GELFUDPInput\",\"global\":true}' \\\n"
"http://localhost:9000/api/system/inputs\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:151
#, fuzzy
msgid "Launch your application, you should see your logs arriving inside Graylog."
msgstr "启动你的应用程序，你应该看到你的日志到达Graylog里面。"

#. type: Title ==
#: upstream/_guides/centralized-log-management.adoc:152
#, fuzzy, no-wrap
msgid "Send logs to Logstash / the Elastic Stack (ELK)"
msgstr "将日志发送到Logstash/Elastic Stack（ELK）。"

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:155
#, fuzzy
msgid "Logstash comes by default with an Input plugin that can understand the GELF format, we will first create a pipeline that enables this plugin."
msgstr "Logstash默认带有一个可以理解GELF格式的输入插件，我们将首先创建一个启用该插件的管道。"

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:157
#, fuzzy
msgid "Create the following file in `$HOME/pipelines/gelf.conf`:"
msgstr "在 `$HOME/pipelines/gelf.conf` 中创建以下文件。"

#. type: delimited block -
#: upstream/_guides/centralized-log-management.adoc:171
#, no-wrap
msgid ""
"input {\n"
"  gelf {\n"
"    port => 12201\n"
"  }\n"
"}\n"
"output {\n"
"  stdout {}\n"
"  elasticsearch {\n"
"    hosts => [\"http://elasticsearch:9200\"]\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:174
#, fuzzy
msgid "Finally, launch the components that compose the Elastic Stack:"
msgstr "最后，启动组成Elastic Stack的组件。"

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:177
#, fuzzy
msgid "Logstash"
msgstr "洛克斯塔什 (Logstash)"

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:178
#: upstream/_guides/centralized-log-management.adoc:267
#: upstream/_guides/centralized-log-management.adoc:353
#, fuzzy
msgid "Kibana"
msgstr "Kibana"

#. type: delimited block -
#: upstream/_guides/centralized-log-management.adoc:185
#, no-wrap
msgid ""
"# Launch Elasticsearch\n"
"version: '3.2'\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/centralized-log-management.adoc:196
#, no-wrap
msgid ""
"services:\n"
"  elasticsearch:\n"
"    image: docker.elastic.co/elasticsearch/elasticsearch-oss:{es-version}\n"
"    ports:\n"
"      - \"9200:9200\"\n"
"      - \"9300:9300\"\n"
"    environment:\n"
"      ES_JAVA_OPTS: \"-Xms512m -Xmx512m\"\n"
"    networks:\n"
"      - elk\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/centralized-log-management.adoc:211
#, no-wrap
msgid ""
"  logstash:\n"
"    image: docker.elastic.co/logstash/logstash-oss:{es-version}\n"
"    volumes:\n"
"      - source: $HOME/pipelines\n"
"        target: /usr/share/logstash/pipeline\n"
"        type: bind\n"
"    ports:\n"
"      - \"12201:12201/udp\"\n"
"      - \"5000:5000\"\n"
"      - \"9600:9600\"\n"
"    networks:\n"
"      - elk\n"
"    depends_on:\n"
"      - elasticsearch\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/centralized-log-management.adoc:220
#, no-wrap
msgid ""
"  kibana:\n"
"    image: docker.elastic.co/kibana/kibana-oss:{es-version}\n"
"    ports:\n"
"      - \"5601:5601\"\n"
"    networks:\n"
"      - elk\n"
"    depends_on:\n"
"      - elasticsearch\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/centralized-log-management.adoc:224
#, no-wrap
msgid ""
"networks:\n"
"  elk:\n"
"    driver: bridge\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:228
#, fuzzy
msgid "Launch your application, you should see your logs arriving inside the Elastic Stack; you can use Kibana available at http://localhost:5601/ to access them."
msgstr "启动你的应用程序，你应该看到你的日志到达Elastic Stack内；你可以使用Kibana在 http://localhost:5601/ 来访问它们。"

#. type: Title ==
#: upstream/_guides/centralized-log-management.adoc:229
#, fuzzy, no-wrap
msgid "Send logs to Fluentd (EFK)"
msgstr "发送日志到Fluentd (EFK)"

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:233
#, fuzzy
msgid "First, you need to create a Fluentd image with the needed plugins: elasticsearch and input-gelf.  You can use the following Dockerfile that should be created inside a `fluentd` directory."
msgstr "首先，你需要创建一个带有所需插件的Fluentd镜像：elasticsearch和input-gelf。你可以使用下面的Dockerfile，它应该在 `fluentd` 目录内创建。"

#. type: delimited block -
#: upstream/_guides/centralized-log-management.adoc:239
#, no-wrap
msgid ""
"FROM fluent/fluentd:v1.3-debian\n"
"RUN [\"gem\", \"install\", \"fluent-plugin-elasticsearch\", \"--version\", \"3.7.0\"]\n"
"RUN [\"gem\", \"install\", \"fluent-plugin-input-gelf\", \"--version\", \"0.3.1\"]\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:242
#, fuzzy
msgid "You can build the image or let docker-compose build it for you."
msgstr "你可以建立镜像或让docker-compose为你建立。"

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:244
#, fuzzy
msgid "Then you need to create a fluentd configuration file inside `$HOME/fluentd/fluent.conf`"
msgstr "然后你需要在 `$HOME/fluentd/fluent.conf` "

#. type: delimited block -
#: upstream/_guides/centralized-log-management.adoc:253
#, no-wrap
msgid ""
"<source>\n"
"  type gelf\n"
"  tag example.gelf\n"
"  bind 0.0.0.0\n"
"  port 12201\n"
"</source>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/centralized-log-management.adoc:260
#, no-wrap
msgid ""
"<match example.gelf>\n"
"  @type elasticsearch\n"
"  host elasticsearch\n"
"  port 9200\n"
"  logstash_format true\n"
"</match>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:263
#, fuzzy
msgid "Finally, launch the components that compose the EFK Stack:"
msgstr "最后，启动组成EFK栈的组件。"

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:266
#: upstream/_guides/centralized-log-management.adoc:352
#, fuzzy
msgid "Fluentd"
msgstr "荧光剂d"

#. type: delimited block -
#: upstream/_guides/centralized-log-management.adoc:284
#: upstream/_guides/centralized-log-management.adoc:370
#, no-wrap
msgid ""
"services:\n"
"  elasticsearch:\n"
"    image: docker.elastic.co/elasticsearch/elasticsearch-oss:{es-version}\n"
"    ports:\n"
"      - \"9200:9200\"\n"
"      - \"9300:9300\"\n"
"    environment:\n"
"      ES_JAVA_OPTS: \"-Xms512m -Xmx512m\"\n"
"    networks:\n"
"      - efk\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/centralized-log-management.adoc:297
#, no-wrap
msgid ""
"  fluentd:\n"
"    build: fluentd\n"
"    ports:\n"
"      - \"12201:12201/udp\"\n"
"    volumes:\n"
"      - source: $HOME/fluentd\n"
"        target: /fluentd/etc\n"
"        type: bind\n"
"    networks:\n"
"      - efk\n"
"    depends_on:\n"
"      - elasticsearch\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/centralized-log-management.adoc:306
#: upstream/_guides/centralized-log-management.adoc:392
#, no-wrap
msgid ""
"  kibana:\n"
"    image: docker.elastic.co/kibana/kibana-oss:{es-version}\n"
"    ports:\n"
"      - \"5601:5601\"\n"
"    networks:\n"
"      - efk\n"
"    depends_on:\n"
"      - elasticsearch\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/centralized-log-management.adoc:310
#: upstream/_guides/centralized-log-management.adoc:396
#, no-wrap
msgid ""
"networks:\n"
"  efk:\n"
"    driver: bridge\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:313
#: upstream/_guides/centralized-log-management.adoc:410
#, fuzzy
msgid "Launch your application, you should see your logs arriving inside EFK: you can use Kibana available at http://localhost:5601/ to access them."
msgstr "启动你的应用程序，你应该看到你的日志到达了EFK里面：你可以使用Kibana在 http://localhost:5601/ ，来访问它们。"

#. type: Title ==
#: upstream/_guides/centralized-log-management.adoc:314
#, fuzzy, no-wrap
msgid "GELF alternative: use Syslog"
msgstr "GELF替代方案：使用Syslog"

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:318
#, fuzzy
msgid "You can also send your logs to Fluentd using a Syslog input.  As opposed to the GELF input, the Syslog input will not render multiline logs in one event, that's why we advise to use the GELF input that we implement in Quarkus."
msgstr "你也可以使用Syslog输入将你的日志发送到Fluentd。与GELF输入相反，Syslog输入不会在一个事件中呈现多行日志，这就是为什么我们建议使用Quarkus中实现的GELF输入。"

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:321
#, fuzzy
msgid "First, you need to create a Fluentd image with the elasticsearch plugin.  You can use the following Dockerfile that should be created inside a `fluentd` directory."
msgstr "首先，你需要创建一个带有elasticsearch插件的Fluentd镜像。你可以使用下面的Dockerfile，它应该在 `fluentd` 目录内创建。"

#. type: delimited block -
#: upstream/_guides/centralized-log-management.adoc:326
#, no-wrap
msgid ""
"FROM fluent/fluentd:v1.3-debian\n"
"RUN [\"gem\", \"install\", \"fluent-plugin-elasticsearch\", \"--version\", \"3.7.0\"]\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:329
#, fuzzy
msgid "Then, you need to create a fluentd configuration file inside `$HOME/fluentd/fluent.conf`"
msgstr "然后，你需要创建一个 fluentd 配置文件，该文件位于 `$HOME/fluentd/fluent.conf` "

#. type: delimited block -
#: upstream/_guides/centralized-log-management.adoc:339
#, no-wrap
msgid ""
"<source>\n"
"  @type syslog\n"
"  port 5140\n"
"  bind 0.0.0.0\n"
"  message_format rfc5424\n"
"  tag system\n"
"</source>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/centralized-log-management.adoc:346
#, no-wrap
msgid ""
"<match **>\n"
"  @type elasticsearch\n"
"  host elasticsearch\n"
"  port 9200\n"
"  logstash_format true\n"
"</match>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:349
#, fuzzy
msgid "Then, launch the components that compose the EFK Stack:"
msgstr "然后，启动构成EFK堆栈的组件。"

#. type: delimited block -
#: upstream/_guides/centralized-log-management.adoc:383
#, no-wrap
msgid ""
"  fluentd:\n"
"    build: fluentd\n"
"    ports:\n"
"      - \"5140:5140/udp\"\n"
"    volumes:\n"
"      - source: $HOME/fluentd\n"
"        target: /fluentd/etc\n"
"        type: bind\n"
"    networks:\n"
"      - efk\n"
"    depends_on:\n"
"      - elasticsearch\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:399
#, fuzzy
msgid "Finally, configure your application to send logs to EFK using Syslog:"
msgstr "最后，配置你的应用程序使用Syslog向EFK发送日志。"

#. type: delimited block -
#: upstream/_guides/centralized-log-management.adoc:407
#, no-wrap
msgid ""
"quarkus.log.syslog.enable=true\n"
"quarkus.log.syslog.endpoint=localhost:5140\n"
"quarkus.log.syslog.protocol=udp\n"
"quarkus.log.syslog.app-name=quarkus\n"
"quarkus.log.syslog.hostname=quarkus-test\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/centralized-log-management.adoc:411
#, fuzzy, no-wrap
msgid "Elasticsearch indexing consideration"
msgstr "Elasticsearch索引的考虑"

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:416
#, fuzzy
msgid "Be careful that, by default, Elasticsearch will automatically map unknown fields (if not disabled in the index settings) by detecting their type.  This can become tricky if you use log parameters (which are included by default), or if you enable MDC inclusion (disabled by default), as the first log will define the type of the message parameter (or MDC parameter) field inside the index."
msgstr "请注意，在默认情况下，Elasticsearch会通过检测未知字段的类型来自动映射（如果在索引设置中没有禁用）。如果你使用日志参数（默认包含），或者你启用MDC包含（默认禁用），这可能会变得很棘手，因为第一个日志将定义索引里面的消息参数（或MDC参数）字段的类型。"

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:418
#, fuzzy
msgid "Imagine the following case:"
msgstr "设想一下以下情况。"

#. type: delimited block -
#: upstream/_guides/centralized-log-management.adoc:423
#, no-wrap
msgid ""
"LOG.info(\"some {} message {} with {} param\", 1, 2, 3);\n"
"LOG.info(\"other {} message {} with {} param\", true, true, true);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:428
#, fuzzy
msgid "With log message parameters enabled, the first log message sent to Elasticsearch will have a `MessageParam0` parameter with an `int` type; this will configure the index with a field of type `integer`.  When the second message will arrive to Elasticsearch, it will have a `MessageParam0` parameter with the boolean value `true`, and this will generate an indexing error."
msgstr "在启用日志消息参数的情况下，发送到Elasticsearch的第一条日志消息将有一个 `MessageParam0` 参数，其类型为 `int` ；这将为索引配置一个类型为 `integer` 的字段。当第二条消息到达Elasticsearch时，它将有一个 `MessageParam0` 参数，其布尔值为 `true` ，这将产生一个索引错误。"

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:431
msgid "To work around this limitation, you can disable sending log message parameters via `logging-gelf` by configuring `quarkus.log.handler.gelf.include-log-message-parameters=false`, or you can configure your Elasticsearch index to store those fields as text or keyword, Elasticsearch will then automatically make the translation from int/boolean to a String."
msgstr ""

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:433
msgid "See the following documentation for Graylog (but the same issue exists for the other central logging stacks): link:https://docs.graylog.org/en/3.2/pages/configuration/elasticsearch.html#custom-index-mappings[Custom Index Mappings]."
msgstr ""

#. type: Title ==
#: upstream/_guides/centralized-log-management.adoc:435
#, no-wrap
msgid "Configuration Reference"
msgstr ""

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:438
msgid "Configuration is done through the usual `application.properties` file."
msgstr ""

#. type: Plain text
#: upstream/_guides/centralized-log-management.adoc:442
msgid "This extension uses the `logstash-gelf` library that allow more configuration options via system properties, you can access its documentation here: https://logging.paluch.biz/ ."
msgstr ""
