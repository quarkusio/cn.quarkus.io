# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/quarkus-reactive-architecture.adoc:6
#, fuzzy, no-wrap
msgid "Quarkus Reactive Architecture"
msgstr "Quarkus反应式架构"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:14
#, fuzzy
msgid "Quarkus is reactive.  It's even more than this: Quarkus unifies reactive and imperative programming.  You don't even have to choose: you can implement reactive components and imperative components then combine them inside the very **same** application.  No need to use different stacks, tooling or APIs; Quarkus bridges both worlds."
msgstr "夸库斯是反应性的。它甚至不止于此。Quarkus统一了反应式和命令式编程。你甚至不需要选择：你可以实现反应式组件和命令式组件，然后将它们结合在 *同一个* 应用程序中。不需要使用不同的堆栈、工具或API；Quarkus为两个世界架起了桥梁。"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:18
#, fuzzy
msgid "This page will explain what we mean by _Reactive_ and how Quarkus enables it.  We will also discuss execution and programming models.  Finally, we will list the Quarkus extensions offering reactive facets."
msgstr "本页将解释我们对 _Reactive_ 的理解以及Quarkus如何实现它。我们还将讨论执行和编程模型。最后，我们将列出Quarkus的扩展，提供反应式面。"

#. type: Title ==
#: upstream/_guides/quarkus-reactive-architecture.adoc:19
#, fuzzy, no-wrap
msgid "What is _Reactive_?"
msgstr "什么是 _反应性_ ？"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:23
#, fuzzy
msgid "The _Reactive_ word is overloaded and associated with many concepts such as back-pressure, monads, or event-driven architecture.  So, let's clarify what we mean by _Reactive_."
msgstr " _反应式（Reactive_ ）这个词是重载的，与许多概念有关，如背压、单体或事件驱动的架构。因此，让我们澄清一下我们对 _反应式_ 的理解。"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:26
#, fuzzy
msgid "_Reactive_ is a set of principles and guidelines to build responsive distributed systems and applications.  The https://www.reactivemanifesto.org/[Reactive Manifesto] characterizes _Reactive Systems_ as distributed systems having four characteristics:"
msgstr " _反应式_ 是一套建立反应式分布式系统和应用的原则和准则。 link:https://www.reactivemanifesto.org/[反应式宣言] 将 _反应式系统_ 描述为具有四个特征的分布式系统。"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:28
#, fuzzy
msgid "Responsive - they must respond in a timely fashion"
msgstr "响应性 - 他们必须及时响应"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:29
#, fuzzy
msgid "Elastic - they adapt themselves to the fluctuating load"
msgstr "弹性--它们自己适应波动的负载"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:30
#, fuzzy
msgid "Resilient - they handle failures gracefully"
msgstr "有弹性--他们能优雅地处理故障"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:31
#, fuzzy
msgid "Asynchronous message passing - the component of a reactive system interact using messages"
msgstr "异步消息传递 - 反应式系统的组件使用消息进行交互"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_guides/quarkus-reactive-architecture.adoc:32
#: upstream/_guides/quarkus-reactive-architecture.adoc:101
#, fuzzy, no-wrap
msgid "Reactive"
msgstr "反应性的"

#. type: Target for macro image
#: upstream/_guides/quarkus-reactive-architecture.adoc:32
#, no-wrap
msgid "reactive-systems.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:35
#, fuzzy
msgid "In addition to this, the https://principles.reactive.foundation/[Reactive Principles white paper] lists a set of rules and patterns to help the construction of reactive systems."
msgstr "除此之外，《 link:https://principles.reactive.foundation/[反应式原则》白皮书] 还列出了一套规则和模式，以帮助构建反应式系统。"

#. type: Title ==
#: upstream/_guides/quarkus-reactive-architecture.adoc:36
#, fuzzy, no-wrap
msgid "Reactive Systems and Quarkus"
msgstr "反应性系统和Quarkus"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:45
#, fuzzy
msgid "Reactive System is an architectural style that can be summarized by: distributed systems done right.  Relying on asynchronous message passing helps enforce the loose coupling (both in terms of space and time) between the different components.  You send messages to virtual destinations. The receiver can be located anywhere, or even not yet exist at the time of the message dispatch.  The elasticity pillar allows scaling up and down individual components according to the load.  Elasticity also provides redundancy, which helps with the resilience pillar.  Failures are inevitable.  Components forming a reactive system must handle them gracefully, avoid cascading failures, and self-adapt themselves."
msgstr "反应式系统是一种架构风格，可以概括为：分布式系统的正确做法。依靠异步消息传递有助于执行不同组件之间的松散耦合（在空间和时间方面）。你发送消息到虚拟目的地。接收者可以位于任何地方，甚至在消息发送时还不存在。弹性支柱允许根据负载扩大和缩小单个组件的规模。弹性也提供了冗余，这有助于弹性支柱的实现。失败是不可避免的。组成反应式系统的组件必须优雅地处理这些故障，避免级联故障，并自我适应。"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:49
#, fuzzy
msgid "A responsive system can continue to handle the request while facing failures and under fluctuating load.  Quarkus has been tailored for that.  It provides features that will help you design, implement and operate reactive systems."
msgstr "一个反应迅速的系统可以在面临故障和负载波动的情况下继续处理请求。Quarkus就是为此而定制的。它提供的功能将帮助你设计、实施和操作反应式系统。"

#. type: Title ==
#: upstream/_guides/quarkus-reactive-architecture.adoc:50
#, fuzzy, no-wrap
msgid "Reactive Applications"
msgstr "反应性应用"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:54
#, fuzzy
msgid "Quarkus is not only going to help you build reactive systems.  It's also going to make sure that each constituent enforces the reactive principles and is highly efficient."
msgstr "Quarkus不仅能帮助你建立反应式系统。它还将确保每个组成部分都能执行反应性原则，并具有很高的效率。"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:60
#, fuzzy
msgid "Efficiency is essential, especially in the Cloud and in containerized environments.  Resources, such as CPU and memory, are shared among multiple applications.  Greedy applications that consume lots of memory are inefficient and put penalties on sibling applications.  You may need to request more memory, CPU, or bigger virtual machines.  It either increases your monthly Cloud bill or decreases your deployment density."
msgstr "效率是至关重要的，特别是在云和容器化环境中。资源，如CPU和内存，是在多个应用程序之间共享的。贪婪的应用程序消耗了大量的内存，效率低下，并使同级别的应用程序受到惩罚。你可能需要申请更多的内存、CPU，或更大的虚拟机。这要么增加你每月的云计算账单，要么减少你的部署密度。"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:66
#, fuzzy
msgid "I/O is an essential part of almost any modern system.  Whether it is to call a remote service, interact with a database, or send messages to a broker, there are all I/O-based operations.  Efficiently handling them is critical to avoid greedy applications.  For this reason, Quarkus uses non-blocking I/O, which allows a low number of OS threads to manage many concurrent I/Os.  As a result, Quarkus applications allow for higher concurrency, use less memory, and improve the deployment density."
msgstr "I/O是几乎所有现代系统的一个重要组成部分。无论是调用远程服务、与数据库交互，还是向代理发送消息，都有基于I/O的操作。有效地处理它们对于避免贪婪的应用来说是至关重要的。出于这个原因，Quarkus使用非阻塞式I/O，它允许少量的操作系统线程来管理许多并发的I/O。因此，Quarkus应用程序允许更高的并发性，使用更少的内存，并提高部署密度。"

#. type: Title ==
#: upstream/_guides/quarkus-reactive-architecture.adoc:67
#, fuzzy, no-wrap
msgid "How does Quarkus enable Reactive?"
msgstr "Quarkus如何启用Reactive？"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:71
#, fuzzy
msgid "Under the hood, Quarkus has a reactive engine.  This engine, powered by Eclipse Vert.x and Netty, handles the non-blocking I/O interactions."
msgstr "在引擎盖下，Quarkus有一个反应式引擎。这个引擎由Eclipse Vert.x和Netty驱动，处理非阻塞的I/O交互。"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/quarkus-reactive-architecture.adoc:72
#, fuzzy, no-wrap
msgid "Quarkus Reactive Core"
msgstr "夸库斯反应性核心"

#. type: Target for macro image
#: upstream/_guides/quarkus-reactive-architecture.adoc:72
#, no-wrap
msgid "quarkus-reactive-core.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:75
#, fuzzy
msgid "Quarkus extensions and the application code can use this engine to orchestrate I/O interactions, interact with databases, send and receive messages, and so on."
msgstr "Quarkus扩展和应用程序代码可以使用这个引擎来协调I/O交互，与数据库交互，发送和接收消息，等等。"

#. type: Title ==
#: upstream/_guides/quarkus-reactive-architecture.adoc:76
#, fuzzy, no-wrap
msgid "Reactive execution model"
msgstr "反应式执行模式"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:80
#, fuzzy
msgid "While using non-blocking I/O has tremendous benefits, it does not come for free.  Indeed, it introduces a new execution model quite different from the one used by classical frameworks."
msgstr "虽然使用非阻塞I/O有巨大的好处，但它并不是免费的。事实上，它引入了一种新的执行模式，与经典框架所使用的模式完全不同。"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:91
#, fuzzy
msgid "Traditional applications use blocking I/O and an imperative (sequential) execution model.  So, in an application exposing an HTTP endpoint, each HTTP request is associated with a thread.  In general, that thread is going to process the whole request and the thread is tied up serving only that request for the duration of that request.  When the processing requires interacting with a remote service, it uses blocking I/O.  The thread is blocked, waiting for the result of the I/O.  While that model is simple to develop with (as everything is sequential), it has a few drawbacks.  To handle concurrent requests, you need multiple threads, so, you need to introduce a worker thread pool.  The size of this pool constrains the concurrency of the application.  In addition, each thread has a cost in terms of memory and CPU.  Large thread pools result in greedy applications."
msgstr "传统的应用程序使用阻塞式I/O和命令式（顺序）执行模式。因此，在一个暴露于HTTP端点的应用程序中，每个HTTP请求都与一个线程有关。一般来说，该线程要处理整个请求，并且该线程在该请求的持续时间内只为该请求服务。当处理过程需要与远程服务进行交互时，它使用阻塞式I/O。该线程被阻塞，等待I/O的结果。虽然这种模式开发起来很简单（因为一切都是顺序的），但它有一些缺点。为了处理并发请求，你需要多个线程，所以，你需要引入一个工作线程池。这个池的大小限制了应用程序的并发性。此外，每个线程在内存和CPU方面都有成本。大的线程池会导致贪婪的应用程序。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_guides/quarkus-reactive-architecture.adoc:92
#, fuzzy, no-wrap
msgid "Imperative"
msgstr "当务之急"

#. type: Target for macro image
#: upstream/_guides/quarkus-reactive-architecture.adoc:92
#, no-wrap
msgid "blocking-threads.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:100
#, fuzzy
msgid "As we have seen above, non-blocking I/O avoids that problem.  A few threads can handle many concurrent I/O.  If we go back to the HTTP endpoint example, the request processing is executed on one of these I/O threads.  Because there are only a few of them, you need to use them wisely.  When the request processing needs to call a remote service, you can't block the thread anymore.  You schedule the I/O and pass a continuation, i.e., the code to execute once the I/O completes."
msgstr "正如我们在上面看到的，非阻塞式I/O避免了这个问题。几个线程可以处理许多并发的I/O。如果我们回到HTTP端点的例子，请求处理是在这些I/O线程中的一个执行的。因为它们只有几个，所以你需要明智地使用它们。当请求处理需要调用一个远程服务时，你不能再阻塞线程。你要安排I/O，并传递一个continuation，也就是I/O完成后要执行的代码。"

#. type: Target for macro image
#: upstream/_guides/quarkus-reactive-architecture.adoc:101
#, no-wrap
msgid "reactive-thread.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:104
#, fuzzy
msgid "This model is much more efficient, but we need a way to write code to express these continuations."
msgstr "这种模式效率更高，但我们需要一种方法来编写代码来表达这些延续。"

#. type: Title ==
#: upstream/_guides/quarkus-reactive-architecture.adoc:105
#, fuzzy, no-wrap
msgid "Reactive Programming Models"
msgstr "反应式编程模型"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:109
#, fuzzy
msgid "The Quarkus architecture, based on non-blocking I/O and message passing, allows multiple supporting reactive development models that are all different in how they express continuations.  The two main ways to write reactive code with Quarkus are:"
msgstr "Quarkus架构基于非阻塞I/O和消息传递，允许多种支持的反应式开发模型，这些模型在表达连续的方式上都是不同的。用Quarkus编写反应式代码的两种主要方式是。"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:111
#, fuzzy
msgid "Reactive Programming with https://smallrye.io/smallrye-mutiny[Mutiny], and"
msgstr "使用 link:https://smallrye.io/smallrye-mutiny[Mutiny] 的反应式编程，以及"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:112
#, fuzzy
msgid "Coroutines with Kotlin"
msgstr "用Kotlin的Coroutines"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:117
#, fuzzy
msgid "First, https://smallrye.io/smallrye-mutiny[Mutiny] is an intuitive, event-driven reactive programming library.  With Mutiny, you write event-driven code.  Your code is a pipeline receiving events and processing them.  Each stage in your pipeline can be seen as a continuation, as Mutiny invokes them when the upstream part of the pipeline emits an event."
msgstr "首先， link:https://smallrye.io/smallrye-mutiny[Mutiny] 是一个直观的、事件驱动的反应式编程库。使用Mutiny，你可以编写事件驱动的代码。你的代码是一个接收事件并处理它们的管道。你的管道中的每个阶段都可以被看作是一个延续，因为当管道的上游部分发出一个事件时，Mutiny会调用它们。"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:121
#, fuzzy
msgid "The Mutiny API has been tailored to improve the readability and maintenance of the codebase.  Mutiny provides everything you need to orchestrate asynchronous actions, including concurrent execution.  It also offers a large set of operators to manipulate individual events and streams of events."
msgstr "Mutiny的API是为改善代码库的可读性和维护而定制的。Mutiny提供了协调异步行动所需的一切，包括并发执行。它还提供了大量的操作符来操作单个事件和事件流。"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:124
#, fuzzy
msgid "Find more info about Mutiny and its usage in Quarkus on xref:mutiny-primer.adoc[Mutiny support documentation]."
msgstr "在 link:mutiny-primer.html[Mutiny支持文档] 中找到更多关于Mutiny和它在Quarkus中的使用的信息。"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:128
#, fuzzy
msgid "Co-routines are a way to write asynchronous code sequentially.  It suspends the execution of the code during I/O and registers the rest of the code as the continuation.  Kotlin coroutines are great when developing in Kotlin and only need to express sequential compositions (chain of co-dependent asynchronous tasks)."
msgstr "协同程序是一种按顺序编写异步代码的方式。它在I/O期间暂停代码的执行，并将代码的其余部分注册为续篇。在Kotlin中开发时，Kotlin协同程序非常好，只需要表达顺序组合（共同依赖的异步任务链）。"

#. type: Title ==
#: upstream/_guides/quarkus-reactive-architecture.adoc:129
#, fuzzy, no-wrap
msgid "Unification of Imperative and Reactive"
msgstr "义务性和反应性的统一"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:134
#, fuzzy
msgid "Changing your development model is not simple.  It requires relearning and restructuring code in a non-blocking fashion.  Fortunately, you don't have to do it!"
msgstr "改变你的开发模式并不简单。它需要以非阻塞的方式重新学习和重组代码。幸运的是，你不需要这样做"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:141
#, fuzzy
msgid "Quarkus is inherently reactive thanks to its reactive engine.  But, you, as an application developer, don't have to write reactive code.  Quarkus unifies reactive and imperative.  It means that you can write traditional blocking applications on Quarkus.  But how do you avoid blocking the I/O threads? Quarkus implements a https://en.wikipedia.org/wiki/Proactor_pattern[proactor pattern] that switches to worker thread when needed."
msgstr "由于Quarkus的反应式引擎，它本质上是反应式的。但是，作为一个应用程序的开发者，你不需要写反应式代码。Quarkus将反应式和命令式统一起来。这意味着你可以在Quarkus上编写传统的阻塞式应用程序。但是你如何避免阻塞I/O线程呢？Quarkus实现了一个 link:https://en.wikipedia.org/wiki/Proactor_pattern[proactor模式] ，在需要时切换到工作线程。"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/quarkus-reactive-architecture.adoc:142
#, fuzzy, no-wrap
msgid "The proactor pattern in Quarkus"
msgstr "Quarkus中的proactor模式"

#. type: Target for macro image
#: upstream/_guides/quarkus-reactive-architecture.adoc:142
#, no-wrap
msgid "proactor-pattern.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:149
#, fuzzy
msgid "Thanks to hints in your code (such as the `@Blocking` and `@NonBlocking` annotations), Quarkus extensions can decide when the application logic is blocking or non-blocking.  If we go back to the HTTP endpoint example from above, the HTTP request is always received on an I/O thread.  Then, the extension dispatching that request to your code decides whether to call it on the I/O thread, avoiding thread switches, or on a worker thread.  This decision depends on the extension.  For example, the RESTEasy Reactive extension uses the `@Blocking` annotation to determine if the method needs to be invoked using a worker thread, or if it can be invoked using the I/O thread."
msgstr "由于你代码中的提示（比如 `@Blocking` 和 `@NonBlocking` 注释），Quarkus扩展可以决定应用逻辑是阻塞的还是非阻塞的。如果我们回到上面的HTTP端点的例子，HTTP请求总是在一个I/O线程上接收。然后，将该请求分派给你的代码的扩展决定是在I/O线程上调用它，避免线程切换，还是在工作线程上。这个决定取决于该扩展。例如，RESTEasy Reactive扩展使用 `@Blocking` 注解来决定该方法是否需要用工作线程来调用，或者是否可以用I/O线程来调用。"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:153
#, fuzzy
msgid "Quarkus is pragmatic and versatile.  You decide how to develop and execute your application.  You can use the imperative way, the reactive way, or mix them, using reactive on the parts of the application under high concurrency."
msgstr "Quarkus是务实的、多功能的。你决定如何开发和执行你的应用程序。你可以使用命令式方法，也可以使用反应式方法，或者混合使用，在高并发的应用部分使用反应式。"

#. type: Title ==
#: upstream/_guides/quarkus-reactive-architecture.adoc:155
#, fuzzy, no-wrap
msgid "Quarkus Extensions enabling Reactive"
msgstr "夸克斯扩展程序实现反应性"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:160
#, fuzzy
msgid "Quarkus offers a large set of reactive APIs and features.  This section lists the most important, but it's not an exhaustive list.  Quarkus adds new features in every release, and the https://github.com/quarkiverse[Quarkiverse] proposes many extensions enabling _Reactive_."
msgstr "Quarkus提供了大量的反应式API和功能。本节列出了最重要的功能，但这并不是一个详尽的列表。Quarkus在每个版本中都会增加新的功能， link:https://github.com/quarkiverse[Quarkiverse] 也提出了许多启用 _Reactive_ 的扩展。"

#. type: Title ===
#: upstream/_guides/quarkus-reactive-architecture.adoc:161
#, fuzzy, no-wrap
msgid "HTTP"
msgstr "HTTP"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:165
#, fuzzy
msgid "RESTEasy Reactive: an implementation of JAX-RS tailored for the Quarkus architecture.  It follows a reactive-first approach but allows imperative code using the `@Blocking` annotation."
msgstr "RESTEasy Reactive：为Quarkus架构定制的JAX-RS的实现。它遵循一种反应优先的方法，但允许使用 `@Blocking` 注释的命令式代码。"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:166
#, fuzzy
msgid "Reactive Routes: a declarative way to register HTTP routes directly on the Vert.x router used by Quarkus to route HTTP requests to methods."
msgstr "Reactive Routes：一种声明性的方式，可以直接在Vert.x路由器上注册HTTP路由，Quarkus使用它来将HTTP请求路由到方法。"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:168
#, fuzzy
msgid "Reactive Rest Client: allows consuming HTTP endpoints.  Under the hood, it uses the non-blocking I/O features from Quarkus."
msgstr "Reactive Rest Client：允许消费HTTP端点。它使用Quarkus的非阻塞I/O功能。"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:169
#, fuzzy
msgid "Qute - the Qute template engine exposes a reactive API to render templates in a non-blocking manner."
msgstr "Qute - Qute模板引擎暴露了一个反应式API，以非阻塞的方式渲染模板。"

#. type: Title ===
#: upstream/_guides/quarkus-reactive-architecture.adoc:170
#, fuzzy, no-wrap
msgid "Data"
msgstr "数据"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:173
#, fuzzy
msgid "Hibernate Reactive: a version of Hibernate ORM using asynchronous and non-blocking clients to interact with the database."
msgstr "Hibernate Reactive：Hibernate ORM的一个版本，使用异步和非阻塞的客户端与数据库进行交互。"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:174
#, fuzzy
msgid "Hibernate Reactive with Panache: provide active record and repository support on top of Hibernate Reactive."
msgstr "Hibernate Reactive with Panache：在Hibernate Reactive之上提供主动记录和存储库支持。"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:175
#, fuzzy
msgid "Reactive PostgreSQL client: an asynchronous and non-blocking client interacting with a PostgreSQL database, allowing high concurrency."
msgstr "反应式PostgreSQL客户端：一个与PostgreSQL数据库交互的异步和非阻塞的客户端，允许高并发。"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:176
#, fuzzy
msgid "Reactive MySQL client: an asynchronous and non-blocking client interacting with a MySQL database"
msgstr "反应式MySQL客户端：一个与MySQL数据库交互的异步和非阻塞的客户端"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:177
#, fuzzy
msgid "The MongoDB extension: exposes an imperative and reactive (Mutiny) APIs to interact with MongoDB."
msgstr "MongoDB扩展：暴露了一个命令式和反应式（Mutiny）的API，以与MongoDB互动。"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:178
#, fuzzy
msgid "Mongo with Panache offers active record support for both the imperative and reactive APIs."
msgstr "Mongo with Panache为命令式和反应式API提供主动记录支持。"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:179
#, fuzzy
msgid "The Cassandra extension: exposes an imperative and reactive (Mutiny) APIs to interact with Cassandra"
msgstr "Cassandra扩展：暴露了一个命令式和反应式（Mutiny）的API，以与Cassandra互动"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:180
#, fuzzy
msgid "The Redis extension: exposes an imperative and reactive (Mutiny) APIs to store and retrieve data from a Redis key-value store."
msgstr "Redis扩展：暴露了一个强制性和反应性（Mutiny）的API，以存储和检索Redis键值存储的数据。"

#. type: Title ===
#: upstream/_guides/quarkus-reactive-architecture.adoc:181
#, fuzzy, no-wrap
msgid "Event-Driven Architecture"
msgstr "事件驱动架构"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:184
#, fuzzy
msgid "Reactive Messaging: allows implementing event-driven applications using reactive and imperative code."
msgstr "反应式消息传递：允许使用反应式和命令式代码实现事件驱动的应用程序。"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:185
#, fuzzy
msgid "Kafka Connector for Reactive Messaging: allows implementing applications consuming and writing Kafka records"
msgstr "用于反应式消息传递的Kafka连接器：允许实现消耗和写入Kafka记录的应用程序"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:186
msgid "AMQP 1.0 Connector for Reactive Message: allows implementing applications sending and receiving AMQP messages."
msgstr ""

#. type: Title ===
#: upstream/_guides/quarkus-reactive-architecture.adoc:187
#, no-wrap
msgid "Network Protocols and Utilities"
msgstr ""

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:191
msgid "gRPC: implement and consume gRPC services.  Offer reactive and imperative programming interfaces."
msgstr ""

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:192
msgid "GraphQL: implement and query (client) data store using GraphQL. Offers Mutiny APIs and subscriptions as event streams."
msgstr ""

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:193
msgid "Fault Tolerance: provide retry, fallback, circuit breakers abilities to your application.It can be used with Mutiny types."
msgstr ""

#. type: Title ===
#: upstream/_guides/quarkus-reactive-architecture.adoc:195
#, no-wrap
msgid "Engine"
msgstr ""

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:199
msgid "Vert.x : the underlying reactive engine of Quarkus.  The extension allows accessing to the managed Vert.x instance, as well as its Mutiny variant (exposing the Vert.x API using Mutiny types)"
msgstr ""

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:199
msgid "Context Propagation: capture and propagate contextual objects (transaction, principal…) in a reactive pipeline"
msgstr ""
