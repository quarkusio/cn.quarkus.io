# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/optaplanner.adoc:6
#, fuzzy, no-wrap
msgid "OptaPlanner - Using AI to optimize a schedule with OptaPlanner"
msgstr "OptaPlanner - 使用AI优化OptaPlanner的时间表"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:13
#, fuzzy
msgid "This guide walks you through the process of creating a Quarkus application with https://www.optaplanner.org/[OptaPlanner]'s constraint solving Artificial Intelligence (AI)."
msgstr "本指南将引导你完成用 link:https://www.optaplanner.org/[OptaPlanner] 的约束解决人工智能（AI）创建Quarkus应用程序的过程。"

#. type: Title ==
#: upstream/_guides/optaplanner.adoc:14
#, fuzzy, no-wrap
msgid "What you will build"
msgstr "你将建立什么"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:17
#, fuzzy
msgid "You will build a REST application that optimizes a school timetable for students and teachers:"
msgstr "你将建立一个REST应用程序，为学生和教师优化一个学校的时间表。"

#. type: Target for macro image
#: upstream/_guides/optaplanner.adoc:18
#, no-wrap
msgid "optaplanner-time-table-app-screenshot.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:22
#, fuzzy
msgid "Your service will assign `Lesson` instances to `Timeslot` and `Room` instances automatically by using AI to adhere to hard and soft scheduling _constraints_, such as the following examples:"
msgstr "你的服务将通过使用人工智能自动分配 `Lesson` 实例到 `Timeslot` 和 `Room` 实例，以遵守硬性和软性的调度 _约束_ ，如以下例子。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:24
#, fuzzy
msgid "A room can have at most one lesson at the same time."
msgstr "一个房间在同一时间最多可以有一节课。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:25
#, fuzzy
msgid "A teacher can teach at most one lesson at the same time."
msgstr "一个教师在同一时间最多可以教一门课。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:26
#, fuzzy
msgid "A student can attend at most one lesson at the same time."
msgstr "一个学生在同一时间最多只能上一节课。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:27
#, fuzzy
msgid "A teacher prefers to teach all lessons in the same room."
msgstr "一位老师喜欢在同一个房间里教授所有的课程。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:28
#, fuzzy
msgid "A teacher prefers to teach sequential lessons and dislikes gaps between lessons."
msgstr "一位教师喜欢讲授有顺序的课程，不喜欢课程之间的空隙。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:29
#, fuzzy
msgid "A student dislikes sequential lessons on the same subject."
msgstr "一个学生不喜欢同一主题的连续课程。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:36
#, fuzzy
msgid "Mathematically speaking, school timetabling is an _NP-hard_ problem.  This means it is difficult to scale.  Simply brute force iterating through all possible combinations takes millions of years for a non-trivial dataset, even on a supercomputer.  Luckily, AI constraint solvers such as OptaPlanner have advanced algorithms that deliver a near-optimal solution in a reasonable amount of time."
msgstr "从数学上讲，学校的时间安排是一个 _NP-hard_ 问题。这意味着它很难扩展。对于一个非微不足道的数据集来说，简单地用蛮力迭代所有可能的组合需要数百万年的时间，即使是在超级计算机上。幸运的是，像OptaPlanner这样的人工智能约束解算器拥有先进的算法，可以在合理的时间内提供一个接近最优的解决方案。"

#. type: Title ==
#: upstream/_guides/optaplanner.adoc:38
#, fuzzy, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:42
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议你按照下面几节的说明，一步一步地创建应用程序。然而，你可以直接进入已完成的例子。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:44
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库。 `git clone {quickstarts-clone-url}` ，或者下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:46
#, fuzzy
msgid "The solution is located in {quickstarts-tree-url}/optaplanner-quickstart[the `optaplanner-quickstart` directory]."
msgstr "该解决方案位于{quickstarts-tree-url}/optaplanner-quickstart[the `optaplanner-quickstart` directory]中。"

#. type: Title ==
#: upstream/_guides/optaplanner.adoc:47
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: upstream/_guides/optaplanner.adoc:53
#, fuzzy, no-wrap
msgid "The build file and the dependencies"
msgstr "构建文件和依赖性"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:57
#, fuzzy
msgid "Use https://code.quarkus.io/[code.quarkus.io] to generate an application with the following extensions, for Maven or Gradle:"
msgstr "使用 link:https://code.quarkus.io/[code.quarkus.io] 为Maven或Gradle生成一个带有以下扩展的应用程序。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:59
#, fuzzy
msgid "RESTEasy Reactive (`quarkus-resteasy-reactive`)"
msgstr "RESTEasy Reactive ( `quarkus-resteasy-reactive` )"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:60
#, fuzzy
msgid "RESTEasy Reactive Jackson (`quarkus-resteasy-reactive-jackson`)"
msgstr "RESTEasy Reactive Jackson ( `quarkus-resteasy-reactive-jackson` )"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:61
#, fuzzy
msgid "OptaPlanner (`optaplanner-quarkus`)"
msgstr "OptaPlanner ( `optaplanner-quarkus` )"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:62
#, fuzzy
msgid "OptaPlanner Jackson (`optaplanner-quarkus-jackson`)"
msgstr "OptaPlanner Jackson ( `optaplanner-quarkus-jackson` )"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:64
#, fuzzy
msgid "Alternatively, generate it from the command line:"
msgstr "或者，从命令行生成它。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:70
#, fuzzy
msgid "This will include the following dependencies in your build file:"
msgstr "这将在你的构建文件中包括以下依赖项。"

#. type: Block title
#: upstream/_guides/optaplanner.adoc:72 upstream/_guides/optaplanner.adoc:726
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:109
#, no-wrap
msgid ""
"<dependencyManagement>\n"
"    <dependencies>\n"
"        <dependency>\n"
"            <groupId>io.quarkus.platform</groupId>\n"
"            <artifactId>quarkus-bom</artifactId>\n"
"            <version>{quarkus-version}</version>\n"
"            <type>pom</type>\n"
"            <scope>import</scope>\n"
"        </dependency>\n"
"        <dependency>\n"
"            <groupId>io.quarkus.platform</groupId>\n"
"            <artifactId>quarkus-optaplanner-bom</artifactId>\n"
"            <version>{quarkus-version}</version>\n"
"            <type>pom</type>\n"
"            <scope>import</scope>\n"
"        </dependency>\n"
"    </dependencies>\n"
"</dependencyManagement>\n"
"<dependencies>\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-resteasy-reactive</artifactId>\n"
"    </dependency>\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-resteasy-reactive-jackson</artifactId>\n"
"    </dependency>\n"
"    <dependency>\n"
"        <groupId>org.optaplanner</groupId>\n"
"        <artifactId>optaplanner-quarkus</artifactId>\n"
"    </dependency>\n"
"    <dependency>\n"
"        <groupId>org.optaplanner</groupId>\n"
"        <artifactId>optaplanner-quarkus-jackson</artifactId>\n"
"    </dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:116
#, no-wrap
msgid ""
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-junit5</artifactId>\n"
"        <scope>test</scope>\n"
"    </dependency>\n"
"</dependencies>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/optaplanner.adoc:119 upstream/_guides/optaplanner.adoc:736
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:128
#, no-wrap
msgid ""
"dependencies {\n"
"    implementation enforcedPlatform(\"io.quarkus.platform:quarkus-bom:{quarkus-version}\")\n"
"    implementation enforcedPlatform(\"io.quarkus.platform:quarkus-optaplanner-bom:{quarkus-version}\")\n"
"    implementation 'io.quarkus:quarkus-resteasy-reactive'\n"
"    implementation 'io.quarkus:quarkus-resteasy-reactive-jackson'\n"
"    implementation 'org.optaplanner:optaplanner-quarkus'\n"
"    implementation 'org.optaplanner:optaplanner-quarkus-jackson'\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:131
#, no-wrap
msgid ""
"    testImplementation 'io.quarkus:quarkus-junit5'\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/optaplanner.adoc:133
#, fuzzy, no-wrap
msgid "Model the domain objects"
msgstr "对领域对象进行建模"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:137
#, fuzzy
msgid "Your goal is to assign each lesson to a time slot and a room.  You will create these classes:"
msgstr "你的目标是将每节课分配到一个时间段和一个房间。你将创建这些课程。"

#. type: Target for macro image
#: upstream/_guides/optaplanner.adoc:138
#, no-wrap
msgid "optaplanner-time-table-class-diagram-pure.png"
msgstr ""

#. type: Title ===
#: upstream/_guides/optaplanner.adoc:140
#, fuzzy, no-wrap
msgid "Timeslot"
msgstr "时间段"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:146
#, fuzzy
msgid "The `Timeslot` class represents a time interval when lessons are taught, for example, `Monday 10:30 - 11:30` or `Tuesday 13:30 - 14:30`.  For simplicity's sake, all time slots have the same duration and there are no time slots during lunch or other breaks."
msgstr " `Timeslot` 类表示上课的时间间隔，例如， `Monday 10:30 - 11:30` 或 `Tuesday 13:30 - 14:30` 。为简单起见，所有的时间段都有相同的持续时间，在午餐或其他休息时间没有时间段。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:149
#, fuzzy
msgid "A time slot has no date, because a high school schedule just repeats every week.  So there is no need for https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/index.html#continuousPlanning[continuous planning]."
msgstr "一个时间段没有日期，因为高中的课程表只是每周重复一次。所以不需要 link:https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/index.html#continuousPlanning[连续的计划] 。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:151
#, fuzzy
msgid "Create the `src/main/java/org/acme/optaplanner/domain/Timeslot.java` class:"
msgstr "创建 `src/main/java/org/acme/optaplanner/domain/Timeslot.java` 类。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:155 upstream/_guides/optaplanner.adoc:212
#: upstream/_guides/optaplanner.adoc:267 upstream/_guides/optaplanner.adoc:504
#, no-wrap
msgid "package org.acme.optaplanner.domain;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:158 upstream/_guides/optaplanner.adoc:749
#, no-wrap
msgid ""
"import java.time.DayOfWeek;\n"
"import java.time.LocalTime;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:160
#, no-wrap
msgid "public class Timeslot {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:164
#, no-wrap
msgid ""
"    private DayOfWeek dayOfWeek;\n"
"    private LocalTime startTime;\n"
"    private LocalTime endTime;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:167
#, no-wrap
msgid ""
"    public Timeslot() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:173
#, no-wrap
msgid ""
"    public Timeslot(DayOfWeek dayOfWeek, LocalTime startTime, LocalTime endTime) {\n"
"        this.dayOfWeek = dayOfWeek;\n"
"        this.startTime = startTime;\n"
"        this.endTime = endTime;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:177
#, no-wrap
msgid ""
"    public DayOfWeek getDayOfWeek() {\n"
"        return dayOfWeek;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:181
#, no-wrap
msgid ""
"    public LocalTime getStartTime() {\n"
"        return startTime;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:185
#, no-wrap
msgid ""
"    public LocalTime getEndTime() {\n"
"        return endTime;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:190
#, no-wrap
msgid ""
"    @Override\n"
"    public String toString() {\n"
"        return dayOfWeek + \" \" + startTime;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:192 upstream/_guides/optaplanner.adoc:234
#: upstream/_guides/optaplanner.adoc:335 upstream/_guides/optaplanner.adoc:409
#: upstream/_guides/optaplanner.adoc:482 upstream/_guides/optaplanner.adoc:555
#: upstream/_guides/optaplanner.adoc:648 upstream/_guides/optaplanner.adoc:791
#: upstream/_guides/optaplanner.adoc:881 upstream/_guides/optaplanner.adoc:1035
#: upstream/_guides/optaplanner.adoc:1095
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:196
#, fuzzy
msgid "Because no `Timeslot` instances change during solving, a `Timeslot` is called a _problem fact_.  Such classes do not require any OptaPlanner specific annotations."
msgstr "因为在解题过程中没有 `Timeslot` 实例发生变化，所以 `Timeslot` ，被称为 _问题事实_ 。这样的类不需要任何OptaPlanner的特定注释。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:199
#, fuzzy
msgid "Notice the `toString()` method keeps the output short, so it is easier to read OptaPlanner's `DEBUG` or `TRACE` log, as shown later."
msgstr "注意， `toString()` 方法使输出简短，所以更容易阅读OptaPlanner的 `DEBUG` 或 `TRACE` 日志，如后所示。"

#. type: Title ===
#: upstream/_guides/optaplanner.adoc:200
#, fuzzy, no-wrap
msgid "Room"
msgstr "房间"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:206
#, fuzzy
msgid "The `Room` class represents a location where lessons are taught, for example, `Room A` or `Room B`.  For simplicity's sake, all rooms are without capacity limits and they can accommodate all lessons."
msgstr " `Room` 类代表上课的地点，例如， `Room A` 或 `Room B` 。为了简单起见，所有房间都没有容量限制，它们可以容纳所有课程。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:208
#, fuzzy
msgid "Create the `src/main/java/org/acme/optaplanner/domain/Room.java` class:"
msgstr "创建 `src/main/java/org/acme/optaplanner/domain/Room.java` 类。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:214
#, no-wrap
msgid "public class Room {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:216
#, no-wrap
msgid "    private String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:219
#, no-wrap
msgid ""
"    public Room() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:223
#, no-wrap
msgid ""
"    public Room(String name) {\n"
"        this.name = name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:227
#, no-wrap
msgid ""
"    public String getName() {\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:232
#, no-wrap
msgid ""
"    @Override\n"
"    public String toString() {\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:237
#, fuzzy
msgid "`Room` instances do not change during solving, so `Room` is also a _problem fact_."
msgstr " `Room` 实例在解题过程中不会改变，所以 ，也是一个 `Room` _问题事实_ 。"

#. type: Title ===
#: upstream/_guides/optaplanner.adoc:238
#, fuzzy, no-wrap
msgid "Lesson"
msgstr "课程"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:246
#, fuzzy
msgid "During a lesson, represented by the `Lesson` class, a teacher teaches a subject to a group of students, for example, `Math by A.Turing for 9th grade` or `Chemistry by M.Curie for 10th grade`.  If a subject is taught multiple times per week by the same teacher to the same student group, there are multiple `Lesson` instances that are only distinguishable by `id`.  For example, the 9th grade has six math lessons a week."
msgstr "在一节课中，由 `Lesson` 班级代表，教师向一组学生教授一个科目，例如， `Math by A.Turing for 9th grade` 或 `Chemistry by M.Curie for 10th grade` 。如果一个科目每周由同一教师向同一学生组教授多次，则有多个 `Lesson` 实例，只能通过 `id` 。例如，九年级的学生每周有六节数学课。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:250
#, fuzzy
msgid "During solving, OptaPlanner changes the `timeslot` and `room` fields of the `Lesson` class, to assign each lesson to a time slot and a room.  Because OptaPlanner changes these fields, `Lesson` is a _planning entity_:"
msgstr " `Lesson` 在解题过程中，OptaPlanner改变了 `timeslot` 和 `room` 类的字段，以将每节课分配到一个时间段和一个房间。因为OptaPlanner改变了这些字段，所以 `Lesson` 是一个 _规划实体_ 。"

#. type: Target for macro image
#: upstream/_guides/optaplanner.adoc:251
#, no-wrap
msgid "optaplanner-time-table-class-diagram-annotated.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:261
#, fuzzy
msgid "Most of the fields in the previous diagram contain input data, except for the orange fields: A lesson's `timeslot` and `room` fields are unassigned (`null`) in the input data and assigned (not `null`) in the output data.  OptaPlanner changes these fields during solving.  Such fields are called planning variables.  In order for OptaPlanner to recognize them, both the `timeslot` and `room` fields require an `@PlanningVariable` annotation.  Their containing class, `Lesson`, requires an `@PlanningEntity` annotation."
msgstr "前面图表中的大部分字段都包含输入数据，除了橙色字段。一堂课的 `timeslot` 和 `room` 字段在输入数据中是未分配的( `null` )，在输出数据中是分配的( not `null` )。OptaPlanner在解题过程中会改变这些字段。这些字段被称为规划变量。为了让OptaPlanner识别它们， `timeslot` 和 `room` 字段都需要一个 `@PlanningVariable` 注释。它们的包含类， `Lesson` ，需要一个 `@PlanningEntity` 注释。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:263
#, fuzzy
msgid "Create the `src/main/java/org/acme/optaplanner/domain/Lesson.java` class:"
msgstr "创建 `src/main/java/org/acme/optaplanner/domain/Lesson.java` 类。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:271
#, no-wrap
msgid ""
"import org.optaplanner.core.api.domain.entity.PlanningEntity;\n"
"import org.optaplanner.core.api.domain.lookup.PlanningId;\n"
"import org.optaplanner.core.api.domain.variable.PlanningVariable;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:274
#, no-wrap
msgid ""
"@PlanningEntity\n"
"public class Lesson {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:277
#, no-wrap
msgid ""
"    @PlanningId\n"
"    private Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:281
#, no-wrap
msgid ""
"    private String subject;\n"
"    private String teacher;\n"
"    private String studentGroup;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:286
#, no-wrap
msgid ""
"    @PlanningVariable(valueRangeProviderRefs = \"timeslotRange\")\n"
"    private Timeslot timeslot;\n"
"    @PlanningVariable(valueRangeProviderRefs = \"roomRange\")\n"
"    private Room room;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:289
#, no-wrap
msgid ""
"    public Lesson() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:296
#, no-wrap
msgid ""
"    public Lesson(Long id, String subject, String teacher, String studentGroup) {\n"
"        this.id = id;\n"
"        this.subject = subject;\n"
"        this.teacher = teacher;\n"
"        this.studentGroup = studentGroup;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:300
#, no-wrap
msgid ""
"    public Long getId() {\n"
"        return id;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:304
#, no-wrap
msgid ""
"    public String getSubject() {\n"
"        return subject;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:308
#, no-wrap
msgid ""
"    public String getTeacher() {\n"
"        return teacher;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:312
#, no-wrap
msgid ""
"    public String getStudentGroup() {\n"
"        return studentGroup;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:316
#, no-wrap
msgid ""
"    public Timeslot getTimeslot() {\n"
"        return timeslot;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:320
#, no-wrap
msgid ""
"    public void setTimeslot(Timeslot timeslot) {\n"
"        this.timeslot = timeslot;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:324
#, no-wrap
msgid ""
"    public Room getRoom() {\n"
"        return room;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:328
#, no-wrap
msgid ""
"    public void setRoom(Room room) {\n"
"        this.room = room;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:333
#, no-wrap
msgid ""
"    @Override\n"
"    public String toString() {\n"
"        return subject + \"(\" + id + \")\";\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:340
#, fuzzy
msgid "The `Lesson` class has an `@PlanningEntity` annotation, so OptaPlanner knows that this class changes during solving because it contains one or more planning variables."
msgstr " `Lesson` 类有一个 `@PlanningEntity` 注解，所以OptaPlanner知道这个类在解题过程中会发生变化，因为它包含一个或多个规划变量。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:346
#, fuzzy
msgid "The `timeslot` field has an `@PlanningVariable` annotation, so OptaPlanner knows that it can change its value.  In order to find potential `Timeslot` instances to assign to this field, OptaPlanner uses the `valueRangeProviderRefs` property to connect to a value range provider (explained later) that provides a `List<Timeslot>` to pick from."
msgstr " `timeslot` 字段有一个 `@PlanningVariable` 注解，所以OptaPlanner知道它可以改变其值。为了找到潜在的 `Timeslot` 实例来分配给这个字段，OptaPlanner使用 `valueRangeProviderRefs` 属性连接到一个值范围提供者（后面解释），提供一个 `List<Timeslot>` 来挑选。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:348
#, fuzzy
msgid "The `room` field also has an `@PlanningVariable` annotation, for the same reasons."
msgstr " `room` 字段也有一个 `@PlanningVariable` 的注释，原因相同。"

#. type: delimited block =
#: upstream/_guides/optaplanner.adoc:355
#, fuzzy
msgid "Determining the `@PlanningVariable` fields for an arbitrary constraint solving use case is often challenging the first time.  Read https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/index.html#domainModelingGuide[the domain modeling guidelines] to avoid common pitfalls."
msgstr "为一个任意的约束求解用例确定 `@PlanningVariable` 领域，这在第一次时往往是具有挑战性的。阅读 link:https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/index.html#domainModelingGuide[领域建模指南] 以避免常见的陷阱。"

#. type: Title ==
#: upstream/_guides/optaplanner.adoc:357
#, fuzzy, no-wrap
msgid "Define the constraints and calculate the score"
msgstr "定义约束条件并计算得分"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:363
#, fuzzy
msgid "A _score_ represents the quality of a specific solution.  The higher the better.  OptaPlanner looks for the best solution, which is the solution with the highest score found in the available time.  It might be the _optimal_ solution."
msgstr " _分数_ 代表一个特定解决方案的质量。越高越好。OptaPlanner寻找最佳解决方案，也就是在可用时间内找到的得分最高的解决方案。它可能是 _最佳_ 解决方案。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:366
#, fuzzy
msgid "Because this use case has hard and soft constraints, use the `HardSoftScore` class to represent the score:"
msgstr "因为这个用例有硬约束和软约束，所以用 `HardSoftScore` 类来表示分数。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:368
#, fuzzy
msgid "Hard constraints must not be broken. For example: _A room can have at most one lesson at the same time._"
msgstr "硬约束不能被打破。比如说。 _一个房间在同一时间最多可以有一节课。_ "

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:369
#, fuzzy
msgid "Soft constraints should not be broken. For example: _A teacher prefers to teach in a single room._"
msgstr "软约束不应该被打破。比如说。 _一位教师喜欢在一个房间里教学。_ "

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:373
#, fuzzy
msgid "Hard constraints are weighted against other hard constraints.  Soft constraints are weighted too, against other soft constraints.  *Hard constraints always outweigh soft constraints*, regardless of their respective weights."
msgstr "硬约束与其他硬约束相加权。软约束也会被加权，与其他软约束相比。不管它们各自的权重如何， *硬约束总是大于软约束* 。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:375
#, fuzzy
msgid "To calculate the score, you could implement an `EasyScoreCalculator` class:"
msgstr "为了计算分数，你可以实现一个 `EasyScoreCalculator` 类。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:379
#, no-wrap
msgid "public class TimeTableEasyScoreCalculator implements EasyScoreCalculator<TimeTable, HardSoftScore> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:407
#, no-wrap
msgid ""
"    @Override\n"
"    public HardSoftScore calculateScore(TimeTable timeTable) {\n"
"        List<Lesson> lessonList = timeTable.getLessonList();\n"
"        int hardScore = 0;\n"
"        for (Lesson a : lessonList) {\n"
"            for (Lesson b : lessonList) {\n"
"                if (a.getTimeslot() != null && a.getTimeslot().equals(b.getTimeslot())\n"
"                        && a.getId() < b.getId()) {\n"
"                    // A room can accommodate at most one lesson at the same time.\n"
"                    if (a.getRoom() != null && a.getRoom().equals(b.getRoom())) {\n"
"                        hardScore--;\n"
"                    }\n"
"                    // A teacher can teach at most one lesson at the same time.\n"
"                    if (a.getTeacher().equals(b.getTeacher())) {\n"
"                        hardScore--;\n"
"                    }\n"
"                    // A student can attend at most one lesson at the same time.\n"
"                    if (a.getStudentGroup().equals(b.getStudentGroup())) {\n"
"                        hardScore--;\n"
"                    }\n"
"                }\n"
"            }\n"
"        }\n"
"        int softScore = 0;\n"
"        // Soft constraints are only implemented in the optaplanner-quickstarts code\n"
"        return HardSoftScore.of(hardScore, softScore);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:414
#, fuzzy
msgid "Unfortunately **that does not scale well**, because it is non-incremental: every time a lesson is assigned to a different time slot or room, all lessons are re-evaluated to calculate the new score."
msgstr "不幸的是， *这并不能很好地扩展* ，因为它是非递增的：每当一节课被分配到不同的时间段或房间，所有的课程都要重新评估，以计算新的分数。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:418
#, fuzzy
msgid "Instead, create a `src/main/java/org/acme/optaplanner/solver/TimeTableConstraintProvider.java` class to perform incremental score calculation.  It uses OptaPlanner's ConstraintStream API which is inspired by Java Streams and SQL:"
msgstr "相反，创建一个 `src/main/java/org/acme/optaplanner/solver/TimeTableConstraintProvider.java` 类来执行增量分数计算。它使用OptaPlanner的ConstraintStream API，其灵感来自Java Streams和SQL。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:422 upstream/_guides/optaplanner.adoc:746
#, no-wrap
msgid "package org.acme.optaplanner.solver;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:429
#, no-wrap
msgid ""
"import org.acme.optaplanner.domain.Lesson;\n"
"import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;\n"
"import org.optaplanner.core.api.score.stream.Constraint;\n"
"import org.optaplanner.core.api.score.stream.ConstraintFactory;\n"
"import org.optaplanner.core.api.score.stream.ConstraintProvider;\n"
"import org.optaplanner.core.api.score.stream.Joiners;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:431
#, no-wrap
msgid "public class TimeTableConstraintProvider implements ConstraintProvider {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:442
#, no-wrap
msgid ""
"    @Override\n"
"    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n"
"        return new Constraint[] {\n"
"                // Hard constraints\n"
"                roomConflict(constraintFactory),\n"
"                teacherConflict(constraintFactory),\n"
"                studentGroupConflict(constraintFactory),\n"
"                // Soft constraints are only implemented in the optaplanner-quickstarts code\n"
"        };\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:445
#, no-wrap
msgid ""
"    Constraint roomConflict(ConstraintFactory constraintFactory) {\n"
"        // A room can accommodate at most one lesson at the same time.\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:460
#, no-wrap
msgid ""
"        // Select a lesson ...\n"
"        return constraintFactory\n"
"                .forEach(Lesson.class)\n"
"                // ... and pair it with another lesson ...\n"
"                .join(Lesson.class,\n"
"                        // ... in the same timeslot ...\n"
"                        Joiners.equal(Lesson::getTimeslot),\n"
"                        // ... in the same room ...\n"
"                        Joiners.equal(Lesson::getRoom),\n"
"                        // ... and the pair is unique (different id, no reverse pairs) ...\n"
"                        Joiners.lessThan(Lesson::getId))\n"
"                // ... then penalize each pair with a hard weight.\n"
"                .penalize(\"Room conflict\", HardSoftScore.ONE_HARD);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:470
#, no-wrap
msgid ""
"    Constraint teacherConflict(ConstraintFactory constraintFactory) {\n"
"        // A teacher can teach at most one lesson at the same time.\n"
"        return constraintFactory.forEach(Lesson.class)\n"
"                .join(Lesson.class,\n"
"                        Joiners.equal(Lesson::getTimeslot),\n"
"                        Joiners.equal(Lesson::getTeacher),\n"
"                        Joiners.lessThan(Lesson::getId))\n"
"                .penalize(\"Teacher conflict\", HardSoftScore.ONE_HARD);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:480
#, no-wrap
msgid ""
"    Constraint studentGroupConflict(ConstraintFactory constraintFactory) {\n"
"        // A student can attend at most one lesson at the same time.\n"
"        return constraintFactory.forEach(Lesson.class)\n"
"                .join(Lesson.class,\n"
"                        Joiners.equal(Lesson::getTimeslot),\n"
"                        Joiners.equal(Lesson::getStudentGroup),\n"
"                        Joiners.lessThan(Lesson::getId))\n"
"                .penalize(\"Student group conflict\", HardSoftScore.ONE_HARD);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:485
#, fuzzy
msgid "The `ConstraintProvider` scales an order of magnitude better than the `EasyScoreCalculator`: __O__(n) instead of __O__(n²)."
msgstr " `ConstraintProvider` 的扩展性比 `EasyScoreCalculator` 好一个数量级： _O_ (n) 而不是 _O_ (n²)。"

#. type: Title ==
#: upstream/_guides/optaplanner.adoc:486
#, fuzzy, no-wrap
msgid "Gather the domain objects in a planning solution"
msgstr "在一个规划方案中收集领域对象"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:491
#, fuzzy
msgid "A `TimeTable` wraps all `Timeslot`, `Room`, and `Lesson` instances of a single dataset.  Furthermore, because it contains all lessons, each with a specific planning variable state, it is a _planning solution_ and it has a score:"
msgstr "一个 `TimeTable` ，包裹了一个数据集的所有 `Timeslot` ， `Room` ，和 `Lesson` 实例。此外，因为它包含了所有的课程，每个课程都有一个特定的规划变量状态，所以它是一个 _规划方案_ ，它有一个分数。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:494
#, fuzzy
msgid "If lessons are still unassigned, then it is an _uninitialized_ solution, for example, a solution with the score `-4init/0hard/0soft`."
msgstr "如果课程仍未分配，那么它就是一个 _未初始化的_ 解决方案，例如，一个分数为 `-4init/0hard/0soft` 的解决方案。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:496
#, fuzzy
msgid "If it breaks hard constraints, then it is an _infeasible_ solution, for example, a solution with the score `-2hard/-3soft`."
msgstr "如果它打破了硬约束，那么它就是一个 _不可行的_ 解决方案，例如，一个分数为 `-2hard/-3soft` 的解决方案。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:498
#, fuzzy
msgid "If it adheres to all hard constraints, then it is a _feasible_ solution, for example, a solution with the score `0hard/-7soft`."
msgstr "如果它遵守了所有的硬约束，那么它就是一个 _可行的_ 解决方案，例如，一个得分 `0hard/-7soft` 。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:500
#, fuzzy
msgid "Create the `src/main/java/org/acme/optaplanner/domain/TimeTable.java` class:"
msgstr "创建 `src/main/java/org/acme/optaplanner/domain/TimeTable.java` 类。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:506
#, no-wrap
msgid "import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:513
#, no-wrap
msgid ""
"import org.optaplanner.core.api.domain.solution.PlanningEntityCollectionProperty;\n"
"import org.optaplanner.core.api.domain.solution.PlanningScore;\n"
"import org.optaplanner.core.api.domain.solution.PlanningSolution;\n"
"import org.optaplanner.core.api.domain.solution.ProblemFactCollectionProperty;\n"
"import org.optaplanner.core.api.domain.valuerange.ValueRangeProvider;\n"
"import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:516
#, no-wrap
msgid ""
"@PlanningSolution\n"
"public class TimeTable {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:525
#, no-wrap
msgid ""
"    @ValueRangeProvider(id = \"timeslotRange\")\n"
"    @ProblemFactCollectionProperty\n"
"    private List<Timeslot> timeslotList;\n"
"    @ValueRangeProvider(id = \"roomRange\")\n"
"    @ProblemFactCollectionProperty\n"
"    private List<Room> roomList;\n"
"    @PlanningEntityCollectionProperty\n"
"    private List<Lesson> lessonList;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:528
#, no-wrap
msgid ""
"    @PlanningScore\n"
"    private HardSoftScore score;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:531
#, no-wrap
msgid ""
"    public TimeTable() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:537
#, no-wrap
msgid ""
"    public TimeTable(List<Timeslot> timeslotList, List<Room> roomList, List<Lesson> lessonList) {\n"
"        this.timeslotList = timeslotList;\n"
"        this.roomList = roomList;\n"
"        this.lessonList = lessonList;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:541
#, no-wrap
msgid ""
"    public List<Timeslot> getTimeslotList() {\n"
"        return timeslotList;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:545
#, no-wrap
msgid ""
"    public List<Room> getRoomList() {\n"
"        return roomList;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:549
#, no-wrap
msgid ""
"    public List<Lesson> getLessonList() {\n"
"        return lessonList;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:553
#, no-wrap
msgid ""
"    public HardSoftScore getScore() {\n"
"        return score;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:559
#, fuzzy
msgid "The `TimeTable` class has an `@PlanningSolution` annotation, so OptaPlanner knows that this class contains all of the input and output data."
msgstr " `TimeTable` 类有一个 `@PlanningSolution` 注解，因此OptaPlanner知道这个类包含所有的输入和输出数据。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:561
#, fuzzy
msgid "Specifically, this class is the input of the problem:"
msgstr "具体来说，这个类是问题的输入。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:563
#, fuzzy
msgid "A `timeslotList` field with all time slots"
msgstr "一个 `timeslotList` ，所有时间段的场次都有。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:564 upstream/_guides/optaplanner.adoc:566
#, fuzzy
msgid "This is a list of problem facts, because they do not change during solving."
msgstr "这是一个问题事实的清单，因为它们在解题过程中不会改变。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:565
#, fuzzy
msgid "A `roomList` field with all rooms"
msgstr "一个 `roomList` 场，所有房间都有"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:567
#, fuzzy
msgid "A `lessonList` field with all lessons"
msgstr "一个 `lessonList` 场，所有的课程都有。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:568
#, fuzzy
msgid "This is a list of planning entities, because they change during solving."
msgstr "这是一个规划实体的清单，因为它们在解题过程中会发生变化。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:569
#, fuzzy
msgid "Of each `Lesson`:"
msgstr "在每个 `Lesson` 。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:571
#, fuzzy
msgid "The values of the `timeslot` and `room` fields are typically still `null`, so unassigned.  They are planning variables."
msgstr " `timeslot` 和 `room` 字段的值通常还是 `null` ，所以没有被分配。它们是计划变量。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:573
#, fuzzy
msgid "The other fields, such as `subject`, `teacher` and `studentGroup`, are filled in.  These fields are problem properties."
msgstr "其他字段，如： `subject` , `teacher` 和 `studentGroup` ，都要填入。这些字段是问题属性。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:575
#, fuzzy
msgid "However, this class is also the output of the solution:"
msgstr "然而，这个类也是解决方案的输出。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:577
#, fuzzy
msgid "A `lessonList` field for which each `Lesson` instance has non-null `timeslot` and `room` fields after solving"
msgstr "一个 `lessonList` 字段，对于该字段，每个 `Lesson` 实例都有非空的 `timeslot` 和 `room` 字段，在解出后"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:578
#, fuzzy
msgid "A `score` field that represents the quality of the output solution, for example, `0hard/-5soft`"
msgstr "一个 `score` 字段，代表输出解决方案的质量，比如说。 `0hard/-5soft` "

#. type: Title ===
#: upstream/_guides/optaplanner.adoc:579
#, fuzzy, no-wrap
msgid "The value range providers"
msgstr "价值范围提供者"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:585
#, fuzzy
msgid "The `timeslotList` field is a value range provider.  It holds the `Timeslot` instances which OptaPlanner can pick from to assign to the `timeslot` field of `Lesson` instances.  The `timeslotList` field has an `@ValueRangeProvider` annotation to connect the `@PlanningVariable` with the `@ValueRangeProvider`, by matching the value of the `id` property with the value of the `valueRangeProviderRefs` property of the `@PlanningVariable` annotation in the `Lesson` class."
msgstr " `timeslotList` 字段是一个值范围提供者。它持有OptaPlanner可以从中挑选的 `Timeslot` 实例，并将其分配给 `Lesson` 实例的 `timeslot` 领域。 `timeslotList` 字段有一个 `@ValueRangeProvider` 注解，通过匹配 `id` 属性的值和 `@PlanningVariable` 注解中 `Lesson` 类的 `valueRangeProviderRefs` 属性的值，来连接 `@PlanningVariable` 和 `@ValueRangeProvider` 。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:587
#, fuzzy
msgid "Following the same logic, the `roomList` field also has an `@ValueRangeProvider` annotation."
msgstr "按照同样的逻辑， `roomList` 字段也有一个 `@ValueRangeProvider` 的注释。"

#. type: Title ===
#: upstream/_guides/optaplanner.adoc:588
#, fuzzy, no-wrap
msgid "The problem fact and planning entity properties"
msgstr "问题事实和规划实体属性"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:593
#, fuzzy
msgid "Furthermore, OptaPlanner needs to know which `Lesson` instances it can change as well as how to retrieve the `Timeslot` and `Room` instances used for score calculation by your `TimeTableConstraintProvider`."
msgstr "此外，OptaPlanner需要知道它可以改变哪些 `Lesson` 实例，以及如何检索你的 `Timeslot` 和 `Room` 实例用于分数计算， `TimeTableConstraintProvider` 。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:596
#, fuzzy
msgid "The `timeslotList` and `roomList` fields have an `@ProblemFactCollectionProperty` annotation, so your `TimeTableConstraintProvider` can select _from_ those instances."
msgstr " `timeslotList` 和 `roomList` 字段有一个 `@ProblemFactCollectionProperty` 的注释，所以你的 `TimeTableConstraintProvider` 可以 _从_ 这些实例 _中_ 选择。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:600
#, fuzzy
msgid "The `lessonList` has an `@PlanningEntityCollectionProperty` annotation, so OptaPlanner can change them during solving and your `TimeTableConstraintProvider` can select _from_ those too."
msgstr " `lessonList` 有一个 `@PlanningEntityCollectionProperty` 注释，所以OptaPlanner可以在解题过程中改变它们，你的 `TimeTableConstraintProvider` 也可以 _从_ 这些 _中_ 选择。"

#. type: Title ==
#: upstream/_guides/optaplanner.adoc:601
#, fuzzy, no-wrap
msgid "Create the solver service"
msgstr "创建解算器服务"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:608
#, fuzzy
msgid "Now you are ready to put everything together and create a REST service.  But solving planning problems on REST threads causes HTTP timeout issues.  Therefore, the Quarkus extension injects a `SolverManager` instance, which runs solvers in a separate thread pool and can solve multiple datasets in parallel."
msgstr "现在你已经准备好把所有的东西放在一起，创建一个REST服务。但是在REST线程上解决规划问题会导致HTTP超时问题。因此，Quarkus扩展注入了一个 `SolverManager` 实例，它在一个单独的线程池中运行求解器，可以并行解决多个数据集。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:610
#, fuzzy
msgid "Create the `src/main/java/org/acme/optaplanner/rest/TimeTableResource.java` class:"
msgstr "创建 `src/main/java/org/acme/optaplanner/rest/TimeTableResource.java` 类。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:614 upstream/_guides/optaplanner.adoc:812
#: upstream/_guides/optaplanner.adoc:954 upstream/_guides/optaplanner.adoc:1055
#, no-wrap
msgid "package org.acme.optaplanner.rest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:620
#, no-wrap
msgid ""
"import java.util.UUID;\n"
"import java.util.concurrent.ExecutionException;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:624
#, no-wrap
msgid ""
"import org.acme.optaplanner.domain.TimeTable;\n"
"import org.optaplanner.core.api.solver.SolverJob;\n"
"import org.optaplanner.core.api.solver.SolverManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:627 upstream/_guides/optaplanner.adoc:973
#, no-wrap
msgid ""
"@Path(\"/timeTable\")\n"
"public class TimeTableResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:630
#, no-wrap
msgid ""
"    @Inject\n"
"    SolverManager<TimeTable, UUID> solverManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:646
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/solve\")\n"
"    public TimeTable solve(TimeTable problem) {\n"
"        UUID problemId = UUID.randomUUID();\n"
"        // Submit the problem to start solving\n"
"        SolverJob<TimeTable, UUID> solverJob = solverManager.solve(problemId, problem);\n"
"        TimeTable solution;\n"
"        try {\n"
"            // Wait until the solving ends\n"
"            solution = solverJob.getFinalBestSolution();\n"
"        } catch (InterruptedException | ExecutionException e) {\n"
"            throw new IllegalStateException(\"Solving failed.\", e);\n"
"        }\n"
"        return solution;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:653
#, fuzzy
msgid "For simplicity's sake, this initial implementation waits for the solver to finish, which can still cause an HTTP timeout.  The _complete_ implementation avoids HTTP timeouts much more elegantly."
msgstr "为了简单起见，这个最初的实现会等待求解器完成，这仍然会导致HTTP超时。 _完整的_ 实现可以更优雅地避免HTTP超时。"

#. type: Title ==
#: upstream/_guides/optaplanner.adoc:654
#, fuzzy, no-wrap
msgid "Set the termination time"
msgstr "设置终止时间"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:659
#, fuzzy
msgid "Without a termination setting or a termination event, the solver runs forever.  To avoid that, limit the solving time to five seconds.  That is short enough to avoid the HTTP timeout."
msgstr "如果没有终止设置或终止事件，解算器会永远运行。为了避免这种情况，将解算时间限制在五秒之内。这足够短，可以避免HTTP超时。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:661
#, fuzzy
msgid "Create the `src/main/resources/application.properties` file:"
msgstr "创建 `src/main/resources/application.properties` 文件。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:667
#, no-wrap
msgid ""
"# The solver runs only for 5 seconds to avoid a HTTP timeout in this simple implementation.\n"
"# It's recommended to run for at least 5 minutes (\"5m\") otherwise.\n"
"quarkus.optaplanner.solver.termination.spent-limit=5s\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/optaplanner.adoc:670
#, fuzzy, no-wrap
msgid "Run the application"
msgstr "运行应用程序"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:673
#, fuzzy
msgid "First start the application:"
msgstr "首先启动应用程序。"

#. type: Title ===
#: upstream/_guides/optaplanner.adoc:676
#, fuzzy, no-wrap
msgid "Try the application"
msgstr "尝试应用"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:681
#, fuzzy
msgid "Now that the application is running, you can test the REST service.  You can use any REST client you wish.  The following example uses the Linux command `curl` to send a POST request:"
msgstr "现在，应用程序正在运行，你可以测试REST服务。你可以使用任何你希望的REST客户端。下面的例子使用Linux命令 `curl` 来发送一个POST请求。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:685
#, no-wrap
msgid "$ curl -i -X POST http://localhost:8080/timeTable/solve -H \"Content-Type:application/json\" -d '{\"timeslotList\":[{\"dayOfWeek\":\"MONDAY\",\"startTime\":\"08:30:00\",\"endTime\":\"09:30:00\"},{\"dayOfWeek\":\"MONDAY\",\"startTime\":\"09:30:00\",\"endTime\":\"10:30:00\"}],\"roomList\":[{\"name\":\"Room A\"},{\"name\":\"Room B\"}],\"lessonList\":[{\"id\":1,\"subject\":\"Math\",\"teacher\":\"A. Turing\",\"studentGroup\":\"9th grade\"},{\"id\":2,\"subject\":\"Chemistry\",\"teacher\":\"M. Curie\",\"studentGroup\":\"9th grade\"},{\"id\":3,\"subject\":\"French\",\"teacher\":\"M. Curie\",\"studentGroup\":\"10th grade\"},{\"id\":4,\"subject\":\"History\",\"teacher\":\"I. Jones\",\"studentGroup\":\"10th grade\"}]}'\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:689
#, fuzzy
msgid "After about five seconds, according to the termination spent time defined in your `application.properties`, the service returns an output similar to the following example:"
msgstr "大约五秒钟后，根据你的 `application.properties` 中定义的终止花费时间，该服务会返回一个类似于以下例子的输出。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:695
#, no-wrap
msgid ""
"HTTP/1.1 200\n"
"Content-Type: application/json\n"
"...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:697
#, no-wrap
msgid "{\"timeslotList\":...,\"roomList\":...,\"lessonList\":[{\"id\":1,\"subject\":\"Math\",\"teacher\":\"A. Turing\",\"studentGroup\":\"9th grade\",\"timeslot\":{\"dayOfWeek\":\"MONDAY\",\"startTime\":\"08:30:00\",\"endTime\":\"09:30:00\"},\"room\":{\"name\":\"Room A\"}},{\"id\":2,\"subject\":\"Chemistry\",\"teacher\":\"M. Curie\",\"studentGroup\":\"9th grade\",\"timeslot\":{\"dayOfWeek\":\"MONDAY\",\"startTime\":\"09:30:00\",\"endTime\":\"10:30:00\"},\"room\":{\"name\":\"Room A\"}},{\"id\":3,\"subject\":\"French\",\"teacher\":\"M. Curie\",\"studentGroup\":\"10th grade\",\"timeslot\":{\"dayOfWeek\":\"MONDAY\",\"startTime\":\"08:30:00\",\"endTime\":\"09:30:00\"},\"room\":{\"name\":\"Room B\"}},{\"id\":4,\"subject\":\"History\",\"teacher\":\"I. Jones\",\"studentGroup\":\"10th grade\",\"timeslot\":{\"dayOfWeek\":\"MONDAY\",\"startTime\":\"09:30:00\",\"endTime\":\"10:30:00\"},\"room\":{\"name\":\"Room B\"}}],\"score\":\"0hard/0soft\"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:702
#, fuzzy
msgid "Notice that your application assigned all four lessons to one of the two time slots and one of the two rooms.  Also notice that it conforms to all hard constraints.  For example, M. Curie's two lessons are in different time slots."
msgstr "请注意，你的应用程序将所有四节课分配给两个时间段中的一个和两个房间中的一个。还注意到，它符合所有的硬约束。例如，居里夫人的两节课在不同的时间段。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:704
#, fuzzy
msgid "On the server side, the `info` log show what OptaPlanner did in those five seconds:"
msgstr "在服务器端， `info` 日志显示OptaPlanner在这五秒钟内做了什么。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:711
#, no-wrap
msgid ""
"... Solving started: time spent (33), best score (-8init/0hard/0soft), environment mode (REPRODUCIBLE), random (JDK with seed 0).\n"
"... Construction Heuristic phase (0) ended: time spent (73), best score (0hard/0soft), score calculation speed (459/sec), step total (4).\n"
"... Local Search phase (1) ended: time spent (5000), best score (0hard/0soft), score calculation speed (28949/sec), step total (28398).\n"
"... Solving ended: time spent (5000), best score (0hard/0soft), score calculation speed (28524/sec), phase total (2), environment mode (REPRODUCIBLE).\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/optaplanner.adoc:713
#, fuzzy, no-wrap
msgid "Test the application"
msgstr "测试应用程序"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:716
#, fuzzy
msgid "A good application includes test coverage."
msgstr "一个好的应用程序包括测试覆盖率。"

#. type: Title ====
#: upstream/_guides/optaplanner.adoc:717
#, fuzzy, no-wrap
msgid "Test the constraints"
msgstr "测试约束条件"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:722
#, fuzzy
msgid "To test each constraint in isolation, use a `ConstraintVerifier` in unit tests.  It tests each constraint's corner cases in isolation from the other tests, which lowers maintenance when adding a new constraint with proper test coverage."
msgstr "为了孤立地测试每个约束，在单元测试中使用 `ConstraintVerifier` 。它将每个约束的角落案例与其他测试隔离开来进行测试，这样在增加一个新的约束时，就可以通过适当的测试覆盖率降低维护成本。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:724
#, fuzzy
msgid "Add a `optaplanner-test` dependency in your build file:"
msgstr "在你的构建文件中添加一个 `optaplanner-test` 依赖关系。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:733
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>org.optaplanner</groupId>\n"
"    <artifactId>optaplanner-test</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:739
#, no-wrap
msgid "testImplementation(\"org.optaplanner:optaplanner-test\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:742
#, fuzzy
msgid "Create the `src/test/java/org/acme/optaplanner/solver/TimeTableConstraintProviderTest.java` class:"
msgstr "创建 `src/test/java/org/acme/optaplanner/solver/TimeTableConstraintProviderTest.java` 类。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:751 upstream/_guides/optaplanner.adoc:819
#: upstream/_guides/optaplanner.adoc:1057
#, no-wrap
msgid "import javax.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:759
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.acme.optaplanner.domain.Lesson;\n"
"import org.acme.optaplanner.domain.Room;\n"
"import org.acme.optaplanner.domain.TimeTable;\n"
"import org.acme.optaplanner.domain.Timeslot;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.optaplanner.test.api.score.stream.ConstraintVerifier;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:762
#, no-wrap
msgid ""
"@QuarkusTest\n"
"class TimeTableConstraintProviderTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:766
#, no-wrap
msgid ""
"    private static final Room ROOM = new Room(\"Room1\");\n"
"    private static final Timeslot TIMESLOT1 = new Timeslot(DayOfWeek.MONDAY, LocalTime.of(9,0), LocalTime.NOON);\n"
"    private static final Timeslot TIMESLOT2 = new Timeslot(DayOfWeek.TUESDAY, LocalTime.of(9,0), LocalTime.NOON);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:769
#, no-wrap
msgid ""
"    @Inject\n"
"    ConstraintVerifier<TimeTableConstraintProvider, TimeTable> constraintVerifier;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:775
#, no-wrap
msgid ""
"    @Test\n"
"    void roomConflict() {\n"
"        Lesson firstLesson = new Lesson(1, \"Subject1\", \"Teacher1\", \"Group1\");\n"
"        Lesson conflictingLesson = new Lesson(2, \"Subject2\", \"Teacher2\", \"Group2\");\n"
"        Lesson nonConflictingLesson = new Lesson(3, \"Subject3\", \"Teacher3\", \"Group3\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:778
#, no-wrap
msgid ""
"        firstLesson.setRoom(ROOM);\n"
"        firstLesson.setTimeslot(TIMESLOT1);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:781
#, no-wrap
msgid ""
"        conflictingLesson.setRoom(ROOM);\n"
"        conflictingLesson.setTimeslot(TIMESLOT1);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:784
#, no-wrap
msgid ""
"        nonConflictingLesson.setRoom(ROOM);\n"
"        nonConflictingLesson.setTimeslot(TIMESLOT2);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:789
#, no-wrap
msgid ""
"        constraintVerifier.verifyThat(TimeTableConstraintProvider::roomConflict)\n"
"                .given(firstLesson, conflictingLesson, nonConflictingLesson)\n"
"                .penalizesBy(1);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:797
#, fuzzy
msgid "This test verifies that the constraint `TimeTableConstraintProvider::roomConflict`, when given three lessons in the same room, where two lessons have the same timeslot, it penalizes with a match weight of `1`.  So with a constraint weight of `10hard` it would reduce the score by `-10hard`."
msgstr "这个测试验证了约束条件 `TimeTableConstraintProvider::roomConflict` ，当给定同一房间的三节课，其中两节课有相同的时间段时，它的惩罚匹配权重为 `1` 。因此，如果约束条件权重为 `10hard` ，它将减少得分 `-10hard` 。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:802
#, fuzzy
msgid "Notice how `ConstraintVerifier` ignores the constraint weight during testing - even if those constraint weights are hard coded in the `ConstraintProvider` - because constraints weights change regularly before going into production.  This way, constraint weight tweaking does not break the unit tests."
msgstr "请注意 `ConstraintVerifier` 在测试过程中是如何忽略约束权重的--即使这些约束权重是硬编码在 `ConstraintProvider` ，因为约束权重在进入生产之前会定期改变。这样一来，约束权重的调整就不会破坏单元测试。"

#. type: Title ====
#: upstream/_guides/optaplanner.adoc:803
#, fuzzy, no-wrap
msgid "Test the solver"
msgstr "测试解算器"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:806
#, fuzzy
msgid "In a JUnit test, generate a test dataset and send it to the `TimeTableResource` to solve."
msgstr "在JUnit测试中，生成一个测试数据集，并将其发送到 `TimeTableResource` ，以便解决。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:808
#, fuzzy
msgid "Create the `src/test/java/org/acme/optaplanner/rest/TimeTableResourceTest.java` class:"
msgstr "创建 `src/test/java/org/acme/optaplanner/rest/TimeTableResourceTest.java` 类。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:817
#, no-wrap
msgid ""
"import java.time.DayOfWeek;\n"
"import java.time.LocalTime;\n"
"import java.util.ArrayList;\n"
"import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:828
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.acme.optaplanner.domain.Room;\n"
"import org.acme.optaplanner.domain.Timeslot;\n"
"import org.acme.optaplanner.domain.Lesson;\n"
"import org.acme.optaplanner.domain.TimeTable;\n"
"import org.acme.optaplanner.rest.TimeTableResource;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.junit.jupiter.api.Timeout;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:832 upstream/_guides/optaplanner.adoc:1068
#, no-wrap
msgid ""
"import static org.junit.jupiter.api.Assertions.assertFalse;\n"
"import static org.junit.jupiter.api.Assertions.assertNotNull;\n"
"import static org.junit.jupiter.api.Assertions.assertTrue;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:835 upstream/_guides/optaplanner.adoc:1071
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class TimeTableResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:838 upstream/_guides/optaplanner.adoc:1074
#, no-wrap
msgid ""
"    @Inject\n"
"    TimeTableResource timeTableResource;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:851
#, no-wrap
msgid ""
"    @Test\n"
"    @Timeout(600_000)\n"
"    public void solve() {\n"
"        TimeTable problem = generateProblem();\n"
"        TimeTable solution = timeTableResource.solve(problem);\n"
"        assertFalse(solution.getLessonList().isEmpty());\n"
"        for (Lesson lesson : solution.getLessonList()) {\n"
"            assertNotNull(lesson.getTimeslot());\n"
"            assertNotNull(lesson.getRoom());\n"
"        }\n"
"        assertTrue(solution.getScore().isFeasible());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:859
#, no-wrap
msgid ""
"    private TimeTable generateProblem() {\n"
"        List<Timeslot> timeslotList = new ArrayList<>();\n"
"        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(8, 30), LocalTime.of(9, 30)));\n"
"        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(9, 30), LocalTime.of(10, 30)));\n"
"        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(10, 30), LocalTime.of(11, 30)));\n"
"        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(13, 30), LocalTime.of(14, 30)));\n"
"        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(14, 30), LocalTime.of(15, 30)));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:864
#, no-wrap
msgid ""
"        List<Room> roomList = new ArrayList<>();\n"
"        roomList.add(new Room(\"Room A\"));\n"
"        roomList.add(new Room(\"Room B\"));\n"
"        roomList.add(new Room(\"Room C\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:871
#, no-wrap
msgid ""
"        List<Lesson> lessonList = new ArrayList<>();\n"
"        lessonList.add(new Lesson(101L, \"Math\", \"B. May\", \"9th grade\"));\n"
"        lessonList.add(new Lesson(102L, \"Physics\", \"M. Curie\", \"9th grade\"));\n"
"        lessonList.add(new Lesson(103L, \"Geography\", \"M. Polo\", \"9th grade\"));\n"
"        lessonList.add(new Lesson(104L, \"English\", \"I. Jones\", \"9th grade\"));\n"
"        lessonList.add(new Lesson(105L, \"Spanish\", \"P. Cruz\", \"9th grade\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:879
#, no-wrap
msgid ""
"        lessonList.add(new Lesson(201L, \"Math\", \"B. May\", \"10th grade\"));\n"
"        lessonList.add(new Lesson(202L, \"Chemistry\", \"M. Curie\", \"10th grade\"));\n"
"        lessonList.add(new Lesson(203L, \"History\", \"I. Jones\", \"10th grade\"));\n"
"        lessonList.add(new Lesson(204L, \"English\", \"P. Cruz\", \"10th grade\"));\n"
"        lessonList.add(new Lesson(205L, \"French\", \"M. Curie\", \"10th grade\"));\n"
"        return new TimeTable(timeslotList, roomList, lessonList);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:885
#, fuzzy
msgid "This test verifies that after solving, all lessons are assigned to a time slot and a room.  It also verifies that it found a feasible solution (no hard constraints broken)."
msgstr "这个测试验证了在求解之后，所有的课程都被分配到一个时间段和一个房间。它还验证了它找到了一个可行的解决方案（没有打破硬约束）。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:887
#, fuzzy
msgid "Add test properties to the `src/main/resources/application.properties` file:"
msgstr "在 `src/main/resources/application.properties` 文件中添加测试属性。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:891
#, no-wrap
msgid "quarkus.optaplanner.solver.termination.spent-limit=5s\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:895
#, no-wrap
msgid ""
"# Effectively disable spent-time termination in favor of the best-score-limit\n"
"%test.quarkus.optaplanner.solver.termination.spent-limit=1h\n"
"%test.quarkus.optaplanner.solver.termination.best-score-limit=0hard/*soft\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:903
#, fuzzy
msgid "Normally, the solver finds a feasible solution in less than 200 milliseconds.  Notice how the `application.properties` overwrites the solver termination during tests to terminate as soon as a feasible solution (`0hard/*soft`) is found.  This avoids hard coding a solver time, because the unit test might run on arbitrary hardware.  This approach ensures that the test runs long enough to find a feasible solution, even on slow machines.  But it does not run a millisecond longer than it strictly must, even on fast machines."
msgstr "通常情况下，求解器在不到200毫秒的时间内找到一个可行的解决方案。请注意 `application.properties` 在测试过程中如何覆盖求解器的终止，以便在找到可行的解决方案后立即终止( `0hard/*soft` )。这就避免了硬编码解算器时间，因为单元测试可能在任意硬件上运行。这种方法确保测试运行足够长的时间来找到一个可行的解决方案，即使是在慢速机器上。但它不会比严格意义上的时间长一毫秒，即使在快速机器上。"

#. type: Title ===
#: upstream/_guides/optaplanner.adoc:904
#, fuzzy, no-wrap
msgid "Logging"
msgstr "伐木"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:909
#, fuzzy
msgid "When adding constraints in your `ConstraintProvider`, keep an eye on the _score calculation speed_ in the `info` log, after solving for the same amount of time, to assess the performance impact:"
msgstr "当在你的 `ConstraintProvider` ，添加约束条件时，请留意 `info` 日志中的 _得分计算速度_ ，在解出相同的时间后，评估对性能的影响。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:913
#, no-wrap
msgid "... Solving ended: ..., score calculation speed (29455/sec), ...\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:917
#, fuzzy
msgid "To understand how OptaPlanner is solving your problem internally, change the logging in the `application.properties` file or with a `-D` system property:"
msgstr "要了解OptaPlanner如何在内部解决你的问题，请改变 `application.properties` 文件中的日志记录或用 `-D` 系统属性。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:921
#, no-wrap
msgid "quarkus.log.category.\"org.optaplanner\".level=debug\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:924
#, fuzzy
msgid "Use `debug` logging to show every _step_:"
msgstr "使用 `debug` 记录来显示每一个 _步骤_ 。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:931
#, no-wrap
msgid ""
"... Solving started: time spent (67), best score (-20init/0hard/0soft), environment mode (REPRODUCIBLE), random (JDK with seed 0).\n"
"...     CH step (0), time spent (128), score (-18init/0hard/0soft), selected move count (15), picked move ([Math(101) {null -> Room A}, Math(101) {null -> MONDAY 08:30}]).\n"
"...     CH step (1), time spent (145), score (-16init/0hard/0soft), selected move count (15), picked move ([Physics(102) {null -> Room A}, Physics(102) {null -> MONDAY 09:30}]).\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:934
#, fuzzy
msgid "Use `trace` logging to show every _step_ and every _move_ per step."
msgstr "使用 `trace` 记录来显示每 _一步_ 和每一步的 _移动_ 。"

#. type: Title ==
#: upstream/_guides/optaplanner.adoc:935
#, fuzzy, no-wrap
msgid "Summary"
msgstr "摘要"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:939
#, fuzzy
msgid "Congratulations! You have just developed a Quarkus application with https://www.optaplanner.org/[OptaPlanner]!"
msgstr "恭喜你！你刚刚用OptaPlanner开发了一个Quarkus应用程序。你刚刚用 link:https://www.optaplanner.org/[OptaPlanner] 开发了一个Quarkus应用程序!"

#. type: Title ==
#: upstream/_guides/optaplanner.adoc:940
#, fuzzy, no-wrap
msgid "Further improvements: Database and UI integration"
msgstr "进一步改进。数据库和用户界面整合"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:943
#, fuzzy
msgid "Now try adding database and UI integration:"
msgstr "现在尝试添加数据库和UI集成。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:945
#, fuzzy
msgid "Store `Timeslot`, `Room`, and `Lesson` in the database with xref:hibernate-orm-panache.adoc[Hibernate and Panache]."
msgstr "用 link:hibernate-orm-panache.html[Hibernate和Panache] 在数据库中存储 `Timeslot` , `Room` , 和 `Lesson` 。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:947
#, fuzzy
msgid "xref:rest-json.adoc[Expose them through REST]."
msgstr "link:rest-json.html[通过REST将它们暴露出来] 。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:950
#, fuzzy
msgid "Adjust the `TimeTableResource` to read and write a `TimeTable` instance in a single transaction and use those accordingly:"
msgstr "调整 `TimeTableResource` ，在一个事务中读写一个 `TimeTable` 实例，并相应地使用这些。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:960
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.transaction.Transactional;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:970
#, no-wrap
msgid ""
"import io.quarkus.panache.common.Sort;\n"
"import org.acme.optaplanner.domain.Lesson;\n"
"import org.acme.optaplanner.domain.Room;\n"
"import org.acme.optaplanner.domain.TimeTable;\n"
"import org.acme.optaplanner.domain.Timeslot;\n"
"import org.optaplanner.core.api.score.ScoreManager;\n"
"import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;\n"
"import org.optaplanner.core.api.solver.SolverManager;\n"
"import org.optaplanner.core.api.solver.SolverStatus;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:975
#, no-wrap
msgid "    public static final Long SINGLETON_TIME_TABLE_ID = 1L;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:980
#, no-wrap
msgid ""
"    @Inject\n"
"    SolverManager<TimeTable, Long> solverManager;\n"
"    @Inject\n"
"    ScoreManager<TimeTable, HardSoftScore> scoreManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:992
#, no-wrap
msgid ""
"    // To try, open http://localhost:8080/timeTable\n"
"    @GET\n"
"    public TimeTable getTimeTable() {\n"
"        // Get the solver status before loading the solution\n"
"        // to avoid the race condition that the solver terminates between them\n"
"        SolverStatus solverStatus = getSolverStatus();\n"
"        TimeTable solution = findById(SINGLETON_TIME_TABLE_ID);\n"
"        scoreManager.updateScore(solution); // Sets the score\n"
"        solution.setSolverStatus(solverStatus);\n"
"        return solution;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:1000
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/solve\")\n"
"    public void solve() {\n"
"        solverManager.solveAndListen(SINGLETON_TIME_TABLE_ID,\n"
"                this::findById,\n"
"                this::save);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:1004
#, no-wrap
msgid ""
"    public SolverStatus getSolverStatus() {\n"
"        return solverManager.getSolverStatus(SINGLETON_TIME_TABLE_ID);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:1010
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/stopSolving\")\n"
"    public void stopSolving() {\n"
"        solverManager.terminateEarly(SINGLETON_TIME_TABLE_ID);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:1023
#, no-wrap
msgid ""
"    @Transactional\n"
"    protected TimeTable findById(Long id) {\n"
"        if (!SINGLETON_TIME_TABLE_ID.equals(id)) {\n"
"            throw new IllegalStateException(\"There is no timeTable with id (\" + id + \").\");\n"
"        }\n"
"        // Occurs in a single transaction, so each initialized lesson references the same timeslot/room instance\n"
"        // that is contained by the timeTable's timeslotList/roomList.\n"
"        return new TimeTable(\n"
"                Timeslot.listAll(Sort.by(\"dayOfWeek\").and(\"startTime\").and(\"endTime\").and(\"id\")),\n"
"                Room.listAll(Sort.by(\"name\").and(\"id\")),\n"
"                Lesson.listAll(Sort.by(\"subject\").and(\"teacher\").and(\"studentGroup\").and(\"id\")));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:1033
#, no-wrap
msgid ""
"    @Transactional\n"
"    protected void save(TimeTable timeTable) {\n"
"        for (Lesson lesson : timeTable.getLessonList()) {\n"
"            // TODO this is awfully naive: optimistic locking causes issues if called by the SolverManager\n"
"            Lesson attachedLesson = Lesson.findById(lesson.getId());\n"
"            attachedLesson.setTimeslot(lesson.getTimeslot());\n"
"            attachedLesson.setRoom(lesson.getRoom());\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:1039
#, fuzzy
msgid "For simplicity's sake, this code handles only one `TimeTable` instance, but it is straightforward to enable multi-tenancy and handle multiple `TimeTable` instances of different high schools in parallel."
msgstr "为了简单起见，这段代码只处理一个 `TimeTable` 实例，但要启用多租户并并行处理不同高中的多个 `TimeTable` 实例是很简单的。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:1043
msgid "The `getTimeTable()` method returns the latest timetable from the database.  It uses the `ScoreManager` (which is automatically injected)  to calculate the score of that timetable, so the UI can show the score."
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:1048
msgid "The `solve()` method starts a job to solve the current timetable and store the time slot and room assignments in the database.  It uses the `SolverManager.solveAndListen()` method to listen to intermediate best solutions and update the database accordingly.  This enables the UI to show progress while the backend is still solving."
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:1051
msgid "Adjust the `TimeTableResourceTest` instance accordingly, now that the `solve()` method returns immediately.  Poll for the latest solution until the solver finishes solving:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:1064
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.acme.optaplanner.domain.Lesson;\n"
"import org.acme.optaplanner.domain.TimeTable;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.junit.jupiter.api.Timeout;\n"
"import org.optaplanner.core.api.solver.SolverStatus;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:1093
#, no-wrap
msgid ""
"    @Test\n"
"    @Timeout(600_000)\n"
"    public void solveDemoDataUntilFeasible() throws InterruptedException {\n"
"        timeTableResource.solve();\n"
"        TimeTable timeTable = timeTableResource.getTimeTable();\n"
"        while (timeTable.getSolverStatus() != SolverStatus.NOT_SOLVING) {\n"
"            // Quick polling (not a Test Thread Sleep anti-pattern)\n"
"            // Test is still fast on fast machines and doesn't randomly fail on slow machines.\n"
"            Thread.sleep(20L);\n"
"            timeTable = timeTableResource.getTimeTable();\n"
"        }\n"
"        assertFalse(timeTable.getLessonList().isEmpty());\n"
"        for (Lesson lesson : timeTable.getLessonList()) {\n"
"            assertNotNull(lesson.getTimeslot());\n"
"            assertNotNull(lesson.getRoom());\n"
"        }\n"
"        assertTrue(timeTable.getScore().isFeasible());\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:1098
msgid "Build an attractive web UI on top of these REST methods to visualize the timetable."
msgstr ""

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:1099
msgid "Take a look at {quickstarts-tree-url}/optaplanner-quickstart[the quickstart source code] to see how this all turns out."
msgstr ""
