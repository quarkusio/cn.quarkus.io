# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: layout
#: upstream/_guides/topic/container-first.adoc:1
#, fuzzy, no-wrap
msgid "vision"
msgstr "愿景"

#. type: YAML Front Matter: permalink
#: upstream/_guides/topic/container-first.adoc:1
#, fuzzy, no-wrap
msgid "/vision/container-first"
msgstr "/vision/container-first"

#. type: Title =
#: upstream/_guides/topic/container-first.adoc:7
#, fuzzy, no-wrap
msgid "{project-name} - Container First"
msgstr "{项目名称} - 容器第一"

#. type: Plain text
#: upstream/_guides/topic/container-first.adoc:12
#, fuzzy
msgid "From the outset {project-name} has been designed around a container first philosophy.  What this means in real terms is that {project-name} is optimised for low memory usage and fast startup times in the following ways:"
msgstr "从一开始，{项目名称}的设计就围绕着容器优先的理念。这意味着，{项目名称}通过以下方式对低内存使用和快速启动进行了优化。"

#. type: Labeled list
#: upstream/_guides/topic/container-first.adoc:13
#, fuzzy, no-wrap
msgid "First Class Support for Graal/SubstrateVM"
msgstr "对Graal/SubstrateVM的一流支持"

#. type: Plain text
#: upstream/_guides/topic/container-first.adoc:18
#, fuzzy
msgid "Substrate support has been an important part of the design for {project-name} from the beginning.  When an application is compiled down to a native image it starts much faster and can run with a much smaller heap than a standard JVM. {project-name} are all tested in Substrate, and can run without the `-H:+ReportUnsupportedElementsAtRuntime` flag."
msgstr "底层支持从一开始就是{项目名称}设计的一个重要部分。当一个应用程序被编译成一个本地镜像时，它的启动速度要快得多，并且可以以比标准JVM小得多的堆来运行。{project-name}都是在Substrate中测试的，并且可以在没有 `-H:+ReportUnsupportedElementsAtRuntime` 标志的情况下运行。"

#. type: Labeled list
#: upstream/_guides/topic/container-first.adoc:19
#, fuzzy, no-wrap
msgid "Build Time Metadata Processing"
msgstr "建立时间元数据处理"

#. type: Plain text
#: upstream/_guides/topic/container-first.adoc:25
msgid "As much processing as possible is done at build time, so your application will only contain the classes that are actually needed at runtime. In a traditional model all the classes required to perform the initial application deployment hang around for the life of the application, even though they are only used once. With {project-name} they are not even loaded into the production JVM. This results in less memory usage, and also faster startup time as all metadata processing has already been done."
msgstr ""

#. type: Labeled list
#: upstream/_guides/topic/container-first.adoc:26
#, no-wrap
msgid "Reduction in Reflection Usage"
msgstr "减少反射的使用"

#. type: Plain text
#: upstream/_guides/topic/container-first.adoc:28
msgid "As much as possible {project-name} tries to avoid reflection, reducing startup time and memory usage."
msgstr ""

#. type: Labeled list
#: upstream/_guides/topic/container-first.adoc:29
#, no-wrap
msgid "Native Image Pre Boot"
msgstr ""

#. type: Plain text
#: upstream/_guides/topic/container-first.adoc:32
msgid "When running in a native image {project-name} pre-boots as much of the framework as possible during the native image build process. This means that the resulting native image has already run most of the startup code and serialized the result into the executable, resulting in even faster startup."
msgstr ""
