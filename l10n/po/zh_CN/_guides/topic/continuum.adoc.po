# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: layout
#: upstream/_guides/topic/continuum.adoc:1
#, fuzzy, no-wrap
msgid "vision"
msgstr "愿景"

#. type: YAML Front Matter: permalink
#: upstream/_guides/topic/continuum.adoc:1
#, fuzzy, no-wrap
msgid "/vision/continuum"
msgstr "/vision/continuum"

#. type: Title =
#: upstream/_guides/topic/continuum.adoc:7
#, fuzzy, no-wrap
msgid "The Imperative and Reactive Continuum"
msgstr "必要性和反应性的连续体"

#. type: Plain text
#: upstream/_guides/topic/continuum.adoc:15
#, fuzzy
msgid "For years, the client-server architecture has been the de-facto standard to build applications.  But a major shift happened.  The _one model rules them all_ age is over.  A new range of applications and architecture styles has emerged and impacts how code is written and how applications are deployed and executed.  HTTP microservices, reactive applications, message-driven microservices and serverless are now central players in modern systems."
msgstr "多年来，客户-服务器架构一直是构建应用程序的事实标准。但是，一个重大的转变发生了。 _一个模式统治一切_ 的时代已经过去。一系列新的应用和架构风格已经出现，并影响到代码的编写方式以及应用的部署和执行方式。HTTP微服务、反应式应用、消息驱动的微服务和无服务器现在是现代系统的核心角色。"

#. type: Plain text
#: upstream/_guides/topic/continuum.adoc:18
#, fuzzy
msgid "Quarkus has been designed with this new world in mind, and provides first-class support for these different paradigms.  Quarkus development model morphs to adapt itself to the type of application you are developing."
msgstr "Quarkus的设计考虑到了这个新的世界，并为这些不同的范式提供了一流的支持。Quarkus的开发模型可以适应你正在开发的应用程序的类型。"

#. type: Title ==
#: upstream/_guides/topic/continuum.adoc:19
#, fuzzy, no-wrap
msgid "HTTP microservices"
msgstr "HTTP微服务"

#. type: Plain text
#: upstream/_guides/topic/continuum.adoc:24
#, fuzzy
msgid "Let’s start with the basic: HTTP microservices.  In this context, you need to develop an HTTP endpoint, often called REST or CRUD.  You process incoming HTTP requests, and to do so you often need to rely on others services, such as databases, or another HTTP service."
msgstr "让我们从最基本的开始：HTTP微服务。在这种情况下，你需要开发一个HTTP端点，通常称为REST或CRUD。你处理传入的HTTP请求，为了做到这一点，你往往需要依赖其他服务，如数据库，或另一个HTTP服务。"

#. type: Plain text
#: upstream/_guides/topic/continuum.adoc:27
#, fuzzy
msgid "For this type of application, Quarkus relies on well-known standards such as JAX-RS, JPA and MicroProfile Rest Client.  Let's take a very simple application handling _fruits_. The code would be something like:"
msgstr "对于这种类型的应用，Quarkus依赖于著名的标准，如JAX-RS、JPA和MicroProfile Rest Client。让我们来看看一个非常简单的处理 _水果_ 的应用程序。其代码将是这样的。"

#. type: delimited block -
#: upstream/_guides/topic/continuum.adoc:34
#, no-wrap
msgid ""
"@Path(\"fruits\")\n"
"@Produces(\"application/json\")\n"
"@Consumes(\"application/json\")\n"
"public class FruitResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/topic/continuum.adoc:37
#, no-wrap
msgid ""
"    @Inject\n"
"    EntityManager entityManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/topic/continuum.adoc:43
#, no-wrap
msgid ""
"    @GET\n"
"    public List<Fruit> get() {\n"
"        return entityManager.createNamedQuery(\"Fruits.findAll\", Fruit.class)\n"
"              .getResultList();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/topic/continuum.adoc:53
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"{id}\")\n"
"    public Fruit getSingle(@PathParam Integer id) {\n"
"        Fruit entity = entityManager.find(Fruit.class, id);\n"
"        if (entity == null) {\n"
"            throw new WebApplicationException(\"Fruit with id of \" + id + \" does not exist.\", 404);\n"
"        }\n"
"        return entity;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/topic/continuum.adoc:60
#, no-wrap
msgid ""
"    @POST\n"
"    @Transactional\n"
"    public Response create(Fruit fruit) {\n"
"        if (fruit.getId() != null) {\n"
"            throw new WebApplicationException(\"Id was invalidly set on request.\", 422);\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/topic/continuum.adoc:64
#, no-wrap
msgid ""
"        entityManager.persist(fruit);\n"
"        return Response.ok(fruit).status(201).build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/topic/continuum.adoc:67
#, no-wrap
msgid ""
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/topic/continuum.adoc:72
#, fuzzy
msgid "If you are a Java EE or Spring user, this development model should look familiar.  You expose a _resource_ containing methods annotated with `@GET`, `@POST`... to handle the different requests.  The _path_ is specified using the `@Path` annotation."
msgstr "如果你是Java EE或Spring的用户，这个开发模型应该看起来很熟悉。你暴露了一个 _资源_ ，包含了用 `@GET` , `@POST` ...注解的方法来处理不同的请求。 _路径_ 是用 `@Path` 注解指定的。"

#. type: Plain text
#: upstream/_guides/topic/continuum.adoc:75
#, fuzzy
msgid "JPA users will recognize the `EntityManager` used to access the database.  Finally, methods requiring a transaction are simply annotated with `@Transactional`."
msgstr "JPA用户将认识到用于访问数据库的 `EntityManager` 。最后，需要交易的方法被简单地注解为 `@Transactional` 。"

#. type: Plain text
#: upstream/_guides/topic/continuum.adoc:79
#, fuzzy
msgid "Let's now imagine you need to access another HTTP endpoint.  You can use a HTTP client directly, this is nothing more than repeating boilerplate code.  Quarkus provides a way to call HTTP endpoints that return Rest based results easily using the MicroProfile Rest Client API."
msgstr "现在我们设想一下，你需要访问另一个HTTP端点。你可以直接使用HTTP客户端，这只不过是重复模板代码而已。Quarkus提供了一种方法来调用HTTP端点，这些端点使用MicroProfile Rest Client API轻松返回基于Rest的结果。"

#. type: Plain text
#: upstream/_guides/topic/continuum.adoc:81
#, fuzzy
msgid "First declare your service as follows:"
msgstr "首先声明你的服务如下。"

#. type: delimited block -
#: upstream/_guides/topic/continuum.adoc:87
#, no-wrap
msgid ""
"@Path(\"/v2\")\n"
"@RegisterRestClient\n"
"public interface CountriesService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/topic/continuum.adoc:93
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/name/{name}\")\n"
"    @Produces(\"application/json\")\n"
"    Set<Country> getByName(@PathParam(\"name\") String name);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/topic/continuum.adoc:96
#, fuzzy
msgid "For each call you are intending to do, add a method and use annotations to describe the behavior."
msgstr "对于你打算做的每个调用，添加一个方法并使用注释来描述行为。"

#. type: Plain text
#: upstream/_guides/topic/continuum.adoc:98
#, fuzzy
msgid "Then, in your resource, just use the `CountriesService`:"
msgstr "然后，在你的资源中，只要使用 `CountriesService` 。"

#. type: delimited block -
#: upstream/_guides/topic/continuum.adoc:103
#, no-wrap
msgid ""
"@Path(\"/country\")\n"
"public class CountriesResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/topic/continuum.adoc:107
#, no-wrap
msgid ""
"    @Inject\n"
"    @RestClient\n"
"    CountriesService countriesService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/topic/continuum.adoc:115
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/name/{name}\")\n"
"    @Produces(MediaType.APPLICATION_JSON)\n"
"    public Set<Country> name(@PathParam(\"name\") String name) {\n"
"        return countriesService.getByName(name);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/topic/continuum.adoc:120
#, fuzzy
msgid "But you may be wondering where the URL is configured as it's not in the code.  Remember, it must not be hard-coded because the url likely depends on the environment.  The URL is configured in the application configuration:"
msgstr "但你可能想知道URL是在哪里配置的，因为它不在代码中。记住，它不能是硬编码的，因为URL很可能取决于环境。URL是在应用程序配置中配置的。"

#. type: delimited block -
#: upstream/_guides/topic/continuum.adoc:125
#, no-wrap
msgid ""
"# the format is interface-name/mp-rest/url=the-service-url\n"
"org.acme.restclient.CountriesService/mp-rest/url=https://restcountries.eu/rest\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/topic/continuum.adoc:128
#, fuzzy
msgid "The url can now be updated during the deployment or at launch time using system properties or environment variables."
msgstr "现在可以在部署期间或在启动时使用系统属性或环境变量更新网址。"

#. type: Title ==
#: upstream/_guides/topic/continuum.adoc:129
#, fuzzy, no-wrap
msgid "Being reactive"
msgstr "被动反应"

#. type: Plain text
#: upstream/_guides/topic/continuum.adoc:133
#, fuzzy
msgid "Application requirements have changed drastically over the last few years.  For any application to succeed in the era of cloud computing, big data or IoT, going reactive is increasingly becoming the architecture style to follow."
msgstr "在过去的几年里，应用需求发生了巨大的变化。任何应用要想在云计算、大数据或物联网时代取得成功，走反应式正日益成为应遵循的架构风格。"

#. type: Plain text
#: upstream/_guides/topic/continuum.adoc:137
#, fuzzy
msgid "Today’s users embrace applications that have milliseconds of response time, 100% uptime, lower latency, push data instead of pull, higher throughput and elasticity.  However, these features are nearly impossible to achieve by using _yesterday’s software architecture_ without a huge investment in resources, infrastructure and tooling.  The world changed and having dozens of servers, long response time (> 500 ms), downtime due to maintenance or waterfalls of failures does not meet the expected user experience."
msgstr "今天的用户拥护那些具有毫秒级响应时间、100%正常运行时间、更低的延迟、推送数据而不是拉动、更高的吞吐量和弹性的应用程序。然而，如果不对资源、基础设施和工具进行巨大的投资，使用 _昨天的软件架构_ 几乎不可能实现这些功能。世界变了，拥有几十台服务器、较长的响应时间（>500毫秒）、因维护而导致的停机时间或瀑布式的故障并不能满足预期的用户体验。"

#. type: Plain text
#: upstream/_guides/topic/continuum.adoc:140
#, fuzzy
msgid "Quarkus stands with you on your path to reactive.  First, you can implement asynchronous HTTP endpoint as follows:"
msgstr "Quarkus在你通往反应式的道路上与你站在一起。首先，你可以实现异步的HTTP端点，如下所示。"

#. type: delimited block -
#: upstream/_guides/topic/continuum.adoc:148
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/greeting/{name}\")\n"
"public Uni<String> greetings(@PathParam(\"name\") String name) {\n"
"    return reactiveService.getAsyncGreetings(name);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/topic/continuum.adoc:152
#, fuzzy
msgid "Method actions can compose asynchronous operations and complete the result when everything is done without blocking threads.  This greatly improves resource consumption and elasticity."
msgstr "方法动作可以组成异步操作，并在不阻塞线程的情况下完成一切结果。这大大提高了资源消耗和弹性。"

#. type: Plain text
#: upstream/_guides/topic/continuum.adoc:154
#, fuzzy
msgid "Thanks to a reactive core, an intuitive event-driven development model and a \"reactive-first\" strategy for all the Quarkus internals, Quarkus applications handles high concurrency, and uses resources efficiently."
msgstr "由于有一个反应式的核心，一个直观的事件驱动的开发模型和所有Quarkus内部的 \"反应式优先 \"策略，Quarkus应用程序可以处理高并发，并有效地使用资源。"

#.  TODO Async rest client, but does not seem to be working.
#. type: Plain text
#: upstream/_guides/topic/continuum.adoc:159
#, fuzzy
msgid "But, what about streams? Generating a _server-sent event_ response with Quarkus is just as simple:"
msgstr "但是，流的情况如何？用Quarkus生成一个 _服务器发送的事件_ 响应也同样简单。"

#. type: delimited block -
#: upstream/_guides/topic/continuum.adoc:168
#, no-wrap
msgid ""
"@Produces(MediaType.SERVER_SENT_EVENTS)\n"
"@GET\n"
"@Path(\"/neo\")\n"
"public Multi<String> stream() {\n"
"    return service.getStream();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/topic/continuum.adoc:171
#, fuzzy
msgid "This method returns a `Multi`, but you can use any Reactive Streams `Publisher` implementation."
msgstr "该方法返回一个 `Multi` ，但你可以使用任何Reactive Streams `Publisher` 实现。"

#. type: delimited block -
#: upstream/_guides/topic/continuum.adoc:181
#, no-wrap
msgid ""
"@Produces(MediaType.SERVER_SENT_EVENTS)\n"
"@GET\n"
"@Path(\"/neo\")\n"
"public Multi<String> stream() {\n"
"    return Multi.createFrom().items(\"a\", \"b\", \"c\")\n"
"           .onItem().transform(String::toUpperCase);\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/topic/continuum.adoc:183
#, fuzzy, no-wrap
msgid "Message-driven microservices"
msgstr "消息驱动的微服务"

#. type: Plain text
#: upstream/_guides/topic/continuum.adoc:187
#, fuzzy
msgid "However, HTTP characteristics prohibit implementing https://www.reactivemanifesto.org/[reactive systems], where all the components interact using asynchronous messages passing.  But no worries, Quarkus is perfectly suited to implement message-driven microservices and reactive systems."
msgstr "然而，HTTP的特性禁止实施 link:https://www.reactivemanifesto.org/[反应式系统] ，所有的组件都使用异步消息传递进行交互。但是不用担心，Quarkus完全适合实现消息驱动的微服务和反应式系统。"

#. type: Plain text
#: upstream/_guides/topic/continuum.adoc:189
#, fuzzy
msgid "First, you can consume messages from various brokers such as AMQP or Kafka, and process these messages smoothly:"
msgstr "首先，你可以从AMQP或Kafka等各种经纪公司消费消息，并顺利地处理这些消息。"

#. type: delimited block -
#: upstream/_guides/topic/continuum.adoc:194
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class HealthDataProcessor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/topic/continuum.adoc:201
#, no-wrap
msgid ""
"  @Incoming(\"health\")\n"
"  @Outgoing(\"heartbeat\")\n"
"  public double filtered(Health health) {\n"
"    return health.getHeartbeat();\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/topic/continuum.adoc:206
#, fuzzy
msgid "The `@Incoming` and `@Outgoing` annotations are part of https://www.smallrye.io/smallrye-reactive-messaging[Reactive Messaging].  They are used to express from which _stream_ you are consuming and to which stream you are sending.  Thanks to Reactive Messaging you can consume and send messages from and to different brokers and transports such as HTTP, Kafka, or http://camel.apache.org[Apache Camel]."
msgstr " `@Incoming` 和 `@Outgoing` 注解是 link:https://www.smallrye.io/smallrye-reactive-messaging[反应式消息传递] 的一部分。它们被用来表达你从哪个 _流中_ 消费和向哪个流中发送。多亏了Reactive Messaging，你可以从不同的经纪人和运输工具（如HTTP、Kafka或 link:http://camel.apache.org[Apache Camel] ）消费和发送消息。"

#. type: Plain text
#: upstream/_guides/topic/continuum.adoc:209
#, fuzzy
msgid "Sometimes you need more than just handling messages one by one.  You can also express your message processing logic using reactive programming as illustrated in the following snippet:"
msgstr "有时你需要的不仅仅是逐一处理消息。你也可以使用反应式编程来表达你的消息处理逻辑，如下面的片段所示。"

#. type: delimited block -
#: upstream/_guides/topic/continuum.adoc:221
#, no-wrap
msgid ""
"@Incoming(\"health\")\n"
"@Outgoing(\"output\")\n"
"public Multi<Record<String, JsonObject>> filterState(Multi<JsonObject> input) {\n"
"    return input\n"
"      .onItem().transform(json -> json.getJsonObject(\"state\"))\n"
"      .drop().repetitions()\n"
"      .onItem().invoke(json -> LOGGER.info(\"Forwarding new state '{}' to Kafka\", json.encode()))\n"
"      .onItem().transform(json -> Record.of(\"neo\", json));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/topic/continuum.adoc:224
#, fuzzy
msgid "You can also use _imperative_ logic with Reactive Messaging:"
msgstr "你也可以用Reactive Messaging使用 _命令式_ 逻辑。"

#. type: delimited block -
#: upstream/_guides/topic/continuum.adoc:233
#, no-wrap
msgid ""
"@Incoming(\"orders\")\n"
"@Outgoing(\"queue\")\n"
"@Blocking\n"
"public Beverage process(Order order) {\n"
"    return prepare(order); // Block the caller thread.\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/topic/continuum.adoc:235
#, fuzzy, no-wrap
msgid "Functions as a Service and Serverless"
msgstr "功能即服务和无服务器"

#. type: Plain text
#: upstream/_guides/topic/continuum.adoc:239
msgid "Thanks to their stellar startup time and low memory usage, you can implement functions using Quarkus to be used in serverless environments.  If you are using AWS Lambda, your Quarkus function looks like:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/topic/continuum.adoc:243
#, no-wrap
msgid "public class HelloLambda implements RequestHandler<HelloRequest, String> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/topic/continuum.adoc:246
#, no-wrap
msgid ""
"    @Inject\n"
"    HelloGreeter greeter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/topic/continuum.adoc:252
#, no-wrap
msgid ""
"    @Override\n"
"    public String handleRequest(HelloRequest request, Context context) {\n"
"        return greeter.greet(request.firstName, request.lastName);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/topic/continuum.adoc:254
msgid "You can use any of the Quarkus features in your function and benefit from the fast startup and low memory utilization. With Quarkus, you can embrace this new world without having to change your programming language."
msgstr ""
