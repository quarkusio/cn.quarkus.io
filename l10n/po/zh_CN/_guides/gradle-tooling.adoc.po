# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/gradle-tooling.adoc:6
#, fuzzy, no-wrap
msgid "Building Quarkus apps with Gradle"
msgstr "用Gradle构建Quarkus应用程序"

#. type: Title ==
#: upstream/_guides/gradle-tooling.adoc:12
#, fuzzy, no-wrap
msgid "Creating a new project"
msgstr "创建一个新的项目"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:15
#, fuzzy
msgid "To scaffold a Gradle project you can either use the xref:cli-tooling.adoc[Quarkus CLI] or the Quarkus Maven plugin:"
msgstr "要为Gradle项目搭建脚手架，你可以使用 link:cli-tooling.html[Quarkus CLI] 或Quarkus Maven插件。"

#. type: Block title
#: upstream/_guides/gradle-tooling.adoc:17
#: upstream/_guides/gradle-tooling.adoc:107
#, fuzzy, no-wrap
msgid "CLI"
msgstr "CLI"

#. type: delimited block -
#: upstream/_guides/gradle-tooling.adoc:24
#, no-wrap
msgid ""
"quarkus create app my-groupId:my-artifactId \\\n"
"    --extension=resteasy-reactive,resteasy-reactive-jackson \\\n"
"    --gradle\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:27
#, fuzzy
msgid "_For more information about how to install the Quarkus CLI and use it, please refer to xref:cli-tooling.adoc[the Quarkus CLI guide]._"
msgstr " _关于如何安装Quarkus CLI和使用它的更多信息，请参考<a href=\"cli-tooling.html\">Quarkus CLI指南</a>。_ "

#. type: Block title
#: upstream/_guides/gradle-tooling.adoc:30
#, fuzzy, no-wrap
msgid "Maven"
msgstr "雯雯"

#. type: delimited block -
#: upstream/_guides/gradle-tooling.adoc:39
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=my-groupId \\\n"
"    -DprojectArtifactId=my-artifactId \\\n"
"    -Dextensions=\"resteasy-reactive,resteasy-reactive-jackson\" \\\n"
"    -DbuildTool=gradle\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:43
#, fuzzy
msgid "If you just launch `mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create` the Maven plugin asks for user inputs. You can disable this interactive mode (and use default values) by passing `-B` to the Maven command."
msgstr "如果你只是启动 `mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create` ，Maven插件会要求用户输入。您可以通过在Maven命令中传递 `-B` ，禁用这种交互模式（并使用默认值）。"

#. type: delimited block *
#: upstream/_guides/gradle-tooling.adoc:46
#, fuzzy
msgid "If you prefer using the Kotlin DSL, use `gradle-kotlin-dsl` instead of `gradle`."
msgstr "如果你喜欢使用Kotlin DSL，请使用 `gradle-kotlin-dsl` 而不是 `gradle` 。"

#. type: delimited block =
#: upstream/_guides/gradle-tooling.adoc:50
#, fuzzy
msgid "Quarkus project scaffolding automatically installs the Gradle wrapper (`./gradlew`) in your project."
msgstr "Quarkus项目脚手架会自动在你的项目中安装Gradle包装器（ `./gradlew` ）。"

#. type: delimited block =
#: upstream/_guides/gradle-tooling.adoc:52
#, fuzzy
msgid "If you prefer to use a standalone Gradle installation, please use Gradle {gradle-version}."
msgstr "如果你喜欢使用独立的Gradle安装，请使用Gradle {gradle-version}。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:55
#, fuzzy
msgid "The project is generated in a directory named after the passed artifactId."
msgstr "项目被生成在一个以传递的artifactId命名的目录中。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:58
#, fuzzy
msgid "A pair of Dockerfiles for native and JVM modes are also generated in `src/main/docker`.  Instructions to build the image and run the container are written in those Dockerfiles."
msgstr "一对用于本地和JVM模式的Dockerfiles也在 `src/main/docker` 。构建镜像和运行容器的说明写在这些Dockerfiles中。"

#. type: Title ===
#: upstream/_guides/gradle-tooling.adoc:60
#, fuzzy, no-wrap
msgid "Custom test configuration profile in JVM mode"
msgstr "JVM模式下的自定义测试配置文件"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:65
#, fuzzy
msgid "By default, Quarkus tests in JVM mode are run using the `test` configuration profile. If you are not familiar with Quarkus configuration profiles, everything you need to know is explained in the xref:config.adoc#configuration-profiles[Configuration Profiles Documentation]."
msgstr "默认情况下，Quarkus测试在JVM模式下使用 `test` 配置文件运行。如果你不熟悉Quarkus配置文件，你需要知道的一切都在 link:config.html#configuration-profiles[配置文件文档] 中解释。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:69
#, fuzzy
msgid "It is however possible to use a custom configuration profile for your tests with the Gradle build configuration shown below.  This can be useful if you need for example to run some tests using a specific database which is not your default testing database."
msgstr "然而，可以用下面显示的Gradle构建配置为你的测试使用一个自定义配置文件。如果你需要使用一个特定的数据库来运行一些测试，而这个数据库不是你的默认测试数据库，那么这就很有用。"

#. type: Block title
#: upstream/_guides/gradle-tooling.adoc:71
#: upstream/_guides/gradle-tooling.adoc:176
#: upstream/_guides/gradle-tooling.adoc:214
#: upstream/_guides/gradle-tooling.adoc:399
#: upstream/_guides/gradle-tooling.adoc:477
#: upstream/_guides/gradle-tooling.adoc:566
#, fuzzy, no-wrap
msgid "Groovy DSL"
msgstr "协作式DSL（Groovy DSL"

#. type: delimited block -
#: upstream/_guides/gradle-tooling.adoc:78
#, no-wrap
msgid ""
"test {\n"
"    systemProperty \"quarkus.test.profile\", \"foo\" <1>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:81
#: upstream/_guides/gradle-tooling.adoc:94
#, fuzzy
msgid "The `foo` configuration profile will be used to run the tests."
msgstr " `foo` 配置文件将被用于运行测试。"

#. type: Block title
#: upstream/_guides/gradle-tooling.adoc:84
#: upstream/_guides/gradle-tooling.adoc:187
#: upstream/_guides/gradle-tooling.adoc:225
#: upstream/_guides/gradle-tooling.adoc:416
#: upstream/_guides/gradle-tooling.adoc:490
#: upstream/_guides/gradle-tooling.adoc:577
#, fuzzy, no-wrap
msgid "Kotlin DSL"
msgstr "Kotlin DSL"

#. type: delimited block -
#: upstream/_guides/gradle-tooling.adoc:91
#, no-wrap
msgid ""
"tasks.test {\n"
"    systemProperty(\"quarkus.test.profile\", \"foo\") <1>\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/gradle-tooling.adoc:100
#, fuzzy
msgid "It is not possible to use a custom test configuration profile in native mode for now. Native tests are always run using the `prod` profile."
msgstr "目前不可能在本地模式下使用自定义的测试配置文件。本地测试总是使用 `prod` 配置文件来运行。"

#. type: Title ==
#: upstream/_guides/gradle-tooling.adoc:102
#, fuzzy, no-wrap
msgid "Dealing with extensions"
msgstr "处理延期问题"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:105
#, fuzzy
msgid "From inside a Quarkus project, you can obtain a list of the available extensions with:"
msgstr "在Quarkus项目中，你可以通过以下方式获得一个可用的扩展列表。"

#. type: delimited block -
#: upstream/_guides/gradle-tooling.adoc:110
#, no-wrap
msgid "quarkus extension\n"
msgstr ""

#. type: Block title
#: upstream/_guides/gradle-tooling.adoc:113
#, fuzzy, no-wrap
msgid "Gradle"
msgstr "渐进式"

#. type: delimited block -
#: upstream/_guides/gradle-tooling.adoc:116
#, no-wrap
msgid "./gradlew listExtensions\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:119
#, fuzzy
msgid "You can enable an extension using:"
msgstr "你可以用以下方法启用一个扩展。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:124
#, fuzzy
msgid "Extensions are passed using a comma-separated list."
msgstr "使用逗号分隔的列表传递扩展。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:129
#, fuzzy
msgid "The extension name is the GAV name of the extension: e.g. `io.quarkus:quarkus-agroal`.  But you can pass a partial name and Quarkus will do its best to find the right extension.  For example, `agroal`, `Agroal` or `agro` will expand to `io.quarkus:quarkus-agroal`.  If no extension is found or if more than one extensions match, you will see a red check mark ❌ in the command result."
msgstr "扩展名是扩展名的GAV名称：例如： `io.quarkus:quarkus-agroal` 。但你可以传递一个部分名称，Quarkus将尽力找到正确的扩展名。例如， `agroal` , `Agroal` 或 `agro` 将展开为 `io.quarkus:quarkus-agroal` 。如果没有找到扩展名或有多个扩展名匹配，你将在命令结果中看到一个红色的复选标记❌。"

#. type: delimited block -
#: upstream/_guides/gradle-tooling.adoc:142
#, no-wrap
msgid ""
"$ ./gradlew addExtension --extensions=\"jdbc,agroal,non-exist-ent\"\n"
"[...]\n"
"❌ Multiple extensions matching 'jdbc'\n"
"     * io.quarkus:quarkus-jdbc-h2\n"
"     * io.quarkus:quarkus-jdbc-mariadb\n"
"     * io.quarkus:quarkus-jdbc-postgresql\n"
"     Be more specific e.g using the exact name or the full gav.\n"
"✅ Adding extension io.quarkus:quarkus-agroal\n"
"❌ Cannot find a dependency matching 'non-exist-ent', maybe a typo?\n"
"[...]\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:145
#, fuzzy
msgid "You can install all extensions which match a globbing pattern:"
msgstr "你可以安装所有符合globbing模式的扩展。"

#. type: Title ==
#: upstream/_guides/gradle-tooling.adoc:150
#, fuzzy, no-wrap
msgid "Development mode"
msgstr "发展模式"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:154
#, fuzzy
msgid "Quarkus comes with a built-in development mode.  You can start it with:"
msgstr "Quarkus有一个内置的开发模式。你可以通过以下方式启动它。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:159
#, fuzzy
msgid "Note that if you run it this way the continuous testing experience will not be as nice, as gradle runs as a daemon Quarkus can't draw the 'pretty' test output so falls back to just logging the output."
msgstr "请注意，如果你这样运行，连续测试的体验就不会那么好，因为gradle作为一个守护程序运行，Quarkus不能画出 \"漂亮 \"的测试输出，所以会退回到只记录输出的状态。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:163
#, fuzzy
msgid "You can then update the application sources, resources and configurations.  The changes are automatically reflected in your running application.  This is great to do development spanning UI and database as you see changes reflected immediately."
msgstr "然后你可以更新应用程序的来源、资源和配置。这些变化会自动反映在你运行的应用程序中。这对于做跨越UI和数据库的开发是非常好的，因为你可以看到变化立即反映出来。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:170
#, fuzzy
msgid "`quarkusDev` enables hot deployment with background compilation, which means that when you modify your Java files or your resource files and refresh your browser these changes will automatically take effect.  This works too for resource files like the configuration property file.  The act of refreshing the browser triggers a scan of the workspace, and if any changes are detected the Java files are compiled, and the application is redeployed, then your request is serviced by the redeployed application. If there are any issues with compilation or deployment an error page will let you know."
msgstr " `quarkusDev` 启用后台编译的热部署，这意味着当你修改你的Java文件或资源文件并刷新你的浏览器时，这些变化将自动生效。这也适用于资源文件，如配置属性文件。刷新浏览器的行为会触发对工作区的扫描，如果检测到任何变化，就会对Java文件进行编译，并重新部署应用程序，然后由重新部署的应用程序为您的请求提供服务。如果编译或部署有任何问题，错误页面会让你知道。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:172
#, fuzzy
msgid "Hit `CTRL+C` to stop the application."
msgstr "点击 `CTRL+C` ，停止应用程序。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:174
#, fuzzy
msgid "You can change the working directory the development environment runs on:"
msgstr "你可以改变开发环境运行的工作目录。"

#. type: delimited block -
#: upstream/_guides/gradle-tooling.adoc:183
#, no-wrap
msgid ""
"quarkusDev {\n"
"    workingDir = rootProject.projectDir\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/gradle-tooling.adoc:194
#, no-wrap
msgid ""
"tasks.quarkusDev {\n"
"    workingDir = rootProject.projectDir.toString()\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/gradle-tooling.adoc:200
#, fuzzy
msgid "By default, the `quarkusDev` task uses `compileJava` compiler options. These can be overridden by setting the `compilerArgs` property in the task."
msgstr "默认情况下， `quarkusDev` 任务使用 `compileJava` 编译器选项。这些可以通过在任务中设置 `compilerArgs` 属性而被覆盖。"

#. type: delimited block =
#: upstream/_guides/gradle-tooling.adoc:205
#, fuzzy
msgid "By default, `quarkusDev` sets the debug host to `localhost` (for security reasons). If you need to change this, for example to enable debugging on all hosts, you can use the `-DdebugHost` option like so:"
msgstr "默认情况下， `quarkusDev` 将调试主机设置为 `localhost` （出于安全原因）。如果你需要改变这一点，例如在所有的主机上启用调试，你可以像这样使用 `-DdebugHost` 选项。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:212
#, fuzzy
msgid "The plugin also exposes a `quarkusDev` configuration. Using this configuration to declare a dependency will restrict the usage of that dependency to development mode.  The `quarkusDev` configuration can be used as following:"
msgstr "该插件还暴露了一个 `quarkusDev` 配置。使用这个配置来声明一个依赖关系，将限制该依赖关系在开发模式下的使用。 `quarkusDev` 配置的使用方法如下。"

#. type: delimited block -
#: upstream/_guides/gradle-tooling.adoc:221
#, no-wrap
msgid ""
"dependencies {\n"
"    quarkusDev 'io.quarkus:quarkus-jdbc-h2'\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/gradle-tooling.adoc:232
#, no-wrap
msgid ""
"dependencies {\n"
"    quarkusDev(\"io.quarkus:quarkus-jdbc-h2\")\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/gradle-tooling.adoc:235
#, fuzzy, no-wrap
msgid "Remote Development Mode"
msgstr "远程开发模式"

#. type: delimited block *
#: upstream/_guides/gradle-tooling.adoc:239
#, fuzzy
msgid "It is possible to use development mode remotely, so that you can run Quarkus in a container environment (such as OpenShift)  and have changes made to your local files become immediately visible."
msgstr "可以远程使用开发模式，这样你就可以在容器环境（如OpenShift）中运行Quarkus，并使对本地文件的修改立即可见。"

#. type: delimited block *
#: upstream/_guides/gradle-tooling.adoc:241
#, fuzzy
msgid "This allows you to develop in the same environment you will actually run your app in, and with access to the same services."
msgstr "这允许你在与实际运行你的应用程序相同的环境中进行开发，并且可以访问相同的服务。"

#. type: delimited block *
#: upstream/_guides/gradle-tooling.adoc:243
#, fuzzy
msgid "Do not use this in production. This should only be used in a development environment. You should not run production applications in dev mode."
msgstr "不要在生产中使用这个。这应该只在开发环境中使用。你不应该在开发模式下运行生产应用程序。"

#. type: delimited block *
#: upstream/_guides/gradle-tooling.adoc:245
#, fuzzy
msgid "To do this you must build a mutable application, using the `mutable-jar` format. Set the following properties in `application.properties`:"
msgstr "要做到这一点，你必须建立一个易变的应用程序，使用 `mutable-jar` 格式。在 `application.properties` 中设置以下属性。"

#. type: delimited block -
#: upstream/_guides/gradle-tooling.adoc:251
#, no-wrap
msgid ""
"quarkus.package.type=mutable-jar <1>\n"
"quarkus.live-reload.password=changeit <2>\n"
"quarkus.live-reload.url=http://my.cluster.host.com:8080 <3>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:255
#, fuzzy
msgid "This tells Quarkus to use the mutable-jar format. Mutable applications also include the deployment time parts of Quarkus, so they take up a bit more disk space. If run normally they start just as fast and use the same memory as an immutable application, however they can also be started in dev mode."
msgstr "这告诉Quarkus使用mutable-jar格式。可变的应用程序也包括Quarkus的部署时间部分，所以它们占用了更多的磁盘空间。如果正常运行，它们的启动速度和不可变的应用程序一样快，使用的内存也一样多，不过它们也可以在开发模式下启动。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:256
#, fuzzy
msgid "The password that is used to secure communication between the remote side and the local side."
msgstr "用于保障远程端和本地端之间通信的密码。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:258
#, fuzzy
msgid "The URL that your app is going to be running in dev mode at. This is only needed on the local side, so you may want to leave it out of the properties file and specify it as a system property on the command line."
msgstr "你的应用程序将在开发模式下运行的URL。这只在本地需要，所以你可能想把它从属性文件中删除，并在命令行中作为系统属性指定。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:260
#, fuzzy
msgid "The `mutable-jar` is then built in the same way that a regular Quarkus jar is built, i.e. by issuing:"
msgstr "然后， `mutable-jar` ，其构建方式与普通Quarkus jar的构建方式相同，即通过发布。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:265
#, fuzzy
msgid "Before you start Quarkus on the remote host set the environment variable `QUARKUS_LAUNCH_DEVMODE=true`. If you are on bare metal you can set it via the `export QUARKUS_LAUNCH_DEVMODE=true` command and then run the application with the proper `java -jar ...` command to run the application."
msgstr "在远程主机上启动Quarkus之前，请设置环境变量 `QUARKUS_LAUNCH_DEVMODE=true` 。如果你是在裸机上，你可以通过 `export QUARKUS_LAUNCH_DEVMODE=true` 命令来设置它，然后用适当的 `java -jar …​` 命令来运行应用程序。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:268
#, fuzzy
msgid "If you plan on running the application via Docker, then you'll need to add `-e QUARKUS_LAUNCH_DEVMODE=true` to the `docker run` command.  When the application starts you should now see the following line in the logs: `Profile dev activated. Live Coding activated`."
msgstr "如果你打算通过Docker运行该应用程序，那么你需要在 `docker run` 命令中添加 `-e QUARKUS_LAUNCH_DEVMODE=true` 。当应用程序启动时，你现在应该在日志中看到以下一行。 `Profile dev activated. Live Coding activated` ."

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:273
#, fuzzy
msgid "The remote side does not need to include Maven or any other development tools. The normal `fast-jar` Dockerfile that is generated with a new Quarkus application is all you need. If you are using bare metal launch the Quarkus runner jar, do not attempt to run normal devmode."
msgstr "远程端不需要包括Maven或任何其他开发工具。你只需要在新的Quarkus应用程序中生成正常的 `fast-jar` Docker文件即可。如果你使用裸机启动Quarkus runner jar，不要试图运行正常的devmode。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:275
#, fuzzy
msgid "Now you need to connect your local agent to the remote host, using the `remote-dev` command:"
msgstr "现在你需要使用 `remote-dev` 命令将你的本地代理连接到远程主机。"

#. type: delimited block -
#: upstream/_guides/gradle-tooling.adoc:279
#, no-wrap
msgid "./gradlew quarkusRemoteDev -Dquarkus.live-reload.url=http://my-remote-host:8080\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:283
#, fuzzy
msgid "Now every time you refresh the browser you should see any changes you have made locally immediately visible in the remote app."
msgstr "现在，每当你刷新浏览器时，你应该看到你在本地所做的任何改变在远程应用程序中立即可见。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:285
#, fuzzy
msgid "All the config options are shown below:"
msgstr "所有的配置选项都显示在下面。"

#. type: Title ==
#: upstream/_guides/gradle-tooling.adoc:288
#, fuzzy, no-wrap
msgid "Debugging"
msgstr "调试"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:291
#, fuzzy
msgid "In development mode, Quarkus starts by default with debug mode enabled, listening to port `5005` without suspending the JVM."
msgstr "在开发模式下，Quarkus启动时默认启用了调试模式，监听端口 `5005` ，无需暂停JVM。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:293
#, fuzzy
msgid "This behavior can be changed by giving the `debug` system property one of the following values:"
msgstr "这种行为可以通过赋予 `debug` 系统属性以下值之一来改变。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:295
#, fuzzy
msgid "`false` - the JVM will start with debug mode disabled"
msgstr " `false` - JVM在启动时将禁用调试模式"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:296
#, fuzzy
msgid "`true` - The JVM is started in debug mode and will be listening on port `5005`"
msgstr " `true` - JVM在调试模式下启动，并将监听端口为 `5005` "

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:297
#, fuzzy
msgid "`client` - the JVM will start in client mode and attempt to connect to `localhost:5005`"
msgstr " `client` - JVM将以客户模式启动，并尝试连接到 `localhost:5005` "

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:298
#, fuzzy
msgid "`{port}` - The JVM is started in debug mode and will be listening on `{port}`"
msgstr " `{port}` - JVM在调试模式下启动，并将监听 `{port}` "

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:300
#, fuzzy
msgid "An additional system property `suspend` can be used to suspend the JVM, when launched in debug mode. `suspend` supports the following values:"
msgstr "一个额外的系统属性 `suspend` ，可以用来暂停JVM，当以调试模式启动时。 `suspend` ，支持以下值。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:302
#, fuzzy
msgid "`y` or `true` - The debug mode JVM launch is suspended"
msgstr " `y` 或 - 调试模式的JVM启动被暂停。 `true` "

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:303
#, fuzzy
msgid "`n` or `false` - The debug mode JVM is started without suspending"
msgstr " `n` 或 - 调试模式的JVM被启动而不暂停。 `false` "

#. type: delimited block =
#: upstream/_guides/gradle-tooling.adoc:307
#, fuzzy
msgid "You can also run a Quarkus application in debug mode with a suspended JVM using:"
msgstr "你也可以在调试模式下使用暂停的JVM运行Quarkus应用程序。"

#. type: delimited block =
#: upstream/_guides/gradle-tooling.adoc:313
#, fuzzy
msgid "Then, attach your debugger to `localhost:5005`."
msgstr "然后，将你的调试器连接到 `localhost:5005` 。"

#. type: Title ==
#: upstream/_guides/gradle-tooling.adoc:315
#, fuzzy, no-wrap
msgid "Import in your IDE"
msgstr "在你的IDE中导入"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:319
#, fuzzy
msgid "Once you have a <<project-creation, project generated>>, you can import it in your favorite IDE.  The only requirement is the ability to import a Gradle project."
msgstr "一旦你 link:#project-creation[生成] 了一个 link:#project-creation[项目] ，你就可以在你喜欢的IDE中导入它。唯一的要求是能够导入一个Gradle项目。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:321
#, fuzzy, no-wrap
msgid "**Eclipse**\n"
msgstr " *日蚀* "

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:326
#, fuzzy
msgid "In Eclipse, click on: `File -> Import`.  In the wizard, select: `Gradle -> Existing Gradle Project`.  On the next screen, select the root location of the project.  The next screen list the found modules; select the generated project and click on `Finish`. Done!"
msgstr "在Eclipse中，点击： `File → Import` 。在向导中，选择： `Gradle → Existing Gradle Project` 。在下一个屏幕上，选择项目的根位置。下一个屏幕列出了找到的模块；选择生成的项目并点击 `Finish` 。完成了!"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:328
#, fuzzy
msgid "In a separated terminal, run:"
msgstr "在一个分离的终端，运行。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:332
#, fuzzy
msgid "and enjoy a highly productive environment."
msgstr "并享受一个高生产力的环境。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:334
#, fuzzy, no-wrap
msgid "**IntelliJ**\n"
msgstr " *兴发xf187在线娱乐* "

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:336
#, fuzzy
msgid "In IntelliJ:"
msgstr "在IntelliJ:"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:338
#, fuzzy
msgid "From inside IntelliJ select `File -> New -> Project From Existing Sources...` or, if you are on the welcome dialog, select `Import project`."
msgstr "在IntelliJ内部选择 `File → New → Project From Existing Sources…​` ，或者，如果你在欢迎对话框中，选择 `Import project` 。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:339
#: upstream/_guides/gradle-tooling.adoc:355
#, fuzzy
msgid "Select the project root"
msgstr "选择项目根部"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:340
#, fuzzy
msgid "Select `Import project from external model` and `Gradle`"
msgstr "选择 `Import project from external model` 和 `Gradle` "

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:341
#, fuzzy
msgid "Next a few times (review the different options if needed)"
msgstr "接下来几次（如果需要的话，审查不同的选项）"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:342
#, fuzzy
msgid "On the last screen click on Finish"
msgstr "在最后一个屏幕上点击 \"完成\"。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:344
#, fuzzy
msgid "In a separated terminal or in the embedded terminal, run:"
msgstr "在一个分离的终端或嵌入式终端中，运行。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:348
#: upstream/_guides/gradle-tooling.adoc:362
#, fuzzy
msgid "Enjoy!"
msgstr "好好享受吧!"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:350
#, fuzzy, no-wrap
msgid "**Apache NetBeans**\n"
msgstr " *Apache NetBeans* "

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:352
#, fuzzy
msgid "In NetBeans:"
msgstr "在NetBeans中。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:354
#, fuzzy
msgid "Select `File -> Open Project`"
msgstr "选择 `File → Open Project` "

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:356
#, fuzzy
msgid "Click on `Open Project`"
msgstr "点击进入 `Open Project` "

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:358
#, fuzzy
msgid "In a separated terminal or the embedded terminal, go to the project root and run:"
msgstr "在一个分离的终端或嵌入式终端中，进入项目根目录并运行。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:364
#, fuzzy, no-wrap
msgid "**Visual Studio Code**\n"
msgstr " *Visual Studio代码* "

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:366
#, fuzzy
msgid "Open the project directory in VS Code. If you have installed the Java Extension Pack (grouping a set of Java extensions), the project is loaded as a Gradle project."
msgstr "在VS Code中打开项目目录。如果你已经安装了Java扩展包（将一组Java扩展分组），该项目将作为Gradle项目加载。"

#. type: Title ==
#: upstream/_guides/gradle-tooling.adoc:367
#, fuzzy, no-wrap
msgid "Downloading dependencies for offline development and testing"
msgstr "下载用于离线开发和测试的依赖项"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:372
#, fuzzy
msgid "Quarkus extension dependencies are divided into the runtime extension dependencies that end up on the application runtime classpath and the deployment (or build time) extension dependencies that are resolved by Quarkus only at application build time to create the build classpath. Application developers are expected to express dependencies only on the runtime artifacts of Quarkus extensions."
msgstr "Quarkus扩展的依赖性分为运行时扩展的依赖性和部署（或构建时）扩展的依赖性，后者仅在应用程序构建时由Quarkus解决，以创建构建classpath。应用程序开发人员应该只对Quarkus扩展的运行时工件表达依赖性。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:374
#, fuzzy
msgid "To enable the use-case of building and testing a Quarkus application offline, the plugin includes the `quarkusGoOffline` task that could be called from the command line like this:"
msgstr "为了实现离线构建和测试Quarkus应用程序的用途，该插件包括 `quarkusGoOffline` ，可以像这样从命令行调用。"

#. type: delimited block -
#: upstream/_guides/gradle-tooling.adoc:378
#, no-wrap
msgid "./gradlew quarkusGoOffline\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:382
#, fuzzy
msgid "This task will resolve all the runtime, build time, test and dev mode dependencies of the application to the Gradle cache.  Once executed, you will be able to safely run quarkus task with `--offline` flag."
msgstr "这个任务将把应用程序的所有运行时、构建时、测试和开发模式的依赖关系解析到Gradle缓存中。一旦执行，你就可以用 `--offline` 标志安全地运行quarkus任务。"

#. type: Title ==
#: upstream/_guides/gradle-tooling.adoc:383
#, fuzzy, no-wrap
msgid "Building a native executable"
msgstr "构建一个本地可执行文件"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:386
#, fuzzy
msgid "Native executables make Quarkus applications ideal for containers and serverless workloads."
msgstr "原生可执行文件使Quarkus应用程序成为容器和无服务器工作负载的理想选择。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:388
#, fuzzy
msgid "Make sure to have `GRAALVM_HOME` configured and pointing to GraalVM version {graalvm-version} (Make sure to use a Java 11 version of GraalVM)."
msgstr "确保配置了 `GRAALVM_HOME` ，并指向GraalVM版本{graalvm-version}（确保使用Java 11版本的GraalVM）。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:390
#, fuzzy
msgid "Create a native executable using:"
msgstr "使用以下方法创建一个本地可执行文件。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:394
#, fuzzy
msgid "A native executable will be present in `build/`."
msgstr "一个本地可执行文件将出现在 `build/` 。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:397
#, fuzzy
msgid "Native related properties can either be added in `application.properties` file, as command line arguments or in the `quarkusBuild` task.  Configuring the `quarkusBuild` task can be done as following:"
msgstr "与本地相关的属性可以在 `application.properties` 文件中，作为命令行参数或在 `quarkusBuild` 任务中添加。配置 `quarkusBuild` 任务可以按以下方式进行。"

#. type: delimited block -
#: upstream/_guides/gradle-tooling.adoc:409
#, no-wrap
msgid ""
"quarkusBuild {\n"
"    nativeArgs {\n"
"        containerBuild = true <1>\n"
"        builderImage = \"quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor}\" <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:412
#: upstream/_guides/gradle-tooling.adoc:429
#, fuzzy
msgid "Set `quarkus.native.container-build` property to `true`"
msgstr "设置 `quarkus.native.container-build` 属性为 `true` "

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:413
#: upstream/_guides/gradle-tooling.adoc:430
#, fuzzy
msgid "Set `quarkus.native.builder-image` property to `quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor}`"
msgstr "设置 `quarkus.native.builder-image` 属性为 `quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor}` "

#. type: delimited block -
#: upstream/_guides/gradle-tooling.adoc:426
#, no-wrap
msgid ""
"tasks.quarkusBuild {\n"
"    nativeArgs {\n"
"        \"container-build\" to true <1>\n"
"        \"builder-image\" to \"quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor}\" <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/gradle-tooling.adoc:437
#, fuzzy
msgid "When using the Gradle Groovy DSL, property keys must follow lower camel case notation.  e.g. `container-build` is not valid, and should be replaced by `containerBuild`.  This limitation does not apply to the Gradle Kotlin DSL."
msgstr "当使用Gradle Groovy DSL时，属性键必须遵循小写驼峰符号。例如， `container-build` 是无效的，应该用 `containerBuild` 。这一限制并不适用于Gradle Kotlin DSL。"

#. type: Title ===
#: upstream/_guides/gradle-tooling.adoc:439
#, fuzzy, no-wrap
msgid "Build a container friendly executable"
msgstr "构建一个对容器友好的可执行文件"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:443
#, fuzzy
msgid "The native executable will be specific to your operating system.  To create an executable that will run in a container, use the following:"
msgstr "本机可执行文件将特定于你的操作系统。要创建一个将在容器中运行的可执行文件，请使用以下方法。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:449
#, fuzzy
msgid "The produced executable will be a 64 bit Linux executable, so depending on your operating system it may no longer be runnable.  However, it's not an issue as we are going to copy it to a Docker container.  Note that in this case the build itself runs in a Docker container too, so you don't need to have GraalVM installed locally."
msgstr "产生的可执行文件将是一个64位的Linux可执行文件，所以根据你的操作系统，它可能不再是可运行的。然而，这不是一个问题，因为我们要把它复制到Docker容器中。请注意，在这种情况下，构建本身也在Docker容器中运行，所以你不需要在本地安装GralVM。"

#. type: delimited block =
#: upstream/_guides/gradle-tooling.adoc:453
#, fuzzy
msgid "By default, the native executable will be generated using the `quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor}` Docker image."
msgstr "默认情况下，本地可执行文件将使用 `quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor}` Docker镜像生成。"

#. type: delimited block =
#: upstream/_guides/gradle-tooling.adoc:456
#, fuzzy
msgid "If you want to build a native executable with a different Docker image (for instance to use a different GraalVM version), use the `-Dquarkus.native.builder-image=<image name>` build argument."
msgstr "如果你想用不同的Docker镜像构建一个本地可执行文件（例如使用不同的GraalVM版本），请使用 `-Dquarkus.native.builder-image=<image name>` build参数。"

#. type: delimited block =
#: upstream/_guides/gradle-tooling.adoc:459
#, fuzzy
msgid "The list of the available Docker images can be found on https://quay.io/repository/quarkus/ubi-quarkus-native-image?tab=tags[quay.io].  Be aware that a given Quarkus version might not be compatible with all the images available."
msgstr "可用的Docker镜像的列表可以在 link:https://quay.io/repository/quarkus/ubi-quarkus-native-image?tab=tags[quay.io] 上找到。请注意，一个特定的Quarkus版本可能不兼容所有可用的镜像。"

#. type: Title ==
#: upstream/_guides/gradle-tooling.adoc:461
#, fuzzy, no-wrap
msgid "Running native tests"
msgstr "运行本地测试"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:464
#, fuzzy
msgid "Run the native tests using:"
msgstr "运行本地测试，使用。"

#. type: delimited block -
#: upstream/_guides/gradle-tooling.adoc:468
#, no-wrap
msgid "./gradlew testNative\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:471
#, fuzzy
msgid "This task depends on `quarkusBuild`, so it will generate the native image before running the tests."
msgstr "这个任务依赖于 `quarkusBuild` ，所以它将在运行测试之前生成本地图像。"

#. type: delimited block =
#: upstream/_guides/gradle-tooling.adoc:475
#, fuzzy
msgid "By default, the `native-test` source set is based on `main` and `test` source sets. It is possible to add an extra source set. For example, if your integration tests are located in an `integrationTest` source set, you can specify it as:"
msgstr "默认情况下， `native-test` 源集是基于 `main` 和 `test` 源集。可以添加一个额外的源集。例如，如果你的集成测试位于 `integrationTest` 源集中，你可以指定它为。"

#. type: delimited block -
#: upstream/_guides/gradle-tooling.adoc:486
#, no-wrap
msgid ""
"quarkus {\n"
"    sourceSets {\n"
"        extraNativeTest = sourceSets.integrationTest\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/gradle-tooling.adoc:499
#, no-wrap
msgid ""
"quarkus {\n"
"    sourceSets {\n"
"        setExtraNativeTest(sourceSets[\"integrationTest\"])\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/gradle-tooling.adoc:504
#, fuzzy, no-wrap
msgid "Running integration tests"
msgstr "运行集成测试"

#. type: delimited block =
#: upstream/_guides/gradle-tooling.adoc:508
#, fuzzy
msgid "Quarkus integration tests (annotated with `@QuarkusIntegrationTest`) will run on the artifact produced by Quarkus.  Those tests can be placed in a `src/integrationTest/java` directory and executed using:"
msgstr "Quarkus集成测试（用 `@QuarkusIntegrationTest` 注释）将在Quarkus产生的工件上运行。这些测试可以放在 `src/integrationTest/java` 目录中，并通过以下方式执行。"

#. type: delimited block -
#: upstream/_guides/gradle-tooling.adoc:512
#, no-wrap
msgid "./gradlew quarkusIntTest\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:515
#, fuzzy
msgid "This task depends on both `check` and `quarkusBuild` tasks. The final artifact will be produced before running tests."
msgstr "这个任务依赖于 `check` 和 `quarkusBuild` 两个任务。最后的工件将在运行测试之前产生。"

#. type: Title ==
#: upstream/_guides/gradle-tooling.adoc:516
#, fuzzy, no-wrap
msgid "Using fast-jar"
msgstr "使用快速罐"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:519
#, fuzzy
msgid "`fast-jar` is now the default quarkus package type. The result of `./gradlew build` command is a new directory under `build` named `quarkus-app`."
msgstr " `fast-jar` 现在是quarkus软件包的默认类型。 命令的结果是在 下有一个新的目录，名为 。 `./gradlew build` `build` `quarkus-app` "

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:521
#, fuzzy
msgid "You can run the application using: `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr "你可以使用以下方式运行应用程序： `java -jar target/quarkus-app/quarkus-run.jar` 。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:524
#, fuzzy
msgid "In order to successfully run the produced jar, you need to have the entire contents of the `quarkus-app` directory. If any of the files are missing, the application will not start or might not function correctly."
msgstr "为了成功运行所制作的jar，你需要拥有 `quarkus-app` 目录中的全部内容。如果缺少任何文件，应用程序将无法启动或可能无法正常运行。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:528
#, fuzzy
msgid "The `fast-jar` packaging results in creating an artifact that starts a little faster and consumes slightly less memory than a legacy Quarkus jar because it has indexed information about which dependency jar contains classes and resources. It can thus avoid the lookup into potentially every jar on the classpath that the legacy jar necessitates, when loading a class or resource."
msgstr " `fast-jar` 包装的结果是创建一个工件，它的启动速度比传统的Quarkus jar快一点，消耗的内存也少一点，因为它有关于哪个依赖jar包含类和资源的索引信息。因此，当加载一个类或资源时，它可以避免对classpath上的每一个jar进行查找，而传统的jar则需要这样做。"

#. type: Title ==
#: upstream/_guides/gradle-tooling.adoc:529
#, fuzzy, no-wrap
msgid "Building Uber-Jars"
msgstr "建造Uber-Jars"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:532
#, fuzzy
msgid "Quarkus Gradle plugin supports the generation of Uber-Jars by specifying a `quarkus.package.type` argument as follows:"
msgstr "Quarkus Gradle插件支持通过指定一个 `quarkus.package.type` 参数来生成Uber-Jars，如下所示。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:538
#, fuzzy
msgid "When building an Uber-Jar you can specify entries that you want to exclude from the generated jar by using the `--ignored-entry` argument:"
msgstr "当构建Uber-Jar时，你可以通过使用 `--ignored-entry` 参数指定你想从生成的jar中排除的条目。"

#. type: delimited block -
#: upstream/_guides/gradle-tooling.adoc:542
#, no-wrap
msgid "./gradlew quarkusBuild -Dquarkus.package.type=uber-jar --ignored-entry=META-INF/file1.txt\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:545
#, fuzzy
msgid "The entries are relative to the root of the generated Uber-Jar. You can specify multiple entries by adding extra `--ignored-entry` arguments."
msgstr "这些条目是相对于生成的Uber-Jar的根的。你可以通过添加额外的 `--ignored-entry` 参数来指定多个条目。"

#. type: Title ===
#: upstream/_guides/gradle-tooling.adoc:547
#, fuzzy, no-wrap
msgid "Working with multi-module projects"
msgstr "与多模块项目一起工作"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:550
#, fuzzy
msgid "By default, Quarkus will not discover CDI beans inside another module."
msgstr "默认情况下，Quarkus不会发现另一个模块中的CDI Bean。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:553
#, fuzzy
msgid "The best way to enable CDI bean discovery for a module in a multi-module project would be to include a `META-INF/beans.xml` file, unless it is the main application module already configured with the quarkus-maven-plugin, in which case it will indexed automatically."
msgstr "为多模块项目中的某个模块启用CDI Bean发现的最佳方式是包含一个 `META-INF/beans.xml` 文件，除非该模块是已经配置了quarkus-maven-plugin的主要应用模块，在这种情况下它会自动被索引。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:555
#, fuzzy
msgid "Alternatively, there is some unofficial link:https://plugins.gradle.org/search?term=jandex[Gradle Jandex plugins] that can be used instead of the `META-INF/beans.xml` file."
msgstr "另外，还有一些非官方的 link:https://plugins.gradle.org/search?term=jandex[Gradle Jandex插件] ，可以用来代替 `META-INF/beans.xml` 。"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:557
#, fuzzy
msgid "More information on this topic can be found on the xref:cdi-reference.adoc#bean_discovery[Bean Discovery] section of the CDI guide."
msgstr "关于这个主题的更多信息可以在CDI指南的 link:cdi-reference.html#bean_discovery[Bean Discovery] 部分找到。"

#. type: Title ==
#: upstream/_guides/gradle-tooling.adoc:559
#, fuzzy, no-wrap
msgid "Publishing your application"
msgstr "发布你的申请"

#. type: Plain text
#: upstream/_guides/gradle-tooling.adoc:564
msgid "In order to make sure the right dependency versions are being used by Gradle, the BOM is declared as an `enforcedPlatform` in your build file.  By default, the `maven-publish` plugin will prevent you from publishing your application due to this `enforcedPlatform`.  This validation can be skipped by adding the following configuration in your build file:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/gradle-tooling.adoc:573
#, no-wrap
msgid ""
"tasks.withType(GenerateModuleMetadata).configureEach {\n"
"    suppressedValidationErrors.add('enforced-platform')\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/gradle-tooling.adoc:584
#, no-wrap
msgid ""
"tasks.withType<GenerateModuleMetadata>().configureEach {\n"
"    suppressedValidationErrors.add(\"enforced-platform\")\n"
"}\n"
msgstr ""
