# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-25 13:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: _guides/gradle-tooling.adoc
#, fuzzy, no-wrap
msgid "Quarkus and Gradle"
msgstr "用Gradle构建Quarkus应用程序"

#. type: Plain text
#: _guides/gradle-tooling.adoc
msgid "Use Gradle to create a new project, add or remove extensions, launch development mode, debug your application, and build your application into a jar, native executable, or container-friendly executable. Import your project into your favorite IDE using Gradle project metadata."
msgstr ""

#. type: Title ==
#: _guides/gradle-tooling.adoc
#, fuzzy, no-wrap
msgid "Creating a new project"
msgstr "创建一个新的项目"

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "To scaffold a Gradle project you can either use the xref:cli-tooling.adoc[Quarkus CLI] or the Quarkus Maven plugin:"
msgstr "要为Gradle项目搭建脚手架，你可以使用 link:cli-tooling.html[Quarkus CLI] 或Quarkus Maven插件。"

#. type: Block title
#: _guides/gradle-tooling.adoc
#, fuzzy, no-wrap
msgid "CLI"
msgstr "CLI"

#. type: Plain text
#: _guides/gradle-tooling.adoc
msgid "_For more information about how to install the Quarkus CLI and use it, please refer to xref:cli-tooling.adoc[the Quarkus CLI guide]._"
msgstr "_关于如何安装并使用Quarkus CLI的更多信息，请参考xref:cli-tooling.adoc[Quarkus CLI指南]。_"

#. type: Block title
#: _guides/gradle-tooling.adoc
#, no-wrap
msgid "Maven"
msgstr "Maven"

#: _guides/gradle-tooling.adoc
msgid ""
"If you just launch `mvn {quarkus-platform-groupid}:quarkus-maven-plugin:{quarkus-version}:create` the Maven plugin asks\n"
"for user inputs. You can disable this interactive mode (and use default values) by passing `-B` to the Maven command."
msgstr ""

#. type: delimited block *
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "If you prefer using the Kotlin DSL, use `gradle-kotlin-dsl` instead of `gradle`."
msgstr "如果你喜欢使用Kotlin DSL，请使用 `gradle-kotlin-dsl` 而不是 `gradle` 。"

#. type: delimited block =
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "Quarkus project scaffolding automatically installs the Gradle wrapper (`./gradlew`) in your project."
msgstr "Quarkus项目脚手架会自动在你的项目中安装Gradle包装器（ `./gradlew` ）。"

#. type: delimited block =
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "If you prefer to use a standalone Gradle installation, please use Gradle {gradle-version}."
msgstr "如果你喜欢使用独立的Gradle安装，请使用Gradle {gradle-version}。"

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "The project is generated in a directory named after the passed artifactId."
msgstr "项目被生成在一个以传递的artifactId命名的目录中。"

#: _guides/gradle-tooling.adoc
msgid ""
"A pair of Dockerfiles for native and JVM modes are also generated in `src/main/docker`.\n"
"Instructions to build the image and run the container are written in those Dockerfiles."
msgstr ""

#. type: Title ===
#: _guides/gradle-tooling.adoc
#, fuzzy, no-wrap
msgid "Custom test configuration profile in JVM mode"
msgstr "JVM模式下的自定义测试配置文件"

#: _guides/gradle-tooling.adoc
msgid ""
"By default, Quarkus tests in JVM mode are run using the `test` configuration profile. If you are not familiar with Quarkus\n"
"configuration profiles, everything you need to know is explained in the\n"
"xref:config-reference.adoc#profiles[Configuration Profiles Documentation]."
msgstr ""

#: _guides/gradle-tooling.adoc
msgid ""
"It is however possible to use a custom configuration profile for your tests with the Gradle build configuration shown below.\n"
"This can be useful if you need for example to run some tests using a specific database which is not your default testing\n"
"database."
msgstr ""

#. type: Block title
#: _guides/gradle-tooling.adoc
#, fuzzy, no-wrap
msgid "Groovy DSL"
msgstr "协作式DSL（Groovy DSL"

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "The `foo` configuration profile will be used to run the tests."
msgstr " `foo` 配置文件将被用于运行测试。"

#. type: Block title
#: _guides/gradle-tooling.adoc
#, fuzzy, no-wrap
msgid "Kotlin DSL"
msgstr "Kotlin DSL"

#: _guides/gradle-tooling.adoc
msgid ""
"It is not possible to use a custom test configuration profile in native mode for now. Native tests are always run using the\n"
"`prod` profile."
msgstr ""

#. type: Title ==
#: _guides/gradle-tooling.adoc
#, fuzzy, no-wrap
msgid "Dealing with extensions"
msgstr "处理延期问题"

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "From inside a Quarkus project, you can obtain a list of the available extensions with:"
msgstr "在Quarkus项目中，你可以通过以下方式获得一个可用的扩展列表。"

#. type: Block title
#: _guides/gradle-tooling.adoc
#, no-wrap
msgid "Gradle"
msgstr "Gradle"

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "You can enable an extension using:"
msgstr "你可以用以下方法启用一个扩展。"

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "Extensions are passed using a comma-separated list."
msgstr "使用逗号分隔的列表传递扩展。"

#: _guides/gradle-tooling.adoc
msgid ""
"The extension name is the GAV name of the extension: e.g. `io.quarkus:quarkus-agroal`.\n"
"But you can pass a partial name and Quarkus will do its best to find the right extension.\n"
"For example, `agroal`, `Agroal` or `agro`  will expand to `io.quarkus:quarkus-agroal`.\n"
"If no extension is found or if more than one extensions match, you will see a red check mark  ❌ in the command result."
msgstr ""

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "You can install all extensions which match a globbing pattern:"
msgstr "你可以安装所有符合globbing模式的扩展。"

#. type: Title ==
#: _guides/gradle-tooling.adoc
#, fuzzy, no-wrap
msgid "Development mode"
msgstr "发展模式"

#: _guides/gradle-tooling.adoc
msgid ""
"Quarkus comes with a built-in development mode.\n"
"You can start it with:"
msgstr ""

#: _guides/gradle-tooling.adoc
msgid ""
"Note that if you run it this way the continuous testing experience will not be as nice, as gradle runs as a daemon\n"
"Quarkus can't draw the 'pretty' test output so falls back to just logging the output."
msgstr ""

#: _guides/gradle-tooling.adoc
msgid ""
"You can then update the application sources, resources and configurations.\n"
"The changes are automatically reflected in your running application.\n"
"This is great to do development spanning UI and database as you see changes reflected immediately."
msgstr ""

#: _guides/gradle-tooling.adoc
msgid ""
"`quarkusDev` enables hot deployment with background compilation, which means that when you modify\n"
"your Java files or your resource files and refresh your browser these changes will automatically take effect.\n"
"This works too for resource files like the configuration property file.\n"
"The act of refreshing the browser triggers a scan of the workspace, and if any changes are detected the\n"
"Java files are compiled, and the application is redeployed, then your request is serviced by the\n"
"redeployed application. If there are any issues with compilation or deployment an error page will let you know."
msgstr ""

#. type: Plain text
#: _guides/gradle-tooling.adoc
msgid "Hit `CTRL+C` to stop the application."
msgstr "使用 `CTRL+C` 来停止应用程序。"

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "You can change the working directory the development environment runs on:"
msgstr "你可以改变开发环境运行的工作目录。"

#. type: delimited block =
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "By default, the `quarkusDev` task uses `compileJava` compiler options. These can be overridden by setting the `compilerArgs` property in the task."
msgstr "默认情况下， `quarkusDev` 任务使用 `compileJava` 编译器选项。这些可以通过在任务中设置 `compilerArgs` 属性而被覆盖。"

#. type: delimited block =
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "By default, `quarkusDev` sets the debug host to `localhost` (for security reasons). If you need to change this, for example to enable debugging on all hosts, you can use the `-DdebugHost` option like so:"
msgstr "默认情况下， `quarkusDev` 将调试主机设置为 `localhost` （出于安全原因）。如果你需要改变这一点，例如在所有的主机上启用调试，你可以像这样使用 `-DdebugHost` 选项。"

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "You also can add environment variables to the development environment:"
msgstr "你可以改变开发环境运行的工作目录。"

#: _guides/gradle-tooling.adoc
msgid ""
"The plugin also exposes a `quarkusDev` configuration. Using this configuration to declare a dependency will restrict the usage of that dependency to development mode.\n"
"The `quarkusDev` configuration can be used as following:"
msgstr ""

#. type: Title ===
#: _guides/gradle-tooling.adoc
#, fuzzy, no-wrap
msgid "Remote Development Mode"
msgstr "远程开发模式"

#: _guides/gradle-tooling.adoc
msgid ""
"It is possible to use development mode remotely, so that you can run Quarkus in a container environment (such as OpenShift)\n"
"and have changes made to your local files become immediately visible."
msgstr ""

#. type: delimited block *
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "This allows you to develop in the same environment you will actually run your app in, and with access to the same services."
msgstr "这允许你在与实际运行你的应用程序相同的环境中进行开发，并且可以访问相同的服务。"

#. type: delimited block *
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "Do not use this in production. This should only be used in a development environment. You should not run production applications in dev mode."
msgstr "不要在生产中使用这个。这应该只在开发环境中使用。你不应该在开发模式下运行生产应用程序。"

#. type: delimited block *
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "To do this you must build a mutable application, using the `mutable-jar` format. Set the following properties in `application.properties`:"
msgstr "要做到这一点，你必须建立一个易变的应用程序，使用 `mutable-jar` 格式。在 `application.properties` 中设置以下属性。"

#: _guides/gradle-tooling.adoc
msgid ""
"This tells Quarkus to use the mutable-jar format. Mutable applications also include the deployment time parts of Quarkus,\n"
"so they take up a bit more disk space. If run normally they start just as fast and use the same memory as an immutable application,\n"
"however they can also be started in dev mode."
msgstr ""

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "The password that is used to secure communication between the remote side and the local side."
msgstr "用于保障远程端和本地端之间通信的密码。"

#: _guides/gradle-tooling.adoc
msgid ""
"The URL that your app is going to be running in dev mode at. This is only needed on the local side, so you\n"
"may want to leave it out of the properties file and specify it as a system property on the command line."
msgstr ""

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "The `mutable-jar` is then built in the same way that a regular Quarkus jar is built, i.e. by issuing:"
msgstr "然后， `mutable-jar` ，其构建方式与普通Quarkus jar的构建方式相同，即通过发布。"

#: _guides/gradle-tooling.adoc
msgid ""
"Before you start Quarkus on the remote host set the environment variable `QUARKUS_LAUNCH_DEVMODE=true`. If you are\n"
"on bare metal you can set it via the `export QUARKUS_LAUNCH_DEVMODE=true` command and then run the application with the proper `java -jar ...` command to run the application."
msgstr ""

#: _guides/gradle-tooling.adoc
msgid ""
"If you plan on running the application via Docker, then you'll need to add `-e QUARKUS_LAUNCH_DEVMODE=true` to the `docker run` command.\n"
"When the application starts you should now see the following line in the logs: `Profile dev activated. Live Coding activated`."
msgstr ""

#: _guides/gradle-tooling.adoc
msgid ""
"The remote side does not need to include Maven or any other development tools. The normal `fast-jar` Dockerfile\n"
"that is generated with a new Quarkus application is all you need. If you are using bare metal launch the Quarkus runner\n"
"jar, do not attempt to run normal dev mode."
msgstr ""

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "Now you need to connect your local agent to the remote host, using the `remote-dev` command:"
msgstr "现在你需要使用 `remote-dev` 命令将你的本地代理连接到远程主机。"

#: _guides/gradle-tooling.adoc
msgid ""
"Now every time you refresh the browser you should see any changes you have made locally immediately visible in the remote\n"
"app."
msgstr ""

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "All the config options are shown below:"
msgstr "所有的配置选项都显示在下面。"

#. type: Title ==
#: _guides/gradle-tooling.adoc
#, fuzzy, no-wrap
msgid "Debugging"
msgstr "调试"

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "In development mode, Quarkus starts by default with debug mode enabled, listening to port `5005` without suspending the JVM."
msgstr "在开发模式下，Quarkus启动时默认启用了调试模式，监听端口 `5005` ，无需暂停JVM。"

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "This behavior can be changed by giving the `debug` system property one of the following values:"
msgstr "这种行为可以通过赋予 `debug` 系统属性以下值之一来改变。"

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "`false` - the JVM will start with debug mode disabled"
msgstr " `false` - JVM在启动时将禁用调试模式"

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "`true` - The JVM is started in debug mode and will be listening on port `5005`"
msgstr " `true` - JVM在调试模式下启动，并将监听端口为 `5005` "

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "`client` - the JVM will start in client mode and attempt to connect to `localhost:5005`"
msgstr " `client` - JVM将以客户模式启动，并尝试连接到 `localhost:5005` "

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "`{port}` - The JVM is started in debug mode and will be listening on `{port}`"
msgstr " `{port}` - JVM在调试模式下启动，并将监听 `{port}` "

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "An additional system property `suspend` can be used to suspend the JVM, when launched in debug mode. `suspend` supports the following values:"
msgstr "一个额外的系统属性 `suspend` ，可以用来暂停JVM，当以调试模式启动时。 `suspend` ，支持以下值。"

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "`y` or `true` - The debug mode JVM launch is suspended"
msgstr " `y` 或 - 调试模式的JVM启动被暂停。 `true` "

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "`n` or `false` - The debug mode JVM is started without suspending"
msgstr " `n` 或 - 调试模式的JVM被启动而不暂停。 `false` "

#. type: delimited block =
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "You can also run a Quarkus application in debug mode with a suspended JVM using:"
msgstr "你也可以在调试模式下使用暂停的JVM运行Quarkus应用程序。"

#. type: delimited block =
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "Then, attach your debugger to `localhost:5005`."
msgstr "然后，将你的调试器连接到 `localhost:5005` 。"

#. type: Title ==
#: _guides/gradle-tooling.adoc
#, fuzzy, no-wrap
msgid "Import in your IDE"
msgstr "在你的IDE中导入"

#: _guides/gradle-tooling.adoc
msgid ""
"Once you have a xref:project-creation[project generated], you can import it in your favorite IDE.\n"
"The only requirement is the ability to import a Gradle project."
msgstr ""

#: _guides/gradle-tooling.adoc
msgid "**Eclipse**"
msgstr ""

#: _guides/gradle-tooling.adoc
msgid ""
"In Eclipse, click on: `File -> Import`.\n"
"In the wizard, select: `Gradle -> Existing Gradle Project`.\n"
"On the next screen, select the root location of the project.\n"
"The next screen list the found modules; select the generated project and click on `Finish`. Done!"
msgstr ""

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "In a separated terminal, run:"
msgstr "在一个分离的终端，运行。"

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "and enjoy a highly productive environment."
msgstr "并享受一个高生产力的环境。"

#: _guides/gradle-tooling.adoc
msgid "**IntelliJ IDEA**"
msgstr ""

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "In IntelliJ IDEA:"
msgstr "在IntelliJ:"

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "From inside IntelliJ IDEA select `File -> New -> Project From Existing Sources...` or, if you are on the welcome dialog, select `Import project`."
msgstr "在IntelliJ内部选择 `File → New → Project From Existing Sources…​` ，或者，如果你在欢迎对话框中，选择 `Import project` 。"

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "Select the project root"
msgstr "选择项目根部"

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "Select `Import project from external model` and `Gradle`"
msgstr "选择 `Import project from external model` 和 `Gradle` "

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "Next a few times (review the different options if needed)"
msgstr "接下来几次（如果需要的话，审查不同的选项）"

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "On the last screen click on Finish"
msgstr "在最后一个屏幕上点击 \"完成\"。"

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "In a separated terminal or in the embedded terminal, run:"
msgstr "在一个分离的终端或嵌入式终端中，运行。"

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "Enjoy!"
msgstr "好好享受吧!"

#: _guides/gradle-tooling.adoc
msgid "**Apache NetBeans**"
msgstr ""

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "In NetBeans:"
msgstr "在NetBeans中。"

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "Select `File -> Open Project`"
msgstr "选择 `File → Open Project` "

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "Click on `Open Project`"
msgstr "点击进入 `Open Project` "

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "In a separated terminal or the embedded terminal, go to the project root and run:"
msgstr "在一个分离的终端或嵌入式终端中，进入项目根目录并运行。"

#: _guides/gradle-tooling.adoc
msgid "**Visual Studio Code**"
msgstr ""

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "Open the project directory in VS Code. If you have installed the Java Extension Pack (grouping a set of Java extensions), the project is loaded as a Gradle project."
msgstr "在VS Code中打开项目目录。如果你已经安装了Java扩展包（将一组Java扩展分组），该项目将作为Gradle项目加载。"

#. type: Title ==
#: _guides/gradle-tooling.adoc
#, fuzzy, no-wrap
msgid "Downloading dependencies for offline development and testing"
msgstr "下载用于离线开发和测试的依赖项"

#: _guides/gradle-tooling.adoc
msgid ""
"Quarkus extension dependencies are divided into the runtime extension dependencies that end up on the application runtime\n"
"classpath and the deployment (or build time) extension dependencies that are resolved by Quarkus only at application build time to create\n"
"the build classpath. Application developers are expected to express dependencies only on the runtime artifacts of Quarkus extensions."
msgstr ""

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "To enable the use-case of building and testing a Quarkus application offline, the plugin includes the `quarkusGoOffline` task that could be called from the command line like this:"
msgstr "为了实现离线构建和测试Quarkus应用程序的用途，该插件包括 `quarkusGoOffline` ，可以像这样从命令行调用。"

#: _guides/gradle-tooling.adoc
msgid ""
"This task will resolve all the runtime, build time, test and dev mode dependencies of the application to the Gradle cache.\n"
"Once executed, you will be able to safely run quarkus task with `--offline` flag."
msgstr ""

#. type: Title ==
#: _guides/gradle-tooling.adoc
#, no-wrap
msgid "Building a native executable"
msgstr "构建一个本地可执行文件"

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "Native executables make Quarkus applications ideal for containers and serverless workloads."
msgstr "原生可执行文件使Quarkus应用程序成为容器和无服务器工作负载的理想选择。"

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "Make sure to have `GRAALVM_HOME` configured and pointing to the latest release of GraalVM {graalvm-version}."
msgstr "确保配置了 `GRAALVM_HOME` ，并指向GraalVM版本{graalvm-version}（确保使用Java 11版本的GraalVM）。"

#. type: Plain text
#: _guides/gradle-tooling.adoc
msgid "Create a native executable using:"
msgstr "使用以下方法创建一个原生可执行文件："

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "A native executable will be present in `build/`."
msgstr "一个本地可执行文件将出现在 `build/` 。"

#: _guides/gradle-tooling.adoc
msgid ""
"Native related properties can either be added in `application.properties` file, as command line arguments or in the `quarkusBuild` task.\n"
"Configuring the `quarkusBuild` task can be done as following:"
msgstr ""

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "Set `quarkus.native.container-build` property to `true`"
msgstr "设置 `quarkus.native.container-build` 属性为 `true` "

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "Set `quarkus.native.builder-image` property to `quay.io/quarkus/ubi-quarkus-mandrel-builder-image:{mandrel-flavor}`"
msgstr "设置 `quarkus.native.builder-image` 属性为 `quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor}` "

#: _guides/gradle-tooling.adoc
msgid ""
"When using the Gradle Groovy DSL, property keys must follow lower camel case notation.\n"
"e.g. `container-build` is not valid, and should be replaced by `containerBuild`.\n"
"This limitation does not apply to the Gradle Kotlin DSL."
msgstr ""

#. type: Title ===
#: _guides/gradle-tooling.adoc
#, fuzzy, no-wrap
msgid "Build a container friendly executable"
msgstr "构建一个对容器友好的可执行文件"

#: _guides/gradle-tooling.adoc
msgid ""
"The native executable will be specific to your operating system.\n"
"To create an executable that will run in a container, use the following:"
msgstr ""

#: _guides/gradle-tooling.adoc
msgid ""
"The produced executable will be a 64-bit Linux executable, so depending on your operating system it may no longer be runnable.\n"
"However, it's not an issue as we are going to copy it to a Docker container.\n"
"Note that in this case the build itself runs in a Docker container too, so you don't need to have GraalVM installed locally."
msgstr ""

#. type: delimited block =
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "By default, the native executable will be generated using the `quay.io/quarkus/ubi-quarkus-mandrel-builder-image:{mandrel-flavor}` Docker image."
msgstr "默认情况下，本地可执行文件将使用 `quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor}` Docker镜像生成。"

#: _guides/gradle-tooling.adoc
msgid ""
"If you want to build a native executable with a different Docker image (for instance to use a different GraalVM version),\n"
"use the `-Dquarkus.native.builder-image=<image name>` build argument."
msgstr ""

#: _guides/gradle-tooling.adoc
msgid ""
"The list of the available Docker images can be found on https://quay.io/repository/quarkus/ubi-quarkus-mandrel-builder-image?tab=tags[quay.io].\n"
"Be aware that a given Quarkus version might not be compatible with all the images available."
msgstr ""

#. type: Title ==
#: _guides/gradle-tooling.adoc
#, fuzzy, no-wrap
msgid "Running native tests"
msgstr "运行本地测试"

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "Run the native tests using:"
msgstr "运行本地测试，使用。"

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "This task depends on `quarkusBuild`, so it will generate the native image before running the tests."
msgstr "这个任务依赖于 `quarkusBuild` ，所以它将在运行测试之前生成本地图像。"

#. type: delimited block =
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "By default, the `native-test` source set is based on `main` and `test` source sets. It is possible to add an extra source set. For example, if your integration tests are located in an `integrationTest` source set, you can specify it as:"
msgstr "默认情况下， `native-test` 源集是基于 `main` 和 `test` 源集。可以添加一个额外的源集。例如，如果你的集成测试位于 `integrationTest` 源集中，你可以指定它为。"

#. type: Title ==
#: _guides/gradle-tooling.adoc
#, fuzzy, no-wrap
msgid "Running integration tests"
msgstr "运行集成测试"

#: _guides/gradle-tooling.adoc
msgid ""
"Quarkus integration tests (annotated with `@QuarkusIntegrationTest`) will run on the artifact produced by Quarkus.\n"
"Those tests can be placed in a `src/integrationTest/java` directory and executed using:"
msgstr ""

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "This task depends on both `test` and `quarkusBuild` tasks. The final artifact will be produced before running tests."
msgstr "这个任务依赖于 `check` 和 `quarkusBuild` 两个任务。最后的工件将在运行测试之前产生。"

#. type: Title ==
#: _guides/gradle-tooling.adoc
#, fuzzy, no-wrap
msgid "Using fast-jar"
msgstr "使用快速罐"

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "`fast-jar` is now the default quarkus package type. The result of `./gradlew build` command is a new directory under `build` named `quarkus-app`."
msgstr " `fast-jar` 现在是quarkus软件包的默认类型。 命令的结果是在 下有一个新的目录，名为 。 `./gradlew build` `build` `quarkus-app` "

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "You can run the application using: `java -jar build/quarkus-app/quarkus-run.jar`."
msgstr "你可以使用以下方式运行应用程序： `java -jar target/quarkus-app/quarkus-run.jar` 。"

#: _guides/gradle-tooling.adoc
msgid ""
"In order to successfully run the produced jar, you need to have the entire contents of the `quarkus-app` directory. If any of the files are missing, the application will not start or\n"
"might not function correctly."
msgstr ""

#: _guides/gradle-tooling.adoc
msgid ""
"The `fast-jar` packaging results in creating an artifact that starts a little faster and consumes slightly less memory than a legacy Quarkus jar\n"
"because it has indexed information about which dependency jar contains classes and resources. It can thus avoid the lookup into potentially every jar\n"
"on the classpath that the legacy jar necessitates, when loading a class or resource."
msgstr ""

#. type: Title ==
#: _guides/gradle-tooling.adoc
#, fuzzy, no-wrap
msgid "Building Uber-Jars"
msgstr "建造Uber-Jars"

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "Quarkus Gradle plugin supports the generation of Uber-Jars by specifying a `quarkus.package.type` argument as follows:"
msgstr "Quarkus Gradle插件支持通过指定一个 `quarkus.package.type` 参数来生成Uber-Jars，如下所示。"

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "When building an Uber-Jar you can specify entries that you want to exclude from the generated jar by using the `--ignored-entry` argument:"
msgstr "当构建Uber-Jar时，你可以通过使用 `--ignored-entry` 参数指定你想从生成的jar中排除的条目。"

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "The entries are relative to the root of the generated Uber-Jar. You can specify multiple entries by adding extra `--ignored-entry` arguments."
msgstr "这些条目是相对于生成的Uber-Jar的根的。你可以通过添加额外的 `--ignored-entry` 参数来指定多个条目。"

#. type: Title ===
#: _guides/gradle-tooling.adoc
#, fuzzy, no-wrap
msgid "Working with multi-module projects"
msgstr "与多模块项目一起工作"

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "By default, Quarkus will not discover CDI beans inside another module."
msgstr "默认情况下，Quarkus不会发现另一个模块中的CDI Bean。"

#: _guides/gradle-tooling.adoc
msgid ""
"The best way to enable CDI bean discovery for a module in a multi-module project would be to include a `META-INF/beans.xml` file,\n"
"unless it is the main application module already configured with the quarkus-maven-plugin, in which case it will be indexed automatically."
msgstr ""

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "Alternatively, there is some unofficial link:https://plugins.gradle.org/search?term=jandex[Gradle Jandex plugins] that can be used instead of the `META-INF/beans.xml` file."
msgstr "另外，还有一些非官方的 link:https://plugins.gradle.org/search?term=jandex[Gradle Jandex插件] ，可以用来代替 `META-INF/beans.xml` 。"

#. type: Plain text
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "More information on this topic can be found on the xref:cdi-reference.adoc#bean_discovery[Bean Discovery] section of the CDI guide."
msgstr "关于这个主题的更多信息可以在CDI指南的 link:cdi-reference.html#bean_discovery[Bean Discovery] 部分找到。"

#. type: Title ==
#: _guides/gradle-tooling.adoc
#, fuzzy, no-wrap
msgid "Publishing your application"
msgstr "发布你的申请"

#: _guides/gradle-tooling.adoc
msgid ""
"In order to make sure the right dependency versions are being used by Gradle, the BOM is declared as an `enforcedPlatform` in your build file.\n"
"By default, the `maven-publish` plugin will prevent you from publishing your application due to this `enforcedPlatform`.\n"
"This validation can be skipped by adding the following configuration in your build file:"
msgstr ""

#. type: Title ==
#: _guides/gradle-tooling.adoc
#, fuzzy, no-wrap
msgid "Configuring Quarkus builds"
msgstr "配置Quarkus的构建"

#: _guides/gradle-tooling.adoc
msgid ""
"There are multiple configuration sources that influence Quarkus builds, mentioned in the order of their priority.\n"
"The Quarkus build uses the `prod` configuration profile:"
msgstr ""

#. type: delimited block *
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "System properties (for example `./gradlew -Dquarkus.package.type=fast-jar ...`)"
msgstr "系统属性（例如： `./gradlew -Dquarkus.package.type=fast-jar …​` ）"

#. type: delimited block *
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "System environment (for example `QUARKUS_PACKAGE_TYPE=fast-jar ./gradlew ...`)"
msgstr "系统环境（例如： `QUARKUS_PACAKGE_TYPE=fast-jar ./gradlew …​` ）"

#. type: delimited block *
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "Configuration via the `quarkus` extensions's `quarkusBuildProperties` For example:"
msgstr "通过 `quarkus` extensions的 `quarkusBuildProperties` ，进行配置，例如："

#: _guides/gradle-tooling.adoc
msgid ""
"quarkus {\n"
"    quarkusBuildProperties {\n"
"        set(\"package.type\", \"uber-jar\")\n"
"    }\n"
"}"
msgstr ""

#. type: delimited block *
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "Configuration via Gradle project properties (for example `./gradlew -Pquarkus.package.type=fast-jar`)"
msgstr "通过Gradle项目属性进行配置（例如 `./gradlew -Pquarkus.package.type=fast-jar` ）。"

#: _guides/gradle-tooling.adoc
msgid ""
"Configuration from a project's `application.properties`, `application.yaml` and `application.yml` files, as well\n"
"as a project's `application-prod.properties`, `application-prod.yaml` and `application-prod.yml` files"
msgstr ""

#: _guides/gradle-tooling.adoc
msgid ""
"The above priorities have changed in Quarkus plugin starting with 3.0. Older versions of the Quarkus Gradle plugin\n"
"preferred `application.properties` over settings in the Gradle build."
msgstr ""

#: _guides/gradle-tooling.adoc
msgid ""
"The Quarkus Gradle plugin uses the \"standard\" Quarkus mechanisms to load and parse configurations. Support for\n"
"`application.(yaml|yml)` has been added in Quarkus 3.0 in addition to `application.properties`. Also new in 3.0\n"
"is that all mechanisms available via SmallRye Config, are implicitly also now available for the Quarkus Gradle\n"
"plugin."
msgstr ""

#: _guides/gradle-tooling.adoc
msgid ""
"Use the `quarkusShowEffectiveConfig` task to show the effective configuration options used for a Quarkus build. If you\n"
"specify the `--save-config-properties` command line option, the configuration properties are also store in the file\n"
"`build/<final-name>.quarkus-build.properties`."
msgstr ""

#. type: Title ===
#: _guides/gradle-tooling.adoc
#, no-wrap
msgid "Gradle caching / task inputs"
msgstr ""

#: _guides/gradle-tooling.adoc
msgid ""
"By default, system properties starting with `quarkus.` and environment variables, including those from `~/.env`,\n"
"starting  with `QUARKUS_`, are considered as inputs for the Gradle tasks. This means that only changes to those system\n"
"properties or environment variables will cause Gradle's up-to-date to trigger a rebuild. Changes to other system\n"
"properties or environment variables do not change Quarkus' Gradle task inputs and do not trigger an unnecessary rebuild."
msgstr ""

#: _guides/gradle-tooling.adoc
msgid ""
"Configuration properties specified via `quarkus.quarkusBuildProperties` or via the Quarkus `application.*`\n"
"configuration files are all considered as Gradle task inputs, in other words: every change in these files causes\n"
"a rebuild."
msgstr ""

#: _guides/gradle-tooling.adoc
msgid ""
"If your Quarkus build references system properties that do not start with `quarkus.` (or environment variables that\n"
"do not start with `QUARKUS_`), you must reference those via the Quarkus build extension. For example, if your\n"
"`application.properties` file references an environment variable like this:"
msgstr ""

#: _guides/gradle-tooling.adoc
msgid "greeting.message=${FOO_MESSAGE:Hello!}"
msgstr ""

#. type: delimited block *
#: _guides/gradle-tooling.adoc
msgid "it must be explicitly declared as \"caching relevant\":"
msgstr ""

#: _guides/gradle-tooling.adoc
msgid ""
"quarkus {\n"
"   cachingRelevantProperties.add(\"FOO_MESSAGE\")\n"
"   // Note: `cachingRelevantProperties` accepts regular expressions\n"
"}"
msgstr ""

#. type: Title ==
#: _guides/gradle-tooling.adoc
#, fuzzy, no-wrap
msgid "Build workers"
msgstr "建造工人"

#: _guides/gradle-tooling.adoc
msgid ""
"Quarkus application builds are ran in isolated processes using Gradle's worker API. This includes the Quarkus\n"
"application build and Quarkus code generation. This is necessary to properly pass the configuration from the\n"
"`quarkus` extension and Gradle project properties to Quarkus' code generator / application builder."
msgstr ""

#: _guides/gradle-tooling.adoc
msgid ""
"The JVM settings of the processes performing the code generation and/or Quarkus build can be configured as follows.\n"
"See link:https://docs.gradle.org/current/javadoc/org/gradle/process/JavaForkOptions.html[JavaForkOptions]\n"
"for details."
msgstr ""

#. type: Title ==
#: _guides/gradle-tooling.adoc
#, fuzzy, no-wrap
msgid "Cached build artifacts"
msgstr "缓存的构建工件"

#: _guides/gradle-tooling.adoc
msgid ""
"link:https://docs.gradle.org/current/userguide/build_cache.html[Gradle's build cache] is a very efficient mechanism to\n"
"improve the overall build runtime, by reusing previously generated outputs (see\n"
"link:https://docs.gradle.org/current/userguide/incremental_build.html[Incremental build] for technical details)."
msgstr ""

#: _guides/gradle-tooling.adoc
msgid ""
"The Quarkus plugin leverages the Gradle mechanisms of up-to-date checks and the build cache. The build cache can be\n"
"local or local _plus_ a remote cache server or, if configured in CI environments, remote in the sense of retrieving\n"
"and storing the whole cache as an artifact, for example using\n"
"link:https://github.com/gradle/gradle-build-action[Gradle's GitHub action] or directly/manually GitHub's\n"
"link:https://github.com/actions/cache[GitHub's cache action]."
msgstr ""

#: _guides/gradle-tooling.adoc
msgid ""
"The Quarkus Gradle plugin cares about _what_ is cached _in which environment_ (CI or local development). Big artifacts\n"
"like uber-jars and native binaries are not cached in CI, but are cached in local development environments."
msgstr ""

#. type: delimited block *
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "The Quarkus Gradle plugin detects a _CI environment_, if the `CI` environment variable is present."
msgstr "如果 `CI` 环境变量存在，Quarkus Gradle插件会检测 _CI环境_ 。"

#: _guides/gradle-tooling.adoc
msgid ""
"How the various Quarkus package types are cached in non-CI and CI environments is described in the following table.\n"
"Note that even if a task's output is not _cached_, the _up-to-date_ checks still apply."
msgstr ""

#: _guides/gradle-tooling.adoc
msgid ""
"The Quarkus application build is split across three tasks. The `quarkusBuild` task is responsible to _provide_\n"
"a built Quarkus application. The tasks `quarkusDependenciesBuild` and `quarkusAppPartsBuild` are considered internal\n"
"tasks (may change at any time w/o prior notice). See below for details."
msgstr ""

#: _guides/gradle-tooling.adoc
msgid "Quarkus package type"
msgstr ""

#: _guides/gradle-tooling.adoc
msgid "Notes"
msgstr ""

#. type: Table
#: _guides/gradle-tooling.adoc
#, fuzzy, no-wrap
msgid "Caching (non-CI)"
msgstr "缓存（非CI）"

#. type: Table
#: _guides/gradle-tooling.adoc
#, fuzzy, no-wrap
msgid "Caching in CI"
msgstr "CI中的缓存"

#. type: Table
#: _guides/gradle-tooling.adoc
#, fuzzy, no-wrap
msgid "`fast-jar`, `jar`"
msgstr " `fast-jar` , `jar` "

#. type: Table
#: _guides/gradle-tooling.adoc
#, fuzzy, no-wrap
msgid ""
"Dependency jars are stored unmodified as individual files in the `quarkus-app/lib/` directory.\n"
"All other files in the `quarkus-app/` directory are generated.\n"
"\n"
"The `quarkusAppPartsBuild` task builds `fast-jar` package-type applications and allows caching of the _generated_\n"
"pieces, which is everything except the dependencies in the `quarkus-app/lib/` directory. The\n"
"`quarkusDependenciesBuild` task is used to collect the dependencies via Gradle mechanisms. The `quarkusBuild` task\n"
"then assembles the outputs of the `quarkusAppPartsBuild` and `quarkusDependenciesBuild` tasks.\n"
"\n"
"Note: `fast-jar` (or `-jar`) is the default if no package type has been explicitly configured."
msgstr "依赖性罐子作为单独的文件保存在 `quarkus-app/lib/` 目录中，未作任何修改。 `quarkus-app/` 目录下的所有其他文件都被生成。"

#. type: Table
#: _guides/gradle-tooling.adoc
#, fuzzy, no-wrap
msgid "✅"
msgstr "✅"

#. type: Table
#: _guides/gradle-tooling.adoc
#, fuzzy, no-wrap
msgid "`mutable-jar`, `uber-jar`, `native`, `native-sources`"
msgstr " `mutable-jar` , `uber-jar` , `native` 、 `native-sources` "

#. type: Table
#: _guides/gradle-tooling.adoc
#, fuzzy, no-wrap
msgid ""
"The `quarkusBuild` task is responsible for building the Quarkus application.\n"
"\n"
"The `quarkusAppPartsBuild` and `quarkusDependenciesBuild` tasks do nothing for `uber-jar`s."
msgstr " `quarkusBuild` 任务负责建立Quarkus应用程序。"

#. type: Table
#: _guides/gradle-tooling.adoc
#, fuzzy, no-wrap
msgid "❌"
msgstr "❌"

#. type: Table
#: _guides/gradle-tooling.adoc
#, fuzzy, no-wrap
msgid "`legacy-jar`, `legacy`"
msgstr " `legacy-jar` , `legacy` "

#. type: Table
#: _guides/gradle-tooling.adoc
#, fuzzy, no-wrap
msgid ""
"`legacy-jar` builds work similar to `fast-jar` builds, except that the directory structure is different and the\n"
"`modified-*.jar` files are considered as generated."
msgstr " `legacy-jar` 构建的工作与 构建类似，只是目录结构不同， 文件被认为是生成的。 `fast-jar` `modified-*.jar` "

#: _guides/gradle-tooling.adoc
msgid ""
"In a local development environment, the cost (think: time) of storing (and retrieving) even bigger cache artifacts is\n"
"lower than the cost of re-building a Quarkus application. This means, that The Quarkus Gradle plugin allows caching\n"
"even potentially big artifacts like uber-jars or native binaries in non-CI environments. In CI environments, which run\n"
"builds against varying states of a code base (think: running CI against every commit on a main branch), adding each\n"
"built (and big) artifact to the build cache would let the build cache become unnecessarily big, which becomes a\n"
"problem for example in GitHub, where the total amount of cached artifacts is limited to 10 GB."
msgstr ""

#. type: delimited block =
#: _guides/gradle-tooling.adoc
#, fuzzy
msgid "Background information: There are two related mechanisms in Gradle at play to improve build performance:"
msgstr "背景信息：在Gradle中，有两种相关的机制在发挥作用，以提高构建性能："

#: _guides/gradle-tooling.adoc
msgid ""
"Up-to-date checks allow a task's execution to be skipped, if the _inputs_ and _outputs_ of the tasks did not change.\n"
"For example, consider a Java compile tasks: if the library dependencies and the source files (the _inputs_) did not\n"
"change and the compiled class files (the _outputs_) are still available, compilation can be skipped."
msgstr ""

#: _guides/gradle-tooling.adoc
msgid ""
"The build cache can store the outputs of (cacheable) tasks in the local build cache. The _output_ of a task can be\n"
"restored from the cache."
msgstr ""

#: _guides/gradle-tooling.adoc
msgid ""
"The benefits of up-to-date checks and the interaction of the build cache come with the cost of modeling the _inputs_\n"
"and _outputs_. Inputs are not only files or directories, but also the Java version used during the build, the operating\n"
"system, the working directory, configuration options, and so on. So everything that influences the output of a task\n"
"action must be declared as an input of the task."
msgstr ""

#. type: Title ==
#: _guides/gradle-tooling.adoc
#, fuzzy, no-wrap
msgid "Gradle configuration cache"
msgstr "Gradle配置缓存"

#: _guides/gradle-tooling.adoc
msgid ""
"The Quarkus Gradle plugin works with builds that have the\n"
"link:https://docs.gradle.org/current/userguide/configuration_cache.html[Gradle's configuration cache] enabled, but\n"
"the configuration cache is disabled for the Quarkus tasks. This means, that the Quarkus plugin does not break such\n"
"Gradle builds."
msgstr ""
