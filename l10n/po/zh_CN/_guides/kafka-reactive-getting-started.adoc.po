# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/kafka-reactive-getting-started.adoc:6
#, fuzzy, no-wrap
msgid "Getting Started to SmallRye Reactive Messaging with Apache Kafka"
msgstr "开始使用Apache Kafka的SmallRye Reactive Messaging。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:11
#, fuzzy
msgid "This guide demonstrates how your Quarkus application can utilize SmallRye Reactive Messaging to interact with Apache Kafka."
msgstr "本指南演示了您的Quarkus应用程序如何利用SmallRye Reactive Messaging与Apache Kafka进行交互。"

#. type: Title ==
#: upstream/_guides/kafka-reactive-getting-started.adoc:12
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: upstream/_guides/kafka-reactive-getting-started.adoc:17
#, fuzzy, no-wrap
msgid "Architecture"
msgstr "建筑学"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:22
#, fuzzy
msgid "In this guide, we are going to develop two applications communicating with Kafka.  The first application sends a _quote request_ to Kafka and consumes Kafka messages from the _quote_ topic.  The second application receives the _quote request_ and sends a _quote_ back."
msgstr "在本指南中，我们将开发两个与Kafka通信的应用程序。第一个应用程序向Kafka发送一个 _报价请求_ ，并消费来自 _报价_ 主题的Kafka消息。第二个应用程序接收 _报价请求_ 并发送一个 _报价_ 回来。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_guides/kafka-reactive-getting-started.adoc:23
#, fuzzy, no-wrap
msgid "Architecture,"
msgstr "建筑。"

#. type: Target for macro image
#: upstream/_guides/kafka-reactive-getting-started.adoc:23
#, no-wrap
msgid "kafka-qs-architecture.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:28
#, fuzzy
msgid "The first application, the _producer_, will let the user request some quotes over a HTTP endpoint.  For each quote request a random identifier is generated and returned to the user, to mark the quote request as _pending_.  At the same time, the generated request id is sent over a Kafka topic `quote-requests`."
msgstr "第一个应用程序，即 _生产者_ ，将让用户通过一个HTTP端点请求一些报价。对于每个报价请求，都会生成一个随机的标识符，并返回给用户，以标记该报价请求为 _待定_ 。同时，生成的请求ID会通过Kafka主题 `quote-requests` 。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_guides/kafka-reactive-getting-started.adoc:29
#, fuzzy, no-wrap
msgid "Producer"
msgstr "制作人"

#. type: Target for macro image
#: upstream/_guides/kafka-reactive-getting-started.adoc:29
#, no-wrap
msgid "kafka-qs-app-screenshot.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:32
#, fuzzy
msgid "The second application, the _processor_, will read from the `quote-requests` topic, put a random price to the quote, and send it to a Kafka topic named `quotes`."
msgstr "第二个应用程序，即 _处理器_ ，将从 `quote-requests` 主题中读取，给报价加上一个随机价格，并将其发送到一个名为 `quotes` 的Kafka主题。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:35
#, fuzzy
msgid "Lastly, the _producer_ will read the quotes and send them to the browser using server-sent events.  The user will therefore see the quote price updated from _pending_ to the received price in real-time."
msgstr "最后， _生产商_ 将读取报价并使用服务器发送的事件将其发送到浏览器。因此，用户将看到报价从 _待定_ 价格实时更新到收到的价格。"

#. type: Title ==
#: upstream/_guides/kafka-reactive-getting-started.adoc:36
#, fuzzy, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:40
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create applications step by step.  However, you can go right to the completed example."
msgstr "我们建议你按照下面几节的说明，一步一步地创建应用程序。然而，你可以直接进入已完成的例子。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:42
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库。 `git clone {quickstarts-clone-url}` ，或者下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:44
#, fuzzy
msgid "The solution is located in the `kafka-quickstart` {quickstarts-tree-url}/kafka-quickstart[directory]."
msgstr "该解决方案位于 `kafka-quickstart` {quickstarts-tree-url}/kafka-quickstart[目录]中。"

#. type: Title ==
#: upstream/_guides/kafka-reactive-getting-started.adoc:45
#, fuzzy, no-wrap
msgid "Creating the Maven Project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:48
#, fuzzy
msgid "First, we need to create two projects: the _producer_ and the _processor_."
msgstr "首先，我们需要创建两个项目： _生产者_ 和 _处理器_ 。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:50
#, fuzzy
msgid "To create the _producer_ project, in a terminal run:"
msgstr "要创建 _生产者_ 项目，在终端运行。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:57
#, fuzzy
msgid "This command creates the project structure and selects two Quarkus extensions we will be using:"
msgstr "这个命令创建了项目结构，并选择了我们要使用的两个Quarkus扩展。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:59
#, fuzzy
msgid "RESTEasy Reactive and its Jackson support (to handle JSON) to serve the HTTP endpoint."
msgstr "RESTEasy Reactive及其Jackson支持（处理JSON）为HTTP端点提供服务。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:60
#, fuzzy
msgid "The Kafka connector for Reactive Messaging"
msgstr "用于反应式消息传递的Kafka连接器"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:62
#, fuzzy
msgid "To create the _processor_ project, from the same directory, run:"
msgstr "要创建 _处理器_ 项目，在同一目录下，运行。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:69
#, fuzzy
msgid "At that point, you should have the following structure:"
msgstr "在这一点上，你应该有以下结构。"

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:95
#, no-wrap
msgid ""
".\n"
"├── kafka-quickstart-processor\n"
"│  ├── README.md\n"
"│  ├── mvnw\n"
"│  ├── mvnw.cmd\n"
"│  ├── pom.xml\n"
"│  └── src\n"
"│     └── main\n"
"│        ├── docker\n"
"│        ├── java\n"
"│        └── resources\n"
"│           └── application.properties\n"
"└── kafka-quickstart-producer\n"
"   ├── README.md\n"
"   ├── mvnw\n"
"   ├── mvnw.cmd\n"
"   ├── pom.xml\n"
"   └── src\n"
"      └── main\n"
"         ├── docker\n"
"         ├── java\n"
"         └── resources\n"
"            └── application.properties\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:98
#, fuzzy
msgid "Open the two projects in your favorite IDE."
msgstr "在你喜欢的IDE中打开这两个项目。"

#. type: Block title
#: upstream/_guides/kafka-reactive-getting-started.adoc:100
#, fuzzy, no-wrap
msgid "Dev Services"
msgstr "开发服务"

#. type: delimited block =
#: upstream/_guides/kafka-reactive-getting-started.adoc:105
#, fuzzy
msgid "No need to start a Kafka broker when using the dev mode or for tests.  Quarkus starts a broker for you automatically.  See xref:kafka-dev-services.adoc[Dev Services for Kafka] for details."
msgstr "在使用开发模式或测试时不需要启动Kafka代理。Quarkus会自动为你启动一个代理。详见 link:kafka-dev-services.html[Kafka的开发服务] 。"

#. type: Title ==
#: upstream/_guides/kafka-reactive-getting-started.adoc:107
#, fuzzy, no-wrap
msgid "The Quote object"
msgstr "报价对象"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:112
#, fuzzy
msgid "The `Quote` class will be used in both _producer_ and _processor_ projects.  For the sake of simplicity, we will duplicate the class.  In both projects, create the `src/main/java/org/acme/kafka/model/Quote.java` file, with the following content:"
msgstr " `Quote` 类将在 _生产者_ 和 _处理器_ 项目中使用。为了简单起见，我们将复制这个类。在两个项目中，创建 `src/main/java/org/acme/kafka/model/Quote.java` 文件，内容如下。"

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:116
#, no-wrap
msgid "package org.acme.kafka.model;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:118
#, no-wrap
msgid "public class Quote {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:121
#, no-wrap
msgid ""
"    public String id;\n"
"    public int price;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:126
#, no-wrap
msgid ""
"    /**\n"
"    * Default constructor required for Jackson serializer\n"
"    */\n"
"    public Quote() { }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:131
#, no-wrap
msgid ""
"    public Quote(String id, int price) {\n"
"        this.id = id;\n"
"        this.price = price;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:140
#, no-wrap
msgid ""
"    @Override\n"
"    public String toString() {\n"
"        return \"Quote{\" +\n"
"                \"id='\" + id + '\\'' +\n"
"                \", price=\" + price +\n"
"                '}';\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:144
#, fuzzy
msgid "JSON representation of `Quote` objects will be used in messages sent to the Kafka topic and also in the server-sent events sent to web browsers."
msgstr " `Quote` 对象的JSON表示法将被用于发送到Kafka主题的消息中，也被用于发送到Web浏览器的服务器发送的事件。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:147
#, fuzzy
msgid "Quarkus has built-in capabilities to deal with JSON Kafka messages.  In a following section, we will create serializer/deserializer classes for Jackson."
msgstr "Quarkus有内置的能力来处理JSON Kafka消息。在下一节中，我们将为Jackson创建序列化/反序列化器类。"

#. type: Title ==
#: upstream/_guides/kafka-reactive-getting-started.adoc:148
#, fuzzy, no-wrap
msgid "Sending quote request"
msgstr "发出报价请求"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:151
#, fuzzy
msgid "Inside the _producer_ project, create the `src/main/java/org/acme/kafka/producer/QuotesResource.java` file and add the following content:"
msgstr "在 _生产者_ 项目中，创建 `src/main/java/org/acme/kafka/producer/QuotesResource.java` 文件并添加以下内容。"

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:155
#, no-wrap
msgid "package org.acme.kafka.producer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:157
#, no-wrap
msgid "import java.util.UUID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:163
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:167
#, no-wrap
msgid ""
"import org.acme.kafka.model.Quote;\n"
"import org.eclipse.microprofile.reactive.messaging.Channel;\n"
"import org.eclipse.microprofile.reactive.messaging.Emitter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:170
#, no-wrap
msgid ""
"@Path(\"/quotes\")\n"
"public class QuotesResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:173
#, no-wrap
msgid ""
"    @Channel(\"quote-requests\")\n"
"    Emitter<String> quoteRequestEmitter; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:186
#, no-wrap
msgid ""
"    /**\n"
"     * Endpoint to generate a new quote request id and send it to \"quote-requests\" Kafka topic using the emitter.\n"
"     */\n"
"    @POST\n"
"    @Path(\"/request\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String createRequest() {\n"
"        UUID uuid = UUID.randomUUID();\n"
"        quoteRequestEmitter.send(uuid.toString()); // <2>\n"
"        return uuid.toString(); // <3>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:188
#, fuzzy
msgid "Inject a Reactive Messaging `Emitter` to send messages to the `quote-requests` channel."
msgstr "注入一个Reactive Messaging `Emitter` ，向 `quote-requests` 通道发送消息。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:189
#, fuzzy
msgid "On a post request, generate a random UUID and send it to the Kafka topic using the emitter."
msgstr "在一个post请求中，生成一个随机的UUID并使用发射器将其发送到Kafka主题。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:190
#, fuzzy
msgid "Return the same UUID to the client."
msgstr "向客户端返回相同的UUID。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:196
#, fuzzy
msgid "The `quote-requests` channel is going to be managed as a Kafka topic, as that's the only connector on the classpath.  If not indicated otherwise, like in this example, Quarkus uses the channel name as topic name.  So, in this example, the application writes into the `quote-requests` topic.  Quarkus also configures the serializer automatically, because it finds that the `Emitter` produces `String` values."
msgstr " `quote-requests` 通道将作为Kafka主题来管理，因为那是classpath上唯一的连接器。如果没有其他指示，比如在这个例子中，Quarkus使用通道名称作为主题名称。因此，在这个例子中，应用程序写进了 `quote-requests` 主题。Quarkus还自动配置了序列化器，因为它发现 `Emitter` 产生 `String` 的值。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:198
#, fuzzy
msgid "When you have multiple connectors, you would need to indicate which connector you want to use in the application configuration."
msgstr "当你有多个连接器时，你需要指出你想在应用程序配置中使用哪个连接器。"

#. type: Title ==
#: upstream/_guides/kafka-reactive-getting-started.adoc:199
#, fuzzy, no-wrap
msgid "Processing quote requests"
msgstr "处理报价请求"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:203
#, fuzzy
msgid "Now let's consume the quote request and give out a price.  Inside the _processor_ project, create the `src/main/java/org/acme/kafka/processor/QuotesProcessor.java` file and add the following content:"
msgstr "现在让我们来消费报价请求并给出一个价格。在 _处理器_ 项目内，创建 `src/main/java/org/acme/kafka/processor/QuotesProcessor.java` 文件并添加以下内容。"

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:207
#, no-wrap
msgid "package org.acme.kafka.processor;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:209
#, no-wrap
msgid "import java.util.Random;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:211
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:215
#, no-wrap
msgid ""
"import org.acme.kafka.model.Quote;\n"
"import org.eclipse.microprofile.reactive.messaging.Incoming;\n"
"import org.eclipse.microprofile.reactive.messaging.Outgoing;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:217
#, no-wrap
msgid "import io.smallrye.reactive.messaging.annotations.Blocking;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:224
#, no-wrap
msgid ""
"/**\n"
" * A bean consuming data from the \"quote-requests\" Kafka topic (mapped to \"requests\" channel) and giving out a random quote.\n"
" * The result is pushed to the \"quotes\" Kafka topic.\n"
" */\n"
"@ApplicationScoped\n"
"public class QuotesProcessor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:226
#, no-wrap
msgid "    private Random random = new Random();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:236
#, no-wrap
msgid ""
"    @Incoming(\"requests\") // <1>\n"
"    @Outgoing(\"quotes\")   // <2>\n"
"    @Blocking             // <3>\n"
"    public Quote process(String quoteRequest) throws InterruptedException {\n"
"        // simulate some hard working task\n"
"        Thread.sleep(200);\n"
"        return new Quote(quoteRequest, random.nextInt(100));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:239
#, fuzzy
msgid "Indicates that the method consumes the items from the `requests` channel."
msgstr "表示该方法从 `requests` 通道消耗项目。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:240
#, fuzzy
msgid "Indicates that the objects returned by the method are sent to the `quotes` channel."
msgstr "表示方法返回的对象被发送到 `quotes` 通道。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:241
#, fuzzy
msgid "Indicates that the processing is _blocking_ and cannot be run on the caller thread."
msgstr "表示该处理是 _阻塞的_ ，不能在调用者线程上运行。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:244
#, fuzzy
msgid "For every Kafka _record_ from the `quote-requests` topic, Reactive Messaging calls the `process` method, and sends the returned `Quote` object to the `quotes` channel.  In this case, we need to configure the channel in the `application.properties` file, to configures the `requests` and `quotes` channels:"
msgstr "对于来自 `quote-requests` 主题的每一条Kafka _记录_ ，Reactive Messaging会调用 `process` 方法，并将返回的 `Quote` 对象发送到 `quotes` 通道。在这种情况下，我们需要在 `application.properties` 文件中配置通道，以配置 `requests` 和 `quotes` 通道。"

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:248
#, no-wrap
msgid "%dev.quarkus.http.port=8081\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:252
#, no-wrap
msgid ""
"# Configure the incoming `quote-requests` Kafka topic\n"
"mp.messaging.incoming.requests.topic=quote-requests\n"
"mp.messaging.incoming.requests.auto.offset.reset=earliest\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:256
#, fuzzy
msgid "Note that in this case we have one incoming and one outgoing connector configuration, each one distinctly named.  The configuration keys are structured as follows:"
msgstr "请注意，在这种情况下，我们有一个传入和一个传出的连接器配置，每个都有明确的名称。配置键的结构如下。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:258
#, fuzzy
msgid "`mp.messaging.[outgoing|incoming].{channel-name}.property=value`"
msgstr " `mp.messaging.[outgoing|incoming].{channel-name}.property=value` "

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:260
#, fuzzy
msgid "The `channel-name` segment must match the value set in the `@Incoming` and `@Outgoing` annotation:"
msgstr " `channel-name` 段必须与 `@Incoming` 和 `@Outgoing` 注释中设定的值相匹配。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:262
#, fuzzy
msgid "`quote-requests` -> Kafka topic from which we read the quote requests"
msgstr " `quote-requests` → Kafka主题，我们从中读取报价请求"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:263
#, fuzzy
msgid "`quotes` -> Kafka topic in which we write the quotes"
msgstr " `quotes` → 我们在其中写引文的卡夫卡主题"

#. type: delimited block =
#: upstream/_guides/kafka-reactive-getting-started.adoc:268
#, fuzzy
msgid "More details about this configuration is available on the https://kafka.apache.org/documentation/#producerconfigs[Producer configuration] and https://kafka.apache.org/documentation/#consumerconfigs[Consumer configuration] section from the Kafka documentation. These properties are configured with the prefix `kafka`.  An exhaustive list of configuration properties is available in xref:kafka.adoc#kafka-configuration[Kafka Reference Guide - Configuration]."
msgstr "关于这个配置的更多细节，可以在Kafka文档的 link:https://kafka.apache.org/documentation/#producerconfigs[Producer配置] 和 link:https://kafka.apache.org/documentation/#consumerconfigs[Consumer配置] 部分找到。这些属性的配置前缀为 `kafka` 。配置属性的详尽列表可在 link:kafka.html#kafka-configuration[Kafka参考指南-配置] 中找到。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:272
#, fuzzy
msgid "`mp.messaging.incoming.requests.auto.offset.reset=earliest` instructs the application to start reading the topics from the first offset, when there is no committed offset for the consumer group.  In other words, it will also process messages sent before we start the processor application."
msgstr " `mp.messaging.incoming.requests.auto.offset.reset=earliest` 指示应用程序从第一个偏移量开始读取主题，当消费者组没有承诺的偏移量时。换句话说，它也将处理在我们启动处理器应用程序之前发送的消息。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:275
#, fuzzy
msgid "There is no need to set serializers or deserializers.  Quarkus detects them, and if none are found, generates them using JSON serialization."
msgstr "没有必要设置序列化器或反序列化器。Quarkus会检测它们，如果没有找到，就用JSON序列化生成它们。"

#. type: Title ==
#: upstream/_guides/kafka-reactive-getting-started.adoc:276
#, fuzzy, no-wrap
msgid "Receiving quotes"
msgstr "接收报价"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:280
#, fuzzy
msgid "Back to our _producer_ project.  Let's modify the `QuotesResource` to consume quotes from Kafka and send them back to the client via Server-Sent Events:"
msgstr "回到我们的 _生产者_ 项目。让我们修改一下 `QuotesResource` ，以便从Kafka消费报价，并通过服务器发送的事件把它们送回客户端。"

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:284
#, no-wrap
msgid "import io.smallrye.mutiny.Multi;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:286
#, no-wrap
msgid "...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:289
#, no-wrap
msgid ""
"@Channel(\"quotes\")\n"
"Multi<Quote> quotes; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:298
#, no-wrap
msgid ""
"/**\n"
" * Endpoint retrieving the \"quotes\" Kafka topic and sending the items to a server sent event.\n"
" */\n"
"@GET\n"
"@Produces(MediaType.SERVER_SENT_EVENTS) // <2>\n"
"public Multi<Quote> stream() {\n"
"    return quotes; // <3>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:300
#, fuzzy
msgid "Injects the `quotes` channel using the `@Channel` qualifier"
msgstr "使用 `@Channel` 修饰语注入 `quotes` 通道。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:301
#, fuzzy
msgid "Indicates that the content is sent using `Server Sent Events`"
msgstr "表示内容是用 `Server Sent Events` "

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:302
#, fuzzy
msgid "Returns the stream (_Reactive Stream_)"
msgstr "返回流 _（Reactive Stream_ ）。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:305
#, fuzzy
msgid "No need to configure anything, as Quarkus will automatically associate the `quotes` channel to the `quotes` Kafka topic.  It will also generate a deserializer for the `Quote` class."
msgstr "不需要配置任何东西，因为Quarkus会自动将 `quotes` 通道与 `quotes` Kafka主题相关联。它还会为 `Quote` 类生成一个反序列化器。"

#. type: Block title
#: upstream/_guides/kafka-reactive-getting-started.adoc:308
#, fuzzy, no-wrap
msgid "Message serialization in Kafka"
msgstr "Kafka中的消息序列化"

#. type: delimited block =
#: upstream/_guides/kafka-reactive-getting-started.adoc:311
#, fuzzy
msgid "In this example we used Jackson to serialize/deserialize Kafka messages.  For more options on message serialization, see xref:kafka.adoc#kafka-serialization[Kafka Reference Guide - Serialization]."
msgstr "在这个例子中，我们使用Jackson来序列化/反序列化Kafka消息。关于消息序列化的更多选项，请参阅 link:kafka.html#kafka-serialization[Kafka参考指南--序列化] 。"

#. type: delimited block =
#: upstream/_guides/kafka-reactive-getting-started.adoc:315
#, fuzzy
msgid "We strongly suggest adopting a contract-first approach using a schema registry.  To learn more about how to use Apache Kafka with the schema registry and Avro, follow the xref:kafka-schema-registry-avro.adoc[Using Apache Kafka with Schema Registry and Avro] guide."
msgstr "我们强烈建议采用合同优先的方法，使用模式注册表。要了解更多关于如何使用Apache Kafka与模式注册中心和Avro的信息，请关注《 link:kafka-schema-registry-avro.html[使用Apache Kafka与模式注册中心和Avro] 》指南。"

#. type: Title ==
#: upstream/_guides/kafka-reactive-getting-started.adoc:317
#, fuzzy, no-wrap
msgid "The HTML page"
msgstr "HTML页面"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:320
#, fuzzy
msgid "Final touch, the HTML page requesting quotes and displaying the prices obtained over SSE."
msgstr "最后的润色，是要求报价的HTML页面，并显示通过SSE获得的价格。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:322
#, fuzzy
msgid "Inside the _producer_ project, create the `src/main/resources/META-INF/resources/quotes.html` file with the following content:"
msgstr "在 _生产者_ 项目中，创建 `src/main/resources/META-INF/resources/quotes.html` 文件，内容如下。"

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:330
#, no-wrap
msgid ""
"<!DOCTYPE html>\n"
"<html lang=\"en\">\n"
"<head>\n"
"    <meta charset=\"UTF-8\">\n"
"    <title>Prices</title>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:357
#, no-wrap
msgid ""
"    <link rel=\"stylesheet\" type=\"text/css\"\n"
"          href=\"https://cdnjs.cloudflare.com/ajax/libs/patternfly/3.24.0/css/patternfly.min.css\">\n"
"    <link rel=\"stylesheet\" type=\"text/css\"\n"
"          href=\"https://cdnjs.cloudflare.com/ajax/libs/patternfly/3.24.0/css/patternfly-additions.min.css\">\n"
"</head>\n"
"<body>\n"
"<div class=\"container\">\n"
"    <div class=\"card\">\n"
"        <div class=\"card-body\">\n"
"            <h2 class=\"card-title\">Quotes</h2>\n"
"            <button class=\"btn btn-info\" id=\"request-quote\">Request Quote</button>\n"
"            <div class=\"quotes\"></div>\n"
"        </div>\n"
"    </div>\n"
"</div>\n"
"</body>\n"
"<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n"
"<script>\n"
"    $(\"#request-quote\").click((event) => {\n"
"        fetch(\"/quotes/request\", {method: \"POST\"})\n"
"        .then(res => res.text())\n"
"        .then(qid => {\n"
"            var row = $(`<h4 class='col-md-12' id='${qid}'>Quote # <i>${qid}</i> | <strong>Pending</strong></h4>`);\n"
"            $(\".quotes\").prepend(row);\n"
"        });\n"
"    });\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:367
#, no-wrap
msgid ""
"    var source = new EventSource(\"/quotes\");\n"
"    source.onmessage = (event) => {\n"
"      var json = JSON.parse(event.data);\n"
"      $(`#${json.id}`).html((index, html) => {\n"
"        return html.replace(\"Pending\", `\\$\\xA0${json.price}`);\n"
"      });\n"
"    };\n"
"</script>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:372
#, fuzzy
msgid "Nothing spectacular here.  When the user clicks the button, HTTP request is made to request a quote, and a pending quote is added to the list.  On each quote received over SSE, the corresponding item in the list is updated."
msgstr "这里没有什么了不起的。当用户点击按钮时，HTTP请求就会被提出，要求进行报价，一个待定的报价被添加到列表中。在通过SSE收到的每个报价中，列表中的相应项目被更新。"

#. type: Title ==
#: upstream/_guides/kafka-reactive-getting-started.adoc:373
#, fuzzy, no-wrap
msgid "Get it running"
msgstr "让它运行"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:377
#, fuzzy
msgid "You just need to run both applications.  In one terminal, run:"
msgstr "你只需要运行这两个应用程序。在一个终端中，运行。"

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:381
#, no-wrap
msgid "mvn -f kafka-quickstart-producer quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:384
#, fuzzy
msgid "In another terminal, run:"
msgstr "在另一个终端，运行。"

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:388
#, no-wrap
msgid "mvn -f kafka-quickstart-processor quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:392
#, fuzzy
msgid "Quarkus starts a Kafka broker automatically, configures the application and shares the Kafka broker instance between different applications.  See xref:kafka-dev-services.adoc[Dev Services for Kafka] for more details."
msgstr "Quarkus自动启动一个Kafka代理，配置应用程序，并在不同的应用程序之间共享Kafka代理实例。更多细节请参见 link:kafka-dev-services.html[Dev Services for Kafka] 。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:394
#, fuzzy
msgid "Open `http://localhost:8080/quotes.html` in your browser and request some quotes by clicking the button."
msgstr "打开 `<a href=\"http://localhost:8080/quotes.html\" class=\"bare\">http://localhost:8080/quotes.html</a>` 在你的浏览器中，通过点击按钮要求一些报价。"

#. type: Title ==
#: upstream/_guides/kafka-reactive-getting-started.adoc:395
#, fuzzy, no-wrap
msgid "Running in JVM or Native mode"
msgstr "在JVM或本地模式下运行"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:399
#, fuzzy
msgid "When not running in dev or test mode, you will need to start your Kafka broker.  You can follow the instructions from the https://kafka.apache.org/quickstart[Apache Kafka website] or create a `docker-compose.yaml` file with the following content:"
msgstr "当不在开发或测试模式下运行时，你将需要启动你的Kafka代理。你可以按照 link:https://kafka.apache.org/quickstart[Apache Kafka网站] 的说明，或者创建一个 `docker-compose.yaml` ，内容如下。"

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:403
#, no-wrap
msgid "version: '3.5'\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:405
#, no-wrap
msgid "services:\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:418
#, no-wrap
msgid ""
"  zookeeper:\n"
"    image: quay.io/strimzi/kafka:0.23.0-kafka-2.8.0\n"
"    command: [\n"
"      \"sh\", \"-c\",\n"
"      \"bin/zookeeper-server-start.sh config/zookeeper.properties\"\n"
"    ]\n"
"    ports:\n"
"      - \"2181:2181\"\n"
"    environment:\n"
"      LOG_DIR: /tmp/logs\n"
"    networks:\n"
"      - kafka-quickstart-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:436
#, no-wrap
msgid ""
"  kafka:\n"
"    image: quay.io/strimzi/kafka:0.23.0-kafka-2.8.0\n"
"    command: [\n"
"      \"sh\", \"-c\",\n"
"      \"bin/kafka-server-start.sh config/server.properties --override listeners=$${KAFKA_LISTENERS} --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect=$${KAFKA_ZOOKEEPER_CONNECT}\"\n"
"    ]\n"
"    depends_on:\n"
"      - zookeeper\n"
"    ports:\n"
"      - \"9092:9092\"\n"
"    environment:\n"
"      LOG_DIR: \"/tmp/logs\"\n"
"      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092\n"
"      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092\n"
"      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181\n"
"    networks:\n"
"      - kafka-quickstart-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:450
#, no-wrap
msgid ""
"  producer:\n"
"    image: quarkus-quickstarts/kafka-quickstart-producer:1.0-${QUARKUS_MODE:-jvm}\n"
"    build:\n"
"      context: producer\n"
"      dockerfile: src/main/docker/Dockerfile.${QUARKUS_MODE:-jvm}\n"
"    depends_on:\n"
"      - kafka\n"
"    environment:\n"
"      KAFKA_BOOTSTRAP_SERVERS: kafka:9092\n"
"    ports:\n"
"      - \"8080:8080\"\n"
"    networks:\n"
"      - kafka-quickstart-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:462
#, no-wrap
msgid ""
"  processor:\n"
"    image: quarkus-quickstarts/kafka-quickstart-processor:1.0-${QUARKUS_MODE:-jvm}\n"
"    build:\n"
"      context: processor\n"
"      dockerfile: src/main/docker/Dockerfile.${QUARKUS_MODE:-jvm}\n"
"    depends_on:\n"
"      - kafka\n"
"    environment:\n"
"      KAFKA_BOOTSTRAP_SERVERS: kafka:9092\n"
"    networks:\n"
"      - kafka-quickstart-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:466
#, no-wrap
msgid ""
"networks:\n"
"  kafka-quickstart-network:\n"
"    name: kafkaquickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:469
#, fuzzy
msgid "Make sure you first build both applications in JVM mode with:"
msgstr "请确保你首先在JVM模式下构建两个应用程序，并使用。"

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:474
#, no-wrap
msgid ""
"mvn -f kafka-quickstart-producer package\n"
"mvn -f kafka-quickstart-processor package\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:477
#, fuzzy
msgid "Once packaged, run `docker-compose up`."
msgstr "一旦打包好，运行 `docker-compose up` 。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:479
#, fuzzy
msgid "This is a development cluster, do not use in production."
msgstr "这是一个开发集群，不要在生产中使用。"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:482
#, fuzzy
msgid "You can also build and run our applications as native executables.  First, compile both applications as native:"
msgstr "你也可以将我们的应用程序作为本地可执行文件构建和运行。首先，将两个应用程序编译为本地程序。"

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:487
#, no-wrap
msgid ""
"mvn -f kafka-quickstart-producer package -Dnative -Dquarkus.native.container-build=true\n"
"mvn -f kafka-quickstart-processor package -Dnative -Dquarkus.native.container-build=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:490
#, fuzzy
msgid "Run the system with:"
msgstr "用以下方式运行系统。"

#. type: delimited block -
#: upstream/_guides/kafka-reactive-getting-started.adoc:495
#, no-wrap
msgid ""
"export QUARKUS_MODE=native\n"
"docker-compose up --build\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/kafka-reactive-getting-started.adoc:497
#, no-wrap
msgid "Going further"
msgstr "进一步探索"

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:501
msgid "This guide has shown how you can interact with Kafka using Quarkus.  It utilizes https://smallrye.io/smallrye-reactive-messaging[SmallRye Reactive Messaging] to build data streaming applications."
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-reactive-getting-started.adoc:503
msgid "For the exhaustive list of features and configuration options, check the xref:kafka.adoc[Reference guide for Apache Kafka Extension]."
msgstr ""

#. type: delimited block =
#: upstream/_guides/kafka-reactive-getting-started.adoc:509
msgid "In this guide we explore Smallrye Reactive Messaging framework to interact with Apache Kafka.  Quarkus extension for Kafka also allows xref:kafka.adoc#kafka-bare-clients[using Kafka clients directly]."
msgstr ""
