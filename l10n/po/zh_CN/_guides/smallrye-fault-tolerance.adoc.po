# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/smallrye-fault-tolerance.adoc:6
#, fuzzy, no-wrap
msgid "SmallRye Fault Tolerance"
msgstr "SmallRye的容错性"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:15
#, fuzzy
msgid "One of the challenges brought by the distributed nature of microservices is that communication with external systems is inherently unreliable. This increases demand on resiliency of applications. To simplify making more resilient applications, Quarkus provides https://github.com/smallrye/smallrye-fault-tolerance/[SmallRye Fault Tolerance] an implementation of the https://github.com/eclipse/microprofile-fault-tolerance/[MicroProfile Fault Tolerance] specification."
msgstr "微服务的分布式性质带来的挑战之一是，与外部系统的通信本质上是不可靠的。这增加了对应用程序弹性的要求。为了简化制作更有弹性的应用程序，Quarkus提供了 link:https://github.com/smallrye/smallrye-fault-tolerance/[SmallRye Fault Tolerance] ，这是 link:https://github.com/eclipse/microprofile-fault-tolerance/[MicroProfile Fault Tolerance] 规范的实现。"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:18
#, fuzzy
msgid "In this guide, we demonstrate usage of MicroProfile Fault Tolerance annotations such as `@Timeout`, `@Fallback`, `@Retry` and `@CircuitBreaker`."
msgstr "在本指南中，我们展示了MicroProfile容错注释的用法，如 `@Timeout` , `@Fallback` , `@Retry` 和 `@CircuitBreaker` 。"

#. type: Title ==
#: upstream/_guides/smallrye-fault-tolerance.adoc:19
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: upstream/_guides/smallrye-fault-tolerance.adoc:23
#, fuzzy, no-wrap
msgid "The Scenario"
msgstr "场景"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:27
#, fuzzy
msgid "The application built in this guide simulates a simple backend for a gourmet coffee e-shop. It implements a REST endpoint providing information about coffee samples we have on store."
msgstr "本指南中构建的应用程序模拟了一个美食咖啡电子商店的简单后端。它实现了一个REST端点，提供关于我们商店里的咖啡样品的信息。"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:30
#, fuzzy
msgid "Let's imagine, although it's not implemented as such, that some of the methods in our endpoint require communication to external services like a database or an external microservice, which introduces a factor of unreliability."
msgstr "让我们想象一下，虽然没有这样实现，但我们端点中的一些方法需要与外部服务（如数据库或外部微服务）进行通信，这就引入了一个不可靠的因素。"

#. type: Title ==
#: upstream/_guides/smallrye-fault-tolerance.adoc:31
#, fuzzy, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:35
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议你按照下面几节的说明，一步一步地创建应用程序。然而，你可以直接进入已完成的例子。"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:37
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库。 `git clone {quickstarts-clone-url}` ，或者下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:39
#, fuzzy
msgid "The solution is located in the `microprofile-fault-tolerance-quickstart` {quickstarts-tree-url}/microprofile-fault-tolerance-quickstart[directory]."
msgstr "该解决方案位于 `microprofile-fault-tolerance-quickstart` {quickstarts-tree-url}/microprofile-fault-tolerance-quickstart[目录]中。"

#. type: Title ==
#: upstream/_guides/smallrye-fault-tolerance.adoc:40
#, fuzzy, no-wrap
msgid "Creating the Maven Project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:43
#, fuzzy
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。用以下命令创建一个新项目。"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:49
#, fuzzy
msgid "This command generates a project, importing the extensions for RESTEasy Reactive/JAX-RS and SmallRye Fault Tolerance."
msgstr "该命令生成一个项目，导入RESTEasy Reactive/JAX-RS和SmallRye Fault Tolerance的扩展。"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:52
#, fuzzy
msgid "If you already have your Quarkus project configured, you can add the `smallrye-fault-tolerance` extension to your project by running the following command in your project base directory:"
msgstr "如果你已经配置了你的Quarkus项目，你可以通过在你的项目基础目录下运行以下命令，将 `smallrye-fault-tolerance` 扩展到你的项目。"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:57
#, fuzzy
msgid "This will add the following to your build file:"
msgstr "这将在你的构建文件中添加以下内容。"

#. type: Block title
#: upstream/_guides/smallrye-fault-tolerance.adoc:59
#: upstream/_guides/smallrye-fault-tolerance.adoc:485
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:65
#: upstream/_guides/smallrye-fault-tolerance.adoc:491
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-fault-tolerance</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/smallrye-fault-tolerance.adoc:68
#: upstream/_guides/smallrye-fault-tolerance.adoc:494
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:71
#: upstream/_guides/smallrye-fault-tolerance.adoc:497
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-smallrye-fault-tolerance\")\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/smallrye-fault-tolerance.adoc:73
#, fuzzy, no-wrap
msgid "Preparing an Application: REST Endpoint and CDI Bean"
msgstr "准备一个应用程序。REST端点和CDI Bean"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:77
#, fuzzy
msgid "In this section we create a skeleton of our application, so that we have something that we can extend and to which we can add fault tolerance features later on."
msgstr "在这一节中，我们创建了一个应用程序的骨架，这样我们就有了可以扩展的东西，以后就可以在上面添加容错功能。"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:79
#, fuzzy
msgid "First, create a simple entity representing a coffee sample in our store:"
msgstr "首先，创建一个简单的实体，代表我们商店中的咖啡样品。"

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:83
#: upstream/_guides/smallrye-fault-tolerance.adoc:108
#: upstream/_guides/smallrye-fault-tolerance.adoc:153
#, no-wrap
msgid "package org.acme.microprofile.faulttolerance;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:85
#, no-wrap
msgid "public class Coffee {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:90
#, no-wrap
msgid ""
"    public Integer id;\n"
"    public String name;\n"
"    public String countryOfOrigin;\n"
"    public Integer price;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:93
#, no-wrap
msgid ""
"    public Coffee() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:101
#, no-wrap
msgid ""
"    public Coffee(Integer id, String name, String countryOfOrigin, Integer price) {\n"
"        this.id = id;\n"
"        this.name = name;\n"
"        this.countryOfOrigin = countryOfOrigin;\n"
"        this.price = price;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:104
#, fuzzy
msgid "Let's continue with a simple CDI bean, that would work as a repository of our coffee samples."
msgstr "让我们继续使用一个简单的CDI豆，它可以作为我们的咖啡样品的储存库。"

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:116
#, no-wrap
msgid ""
"import java.util.ArrayList;\n"
"import java.util.Collections;\n"
"import java.util.HashMap;\n"
"import java.util.List;\n"
"import java.util.Map;\n"
"import java.util.stream.Collectors;\n"
"import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:119
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CoffeeRepositoryService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:121
#, no-wrap
msgid "    private Map<Integer, Coffee> coffeeList = new HashMap<>();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:127
#, no-wrap
msgid ""
"    public CoffeeRepositoryService() {\n"
"        coffeeList.put(1, new Coffee(1, \"Fernandez Espresso\", \"Colombia\", 23));\n"
"        coffeeList.put(2, new Coffee(2, \"La Scala Whole Beans\", \"Bolivia\", 18));\n"
"        coffeeList.put(3, new Coffee(3, \"Dak Lak Filter\", \"Vietnam\", 25));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:131
#, no-wrap
msgid ""
"    public List<Coffee> getAllCoffees() {\n"
"        return new ArrayList<>(coffeeList.values());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:135
#, no-wrap
msgid ""
"    public Coffee getCoffeeById(Integer id) {\n"
"        return coffeeList.get(id);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:146
#, no-wrap
msgid ""
"    public List<Coffee> getRecommendations(Integer id) {\n"
"        if (id == null) {\n"
"            return Collections.emptyList();\n"
"        }\n"
"        return coffeeList.values().stream()\n"
"                .filter(coffee -> !id.equals(coffee.id))\n"
"                .limit(2)\n"
"                .collect(Collectors.toList());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:149
#, fuzzy
msgid "Finally, create the `org.acme.microprofile.faulttolerance.CoffeeResource` class as follows:"
msgstr "最后，创建 `org.acme.microprofile.faulttolerance.CoffeeResource` 类，如下所示。"

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:160
#, no-wrap
msgid ""
"import java.util.List;\n"
"import java.util.Random;\n"
"import java.util.concurrent.atomic.AtomicLong;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:162
#, no-wrap
msgid "import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:165
#, no-wrap
msgid ""
"@Path(\"/coffee\")\n"
"public class CoffeeResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:167
#, no-wrap
msgid "    private static final Logger LOGGER = Logger.getLogger(CoffeeResource.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:170
#, no-wrap
msgid ""
"    @Inject\n"
"    CoffeeRepositoryService coffeeRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:172
#: upstream/_guides/smallrye-fault-tolerance.adoc:365
#, no-wrap
msgid "    private AtomicLong counter = new AtomicLong(0);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:176
#, no-wrap
msgid ""
"    @GET\n"
"    public List<Coffee> coffees() {\n"
"        final Long invocationNumber = counter.getAndIncrement();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:178
#, no-wrap
msgid "        maybeFail(String.format(\"CoffeeResource#coffees() invocation #%d failed\", invocationNumber));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:182
#, no-wrap
msgid ""
"        LOGGER.infof(\"CoffeeResource#coffees() invocation #%d returning successfully\", invocationNumber);\n"
"        return coffeeRepository.getAllCoffees();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:190
#, no-wrap
msgid ""
"    private void maybeFail(String failureLogMessage) {\n"
"        if (new Random().nextBoolean()) {\n"
"            LOGGER.error(failureLogMessage);\n"
"            throw new RuntimeException(\"Resource failure.\");\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:195
#, fuzzy
msgid "At this point, we expose a single REST method that will show a list of coffee samples in a JSON format. Note that we introduced some fault making code in our `CoffeeResource#maybeFail()` method, which is going to cause failures in the `CoffeeResource#coffees()` endpoint method in about 50 % of requests."
msgstr "在这一点上，我们暴露了一个单一的REST方法，它将以JSON格式显示一个咖啡样本的列表。请注意，我们在 `CoffeeResource#maybeFail()` 方法中引入了一些制造故障的代码，这将导致 `CoffeeResource#coffees()` 端点方法在大约50％的请求中出现失败。"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:197
#, fuzzy
msgid "Why not check that our application works? Run the Quarkus development server with:"
msgstr "为什么不检查一下我们的应用程序是否工作呢？用以下方法运行Quarkus开发服务器。"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:203
#, fuzzy
msgid "and open `http://localhost:8080/coffee` in your browser. Make couple of requests (remember, some of them we expect to fail). At least some of the requests should show us the list of our coffee samples in JSON, the rest will fail with a `RuntimeException` thrown in `CoffeeResource#maybeFail()`."
msgstr "并打开 `<a href=\"http://localhost:8080/coffee\" class=\"bare\">http://localhost:8080/coffee</a>` 在你的浏览器中。发出几个请求（记住，其中一些请求我们预计会失败）。至少有一些请求应该在JSON中显示我们的咖啡样本列表，其余的请求将失败，并在 `CoffeeResource#maybeFail()` 中抛出一个 `RuntimeException` 。"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:205
#, fuzzy
msgid "Congratulations, you've just made a working (although somewhat unreliable) Quarkus application!"
msgstr "恭喜你，你刚刚做了一个可以工作的（虽然有点不可靠）Quarkus应用程序"

#. type: Title ==
#: upstream/_guides/smallrye-fault-tolerance.adoc:206
#, fuzzy, no-wrap
msgid "Adding Resiliency: Retries"
msgstr "增加弹性。重试"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:210
#, fuzzy
msgid "Let the Quarkus development server running and in your IDE add the `@Retry` annotation to the `CoffeeResource#coffees()` method as follows and save the file:"
msgstr "让Quarkus开发服务器运行，并在你的IDE中添加 `@Retry` 注释到 `CoffeeResource#coffees()` 方法中，如下所示并保存文件。"

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:215
#: upstream/_guides/smallrye-fault-tolerance.adoc:450
#, no-wrap
msgid ""
"import org.eclipse.microprofile.faulttolerance.Retry;\n"
"...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:225
#: upstream/_guides/smallrye-fault-tolerance.adoc:460
#, no-wrap
msgid ""
"public class CoffeeResource {\n"
"    ...\n"
"    @GET\n"
"    @Retry(maxRetries = 4)\n"
"    public List<Coffee> coffees() {\n"
"        ...\n"
"    }\n"
"    ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:229
#, fuzzy
msgid "Hit refresh in your browser. The Quarkus development server will automatically detect the changes and recompile the app for you, so there's no need to restart it."
msgstr "在你的浏览器中点击刷新。Quarkus开发服务器会自动检测到这些变化，并为你重新编译应用程序，所以不需要重新启动它。"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:233
#, fuzzy
msgid "You can hit refresh couple more times. Practically all requests should now be succeeding. The `CoffeeResource#coffees()` method is still in fact failing in about 50 % of time, but every time it happens, the platform will automatically retry the call!"
msgstr "你可以再点击刷新几次。实际上，现在所有的请求都应该是成功的。 `CoffeeResource#coffees()` 方法实际上仍有大约50%的时间是失败的，但每次发生这种情况，平台都会自动重试调用。"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:236
#, fuzzy
msgid "To see that that the failures still happen, check the output of the development server. The log messages should be similar to these:"
msgstr "要想知道故障是否仍然发生，请检查开发服务器的输出。日志信息应该与这些类似。"

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:244
#, no-wrap
msgid ""
"2019-03-06 12:17:41,725 INFO  [org.acm.fau.CoffeeResource] (XNIO-1 task-1) CoffeeResource#coffees() invocation #5 returning successfully\n"
"2019-03-06 12:17:44,187 INFO  [org.acm.fau.CoffeeResource] (XNIO-1 task-1) CoffeeResource#coffees() invocation #6 returning successfully\n"
"2019-03-06 12:17:45,166 ERROR [org.acm.fau.CoffeeResource] (XNIO-1 task-1) CoffeeResource#coffees() invocation #7 failed\n"
"2019-03-06 12:17:45,172 ERROR [org.acm.fau.CoffeeResource] (XNIO-1 task-1) CoffeeResource#coffees() invocation #8 failed\n"
"2019-03-06 12:17:45,176 INFO  [org.acm.fau.CoffeeResource] (XNIO-1 task-1) CoffeeResource#coffees() invocation #9 returning successfully\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:249
#, fuzzy
msgid "You can see that every time an invocation fails, it's immediately followed by another invocation, until one succeeds.  Since we allowed 4 retries, it would require 5 invocations to fail in a row, in order for the user to be actually exposed to a failure. Which is fairly unlikely to happen."
msgstr "你可以看到，每次调用失败，紧接着就是另一个调用，直到一个调用成功。由于我们允许4次重试，所以需要连续5次调用失败，以使用户真正暴露在失败中。这是不可能发生的。"

#. type: Title ==
#: upstream/_guides/smallrye-fault-tolerance.adoc:250
#, fuzzy, no-wrap
msgid "Adding Resiliency: Timeouts"
msgstr "增加弹性。超时"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:253
#, fuzzy
msgid "So what else have we got in MicroProfile Fault Tolerance? Let's look into timeouts."
msgstr "那么，我们在MicroProfile容错中还有什么？让我们来看看超时。"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:256
#, fuzzy
msgid "Add following two methods to our `CoffeeResource` endpoint. Again, no need to restart the server, just paste the code and save the file."
msgstr "将以下两个方法添加到我们的 `CoffeeResource` 端点。同样，不需要重新启动服务器，只需粘贴代码并保存文件。"

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:269
#, no-wrap
msgid ""
"import org.eclipse.microprofile.faulttolerance.Timeout;\n"
"...\n"
"public class CoffeeResource {\n"
"    ...\n"
"    @GET\n"
"    @Path(\"/{id}/recommendations\")\n"
"    @Timeout(250)\n"
"    public List<Coffee> recommendations(int id) {\n"
"        long started = System.currentTimeMillis();\n"
"        final long invocationNumber = counter.getAndIncrement();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:280
#, no-wrap
msgid ""
"        try {\n"
"            randomDelay();\n"
"            LOGGER.infof(\"CoffeeResource#recommendations() invocation #%d returning successfully\", invocationNumber);\n"
"            return coffeeRepository.getRecommendations(id);\n"
"        } catch (InterruptedException e) {\n"
"            LOGGER.errorf(\"CoffeeResource#recommendations() invocation #%d timed out after %d ms\",\n"
"                    invocationNumber, System.currentTimeMillis() - started);\n"
"            return null;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:285
#, no-wrap
msgid ""
"    private void randomDelay() throws InterruptedException {\n"
"        Thread.sleep(new Random().nextInt(500));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:291
#, fuzzy
msgid "We added some new functionality. We want to be able to recommend some related coffees based on a coffee that a user is currently looking at. It's not a critical functionality, it's a nice-to-have. When the system is overloaded and the logic behind obtaining recommendations takes too long to execute, we would rather time out and render the UI without recommendations."
msgstr "我们增加了一些新的功能。我们希望能够根据用户目前正在看的咖啡来推荐一些相关的咖啡。这不是一个关键的功能，而是一个很好的选择。当系统过载，获得推荐背后的逻辑需要太长的时间来执行时，我们宁愿超时，渲染没有推荐的用户界面。"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:294
#, fuzzy
msgid "Note that the timeout was configured to 250 ms, and a random artificial delay between 0 to 500 ms was introduced into the `CoffeeResource#recommendations()` method."
msgstr "请注意，超时被配置为250毫秒，并且在 `CoffeeResource#recommendations()` 方法中引入了0至500毫秒的随机人工延迟。"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:296
#, fuzzy
msgid "In your browser, go to `http://localhost:8080/coffee/2/recommendations` and hit refresh a couple of times."
msgstr "在你的浏览器中，转到 `<a href=\"http://localhost:8080/coffee/2/recommendations\" class=\"bare\">http://localhost:8080/coffee/2/recommendations</a>` 并点击刷新几次。"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:299
#, fuzzy
msgid "You should see some requests time out with `org.eclipse.microprofile.faulttolerance.exceptions.TimeoutException`.  Requests that do not time out should show two recommended coffee samples in JSON."
msgstr "你应该看到一些请求超时了， `org.eclipse.microprofile.faulttolerance.exceptions.TimeoutException` 。没有超时的请求应该在JSON中显示两个推荐的咖啡样本。"

#. type: Title ==
#: upstream/_guides/smallrye-fault-tolerance.adoc:300
#, fuzzy, no-wrap
msgid "Adding Resiliency: Fallbacks"
msgstr "增加复原力。后退"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:304
#, fuzzy
msgid "Let's make our recommendations feature even better by providing a fallback (and presumably faster) way of getting related coffees."
msgstr "让我们通过提供一个获得相关咖啡的后备方式（大概是更快的方式）来使我们的推荐功能更加完善。"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:307
#, fuzzy
msgid "Add a fallback method to `CoffeeResource` and a `@Fallback` annotation to `CoffeeResource#recommendations()` method as follows:"
msgstr "在 `CoffeeResource` 中添加一个回退方法，在 `CoffeeResource#recommendations()` 方法中添加一个 `@Fallback` 注释，如下所示。"

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:312
#, no-wrap
msgid ""
"import java.util.Collections;\n"
"import org.eclipse.microprofile.faulttolerance.Fallback;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:320
#, no-wrap
msgid ""
"...\n"
"public class CoffeeResource {\n"
"    ...\n"
"    @Fallback(fallbackMethod = \"fallbackRecommendations\")\n"
"    public List<Coffee> recommendations(int id) {\n"
"        ...\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:328
#, no-wrap
msgid ""
"    public List<Coffee> fallbackRecommendations(int id) {\n"
"        LOGGER.info(\"Falling back to RecommendationResource#fallbackRecommendations()\");\n"
"        // safe bet, return something that everybody likes\n"
"        return Collections.singletonList(coffeeRepository.getCoffeeById(1));\n"
"    }\n"
"    ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:334
#, fuzzy
msgid "Hit refresh several times on `http://localhost:8080/coffee/2/recommendations`.  The `TimeoutException` should not appear anymore. Instead, in case of a timeout, the page will display a single recommendation that we hardcoded in our fallback method `fallbackRecommendations()`, rather than two recommendations returned by the original method."
msgstr "点击刷新数次，在 `<a href=\"http://localhost:8080/coffee/2/recommendations\" class=\"bare\">http://localhost:8080/coffee/2/recommendations</a>` . `TimeoutException` 应该不会再出现。相反，在超时的情况下，页面将显示一个我们在回退方法 `fallbackRecommendations()` 中硬编码的单一建议，而不是由原始方法返回的两个建议。"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:336
#, fuzzy
msgid "Check the server output to see that fallback is really happening:"
msgstr "检查服务器输出，看是否真的发生了回落。"

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:342
#, no-wrap
msgid ""
"2020-01-09 13:21:34,250 INFO  [org.acm.fau.CoffeeResource] (executor-thread-1) CoffeeResource#recommendations() invocation #1 returning successfully\n"
"2020-01-09 13:21:36,354 ERROR [org.acm.fau.CoffeeResource] (executor-thread-1) CoffeeResource#recommendations() invocation #2 timed out after 250 ms\n"
"2020-01-09 13:21:36,355 INFO  [org.acm.fau.CoffeeResource] (executor-thread-1) Falling back to RecommendationResource#fallbackRecommendations()\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:345
#, fuzzy
msgid "The fallback method is required to have the same parameters as the original method."
msgstr "回落方法需要有与原始方法相同的参数。"

#. type: Title ==
#: upstream/_guides/smallrye-fault-tolerance.adoc:346
#, fuzzy, no-wrap
msgid "Adding Resiliency: Circuit Breaker"
msgstr "增加弹性。断路器"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:352
#, fuzzy
msgid "A circuit breaker is useful for limiting number of failures happening in the system, when part of the system becomes temporarily unstable. The circuit breaker records successful and failed invocations of a method, and when the ratio of failed invocations reaches the specified threshold, the circuit breaker _opens_ and blocks all further invocations of that method for a given time."
msgstr "当系统的一部分变得暂时不稳定时，断路器对于限制系统中发生的故障数量非常有用。断路器记录一个方法的成功和失败的调用，当失败的调用比例达到指定的阈值时，断路器就会 _打开_ ，并在一定时间内阻止该方法的所有进一步调用。"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:354
#, fuzzy
msgid "Add the following code into the `CoffeeRepositoryService` bean, so that we can demonstrate a circuit breaker in action:"
msgstr "在 `CoffeeRepositoryService` bean中添加以下代码，这样我们就可以演示断路器的动作。"

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:360
#, no-wrap
msgid ""
"import java.util.concurrent.atomic.AtomicLong;\n"
"import org.eclipse.microprofile.faulttolerance.CircuitBreaker;\n"
"...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:363
#, no-wrap
msgid ""
"public class CoffeeRepositoryService {\n"
"    ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:371
#, no-wrap
msgid ""
"    @CircuitBreaker(requestVolumeThreshold = 4)\n"
"    public Integer getAvailability(Coffee coffee) {\n"
"        maybeFail();\n"
"        return new Random().nextInt(30);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:380
#, no-wrap
msgid ""
"    private void maybeFail() {\n"
"        // introduce some artificial failures\n"
"        final Long invocationNumber = counter.getAndIncrement();\n"
"        if (invocationNumber % 4 > 1) { // alternate 2 successful and 2 failing invocations\n"
"            throw new RuntimeException(\"Service failed.\");\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:383
#, fuzzy
msgid "And inject the code below into the `CoffeeResource` endpoint:"
msgstr "并将下面的代码注入到 `CoffeeResource` 端点。"

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:392
#, no-wrap
msgid ""
"public class CoffeeResource {\n"
"    ...\n"
"    @Path(\"/{id}/availability\")\n"
"    @GET\n"
"    public Response availability(int id) {\n"
"        final Long invocationNumber = counter.getAndIncrement();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:398
#, no-wrap
msgid ""
"        Coffee coffee = coffeeRepository.getCoffeeById(id);\n"
"        // check that coffee with given id exists, return 404 if not\n"
"        if (coffee == null) {\n"
"            return Response.status(Response.Status.NOT_FOUND).build();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:414
#, no-wrap
msgid ""
"        try {\n"
"            Integer availability = coffeeRepository.getAvailability(coffee);\n"
"            LOGGER.infof(\"CoffeeResource#availability() invocation #%d returning successfully\", invocationNumber);\n"
"            return Response.ok(availability).build();\n"
"        } catch (RuntimeException e) {\n"
"            String message = e.getClass().getSimpleName() + \": \" + e.getMessage();\n"
"            LOGGER.errorf(\"CoffeeResource#availability() invocation #%d failed: %s\", invocationNumber, message);\n"
"            return Response.status(Response.Status.INTERNAL_SERVER_ERROR)\n"
"                    .entity(message)\n"
"                    .type(MediaType.TEXT_PLAIN_TYPE)\n"
"                    .build();\n"
"        }\n"
"    }\n"
"    ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:418
#, fuzzy
msgid "We added another functionality - the application can return the amount of remaining packages of given coffee on our store (just a random number)."
msgstr "我们增加了另一个功能--应用程序可以返回我们商店中指定咖啡的剩余包装数量（只是一个随机数字）。"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:421
#, fuzzy
msgid "This time an artificial failure was introduced in the CDI bean: the `CoffeeRepositoryService#getAvailability()` method is going to alternate between two successful and two failed invocations."
msgstr "这次在CDI豆中引入了一个人为的失败： `CoffeeRepositoryService#getAvailability()` 方法要在两次成功和两次失败的调用中交替进行。"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:425
#, fuzzy
msgid "We also added a `@CircuitBreaker` annotation with `requestVolumeThreshold = 4`. `CircuitBreaker.failureRatio` is by default 0.5, and `CircuitBreaker.delay` is by default 5 seconds. That means that a circuit breaker will open when 2 of the last 4 invocations failed and it will stay open for 5 seconds."
msgstr "我们还添加了一个 `@CircuitBreaker` 注释，其中 `requestVolumeThreshold = 4` 。 `CircuitBreaker.failureRatio` 默认为0.5，而 `CircuitBreaker.delay` 默认为5秒。这意味着，当最后4次调用中的2次失败时，断路器就会打开，而且会保持5秒。"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:427
#, fuzzy
msgid "To test this out, do the following:"
msgstr "为了测试这一点，请做以下工作。"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:429
#, fuzzy
msgid "Go to `http://localhost:8080/coffee/2/availability` in your browser. You should see a number being returned."
msgstr "转到 `<a href=\"http://localhost:8080/coffee/2/availability\" class=\"bare\">http://localhost:8080/coffee/2/availability</a>` 在你的浏览器中。你应该看到一个数字被返回。"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:430
#, fuzzy
msgid "Hit refresh, this second request should again be successful and return a number."
msgstr "点击刷新，这第二个请求应该再次成功并返回一个数字。"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:432
#, fuzzy
msgid "Refresh two more times. Both times you should see text \"RuntimeException: Service failed.\", which is the exception thrown by `CoffeeRepositoryService#getAvailability()`."
msgstr "再刷新两次。这两次你都应该看到文本 \"RuntimeException:服务失败。\"，这是由 `CoffeeRepositoryService#getAvailability()` .com抛出的异常。"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:435
#, fuzzy
msgid "Refresh a couple more times. Unless you waited too long, you should again see exception, but this time it's \"CircuitBreakerOpenException: getAvailability\". This exception indicates that the circuit breaker opened and the `CoffeeRepositoryService#getAvailability()` method is not being called anymore."
msgstr "再刷新几次。除非你等得太久，否则你应该再次看到异常，但这次是 \"CircuitBreakerOpenException: getAvailability\"。这个异常表明断路器打开了， `CoffeeRepositoryService#getAvailability()` 方法不再被调用了。"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:437
#, fuzzy
msgid "Give it 5 seconds during which circuit breaker should close and you should be able to make two successful requests again."
msgstr "给它5秒钟，在此期间，断路器应该关闭，你应该能够再次成功地发出两个请求。"

#. type: Title ==
#: upstream/_guides/smallrye-fault-tolerance.adoc:438
#, fuzzy, no-wrap
msgid "Runtime configuration"
msgstr "运行时配置"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:441
#, fuzzy
msgid "You can override the annotations parameters at runtime inside your `application.properties` file."
msgstr "你可以在运行时在你的 `application.properties` 文件中覆盖注释参数。"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:443
#, fuzzy
msgid "If we take the retry example that we already saw:"
msgstr "如果我们以我们已经看到的重试为例。"

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:447
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:463
#, fuzzy
msgid "We can override the `maxRetries` parameter with 6 retries instead of 4 by the following configuration item:"
msgstr "我们可以通过以下配置项覆盖 `maxRetries` 参数，用6次重试代替4次。"

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:466
#, no-wrap
msgid "org.acme.CoffeeResource/coffees/Retry/maxRetries=6\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:470
#, fuzzy
msgid "The format is `fully-qualified-class-name/method-name/annotation-name/property-name=value`.  You can also configure a property for all the annotation via `annotation-name/property-name=value`."
msgstr "其格式为： `fully-qualified-class-name/method-name/annotation-name/property-name=value` 。你也可以通过 `annotation-name/property-name=value` ，为所有注释配置一个属性。"

#. type: Title ==
#: upstream/_guides/smallrye-fault-tolerance.adoc:471
#, fuzzy, no-wrap
msgid "Conclusion"
msgstr "总结"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:475
#, fuzzy
msgid "SmallRye Fault Tolerance allows to improve resiliency of your application, without having an impact on the complexity of our business logic."
msgstr "SmallRye Fault Tolerance允许提高你的应用程序的弹性，而不影响我们业务逻辑的复杂性。"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:477
#, fuzzy
msgid "All that is needed to enable the fault tolerance features in Quarkus is:"
msgstr "启用Quarkus中的容错功能所需要的是。"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:480
#, fuzzy
msgid "adding the `smallrye-fault-tolerance` Quarkus extension to your project using the `quarkus-maven-plugin`:"
msgstr " `quarkus-maven-plugin` 使用 `smallrye-fault-tolerance` Quarkus扩展添加到你的项目中。"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:483
#, fuzzy
msgid "or simply adding the following Maven dependency:"
msgstr "或简单地添加以下Maven依赖。"

#. type: Title ==
#: upstream/_guides/smallrye-fault-tolerance.adoc:500
#, fuzzy, no-wrap
msgid "Additional resources"
msgstr "额外资源"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:504
#, fuzzy
msgid "SmallRye Fault Tolerance has more features than shown here.  Please check the link:https://smallrye.io/docs/smallrye-fault-tolerance/5.4.0/index.html[SmallRye Fault Tolerance documentation] to learn about them."
msgstr "SmallRye Fault Tolerance的功能比这里显示的要多。请查阅 link:https://smallrye.io/docs/smallrye-fault-tolerance/5.4.0/index.html[SmallRye Fault Tolerance文档] 以了解它们。"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:506
#, fuzzy
msgid "In Quarkus, you can use the SmallRye Fault Tolerance optional features out of the box."
msgstr "在Quarkus中，你可以使用SmallRye Fault Tolerance的可选功能，开箱即用。"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:508
#, fuzzy
msgid "Support for Mutiny is present, so your asynchronous methods can return `Uni` in addition to `CompletionStage`."
msgstr "对Mutiny的支持是存在的，所以你的异步方法除了返回 `CompletionStage` ，还可以返回 `Uni` 。"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:510
#, fuzzy
msgid "MicroProfile Context Propagation is integrated with Fault Tolerance, so existing contexts are automatically propagated to your asynchronous methods."
msgstr "MicroProfile上下文传播与容错性集成，因此现有的上下文会自动传播到你的异步方法。"

#. type: delimited block =
#: upstream/_guides/smallrye-fault-tolerance.adoc:515
#, fuzzy
msgid "This also applies to the CDI request context: if it is active on the original thread, it is propagated to the new thread, but if it's not, then the new thread won't have it either.  This is contrary to MicroProfile Fault Tolerance specification, which states that the request context must be active during the `@Asynchronous` method invocation."
msgstr "这也适用于CDI请求上下文：如果它在原线程上是活动的，它就会被传播到新线程，但如果它不是，那么新线程也不会有它。这与MicroProfile容错规范相悖，该规范指出，在 `@Asynchronous` 方法调用期间，请求上下文必须是活动的。"

#. type: delimited block =
#: upstream/_guides/smallrye-fault-tolerance.adoc:518
#, fuzzy
msgid "We believe that in presence of MicroProfile Context Propagation, this requirement should not apply.  The entire point of context propagation is to make sure the new thread has the same contexts as the original thread."
msgstr "我们认为，在MicroProfile上下文传播的情况下，这一要求不应该适用。上下文传播的全部意义在于确保新线程拥有与原线程相同的上下文。"

#. type: Plain text
#: upstream/_guides/smallrye-fault-tolerance.adoc:523
#, fuzzy
msgid "Non-compatible mode is enabled by default.  This means that methods that return `CompletionStage` (or `Uni`) have asynchronous fault tolerance applied without any `@Asynchronous`, `@Blocking` or `@NonBlocking` annotation.  It also means that circuit breaker, fallback and retry automatically inspect the exception cause chain if the exception itself is insufficient to decide what should happen."
msgstr "非兼容模式是默认启用的。这意味着返回 `CompletionStage` （或 `Uni` ）的方法在没有任何 `@Asynchronous` 、 `@Blocking` 或 `@NonBlocking` 注释的情况下应用异步容错。这也意味着，如果异常本身不足以决定应该发生什么，断路器、回退和重试会自动检查异常原因链。"

#. type: delimited block =
#: upstream/_guides/smallrye-fault-tolerance.adoc:528
#, fuzzy
msgid "This mode is not compatible with the MicroProfile Fault Tolerance specification, albeit the incompatibility is very small.  To restore full compatibility, add this configuration property:"
msgstr "这种模式与MicroProfile容错规范不兼容，尽管不兼容的程度非常小。要恢复完全的兼容性，请添加这个配置属性。"

#. type: delimited block -
#: upstream/_guides/smallrye-fault-tolerance.adoc:532
#, no-wrap
msgid "smallrye.faulttolerance.mp-compatibility=true\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/smallrye-fault-tolerance.adoc:537
#, fuzzy
msgid "The link:https://smallrye.io/docs/smallrye-fault-tolerance/5.4.0/usage/programmatic-api.html[programmatic API] is present, including Mutiny support, and integrated with the declarative, annotation-based API.  You can use the `FaultTolerance` and `MutinyFaultTolerance` APIs out of the box."
msgstr "link:https://smallrye.io/docs/smallrye-fault-tolerance/5.4.0/usage/programmatic-api.html[程序化的API] 是存在的，包括Mutiny支持，并与声明性的、基于注解的API集成。你可以使用 `FaultTolerance` 和 `MutinyFaultTolerance` API，开箱即用。"

#. type: delimited block =
#: upstream/_guides/smallrye-fault-tolerance.adoc:538
msgid "Support for Kotlin is present (assuming you use the Quarkus extension for Kotlin), so you can guard your `suspend` functions with fault tolerance annotations."
msgstr ""
