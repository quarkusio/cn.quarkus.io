# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/funqy-http.adoc:6
#, fuzzy, no-wrap
msgid "Funqy HTTP Binding (Standalone)"
msgstr "Funqy HTTP绑定（独立的）。"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:13
#, fuzzy
msgid "The guide walks through quickstart code to show you how you can deploy Funqy as a standalone service and invoke on Funqy functions using HTTP."
msgstr "本指南通过快速入门代码向您展示如何将Funqy部署为独立的服务并使用HTTP调用Funqy的功能。"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:20
#, fuzzy
msgid "The Funqy HTTP binding is not a replacement for REST over HTTP.  Because Funqy needs to be portable across a lot of different protocols and function providers its HTTP binding is very minimalistic and you will lose REST features like linking and the ability to leverage HTTP features like cache-control and conditional GETs.  You may want to consider using Quarkus's JAX-RS, Spring MVC, or Vert.x Web Reactive Routes support instead, although Funqy will have less overhead than these alternatives (except Vert.x which is still super fast)."
msgstr "Funqy HTTP绑定不是REST在HTTP上的替代。因为Funqy需要在很多不同的协议和功能提供者之间进行移植，它的HTTP绑定是非常简约的，你将失去REST功能，如链接和利用HTTP功能的能力，如缓存控制和条件GET。你可以考虑使用Quarkus的JAX-RS、Spring MVC或Vert.x Web Reactive Routes支持来代替，尽管Funqy的开销会比这些替代品少（除了Vert.x，它仍然是超级快的）。"

#. type: Title ==
#: upstream/_guides/funqy-http.adoc:21
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:26
#, fuzzy
msgid "Read about xref:funqy.adoc[Funqy Basics].  This is a short read!"
msgstr "阅读关于 link:funqy.html[Funqy基础知识] 。这是一个简短的阅读!"

#. type: Title ==
#: upstream/_guides/funqy-http.adoc:27
#, fuzzy, no-wrap
msgid "The Quickstart"
msgstr "快速入门"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:30
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库。 `git clone {quickstarts-clone-url}` ，或者下载一个{quickstarts-archive-url}[存档]。"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:32
#, fuzzy
msgid "The solution is located in the `funqy-http-quickstart` {quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart[directory]."
msgstr "该解决方案位于 `funqy-http-quickstart` {quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart[目录]中。"

#. type: Title ==
#: upstream/_guides/funqy-http.adoc:33
#, fuzzy, no-wrap
msgid "The Code"
msgstr "准则"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:37
#, fuzzy
msgid "If you look at the Java code, you'll see that there is no HTTP specific API.  Its just simple Java methods annotated with `@Funq`.  Simple, easy, straightforward."
msgstr "如果你看一下Java代码，你会发现没有HTTP特定的API。它只是用 `@Funq` 注释的简单Java方法。简单，容易，直截了当。"

#. type: Title ==
#: upstream/_guides/funqy-http.adoc:38
#, fuzzy, no-wrap
msgid "Maven Dependencies"
msgstr "Maven的依赖性"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:41
#, fuzzy
msgid "To write Funqy HTTP functions, simply include the `quarkus-funqy-http` dependency into your Quarkus `pom.xml` file:"
msgstr "要编写Funqy HTTP函数，只需将 `quarkus-funqy-http` 依赖关系纳入你的Quarkus `pom.xml` 文件。"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:48
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-funqy-http</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/funqy-http.adoc:50
#, fuzzy, no-wrap
msgid "Build Project"
msgstr "建立项目"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:55
#, no-wrap
msgid "mvn clean quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:58
#, fuzzy
msgid "This starts your functions in Quarkus dev mode."
msgstr "这将在Quarkus开发模式下启动你的功能。"

#. type: Title ==
#: upstream/_guides/funqy-http.adoc:59
#, fuzzy, no-wrap
msgid "Execute Funqy HTTP functions"
msgstr "执行Funqy HTTP函数"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:63
#, fuzzy
msgid "The URL path to execute a function is the function name.  For example if your function name is `foo` then the URL path to execute the function would be `/foo`."
msgstr "执行一个函数的URL路径就是函数名称。例如，如果你的函数名称是 `foo` ，那么执行该函数的URL路径将是 `/foo` 。"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:67
#, fuzzy
msgid "The HTTP POST or GET methods can be used to invoke on a function.  The return value of the function is marshalled to JSON using the Jackson JSON library.  Jackson annotations can be used.  If your function has an input parameter, a POST invocation must use JSON as the input type.  Jackson is also used here for unmarshalling."
msgstr "HTTP POST或GET方法可以用来调用一个函数。函数的返回值使用Jackson JSON库被编入JSON。可以使用Jackson注解。如果你的函数有一个输入参数，POST调用必须使用JSON作为输入类型。这里也使用了Jackson来解压。"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:70
#, fuzzy
msgid "You can invoke the `hello` function defined in {quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/PrimitiveFunctions.java[PrimitiveFunctions.java] by pointing your browser to http://localhost:8080/hello"
msgstr " `hello` 你可以调用{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/PrimitiveFunctions.java[PrimitiveFunctions.java]中定义的函数，将你的浏览器指向 http://localhost:8080/hello "

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:74
#, fuzzy
msgid "Invoking the other functions in the quickstart requires an HTTP POST.  To execute the `greet` function defined in {quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/GreetingFunction.java[GreetingFunction.java] invoke this curl script."
msgstr "调用快速启动中的其他函数需要一个HTTP POST。要执行{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/GreetingFunction.java[GreetingFunction.java]中定义的 `greet` 函数，请调用这个curl脚本。"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:81
#, no-wrap
msgid ""
"curl \"http://localhost:8080/greet\" \\\n"
"-X POST \\\n"
"-H \"Content-Type: application/json\" \\\n"
"-d '{\"name\":\"Bill\"}'\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:86
#, fuzzy
msgid "Primitive types can also be passed as input using the standard JSON mapping for them.  To execute the `toLowerCase` function defined in {quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/PrimitiveFunctions.java[PrimitiveFunctions.java] invoke this curl script:"
msgstr "原始类型也可以使用标准的JSON映射作为输入来传递。要执行{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/PrimitiveFunctions.java[PrimitiveFunctions.java]中定义的 `toLowerCase` 函数，请调用这个curl脚本。"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:93
#, no-wrap
msgid ""
"curl \"http://localhost:8080/toLowerCase\" \\\n"
"-X POST \\\n"
"-H \"Content-Type: application/json\" \\\n"
"-d '\"HELLO WORLD\"'\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:97
#, fuzzy
msgid "To execute the `double` function defined in {quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/PrimitiveFunctions.java[PrimitiveFunctions.java] invoke this curl script:"
msgstr "要执行{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/PrimitiveFunctions.java[PrimitiveFunctions.java]中定义的 `double` 函数，请调用这个curl脚本。"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:104
#, no-wrap
msgid ""
"curl \"http://localhost:8080/double\" \\\n"
"-X POST \\\n"
"-H \"Content-Type: application/json\" \\\n"
"-d '2'\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/funqy-http.adoc:106
#, fuzzy, no-wrap
msgid "GET Query Parameter Mapping"
msgstr "GET查询参数映射"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:112
#, fuzzy
msgid "For GET requests, the Funqy HTTP Binding also has a query parameter mapping for function input parameters.  Only bean style classes and `java.util.Map` can be used for your input parameter.  For bean style classes, query parameter names are mapped to properties on the bean class.  Here's an example of a simple `Map`:"
msgstr "对于GET请求，Funqy HTTP绑定也有一个查询参数映射用于函数输入参数。只有Bean风格的类和 `java.util.Map` ，可以用于你的输入参数。对于Bean风格的类，查询参数名称被映射到Bean类的属性上。下面是一个简单的 `Map` 的例子。"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:119
#, no-wrap
msgid ""
"@Funq\n"
"public String hello(Map<String, Integer> map) {\n"
"...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:123
#, fuzzy
msgid "Key values must be a primitive type (except char) or `String`.  Values can be primitives (except char), `String`, `OffsetDateTime` or a complex bean style class.  For the above example, here's the corresponding curl request:"
msgstr "键值必须是原始类型（char除外）或 `String` 。值可以是原始类型（char除外）、 `String` 、 `OffsetDateTime` 或复杂的bean风格的类。对于上面的例子，下面是相应的curl请求。"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:127
#, no-wrap
msgid "curl \"http://localhost:8080/a=1&b=2\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:130
#, fuzzy
msgid "The `map` input parameter of the `hello` function would have the key value pairs: `a`->1, `b`->2."
msgstr " `hello` 函数的 `map` 输入参数将有键值对： `a` →1, `b` →2。"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:132
#, fuzzy
msgid "Bean style classes can also be use as the input parameter type.  Here's an example:"
msgstr "Bean风格类也可以作为输入参数类型。这里有一个例子。"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:138
#, no-wrap
msgid ""
"public class Person {\n"
"    String first;\n"
"    String last;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:144
#, no-wrap
msgid ""
"    public String getFirst() { return first; }\n"
"    public void setFirst(String first) { this.first = first; }\n"
"    public String getLast() { return last; }\n"
"    public void setLast(String last) { this.last = last; }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:151
#, no-wrap
msgid ""
"public class MyFunctions {\n"
"    @Funq\n"
"    public String greet(Person p) {\n"
"       return \"Hello \" + p.getFirst() + \" \" + p.getLast();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:155
#, fuzzy
msgid "Property values can be any primitive type except `char`. It can also be `String`, and `OffsetDateTime`.  `OffsetDateTime` query param values must be in ISO-8601 format."
msgstr "属性值可以是任何原始类型，除了 `char` 。也可以是 `String` ，和 `OffsetDateTime` 。 `OffsetDateTime` 查询参数值必须是ISO-8601格式。"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:157
#, fuzzy
msgid "You can invoke on this using an HTTP GET and query parameters:"
msgstr "你可以使用HTTP GET和查询参数对其进行调用。"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:161
#, no-wrap
msgid "curl \"http://localhost:8080/greet?first=Bill&last=Burke\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:164
#, fuzzy
msgid "In the above request, the query parameter names are mapped to corresponding properties in the input class."
msgstr "在上述请求中，查询参数名称被映射到输入类中的相应属性。"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:166
#, fuzzy
msgid "The input class can also have nested bean classes.  Expanding on the previous example:"
msgstr "输入类也可以有嵌套的bean类。在前面的例子上展开。"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:172
#, no-wrap
msgid ""
"public class Family {\n"
"    private Person dad;\n"
"    private Person mom;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:178
#, no-wrap
msgid ""
"    public Person getDad() { return dad; }\n"
"    public void setDad(Person dad) { this.dad = dad; }\n"
"    public Person getMom() { return mom; }\n"
"    public void setMom(Person mom) { this.mom = mom; }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:185 upstream/_guides/funqy-http.adoc:211
#: upstream/_guides/funqy-http.adoc:238 upstream/_guides/funqy-http.adoc:270
#: upstream/_guides/funqy-http.adoc:295
#, no-wrap
msgid ""
"public class MyFunctions {\n"
"    @Funq\n"
"    public String greet(Family family) {\n"
"       ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:189
#, fuzzy
msgid "In this case, query parameters for nested values use the `.` notation.  For example:"
msgstr "在这种情况下，嵌套值的查询参数使用 `.` 符号。比如说。"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:193
#, no-wrap
msgid "curl \"http://localhost:8080/greet?dad.first=John&dad.last=Smith&mom.first=Martha&mom.last=Smith\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:196
#, fuzzy
msgid "`java.util.List` and `Set` are also supported as property values.  For example:"
msgstr " `java.util.List` 和 ，也被支持作为属性值。比如说。 `Set` "

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:201 upstream/_guides/funqy-http.adoc:228
#: upstream/_guides/funqy-http.adoc:260 upstream/_guides/funqy-http.adoc:285
#, no-wrap
msgid ""
"public class Family {\n"
"    ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:204
#, no-wrap
msgid ""
"    List<String> pets;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:215
#, fuzzy
msgid "To invoke a GET request, just list the `pets` query parameter multiple times."
msgstr "要调用一个GET请求，只需多次列出 `pets` 查询参数。"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:219
#, no-wrap
msgid "curl \"http://localhost:8080/greet?pets=itchy&pets=scratchy\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:223
#, fuzzy
msgid "For more complex types, `List` and `Set` members must have an identifier in the query parameter.  For example:"
msgstr "对于更复杂的类型， `List` 和 `Set` 成员必须在查询参数中有一个标识符。比如说。"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:231
#, no-wrap
msgid ""
"    List<Person> kids;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:244
#, fuzzy
msgid "Each `kids` query parameter must identify the kid they are referencing so that the runtime can figure out which property values go to which members in the list.  Here's the curl request:"
msgstr "每个 `kids` 查询参数都必须识别它们所引用的孩子，这样运行时就可以弄清楚哪些属性值属于列表中的哪些成员。这里是curl请求。"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:248
#, no-wrap
msgid "curl \"http://localhost:8080/greet?kids.1.first=Buffy&kids.2.first=Charlie\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:252
#, fuzzy
msgid "The above URL uses the value `1` and `2` to identity the target member of the list, but any unique string can be used."
msgstr "上面的URL使用值 `1` 和 `2` 来标识列表中的目标成员，但可以使用任何独特的字符串。"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:255
#, fuzzy
msgid "A property can also be a `java.util.Map`.  The key of the map can be any primitive type and `String`.  For example:"
msgstr "一个属性也可以是一个 `java.util.Map` 。地图的键可以是任何原始类型和 `String` 。比如说。"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:263
#, no-wrap
msgid ""
"    Map<String, String> address;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:273
#, fuzzy
msgid "The corresponding call would look like this:"
msgstr "相应的调用会是这样的。"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:277
#, no-wrap
msgid "curl \"http://localhost:8080/greet?address.state=MA&address.city=Boston\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:280
msgid "If your `Map` value is a complex type, then just continue the notation by adding the property to set at the end."
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:288
#, no-wrap
msgid ""
"    Map<String, Address> addresses;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:300
#, no-wrap
msgid "curl \"http://localhost:8080/greet?addresses.home.state=MA&addresses.home.city=Boston\"\n"
msgstr ""
