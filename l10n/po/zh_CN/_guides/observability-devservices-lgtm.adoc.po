msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "Observability Dev Services with Grafana OTel LGTM"
msgstr "使用 Grafana OTel LGTM 提供可观察性开发服务"

#: _guides/observability-devservices-lgtm.adoc
msgid ""
"This Dev Service provides the https://github.com/grafana/docker-otel-lgtm[Grafana OTel-LGTM], an `all-in-one` Docker image containing an https://opentelemetry.io/docs/collector[OpenTelemetry Collector] receiving and then forwarding telemetry data to Prometheus (metrics), Tempo (traces) and Loki (logs).\n"
"This data can then be visualized by https://github.com/grafana/grafana[Grafana]. The LGTM abbreviation stands for:"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "L -> https://github.com/grafana/loki[Loki] (logs)"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "G -> https://github.com/grafana/grafana[Grafana] (metrics visualization)"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "T -> https://github.com/grafana/tempo[Tempo] (traces)"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "M -> https://grafana.com/oss/mimir[Mimir] (long term storage for Prometheus)"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "Configuring your project"
msgstr "配置项目"

#: _guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "Add the Quarkus Grafana OTel LGTM sink (where data goes) extension to your build file:"
msgstr "在构建文件中添加 Quarkus Grafana OTel LGTM sink（数据去向）扩展："

#: _guides/observability-devservices-lgtm.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _guides/observability-devservices-lgtm.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _guides/observability-devservices-lgtm.adoc
msgid "Micrometer"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "The https://quarkus.io/guides/telemetry-micrometer[Micrometer Quarkus extension] provides metrics from automatic instrumentation implemented in Quarkus and its extensions."
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "There are multiple ways to output Micrometer metrics. Next there are some examples:"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "Using the Micrometer Prometheus registry"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "This is the most common way to output metrics from Micrometer and the default way in Quarkus. The Micrometer Prometheus registry will publish data in the `/q/metrics` endpoint and a scraper inside the Grafana LGTM Dev Service will grab it (*pull* data from the service)."
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "Using the Micrometer OTLP registry"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "The https://docs.quarkiverse.io/quarkus-micrometer-registry/dev/micrometer-registry-otlp.html[Quarkiverse Micrometer OTLP registry] will output data using the OpenTelemetry OTLP protocol to the Grafana LGTM Dev Service. This will *push* data out of the service:"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "When using the https://micrometer.io/[Micrometer's] Quarkiverse OTLP registry to push metrics to Grafana OTel LGTM, the `quarkus.micrometer.export.otlp.url` property is automatically set to OTel collector endpoint as seen from the outside of the Docker container."
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "OpenTelemetry"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "With OpenTelemetry, metrics, traces and logs can be created and sent to the Grafana LGTM Dev Service."
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "By default, the https://quarkus.io/guides/opentelemetry[OpenTelemetry extension] will produce https://quarkus.io/guides/opentelemetry-tracing[traces]. https://quarkus.io/guides/opentelemetry-metrics[Metrics] and https://quarkus.io/guides/opentelemetry-logging[logs] must be enabled separately."
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "The `quarkus-opentelemetry` extension can be added to your build file like this:"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "The `quarkus.otel.exporter.otlp.endpoint` property is automatically set to the OTel collector endpoint as seen from the outside of the Docker container."
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "The `quarkus.otel.exporter.otlp.protocol` is set to `http/protobuf`."
msgstr "`quarkus.otel.exporter.otlp.protocol` 设置为 `http/protobuf` 。"

#: _guides/observability-devservices-lgtm.adoc
msgid "Micrometer to OpenTelemetry bridge"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "This extension provides Micrometer metrics and OpenTelemetry metrics, traces and logs. All data is managed and sent out by the OpenTelemetry extension."
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "**All signals are enabled by default.**"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "The extension can be added to your build file like this:"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "Grafana"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "Grafana UI access"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "Once you start your app in dev mode:"
msgstr "在开发模式下启动应用程序后"

#: _guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "You will see a log entry like this:"
msgstr "您将看到这样一条日志记录："

#: _guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "Remember that Grafana is accessible in an ephemeral port, so you need to check the logs to see which port is being used. In this example, the grafana endpoint is `grafana.endpoint=http://localhost:42797`."
msgstr "请记住，Grafana 是通过短暂端口访问的，因此需要检查日志以查看使用的端口。在本例中，Grafana 端点是 `grafana.endpoint=http://localhost:42797` 。"

#: _guides/observability-devservices-lgtm.adoc
msgid "Another option is to use the *Dev UI* (http://localhost:8080/q/dev-ui/extensions) as the Grafana URL link will be available and if selected it will open a new browser tab directly to the running Grafana instance:"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "Explore"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "In the explore section, you can query the data for all the data sources."
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "To see traces, select the `tempo` data source and query for data:"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "For logs, select the `loki` data source and query for data:"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "The dashboards"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "The Dev Service includes a set of dashboards."
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "Each dashboard is tuned for the specific application setup. The available dashboards are:"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "*Quarkus Micrometer OpenTelemetry*: to be used with the Micrometer and OpenTelemetry extension."
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "*Quarkus Micrometer OTLP registry*: to be used with the Micrometer OTLP registry extension."
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "*Quarkus Micrometer Prometheus registry*: to be used with the Micrometer Prometheus registry extension."
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "*Quarkus OpenTelemetry Logging*: to view logs coming from the OpenTelemetry extension."
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "Some panels in the dashboards might take a few minutes to show accurate data when their values are calculated over a sliding  time window."
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "Additional configuration"
msgstr "其他配置"

#: _guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "This extension will configure your `quarkus-opentelemetry` and `quarkus-micrometer-registry-otlp` extensions to send data to the OTel Collector bundled with the Grafana OTel LGTM image."
msgstr "该扩展将配置您的 `quarkus-opentelemetry` 和 `quarkus-micrometer-registry-otlp` 扩展，以便将数据发送到与 Grafana OTel LGTM 映像捆绑在一起的 OTel 收集器。"

#: _guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "If you don't want all the hassle with Dev Services (e.g. lookup and re-use of existing running containers, etc) you can simply disable Dev Services and enable just Dev Resource usage:"
msgstr "如果你不想要开发服务带来的所有麻烦（如查找和重复使用现有运行的容器等），你可以直接禁用开发服务，只启用开发资源使用："

#: _guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "Tests"
msgstr "测试"

#: _guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "And for the least 'auto-magical' usage in the tests, simply disable both (Dev Resources are already disabled by default):"
msgstr "如果想在测试中使用最少的 \"自动魔法\"，只需禁用这两种功能即可（默认情况下已禁用 \"开发资源\"）："

#: _guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "And then explicitly list LGTM Dev Resource in the test as a `@QuarkusTestResource` resource:"
msgstr "然后在测试中将 LGTM Dev Resource 明确列为 `@QuarkusTestResource` 资源："

#: _guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "Testing full Grafana OTel LGTM stack - example"
msgstr "测试完整的 Grafana OTel LGTM 堆栈 - 示例"

#: _guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "Use existing Quarkus MicroMeter OTLP registry"
msgstr "使用现有的 Quarkus MicroMeter OTLP 注册表"

#: _guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "Simply inject the Meter registry into your code -- it will periodically push metrics to Grafana LGTM's OTLP HTTP endpoint."
msgstr "只需在代码中注入 Meter 注册表，它就会定期将指标推送到 Grafana LGTM 的 OTLP HTTP 端点。"

#: _guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "Where you can then check Grafana's datasource API for existing metrics data."
msgstr "然后，您可以检查 Grafana 的数据源 API，查看现有的度量数据。"
