# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security-jdbc.adoc:6
#, fuzzy, no-wrap
msgid "Using Security with JDBC"
msgstr "使用JDBC的安全性"

#. type: Plain text
#: upstream/_guides/security-jdbc.adoc:11
#, fuzzy
msgid "This guide demonstrates how your Quarkus application can use a database to store your user identities."
msgstr "本指南展示了你的Quarkus应用程序如何使用数据库来存储你的用户身份。"

#. type: Title ==
#: upstream/_guides/security-jdbc.adoc:13
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: upstream/_guides/security-jdbc.adoc:17
#, fuzzy, no-wrap
msgid "Architecture"
msgstr "建筑学"

#. type: Plain text
#: upstream/_guides/security-jdbc.adoc:20
#, fuzzy
msgid "In this example, we build a very simple microservice which offers three endpoints:"
msgstr "在这个例子中，我们建立了一个非常简单的微服务，提供三个端点。"

#. type: Plain text
#: upstream/_guides/security-jdbc.adoc:22
#, fuzzy
msgid "`/api/public`"
msgstr " `/api/public` "

#. type: Plain text
#: upstream/_guides/security-jdbc.adoc:23
#, fuzzy
msgid "`/api/users/me`"
msgstr " `/api/users/me` "

#. type: Plain text
#: upstream/_guides/security-jdbc.adoc:24
#, fuzzy
msgid "`/api/admin`"
msgstr " `/api/admin` "

#. type: Plain text
#: upstream/_guides/security-jdbc.adoc:28
#, fuzzy
msgid "The `/api/public` endpoint can be accessed anonymously.  The `/api/admin` endpoint is protected with RBAC (Role-Based Access Control) where only users granted with the `admin` role can access. At this endpoint, we use the `@RolesAllowed` annotation to declaratively enforce the access constraint.  The `/api/users/me` endpoint is also protected with RBAC (Role-Based Access Control) where only users granted with the `user` role can access. As a response, it returns a JSON document with details about the user."
msgstr " `/api/public` 端点可以被匿名访问。 `/api/admin` 端点受到RBAC（基于角色的访问控制）的保护，只有被授予 `admin` 角色的用户才能访问。在这个端点，我们使用 `@RolesAllowed` 注释来声明性地执行访问限制。 `/api/users/me` 端点也受到RBAC（基于角色的访问控制）的保护，只有被授予 `user` 角色的用户可以访问。作为响应，它返回一个包含用户详细信息的JSON文档。"

#. type: Title ==
#: upstream/_guides/security-jdbc.adoc:29
#, fuzzy, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_guides/security-jdbc.adoc:33
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议你按照下面几节的说明，一步一步地创建应用程序。然而，你可以直接进入已完成的例子。"

#. type: Plain text
#: upstream/_guides/security-jdbc.adoc:35
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库。 `git clone {quickstarts-clone-url}` ，或者下载一个{quickstarts-archive-url}[存档]。"

#. type: Plain text
#: upstream/_guides/security-jdbc.adoc:37
#, fuzzy
msgid "The solution is located in the `security-jdbc-quickstart` {quickstarts-tree-url}/security-jdbc-quickstart[directory]."
msgstr "该解决方案位于 `security-jdbc-quickstart` {quickstarts-tree-url}/security-jdbc-quickstart[目录]中。"

#. type: Title ==
#: upstream/_guides/security-jdbc.adoc:38
#, fuzzy, no-wrap
msgid "Creating the Maven Project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_guides/security-jdbc.adoc:41
#, fuzzy
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。用以下命令创建一个新项目。"

#. type: delimited block =
#: upstream/_guides/security-jdbc.adoc:49
#, fuzzy
msgid "Don't forget to add the database connector library of choice. Here we are using PostgreSQL as identity store."
msgstr "不要忘记添加选择的数据库连接器库。这里我们使用PostgreSQL作为身份存储。"

#. type: Plain text
#: upstream/_guides/security-jdbc.adoc:53
#, fuzzy
msgid "This command generates a new project, importing the `elytron-security-jdbc` extension which is an https://docs.wildfly.org/17/WildFly_Elytron_Security.html#jdbc-security-realm[`wildfly-elytron-realm-jdbc`] adapter for Quarkus applications."
msgstr "这个命令生成了一个新的项目，导入了 `elytron-security-jdbc` 扩展，它是一个 link:https://docs.wildfly.org/17/WildFly_Elytron_Security.html#jdbc-security-realm[`wildfly-elytron-realm-jdbc`] Quarkus应用程序的适配器。"

#. type: Plain text
#: upstream/_guides/security-jdbc.adoc:56
#, fuzzy
msgid "If you already have your Quarkus project configured, you can add the `elytron-security-jdbc` extension to your project by running the following command in your project base directory:"
msgstr "如果你已经配置了你的Quarkus项目，你可以通过在你的项目基础目录下运行以下命令，将 `elytron-security-jdbc` 扩展到你的项目。"

#. type: Plain text
#: upstream/_guides/security-jdbc.adoc:61
#, fuzzy
msgid "This will add the following to your build file:"
msgstr "这将在你的构建文件中添加以下内容。"

#. type: Block title
#: upstream/_guides/security-jdbc.adoc:63
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/security-jdbc.adoc:69
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-elytron-security-jdbc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/security-jdbc.adoc:72
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/security-jdbc.adoc:75
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-elytron-security-jdbc\")\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-jdbc.adoc:77
#, fuzzy, no-wrap
msgid "Writing the application"
msgstr "编写应用程序"

#. type: Plain text
#: upstream/_guides/security-jdbc.adoc:80
#, fuzzy
msgid "Let's start by implementing the `/api/public` endpoint. As you can see from the source code below, it is just a regular JAX-RS resource:"
msgstr "让我们从实现 `/api/public` 端点开始。正如你从下面的源代码中看到的，它只是一个普通的JAX-RS资源。"

#. type: delimited block -
#: upstream/_guides/security-jdbc.adoc:84
#: upstream/_guides/security-jdbc.adoc:109
#: upstream/_guides/security-jdbc.adoc:134
#, no-wrap
msgid "package org.acme.security.jdbc;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jdbc.adoc:90
#, no-wrap
msgid ""
"import javax.annotation.security.PermitAll;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jdbc.adoc:93
#, no-wrap
msgid ""
"@Path(\"/api/public\")\n"
"public class PublicResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jdbc.adoc:101
#, no-wrap
msgid ""
"    @GET\n"
"    @PermitAll\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String publicResource() {\n"
"        return \"public\";\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jdbc.adoc:104
#, fuzzy
msgid "The source code for the `/api/admin` endpoint is also very simple. The main difference here is that we are using a `@RolesAllowed` annotation to make sure that only users granted with the `admin` role can access the endpoint:"
msgstr " `/api/admin` 端点的源代码也非常简单。这里的主要区别是，我们使用 `@RolesAllowed` 注释来确保只有被授予 `admin` 角色的用户才能访问该端点。"

#. type: delimited block -
#: upstream/_guides/security-jdbc.adoc:115
#, no-wrap
msgid ""
"import javax.annotation.security.RolesAllowed;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jdbc.adoc:118
#, no-wrap
msgid ""
"@Path(\"/api/admin\")\n"
"public class AdminResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jdbc.adoc:126
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"admin\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String adminResource() {\n"
"         return \"admin\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jdbc.adoc:130
#, fuzzy
msgid "Finally, let's consider the `/api/users/me` endpoint. As you can see from the source code below, we are trusting only users with the `user` role.  We are using `SecurityContext` to get access to the current authenticated Principal and we return the user's name. This information is loaded from the database."
msgstr "最后，让我们考虑一下 `/api/users/me` 这个端点。正如你在下面的源代码中看到的，我们只信任具有 `user` 角色的用户。我们使用 `SecurityContext` ，以获得对当前认证的Principal的访问，我们返回用户的名字。这些信息是从数据库中加载的。"

#. type: delimited block -
#: upstream/_guides/security-jdbc.adoc:141
#, no-wrap
msgid ""
"import javax.annotation.security.RolesAllowed;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.core.Context;\n"
"import javax.ws.rs.core.SecurityContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jdbc.adoc:144
#, no-wrap
msgid ""
"@Path(\"/api/users\")\n"
"public class UserResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jdbc.adoc:152
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"user\")\n"
"    @Path(\"/me\")\n"
"    public String me(@Context SecurityContext securityContext) {\n"
"        return securityContext.getUserPrincipal().getName();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-jdbc.adoc:154
#, fuzzy, no-wrap
msgid "Configuring the Application"
msgstr "配置应用程序"

#. type: Plain text
#: upstream/_guides/security-jdbc.adoc:157
#, fuzzy
msgid "The `elytron-security-jdbc` extension requires at least one datasource to access to your database."
msgstr " `elytron-security-jdbc` 扩展需要至少一个数据源来访问你的数据库。"

#. type: delimited block -
#: upstream/_guides/security-jdbc.adoc:164
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.datasource.username=quarkus\n"
"quarkus.datasource.password=quarkus\n"
"quarkus.datasource.jdbc.url=jdbc:postgresql:elytron-security-jdbc\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jdbc.adoc:167
#, fuzzy
msgid "In our context, we are using PostgreSQL as identity store and we initialize the database with users and roles."
msgstr "在我们的环境中，我们使用PostgreSQL作为身份存储，我们用用户和角色初始化数据库。"

#. type: delimited block -
#: upstream/_guides/security-jdbc.adoc:176
#, no-wrap
msgid ""
"CREATE TABLE test_user (\n"
"  id INT,\n"
"  username VARCHAR(255),\n"
"  password VARCHAR(255),\n"
"  role VARCHAR(255)\n"
");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jdbc.adoc:179
#, no-wrap
msgid ""
"INSERT INTO test_user (id, username, password, role) VALUES (1, 'admin', 'admin', 'admin');\n"
"INSERT INTO test_user (id, username, password, role) VALUES (2, 'user','user', 'user');\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-jdbc.adoc:185
#, fuzzy
msgid "It is probably useless but we kindly remind you that you must not store clear-text passwords in production environment ;-).  The `elytron-security-jdbc` offers a built-in bcrypt password mapper."
msgstr "这可能是无用的，但我们善意地提醒你，你不能在生产环境中存储明文密码；-）。 `elytron-security-jdbc` 提供一个内置的bcrypt密码映射器。"

#. type: Plain text
#: upstream/_guides/security-jdbc.adoc:188
#, fuzzy
msgid "We can now configure the Elytron JDBC Realm."
msgstr "我们现在可以配置Elytron JDBC Realm。"

#. type: delimited block -
#: upstream/_guides/security-jdbc.adoc:197
#, no-wrap
msgid ""
"quarkus.security.jdbc.enabled=true\n"
"quarkus.security.jdbc.principal-query.sql=SELECT u.password, u.role FROM test_user u WHERE u.username=? <1>\n"
"quarkus.security.jdbc.principal-query.clear-password-mapper.enabled=true <2>\n"
"quarkus.security.jdbc.principal-query.clear-password-mapper.password-index=1\n"
"quarkus.security.jdbc.principal-query.attribute-mappings.0.index=2 <3>\n"
"quarkus.security.jdbc.principal-query.attribute-mappings.0.to=groups\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jdbc.adoc:200
#, fuzzy
msgid "The `elytron-security-jdbc` extension requires at least one principal query to authenticate the user and its identity."
msgstr " `elytron-security-jdbc` 扩展要求至少有一个委托人查询来验证用户及其身份。"

#. type: Plain text
#: upstream/_guides/security-jdbc.adoc:202
#, fuzzy
msgid "We define a parameterized SQL statement (with exactly 1 parameter) which should return the user's password plus any additional information you want to load."
msgstr "我们定义一个参数化的SQL语句（正好有1个参数），它应该返回用户的密码和任何你想加载的额外信息。"

#. type: Plain text
#: upstream/_guides/security-jdbc.adoc:203
#, fuzzy
msgid "We configure the password mapper with the position of the password field in the `SELECT` fields and other information like salt, hash encoding, etc."
msgstr "我们用密码字段在 `SELECT` 字段中的位置和其他信息如盐、哈希编码等配置密码映射器。"

#. type: Plain text
#: upstream/_guides/security-jdbc.adoc:204
#, fuzzy
msgid "We use `attribute-mappings` to bind the `SELECT` projection fields (ie. `u.role` here) to the target Principal representation attributes."
msgstr "我们使用 `attribute-mappings` ，将 `SELECT` 投影字段（即这里的 `u.role` ）与目标主表征属性绑定。"

#. type: delimited block =
#: upstream/_guides/security-jdbc.adoc:208
#, fuzzy
msgid "In the `principal-query` configuration all the `index` properties start at 1 (rather than 0)."
msgstr "在 `principal-query` 配置中，所有的 `index` 属性都从1开始（而不是0）。"

#. type: Title ==
#: upstream/_guides/security-jdbc.adoc:210
#, fuzzy, no-wrap
msgid "Testing the Application"
msgstr "测试应用程序"

#. type: Plain text
#: upstream/_guides/security-jdbc.adoc:214
#, fuzzy
msgid "The application is now protected and the identities are provided by our database.  The very first thing to check is to ensure the anonymous access works."
msgstr "现在应用程序受到保护，身份是由我们的数据库提供的。首先要检查的是确保匿名访问的工作。"

#. type: delimited block -
#: upstream/_guides/security-jdbc.adoc:221
#, no-wrap
msgid ""
"$ curl -i -X GET http://localhost:8080/api/public\n"
"HTTP/1.1 200 OK\n"
"Content-Length: 6\n"
"Content-Type: text/plain;charset=UTF-8\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jdbc.adoc:223
#, no-wrap
msgid "public%\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jdbc.adoc:226
#, fuzzy
msgid "Now, let's try a to hit a protected resource anonymously."
msgstr "现在，让我们尝试一下，以匿名方式打击受保护的资源。"

#. type: delimited block -
#: upstream/_guides/security-jdbc.adoc:233
#, no-wrap
msgid ""
"$ curl -i -X GET http://localhost:8080/api/admin\n"
"HTTP/1.1 401 Unauthorized\n"
"Content-Length: 14\n"
"Content-Type: text/html;charset=UTF-8\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jdbc.adoc:235
#, no-wrap
msgid "Not authorized%\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jdbc.adoc:238
#, fuzzy
msgid "So far so good, now let's try with an allowed user."
msgstr "到目前为止还不错，现在让我们用一个允许的用户试试。"

#. type: delimited block -
#: upstream/_guides/security-jdbc.adoc:245
#, no-wrap
msgid ""
"$ curl -i -X GET -u admin:admin http://localhost:8080/api/admin\n"
"HTTP/1.1 200 OK\n"
"Content-Length: 5\n"
"Content-Type: text/plain;charset=UTF-8\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jdbc.adoc:247
#, no-wrap
msgid "admin%\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jdbc.adoc:250
#, fuzzy
msgid "By providing the `admin:admin` credentials, the extension authenticated the user and loaded their roles.  The `admin` user is authorized to access to the protected resources."
msgstr "通过提供 `admin:admin` 凭证，扩展程序验证了用户并加载了他们的角色。 `admin` 的用户被授权访问受保护的资源。"

#. type: Plain text
#: upstream/_guides/security-jdbc.adoc:252
#, fuzzy
msgid "The user `admin` should be forbidden to access a resource protected with `@RolesAllowed(\"user\")` because it doesn't have this role."
msgstr "用户 `admin` 应该被禁止访问一个用 `@RolesAllowed(\"user\")` 保护的资源，因为它没有这个角色。"

#. type: delimited block -
#: upstream/_guides/security-jdbc.adoc:259
#, no-wrap
msgid ""
"$ curl -i -X GET -u admin:admin http://localhost:8080/api/users/me\n"
"HTTP/1.1 403 Forbidden\n"
"Content-Length: 34\n"
"Content-Type: text/html;charset=UTF-8\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jdbc.adoc:261
#, no-wrap
msgid "Forbidden%\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jdbc.adoc:264
#, fuzzy
msgid "Finally, using the user `user` works and the security context contains the principal details (username for instance)."
msgstr "最后，使用用户 `user` ，安全上下文包含了本金的细节（比如说用户名）。"

#. type: delimited block -
#: upstream/_guides/security-jdbc.adoc:271
#, no-wrap
msgid ""
"$ curl -i -X GET -u user:user http://localhost:8080/api/users/me\n"
"HTTP/1.1 200 OK\n"
"Content-Length: 4\n"
"Content-Type: text/plain;charset=UTF-8\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-jdbc.adoc:273
#, no-wrap
msgid "user%\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-jdbc.adoc:275
#, fuzzy, no-wrap
msgid "Advanced Configuration"
msgstr "高级配置"

#. type: Plain text
#: upstream/_guides/security-jdbc.adoc:278
#, fuzzy
msgid "This guide only covered an easy use case, the extension offers multiple datasources, multiple principal queries configuration as well as a bcrypt password mapper."
msgstr "本指南只涵盖了一个简单的使用案例，该扩展提供了多个数据源、多个主查询配置以及一个bcrypt密码映射器。"

#. type: Plain text
#: upstream/_guides/security-jdbc.adoc:285
#, fuzzy
msgid "quarkus.datasource.db-kind=postgresql quarkus.datasource.username=quarkus quarkus.datasource.password=quarkus quarkus.datasource.jdbc.url=jdbc:postgresql:multiple-data-sources-users"
msgstr "quarkus.datasource.db-kind=postgresql quarkus.datasource.username=quarkus quarkus.datasource.password=quarkus datasource.jdbc.url=jdbc:postgresql:multiple-data-sources-users"

#. type: Plain text
#: upstream/_guides/security-jdbc.adoc:290
msgid "quarkus.datasource.permissions.db-kind=postgresql quarkus.datasource.permissions.username=quarkus quarkus.datasource.permissions.password=quarkus quarkus.datasource.permissions.jdbc.url=jdbc:postgresql:multiple-data-sources-permissions"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jdbc.adoc:295
msgid "quarkus.security.jdbc.enabled=true quarkus.security.jdbc.principal-query.sql=SELECT u.password FROM test_user u WHERE u.username=? quarkus.security.jdbc.principal-query.clear-password-mapper.enabled=true quarkus.security.jdbc.principal-query.clear-password-mapper.password-index=1"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jdbc.adoc:300
msgid "quarkus.security.jdbc.principal-query.roles.sql=SELECT r.role_name FROM test_role r, test_user_role ur WHERE ur.username=? AND ur.role_id = r.id quarkus.security.jdbc.principal-query.roles.datasource=permissions quarkus.security.jdbc.principal-query.roles.attribute-mappings.0.index=1 quarkus.security.jdbc.principal-query.roles.attribute-mappings.0.to=groups"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-jdbc.adoc:303
#, no-wrap
msgid "Configuration Reference"
msgstr "配置参考"

#. type: Title ==
#: upstream/_guides/security-jdbc.adoc:307
#, no-wrap
msgid "References"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-jdbc.adoc:309
msgid "xref:security.adoc[Quarkus Security]"
msgstr ""
