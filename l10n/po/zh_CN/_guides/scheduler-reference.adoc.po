# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/scheduler-reference.adoc:6
#, fuzzy, no-wrap
msgid "Scheduler Reference Guide"
msgstr "调度器参考指南"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:20
#, fuzzy
msgid "Modern applications often need to run specific tasks periodically.  There are two scheduler extensions in Quarkus.  The `quarkus-scheduler` extension brings the API and a lightweight in-memory scheduler implementation.  The `quarkus-quartz` extension implements the API from the `quarkus-scheduler` extension and contains a scheduler implementation based on the Quartz library.  You will only need `quarkus-quartz` for more advanced scheduling use cases, such as persistent tasks, clustering and programmatic scheduling of jobs."
msgstr "现代应用程序经常需要定期运行特定的任务。Quarkus中有两个调度器扩展。 `quarkus-scheduler` 扩展带来了API和一个轻量级的内存调度器实现。 `quarkus-quartz` 扩展实现了来自 `quarkus-scheduler` 扩展的API，并包含一个基于Quartz库的调度器实现。你只需要在更高级的调度用例中使用 `quarkus-quartz` ，比如持久化任务、集群和作业的程序化调度。"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:22
#, fuzzy
msgid "If you add the `quarkus-quartz` dependency to your project the lightweight scheduler implementation from the `quarkus-scheduler` extension is automatically disabled."
msgstr "如果你将 `quarkus-quartz` 依赖关系添加到你的项目中，来自 `quarkus-scheduler` 扩展的轻量级调度器实现将被自动禁用。"

#. type: Title ==
#: upstream/_guides/scheduler-reference.adoc:23
#, fuzzy, no-wrap
msgid "Scheduled Methods"
msgstr "预定的方法"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:29
#, fuzzy
msgid "A method annotated with `@io.quarkus.scheduler.Scheduled` is automatically scheduled for invocation.  A scheduled method must not be abstract or private.  It may be either static or non-static.  A scheduled method can be annotated with interceptor bindings, such as `@javax.transaction.Transactional` and `@org.eclipse.microprofile.metrics.annotation.Counted`."
msgstr "一个被注解为 `@io.quarkus.scheduler.Scheduled` 的方法会被自动安排调用。一个预定的方法不能是抽象的或私有的。它可以是静态的，也可以是非静态的。一个预定的方法可以用拦截器绑定来注释，比如 `@javax.transaction.Transactional` 和 `@org.eclipse.microprofile.metrics.annotation.Counted` 。"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:31
#, fuzzy
msgid "If there is a bean class that has no scope and declares at least one non-static method annotated with `@Scheduled` then `@Singleton` is used."
msgstr "如果有一个没有作用域的bean类，并且至少声明了一个用 `@Scheduled` 注释的非静态方法，那么就使用 `@Singleton` 。"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:33
#, fuzzy
msgid "Furthermore, the annotated method must return `void` and either declare no parameters or one parameter of type `io.quarkus.scheduler.ScheduledExecution`."
msgstr "此外，被注释的方法必须返回 `void` ，并且要么不声明任何参数，要么声明一个类型为 `io.quarkus.scheduler.ScheduledExecution` 的参数。"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:35
#, fuzzy
msgid "The annotation is repeatable so a single method could be scheduled multiple times."
msgstr "该注释是可重复的，所以一个方法可以被安排多次。"

#. type: delimited block =
#: upstream/_guides/scheduler-reference.adoc:39
#, fuzzy
msgid "Subclasses never inherit the metadata of a `@Scheduled` method declared on a superclass. In the following example, the `everySecond()` method is only invoked upon the instance of `Jobs`."
msgstr "子类从不继承在超类上声明的 `@Scheduled` 方法的元数据。在下面的例子中， `everySecond()` 方法只在 `Jobs` 的实例中被调用。"

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:42
#: upstream/_guides/scheduler-reference.adoc:237
#: upstream/_guides/scheduler-reference.adoc:264
#: upstream/_guides/scheduler-reference.adoc:290
#, no-wrap
msgid "class Jobs {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:48
#, no-wrap
msgid ""
"   @Scheduled(every = \"1s\")\n"
"   void everySecond() {\n"
"     // ..do something \n"
"   }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:52
#, no-wrap
msgid ""
"@Singleton\n"
"class MyJobs extends Jobs {\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/scheduler-reference.adoc:56
#, fuzzy
msgid "A CDI event of type `io.quarkus.scheduler.SuccessfulExecution` is fired synchronously and asynchronously when an execution of a scheduled method is successful. A CDI event of type `io.quarkus.scheduler.FailedExecution` is fired synchronously and asynchronously when an execution of a scheduled method throws an exception."
msgstr "当一个预定方法的执行成功时，一个类型为 `io.quarkus.scheduler.SuccessfulExecution` 的CDI事件被同步和异步地触发。当一个预定方法的执行出现异常时，一个类型为 `io.quarkus.scheduler.FailedExecution` 的CDI事件被同步和异步地触发。"

#. type: Title ===
#: upstream/_guides/scheduler-reference.adoc:57
#, fuzzy, no-wrap
msgid "Triggers"
msgstr "触发器"

#. type: delimited block =
#: upstream/_guides/scheduler-reference.adoc:62
#, fuzzy
msgid "A trigger is defined either by the `@Scheduled#cron()` or by the `@Scheduled#every()` attribute.  If both are specified, the cron expression takes precedence.  If none is specified, the build fails with an `IllegalStateException`."
msgstr "触发器是由 `@Scheduled#cron()` 或 `@Scheduled#every()` 属性来定义的。如果两者都被指定，则以cron表达式为优先。如果没有指定，则构建失败，出现 `IllegalStateException` 。"

#. type: Title ====
#: upstream/_guides/scheduler-reference.adoc:63
#, fuzzy, no-wrap
msgid "CRON"
msgstr "CRON"

#. type: delimited block =
#: upstream/_guides/scheduler-reference.adoc:67
#, fuzzy
msgid "A CRON trigger is defined by a cron-like expression.  For example `\"0 15 10 * * ?\"` fires at 10:15am every day."
msgstr "CRON触发器是由一个类似于cron的表达式定义的。例如， `\"0 15 10 * * ?\"` ，每天上午10点15分发射。"

#. type: Block title
#: upstream/_guides/scheduler-reference.adoc:68
#, fuzzy, no-wrap
msgid "CRON Trigger Example"
msgstr "CRON触发器实例"

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:73
#, no-wrap
msgid ""
"@Scheduled(cron = \"0 15 10 * * ?\")\n"
"void fireAt10AmEveryDay() { }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:78
#, fuzzy
msgid "The syntax used in CRON expressions is controlled by the `quarkus.scheduler.cron-type` property.  The values can be `cron4j`, `quartz`, `unix` and `spring`.  `quartz` is used by default."
msgstr "CRON表达式中使用的语法是由 `quarkus.scheduler.cron-type` 属性控制的。其值可以是 `cron4j` , `quartz` , `unix` 和 `spring` 。默认情况下，使用 `quartz` 。"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:81
#, fuzzy
msgid "The `cron` attribute supports <<config-reference#property-expressions,Property Expressions>> including default values and nested Property Expressions. (Note that \"{property.path}\" style expressions are still supported but don't offer the full functionality of Property Expressions.)"
msgstr " `cron` 属性支持 link:config-reference.html#property-expressions[属性] 表达式，包括默认值和嵌套属性表达式。(注意，\"{property.path}\"风格的表达式仍然被支持，但不提供属性表达式的全部功能）。"

#. type: Block title
#: upstream/_guides/scheduler-reference.adoc:83
#, fuzzy, no-wrap
msgid "CRON Config Property Example"
msgstr "CRON配置属性实例"

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:88
#, no-wrap
msgid ""
"@Scheduled(cron = \"${myMethod.cron.expr}\")\n"
"void myMethod() { }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:91
#, fuzzy
msgid "If you wish to disable a specific scheduled method, you can set its cron expression to `\"off\"` or `\"disabled\"`."
msgstr "如果你想禁用一个特定的计划方法，你可以将其cron表达式设置为 `\"off\"` 或 `\"disabled\"` 。"

#. type: Block title
#: upstream/_guides/scheduler-reference.adoc:92
#, fuzzy, no-wrap
msgid "application.properties"
msgstr "应用程序.属性"

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:96
#, no-wrap
msgid "myMethod.cron.expr=disabled\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:99
#, fuzzy
msgid "Property Expressions allow you to define a default value that is used, if the property is not configured."
msgstr "属性表达式允许你定义一个默认值，如果属性没有被配置，就会使用这个默认值。"

#. type: Block title
#: upstream/_guides/scheduler-reference.adoc:100
#, fuzzy, no-wrap
msgid "CRON Config Property Example with default `0 0 15 ? * MON *`"
msgstr "CRON配置属性实例，有默认值 `0 0 15 ? * MON *` "

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:105
#, no-wrap
msgid ""
"@Scheduled(cron = \"${myMethod.cron.expr:0 0 15 ? * MON *}\")\n"
"void myMethod() { }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:108
#, fuzzy
msgid "If the property `myMethod.cron.expr` is undefined or `null`, the default value (`0 0 15 ? * MON *`) will be used."
msgstr "如果属性 `myMethod.cron.expr` 是未定义的或 `null` ，将使用默认值 ( `0 0 15 ? * MON *` ) 。"

#. type: Title ====
#: upstream/_guides/scheduler-reference.adoc:109
#, fuzzy, no-wrap
msgid "Intervals"
msgstr "间歇期"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:115
#, fuzzy
msgid "An interval trigger defines a period between invocations.  The period expression is based on the ISO-8601 duration format `PnDTnHnMn.nS` and the value of `@Scheduled#every()` is parsed with `java.time.Duration#parse(CharSequence)`.  However, if an expression starts with a digit then the `PT` prefix is added automatically.  So for example, `15m` can be used instead of `PT15M` and is parsed as \"15 minutes\"."
msgstr "间隔触发器定义了调用之间的周期。周期表达式是基于ISO-8601的持续时间格式 `PnDTnHnMn.nS` ， `@Scheduled#every()` 的值用 `java.time.Duration#parse(CharSequence)` 。然而，如果表达式以数字开头，那么 `PT` 的前缀会自动添加。因此，例如， `15m` 可以代替 `PT15M` ，并被解析为 \"15分钟\"。"

#. type: Block title
#: upstream/_guides/scheduler-reference.adoc:116
#, fuzzy, no-wrap
msgid "Interval Trigger Example"
msgstr "区间触发实例"

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:121
#, no-wrap
msgid ""
"@Scheduled(every = \"15m\")\n"
"void every15Mins() { }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:125
#, fuzzy
msgid "The `every` attribute supports <<config-reference#property-expressions,Property Expressions>> including default values and nested Property Expressions. (Note that `\"{property.path}\"` style expressions are still supported but don't offer the full functionality of Property Expressions.)"
msgstr " `every` 属性支持 link:config-reference.html#property-expressions[属性表达式] ，包括默认值和嵌套属性表达式。(注意， `\"{property.path}\"` 样式表达式仍然被支持，但不提供属性表达式的全部功能)。"

#. type: Block title
#: upstream/_guides/scheduler-reference.adoc:126
#: upstream/_guides/scheduler-reference.adoc:160
#, fuzzy, no-wrap
msgid "Interval Config Property Example"
msgstr "间隔配置属性示例"

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:131
#, no-wrap
msgid ""
"@Scheduled(every = \"${myMethod.every.expr}\")\n"
"void myMethod() { }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:135
#, fuzzy
msgid "Intervals can be disabled by setting their value to `\"off\"` or `\"disabled\"`.  So for example a Property Expression with the default value `\"off\"` can be used to disable the trigger if its Config Property has not been set."
msgstr "可以通过将其值设置为 `\"off\"` 或 `\"disabled\"` 来禁用间隔。因此，例如，如果没有设置配置属性，可以使用默认值为 `\"off\"` 的属性表达式来禁用该触发器。"

#. type: Block title
#: upstream/_guides/scheduler-reference.adoc:136
#, fuzzy, no-wrap
msgid "Interval Config Property Example with a Default Value"
msgstr "带有默认值的间隔配置属性示例"

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:141
#, no-wrap
msgid ""
"@Scheduled(every = \"${myMethod.every.expr:off}\")\n"
"void myMethod() { }\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/scheduler-reference.adoc:144
#, fuzzy, no-wrap
msgid "Identity"
msgstr "身份"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:149
#, fuzzy
msgid "By default, a unique identifier is generated for each scheduled method.  This identifier is used in log messages, during debugging and as a parameter of some `io.quarkus.scheduler.Scheduler` methods.  Therefore, a possibility to specify an explicit identifier may come in handy."
msgstr "默认情况下，每个计划方法都会产生一个唯一的标识符。这个标识符在日志信息、调试过程中以及作为一些 `io.quarkus.scheduler.Scheduler` 方法的参数使用。因此，指定一个明确的标识符的可能性可能会派上用场。"

#. type: Block title
#: upstream/_guides/scheduler-reference.adoc:150
#, fuzzy, no-wrap
msgid "Identity Example"
msgstr "身份实例"

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:155
#, no-wrap
msgid ""
"@Scheduled(identity = \"myScheduledMethod\")\n"
"void myMethod() { }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:159
#, fuzzy
msgid "The `identity` attribute supports <<config-reference#property-expressions,Property Expressions>> including default values and nested Property Expressions. (Note that `\"{property.path}\"` style expressions are still supported but don't offer the full functionality of Property Expressions.)"
msgstr " `identity` 属性支持 link:config-reference.html#property-expressions[属性表达式] ，包括默认值和嵌套属性表达式。(注意， `\"{property.path}\"` 样式表达式仍然被支持，但不提供属性表达式的全部功能)。"

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:165
#, no-wrap
msgid ""
"@Scheduled(identity = \"${myMethod.identity.expr}\")\n"
"void myMethod() { }\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/scheduler-reference.adoc:167
#, fuzzy, no-wrap
msgid "Delayed Execution"
msgstr "延迟执行"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:170
#, fuzzy
msgid "`@Scheduled` provides two ways to delay the time a trigger should start firing at."
msgstr " `@Scheduled` 提供了两种方法来延迟触发器应该开始发射的时间。"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:172
#, fuzzy
msgid "`@Scheduled#delay()` and `@Scheduled#delayUnit()` form the initial delay together."
msgstr " `@Scheduled#delay()` 和 ，共同构成初始延迟。 `@Scheduled#delayUnit()` "

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:177
#, no-wrap
msgid ""
"@Scheduled(every = \"2s\", delay = 2, delayUnit = TimeUnit.HOUR) <1>\n"
"void everyTwoSeconds() { }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:179
#, fuzzy
msgid "The trigger fires for the first time two hours after the application start."
msgstr "触发器在应用开始两小时后首次发射。"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:181
#, fuzzy
msgid "The final value is always rounded to full second."
msgstr "最后的数值总是四舍五入到整秒。"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:186
#, fuzzy
msgid "`@Scheduled#delayed()` is a text alternative to the properties above.  The period expression is based on the ISO-8601 duration format `PnDTnHnMn.nS` and the value is parsed with `java.time.Duration#parse(CharSequence)`.  However, if an expression starts with a digit, the `PT` prefix is added automatically.  So for example, `15s` can be used instead of `PT15S` and is parsed as \"15 seconds\"."
msgstr " `@Scheduled#delayed()` 是上述属性的一个文本替代。期限表达式是基于ISO-8601的持续时间格式 ，值被解析为 。然而，如果表达式以数字开头， 前缀会被自动添加。因此，例如， 可以用来代替 ，并被解析为 \"15秒\"。 `PnDTnHnMn.nS` `java.time.Duration#parse(CharSequence)` `PT` `15s` `PT15S` "

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:191
#, no-wrap
msgid ""
"@Scheduled(every = \"2s\", delayed = \"2h\")\n"
"void everyTwoSeconds() { }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:194
#, fuzzy
msgid "If `@Scheduled#delay()` is set to a value greater than zero the value of `@Scheduled#delayed()` is ignored."
msgstr "如果 `@Scheduled#delay()` 被设置为一个大于零的值， `@Scheduled#delayed()` 的值将被忽略。"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:198
#, fuzzy
msgid "The main advantage over `@Scheduled#delay()` is that the value is configurable.  The `delay` attribute supports <<config-reference#property-expressions,Property Expressions>> including default values and nested Property Expressions. (Note that `\"{property.path}\"` style expressions are still supported but don't offer the full functionality of Property Expressions.)"
msgstr "与 `@Scheduled#delay()` 相比，其主要优点是值是可配置的。 `delay` 属性支持 link:config-reference.html#property-expressions[属性表达式] ，包括默认值和嵌套属性表达式。(注意， `\"{property.path}\"` 样式表达式仍然被支持，但不提供属性表达式的全部功能)。"

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:204
#, no-wrap
msgid ""
"@Scheduled(every = \"2s\", delayed = \"${myMethod.delay.expr}\") <1>\n"
"void everyTwoSeconds() { }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:206
#, fuzzy
msgid "The config property `myMethod.delay.expr` is used to set the delay."
msgstr "配置属性 `myMethod.delay.expr` ，用于设置延迟。"

#. type: Title ===
#: upstream/_guides/scheduler-reference.adoc:208
#, fuzzy, no-wrap
msgid "Concurrent Execution"
msgstr "并行执行"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:212
#, fuzzy
msgid "By default, a scheduled method can be executed concurrently.  Nevertheless, it is possible to specify the strategy to handle concurrent executions via `@Scheduled#concurrentExecution()`."
msgstr "默认情况下，一个预定的方法可以被并发执行。然而，可以通过 `@Scheduled#concurrentExecution()` ，指定处理并发执行的策略。"

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:216
#, no-wrap
msgid "import static io.quarkus.scheduler.Scheduled.ConcurrentExecution.SKIP;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:221
#, no-wrap
msgid ""
"@Scheduled(every = \"1s\", concurrentExecution = SKIP) <1>\n"
"void nonConcurrent() {\n"
"  // we can be sure that this method is never executed concurrently\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:223
#, fuzzy
msgid "Concurrent executions are skipped."
msgstr "同时执行的情况被跳过。"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:225
#: upstream/_guides/scheduler-reference.adoc:280
#, fuzzy
msgid "A CDI event of type `io.quarkus.scheduler.SkippedExecution` is fired when an execution of a scheduled method is skipped."
msgstr "当一个预定方法的执行被跳过时，一个类型为 `io.quarkus.scheduler.SkippedExecution` 的CDI事件被触发。"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:227
#, fuzzy
msgid "Note that only executions within the same application instance are considered. This feature is not intended to work across the cluster."
msgstr "注意，只考虑同一应用实例内的执行情况。这个功能不打算在集群中工作。"

#. type: Title ===
#: upstream/_guides/scheduler-reference.adoc:229
#, fuzzy, no-wrap
msgid "Conditional Execution"
msgstr "条件性执行"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:233
#, fuzzy
msgid "You can define the logic to skip any execution of a scheduled method via `@Scheduled#skipExecutionIf()`.  The specified bean class must implement `io.quarkus.scheduler.Scheduled.SkipPredicate` and the execution is skipped if the result of the `test()` method is `true`."
msgstr "你可以通过 `@Scheduled#skipExecutionIf()` ，定义跳过预定方法的任何执行的逻辑。指定的bean类必须实现 `io.quarkus.scheduler.Scheduled.SkipPredicate` ，如果 `test()` 方法的结果是 `true` ，则跳过该执行。"

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:243
#, no-wrap
msgid ""
"   @Scheduled(every = \"1s\", skipExecutionIf = MyPredicate.class) <1>\n"
"   void everySecond() {\n"
"     // do something every second...\n"
"   }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:246
#, no-wrap
msgid ""
"@Singleton <2>\n"
"class MyPredicate implements SkipPredicate {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:249
#: upstream/_guides/scheduler-reference.adoc:267
#, no-wrap
msgid ""
"   @Inject\n"
"   MyService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:254
#, no-wrap
msgid ""
"   boolean test(ScheduledExecution execution) {\n"
"       return !service.isStarted(); <3>\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:256
#, fuzzy
msgid "A bean instance of `MyPredicate.class` is used to evaluate whether an execution should be skipped. There must be exactly one bean that has the specified class in its set of bean types, otherwise the build fails."
msgstr " `MyPredicate.class` 的bean实例用于评估是否应该跳过一个执行。必须有一个豆子在其豆子类型集合中具有指定的类，否则构建失败。"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:257
#, fuzzy
msgid "The scope of the bean must be active during execution."
msgstr "在执行期间，Bean的范围必须是活动的。"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:258
#, fuzzy
msgid "`Jobs.everySecond()` is skipped until `MyService.isStarted()` returns `true`."
msgstr " `Jobs.everySecond()` 被跳过，直到 返回 。 `MyService.isStarted()` `true` "

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:260
#, fuzzy
msgid "Note that this is an equivalent of the following code:"
msgstr "请注意，这等同于以下代码。"

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:275
#, no-wrap
msgid ""
"   @Scheduled(every = \"1s\")\n"
"   void everySecond() {\n"
"     if (service.isStarted()) {\n"
"        // do something every second...\n"
"     }\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:278
#, fuzzy
msgid "The main idea is to keep the the logic to skip the execution outside the scheduled business methods so that it can be reused and refactored easily."
msgstr "主要的想法是保留跳过执行计划中的业务方法的逻辑，这样它就可以很容易地被重用和重构。"

#. type: Title ===
#: upstream/_guides/scheduler-reference.adoc:281
#, fuzzy, no-wrap
msgid "Non-blocking Methods"
msgstr "非阻塞式方法"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:286
#, fuzzy
msgid "By default, a scheduled method is executed on the main executor for blocking tasks.  As a result, a technology that is designed to run on a Vert.x event loop (such as Hibernate Reactive) cannot be used inside the method body.  For this reason, a scheduled method that returns `java.util.concurrent.CompletionStage<Void>` or `io.smallrye.mutiny.Uni<Void>`, or is annotated with `@io.smallrye.common.annotation.NonBlocking` is executed on the Vert.x event loop instead."
msgstr "默认情况下，一个预定的方法是在阻塞任务的主执行器上执行的。因此，被设计为在Vert.x事件循环上运行的技术（如Hibernate Reactive）不能在方法主体内使用。由于这个原因，返回 `java.util.concurrent.CompletionStage<Void>` 或 `io.smallrye.mutiny.Uni<Void>` ，或被注解为 `@io.smallrye.common.annotation.NonBlocking` 的预定方法将在Vert.x事件循环上执行。"

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:296
#, no-wrap
msgid ""
"   @Scheduled(every = \"1s\")\n"
"   Uni<Void> everySecond() { <1>\n"
"     // ...do something async\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:298
#, fuzzy
msgid "The return type `Uni<Void>` instructs the scheduler to execute the method on the Vert.x event loop."
msgstr "返回类型 `Uni<Void>` ，指示调度器在Vert.x事件循环中执行该方法。"

#. type: Title ==
#: upstream/_guides/scheduler-reference.adoc:299
#, fuzzy, no-wrap
msgid "Scheduler"
msgstr "节目表"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:302
#, fuzzy
msgid "Quarkus provides a built-in bean of type `io.quarkus.scheduler.Scheduler` that can be injected and used to pause/resume the scheduler and individual scheduled methods identified by a specific `Scheduled#identity()`."
msgstr "Quarkus提供了一个类型为 `io.quarkus.scheduler.Scheduler` 的内置bean，可以被注入并用于暂停/恢复调度器和由特定的 `Scheduled#identity()` 识别的单个调度方法。"

#. type: Block title
#: upstream/_guides/scheduler-reference.adoc:303
#, fuzzy, no-wrap
msgid "Scheduler Injection Example"
msgstr "调度器注入实例"

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:307
#, no-wrap
msgid "import io.quarkus.scheduler.Scheduler;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:309
#, no-wrap
msgid "class MyService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:312
#, no-wrap
msgid ""
"   @Inject\n"
"   Scheduler scheduler;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:328
#, no-wrap
msgid ""
"   void ping() {\n"
"      scheduler.pause(); <1>\n"
"      scheduler.pause(\"myIdentity\"); <2>\n"
"      if (scheduler.isRunning()) {\n"
"         throw new IllegalStateException(\"This should never happen!\");\n"
"      }\n"
"      scheduler.resume(\"myIdentity\"); <3>\n"
"      scheduler.resume(); <4>\n"
"      scheduler.getScheduledJobs(); <5>\n"
"      Trigger jobTrigger = scheduler.getScheduledJob(\"myIdentity\"); <6>\n"
"      if (jobTrigger != null && jobTrigger.isOverdue()){ <7>\n"
"        // the job is late to the party.\n"
"      }\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:330
#, fuzzy
msgid "Pause all triggers."
msgstr "暂停所有触发器。"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:331
#, fuzzy
msgid "Pause a specific scheduled method by its identity"
msgstr "暂停一个特定的计划方法，通过它的身份"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:332
#, fuzzy
msgid "Resume a specific scheduled method by its identity"
msgstr "通过其身份恢复一个特定的计划方法"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:333
#, fuzzy
msgid "Resume the scheduler."
msgstr "恢复调度器。"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:334
#, fuzzy
msgid "List all jobs in the scheduler."
msgstr "列出调度器中的所有工作。"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:335
#, fuzzy
msgid "Get Trigger metadata for a specific scheduled job by its identity."
msgstr "按身份获取特定计划任务的Trigger元数据。"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:336
#, fuzzy
msgid "You can configure the grace period for isOverdue() with quarkus.scheduler.overdue-grace-period"
msgstr "你可以用quarkus.scheduler.overdue-grace-period为isOverdue()配置宽限期。"

#. type: Title ==
#: upstream/_guides/scheduler-reference.adoc:337
#, fuzzy, no-wrap
msgid "Programmatic Scheduling"
msgstr "方案安排"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:340
#, fuzzy
msgid "If you need to schedule a job programmatically you'll need to add the xref:quartz.adoc[Quartz extension] and use the Quartz API directly."
msgstr "如果你需要以编程方式安排工作，你需要添加 link:quartz.html[Quartz扩展] 并直接使用Quartz API。"

#. type: Block title
#: upstream/_guides/scheduler-reference.adoc:341
#, fuzzy, no-wrap
msgid "Programmatic Scheduling with Quartz API"
msgstr "用Quartz API进行程序化调度"

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:345
#, no-wrap
msgid "import org.quartz.Scheduler;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:347
#, no-wrap
msgid "class MyJobs {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:362
#, no-wrap
msgid ""
"    void onStart(@Observes StartupEvent event, Scheduler quartz) throws SchedulerException {\n"
"        JobDetail job = JobBuilder.newJob(SomeJob.class)\n"
"                .withIdentity(\"myJob\", \"myGroup\")\n"
"                .build();\n"
"        Trigger trigger = TriggerBuilder.newTrigger()\n"
"                .withIdentity(\"myTrigger\", \"myGroup\")\n"
"                .startNow()\n"
"                .withSchedule(SimpleScheduleBuilder.simpleSchedule()\n"
"                        .withIntervalInSeconds(1)\n"
"                        .repeatForever())\n"
"                .build();\n"
"        quartz.scheduleJob(job, trigger);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:365
#, fuzzy
msgid "By default, the scheduler is not started unless a `@Scheduled` business method is found. You may need to force the start of the scheduler for \"pure\" programmatic scheduling. See also <<quartz.adoc#quartz-configuration-reference,Quartz Configuration Reference>>."
msgstr "默认情况下，除非找到一个 `@Scheduled` 的业务方法，否则调度器不会被启动。你可能需要为 \"纯 \"程序化调度强制启动调度器。请参见 link:quartz.html#quartz-configuration-reference[Quartz配置参考] 。"

#. type: Title ==
#: upstream/_guides/scheduler-reference.adoc:366
#, fuzzy, no-wrap
msgid "Scheduled Methods and Testing"
msgstr "预定的方法和测试"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:372
#, fuzzy
msgid "It is often desirable to disable the scheduler when running the tests.  The scheduler can be disabled through the runtime config property `quarkus.scheduler.enabled`.  If set to `false` the scheduler is not started even though the application contains scheduled methods.  You can even disable the scheduler for particular <<getting-started-testing#testing_different_profiles,Test Profiles>>."
msgstr "在运行测试时，通常需要禁用调度器。调度器可以通过运行时配置属性 `quarkus.scheduler.enabled` 来禁用。如果设置为 `false` ，即使应用程序包含调度方法，调度器也不会启动。你甚至可以为特定的 link:getting-started-testing.html#testing_different_profiles[测试配置文件] 禁用调度器。"

#. type: Title ==
#: upstream/_guides/scheduler-reference.adoc:373
#, fuzzy, no-wrap
msgid "Metrics"
msgstr "度量衡"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:376
#, fuzzy
msgid "Some basic metrics are published out of the box if `quarkus.scheduler.metrics.enabled` is set to `true` and a metrics extension is present."
msgstr "如果 `quarkus.scheduler.metrics.enabled` 设置为 `true` ，并且有一个度量衡扩展，那么一些基本的度量衡就会开箱发布。"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:378
#, fuzzy
msgid "If the xref:micrometer.adoc[Micrometer extension] is present, then a `@io.micrometer.core.annotation.Timed` interceptor binding is added to all `@Scheduled` methods automatically (unless it's already present) and a `io.micrometer.core.instrument.Timer` with name `scheduled.methods` and a `io.micrometer.core.instrument.LongTaskTimer` with name `scheduled.methods.running` are registered. The fully qualified name of the declaring class and the name of a `@Scheduled` method are used as tags."
msgstr "如果 link:micrometer.html[Micrometer扩展] 存在，那么所有的 `@Scheduled` 方法都会自动添加一个 `@io.micrometer.core.annotation.Timed` 拦截器绑定（除非它已经存在），并且注册一个名为 `scheduled.methods` 的 `io.micrometer.core.instrument.Timer` 和一个名为 `scheduled.methods.running` 的 `io.micrometer.core.instrument.LongTaskTimer` 。声明类的完全合格名称和 `@Scheduled` 方法的名称被用作标签。"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:380
msgid "If the xref:smallrye-metrics.adoc[SmallRye Metrics extension] is present, then a `@org.eclipse.microprofile.metrics.annotation.Timed` interceptor binding is added to all `@Scheduled` methods automatically (unless it's already present) and a `org.eclipse.microprofile.metrics.Timer` is created for each `@Scheduled` method. The name consists of the fully qualified name of the declaring class and the name of a `@Scheduled` method. The timer has a tag `scheduled=true`."
msgstr ""

#. type: Title ==
#: upstream/_guides/scheduler-reference.adoc:381
#, no-wrap
msgid "Configuration Reference"
msgstr ""
