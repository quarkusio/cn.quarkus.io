msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _guides/opentelemetry-tracing.adoc
msgid "Using OpenTelemetry Tracing"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid ""
"This guide explains how your Quarkus application can utilize https://opentelemetry.io/[OpenTelemetry] (OTel) to provide\n"
"distributed tracing for interactive web applications."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "The xref:opentelemetry.adoc[OpenTelemetry Guide] is available with signal independent information about the OpenTelemetry extension."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "If you search more information about OpenTelemetry Metrics, please refer to the xref:opentelemetry-metrics.adoc[OpenTelemetry Metrics Guide]."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Prerequisites"
msgstr "先决条件"

#: _guides/opentelemetry-tracing.adoc
msgid "Architecture"
msgstr "应用结构"

#: _guides/opentelemetry-tracing.adoc
msgid "In this guide, we create a straightforward REST application to demonstrate distributed tracing."
msgstr "在本指南中，我们创建了一个简单的REST应用程序来演示分布式跟踪服务。"

#: _guides/opentelemetry-tracing.adoc
msgid "Solution"
msgstr "解决方案"

#: _guides/opentelemetry-tracing.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can skip right to the completed example."
msgstr "我们建议您按照下面几节的说明，一步一步地创建应用程序。不过，您可以直接跳到已完成的例子。"

#: _guides/opentelemetry-tracing.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#: _guides/opentelemetry-tracing.adoc
msgid "The solution is located in the `opentelemetry-quickstart` link:{quickstarts-tree-url}/opentelemetry-quickstart[directory]."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Creating the Maven project"
msgstr "创建Maven项目"

#: _guides/opentelemetry-tracing.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#: _guides/opentelemetry-tracing.adoc
msgid ""
"This command generates the Maven project and imports the `quarkus-opentelemetry` extension,\n"
"which includes the default OpenTelemetry support,\n"
"and a gRPC span exporter for https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/otlp.md[OTLP]."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `quarkus-opentelemetry` extension\n"
"to your project by running the following command in your project base directory:"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "This will add the following to your build file:"
msgstr "这将在您的构建文件中添加以下内容："

#: _guides/opentelemetry-tracing.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _guides/opentelemetry-tracing.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _guides/opentelemetry-tracing.adoc
msgid "Examine the Jakarta REST resource"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Create a `src/main/java/org/acme/opentelemetry/TracedResource.java` file with the following content:"
msgstr "创建一个 `src/main/java/org/acme/opentelemetry/TracedResource.java` 文件，内容如下："

#: _guides/opentelemetry-tracing.adoc
msgid ""
"Notice that there is no tracing specific code included in the application. By default, requests sent to this\n"
"endpoint will be traced without any required code changes."
msgstr "请注意，应用程序中没有包含任何关于追踪的代码。默认情况下，不需要修改任何必要的代码就可以实现对发送到这个节点的请求进行追踪。"

#: _guides/opentelemetry-tracing.adoc
msgid "Create the configuration"
msgstr "创建配置"

#: _guides/opentelemetry-tracing.adoc
msgid "Run the application"
msgstr "运行应用程序"

#: _guides/opentelemetry-tracing.adoc
msgid ""
"First we need to start a system to visualise the OpenTelemetry data.\n"
"We have 2 options:"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Start an all-in-one Grafana OTel LGTM system for traces and metrics."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Jaeger system just for traces."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Grafana OTel LGTM option"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Take a look at: xref:observability-devservices-lgtm.adoc[Getting Started with Grafana-OTel-LGTM]."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "This features a Quarkus Dev service including a Grafana for visualizing data, Loki to store logs, Tempo to store traces and Prometheus to store metrics. Also provides and OTel collector to receive the data."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Jaeger to see traces option"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Configure and start the https://opentelemetry.io/docs/collector/[OpenTelemetry Collector] to receive, process and export telemetry data to https://www.jaegertracing.io/[Jaeger] that will display the captured traces."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid ""
"Jaeger-all-in-one includes the Jaeger agent, an OTel collector, and the query service/UI.\n"
"You do not need to install a separated collector. You can directly send the trace data to Jaeger (after enabling OTLP receivers there, see e.g. this\n"
"https://medium.com/jaegertracing/introducing-native-support-for-opentelemetry-in-jaeger-eb661be8183c[blog entry] for details)."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Start the OpenTelemetry Collector and Jaeger system via the following `docker-compose.yml` file that you can launch via `docker-compose up -d`:"
msgstr "您可以通过 `docker-compose up -d` 命令和下面的 `docker-compose.yml` 文件来启动OpenTelemetry Collector和Jaeger系统："

#: _guides/opentelemetry-tracing.adoc
msgid "You should remove the optional ports you don't need them."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Start the application"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Now we are ready to run our application. If using `application.properties` to configure the tracer:"
msgstr "现在我们准备运行我们的应用程序。如果使用 `application.properties` 来配置tracer："

#: _guides/opentelemetry-tracing.adoc
msgid "or if configuring the OTLP gRPC endpoint via JVM arguments:"
msgstr "或者如果通过JVM参数配置OTLP gRPC节点："

#: _guides/opentelemetry-tracing.adoc
msgid "With the OpenTelemetry Collector, the Jaeger system and the application running, you can make a request to the provided endpoint:"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "When the first request has been submitted, you will be able to see the tracing information in the logs:"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Then visit the http://localhost:16686[Jaeger UI] to see the tracing information."
msgstr "然后访问 link:http://localhost:16686[Jaeger界面] 来查看追踪信息。"

#: _guides/opentelemetry-tracing.adoc
msgid "Hit `CTRL+C` or type `q` to stop the application."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "JDBC"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "The https://github.com/open-telemetry/opentelemetry-java-instrumentation/tree/main/instrumentation/jdbc/library[JDBC instrumentation] will add a span for each JDBC queries done by your application, to enable it, add the following dependency to your build file:"
msgstr "通过link:https://github.com/open-telemetry/opentelemetry-java-instrumentation/tree/main/instrumentation/jdbc/library[JDBC instrumentation] 可以为您的应用程序的每个JDBC查询添加一个span。要启用它，请在您的构建文件中添加以下依赖："

#: _guides/opentelemetry-tracing.adoc
msgid "As it uses a dedicated JDBC datasource wrapper, you must enable telemetry for your datasource:"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Additional configuration"
msgstr "其他配置"

#: _guides/opentelemetry-tracing.adoc
msgid ""
"Some use cases will require custom configuration of OpenTelemetry.\n"
"These sections will outline what is necessary to properly configure it."
msgstr "有些情况下需要对OpenTelemetry进行自定义配置。以下章节将展示如何对一些必要的属性进行正确配置。"

#: _guides/opentelemetry-tracing.adoc
msgid "ID Generator"
msgstr "ID生成器（ID Generator）"

#: _guides/opentelemetry-tracing.adoc
msgid ""
"The OpenTelemetry extension will use by default a random https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#id-generators[ID Generator]\n"
"when creating the trace and span identifier."
msgstr "OpenTelemetry扩展将默认使用一个随机的 link:https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#id-generators[ID发生器] 来创建trace和span标识符。"

#: _guides/opentelemetry-tracing.adoc
msgid ""
"Some vendor-specific protocols need a custom ID Generator, you can override the default one by creating a producer.\n"
"The OpenTelemetry extension will detect the `IdGenerator` CDI bean and will use it when configuring the tracer producer."
msgstr "一些供应商特定协议需要一个自定义的ID生成器，您可以通过创建一个自定义生成器来覆盖默认的ID。OpenTelemetry扩展将检测 `IdGenerator` CDI Bean，并在配置tracer生成器时使用它。"

#: _guides/opentelemetry-tracing.adoc
msgid "Propagators"
msgstr "Propagators"

#: _guides/opentelemetry-tracing.adoc
msgid ""
"OpenTelemetry propagates cross-cutting concerns through https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/context/api-propagators.md[propagators] that will share an underlying `Context` for storing state and accessing\n"
"data across the lifespan of a distributed transaction."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid ""
"By default, the OpenTelemetry extension enables the https://www.w3.org/TR/trace-context/[W3C Trace Context] and the https://www.w3.org/TR/baggage/[W3C Baggage]\n"
"propagators, you can however choose any of the supported OpenTelemetry propagators by setting the `propagators` config that is described in the <<configuration-reference>>."
msgstr "默认情况下，OpenTelemetry扩展启用了 link:https://www.w3.org/TR/trace-context/[W3C Trace Context] 和 link:https://www.w3.org/TR/baggage/[W3C Baggage] propagators，但是您可以通过设置 link:#configuration-reference[[参考配置]] 中描述的 `propagators` 配置来选择任何支持的OpenTelemetry propagators。"

#: _guides/opentelemetry-tracing.adoc
msgid "Additional Propagators"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid ""
"The `b3`, `b3multi`, `jaeger` and `ottrace` propagators will need the https://github.com/open-telemetry/opentelemetry-java/tree/main/extensions/trace-propagators[trace-propagators]\n"
"extension to be added as a dependency to your project."
msgstr "`b3` , `b3multi` , `jaeger` 和 `ottrace` propatagors 需要将 link:https://github.com/open-telemetry/opentelemetry-java/tree/main/extensions/trace-propagators[trace-propagators] 扩展作为一个依赖添加到您的项目中。"

#: _guides/opentelemetry-tracing.adoc
msgid ""
"The `xray` propagator will need the https://github.com/open-telemetry/opentelemetry-java-contrib/tree/main/aws-xray-propagator[aws]\n"
"extension to be added as a dependency to your project."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Customise Propagator"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "To customise the propagation header you can implement the `TextMapPropagatorCustomizer` interface. This can be used, as an example, to restrict propagation of OpenTelemetry trace headers and prevent potentially sensitive data to be sent to third party systems."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Resource"
msgstr "资源"

#: _guides/opentelemetry-tracing.adoc
msgid "See the main xref:opentelemetry.adoc#resource[OpenTelemetry Guide resources] section."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "End User attributes"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid ""
"When enabled, Quarkus adds OpenTelemetry End User attributes as Span attributes.\n"
"Before you enable this feature, verify that Quarkus Security extension is present and configured.\n"
"More information about the Quarkus Security can be found in the xref:security-overview.adoc[Quarkus Security overview]."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid ""
"The attributes are only added when authentication has already happened on a best-efforts basis.\n"
"Whether the End User attributes are added as Span attributes depends on authentication and authorization configuration of your Quarkus application.\n"
"If you create custom Spans prior to the authentication, Quarkus cannot add the End User attributes to them.\n"
"Quarkus is only able to add the attributes to the Span that is current after the authentication has been finished.\n"
"Another important consideration regarding custom Spans is active CDI request context that is used to propagate Quarkus `SecurityIdentity`.\n"
"In principle, Quarkus is able to add the End User attributes when the CDI request context has been activated for you before the custom Spans are created."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid ""
"Enable the End User Attributes feature so that the `SecurityIdentity` principal and roles are added as Span attributes.\n"
"The End User attributes are personally identifiable information, therefore make sure you want to export them before you enable this feature."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid ""
"Optionally enable proactive authentication.\n"
"The best possible results are achieved when proactive authentication is enabled because the authentication happens sooner.\n"
"A good way to determine whether proactive authentication should be enabled in your Quarkus application is to read the Quarkus xref:security-proactive-authentication.adoc[Proactive authentication] guide."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "This feature is not supported when a custom xref:security-customization.adoc#jaxrs-security-context[Jakarta REST SecurityContexts] is used."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Sampler"
msgstr "采样器(Sampler)"

#: _guides/opentelemetry-tracing.adoc
msgid "A https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#sampling[sampler] decides whether a trace should be discarded or forwarded, effectively managing noise and reducing overhead by limiting the number of collected traces sent to the collector."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Quarkus comes equipped with a https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#built-in-samplers[built-in sampler], and you also have the option to create your custom sampler."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "To use the built-in sampler, you can configure it by setting the desired sampler parameters as detailed in the <<configuration-reference>>. As an example, you can configure the sampler to retain 50% of the traces:"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "An interesting use case for the sampler is to activate and deactivate tracing export at runtime, acording to this example:"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Quarkus 3.0 introduced breaking changes on the configuration."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Sampler related property names and values change to comply with the latest Java OpenTelemetry SDK. During a transition period it will be possible to set the new configuration values in the old property because we are mapping  `quarkus.opentelemetry.tracer.sampler` -> `quarkus.otel.traces.sampler`."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "If the sampler is parent based, there is no need to set, the now dropped property, `quarkus.opentelemetry.tracer.sampler.parent-based`."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "The values you need to set on `quarkus.opentelemetry.tracer.sampler` are now:"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Old Sampler config value"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "New Sampler config value"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "New Sampler config value (Parent based)"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "`on`"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "`always_on`"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "`parentbased_always_on`"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "`off`"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "`always_off`"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "`parentbased_always_off`"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "`ratio`"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "`traceidratio`"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "`parentbased_traceidratio`"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "If you need to use a custom sampler there are now 2 different ways:"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Sampler CDI Producer"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "You can create a sampler CDI producer. The Quarkus OpenTelemetry extension will detect the `Sampler` CDI bean and will use it when configuring the Tracer."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "OTel Sampler SPI"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid ""
"This will use the SPI hooks available with the OTel Autoconfiguration.\n"
"You can create a simple Sampler class:"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Then a Sampler Provider:"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Write the SPI loader text file at `resources/META-INF/services` with name `io.opentelemetry.sdk.autoconfigure.spi.traces.ConfigurableSamplerProvider` containing the full qualified name of the `CustomSPISamplerProvider` class."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Then activate on the configuration:"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "As you can see, CDI is much simpler to work with."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Additional instrumentation"
msgstr "其他的植入(instrumentation)"

#: _guides/opentelemetry-tracing.adoc
msgid ""
"Some Quarkus extensions will require additional code to ensure traces are propagated to subsequent execution.\n"
"These sections will outline what is necessary to propagate traces across process boundaries."
msgstr "一些Quarkus扩展需要额外的代码来确保traces被传播到后续执行中。以下章节将展示跨越进程边界传播traces的必要条件。"

#: _guides/opentelemetry-tracing.adoc
msgid "The instrumentation documented in this section has been tested with Quarkus and works in both standard and native mode."
msgstr "本节中用到的植入方式已经过Quarkus测试，并且在标准和本地模式下都能工作。"

#: _guides/opentelemetry-tracing.adoc
msgid "CDI"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid ""
"Annotating a method in any CDI aware bean with the `io.opentelemetry.instrumentation.annotations.WithSpan`\n"
"annotation will create a new Span and establish any required relationships with the current Trace context."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Annotating a method in any CDI aware bean with the `io.opentelemetry.instrumentation.annotations.AddingSpanAttributes` will not create a new span but will add annotated method parameters to attributes in the current span."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "If a method is annotated by mistake with `@AddingSpanAttributes` and `@WithSpan` annotations, the `@WithSpan` annotation will take precedence."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid ""
"Method parameters can be annotated with the `io.opentelemetry.instrumentation.annotations.SpanAttribute` annotation to\n"
"indicate which method parameters should be part of the span. The parameter name can be customized as well."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Example:"
msgstr "例如："

#: _guides/opentelemetry-tracing.adoc
msgid "Available OpenTelemetry CDI injections"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid ""
"As per MicroProfile Telemetry Tracing specification, Quarkus supports the CDI injections of the\n"
"following classes:"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "`io.opentelemetry.api.OpenTelemetry`"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "`io.opentelemetry.api.trace.Tracer`"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "`io.opentelemetry.api.trace.Span`"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "`io.opentelemetry.api.baggage.Baggage`"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "You can inject these classes in any CDI enabled bean. For instance, the `Tracer` is particularly useful to start custom spans:"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Quarkus Messaging - Kafka"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid ""
"When using the Quarkus Messaging extension for Kafka,\n"
"we are able to propagate the span into the Kafka Record with:"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid ""
"The above creates a `TracingMetadata` object we can add to the `Message` being produced,\n"
"which retrieves the OpenTelemetry `Context` to extract the current span for propagation."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Quarkus Security Events"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Quarkus supports exporting of the xref:security-customization.adoc#observe-security-events[Security events] as OpenTelemetry Span events."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Export Quarkus Security events as OpenTelemetry Span events."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Exporters"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "See the main xref:opentelemetry.adoc#exporters[OpenTelemetry Guide exporters] section."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Quarkus core extensions instrumented with OpenTelemetry tracing"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "https://quarkus.io/extensions/io.quarkus/quarkus-agroal[`quarkus-agroal`]"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "https://quarkus.io/guides/grpc-getting-started[`quarkus-grpc`]"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "https://quarkus.io/guides/redis[`quarkus-redis-client`]"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "https://quarkus.io/extensions/io.quarkus/quarkus-rest-client-jaxrs[`quarkus-rest-client-jaxrs`]"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "https://quarkus.io/guides/rest[`quarkus-rest`]"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "https://quarkus.io/guides/resteasy[`quarkus-resteasy-jackson`]"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "https://quarkus.io/guides/resteasy-client[`quarkus-resteasy-client`]"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "https://quarkus.io/guides/scheduler[`quarkus-scheduler`]"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "https://quarkus.io/guides/smallrye-graphql[`quarkus-smallrye-graphql`]"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "https://quarkus.io/extensions/io.quarkus/quarkus-mongodb-client[`quarkus-mongodb-client`]"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "https://quarkus.io/extensions/io.quarkus/quarkus-messaging[`quarkus-messaging`]"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "AMQP 1.0"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "RabbitMQ"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Kafka"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Pulsar"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "https://quarkus.io/guides/vertx[`quarkus-vertx`] (http requests)"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Disable parts of the automatic tracing"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Automatic tracing instrumentation parts can be disabled by setting `quarkus.otel.instrument.*` properties to `false`."
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "Examples:"
msgstr ""

#: _guides/opentelemetry-tracing.adoc
msgid "OpenTelemetry Configuration Reference"
msgstr "OpenTelemetry参考配置"

#: _guides/opentelemetry-tracing.adoc
msgid "See the main xref:opentelemetry.adoc#configuration-reference[OpenTelemetry Guide configuration] reference."
msgstr ""
