# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-12-06 10:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "OpenID Connect client and token propagation quickstart"
msgstr "OpenID Connect 客户端和令牌传播快速入门"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Learn how to use OpenID Connect (OIDC) and OAuth2 clients with filters to get, refresh, and propagate access tokens in your applications."
msgstr "了解如何使用带有过滤器的 OpenID Connect (OIDC) 和 OAuth2 客户端在应用程序中获取、刷新和传播访问令牌。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "For more information about `OIDC Client` and `Token Propagation` support in Quarkus, see the xref:security-openid-connect-client-reference.adoc[OpenID Connect (OIDC) and OAuth2 client and filters reference guide]."
msgstr "有关 Quarkus 支持 `OIDC Client` 和 `Token Propagation` 的更多信息，请参阅 xref:security-openid-connect-client-reference.adoc[OpenID Connect (OIDC) 和 OAuth2 客户端和过滤器参考指南] 。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "To protect your applications by using Bearer Token Authorization, see the xref:security-oidc-bearer-token-authentication.adoc[OpenID Connect (OIDC) Bearer token authentication] guide."
msgstr "要使用承载令牌授权保护应用程序，请参阅 xref:security-oidc-bearer-token-authentication.adoc[OpenID Connect (OIDC) 承载令牌身份验证] 指南。"

#. type: Title ==
#: _guides/security-openid-connect-client.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: _guides/security-openid-connect-client.adoc
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr "link:https://stedolan.github.io/jq/[jq工具]"

#. type: Title ==
#: _guides/security-openid-connect-client.adoc
#, no-wrap
msgid "Architecture"
msgstr "架构"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"In this example, an application is built with two Jakarta REST resources, `FrontendResource` and `ProtectedResource`.\n"
"Here, `FrontendResource` uses one of three methods to propagate access tokens to `ProtectedResource`:"
msgstr "在本例中，应用程序通过两个 Jakarta REST 资源 `FrontendResource` 和 `ProtectedResource` 构建。在此， `FrontendResource` 使用三种方法之一将访问令牌传播到 `ProtectedResource` ："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "It can get a token by using an OIDC client filter before propagating it."
msgstr "它可以通过使用 OIDC 客户端过滤器获取令牌，然后再进行传播。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "It can get a token by using a programmatically created OIDC client and propagate it by passing it to a REST client method as an HTTP `Authorization` header value."
msgstr "它可以使用编程创建的 OIDC 客户端获取令牌，并将其作为 HTTP `Authorization` 头值传递给 REST 客户端方法，从而传播令牌。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "It can use an OIDC token propagation filter to propagate the incoming access token."
msgstr "它可以使用 OIDC 令牌传播过滤器来传播传入的访问令牌。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`FrontendResource` has eight endpoints:"
msgstr "`FrontendResource` 有八个端点："

#. type: Plain text
#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`/frontend/user-name-with-oidc-client-token`"
msgstr " `/frontend/user-name-with-oidc-client` "

#. type: Plain text
#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`/frontend/admin-name-with-oidc-client-token`"
msgstr " `/frontend/admin-name-with-oidc-client` "

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`/frontend/user-name-with-oidc-client-token-header-param`"
msgstr "`/frontend/user-name-with-oidc-client-token-header-param`"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`/frontend/admin-name-with-oidc-client-token-header-param`"
msgstr "`/frontend/admin-name-with-oidc-client-token-header-param`"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`/frontend/user-name-with-oidc-client-token-header-param-blocking`"
msgstr "`/frontend/user-name-with-oidc-client-token-header-param-blocking`"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`/frontend/admin-name-with-oidc-client-token-header-param-blocking`"
msgstr "`/frontend/admin-name-with-oidc-client-token-header-param-blocking`"

#. type: Plain text
#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`/frontend/user-name-with-propagated-token`"
msgstr " `/frontend/user-name-with-propagated-token` "

#. type: Plain text
#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`/frontend/admin-name-with-propagated-token`"
msgstr " `/frontend/admin-name-with-propagated-token` "

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"When either `/frontend/user-name-with-oidc-client-token` or `/frontend/admin-name-with-oidc-client-token` endpoint is called, `FrontendResource` uses a REST client with an OIDC client filter to get and propagate an access token to `ProtectedResource` .\n"
"When either `/frontend/user-name-with-oidc-client-token-header-param` or `/frontend/admin-name-with-oidc-client-token-header-param` endpoint is called, `FrontendResource` uses a programmatically created OIDC client to get and propagate an access token to `ProtectedResource` by passing it to a REST client method as an HTTP `Authorization` header value.\n"
"When either `/frontend/user-name-with-propagated-token` or `/frontend/admin-name-with-propagated-token` endpoint is called, `FrontendResource` uses a REST client with `OIDC Token Propagation Filter` to propagate the current incoming access token to `ProtectedResource`."
msgstr "当调用 `/frontend/user-name-with-oidc-client-token` 或 `/frontend/admin-name-with-oidc-client-token` 端点时， `FrontendResource` 会使用带有 OIDC 客户端过滤器的 REST 客户端获取访问令牌并将其传播到 `ProtectedResource` 。调用 `/frontend/user-name-with-oidc-client-token-header-param` 或 `/frontend/admin-name-with-oidc-client-token-header-param` 端点时， `FrontendResource` 会使用编程创建的 OIDC 客户端，通过将访问令牌作为 HTTP `Authorization` 标头值传递给 REST 客户端方法，获取访问令牌并将其传播到 `ProtectedResource` 。当调用 `/frontend/user-name-with-propagated-token` 或 `/frontend/admin-name-with-propagated-token` 端点时， `FrontendResource` 会使用 `OIDC Token Propagation Filter` 的 REST 客户端将当前传入的访问令牌传播到 `ProtectedResource` 。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`ProtectedResource` has two endpoints:"
msgstr "`ProtectedResource` 有两个端点："

#. type: Plain text
#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`/protected/user-name`"
msgstr " `/protected/user-name` "

#. type: Plain text
#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`/protected/admin-name`"
msgstr " `/protected/admin-name` "

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"Both endpoints return the username extracted from the incoming access token, which was propagated to `ProtectedResource` from `FrontendResource`.\n"
"The only difference between these endpoints is that calling `/protected/user-name` is only allowed if the current access token has a `user` role, and calling `/protected/admin-name` is only allowed if the current access token has an `admin` role."
msgstr "这两个端点都返回从传入的访问令牌中提取的用户名，访问令牌是从 `FrontendResource` 传播到 `ProtectedResource` 的。这两个端点的唯一区别是，只有当前访问令牌具有 `user` 角色时，才允许调用 `/protected/user-name` ，只有当前访问令牌具有 `admin` 角色时，才允许调用 `/protected/admin-name` 。"

#. type: Title ==
#: _guides/security-openid-connect-client.adoc
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#: _guides/security-openid-connect-client.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#. type: Plain text
#: _guides/security-openid-connect-client.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "The solution is in the `security-openid-connect-client-quickstart` link:{quickstarts-tree-url}/security-openid-connect-client-quickstart[directory]."
msgstr "解决方案位于 `security-openid-connect-client-quickstart` link:{quickstarts-tree-url}/security-openid-connect-client-quickstart[目录] 中。"

#: _guides/security-openid-connect-client.adoc
msgid "Creating the Maven project"
msgstr "创建Maven项目"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"First, you need a new project.\n"
"Create a new project with the following command:"
msgstr "首先，你需要一个新项目。使用以下命令创建一个新项目："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "It generates a Maven project, importing the `oidc`, `rest-client-oidc-filter`, `rest-client-oidc-token-propagation`, and `rest` extensions."
msgstr "它生成一个 Maven 项目，导入 `oidc` , `rest-client-oidc-filter` , `rest-client-oidc-token-propagation` 和 `rest` 扩展。"

#. type: Plain text
#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "If you already have your Quarkus project configured, you can add these extensions to your project by running the following command in your project base directory:"
msgstr "如果你已经配置了你的Quarkus项目，你可以通过在你的项目基本目录下运行以下命令将这些扩展添加到你的项目中。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "It adds the following extensions to your build file:"
msgstr "它会在构建文件中添加以下扩展："

#. type: Block title
#: _guides/security-openid-connect-client.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _guides/security-openid-connect-client.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: _guides/security-openid-connect-client.adoc
#, no-wrap
msgid "Writing the application"
msgstr "编写应用程序"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Start by implementing `ProtectedResource`:"
msgstr "从实施 `ProtectedResource` 开始："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"`ProtectedResource` returns a name from both `userName()` and `adminName()` methods.\n"
"The name is extracted from the current `JsonWebToken`."
msgstr "`ProtectedResource` `userName()` 和 方法返回一个名称。名称是从当前 中提取的。 `adminName()` `JsonWebToken`"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Next, add the following REST clients:"
msgstr "接下来，添加以下 REST 客户端："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`RestClientWithOidcClientFilter`, which uses an OIDC client filter provided by the `quarkus-rest-client-oidc-filter` extension to get and propagate an access token."
msgstr "`RestClientWithOidcClientFilter` ，它使用 `quarkus-rest-client-oidc-filter` 扩展提供的 OIDC 客户端过滤器来获取和传播访问令牌。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`RestClientWithTokenHeaderParam`, which accepts a token already acquired by the programmatically created OidcClient as an HTTP `Authorization` header value."
msgstr "`RestClientWithTokenHeaderParam` ，它接受编程创建的 OidcClient 已获取的令牌作为 HTTP `Authorization` 头值。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`RestClientWithTokenPropagationFilter`, which uses an OIDC token propagation filter provided by the `quarkus-rest-client-oidc-token-propagation` extension to get and propagate an access token."
msgstr "`RestClientWithTokenPropagationFilter` ，它使用 `quarkus-rest-client-oidc-token-propagation` 扩展提供的 OIDC 令牌传播过滤器来获取和传播访问令牌。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Add the `RestClientWithOidcClientFilter` REST client:"
msgstr "添加 `RestClientWithOidcClientFilter` REST 客户端："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Register an OIDC client filter with the REST client to get and propagate the tokens."
msgstr "在 REST 客户端注册 OIDC 客户端过滤器，以获取和传播令牌。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Add the `RestClientWithTokenHeaderParam` REST client:"
msgstr "添加 `RestClientWithTokenHeaderParam` REST 客户端："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`RestClientWithTokenHeaderParam` REST client expects that the tokens will be passed to it as HTTP `Authorization` header values."
msgstr "`RestClientWithTokenHeaderParam` REST 客户端希望将标记作为 HTTP 头值传递给它。 `Authorization` "

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Add the `RestClientWithTokenPropagationFilter` REST client:"
msgstr "添加 `RestClientWithTokenPropagationFilter` REST 客户端："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Register an OIDC token propagation filter with the REST client to propagate the incoming already-existing tokens."
msgstr "在 REST 客户端注册 OIDC 标记传播过滤器，以传播传入的已有标记。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"Do not use the `RestClientWithOidcClientFilter` and `RestClientWithTokenPropagationFilter` interfaces in the same REST client because they can conflict, leading to issues.\n"
"For example, the OIDC client filter can override the token from the OIDC token propagation filter, or the propagation filter might not work correctly if it attempts to propagate a token when none is available, expecting the OIDC client filter to obtain a new token instead."
msgstr "不要在同一个 REST 客户端中使用 `RestClientWithOidcClientFilter` 和 `RestClientWithTokenPropagationFilter` 接口，因为它们可能会发生冲突，从而导致问题。例如，OIDC 客户端过滤器可能会覆盖来自 OIDC 令牌传播过滤器的令牌，或者如果传播过滤器在没有令牌可用的情况下尝试传播令牌，而期望 OIDC 客户端过滤器获取新令牌，则传播过滤器可能无法正常工作。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Also, add `OidcClientCreator` to create an OIDC client programmatically at startup. `OidcClientCreator` supports `RestClientWithTokenHeaderParam` REST client calls:"
msgstr "此外，还可添加 `OidcClientCreator` ，以便在启动时以编程方式创建 OIDC 客户端。 `OidcClientCreator` 支持 `RestClientWithTokenHeaderParam` REST 客户端调用："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`OidcClients` can be used to retrieve the already initialized, named OIDC clients and create new OIDC clients on demand."
msgstr "`OidcClients` 可用于检索已初始化、已命名的 OIDC 客户端，并按需创建新的 OIDC 客户端。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Now, finish creating the application by adding `FrontendResource`:"
msgstr "现在，添加 `FrontendResource` ，完成应用程序的创建："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`FrontendResource` uses the injected `RestClientWithOidcClientFilter` REST client with the OIDC client filter to get and propagate an access token to `ProtectedResource` when either `/frontend/user-name-with-oidc-client-token` or `/frontend/admin-name-with-oidc-client-token` is called."
msgstr "`FrontendResource` 使用注入的 REST 客户端和 OIDC 客户端过滤器，在调用 或 时获取访问令牌并将其传播到 。 `RestClientWithOidcClientFilter` `/frontend/user-name-with-oidc-client-token` `/frontend/admin-name-with-oidc-client-token` `ProtectedResource` "

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`FrontendResource` uses the injected `RestClientWithTokenPropagationFilter` REST client with the OIDC token propagation filter to propagate the current incoming access token to `ProtectedResource` when either `/frontend/user-name-with-propagated-token` or `/frontend/admin-name-with-propagated-token` is called."
msgstr "`FrontendResource` 使用注入的 REST 客户端和 OIDC 令牌传播过滤器，在调用 或 时将当前传入的访问令牌传播到 。 `RestClientWithTokenPropagationFilter` `/frontend/user-name-with-propagated-token` `/frontend/admin-name-with-propagated-token` `ProtectedResource` "

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`FrontendResource` uses the programmatically created OIDC client to get and propagate an access token to `ProtectedResource` by passing it directly to the injected `RestClientWithTokenHeaderParam` REST client's method as an HTTP `Authorization` header value, when either `/frontend/user-name-with-oidc-client-token-header-param` or `/frontend/admin-name-with-oidc-client-token-header-param` is called."
msgstr "`FrontendResource` 在调用 或 时，使用编程创建的 OIDC 客户端将访问令牌作为 HTTP 头值直接传递给注入的 REST 客户端方法，从而获取访问令牌并将其传播到 。 `/frontend/user-name-with-oidc-client-token-header-param` `/frontend/admin-name-with-oidc-client-token-header-param` `Authorization` `RestClientWithTokenHeaderParam` `ProtectedResource` "

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Sometimes, one may have to acquire tokens in a blocking manner before propagating them with the REST client. This example shows how to acquire the tokens in such cases."
msgstr "有时，在向 REST 客户端传播令牌之前，可能需要以阻塞方式获取令牌。本例展示了在这种情况下如何获取令牌。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`io.quarkus.oidc.client.runtime.TokensHelper` is a useful tool when OIDC client is used directly, without the OIDC client filter. To use `TokensHelper`, pass OIDC Client to it to get the tokens and `TokensHelper` acquires the tokens and refreshes them if necessary in a thread-safe way."
msgstr "`io.quarkus.oidc.client.runtime.TokensHelper` 是直接使用 OIDC 客户端而不使用 OIDC 客户端过滤器时的有用工具。要使用 ，请将 OIDC 客户端传递给它以获取令牌，然后 会获取令牌，并在必要时以线程安全的方式刷新令牌。 `TokensHelper` `TokensHelper` "

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Finally, add a Jakarta REST `ExceptionMapper`:"
msgstr "最后，添加一个 Jakarta REST `ExceptionMapper` ："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"This exception mapper is only added to verify during the tests that `ProtectedResource` returns `403` when the token has no expected role.\n"
"Without this mapper, `Quarkus REST (formerly RESTEasy Reactive)` would correctly convert the exceptions that escape from REST client calls to `500` to avoid leaking the information from the downstream resources such as `ProtectedResource`.\n"
"However, in the tests, it would not be possible to assert that `500` is caused by an authorization exception instead of some internal error."
msgstr "添加该异常映射器只是为了在测试中验证 `ProtectedResource` 在令牌没有预期作用时是否会返回 `403` 。如果没有这个映射器， `Quarkus REST (formerly RESTEasy Reactive)` 会正确地将 REST 客户端调用产生的异常转换为 `500` ，以避免从下游资源（如 `ProtectedResource` ）泄漏信息。不过，在测试中，无法断言 `500` 是由授权异常而非内部错误引起的。"

#. type: Title ==
#: _guides/security-openid-connect-client.adoc
#, no-wrap
msgid "Configuring the application"
msgstr "配置该应用程序"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Having prepared the code, you configure the application:"
msgstr "准备好代码后，就可以配置应用程序了："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"The preceding configuration references Keycloak, which is used by `ProtectedResource` to verify the incoming access tokens and by `OidcClient` to get the tokens for a user `alice` by using a `password` grant.\n"
"Both REST clients point to `ProtectedResource`'s HTTP address."
msgstr "前面的配置引用了 Keycloak， `ProtectedResource` 使用 Keycloak 验证传入的访问令牌， `OidcClient` 使用 `password` 授予获取用户 `alice` 的令牌。两个 REST 客户端都指向 \"ProtectedResource \"的 HTTP 地址。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"Adding a `%prod.` profile prefix to `quarkus.oidc.auth-server-url` ensures that `Dev Services for Keycloak` launches a container for you when the application is run in dev or test modes.\n"
"For more information, see the <<oidc-client-keycloak-dev-mode,Running the application in dev mode>> section."
msgstr "在 `quarkus.oidc.auth-server-url` 中添加 `%prod.` 配置文件前缀可确保 `Dev Services for Keycloak` 在开发或测试模式下运行应用程序时为您启动容器。有关详细信息，请参阅 xref:oidc-client-keycloak-dev-mode[在开发模式下运行应用程序] 部分。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Starting and configuring the Keycloak server"
msgstr "启动和配置 Keycloak 服务器"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"Do not start the Keycloak server when you run the application in dev or test modes; `Dev Services for Keycloak` launches a container.\n"
"For more information, see the <<oidc-client-keycloak-dev-mode,Running the application in dev mode>> section.\n"
"Ensure you put the link:{quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[realm configuration file] on the classpath, in the `target/classes` directory.\n"
"This placement ensures that the file is automatically imported in dev mode.\n"
"However, if you have already built a link:{quickstarts-tree-url}/security-openid-connect-quickstart[complete solution], you do not need to add the realm file to the classpath because the build process has already done so."
msgstr "在开发或测试模式下运行应用程序时，请勿启动 Keycloak 服务器； `Dev Services for Keycloak` 启动容器。有关详细信息，请参阅 xref:oidc-client-keycloak-dev-mode[在开发模式下运行应用程序] 部分。确保将 link:{quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[realm 配置文件] 放在类路径上的 `target/classes` 目录中。这样做可以确保在开发模式下自动导入该文件。但是，如果已经构建了 link:{quickstarts-tree-url}/security-openid-connect-quickstart[完整的解决方案] ，则无需将 realm 文件添加到 classpath 中，因为构建过程已经完成了添加。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "To start a Keycloak Server, you can use Docker and just run the following command:"
msgstr "要启动 Keycloak 服务器，可以使用 Docker，只需运行以下命令即可："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Set `{keycloak.version}` to `25.0.0` or later."
msgstr "将 `{keycloak.version}` 设置为 `25.0.0` 或更高版本。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "You can access your Keycloak Server at http://localhost:8180[localhost:8180]."
msgstr "您可以通过 link:http://localhost:8180[localhost:8180] 访问 Keycloak 服务器。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"Log in as the `admin` user to access the Keycloak Administration Console.\n"
"The password is `admin`."
msgstr "以 `admin` 用户身份登录，访问 Keycloak 管理控制台。密码是 `admin` 。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"Import the link:{quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[realm configuration file] to create a new realm.\n"
"For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr "导入 link:{quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[领域配置文件] 以创建新领域。更多详情，请参阅 Keycloak 文档，了解如何 link:https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[创建新领域] 。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"This `quarkus` realm file adds a `frontend` client, and `alice` and `admin` users.\n"
"`alice` has a `user` role.\n"
"`admin` has both `user` and `admin` roles."
msgstr "这个 `quarkus` realm 文件添加了一个 `frontend` 客户端以及 `alice` 和 `admin` 用户。 `alice` 具有 `user` 角色。 `admin` 具有 `user` 和 `admin` 角色。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Running the application in dev mode"
msgstr "在开发模式下运行应用程序"

#. type: Plain text
#: _guides/security-openid-connect-client.adoc
msgid "To run the application in a dev mode, use:"
msgstr "要在开发模式下运行应用程序，请使用："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] launches a Keycloak container and imports `quarkus-realm.json`."
msgstr "xref:security-openid-connect-dev-services.adoc[Keycloak 开发服务] 启动 Keycloak 容器并导入 `quarkus-realm.json` 。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Open a xref:dev-ui.adoc[Dev UI] available at http://localhost:8080/q/dev-ui[/q/dev-ui] and click a `Provider: Keycloak` link in the *OpenID Connect Dev UI* card."
msgstr "打开 link:http://localhost:8080/q/dev-ui[/q/dev-ui] 上的 xref:dev-ui.adoc[Dev UI] ，点击 *OpenID Connect Dev UI* 卡上的 `Provider: Keycloak` 链接。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "When asked, log in to a `Single Page Application` provided by the OpenID Connect Dev UI:"
msgstr "根据要求，登录 OpenID Connect Dev UI 提供的 `Single Page Application` ："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"Log in as `alice`, with the password, `alice`.\n"
"This user has a `user` role."
msgstr "以 `alice` 登录，密码为 `alice` 。该用户的角色为 `user` 。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Access `/frontend/user-name-with-propagated-token`, which returns `200`."
msgstr "访问 `/frontend/user-name-with-propagated-token` ，返回 `200` 。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Access `/frontend/admin-name-with-propagated-token`, which returns `403`."
msgstr "访问 `/frontend/admin-name-with-propagated-token` ，返回 `403` 。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"Log out and back in as `admin` with the password, `admin`.\n"
"This user has both `admin` and `user` roles."
msgstr "注销后以 `admin` 登录，密码为 `admin` 。该用户同时拥有 `admin` 和 `user` 两个角色。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Access `/frontend/admin-name-with-propagated-token`, which returns `200`."
msgstr "访问 `/frontend/admin-name-with-propagated-token` ，返回 `200` 。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "You have tested that `FrontendResource` can propagate the access tokens from the OpenID Connect Dev UI."
msgstr "您已经测试过 `FrontendResource` 可以从 OpenID Connect Dev UI 传播访问令牌。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Running the application in JVM mode"
msgstr "以 JVM 模式运行应用程序"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "After exploring the application in dev mode, you can run it as a standard Java application."
msgstr "在开发模式下探索应用程序后，您可以将其作为标准 Java 应用程序运行。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "First, compile it:"
msgstr "首先，编译它："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Then, run it:"
msgstr "然后，运行它："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Running the application in native mode"
msgstr "以本地模式运行应用程序"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "You can compile this demo into native code; no modifications are required."
msgstr "您可以将此演示编译成本地代码，无需进行任何修改。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"This implies that you no longer need to install a JVM on your\n"
"production environment, as the runtime technology is included in\n"
"the produced binary and optimized to run with minimal resources."
msgstr "这意味着您不再需要在生产环境中安装 JVM，因为运行时技术已包含在生成的二进制文件中，并经过优化，只需最少的资源即可运行。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"Compilation takes longer, so this step is turned off by default.\n"
"To build again, enable the `native` profile:"
msgstr "编译需要较长的时间，因此默认关闭了这一步骤。要重新编译，请启用 `native` 配置文件："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "After a little while, when the build finishes, you can run the native binary directly:"
msgstr "过一会儿，构建完成后，就可以直接运行本地二进制文件了："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Testing the application"
msgstr "测试应用程序"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "For more information about testing your application in dev mode, see the preceding <<oidc-client-keycloak-dev-mode,Running the application in dev mode>> section."
msgstr "有关在开发模式下测试应用程序的更多信息，请参阅前面的在 xref:oidc-client-keycloak-dev-mode[开发模式下运行应用程序] 部分。"

#. type: Plain text
#: _guides/security-openid-connect-client.adoc
msgid "You can test the application launched in JVM or Native modes with `curl`."
msgstr "您可以用 `curl` 测试在JVM或Native模式下启动的应用程序。"

#. type: Plain text
#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Obtain an access token for `alice`:"
msgstr "获得一个访问令牌， `alice` 。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Use this token to call `/frontend/user-name-with-propagated-token`. This command returns the `200` status code and the name `alice`:"
msgstr "使用此标记调用 `/frontend/user-name-with-propagated-token` 。该命令返回 `200` 状态代码和 `alice` 名称："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Use the same token to call `/frontend/admin-name-with-propagated-token`. In contrast to the preceding command, this command returns `403` because `alice` has only a `user` role:"
msgstr "使用相同的标记调用 `/frontend/admin-name-with-propagated-token` 。与前一条命令不同的是，这条命令返回 `403` ，因为 `alice` 只有一个 `user` 角色："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Next, obtain an access token for `admin`:"
msgstr "接下来，获取 `admin` 的访问令牌："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Use this token to call `/frontend/user-name-with-propagated-token`. This command returns a `200` status code and the name `admin`:"
msgstr "使用此标记调用 `/frontend/user-name-with-propagated-token` 。该命令返回 `200` 状态代码和 `admin` 名称："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Use the same token to call `/frontend/admin-name-with-propagated-token`. This command also returns the `200` status code and the name `admin` because `admin` has both `user` and `admin` roles:"
msgstr "使用相同的令牌调用 `/frontend/admin-name-with-propagated-token` 。该命令还会返回 `200` 状态代码和 `admin` 名称，因为 `admin` 同时具有 `user` 和 `admin` 两个角色："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"Next, check the `FrontendResource` methods, which do not propagate the existing tokens but use `OidcClient` to get and propagate the tokens.\n"
"As already shown, `OidcClient` is configured to get the tokens for the `alice` user."
msgstr "接下来，检查 `FrontendResource` 方法，这些方法不会传播现有的令牌，而是使用 `OidcClient` 获取和传播令牌。如前所述， `OidcClient` 被配置为获取 `alice` 用户的令牌。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "This command returns the `200` status code and the name `alice`."
msgstr "该命令将返回 `200` 状态代码和 `alice` 名称。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "In contrast with the preceding command, this command returns a `403` status code."
msgstr "与前一条命令不同，该命令返回 `403` 状态代码。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Next, test that the programmatically created OIDC client correctly acquires and propagates the token with `RestClientWithTokenHeaderParam` both in reactive and imperative (blocking) modes."
msgstr "接下来，测试以编程方式创建的 OIDC 客户端是否能在反应式和命令式（阻塞）模式下通过 `RestClientWithTokenHeaderParam` 正确获取和传播令牌。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Call the `/user-name-with-oidc-client-token-header-param`. This command returns the `200` status code and the name `alice`:"
msgstr "调用 `/user-name-with-oidc-client-token-header-param` 。该命令返回 `200` 状态代码和名称 `alice` ："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Call the `/admin-name-with-oidc-client-token-header-param`. In contrast with the preceding command, this command returns a `403` status code:"
msgstr "调用 `/admin-name-with-oidc-client-token-header-param` 。与前一条命令不同，这条命令返回 `403` 状态代码："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Next, test the endpoints which use OIDC client in in the blocking mode."
msgstr "接下来，在阻塞模式下测试使用 OIDC 客户端的端点。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Call the `/user-name-with-oidc-client-token-header-param-blocking`. This command returns the `200` status code and the name `alice`:"
msgstr "调用 `/user-name-with-oidc-client-token-header-param-blocking` 。该命令返回 `200` 状态代码和名称 `alice` ："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Call the `/admin-name-with-oidc-client-token-header-param-blocking`. In contrast with the preceding command, this command returns a `403` status code:"
msgstr "调用 `/admin-name-with-oidc-client-token-header-param-blocking` 。与前一条命令不同，这条命令返回 `403` 状态代码："

#. type: Title ==
#: _guides/security-openid-connect-client.adoc
#, no-wrap
msgid "References"
msgstr "参考文献"

#. type: Plain text
#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "xref:security-openid-connect-client-reference.adoc[OpenID Connect Client and Token Propagation Reference Guide]"
msgstr "xref:security-openid-connect-client-reference.adoc[OpenID Connect 客户端和令牌传播参考指南]"

#. type: Plain text
#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]"
msgstr "xref:security-oidc-bearer-token-authentication.adoc[OIDC 承载令牌验证]"

#. type: Plain text
#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus 安全概述]"
