# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/platform.adoc:6
#, fuzzy, no-wrap
msgid "Platform"
msgstr "平台"

#. type: Plain text
#: upstream/_guides/platform.adoc:11
#, fuzzy
msgid "The Quarkus extension ecosystem consists of the Quarkus extensions developed and maintained by the community, including the Quarkus core development team. While the Quarkus ecosystem (sometimes also referred to as the \"Quarkus universe\") includes all the Quarkus extensions ever developed, there is also a concept of a Quarkus platform."
msgstr "Quarkus扩展生态系统由社区开发和维护的Quarkus扩展组成，包括Quarkus核心开发团队。虽然Quarkus生态系统（有时也被称为 \"Quarkus宇宙\"）包括所有曾经开发的Quarkus扩展，但也有一个Quarkus平台的概念。"

#. type: Title ==
#: upstream/_guides/platform.adoc:12
#, fuzzy, no-wrap
msgid "Quarkus Platform"
msgstr "Quarkus平台"

#. type: Plain text
#: upstream/_guides/platform.adoc:16
#, fuzzy
msgid "The fundamental promise of a Quarkus platform is any combination of the Quarkus extensions the platform consists of can be used in the same application without causing any conflict for each other.  Each organization creating their Quarkus platform may establish their own criteria for the extensions to be accepted into the platform and the means to guarantee the compatibility between the accepted extensions."
msgstr "Quarkus平台的基本承诺是该平台所包含的Quarkus扩展的任何组合都可以在同一个应用程序中使用，而不会造成任何相互冲突。每个创建Quarkus平台的组织都可以建立自己的标准，以确定哪些扩展可以被接受到平台中，以及如何保证被接受的扩展之间的兼容性。"

#. type: Title ===
#: upstream/_guides/platform.adoc:17
#, fuzzy, no-wrap
msgid "Quarkus Platform Artifacts"
msgstr "夸库斯平台神器"

#. type: Plain text
#: upstream/_guides/platform.adoc:20
#, fuzzy
msgid "Each Quarkus platform is defined with a few artifacts."
msgstr "每个Quarkus平台都是用一些工件来定义的。"

#. type: Title ===
#: upstream/_guides/platform.adoc:21
#, fuzzy, no-wrap
msgid "Quarkus Platform BOM"
msgstr "Quarkus平台BOM"

#. type: Plain text
#: upstream/_guides/platform.adoc:24
#, fuzzy
msgid "Each Quarkus Platform is expected to provide a Maven BOM artifact that"
msgstr "每个Quarkus平台都应提供一个Maven BOM工件，该工件应"

#. type: Plain text
#: upstream/_guides/platform.adoc:26
#, fuzzy
msgid "imports a chosen version of `io.quarkus:quarkus-bom` (the platform BOM may be flattened at the end but it has to be based on some version of `io.quarkus:quarkus-bom`)"
msgstr "导入选定的 `io.quarkus:quarkus-bom` （平台的BOM可以在最后被压扁，但它必须是基于某个版本的 `io.quarkus:quarkus-bom` ）。"

#. type: Plain text
#: upstream/_guides/platform.adoc:27
#, fuzzy
msgid "includes all the Quarkus extension artifacts (the runtime and the deployment ones) the platform consists of"
msgstr "包括所有的Quarkus扩展工件（运行时间和部署工件），平台由以下部分组成"

#. type: Plain text
#: upstream/_guides/platform.adoc:28
#, fuzzy
msgid "includes all the necessary third-party artifacts that align the transitive dependency versions of the platform extensions to guarantee compatibility between them"
msgstr "包括所有必要的第三方工件，使平台扩展的交叉依赖版本保持一致，以保证它们之间的兼容性"

#. type: Plain text
#: upstream/_guides/platform.adoc:29
#, fuzzy
msgid "includes the <<platform-descriptor,platform JSON descriptor>> artifact"
msgstr "包括 link:#platform-descriptor[平台的JSON描述] 器工件"

#. type: Plain text
#: upstream/_guides/platform.adoc:30
#, fuzzy
msgid "possibly includes the <<platform-properties,platform configuration properties>> artifacts"
msgstr "可能包括 link:#platform-properties[平台配置属性] 工件"

#. type: Plain text
#: upstream/_guides/platform.adoc:32
#, fuzzy
msgid "Quarkus applications that want to include extensions from a Quarkus platform will be importing the Quarkus platform BOM."
msgstr "Quarkus应用程序如果想包括来自Quarkus平台的扩展，将导入Quarkus平台的BOM。"

#. type: Title ===
#: upstream/_guides/platform.adoc:34
#, fuzzy, no-wrap
msgid "Quarkus Platform Descriptor"
msgstr "Quarkus平台描述符"

#. type: Plain text
#: upstream/_guides/platform.adoc:38
#, fuzzy
msgid "Quarkus platform descriptor is a JSON artifact that provides information about the platform and its extensions to the Quarkus tools. E.g. http://code.quarkus.io and the Quarkus command line tools consult this descriptor to list, add and remove extensions to/from the project on user's request.  This artifact is also used as a Quarkus platform identifier. When Quarkus tools need to identify the Quarkus platform(s) used in the project, they will analyze the dependency version constraints of the project (the effective list of the managed dependencies from the `dependencyManagement` section in Maven terms) looking for the platform descriptor artifact(s) among them. Given that the platform descriptors are included into the Quarkus platform BOMs, every Quarkus application will inherit the platform descriptor artifact from the imported platform BOM(s) as a dependency version constraint (managed dependency in Maven terms)."
msgstr "Quarkus平台描述符是一个JSON工件，它提供了关于平台和它的扩展到Quarkus工具的信息。例如， http://code.quarkus.io 和Quarkus命令行工具会参考这个描述符来列出、添加和删除用户要求的项目的扩展。这个工件也被用来作为Quarkus平台的标识符。当Quarkus工具需要识别项目中使用的Quarkus平台时，它们会分析项目的依赖版本约束（Maven术语中 `dependencyManagement` 部分的有效管理依赖列表），在其中寻找平台描述符工件。鉴于平台描述符已包含在Quarkus平台BOM中，每个Quarkus应用都会从导入的平台BOM中继承平台描述符工件，作为依赖版本约束（Maven术语中的管理依赖）。"

#. type: Plain text
#: upstream/_guides/platform.adoc:40
#, fuzzy
msgid "To be able to easily identify Quarkus platform descriptors among the project's dependency constraints, the platform descriptor Maven artifact coordinates should follow the following naming convention:"
msgstr "为了能够在项目的依赖约束中轻松识别Quarkus平台描述符，平台描述符的Maven工件坐标应遵循以下命名惯例。"

#. type: Plain text
#: upstream/_guides/platform.adoc:42
#, fuzzy
msgid "the `groupId` of the descriptor artifact should match the `groupId` of the corresponding Quarkus Platform BOM;"
msgstr "描述器工件的 `groupId` 应该与相应的Quarkus平台BOM的 `groupId` 。"

#. type: Plain text
#: upstream/_guides/platform.adoc:43
#, fuzzy
msgid "the `artifactId` of the descriptor artifact should be the `artifactId` of the corresponding Quarkus Platform BOM with the `-quarkus-platform-descriptor` suffix;"
msgstr "描述符工件的 `artifactId` 应该是相应的Quarkus平台BOM的 `artifactId` ，后缀为 `-quarkus-platform-descriptor` 。"

#. type: Plain text
#: upstream/_guides/platform.adoc:44
#, fuzzy
msgid "the `classifier` of the descriptor artifact should match the `version` of the corresponding Quarkus Platform BOM;"
msgstr "描述器工件的 `classifier` 应该与相应的Quarkus平台BOM的 `version` 。"

#. type: Plain text
#: upstream/_guides/platform.adoc:45
#, fuzzy
msgid "the `type` of the descriptor artifact should be `json`;"
msgstr "描述器工件的 `type` ，应该是 `json` 。"

#. type: Plain text
#: upstream/_guides/platform.adoc:46 upstream/_guides/platform.adoc:102
#, fuzzy
msgid "the `version` of the descriptor artifact should match the `version` of the corresponding Quarkus Platform BOM."
msgstr "描述器工件的 `version` 应该与相应的Quarkus平台BOM的 `version` 。"

#. type: Plain text
#: upstream/_guides/platform.adoc:48
#, fuzzy
msgid "As a string it will look like `<platform-bom-groupId>:<platform-bom-artifactId>-quarkus-platform-descriptor:<platform-version>:json:<platform-version>`"
msgstr "作为一个字符串，它将看起来像 `<platform-bom-groupId>:<platform-bom-artifactId>-quarkus-platform-descriptor:<platform-version>:json:<platform-version>` "

#. type: Plain text
#: upstream/_guides/platform.adoc:51
#, fuzzy
msgid "E.g. the coordinates of the descriptor for the Quarkus BOM `io.quarkus.platform:quarkus-bom::pom:1.2.3` will be `io.quarkus.platform:quarkus-bom-quarkus-platform-descriptor:1.2.3:json:1.2.3`.  And for a custom Quarkus platform defined with BOM `org.acme:acme-bom::pom:555` it will be `org.acme:acme-bom-quarkus-platform-descriptor:555:json:555`."
msgstr "例如，Quarkus BOM `io.quarkus.platform:quarkus-bom::pom:1.2.3` 的描述符的坐标将是 `io.quarkus.platform:quarkus-bom-quarkus-platform-descriptor:1.2.3:json:1.2.3` 。而对于一个用BOM `org.acme:acme-bom::pom:555` 定义的自定义Quarkus平台，它将是 `org.acme:acme-bom-quarkus-platform-descriptor:555:json:555` 。"

#. type: Plain text
#: upstream/_guides/platform.adoc:53
#, fuzzy
msgid "The classifier matching the version of the platform may look confusing at first. But this is what turns the descriptor into a true \"fingerprint\" of the platform. In both Maven and Gradle, the effective set of the dependency version constraints (or the managed dependencies) is obtained by merging all the imported BOMs and version constraints specified individually in the current project and also its parent(s). The artifact `classifier` is a part of the dependency ID, which could be expressed as `groupId:artifactId:classifier:type`. Which means that if a project imports a couple of BOMs, e.g. `org.apple:apple-bom::pom:1.0` and `org.orange:orange-bom::pom:1.0`, and each of these two BOMs imports a different version `io.quarkus.platform:quarkus-bom::pom`, the Quarkus tools will be able to detect this fact and make the user aware of it, since it *might* not be a safe combination. If the descriptor artifact didn't include the classifer containing the version of the platform then the tools wouldn't be able to detect a potentially incompatible mix of different versions of the same platform in the same project."
msgstr "匹配平台版本的分类器一开始可能看起来很混乱。但这是将描述符变成平台的真正 \"指纹 \"的原因。在Maven和Gradle中，有效的依赖版本约束集（或管理依赖）是通过合并所有导入的BOM和当前项目及其父级项目中单独指定的版本约束获得的。工件 `classifier` 是依赖性ID的一部分，可以表示为 `groupId:artifactId:classifier:type` 。这意味着如果一个项目导入了几个BOM，例如： `org.apple:apple-bom::pom:1.0` 和 `org.orange:orange-bom::pom:1.0` ，而这两个BOM中的每一个都导入了不同的版本 `io.quarkus.platform:quarkus-bom::pom` ，Quarkus工具将能够检测到这个事实并让用户意识到这一点，因为这 *可能* 不是一个安全的组合。如果描述器工件不包括包含平台版本的分类器，那么工具将无法检测到同一项目中同一平台的不同版本的潜在不兼容的组合。"

#. type: Plain text
#: upstream/_guides/platform.adoc:55
#, fuzzy
msgid "The platform descriptor will normally be generated using a Maven plugin, e.g."
msgstr "平台描述符通常会通过Maven插件生成，比如说"

#. type: delimited block -
#: upstream/_guides/platform.adoc:78
#, no-wrap
msgid ""
"<plugin>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-platform-descriptor-json-plugin</artifactId>\n"
"  <version>${quarkus.version}</version> <1>\n"
"  <executions>\n"
"    <execution>\n"
"      <phase>process-resources</phase>\n"
"      <goals>\n"
"        <goal>generate-extensions-json</goal> <2>\n"
"      </goals>\n"
"    </execution>\n"
"  </executions>\n"
"  <configuration>\n"
"    <bomGroupId>${quarkus.platform.group-id}</bomGroupId> <3>\n"
"    <bomArtifactId>${quarkus.platform.artifact-id}</bomArtifactId> <4>\n"
"    <bomVersion>${quarkus.platform.version}</bomVersion> <5>\n"
"    <overridesFile>${overridesfile}</overridesFile> <6>\n"
"    <resolveDependencyManagement>true</resolveDependencyManagement> <7>\n"
"  </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/platform.adoc:81
#, fuzzy
msgid "the version of the `quarkus-platform-descriptor-json-plugin`"
msgstr "的版本。 `quarkus-platform-descriptor-json-plugin` "

#. type: Plain text
#: upstream/_guides/platform.adoc:82
#, fuzzy
msgid "`generate-extensions-json` is the goal generating the platform descriptor"
msgstr " `generate-extensions-json` 是生成平台描述符的目标"

#. type: Plain text
#: upstream/_guides/platform.adoc:83
#, fuzzy
msgid "the `groupId` of the platform BOM"
msgstr "该平台BOM的 `groupId` 。"

#. type: Plain text
#: upstream/_guides/platform.adoc:84
#, fuzzy
msgid "the `artifactId` of the platform BOM"
msgstr "该平台BOM的 `artifactId` 。"

#. type: Plain text
#: upstream/_guides/platform.adoc:85
#, fuzzy
msgid "the `version` of the platform BOM"
msgstr "该平台BOM的 `version` 。"

#. type: Plain text
#: upstream/_guides/platform.adoc:86
#, fuzzy
msgid "this parameter is optional, it allows to override some metadata from the Quarkus extension descriptors found in every runtime extension artifact from which the platform descriptor is generated"
msgstr "这个参数是可选的，它允许覆盖Quarkus扩展描述符中的一些元数据，这些元数据在每个运行时扩展工件中发现，平台描述符是由这些工件生成的。"

#. type: Plain text
#: upstream/_guides/platform.adoc:87
#, fuzzy
msgid "this parameter is also optional and defaults to false. It has to be set to true in case the platform BOM *is not generated* and *is not flattened*. Which for example is the case for `io.quarkus:quarkus-bom`."
msgstr "这个参数也是可选的，默认为false。如果平台的BOM *没有被生成* ，也 *没有被平坦* 化，它必须被设置为true。例如，对于 `io.quarkus:quarkus-bom` ，就是这种情况。"

#. type: Title ===
#: upstream/_guides/platform.adoc:89
#, fuzzy, no-wrap
msgid "Quarkus Platform Properties"
msgstr "Quarkus平台属性"

#. type: Plain text
#: upstream/_guides/platform.adoc:92
#, fuzzy
msgid "A Quarkus platform may provide its own default values for some of the configuration options."
msgstr "Quarkus平台可以为一些配置选项提供自己的默认值。"

#. type: Plain text
#: upstream/_guides/platform.adoc:94
#, fuzzy
msgid "Quarkus is using https://github.com/smallrye/smallrye-config[SmallRye Config] for wiring application configuration. A Quarkus platform may be used as another source of configuration in the hierarchy of the configuration sources dominated by the application's `application.properties`."
msgstr "Quarkus正在使用 link:https://github.com/smallrye/smallrye-config[SmallRye Config] 进行布线应用配置。Quarkus平台可以作为配置源的层次结构中的另一个配置源，由应用程序的 `application.properties` 。"

#. type: Plain text
#: upstream/_guides/platform.adoc:96
#, fuzzy
msgid "To provide platform-specific defaults, the platform needs to include a dependency version constraint in its BOM for a properties artifact whose coordinates follow the following naming convention:"
msgstr "为了提供平台特定的默认值，平台需要在其BOM中包括一个属性工件的依赖版本约束，其坐标遵循以下命名惯例。"

#. type: Plain text
#: upstream/_guides/platform.adoc:98
#, fuzzy
msgid "the `groupId` of the properties artifact should match the `groupId` of the corresponding Quarkus Platform BOM;"
msgstr "属性工件的 `groupId` 应该与相应的Quarkus平台BOM的 `groupId` 。"

#. type: Plain text
#: upstream/_guides/platform.adoc:99
#, fuzzy
msgid "the `artifactId` of the properties artifact should be the `artifactId` of the corresponding Quarkus Platform BOM with the `-quarkus-platform-properties` suffix;"
msgstr "属性工件的 `artifactId` 应该是相应的Quarkus平台BOM的 `artifactId` ，后缀为 `-quarkus-platform-properties` 。"

#. type: Plain text
#: upstream/_guides/platform.adoc:100
#, fuzzy
msgid "the `classifier` of the descriptor artifact should be left empty/null;"
msgstr "描述符工件的 `classifier` ，应该留空/空。"

#. type: Plain text
#: upstream/_guides/platform.adoc:101
#, fuzzy
msgid "the `type` of the descriptor artifact should be `properties`;"
msgstr "描述器工件的 `type` ，应该是 `properties` 。"

#. type: Plain text
#: upstream/_guides/platform.adoc:104
#, fuzzy
msgid "The properties artifact itself is expected to be a traditional `properties` file that will be loaded into an instance of `java.util.Properties` class."
msgstr "属性工件本身预计是一个传统的 `properties` 文件，将被加载到 `java.util.Properties` 类的一个实例中。"

#. type: Plain text
#: upstream/_guides/platform.adoc:106
#, fuzzy
msgid "At this point, platform properties are only allowed to provide the default values for a restricted set of configuration options. The property names in the platform properties file must be prefixed with the `platform.` suffix."
msgstr "在这一点上，平台属性只允许为一组受限制的配置选项提供默认值。平台属性文件中的属性名称必须以 `platform.` 后缀为前缀。"

#. type: Plain text
#: upstream/_guides/platform.adoc:108
#, fuzzy
msgid "Extension developers that want to make their configuration options platform-specific should set their default values to properties that start with the `platform.` suffix. Here is an example:"
msgstr "希望使自己的配置选项具有平台特性的扩展开发者应将其默认值设置为以 `platform.` 后缀开头的属性。下面是一个例子。"

#. type: delimited block -
#: upstream/_guides/platform.adoc:112
#, no-wrap
msgid "package io.quarkus.deployment.pkg;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/platform.adoc:115
#, no-wrap
msgid ""
"@ConfigRoot(phase = ConfigPhase.BUILD_TIME)\n"
"public class NativeConfig {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/platform.adoc:122
#, no-wrap
msgid ""
"    /**\n"
"     * The docker image to use to do the image build\n"
"     */\n"
"    @ConfigItem(defaultValue = \"${platform.quarkus.native.builder-image}\")\n"
"    public String builderImage;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/platform.adoc:126
#, fuzzy
msgid "In this case the default value for `quarkus.native.builder-image` will be provided by the platform. The user will still be able to set the desired value for `quarkus.native.builder-image` in its `application.properties`, of course. But in case it's not customized by the user, the default value will be coming from the platform properties.  A platform properties file for the example above would contain:"
msgstr "在这种情况下， `quarkus.native.builder-image` 的默认值将由该平台提供。当然，用户仍然可以在其 `application.properties` ，为 `quarkus.native.builder-image` 设置所需的值。但如果用户没有自定义，默认值将来自平台属性。上述例子的平台属性文件将包含。"

#. type: delimited block -
#: upstream/_guides/platform.adoc:130
#, no-wrap
msgid "platform.quarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/platform.adoc:133
#, fuzzy
msgid "There is also a Maven plugin goal that validates the platform properties content and its artifact coordinates and also checks whether the platform properties artifact is present in the platform's BOM. Here is a sample plugin configuration:"
msgstr "还有一个Maven插件的目标是验证平台属性内容及其工件坐标，同时检查平台属性工件是否存在于平台的BOM中。下面是一个插件配置示例。"

#. type: delimited block -
#: upstream/_guides/platform.adoc:149
#, no-wrap
msgid ""
"<plugin>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-platform-descriptor-json-plugin</artifactId>\n"
"  <version>${quarkus.version}</version>\n"
"  <executions>\n"
"    <execution>\n"
"      <phase>process-resources</phase>\n"
"      <goals>\n"
"        <goal>platform-properties</goal>\n"
"      </goals>\n"
"    </execution>\n"
"  </executions>\n"
"</plugin>\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/platform.adoc:151
#, fuzzy, no-wrap
msgid "Merging Quarkus Platform Properties"
msgstr "合并Quarkus平台属性"

#. type: Plain text
#: upstream/_guides/platform.adoc:155
#, fuzzy
msgid "In case an application is importing more than one Quarkus platform and those platforms include their own platform properties artifacts, the content of those platform properties artifacts will be merged to form a single set of properties that will be used for the application build.  The order in which the properties artifacts are merged will correspond to the order in which they appear in the list of dependency version constraints of the application (in the Maven terms that will correspond to the effective list of application's managed dependencies, i.e. the flattened `managedDependencies` POM section)."
msgstr "如果应用程序导入多个Quarkus平台，且这些平台包含各自的平台属性工件，则这些平台属性工件的内容将被合并，形成一套单一的属性，用于应用程序构建。属性工件的合并顺序将与它们在应用程序的依赖版本约束列表中出现的顺序相对应（在Maven术语中，这将与应用程序的有效管理依赖列表相对应，即扁平化的 `managedDependencies` POM部分）。"

#. type: Plain text
#: upstream/_guides/platform.adoc:157
#, fuzzy
msgid "The content of the properties artifacts found earlier will dominate over those found later among the application's dependency constraints!"
msgstr "在应用程序的依赖性约束中，较早发现的属性工件的内容将比后来发现的属性工件的内容更有优势!"

#. type: Plain text
#: upstream/_guides/platform.adoc:159
msgid "That means if a platform needs to override a certain property value defined in the platform it is based on, it will need to include its platform properties artifact into the `managedDependencies` section of its BOM before importing the base platform."
msgstr ""

#. type: Plain text
#: upstream/_guides/platform.adoc:161
msgid "For example, let's assume `org.acme:acme-quarkus-bom` platform extends the `io.quarkus:quarkus-bom` platform by importing its BOM. In case, the `org.acme:acme-quarkus-bom` platform were to override certain properties defined in the `io.quarkus:quarkus-bom-quarkus-platform-properties` included in the `io.quarkus:quarkus-bom`, the `org.acme:acme-quarkus-bom` would have to be composed as"
msgstr ""

#. type: delimited block -
#: upstream/_guides/platform.adoc:164 upstream/_guides/platform.adoc:189
#, no-wrap
msgid "  <!-- skipped content -->\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/platform.adoc:168
#, no-wrap
msgid ""
"  <artifactId>acme-quarkus-bom</artifactId>\n"
"  <name>Acme - Quarkus - BOM</name>\n"
"  <packaging>pom</packaging>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/platform.adoc:178
#, no-wrap
msgid ""
"  <dependencyManagement>\n"
"    <dependencies>\n"
"      <!-- Acme Quarkus platform properties -->\n"
"      <dependency>\n"
"        <groupId>org.acme</groupId>\n"
"        <artifactId>acme-quarkus-bom-quarkus-platform-properties</artifactId>\n"
"        <type>properties</type>\n"
"        <version>${project.version}</version>\n"
"      </dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/platform.adoc:187
#, no-wrap
msgid ""
"      <!-- The base Quarkus BOM -->\n"
"      <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-bom</artifactId>\n"
"        <version>${quarkus.version}</version>\n"
"        <type>pom</type>\n"
"        <scope>import</scope>\n"
"      </dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/platform.adoc:191
msgid "That way, the `org.acme:acme-quarkus-bom` platform properties will appear before those provided by the `io.quarkus:quarkus-bom` properties and so will be dominating at build time."
msgstr ""
