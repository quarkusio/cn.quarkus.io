# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-11-09 10:15+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Writing Your Own Extension"
msgstr "编写您自己的扩展"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Quarkus extensions add a new developer focused behavior to the core offering, and consist of two distinct parts, buildtime augmentation and runtime container. The augmentation part is responsible for all metadata processing, such as reading annotations, XML descriptors etc. The output of this augmentation phase is recorded bytecode which is responsible for directly instantiating the relevant runtime services."
msgstr "Quarkus扩展为核心产品添加了新的以开发者为中心的行为，由两个不同的部分组成，即构建时增强和运行时容器。增强部分负责所有的元数据处理，如读取注释、XML描述符等。这个增强阶段的输出是记录的字节码，负责直接实例化相关的运行时服务。"

#: _guides/writing-extensions.adoc
msgid ""
"This means that metadata is only processed once at build time, which both saves on startup time, and also on memory\n"
"usage as the classes etc that are used for processing are not loaded (or even present) in the runtime JVM."
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "This is an in-depth documentation, see the xref:building-my-first-extension.adoc[building my first extension] if you need an introduction."
msgstr "这是一个深入的文档，如果你需要一个介绍，请看 link:building-my-first-extension.html[构建我的第一个扩展] 。"

#. type: Title ==
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Extension philosophy"
msgstr "推广理念"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "This section is a work in progress and gathers the philosophy under which extensions should be designed and written."
msgstr "本节是一项正在进行的工作，收集了设计和编写扩展的理念。"

#. type: Title ===
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Why an extension framework"
msgstr "为什么要有一个扩展框架"

#: _guides/writing-extensions.adoc
msgid ""
"Quarkus’s mission is to transform your entire application including the libraries it uses, into an artifact that uses significantly less resources than traditional approaches. These can then be used to build native applications using GraalVM.\n"
"To do this you need to analyze and understand the full \"closed world\" of the application.\n"
"Without the full and complete context, the best that can be achieved is partial and limited generic support.\n"
"By using the Quarkus extension approach, we can bring Java applications in line with memory footprint constrained environments like Kubernetes or cloud platforms."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"The Quarkus extension framework results in significantly improved resource utilization even when GraalVM is not used (e.g. in HotSpot).\n"
"Let’s list the actions an extension performs:"
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Gather build time metadata and generate code"
msgstr "收集构建时间元数据并生成代码"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "This part has nothing to do with GraalVM, it is how Quarkus starts frameworks “at build time”"
msgstr "这一部分与GraalVM无关，它是Quarkus \"在构建时 \"启动框架的方式。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "The extension framework facilitates reading metadata, scanning classes as well as generating classes as needed"
msgstr "该扩展框架便于读取元数据、扫描类以及根据需要生成类。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "A small part of the extension work is executed at runtime via the generated classes, while the bulk of the work is done at build time (called deployment time)"
msgstr "一小部分扩展工作是在运行时通过生成的类执行的，而大部分工作是在构建时（称为部署时）完成的。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Enforce opinionated and sensible defaults based on the close world view of the application (e.g. an application with no `@Entity` does not need to start Hibernate ORM)"
msgstr "根据应用程序的密切世界观，执行有主见和合理的默认值（例如，一个没有 `@Entity` 的应用程序不需要启动Hibernate ORM）。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "An extension hosts Substrate VM code substitution so that libraries can run on GraalVM"
msgstr "一个扩展主持Substrate VM的代码替换，以便库可以在GraalVM上运行"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Most changes are pushed upstream to help the underlying library run on GraalVM"
msgstr "大多数变化都是向上游推送的，以帮助底层库在GraalVM上运行。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Not all changes can be pushed upstream, extensions host Substrate VM substitutions - which is a form of code patching - so that libraries can run"
msgstr "并非所有的变化都能被推送到上游，扩展程序承载了底层虚拟机的替换--这是一种代码补丁的形式--以便库可以运行"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Host Substrate VM code substitution to help dead code elimination based on the application needs"
msgstr "主机底层虚拟机代码替换，帮助根据应用需求消除死代码"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "This is application dependent and cannot really be shared in the library itself"
msgstr "这取决于应用程序，不能真正在库本身中共享。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "For example, Quarkus optimizes the Hibernate code because it knows it only needs a specific connection pool and cache provider"
msgstr "例如，Quarkus优化了Hibernate代码，因为它知道它只需要一个特定的连接池和缓存提供者"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Send metadata to GraalVM for example classes in need of reflection"
msgstr "将元数据发送到GraalVM，用于需要反射的实例类。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "This information is not static per library (e.g. Hibernate) but the framework has the semantic knowledge and knows which classes need to have reflection (for example @Entity classes)"
msgstr "这些信息不是每个库都是静态的（例如Hibernate），但是框架有语义知识，知道哪些类需要有反射（例如@Entity类）。"

#. type: Title ===
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Favor build time work over runtime work"
msgstr "倾向于构建时间的工作而不是运行时间的工作"

#: _guides/writing-extensions.adoc
msgid ""
"As much as possible favor doing work at build time (deployment part of the extension) as opposed to let the framework do work at startup time (runtime).\n"
"The more is done there, the smaller Quarkus applications using that extension will be and the faster they will load."
msgstr ""

#. type: Title ===
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "How to expose configuration"
msgstr "如何暴露配置"

#: _guides/writing-extensions.adoc
msgid ""
"Quarkus simplifies the most common usages.\n"
"This means that its defaults might be different from the library it integrates."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"To make the simple experience easiest, unify the configuration in `application.properties` via SmallRye Config.\n"
"Avoid library specific configuration files, or at least make them optional: e.g. `persistence.xml` for Hibernate ORM is optional."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"Extensions should see the configuration holistically as a Quarkus application instead of focusing on the library experience.\n"
"For example `quarkus.database.url` and friends are shared between extensions as defining a database access is a shared task (instead of a `hibernate.` property for example).\n"
"The most useful configuration options should be exposed as `quarkus.[extension].` instead of the natural namespace of the library.\n"
"Less common properties can live in the library namespace."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"To fully enable the close world assumptions that Quarkus can optimize best, it is better to consider configuration options as build time settled vs overridable at runtime.\n"
"Of course properties like host, port, password should be overridable at runtime.\n"
"But many properties like enable caching or setting the JDBC driver can safely require a rebuild of the application."
msgstr ""

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Static Init Config"
msgstr "静态初始配置"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "If the extension provides additional Config Sources and if these are required during Static Init, these must be registered with `StaticInitConfigBuilderBuildItem`. Configuration in Static Init does not scan for additional sources to avoid double initialization at application startup time."
msgstr "如果扩展提供了额外的配置源，并且在静态初始化过程中需要这些配置源，这些配置源必须在 `StaticInitConfigSourceProviderBuildItem` 。静态初始化中的配置不会扫描额外的源，以避免在应用程序启动时进行双重初始化。"

#
#
#
#. === API
#. TODO: Describe where to put APIs
#. I wonder if that content should be in the technical aspects
#. === Substitution and recorders
#. TODO: Describe where Substitutions and recorders should live
#. type: Title ===
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Expose your components via CDI"
msgstr "通过CDI暴露你的组件"

#: _guides/writing-extensions.adoc
msgid ""
"Since CDI is the central programming model when it comes to component composition, frameworks and extensions should expose their components as beans that are easily consumable by user applications.\n"
"For example, Hibernate ORM exposes `EntityManagerFactory` and `EntityManager` beans, the connection pool exposes `DataSource` beans etc.\n"
"Extensions must register these bean definitions at build time."
msgstr ""

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Beans backed by classes"
msgstr "由类支持的豆子"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "An extension can produce an xref:cdi-integration.adoc#additional_bean_build_item[`AdditionalBeanBuildItem`] to instruct the container to read a bean definition from a class as if it was part of the original application:"
msgstr "一个扩展可以产生一个 link:cdi-reference.html#additional_beans[`AdditionalBeanBuildItem`] 来指示容器从一个类中读取 bean 定义，就好像它是原始应用程序的一部分。"

#. type: Block title
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Bean Class Registered by `AdditionalBeanBuildItem`"
msgstr "注册的豆类 `AdditionalBeanBuildItem` "

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "If a bean registered by an `AdditionalBeanBuildItem` does not specify a scope then `@Dependent` is assumed."
msgstr "如果一个由 `AdditionalBeanBuildItem` 注册的Bean没有指定一个范围，那么就假定 `@Dependent` 。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "All other beans can inject such a bean:"
msgstr "所有其他的豆子都可以注射这样的豆子。"

#. type: Block title
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Bean Injecting a Bean Produced by an `AdditionalBeanBuildItem`"
msgstr "注入一个豆子，由一个豆子生产出来的。 `AdditionalBeanBuildItem` "

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "And vice versa - the extension bean can inject application beans and beans provided by other extensions:"
msgstr "反之亦然--扩展Bean可以注入应用Bean和其他扩展提供的Bean。"

#. type: Block title
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Extension Bean Injection Example"
msgstr "扩展豆注入实例"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Inject a bean provided by other extension."
msgstr "注入一个由其他扩展提供的bean。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Inject all beans matching the type `List<String>`."
msgstr "注入所有符合类型的豆子 `List<String>` 。"

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Bean initialization"
msgstr "Bean初始化"

#: _guides/writing-extensions.adoc
msgid ""
"Some components may require additional initialization based on information collected during augmentation.\n"
"The most straightforward solution is to obtain a bean instance and call a method directly from a build step.\n"
"However, it is _illegal_ to obtain a bean instance during the augmentation phase.\n"
"The reason is that the CDI container is not started yet.\n"
"It's started during the xref:bootstrap-three-phases[Static init bootstrap phase]."
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "`BUILD_AND_RUN_TIME_FIXED` and `RUN_TIME` config roots can be injected in any bean. `RUN_TIME` config roots should only be injected after the bootstrap though."
msgstr " `BUILD_AND_RUN_TIME_FIXED` 和 配置根可以被注入到任何bean中。 配置根应该只在bootstrap之后被注入。 `RUN_TIME` `RUN_TIME` "

#: _guides/writing-extensions.adoc
msgid ""
"It is possible to invoke a bean method from a xref:bytecode-recording[recorder method] though.\n"
"If you need to access a bean in a `@Record(STATIC_INIT)` build step then is must either depend on the `BeanContainerBuildItem` or wrap the logic in a `BeanContainerListenerBuildItem`.\n"
"The reason is simple - we need to make sure the CDI container is fully initialized and started.\n"
"However, it is safe to expect that the CDI container is fully initialized and running in a `@Record(RUNTIME_INIT)` build step.\n"
"You can obtain a reference to the container via `CDI.current()` or Quarkus-specific `Arc.container()`."
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Don't forget to make sure the bean state guarantees the visibility, e.g. via the `volatile` keyword."
msgstr "不要忘记确保Bean状态保证可见性，例如通过 `volatile` 关键字。"

#: _guides/writing-extensions.adoc
msgid ""
"There is one significant drawback of this \"late initialization\" approach.\n"
"An _uninitialized_ bean may be accessed by other extensions or application components that are instantiated during bootstrap.\n"
"We'll cover a more robust solution in the xref:synthetic_beans[Synthetic beans]."
msgstr ""

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Default beans"
msgstr "默认的豆子"

#: _guides/writing-extensions.adoc
msgid ""
"A very useful pattern of creating such beans but also giving application code the ability to easily override some beans with custom implementations, is to use\n"
"the `@DefaultBean` that Quarkus provides.\n"
"This is best explained with an example."
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Let us assume that the Quarkus extension needs to provide a `Tracer` bean which application code is meant to inject into its own beans."
msgstr "让我们假设Quarkus扩展需要提供一个 `Tracer` bean，应用程序代码要将其注入到自己的bean中。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "If for example application code wants to use `Tracer`, but also needs to use a custom `Reporter` bean, such a requirement could easily be done using something like:"
msgstr "例如，如果应用程序代码想使用 `Tracer` ，但也需要使用一个自定义的 `Reporter` bean，这样的要求可以很容易地使用类似的东西来完成。"

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "How to Override a Bean Defined by a Library/Quarkus Extension that doesn't use @DefaultBean"
msgstr "如何覆盖一个不使用@DefaultBean的库/Quarkus扩展所定义的Bean？"

#: _guides/writing-extensions.adoc
msgid ""
"Although `@DefaultBean` is the recommended approach, it is also possible for application code to override beans provided by an extension by marking beans as a CDI `@Alternative` and including `@Priority` annotation.\n"
"Let's show a simple example.\n"
"Suppose we work on an imaginary \"quarkus-parser\" extension and we have a default bean implementation:"
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "And our extension also consumes this parser:"
msgstr "而我们的扩展也会消耗这个解析器。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Now, if a user or even some other extension needs to override the default implementation of the `Parser` the simplest solution is to use CDI `@Alternative` + `@Priority`:"
msgstr "现在，如果用户甚至其他一些扩展需要覆盖 `Parser` 的默认实现，最简单的解决方案是使用CDI `@Alternative` + `@Priority` 。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "`MyParser` is an alternative bean."
msgstr " `MyParser` 是一种替代性的豆子。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Enables the alternative. The priority could be any number to override the default bean but if there are multiple alternatives the highest priority wins."
msgstr "启用替代品。优先级可以是任何数字，以覆盖默认的豆子，但如果有多个替代品，则优先级最高的会获胜。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "CDI alternatives are only considered during injection and type-safe resolution. For example the default implementation would still receive observer notifications."
msgstr "CDI替代方案只在注入和类型安全的解决过程中被考虑。例如，默认实现仍然会接收观察者的通知。"

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Synthetic beans"
msgstr "合成豆"

#: _guides/writing-extensions.adoc
msgid ""
"Sometimes it is very useful to be able to register a synthetic bean.\n"
"Bean attributes of a synthetic bean are not derived from a java class, method or field.\n"
"Instead, the attributes are specified by an extension."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"Since the CDI container does not control the instantiation of a synthetic bean the dependency injection and other services (such as interceptors) are not supported.\n"
"In other words, it's up to the extension to provide all required services to a synthetic bean instance."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"There are several ways to register a xref:cdi-reference.adoc#synthetic_beans[synthetic bean] in Quarkus.\n"
"In this chapter, we will cover a use case that can be used to initialize extension beans in a safe manner (compared to xref:bean_init[Bean initialization])."
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "The `SyntheticBeanBuildItem` can be used to register a synthetic bean:"
msgstr " `SyntheticBeanBuildItem` ，可以用来注册一个合成豆。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "whose instance can be easily produced through a xref:bytecode-recording[recorder],"
msgstr "其实例可以通过 link:#bytecode-recording[录音机] 轻松制作。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "to provide a \"context\" bean that holds all the information collected during augmentation so that the real components do not need any \"late initialization\" because they can inject the context bean directly."
msgstr "提供一个 \"上下文 \"Bean，持有在增强过程中收集到的所有信息，这样真正的组件就不需要任何 \"后期初始化\"，因为它们可以直接注入上下文Bean。"

#. type: Block title
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Instance Produced Through Recorder"
msgstr "通过录音机制作的实例"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "The string value is recorded in the bytecode and used to initialize the instance of `Foo`."
msgstr "该字符串值被记录在字节码中，并用于初始化 `Foo` 的实例。"

#. type: Block title
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "\"Context\" Holder"
msgstr "\"背景 \"持有人"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "The \"real\" components can inject the `TestContext` directly."
msgstr "真正的 \"组件可以直接注入 `TestContext` 。"

#. type: Title ===
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Some types of extensions"
msgstr "某些类型的扩展"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "There exist multiple stereotypes of extension, let's list a few."
msgstr "存在着多种陈规定型的扩展，让我们列举几个。"

#. type: Labeled list
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Bare library running"
msgstr "裸库运行"

#: _guides/writing-extensions.adoc
msgid ""
"This is the less sophisticated extension.\n"
"It consists of a set of patches to make sure a library runs on GraalVM.\n"
"If possible, contribute these patches upstream, not in extensions.\n"
"Second best is to write Substrate VM substitutions, which are patches applied during native image compilation."
msgstr ""

#. type: Labeled list
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Get a framework running"
msgstr "运行一个框架"

#: _guides/writing-extensions.adoc
msgid ""
"A framework at runtime typically reads configuration, scan the classpath and classes for metadata (annotations, getters etc.), build a metamodel on top of which it runs, find options via the service loader pattern, prepare invocation calls (reflection), proxy interfaces, etc. +\n"
"These operations should be done at build time and the metamodel be passed to the recorder DSL that will generate classes that will be executed at runtime and boot the framework."
msgstr ""

#. type: Labeled list
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Get a CDI portable extension running"
msgstr "让CDI便携式扩展运行"

#: _guides/writing-extensions.adoc
msgid ""
"The CDI portable extension model is very flexible.\n"
"Too flexible to benefit from the build time boot promoted by Quarkus.\n"
"Most extension we have seen do not make use of these extreme flexibility capabilities.\n"
"The way to port a CDI extension to Quarkus is to rewrite it as a Quarkus extension which will define the various beans at build time (deployment time in extension parlance)."
msgstr ""

#. type: Title ==
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Technical aspect"
msgstr "技术方面"

#. type: Title ===
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Three Phases of Bootstrap and Quarkus Philosophy"
msgstr "Bootstrap的三个阶段和Quarkus哲学"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "There are three distinct bootstrap phases of a Quarkus app:"
msgstr "Quarkus应用程序有三个不同的引导阶段。"

#. type: Labeled list
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Augmentation"
msgstr "扩容"

#: _guides/writing-extensions.adoc
msgid ""
"This is the first phase, and is done by the xref:build-step-processors[Build Step Processors]. These processors have access to Jandex annotation\n"
"information and can parse any descriptors and read annotations, but should not attempt to load any application classes. The output of these\n"
"build steps is some recorded bytecode, using an extension of the ObjectWeb ASM project called Gizmo(ext/gizmo), that is used to actually bootstrap the application at runtime.\n"
"Depending on the `io.quarkus.deployment.annotations.ExecutionTime` value of the `@io.quarkus.deployment.annotations.Record` annotation associated with the build step,\n"
"the step may be run in a different JVM based on the following two modes."
msgstr ""

#. type: Labeled list
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Static Init"
msgstr "静态启动"

#: _guides/writing-extensions.adoc
msgid ""
"If bytecode is recorded with `@Record(STATIC_INIT)` then it will be executed from a static init method on the main\n"
"class. For a native executable build, this code is executed in a normal JVM as part of the native build\n"
"process, and any retained objects that are produced in this stage will be directly serialized into the native executable via an image mapped file.\n"
"This means that if a framework can boot in this phase then it will have its booted state directly written to the\n"
"image, and so the boot code does not need to be executed when the image is started."
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "There are some restrictions on what can be done in this stage as the Substrate VM disallows some objects in the native executable. For example you should not attempt to listen on a port or start threads in this phase. In addition, it is disallowed to read run time configuration during static initialization."
msgstr "在这个阶段可以做的事情有一些限制，因为底层虚拟机不允许本地可执行文件中的一些对象。例如，你不应该在这个阶段尝试监听一个端口或启动线程。此外，在静态初始化期间，不允许读取运行时配置。"

#: _guides/writing-extensions.adoc
msgid ""
"In non-native pure JVM mode, there is no real difference between Static and Runtime Init, except that Static Init is always executed first. This mode benefits from the same build phase augmentation as native mode as the descriptor parsing and annotation scanning are done\n"
"at build time and any associated class/framework dependencies can be removed from the build output jar. In servers like\n"
"WildFly, deployment related classes such as XML parsers hang around for the life of the application, using up valuable\n"
"memory. Quarkus aims to eliminate this, so that the only classes loaded at runtime are actually used at runtime."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"As an example, the only reason that a Quarkus application should load an XML parser is if the user is using XML in their\n"
"application. Any XML parsing of configuration should be done in the Augmentation phase."
msgstr ""

#. type: Labeled list
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Runtime Init"
msgstr "运行时启动"

#: _guides/writing-extensions.adoc
msgid ""
"If bytecode is recorded with `@Record(RUNTIME_INIT)` then it is executed from the application's main method. This code\n"
"will be run on native executable boot. In general as little code as possible should be executed in this phase, and should\n"
"be restricted to code that needs to open ports etc."
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Pushing as much as possible into the `@Record(STATIC_INIT)` phase allows for two different optimizations:"
msgstr "将尽可能多的东西推到 `@Record(STATIC_INIT)` 阶段，可以实现两种不同的优化。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "In both native executable and pure JVM mode this allows the app to start as fast as possible since processing was done during build time. This also minimizes the classes/native code needed in the application to pure runtime related behaviors."
msgstr "在本地可执行程序和纯JVM模式下，这使得应用程序可以尽可能快地启动，因为处理是在构建时间内完成的。这也使应用程序中需要的类/原生代码最小化为纯运行时相关行为。"

#: _guides/writing-extensions.adoc
msgid ""
"Another benefit with native executable mode is that Substrate can more easily eliminate features that are not used. If features are directly initialized via bytecode, Substrate can detect that a method is never called and eliminate\n"
"that method. If config is read at runtime, Substrate cannot reason about the contents of the config and so needs to keep all features in case they are required."
msgstr ""

#. type: Title ===
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Project setup"
msgstr "项目设置"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Your extension project should be setup as a multi-module project with two submodules:"
msgstr "你的扩展项目应该被设置为一个有两个子模块的多模块项目。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "A deployment time submodule that handles the build time processing and bytecode recording."
msgstr "一个部署时间子模块，处理构建时间处理和字节码记录。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "A runtime submodule that contains the runtime behavior that will provide the extension behavior in the native executable or runtime JVM."
msgstr "一个运行时子模块，它包含运行时行为，将在本地可执行文件或运行时JVM中提供扩展行为。"

#: _guides/writing-extensions.adoc
msgid ""
"Your runtime artifact should depend on `io.quarkus:quarkus-core`, and possibly the runtime artifacts of other Quarkus\n"
"modules if you want to use functionality provided by them.\n"
"Your deployment time module should depend on `io.quarkus:quarkus-core-deployment`, your runtime artifact,\n"
"and possibly the deployment artifacts of other Quarkus modules if you want to use functionality provided by them."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"Under no circumstances can the runtime module depend on a deployment artifact. This would result\n"
"in pulling all the deployment time code into runtime scope, which defeats the purpose of having the split."
msgstr ""

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Using Maven"
msgstr "使用Maven"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "You will need to include the `io.quarkus:quarkus-extension-maven-plugin` and configure the `maven-compiler-plugin` to detect the `quarkus-extension-processor` annotation processor to collect and generate the necessary xref:extension-metadata.adoc[Quarkus extension metadata] for the extension artifacts, if you are using the Quarkus parent pom it will automatically inherit the correct configuration."
msgstr "你将需要包括 `io.quarkus:quarkus-extension-maven-plugin` ，并配置 `maven-compiler-plugin` ，以检测 `quarkus-extension-processor` 注释处理器，为扩展工件收集和生成必要的 link:extension-metadata.html[Quarkus扩展元数据] ，如果你使用Quarkus父pom，它将自动继承正确的配置。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "You may want to use the `create-extension` mojo of `{quarkus-platform-groupid}:quarkus-maven-plugin` to create these Maven modules - see the next section."
msgstr "你可能想使用 `create-extension` mojo of `io.quarkus.platform:quarkus-maven-plugin` 来创建这些Maven模块--见下一节。"

#: _guides/writing-extensions.adoc
msgid ""
"By convention the deployment time artifact has the `-deployment` suffix, and the runtime artifact\n"
"has no suffix (and is what the end user adds to their project)."
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "The above `maven-compiler-plugin` configuration requires version 3.5+."
msgstr "上述 `maven-compiler-plugin` 配置需要3.5以上版本。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "You will also need to configure the `maven-compiler-plugin` of the deployment module to detect the `quarkus-extension-processor` annotation processor."
msgstr "你还需要配置部署模块的 `maven-compiler-plugin` ，以检测 `quarkus-extension-processor` 注释处理器。"

#. type: Title =====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Create new Quarkus Core extension modules using Maven"
msgstr "使用Maven创建新的Quarkus Core扩展模块"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Quarkus provides `create-extension` Maven Mojo to initialize your extension project."
msgstr "Quarkus提供 `create-extension` Maven Mojo来初始化你的扩展项目。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "It will try to auto-detect its options:"
msgstr "它将尝试自动检测其选项。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "from `quarkus` (Quarkus Core) or `quarkus/extensions` directory, it will use the 'Quarkus Core' extension layout and defaults."
msgstr "从 `quarkus` （Quarkus Core）或 `quarkus/extensions` 目录，它将使用'Quarkus Core'扩展布局和默认值。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "with `-DgroupId=io.quarkiverse.[extensionId]`, it will use the 'Quarkiverse' extension layout and defaults."
msgstr "用 `-DgroupId=io.quarkiverse.[extensionId]` ，它将使用'Quarkiverse'扩展布局和默认值。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "in other cases it will use the 'Standalone' extension layout and defaults."
msgstr "在其他情况下，它将使用 \"独立 \"扩展布局和默认值。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "we may introduce other layout types in the future."
msgstr "我们可能在未来引入其他布局类型。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "You may not specify any parameter to use the interactive mode: `mvn {quarkus-platform-groupid}:quarkus-maven-plugin:{quarkus-version}:create-extension -N`"
msgstr "你可以不指定任何参数来使用互动模式。 `mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create-extension -N` "

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "As and example, let's add a new extension called `my-ext` to the Quarkus source tree:"
msgstr "作为例子，让我们在Quarkus源码树上添加一个新的扩展，名为 `my-ext` 。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "By default, the `groupId`, `version`, `quarkusVersion`, `namespaceId`, and `namespaceName` will be consistent with other Quarkus core extensions."
msgstr "默认情况下， `groupId` , `version` , `quarkusVersion` , `namespaceId` , 和 `namespaceName` 将与其他Quarkus核心扩展一致。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "The extension description is important as it is displayed on https://code.quarkus.io/, when listing extensions with the Quarkus CLI, etc."
msgstr "扩展描述很重要，因为它显示在 https://code.quarkus.io/ 当用Quarkus CLI列出扩展时，等等。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "The above sequence of commands does the following:"
msgstr "上面的命令序列做了以下工作。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Creates four new Maven modules:"
msgstr "创建四个新的Maven模块。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "`quarkus-my-ext-parent` in the `extensions/my-ext` directory"
msgstr " `quarkus-my-ext-parent` 在 目录中 `extensions/my-ext` "

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "`quarkus-my-ext` in the `extensions/my-ext/runtime` directory"
msgstr " `quarkus-my-ext` 在 目录中 `extensions/my-ext/runtime` "

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "`quarkus-my-ext-deployment` in the `extensions/my-ext/deployment` directory; a basic `MyExtProcessor` class is generated in this module."
msgstr " `quarkus-my-ext-deployment` 在 目录中；在这个模块中生成了一个基本的 类。 `extensions/my-ext/deployment` `MyExtProcessor` "

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "`quarkus-my-ext-integration-test` in the `integration-tests/my-ext/deployment` directory; an empty Jakarta REST Resource class and two test classes (for JVM mode and native mode) are generated in this module."
msgstr " `quarkus-my-ext-integration-test` 在 目录中；一个空的 JAX-RS 资源类和两个测试类（用于 JVM 模式和本地模式）在该模块中生成。 `integration-tests/my-ext/deployment` "

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Links these three modules where necessary:"
msgstr "必要时链接这三个模块。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "`quarkus-my-ext-parent` is added to the `<modules>` of `quarkus-extensions-parent`"
msgstr " `quarkus-my-ext-parent` 被添加到 的 `<modules>` `quarkus-extensions-parent` "

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "`quarkus-my-ext` is added to the `<dependencyManagement>` of the Quarkus BOM (Bill of Materials) `bom/application/pom.xml`"
msgstr " `quarkus-my-ext` 被添加到Quarkus BOM（材料清单）的 。 `<dependencyManagement>` `bom/application/pom.xml` "

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "`quarkus-my-ext-deployment` is added to the `<dependencyManagement>` of the Quarkus BOM (Bill of Materials) `bom/application/pom.xml`"
msgstr " `quarkus-my-ext-deployment` 被添加到Quarkus BOM（材料清单）的 。 `<dependencyManagement>` `bom/application/pom.xml` "

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "`quarkus-my-ext-integration-test` is added to the `<modules>` of `quarkus-integration-tests-parent`"
msgstr " `quarkus-my-ext-integration-test` 被添加到 的 `<modules>` `quarkus-integration-tests-parent` "

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "You also have to fill the xref:extension-metadata.adoc#quarkus-extension-yaml[quarkus-extension.yaml] template file that describe your extension inside the runtime module `src/main/resources/META-INF` folder."
msgstr "你还必须在运行模块 `src/main/resources/META-INF` 文件夹中填写描述你的扩展的 `quarkus-extension.yaml` 文件。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "This is the `quarkus-extension.yaml` template of the `quarkus-agroal` extension, you can use it as an example:"
msgstr "这是 `quarkus-agroal` 扩展的 `quarkus-extension.yaml` ，你可以把它作为一个例子。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "the name of the extension that will be displayed to users"
msgstr "将显示给用户的扩展名"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "keywords that can be used to find the extension in the extension catalog"
msgstr "可用于在扩展目录中查找扩展的关键词"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "link to the extension's guide or documentation"
msgstr "链接到扩展的指南或文件"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "categories under which the extension should appear on https://code.quarkus.io[code.quarkus.io], could be omitted, in which case the extension will still be listed but not under any specific category"
msgstr "在 link:https://code.quarkus.io[code.quarkus.io] 上出现的扩展的类别，可以省略，在这种情况下，扩展仍将被列出，但不在任何特定的类别下。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "maturity status, which could be `stable`, `preview` or `experimental`, evaluated by extension maintainers"
msgstr "成熟状态，可以是 `stable` 、 `preview` 或 `experimental` ，由扩展维护者评估。"

#: _guides/writing-extensions.adoc
msgid ""
"The `name` parameter of the mojo is optional.\n"
"If you do not specify it on the command line, the plugin will derive it from `extensionId` by replacing dashes with spaces and uppercasing each token.\n"
"So you may consider omitting explicit `name` in some cases."
msgstr ""

#. The following link should point to the mojo page once https://github.com/quarkusio/quarkusio.github.io/issues/265 is fixed
#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Please refer to https://github.com/quarkusio/quarkus/blob/{quarkus-version}/devtools/maven/src/main/java/io/quarkus/maven/CreateExtensionMojo.java[CreateExtensionMojo JavaDoc] for all the available options of the mojo."
msgstr "请参考 link:https://github.com/quarkusio/quarkus/blob/{quarkus-version}/devtools/maven/src/main/java/io/quarkus/maven/CreateExtensionMojo.java[CreateExtensionMojo JavaDoc] ，了解Mojo的所有可用选项。"

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Using Gradle"
msgstr "使用Gradle"

#: _guides/writing-extensions.adoc
msgid ""
"You will need to apply the `io.quarkus.extension` plugin in the `runtime` module of your extension project.\n"
"The plugin includes the `extensionDescriptor` task that will generate `META-INF/quarkus-extension.properties` and `META-INF/quarkus-extension.yml` files.\n"
"The plugin also enables the `io.quarkus:quarkus-extension-processor` annotation processor in both `deployment` and `runtime` modules to collect and generate the rest of the xref:extension-metadata.adoc[Quarkus extension metadata].\n"
"The name of the deployment module can be configured in the plugin by setting the `deploymentModule` property. The property is set to `deployment` by default:"
msgstr ""

#. type: delimited block =
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "This plugin is still experimental, it does not validate the extension dependencies as the equivalent Maven plugin does."
msgstr "该插件仍处于试验阶段，它不像Maven插件那样验证扩展的依赖性。"

#. type: Title ===
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Build Step Processors"
msgstr "建立步骤处理器"

#: _guides/writing-extensions.adoc
msgid ""
"Work is done at augmentation time by _build steps_ which produce and consume _build items_.  The build steps found in\n"
"the deployment modules that correspond to the extensions in the project build are automatically wired together and executed\n"
"to produce the final build artifact(s)."
msgstr ""

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Build steps"
msgstr "建设步骤"

#: _guides/writing-extensions.adoc
msgid ""
"A _build step_ is a non-static method which is annotated with the `@io.quarkus.deployment.annotations.BuildStep` annotation.\n"
"Each build step may xref:consuming-values[consume] items that are produced by earlier stages, and xref:producing-values[produce] items that can be consumed by later stages. Build steps are normally only run when they produce a build item that is\n"
"ultimately consumed by another step."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"Build steps are normally placed on plain classes within an extension's deployment module.  The classes are automatically\n"
"instantiated during the augment process and utilize xref:injection[injection]."
msgstr ""

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Build items"
msgstr "构建项目"

#: _guides/writing-extensions.adoc
msgid ""
"Build items are concrete, final subclasses of the abstract `io.quarkus.builder.item.BuildItem` class.  Each build item represents\n"
"some unit of information that must be passed from one stage to another.  The base `BuildItem` class may not itself be directly\n"
"subclassed; rather, there are abstract subclasses for each of the kinds of build item subclasses that _may_ be created:\n"
"xref:simple-build-items[simple], xref:multi-build-items[multi], and xref:empty-build-items[empty]."
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Think of build items as a way for different extensions to communicate with one another.  For example, a build item can:"
msgstr "把构建项目看成是不同的扩展模块之间相互交流的一种方式。例如，一个构建项可以。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "expose the fact that a database configuration exists"
msgstr "暴露一个数据库配置存在的事实"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "consume that database configuration (e.g. a connection pool extension or an ORM extension)"
msgstr "消费该数据库配置（如连接池扩展或ORM扩展）。"

#: _guides/writing-extensions.adoc
msgid ""
"ask an extension to do work for another extension: e.g. an extension wanting to define a new CDI bean and asking the ArC extension\n"
"to do so"
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "This is a very flexible mechanism."
msgstr "这是一个非常灵活的机制。"

#: _guides/writing-extensions.adoc
msgid ""
"`BuildItem` instances should be immutable, as the producer/consumer model does not allow for mutation to be correctly\n"
"ordered. This is not enforced but failure to adhere to this rule can result in race conditions."
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Build steps are executed if and only if they produce build items that are (transitively) needed by other build steps. Make sure your build step produces a build item, otherwise you should probably produce either `ValidationErrorBuildItem` for build validations, or `ArtifactResultBuildItem` for generated artifacts."
msgstr "当且仅当它们产生了其他构建步骤所需的构建项目时，构建步骤才会被执行。确保你的构建步骤产生一个构建项目，否则你可能应该为构建验证产生 `ValidationErrorBuildItem` ，或者为生成的工件产生 `ArtifactResultBuildItem` 。"

#. type: Title =====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Simple build items"
msgstr "简单的建造项目"

#: _guides/writing-extensions.adoc
msgid ""
"Simple build items are final classes which extend `io.quarkus.builder.item.SimpleBuildItem`.  Simple build items may only\n"
"be produced by one step in a given build; if multiple steps in a build declare that they produce the same simple build item,\n"
"an error is raised.  Any number of build steps may consume a simple build item.  A build step which consumes a simple\n"
"build item will always run _after_ the build step which produced that item."
msgstr ""

#. type: Block title
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Example of a single build item"
msgstr "单一建筑项目的例子"

#. type: Title =====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Multi build items"
msgstr "多项建设的项目"

#: _guides/writing-extensions.adoc
msgid ""
"Multiple or \"multi\" build items are final classes which extend `io.quarkus.builder.item.MultiBuildItem`.  Any number of\n"
"multi build items of a given class may be produced by any number of steps, but any steps which consume multi build items\n"
"will only run _after_ every step which can produce them has run."
msgstr ""

#. type: Block title
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Example of a multiple build item"
msgstr "多重构建项目的例子"

#. type: Block title
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Example of multiple build item usage"
msgstr "多个构建项目的使用实例"

#. type: Title =====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Empty build items"
msgstr "空建项目"

#: _guides/writing-extensions.adoc
msgid ""
"Empty build items are final (usually empty) classes which extend `io.quarkus.builder.item.EmptyBuildItem`.\n"
"They represent build items that don't actually carry any data, and allow such items to be produced and consumed\n"
"without having to instantiate empty classes.  They cannot themselves be instantiated."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"As they cannot be instantiated, they cannot be injected by any means, nor be returned by a build step (or via a `BuildProducer`).\n"
"To produce an empty build item you must annotate the build step with `@Produce(MyEmptyBuildItem.class)` and to consume it by `@Consume(MyEmptyBuildItem.class)`."
msgstr ""

#. type: Block title
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Example of an empty build item"
msgstr "一个空的构建项目的例子"

#: _guides/writing-extensions.adoc
msgid ""
"Empty build items can represent \"barriers\" which can impose ordering between steps.  They can also be used in\n"
"the same way that popular build systems use \"pseudo-targets\", which is to say that the build item can represent a\n"
"conceptual goal that does not have a concrete representation."
msgstr ""

#. type: Block title
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Example of usage of an empty build item in a \"pseudo-target\" style"
msgstr "在 \"伪目标 \"风格中使用空构建项的例子"

#. type: Block title
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Example of usage of an empty build item in a \"barrier\" style"
msgstr "在 \"障碍 \"风格中使用空的建筑项目的例子"

#. type: Title =====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Validation Error build items"
msgstr "多项建设的项目"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "They represent build items with validation errors that make the build fail. These build items are consumed during the initialization of the CDI container."
msgstr "它们代表了有验证错误的构建项目，这些错误使构建失败。这些构建项在CDI容器的初始化过程中被消耗。"

#. type: Block title
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Example of usage of an validation error build item in a \"pseudo-target\" style"
msgstr "在 \"伪目标 \"风格中使用空构建项的例子"

#. type: Title =====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Artifact Result build items"
msgstr "多项建设的项目"

#: _guides/writing-extensions.adoc
msgid ""
"They represent build items containing the runnable artifact generated by the build, such as an uberjar or thin jar.\n"
"These build items can also be used to always execute a build step without needing to produce anything."
msgstr ""

#. type: Block title
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Example of build step that is always executed in a \"pseudo-target\" style"
msgstr "在 \"伪目标 \"风格中使用空构建项的例子"

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Injection"
msgstr "注射"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Classes which contain build steps support the following types of injection:"
msgstr "包含构建步骤的类支持以下类型的注入。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Constructor parameter injection"
msgstr "构造函数参数注入"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Field injection"
msgstr "现场注射"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Method parameter injection (for build step methods only)"
msgstr "方法参数注入（仅适用于构建步骤方法）。"

#: _guides/writing-extensions.adoc
msgid ""
"Build step classes are instantiated and injected for each build step invocation, and are discarded afterwards.  State\n"
"should only be communicated between build steps by way of build items, even if the steps are on the same class."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"Final fields are not considered for injection, but can be populated by way of constructor parameter injection\n"
"if desired.  Static fields are never considered for injection."
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "The types of values that can be injected include:"
msgstr "可以注入的值的类型包括。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "xref:build-items[Build items] produced by previous build steps"
msgstr "以前的构建步骤所产生的 link:#build-items[构建项目]"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "xref:producing-values[Build producers] to produce items for subsequent build steps"
msgstr "link:#producing-values[构建生产者] ，为后续构建步骤生产物品"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "xref:configuration[Configuration Mapping] types"
msgstr "link:#configuration-roots[配置根基] 类型"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Template objects for xref:bytecode-recording[bytecode recording]"
msgstr "用于 link:#bytecode-recording[字节码记录] 的模板对象"

#: _guides/writing-extensions.adoc
msgid ""
"Objects which are injected into a build step method or its class _must not_ be used outside that method's\n"
"execution."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"Injection is resolved at compile time via an annotation processor,\n"
"and the resulting code does not have permission to inject private fields or invoke private methods."
msgstr ""

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Producing values"
msgstr "产生的价值"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "A build step may produce values for subsequent steps in several possible ways:"
msgstr "一个构建步骤可以通过几种可能的方式为后续步骤产生数值。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "By returning a xref:simple-build-items[simple build item] or xref:multi-build-items[multi build item] instance"
msgstr "通过返回一个 link:#simple-build-items[简单的构建项] 或 link:#multi-build-items[多构建项] 实例"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "By returning a `List` of a multi build item class"
msgstr "通过返回一个 `List` ，一个多建筑项目的类别"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "By injecting a `BuildProducer` of a simple or multi build item class"
msgstr "通过注入一个简单或多建项目类的 `BuildProducer` "

#: _guides/writing-extensions.adoc
msgid ""
"By annotating the method with `@io.quarkus.deployment.annotations.Produce`, giving the class name of an\n"
"xref:empty-build-items[empty build item]"
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"If a simple build item is declared on a build step, it _must_ be produced during that build step, otherwise an error\n"
"will result.  Build producers, which are injected into steps, _must not_ be used outside that step."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"Note that a `@BuildStep` method will only be called if it produces something that another consumer or the final output\n"
"requires. If there is no consumer for a particular item then it will not be produced. What is required will depend on\n"
"the final target that is being produced.  For example, when running in developer mode the final output will not ask\n"
"for GraalVM-specific build items such as `ReflectiveClassBuildItem`, so methods that only produce these\n"
"items will not be invoked."
msgstr ""

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Consuming values"
msgstr "消耗价值"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "A build step may consume values from previous steps in the following ways:"
msgstr "构建步骤可以通过以下方式消耗先前步骤的值。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "By injecting a xref:simple-build-items[simple build item]"
msgstr "通过注入一个 link:#simple-build-items[简单的构建项]"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "By injecting an `Optional` of a simple build item class"
msgstr "通过注入一个简单构建项目类的 `Optional` "

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "By injecting a `List` of a xref:multi-build-items[multi build item] class"
msgstr "通过注入一个 `List` 的 link:#multi-build-items[多建筑项目] 类"

#: _guides/writing-extensions.adoc
msgid ""
"By annotating the method with `@io.quarkus.deployment.annotations.Consume`, giving the class name of an\n"
"xref:empty-build-items[empty build item]"
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"Normally it is an error for a step which is included to consume a simple build item that is not produced by any other\n"
"step.  In this way, it is guaranteed that all the declared values will be present and non-`null` when a step is run."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"Sometimes a value isn't necessary for the build to complete, but might inform some behavior of the build step if it is\n"
"present.  In this case, the value can be optionally injected."
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Multi build values are always considered _optional_.  If not present, an empty list will be injected."
msgstr "多重构建值总是被认为是 _可选的_ 。如果不存在，将注入一个空列表。"

#. type: Title =====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Weak value production"
msgstr "价值生产疲软"

#: _guides/writing-extensions.adoc
msgid ""
"Normally a build step is included whenever it produces any build item which is in turn consumed by any other build step.  In this way,\n"
"only the steps necessary to produce the final artifact(s) are included, and steps which pertain to extensions which are\n"
"not installed or which only produce build items which are not relevant for the given artifact type are excluded."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"For cases where this is not desired behavior, the `@io.quarkus.deployment.annotations.Weak` annotation may be used.  This\n"
"annotation indicates that the build step should not automatically be included solely on the basis of producing the annotated value."
msgstr ""

#. type: Block title
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Example of producing a build item weakly"
msgstr "弱化生产构建项目的例子"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "This method (not provided in this example) would generate the class using the ASM API."
msgstr "这个方法（在这个例子中没有提供）将使用ASM API生成这个类。"

#: _guides/writing-extensions.adoc
msgid ""
"Certain types of build items are generally always consumed, such as generated classes or resources.\n"
"An extension might produce a build item along with a generated class to facilitate the usage\n"
"of that build item.  Such a build step would use the `@Weak` annotation on the generated class build item, while normally\n"
"producing the other build item.  If the other build item is ultimately consumed by something, then the step would run\n"
"and the class would be generated.  If nothing consumes the other build item, the step would not be included in the build\n"
"process."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"In the example above, `GeneratedClassBuildItem` would only be produced if `ExecutorClassBuildItem` is consumed by\n"
"some other build step."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"Note that when using xref:bytecode-recording[bytecode recording], the implicitly generated class can be declared to be weak by\n"
"using the `optional` attribute of the `@io.quarkus.deployment.annotations.Record` annotation."
msgstr ""

#. type: Block title
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Example of using a bytecode recorder where the generated class is weakly produced"
msgstr "使用字节码记录器的例子，其中生成的类是弱生成的"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Note the `optional` attribute."
msgstr "注意 `optional` 属性。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "This example is using recorder proxies; see the section on xref:bytecode-recording[bytecode recording] for more information."
msgstr "这个例子是使用记录器代理，更多信息请看 link:#bytecode-recording[字节码记录] 一节。"

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Application Archives"
msgstr "应用档案"

#: _guides/writing-extensions.adoc
msgid ""
"The `@BuildStep` annotation can also register marker files that determine which archives on the class path are considered\n"
"to be 'Application Archives', and will therefore get indexed. This is done via the `applicationArchiveMarkers`. For\n"
"example the ArC extension registers `META-INF/beans.xml`, which means that all archives on the class path with a `beans.xml`\n"
"file will be indexed."
msgstr ""

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Using Thread's Context Class Loader"
msgstr "使用线程的上下文类加载器"

#: _guides/writing-extensions.adoc
msgid ""
"The build step will be run with a TCCL that can load user classes from the deployment in a transformer-safe way.\n"
"This class loader only lasts for the life of the augmentation, and is discarded afterwards.\n"
"The classes will be loaded again in a different class loader at runtime.\n"
"This means that loading a class during augmentation does not stop it from being transformed when running in the development/test mode."
msgstr ""

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Adding external JARs to the indexer with IndexDependencyBuildItem"
msgstr "用IndexDependencyBuildItem向索引器添加外部JARs"

#: _guides/writing-extensions.adoc
msgid ""
"The index of scanned classes will not automatically include your external class dependencies.\n"
"To add dependencies, create a `@BuildStep` that produces `IndexDependencyBuildItem` objects, for a `groupId` and `artifactId`."
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "It is important to specify all the required artifacts to be added to the indexer. No artifacts are implicitly added transitively."
msgstr "重要的是要指定所有需要添加到索引器的工件。没有任何工件会被隐含地添加到索引器中。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "The `Amazon Alexa` extension adds dependent libraries from the Alexa SDK that are used in Jackson JSON transformations, in order for the reflective classes to identified and included at `BUILD_TIME`."
msgstr " `Amazon Alexa` 扩展添加了来自Alexa SDK的依赖性库，这些库在Jackson JSON转换中使用，以便在 `BUILD_TIME` 中识别和包含反射类。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "With the artifacts added to the `Jandex` indexer, you can now search the index to identify classes implementing an interface, subclasses of a specific class, or classes with a target annotation."
msgstr "有了添加到 `Jandex` 索引器的工件，你现在可以搜索索引来识别实现接口的类、特定类的子类或具有目标注释的类。"

#: _guides/writing-extensions.adoc
msgid ""
"For example, the `Jackson` extension uses code like below to search for annotations used in JSON deserialization,\n"
"and add them to the reflective hierarchy for `BUILD_TIME` analysis."
msgstr ""

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Visualizing build step dependencies"
msgstr "构建步骤依赖性的可视化"

#: _guides/writing-extensions.adoc
msgid ""
"It can occasionally be useful to see a visual representation of the interactions between the various build steps. For such cases, adding `-Dquarkus.builder.graph-output=build.dot` when building an application\n"
"will result in the creation of the `build.dot` file in the project's root directory. See link:https://graphviz.org/resources/[this] for a list of software that can open the file and show the actual visual representation."
msgstr ""

#. type: Title ===
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Configuration"
msgstr "配置"

#: _guides/writing-extensions.adoc
msgid ""
"Configuration in Quarkus is based on https://smallrye.io/smallrye-config/Main/[SmallRye Config]. All features provided\n"
"by https://smallrye.io/smallrye-config/Main/[SmallRye Config] are also available in Quarkus."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"Extensions must use https://smallrye.io/smallrye-config/Main/config/mappings/[SmallRye Config @ConfigMapping] to map\n"
"the configuration required by the Extension. This will allow Quarkus to automatically expose an instance of the mapping\n"
"to each configuration phase and generate the configuration documentation."
msgstr ""

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Config Phases"
msgstr "配置根基阶段"

#: _guides/writing-extensions.adoc
msgid ""
"Configuration mappings are strictly bound by configuration phase, and attempting to access a configuration mapping from\n"
"outside its corresponding phase will result in an error. They dictate when its contained keys are read from the\n"
"configuration, and when they are available to applications. The phases defined by\n"
"`io.quarkus.runtime.annotations.ConfigPhase` are as follows:"
msgstr ""

#. type: Table
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Phase name"
msgstr "阶段名称"

#. type: Table
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Read & avail. at build time"
msgstr "阅读并在建造时使用"

#. type: Table
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Avail. at run time"
msgstr "可在运行时使用"

#. type: Table
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Read during static init"
msgstr "在静态启动时读取"

#. type: Table
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Re-read during startup (native executable)"
msgstr "在启动期间重新读取（本地可执行文件）。"

#. type: Table
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Notes"
msgstr "笔记"

#. type: Table
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "BUILD_TIME"
msgstr "构建时间（BUILD_TIME"

#. type: Table
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "✓"
msgstr "✓"

#. type: Table
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "✗"
msgstr "✗"

#. type: Table
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Appropriate for things which affect build."
msgstr "适合于影响建设的事情。"

#. type: Table
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "BUILD_AND_RUN_TIME_FIXED"
msgstr "构建和运行时间是固定的"

#. type: Table
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Appropriate for things which affect build and must be visible for run time code.  Not read from config at run time."
msgstr "适用于影响构建的东西，并且必须对运行时代码可见。不是在运行时从配置中读取。"

#. type: Table
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "BOOTSTRAP"
msgstr "靴套"

#. type: Table
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Used when runtime configuration needs to be obtained from an external system (like `Consul`), but details of that system need to be configurable (for example Consul's URL). The high level way this works is by using the standard Quarkus config sources (such as properties files, system properties, etc.) and producing `ConfigSourceProvider` objects which are subsequently taken into account by Quarkus when creating the final runtime `Config` object."
msgstr "当运行时配置需要从外部系统获得时（如 `Consul` ），但该系统的细节需要可配置（例如Consul的URL）。这个工作的高级方式是使用标准的Quarkus配置源（如属性文件、系统属性等），并产生 `ConfigSourceProvider` 对象，随后Quarkus在创建最终的运行时 `Config` 对象时将考虑到这些对象。"

#. type: Table
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "RUN_TIME"
msgstr "运转时间"

#. type: Table
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Not available at build, read at start in all modes."
msgstr "构建时不可用，在所有模式下启动时读取。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "For all cases other than the `BUILD_TIME` case, the configuration mapping interface and all the configuration groups and types contained therein must be located in, or reachable from, the extension's run time artifact. Configuration mappings of phase `BUILD_TIME` may be located in or reachable from either of the extension's run time or deployment artifacts."
msgstr "对于 `BUILD_TIME` 情况以外的所有情况，配置根类和其中包含的所有配置组和类型必须位于扩展的运行时间工件中，或可从该工件中到达。 `BUILD_TIME` 阶段的配置根可位于扩展的运行时间或部署工件中，或可从其中获取。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "_Bootstrap_ configuration steps are executed during runtime-init *before* any of other runtime steps. This means that code executed as part of this step cannot access anything that gets initialized in runtime init steps (runtime synthetic CDI beans being one such example)."
msgstr " _Bootstrap_ 配置步骤是在运行时初始化期间执行的， *在* 其他运行时步骤 *之前* 。这意味着作为这个步骤的一部分执行的代码不能访问任何在运行时初始化步骤中被初始化的东西（运行时合成CDI豆就是这样一个例子）。"

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Configuration Example"
msgstr "配置实例"

#: _guides/writing-extensions.adoc
msgid ""
"A configuration property name can be split into segments. For example, a property name like\n"
"`quarkus.log.file.enable` can be split into the following segments:"
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "`quarkus` - a namespace claimed by Quarkus which is a prefix for `@ConfigMapping` interfaces,"
msgstr " `quarkus` - 是Quarkus声称的一个命名空间，是所有 类的前缀。 `@ConfigRoot` "

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "`log` - a name segment which corresponds to the prefix set in the interface annotated with `@ConfigMapping`,"
msgstr " `log` - 一个名称段，对应于用 注释的 类。 `@ConfigRoot` `LogConfiguration` "

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "`file` - a name segment which corresponds to the `file` field in this class,"
msgstr " `file` - 一个名称段，它与该类中的 字段相对应。 `file` "

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "`enable` - a name segment which corresponds to `enable` field in `FileConfig`."
msgstr " `enabled` - 一个名称段，对应于 类中的 字段，并注有 。 `FileConfig` `enable` `@ConfigGroup` "

#: _guides/writing-extensions.adoc
msgid ""
"The `@ConfigMapping` annotation indicates that the interface is a configuration mapping, in this case one which\n"
"corresponds to a `quarkus.log` segment."
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "The `@ConfigRoot` annotation indicated to which Config phase, the configuration applies to."
msgstr " `@ConfigRoot` 注释表明该配置适用于哪个配置阶段。"

#: _guides/writing-extensions.adoc
msgid ""
"Here the `LoggingProcessor` injects a `LogConfiguration` instance automatically by detecting the `@ConfigRoot`\n"
"annotation."
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "A corresponding `application.properties` for the above example could be:"
msgstr "上述例子对应的 `application.properties` ，可以是。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Since `format` is not defined in these properties, the default value from `@WithDefault` will be used instead."
msgstr "由于 `format` 没有在这些属性中定义，所以将使用 `@ConfigItem` 的默认值来代替。"

#: _guides/writing-extensions.adoc
msgid ""
"A configuration mapping name can contain an extra suffix segment for the case where there are configuration\n"
"mappings for multiple xref:config-phases[Config Phases]. Classes which correspond to the `BUILD_TIME` and `BUILD_AND_RUN_TIME_FIXED`\n"
"may end with `BuildTimeConfig` or `BuildTimeConfiguration`, classes which correspond to the `RUN_TIME` phase\n"
"may end with `RuntimeConfig`, `RunTimeConfig`, `RuntimeConfiguration` or `RunTimeConfiguration` while classes which\n"
"correspond to the `BOOTSTRAP` configuration may end with `BootstrapConfig` or `BootstrapConfiguration`."
msgstr ""

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Configuration Reference Documentation"
msgstr "配置参考文件"

#: _guides/writing-extensions.adoc
msgid ""
"The configuration is an important part of each extension and therefore needs to be properly documented. Each\n"
"configuration property should have a proper Javadoc comment."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"While it is handy to have the documentation available when coding, the configuration documentation must also be\n"
"available in the extension guides. The Quarkus build automatically generates the configuration documentation based on\n"
"the Javadoc comments, but it needs to be explicitly included in each guide."
msgstr ""

#. type: Title =====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Writing the documentation"
msgstr "编写文件"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Each configuration property, requires a Javadoc explaining its purpose."
msgstr "对于每个配置属性，你需要写一些Javadoc来解释其用途。"

#. type: delimited block =
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "The first sentence should be meaningful and self-contained as it is included in the summary table."
msgstr "始终使第一句话有意义，并自成一体，因为它包含在汇总表中。"

#: _guides/writing-extensions.adoc
msgid ""
"While standard Javadoc comments are perfectly fine for simple documentation (recommended even), AsciiDoc is more\n"
"suitable for tips, source code extracts, lists and more:"
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"To use AsciiDoc, the Javadoc comment must be annotated with `@asciidoclet` tag. This tag serves two purposes: it is\n"
"used as a marker for Quarkus generation tool, but it is also used by the `javadoc` process for the Javadoc generation."
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "A more detailed example:"
msgstr "一个更详细的例子。"

#: _guides/writing-extensions.adoc
msgid ""
"For indentation to be respected in the Javadoc comment (list items spread on multiple lines or indented\n"
"source code), the automatic Eclipse formatter must be disabled (the formatter is automatically included in the build),\n"
"with the markers `// @formatter:off`/`// @formatter:on`. These require separate comments and a mandatory space after the\n"
"`//` marker."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"Open blocks (`--`) are not supported in the AsciiDoc documentation. All the other types of blocks\n"
"(source, admonitions...) are supported."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"By default, the documentation generator will use the hyphenated field name as the key of a `java.util.Map`. Use the\n"
"`io.quarkus.runtime.annotations.ConfigDocMapKey` annotation to override the behaviour."
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "This will generate a configuration map key named `quarkus.some.\"cache-name\"` instead of `quarkus.some.\"namespace\"`."
msgstr "这将产生一个名为 `quarkus.some.\"cache-name\"` 的配置映射键，而不是 `quarkus.some.\"namespace\"` 。"

#. type: Plain text
#: _guides/writing-extensions.adoc
msgid "It is possible to write a textual explanation for the documentation default value, this is useful when it is generated: `@ConfigDocDefault(\"explain how this is generated\")`."
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
msgid "`@ConfigDocEnumValue` gives a way to explicitly customize the string displayed in the documentation when listing accepted values for an enum."
msgstr ""

#. type: Title =====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Writing section documentation"
msgstr "编写章节文件"

#. type: delimited block =
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "To generate a configuration section of a given group, use the `@ConfigDocSection` annotation:"
msgstr "如果你希望生成一个给定的 `@ConfigGroup` 的配置部分，Quarkus已经用 `@ConfigDocSection` 注释为你提供了保障。请看下面的代码例子。"

#: _guides/writing-extensions.adoc
msgid ""
"This will add a section documentation for the `configGroup` config item in the generated documentation. The section\n"
"title and introduction will be derived from the javadoc of the configuration item. The first sentence from the javadoc\n"
"is considered as the section title and the remaining sentences used as section introduction."
msgstr ""

#. type: Title =====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Generating the documentation"
msgstr "生成文件"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "To generate the documentation:"
msgstr "生成文件"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Execute `./mvnw -DquicklyDocs`"
msgstr "执行 `./mvnw -DquicklyDocs` "

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Can be executed globally or in a specific extension directory (e.g. `extensions/mailer`)."
msgstr "你可以在全局范围内进行，也可以在特定的扩展目录下进行（例如： `extensions/mailer` ）。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "The documentation is generated in the global `target/asciidoc/generated/config/` located at the root of the project."
msgstr "文档是在位于项目根部的全局 `target/asciidoc/generated/config/` 。"

#. type: Title =====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Including the documentation in the extension guide"
msgstr "包括扩展指南中的文件"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "To include the generated configuration reference documentation in a guide, use:"
msgstr "这很简单，在你的指南中包括生成的文档。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "To include only a specific config group:"
msgstr "要只包括一个特定的配置组。"

#: _guides/writing-extensions.adoc
msgid ""
"For example, the `io.quarkus.vertx.http.runtime.FormAuthConfig` configuration group will be generated in a file named\n"
"`quarkus-vertx-http-config-group-form-auth-config.adoc`."
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "A few recommendations:"
msgstr "一些建议。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "`opts=optional` is mandatory to not fail the build if only part of the configuration documentation has been generated."
msgstr " `opts=optional` 是强制性的，因为我们不希望在只生成部分配置文档的情况下构建失败。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "The documentation is generated with a title level of 2 (i.e. `==`). It may need an adjustment with `leveloffset=+N`."
msgstr "文件生成时的标题级别为2（即 `==` ）。你通常需要调整它。它可以用 `leveloffset=+N` 。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "The whole configuration documentation should not be included in the middle of the guide."
msgstr "整个配置文件不应包括在指南的中间。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "If the guide includes an `application.properties` example, a tip must be included just below the code snippet:"
msgstr "如果指南中包括一个 `application.properties` 的例子，必须在代码片断的下面加上一个提示。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "And at the end of the guide, the extensive configuration documentation:"
msgstr "然后，在你的文件的最后，包括广泛的文件。"

#. type: delimited block =
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "All documentation should be generated and validated before being committed."
msgstr "所有的文件都应该在提交之前生成和验证。"

#. type: Title ===
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Conditional Step Inclusion"
msgstr "有条件的阶梯式包容"

#: _guides/writing-extensions.adoc
msgid ""
"It is possible to only include a given `@BuildStep` under certain conditions.  The `@BuildStep` annotation\n"
"has two optional parameters: `onlyIf` and `onlyIfNot`.  These parameters can be set to one or more classes\n"
"which implement `BooleanSupplier`.  The build step will only be included when the method returns\n"
"`true` (for `onlyIf`) or `false` (for `onlyIfNot`)."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"The condition class can inject xref:configuration[configuration mappings] as long as they belong to\n"
"a build-time phase.  Run time configuration is not available for condition classes."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"The condition class may also inject a value of type `io.quarkus.runtime.LaunchMode`.\n"
"Constructor parameter and field injection is supported."
msgstr ""

#. type: Block title
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "An example of a conditional build step"
msgstr "一个有条件的构建步骤的例子"

#: _guides/writing-extensions.adoc
msgid ""
"If you need to make your build step conditional on the presence or absence of another extension, you can\n"
"use xref:capabilities[Capabilities] for that."
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "You can also apply a set of conditions to all build steps in a given class with `@BuildSteps`:"
msgstr "你也可以用 `@BuildSteps` ，将一组条件应用于一个给定类中的所有构建步骤。"

#. type: Block title
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Class-wide condition for build step with @BuildSteps"
msgstr "使用@BuildSteps的构建步骤的全类条件"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "This condition will apply to all methods defined in `MyDevModeProcessor`"
msgstr "这个条件将适用于所有定义在 `MyDevModeProcessor` "

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "The main build step will only be executed in dev mode."
msgstr "主构建步骤将只在开发模式下执行。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "The other build step will only be executed in dev mode."
msgstr "另一个构建步骤将只在开发模式下执行。"

#. type: Title ===
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Bytecode Recording"
msgstr "字节码记录"

#: _guides/writing-extensions.adoc
msgid ""
"One of the main outputs of the build process is recorded bytecode. This bytecode actually sets up the runtime environment. For example, in order to start Undertow, the resulting application will have some bytecode that directly registers all\n"
"Servlet instances and then starts Undertow."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"As writing bytecode directly is complex, this is instead done via bytecode recorders. At deployment time,\n"
"invocations are made on recorder objects that contain the actual runtime logic, but instead of these invocations\n"
"proceeding as normal they are intercepted and recorded (hence the name). This recording is then used to generate bytecode\n"
"that performs the same sequence of invocations at runtime. This is essentially a form of deferred execution where invocations\n"
"made at deployment time get deferred until runtime."
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Let's look at the classic 'Hello World' type example. To do this the Quarkus way we would create a recorder as follows:"
msgstr "让我们看一下经典的 \"Hello World \"类型的例子。用Quarkus的方式来做，我们将创建一个记录器，如下所示。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "And then create a build step that uses this recorder:"
msgstr "然后创建一个使用这个记录器的构建步骤。"

#: _guides/writing-extensions.adoc
msgid ""
"When this build step is run nothing is printed to the console. This is because the `HelloRecorder` that is injected is\n"
"actually a proxy that records all invocations. Instead, if we run the resulting Quarkus program we will see 'Hello World'\n"
"printed to the console."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"Methods on a recorder can return a value, which must be proxiable (if you want to return a non-proxiable item wrap it\n"
"in `io.quarkus.runtime.RuntimeValue`). These proxies may not be invoked directly, however they can be passed\n"
"into other recorder methods. This can be any recorder method, including from other `@BuildStep` methods, so a common pattern\n"
"is to produce `BuildItem` instances that wrap the results of these recorder invocations."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"For instance, in order to make arbitrary changes to a Servlet deployment Undertow has a `ServletExtensionBuildItem`,\n"
"which is a `MultiBuildItem` that wraps a `ServletExtension` instance. I can return a `ServletExtension` from a recorder\n"
"in another module, and Undertow will consume it and pass it into the recorder method that starts Undertow."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"At runtime the bytecode will be invoked in the order it is generated. This means that build step dependencies implicitly\n"
"control the order that generated bytecode is run. In the example above we know that the bytecode that produces a\n"
"`ServletExtensionBuildItem` will be run before the bytecode that consumes it."
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "The following objects can be passed to recorders:"
msgstr "以下对象可以被传递给记录者。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Primitives"
msgstr "基本原理"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "String"
msgstr "字符串"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Class<?> objects"
msgstr "类<?>对象"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Objects returned from a previous recorder invocation"
msgstr "从以前的记录器调用中返回的对象"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Objects with a no-arg constructor and getter/setters for all properties (or public fields)"
msgstr "具有无参数构造函数和所有属性（或公共字段）的getter/setters的对象"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Objects with a constructor annotated with `@RecordableConstructor` with parameter names that match field names"
msgstr "具有构造函数注释的对象， `@RecordableConstructor` ，参数名称与字段名称相匹配"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Any arbitrary object via the `io.quarkus.deployment.recording.RecorderContext#registerSubstitution(Class, Class, Class)` mechanism"
msgstr "通过 `io.quarkus.deployment.recording.RecorderContext#registerSubstitution(Class, Class, Class)` 机制，任何任意的对象"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Arrays, Lists and Maps of the above"
msgstr "上述的数组、列表和地图"

#. type: delimited block =
#: _guides/writing-extensions.adoc
msgid "In cases where some fields of an object to be recorded should be ignored (i.e. the value that being at build time should not be reflected at runtime), the `@IgnoreProperty` can be placed on the field."
msgstr ""

#. type: delimited block =
#: _guides/writing-extensions.adoc
msgid "If the class cannot depend on Quarkus, then Quarkus can use any custom annotation, as long as the extension implements the `io.quarkus.deployment.recording.RecordingAnnotationsProvider` SPI."
msgstr ""

#. type: delimited block =
#: _guides/writing-extensions.adoc
msgid "This same SPI can also be used to provide a custom annotation that will substitute for `@RecordableConstructor`."
msgstr ""

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Injecting Configuration into Recorders"
msgstr "将配置注入记录器中"

#: _guides/writing-extensions.adoc
msgid ""
"Configuration objects with phase `RUNTIME` or `BUILD_AND_RUNTIME_FIXED` can be injected into recorders via constructor\n"
"injection. Just create a constructor that takes the configuration objects the recorder needs. If the recorder has multiple\n"
"constructors you can annotate the one you want Quarkus to use with `@Inject`. If the recorder wants to inject runtime config\n"
"but is also used at static init time then it needs to inject a `RuntimeValue<ConfigObject>`, this value will only be set\n"
"when the runtime methods are being invoked."
msgstr ""

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "RecorderContext"
msgstr "录音机上下文"

#: _guides/writing-extensions.adoc
msgid ""
"`io.quarkus.deployment.recording.RecorderContext` provides some convenience methods to enhance bytecode recording,\n"
"this includes the ability to register creation functions for classes without no-arg constructors, to register an object\n"
"substitution (basically a transformer from a non-serializable object to a serializable one and vice versa), and to create\n"
"a class proxy. This interface can be directly injected as a method parameter into any `@Record` method."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"Calling `classProxy` with a given fully-qualified class name will create a `Class` instance that can be passed into a recorder\n"
"method, and at runtime will be substituted with the class whose name was passed in to `classProxy()`.\n"
"However, this method should not be needed in most use cases because directly loading deployment/application classes at processing time in build steps is safe.\n"
"Therefore, this method is deprecated.\n"
"Nonetheless, there are some use cases where this method comes in handy, such as referring to classes that were generated in previous build steps using `GeneratedClassBuildItem`."
msgstr ""

#. type: Title ====
#: _guides/writing-extensions.adoc
#, no-wrap
msgid "Runtime Classpath check"
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"Extensions often need a way to determine whether a given class is part of the application's runtime classpath.\n"
"The proper way for an extension to perform this check is to use `io.quarkus.bootstrap.classloading.QuarkusClassLoader.isClassPresentAtRuntime`."
msgstr ""

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Printing step execution time"
msgstr "印刷步骤的执行时间"

#: _guides/writing-extensions.adoc
msgid ""
"At times, it can be useful to know how the exact time each startup task (which is the result of each bytecode recording) takes when the application is run.\n"
"The simplest way to determine this information is to launch the Quarkus application with the `-Dquarkus.debug.print-startup-times=true` system property.\n"
"The output will look something like:"
msgstr ""

#. TODO: config integration
#. type: Title ===
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Contexts and Dependency Injection"
msgstr "上下文和依赖性注入"

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Extension Points"
msgstr "扩展点"

#: _guides/writing-extensions.adoc
msgid ""
"As a CDI based runtime, Quarkus extensions often make CDI beans available as part of the extension behavior.\n"
"However, Quarkus DI solution does not support CDI Portable Extensions.\n"
"Instead, Quarkus extensions can make use of various xref:cdi-reference.adoc[Build Time Extension Points]."
msgstr ""

#. type: Title ===
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Quarkus Dev UI"
msgstr "Quarkus Dev UI"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "You can make your extension support the xref:dev-ui-v2.adoc[Quarkus Dev UI] for a greater developer experience."
msgstr "你可以让你的扩展支持 link:dev-ui.html[Quarkus Dev UI] ，以获得更多的开发者体验。"

#. type: Title ===
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Extension-defined endpoints"
msgstr "扩展定义的端点"

#: _guides/writing-extensions.adoc
msgid ""
"Your extension can add additional, non-application endpoints to be served alongside endpoints\n"
"for Health, Metrics, OpenAPI, Swagger UI, etc."
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Use a `NonApplicationRootPathBuildItem` to define an endpoint:"
msgstr "使用 `NonApplicationRootPathBuildItem` 来定义一个端点。"

#: _guides/writing-extensions.adoc
msgid ""
"Note that the path above does not start with a '/', indicating it is a relative path. The above\n"
"endpoint will be served relative to the configured non-application endpoint root. The non-application\n"
"endpoint root is `/q` by default, which means the resulting endpoint will be found at `/q/custom-endpoint`."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"Absolute paths are handled differently. If the above called `route(\"/custom-endpoint\")`, the resulting\n"
"endpoint will be found at `/custom-endpoint`."
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "If an extension needs nested non-application endpoints:"
msgstr "如果一个扩展需要嵌套的非应用端点。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Given a default non-application endpoint root of `/q`, this will create an endpoint at `/q/custom-endpoint/deep`."
msgstr "给定一个默认的非应用端点根 `/q` ，这将创建一个端点在 `/q/custom-endpoint/deep` 。"

#: _guides/writing-extensions.adoc
msgid ""
"Absolute paths also have an impact on nested endpoints. If the above called `nestedRoute(\"custom-endpoint\", \"/deep\")`,\n"
"the resulting endpoint will be found at `/deep`."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"Refer to the xref:all-config.adoc#quarkus-vertx-http_quarkus.http.non-application-root-path[Quarkus Vertx HTTP configuration reference]\n"
"for details on how the non-application root path is configured."
msgstr ""

#. type: Title ===
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Extension Health Check"
msgstr "延期健康检查"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Health checks are provided via the `quarkus-smallrye-health` extension. It provides both liveness and readiness checks capabilities."
msgstr "健康检查是通过 `quarkus-smallrye-health` 扩展提供的。它同时提供有效性和准备性检查功能。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "When writing an extension, it's beneficial to provide health checks for the extension, that can be automatically included without the developer needing to write their own."
msgstr "在编写扩展时，为扩展提供健康检查是有益的，它可以自动包含，而不需要开发人员自己编写。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "In order to provide a health check, you should do the following:"
msgstr "为了提供健康检查，你应该做到以下几点。"

#: _guides/writing-extensions.adoc
msgid ""
"Import the `quarkus-smallrye-health` extension as an **optional** dependency in your runtime module so it will not impact the size of the application if\n"
"health check is not included."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"Create your health check following the xref:smallrye-health.adoc[SmallRye Health] guide. We advise providing only\n"
"readiness check for an extension (liveness check is designed to express the fact that an application is up and needs to be lightweight)."
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Import the `quarkus-smallrye-health-spi` library in your deployment module."
msgstr "在你的部署模块中导入 `quarkus-smallrye-health-spi` 库。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Add a build step in your deployment module that produces a `HealthBuildItem`."
msgstr "在你的部署模块中添加一个构建步骤，产生一个 `HealthBuildItem` 。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Add a way to disable the extension health check via a config item `quarkus.<extension>.health.enabled` that should be enabled by default."
msgstr "增加一个通过配置项禁用扩展健康检查的方法 `quarkus.<extension>.health.enabled` ，默认情况下应该是启用的。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Following is an example from the Agroal extension that provides a `DataSourceHealthCheck` to validate the readiness of a datasource."
msgstr "以下是Agroal扩展的一个例子，它提供了一个 `DataSourceHealthCheck` ，以验证数据源的准备情况。"

#. type: Title ===
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Extension Metrics"
msgstr "扩展指标"

#: _guides/writing-extensions.adoc
msgid ""
"The `quarkus-micrometer` extension and the `quarkus-smallrye-metrics` extension provide support for collecting metrics.\n"
"As a compatibility note, the `quarkus-micrometer` extension adapts the MP Metrics API to Micrometer library primitives, so the `quarkus-micrometer` extension can be enabled without breaking code that relies on the MP Metrics API.\n"
"Note that the metrics emitted by Micrometer are different, see the `quarkus-micrometer` extension documentation for more information."
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "The compatibility layer for MP Metrics APIs will move to a different extension in the future."
msgstr "MP Metrics APIs的兼容层将来会转移到一个不同的扩展。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "There are two broad patterns that extensions can use to interact with an optional metrics extension to add their own metrics:"
msgstr "有两种广泛的模式，扩展可以用来与可选的度量衡扩展互动，以添加他们自己的度量衡。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Consumer pattern: An extension declares a `MetricsFactoryConsumerBuildItem` and uses that to provide a bytecode recorder to the metrics extension. When the metrics extension has initialized, it will iterate over registered consumers to initialize them with a `MetricsFactory`. This factory can be used to declare API-agnostic metrics, which can be a good fit for extensions that provide an instrumentable object for gathering statistics (e.g. Hibernate's `Statistics` class)."
msgstr "消费者模式。一个扩展声明了一个 `MetricsFactoryConsumerBuildItem` ，并使用它来为度量衡扩展提供一个字节码记录器。当度量衡扩展初始化后，它将遍历已注册的消费者，用一个 `MetricsFactory` 来初始化它们。这个工厂可以用来声明与API无关的度量衡，这可以很好地适用于为收集统计数据提供一个可测量对象的扩展（例如Hibernate?s `Statistics` 类）。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Binder pattern: An extension can opt to use completely different gathering implementations depending on the metrics system. An `Optional<MetricsCapabilityBuildItem> metricsCapability` build step parameter can be used to declare or otherwise initialize API-specific metrics based on the active metrics extension (e.g. \"smallrye-metrics\" or \"micrometer\"). This pattern can be combined with the consumer pattern by using `MetricsFactory::metricsSystemSupported()` to test the active metrics extension within the recorder."
msgstr "捆绑模式。一个扩展可以根据度量系统选择使用完全不同的收集实现。一个 `Optional<MetricsCapabilityBuildItem> metricsCapability` build step参数可以用来声明或以其他方式初始化基于活动度量衡扩展的API特定度量衡（例如 \"smallrye-metrics \"或 \"micrometer\"）。这种模式可以通过使用 `MetricsFactory::metricsSystemSupported()` ，与消费者模式相结合，在记录器中测试活动度量衡扩展。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Remember that support for metrics is optional. Extensions can use an `Optional<MetricsCapabilityBuildItem> metricsCapability` parameter in their build step to test for the presence of an enabled metrics extension. Consider using additional configuration to control behavior of metrics. Datasource metrics can be expensive, for example, so additional configuration flags are used enable metrics collection on individual datasources."
msgstr "记住，对度量的支持是可选的。扩展可以在其构建步骤中使用 `Optional<MetricsCapabilityBuildItem> metricsCapability` 参数来测试是否存在已启用的度量衡扩展。考虑使用额外的配置来控制度量的行为。例如，数据源度量可能是昂贵的，所以使用额外的配置标志来实现对单个数据源的度量收集。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "When adding metrics for your extension, you may find yourself in one of the following situations:"
msgstr "当为你的扩展添加指标时，你可能发现自己处于以下情况之一。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "An underlying library used by the extension is using a specific Metrics API directly (either MP Metrics, Micrometer, or some other)."
msgstr "扩展使用的底层库直接使用特定的Metrics API（MP Metrics、Micrometer或其他）。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "An underlying library uses its own mechanism for collecting metrics and makes them available at runtime using its own API, e.g. Hibernate's `Statistics` class, or Vert.x `MetricsOptions`."
msgstr "一个底层库使用它自己的机制来收集指标，并在运行时使用它自己的API来提供这些指标，例如Hibernate的 `Statistics` 类，或Vert.x `MetricsOptions` 。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "An underlying library does not provide metrics (or there is no library at all) and you want to add instrumentation."
msgstr "一个底层库不提供指标（或者根本就没有库），而你想添加仪器。"

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Case 1: The library uses a metrics library directly"
msgstr "案例1：图书馆直接使用一个度量衡库"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "If the library directly uses a metrics API, there are two options:"
msgstr "如果该库直接使用度量衡API，有两个选择。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Use an `Optional<MetricsCapabilityBuildItem> metricsCapability` parameter to test which metrics API is supported (e.g. \"smallrye-metrics\" or \"micrometer\") in your build step, and use that to selectively declare or initialize API-specific beans or build items."
msgstr "在你的构建步骤中，使用 `Optional<MetricsCapabilityBuildItem> metricsCapability` 参数来测试哪个度量衡API被支持（例如 \"smallrye-metrics \"或 \"micrometer\"），并使用它来选择性地声明或初始化API特定的bean或构建项目。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Create a separate build step that consumes a `MetricsFactory`, and use the `MetricsFactory::metricsSystemSupported()` method within the bytecode recorder to initialize required resources if the desired metrics API is supported (e.g. \"smallrye-metrics\" or \"micrometer\")."
msgstr "创建一个单独的构建步骤，消耗一个 `MetricsFactory` ，如果支持所需的度量API（如 \"smallrye-metrics \"或 \"micrometer\"），则使用字节码记录器中的 `MetricsFactory::metricsSystemSupported()` 方法来初始化所需资源。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Extensions may need to provide a fallback if there is no active metrics extension or the extension doesn't support the API required by the library."
msgstr "如果没有活动的度量衡扩展，或者扩展不支持库所要求的API，扩展可能需要提供一个回退。"

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Case 2: The library provides its own metric API"
msgstr "案例2：库提供自己的度量衡API"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "There are two examples of a library providing its own metrics API:"
msgstr "有两个例子是一个库提供自己的度量衡API。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "The extension defines an instrumentable object as Agroal does with `io.agroal.api.AgroalDataSourceMetrics`, or"
msgstr "该扩展定义了一个工具化的对象，就像Agroal用 `io.agroal.api.AgroalDataSourceMetrics` ，或"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "The extension provides its own abstraction of metrics, as Jaeger does with `io.jaegertracing.spi.MetricsFactory`."
msgstr "该扩展提供了自己的度量衡抽象，正如Jaeger对 `io.jaegertracing.spi.MetricsFactory` 。"

#. type: Title =====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Observing instrumentable objects"
msgstr "观察可测量的物体"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Let's take the instrumentable object (`io.agroal.api.AgroalDataSourceMetrics`) case first. In this case, you can do the following:"
msgstr "让我们先来看看可被记录的对象( `io.agroal.api.AgroalDataSourceMetrics` )的情况。在这种情况下，你可以做以下工作。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Define a `BuildStep` that produces a `MetricsFactoryConsumerBuildItem` that uses a `RUNTIME_INIT` or `STATIC_INIT` Recorder to define a `MetricsFactory` consumer. For example, the following creates a `MetricsFactoryConsumerBuildItem` if and only if metrics are enabled both for Agroal generally, and for a datasource specifically:"
msgstr "定义一个 `BuildStep` ，产生一个 `MetricsFactoryConsumerBuildItem` ，使用一个 `RUNTIME_INIT` 或 `STATIC_INIT` 记录器来定义一个 `MetricsFactory` 消费者。例如，下面创建了一个 `MetricsFactoryConsumerBuildItem` ，当且仅当Agroal总体上启用了度量标准，以及具体的数据源的度量标准。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "The associated recorder should use the provided `MetricsFactory` to register metrics. For Agroal, this means using the `MetricFactory` API to observe `io.agroal.api.AgroalDataSourceMetrics` methods. For example:"
msgstr "相关的记录器应该使用所提供的 `MetricsFactory` 来注册度量。对于Agroal，这意味着使用 `MetricFactory` API来观察 `io.agroal.api.AgroalDataSourceMetrics` 方法。比如说。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "The `MetricsFactory` provides a fluid builder for registration of metrics, with the final step constructing gauges or counters based on a `Supplier` or `ToDoubleFunction`. Timers can either wrap `Callable`, `Runnable`, or `Supplier` implementations, or can use a `TimeRecorder` to accumulate chunks of time. The underlying metrics extension will create appropriate artifacts to observe or measure the defined functions."
msgstr " `MetricsFactory` 提供了一个用于注册度量衡的流体构建器，最后一步是基于 `Supplier` 或 `ToDoubleFunction` 构建仪表或计数器。计时器可以包裹 `Callable` 、 `Runnable` 或 `Supplier` 的实现，或者可以使用 `TimeRecorder` 来积累时间块。底层的度量衡扩展将创建适当的工件来观察或测量定义的功能。"

#. type: Title =====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Using a Metrics API-specific implementation"
msgstr "使用特定的度量衡API实现"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Using metrics-API specific implementations may be preferred in some cases. Jaeger, for example, defines its own metrics interface, `io.jaegertracing.spi.MetricsFactory`, that it uses to define counters and gauges. A direct mapping from that interface to the metrics system will be the most efficient. In this case, it is important to isolate these specialized implementations and to avoid eager classloading to ensure the metrics API remains an optional, compile-time dependency."
msgstr "在某些情况下，使用度量衡-API的具体实现可能是首选。例如，Jaeger定义了它自己的度量衡接口， `io.jaegertracing.spi.MetricsFactory` ，它用来定义计数器和仪表。从该接口直接映射到度量系统将是最有效的。在这种情况下，重要的是隔离这些专门的实现，并避免急切的类加载，以确保度量API仍然是一个可选的、编译时的依赖。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "`Optional<MetricsCapabilityBuildItem> metricsCapability` can be used in the build step to selectively control initialization of beans or the production of other build items. The Jaeger extension, for example, can use the following to control initialization of specialized Metrics API adapters:"
msgstr " `Optional<MetricsCapabilityBuildItem> metricsCapability` 可以在构建步骤中使用，以选择性地控制豆的初始化或其他构建项目的产生。例如，Jaeger扩展可以使用以下方法来控制专门的Metrics API适配器的初始化。"

#: _guides/writing-extensions.adoc
msgid "+"
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "A recorder consuming a `MetricsFactory` can use `MetricsFactory::metricsSystemSupported()` can be used to control initialization of metrics objects during bytecode recording in a similar way."
msgstr "消费 `MetricsFactory` 的记录器可以使用 `MetricsFactory::metricsSystemSupported()` ，可以用类似的方式在字节码记录期间控制度量对象的初始化。"

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Case 3: It is necessary to collect metrics within the extension code"
msgstr "案例3：有必要在扩展代码内收集指标"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "To define your own metrics from scratch, you have two basic options: Use the generic `MetricFactory` builders, or follow the binder pattern, and create instrumentation specific to the enabled metrics extension."
msgstr "要从头开始定义你自己的度量，你有两个基本选择。使用通用的 `MetricFactory` 构建器，或者遵循捆绑模式，并为启用的度量衡扩展创建特定的仪器。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "To use the extension-agnostic `MetricFactory` API, your processor can define a `BuildStep` that produces a `MetricsFactoryConsumerBuildItem` that uses a `RUNTIME_INIT` or `STATIC_INIT` Recorder to define a `MetricsFactory` consumer."
msgstr "要使用扩展无关的 `MetricFactory` API，你的处理器可以定义一个 `BuildStep` ，产生一个 `MetricsFactoryConsumerBuildItem` ，使用 `RUNTIME_INIT` 或 `STATIC_INIT` 记录器来定义一个 `MetricsFactory` 消费者。"

#: _guides/writing-extensions.adoc
msgid ""
"+\n"
"- The associated recorder should use the provided `MetricsFactory` to register metrics, for example"
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Remember that metrics extensions are optional. Keep metrics-related initialization isolated from other setup for your extension, and structure your code to avoid eager imports of metrics APIs. Gathering metrics can also be expensive. Consider using additional extension-specific configuration to control behavior of metrics if the presence/absence of metrics support isn't sufficient."
msgstr "记住，度量衡扩展是可选的。将度量相关的初始化与你的扩展的其他设置隔离开来，并构建你的代码以避免急于导入度量API。收集度量标准也可能是昂贵的。如果有/没有度量衡支持还不够，可以考虑使用额外的扩展特定配置来控制度量衡的行为。"

#. type: Title ===
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Customizing JSON handling from an extension"
msgstr "从一个扩展中定制JSON处理"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Extensions often need to register serializers and/or deserializers for types the extension provides."
msgstr "扩展经常需要为扩展提供的类型注册序列化器和/或反序列化器。"

#: _guides/writing-extensions.adoc
msgid ""
"For this, both Jackson and JSON-B extensions provide a way to register serializer/deserializer from within an\n"
"extension deployment module."
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Keep in mind that not everybody will need JSON, so you need to make it optional."
msgstr "请记住，不是每个人都需要JSON，所以你需要让它成为可选项。"

#: _guides/writing-extensions.adoc
msgid ""
"If an extension intends to provide JSON related customization,\n"
"it is strongly advised to provide customization for both Jackson and JSON-B."
msgstr ""

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Customizing Jackson"
msgstr "定制杰克逊"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "First, add an *optional* dependency to `quarkus-jackson` on your extension's runtime module."
msgstr "首先，在你的扩展的运行时模块上添加一个 *可选的* 依赖关系到 `quarkus-jackson` 。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Then create a serializer or a deserializer (or both) for Jackson, an example of which can be seen in the `mongodb-panache` extension."
msgstr "然后为Jackson创建一个序列化器或反序列化器（或两者），其中的一个例子可以在 `mongodb-panache` 扩展中看到。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Add a dependency to `quarkus-jackson-spi` on your extension's deployment module."
msgstr "在你的扩展的部署模块上添加一个依赖性到 `quarkus-jackson-spi` 。"

#: _guides/writing-extensions.adoc
msgid ""
"Add a build step to your processor to register a Jackson module via the `JacksonModuleBuildItem`.\n"
"You need to name your module in a unique way across all Jackson modules."
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "The Jackson extension will then use the produced build item to register a module within Jackson automatically."
msgstr "然后，Jackson扩展将使用产生的构建项，在Jackson中自动注册一个模块。"

#: _guides/writing-extensions.adoc
msgid ""
"If you need more customization capabilities than registering a module,\n"
"you can produce a CDI bean that implements `io.quarkus.jackson.ObjectMapperCustomizer` via an `AdditionalBeanBuildItem`.\n"
"More info about customizing Jackson can be found on the JSON guide xref:rest-json.adoc#json[Configuring JSON support]"
msgstr ""

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Customizing JSON-B"
msgstr "定制JSON-B"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "First, add an *optional* dependency to `quarkus-jsonb` on your extension's runtime module."
msgstr "首先，在你的扩展的运行时模块上添加一个 *可选的* 依赖关系到 `quarkus-jsonb` 。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Then create a serializer and/or a deserializer for JSON-B, an example of which can be seen in the `mongodb-panache` extension."
msgstr "然后为JSON-B创建一个序列化器和/或反序列化器，其中的一个例子可以在 `mongodb-panache` 扩展中看到。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Add a dependency to `quarkus-jsonb-spi` on your extension's deployment module."
msgstr "在你的扩展的部署模块上添加一个依赖性到 `quarkus-jsonb-spi` 。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Add a build step to your processor to register the serializer via the `JsonbSerializerBuildItem`."
msgstr "在你的处理器中添加一个构建步骤，通过 `JsonbSerializerBuildItem` .NET来注册序列化器。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "The JSON-B extension will then use the produced build item to register your serializer/deserializer automatically."
msgstr "然后JSON-B扩展将使用产生的构建项来自动注册你的序列化器/反序列化器。"

#: _guides/writing-extensions.adoc
msgid ""
"If you need more customization capabilities than registering a serializer or a deserializer,\n"
"you can produce a CDI bean that implements `io.quarkus.jsonb.JsonbConfigCustomizer` via an `AdditionalBeanBuildItem`.\n"
"More info about customizing JSON-B can be found on the JSON guide xref:rest-json.adoc#configuring-json-support[Configuring JSON support]"
msgstr ""

#. type: Title ===
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Integrating with Development Mode"
msgstr "与开发模式的整合"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "There are various APIS that you can use to integrate with development mode, and to get information about the current state."
msgstr "有各种APIS，你可以用来与开发模式整合，并获得关于当前状态的信息。"

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Handling restarts"
msgstr "处理重新启动"

#: _guides/writing-extensions.adoc
msgid ""
"When Quarkus is starting the `io.quarkus.deployment.builditem.LiveReloadBuildItem` is guaranteed to be present that gives\n"
"information about this start, in particular:"
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Is this a clean start or a live reload"
msgstr "这是一个干净的开始还是一个活的重装"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "If this is a live reload which changed files / classes triggered the reload"
msgstr "如果这是一个实时重载，其中改变的文件/类触发了重载。"

#: _guides/writing-extensions.adoc
msgid ""
"It also provides a global context map you can use to store information between restarts, without needing to resort to\n"
"static fields."
msgstr ""

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Triggering Live Reload"
msgstr "触发实时重新加载"

#: _guides/writing-extensions.adoc
msgid ""
"Live reload is generally triggered by an HTTP request, however not all applications are HTTP applications and some extensions\n"
"may want to trigger live reload based on other events. To do this you need to implement `io.quarkus.dev.spi.HotReplacementSetup`\n"
"in your runtime module, and add a `META-INF/services/io.quarkus.dev.spi.HotReplacementSetup` that lists your implementation."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"On startup the `setupHotDeployment` method will be called, and you can use the provided `io.quarkus.dev.spi.HotReplacementContext`\n"
"to initiate a scan for changed files."
msgstr ""

#. type: Title ===
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Testing Extensions"
msgstr "测试扩展"

#: _guides/writing-extensions.adoc
msgid ""
"Testing of Quarkus extensions should be done with the `io.quarkus.test.QuarkusUnitTest` JUnit 5 extension.\n"
"This extension allows for Arquillian-style tests that test specific functionalities.\n"
"It is not intended for testing user applications, as this should be done via `io.quarkus.test.junit.QuarkusTest`.\n"
"The main difference is that `QuarkusTest` simply boots the application once at the start of the run, while `QuarkusUnitTest` deploys a custom\n"
"Quarkus application for each test class."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"These tests should be placed in the deployment module, if additional Quarkus modules are required for testing\n"
"their deployment modules should also be added as test scoped dependencies."
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Note that `QuarkusUnitTest` is in the `quarkus-junit5-internal` module."
msgstr "请注意， `QuarkusUnitTest` 是在 `quarkus-junit5-internal` 模块中。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "An example test class may look like:"
msgstr "一个测试类的例子可能看起来像。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "The `QuarkusUnitTest` extension must be used with a static field. If used with a non-static field, the test application is not started."
msgstr " `QuarkusUnitTest` 扩展必须与一个静态字段一起使用。如果与非静态字段一起使用，测试应用程序就不会启动。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "This producer is used to build the application to be tested. It uses Shrinkwrap to create a JavaArchive to test"
msgstr "这个生产者被用来建立要测试的应用程序。它使用Shrinkwrap来创建一个JavaArchive来测试"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "It is possible to inject beans from our test deployment directly into the test case"
msgstr "可以将我们的测试部署中的Bean直接注入到测试案例中。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "This method directly invokes the health check Servlet and verifies the response"
msgstr "这个方法直接调用健康检查Servlet，并验证响应。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "This method uses the injected health check bean to verify it is returning the expected result"
msgstr "这个方法使用注入的健康检查豆来验证它是否返回预期的结果"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "If you want to test that an extension properly fails at build time, use the `setExpectedException` method:"
msgstr "如果你想测试一个扩展在构建时是否正确失败，请使用 `setExpectedException` 方法。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "This tells JUnit that the Quarkus deployment should fail with a specific exception"
msgstr "这告诉JUnit，Quarkus的部署应该以一个特定的异常失败。"

#. type: Title ===
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Testing hot reload"
msgstr "测试热重装"

#: _guides/writing-extensions.adoc
msgid ""
"It is also possible to write tests that verify an extension works correctly in development mode and can correctly\n"
"handle updates."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"For most extensions this will just work 'out of the box', however it is still a good idea to have a smoke test to\n"
"verify that this functionality is working as expected. To test this we use `QuarkusDevModeTest`:"
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"This starts the deployment, your test can modify it as part of the test suite. Quarkus will be restarted between\n"
"each test method so every method starts with a clean deployment."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"This method allows you to modify the source of a class file. The old source is passed into the function, and the updated\n"
"source is returned."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"This method adds a new class file to the deployment. The source that is used will be the original source that is part\n"
"of the current project."
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "This method modifies a static resource"
msgstr "该方法修改了一个静态资源"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "This method adds a new static resource"
msgstr "这个方法添加了一个新的静态资源"

#. type: Title ===
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Native Executable Support"
msgstr "本地可执行文件支持"

#: _guides/writing-extensions.adoc
msgid ""
"There Quarkus provides a lot of build items that control aspects of the native executable build. This allows for extensions\n"
"to programmatically perform tasks such as registering classes for reflection or adding static resources to the native\n"
"executable. Some of these build items are listed below:"
msgstr ""

#. type: Labeled list
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "`io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBuildItem`"
msgstr " `io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBuildItem` "

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Includes static resources into the native executable."
msgstr "将静态资源纳入本地可执行文件。"

#. type: Labeled list
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "`io.quarkus.deployment.builditem.nativeimage.NativeImageResourceDirectoryBuildItem`"
msgstr " `io.quarkus.deployment.builditem.nativeimage.NativeImageResourceDirectoryBuildItem` "

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Includes directory's static resources into the native executable."
msgstr "将目录的静态资源纳入本地可执行文件。"

#. type: Labeled list
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "`io.quarkus.deployment.builditem.nativeimage.RuntimeReinitializedClassBuildItem`"
msgstr " `io.quarkus.deployment.builditem.nativeimage.RuntimeReinitializedClassBuildItem` "

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "A class that will be reinitialized at runtime by Substrate. This will result in the static initializer running twice."
msgstr "一个将在运行时被Substrate重新初始化的类。这将导致静态初始化器运行两次。"

#. type: Labeled list
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "`io.quarkus.deployment.builditem.nativeimage.NativeImageSystemPropertyBuildItem`"
msgstr " `io.quarkus.deployment.builditem.nativeimage.NativeImageSystemPropertyBuildItem` "

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "A system property that will be set at native executable build time."
msgstr "一个系统属性，将在本地可执行文件构建时被设置。"

#. type: Labeled list
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "`io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBundleBuildItem`"
msgstr " `io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBundleBuildItem` "

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Includes a resource bundle in the native executable."
msgstr "在本地可执行文件中包括一个资源包。"

#. type: Labeled list
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "`io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem`"
msgstr " `io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem` "

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Registers a class for reflection in Substrate. Constructors are always registered, while methods and fields are optional."
msgstr "在 Substrate 中注册一个用于反射的类。构造函数总是被注册的，而方法和字段是可选的。"

#. type: Labeled list
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "`io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem`"
msgstr " `io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem` "

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "A class that will be initialized at runtime rather than build time. This will cause the build to fail if the class is initialized as part of the native executable build process, so care must be taken."
msgstr "一个将在运行时而非构建时被初始化的类。如果该类作为本地可执行构建过程的一部分被初始化，这将导致构建失败，所以必须小心。"

#. type: Labeled list
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "`io.quarkus.deployment.builditem.nativeimage.NativeImageConfigBuildItem`"
msgstr " `io.quarkus.deployment.builditem.nativeimage.NativeImageConfigBuildItem` "

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "A convenience feature that allows you to control most of the above features from a single build item."
msgstr "一个方便的功能，允许你从一个单一的构建项目中控制上述大部分功能。"

#. type: Labeled list
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "`io.quarkus.deployment.builditem.NativeImageEnableAllCharsetsBuildItem`"
msgstr " `io.quarkus.deployment.builditem.NativeImageEnableAllCharsetsBuildItem` "

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Indicates that all charsets should be enabled in native image."
msgstr "表示在本地图像中应启用所有字符集。"

#. type: Labeled list
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "`io.quarkus.deployment.builditem.ExtensionSslNativeSupportBuildItem`"
msgstr " `io.quarkus.deployment.builditem.ExtensionSslNativeSupportBuildItem` "

#: _guides/writing-extensions.adoc
msgid ""
"A convenient way to tell Quarkus that the extension requires SSL, and it should be enabled during native image build.\n"
"When using this feature, remember to add your extension to the list of extensions that offer SSL support automatically on the https://github.com/quarkusio/quarkus/blob/main/docs/src/main/asciidoc/native-and-ssl.adoc[native and ssl guide]."
msgstr ""

#. type: Title ===
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "IDE support tips"
msgstr "IDE支持提示"

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Writing Quarkus extensions in Eclipse"
msgstr "在Eclipse中编写Quarkus扩展"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "The only particular aspect of writing Quarkus extensions in Eclipse is that APT (Annotation Processing Tool) is required as part of extension builds, which means you need to:"
msgstr "在Eclipse中编写Quarkus扩展的唯一特殊之处在于，APT（注释处理工具）是扩展构建的一部分，这意味着你需要。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Install `m2e-apt` from https://marketplace.eclipse.org/content/m2e-apt"
msgstr "从 https://marketplace.eclipse.org/content/m2e-apt ，安装 `m2e-apt` "

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Define this property in your `pom.xml`: `<m2e.apt.activation>jdt_apt</m2e.apt.activation>`, although if you rely on `io.quarkus:quarkus-build-parent` you will get it for free."
msgstr "在你的 `pom.xml` ： `<m2e.apt.activation>jdt_apt</m2e.apt.activation>` ，定义这个属性，尽管如果你依靠 `io.quarkus:quarkus-build-parent` ，你会免费得到它。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "If you have the `io.quarkus:quarkus-extension-processor` project open at the same time in your IDE (for example, if you have the Quarkus sources checked out and open in your IDE) you will need to close that project. Otherwise, Eclipse will not invoke the APT plugin that it contains."
msgstr "如果你在你的IDE中同时打开了 `io.quarkus:quarkus-extension-processor` 项目（例如，如果你在你的IDE中签出并打开了Quarkus的源代码），你需要关闭该项目。否则，Eclipse将不会调用它所包含的APT插件。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "If you just closed the extension processor project, be sure to do `Maven > Update Project` on the other projects in order for Eclipse to pick up the extension processor from the Maven repository."
msgstr "如果你刚刚关闭了扩展处理器项目，请确保在其他项目上做 `Maven > Update Project` ，以便Eclipse从Maven仓库中获取扩展处理器。"

#. type: Title ===
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Troubleshooting / Debugging Tips"
msgstr "故障排除/调试技巧"

#. This id was previously used for the "Dump the Generated Classes to the File System" section
#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Inspecting the Generated/Transformed Classes"
msgstr "检查生成的/转换的类"

#: _guides/writing-extensions.adoc
msgid ""
"Quarkus generates a lot of classes during the build phase and in many cases also transforms existing classes.\n"
"It is often extremely useful to see the generated bytecode and transformed classes during the development of an extension."
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "If you set the `quarkus.package.vineflower.enabled` property to `true` then Quarkus will download and invoke the https://github.com/Vineflower/vineflower[Vineflower decompiler] and dump the result in the `decompiled` directory of the build tool output (`target/decompiled` for Maven for example)."
msgstr "如果你将 `quarkus.package.fernflower.enabled` 属性设置为 `true` ，那么Quarkus将下载并调用 link:https://github.com/JetBrains/intellij-community/tree/master/plugins/java-decompiler/engine[Fernflower反编译器] ，并将结果转储到构建工具输出的 `decompiled` 目录中（例如Maven的 `target/decompiled` ）。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "This property only works during a normal production build (i.e. not for dev mode/tests) and when `fast-jar` packaging type is used (the default behavior)."
msgstr "这个属性只在正常的生产构建过程中起作用（即不用于开发模式/测试），并且当使用 `fast-jar` 包装类型时（默认行为）。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "There are also three system properties that allow you to dump the generated/transformed classes to the filesystem and inspect them later, for example via a decompiler in your IDE."
msgstr "还有三个系统属性，允许你将生成/转换的类转储到文件系统中，并在以后检查它们，例如通过IDE中的反编译器。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "`quarkus.debug.generated-classes-dir` - to dump the generated classes, such as bean metadata"
msgstr " `quarkus.debug.generated-classes-dir` - 来转储生成的类，如bean元数据"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "`quarkus.debug.transformed-classes-dir` - to dump the transformed classes, e.g. Panache entities"
msgstr " `quarkus.debug.transformed-classes-dir` - 来转储转换后的类，例如Panache实体"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "`quarkus.debug.generated-sources-dir` - to dump the ZIG files; ZIG file is a textual representation of the generated code that is referenced in the stack traces"
msgstr " `quarkus.debug.generated-sources-dir` - 转储ZIG文件；ZIG文件是生成代码的文本表示，在堆栈跟踪中被引用。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "These properties are especially useful in the development mode or when running the tests where the generated/transformed classes are only held in memory in a class loader."
msgstr "这些属性在开发模式下或运行测试时特别有用，因为生成/转换的类只被保存在类加载器的内存中。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "For example, you can specify the `quarkus.debug.generated-classes-dir` system property to have these classes written out to disk for inspection in the development mode:"
msgstr "例如，你可以指定 `quarkus.debug.generated-classes-dir` 系统属性，以便在开发模式下将这些类写出到磁盘上供检查。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "The property value could be either an absolute path, such as `/home/foo/dump` on a Linux machine, or a path relative to the user working directory, i.e. `dump` corresponds to the `{user.dir}/target/dump` in the dev mode and `{user.dir}/dump` when running the tests."
msgstr "该属性值可以是一个绝对路径，如Linux机器上的 `/home/foo/dump` ，也可以是一个相对于用户工作目录的路径，即 `dump` ，对应于开发模式下的 `{user.dir}/target/dump` ，运行测试时的 `{user.dir}/dump` 。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "You should see a line in the log for each class written to the directory:"
msgstr "你应该在日志中看到每一个写到目录中的类的一行。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "The property is also honored when running tests:"
msgstr "该属性在运行测试时也会被尊重。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Analogously, you can use the `quarkus.debug.transformed-classes-dir` and `quarkus.debug.generated-sources-dir` properties to dump the relevant output."
msgstr "类似地，你可以使用 `quarkus.debug.transformed-classes-dir` 和 `quarkus.debug.transformed-classes-dir` 属性来转储相关的输出。"

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Multi-module Maven Projects and the Development Mode"
msgstr "多模块Maven项目和开发模式"

#: _guides/writing-extensions.adoc
msgid ""
"It's not uncommon to develop an extension in a multi-module Maven project that also contains an \"example\" module.\n"
"However, if you want to run the example in the development mode then the `-DnoDeps` system property must be used in order to exclude the local project dependencies.\n"
"Otherwise, Quarkus attempts to monitor the extension classes and this may result in weird class loading issues."
msgstr ""

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Indexer does not include your external dependency"
msgstr "索引器不包括你的外部依赖性"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Remember to add `IndexDependencyBuildItem` artifacts to your `@BuildStep`."
msgstr "记得在你的 `@BuildStep` ，添加 `IndexDependencyBuildItem` 工件。"

#. type: Title ===
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Sample Test Extension"
msgstr "样品测试扩展"

#: _guides/writing-extensions.adoc
msgid ""
"We have an extension that is used to test for regressions in the extension processing. It is located in {quarkus-tree-url}/integration-tests/test-extension/extension directory. In this section we touch on some tasks an extension\n"
"author will typically need to perform using the test-extension code to illustrate how the task could be done."
msgstr ""

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Features and Capabilities"
msgstr "特点和能力"

#. type: Title =====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Features"
msgstr "特点"

#: _guides/writing-extensions.adoc
msgid ""
"A _feature_ represents a functionality provided by an extension.\n"
"The name of the feature gets displayed in the log during application bootstrap."
msgstr ""

#. type: Block title
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Example Startup Lines"
msgstr "示例启动线"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "A list of features installed in the runtime image"
msgstr "安装在运行时映像中的功能列表"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "A feature can be registered in a xref:build-step-processors[Build Step Processors] method that produces a `FeatureBuildItem`:"
msgstr "一个特征可以在 link:#Build Step Processors[[Build Step Processors]] 方法中注册，产生一个 `FeatureBuildItem` 。"

#. type: Block title
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "TestProcessor#feature()"
msgstr "TestProcessor#feature()"

#: _guides/writing-extensions.adoc
msgid ""
"The name of the feature should only contain lowercase characters, words are separated by dash; e.g. `security-jpa`.\n"
"An extension should provide at most one feature and the name must be unique.\n"
"If multiple extensions register a feature of the same name the build fails."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"The feature name should also map to a label in the extension's `devtools/common/src/main/filtered/extensions.json` entry so that\n"
"the feature name displayed by the startup line matches a label that one can use to select the extension when creating a project\n"
"using the Quarkus maven plugin as shown in this example taken from the xref:rest-json.adoc[Writing JSON REST Services] guide where the `resteasy-reactive-jackson` feature is referenced:"
msgstr ""

#. type: Title =====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Capabilities"
msgstr "能力"

#: _guides/writing-extensions.adoc
msgid ""
"A _capability_ represents a technical capability that can be queried by other extensions.\n"
"An extension may provide multiple capabilities and multiple extensions can provide the same capability.\n"
"By default, capabilities are not displayed to users.\n"
"Capabilities should be used when checking for the presence of an extension rather than class path based checks."
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Capabilities can be registered in a xref:build-step-processors[Build Step Processors] method that produces a `CapabilityBuildItem`:"
msgstr "能力可以在 link:#Build Step Processors[[构建步骤处理器]] 方法中注册，产生一个 `CapabilityBuildItem` 。"

#. type: Block title
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "TestProcessor#capability()"
msgstr "TestProcessor#capability()"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Extensions can consume registered capabilities using the `Capabilities` build item:"
msgstr "扩展可以使用 `Capabilities` 构建项来消费已注册的能力。"

#. type: Block title
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "TestProcessor#doSomeCoolStuff()"
msgstr "TestProcessor#doSomeCoolStuff()"

#: _guides/writing-extensions.adoc
msgid ""
"Capabilities should follow the naming conventions of Java packages; e.g. `io.quarkus.security.jpa`.\n"
"Capabilities provided by core extensions should be listed in the `io.quarkus.deployment.Capability` enum and their name should always start with the `io.quarkus` prefix."
msgstr ""

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Bean Defining Annotations"
msgstr "Bean定义注解"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "The CDI layer processes CDI beans that are either explicitly registered or that it discovers based on bean defining annotations as defined in https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#bean_defining_annotations[2.5.1. Bean defining annotations]. You can expand this set of annotations to include annotations your extension processes using a `BeanDefiningAnnotationBuildItem` as shown in this `TestProcessor#registerBeanDefinningAnnotations` example:"
msgstr "CDI层处理显式注册的CDI Bean，或者它根据 link:https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#bean_defining_annotations[2.5.1] 中定义的Bean定义注释发现的CDI Bean。 link:https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#bean_defining_annotations[Bean定义注] 解。你可以扩展这组注解，以包括你的扩展使用 `BeanDefiningAnnotationBuildItem` 处理的注解，如这个 `TestProcessor#registerBeanDefinningAnnotations` 例子所示。"

#. type: Block title
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Register a Bean Defining Annotation"
msgstr "注册一个豆类的定义注释"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Register the annotation class and CDI default scope using the Jandex `DotName` class."
msgstr "使用Jandex `DotName` 类注册注解类和CDI默认范围。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "`ConfiguredBean` will be processed by the CDI layer the same as a bean annotated with the CDI standard @ApplicationScoped."
msgstr " `ConfiguredBean` 将被CDI层处理，就像用CDI标准@ApplicationScoped注解的bean一样。"

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Parsing Config to Objects"
msgstr "将配置解析为对象"

#: _guides/writing-extensions.adoc
msgid ""
"One of the main things an extension is likely to do is completely separate the configuration phase of behavior from the runtime phase.\n"
"Frameworks often do parsing/load of configuration on startup that can be done during build time to both reduce the runtime dependencies on frameworks like xml parsers as well as reducing the startup time the parsing incurs."
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "An example of parsing an XML config file using JAXB is shown in the `TestProcessor#parseServiceXmlConfig` method:"
msgstr "一个使用JAXB解析XML配置文件的例子显示在 `TestProcessor#parseServiceXmlConfig` 方法中。"

#. type: Block title
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Parsing an XML Configuration into Runtime XmlConfig Instance"
msgstr "将XML配置解析为运行时XmlConfig实例"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Look for a config.xml classpath resource"
msgstr "寻找一个config.xml classpath资源"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "If found, parse using JAXB context for `XmlConfig.class`"
msgstr "如果找到了，则使用JAXB上下文解析为 `XmlConfig.class` "

#. type: delimited block =
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "If there was no /config.xml resource available in the build environment, then a null `RuntimeServiceBuildItem` would be returned and no subsequent logic based on a `RuntimeServiceBuildItem` being produced would execute."
msgstr "如果在构建环境中没有/config.xml资源可用，那么将返回一个空的 `RuntimeServiceBuildItem` ，并且不会执行基于正在产生的 `RuntimeServiceBuildItem` 的后续逻辑。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Typically, one is loading a configuration to create some runtime component/service as `parseServiceXmlConfig` is doing. We will come back to the rest of the behavior in `parseServiceXmlConfig` in the following xref:manage-non-cdi-service[Manage Non-CDI Service] section."
msgstr "通常情况下，人们正在加载一个配置来创建一些运行时组件/服务，就像 `parseServiceXmlConfig` 。我们将在下面的 link:#Manage Non-CDI Service[[管理非CDI服务]] 部分再来讨论 `parseServiceXmlConfig` 中的其他行为。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "If for some reason you need to parse the config and use it in other build steps in an extension processor, you would need to create an `XmlConfigBuildItem` to pass the parsed XmlConfig instance around."
msgstr "如果出于某种原因，你需要解析配置并在扩展处理器的其他构建步骤中使用它，你将需要创建一个 `XmlConfigBuildItem` ，以传递解析后的XmlConfig实例。"

#: _guides/writing-extensions.adoc
msgid ""
"If you look at the XmlConfig code you will see that it does carry around the JAXB annotations. If you don't want these in the runtime image, you could clone the XmlConfig instance into some POJO object graph and then replace XmlConfig with the POJO class.\n"
"We will do this in xref:replacing-classes-in-native-image[Replacing Classes in the Native Image]."
msgstr ""

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Scanning Deployments Using Jandex"
msgstr "使用Jandex扫描部署情况"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "If your extension defines annotations or interfaces that mark beans needing to be processed, you can locate these beans using the Jandex API, a Java annotation indexer and offline reflection library. The following `TestProcessor#scanForBeans` method shows how to find the beans annotated with our `@TestAnnotation` that also implement the `IConfigConsumer` interface:"
msgstr "如果你的扩展定义了标记需要处理的Bean的注解或接口，你可以使用Jandex API，一个Java注解索引器和离线反射库来定位这些Bean。下面的 `TestProcessor#scanForBeans` 方法显示了如何找到用我们的 `@TestAnnotation` 注释的Bean，这些Bean也实现了 `IConfigConsumer` 接口。"

#. type: Block title
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Example Jandex Usage"
msgstr "Jandex使用实例"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Depend on a `BeanArchiveIndexBuildItem` to have the build step be run after the deployment has been indexed."
msgstr "依赖于一个 `BeanArchiveIndexBuildItem` ，以便在部署被索引后运行构建步骤。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Retrieve the index."
msgstr "检索索引。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Find all beans annotated with `@TestAnnotation`."
msgstr "查找所有注有 `@TestAnnotation` 的豆子。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Determine which of these beans also has the `IConfigConsumer` interface."
msgstr "确定这些豆子中哪个也有 `IConfigConsumer` 接口。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Save the bean class in a `TestBeanBuildItem` for use in a latter RUNTIME_INIT build step that will interact with the bean instances."
msgstr "将Bean类保存在 `TestBeanBuildItem` ，以便在后面的RUNTIME_INIT构建步骤中使用，该步骤将与Bean实例交互。"

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Interacting With Extension Beans"
msgstr "与扩展豆互动"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "You can use the `io.quarkus.arc.runtime.BeanContainer` interface to interact with your extension beans. The following `configureBeans` methods illustrate interacting with the beans scanned for in the previous section:"
msgstr "你可以使用 `io.quarkus.arc.runtime.BeanContainer` 接口来与你的扩展Bean进行交互。下面的 `configureBeans` 方法说明了与上一节中扫描到的Bean进行交互。"

#. type: Block title
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Using CDI BeanContainer Interface"
msgstr "使用CDI BeanContainer接口"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Consume the `TestBeanBuildItem`s produced from the scanning build step."
msgstr "吸收从扫描构建步骤中产生的`TestBeanBuildItem's。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Consume the `BeanContainerBuildItem` to order this build step to run after the CDI bean container has been created."
msgstr "消耗 `BeanContainerBuildItem` ，以便在CDI bean容器创建后命令这个构建步骤运行。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Call the runtime recorder to record the bean interactions."
msgstr "调用运行时记录器来记录Bean的交互。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Runtime recorder retrieves the bean using its type."
msgstr "运行时记录器使用其类型检索Bean。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Runtime recorder invokes the `IConfigConsumer#loadConfig(...)` method passing in the configuration objects with runtime information."
msgstr "运行时记录器调用 `IConfigConsumer#loadConfig(…​)` 方法，传入带有运行时信息的配置对象。"

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Manage Non-CDI Service"
msgstr "管理非CDI服务"

#: _guides/writing-extensions.adoc
msgid ""
"A common purpose for an extension is to integrate a non-CDI aware service into the CDI based Quarkus runtime.\n"
"Step 1 of this task is to load any configuration needed in a STATIC_INIT build step as we did in xref:parsing-config-to-objects[Parsing Config to Objects].\n"
"Now we need to create an instance of the service using the configuration.\n"
"Let's return to the `TestProcessor#parseServiceXmlConfig` method to see how this can be done."
msgstr ""

#. type: Block title
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Creating a Non-CDI Service"
msgstr "创建一个非CDI服务"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Call into the runtime recorder to record the creation of the service."
msgstr "调用到运行时记录器，记录服务的创建过程。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Using the parsed `XmlConfig` instance, create an instance of `RuntimeXmlConfigService` and wrap it in a `RuntimeValue`. Use a `RuntimeValue` wrapper for non-interface objects that are non-proxiable."
msgstr "使用解析过的 `XmlConfig` 实例，创建一个 `RuntimeXmlConfigService` 的实例，并将其包装在一个 `RuntimeValue` 中。对于不可代理的非界面对象，使用一个 `RuntimeValue` 包装器。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Wrap the return service value in a `RuntimeServiceBuildItem` for use in a RUNTIME_INIT build step that will start the service."
msgstr "将返回的服务值包裹在一个 `RuntimeServiceBuildItem` ，用于启动服务的RUNTIME_INIT构建步骤中。"

#. type: Title =====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Starting a Service"
msgstr "开始一项服务"

#: _guides/writing-extensions.adoc
msgid ""
"Now that you have recorded the creation of a service during the build phase, you need to record how to start the service at runtime during booting.\n"
"You do this with a RUNTIME_INIT build step as shown in the `TestProcessor#startRuntimeService` method."
msgstr ""

#. type: Block title
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Starting/Stopping a Non-CDI Service"
msgstr "开始/停止一项非CDI服务"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "We consume a ShutdownContextBuildItem to register the service shutdown."
msgstr "我们消耗一个ShutdownContextBuildItem来注册服务关机。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "We consume the previously initialized service captured in `RuntimeServiceBuildItem`."
msgstr "我们消耗先前在 `RuntimeServiceBuildItem` 中捕获的初始化服务。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Call the runtime recorder to record the service start invocation."
msgstr "调用运行时记录器来记录服务的启动调用。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Produce a `ServiceStartBuildItem` to indicate the startup of a service. See xref:startup-shutdown-events[Startup and Shutdown Events] for details."
msgstr "产生一个 `ServiceStartBuildItem` ，以表明一个服务的启动。详见 link:#Startup and Shutdown Events[【启动和关闭事件】] 。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Runtime recorder retrieves the service instance reference and calls its `startService` method."
msgstr "运行时记录器检索服务实例引用并调用其 `startService` 方法。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Runtime recorder registers an invocation of the service instance `stopService` method with the Quarkus `ShutdownContext`."
msgstr "运行时记录器将服务实例 `stopService` 方法的调用登记在Quarkus `ShutdownContext` 。"

#: _guides/writing-extensions.adoc
msgid ""
"The code for the `RuntimeXmlConfigService` can be viewed here:\n"
"{quarkus-blob-url}/integration-tests/test-extension/extension/runtime/src/main/java/io/quarkus/extest/runtime/RuntimeXmlConfigService.java[RuntimeXmlConfigService.java]"
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "The testcase for validating that the `RuntimeXmlConfigService` has started can be found in the `testRuntimeXmlConfigService` test of `ConfiguredBeanTest` and `NativeImageIT`."
msgstr "验证 `RuntimeXmlConfigService` 已经启动的测试案例可以在 `ConfiguredBeanTest` 和 `NativeImageIT` 的 `testRuntimeXmlConfigService` 测试中找到。"

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Startup and Shutdown Events"
msgstr "开机和关机事件"

#: _guides/writing-extensions.adoc
msgid ""
"The Quarkus container supports startup and shutdown lifecycle events to notify components of the container startup\n"
"and shutdown. There are CDI events fired that components can observe are illustrated in this example:"
msgstr ""

#. type: Block title
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Observing Container Startup"
msgstr "观察容器的启动"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Observe a `StartupEvent` to be notified the runtime has started."
msgstr "观察一个 `StartupEvent` ，以得到运行时间已经开始的通知。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Observe a `ShutdownEvent` to be notified when the runtime is going to shut down."
msgstr "观察一个 `ShutdownEvent` ，以便在运行时要关闭时得到通知。"

#: _guides/writing-extensions.adoc
msgid ""
"What is the relevance of startup and shutdown events for extension authors? We have already seen the use of a `ShutdownContext`\n"
"to register a callback to perform shutdown tasks in the xref:starting-service[Starting a Service] section.\n"
"These shutdown tasks would be called\n"
"after a `ShutdownEvent` had been sent."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"A `StartupEvent` is fired after all `io.quarkus.deployment.builditem.ServiceStartBuildItem` producers have been consumed.\n"
"The implication of this is that if an extension has services that application components would expect to have been\n"
"started when they observe a `StartupEvent`, the build steps that invoke the runtime code to start those services needs\n"
"to produce a `ServiceStartBuildItem` to ensure that the runtime code is run before the `StartupEvent` is sent. Recall that\n"
"we saw the production of a `ServiceStartBuildItem` in the previous section, and it is repeated here for clarity:"
msgstr ""

#. type: Block title
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Example of Producing a ServiceStartBuildItem"
msgstr "制作服务启动构建项目的例子"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Produce a `ServiceStartBuildItem` to indicate that this is a service starting step that needs to run before the `StartupEvent` is sent."
msgstr "产生一个 `ServiceStartBuildItem` ，表明这是一个服务启动步骤，需要在发送 `StartupEvent` 之前运行。"

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Register Resources for Use in Native Image"
msgstr "注册资源用于本地图像"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Not all configuration or resources can be consumed at build time. If you have classpath resources that the runtime needs to access, you need to inform the build phase that these resources need to be copied into the native image. This is done by producing one or more `NativeImageResourceBuildItem` or `NativeImageResourceBundleBuildItem` in the case of resource bundles. Examples of this are shown in this sample `registerNativeImageResources` build step:"
msgstr "并非所有的配置或资源都能在构建时被消耗。如果你有运行时需要访问的classpath资源，你需要通知构建阶段，这些资源需要被复制到本地镜像中。这可以通过产生一个或多个 `NativeImageResourceBuildItem` ，或者在资源包的情况下产生 `NativeImageResourceBundleBuildItem` 。这方面的例子显示在这个示例 `registerNativeImageResources` 构建步骤中。"

#. type: Block title
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Registering Resources and ResourceBundles"
msgstr "注册资源和资源包"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Indicate that the /security/runtime.keys classpath resource should be copied into native image."
msgstr "表示/security/runtime.keys classpath资源应被复制到本地镜像中。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Indicate that the `META-INF/my-descriptor.xml` resource should be copied into native image"
msgstr "表明 `META-INF/my-descriptor.xml` 资源应被复制到本地图像中。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Indicate that the \"jakarta.xml.bind.Messages\" resource bundle should be copied into native image."
msgstr "表示 \"javax.xml.bind.Messages \"资源包应被复制到本地镜像中。"

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Service files"
msgstr "服务文件"

#: _guides/writing-extensions.adoc
msgid ""
"If you are using `META-INF/services` files you need to register the files as resources so that your native image can find them,\n"
"but you also need to register each listed class for reflection so they can be instantiated or inspected at run-time:"
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"`ServiceProviderBuildItem` takes a list of service implementation classes as parameters: if\n"
"you are not reading them from the service file, make sure that they correspond to the service file contents\n"
"because the service file will still be read and used at run-time. This is not a substitute for writing a service\n"
"file."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"This only registers the implementation classes for instantiation via reflection (you will not be able\n"
"to inspect its fields and methods). If you need to do that, you can do it this way:"
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"While this is the easiest way to get your services running natively, it's less efficient than scanning the implementation\n"
"classes at build time and generating code that registers them at static-init time instead of relying on reflection."
msgstr ""

#: _guides/writing-extensions.adoc
msgid ""
"You can achieve that by adapting the previous build step to use a static-init recorder instead of registering\n"
"classes for reflection:"
msgstr ""

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Object Substitution"
msgstr "对象替代"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Objects created during the build phase that are passed into the runtime need to have a default constructor in order for them to be created and configured at startup of the runtime from the build time state. If an object does not have a default constructor you will see an error similar to the following during generation of the augmented artifacts:"
msgstr "在构建阶段创建的、被传入运行时的对象需要有一个默认的构造函数，以便在运行时启动时从构建时的状态创建和配置它们。如果一个对象没有默认的构造函数，在生成增强的工件时，你会看到一个类似于以下的错误。"

#. type: Block title
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "DSAPublicKey Serialization Error"
msgstr "DSAP公共密钥序列化错误"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "There is a `io.quarkus.runtime.ObjectSubstitution` interface that can be implemented to tell Quarkus how to handle such classes. An example implementation for the `DSAPublicKey` is shown here:"
msgstr "有一个 `io.quarkus.runtime.ObjectSubstitution` 接口，可以实现它来告诉Quarkus如何处理这样的类。这里显示了一个实现 `DSAPublicKey` 的例子。"

#. type: Block title
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "DSAPublicKeyObjectSubstitution Example"
msgstr "DSAPublicKeyObjectSubstitution示例"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "The serialize method takes the object without a default constructor and creates a `KeyProxy` that contains the information necessary to recreate the `DSAPublicKey`."
msgstr "序列化方法接收没有默认构造函数的对象，并创建一个 `KeyProxy` ，其中包含重新创建 `DSAPublicKey` 的必要信息。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "The deserialize method uses the `KeyProxy` to recreate the `DSAPublicKey` from its encoded form using the key factory."
msgstr "解序列化方法使用 `KeyProxy` ，使用密钥工厂从其编码形式重新创建 `DSAPublicKey` 。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "An extension registers this substitution by producing an `ObjectSubstitutionBuildItem` as shown in this `TestProcessor#loadDSAPublicKey` fragment:"
msgstr "一个扩展程序通过产生一个 `ObjectSubstitutionBuildItem` ，来登记这种替换，如这个 `TestProcessor#loadDSAPublicKey` 片段所示。"

#. type: Block title
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Registering an Object Substitution"
msgstr "注册一个对象替代物"

#. type: Title ====
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Replacing Classes in the Native Image"
msgstr "替换本地图像中的类"

#: _guides/writing-extensions.adoc
msgid ""
"The Graal SDK supports substitutions of classes in the native image.\n"
"An example of how one could replace the `XmlConfig/XmlData` classes with versions that have no JAXB annotation dependencies is shown in these example classes:"
msgstr ""

#. type: Block title
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Substitution of XmlConfig/XmlData Classes Example"
msgstr "替换XmlConfig/XmlData类的例子"

#. type: Title ==
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Ecosystem integration"
msgstr "生态系统整合"

#: _guides/writing-extensions.adoc
msgid ""
"Some extensions may be private, and some may wish to be part of the\n"
"broader Quarkus ecosystem, and available for community re-use.\n"
"Inclusion in the Quarkiverse Hub is a convenient mechanism for handling\n"
"continuous testing and publication.\n"
"The link:https://github.com/quarkiverse/quarkiverse/wiki#getting-an-extension-onboarded[Quarkiverse Hub wiki] has instructions\n"
"for on-boarding your extension."
msgstr ""

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Alternatively, continuous testing and publication can be handled manually."
msgstr "另外，连续的测试和发布也可以手动处理。"

#. type: Title ===
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Continuous testing of your extension"
msgstr "对你的扩展进行持续测试"

#: _guides/writing-extensions.adoc
msgid ""
"In order to make it easy for extension authors to test their extensions daily against the latest snapshot of Quarkus, Quarkus has introduced\n"
"the notion of Ecosystem CI. The Ecosystem CI link:https://github.com/quarkusio/quarkus-ecosystem-ci/blob/main/README.adoc[README]\n"
"has all the details on how to set up a GitHub Actions job to take advantage of this capability, while this link:https://www.youtube.com/watch?v=VpbRA1n0hHQ[video] provides an overview\n"
"of what the process looks like."
msgstr ""

#. type: Title ===
#: _guides/writing-extensions.adoc
#, fuzzy, no-wrap
msgid "Publish your extension in registry.quarkus.io"
msgstr "在registry.quarkus.io中发布你的扩展。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Before publishing your extension to the xref:tooling.adoc[Quarkus tooling], make sure that the following requirements are met:"
msgstr "在发布你的扩展到 link:tooling.html[Quarkus工具] 之前，请确保满足以下要求。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "The xref:extension-metadata.adoc#quarkus-extension-yaml[quarkus-extension.yaml] file (in the extension's `runtime/` module) has the minimum metadata set:"
msgstr " `quarkus-extension.yaml` 文件（在扩展的 `runtime/` 模块中）具有最小的元数据集。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "`name`"
msgstr " `name` "

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "`description` (unless you have it already set in the ``runtime/pom.xml``'s `<description>` element, which is the recommended approach)"
msgstr " `description` (除非你已经在 元素中设置了它，这是推荐的方法) `runtime/pom.xml’s `<description>` "

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Your extension is published in Maven Central"
msgstr "您的扩展已在Maven中心发布"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Your extension repository is configured to use the xref:ecosystem-ci[Ecosystem CI]."
msgstr "你的扩展库被配置为使用 link:#ecosystem-ci[Ecosystem CI] 。"

#. type: Plain text
#: _guides/writing-extensions.adoc
#, fuzzy
msgid "Then you must create a pull request adding a `your-extension.yaml` file in the `extensions/` directory in the link:https://github.com/quarkusio/quarkus-extension-catalog[Quarkus Extension Catalog]. The YAML must have the following structure:"
msgstr "然后你必须创建一个拉动请求，在 link:https://github.com/quarkusio/quarkus-extension-catalog[Quarkus扩展目录] 的 `extensions/` 目录中添加一个 `your-extension.yaml` 文件。该YAML必须具有以下结构。"

#. type: Plain text
#: _guides/writing-extensions.adoc
msgid "That's all. Once the pull request is merged, a scheduled job will check Maven Central for new versions and update the xref:extension-registry-user.adoc[Quarkus Extension Registry]."
msgstr ""
