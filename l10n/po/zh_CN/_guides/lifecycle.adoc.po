# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-25 13:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _guides/lifecycle.adoc
#, no-wrap
msgid "Application Initialization and Termination"
msgstr "应用程序的初始化和终止"

#: _guides/lifecycle.adoc
#, fuzzy
msgid ""
"You often need to execute custom actions when the application starts and clean up everything when the application stops.\n"
"This guide explains how to:"
msgstr "您经常需要在应用程序启动时执行自定义操作，并在应用程序停止时清理所有内容。本指南将介绍如何做到这一点："

#. type: Plain text
#: _guides/lifecycle.adoc
#, fuzzy
msgid "Write a Quarkus application with a main method"
msgstr "编写一个带有主方法的Quarkus应用程序"

#. type: Plain text
#: _guides/lifecycle.adoc
#, fuzzy
msgid "Write command mode applications that run a task and then terminate"
msgstr "编写命令模式的应用程序，运行一个任务，然后终止"

#. type: Plain text
#: _guides/lifecycle.adoc
#, fuzzy
msgid "Be notified when the application starts"
msgstr "应用开始时得到通知"

#. type: Plain text
#: _guides/lifecycle.adoc
#, fuzzy
msgid "Be notified when the application stops"
msgstr "当应用程序停止时被通知"

#. type: Title ==
#: _guides/lifecycle.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: _guides/lifecycle.adoc
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#: _guides/lifecycle.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#. type: Plain text
#: _guides/lifecycle.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: _guides/lifecycle.adoc
#, fuzzy
msgid "The solution is located in the `lifecycle-quickstart` link:{quickstarts-tree-url}/lifecycle-quickstart[directory]."
msgstr "该解决方案位于 `lifecycle-quickstart` {quickstarts-tree-url}/lifecycle-quickstart[目录]中。"

#. type: Title ==
#: _guides/lifecycle.adoc
#, no-wrap
msgid "Creating the Maven project"
msgstr "创建Maven项目"

#. type: Plain text
#: _guides/lifecycle.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的工程项目。用以下命令创建一个新项目："

#. type: Plain text
#: _guides/lifecycle.adoc
#, fuzzy
msgid "It generates:"
msgstr "它产生了。"

#. type: Plain text
#: _guides/lifecycle.adoc
msgid "the Maven structure"
msgstr "Maven的结构"

#. type: Plain text
#: _guides/lifecycle.adoc
#, fuzzy
msgid "example `Dockerfile` files for both `native` and `jvm` modes"
msgstr "示例 `Dockerfile` 文件，用于 `native` 和 `jvm` 模式。"

#. type: Plain text
#: _guides/lifecycle.adoc
#, fuzzy
msgid "the application configuration file"
msgstr "应用程序的配置文件"

#. type: Title ==
#: _guides/lifecycle.adoc
#, fuzzy, no-wrap
msgid "The main method"
msgstr "主要方法"

#: _guides/lifecycle.adoc
#, fuzzy
msgid ""
"By default, Quarkus will automatically generate a main method, that will bootstrap Quarkus and then just wait for\n"
"shutdown to be initiated. Let's provide our own main method:"
msgstr "默认情况下，Quarkus 会自动生成一个 main 方法，它将引导 Quarkus，然后等待关机。让我们提供自己的主方法："

#. type: Plain text
#: _guides/lifecycle.adoc
#, fuzzy
msgid "This annotation tells Quarkus to use this as the main method, unless it is overridden in the config"
msgstr "这个注解告诉Quarkus使用这个方法作为主方法，除非它在配置中被重写。"

#. type: Plain text
#: _guides/lifecycle.adoc
#, fuzzy
msgid "This launches Quarkus"
msgstr "这启动了Quarkus"

#: _guides/lifecycle.adoc
#, fuzzy
msgid ""
"This main class will bootstrap Quarkus and run it until it stops. This is no different to the automatically\n"
"generated main class, but has the advantage that you can just launch it directly from the IDE without needing\n"
"to run a Maven or Gradle command."
msgstr "这个主类将引导 Quarkus 并运行它，直到它停止为止。这与自动生成的主类没有什么不同，但它的优势在于，你可以直接从集成开发环境启动它，而无需运行 Maven 或 Gradle 命令。"

#: _guides/lifecycle.adoc
#, fuzzy
msgid ""
"It is not recommenced to do any business logic in this main method, as Quarkus has not been set up yet,\n"
"and Quarkus may run in a different ClassLoader. If you want to perform logic on startup use an `io.quarkus.runtime.QuarkusApplication`\n"
"as described below."
msgstr "不建议在此主方法中执行任何业务逻辑，因为 Quarkus 还没有设置好，而且 Quarkus 可能会在不同的 ClassLoader 中运行。如果你想在启动时执行逻辑，请使用 `io.quarkus.runtime.QuarkusApplication` ，如下所述。"

#: _guides/lifecycle.adoc
#, fuzzy
msgid ""
"If we want to actually perform business logic on startup (or write applications that complete a task and then exit)\n"
"we need to supply a `io.quarkus.runtime.QuarkusApplication` class to the run method. After Quarkus has been started\n"
"the `run` method of the application will be invoked. When this method returns the Quarkus application will exit."
msgstr "如果我们想在启动时实际执行业务逻辑（或编写完成任务后退出的应用程序），就需要为运行方法提供一个 `io.quarkus.runtime.QuarkusApplication` 类。Quarkus 启动后，应用程序的 `run` 方法将被调用。当该方法返回时，Quarkus 应用程序将退出。"

#: _guides/lifecycle.adoc
#, fuzzy
msgid ""
"If you want to perform logic on startup you should call `Quarkus.waitForExit()`, this method will wait until a shutdown\n"
"is requested (either from an external signal like when you press `Ctrl+C` or because a thread has called `Quarkus.asyncExit()`)."
msgstr "如果要在启动时执行逻辑，则应调用 `Quarkus.waitForExit()` ，该方法将一直等待关闭请求（可能是外部信号，如按下 `Ctrl+C` ，也可能是线程调用了 `Quarkus.asyncExit()` ）。"

#. type: Plain text
#: _guides/lifecycle.adoc
#, fuzzy
msgid "An example of what this looks like is below:"
msgstr "下面是一个例子，说明这看起来像什么。"

#. type: Title ===
#: _guides/lifecycle.adoc
#, fuzzy, no-wrap
msgid "Injecting the command line arguments"
msgstr "注入命令行参数"

#. type: Plain text
#: _guides/lifecycle.adoc
#, fuzzy
msgid "It is possible to inject the arguments that were passed in on the command line:"
msgstr "有可能注入命令行上传入的参数。"

#. type: Plain text
#: _guides/lifecycle.adoc
#, fuzzy
msgid "Command line arguments can be passed to the application through the `-D` flag with the property `quarkus.args`:"
msgstr "命令行参数可以通过 `-D` 标志传递给应用程序，其属性为 `quarkus.args` 。"

#. type: Plain text
#: _guides/lifecycle.adoc
#, fuzzy
msgid "For Quarkus dev mode:"
msgstr "对于Quarkus开发模式。"

#: _guides/lifecycle.adoc
#, fuzzy
msgid "CLI"
msgstr "CLI"

#: _guides/lifecycle.adoc
msgid "Maven"
msgstr "Maven"

#: _guides/lifecycle.adoc
msgid "Gradle"
msgstr "Gradle"

#. type: Plain text
#: _guides/lifecycle.adoc
#, fuzzy
msgid "For a runner jar: `java -Dquarkus.args=<cmd-args> -jar target/quarkus-app/quarkus-run.jar`"
msgstr "对于一个跑马灯的瓶子。 `java -Dquarkus.args=<cmd-args> -jar target/quarkus-app/quarkus-run.jar` "

#. type: Plain text
#: _guides/lifecycle.adoc
#, fuzzy
msgid "For a native executable: `./target/lifecycle-quickstart-1.0-SNAPSHOT-runner -Dquarkus.args=<cmd-args>`"
msgstr "对于一个本地可执行文件。 `./target/lifecycle-quickstart-1.0-SNAPSHOT-runner -Dquarkus.args=<cmd-args>` "

#. type: Title ==
#: _guides/lifecycle.adoc
#, fuzzy, no-wrap
msgid "Listening for startup and shutdown events"
msgstr "倾听启动和关闭事件"

#: _guides/lifecycle.adoc
#, fuzzy
msgid ""
"Create a new class named `AppLifecycleBean` (or pick another name) in the `org.acme.lifecycle` package, and copy the\n"
"following content:"
msgstr "在 `org.acme.lifecycle` 软件包中创建一个名为 `AppLifecycleBean` 的新类（或选择其他名称），并复制以下内容："

#. type: Plain text
#: _guides/lifecycle.adoc
#, fuzzy
msgid "Method called when the application is starting"
msgstr "应用程序启动时调用的方法"

#. type: Plain text
#: _guides/lifecycle.adoc
#, fuzzy
msgid "Method called when the application is terminating"
msgstr "应用程序终止时调用的方法"

#. type: Plain text
#: _guides/lifecycle.adoc
#, fuzzy
msgid "The events are also called in _dev mode_ between each redeployment."
msgstr "在每次重新部署之间，也会在 _开发模式_ 下调用这些事件。"

#. type: Plain text
#: _guides/lifecycle.adoc
#, fuzzy
msgid "The methods can access injected beans. Check the link:{quickstarts-blob-url}/lifecycle-quickstart/src/main/java/org/acme/lifecycle/AppLifecycleBean.java[AppLifecycleBean.java] class for details."
msgstr "这些方法可以访问注入的Bean。请查看{quickstarts-blob-url}/lifecycle-quickstart/src/main/java/org/acme/lifecycle/AppLifecycleBean.java[AppLifecycleBean.java]类的详细信息。"

#. type: Title ===
#: _guides/lifecycle.adoc
#, fuzzy, no-wrap
msgid "What is the difference from `@Initialized(ApplicationScoped.class)` and `@Destroyed(ApplicationScoped.class)`"
msgstr "与 `@Initialized(ApplicationScoped.class)` 和的区别是什么？ `@Destroyed(ApplicationScoped.class)` "

#: _guides/lifecycle.adoc
#, fuzzy
msgid ""
"In the JVM mode, there is no real difference, except that `StartupEvent` is always fired *after* `@Initialized(ApplicationScoped.class)` and `ShutdownEvent` is fired *before* `@Destroyed(ApplicationScoped.class)`.\n"
"For a native executable build, however, `@Initialized(ApplicationScoped.class)` is fired as *part of the native build process*, whereas `StartupEvent` is fired when the native image is executed.\n"
"See xref:writing-extensions.adoc#bootstrap-three-phases[Three Phases of Bootstrap and Quarkus Philosophy] for more details."
msgstr "在 JVM 模式下，除了 `StartupEvent` 总是在 `@Initialized(ApplicationScoped.class)` *之后* 启动、 `ShutdownEvent` 在 `@Destroyed(ApplicationScoped.class)` *之前* 启动之外，没有任何实际区别。不过，对于本地可执行文件的构建， `@Initialized(ApplicationScoped.class)` 是作为 *本地构建过程的一部分* 触发的，而 `StartupEvent` 则是在执行本地映像时触发的。更多详情，请参阅 xref:writing-extensions.adoc#bootstrap-three-phases[Bootstrap 的三个阶段和 Quarkus 哲学] 。"

#. type: Plain text
#: _guides/lifecycle.adoc
#, fuzzy
msgid "In CDI applications, an event with qualifier `@Initialized(ApplicationScoped.class)` is fired when the application context is initialized. See https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#application_context[the spec, window=\"_blank\"] for more info."
msgstr "在CDI应用程序中，当应用程序上下文被初始化时，一个带有限定词 `@Initialized(ApplicationScoped.class)` 的事件被触发。更多信息请参见 link:https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#application_context[规范, target=\"_blank\"] 。"

#. type: Title ===
#: _guides/lifecycle.adoc
#, fuzzy, no-wrap
msgid "Using `@Startup` to initialize a CDI bean at application startup"
msgstr "使用 `@Startup` ，在应用程序启动时初始化一个CDI bean"

#. type: Plain text
#: _guides/lifecycle.adoc
#, fuzzy
msgid "A bean represented by a class, producer method or field annotated with `@Startup` is initialized at application startup:"
msgstr "一个由类、生产者方法或字段注解的Bean代表的 `@Startup` ，在应用程序启动时被初始化。"

#. type: Plain text
#: _guides/lifecycle.adoc
#, fuzzy
msgid "For each bean annotated with `@Startup` a synthetic observer of `StartupEvent` is generated. The default priority is used."
msgstr "对于每个用 `@Startup` 注释的Bean，会生成一个 `StartupEvent` 的合成观察者。使用的是默认的优先级。"

#. type: Plain text
#: _guides/lifecycle.adoc
#, fuzzy
msgid "The bean constructor is called when the application starts and the resulting contextual instance is stored in the application context."
msgstr "当应用程序启动时，Bean构造函数被调用，产生的上下文实例被存储在应用程序上下文中。"

#. type: Plain text
#: _guides/lifecycle.adoc
#, fuzzy
msgid "`@Dependent` beans are destroyed immediately afterwards to follow the behavior of observers declared on `@Dependent` beans."
msgstr " `@Dependent` beans之后立即被销毁，以遵循在 beans上声明的观察员的行为。 `@Dependent` "

#. type: Plain text
#: _guides/lifecycle.adoc
#, fuzzy
msgid "If a class is annotated with `@Startup` but with no scope annotation then `@ApplicationScoped` is added automatically."
msgstr "如果一个类被注解了 `@Startup` ，但没有范围注解，那么 `@ApplicationScoped` ，就会被自动添加。"

#. type: Plain text
#: _guides/lifecycle.adoc
#, fuzzy
msgid "The `@Startup` annotation can be also declared on a non-static non-producer no-args method:"
msgstr "`@Startup` 注解也可以在非静态非生成器无参数方法上声明："

#. type: Plain text
#: _guides/lifecycle.adoc
#, fuzzy
msgid "The bean is created and the `init()` method is invoked upon the contextual instance when the application starts."
msgstr "当应用程序启动时，Bean构造函数被调用，产生的上下文实例被存储在应用程序上下文中。"

#. type: Title ===
#: _guides/lifecycle.adoc
#, fuzzy, no-wrap
msgid "Using `@Shutdown` to execute a business method of a CDI bean during application shutdown"
msgstr "使用 `@Startup` ，在应用程序启动时初始化一个CDI bean"

#: _guides/lifecycle.adoc
#, fuzzy
msgid ""
"The `@io.quarkus.runtime.Shutdown` annotation is used to mark a business method of a CDI bean that should be executed during application shutdown.\n"
"The annotated method must be non-private and non-static and declare no arguments.\n"
"The behavior is similar to a declaration of a `ShutdownEvent` observer.\n"
"The following examples are functionally equivalent."
msgstr "`@io.quarkus.runtime.Shutdown` 注解用于标记 CDI Bean 的业务方法，该方法应在应用程序关闭期间执行。注解的方法必须是非私有、非静态的，并且不声明参数。其行为类似于 `ShutdownEvent` 观察者的声明。以下示例在功能上是等价的。"

#. type: Title ==
#: _guides/lifecycle.adoc
#, no-wrap
msgid "Package and run the application"
msgstr "打包并运行该应用程序"

#. type: Plain text
#: _guides/lifecycle.adoc
msgid "Run the application with:"
msgstr "使用以下命令运行该应用程序:"

#: _guides/lifecycle.adoc
#, fuzzy
msgid ""
"The logged message is printed.\n"
"When the application is stopped, the second log message is printed."
msgstr "打印日志信息。当应用程序停止时，将打印第二条日志信息。"

#. type: Plain text
#: _guides/lifecycle.adoc
msgid "As usual, the application can be packaged using:"
msgstr "像往常一样，该应用程序可以用以下方式打包："

#. type: Plain text
#: _guides/lifecycle.adoc
#, fuzzy
msgid "and executed using `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr "并使用 `java -jar target/quarkus-app/quarkus-run.jar` 来执行。"

#. type: Plain text
#: _guides/lifecycle.adoc
#, fuzzy
msgid "You can also generate the native executable using:"
msgstr "你也可以用以下方法生成本地可执行文件。"

#. type: Title ==
#: _guides/lifecycle.adoc
#, fuzzy, no-wrap
msgid "Launch Modes"
msgstr "发射模式"

#: _guides/lifecycle.adoc
#, fuzzy
msgid ""
"Quarkus has 3 different launch modes, `NORMAL` (i.e. production), `DEVELOPMENT` and `TEST`. If you are running `quarkus:dev`\n"
"then the mode will be `DEVELOPMENT`, if you are running a JUnit test it will be `TEST`, otherwise it will be `NORMAL`."
msgstr "Quarkus 有 3 种不同的启动模式： `NORMAL` （即生产模式）、 `DEVELOPMENT` 和 `TEST` 。如果运行 `quarkus:dev` ，则模式为 `DEVELOPMENT` ，如果运行 JUnit 测试，则模式为 `TEST` ，否则模式为 `NORMAL` 。"

#: _guides/lifecycle.adoc
#, fuzzy
msgid ""
"Your application can get the launch mode by injecting the `io.quarkus.runtime.LaunchMode` enum into a CDI bean,\n"
"or by invoking the static method `io.quarkus.runtime.LaunchMode.current()`."
msgstr "您的应用程序可以通过将 `io.quarkus.runtime.LaunchMode` 枚举注入 CDI Bean 或调用静态方法 `io.quarkus.runtime.LaunchMode.current()` 来获取启动模式。"

#. type: Title ==
#: _guides/lifecycle.adoc
#, fuzzy, no-wrap
msgid "Graceful Shutdown"
msgstr "优雅的关机"

#: _guides/lifecycle.adoc
#, fuzzy
msgid ""
"Quarkus includes support for graceful shutdown, this allows Quarkus to wait for running requests to finish, up\n"
"till a set timeout. By default, this is disabled, however you can configure this by setting the `quarkus.shutdown.timeout`\n"
"config property. When this is set shutdown will not happen until all running requests have completed, or until\n"
"this timeout has elapsed. This config property is a duration, and can be set using the standard\n"
"`java.time.Duration` format, if only a number is specified it is interpreted as seconds."
msgstr "Quarkus 支持优雅关机，这允许 Quarkus 等待运行请求完成，直至设定的超时。默认情况下，该功能是禁用的，但你可以通过设置 `quarkus.shutdown.timeout` 配置属性来进行配置。设置该属性后，直到所有运行请求都已完成，或超时时间已过，关机才会发生。该配置属性是一个持续时间，可以使用标准的 `java.time.Duration` 格式进行设置，如果只指定一个数字，则将其解释为秒。"

#: _guides/lifecycle.adoc
#, fuzzy
msgid ""
"Extensions that accept requests need to add support for this on an individual basis. At the moment only the\n"
"HTTP extension supports this, so shutdown may still happen when messaging requests are active."
msgstr "接受请求的扩展需要单独对此添加支持。目前只有 HTTP 扩展支持这一点，因此当消息请求处于活动状态时，仍可能发生关机。"
